{"test_class": {"identifier": "IndexCopierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Random rnd = new Random();", "modifier": "private", "type": "Random", "declarator": "rnd = new Random()", "var_name": "rnd"}, {"original_string": "private int maxFileSize = 7896;", "modifier": "private", "type": "int", "declarator": "maxFileSize = 7896", "var_name": "maxFileSize"}, {"original_string": "private NodeState root = INITIAL_CONTENT;", "modifier": "private", "type": "NodeState", "declarator": "root = INITIAL_CONTENT", "var_name": "root"}, {"original_string": "private static final Clock CLOCK = new Clock.Virtual();", "modifier": "private static final", "type": "Clock", "declarator": "CLOCK = new Clock.Virtual()", "var_name": "CLOCK"}, {"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder(new File(\"target\"));", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder(new File(\"target\"))", "var_name": "temporaryFolder"}, {"original_string": "private NodeBuilder builder = root.builder();", "modifier": "private", "type": "NodeBuilder", "declarator": "builder = root.builder()", "var_name": "builder"}, {"original_string": "private String indexPath = \"/oak:index/test\";", "modifier": "private", "type": "String", "declarator": "indexPath = \"/oak:index/test\"", "var_name": "indexPath"}, {"original_string": "private final Closer closer = Closer.create();", "modifier": "private final", "type": "Closer", "declarator": "closer = Closer.create()", "var_name": "closer"}], "file": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexCopierTest.java"}, "test_case": {"identifier": "deleteCorruptedFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteCorruptedFile() throws Exception{\n        Directory baseDir = new RAMDirectory();\n        LuceneIndexDefinition defn = new LuceneIndexDefinition(root, builder.getNodeState(), \"/foo\");\n        RAMIndexCopier c1 = new RAMIndexCopier(baseDir, sameThreadExecutor(), getWorkDir());\n\n        Directory remote = new RAMDirectory(){\n            @Override\n            public IndexInput openInput(String name, IOContext context) throws IOException {\n                throw new IllegalStateException(\"boom\");\n            }\n        };\n\n        String fileName = \"failed.txt\";\n        Directory wrapped = c1.wrapForRead(\"/foo\", defn, remote, INDEX_DATA_CHILD_NAME);\n\n        byte[] t1 = writeFile(remote , fileName);\n\n        try {\n            readAndAssert(wrapped, fileName, t1);\n            fail(\"Read of file should have failed\");\n        } catch (IllegalStateException ignore){\n\n        }\n\n        assertFalse(c1.baseDir.fileExists(fileName));\n    }", "signature": "void deleteCorruptedFile()", "full_signature": "@Test public void deleteCorruptedFile()", "class_method_signature": "IndexCopierTest.deleteCorruptedFile()", "testcase": true, "constructor": false, "invocations": ["getNodeState", "sameThreadExecutor", "getWorkDir", "wrapForRead", "writeFile", "readAndAssert", "fail", "assertFalse", "fileExists"]}, "focal_class": {"identifier": "IndexCopier", "superclass": "", "interfaces": "implements CopyOnReadStatsMBean, Closeable", "fields": [{"original_string": "public static final Set<String> REMOTE_ONLY = ImmutableSet.of(\"segments.gen\");", "modifier": "public static final", "type": "Set<String>", "declarator": "REMOTE_ONLY = ImmutableSet.of(\"segments.gen\")", "var_name": "REMOTE_ONLY"}, {"original_string": "private static final int MAX_FAILURE_ENTRIES = 10000;", "modifier": "private static final", "type": "int", "declarator": "MAX_FAILURE_ENTRIES = 10000", "var_name": "MAX_FAILURE_ENTRIES"}, {"original_string": "private static final String WORK_DIR_NAME = \"indexWriterDir\";", "modifier": "private static final", "type": "String", "declarator": "WORK_DIR_NAME = \"indexWriterDir\"", "var_name": "WORK_DIR_NAME"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(IndexCopier.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(IndexCopier.class)", "var_name": "log"}, {"original_string": "private final Executor executor;", "modifier": "private final", "type": "Executor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final File indexWorkDir;", "modifier": "private final", "type": "File", "declarator": "indexWorkDir", "var_name": "indexWorkDir"}, {"original_string": "private final AtomicInteger readerLocalReadCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "readerLocalReadCount = new AtomicInteger()", "var_name": "readerLocalReadCount"}, {"original_string": "private final AtomicInteger writerLocalReadCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "writerLocalReadCount = new AtomicInteger()", "var_name": "writerLocalReadCount"}, {"original_string": "private final AtomicInteger readerRemoteReadCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "readerRemoteReadCount = new AtomicInteger()", "var_name": "readerRemoteReadCount"}, {"original_string": "private final AtomicInteger writerRemoteReadCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "writerRemoteReadCount = new AtomicInteger()", "var_name": "writerRemoteReadCount"}, {"original_string": "private final AtomicInteger invalidFileCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "invalidFileCount = new AtomicInteger()", "var_name": "invalidFileCount"}, {"original_string": "private final AtomicInteger deletedFileCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "deletedFileCount = new AtomicInteger()", "var_name": "deletedFileCount"}, {"original_string": "private final AtomicInteger scheduledForCopyCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "scheduledForCopyCount = new AtomicInteger()", "var_name": "scheduledForCopyCount"}, {"original_string": "private final AtomicInteger copyInProgressCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "copyInProgressCount = new AtomicInteger()", "var_name": "copyInProgressCount"}, {"original_string": "private final AtomicInteger maxCopyInProgressCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "maxCopyInProgressCount = new AtomicInteger()", "var_name": "maxCopyInProgressCount"}, {"original_string": "private final AtomicInteger maxScheduledForCopyCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "maxScheduledForCopyCount = new AtomicInteger()", "var_name": "maxScheduledForCopyCount"}, {"original_string": "private final AtomicInteger uploadCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "uploadCount = new AtomicInteger()", "var_name": "uploadCount"}, {"original_string": "private final AtomicInteger downloadCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "downloadCount = new AtomicInteger()", "var_name": "downloadCount"}, {"original_string": "private final AtomicLong copyInProgressSize = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "copyInProgressSize = new AtomicLong()", "var_name": "copyInProgressSize"}, {"original_string": "private final AtomicLong downloadSize = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "downloadSize = new AtomicLong()", "var_name": "downloadSize"}, {"original_string": "private final AtomicLong uploadSize = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "uploadSize = new AtomicLong()", "var_name": "uploadSize"}, {"original_string": "private final AtomicLong garbageCollectedSize = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "garbageCollectedSize = new AtomicLong()", "var_name": "garbageCollectedSize"}, {"original_string": "private final AtomicLong skippedFromUploadSize = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "skippedFromUploadSize = new AtomicLong()", "var_name": "skippedFromUploadSize"}, {"original_string": "private final AtomicLong downloadTime = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "downloadTime = new AtomicLong()", "var_name": "downloadTime"}, {"original_string": "private final AtomicLong uploadTime = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "uploadTime = new AtomicLong()", "var_name": "uploadTime"}, {"original_string": "private final Monitor copyCompletionMonitor = new Monitor();", "modifier": "private final", "type": "Monitor", "declarator": "copyCompletionMonitor = new Monitor()", "var_name": "copyCompletionMonitor"}, {"original_string": "private final Map<String, String> indexPathVersionMapping = newConcurrentMap();", "modifier": "private final", "type": "Map<String, String>", "declarator": "indexPathVersionMapping = newConcurrentMap()", "var_name": "indexPathVersionMapping"}, {"original_string": "private final ConcurrentMap<String, LocalIndexFile> failedToDeleteFiles = newConcurrentMap();", "modifier": "private final", "type": "ConcurrentMap<String, LocalIndexFile>", "declarator": "failedToDeleteFiles = newConcurrentMap()", "var_name": "failedToDeleteFiles"}, {"original_string": "private final Set<LocalIndexFile> copyInProgressFiles = Collections.newSetFromMap(new ConcurrentHashMap<LocalIndexFile, Boolean>());", "modifier": "private final", "type": "Set<LocalIndexFile>", "declarator": "copyInProgressFiles = Collections.newSetFromMap(new ConcurrentHashMap<LocalIndexFile, Boolean>())", "var_name": "copyInProgressFiles"}, {"original_string": "private final boolean prefetchEnabled;", "modifier": "private final", "type": "boolean", "declarator": "prefetchEnabled", "var_name": "prefetchEnabled"}, {"original_string": "private volatile boolean closed;", "modifier": "private volatile", "type": "boolean", "declarator": "closed", "var_name": "closed"}, {"original_string": "private final IndexRootDirectory indexRootDirectory;", "modifier": "private final", "type": "IndexRootDirectory", "declarator": "indexRootDirectory", "var_name": "indexRootDirectory"}, {"original_string": "private final Set<String> validatedIndexPaths = Sets.newConcurrentHashSet();", "modifier": "private final", "type": "Set<String>", "declarator": "validatedIndexPaths = Sets.newConcurrentHashSet()", "var_name": "validatedIndexPaths"}], "methods": [{"identifier": "IndexCopier", "parameters": "(Executor executor, File indexRootDir)", "modifiers": "public", "return": "", "signature": " IndexCopier(Executor executor, File indexRootDir)", "full_signature": "public  IndexCopier(Executor executor, File indexRootDir)", "class_method_signature": "IndexCopier.IndexCopier(Executor executor, File indexRootDir)", "testcase": false, "constructor": true}, {"identifier": "IndexCopier", "parameters": "(Executor executor, File indexRootDir, boolean prefetchEnabled)", "modifiers": "public", "return": "", "signature": " IndexCopier(Executor executor, File indexRootDir, boolean prefetchEnabled)", "full_signature": "public  IndexCopier(Executor executor, File indexRootDir, boolean prefetchEnabled)", "class_method_signature": "IndexCopier.IndexCopier(Executor executor, File indexRootDir, boolean prefetchEnabled)", "testcase": false, "constructor": true}, {"identifier": "wrapForRead", "parameters": "(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName)", "modifiers": "public", "return": "Directory", "signature": "Directory wrapForRead(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName)", "full_signature": "public Directory wrapForRead(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName)", "class_method_signature": "IndexCopier.wrapForRead(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName)", "testcase": false, "constructor": false}, {"identifier": "wrapForWrite", "parameters": "(LuceneIndexDefinition definition, Directory remote,\n                                  boolean reindexMode, String dirName,\n                                  COWDirectoryTracker cowDirectoryTracker)", "modifiers": "public", "return": "Directory", "signature": "Directory wrapForWrite(LuceneIndexDefinition definition, Directory remote,\n                                  boolean reindexMode, String dirName,\n                                  COWDirectoryTracker cowDirectoryTracker)", "full_signature": "public Directory wrapForWrite(LuceneIndexDefinition definition, Directory remote,\n                                  boolean reindexMode, String dirName,\n                                  COWDirectoryTracker cowDirectoryTracker)", "class_method_signature": "IndexCopier.wrapForWrite(LuceneIndexDefinition definition, Directory remote,\n                                  boolean reindexMode, String dirName,\n                                  COWDirectoryTracker cowDirectoryTracker)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "IndexCopier.close()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "IndexCopier.isClosed()", "testcase": false, "constructor": false}, {"identifier": "getIndexWorkDir", "parameters": "()", "modifiers": "", "return": "File", "signature": "File getIndexWorkDir()", "full_signature": " File getIndexWorkDir()", "class_method_signature": "IndexCopier.getIndexWorkDir()", "testcase": false, "constructor": false}, {"identifier": "getIndexRootDirectory", "parameters": "()", "modifiers": "", "return": "IndexRootDirectory", "signature": "IndexRootDirectory getIndexRootDirectory()", "full_signature": " IndexRootDirectory getIndexRootDirectory()", "class_method_signature": "IndexCopier.getIndexRootDirectory()", "testcase": false, "constructor": false}, {"identifier": "createLocalDirForIndexWriter", "parameters": "(LuceneIndexDefinition definition, String dirName,\n                                                     boolean reindexMode,\n                                                     COWDirectoryTracker cowDirectoryTracker)", "modifiers": "protected", "return": "Directory", "signature": "Directory createLocalDirForIndexWriter(LuceneIndexDefinition definition, String dirName,\n                                                     boolean reindexMode,\n                                                     COWDirectoryTracker cowDirectoryTracker)", "full_signature": "protected Directory createLocalDirForIndexWriter(LuceneIndexDefinition definition, String dirName,\n                                                     boolean reindexMode,\n                                                     COWDirectoryTracker cowDirectoryTracker)", "class_method_signature": "IndexCopier.createLocalDirForIndexWriter(LuceneIndexDefinition definition, String dirName,\n                                                     boolean reindexMode,\n                                                     COWDirectoryTracker cowDirectoryTracker)", "testcase": false, "constructor": false}, {"identifier": "createLocalDirForIndexReader", "parameters": "(String indexPath, LuceneIndexDefinition definition, String dirName)", "modifiers": "protected", "return": "Directory", "signature": "Directory createLocalDirForIndexReader(String indexPath, LuceneIndexDefinition definition, String dirName)", "full_signature": "protected Directory createLocalDirForIndexReader(String indexPath, LuceneIndexDefinition definition, String dirName)", "class_method_signature": "IndexCopier.createLocalDirForIndexReader(String indexPath, LuceneIndexDefinition definition, String dirName)", "testcase": false, "constructor": false}, {"identifier": "getIndexDir", "parameters": "(IndexDefinition definition, String indexPath, String dirName)", "modifiers": "public", "return": "File", "signature": "File getIndexDir(IndexDefinition definition, String indexPath, String dirName)", "full_signature": "public File getIndexDir(IndexDefinition definition, String indexPath, String dirName)", "class_method_signature": "IndexCopier.getIndexDir(IndexDefinition definition, String indexPath, String dirName)", "testcase": false, "constructor": false}, {"identifier": "getFailedToDeleteFiles", "parameters": "()", "modifiers": "", "return": "Map<String, LocalIndexFile>", "signature": "Map<String, LocalIndexFile> getFailedToDeleteFiles()", "full_signature": " Map<String, LocalIndexFile> getFailedToDeleteFiles()", "class_method_signature": "IndexCopier.getFailedToDeleteFiles()", "testcase": false, "constructor": false}, {"identifier": "failedToDelete", "parameters": "(LocalIndexFile file)", "modifiers": "private", "return": "void", "signature": "void failedToDelete(LocalIndexFile file)", "full_signature": "private void failedToDelete(LocalIndexFile file)", "class_method_signature": "IndexCopier.failedToDelete(LocalIndexFile file)", "testcase": false, "constructor": false}, {"identifier": "successfullyDeleted", "parameters": "(LocalIndexFile file, boolean fileExisted)", "modifiers": "private", "return": "void", "signature": "void successfullyDeleted(LocalIndexFile file, boolean fileExisted)", "full_signature": "private void successfullyDeleted(LocalIndexFile file, boolean fileExisted)", "class_method_signature": "IndexCopier.successfullyDeleted(LocalIndexFile file, boolean fileExisted)", "testcase": false, "constructor": false}, {"identifier": "checkIntegrity", "parameters": "(String indexPath, Directory local, Directory remote)", "modifiers": "private", "return": "void", "signature": "void checkIntegrity(String indexPath, Directory local, Directory remote)", "full_signature": "private void checkIntegrity(String indexPath, Directory local, Directory remote)", "class_method_signature": "IndexCopier.checkIntegrity(String indexPath, Directory local, Directory remote)", "testcase": false, "constructor": false}, {"identifier": "initializerWorkDir", "parameters": "(File indexRootDir)", "modifiers": "private static", "return": "File", "signature": "File initializerWorkDir(File indexRootDir)", "full_signature": "private static File initializerWorkDir(File indexRootDir)", "class_method_signature": "IndexCopier.initializerWorkDir(File indexRootDir)", "testcase": false, "constructor": false}, {"identifier": "createIndexPathKey", "parameters": "(String indexPath, String dirName)", "modifiers": "private static", "return": "String", "signature": "String createIndexPathKey(String indexPath, String dirName)", "full_signature": "private static String createIndexPathKey(String indexPath, String dirName)", "class_method_signature": "IndexCopier.createIndexPathKey(String indexPath, String dirName)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(Directory dir, String fileName, boolean copiedFromRemote)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteFile(Directory dir, String fileName, boolean copiedFromRemote)", "full_signature": "public boolean deleteFile(Directory dir, String fileName, boolean copiedFromRemote)", "class_method_signature": "IndexCopier.deleteFile(Directory dir, String fileName, boolean copiedFromRemote)", "testcase": false, "constructor": false}, {"identifier": "getNewestLocalFSTimestampFor", "parameters": "(Set<String> names, Directory localDir)", "modifiers": "public static", "return": "long", "signature": "long getNewestLocalFSTimestampFor(Set<String> names, Directory localDir)", "full_signature": "public static long getNewestLocalFSTimestampFor(Set<String> names, Directory localDir)", "class_method_signature": "IndexCopier.getNewestLocalFSTimestampFor(Set<String> names, Directory localDir)", "testcase": false, "constructor": false}, {"identifier": "isFileModifiedBefore", "parameters": "(String name, Directory localDir, long millis)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileModifiedBefore(String name, Directory localDir, long millis)", "full_signature": "public static boolean isFileModifiedBefore(String name, Directory localDir, long millis)", "class_method_signature": "IndexCopier.isFileModifiedBefore(String name, Directory localDir, long millis)", "testcase": false, "constructor": false}, {"identifier": "startCopy", "parameters": "(LocalIndexFile file)", "modifiers": "public", "return": "long", "signature": "long startCopy(LocalIndexFile file)", "full_signature": "public long startCopy(LocalIndexFile file)", "class_method_signature": "IndexCopier.startCopy(LocalIndexFile file)", "testcase": false, "constructor": false}, {"identifier": "isCopyInProgress", "parameters": "(LocalIndexFile file)", "modifiers": "public", "return": "boolean", "signature": "boolean isCopyInProgress(LocalIndexFile file)", "full_signature": "public boolean isCopyInProgress(LocalIndexFile file)", "class_method_signature": "IndexCopier.isCopyInProgress(LocalIndexFile file)", "testcase": false, "constructor": false}, {"identifier": "waitForCopyCompletion", "parameters": "(LocalIndexFile file, long timeoutMillis)", "modifiers": "public", "return": "void", "signature": "void waitForCopyCompletion(LocalIndexFile file, long timeoutMillis)", "full_signature": "public void waitForCopyCompletion(LocalIndexFile file, long timeoutMillis)", "class_method_signature": "IndexCopier.waitForCopyCompletion(LocalIndexFile file, long timeoutMillis)", "testcase": false, "constructor": false}, {"identifier": "doneCopy", "parameters": "(LocalIndexFile file, long start)", "modifiers": "public", "return": "void", "signature": "void doneCopy(LocalIndexFile file, long start)", "full_signature": "public void doneCopy(LocalIndexFile file, long start)", "class_method_signature": "IndexCopier.doneCopy(LocalIndexFile file, long start)", "testcase": false, "constructor": false}, {"identifier": "updateMaxScheduled", "parameters": "(int val)", "modifiers": "private", "return": "void", "signature": "void updateMaxScheduled(int val)", "full_signature": "private void updateMaxScheduled(int val)", "class_method_signature": "IndexCopier.updateMaxScheduled(int val)", "testcase": false, "constructor": false}, {"identifier": "updateMaxInProgress", "parameters": "(int val)", "modifiers": "private", "return": "void", "signature": "void updateMaxInProgress(int val)", "full_signature": "private void updateMaxInProgress(int val)", "class_method_signature": "IndexCopier.updateMaxInProgress(int val)", "testcase": false, "constructor": false}, {"identifier": "skippedUpload", "parameters": "(long skippedFilesSize)", "modifiers": "public", "return": "void", "signature": "void skippedUpload(long skippedFilesSize)", "full_signature": "public void skippedUpload(long skippedFilesSize)", "class_method_signature": "IndexCopier.skippedUpload(long skippedFilesSize)", "testcase": false, "constructor": false}, {"identifier": "scheduledForCopy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void scheduledForCopy()", "full_signature": "public void scheduledForCopy()", "class_method_signature": "IndexCopier.scheduledForCopy()", "testcase": false, "constructor": false}, {"identifier": "copyDone", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void copyDone()", "full_signature": "public void copyDone()", "class_method_signature": "IndexCopier.copyDone()", "testcase": false, "constructor": false}, {"identifier": "readFromRemote", "parameters": "(boolean reader)", "modifiers": "public", "return": "void", "signature": "void readFromRemote(boolean reader)", "full_signature": "public void readFromRemote(boolean reader)", "class_method_signature": "IndexCopier.readFromRemote(boolean reader)", "testcase": false, "constructor": false}, {"identifier": "readFromLocal", "parameters": "(boolean reader)", "modifiers": "public", "return": "void", "signature": "void readFromLocal(boolean reader)", "full_signature": "public void readFromLocal(boolean reader)", "class_method_signature": "IndexCopier.readFromLocal(boolean reader)", "testcase": false, "constructor": false}, {"identifier": "foundInvalidFile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void foundInvalidFile()", "full_signature": "public void foundInvalidFile()", "class_method_signature": "IndexCopier.foundInvalidFile()", "testcase": false, "constructor": false}, {"identifier": "getIndexPathMapping", "parameters": "()", "modifiers": "@Override public", "return": "TabularData", "signature": "TabularData getIndexPathMapping()", "full_signature": "@Override public TabularData getIndexPathMapping()", "class_method_signature": "IndexCopier.getIndexPathMapping()", "testcase": false, "constructor": false}, {"identifier": "isPrefetchEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPrefetchEnabled()", "full_signature": "@Override public boolean isPrefetchEnabled()", "class_method_signature": "IndexCopier.isPrefetchEnabled()", "testcase": false, "constructor": false}, {"identifier": "getReaderLocalReadCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getReaderLocalReadCount()", "full_signature": "@Override public int getReaderLocalReadCount()", "class_method_signature": "IndexCopier.getReaderLocalReadCount()", "testcase": false, "constructor": false}, {"identifier": "getReaderRemoteReadCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getReaderRemoteReadCount()", "full_signature": "@Override public int getReaderRemoteReadCount()", "class_method_signature": "IndexCopier.getReaderRemoteReadCount()", "testcase": false, "constructor": false}, {"identifier": "getWriterLocalReadCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getWriterLocalReadCount()", "full_signature": "@Override public int getWriterLocalReadCount()", "class_method_signature": "IndexCopier.getWriterLocalReadCount()", "testcase": false, "constructor": false}, {"identifier": "getWriterRemoteReadCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getWriterRemoteReadCount()", "full_signature": "@Override public int getWriterRemoteReadCount()", "class_method_signature": "IndexCopier.getWriterRemoteReadCount()", "testcase": false, "constructor": false}, {"identifier": "getInvalidFileCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInvalidFileCount()", "full_signature": "public int getInvalidFileCount()", "class_method_signature": "IndexCopier.getInvalidFileCount()", "testcase": false, "constructor": false}, {"identifier": "getDownloadSize", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDownloadSize()", "full_signature": "@Override public String getDownloadSize()", "class_method_signature": "IndexCopier.getDownloadSize()", "testcase": false, "constructor": false}, {"identifier": "getDownloadTime", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getDownloadTime()", "full_signature": "@Override public long getDownloadTime()", "class_method_signature": "IndexCopier.getDownloadTime()", "testcase": false, "constructor": false}, {"identifier": "getDownloadCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDownloadCount()", "full_signature": "@Override public int getDownloadCount()", "class_method_signature": "IndexCopier.getDownloadCount()", "testcase": false, "constructor": false}, {"identifier": "getUploadCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getUploadCount()", "full_signature": "@Override public int getUploadCount()", "class_method_signature": "IndexCopier.getUploadCount()", "testcase": false, "constructor": false}, {"identifier": "getUploadSize", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUploadSize()", "full_signature": "@Override public String getUploadSize()", "class_method_signature": "IndexCopier.getUploadSize()", "testcase": false, "constructor": false}, {"identifier": "getUploadTime", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getUploadTime()", "full_signature": "@Override public long getUploadTime()", "class_method_signature": "IndexCopier.getUploadTime()", "testcase": false, "constructor": false}, {"identifier": "getLocalIndexSize", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLocalIndexSize()", "full_signature": "@Override public String getLocalIndexSize()", "class_method_signature": "IndexCopier.getLocalIndexSize()", "testcase": false, "constructor": false}, {"identifier": "getLocalIndexDirSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLocalIndexDirSize()", "full_signature": "@Override public long getLocalIndexDirSize()", "class_method_signature": "IndexCopier.getLocalIndexDirSize()", "testcase": false, "constructor": false}, {"identifier": "getGarbageDetails", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getGarbageDetails()", "full_signature": "@Override public String[] getGarbageDetails()", "class_method_signature": "IndexCopier.getGarbageDetails()", "testcase": false, "constructor": false}, {"identifier": "getGarbageSize", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getGarbageSize()", "full_signature": "@Override public String getGarbageSize()", "class_method_signature": "IndexCopier.getGarbageSize()", "testcase": false, "constructor": false}, {"identifier": "getScheduledForCopyCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getScheduledForCopyCount()", "full_signature": "@Override public int getScheduledForCopyCount()", "class_method_signature": "IndexCopier.getScheduledForCopyCount()", "testcase": false, "constructor": false}, {"identifier": "getCopyInProgressCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCopyInProgressCount()", "full_signature": "@Override public int getCopyInProgressCount()", "class_method_signature": "IndexCopier.getCopyInProgressCount()", "testcase": false, "constructor": false}, {"identifier": "getCopyInProgressSize", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCopyInProgressSize()", "full_signature": "@Override public String getCopyInProgressSize()", "class_method_signature": "IndexCopier.getCopyInProgressSize()", "testcase": false, "constructor": false}, {"identifier": "getMaxCopyInProgressCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxCopyInProgressCount()", "full_signature": "@Override public int getMaxCopyInProgressCount()", "class_method_signature": "IndexCopier.getMaxCopyInProgressCount()", "testcase": false, "constructor": false}, {"identifier": "getMaxScheduledForCopyCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxScheduledForCopyCount()", "full_signature": "@Override public int getMaxScheduledForCopyCount()", "class_method_signature": "IndexCopier.getMaxScheduledForCopyCount()", "testcase": false, "constructor": false}, {"identifier": "getSkippedFromUploadSize", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSkippedFromUploadSize()", "full_signature": "public String getSkippedFromUploadSize()", "class_method_signature": "IndexCopier.getSkippedFromUploadSize()", "testcase": false, "constructor": false}, {"identifier": "getCopyInProgressDetails", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getCopyInProgressDetails()", "full_signature": "@Override public String[] getCopyInProgressDetails()", "class_method_signature": "IndexCopier.getCopyInProgressDetails()", "testcase": false, "constructor": false}, {"identifier": "getDeletedFilesCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDeletedFilesCount()", "full_signature": "@Override public int getDeletedFilesCount()", "class_method_signature": "IndexCopier.getDeletedFilesCount()", "testcase": false, "constructor": false}, {"identifier": "getGarbageCollectedSize", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getGarbageCollectedSize()", "full_signature": "@Override public String getGarbageCollectedSize()", "class_method_signature": "IndexCopier.getGarbageCollectedSize()", "testcase": false, "constructor": false}], "file": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexCopier.java"}, "focal_method": {"identifier": "wrapForRead", "parameters": "(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName)", "modifiers": "public", "return": "Directory", "body": "public Directory wrapForRead(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName) throws IOException {\n        Directory local = createLocalDirForIndexReader(indexPath, definition, dirName);\n        checkIntegrity(indexPath, local, remote);\n        return new CopyOnReadDirectory(this, remote, local, prefetchEnabled, indexPath, executor);\n    }", "signature": "Directory wrapForRead(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName)", "full_signature": "public Directory wrapForRead(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName)", "class_method_signature": "IndexCopier.wrapForRead(String indexPath, LuceneIndexDefinition definition,\n                                 Directory remote, String dirName)", "testcase": false, "constructor": false, "invocations": ["createLocalDirForIndexReader", "checkIntegrity"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}