{"test_class": {"identifier": "CompositeAuthorizationConfigurationTest", "superclass": "extends AbstractSecurityTest", "interfaces": "", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/composite/CompositeAuthorizationConfigurationTest.java"}, "test_case": {"identifier": "testEmptyGetRestrictionProvider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyGetRestrictionProvider() {\n        assertSame(RestrictionProvider.EMPTY, getCompositeConfiguration().getRestrictionProvider());\n    }", "signature": "void testEmptyGetRestrictionProvider()", "full_signature": "@Test public void testEmptyGetRestrictionProvider()", "class_method_signature": "CompositeAuthorizationConfigurationTest.testEmptyGetRestrictionProvider()", "testcase": true, "constructor": false, "invocations": ["assertSame", "getRestrictionProvider", "getCompositeConfiguration"]}, "focal_class": {"identifier": "CompositeAuthorizationConfiguration", "superclass": "extends CompositeConfiguration<AuthorizationConfiguration>", "interfaces": "implements AuthorizationConfiguration", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CompositeAuthorizationConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CompositeAuthorizationConfiguration.class)", "var_name": "log"}, {"original_string": "private CompositionType compositionType = CompositionType.AND;", "modifier": "private", "type": "CompositionType", "declarator": "compositionType = CompositionType.AND", "var_name": "compositionType"}, {"original_string": "private AggregationFilter aggregationFilter = AggregationFilter.DEFAULT;", "modifier": "private", "type": "AggregationFilter", "declarator": "aggregationFilter = AggregationFilter.DEFAULT", "var_name": "aggregationFilter"}], "methods": [{"identifier": "CompositeAuthorizationConfiguration", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompositeAuthorizationConfiguration()", "full_signature": "public  CompositeAuthorizationConfiguration()", "class_method_signature": "CompositeAuthorizationConfiguration.CompositeAuthorizationConfiguration()", "testcase": false, "constructor": true}, {"identifier": "CompositeAuthorizationConfiguration", "parameters": "(@NotNull SecurityProvider securityProvider)", "modifiers": "public", "return": "", "signature": " CompositeAuthorizationConfiguration(@NotNull SecurityProvider securityProvider)", "full_signature": "public  CompositeAuthorizationConfiguration(@NotNull SecurityProvider securityProvider)", "class_method_signature": "CompositeAuthorizationConfiguration.CompositeAuthorizationConfiguration(@NotNull SecurityProvider securityProvider)", "testcase": false, "constructor": true}, {"identifier": "withCompositionType", "parameters": "(@Nullable String ct)", "modifiers": "public", "return": "void", "signature": "void withCompositionType(@Nullable String ct)", "full_signature": "public void withCompositionType(@Nullable String ct)", "class_method_signature": "CompositeAuthorizationConfiguration.withCompositionType(@Nullable String ct)", "testcase": false, "constructor": false}, {"identifier": "withAggregationFilter", "parameters": "(@NotNull AggregationFilter aggregationFilter)", "modifiers": "public", "return": "void", "signature": "void withAggregationFilter(@NotNull AggregationFilter aggregationFilter)", "full_signature": "public void withAggregationFilter(@NotNull AggregationFilter aggregationFilter)", "class_method_signature": "CompositeAuthorizationConfiguration.withAggregationFilter(@NotNull AggregationFilter aggregationFilter)", "testcase": false, "constructor": false}, {"identifier": "getAccessControlManager", "parameters": "(@NotNull final Root root,\n                                                        @NotNull final NamePathMapper namePathMapper)", "modifiers": "@NotNull @Override public", "return": "AccessControlManager", "signature": "AccessControlManager getAccessControlManager(@NotNull final Root root,\n                                                        @NotNull final NamePathMapper namePathMapper)", "full_signature": "@NotNull @Override public AccessControlManager getAccessControlManager(@NotNull final Root root,\n                                                        @NotNull final NamePathMapper namePathMapper)", "class_method_signature": "CompositeAuthorizationConfiguration.getAccessControlManager(@NotNull final Root root,\n                                                        @NotNull final NamePathMapper namePathMapper)", "testcase": false, "constructor": false}, {"identifier": "getRestrictionProvider", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RestrictionProvider", "signature": "RestrictionProvider getRestrictionProvider()", "full_signature": "@NotNull @Override public RestrictionProvider getRestrictionProvider()", "class_method_signature": "CompositeAuthorizationConfiguration.getRestrictionProvider()", "testcase": false, "constructor": false}, {"identifier": "getPermissionProvider", "parameters": "(@NotNull final Root root,\n                                                    @NotNull final String workspaceName,\n                                                    @NotNull final Set<Principal> principals)", "modifiers": "@NotNull @Override public", "return": "PermissionProvider", "signature": "PermissionProvider getPermissionProvider(@NotNull final Root root,\n                                                    @NotNull final String workspaceName,\n                                                    @NotNull final Set<Principal> principals)", "full_signature": "@NotNull @Override public PermissionProvider getPermissionProvider(@NotNull final Root root,\n                                                    @NotNull final String workspaceName,\n                                                    @NotNull final Set<Principal> principals)", "class_method_signature": "CompositeAuthorizationConfiguration.getPermissionProvider(@NotNull final Root root,\n                                                    @NotNull final String workspaceName,\n                                                    @NotNull final Set<Principal> principals)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/composite/CompositeAuthorizationConfiguration.java"}, "focal_method": {"identifier": "getRestrictionProvider", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RestrictionProvider", "body": "@NotNull\n    @Override\n    public RestrictionProvider getRestrictionProvider() {\n        List<AuthorizationConfiguration> configurations = getConfigurations();\n        switch (configurations.size()) {\n            case 0: return RestrictionProvider.EMPTY;\n            case 1: return configurations.get(0).getRestrictionProvider();\n            default:\n                Set<RestrictionProvider> rps = new LinkedHashSet<>(configurations.size());\n                for (AuthorizationConfiguration c : configurations) {\n                    RestrictionProvider rp = c.getRestrictionProvider();\n                    if (RestrictionProvider.EMPTY != rp) {\n                        rps.add(rp);\n                    }\n                }\n                return CompositeRestrictionProvider.newInstance(rps);\n        }\n    }", "signature": "RestrictionProvider getRestrictionProvider()", "full_signature": "@NotNull @Override public RestrictionProvider getRestrictionProvider()", "class_method_signature": "CompositeAuthorizationConfiguration.getRestrictionProvider()", "testcase": false, "constructor": false, "invocations": ["getConfigurations", "size", "getRestrictionProvider", "get", "size", "getRestrictionProvider", "add", "newInstance"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}