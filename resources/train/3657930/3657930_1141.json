{"test_class": {"identifier": "ACLTest", "superclass": "extends AbstractAccessControlTest", "interfaces": "implements PrivilegeConstants, AccessControlConstants", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/ACLTest.java"}, "test_case": {"identifier": "testNewEntriesAppendedAtEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewEntriesAppendedAtEnd() throws Exception {\n        Privilege[] readPriv = privilegesFromNames(JCR_READ);\n        Privilege[] writePriv = privilegesFromNames(JCR_WRITE);\n\n        acl.addEntry(testPrincipal, readPriv, true);\n        acl.addEntry(principalManager.getEveryone(), readPriv, true);\n        acl.addEntry(testPrincipal, writePriv, false);\n\n        AccessControlEntry[] entries = acl.getAccessControlEntries();\n\n        assertEquals(3, entries.length);\n\n        JackrabbitAccessControlEntry last = (JackrabbitAccessControlEntry) entries[2];\n        assertEquals(testPrincipal, last.getPrincipal());\n        assertACE(last, false, writePriv);\n    }", "signature": "void testNewEntriesAppendedAtEnd()", "full_signature": "@Test public void testNewEntriesAppendedAtEnd()", "class_method_signature": "ACLTest.testNewEntriesAppendedAtEnd()", "testcase": true, "constructor": false, "invocations": ["privilegesFromNames", "privilegesFromNames", "addEntry", "addEntry", "getEveryone", "addEntry", "getAccessControlEntries", "assertEquals", "assertEquals", "getPrincipal", "assertACE"]}, "focal_class": {"identifier": "ACL", "superclass": "extends AbstractAccessControlList", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ACL.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ACL.class)", "var_name": "log"}, {"original_string": "private final List<ACE> entries = new ArrayList<>();", "modifier": "private final", "type": "List<ACE>", "declarator": "entries = new ArrayList<>()", "var_name": "entries"}], "methods": [{"identifier": "ACL", "parameters": "(@Nullable String oakPath, @Nullable List<ACE> entries,\n        @NotNull NamePathMapper namePathMapper)", "modifiers": "", "return": "", "signature": " ACL(@Nullable String oakPath, @Nullable List<ACE> entries,\n        @NotNull NamePathMapper namePathMapper)", "full_signature": "  ACL(@Nullable String oakPath, @Nullable List<ACE> entries,\n        @NotNull NamePathMapper namePathMapper)", "class_method_signature": "ACL.ACL(@Nullable String oakPath, @Nullable List<ACE> entries,\n        @NotNull NamePathMapper namePathMapper)", "testcase": false, "constructor": true}, {"identifier": "createACE", "parameters": "(Principal principal, PrivilegeBits privilegeBits, boolean isAllow, Set<Restriction> restrictions)", "modifiers": "abstract", "return": "ACE", "signature": "ACE createACE(Principal principal, PrivilegeBits privilegeBits, boolean isAllow, Set<Restriction> restrictions)", "full_signature": "abstract ACE createACE(Principal principal, PrivilegeBits privilegeBits, boolean isAllow, Set<Restriction> restrictions)", "class_method_signature": "ACL.createACE(Principal principal, PrivilegeBits privilegeBits, boolean isAllow, Set<Restriction> restrictions)", "testcase": false, "constructor": false}, {"identifier": "checkValidPrincipal", "parameters": "(Principal principal)", "modifiers": "abstract", "return": "boolean", "signature": "boolean checkValidPrincipal(Principal principal)", "full_signature": "abstract boolean checkValidPrincipal(Principal principal)", "class_method_signature": "ACL.checkValidPrincipal(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getPrivilegeManager", "parameters": "()", "modifiers": "abstract", "return": "PrivilegeManager", "signature": "PrivilegeManager getPrivilegeManager()", "full_signature": "abstract PrivilegeManager getPrivilegeManager()", "class_method_signature": "ACL.getPrivilegeManager()", "testcase": false, "constructor": false}, {"identifier": "getPrivilegeBits", "parameters": "(Privilege[] privileges)", "modifiers": "abstract", "return": "PrivilegeBits", "signature": "PrivilegeBits getPrivilegeBits(Privilege[] privileges)", "full_signature": "abstract PrivilegeBits getPrivilegeBits(Privilege[] privileges)", "class_method_signature": "ACL.getPrivilegeBits(Privilege[] privileges)", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<ACE>", "signature": "List<ACE> getEntries()", "full_signature": "@NotNull @Override public List<ACE> getEntries()", "class_method_signature": "ACL.getEntries()", "testcase": false, "constructor": false}, {"identifier": "removeAccessControlEntry", "parameters": "(AccessControlEntry ace)", "modifiers": "@Override public", "return": "void", "signature": "void removeAccessControlEntry(AccessControlEntry ace)", "full_signature": "@Override public void removeAccessControlEntry(AccessControlEntry ace)", "class_method_signature": "ACL.removeAccessControlEntry(AccessControlEntry ace)", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions)", "full_signature": "@Override public boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions)", "class_method_signature": "ACL.addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions)", "testcase": false, "constructor": false}, {"identifier": "orderBefore", "parameters": "(@NotNull AccessControlEntry srcEntry, @Nullable AccessControlEntry destEntry)", "modifiers": "@Override public", "return": "void", "signature": "void orderBefore(@NotNull AccessControlEntry srcEntry, @Nullable AccessControlEntry destEntry)", "full_signature": "@Override public void orderBefore(@NotNull AccessControlEntry srcEntry, @Nullable AccessControlEntry destEntry)", "class_method_signature": "ACL.orderBefore(@NotNull AccessControlEntry srcEntry, @Nullable AccessControlEntry destEntry)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ACL.toString()", "testcase": false, "constructor": false}, {"identifier": "checkACE", "parameters": "(AccessControlEntry entry)", "modifiers": "private static", "return": "ACE", "signature": "ACE checkACE(AccessControlEntry entry)", "full_signature": "private static ACE checkACE(AccessControlEntry entry)", "class_method_signature": "ACL.checkACE(AccessControlEntry entry)", "testcase": false, "constructor": false}, {"identifier": "internalAddEntry", "parameters": "(@NotNull ACE entry)", "modifiers": "private", "return": "boolean", "signature": "boolean internalAddEntry(@NotNull ACE entry)", "full_signature": "private boolean internalAddEntry(@NotNull ACE entry)", "class_method_signature": "ACL.internalAddEntry(@NotNull ACE entry)", "testcase": false, "constructor": false}, {"identifier": "createACE", "parameters": "(@NotNull ACE existing, @NotNull PrivilegeBits newPrivilegeBits)", "modifiers": "private", "return": "ACE", "signature": "ACE createACE(@NotNull ACE existing, @NotNull PrivilegeBits newPrivilegeBits)", "full_signature": "private ACE createACE(@NotNull ACE existing, @NotNull PrivilegeBits newPrivilegeBits)", "class_method_signature": "ACL.createACE(@NotNull ACE existing, @NotNull PrivilegeBits newPrivilegeBits)", "testcase": false, "constructor": false}, {"identifier": "validateRestrictions", "parameters": "(@NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "modifiers": "@NotNull private", "return": "Set<Restriction>", "signature": "Set<Restriction> validateRestrictions(@NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "full_signature": "@NotNull private Set<Restriction> validateRestrictions(@NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "class_method_signature": "ACL.validateRestrictions(@NotNull Map<String, Value> restrictions, @NotNull Map<String, Value[]> mvRestrictions)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/ACL.java"}, "focal_method": {"identifier": "addEntry", "parameters": "(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions) throws RepositoryException {\n        if (privileges == null || privileges.length == 0) {\n            throw new AccessControlException(\"Privileges may not be null nor an empty array\");\n        }\n        for (Privilege p : privileges) {\n            Privilege pv = getPrivilegeManager().getPrivilege(p.getName());\n            if (pv.isAbstract()) {\n                throw new AccessControlException(\"Privilege \" + p + \" is abstract.\");\n            }\n        }\n\n        if (!checkValidPrincipal(principal)) {\n            return false;\n        }\n\n        Set<Restriction> rs = validateRestrictions((restrictions == null) ? Collections.emptyMap() : restrictions, (mvRestrictions == null) ? Collections.emptyMap() : mvRestrictions);\n\n        ACE entry = createACE(principal, getPrivilegeBits(privileges), isAllow, rs);\n        if (entries.contains(entry)) {\n            log.debug(\"Entry is already contained in policy -> no modification.\");\n            return false;\n        } else {\n            return internalAddEntry(entry);\n        }\n    }", "signature": "boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions)", "full_signature": "@Override public boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions)", "class_method_signature": "ACL.addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges,\n                            boolean isAllow, @Nullable Map<String, Value> restrictions,\n                            @Nullable Map<String, Value[]> mvRestrictions)", "testcase": false, "constructor": false, "invocations": ["getPrivilege", "getPrivilegeManager", "getName", "isAbstract", "checkValidPrincipal", "validateRestrictions", "emptyMap", "emptyMap", "createACE", "getPrivilegeBits", "contains", "debug", "internalAddEntry"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}