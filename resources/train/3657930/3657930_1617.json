{"test_class": {"identifier": "CursorsTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/index/CursorsTest.java"}, "test_case": {"identifier": "intersectionCursor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void intersectionCursor() {\n        QueryEngineSettings s = new QueryEngineSettings();\n        Cursor a = new SimpleCursor(\"1:\", \"/b\", \"/c\", \"/e\", \"/e\", \"/c\");\n        Cursor b = new SimpleCursor(\"2:\", \"/a\", \"/c\", \"/d\", \"/b\", \"/c\");\n        Cursor c = Cursors.newIntersectionCursor(a, b, s);\n        assertEquals(\"1:/b, 1:/c\", list(c));\n        assertFalse(c.hasNext());\n    }", "signature": "void intersectionCursor()", "full_signature": "@Test public void intersectionCursor()", "class_method_signature": "CursorsTest.intersectionCursor()", "testcase": true, "constructor": false, "invocations": ["newIntersectionCursor", "assertEquals", "list", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "Cursors", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Cursors", "parameters": "()", "modifiers": "private", "return": "", "signature": " Cursors()", "full_signature": "private  Cursors()", "class_method_signature": "Cursors.Cursors()", "testcase": false, "constructor": true}, {"identifier": "checkMemoryLimit", "parameters": "(long count, QueryLimits settings)", "modifiers": "public static", "return": "void", "signature": "void checkMemoryLimit(long count, QueryLimits settings)", "full_signature": "public static void checkMemoryLimit(long count, QueryLimits settings)", "class_method_signature": "Cursors.checkMemoryLimit(long count, QueryLimits settings)", "testcase": false, "constructor": false}, {"identifier": "checkReadLimit", "parameters": "(long count, QueryLimits settings)", "modifiers": "public static", "return": "void", "signature": "void checkReadLimit(long count, QueryLimits settings)", "full_signature": "public static void checkReadLimit(long count, QueryLimits settings)", "class_method_signature": "Cursors.checkReadLimit(long count, QueryLimits settings)", "testcase": false, "constructor": false}, {"identifier": "newIntersectionCursor", "parameters": "(Cursor a, Cursor b, QueryLimits settings)", "modifiers": "public static", "return": "Cursor", "signature": "Cursor newIntersectionCursor(Cursor a, Cursor b, QueryLimits settings)", "full_signature": "public static Cursor newIntersectionCursor(Cursor a, Cursor b, QueryLimits settings)", "class_method_signature": "Cursors.newIntersectionCursor(Cursor a, Cursor b, QueryLimits settings)", "testcase": false, "constructor": false}, {"identifier": "newConcatCursor", "parameters": "(List<Cursor> cursors, QueryLimits settings)", "modifiers": "public static", "return": "Cursor", "signature": "Cursor newConcatCursor(List<Cursor> cursors, QueryLimits settings)", "full_signature": "public static Cursor newConcatCursor(List<Cursor> cursors, QueryLimits settings)", "class_method_signature": "Cursors.newConcatCursor(List<Cursor> cursors, QueryLimits settings)", "testcase": false, "constructor": false}, {"identifier": "newPathCursor", "parameters": "(Iterable<String> paths, QueryLimits settings)", "modifiers": "public static", "return": "Cursor", "signature": "Cursor newPathCursor(Iterable<String> paths, QueryLimits settings)", "full_signature": "public static Cursor newPathCursor(Iterable<String> paths, QueryLimits settings)", "class_method_signature": "Cursors.newPathCursor(Iterable<String> paths, QueryLimits settings)", "testcase": false, "constructor": false}, {"identifier": "newPathCursorDistinct", "parameters": "(Iterable<String> paths, QueryLimits settings)", "modifiers": "public static", "return": "Cursor", "signature": "Cursor newPathCursorDistinct(Iterable<String> paths, QueryLimits settings)", "full_signature": "public static Cursor newPathCursorDistinct(Iterable<String> paths, QueryLimits settings)", "class_method_signature": "Cursors.newPathCursorDistinct(Iterable<String> paths, QueryLimits settings)", "testcase": false, "constructor": false}, {"identifier": "newTraversingCursor", "parameters": "(Filter filter,\n                                             NodeState rootState)", "modifiers": "public static", "return": "Cursor", "signature": "Cursor newTraversingCursor(Filter filter,\n                                             NodeState rootState)", "full_signature": "public static Cursor newTraversingCursor(Filter filter,\n                                             NodeState rootState)", "class_method_signature": "Cursors.newTraversingCursor(Filter filter,\n                                             NodeState rootState)", "testcase": false, "constructor": false}, {"identifier": "newAncestorCursor", "parameters": "(Cursor c, int level, QueryLimits settings)", "modifiers": "public static", "return": "Cursor", "signature": "Cursor newAncestorCursor(Cursor c, int level, QueryLimits settings)", "full_signature": "public static Cursor newAncestorCursor(Cursor c, int level, QueryLimits settings)", "class_method_signature": "Cursors.newAncestorCursor(Cursor c, int level, QueryLimits settings)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/Cursors.java"}, "focal_method": {"identifier": "newIntersectionCursor", "parameters": "(Cursor a, Cursor b, QueryLimits settings)", "modifiers": "public static", "return": "Cursor", "body": "public static Cursor newIntersectionCursor(Cursor a, Cursor b, QueryLimits settings) {\n        return new IntersectionCursor(a, b, settings);\n    }", "signature": "Cursor newIntersectionCursor(Cursor a, Cursor b, QueryLimits settings)", "full_signature": "public static Cursor newIntersectionCursor(Cursor a, Cursor b, QueryLimits settings)", "class_method_signature": "Cursors.newIntersectionCursor(Cursor a, Cursor b, QueryLimits settings)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}