{"test_class": {"identifier": "EmptyCugTreePermissionTest", "superclass": "extends AbstractCugTest", "interfaces": "", "fields": [{"original_string": "private CugPermissionProvider pp;", "modifier": "private", "type": "CugPermissionProvider", "declarator": "pp", "var_name": "pp"}, {"original_string": "private EmptyCugTreePermission tp;", "modifier": "private", "type": "EmptyCugTreePermission", "declarator": "tp", "var_name": "tp"}, {"original_string": "private NodeState rootState;", "modifier": "private", "type": "NodeState", "declarator": "rootState", "var_name": "rootState"}], "file": "oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/EmptyCugTreePermissionTest.java"}, "test_case": {"identifier": "testIsGranted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsGranted() {\n        assertFalse(tp.isGranted(Permissions.ALL));\n        assertFalse(tp.isGranted(Permissions.WRITE));\n        assertFalse(tp.isGranted(Permissions.READ));\n    }", "signature": "void testIsGranted()", "full_signature": "@Test public void testIsGranted()", "class_method_signature": "EmptyCugTreePermissionTest.testIsGranted()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isGranted", "assertFalse", "isGranted", "assertFalse", "isGranted"]}, "focal_class": {"identifier": "EmptyCugTreePermission", "superclass": "extends AbstractTreePermission", "interfaces": "", "fields": [], "methods": [{"identifier": "EmptyCugTreePermission", "parameters": "(@NotNull Tree tree, @NotNull TreeType type, @NotNull CugPermissionProvider permissionProvider)", "modifiers": "", "return": "", "signature": " EmptyCugTreePermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull CugPermissionProvider permissionProvider)", "full_signature": "  EmptyCugTreePermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull CugPermissionProvider permissionProvider)", "class_method_signature": "EmptyCugTreePermission.EmptyCugTreePermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull CugPermissionProvider permissionProvider)", "testcase": false, "constructor": true}, {"identifier": "canRead", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canRead()", "full_signature": "@Override public boolean canRead()", "class_method_signature": "EmptyCugTreePermission.canRead()", "testcase": false, "constructor": false}, {"identifier": "canRead", "parameters": "(@NotNull PropertyState property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canRead(@NotNull PropertyState property)", "full_signature": "@Override public boolean canRead(@NotNull PropertyState property)", "class_method_signature": "EmptyCugTreePermission.canRead(@NotNull PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "canReadAll", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canReadAll()", "full_signature": "@Override public boolean canReadAll()", "class_method_signature": "EmptyCugTreePermission.canReadAll()", "testcase": false, "constructor": false}, {"identifier": "canReadProperties", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canReadProperties()", "full_signature": "@Override public boolean canReadProperties()", "class_method_signature": "EmptyCugTreePermission.canReadProperties()", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(long permissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(long permissions)", "full_signature": "@Override public boolean isGranted(long permissions)", "class_method_signature": "EmptyCugTreePermission.isGranted(long permissions)", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(long permissions, @NotNull PropertyState property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(long permissions, @NotNull PropertyState property)", "full_signature": "@Override public boolean isGranted(long permissions, @NotNull PropertyState property)", "class_method_signature": "EmptyCugTreePermission.isGranted(long permissions, @NotNull PropertyState property)", "testcase": false, "constructor": false}], "file": "oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/EmptyCugTreePermission.java"}, "focal_method": {"identifier": "isGranted", "parameters": "(long permissions)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isGranted(long permissions) {\n        return false;\n    }", "signature": "boolean isGranted(long permissions)", "full_signature": "@Override public boolean isGranted(long permissions)", "class_method_signature": "EmptyCugTreePermission.isGranted(long permissions)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}