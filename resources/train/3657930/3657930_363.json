{"test_class": {"identifier": "IndexConsistencyCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NodeState rootState = InitialContentHelper.INITIAL_CONTENT;", "modifier": "private", "type": "NodeState", "declarator": "rootState = InitialContentHelper.INITIAL_CONTENT", "var_name": "rootState"}, {"original_string": "private NodeBuilder idx = new LuceneIndexDefinitionBuilder().build().builder();", "modifier": "private", "type": "NodeBuilder", "declarator": "idx = new LuceneIndexDefinitionBuilder().build().builder()", "var_name": "idx"}, {"original_string": "@Rule\n    public final TemporaryFolder temporaryFolder = new TemporaryFolder(new File(\"target\"));", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder(new File(\"target\"))", "var_name": "temporaryFolder"}], "file": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/plugins/index/lucene/directory/IndexConsistencyCheckerTest.java"}, "test_case": {"identifier": "blobsWithSizeMismatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void blobsWithSizeMismatch() throws Exception{\n        FailingBlob failingBlob = new FailingBlob(\"foo\", true);\n\n        idx.child(\":index\").setProperty(\"foo\", failingBlob);\n\n        NodeBuilder builder = EMPTY_NODE.builder();\n        builder.setChildNode(\"a\", idx.getNodeState());\n\n        IndexConsistencyChecker checker = new IndexConsistencyChecker(builder.getNodeState(), \"/a\", temporaryFolder.getRoot());\n        Result result = checker.check(Level.BLOBS_ONLY);\n\n        assertFalse(result.clean);\n        assertFalse(result.missingBlobs);\n        assertTrue(result.blobSizeMismatch);\n        assertEquals(1, result.invalidBlobIds.size());\n\n        dumpResult(result);\n    }", "signature": "void blobsWithSizeMismatch()", "full_signature": "@Test public void blobsWithSizeMismatch()", "class_method_signature": "IndexConsistencyCheckerTest.blobsWithSizeMismatch()", "testcase": true, "constructor": false, "invocations": ["setProperty", "child", "builder", "setChildNode", "getNodeState", "getNodeState", "getRoot", "check", "assertFalse", "assertFalse", "assertTrue", "assertEquals", "size", "dumpResult"]}, "focal_class": {"identifier": "IndexConsistencyChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private final NodeState rootState;", "modifier": "private final", "type": "NodeState", "declarator": "rootState", "var_name": "rootState"}, {"original_string": "private final String indexPath;", "modifier": "private final", "type": "String", "declarator": "indexPath", "var_name": "indexPath"}, {"original_string": "private final File workDirRoot;", "modifier": "private final", "type": "File", "declarator": "workDirRoot", "var_name": "workDirRoot"}, {"original_string": "private File workDir;", "modifier": "private", "type": "File", "declarator": "workDir", "var_name": "workDir"}, {"original_string": "private PrintStream printStream;", "modifier": "private", "type": "PrintStream", "declarator": "printStream", "var_name": "printStream"}, {"original_string": "private boolean verbose;", "modifier": "private", "type": "boolean", "declarator": "verbose", "var_name": "verbose"}], "methods": [{"identifier": "IndexConsistencyChecker", "parameters": "(NodeState rootState, String indexPath, File workDirRoot)", "modifiers": "public", "return": "", "signature": " IndexConsistencyChecker(NodeState rootState, String indexPath, File workDirRoot)", "full_signature": "public  IndexConsistencyChecker(NodeState rootState, String indexPath, File workDirRoot)", "class_method_signature": "IndexConsistencyChecker.IndexConsistencyChecker(NodeState rootState, String indexPath, File workDirRoot)", "testcase": false, "constructor": true}, {"identifier": "setPrintStream", "parameters": "(PrintStream printStream)", "modifiers": "public", "return": "void", "signature": "void setPrintStream(PrintStream printStream)", "full_signature": "public void setPrintStream(PrintStream printStream)", "class_method_signature": "IndexConsistencyChecker.setPrintStream(PrintStream printStream)", "testcase": false, "constructor": false}, {"identifier": "setVerbose", "parameters": "(boolean verbose)", "modifiers": "public", "return": "void", "signature": "void setVerbose(boolean verbose)", "full_signature": "public void setVerbose(boolean verbose)", "class_method_signature": "IndexConsistencyChecker.setVerbose(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Level level)", "modifiers": "public", "return": "Result", "signature": "Result check(Level level)", "full_signature": "public Result check(Level level)", "class_method_signature": "IndexConsistencyChecker.check(Level level)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Level level, boolean cleanWorkDir)", "modifiers": "public", "return": "Result", "signature": "Result check(Level level, boolean cleanWorkDir)", "full_signature": "public Result check(Level level, boolean cleanWorkDir)", "class_method_signature": "IndexConsistencyChecker.check(Level level, boolean cleanWorkDir)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(Level level, boolean cleanWorkDir, Closer closer)", "modifiers": "private", "return": "Result", "signature": "Result check(Level level, boolean cleanWorkDir, Closer closer)", "full_signature": "private Result check(Level level, boolean cleanWorkDir, Closer closer)", "class_method_signature": "IndexConsistencyChecker.check(Level level, boolean cleanWorkDir, Closer closer)", "testcase": false, "constructor": false}, {"identifier": "checkIndex", "parameters": "(Result result, Closer closer)", "modifiers": "private", "return": "void", "signature": "void checkIndex(Result result, Closer closer)", "full_signature": "private void checkIndex(Result result, Closer closer)", "class_method_signature": "IndexConsistencyChecker.checkIndex(Result result, Closer closer)", "testcase": false, "constructor": false}, {"identifier": "checkIndexDirectory", "parameters": "(DirectoryStatus dirStatus, NodeState idx, LuceneIndexDefinition defn,\n                                     File workDir, String dirName, Closer closer)", "modifiers": "private", "return": "void", "signature": "void checkIndexDirectory(DirectoryStatus dirStatus, NodeState idx, LuceneIndexDefinition defn,\n                                     File workDir, String dirName, Closer closer)", "full_signature": "private void checkIndexDirectory(DirectoryStatus dirStatus, NodeState idx, LuceneIndexDefinition defn,\n                                     File workDir, String dirName, Closer closer)", "class_method_signature": "IndexConsistencyChecker.checkIndexDirectory(DirectoryStatus dirStatus, NodeState idx, LuceneIndexDefinition defn,\n                                     File workDir, String dirName, Closer closer)", "testcase": false, "constructor": false}, {"identifier": "checkBlobs", "parameters": "(Result result)", "modifiers": "private", "return": "void", "signature": "void checkBlobs(Result result)", "full_signature": "private void checkBlobs(Result result)", "class_method_signature": "IndexConsistencyChecker.checkBlobs(Result result)", "testcase": false, "constructor": false}, {"identifier": "checkBlobs", "parameters": "(Result result, Tree tree)", "modifiers": "private", "return": "void", "signature": "void checkBlobs(Result result, Tree tree)", "full_signature": "private void checkBlobs(Result result, Tree tree)", "class_method_signature": "IndexConsistencyChecker.checkBlobs(Result result, Tree tree)", "testcase": false, "constructor": false}, {"identifier": "checkBlob", "parameters": "(String propName, Blob blob, Tree tree, Result result)", "modifiers": "private", "return": "void", "signature": "void checkBlob(String propName, Blob blob, Tree tree, Result result)", "full_signature": "private void checkBlob(String propName, Blob blob, Tree tree, Result result)", "class_method_signature": "IndexConsistencyChecker.checkBlob(String propName, Blob blob, Tree tree, Result result)", "testcase": false, "constructor": false}, {"identifier": "createWorkDir", "parameters": "(File parent, String name)", "modifiers": "private static", "return": "File", "signature": "File createWorkDir(File parent, String name)", "full_signature": "private static File createWorkDir(File parent, String name)", "class_method_signature": "IndexConsistencyChecker.createWorkDir(File parent, String name)", "testcase": false, "constructor": false}], "file": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/directory/IndexConsistencyChecker.java"}, "focal_method": {"identifier": "check", "parameters": "(Level level)", "modifiers": "public", "return": "Result", "body": "public Result check(Level level) throws IOException {\n        return check(level, true);\n    }", "signature": "Result check(Level level)", "full_signature": "public Result check(Level level)", "class_method_signature": "IndexConsistencyChecker.check(Level level)", "testcase": false, "constructor": false, "invocations": ["check"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}