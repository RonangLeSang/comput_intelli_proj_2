{"test_class": {"identifier": "StatisticManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "executorService = Executors.newSingleThreadScheduledExecutor()", "var_name": "executorService"}], "file": "oak-core-spi/src/test/java/org/apache/jackrabbit/oak/stats/StatisticManagerTest.java"}, "test_case": {"identifier": "setupWithCustom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setupWithCustom() throws Exception {\n        Whiteboard wb = new DefaultWhiteboard();\n        wb.register(StatisticsProvider.class, StatisticsProvider.NOOP, null);\n        StatisticManager mgr = new StatisticManager(wb, executorService);\n\n        MeterStats meterStats = mgr.getMeter(Type.QUERY_COUNT);\n        meterStats.mark(5);\n\n        //TODO Not easy to do any asserts on call. Need to figure out a way\n    }", "signature": "void setupWithCustom()", "full_signature": "@Test public void setupWithCustom()", "class_method_signature": "StatisticManagerTest.setupWithCustom()", "testcase": true, "constructor": false, "invocations": ["register", "getMeter", "mark"]}, "focal_class": {"identifier": "StatisticManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final QueryStatImpl queryStat = new QueryStatImpl();", "modifier": "private final", "type": "QueryStatImpl", "declarator": "queryStat = new QueryStatImpl()", "var_name": "queryStat"}, {"original_string": "private final StatisticsProvider repoStats;", "modifier": "private final", "type": "StatisticsProvider", "declarator": "repoStats", "var_name": "repoStats"}, {"original_string": "private final TimeSeriesMax maxQueueLength;", "modifier": "private final", "type": "TimeSeriesMax", "declarator": "maxQueueLength", "var_name": "maxQueueLength"}, {"original_string": "private final CounterStats maxQueueLengthCounter;", "modifier": "private final", "type": "CounterStats", "declarator": "maxQueueLengthCounter", "var_name": "maxQueueLengthCounter"}, {"original_string": "private final CompositeRegistration registration;", "modifier": "private final", "type": "CompositeRegistration", "declarator": "registration", "var_name": "registration"}, {"original_string": "private static final EnumSet<Type> NOOP_METRIC_TYPES = EnumSet.of(\n            Type.SESSION_READ_COUNTER,\n            Type.SESSION_READ_DURATION,\n            Type.SESSION_WRITE_DURATION,\n            Type.QUERY_COUNT\n    );", "modifier": "private static final", "type": "EnumSet<Type>", "declarator": "NOOP_METRIC_TYPES = EnumSet.of(\n            Type.SESSION_READ_COUNTER,\n            Type.SESSION_READ_DURATION,\n            Type.SESSION_WRITE_DURATION,\n            Type.QUERY_COUNT\n    )", "var_name": "NOOP_METRIC_TYPES"}], "methods": [{"identifier": "StatisticManager", "parameters": "(Whiteboard whiteboard, ScheduledExecutorService executor)", "modifiers": "public", "return": "", "signature": " StatisticManager(Whiteboard whiteboard, ScheduledExecutorService executor)", "full_signature": "public  StatisticManager(Whiteboard whiteboard, ScheduledExecutorService executor)", "class_method_signature": "StatisticManager.StatisticManager(Whiteboard whiteboard, ScheduledExecutorService executor)", "testcase": false, "constructor": true}, {"identifier": "logQueryEvaluationTime", "parameters": "(String language, String statement, long millis)", "modifiers": "public", "return": "void", "signature": "void logQueryEvaluationTime(String language, String statement, long millis)", "full_signature": "public void logQueryEvaluationTime(String language, String statement, long millis)", "class_method_signature": "StatisticManager.logQueryEvaluationTime(String language, String statement, long millis)", "testcase": false, "constructor": false}, {"identifier": "getMeter", "parameters": "(Type type)", "modifiers": "public", "return": "MeterStats", "signature": "MeterStats getMeter(Type type)", "full_signature": "public MeterStats getMeter(Type type)", "class_method_signature": "StatisticManager.getMeter(Type type)", "testcase": false, "constructor": false}, {"identifier": "getStatsCounter", "parameters": "(Type type)", "modifiers": "public", "return": "CounterStats", "signature": "CounterStats getStatsCounter(Type type)", "full_signature": "public CounterStats getStatsCounter(Type type)", "class_method_signature": "StatisticManager.getStatsCounter(Type type)", "testcase": false, "constructor": false}, {"identifier": "getTimer", "parameters": "(Type type)", "modifiers": "public", "return": "TimerStats", "signature": "TimerStats getTimer(Type type)", "full_signature": "public TimerStats getTimer(Type type)", "class_method_signature": "StatisticManager.getTimer(Type type)", "testcase": false, "constructor": false}, {"identifier": "maxQueLengthRecorder", "parameters": "()", "modifiers": "public", "return": "TimeSeriesMax", "signature": "TimeSeriesMax maxQueLengthRecorder()", "full_signature": "public TimeSeriesMax maxQueLengthRecorder()", "class_method_signature": "StatisticManager.maxQueLengthRecorder()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "StatisticManager.dispose()", "testcase": false, "constructor": false}, {"identifier": "getStatsProvider", "parameters": "(Whiteboard wb,\n                                                ScheduledExecutorService executor)", "modifiers": "private", "return": "StatisticsProvider", "signature": "StatisticsProvider getStatsProvider(Whiteboard wb,\n                                                ScheduledExecutorService executor)", "full_signature": "private StatisticsProvider getStatsProvider(Whiteboard wb,\n                                                ScheduledExecutorService executor)", "class_method_signature": "StatisticManager.getStatsProvider(Whiteboard wb,\n                                                ScheduledExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "getOption", "parameters": "(Type type)", "modifiers": "private static", "return": "StatsOptions", "signature": "StatsOptions getOption(Type type)", "full_signature": "private static StatsOptions getOption(Type type)", "class_method_signature": "StatisticManager.getOption(Type type)", "testcase": false, "constructor": false}], "file": "oak-core-spi/src/main/java/org/apache/jackrabbit/oak/stats/StatisticManager.java"}, "focal_method": {"identifier": "getMeter", "parameters": "(Type type)", "modifiers": "public", "return": "MeterStats", "body": "public MeterStats getMeter(Type type){\n        return repoStats.getMeter(type.name(), getOption(type));\n    }", "signature": "MeterStats getMeter(Type type)", "full_signature": "public MeterStats getMeter(Type type)", "class_method_signature": "StatisticManager.getMeter(Type type)", "testcase": false, "constructor": false, "invocations": ["getMeter", "name", "getOption"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}