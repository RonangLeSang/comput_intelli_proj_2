{"test_class": {"identifier": "AbstractLoginModuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authentication/AbstractLoginModuleTest.java"}, "test_case": {"identifier": "testGetCredentialsIOException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCredentialsIOException() {\n        LoginModuleMonitor monitor = mock(LoginModuleMonitor.class);\n        AbstractLoginModule lm = initLoginModule(new ThrowingCallbackHandler(true), monitor);\n        assertNull(lm.getCredentials());\n        verify(monitor, times(1)).loginError();\n    }", "signature": "void testGetCredentialsIOException()", "full_signature": "@Test public void testGetCredentialsIOException()", "class_method_signature": "AbstractLoginModuleTest.testGetCredentialsIOException()", "testcase": true, "constructor": false, "invocations": ["mock", "initLoginModule", "assertNull", "getCredentials", "loginError", "verify", "times"]}, "focal_class": {"identifier": "AbstractLoginModule", "superclass": "", "interfaces": "implements LoginModule", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AbstractLoginModule.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AbstractLoginModule.class)", "var_name": "log"}, {"original_string": "public static final String SHARED_KEY_CREDENTIALS = \"org.apache.jackrabbit.credentials\";", "modifier": "public static final", "type": "String", "declarator": "SHARED_KEY_CREDENTIALS = \"org.apache.jackrabbit.credentials\"", "var_name": "SHARED_KEY_CREDENTIALS"}, {"original_string": "public static final String SHARED_KEY_LOGIN_NAME = \"javax.security.auth.login.name\";", "modifier": "public static final", "type": "String", "declarator": "SHARED_KEY_LOGIN_NAME = \"javax.security.auth.login.name\"", "var_name": "SHARED_KEY_LOGIN_NAME"}, {"original_string": "public static final String SHARED_KEY_ATTRIBUTES = \"javax.security.auth.login.attributes\";", "modifier": "public static final", "type": "String", "declarator": "SHARED_KEY_ATTRIBUTES = \"javax.security.auth.login.attributes\"", "var_name": "SHARED_KEY_ATTRIBUTES"}, {"original_string": "public static final String SHARED_KEY_PRE_AUTH_LOGIN = PreAuthenticatedLogin.class.getName();", "modifier": "public static final", "type": "String", "declarator": "SHARED_KEY_PRE_AUTH_LOGIN = PreAuthenticatedLogin.class.getName()", "var_name": "SHARED_KEY_PRE_AUTH_LOGIN"}, {"original_string": "protected Subject subject;", "modifier": "protected", "type": "Subject", "declarator": "subject", "var_name": "subject"}, {"original_string": "protected CallbackHandler callbackHandler;", "modifier": "protected", "type": "CallbackHandler", "declarator": "callbackHandler", "var_name": "callbackHandler"}, {"original_string": "protected Map sharedState;", "modifier": "protected", "type": "Map", "declarator": "sharedState", "var_name": "sharedState"}, {"original_string": "protected ConfigurationParameters options;", "modifier": "protected", "type": "ConfigurationParameters", "declarator": "options", "var_name": "options"}, {"original_string": "private SecurityProvider securityProvider;", "modifier": "private", "type": "SecurityProvider", "declarator": "securityProvider", "var_name": "securityProvider"}, {"original_string": "private LoginModuleMonitor loginModuleMonitor;", "modifier": "private", "type": "LoginModuleMonitor", "declarator": "loginModuleMonitor", "var_name": "loginModuleMonitor"}, {"original_string": "private Whiteboard whiteboard;", "modifier": "private", "type": "Whiteboard", "declarator": "whiteboard", "var_name": "whiteboard"}, {"original_string": "private ContentSession systemSession;", "modifier": "private", "type": "ContentSession", "declarator": "systemSession", "var_name": "systemSession"}, {"original_string": "private Root root;", "modifier": "private", "type": "Root", "declarator": "root", "var_name": "root"}], "methods": [{"identifier": "initialize", "parameters": "(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options)", "full_signature": "@Override public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options)", "class_method_signature": "AbstractLoginModule.initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean logout()", "full_signature": "@Override public boolean logout()", "class_method_signature": "AbstractLoginModule.logout()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean abort()", "full_signature": "@Override public boolean abort()", "class_method_signature": "AbstractLoginModule.abort()", "testcase": false, "constructor": false}, {"identifier": "clearState", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void clearState()", "full_signature": "protected void clearState()", "class_method_signature": "AbstractLoginModule.clearState()", "testcase": false, "constructor": false}, {"identifier": "closeSystemSession", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void closeSystemSession()", "full_signature": "protected void closeSystemSession()", "class_method_signature": "AbstractLoginModule.closeSystemSession()", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "(@Nullable Set<Object> credentials, @Nullable Set<? extends Principal> principals)", "modifiers": "protected", "return": "boolean", "signature": "boolean logout(@Nullable Set<Object> credentials, @Nullable Set<? extends Principal> principals)", "full_signature": "protected boolean logout(@Nullable Set<Object> credentials, @Nullable Set<? extends Principal> principals)", "class_method_signature": "AbstractLoginModule.logout(@Nullable Set<Object> credentials, @Nullable Set<? extends Principal> principals)", "testcase": false, "constructor": false}, {"identifier": "destroyCredentials", "parameters": "(@NotNull Iterable<Object> credentials)", "modifiers": "private static", "return": "void", "signature": "void destroyCredentials(@NotNull Iterable<Object> credentials)", "full_signature": "private static void destroyCredentials(@NotNull Iterable<Object> credentials)", "class_method_signature": "AbstractLoginModule.destroyCredentials(@NotNull Iterable<Object> credentials)", "testcase": false, "constructor": false}, {"identifier": "getSupportedCredentials", "parameters": "()", "modifiers": "@NotNull protected abstract", "return": "Set<Class>", "signature": "Set<Class> getSupportedCredentials()", "full_signature": "@NotNull protected abstract Set<Class> getSupportedCredentials()", "class_method_signature": "AbstractLoginModule.getSupportedCredentials()", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "()", "modifiers": "@Nullable protected", "return": "Credentials", "signature": "Credentials getCredentials()", "full_signature": "@Nullable protected Credentials getCredentials()", "class_method_signature": "AbstractLoginModule.getCredentials()", "testcase": false, "constructor": false}, {"identifier": "getSharedCredentials", "parameters": "()", "modifiers": "@Nullable protected", "return": "Credentials", "signature": "Credentials getSharedCredentials()", "full_signature": "@Nullable protected Credentials getSharedCredentials()", "class_method_signature": "AbstractLoginModule.getSharedCredentials()", "testcase": false, "constructor": false}, {"identifier": "getSharedLoginName", "parameters": "()", "modifiers": "@Nullable protected", "return": "String", "signature": "String getSharedLoginName()", "full_signature": "@Nullable protected String getSharedLoginName()", "class_method_signature": "AbstractLoginModule.getSharedLoginName()", "testcase": false, "constructor": false}, {"identifier": "getSharedPreAuthLogin", "parameters": "()", "modifiers": "@Nullable protected", "return": "PreAuthenticatedLogin", "signature": "PreAuthenticatedLogin getSharedPreAuthLogin()", "full_signature": "@Nullable protected PreAuthenticatedLogin getSharedPreAuthLogin()", "class_method_signature": "AbstractLoginModule.getSharedPreAuthLogin()", "testcase": false, "constructor": false}, {"identifier": "getSecurityProvider", "parameters": "()", "modifiers": "@Nullable protected", "return": "SecurityProvider", "signature": "SecurityProvider getSecurityProvider()", "full_signature": "@Nullable protected SecurityProvider getSecurityProvider()", "class_method_signature": "AbstractLoginModule.getSecurityProvider()", "testcase": false, "constructor": false}, {"identifier": "getWhiteboard", "parameters": "()", "modifiers": "@Nullable protected", "return": "Whiteboard", "signature": "Whiteboard getWhiteboard()", "full_signature": "@Nullable protected Whiteboard getWhiteboard()", "class_method_signature": "AbstractLoginModule.getWhiteboard()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Nullable protected", "return": "Root", "signature": "Root getRoot()", "full_signature": "@Nullable protected Root getRoot()", "class_method_signature": "AbstractLoginModule.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getUserManager", "parameters": "()", "modifiers": "@Nullable protected", "return": "UserManager", "signature": "UserManager getUserManager()", "full_signature": "@Nullable protected UserManager getUserManager()", "class_method_signature": "AbstractLoginModule.getUserManager()", "testcase": false, "constructor": false}, {"identifier": "getPrincipalProvider", "parameters": "()", "modifiers": "@Nullable protected", "return": "PrincipalProvider", "signature": "PrincipalProvider getPrincipalProvider()", "full_signature": "@Nullable protected PrincipalProvider getPrincipalProvider()", "class_method_signature": "AbstractLoginModule.getPrincipalProvider()", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "(@NotNull String userId)", "modifiers": "@NotNull protected", "return": "Set<? extends Principal>", "signature": "Set<? extends Principal> getPrincipals(@NotNull String userId)", "full_signature": "@NotNull protected Set<? extends Principal> getPrincipals(@NotNull String userId)", "class_method_signature": "AbstractLoginModule.getPrincipals(@NotNull String userId)", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "(@NotNull Principal userPrincipal)", "modifiers": "@NotNull protected", "return": "Set<? extends Principal>", "signature": "Set<? extends Principal> getPrincipals(@NotNull Principal userPrincipal)", "full_signature": "@NotNull protected Set<? extends Principal> getPrincipals(@NotNull Principal userPrincipal)", "class_method_signature": "AbstractLoginModule.getPrincipals(@NotNull Principal userPrincipal)", "testcase": false, "constructor": false}, {"identifier": "setAuthInfo", "parameters": "(@NotNull AuthInfo authInfo, @NotNull Subject subject)", "modifiers": "protected static", "return": "void", "signature": "void setAuthInfo(@NotNull AuthInfo authInfo, @NotNull Subject subject)", "full_signature": "protected static void setAuthInfo(@NotNull AuthInfo authInfo, @NotNull Subject subject)", "class_method_signature": "AbstractLoginModule.setAuthInfo(@NotNull AuthInfo authInfo, @NotNull Subject subject)", "testcase": false, "constructor": false}, {"identifier": "getLoginModuleMonitor", "parameters": "()", "modifiers": "protected", "return": "LoginModuleMonitor", "signature": "LoginModuleMonitor getLoginModuleMonitor()", "full_signature": "protected LoginModuleMonitor getLoginModuleMonitor()", "class_method_signature": "AbstractLoginModule.getLoginModuleMonitor()", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onError()", "full_signature": "protected void onError()", "class_method_signature": "AbstractLoginModule.onError()", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/AbstractLoginModule.java"}, "focal_method": {"identifier": "getCredentials", "parameters": "()", "modifiers": "@Nullable protected", "return": "Credentials", "body": "@Nullable\n    protected Credentials getCredentials() {\n        Set<Class> supported = getSupportedCredentials();\n        if (callbackHandler != null) {\n            log.debug(\"Login: retrieving Credentials using callback.\");\n            try {\n                CredentialsCallback callback = new CredentialsCallback();\n                callbackHandler.handle(new Callback[]{callback});\n                Credentials creds = callback.getCredentials();\n                if (creds != null && supported.contains(creds.getClass())) {\n                    log.debug(\"Login: Credentials '{}' obtained from callback\", creds);\n                    return creds;\n                } else {\n                    log.debug(\"Login: No supported credentials obtained from callback; trying shared state.\");\n                }\n            } catch (UnsupportedCallbackException | IOException e) {\n                onError();\n                log.error(e.getMessage(), e);\n            }\n        }\n\n        Credentials creds = getSharedCredentials();\n        if (creds != null && supported.contains(creds.getClass())) {\n            log.debug(\"Login: Credentials obtained from shared state.\");\n            return creds;\n        } else {\n            log.debug(\"Login: No supported credentials found in shared state; looking for credentials in subject.\");\n            for (Class clz : getSupportedCredentials()) {\n                Set<Credentials> cds = subject.getPublicCredentials(clz);\n                if (!cds.isEmpty()) {\n                    log.debug(\"Login: Credentials found in subject.\");\n                    return cds.iterator().next();\n                }\n            }\n        }\n\n        log.debug(\"No credentials found.\");\n        return null;\n    }", "signature": "Credentials getCredentials()", "full_signature": "@Nullable protected Credentials getCredentials()", "class_method_signature": "AbstractLoginModule.getCredentials()", "testcase": false, "constructor": false, "invocations": ["getSupportedCredentials", "debug", "handle", "getCredentials", "contains", "getClass", "debug", "debug", "onError", "error", "getMessage", "getSharedCredentials", "contains", "getClass", "debug", "debug", "getSupportedCredentials", "getPublicCredentials", "isEmpty", "debug", "next", "iterator", "debug"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}