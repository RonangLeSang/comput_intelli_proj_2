{"test_class": {"identifier": "PropertyIndexTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MANY = 100;", "modifier": "private static final", "type": "int", "declarator": "MANY = 100", "var_name": "MANY"}, {"original_string": "private static final EditorHook HOOK = new EditorHook(\n            new IndexUpdateProvider(new PropertyIndexEditorProvider()));", "modifier": "private static final", "type": "EditorHook", "declarator": "HOOK = new EditorHook(\n            new IndexUpdateProvider(new PropertyIndexEditorProvider()))", "var_name": "HOOK"}], "file": "oak-core/src/test/java/org/apache/jackrabbit/oak/plugins/index/property/PropertyIndexTest.java"}, "test_case": {"identifier": "valuePattern", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void valuePattern() throws Exception {\n        NodeState root = EMPTY_NODE;\n\n        // Add index definitions\n        NodeBuilder builder = root.builder();\n        NodeBuilder index = builder.child(INDEX_DEFINITIONS_NAME);\n        NodeBuilder indexDef = createIndexDefinition(\n                index, \"fooIndex\", true, false,\n                ImmutableSet.of(\"foo\"), null);\n        indexDef.setProperty(IndexConstants.VALUE_PATTERN, \"(a.*|b)\");\n        NodeState before = builder.getNodeState();\n\n        // Add some content and process it through the property index hook\n        builder.child(\"a\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", \"a\");\n        builder.child(\"a1\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", \"a1\");\n        builder.child(\"b\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", \"b\");\n        builder.child(\"c\")\n                .setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, Type.NAME)\n                .setProperty(\"foo\", \"c\");\n        NodeState after = builder.getNodeState();\n\n        // Add an index\n        NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);\n\n        FilterImpl f = createFilter(after, NT_UNSTRUCTURED);\n\n        // Query the index\n        PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);\n        PropertyIndex pIndex = new PropertyIndex(Mounts.defaultMountInfoProvider());\n        assertEquals(ImmutableSet.of(\"a\"), find(lookup, \"foo\", \"a\", f));\n        assertEquals(ImmutableSet.of(\"a1\"), find(lookup, \"foo\", \"a1\", f));\n        assertEquals(ImmutableSet.of(\"b\"), find(lookup, \"foo\", \"b\", f));\n\n        // expected: no index for \"is not null\"\n        assertTrue(pIndex.getCost(f, indexed) == Double.POSITIVE_INFINITY);\n        \n        ArrayList<PropertyValue> list = new ArrayList<PropertyValue>();\n        list.add(PropertyValues.newString(\"c\"));\n        f.restrictPropertyAsList(\"foo\", list);\n        // expected: no index for value c\n        assertTrue(pIndex.getCost(f, indexed) == Double.POSITIVE_INFINITY);\n\n        f = createFilter(after, NT_UNSTRUCTURED);\n        list = new ArrayList<PropertyValue>();\n        list.add(PropertyValues.newString(\"a\"));\n        f.restrictPropertyAsList(\"foo\", list);\n        // expected: no index for value a\n        assertTrue(pIndex.getCost(f, indexed) < Double.POSITIVE_INFINITY);\n\n    }", "signature": "void valuePattern()", "full_signature": "@Test public void valuePattern()", "class_method_signature": "PropertyIndexTest.valuePattern()", "testcase": true, "constructor": false, "invocations": ["builder", "child", "createIndexDefinition", "of", "setProperty", "getNodeState", "setProperty", "setProperty", "child", "setProperty", "setProperty", "child", "setProperty", "setProperty", "child", "setProperty", "setProperty", "child", "getNodeState", "processCommit", "createFilter", "defaultMountInfoProvider", "assertEquals", "of", "find", "assertEquals", "of", "find", "assertEquals", "of", "find", "assertTrue", "getCost", "add", "newString", "restrictPropertyAsList", "assertTrue", "getCost", "createFilter", "add", "newString", "restrictPropertyAsList", "assertTrue", "getCost"]}, "focal_class": {"identifier": "PropertyIndex", "superclass": "", "interfaces": "implements QueryIndex", "fields": [{"original_string": "private static final String PROPERTY = \"property\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTY = \"property\"", "var_name": "PROPERTY"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PropertyIndex.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PropertyIndex.class)", "var_name": "LOG"}, {"original_string": "private final MountInfoProvider mountInfoProvider;", "modifier": "private final", "type": "MountInfoProvider", "declarator": "mountInfoProvider", "var_name": "mountInfoProvider"}, {"original_string": "private PropertyIndexPlan cachedPlan;", "modifier": "private", "type": "PropertyIndexPlan", "declarator": "cachedPlan", "var_name": "cachedPlan"}], "methods": [{"identifier": "PropertyIndex", "parameters": "(MountInfoProvider mountInfoProvider)", "modifiers": "", "return": "", "signature": " PropertyIndex(MountInfoProvider mountInfoProvider)", "full_signature": "  PropertyIndex(MountInfoProvider mountInfoProvider)", "class_method_signature": "PropertyIndex.PropertyIndex(MountInfoProvider mountInfoProvider)", "testcase": false, "constructor": true}, {"identifier": "getPlan", "parameters": "(NodeState root, Filter filter)", "modifiers": "private", "return": "PropertyIndexPlan", "signature": "PropertyIndexPlan getPlan(NodeState root, Filter filter)", "full_signature": "private PropertyIndexPlan getPlan(NodeState root, Filter filter)", "class_method_signature": "PropertyIndex.getPlan(NodeState root, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "createPlan", "parameters": "(NodeState root, Filter filter,\n                                                MountInfoProvider mountInfoProvider)", "modifiers": "private static", "return": "PropertyIndexPlan", "signature": "PropertyIndexPlan createPlan(NodeState root, Filter filter,\n                                                MountInfoProvider mountInfoProvider)", "full_signature": "private static PropertyIndexPlan createPlan(NodeState root, Filter filter,\n                                                MountInfoProvider mountInfoProvider)", "class_method_signature": "PropertyIndex.createPlan(NodeState root, Filter filter,\n                                                MountInfoProvider mountInfoProvider)", "testcase": false, "constructor": false}, {"identifier": "wrongIndex", "parameters": "(ChildNodeEntry entry, Filter filter, NodeState root)", "modifiers": "private static", "return": "boolean", "signature": "boolean wrongIndex(ChildNodeEntry entry, Filter filter, NodeState root)", "full_signature": "private static boolean wrongIndex(ChildNodeEntry entry, Filter filter, NodeState root)", "class_method_signature": "PropertyIndex.wrongIndex(ChildNodeEntry entry, Filter filter, NodeState root)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "(NodeState definition, NodeState root)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEnabled(NodeState definition, NodeState root)", "full_signature": "private static boolean isEnabled(NodeState definition, NodeState root)", "class_method_signature": "PropertyIndex.isEnabled(NodeState definition, NodeState root)", "testcase": false, "constructor": false}, {"identifier": "getOptionalStrings", "parameters": "(NodeState defn, String propertyName)", "modifiers": "private static", "return": "String[]", "signature": "String[] getOptionalStrings(NodeState defn, String propertyName)", "full_signature": "private static String[] getOptionalStrings(NodeState defn, String propertyName)", "class_method_signature": "PropertyIndex.getOptionalStrings(NodeState defn, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getMinimumCost", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getMinimumCost()", "full_signature": "@Override public double getMinimumCost()", "class_method_signature": "PropertyIndex.getMinimumCost()", "testcase": false, "constructor": false}, {"identifier": "getIndexName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIndexName()", "full_signature": "@Override public String getIndexName()", "class_method_signature": "PropertyIndex.getIndexName()", "testcase": false, "constructor": false}, {"identifier": "getIndexName", "parameters": "(Filter filter, NodeState root)", "modifiers": "@Override public", "return": "String", "signature": "String getIndexName(Filter filter, NodeState root)", "full_signature": "@Override public String getIndexName(Filter filter, NodeState root)", "class_method_signature": "PropertyIndex.getIndexName(Filter filter, NodeState root)", "testcase": false, "constructor": false}, {"identifier": "getCost", "parameters": "(Filter filter, NodeState root)", "modifiers": "@Override public", "return": "double", "signature": "double getCost(Filter filter, NodeState root)", "full_signature": "@Override public double getCost(Filter filter, NodeState root)", "class_method_signature": "PropertyIndex.getCost(Filter filter, NodeState root)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(Filter filter, NodeState root)", "modifiers": "@Override public", "return": "Cursor", "signature": "Cursor query(Filter filter, NodeState root)", "full_signature": "@Override public Cursor query(Filter filter, NodeState root)", "class_method_signature": "PropertyIndex.query(Filter filter, NodeState root)", "testcase": false, "constructor": false}, {"identifier": "getPlan", "parameters": "(Filter filter, NodeState root)", "modifiers": "@Override public", "return": "String", "signature": "String getPlan(Filter filter, NodeState root)", "full_signature": "@Override public String getPlan(Filter filter, NodeState root)", "class_method_signature": "PropertyIndex.getPlan(Filter filter, NodeState root)", "testcase": false, "constructor": false}], "file": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/PropertyIndex.java"}, "focal_method": {"identifier": "getCost", "parameters": "(Filter filter, NodeState root)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getCost(Filter filter, NodeState root) {\n        if (filter.getFullTextConstraint() != null) {\n            // not an appropriate index for full-text search\n            return Double.POSITIVE_INFINITY;\n        }\n        if (filter.containsNativeConstraint()) {\n            // not an appropriate index for native search\n            return Double.POSITIVE_INFINITY;\n        }\n        if (filter.getPropertyRestrictions().isEmpty()) {\n            // not an appropriate index for no property restrictions & selector constraints\n            return Double.POSITIVE_INFINITY;\n        }\n        PropertyIndexPlan plan = getPlan(root, filter);\n        if (plan != null) {\n            return plan.getCost();\n        } else {\n            return Double.POSITIVE_INFINITY;\n        }\n    }", "signature": "double getCost(Filter filter, NodeState root)", "full_signature": "@Override public double getCost(Filter filter, NodeState root)", "class_method_signature": "PropertyIndex.getCost(Filter filter, NodeState root)", "testcase": false, "constructor": false, "invocations": ["getFullTextConstraint", "containsNativeConstraint", "isEmpty", "getPropertyRestrictions", "getPlan", "getCost"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}