{"test_class": {"identifier": "CompositePrincipalProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TestPrincipalProvider pp1 = new TestPrincipalProvider();", "modifier": "private final", "type": "TestPrincipalProvider", "declarator": "pp1 = new TestPrincipalProvider()", "var_name": "pp1"}, {"original_string": "private final TestPrincipalProvider pp2 = new TestPrincipalProvider(\"p1\", \"p2\");", "modifier": "private final", "type": "TestPrincipalProvider", "declarator": "pp2 = new TestPrincipalProvider(\"p1\", \"p2\")", "var_name": "pp2"}, {"original_string": "private final PrincipalProvider cpp = CompositePrincipalProvider.of(ImmutableList.<PrincipalProvider>of(pp1, pp2));", "modifier": "private final", "type": "PrincipalProvider", "declarator": "cpp = CompositePrincipalProvider.of(ImmutableList.<PrincipalProvider>of(pp1, pp2))", "var_name": "cpp"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/principal/CompositePrincipalProviderTest.java"}, "test_case": {"identifier": "testGetMembershipPrincipals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMembershipPrincipals() {\n        for (Principal principal : testPrincipals()) {\n            boolean atleastEveryone = cpp.getMembershipPrincipals(principal).contains(EveryonePrincipal.getInstance());\n            assertTrue(\"All principals (except everyone) must be member of the everyone group. Violation: \"+principal.getName(), atleastEveryone);\n        }\n    }", "signature": "void testGetMembershipPrincipals()", "full_signature": "@Test public void testGetMembershipPrincipals()", "class_method_signature": "CompositePrincipalProviderTest.testGetMembershipPrincipals()", "testcase": true, "constructor": false, "invocations": ["testPrincipals", "contains", "getMembershipPrincipals", "getInstance", "assertTrue", "getName"]}, "focal_class": {"identifier": "CompositePrincipalProvider", "superclass": "", "interfaces": "implements PrincipalProvider", "fields": [{"original_string": "private final List<PrincipalProvider> providers;", "modifier": "private final", "type": "List<PrincipalProvider>", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "CompositePrincipalProvider", "parameters": "(List<PrincipalProvider> providers)", "modifiers": "public", "return": "", "signature": " CompositePrincipalProvider(List<PrincipalProvider> providers)", "full_signature": "public  CompositePrincipalProvider(List<PrincipalProvider> providers)", "class_method_signature": "CompositePrincipalProvider.CompositePrincipalProvider(List<PrincipalProvider> providers)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(@NotNull List<PrincipalProvider> providers)", "modifiers": "public static", "return": "PrincipalProvider", "signature": "PrincipalProvider of(@NotNull List<PrincipalProvider> providers)", "full_signature": "public static PrincipalProvider of(@NotNull List<PrincipalProvider> providers)", "class_method_signature": "CompositePrincipalProvider.of(@NotNull List<PrincipalProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "(@NotNull String principalName)", "modifiers": "@Nullable @Override public", "return": "Principal", "signature": "Principal getPrincipal(@NotNull String principalName)", "full_signature": "@Nullable @Override public Principal getPrincipal(@NotNull String principalName)", "class_method_signature": "CompositePrincipalProvider.getPrincipal(@NotNull String principalName)", "testcase": false, "constructor": false}, {"identifier": "getItemBasedPrincipal", "parameters": "(@NotNull String principalOakPath)", "modifiers": "@Nullable @Override public", "return": "ItemBasedPrincipal", "signature": "ItemBasedPrincipal getItemBasedPrincipal(@NotNull String principalOakPath)", "full_signature": "@Nullable @Override public ItemBasedPrincipal getItemBasedPrincipal(@NotNull String principalOakPath)", "class_method_signature": "CompositePrincipalProvider.getItemBasedPrincipal(@NotNull String principalOakPath)", "testcase": false, "constructor": false}, {"identifier": "getMembershipPrincipals", "parameters": "(@NotNull Principal principal)", "modifiers": "@NotNull @Override public", "return": "Set<Principal>", "signature": "Set<Principal> getMembershipPrincipals(@NotNull Principal principal)", "full_signature": "@NotNull @Override public Set<Principal> getMembershipPrincipals(@NotNull Principal principal)", "class_method_signature": "CompositePrincipalProvider.getMembershipPrincipals(@NotNull Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getPrincipals", "parameters": "(@NotNull String userID)", "modifiers": "@NotNull @Override public", "return": "Set<Principal>", "signature": "Set<Principal> getPrincipals(@NotNull String userID)", "full_signature": "@NotNull @Override public Set<Principal> getPrincipals(@NotNull String userID)", "class_method_signature": "CompositePrincipalProvider.getPrincipals(@NotNull String userID)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(@Nullable String nameHint, int searchType)", "modifiers": "@NotNull @Override public", "return": "Iterator<Principal>", "signature": "Iterator<Principal> findPrincipals(@Nullable String nameHint, int searchType)", "full_signature": "@NotNull @Override public Iterator<Principal> findPrincipals(@Nullable String nameHint, int searchType)", "class_method_signature": "CompositePrincipalProvider.findPrincipals(@Nullable String nameHint, int searchType)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(int searchType)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "signature": "Iterator<? extends Principal> findPrincipals(int searchType)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(int searchType)", "class_method_signature": "CompositePrincipalProvider.findPrincipals(int searchType)", "testcase": false, "constructor": false}, {"identifier": "findPrincipals", "parameters": "(@Nullable String nameHint, boolean fullText, int searchType,\n            long offset, long limit)", "modifiers": "@NotNull @Override public", "return": "Iterator<? extends Principal>", "signature": "Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, boolean fullText, int searchType,\n            long offset, long limit)", "full_signature": "@NotNull @Override public Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, boolean fullText, int searchType,\n            long offset, long limit)", "class_method_signature": "CompositePrincipalProvider.findPrincipals(@Nullable String nameHint, boolean fullText, int searchType,\n            long offset, long limit)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/principal/CompositePrincipalProvider.java"}, "focal_method": {"identifier": "getMembershipPrincipals", "parameters": "(@NotNull Principal principal)", "modifiers": "@NotNull @Override public", "return": "Set<Principal>", "body": "@NotNull\n    @Override\n    public Set<Principal> getMembershipPrincipals(@NotNull Principal principal) {\n        Set<Principal> groups = new HashSet<>();\n        for (PrincipalProvider provider : providers) {\n            groups.addAll(provider.getMembershipPrincipals(principal));\n        }\n        return groups;\n    }", "signature": "Set<Principal> getMembershipPrincipals(@NotNull Principal principal)", "full_signature": "@NotNull @Override public Set<Principal> getMembershipPrincipals(@NotNull Principal principal)", "class_method_signature": "CompositePrincipalProvider.getMembershipPrincipals(@NotNull Principal principal)", "testcase": false, "constructor": false, "invocations": ["addAll", "getMembershipPrincipals"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}