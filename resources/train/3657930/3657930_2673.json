{"test_class": {"identifier": "TreeUtilTest", "superclass": "extends AbstractTreeTest", "interfaces": "", "fields": [{"original_string": "private Tree typeRoot;", "modifier": "private", "type": "Tree", "declarator": "typeRoot", "var_name": "typeRoot"}, {"original_string": "private Tree propDef;", "modifier": "private", "type": "Tree", "declarator": "propDef", "var_name": "propDef"}, {"original_string": "private Tree ntDef;", "modifier": "private", "type": "Tree", "declarator": "ntDef", "var_name": "ntDef"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/plugins/tree/TreeUtilTest.java"}, "test_case": {"identifier": "testGetStringWithDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetStringWithDefault() {\n        assertEquals(\"def\", TreeUtil.getString(nonExisting, \"p\", \"def\"));\n        assertEquals(\"def\", TreeUtil.getString(child, \"pp\", \"def\"));\n        assertEquals(STRING_VALUE, TreeUtil.getString(child, \"p\", \"def\"));\n    }", "signature": "void testGetStringWithDefault()", "full_signature": "@Test public void testGetStringWithDefault()", "class_method_signature": "TreeUtilTest.testGetStringWithDefault()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getString", "assertEquals", "getString", "assertEquals", "getString"]}, "focal_class": {"identifier": "TreeUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TreeUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " TreeUtil()", "full_signature": "private  TreeUtil()", "class_method_signature": "TreeUtil.TreeUtil()", "testcase": false, "constructor": true}, {"identifier": "getPrimaryTypeName", "parameters": "(@NotNull Tree tree)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getPrimaryTypeName(@NotNull Tree tree)", "full_signature": "@Nullable public static String getPrimaryTypeName(@NotNull Tree tree)", "class_method_signature": "TreeUtil.getPrimaryTypeName(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryTypeName", "parameters": "(@NotNull Tree tree, @NotNull LazyValue<Tree> readOnlyTree)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getPrimaryTypeName(@NotNull Tree tree, @NotNull LazyValue<Tree> readOnlyTree)", "full_signature": "@Nullable public static String getPrimaryTypeName(@NotNull Tree tree, @NotNull LazyValue<Tree> readOnlyTree)", "class_method_signature": "TreeUtil.getPrimaryTypeName(@NotNull Tree tree, @NotNull LazyValue<Tree> readOnlyTree)", "testcase": false, "constructor": false}, {"identifier": "getMixinTypeNames", "parameters": "(@NotNull Tree tree)", "modifiers": "@NotNull public static", "return": "Iterable<String>", "signature": "Iterable<String> getMixinTypeNames(@NotNull Tree tree)", "full_signature": "@NotNull public static Iterable<String> getMixinTypeNames(@NotNull Tree tree)", "class_method_signature": "TreeUtil.getMixinTypeNames(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getMixinTypeNames", "parameters": "(@NotNull Tree tree, @NotNull LazyValue<Tree> readOnlyTree)", "modifiers": "@NotNull public static", "return": "Iterable<String>", "signature": "Iterable<String> getMixinTypeNames(@NotNull Tree tree, @NotNull LazyValue<Tree> readOnlyTree)", "full_signature": "@NotNull public static Iterable<String> getMixinTypeNames(@NotNull Tree tree, @NotNull LazyValue<Tree> readOnlyTree)", "class_method_signature": "TreeUtil.getMixinTypeNames(@NotNull Tree tree, @NotNull LazyValue<Tree> readOnlyTree)", "testcase": false, "constructor": false}, {"identifier": "getStrings", "parameters": "(@NotNull Tree tree, @NotNull String propertyName)", "modifiers": "@Nullable public static", "return": "Iterable<String>", "signature": "Iterable<String> getStrings(@NotNull Tree tree, @NotNull String propertyName)", "full_signature": "@Nullable public static Iterable<String> getStrings(@NotNull Tree tree, @NotNull String propertyName)", "class_method_signature": "TreeUtil.getStrings(@NotNull Tree tree, @NotNull String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(@NotNull Tree tree, @NotNull String propertyName)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getString(@NotNull Tree tree, @NotNull String propertyName)", "full_signature": "@Nullable public static String getString(@NotNull Tree tree, @NotNull String propertyName)", "class_method_signature": "TreeUtil.getString(@NotNull Tree tree, @NotNull String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(@NotNull Tree tree, @NotNull String name, @Nullable String defaultValue)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getString(@NotNull Tree tree, @NotNull String name, @Nullable String defaultValue)", "full_signature": "@Nullable public static String getString(@NotNull Tree tree, @NotNull String name, @Nullable String defaultValue)", "class_method_signature": "TreeUtil.getString(@NotNull Tree tree, @NotNull String name, @Nullable String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getStringInternal", "parameters": "(@NotNull Tree tree,\n                                            @NotNull String propertyName,\n                                            @NotNull Type<String> type)", "modifiers": "@Nullable private static", "return": "String", "signature": "String getStringInternal(@NotNull Tree tree,\n                                            @NotNull String propertyName,\n                                            @NotNull Type<String> type)", "full_signature": "@Nullable private static String getStringInternal(@NotNull Tree tree,\n                                            @NotNull String propertyName,\n                                            @NotNull Type<String> type)", "class_method_signature": "TreeUtil.getStringInternal(@NotNull Tree tree,\n                                            @NotNull String propertyName,\n                                            @NotNull Type<String> type)", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "(@NotNull Tree tree, @NotNull String propertyName)", "modifiers": "public static", "return": "boolean", "signature": "boolean getBoolean(@NotNull Tree tree, @NotNull String propertyName)", "full_signature": "public static boolean getBoolean(@NotNull Tree tree, @NotNull String propertyName)", "class_method_signature": "TreeUtil.getBoolean(@NotNull Tree tree, @NotNull String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(@NotNull Tree tree, @NotNull String name)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getName(@NotNull Tree tree, @NotNull String name)", "full_signature": "@Nullable public static String getName(@NotNull Tree tree, @NotNull String name)", "class_method_signature": "TreeUtil.getName(@NotNull Tree tree, @NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "(@NotNull Tree tree, @NotNull String name)", "modifiers": "@NotNull public static", "return": "Iterable<String>", "signature": "Iterable<String> getNames(@NotNull Tree tree, @NotNull String name)", "full_signature": "@NotNull public static Iterable<String> getNames(@NotNull Tree tree, @NotNull String name)", "class_method_signature": "TreeUtil.getNames(@NotNull Tree tree, @NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(@NotNull Tree tree, @NotNull String name, long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long getLong(@NotNull Tree tree, @NotNull String name, long defaultValue)", "full_signature": "public static long getLong(@NotNull Tree tree, @NotNull String name, long defaultValue)", "class_method_signature": "TreeUtil.getLong(@NotNull Tree tree, @NotNull String name, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getTree", "parameters": "(@NotNull Tree tree, @NotNull String path)", "modifiers": "@Nullable public static", "return": "Tree", "signature": "Tree getTree(@NotNull Tree tree, @NotNull String path)", "full_signature": "@Nullable public static Tree getTree(@NotNull Tree tree, @NotNull String path)", "class_method_signature": "TreeUtil.getTree(@NotNull Tree tree, @NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(\n            @NotNull Tree parent, @NotNull String name,\n            @Nullable String typeName, @NotNull Tree typeRoot,\n            @Nullable String userID)", "modifiers": "public static", "return": "Tree", "signature": "Tree addChild(\n            @NotNull Tree parent, @NotNull String name,\n            @Nullable String typeName, @NotNull Tree typeRoot,\n            @Nullable String userID)", "full_signature": "public static Tree addChild(\n            @NotNull Tree parent, @NotNull String name,\n            @Nullable String typeName, @NotNull Tree typeRoot,\n            @Nullable String userID)", "class_method_signature": "TreeUtil.addChild(\n            @NotNull Tree parent, @NotNull String name,\n            @Nullable String typeName, @NotNull Tree typeRoot,\n            @Nullable String userID)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(@NotNull Tree tree, @NotNull String childName, @NotNull String primaryTypeName)", "modifiers": "@NotNull public static", "return": "Tree", "signature": "Tree addChild(@NotNull Tree tree, @NotNull String childName, @NotNull String primaryTypeName)", "full_signature": "@NotNull public static Tree addChild(@NotNull Tree tree, @NotNull String childName, @NotNull String primaryTypeName)", "class_method_signature": "TreeUtil.addChild(@NotNull Tree tree, @NotNull String childName, @NotNull String primaryTypeName)", "testcase": false, "constructor": false}, {"identifier": "getOrAddChild", "parameters": "(@NotNull Tree tree, @NotNull String childName, @NotNull String primaryTypeName)", "modifiers": "@NotNull public static", "return": "Tree", "signature": "Tree getOrAddChild(@NotNull Tree tree, @NotNull String childName, @NotNull String primaryTypeName)", "full_signature": "@NotNull public static Tree getOrAddChild(@NotNull Tree tree, @NotNull String childName, @NotNull String primaryTypeName)", "class_method_signature": "TreeUtil.getOrAddChild(@NotNull Tree tree, @NotNull String childName, @NotNull String primaryTypeName)", "testcase": false, "constructor": false}, {"identifier": "addMixin", "parameters": "(@NotNull Tree tree, @NotNull String mixinName, @NotNull Tree typeRoot, @Nullable String userID)", "modifiers": "public static", "return": "void", "signature": "void addMixin(@NotNull Tree tree, @NotNull String mixinName, @NotNull Tree typeRoot, @Nullable String userID)", "full_signature": "public static void addMixin(@NotNull Tree tree, @NotNull String mixinName, @NotNull Tree typeRoot, @Nullable String userID)", "class_method_signature": "TreeUtil.addMixin(@NotNull Tree tree, @NotNull String mixinName, @NotNull Tree typeRoot, @Nullable String userID)", "testcase": false, "constructor": false}, {"identifier": "autoCreateItems", "parameters": "(@NotNull Tree tree, @NotNull Tree type, @NotNull Tree typeRoot, @Nullable String userID)", "modifiers": "public static", "return": "void", "signature": "void autoCreateItems(@NotNull Tree tree, @NotNull Tree type, @NotNull Tree typeRoot, @Nullable String userID)", "full_signature": "public static void autoCreateItems(@NotNull Tree tree, @NotNull Tree type, @NotNull Tree typeRoot, @Nullable String userID)", "class_method_signature": "TreeUtil.autoCreateItems(@NotNull Tree tree, @NotNull Tree type, @NotNull Tree typeRoot, @Nullable String userID)", "testcase": false, "constructor": false}, {"identifier": "autoCreateProperty", "parameters": "(@NotNull String name,\n                                                   @NotNull Tree definition,\n                                                   @Nullable String userID)", "modifiers": "public static", "return": "PropertyState", "signature": "PropertyState autoCreateProperty(@NotNull String name,\n                                                   @NotNull Tree definition,\n                                                   @Nullable String userID)", "full_signature": "public static PropertyState autoCreateProperty(@NotNull String name,\n                                                   @NotNull Tree definition,\n                                                   @Nullable String userID)", "class_method_signature": "TreeUtil.autoCreateProperty(@NotNull String name,\n                                                   @NotNull Tree definition,\n                                                   @Nullable String userID)", "testcase": false, "constructor": false}, {"identifier": "getDefaultChildType", "parameters": "(\n            Tree typeRoot, Tree parent, String childName)", "modifiers": "public static", "return": "String", "signature": "String getDefaultChildType(\n            Tree typeRoot, Tree parent, String childName)", "full_signature": "public static String getDefaultChildType(\n            Tree typeRoot, Tree parent, String childName)", "class_method_signature": "TreeUtil.getDefaultChildType(\n            Tree typeRoot, Tree parent, String childName)", "testcase": false, "constructor": false}, {"identifier": "getEffectiveType", "parameters": "(Tree tree, Tree typeRoot)", "modifiers": "public static", "return": "List<Tree>", "signature": "List<Tree> getEffectiveType(Tree tree, Tree typeRoot)", "full_signature": "public static List<Tree> getEffectiveType(Tree tree, Tree typeRoot)", "class_method_signature": "TreeUtil.getEffectiveType(Tree tree, Tree typeRoot)", "testcase": false, "constructor": false}, {"identifier": "findDefaultPrimaryType", "parameters": "(Tree definitions, boolean sns)", "modifiers": "public static", "return": "String", "signature": "String findDefaultPrimaryType(Tree definitions, boolean sns)", "full_signature": "public static String findDefaultPrimaryType(Tree definitions, boolean sns)", "class_method_signature": "TreeUtil.findDefaultPrimaryType(Tree definitions, boolean sns)", "testcase": false, "constructor": false}, {"identifier": "isNodeType", "parameters": "(Tree tree, String typeName, Tree typeRoot)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNodeType(Tree tree, String typeName, Tree typeRoot)", "full_signature": "public static boolean isNodeType(Tree tree, String typeName, Tree typeRoot)", "class_method_signature": "TreeUtil.isNodeType(Tree tree, String typeName, Tree typeRoot)", "testcase": false, "constructor": false}, {"identifier": "isReadOnlyTree", "parameters": "(@NotNull Tree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReadOnlyTree(@NotNull Tree tree)", "full_signature": "public static boolean isReadOnlyTree(@NotNull Tree tree)", "class_method_signature": "TreeUtil.isReadOnlyTree(@NotNull Tree tree)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/plugins/tree/TreeUtil.java"}, "focal_method": {"identifier": "getString", "parameters": "(@NotNull Tree tree, @NotNull String propertyName)", "modifiers": "@Nullable public static", "return": "String", "body": "@Nullable\n    public static String getString(@NotNull Tree tree, @NotNull String propertyName) {\n        return getStringInternal(tree, propertyName, Type.STRING);\n    }", "signature": "String getString(@NotNull Tree tree, @NotNull String propertyName)", "full_signature": "@Nullable public static String getString(@NotNull Tree tree, @NotNull String propertyName)", "class_method_signature": "TreeUtil.getString(@NotNull Tree tree, @NotNull String propertyName)", "testcase": false, "constructor": false, "invocations": ["getStringInternal"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}