{"test_class": {"identifier": "FileCacheTest", "superclass": "extends AbstractDataStoreCacheTest", "interfaces": "", "fields": [{"original_string": "private static final String ID_PREFIX = \"12345\";", "modifier": "private static final", "type": "String", "declarator": "ID_PREFIX = \"12345\"", "var_name": "ID_PREFIX"}, {"original_string": "private FileCache cache;", "modifier": "private", "type": "FileCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private File root;", "modifier": "private", "type": "File", "declarator": "root", "var_name": "root"}, {"original_string": "private TestCacheLoader loader;", "modifier": "private", "type": "TestCacheLoader", "declarator": "loader", "var_name": "loader"}, {"original_string": "private Closer closer;", "modifier": "private", "type": "Closer", "declarator": "closer", "var_name": "closer"}, {"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder(new File(\"target\"));", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder(new File(\"target\"))", "var_name": "folder"}, {"original_string": "@Rule\n    public TestName testName = new TestName();", "modifier": "@Rule\n    public", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}, {"original_string": "CountDownLatch afterExecuteLatch;", "modifier": "", "type": "CountDownLatch", "declarator": "afterExecuteLatch", "var_name": "afterExecuteLatch"}], "file": "oak-blob-plugins/src/test/java/org/apache/jackrabbit/oak/plugins/blob/FileCacheTest.java"}, "test_case": {"identifier": "put", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void put() throws Exception {\n        LOG.info(\"Started put\");\n\n        //File f = FileIOUtils.copy(randomStream(0, 4 * 1024));\n        cache.put(ID_PREFIX + 0, copyToFile(randomStream(0, 4 * 1024), folder.newFile()));\n        assertCacheIfPresent(0, cache, copyToFile(randomStream(0, 4 * 1024), folder.newFile()));\n        assertCacheStats(cache, 1, 4 * 1024, 0, 0);\n\n        LOG.info(\"Finished put\");\n    }", "signature": "void put()", "full_signature": "@Test public void put()", "class_method_signature": "FileCacheTest.put()", "testcase": true, "constructor": false, "invocations": ["info", "put", "copyToFile", "randomStream", "newFile", "assertCacheIfPresent", "copyToFile", "randomStream", "newFile", "assertCacheStats", "info"]}, "focal_class": {"identifier": "FileCache", "superclass": "extends AbstractCache<String, File>", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileCache.class)", "var_name": "LOG"}, {"original_string": "private static final int SEGMENT_COUNT = Integer.getInteger(\"oak.blob.fileCache.segmentCount\", 1);", "modifier": "private static final", "type": "int", "declarator": "SEGMENT_COUNT = Integer.getInteger(\"oak.blob.fileCache.segmentCount\", 1)", "var_name": "SEGMENT_COUNT"}, {"original_string": "protected static final String DOWNLOAD_DIR = \"download\";", "modifier": "protected static final", "type": "String", "declarator": "DOWNLOAD_DIR = \"download\"", "var_name": "DOWNLOAD_DIR"}, {"original_string": "private File parent;", "modifier": "private", "type": "File", "declarator": "parent", "var_name": "parent"}, {"original_string": "private File cacheRoot;", "modifier": "private", "type": "File", "declarator": "cacheRoot", "var_name": "cacheRoot"}, {"original_string": "private CacheLIRS<String, File> cache;", "modifier": "private", "type": "CacheLIRS<String, File>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private FileCacheStats cacheStats;", "modifier": "private", "type": "FileCacheStats", "declarator": "cacheStats", "var_name": "cacheStats"}, {"original_string": "private ExecutorService executor;", "modifier": "private", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private CacheLoader<String, File> cacheLoader;", "modifier": "private", "type": "CacheLoader<String, File>", "declarator": "cacheLoader", "var_name": "cacheLoader"}, {"original_string": "private static final Weigher<String, File> weigher = new Weigher<String, File>() {\n        @Override public int weigh(String key, File value) {\n            // convert to number of 4 KB blocks\n            return Math.round(value.length() / (4 * 1024));\n        }};", "modifier": "private static final", "type": "Weigher<String, File>", "declarator": "weigher = new Weigher<String, File>() {\n        @Override public int weigh(String key, File value) {\n            // convert to number of 4 KB blocks\n            return Math.round(value.length() / (4 * 1024));\n        }}", "var_name": "weigher"}, {"original_string": "private static final Weigher<String, File> memWeigher = new Weigher<String, File>() {\n        @Override public int weigh(String key, File value) {\n            return (StringUtils.estimateMemoryUsage(key) +\n                StringUtils.estimateMemoryUsage(value.getAbsolutePath()) + 48);\n        }};", "modifier": "private static final", "type": "Weigher<String, File>", "declarator": "memWeigher = new Weigher<String, File>() {\n        @Override public int weigh(String key, File value) {\n            return (StringUtils.estimateMemoryUsage(key) +\n                StringUtils.estimateMemoryUsage(value.getAbsolutePath()) + 48);\n        }}", "var_name": "memWeigher"}], "methods": [{"identifier": "FileCache", "parameters": "(long maxSize /* bytes */, File root,\n        final CacheLoader<String, InputStream> loader, @Nullable final ExecutorService executor)", "modifiers": "private", "return": "", "signature": " FileCache(long maxSize /* bytes */, File root,\n        final CacheLoader<String, InputStream> loader, @Nullable final ExecutorService executor)", "full_signature": "private  FileCache(long maxSize /* bytes */, File root,\n        final CacheLoader<String, InputStream> loader, @Nullable final ExecutorService executor)", "class_method_signature": "FileCache.FileCache(long maxSize /* bytes */, File root,\n        final CacheLoader<String, InputStream> loader, @Nullable final ExecutorService executor)", "testcase": false, "constructor": true}, {"identifier": "FileCache", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileCache()", "full_signature": "private  FileCache()", "class_method_signature": "FileCache.FileCache()", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "(long maxSize /* bytes */, File root,\n        final CacheLoader<String, InputStream> loader, @Nullable final ExecutorService executor)", "modifiers": "public static", "return": "FileCache", "signature": "FileCache build(long maxSize /* bytes */, File root,\n        final CacheLoader<String, InputStream> loader, @Nullable final ExecutorService executor)", "full_signature": "public static FileCache build(long maxSize /* bytes */, File root,\n        final CacheLoader<String, InputStream> loader, @Nullable final ExecutorService executor)", "class_method_signature": "FileCache.build(long maxSize /* bytes */, File root,\n        final CacheLoader<String, InputStream> loader, @Nullable final ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, File file)", "modifiers": "@Override public", "return": "void", "signature": "void put(String key, File file)", "full_signature": "@Override public void put(String key, File file)", "class_method_signature": "FileCache.put(String key, File file)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, File file, boolean copy)", "modifiers": "private", "return": "void", "signature": "void put(String key, File file, boolean copy)", "full_signature": "private void put(String key, File file, boolean copy)", "class_method_signature": "FileCache.put(String key, File file, boolean copy)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(String key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(String key)", "full_signature": "public boolean containsKey(String key)", "class_method_signature": "FileCache.containsKey(String key)", "testcase": false, "constructor": false}, {"identifier": "getIfPresent", "parameters": "(String key)", "modifiers": "@Nullable public", "return": "File", "signature": "File getIfPresent(String key)", "full_signature": "@Nullable public File getIfPresent(String key)", "class_method_signature": "FileCache.getIfPresent(String key)", "testcase": false, "constructor": false}, {"identifier": "getIfPresent", "parameters": "(Object key)", "modifiers": "@Nullable @Override public", "return": "File", "signature": "File getIfPresent(Object key)", "full_signature": "@Nullable @Override public File getIfPresent(Object key)", "class_method_signature": "FileCache.getIfPresent(Object key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "File", "signature": "File get(String key)", "full_signature": "public File get(String key)", "class_method_signature": "FileCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(Object key)", "modifiers": "@Override public", "return": "void", "signature": "void invalidate(Object key)", "full_signature": "@Override public void invalidate(Object key)", "class_method_signature": "FileCache.invalidate(Object key)", "testcase": false, "constructor": false}, {"identifier": "getStats", "parameters": "()", "modifiers": "public", "return": "DataStoreCacheStatsMBean", "signature": "DataStoreCacheStatsMBean getStats()", "full_signature": "public DataStoreCacheStatsMBean getStats()", "class_method_signature": "FileCache.getStats()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileCache.close()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int build()", "full_signature": "private int build()", "class_method_signature": "FileCache.build()", "testcase": false, "constructor": false}], "file": "oak-blob-plugins/src/main/java/org/apache/jackrabbit/oak/plugins/blob/FileCache.java"}, "focal_method": {"identifier": "put", "parameters": "(String key, File file)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void put(String key, File file) {\n        put(key, file, true);\n    }", "signature": "void put(String key, File file)", "full_signature": "@Override public void put(String key, File file)", "class_method_signature": "FileCache.put(String key, File file)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}