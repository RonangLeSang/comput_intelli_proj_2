{"test_class": {"identifier": "CugPermissionProviderTest", "superclass": "extends AbstractCugTest", "interfaces": "implements NodeTypeConstants", "fields": [{"original_string": "private static final Map<String, Boolean> PATH_INCUG_MAP = new HashMap<>();", "modifier": "private static final", "type": "Map<String, Boolean>", "declarator": "PATH_INCUG_MAP = new HashMap<>()", "var_name": "PATH_INCUG_MAP"}, {"original_string": "private static final List<String> READABLE_PATHS = ImmutableList.of(\n            \"/content/a/b/c\", \"/content/a/b/c/jcr:primaryType\",\n            \"/content/a/b/c/nonExisting\", \"/content/a/b/c/nonExisting/jcr:primaryType\");", "modifier": "private static final", "type": "List<String>", "declarator": "READABLE_PATHS = ImmutableList.of(\n            \"/content/a/b/c\", \"/content/a/b/c/jcr:primaryType\",\n            \"/content/a/b/c/nonExisting\", \"/content/a/b/c/nonExisting/jcr:primaryType\")", "var_name": "READABLE_PATHS"}, {"original_string": "private static final List<String> NOT_READABLE_PATHS = ImmutableList.of(\n            \"/\", \"/jcr:primaryType\",\n            UNSUPPORTED_PATH, UNSUPPORTED_PATH + \"/jcr:primaryType\",\n            \"/content\", \"/content/jcr:primaryType\",\n            \"/content/a\", \"/content/a/jcr:primaryType\",\n            \"/content/a/b\", \"/content/a/b/jcr:primaryType\",\n            \"/content/a/b/c/rep:cugPolicy\", \"/content/a/b/c/rep:cugPolicy/jcr:primaryType\", \"/content/a/b/c/rep:cugPolicy/rep:principalNames\",\n            \"/content/a/b/c/rep:cugPolicy/nonExisting\", \"/content/a/b/c/rep:cugPolicy/nonExisting/jcr:primaryType\",\n            \"/content/aa\", \"/content/aa/jcr:primaryType\",\n            \"/content/bb\", \"/content/bb/jcr:primaryType\",\n            \"/content/aa/bb/rep:cugPolicy\", \"/content/aa/bb/rep:cugPolicy/jcr:primaryType\", \"/content/aa/bb/rep:cugPolicy/rep:principalNames\",\n            \"/content/nonExisting\", \"/content/nonExisting/jcr:primaryType\",\n            \"/content/no\",\"/content/no/cug\",\"/content/no/cug/in\",\"/content/no/cug/in/subtree\");", "modifier": "private static final", "type": "List<String>", "declarator": "NOT_READABLE_PATHS = ImmutableList.of(\n            \"/\", \"/jcr:primaryType\",\n            UNSUPPORTED_PATH, UNSUPPORTED_PATH + \"/jcr:primaryType\",\n            \"/content\", \"/content/jcr:primaryType\",\n            \"/content/a\", \"/content/a/jcr:primaryType\",\n            \"/content/a/b\", \"/content/a/b/jcr:primaryType\",\n            \"/content/a/b/c/rep:cugPolicy\", \"/content/a/b/c/rep:cugPolicy/jcr:primaryType\", \"/content/a/b/c/rep:cugPolicy/rep:principalNames\",\n            \"/content/a/b/c/rep:cugPolicy/nonExisting\", \"/content/a/b/c/rep:cugPolicy/nonExisting/jcr:primaryType\",\n            \"/content/aa\", \"/content/aa/jcr:primaryType\",\n            \"/content/bb\", \"/content/bb/jcr:primaryType\",\n            \"/content/aa/bb/rep:cugPolicy\", \"/content/aa/bb/rep:cugPolicy/jcr:primaryType\", \"/content/aa/bb/rep:cugPolicy/rep:principalNames\",\n            \"/content/nonExisting\", \"/content/nonExisting/jcr:primaryType\",\n            \"/content/no\",\"/content/no/cug\",\"/content/no/cug/in\",\"/content/no/cug/in/subtree\")", "var_name": "NOT_READABLE_PATHS"}, {"original_string": "private Principal testGroupPrincipal;", "modifier": "private", "type": "Principal", "declarator": "testGroupPrincipal", "var_name": "testGroupPrincipal"}, {"original_string": "private CugPermissionProvider cugPermProvider;", "modifier": "private", "type": "CugPermissionProvider", "declarator": "cugPermProvider", "var_name": "cugPermProvider"}], "file": "oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugPermissionProviderTest.java"}, "test_case": {"identifier": "testSupportedPermissionsByNullTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSupportedPermissionsByNullTree() {\n        assertEquals(Permissions.NO_PERMISSION, cugPermProvider.supportedPermissions((Tree) null, null, Permissions.READ));\n        assertEquals(Permissions.NO_PERMISSION, cugPermProvider.supportedPermissions((Tree) null, null, Permissions.READ_NODE));\n        assertEquals(Permissions.NO_PERMISSION, cugPermProvider.supportedPermissions((Tree) null, null, Permissions.READ_PROPERTY));\n\n        assertEquals(Permissions.NO_PERMISSION, cugPermProvider.supportedPermissions((Tree) null, null, Permissions.ALL));\n        assertEquals(Permissions.NO_PERMISSION, cugPermProvider.supportedPermissions((Tree) null, null, Permissions.READ_NODE | Permissions.READ_ACCESS_CONTROL));\n\n        assertEquals(Permissions.NO_PERMISSION, cugPermProvider.supportedPermissions((Tree) null, null, Permissions.WRITE));\n        assertEquals(Permissions.NO_PERMISSION, cugPermProvider.supportedPermissions((Tree) null, null, Permissions.ADD_NODE | Permissions.REMOVE));\n        assertEquals(Permissions.NO_PERMISSION, cugPermProvider.supportedPermissions((Tree) null, null, Permissions.READ_ACCESS_CONTROL));\n    }", "signature": "void testSupportedPermissionsByNullTree()", "full_signature": "@Test public void testSupportedPermissionsByNullTree()", "class_method_signature": "CugPermissionProviderTest.testSupportedPermissionsByNullTree()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "supportedPermissions", "assertEquals", "supportedPermissions", "assertEquals", "supportedPermissions", "assertEquals", "supportedPermissions", "assertEquals", "supportedPermissions", "assertEquals", "supportedPermissions", "assertEquals", "supportedPermissions", "assertEquals", "supportedPermissions"]}, "focal_class": {"identifier": "CugPermissionProvider", "superclass": "", "interfaces": "implements AggregatedPermissionProvider, CugConstants", "fields": [{"original_string": "private static final Set<String> READ_PRIVILEGE_NAMES = ImmutableSet.of(\n            PrivilegeConstants.JCR_READ,\n            PrivilegeConstants.REP_READ_NODES,\n            PrivilegeConstants.REP_READ_PROPERTIES\n    );", "modifier": "private static final", "type": "Set<String>", "declarator": "READ_PRIVILEGE_NAMES = ImmutableSet.of(\n            PrivilegeConstants.JCR_READ,\n            PrivilegeConstants.REP_READ_NODES,\n            PrivilegeConstants.REP_READ_PROPERTIES\n    )", "var_name": "READ_PRIVILEGE_NAMES"}, {"original_string": "private final Root root;", "modifier": "private final", "type": "Root", "declarator": "root", "var_name": "root"}, {"original_string": "private final String workspaceName;", "modifier": "private final", "type": "String", "declarator": "workspaceName", "var_name": "workspaceName"}, {"original_string": "private final String[] principalNames;", "modifier": "private final", "type": "String[]", "declarator": "principalNames", "var_name": "principalNames"}, {"original_string": "private final TreeTypeProvider typeProvider;", "modifier": "private final", "type": "TreeTypeProvider", "declarator": "typeProvider", "var_name": "typeProvider"}, {"original_string": "private final Context ctx;", "modifier": "private final", "type": "Context", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private final SupportedPaths supportedPaths;", "modifier": "private final", "type": "SupportedPaths", "declarator": "supportedPaths", "var_name": "supportedPaths"}, {"original_string": "private Root immutableRoot;", "modifier": "private", "type": "Root", "declarator": "immutableRoot", "var_name": "immutableRoot"}, {"original_string": "private ReadOnlyVersionManager versionManager;", "modifier": "private", "type": "ReadOnlyVersionManager", "declarator": "versionManager", "var_name": "versionManager"}, {"original_string": "private TopLevelPaths topPaths;", "modifier": "private", "type": "TopLevelPaths", "declarator": "topPaths", "var_name": "topPaths"}, {"original_string": "private final RootProvider rootProvider;", "modifier": "private final", "type": "RootProvider", "declarator": "rootProvider", "var_name": "rootProvider"}, {"original_string": "private final TreeProvider treeProvider;", "modifier": "private final", "type": "TreeProvider", "declarator": "treeProvider", "var_name": "treeProvider"}], "methods": [{"identifier": "CugPermissionProvider", "parameters": "(@NotNull Root root,\n                          @NotNull String workspaceName,\n                          @NotNull Set<Principal> principals,\n                          @NotNull Set<String> supportedPaths,\n                          @NotNull Context ctx,\n                          @NotNull RootProvider rootProvider,\n                          @NotNull TreeProvider treeProvider)", "modifiers": "", "return": "", "signature": " CugPermissionProvider(@NotNull Root root,\n                          @NotNull String workspaceName,\n                          @NotNull Set<Principal> principals,\n                          @NotNull Set<String> supportedPaths,\n                          @NotNull Context ctx,\n                          @NotNull RootProvider rootProvider,\n                          @NotNull TreeProvider treeProvider)", "full_signature": "  CugPermissionProvider(@NotNull Root root,\n                          @NotNull String workspaceName,\n                          @NotNull Set<Principal> principals,\n                          @NotNull Set<String> supportedPaths,\n                          @NotNull Context ctx,\n                          @NotNull RootProvider rootProvider,\n                          @NotNull TreeProvider treeProvider)", "class_method_signature": "CugPermissionProvider.CugPermissionProvider(@NotNull Root root,\n                          @NotNull String workspaceName,\n                          @NotNull Set<Principal> principals,\n                          @NotNull Set<String> supportedPaths,\n                          @NotNull Context ctx,\n                          @NotNull RootProvider rootProvider,\n                          @NotNull TreeProvider treeProvider)", "testcase": false, "constructor": true}, {"identifier": "getTreePermission", "parameters": "(@NotNull Tree parent, @NotNull TreeType parentType, @NotNull String childName, @NotNull NodeState childState, @NotNull AbstractTreePermission parentPermission)", "modifiers": "@NotNull", "return": "TreePermission", "signature": "TreePermission getTreePermission(@NotNull Tree parent, @NotNull TreeType parentType, @NotNull String childName, @NotNull NodeState childState, @NotNull AbstractTreePermission parentPermission)", "full_signature": "@NotNull TreePermission getTreePermission(@NotNull Tree parent, @NotNull TreeType parentType, @NotNull String childName, @NotNull NodeState childState, @NotNull AbstractTreePermission parentPermission)", "class_method_signature": "CugPermissionProvider.getTreePermission(@NotNull Tree parent, @NotNull TreeType parentType, @NotNull String childName, @NotNull NodeState childState, @NotNull AbstractTreePermission parentPermission)", "testcase": false, "constructor": false}, {"identifier": "isAllow", "parameters": "(@NotNull Tree cugTree)", "modifiers": "", "return": "boolean", "signature": "boolean isAllow(@NotNull Tree cugTree)", "full_signature": " boolean isAllow(@NotNull Tree cugTree)", "class_method_signature": "CugPermissionProvider.isAllow(@NotNull Tree cugTree)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "CugPermissionProvider.refresh()", "testcase": false, "constructor": false}, {"identifier": "getPrivileges", "parameters": "(@Nullable Tree tree)", "modifiers": "@NotNull @Override public", "return": "Set<String>", "signature": "Set<String> getPrivileges(@Nullable Tree tree)", "full_signature": "@NotNull @Override public Set<String> getPrivileges(@Nullable Tree tree)", "class_method_signature": "CugPermissionProvider.getPrivileges(@Nullable Tree tree)", "testcase": false, "constructor": false}, {"identifier": "hasPrivileges", "parameters": "(@Nullable Tree tree, @NotNull String... privilegeNames)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPrivileges(@Nullable Tree tree, @NotNull String... privilegeNames)", "full_signature": "@Override public boolean hasPrivileges(@Nullable Tree tree, @NotNull String... privilegeNames)", "class_method_signature": "CugPermissionProvider.hasPrivileges(@Nullable Tree tree, @NotNull String... privilegeNames)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryPermission", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RepositoryPermission", "signature": "RepositoryPermission getRepositoryPermission()", "full_signature": "@NotNull @Override public RepositoryPermission getRepositoryPermission()", "class_method_signature": "CugPermissionProvider.getRepositoryPermission()", "testcase": false, "constructor": false}, {"identifier": "getTreePermission", "parameters": "(@NotNull Tree tree, @NotNull TreePermission parentPermission)", "modifiers": "@NotNull @Override public", "return": "TreePermission", "signature": "TreePermission getTreePermission(@NotNull Tree tree, @NotNull TreePermission parentPermission)", "full_signature": "@NotNull @Override public TreePermission getTreePermission(@NotNull Tree tree, @NotNull TreePermission parentPermission)", "class_method_signature": "CugPermissionProvider.getTreePermission(@NotNull Tree tree, @NotNull TreePermission parentPermission)", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(@NotNull Tree tree, PropertyState property, long permissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(@NotNull Tree tree, PropertyState property, long permissions)", "full_signature": "@Override public boolean isGranted(@NotNull Tree tree, PropertyState property, long permissions)", "class_method_signature": "CugPermissionProvider.isGranted(@NotNull Tree tree, PropertyState property, long permissions)", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(@NotNull String oakPath, @NotNull String jcrActions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(@NotNull String oakPath, @NotNull String jcrActions)", "full_signature": "@Override public boolean isGranted(@NotNull String oakPath, @NotNull String jcrActions)", "class_method_signature": "CugPermissionProvider.isGranted(@NotNull String oakPath, @NotNull String jcrActions)", "testcase": false, "constructor": false}, {"identifier": "supportedPrivileges", "parameters": "(@Nullable Tree tree, @Nullable PrivilegeBits privilegeBits)", "modifiers": "@NotNull @Override public", "return": "PrivilegeBits", "signature": "PrivilegeBits supportedPrivileges(@Nullable Tree tree, @Nullable PrivilegeBits privilegeBits)", "full_signature": "@NotNull @Override public PrivilegeBits supportedPrivileges(@Nullable Tree tree, @Nullable PrivilegeBits privilegeBits)", "class_method_signature": "CugPermissionProvider.supportedPrivileges(@Nullable Tree tree, @Nullable PrivilegeBits privilegeBits)", "testcase": false, "constructor": false}, {"identifier": "supportedPermissions", "parameters": "(@Nullable Tree tree, @Nullable PropertyState property, long permissions)", "modifiers": "@Override public", "return": "long", "signature": "long supportedPermissions(@Nullable Tree tree, @Nullable PropertyState property, long permissions)", "full_signature": "@Override public long supportedPermissions(@Nullable Tree tree, @Nullable PropertyState property, long permissions)", "class_method_signature": "CugPermissionProvider.supportedPermissions(@Nullable Tree tree, @Nullable PropertyState property, long permissions)", "testcase": false, "constructor": false}, {"identifier": "supportedPermissions", "parameters": "(@NotNull TreeLocation location, long permissions)", "modifiers": "@Override public", "return": "long", "signature": "long supportedPermissions(@NotNull TreeLocation location, long permissions)", "full_signature": "@Override public long supportedPermissions(@NotNull TreeLocation location, long permissions)", "class_method_signature": "CugPermissionProvider.supportedPermissions(@NotNull TreeLocation location, long permissions)", "testcase": false, "constructor": false}, {"identifier": "supportedPermissions", "parameters": "(@NotNull TreePermission treePermission, @Nullable PropertyState property, long permissions)", "modifiers": "@Override public", "return": "long", "signature": "long supportedPermissions(@NotNull TreePermission treePermission, @Nullable PropertyState property, long permissions)", "full_signature": "@Override public long supportedPermissions(@NotNull TreePermission treePermission, @Nullable PropertyState property, long permissions)", "class_method_signature": "CugPermissionProvider.supportedPermissions(@NotNull TreePermission treePermission, @Nullable PropertyState property, long permissions)", "testcase": false, "constructor": false}, {"identifier": "isGranted", "parameters": "(@NotNull TreeLocation location, long permissions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGranted(@NotNull TreeLocation location, long permissions)", "full_signature": "@Override public boolean isGranted(@NotNull TreeLocation location, long permissions)", "class_method_signature": "CugPermissionProvider.isGranted(@NotNull TreeLocation location, long permissions)", "testcase": false, "constructor": false}, {"identifier": "getTreePermission", "parameters": "(@NotNull Tree immutableTree, @NotNull TreeType type, @NotNull TreePermission parentPermission)", "modifiers": "@NotNull public", "return": "TreePermission", "signature": "TreePermission getTreePermission(@NotNull Tree immutableTree, @NotNull TreeType type, @NotNull TreePermission parentPermission)", "full_signature": "@NotNull public TreePermission getTreePermission(@NotNull Tree immutableTree, @NotNull TreeType type, @NotNull TreePermission parentPermission)", "class_method_signature": "CugPermissionProvider.getTreePermission(@NotNull Tree immutableTree, @NotNull TreeType type, @NotNull TreePermission parentPermission)", "testcase": false, "constructor": false}, {"identifier": "isJcrSystemPath", "parameters": "(@NotNull Tree tree)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJcrSystemPath(@NotNull Tree tree)", "full_signature": "private static boolean isJcrSystemPath(@NotNull Tree tree)", "class_method_signature": "CugPermissionProvider.isJcrSystemPath(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "isRead", "parameters": "(long permission)", "modifiers": "private static", "return": "boolean", "signature": "boolean isRead(long permission)", "full_signature": "private static boolean isRead(long permission)", "class_method_signature": "CugPermissionProvider.isRead(long permission)", "testcase": false, "constructor": false}, {"identifier": "isSupportedType", "parameters": "(@NotNull TreeType type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSupportedType(@NotNull TreeType type)", "full_signature": "private static boolean isSupportedType(@NotNull TreeType type)", "class_method_signature": "CugPermissionProvider.isSupportedType(@NotNull TreeType type)", "testcase": false, "constructor": false}, {"identifier": "includesCug", "parameters": "(@Nullable Tree tree)", "modifiers": "private", "return": "boolean", "signature": "boolean includesCug(@Nullable Tree tree)", "full_signature": "private boolean includesCug(@Nullable Tree tree)", "class_method_signature": "CugPermissionProvider.includesCug(@Nullable Tree tree)", "testcase": false, "constructor": false}, {"identifier": "includes", "parameters": "(@NotNull String path)", "modifiers": "private", "return": "boolean", "signature": "boolean includes(@NotNull String path)", "full_signature": "private boolean includes(@NotNull String path)", "class_method_signature": "CugPermissionProvider.includes(@NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "mayContain", "parameters": "(@NotNull String path)", "modifiers": "private", "return": "boolean", "signature": "boolean mayContain(@NotNull String path)", "full_signature": "private boolean mayContain(@NotNull String path)", "class_method_signature": "CugPermissionProvider.mayContain(@NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "getCugRoot", "parameters": "(@NotNull Tree immutableTree, @NotNull TreeType type)", "modifiers": "@Nullable private", "return": "Tree", "signature": "Tree getCugRoot(@NotNull Tree immutableTree, @NotNull TreeType type)", "full_signature": "@Nullable private Tree getCugRoot(@NotNull Tree immutableTree, @NotNull TreeType type)", "class_method_signature": "CugPermissionProvider.getCugRoot(@NotNull Tree immutableTree, @NotNull TreeType type)", "testcase": false, "constructor": false}, {"identifier": "canRead", "parameters": "(@NotNull Tree tree)", "modifiers": "private", "return": "boolean", "signature": "boolean canRead(@NotNull Tree tree)", "full_signature": "private boolean canRead(@NotNull Tree tree)", "class_method_signature": "CugPermissionProvider.canRead(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getImmutableTree", "parameters": "(@NotNull Tree tree)", "modifiers": "@NotNull private", "return": "Tree", "signature": "Tree getImmutableTree(@NotNull Tree tree)", "full_signature": "@NotNull private Tree getImmutableTree(@NotNull Tree tree)", "class_method_signature": "CugPermissionProvider.getImmutableTree(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "getTreeFromLocation", "parameters": "(@NotNull TreeLocation location)", "modifiers": "@Nullable private static", "return": "Tree", "signature": "Tree getTreeFromLocation(@NotNull TreeLocation location)", "full_signature": "@Nullable private static Tree getTreeFromLocation(@NotNull TreeLocation location)", "class_method_signature": "CugPermissionProvider.getTreeFromLocation(@NotNull TreeLocation location)", "testcase": false, "constructor": false}, {"identifier": "createVersionPermission", "parameters": "(@NotNull Tree tree, @NotNull TreeType type, @NotNull TreePermission parent, boolean parentIsCugPermission)", "modifiers": "@NotNull private", "return": "TreePermission", "signature": "TreePermission createVersionPermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull TreePermission parent, boolean parentIsCugPermission)", "full_signature": "@NotNull private TreePermission createVersionPermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull TreePermission parent, boolean parentIsCugPermission)", "class_method_signature": "CugPermissionProvider.createVersionPermission(@NotNull Tree tree, @NotNull TreeType type, @NotNull TreePermission parent, boolean parentIsCugPermission)", "testcase": false, "constructor": false}, {"identifier": "getVersionManager", "parameters": "()", "modifiers": "@NotNull private", "return": "ReadOnlyVersionManager", "signature": "ReadOnlyVersionManager getVersionManager()", "full_signature": "@NotNull private ReadOnlyVersionManager getVersionManager()", "class_method_signature": "CugPermissionProvider.getVersionManager()", "testcase": false, "constructor": false}], "file": "oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugPermissionProvider.java"}, "focal_method": {"identifier": "supportedPermissions", "parameters": "(@Nullable Tree tree, @Nullable PropertyState property, long permissions)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long supportedPermissions(@Nullable Tree tree, @Nullable PropertyState property, long permissions) {\n        if (tree == null) {\n            // repository level permissions are not supported\n            return Permissions.NO_PERMISSION;\n        }\n\n        long supported = permissions & Permissions.READ;\n        if (supported != Permissions.NO_PERMISSION && includesCug(tree)) {\n            return supported;\n        } else {\n            return Permissions.NO_PERMISSION;\n        }\n    }", "signature": "long supportedPermissions(@Nullable Tree tree, @Nullable PropertyState property, long permissions)", "full_signature": "@Override public long supportedPermissions(@Nullable Tree tree, @Nullable PropertyState property, long permissions)", "class_method_signature": "CugPermissionProvider.supportedPermissions(@Nullable Tree tree, @Nullable PropertyState property, long permissions)", "testcase": false, "constructor": false, "invocations": ["includesCug"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}