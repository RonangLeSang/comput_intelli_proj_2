{"test_class": {"identifier": "CugUtilTest", "superclass": "extends AbstractCugTest", "interfaces": "", "fields": [], "file": "oak-authorization-cug/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugUtilTest.java"}, "test_case": {"identifier": "testGetSupportedPathsMountsAtSupportedPath", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testGetSupportedPathsMountsAtSupportedPath() {\n        MountInfoProvider mip = Mounts.newBuilder().mount(\"private\", \"/libs\", SUPPORTED_PATH3).build();\n        CugUtil.getSupportedPaths(CUG_CONFIG, mip);\n    }", "signature": "void testGetSupportedPathsMountsAtSupportedPath()", "full_signature": "@Test(expected = IllegalStateException.class) public void testGetSupportedPathsMountsAtSupportedPath()", "class_method_signature": "CugUtilTest.testGetSupportedPathsMountsAtSupportedPath()", "testcase": true, "constructor": false, "invocations": ["build", "mount", "newBuilder", "getSupportedPaths"]}, "focal_class": {"identifier": "CugUtil", "superclass": "", "interfaces": "implements CugConstants", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CugUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CugUtil.class)", "var_name": "log"}], "methods": [{"identifier": "CugUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " CugUtil()", "full_signature": "private  CugUtil()", "class_method_signature": "CugUtil.CugUtil()", "testcase": false, "constructor": true}, {"identifier": "hasCug", "parameters": "(@NotNull Tree tree)", "modifiers": "static", "return": "boolean", "signature": "boolean hasCug(@NotNull Tree tree)", "full_signature": "static boolean hasCug(@NotNull Tree tree)", "class_method_signature": "CugUtil.hasCug(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "hasCug", "parameters": "(@Nullable NodeState state)", "modifiers": "static", "return": "boolean", "signature": "boolean hasCug(@Nullable NodeState state)", "full_signature": "static boolean hasCug(@Nullable NodeState state)", "class_method_signature": "CugUtil.hasCug(@Nullable NodeState state)", "testcase": false, "constructor": false}, {"identifier": "hasCug", "parameters": "(@Nullable NodeBuilder builder)", "modifiers": "static", "return": "boolean", "signature": "boolean hasCug(@Nullable NodeBuilder builder)", "full_signature": "static boolean hasCug(@Nullable NodeBuilder builder)", "class_method_signature": "CugUtil.hasCug(@Nullable NodeBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getCug", "parameters": "(@NotNull Tree tree)", "modifiers": "@Nullable static", "return": "Tree", "signature": "Tree getCug(@NotNull Tree tree)", "full_signature": "@Nullable static Tree getCug(@NotNull Tree tree)", "class_method_signature": "CugUtil.getCug(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "definesCug", "parameters": "(@NotNull Tree tree)", "modifiers": "static", "return": "boolean", "signature": "boolean definesCug(@NotNull Tree tree)", "full_signature": "static boolean definesCug(@NotNull Tree tree)", "class_method_signature": "CugUtil.definesCug(@NotNull Tree tree)", "testcase": false, "constructor": false}, {"identifier": "definesCug", "parameters": "(@NotNull String name, @NotNull NodeState state)", "modifiers": "static", "return": "boolean", "signature": "boolean definesCug(@NotNull String name, @NotNull NodeState state)", "full_signature": "static boolean definesCug(@NotNull String name, @NotNull NodeState state)", "class_method_signature": "CugUtil.definesCug(@NotNull String name, @NotNull NodeState state)", "testcase": false, "constructor": false}, {"identifier": "definesCug", "parameters": "(@NotNull Tree tree, @NotNull PropertyState property)", "modifiers": "static", "return": "boolean", "signature": "boolean definesCug(@NotNull Tree tree, @NotNull PropertyState property)", "full_signature": "static boolean definesCug(@NotNull Tree tree, @NotNull PropertyState property)", "class_method_signature": "CugUtil.definesCug(@NotNull Tree tree, @NotNull PropertyState property)", "testcase": false, "constructor": false}, {"identifier": "hasNestedCug", "parameters": "(@NotNull Tree cugTree)", "modifiers": "static", "return": "boolean", "signature": "boolean hasNestedCug(@NotNull Tree cugTree)", "full_signature": "static boolean hasNestedCug(@NotNull Tree cugTree)", "class_method_signature": "CugUtil.hasNestedCug(@NotNull Tree cugTree)", "testcase": false, "constructor": false}, {"identifier": "isSupportedPath", "parameters": "(@Nullable String oakPath, @NotNull Set<String> supportedPaths)", "modifiers": "static", "return": "boolean", "signature": "boolean isSupportedPath(@Nullable String oakPath, @NotNull Set<String> supportedPaths)", "full_signature": "static boolean isSupportedPath(@Nullable String oakPath, @NotNull Set<String> supportedPaths)", "class_method_signature": "CugUtil.isSupportedPath(@Nullable String oakPath, @NotNull Set<String> supportedPaths)", "testcase": false, "constructor": false}, {"identifier": "getSupportedPaths", "parameters": "(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider)", "modifiers": "static", "return": "Set<String>", "signature": "Set<String> getSupportedPaths(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider)", "full_signature": "static Set<String> getSupportedPaths(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider)", "class_method_signature": "CugUtil.getSupportedPaths(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider)", "testcase": false, "constructor": false}, {"identifier": "getImportBehavior", "parameters": "(ConfigurationParameters config)", "modifiers": "static", "return": "int", "signature": "int getImportBehavior(ConfigurationParameters config)", "full_signature": "static int getImportBehavior(ConfigurationParameters config)", "class_method_signature": "CugUtil.getImportBehavior(ConfigurationParameters config)", "testcase": false, "constructor": false}], "file": "oak-authorization-cug/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/cug/impl/CugUtil.java"}, "focal_method": {"identifier": "getSupportedPaths", "parameters": "(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider)", "modifiers": "static", "return": "Set<String>", "body": "static Set<String> getSupportedPaths(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider) {\n        Set<String> supportedPaths = params.getConfigValue(CugConstants.PARAM_CUG_SUPPORTED_PATHS, ImmutableSet.of());\n        if (!supportedPaths.isEmpty() && mountInfoProvider.hasNonDefaultMounts()) {\n            for (Mount mount : mountInfoProvider.getNonDefaultMounts()) {\n                for (String path : supportedPaths) {\n                    if (mount.isUnder(path)) {\n                        log.error(\"Configured supported CUG path '{}' includes node store mount '{}'.\", path, mount.getName());\n                        throw new IllegalStateException();\n                    } else if (mount.isMounted(path)) {\n                        log.error(\"Configured supported CUG path '{}' is part of node store mount '{}'.\", path, mount.getName());\n                        throw new IllegalStateException();\n                    }\n                }\n            }\n        }\n        return supportedPaths;\n    }", "signature": "Set<String> getSupportedPaths(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider)", "full_signature": "static Set<String> getSupportedPaths(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider)", "class_method_signature": "CugUtil.getSupportedPaths(@NotNull ConfigurationParameters params, @NotNull MountInfoProvider mountInfoProvider)", "testcase": false, "constructor": false, "invocations": ["getConfigValue", "of", "isEmpty", "hasNonDefaultMounts", "getNonDefaultMounts", "isUnder", "error", "getName", "isMounted", "error", "getName"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}