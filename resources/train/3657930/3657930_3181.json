{"test_class": {"identifier": "AbstractAccessControlListTest", "superclass": "extends AbstractAccessControlTest", "interfaces": "", "fields": [], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/accesscontrol/AbstractAccessControlListTest.java"}, "test_case": {"identifier": "testGetOakPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetOakPath() {\n        NamePathMapper npMapper = mockNamePathMapper(getTestPath());\n\n        // map of jcr-path to oak path\n        Map<String, String> paths = new HashMap<>();\n        paths.put(null, null);\n        paths.put(getTestPath(), getTestPath());\n        paths.put(\"/\", \"/\");\n        String oakPath = \"/oak:testPath\";\n        paths.put(\"/jr:testPath\", oakPath);\n        paths.put(\"/{http://jackrabbit.apache.org}testPath\", oakPath);\n\n        // test if oak-path is properly set.\n        for (String path : paths.keySet()) {\n            AbstractAccessControlList acl = createACL(path, Collections.<JackrabbitAccessControlEntry>emptyList(), npMapper);\n            assertEquals(paths.get(path), acl.getOakPath());\n        }\n    }", "signature": "void testGetOakPath()", "full_signature": "@Test public void testGetOakPath()", "class_method_signature": "AbstractAccessControlListTest.testGetOakPath()", "testcase": true, "constructor": false, "invocations": ["mockNamePathMapper", "getTestPath", "put", "put", "getTestPath", "getTestPath", "put", "put", "put", "keySet", "createACL", "emptyList", "assertEquals", "get", "getOakPath"]}, "focal_class": {"identifier": "AbstractAccessControlList", "superclass": "", "interfaces": "implements JackrabbitAccessControlList", "fields": [{"original_string": "private final String oakPath;", "modifier": "private final", "type": "String", "declarator": "oakPath", "var_name": "oakPath"}, {"original_string": "private final NamePathMapper namePathMapper;", "modifier": "private final", "type": "NamePathMapper", "declarator": "namePathMapper", "var_name": "namePathMapper"}], "methods": [{"identifier": "AbstractAccessControlList", "parameters": "(@Nullable String oakPath,\n                                     @NotNull NamePathMapper namePathMapper)", "modifiers": "public", "return": "", "signature": " AbstractAccessControlList(@Nullable String oakPath,\n                                     @NotNull NamePathMapper namePathMapper)", "full_signature": "public  AbstractAccessControlList(@Nullable String oakPath,\n                                     @NotNull NamePathMapper namePathMapper)", "class_method_signature": "AbstractAccessControlList.AbstractAccessControlList(@Nullable String oakPath,\n                                     @NotNull NamePathMapper namePathMapper)", "testcase": false, "constructor": true}, {"identifier": "getOakPath", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getOakPath()", "full_signature": "@Nullable public String getOakPath()", "class_method_signature": "AbstractAccessControlList.getOakPath()", "testcase": false, "constructor": false}, {"identifier": "getNamePathMapper", "parameters": "()", "modifiers": "@NotNull public", "return": "NamePathMapper", "signature": "NamePathMapper getNamePathMapper()", "full_signature": "@NotNull public NamePathMapper getNamePathMapper()", "class_method_signature": "AbstractAccessControlList.getNamePathMapper()", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "()", "modifiers": "@NotNull public abstract", "return": "List<? extends JackrabbitAccessControlEntry>", "signature": "List<? extends JackrabbitAccessControlEntry> getEntries()", "full_signature": "@NotNull public abstract List<? extends JackrabbitAccessControlEntry> getEntries()", "class_method_signature": "AbstractAccessControlList.getEntries()", "testcase": false, "constructor": false}, {"identifier": "getRestrictionProvider", "parameters": "()", "modifiers": "@NotNull public abstract", "return": "RestrictionProvider", "signature": "RestrictionProvider getRestrictionProvider()", "full_signature": "@NotNull public abstract RestrictionProvider getRestrictionProvider()", "class_method_signature": "AbstractAccessControlList.getRestrictionProvider()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getPath()", "full_signature": "@Nullable @Override public String getPath()", "class_method_signature": "AbstractAccessControlList.getPath()", "testcase": false, "constructor": false}, {"identifier": "getAccessControlEntries", "parameters": "()", "modifiers": "@Override public", "return": "AccessControlEntry[]", "signature": "AccessControlEntry[] getAccessControlEntries()", "full_signature": "@Override public AccessControlEntry[] getAccessControlEntries()", "class_method_signature": "AbstractAccessControlList.getAccessControlEntries()", "testcase": false, "constructor": false}, {"identifier": "addAccessControlEntry", "parameters": "(Principal principal, Privilege[] privileges)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAccessControlEntry(Principal principal, Privilege[] privileges)", "full_signature": "@Override public boolean addAccessControlEntry(Principal principal, Privilege[] privileges)", "class_method_signature": "AbstractAccessControlList.addAccessControlEntry(Principal principal, Privilege[] privileges)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "AbstractAccessControlList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "AbstractAccessControlList.size()", "testcase": false, "constructor": false}, {"identifier": "getRestrictionNames", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String[]", "signature": "String[] getRestrictionNames()", "full_signature": "@NotNull @Override public String[] getRestrictionNames()", "class_method_signature": "AbstractAccessControlList.getRestrictionNames()", "testcase": false, "constructor": false}, {"identifier": "getRestrictionType", "parameters": "(@NotNull String restrictionName)", "modifiers": "@Override public", "return": "int", "signature": "int getRestrictionType(@NotNull String restrictionName)", "full_signature": "@Override public int getRestrictionType(@NotNull String restrictionName)", "class_method_signature": "AbstractAccessControlList.getRestrictionType(@NotNull String restrictionName)", "testcase": false, "constructor": false}, {"identifier": "isMultiValueRestriction", "parameters": "(@NotNull String restrictionName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMultiValueRestriction(@NotNull String restrictionName)", "full_signature": "@Override public boolean isMultiValueRestriction(@NotNull String restrictionName)", "class_method_signature": "AbstractAccessControlList.isMultiValueRestriction(@NotNull String restrictionName)", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow)", "full_signature": "@Override public boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow)", "class_method_signature": "AbstractAccessControlList.addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow)", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow, @Nullable Map<String, Value> restrictions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow, @Nullable Map<String, Value> restrictions)", "full_signature": "@Override public boolean addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow, @Nullable Map<String, Value> restrictions)", "class_method_signature": "AbstractAccessControlList.addEntry(@NotNull Principal principal, @NotNull Privilege[] privileges, boolean isAllow, @Nullable Map<String, Value> restrictions)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/accesscontrol/AbstractAccessControlList.java"}, "focal_method": {"identifier": "getOakPath", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "body": "@Nullable\n    public String getOakPath() {\n        return oakPath;\n    }", "signature": "String getOakPath()", "full_signature": "@Nullable public String getOakPath()", "class_method_signature": "AbstractAccessControlList.getOakPath()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}