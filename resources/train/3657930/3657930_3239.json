{"test_class": {"identifier": "RestrictionImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Type<String> type = Type.NAME;", "modifier": "private final", "type": "Type<String>", "declarator": "type = Type.NAME", "var_name": "type"}, {"original_string": "private final String name = \"test:defName\";", "modifier": "private final", "type": "String", "declarator": "name = \"test:defName\"", "var_name": "name"}, {"original_string": "private final String value = \"value\";", "modifier": "private final", "type": "String", "declarator": "value = \"value\"", "var_name": "value"}, {"original_string": "private final boolean isMandatory = true;", "modifier": "private final", "type": "boolean", "declarator": "isMandatory = true", "var_name": "isMandatory"}, {"original_string": "private RestrictionImpl restriction;", "modifier": "private", "type": "RestrictionImpl", "declarator": "restriction", "var_name": "restriction"}], "file": "oak-security-spi/src/test/java/org/apache/jackrabbit/oak/spi/security/authorization/restriction/RestrictionImplTest.java"}, "test_case": {"identifier": "testNotSameHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotSameHashCode() {\n        List<Restriction> rs = new ArrayList<>();\n        // - different type\n        rs.add(new RestrictionImpl(PropertyStates.createProperty(name, value, Type.STRING), isMandatory));\n        // - different multi-value status\n        rs.add(new RestrictionImpl(PropertyStates.createProperty(name, ImmutableList.of(value), Type.NAMES), isMandatory));\n        // - different name\n        rs.add(new RestrictionImpl(createProperty(\"otherName\", value, type), isMandatory));\n        // - different value\n        rs.add(new RestrictionImpl(createProperty(name, \"otherValue\", type), isMandatory));\n        // - different mandatory flag\n        rs.add(new RestrictionImpl(createProperty(name, value, type), !isMandatory));\n        // - different impl\n        rs.add(new Restriction() {\n            @NotNull\n            @Override\n            public RestrictionDefinition getDefinition() {\n                return new RestrictionDefinitionImpl(name, type, isMandatory);\n            }\n\n            @NotNull\n            @Override\n            public PropertyState getProperty() {\n                return createProperty(name, value, type);\n            }\n        });\n\n        for (Restriction r : rs) {\n            assertNotEquals(restriction.hashCode(), r.hashCode());\n        }\n    }", "signature": "void testNotSameHashCode()", "full_signature": "@Test public void testNotSameHashCode()", "class_method_signature": "RestrictionImplTest.testNotSameHashCode()", "testcase": true, "constructor": false, "invocations": ["add", "createProperty", "add", "createProperty", "of", "add", "createProperty", "add", "createProperty", "add", "createProperty", "add", "createProperty", "assertNotEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "RestrictionImpl", "superclass": "", "interfaces": "implements Restriction", "fields": [{"original_string": "private final RestrictionDefinition definition;", "modifier": "private final", "type": "RestrictionDefinition", "declarator": "definition", "var_name": "definition"}, {"original_string": "private final PropertyState property;", "modifier": "private final", "type": "PropertyState", "declarator": "property", "var_name": "property"}, {"original_string": "private int hashCode = 0;", "modifier": "private", "type": "int", "declarator": "hashCode = 0", "var_name": "hashCode"}], "methods": [{"identifier": "RestrictionImpl", "parameters": "(@NotNull PropertyState property, @NotNull RestrictionDefinition def)", "modifiers": "public", "return": "", "signature": " RestrictionImpl(@NotNull PropertyState property, @NotNull RestrictionDefinition def)", "full_signature": "public  RestrictionImpl(@NotNull PropertyState property, @NotNull RestrictionDefinition def)", "class_method_signature": "RestrictionImpl.RestrictionImpl(@NotNull PropertyState property, @NotNull RestrictionDefinition def)", "testcase": false, "constructor": true}, {"identifier": "RestrictionImpl", "parameters": "(@NotNull PropertyState property, boolean isMandatory)", "modifiers": "public", "return": "", "signature": " RestrictionImpl(@NotNull PropertyState property, boolean isMandatory)", "full_signature": "public  RestrictionImpl(@NotNull PropertyState property, boolean isMandatory)", "class_method_signature": "RestrictionImpl.RestrictionImpl(@NotNull PropertyState property, boolean isMandatory)", "testcase": false, "constructor": true}, {"identifier": "getDefinition", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "RestrictionDefinition", "signature": "RestrictionDefinition getDefinition()", "full_signature": "@NotNull @Override public RestrictionDefinition getDefinition()", "class_method_signature": "RestrictionImpl.getDefinition()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "PropertyState", "signature": "PropertyState getProperty()", "full_signature": "@NotNull @Override public PropertyState getProperty()", "class_method_signature": "RestrictionImpl.getProperty()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RestrictionImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RestrictionImpl.equals(Object o)", "testcase": false, "constructor": false}], "file": "oak-security-spi/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/restriction/RestrictionImpl.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        if (hashCode == 0) {\n            hashCode = Objects.hashCode(definition, property, PropertyValues.create(property));\n        }\n        return hashCode;\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RestrictionImpl.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "create"]}, "repository": {"repo_id": 3657930, "url": "https://github.com/apache/jackrabbit-oak", "stars": 291, "created": "3/8/2012 8:00:14 AM +00:00", "updates": "2020-01-27T10:53:13+00:00", "fork": "False", "license": "licensed"}}