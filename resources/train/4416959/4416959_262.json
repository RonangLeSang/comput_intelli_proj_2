{"test_class": {"identifier": "ApplicationStateManagerImplTest", "superclass": "extends InternalBaseTestCase", "interfaces": "", "fields": [], "file": "tapestry-core/src/test/java/org/apache/tapestry5/internal/services/ApplicationStateManagerImplTest.java"}, "test_case": {"identifier": "get_if_exists_when_it_does_exist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void get_if_exists_when_it_does_exist()\n    {\n        String strategyName = \"ethereal\";\n        ApplicationStatePersistenceStrategy strategy = mockApplicationStatePersistenceStrategy();\n        ApplicationStatePersistenceStrategySource source = mockApplicationStatePersistenceStrategySource();\n        Class asoClass = ReadOnlyBean.class;\n        ApplicationStateCreator<ReadOnlyBean> creator = mockApplicationStateCreator();\n        ReadOnlyBean aso = new ReadOnlyBean();\n\n        Map<Class, ApplicationStateContribution> configuration = Collections.singletonMap(asoClass,\n                new ApplicationStateContribution(strategyName, creator));\n\n        train_get(source, strategyName, strategy);\n        train_getIfExists(strategy, asoClass, aso);\n\n        replay();\n\n        ApplicationStateManager manager = new ApplicationStateManagerImpl(configuration, source,\n                null);\n\n        assertSame(manager.getIfExists(asoClass), aso);\n\n        verify();\n    }", "signature": "void get_if_exists_when_it_does_exist()", "full_signature": "@Test public void get_if_exists_when_it_does_exist()", "class_method_signature": "ApplicationStateManagerImplTest.get_if_exists_when_it_does_exist()", "testcase": true, "constructor": false, "invocations": ["mockApplicationStatePersistenceStrategy", "mockApplicationStatePersistenceStrategySource", "mockApplicationStateCreator", "singletonMap", "train_get", "train_getIfExists", "replay", "assertSame", "getIfExists", "verify"]}, "focal_class": {"identifier": "ApplicationStateManagerImpl", "superclass": "", "interfaces": "implements ApplicationStateManager", "fields": [{"original_string": "static final String DEFAULT_STRATEGY = \"session\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_STRATEGY = \"session\"", "var_name": "DEFAULT_STRATEGY"}, {"original_string": "private final Map<Class, ApplicationStateAdapter> classToAdapter = newConcurrentMap();", "modifier": "private final", "type": "Map<Class, ApplicationStateAdapter>", "declarator": "classToAdapter = newConcurrentMap()", "var_name": "classToAdapter"}, {"original_string": "private final ApplicationStatePersistenceStrategySource source;", "modifier": "private final", "type": "ApplicationStatePersistenceStrategySource", "declarator": "source", "var_name": "source"}, {"original_string": "private final ObjectLocator locator;", "modifier": "private final", "type": "ObjectLocator", "declarator": "locator", "var_name": "locator"}], "methods": [{"identifier": "ApplicationStateManagerImpl", "parameters": "(Map<Class, ApplicationStateContribution> configuration,\n            ApplicationStatePersistenceStrategySource source, ObjectLocator locator)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " ApplicationStateManagerImpl(Map<Class, ApplicationStateContribution> configuration,\n            ApplicationStatePersistenceStrategySource source, ObjectLocator locator)", "full_signature": "@SuppressWarnings(\"unchecked\") public  ApplicationStateManagerImpl(Map<Class, ApplicationStateContribution> configuration,\n            ApplicationStatePersistenceStrategySource source, ObjectLocator locator)", "class_method_signature": "ApplicationStateManagerImpl.ApplicationStateManagerImpl(Map<Class, ApplicationStateContribution> configuration,\n            ApplicationStatePersistenceStrategySource source, ObjectLocator locator)", "testcase": false, "constructor": true}, {"identifier": "newAdapter", "parameters": "(final Class<T> ssoClass, String strategyName,\n            ApplicationStateCreator<T> creator)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "ApplicationStateAdapter<T>", "signature": "ApplicationStateAdapter<T> newAdapter(final Class<T> ssoClass, String strategyName,\n            ApplicationStateCreator<T> creator)", "full_signature": "@SuppressWarnings(\"unchecked\") private ApplicationStateAdapter<T> newAdapter(final Class<T> ssoClass, String strategyName,\n            ApplicationStateCreator<T> creator)", "class_method_signature": "ApplicationStateManagerImpl.newAdapter(final Class<T> ssoClass, String strategyName,\n            ApplicationStateCreator<T> creator)", "testcase": false, "constructor": false}, {"identifier": "getAdapter", "parameters": "(Class<T> ssoClass)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "ApplicationStateAdapter<T>", "signature": "ApplicationStateAdapter<T> getAdapter(Class<T> ssoClass)", "full_signature": "@SuppressWarnings(\"unchecked\") private ApplicationStateAdapter<T> getAdapter(Class<T> ssoClass)", "class_method_signature": "ApplicationStateManagerImpl.getAdapter(Class<T> ssoClass)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> ssoClass)", "modifiers": "public", "return": "T", "signature": "T get(Class<T> ssoClass)", "full_signature": "public T get(Class<T> ssoClass)", "class_method_signature": "ApplicationStateManagerImpl.get(Class<T> ssoClass)", "testcase": false, "constructor": false}, {"identifier": "getIfExists", "parameters": "(Class<T> ssoClass)", "modifiers": "public", "return": "T", "signature": "T getIfExists(Class<T> ssoClass)", "full_signature": "public T getIfExists(Class<T> ssoClass)", "class_method_signature": "ApplicationStateManagerImpl.getIfExists(Class<T> ssoClass)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Class<T> ssoClass, T sso)", "modifiers": "public", "return": "void", "signature": "void set(Class<T> ssoClass, T sso)", "full_signature": "public void set(Class<T> ssoClass, T sso)", "class_method_signature": "ApplicationStateManagerImpl.set(Class<T> ssoClass, T sso)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(Class<T> ssoClass)", "modifiers": "public", "return": "boolean", "signature": "boolean exists(Class<T> ssoClass)", "full_signature": "public boolean exists(Class<T> ssoClass)", "class_method_signature": "ApplicationStateManagerImpl.exists(Class<T> ssoClass)", "testcase": false, "constructor": false}], "file": "tapestry-core/src/main/java/org/apache/tapestry5/internal/services/ApplicationStateManagerImpl.java"}, "focal_method": {"identifier": "getIfExists", "parameters": "(Class<T> ssoClass)", "modifiers": "public", "return": "T", "body": "public <T> T getIfExists(Class<T> ssoClass)\n    {\n        return getAdapter(ssoClass).getIfExists();\n    }", "signature": "T getIfExists(Class<T> ssoClass)", "full_signature": "public T getIfExists(Class<T> ssoClass)", "class_method_signature": "ApplicationStateManagerImpl.getIfExists(Class<T> ssoClass)", "testcase": false, "constructor": false, "invocations": ["getIfExists", "getAdapter"]}, "repository": {"repo_id": 4416959, "url": "https://github.com/apache/tapestry-5", "stars": 82, "created": "5/23/2012 7:00:11 AM +00:00", "updates": "2020-01-11T21:07:48+00:00", "fork": "False", "license": "licensed"}}