{"test_class": {"identifier": "TestValidator", "superclass": "", "interfaces": "", "fields": [], "file": "roman/src/test/java/name/abhijitsarkar/roman/TestValidator.java"}, "test_case": {"identifier": "testValidNumber2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testValidNumber2() {\n\t\tValidator.validate(\"XXX\");\n\t}", "signature": "void testValidNumber2()", "full_signature": "@Test public void testValidNumber2()", "class_method_signature": "TestValidator.testValidNumber2()", "testcase": true, "constructor": false, "invocations": ["validate"]}, "focal_class": {"identifier": "Validator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Map<Character, Integer> repeatMap;", "modifier": "public static final", "type": "Map<Character, Integer>", "declarator": "repeatMap", "var_name": "repeatMap"}], "methods": [{"identifier": "validate", "parameters": "(final String romanNumber)", "modifiers": "public static", "return": "void", "signature": "void validate(final String romanNumber)", "full_signature": "public static void validate(final String romanNumber)", "class_method_signature": "Validator.validate(final String romanNumber)", "testcase": false, "constructor": false}], "file": "roman/src/main/java/name/abhijitsarkar/roman/Validator.java"}, "focal_method": {"identifier": "validate", "parameters": "(final String romanNumber)", "modifiers": "public static", "return": "void", "body": "public static void validate(final String romanNumber) {\n\t\tif (romanNumber == null || romanNumber.trim().length() == 0) {\n\t\t\tthrow new IllegalArgumentException(romanNumber\n\t\t\t\t\t+ \" is not a valid Roman number.\");\n\t\t}\n\n\t\tfinal int len = romanNumber.length();\n\t\tchar currentChar = '\\u0000';\n\n\t\tfor (int index = 0; index < len; index++) {\n\t\t\tcurrentChar = Character.toUpperCase(romanNumber.charAt(index));\n\n\t\t\tif (romanNumber.toUpperCase().matches(\n\t\t\t\t\tCharacter.toUpperCase(currentChar) + \"{\"\n\t\t\t\t\t\t\t+ (repeatMap.get(currentChar) + 1) + \",}\")) {\n\t\t\t\tthrow new IllegalArgumentException(currentChar\n\t\t\t\t\t\t+ \" can not be repeated more than \"\n\t\t\t\t\t\t+ repeatMap.get(currentChar) + \" times in succession.\");\n\t\t\t}\n\t\t}\n\t}", "signature": "void validate(final String romanNumber)", "full_signature": "public static void validate(final String romanNumber)", "class_method_signature": "Validator.validate(final String romanNumber)", "testcase": false, "constructor": false, "invocations": ["length", "trim", "length", "toUpperCase", "charAt", "matches", "toUpperCase", "toUpperCase", "get", "get"]}, "repository": {"repo_id": 8328088, "url": "https://github.com/asarkar/java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 9, "size": 1575, "license": "licensed"}}