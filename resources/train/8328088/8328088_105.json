{"test_class": {"identifier": "PracticeQuestionsCh10Test", "superclass": "", "interfaces": "", "fields": [], "file": "programming-interviews/src/test/java/name/abhijitsarkar/programminginterviews/heaps/PracticeQuestionsCh10Test.java"}, "test_case": {"identifier": "testRunningMedian", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRunningMedian() {\n\t\tint[] elements = { 5, 15, 1, 3, 2, 8, 7 };\n\t\tint[] expected = { 5, 10, 5, 4, 3, 4, 5 };\n\n\t\tint[] actual = runningMedian(elements);\n\n\t\tAssert.assertArrayEquals(expected, actual);\n\t}", "signature": "void testRunningMedian()", "full_signature": "@Test public void testRunningMedian()", "class_method_signature": "PracticeQuestionsCh10Test.testRunningMedian()", "testcase": true, "constructor": false, "invocations": ["runningMedian", "assertArrayEquals"]}, "focal_class": {"identifier": "PracticeQuestionsCh10", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOGGER = LoggerFactory.getLogger(PracticeQuestionsCh10.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PracticeQuestionsCh10.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "kSort", "parameters": "(Integer[] arr, int k)", "modifiers": "public static", "return": "int[]", "signature": "int[] kSort(Integer[] arr, int k)", "full_signature": "public static int[] kSort(Integer[] arr, int k)", "class_method_signature": "PracticeQuestionsCh10.kSort(Integer[] arr, int k)", "testcase": false, "constructor": false}, {"identifier": "runningMedian", "parameters": "(int[] elements)", "modifiers": "public static", "return": "int[]", "signature": "int[] runningMedian(int[] elements)", "full_signature": "public static int[] runningMedian(int[] elements)", "class_method_signature": "PracticeQuestionsCh10.runningMedian(int[] elements)", "testcase": false, "constructor": false}, {"identifier": "transferTopItemIfRequired", "parameters": "(Heap<Integer> fromHeap, Heap<Integer> toHeap)", "modifiers": "private static", "return": "void", "signature": "void transferTopItemIfRequired(Heap<Integer> fromHeap, Heap<Integer> toHeap)", "full_signature": "private static void transferTopItemIfRequired(Heap<Integer> fromHeap, Heap<Integer> toHeap)", "class_method_signature": "PracticeQuestionsCh10.transferTopItemIfRequired(Heap<Integer> fromHeap, Heap<Integer> toHeap)", "testcase": false, "constructor": false}, {"identifier": "isBigger", "parameters": "(Heap<Integer> heap1, Heap<Integer> heap2)", "modifiers": "private static", "return": "boolean", "signature": "boolean isBigger(Heap<Integer> heap1, Heap<Integer> heap2)", "full_signature": "private static boolean isBigger(Heap<Integer> heap1, Heap<Integer> heap2)", "class_method_signature": "PracticeQuestionsCh10.isBigger(Heap<Integer> heap1, Heap<Integer> heap2)", "testcase": false, "constructor": false}, {"identifier": "isTheSizeOfBothHeapsEqual", "parameters": "(MinHeap<Integer> minHeap, MaxHeap<Integer> maxHeap)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTheSizeOfBothHeapsEqual(MinHeap<Integer> minHeap, MaxHeap<Integer> maxHeap)", "full_signature": "private static boolean isTheSizeOfBothHeapsEqual(MinHeap<Integer> minHeap, MaxHeap<Integer> maxHeap)", "class_method_signature": "PracticeQuestionsCh10.isTheSizeOfBothHeapsEqual(MinHeap<Integer> minHeap, MaxHeap<Integer> maxHeap)", "testcase": false, "constructor": false}, {"identifier": "heapWhereElementToBeInserted", "parameters": "(boolean elementLessThanMedian, Heap<Integer> minHeap,\n\t\t\tHeap<Integer> maxHeap)", "modifiers": "private static", "return": "Heap<Integer>", "signature": "Heap<Integer> heapWhereElementToBeInserted(boolean elementLessThanMedian, Heap<Integer> minHeap,\n\t\t\tHeap<Integer> maxHeap)", "full_signature": "private static Heap<Integer> heapWhereElementToBeInserted(boolean elementLessThanMedian, Heap<Integer> minHeap,\n\t\t\tHeap<Integer> maxHeap)", "class_method_signature": "PracticeQuestionsCh10.heapWhereElementToBeInserted(boolean elementLessThanMedian, Heap<Integer> minHeap,\n\t\t\tHeap<Integer> maxHeap)", "testcase": false, "constructor": false}, {"identifier": "average", "parameters": "(int val1, int val2)", "modifiers": "private static", "return": "int", "signature": "int average(int val1, int val2)", "full_signature": "private static int average(int val1, int val2)", "class_method_signature": "PracticeQuestionsCh10.average(int val1, int val2)", "testcase": false, "constructor": false}], "file": "programming-interviews/src/main/java/name/abhijitsarkar/programminginterviews/heaps/PracticeQuestionsCh10.java"}, "focal_method": {"identifier": "runningMedian", "parameters": "(int[] elements)", "modifiers": "public static", "return": "int[]", "body": "public static int[] runningMedian(int[] elements) {\n\t\tfinal MinHeap<Integer> minHeap = new MinHeap<Integer>(new Integer[] {});\n\t\tfinal MaxHeap<Integer> maxHeap = new MaxHeap<Integer>(new Integer[] {});\n\n\t\tfinal int[] medians = new int[elements.length];\n\t\tint median = 0;\n\t\tint element = 0;\n\t\tboolean isElementLessThanMedian = false;\n\t\tHeap<Integer> heapWhereElementToBeInserted = null;\n\t\tHeap<Integer> otherHeap = null;\n\n\t\tfor (int i = 0; i < elements.length; ++i) {\n\t\t\telement = elements[i];\n\n\t\t\tisElementLessThanMedian = element < median;\n\n\t\t\t/* If element less than median, insert into max heap. Otherwise, insert into min heap. */\n\t\t\theapWhereElementToBeInserted = heapWhereElementToBeInserted(isElementLessThanMedian, minHeap, maxHeap);\n\t\t\totherHeap = heapWhereElementToBeInserted == minHeap ? maxHeap : minHeap;\n\n\t\t\t/* Transfer top item, if required, to keep the heaps height balanced. */\n\t\t\ttransferTopItemIfRequired(heapWhereElementToBeInserted, otherHeap);\n\t\t\theapWhereElementToBeInserted.insert(element);\n\n\t\t\tif (isTheSizeOfBothHeapsEqual(minHeap, maxHeap)) {\n\t\t\t\tmedian = average(minHeap.root(), maxHeap.root());\n\t\t\t} else {\n\t\t\t\tmedian = heapWhereElementToBeInserted.root();\n\t\t\t}\n\n\t\t\tmedians[i] = median;\n\t\t}\n\n\t\treturn medians;\n\t}", "signature": "int[] runningMedian(int[] elements)", "full_signature": "public static int[] runningMedian(int[] elements)", "class_method_signature": "PracticeQuestionsCh10.runningMedian(int[] elements)", "testcase": false, "constructor": false, "invocations": ["heapWhereElementToBeInserted", "transferTopItemIfRequired", "insert", "isTheSizeOfBothHeapsEqual", "average", "root", "root", "root"]}, "repository": {"repo_id": 8328088, "url": "https://github.com/asarkar/java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 9, "size": 1575, "license": "licensed"}}