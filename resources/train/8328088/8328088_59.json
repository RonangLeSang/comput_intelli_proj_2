{"test_class": {"identifier": "TableManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Table blahTable;", "modifier": "private", "type": "Table", "declarator": "blahTable", "var_name": "blahTable"}, {"original_string": "private Table windowSideTable;", "modifier": "private", "type": "Table", "declarator": "windowSideTable", "var_name": "windowSideTable"}], "file": "algorithms-misc/src/test/java/name/abhijitsarkar/algorithms/ooo/restaurant/TableManagerTest.java"}, "test_case": {"identifier": "testReserveMoreTablesThanAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReserveMoreTablesThanAvailable() {\n\t\tTable table = TableManager.reserveTable(2);\n\t\tAssert.assertEquals(blahTable, table);\n\n\t\ttable = TableManager.reserveTable(2, WINDOW_SIDE);\n\t\tAssert.assertEquals(windowSideTable, table);\n\n\t\tAssert.assertNull(TableManager.reserveTable(2));\n\t}", "signature": "void testReserveMoreTablesThanAvailable()", "full_signature": "@Test public void testReserveMoreTablesThanAvailable()", "class_method_signature": "TableManagerTest.testReserveMoreTablesThanAvailable()", "testcase": true, "constructor": false, "invocations": ["reserveTable", "assertEquals", "reserveTable", "assertEquals", "assertNull", "reserveTable"]}, "focal_class": {"identifier": "TableManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Set<Table> allTables;", "modifier": "private static", "type": "Set<Table>", "declarator": "allTables", "var_name": "allTables"}, {"original_string": "private static final Set<Integer> availableTableIds;", "modifier": "private static final", "type": "Set<Integer>", "declarator": "availableTableIds", "var_name": "availableTableIds"}], "methods": [{"identifier": "setAllTables", "parameters": "(Set<Table> allTables)", "modifiers": "public static", "return": "void", "signature": "void setAllTables(Set<Table> allTables)", "full_signature": "public static void setAllTables(Set<Table> allTables)", "class_method_signature": "TableManager.setAllTables(Set<Table> allTables)", "testcase": false, "constructor": false}, {"identifier": "addAvailableTableIds", "parameters": "(Set<Integer> availableTableIds)", "modifiers": "private static", "return": "void", "signature": "void addAvailableTableIds(Set<Integer> availableTableIds)", "full_signature": "private static void addAvailableTableIds(Set<Integer> availableTableIds)", "class_method_signature": "TableManager.addAvailableTableIds(Set<Integer> availableTableIds)", "testcase": false, "constructor": false}, {"identifier": "reserveTable", "parameters": "(final int seating, final SpecialFeature... specialFeatures)", "modifiers": "public static", "return": "Table", "signature": "Table reserveTable(final int seating, final SpecialFeature... specialFeatures)", "full_signature": "public static Table reserveTable(final int seating, final SpecialFeature... specialFeatures)", "class_method_signature": "TableManager.reserveTable(final int seating, final SpecialFeature... specialFeatures)", "testcase": false, "constructor": false}, {"identifier": "findTableById", "parameters": "(final int availableTableId)", "modifiers": "private static", "return": "Table", "signature": "Table findTableById(final int availableTableId)", "full_signature": "private static Table findTableById(final int availableTableId)", "class_method_signature": "TableManager.findTableById(final int availableTableId)", "testcase": false, "constructor": false}, {"identifier": "assertAtLeastOneTable", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void assertAtLeastOneTable()", "full_signature": "private static void assertAtLeastOneTable()", "class_method_signature": "TableManager.assertAtLeastOneTable()", "testcase": false, "constructor": false}], "file": "algorithms-misc/src/main/java/name/abhijitsarkar/algorithms/ooo/restaurant/TableManager.java"}, "focal_method": {"identifier": "reserveTable", "parameters": "(final int seating, final SpecialFeature... specialFeatures)", "modifiers": "public static", "return": "Table", "body": "public static Table reserveTable(final int seating, final SpecialFeature... specialFeatures) {\n\t\tList<SpecialFeature> tableFeatures = null;\n\t\tTable table = null;\n\n\t\touter: for (int availableTableId : availableTableIds) {\n\t\t\ttable = findTableById(availableTableId);\n\n\t\t\tif (table.seatingCapacity() == seating) {\n\t\t\t\ttableFeatures = table.specialFeatures();\n\n\t\t\t\tfor (SpecialFeature requestedFeature : specialFeatures) {\n\t\t\t\t\tif (!tableFeatures.contains(requestedFeature)) {\n\t\t\t\t\t\tcontinue outer;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tavailableTableIds.remove(availableTableId);\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttable = null;\n\t\t}\n\n\t\treturn table;\n\t}", "signature": "Table reserveTable(final int seating, final SpecialFeature... specialFeatures)", "full_signature": "public static Table reserveTable(final int seating, final SpecialFeature... specialFeatures)", "class_method_signature": "TableManager.reserveTable(final int seating, final SpecialFeature... specialFeatures)", "testcase": false, "constructor": false, "invocations": ["findTableById", "seatingCapacity", "specialFeatures", "contains", "remove"]}, "repository": {"repo_id": 8328088, "url": "https://github.com/asarkar/java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 9, "size": 1575, "license": "licensed"}}