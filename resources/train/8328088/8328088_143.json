{"test_class": {"identifier": "PracticeQuestionsCh1Test", "superclass": "", "interfaces": "", "fields": [], "file": "coding-interview-5e/src/test/java/name/abhijitsarkar/codinginterview/datastructure/arraysnstrings/PracticeQuestionsCh1Test.java"}, "test_case": {"identifier": "testFillIfZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFillIfZero() {\n\t\tint[][] matrix = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 0 } };\n\n\t\tfillIfZero(matrix);\n\n\t\tassertEquals(0, matrix[0][1]);\n\t\tassertEquals(0, matrix[1][1]);\n\t\tassertEquals(0, matrix[2][0]);\n\t\tassertEquals(0, matrix[2][1]);\n\n\t\tassertEquals(1, matrix[0][0]);\n\t\tassertEquals(3, matrix[1][0]);\n\t}", "signature": "void testFillIfZero()", "full_signature": "@Test public void testFillIfZero()", "class_method_signature": "PracticeQuestionsCh1Test.testFillIfZero()", "testcase": true, "constructor": false, "invocations": ["fillIfZero", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "PracticeQuestionsCh1", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOGGER = LoggerFactory.getLogger(PracticeQuestionsCh1.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PracticeQuestionsCh1.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "isUnique", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUnique(String s)", "full_signature": "public static boolean isUnique(String s)", "class_method_signature": "PracticeQuestionsCh1.isUnique(String s)", "testcase": false, "constructor": false}, {"identifier": "isPermutation", "parameters": "(String s1, String s2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPermutation(String s1, String s2)", "full_signature": "public static boolean isPermutation(String s1, String s2)", "class_method_signature": "PracticeQuestionsCh1.isPermutation(String s1, String s2)", "testcase": false, "constructor": false}, {"identifier": "encodeRepeatedChars", "parameters": "(final String str)", "modifiers": "public static", "return": "String", "signature": "String encodeRepeatedChars(final String str)", "full_signature": "public static String encodeRepeatedChars(final String str)", "class_method_signature": "PracticeQuestionsCh1.encodeRepeatedChars(final String str)", "testcase": false, "constructor": false}, {"identifier": "fillIfZero", "parameters": "(int[][] matrix)", "modifiers": "public static", "return": "void", "signature": "void fillIfZero(int[][] matrix)", "full_signature": "public static void fillIfZero(int[][] matrix)", "class_method_signature": "PracticeQuestionsCh1.fillIfZero(int[][] matrix)", "testcase": false, "constructor": false}, {"identifier": "isRotation", "parameters": "(String s1, String s2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRotation(String s1, String s2)", "full_signature": "public static boolean isRotation(String s1, String s2)", "class_method_signature": "PracticeQuestionsCh1.isRotation(String s1, String s2)", "testcase": false, "constructor": false}, {"identifier": "isSubstring", "parameters": "(String s1, String s2)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSubstring(String s1, String s2)", "full_signature": "private static boolean isSubstring(String s1, String s2)", "class_method_signature": "PracticeQuestionsCh1.isSubstring(String s1, String s2)", "testcase": false, "constructor": false}], "file": "coding-interview-5e/src/main/java/name/abhijitsarkar/codinginterview/datastructure/arraysnstrings/PracticeQuestionsCh1.java"}, "focal_method": {"identifier": "fillIfZero", "parameters": "(int[][] matrix)", "modifiers": "public static", "return": "void", "body": "public static void fillIfZero(int[][] matrix) {\n\t\tint numRows = matrix.length;\n\t\tint numCols = matrix[0].length;\n\t\tint rowWhereZeroFound = -1;\n\t\tint colWhereZeroFound = -1;\n\n\t\tfor (int rowNum = 0; rowNum < numRows; rowNum++) {\n\t\t\tboolean isZeroFound = false;\n\n\t\t\tfor (int colNum = 0; colNum < numCols; colNum++) {\n\t\t\t\t// If a zero has been found previously on this row, isZeroFound\n\t\t\t\t// is always going to be true\n\t\t\t\tisZeroFound = (matrix[rowNum][colNum] == 0) | isZeroFound;\n\n\t\t\t\tif (isZeroFound) {\n\t\t\t\t\tLOGGER.debug(\"Zero found at [{},{}].\", rowNum, colNum);\n\n\t\t\t\t\tcolWhereZeroFound = colNum;\n\t\t\t\t\trowWhereZeroFound = rowNum;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isZeroFound) {\n\t\t\t\tLOGGER.debug(\"Setting to zero [{},{}].\", rowNum, colWhereZeroFound);\n\n\t\t\t\tmatrix[rowNum][colWhereZeroFound] = 0;\n\t\t\t}\n\t\t}\n\n\t\tLOGGER.debug(\"Setting to zero [{}].\", rowWhereZeroFound);\n\n\t\tArrays.fill(matrix[rowWhereZeroFound], 0);\n\n\t\tfor (int rowNum = 0; rowNum < rowWhereZeroFound; rowNum++) {\n\t\t\tLOGGER.debug(\"Setting to zero [{},{}].\", rowNum, colWhereZeroFound);\n\n\t\t\tmatrix[rowNum][colWhereZeroFound] = 0;\n\t\t}\n\t}", "signature": "void fillIfZero(int[][] matrix)", "full_signature": "public static void fillIfZero(int[][] matrix)", "class_method_signature": "PracticeQuestionsCh1.fillIfZero(int[][] matrix)", "testcase": false, "constructor": false, "invocations": ["debug", "debug", "debug", "fill", "debug"]}, "repository": {"repo_id": 8328088, "url": "https://github.com/asarkar/java", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 9, "size": 1575, "license": "licensed"}}