{"test_class": {"identifier": "TestNot", "superclass": "extends TestExpression", "interfaces": "", "fields": [], "file": "search-mr/src/test/java/org/apache/hadoop/fs/shell/find/TestNot.java"}, "test_case": {"identifier": "testInit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInit()  throws IOException {\n    Not not = new Not();\n    Expression child = mock(Expression.class);\n    \n    Deque<Expression> children = new LinkedList<Expression>();\n    children.add(child);\n    not.addChildren(children);\n    \n    FindOptions options = mock(FindOptions.class);\n    not.initialise(options);\n    verify(child).initialise(options);\n    verifyNoMoreInteractions(child);\n  }", "signature": "void testInit()", "full_signature": "@Test public void testInit()", "class_method_signature": "TestNot.testInit()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "addChildren", "mock", "initialise", "initialise", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "Not", "superclass": "extends BaseExpression", "interfaces": "", "fields": [{"original_string": "private static final String[] USAGE = {\n    \"! expression\",\n    \"-not expression\"\n  };", "modifier": "private static final", "type": "String[]", "declarator": "USAGE = {\n    \"! expression\",\n    \"-not expression\"\n  }", "var_name": "USAGE"}, {"original_string": "private static final String[] HELP = {\n    \"Evaluates as true if the expression evaluates as false and\",\n    \"vice-versa.\"\n  };", "modifier": "private static final", "type": "String[]", "declarator": "HELP = {\n    \"Evaluates as true if the expression evaluates as false and\",\n    \"vice-versa.\"\n  }", "var_name": "HELP"}], "methods": [{"identifier": "Not", "parameters": "()", "modifiers": "public", "return": "", "signature": " Not()", "full_signature": "public  Not()", "class_method_signature": "Not.Not()", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(PathData item)", "modifiers": "@Override public", "return": "Result", "signature": "Result apply(PathData item)", "full_signature": "@Override public Result apply(PathData item)", "class_method_signature": "Not.apply(PathData item)", "testcase": false, "constructor": false}, {"identifier": "isOperator", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOperator()", "full_signature": "@Override public boolean isOperator()", "class_method_signature": "Not.isOperator()", "testcase": false, "constructor": false}, {"identifier": "getPrecedence", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPrecedence()", "full_signature": "@Override public int getPrecedence()", "class_method_signature": "Not.getPrecedence()", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "(Deque<Expression> expressions)", "modifiers": "@Override public", "return": "void", "signature": "void addChildren(Deque<Expression> expressions)", "full_signature": "@Override public void addChildren(Deque<Expression> expressions)", "class_method_signature": "Not.addChildren(Deque<Expression> expressions)", "testcase": false, "constructor": false}, {"identifier": "registerExpression", "parameters": "(ExpressionFactory factory)", "modifiers": "public static", "return": "void", "signature": "void registerExpression(ExpressionFactory factory)", "full_signature": "public static void registerExpression(ExpressionFactory factory)", "class_method_signature": "Not.registerExpression(ExpressionFactory factory)", "testcase": false, "constructor": false}], "file": "search-mr/src/main/java/org/apache/hadoop/fs/shell/find/Not.java"}, "focal_method": {"identifier": "addChildren", "parameters": "(Deque<Expression> expressions)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void addChildren(Deque<Expression> expressions) {\n    addChildren(expressions, 1);\n  }", "signature": "void addChildren(Deque<Expression> expressions)", "full_signature": "@Override public void addChildren(Deque<Expression> expressions)", "class_method_signature": "Not.addChildren(Deque<Expression> expressions)", "testcase": false, "constructor": false, "invocations": ["addChildren"]}, "repository": {"repo_id": 8706918, "url": "https://github.com/cloudera/search", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 99, "size": 32103, "license": "licensed"}}