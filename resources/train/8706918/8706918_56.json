{"test_class": {"identifier": "TestNewer", "superclass": "extends TestExpression", "interfaces": "", "fields": [{"original_string": "private static final long NOW = new Date().getTime();", "modifier": "private static final", "type": "long", "declarator": "NOW = new Date().getTime()", "var_name": "NOW"}, {"original_string": "private static MockFileSystem fs;", "modifier": "private static", "type": "MockFileSystem", "declarator": "fs", "var_name": "fs"}, {"original_string": "private Newer newer;", "modifier": "private", "type": "Newer", "declarator": "newer", "var_name": "newer"}], "file": "search-mr/src/test/java/org/apache/hadoop/fs/shell/find/TestNewer.java"}, "test_case": {"identifier": "applyFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void applyFail() throws IOException{\n    FileStatus fileStatus = mock(FileStatus.class);\n    when(fileStatus.getModificationTime()).thenReturn(NOW - (6l*86400000));\n    fs.setFileStatus(\"older.file\", fileStatus);\n    PathData item = new PathData(\"/directory/path/older.file\", fs.getConf());\n    assertEquals(Result.FAIL, newer.apply(item));\n  }", "signature": "void applyFail()", "full_signature": "@Test public void applyFail()", "class_method_signature": "TestNewer.applyFail()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getModificationTime", "setFileStatus", "getConf", "assertEquals", "apply"]}, "focal_class": {"identifier": "Newer", "superclass": "extends BaseExpression", "interfaces": "", "fields": [{"original_string": "private static final String[] USAGE = {\n    \"-newer file\"\n  };", "modifier": "private static final", "type": "String[]", "declarator": "USAGE = {\n    \"-newer file\"\n  }", "var_name": "USAGE"}, {"original_string": "private static final String[] HELP = {\n    \"Evaluates as true if the modification time of the current\",\n    \"file is more recent than the modification time of the\",\n    \"specified file.\"\n  };", "modifier": "private static final", "type": "String[]", "declarator": "HELP = {\n    \"Evaluates as true if the modification time of the current\",\n    \"file is more recent than the modification time of the\",\n    \"specified file.\"\n  }", "var_name": "HELP"}, {"original_string": "private long filetime;", "modifier": "private", "type": "long", "declarator": "filetime", "var_name": "filetime"}], "methods": [{"identifier": "Newer", "parameters": "()", "modifiers": "public", "return": "", "signature": " Newer()", "full_signature": "public  Newer()", "class_method_signature": "Newer.Newer()", "testcase": false, "constructor": true}, {"identifier": "initialise", "parameters": "(FindOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void initialise(FindOptions options)", "full_signature": "@Override public void initialise(FindOptions options)", "class_method_signature": "Newer.initialise(FindOptions options)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(PathData item)", "modifiers": "@Override public", "return": "Result", "signature": "Result apply(PathData item)", "full_signature": "@Override public Result apply(PathData item)", "class_method_signature": "Newer.apply(PathData item)", "testcase": false, "constructor": false}, {"identifier": "addArguments", "parameters": "(Deque<String> args)", "modifiers": "@Override public", "return": "void", "signature": "void addArguments(Deque<String> args)", "full_signature": "@Override public void addArguments(Deque<String> args)", "class_method_signature": "Newer.addArguments(Deque<String> args)", "testcase": false, "constructor": false}, {"identifier": "registerExpression", "parameters": "(ExpressionFactory factory)", "modifiers": "public static", "return": "void", "signature": "void registerExpression(ExpressionFactory factory)", "full_signature": "public static void registerExpression(ExpressionFactory factory)", "class_method_signature": "Newer.registerExpression(ExpressionFactory factory)", "testcase": false, "constructor": false}], "file": "search-mr/src/main/java/org/apache/hadoop/fs/shell/find/Newer.java"}, "focal_method": {"identifier": "apply", "parameters": "(PathData item)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n  public Result apply(PathData item) throws IOException {\n    if(getFileStatus(item).getModificationTime() > filetime) {\n      return Result.PASS;\n    }\n    return Result.FAIL;\n  }", "signature": "Result apply(PathData item)", "full_signature": "@Override public Result apply(PathData item)", "class_method_signature": "Newer.apply(PathData item)", "testcase": false, "constructor": false, "invocations": ["getModificationTime", "getFileStatus"]}, "repository": {"repo_id": 8706918, "url": "https://github.com/cloudera/search", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 99, "size": 32103, "license": "licensed"}}