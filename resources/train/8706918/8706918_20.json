{"test_class": {"identifier": "TestFilterExpression", "superclass": "extends TestExpression", "interfaces": "", "fields": [{"original_string": "private Expression expr;", "modifier": "private", "type": "Expression", "declarator": "expr", "var_name": "expr"}, {"original_string": "private FilterExpression test;", "modifier": "private", "type": "FilterExpression", "declarator": "test", "var_name": "test"}], "file": "search-mr/src/test/java/org/apache/hadoop/fs/shell/find/TestFilterExpression.java"}, "test_case": {"identifier": "apply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void apply() throws IOException {\n    PathData item = mock(PathData.class);\n    when(expr.apply(item)).thenReturn(Result.PASS).thenReturn(Result.FAIL);\n    assertEquals(Result.PASS, test.apply(item));\n    assertEquals(Result.FAIL, test.apply(item));\n    verify(expr, times(2)).apply(item);\n    verifyNoMoreInteractions(expr);\n  }", "signature": "void apply()", "full_signature": "@Test public void apply()", "class_method_signature": "TestFilterExpression.apply()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "thenReturn", "when", "apply", "assertEquals", "apply", "assertEquals", "apply", "apply", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "FilterExpression", "superclass": "", "interfaces": "implements Expression, Configurable", "fields": [{"original_string": "protected Expression expression;", "modifier": "protected", "type": "Expression", "declarator": "expression", "var_name": "expression"}], "methods": [{"identifier": "FilterExpression", "parameters": "(Expression expression)", "modifiers": "protected", "return": "", "signature": " FilterExpression(Expression expression)", "full_signature": "protected  FilterExpression(Expression expression)", "class_method_signature": "FilterExpression.FilterExpression(Expression expression)", "testcase": false, "constructor": true}, {"identifier": "initialise", "parameters": "(FindOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void initialise(FindOptions options)", "full_signature": "@Override public void initialise(FindOptions options)", "class_method_signature": "FilterExpression.initialise(FindOptions options)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(PathData item)", "modifiers": "@Override public", "return": "Result", "signature": "Result apply(PathData item)", "full_signature": "@Override public Result apply(PathData item)", "class_method_signature": "FilterExpression.apply(PathData item)", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void finish()", "full_signature": "@Override public void finish()", "class_method_signature": "FilterExpression.finish()", "testcase": false, "constructor": false}, {"identifier": "getUsage", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getUsage()", "full_signature": "@Override public String[] getUsage()", "class_method_signature": "FilterExpression.getUsage()", "testcase": false, "constructor": false}, {"identifier": "getHelp", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getHelp()", "full_signature": "@Override public String[] getHelp()", "class_method_signature": "FilterExpression.getHelp()", "testcase": false, "constructor": false}, {"identifier": "isAction", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAction()", "full_signature": "@Override public boolean isAction()", "class_method_signature": "FilterExpression.isAction()", "testcase": false, "constructor": false}, {"identifier": "isOperator", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOperator()", "full_signature": "@Override public boolean isOperator()", "class_method_signature": "FilterExpression.isOperator()", "testcase": false, "constructor": false}, {"identifier": "getPrecedence", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPrecedence()", "full_signature": "@Override public int getPrecedence()", "class_method_signature": "FilterExpression.getPrecedence()", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "(Deque<Expression> expressions)", "modifiers": "@Override public", "return": "void", "signature": "void addChildren(Deque<Expression> expressions)", "full_signature": "@Override public void addChildren(Deque<Expression> expressions)", "class_method_signature": "FilterExpression.addChildren(Deque<Expression> expressions)", "testcase": false, "constructor": false}, {"identifier": "addArguments", "parameters": "(Deque<String> args)", "modifiers": "@Override public", "return": "void", "signature": "void addArguments(Deque<String> args)", "full_signature": "@Override public void addArguments(Deque<String> args)", "class_method_signature": "FilterExpression.addArguments(Deque<String> args)", "testcase": false, "constructor": false}, {"identifier": "setConf", "parameters": "(Configuration conf)", "modifiers": "@Override public", "return": "void", "signature": "void setConf(Configuration conf)", "full_signature": "@Override public void setConf(Configuration conf)", "class_method_signature": "FilterExpression.setConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "@Override public Configuration getConf()", "class_method_signature": "FilterExpression.getConf()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FilterExpression.toString()", "testcase": false, "constructor": false}], "file": "search-mr/src/main/java/org/apache/hadoop/fs/shell/find/FilterExpression.java"}, "focal_method": {"identifier": "apply", "parameters": "(PathData item)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n  public Result apply(PathData item) throws IOException {\n    return expression.apply(item);\n  }", "signature": "Result apply(PathData item)", "full_signature": "@Override public Result apply(PathData item)", "class_method_signature": "FilterExpression.apply(PathData item)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 8706918, "url": "https://github.com/cloudera/search", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 99, "size": 32103, "license": "licensed"}}