{"test_class": {"identifier": "TestReplicas", "superclass": "extends TestExpression", "interfaces": "", "fields": [{"original_string": "private MockFileSystem fs;", "modifier": "private", "type": "MockFileSystem", "declarator": "fs", "var_name": "fs"}, {"original_string": "private PathData one;", "modifier": "private", "type": "PathData", "declarator": "one", "var_name": "one"}, {"original_string": "private PathData two;", "modifier": "private", "type": "PathData", "declarator": "two", "var_name": "two"}, {"original_string": "private PathData three;", "modifier": "private", "type": "PathData", "declarator": "three", "var_name": "three"}, {"original_string": "private PathData four;", "modifier": "private", "type": "PathData", "declarator": "four", "var_name": "four"}, {"original_string": "private PathData five;", "modifier": "private", "type": "PathData", "declarator": "five", "var_name": "five"}], "file": "search-mr/src/test/java/org/apache/hadoop/fs/shell/find/TestReplicas.java"}, "test_case": {"identifier": "applyLessThan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void applyLessThan() throws IOException {\n    Replicas rep = new Replicas();\n    addArgument(rep, \"-3\");\n    rep.initialise(new FindOptions());\n\n    assertEquals(Result.PASS, rep.apply(one));\n    assertEquals(Result.PASS, rep.apply(two));\n    assertEquals(Result.FAIL, rep.apply(three));\n    assertEquals(Result.FAIL, rep.apply(four));\n    assertEquals(Result.FAIL, rep.apply(five));\n  }", "signature": "void applyLessThan()", "full_signature": "@Test public void applyLessThan()", "class_method_signature": "TestReplicas.applyLessThan()", "testcase": true, "constructor": false, "invocations": ["addArgument", "initialise", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply", "assertEquals", "apply"]}, "focal_class": {"identifier": "Replicas", "superclass": "extends NumberExpression", "interfaces": "", "fields": [{"original_string": "private static final String[] USAGE = {\n    \"-replicas n\"\n  };", "modifier": "private static final", "type": "String[]", "declarator": "USAGE = {\n    \"-replicas n\"\n  }", "var_name": "USAGE"}, {"original_string": "private static final String[] HELP = {\n    \"Evaluates to true if the number of file replicas is n.\",\n  };", "modifier": "private static final", "type": "String[]", "declarator": "HELP = {\n    \"Evaluates to true if the number of file replicas is n.\",\n  }", "var_name": "HELP"}], "methods": [{"identifier": "Replicas", "parameters": "()", "modifiers": "public", "return": "", "signature": " Replicas()", "full_signature": "public  Replicas()", "class_method_signature": "Replicas.Replicas()", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(PathData item)", "modifiers": "@Override public", "return": "Result", "signature": "Result apply(PathData item)", "full_signature": "@Override public Result apply(PathData item)", "class_method_signature": "Replicas.apply(PathData item)", "testcase": false, "constructor": false}, {"identifier": "registerExpression", "parameters": "(ExpressionFactory factory)", "modifiers": "public static", "return": "void", "signature": "void registerExpression(ExpressionFactory factory)", "full_signature": "public static void registerExpression(ExpressionFactory factory)", "class_method_signature": "Replicas.registerExpression(ExpressionFactory factory)", "testcase": false, "constructor": false}], "file": "search-mr/src/main/java/org/apache/hadoop/fs/shell/find/Replicas.java"}, "focal_method": {"identifier": "apply", "parameters": "(PathData item)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n  public Result apply(PathData item) throws IOException {\n    return applyNumber(getFileStatus(item).getReplication());\n  }", "signature": "Result apply(PathData item)", "full_signature": "@Override public Result apply(PathData item)", "class_method_signature": "Replicas.apply(PathData item)", "testcase": false, "constructor": false, "invocations": ["applyNumber", "getReplication", "getFileStatus"]}, "repository": {"repo_id": 8706918, "url": "https://github.com/cloudera/search", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 99, "size": 32103, "license": "licensed"}}