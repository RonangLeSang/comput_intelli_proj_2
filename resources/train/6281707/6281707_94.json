{"test_class": {"identifier": "EmailServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String LOREM_IPSUM = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi euismod, \" +\n            \"lectus a posuere sollicitudin, ligula risus vestibulum purus, vel tincidunt nisi sem vel felis. \" +\n            \"Suspendisse velit elit, pharetra id semper id, ullamcorper sed leo. Fusce gravida vestibulum fermentum. \" +\n            \"Morbi commodo, quam nec vulputate condimentum, urna nunc ultricies purus, et ullamcorper nisi arcu ut \" +\n            \"mauris. Praesent eleifend imperdiet interdum. Suspendisse potenti. Duis viverra, ipsum nec mattis cursus, \" +\n            \"lorem ante hendrerit massa, iaculis varius leo mi sed mauris.\";", "modifier": "public static final", "type": "String", "declarator": "LOREM_IPSUM = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi euismod, \" +\n            \"lectus a posuere sollicitudin, ligula risus vestibulum purus, vel tincidunt nisi sem vel felis. \" +\n            \"Suspendisse velit elit, pharetra id semper id, ullamcorper sed leo. Fusce gravida vestibulum fermentum. \" +\n            \"Morbi commodo, quam nec vulputate condimentum, urna nunc ultricies purus, et ullamcorper nisi arcu ut \" +\n            \"mauris. Praesent eleifend imperdiet interdum. Suspendisse potenti. Duis viverra, ipsum nec mattis cursus, \" +\n            \"lorem ante hendrerit massa, iaculis varius leo mi sed mauris.\"", "var_name": "LOREM_IPSUM"}, {"original_string": "private Account testAccount = new Account.Builder()\n            .url(\"http://nodeable.com\")\n            .description(\"Nodeable Test Account\")\n            .name(\"Nodeable Testing\")\n            .build();", "modifier": "private", "type": "Account", "declarator": "testAccount = new Account.Builder()\n            .url(\"http://nodeable.com\")\n            .description(\"Nodeable Test Account\")\n            .name(\"Nodeable Testing\")\n            .build()", "var_name": "testAccount"}, {"original_string": "private User testUser = new User.Builder()\n            .account(testAccount)\n            .accountLocked(false)\n            .accountOriginator(true)\n            .fullname(\"Nodeable Test User\")\n            .username(\"test_user_\" + new Date().getTime() + \"@nodeable.com\")\n            .secretKey(\"s3Kret\")\n            .build();", "modifier": "private", "type": "User", "declarator": "testUser = new User.Builder()\n            .account(testAccount)\n            .accountLocked(false)\n            .accountOriginator(true)\n            .fullname(\"Nodeable Test User\")\n            .username(\"test_user_\" + new Date().getTime() + \"@nodeable.com\")\n            .secretKey(\"s3Kret\")\n            .build()", "var_name": "testUser"}, {"original_string": "private User testSenderUser = new User.Builder()\n            .account(testAccount)\n            .accountLocked(false)\n            .accountOriginator(true)\n            .fullname(\"Nodeable Test Sender User\")\n            .username(\"test_user_\" + new Date().getTime() + \"@nodeable.com\")\n            .secretKey(\"s3Kret\")\n            .build();", "modifier": "private", "type": "User", "declarator": "testSenderUser = new User.Builder()\n            .account(testAccount)\n            .accountLocked(false)\n            .accountOriginator(true)\n            .fullname(\"Nodeable Test Sender User\")\n            .username(\"test_user_\" + new Date().getTime() + \"@nodeable.com\")\n            .secretKey(\"s3Kret\")\n            .build()", "var_name": "testSenderUser"}, {"original_string": "@InjectMocks\n    private EmailServiceImpl emailService = new EmailServiceImpl();", "modifier": "@InjectMocks\n    private", "type": "EmailServiceImpl", "declarator": "emailService = new EmailServiceImpl()", "var_name": "emailService"}, {"original_string": "@Mock\n    private Properties mockEmailProperties;", "modifier": "@Mock\n    private", "type": "Properties", "declarator": "mockEmailProperties", "var_name": "mockEmailProperties"}, {"original_string": "@Mock\n    private AmazonSimpleEmailServiceClient mockAmazonSimpleEmailServiceClient;", "modifier": "@Mock\n    private", "type": "AmazonSimpleEmailServiceClient", "declarator": "mockAmazonSimpleEmailServiceClient", "var_name": "mockAmazonSimpleEmailServiceClient"}, {"original_string": "@Mock\n    private UserService mockUserService;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "mockUserService", "var_name": "mockUserService"}], "file": "core/src/test/java/com/streamreduce/core/service/EmailServiceImplTest.java"}, "test_case": {"identifier": "testSendCommentAddedEmail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendCommentAddedEmail() throws Exception {\n        SobaMessage sobaMessage = new SobaMessage.Builder()\n                .sender(testUser)\n                .providerId(\"test\")\n                .visibility(SobaObject.Visibility.ACCOUNT)\n                .transformedMessage(LOREM_IPSUM)\n                .type(MessageType.USER)\n                .build();\n        sobaMessage.setId(new ObjectId());\n        MessageComment messageComment = new MessageComment(testSenderUser, LOREM_IPSUM);\n\n        when(mockUserService.allEnabledUsersForAccount(testAccount)).thenReturn(Lists.newArrayList(testUser));\n\n        testSenderUser.setId(new ObjectId());\n\n        emailService.sendCommentAddedEmail(testAccount, sobaMessage, messageComment);\n        ArgumentCaptor<SendEmailRequest> captor = ArgumentCaptor.forClass(SendEmailRequest.class);\n        verify(mockAmazonSimpleEmailServiceClient).sendEmail(captor.capture());\n        String emailContent = captor.getValue().getMessage().getBody().getHtml().getData();\n        Assert.assertFalse(\"Encountered unexpanded template token.\", emailContent.contains(\"${\"));\n    }", "signature": "void testSendCommentAddedEmail()", "full_signature": "@Test public void testSendCommentAddedEmail()", "class_method_signature": "EmailServiceImplTest.testSendCommentAddedEmail()", "testcase": true, "constructor": false, "invocations": ["build", "type", "transformedMessage", "visibility", "providerId", "sender", "setId", "thenReturn", "when", "allEnabledUsersForAccount", "newArrayList", "setId", "sendCommentAddedEmail", "forClass", "sendEmail", "verify", "capture", "getData", "getHtml", "getBody", "getMessage", "getValue", "assertFalse", "contains"]}, "focal_class": {"identifier": "EmailServiceImpl", "superclass": "extends AbstractService", "interfaces": "implements EmailService, InitializingBean", "fields": [{"original_string": "private static final String DEFAULT_ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ENCODING = \"UTF-8\"", "var_name": "DEFAULT_ENCODING"}, {"original_string": "@Resource(name = \"emailProperties\")\n    protected Properties emailProperties;", "modifier": "@Resource(name = \"emailProperties\")\n    protected", "type": "Properties", "declarator": "emailProperties", "var_name": "emailProperties"}, {"original_string": "@Resource(name = \"simpleEmailServiceClient\")\n    protected AmazonSimpleEmailServiceClient simpleEmailServiceClient;", "modifier": "@Resource(name = \"simpleEmailServiceClient\")\n    protected", "type": "AmazonSimpleEmailServiceClient", "declarator": "simpleEmailServiceClient", "var_name": "simpleEmailServiceClient"}, {"original_string": "@Resource(name = \"userService\")\n    protected UserService userService;", "modifier": "@Resource(name = \"userService\")\n    protected", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Value(\"${email.enabled}\")\n    protected boolean enabled;", "modifier": "@Value(\"${email.enabled}\")\n    protected", "type": "boolean", "declarator": "enabled", "var_name": "enabled"}, {"original_string": "@Value(\"${email.background.send:true}\")\n    protected boolean backgroundSend = true;", "modifier": "@Value(\"${email.background.send:true}\")\n    protected", "type": "boolean", "declarator": "backgroundSend = true", "var_name": "backgroundSend"}, {"original_string": "private ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(10));", "modifier": "private", "type": "ListeningExecutorService", "declarator": "executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(10))", "var_name": "executorService"}], "methods": [{"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "EmailServiceImpl.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(boolean enabled)", "modifiers": "@Override public", "return": "void", "signature": "void setEnabled(boolean enabled)", "full_signature": "@Override public void setEnabled(boolean enabled)", "class_method_signature": "EmailServiceImpl.setEnabled(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "sendPasswordResetEmail", "parameters": "(User user, boolean mobile)", "modifiers": "@Override public", "return": "void", "signature": "void sendPasswordResetEmail(User user, boolean mobile)", "full_signature": "@Override public void sendPasswordResetEmail(User user, boolean mobile)", "class_method_signature": "EmailServiceImpl.sendPasswordResetEmail(User user, boolean mobile)", "testcase": false, "constructor": false}, {"identifier": "sendNewUserActivationEmail", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void sendNewUserActivationEmail(User user)", "full_signature": "@Override public void sendNewUserActivationEmail(User user)", "class_method_signature": "EmailServiceImpl.sendNewUserActivationEmail(User user)", "testcase": false, "constructor": false}, {"identifier": "sendInviteUserActivationEmail", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void sendInviteUserActivationEmail(User user)", "full_signature": "@Override public void sendInviteUserActivationEmail(User user)", "class_method_signature": "EmailServiceImpl.sendInviteUserActivationEmail(User user)", "testcase": false, "constructor": false}, {"identifier": "sendUserAccountSetupCompleteEmail", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void sendUserAccountSetupCompleteEmail(User user)", "full_signature": "@Override public void sendUserAccountSetupCompleteEmail(User user)", "class_method_signature": "EmailServiceImpl.sendUserAccountSetupCompleteEmail(User user)", "testcase": false, "constructor": false}, {"identifier": "sendInsightsAvailableEmail", "parameters": "(List<User> users)", "modifiers": "@Override public", "return": "void", "signature": "void sendInsightsAvailableEmail(List<User> users)", "full_signature": "@Override public void sendInsightsAvailableEmail(List<User> users)", "class_method_signature": "EmailServiceImpl.sendInsightsAvailableEmail(List<User> users)", "testcase": false, "constructor": false}, {"identifier": "sendBugReport", "parameters": "(String username, String company, String summary, String details, String debugInfo)", "modifiers": "@Override public", "return": "void", "signature": "void sendBugReport(String username, String company, String summary, String details, String debugInfo)", "full_signature": "@Override public void sendBugReport(String username, String company, String summary, String details, String debugInfo)", "class_method_signature": "EmailServiceImpl.sendBugReport(String username, String company, String summary, String details, String debugInfo)", "testcase": false, "constructor": false}, {"identifier": "sendCommentAddedEmail", "parameters": "(Account account, SobaMessage sobaMessage, MessageComment comment)", "modifiers": "@Override public", "return": "void", "signature": "void sendCommentAddedEmail(Account account, SobaMessage sobaMessage, MessageComment comment)", "full_signature": "@Override public void sendCommentAddedEmail(Account account, SobaMessage sobaMessage, MessageComment comment)", "class_method_signature": "EmailServiceImpl.sendCommentAddedEmail(Account account, SobaMessage sobaMessage, MessageComment comment)", "testcase": false, "constructor": false}, {"identifier": "sendUserMessageAddedEmail", "parameters": "(User sender, SobaMessage sobaMessage)", "modifiers": "@Override public", "return": "void", "signature": "void sendUserMessageAddedEmail(User sender, SobaMessage sobaMessage)", "full_signature": "@Override public void sendUserMessageAddedEmail(User sender, SobaMessage sobaMessage)", "class_method_signature": "EmailServiceImpl.sendUserMessageAddedEmail(User sender, SobaMessage sobaMessage)", "testcase": false, "constructor": false}, {"identifier": "sendUserMessageEmail", "parameters": "(User sender, SobaMessage sobaMessage, JSONObject payload)", "modifiers": "@Override public", "return": "void", "signature": "void sendUserMessageEmail(User sender, SobaMessage sobaMessage, JSONObject payload)", "full_signature": "@Override public void sendUserMessageEmail(User sender, SobaMessage sobaMessage, JSONObject payload)", "class_method_signature": "EmailServiceImpl.sendUserMessageEmail(User sender, SobaMessage sobaMessage, JSONObject payload)", "testcase": false, "constructor": false}, {"identifier": "sendConnectionBrokenEmail", "parameters": "(Connection connection)", "modifiers": "@Override public", "return": "void", "signature": "void sendConnectionBrokenEmail(Connection connection)", "full_signature": "@Override public void sendConnectionBrokenEmail(Connection connection)", "class_method_signature": "EmailServiceImpl.sendConnectionBrokenEmail(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "sendEmail", "parameters": "(Collection<String> recipients, String fromAddress, String subject, String templateName, VelocityContext context)", "modifiers": "protected", "return": "void", "signature": "void sendEmail(Collection<String> recipients, String fromAddress, String subject, String templateName, VelocityContext context)", "full_signature": "protected void sendEmail(Collection<String> recipients, String fromAddress, String subject, String templateName, VelocityContext context)", "class_method_signature": "EmailServiceImpl.sendEmail(Collection<String> recipients, String fromAddress, String subject, String templateName, VelocityContext context)", "testcase": false, "constructor": false}, {"identifier": "sendEmail", "parameters": "(String recipient, String fromAddress, String subject, String templateName, VelocityContext context)", "modifiers": "protected", "return": "void", "signature": "void sendEmail(String recipient, String fromAddress, String subject, String templateName, VelocityContext context)", "full_signature": "protected void sendEmail(String recipient, String fromAddress, String subject, String templateName, VelocityContext context)", "class_method_signature": "EmailServiceImpl.sendEmail(String recipient, String fromAddress, String subject, String templateName, VelocityContext context)", "testcase": false, "constructor": false}, {"identifier": "sendEmail", "parameters": "(final String to, final String from, final String replyTo, final String subject, final String htmlBody, final String textBody)", "modifiers": "protected", "return": "void", "signature": "void sendEmail(final String to, final String from, final String replyTo, final String subject, final String htmlBody, final String textBody)", "full_signature": "protected void sendEmail(final String to, final String from, final String replyTo, final String subject, final String htmlBody, final String textBody)", "class_method_signature": "EmailServiceImpl.sendEmail(final String to, final String from, final String replyTo, final String subject, final String htmlBody, final String textBody)", "testcase": false, "constructor": false}, {"identifier": "internalSendEmail", "parameters": "(String to, String from, String replyTo, String subject, String htmlBody, String textBody)", "modifiers": "private", "return": "String", "signature": "String internalSendEmail(String to, String from, String replyTo, String subject, String htmlBody, String textBody)", "full_signature": "private String internalSendEmail(String to, String from, String replyTo, String subject, String htmlBody, String textBody)", "class_method_signature": "EmailServiceImpl.internalSendEmail(String to, String from, String replyTo, String subject, String htmlBody, String textBody)", "testcase": false, "constructor": false}, {"identifier": "createBodyFromTemplate", "parameters": "(String templateLocation, VelocityContext context)", "modifiers": "private", "return": "String", "signature": "String createBodyFromTemplate(String templateLocation, VelocityContext context)", "full_signature": "private String createBodyFromTemplate(String templateLocation, VelocityContext context)", "class_method_signature": "EmailServiceImpl.createBodyFromTemplate(String templateLocation, VelocityContext context)", "testcase": false, "constructor": false}, {"identifier": "createStringFromTemplate", "parameters": "(String stringTemplate, VelocityContext context)", "modifiers": "private", "return": "String", "signature": "String createStringFromTemplate(String stringTemplate, VelocityContext context)", "full_signature": "private String createStringFromTemplate(String stringTemplate, VelocityContext context)", "class_method_signature": "EmailServiceImpl.createStringFromTemplate(String stringTemplate, VelocityContext context)", "testcase": false, "constructor": false}, {"identifier": "getFriendlyMessageTypeLabel", "parameters": "(MessageType type)", "modifiers": "private", "return": "String", "signature": "String getFriendlyMessageTypeLabel(MessageType type)", "full_signature": "private String getFriendlyMessageTypeLabel(MessageType type)", "class_method_signature": "EmailServiceImpl.getFriendlyMessageTypeLabel(MessageType type)", "testcase": false, "constructor": false}, {"identifier": "receivesCommentNotifications", "parameters": "(User user)", "modifiers": "private", "return": "boolean", "signature": "boolean receivesCommentNotifications(User user)", "full_signature": "private boolean receivesCommentNotifications(User user)", "class_method_signature": "EmailServiceImpl.receivesCommentNotifications(User user)", "testcase": false, "constructor": false}, {"identifier": "receivesNewMessageNotifications", "parameters": "(User user)", "modifiers": "private", "return": "boolean", "signature": "boolean receivesNewMessageNotifications(User user)", "full_signature": "private boolean receivesNewMessageNotifications(User user)", "class_method_signature": "EmailServiceImpl.receivesNewMessageNotifications(User user)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/streamreduce/core/service/EmailServiceImpl.java"}, "focal_method": {"identifier": "sendCommentAddedEmail", "parameters": "(Account account, SobaMessage sobaMessage, MessageComment comment)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void sendCommentAddedEmail(Account account, SobaMessage sobaMessage, MessageComment comment) {\n        User owner = null;\n        if (sobaMessage.getOwnerId() != null) {\n            try {\n                owner = userService.getUserById(sobaMessage.getOwnerId());\n            }\n            catch (UserNotFoundException e) {\n                logger.error(\"User not found for ID {}. Cannot send email.\", sobaMessage.getOwnerId());\n                return;\n            }\n        }\n\n        String from = (String) emailProperties.get(\"email.noreply.from\");\n        String subject = (String) emailProperties.get(\"email.comment.added.subject\");\n        String urlPrefix = (String) emailProperties.get(\"email.urlprefix\");\n\n        // try to use a sensible default if the details or title are null\n        String title = \"User Comment\";\n        if (sobaMessage.getDetails() != null) {\n            AbstractMessageDetails details = (AbstractMessageDetails) sobaMessage.getDetails();\n            if (details.getTitle() != null) {\n                title = details.getTitle();\n            }\n        }\n\n        VelocityContext context = new VelocityContext();\n        context.put(\"messageId\", sobaMessage.getId());\n        context.put(\"commenter\", comment.getFullName());\n        context.put(\"messageType\", getFriendlyMessageTypeLabel(sobaMessage.getType()));\n        context.put(\"urlPrefix\", urlPrefix);\n        context.put(\"title\", title);\n        context.put(\"comment\", comment.getComment());\n\n        List<User> enabledUsers = userService.allEnabledUsersForAccount(account);\n        for (User user : enabledUsers) {\n            // don't send if the commenter is the owner or if the user has elected to not receive notifications\n            if (owner == null || !user.getId().equals(owner.getId()) || !receivesCommentNotifications(user)) {\n                sendEmail(user.getUsername(), from, subject, \"comment_added\", context);\n            }\n        }\n    }", "signature": "void sendCommentAddedEmail(Account account, SobaMessage sobaMessage, MessageComment comment)", "full_signature": "@Override public void sendCommentAddedEmail(Account account, SobaMessage sobaMessage, MessageComment comment)", "class_method_signature": "EmailServiceImpl.sendCommentAddedEmail(Account account, SobaMessage sobaMessage, MessageComment comment)", "testcase": false, "constructor": false, "invocations": ["getOwnerId", "getUserById", "getOwnerId", "error", "getOwnerId", "get", "get", "get", "getDetails", "getDetails", "getTitle", "getTitle", "put", "getId", "put", "getFullName", "put", "getFriendlyMessageTypeLabel", "getType", "put", "put", "put", "getComment", "allEnabledUsersForAccount", "equals", "getId", "getId", "receivesCommentNotifications", "sendEmail", "getUsername"]}, "repository": {"repo_id": 6281707, "url": "https://github.com/StreamReduce/streamreduce-core", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 21, "size": 2334, "license": "licensed"}}