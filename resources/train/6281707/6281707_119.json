{"test_class": {"identifier": "ConnectionServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SAMPLE_EXTERNAL_ID = \"ABCD-EF-123456789\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_EXTERNAL_ID = \"ABCD-EF-123456789\"", "var_name": "SAMPLE_EXTERNAL_ID"}, {"original_string": "private static final String OTHER_EXTERNAL_ID = \"134234234235234\";", "modifier": "private static final", "type": "String", "declarator": "OTHER_EXTERNAL_ID = \"134234234235234\"", "var_name": "OTHER_EXTERNAL_ID"}, {"original_string": "User sampleUser;", "modifier": "", "type": "User", "declarator": "sampleUser", "var_name": "sampleUser"}, {"original_string": "ConnectionServiceImpl connectionServiceImpl = new ConnectionServiceImpl();", "modifier": "", "type": "ConnectionServiceImpl", "declarator": "connectionServiceImpl = new ConnectionServiceImpl()", "var_name": "connectionServiceImpl"}, {"original_string": "ConnectionDAO connectionDAO;", "modifier": "", "type": "ConnectionDAO", "declarator": "connectionDAO", "var_name": "connectionDAO"}], "file": "core/src/test/java/com/streamreduce/core/service/ConnectionServiceImplTest.java"}, "test_case": {"identifier": "testCheckForDuplicateOAuthConnection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckForDuplicateOAuthConnection() throws Exception {\n        ///Tests that duplication checking does not reject a brand new connection for the account that uses OAuth\n        \n        Connection conn = new Connection.Builder()\n                .credentials(new ConnectionCredentials(\"access_code\",\"secret_key\"))\n                .alias(\"Jira With MakeBelieve OAuth\")\n                .user(sampleUser)\n                .authType(AuthType.OAUTH)\n                .provider(ConnectionProvidersForTests.JIRA_PROVIDER).build();\n        \n        connectionServiceImpl.checkForDuplicate(conn);\n    }", "signature": "void testCheckForDuplicateOAuthConnection()", "full_signature": "@Test public void testCheckForDuplicateOAuthConnection()", "class_method_signature": "ConnectionServiceImplTest.testCheckForDuplicateOAuthConnection()", "testcase": true, "constructor": false, "invocations": ["build", "provider", "authType", "user", "alias", "credentials", "checkForDuplicate"]}, "focal_class": {"identifier": "ConnectionServiceImpl", "superclass": "", "interfaces": "implements ConnectionService", "fields": [{"original_string": "protected transient Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected transient", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n    private ConnectionDAO connectionDAO;", "modifier": "@Autowired\n    private", "type": "ConnectionDAO", "declarator": "connectionDAO", "var_name": "connectionDAO"}, {"original_string": "@Autowired\n    private ConnectionProviderFactory connectionProviderFactory;", "modifier": "@Autowired\n    private", "type": "ConnectionProviderFactory", "declarator": "connectionProviderFactory", "var_name": "connectionProviderFactory"}, {"original_string": "@Autowired\n    private InventoryService inventoryService;", "modifier": "@Autowired\n    private", "type": "InventoryService", "declarator": "inventoryService", "var_name": "inventoryService"}, {"original_string": "@Autowired\n    private MessageService messageService;", "modifier": "@Autowired\n    private", "type": "MessageService", "declarator": "messageService", "var_name": "messageService"}, {"original_string": "@Autowired\n    private EventService eventService;", "modifier": "@Autowired\n    private", "type": "EventService", "declarator": "eventService", "var_name": "eventService"}, {"original_string": "@Autowired\n    private OAuthTokenCacheService cacheService;", "modifier": "@Autowired\n    private", "type": "OAuthTokenCacheService", "declarator": "cacheService", "var_name": "cacheService"}], "methods": [{"identifier": "createConnection", "parameters": "(Connection connection)", "modifiers": "@Override public", "return": "Connection", "signature": "Connection createConnection(Connection connection)", "full_signature": "@Override public Connection createConnection(Connection connection)", "class_method_signature": "ConnectionServiceImpl.createConnection(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "decryptCredentials", "parameters": "(Connection connection)", "modifiers": "private", "return": "void", "signature": "void decryptCredentials(Connection connection)", "full_signature": "private void decryptCredentials(Connection connection)", "class_method_signature": "ConnectionServiceImpl.decryptCredentials(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "addDefaultProtocolToURLIfMissing", "parameters": "(Connection connection)", "modifiers": "private", "return": "void", "signature": "void addDefaultProtocolToURLIfMissing(Connection connection)", "full_signature": "private void addDefaultProtocolToURLIfMissing(Connection connection)", "class_method_signature": "ConnectionServiceImpl.addDefaultProtocolToURLIfMissing(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "setCredentialsIfOauth", "parameters": "(Connection connection)", "modifiers": "private", "return": "void", "signature": "void setCredentialsIfOauth(Connection connection)", "full_signature": "private void setCredentialsIfOauth(Connection connection)", "class_method_signature": "ConnectionServiceImpl.setCredentialsIfOauth(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "finishHandshakeAndSetRealOauthTokens", "parameters": "(Connection connection)", "modifiers": "private", "return": "void", "signature": "void finishHandshakeAndSetRealOauthTokens(Connection connection)", "full_signature": "private void finishHandshakeAndSetRealOauthTokens(Connection connection)", "class_method_signature": "ConnectionServiceImpl.finishHandshakeAndSetRealOauthTokens(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "setIdentityForOauthConnection", "parameters": "(Connection connection)", "modifiers": "private", "return": "void", "signature": "void setIdentityForOauthConnection(Connection connection)", "full_signature": "private void setIdentityForOauthConnection(Connection connection)", "class_method_signature": "ConnectionServiceImpl.setIdentityForOauthConnection(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "setCredentialsIfGateway", "parameters": "(Connection connection)", "modifiers": "private", "return": "void", "signature": "void setCredentialsIfGateway(Connection connection)", "full_signature": "private void setCredentialsIfGateway(Connection connection)", "class_method_signature": "ConnectionServiceImpl.setCredentialsIfGateway(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "(@Nullable String type)", "modifiers": "@Override public", "return": "List<Connection>", "signature": "List<Connection> getConnections(@Nullable String type)", "full_signature": "@Override public List<Connection> getConnections(@Nullable String type)", "class_method_signature": "ConnectionServiceImpl.getConnections(@Nullable String type)", "testcase": false, "constructor": false}, {"identifier": "getPublicConnections", "parameters": "(@Nullable String type)", "modifiers": "@Override public", "return": "List<Connection>", "signature": "List<Connection> getPublicConnections(@Nullable String type)", "full_signature": "@Override public List<Connection> getPublicConnections(@Nullable String type)", "class_method_signature": "ConnectionServiceImpl.getPublicConnections(@Nullable String type)", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "(@Nullable String type, User user)", "modifiers": "@Override public", "return": "List<Connection>", "signature": "List<Connection> getConnections(@Nullable String type, User user)", "full_signature": "@Override public List<Connection> getConnections(@Nullable String type, User user)", "class_method_signature": "ConnectionServiceImpl.getConnections(@Nullable String type, User user)", "testcase": false, "constructor": false}, {"identifier": "getAccountConnections", "parameters": "(Account account)", "modifiers": "@Override public", "return": "List<Connection>", "signature": "List<Connection> getAccountConnections(Account account)", "full_signature": "@Override public List<Connection> getAccountConnections(Account account)", "class_method_signature": "ConnectionServiceImpl.getAccountConnections(Account account)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(ObjectId id)", "modifiers": "@Override public", "return": "Connection", "signature": "Connection getConnection(ObjectId id)", "full_signature": "@Override public Connection getConnection(ObjectId id)", "class_method_signature": "ConnectionServiceImpl.getConnection(ObjectId id)", "testcase": false, "constructor": false}, {"identifier": "updateConnection", "parameters": "(Connection connection)", "modifiers": "@Override public", "return": "Connection", "signature": "Connection updateConnection(Connection connection)", "full_signature": "@Override public Connection updateConnection(Connection connection)", "class_method_signature": "ConnectionServiceImpl.updateConnection(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "updateConnection", "parameters": "(Connection connection, boolean silentUpdate)", "modifiers": "@Override public", "return": "Connection", "signature": "Connection updateConnection(Connection connection, boolean silentUpdate)", "full_signature": "@Override public Connection updateConnection(Connection connection, boolean silentUpdate)", "class_method_signature": "ConnectionServiceImpl.updateConnection(Connection connection, boolean silentUpdate)", "testcase": false, "constructor": false}, {"identifier": "validateExternalIntegrationConnections", "parameters": "(Connection connection)", "modifiers": "private", "return": "void", "signature": "void validateExternalIntegrationConnections(Connection connection)", "full_signature": "private void validateExternalIntegrationConnections(Connection connection)", "class_method_signature": "ConnectionServiceImpl.validateExternalIntegrationConnections(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "validateOutboundConfigurations", "parameters": "(Set<OutboundConfiguration> outboundConfigurations)", "modifiers": "private", "return": "void", "signature": "void validateOutboundConfigurations(Set<OutboundConfiguration> outboundConfigurations)", "full_signature": "private void validateOutboundConfigurations(Set<OutboundConfiguration> outboundConfigurations)", "class_method_signature": "ConnectionServiceImpl.validateOutboundConfigurations(Set<OutboundConfiguration> outboundConfigurations)", "testcase": false, "constructor": false}, {"identifier": "deleteConnection", "parameters": "(Connection connection)", "modifiers": "public", "return": "void", "signature": "void deleteConnection(Connection connection)", "full_signature": "public void deleteConnection(Connection connection)", "class_method_signature": "ConnectionServiceImpl.deleteConnection(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "deleteConnectionInventory", "parameters": "(ObjectId connectionId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteConnectionInventory(ObjectId connectionId)", "full_signature": "@Override public void deleteConnectionInventory(ObjectId connectionId)", "class_method_signature": "ConnectionServiceImpl.deleteConnectionInventory(ObjectId connectionId)", "testcase": false, "constructor": false}, {"identifier": "checkForDuplicate", "parameters": "(Connection connection)", "modifiers": "protected", "return": "void", "signature": "void checkForDuplicate(Connection connection)", "full_signature": "protected void checkForDuplicate(Connection connection)", "class_method_signature": "ConnectionServiceImpl.checkForDuplicate(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "credsAreNullOrBlank", "parameters": "(Connection connection)", "modifiers": "private", "return": "boolean", "signature": "boolean credsAreNullOrBlank(Connection connection)", "full_signature": "private boolean credsAreNullOrBlank(Connection connection)", "class_method_signature": "ConnectionServiceImpl.credsAreNullOrBlank(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "checkForEqualAlias", "parameters": "(Connection newConnection, Connection existingConnection)", "modifiers": "private", "return": "void", "signature": "void checkForEqualAlias(Connection newConnection, Connection existingConnection)", "full_signature": "private void checkForEqualAlias(Connection newConnection, Connection existingConnection)", "class_method_signature": "ConnectionServiceImpl.checkForEqualAlias(Connection newConnection, Connection existingConnection)", "testcase": false, "constructor": false}, {"identifier": "fireOneTimeHighPriorityJobForConnection", "parameters": "(Connection connection)", "modifiers": "@Override public", "return": "void", "signature": "void fireOneTimeHighPriorityJobForConnection(Connection connection)", "full_signature": "@Override public void fireOneTimeHighPriorityJobForConnection(Connection connection)", "class_method_signature": "ConnectionServiceImpl.fireOneTimeHighPriorityJobForConnection(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "addHashtag", "parameters": "(Connection target, SobaObject tagger, String tag)", "modifiers": "@Override public", "return": "void", "signature": "void addHashtag(Connection target, SobaObject tagger, String tag)", "full_signature": "@Override public void addHashtag(Connection target, SobaObject tagger, String tag)", "class_method_signature": "ConnectionServiceImpl.addHashtag(Connection target, SobaObject tagger, String tag)", "testcase": false, "constructor": false}, {"identifier": "removeHashtag", "parameters": "(Connection target, SobaObject tagger, String tag)", "modifiers": "@Override public", "return": "void", "signature": "void removeHashtag(Connection target, SobaObject tagger, String tag)", "full_signature": "@Override public void removeHashtag(Connection target, SobaObject tagger, String tag)", "class_method_signature": "ConnectionServiceImpl.removeHashtag(Connection target, SobaObject tagger, String tag)", "testcase": false, "constructor": false}, {"identifier": "handleHashtagEvent", "parameters": "(EventId eventId, Connection target, SobaObject tagger, String tag)", "modifiers": "private", "return": "void", "signature": "void handleHashtagEvent(EventId eventId, Connection target, SobaObject tagger, String tag)", "full_signature": "private void handleHashtagEvent(EventId eventId, Connection target, SobaObject tagger, String tag)", "class_method_signature": "ConnectionServiceImpl.handleHashtagEvent(EventId eventId, Connection target, SobaObject tagger, String tag)", "testcase": false, "constructor": false}, {"identifier": "getConnectionsByExternalId", "parameters": "(String externalId, final User user)", "modifiers": "@Override public", "return": "List<Connection>", "signature": "List<Connection> getConnectionsByExternalId(String externalId, final User user)", "full_signature": "@Override public List<Connection> getConnectionsByExternalId(String externalId, final User user)", "class_method_signature": "ConnectionServiceImpl.getConnectionsByExternalId(String externalId, final User user)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/streamreduce/core/service/ConnectionServiceImpl.java"}, "focal_method": {"identifier": "checkForDuplicate", "parameters": "(Connection connection)", "modifiers": "protected", "return": "void", "body": "protected void checkForDuplicate(Connection connection) throws ConnectionExistsException {\n        List<Connection> connections = connectionDAO.forTypeAndUser(connection.getType(), connection.getUser());\n\n        for (Connection otherConnection : connections) {\n            // We use this for create and update so id might not be set yet\n            try {\n                // If the connection being compared against is the same as the one being updated, do not compare\n                if (getConnection(connection.getId()) != null && otherConnection.getId().equals(connection.getId())) {\n                    continue;\n                }\n            } catch (ConnectionNotFoundException e) {\n                // Should not matter in this context\n            }\n\n            checkForEqualAlias(connection, otherConnection);\n\n            String cUrl = connection.getUrl() != null ? connection.getUrl().trim().toLowerCase() : \"\";\n            String oUrl = otherConnection.getUrl() != null ? otherConnection.getUrl().trim().toLowerCase() : \"\";\n\n            // Duplicate if credentials aren't set and URL exists elsewhere in account.\n            if (credsAreNullOrBlank(connection) && credsAreNullOrBlank(otherConnection) && cUrl.equals(oUrl)) {\n                throw ConnectionExistsException.Factory.duplicateCredentials(connection);\n            }\n\n            // Duplicate if both credentials and URLs are equal.\n            // If the URLs are the same then make sure credentials are not\n            if (cUrl.equals(oUrl)) {\n                ConnectionCredentials cCreds = connection.getCredentials();\n                ConnectionCredentials oCreds = otherConnection.getCredentials();\n\n                if ((cCreds == null && oCreds == null) || (cCreds != null && oCreds != null && cCreds.equals(oCreds))) {\n                    throw ConnectionExistsException.Factory.duplicateCredentials(connection);\n                }\n            }\n        }\n    }", "signature": "void checkForDuplicate(Connection connection)", "full_signature": "protected void checkForDuplicate(Connection connection)", "class_method_signature": "ConnectionServiceImpl.checkForDuplicate(Connection connection)", "testcase": false, "constructor": false, "invocations": ["forTypeAndUser", "getType", "getUser", "getConnection", "getId", "equals", "getId", "getId", "checkForEqualAlias", "getUrl", "toLowerCase", "trim", "getUrl", "getUrl", "toLowerCase", "trim", "getUrl", "credsAreNullOrBlank", "credsAreNullOrBlank", "equals", "duplicateCredentials", "equals", "getCredentials", "getCredentials", "equals", "duplicateCredentials"]}, "repository": {"repo_id": 6281707, "url": "https://github.com/StreamReduce/streamreduce-core", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 21, "size": 2334, "license": "licensed"}}