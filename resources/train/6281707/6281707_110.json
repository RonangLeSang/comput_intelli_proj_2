{"test_class": {"identifier": "UserServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    @SuppressWarnings(\"unused\")\n    private User mockUser;", "modifier": "@Mock\n    @SuppressWarnings(\"unused\")\n    private", "type": "User", "declarator": "mockUser", "var_name": "mockUser"}, {"original_string": "private UserServiceImpl userService = new UserServiceImpl();", "modifier": "private", "type": "UserServiceImpl", "declarator": "userService = new UserServiceImpl()", "var_name": "userService"}], "file": "core/src/test/java/com/streamreduce/core/service/UserServiceImplTest.java"}, "test_case": {"identifier": "testValidateUserAlias_NonAlphaCharacters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateUserAlias_NonAlphaCharacters() {\n        //Test only typical special chars on a US layout keyboard in a dumb way.\n\n        Random random = new Random();\n        String userName = \"nodebelly\";\n        for (char c : \"!@#$%^&*()+{}[]=;'<,.>/?~`\".toCharArray()) {\n            int index = random.nextInt(userName.length());;\n            CharSequence begin = userName.subSequence(0,index);\n            CharSequence end = userName.subSequence(index,userName.length());\n            String userNameWithNonAlphaChar = new StringBuilder().append(begin).append(c).append(end).toString();\n            when(mockUser.getAlias()).thenReturn(\"@nodebelly\");\n            try {\n                userService.validateUserAlias(mockUser);\n            } catch (InvalidUserAliasException e) {\n                continue;\n                //expected\n            }\n            fail(userNameWithNonAlphaChar + \" is an invalid user alias but was allowed by \" +\n                    \"UserServiceImpl.validateUserAlias \");\n        }\n    }", "signature": "void testValidateUserAlias_NonAlphaCharacters()", "full_signature": "@Test public void testValidateUserAlias_NonAlphaCharacters()", "class_method_signature": "UserServiceImplTest.testValidateUserAlias_NonAlphaCharacters()", "testcase": true, "constructor": false, "invocations": ["toCharArray", "nextInt", "length", "subSequence", "subSequence", "length", "toString", "append", "append", "append", "thenReturn", "when", "getAlias", "validateUserAlias", "fail"]}, "focal_class": {"identifier": "UserServiceImpl", "superclass": "extends AbstractService", "interfaces": "implements UserService", "fields": [{"original_string": "@Autowired\n    private UserDAO userDAO;", "modifier": "@Autowired\n    private", "type": "UserDAO", "declarator": "userDAO", "var_name": "userDAO"}, {"original_string": "@Autowired\n    private RoleDAO roleDAO;", "modifier": "@Autowired\n    private", "type": "RoleDAO", "declarator": "roleDAO", "var_name": "roleDAO"}, {"original_string": "@Autowired\n    private AccountDAO accountDAO;", "modifier": "@Autowired\n    private", "type": "AccountDAO", "declarator": "accountDAO", "var_name": "accountDAO"}, {"original_string": "@Autowired\n    private EventLogDAO eventLogDAO;", "modifier": "@Autowired\n    private", "type": "EventLogDAO", "declarator": "eventLogDAO", "var_name": "eventLogDAO"}, {"original_string": "@Autowired\n    private GenericCollectionDAO genericCollectionDAO;", "modifier": "@Autowired\n    private", "type": "GenericCollectionDAO", "declarator": "genericCollectionDAO", "var_name": "genericCollectionDAO"}, {"original_string": "@Autowired\n    private SearchService searchService;", "modifier": "@Autowired\n    private", "type": "SearchService", "declarator": "searchService", "var_name": "searchService"}, {"original_string": "@Autowired\n    private EventService eventService;", "modifier": "@Autowired\n    private", "type": "EventService", "declarator": "eventService", "var_name": "eventService"}, {"original_string": "@Autowired\n    private MessageService messageService;", "modifier": "@Autowired\n    private", "type": "MessageService", "declarator": "messageService", "var_name": "messageService"}, {"original_string": "private Cache<String, User> superUserCache =\n            CacheBuilder.newBuilder().maximumSize(1).expireAfterAccess(5, TimeUnit.MINUTES).build();", "modifier": "private", "type": "Cache<String, User>", "declarator": "superUserCache =\n            CacheBuilder.newBuilder().maximumSize(1).expireAfterAccess(5, TimeUnit.MINUTES).build()", "var_name": "superUserCache"}], "methods": [{"identifier": "isUsernameAvailable", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUsernameAvailable(String name)", "full_signature": "@Override public boolean isUsernameAvailable(String name)", "class_method_signature": "UserServiceImpl.isUsernameAvailable(String name)", "testcase": false, "constructor": false}, {"identifier": "isAliasAvailable", "parameters": "(Account account, String alias)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAliasAvailable(Account account, String alias)", "full_signature": "@Override public boolean isAliasAvailable(Account account, String alias)", "class_method_signature": "UserServiceImpl.isAliasAvailable(Account account, String alias)", "testcase": false, "constructor": false}, {"identifier": "getAccount", "parameters": "(ObjectId accountId)", "modifiers": "@Override public", "return": "Account", "signature": "Account getAccount(ObjectId accountId)", "full_signature": "@Override public Account getAccount(ObjectId accountId)", "class_method_signature": "UserServiceImpl.getAccount(ObjectId accountId)", "testcase": false, "constructor": false}, {"identifier": "getAccountRoles", "parameters": "(ObjectId accountId)", "modifiers": "@Override public", "return": "Set<Role>", "signature": "Set<Role> getAccountRoles(ObjectId accountId)", "full_signature": "@Override public Set<Role> getAccountRoles(ObjectId accountId)", "class_method_signature": "UserServiceImpl.getAccountRoles(ObjectId accountId)", "testcase": false, "constructor": false}, {"identifier": "getUserById", "parameters": "(ObjectId userId)", "modifiers": "@Override public", "return": "User", "signature": "User getUserById(ObjectId userId)", "full_signature": "@Override public User getUserById(ObjectId userId)", "class_method_signature": "UserServiceImpl.getUserById(ObjectId userId)", "testcase": false, "constructor": false}, {"identifier": "getUsersById", "parameters": "(Set<ObjectId> userIds)", "modifiers": "public", "return": "List<User>", "signature": "List<User> getUsersById(Set<ObjectId> userIds)", "full_signature": "public List<User> getUsersById(Set<ObjectId> userIds)", "class_method_signature": "UserServiceImpl.getUsersById(Set<ObjectId> userIds)", "testcase": false, "constructor": false}, {"identifier": "getUserById", "parameters": "(ObjectId userId, Account account)", "modifiers": "@Override public", "return": "User", "signature": "User getUserById(ObjectId userId, Account account)", "full_signature": "@Override public User getUserById(ObjectId userId, Account account)", "class_method_signature": "UserServiceImpl.getUserById(ObjectId userId, Account account)", "testcase": false, "constructor": false}, {"identifier": "getUserByAuthenticationToken", "parameters": "(String authToken)", "modifiers": "@Override public", "return": "User", "signature": "User getUserByAuthenticationToken(String authToken)", "full_signature": "@Override public User getUserByAuthenticationToken(String authToken)", "class_method_signature": "UserServiceImpl.getUserByAuthenticationToken(String authToken)", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(String username, Account account)", "modifiers": "@Override public", "return": "User", "signature": "User getUser(String username, Account account)", "full_signature": "@Override public User getUser(String username, Account account)", "class_method_signature": "UserServiceImpl.getUser(String username, Account account)", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(String username)", "modifiers": "@Override public", "return": "User", "signature": "User getUser(String username)", "full_signature": "@Override public User getUser(String username)", "class_method_signature": "UserServiceImpl.getUser(String username)", "testcase": false, "constructor": false}, {"identifier": "getTargetUser", "parameters": "(Account account, String name)", "modifiers": "@Override public", "return": "User", "signature": "User getTargetUser(Account account, String name)", "full_signature": "@Override public User getTargetUser(Account account, String name)", "class_method_signature": "UserServiceImpl.getTargetUser(Account account, String name)", "testcase": false, "constructor": false}, {"identifier": "createAccount", "parameters": "(Account account)", "modifiers": "@Override public", "return": "Account", "signature": "Account createAccount(Account account)", "full_signature": "@Override public Account createAccount(Account account)", "class_method_signature": "UserServiceImpl.createAccount(Account account)", "testcase": false, "constructor": false}, {"identifier": "updateAccount", "parameters": "(Account account)", "modifiers": "@Override public", "return": "void", "signature": "void updateAccount(Account account)", "full_signature": "@Override public void updateAccount(Account account)", "class_method_signature": "UserServiceImpl.updateAccount(Account account)", "testcase": false, "constructor": false}, {"identifier": "updateUser", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void updateUser(User user)", "full_signature": "@Override public void updateUser(User user)", "class_method_signature": "UserServiceImpl.updateUser(User user)", "testcase": false, "constructor": false}, {"identifier": "resetUserPassword", "parameters": "(User user, boolean mobile)", "modifiers": "@Override public", "return": "void", "signature": "void resetUserPassword(User user, boolean mobile)", "full_signature": "@Override public void resetUserPassword(User user, boolean mobile)", "class_method_signature": "UserServiceImpl.resetUserPassword(User user, boolean mobile)", "testcase": false, "constructor": false}, {"identifier": "deleteAccount", "parameters": "(ObjectId accountId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteAccount(ObjectId accountId)", "full_signature": "@Override public void deleteAccount(ObjectId accountId)", "class_method_signature": "UserServiceImpl.deleteAccount(ObjectId accountId)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void deleteUser(User user)", "full_signature": "@Override public void deleteUser(User user)", "class_method_signature": "UserServiceImpl.deleteUser(User user)", "testcase": false, "constructor": false}, {"identifier": "getUserFromInvite", "parameters": "(String inviteKey, String accountId)", "modifiers": "@Override public", "return": "User", "signature": "User getUserFromInvite(String inviteKey, String accountId)", "full_signature": "@Override public User getUserFromInvite(String inviteKey, String accountId)", "class_method_signature": "UserServiceImpl.getUserFromInvite(String inviteKey, String accountId)", "testcase": false, "constructor": false}, {"identifier": "getUserFromSignupKey", "parameters": "(String signupKey, String userId)", "modifiers": "@Override public", "return": "User", "signature": "User getUserFromSignupKey(String signupKey, String userId)", "full_signature": "@Override public User getUserFromSignupKey(String signupKey, String userId)", "class_method_signature": "UserServiceImpl.getUserFromSignupKey(String signupKey, String userId)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(User user)", "modifiers": "@Override public", "return": "User", "signature": "User createUser(User user)", "full_signature": "@Override public User createUser(User user)", "class_method_signature": "UserServiceImpl.createUser(User user)", "testcase": false, "constructor": false}, {"identifier": "createUserRequest", "parameters": "(User user)", "modifiers": "@Override public", "return": "User", "signature": "User createUserRequest(User user)", "full_signature": "@Override public User createUserRequest(User user)", "class_method_signature": "UserServiceImpl.createUserRequest(User user)", "testcase": false, "constructor": false}, {"identifier": "recreateUserRequest", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void recreateUserRequest(User user)", "full_signature": "@Override public void recreateUserRequest(User user)", "class_method_signature": "UserServiceImpl.recreateUserRequest(User user)", "testcase": false, "constructor": false}, {"identifier": "handleUserRequest", "parameters": "(User user, boolean isRecreate)", "modifiers": "private", "return": "void", "signature": "void handleUserRequest(User user, boolean isRecreate)", "full_signature": "private void handleUserRequest(User user, boolean isRecreate)", "class_method_signature": "UserServiceImpl.handleUserRequest(User user, boolean isRecreate)", "testcase": false, "constructor": false}, {"identifier": "deleteUserInvite", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void deleteUserInvite(User user)", "full_signature": "@Override public void deleteUserInvite(User user)", "class_method_signature": "UserServiceImpl.deleteUserInvite(User user)", "testcase": false, "constructor": false}, {"identifier": "deleteUsersForAccount", "parameters": "(Account account)", "modifiers": "@Override public", "return": "void", "signature": "void deleteUsersForAccount(Account account)", "full_signature": "@Override public void deleteUsersForAccount(Account account)", "class_method_signature": "UserServiceImpl.deleteUsersForAccount(Account account)", "testcase": false, "constructor": false}, {"identifier": "allUsersForAccount", "parameters": "(Account account)", "modifiers": "@Override public", "return": "List<User>", "signature": "List<User> allUsersForAccount(Account account)", "full_signature": "@Override public List<User> allUsersForAccount(Account account)", "class_method_signature": "UserServiceImpl.allUsersForAccount(Account account)", "testcase": false, "constructor": false}, {"identifier": "allEnabledUsersForAccount", "parameters": "(Account account)", "modifiers": "@Override /** * SOBA-1401 Does not include disabled users (this is our psuedo \"deleted\" status) */ public", "return": "List<User>", "signature": "List<User> allEnabledUsersForAccount(Account account)", "full_signature": "@Override /** * SOBA-1401 Does not include disabled users (this is our psuedo \"deleted\" status) */ public List<User> allEnabledUsersForAccount(Account account)", "class_method_signature": "UserServiceImpl.allEnabledUsersForAccount(Account account)", "testcase": false, "constructor": false}, {"identifier": "getUserRoles", "parameters": "()", "modifiers": "@Override public", "return": "Set<Role>", "signature": "Set<Role> getUserRoles()", "full_signature": "@Override public Set<Role> getUserRoles()", "class_method_signature": "UserServiceImpl.getUserRoles()", "testcase": false, "constructor": false}, {"identifier": "getAdminRoles", "parameters": "()", "modifiers": "@Override public", "return": "Set<Role>", "signature": "Set<Role> getAdminRoles()", "full_signature": "@Override public Set<Role> getAdminRoles()", "class_method_signature": "UserServiceImpl.getAdminRoles()", "testcase": false, "constructor": false}, {"identifier": "getAccounts", "parameters": "()", "modifiers": "@Override public", "return": "List<Account>", "signature": "List<Account> getAccounts()", "full_signature": "@Override public List<Account> getAccounts()", "class_method_signature": "UserServiceImpl.getAccounts()", "testcase": false, "constructor": false}, {"identifier": "addRole", "parameters": "(User user, ObjectId roleId)", "modifiers": "@Override public", "return": "void", "signature": "void addRole(User user, ObjectId roleId)", "full_signature": "@Override public void addRole(User user, ObjectId roleId)", "class_method_signature": "UserServiceImpl.addRole(User user, ObjectId roleId)", "testcase": false, "constructor": false}, {"identifier": "removeRole", "parameters": "(User user, ObjectId roleId)", "modifiers": "@Override public", "return": "void", "signature": "void removeRole(User user, ObjectId roleId)", "full_signature": "@Override public void removeRole(User user, ObjectId roleId)", "class_method_signature": "UserServiceImpl.removeRole(User user, ObjectId roleId)", "testcase": false, "constructor": false}, {"identifier": "addToEventLog", "parameters": "(User user, String name, JSONObject value, Long timestamp)", "modifiers": "@Override public", "return": "ObjectId", "signature": "ObjectId addToEventLog(User user, String name, JSONObject value, Long timestamp)", "full_signature": "@Override public ObjectId addToEventLog(User user, String name, JSONObject value, Long timestamp)", "class_method_signature": "UserServiceImpl.addToEventLog(User user, String name, JSONObject value, Long timestamp)", "testcase": false, "constructor": false}, {"identifier": "deletePendingUser", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void deletePendingUser(User user)", "full_signature": "@Override public void deletePendingUser(User user)", "class_method_signature": "UserServiceImpl.deletePendingUser(User user)", "testcase": false, "constructor": false}, {"identifier": "getSuperUser", "parameters": "()", "modifiers": "@Override public", "return": "User", "signature": "User getSuperUser()", "full_signature": "@Override public User getSuperUser()", "class_method_signature": "UserServiceImpl.getSuperUser()", "testcase": false, "constructor": false}, {"identifier": "getSystemUser", "parameters": "()", "modifiers": "@Override public", "return": "User", "signature": "User getSystemUser()", "full_signature": "@Override public User getSystemUser()", "class_method_signature": "UserServiceImpl.getSystemUser()", "testcase": false, "constructor": false}, {"identifier": "getAccountAdmin", "parameters": "(Account account)", "modifiers": "@Override public", "return": "User", "signature": "User getAccountAdmin(Account account)", "full_signature": "@Override public User getAccountAdmin(Account account)", "class_method_signature": "UserServiceImpl.getAccountAdmin(Account account)", "testcase": false, "constructor": false}, {"identifier": "createMetricInbox", "parameters": "(Account account)", "modifiers": "private", "return": "void", "signature": "void createMetricInbox(Account account)", "full_signature": "private void createMetricInbox(Account account)", "class_method_signature": "UserServiceImpl.createMetricInbox(Account account)", "testcase": false, "constructor": false}, {"identifier": "handleInitialInsightForAccount", "parameters": "(Account account)", "modifiers": "@Override public", "return": "void", "signature": "void handleInitialInsightForAccount(Account account)", "full_signature": "@Override public void handleInitialInsightForAccount(Account account)", "class_method_signature": "UserServiceImpl.handleInitialInsightForAccount(Account account)", "testcase": false, "constructor": false}, {"identifier": "validateUserAlias", "parameters": "(User user)", "modifiers": "", "return": "void", "signature": "void validateUserAlias(User user)", "full_signature": " void validateUserAlias(User user)", "class_method_signature": "UserServiceImpl.validateUserAlias(User user)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/streamreduce/core/service/UserServiceImpl.java"}, "focal_method": {"identifier": "validateUserAlias", "parameters": "(User user)", "modifiers": "", "return": "void", "body": "void validateUserAlias(User user) {\n        if (!User.isValidUserAlias(user.getAlias())) {\n            throw new InvalidUserAliasException(\"User alias contains characters that aren't alphanumeric, dashes, or \" +\n                    \"underscores\");\n        }\n    }", "signature": "void validateUserAlias(User user)", "full_signature": " void validateUserAlias(User user)", "class_method_signature": "UserServiceImpl.validateUserAlias(User user)", "testcase": false, "constructor": false, "invocations": ["isValidUserAlias", "getAlias"]}, "repository": {"repo_id": 6281707, "url": "https://github.com/StreamReduce/streamreduce-core", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 21, "size": 2334, "license": "licensed"}}