{"test_class": {"identifier": "AWSClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AWSClient awsClientUnderTest;", "modifier": "", "type": "AWSClient", "declarator": "awsClientUnderTest", "var_name": "awsClientUnderTest"}], "file": "core/src/test/java/com/streamreduce/util/AWSClientTest.java"}, "test_case": {"identifier": "testConvertOutboundConnectionToBucketName_UsesAccountId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertOutboundConnectionToBucketName_UsesAccountId() throws Exception {\n        ObjectId accountId = new ObjectId();\n        Account acct = new Account.Builder().name(\"testacct\").build();\n        acct.setId(accountId);\n        Connection mockConnection = mock(Connection.class);\n        when(mockConnection.getAccount()).thenReturn(acct);\n\n        OutboundConfiguration mockOutboundConfiguration = mock(OutboundConfiguration.class);\n        when(mockOutboundConfiguration.getNamespace()).thenReturn(null);\n        when(mockOutboundConfiguration.getOriginatingConnection()).thenReturn(mockConnection);\n\n        String bucketName = awsClientUnderTest.convertOutboundConnectionToBucketName(mockOutboundConfiguration);\n        String expected = \"com.streamreduce.\" + accountId.toString();\n        assertEquals(expected,bucketName);\n    }", "signature": "void testConvertOutboundConnectionToBucketName_UsesAccountId()", "full_signature": "@Test public void testConvertOutboundConnectionToBucketName_UsesAccountId()", "class_method_signature": "AWSClientTest.testConvertOutboundConnectionToBucketName_UsesAccountId()", "testcase": true, "constructor": false, "invocations": ["build", "name", "setId", "mock", "thenReturn", "when", "getAccount", "mock", "thenReturn", "when", "getNamespace", "thenReturn", "when", "getOriginatingConnection", "convertOutboundConnectionToBucketName", "toString", "assertEquals"]}, "focal_class": {"identifier": "AWSClient", "superclass": "extends ExternalIntegrationClient", "interfaces": "", "fields": [{"original_string": "private static final String BUCKET_PREFIX = \"com.streamreduce\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET_PREFIX = \"com.streamreduce\"", "var_name": "BUCKET_PREFIX"}, {"original_string": "private static final String S3_OBJECT_EVENT_PREFIX = \"event/\";", "modifier": "private static final", "type": "String", "declarator": "S3_OBJECT_EVENT_PREFIX = \"event/\"", "var_name": "S3_OBJECT_EVENT_PREFIX"}, {"original_string": "private static final String S3_OBJECT_SOBA_MESSAGE_PREFIX = \"message/\";", "modifier": "private static final", "type": "String", "declarator": "S3_OBJECT_SOBA_MESSAGE_PREFIX = \"message/\"", "var_name": "S3_OBJECT_SOBA_MESSAGE_PREFIX"}, {"original_string": "private BlobStoreContext blobStoreContext;", "modifier": "private", "type": "BlobStoreContext", "declarator": "blobStoreContext", "var_name": "blobStoreContext"}, {"original_string": "private ComputeServiceContext computeServiceContext;", "modifier": "private", "type": "ComputeServiceContext", "declarator": "computeServiceContext", "var_name": "computeServiceContext"}, {"original_string": "private RestContext<CloudWatchApi, CloudWatchAsyncApi> cloudWatchContext;", "modifier": "private", "type": "RestContext<CloudWatchApi, CloudWatchAsyncApi>", "declarator": "cloudWatchContext", "var_name": "cloudWatchContext"}, {"original_string": "private static final String EC2_API_BASE = \"ec2.amazonaws.com\";", "modifier": "private static final", "type": "String", "declarator": "EC2_API_BASE = \"ec2.amazonaws.com\"", "var_name": "EC2_API_BASE"}], "methods": [{"identifier": "AWSClient", "parameters": "(Connection connection)", "modifiers": "public", "return": "", "signature": " AWSClient(Connection connection)", "full_signature": "public  AWSClient(Connection connection)", "class_method_signature": "AWSClient.AWSClient(Connection connection)", "testcase": false, "constructor": true}, {"identifier": "AWSClient", "parameters": "(OutboundConfiguration outboundConfiguration)", "modifiers": "public", "return": "", "signature": " AWSClient(OutboundConfiguration outboundConfiguration)", "full_signature": "public  AWSClient(OutboundConfiguration outboundConfiguration)", "class_method_signature": "AWSClient.AWSClient(OutboundConfiguration outboundConfiguration)", "testcase": false, "constructor": true}, {"identifier": "destroyEC2Instance", "parameters": "(String nodeId)", "modifiers": "public", "return": "boolean", "signature": "boolean destroyEC2Instance(String nodeId)", "full_signature": "public boolean destroyEC2Instance(String nodeId)", "class_method_signature": "AWSClient.destroyEC2Instance(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "rebootEC2Instance", "parameters": "(String nodeId)", "modifiers": "public", "return": "boolean", "signature": "boolean rebootEC2Instance(String nodeId)", "full_signature": "public boolean rebootEC2Instance(String nodeId)", "class_method_signature": "AWSClient.rebootEC2Instance(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "getEC2Instance", "parameters": "(String nodeId)", "modifiers": "public", "return": "NodeMetadata", "signature": "NodeMetadata getEC2Instance(String nodeId)", "full_signature": "public NodeMetadata getEC2Instance(String nodeId)", "class_method_signature": "AWSClient.getEC2Instance(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "getEC2InstanceTags", "parameters": "(String nodeId)", "modifiers": "public", "return": "Set<Tag>", "signature": "Set<Tag> getEC2InstanceTags(String nodeId)", "full_signature": "public Set<Tag> getEC2InstanceTags(String nodeId)", "class_method_signature": "AWSClient.getEC2InstanceTags(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "getEC2Instances", "parameters": "()", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> getEC2Instances()", "full_signature": "public List<JSONObject> getEC2Instances()", "class_method_signature": "AWSClient.getEC2Instances()", "testcase": false, "constructor": false}, {"identifier": "getS3Buckets", "parameters": "()", "modifiers": "public", "return": "Set<? extends StorageMetadata>", "signature": "Set<? extends StorageMetadata> getS3Buckets()", "full_signature": "public Set<? extends StorageMetadata> getS3Buckets()", "class_method_signature": "AWSClient.getS3Buckets()", "testcase": false, "constructor": false}, {"identifier": "getS3BucketsAsJson", "parameters": "()", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> getS3BucketsAsJson()", "full_signature": "public List<JSONObject> getS3BucketsAsJson()", "class_method_signature": "AWSClient.getS3BucketsAsJson()", "testcase": false, "constructor": false}, {"identifier": "describeRegions", "parameters": "()", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> describeRegions()", "full_signature": "public List<JSONObject> describeRegions()", "class_method_signature": "AWSClient.describeRegions()", "testcase": false, "constructor": false}, {"identifier": "describeImages", "parameters": "(String endpoint, Set<String> imageIds)", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> describeImages(String endpoint, Set<String> imageIds)", "full_signature": "public List<JSONObject> describeImages(String endpoint, Set<String> imageIds)", "class_method_signature": "AWSClient.describeImages(String endpoint, Set<String> imageIds)", "testcase": false, "constructor": false}, {"identifier": "describeInstances", "parameters": "(String endpoint)", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> describeInstances(String endpoint)", "full_signature": "public List<JSONObject> describeInstances(String endpoint)", "class_method_signature": "AWSClient.describeInstances(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "describeInstanceStatus", "parameters": "(String endpoint)", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> describeInstanceStatus(String endpoint)", "full_signature": "public List<JSONObject> describeInstanceStatus(String endpoint)", "class_method_signature": "AWSClient.describeInstanceStatus(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "listMetrics", "parameters": "(String endpoint)", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> listMetrics(String endpoint)", "full_signature": "public List<JSONObject> listMetrics(String endpoint)", "class_method_signature": "AWSClient.listMetrics(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "getMetricStatistics", "parameters": "(String endpoint, String namespace, String metricName, String dimensionName, String dimensionValue)", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> getMetricStatistics(String endpoint, String namespace, String metricName, String dimensionName, String dimensionValue)", "full_signature": "public List<JSONObject> getMetricStatistics(String endpoint, String namespace, String metricName, String dimensionName, String dimensionValue)", "class_method_signature": "AWSClient.getMetricStatistics(String endpoint, String namespace, String metricName, String dimensionName, String dimensionValue)", "testcase": false, "constructor": false}, {"identifier": "describeInstanceAndImageForRunningAndStoppedInstances", "parameters": "(String endpoint)", "modifiers": "public", "return": "Map<String, JSONArray>", "signature": "Map<String, JSONArray> describeInstanceAndImageForRunningAndStoppedInstances(String endpoint)", "full_signature": "public Map<String, JSONArray> describeInstanceAndImageForRunningAndStoppedInstances(String endpoint)", "class_method_signature": "AWSClient.describeInstanceAndImageForRunningAndStoppedInstances(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "getMetricsStatisticsForRunningInstances", "parameters": "(String endpoint)", "modifiers": "public", "return": "Map<String, JSONObject>", "signature": "Map<String, JSONObject> getMetricsStatisticsForRunningInstances(String endpoint)", "full_signature": "public Map<String, JSONObject> getMetricsStatisticsForRunningInstances(String endpoint)", "class_method_signature": "AWSClient.getMetricsStatisticsForRunningInstances(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "filterInstancesByInstanceState", "parameters": "(String instanceState, List<JSONObject> instances)", "modifiers": "private", "return": "List<JSONObject>", "signature": "List<JSONObject> filterInstancesByInstanceState(String instanceState, List<JSONObject> instances)", "full_signature": "private List<JSONObject> filterInstancesByInstanceState(String instanceState, List<JSONObject> instances)", "class_method_signature": "AWSClient.filterInstancesByInstanceState(String instanceState, List<JSONObject> instances)", "testcase": false, "constructor": false}, {"identifier": "filterMetricsByInstanceId", "parameters": "(String instanceId, List<JSONObject> metrics)", "modifiers": "private", "return": "List<JSONObject>", "signature": "List<JSONObject> filterMetricsByInstanceId(String instanceId, List<JSONObject> metrics)", "full_signature": "private List<JSONObject> filterMetricsByInstanceId(String instanceId, List<JSONObject> metrics)", "class_method_signature": "AWSClient.filterMetricsByInstanceId(String instanceId, List<JSONObject> metrics)", "testcase": false, "constructor": false}, {"identifier": "getService", "parameters": "(String endpoint)", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> getService(String endpoint)", "full_signature": "public List<JSONObject> getService(String endpoint)", "class_method_signature": "AWSClient.getService(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "getBucketLocation", "parameters": "(String endpoint, String bucket)", "modifiers": "public", "return": "JSONObject", "signature": "JSONObject getBucketLocation(String endpoint, String bucket)", "full_signature": "public JSONObject getBucketLocation(String endpoint, String bucket)", "class_method_signature": "AWSClient.getBucketLocation(String endpoint, String bucket)", "testcase": false, "constructor": false}, {"identifier": "getBucketsWithLocation", "parameters": "(String endpoint)", "modifiers": "public", "return": "List<JSONObject>", "signature": "List<JSONObject> getBucketsWithLocation(String endpoint)", "full_signature": "public List<JSONObject> getBucketsWithLocation(String endpoint)", "class_method_signature": "AWSClient.getBucketsWithLocation(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "makeRequest", "parameters": "(String endpoint, Map<String, String> params)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject makeRequest(String endpoint, Map<String, String> params)", "full_signature": "private JSONObject makeRequest(String endpoint, Map<String, String> params)", "class_method_signature": "AWSClient.makeRequest(String endpoint, Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "makeS3Request", "parameters": "(String endpoint, String bucket, String path)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject makeS3Request(String endpoint, String bucket, String path)", "full_signature": "private JSONObject makeS3Request(String endpoint, String bucket, String path)", "class_method_signature": "AWSClient.makeS3Request(String endpoint, String bucket, String path)", "testcase": false, "constructor": false}, {"identifier": "getJSONChildren", "parameters": "(String key, JSONObject json)", "modifiers": "private", "return": "List<JSONObject>", "signature": "List<JSONObject> getJSONChildren(String key, JSONObject json)", "full_signature": "private List<JSONObject> getJSONChildren(String key, JSONObject json)", "class_method_signature": "AWSClient.getJSONChildren(String key, JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "signUrl", "parameters": "(String rawUrl, Map<String, String> params)", "modifiers": "private", "return": "String", "signature": "String signUrl(String rawUrl, Map<String, String> params)", "full_signature": "private String signUrl(String rawUrl, Map<String, String> params)", "class_method_signature": "AWSClient.signUrl(String rawUrl, Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "getFormattedTimestamp", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String getFormattedTimestamp(Date date)", "full_signature": "private String getFormattedTimestamp(Date date)", "class_method_signature": "AWSClient.getFormattedTimestamp(Date date)", "testcase": false, "constructor": false}, {"identifier": "getS3FormattedTimestamp", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String getS3FormattedTimestamp(Date date)", "full_signature": "private String getS3FormattedTimestamp(Date date)", "class_method_signature": "AWSClient.getS3FormattedTimestamp(Date date)", "testcase": false, "constructor": false}, {"identifier": "getQueryString", "parameters": "(Map<String,String> params)", "modifiers": "private", "return": "String", "signature": "String getQueryString(Map<String,String> params)", "full_signature": "private String getQueryString(Map<String,String> params)", "class_method_signature": "AWSClient.getQueryString(Map<String,String> params)", "testcase": false, "constructor": false}, {"identifier": "calculateSignature", "parameters": "(String rawUrl, String key, Map<String,String> params)", "modifiers": "private", "return": "String", "signature": "String calculateSignature(String rawUrl, String key, Map<String,String> params)", "full_signature": "private String calculateSignature(String rawUrl, String key, Map<String,String> params)", "class_method_signature": "AWSClient.calculateSignature(String rawUrl, String key, Map<String,String> params)", "testcase": false, "constructor": false}, {"identifier": "calculateS3Signature", "parameters": "(String rawUrl, String key, String date)", "modifiers": "private", "return": "String", "signature": "String calculateS3Signature(String rawUrl, String key, String date)", "full_signature": "private String calculateS3Signature(String rawUrl, String key, String date)", "class_method_signature": "AWSClient.calculateS3Signature(String rawUrl, String key, String date)", "testcase": false, "constructor": false}, {"identifier": "urlEncode", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String urlEncode(String value)", "full_signature": "private String urlEncode(String value)", "class_method_signature": "AWSClient.urlEncode(String value)", "testcase": false, "constructor": false}, {"identifier": "getRegionName", "parameters": "(String regionId)", "modifiers": "public static", "return": "String", "signature": "String getRegionName(String regionId)", "full_signature": "public static String getRegionName(String regionId)", "class_method_signature": "AWSClient.getRegionName(String regionId)", "testcase": false, "constructor": false}, {"identifier": "getRegionIso3166Code", "parameters": "(String regionId)", "modifiers": "public static", "return": "String", "signature": "String getRegionIso3166Code(String regionId)", "full_signature": "public static String getRegionIso3166Code(String regionId)", "class_method_signature": "AWSClient.getRegionIso3166Code(String regionId)", "testcase": false, "constructor": false}, {"identifier": "getHardwareName", "parameters": "(String hardwareId)", "modifiers": "public static", "return": "String", "signature": "String getHardwareName(String hardwareId)", "full_signature": "public static String getHardwareName(String hardwareId)", "class_method_signature": "AWSClient.getHardwareName(String hardwareId)", "testcase": false, "constructor": false}, {"identifier": "validateConnection", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void validateConnection()", "full_signature": "@Override public void validateConnection()", "class_method_signature": "AWSClient.validateConnection()", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanUp()", "full_signature": "@Override public void cleanUp()", "class_method_signature": "AWSClient.cleanUp()", "testcase": false, "constructor": false}, {"identifier": "getComputeServiceContext", "parameters": "()", "modifiers": "public", "return": "ComputeServiceContext", "signature": "ComputeServiceContext getComputeServiceContext()", "full_signature": "public ComputeServiceContext getComputeServiceContext()", "class_method_signature": "AWSClient.getComputeServiceContext()", "testcase": false, "constructor": false}, {"identifier": "getBlobStoreContext", "parameters": "()", "modifiers": "public", "return": "BlobStoreContext", "signature": "BlobStoreContext getBlobStoreContext()", "full_signature": "public BlobStoreContext getBlobStoreContext()", "class_method_signature": "AWSClient.getBlobStoreContext()", "testcase": false, "constructor": false}, {"identifier": "getCloudWatchServiceContext", "parameters": "()", "modifiers": "public", "return": "RestContext<CloudWatchApi, CloudWatchAsyncApi>", "signature": "RestContext<CloudWatchApi, CloudWatchAsyncApi> getCloudWatchServiceContext()", "full_signature": "public RestContext<CloudWatchApi, CloudWatchAsyncApi> getCloudWatchServiceContext()", "class_method_signature": "AWSClient.getCloudWatchServiceContext()", "testcase": false, "constructor": false}, {"identifier": "createBucket", "parameters": "(OutboundConfiguration outboundConfiguration)", "modifiers": "public", "return": "String", "signature": "String createBucket(OutboundConfiguration outboundConfiguration)", "full_signature": "public String createBucket(OutboundConfiguration outboundConfiguration)", "class_method_signature": "AWSClient.createBucket(OutboundConfiguration outboundConfiguration)", "testcase": false, "constructor": false}, {"identifier": "pushToS3", "parameters": "(OutboundConfiguration outboundConfiguration, String payloadIdentifier, byte[] payload)", "modifiers": "public", "return": "String", "signature": "String pushToS3(OutboundConfiguration outboundConfiguration, String payloadIdentifier, byte[] payload)", "full_signature": "public String pushToS3(OutboundConfiguration outboundConfiguration, String payloadIdentifier, byte[] payload)", "class_method_signature": "AWSClient.pushToS3(OutboundConfiguration outboundConfiguration, String payloadIdentifier, byte[] payload)", "testcase": false, "constructor": false}, {"identifier": "convertOutboundConnectionToBucketName", "parameters": "(OutboundConfiguration outboundConfiguration)", "modifiers": "", "return": "String", "signature": "String convertOutboundConnectionToBucketName(OutboundConfiguration outboundConfiguration)", "full_signature": " String convertOutboundConnectionToBucketName(OutboundConfiguration outboundConfiguration)", "class_method_signature": "AWSClient.convertOutboundConnectionToBucketName(OutboundConfiguration outboundConfiguration)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/streamreduce/util/AWSClient.java"}, "focal_method": {"identifier": "convertOutboundConnectionToBucketName", "parameters": "(OutboundConfiguration outboundConfiguration)", "modifiers": "", "return": "String", "body": "String convertOutboundConnectionToBucketName(OutboundConfiguration outboundConfiguration) {\n        if (StringUtils.hasText(outboundConfiguration.getNamespace())) {\n            return outboundConfiguration.getNamespace().toLowerCase();\n        } else {\n            return BUCKET_PREFIX + \".\" +\n                    outboundConfiguration.getOriginatingConnection().getAccount().getId().toString().toLowerCase();\n        }\n    }", "signature": "String convertOutboundConnectionToBucketName(OutboundConfiguration outboundConfiguration)", "full_signature": " String convertOutboundConnectionToBucketName(OutboundConfiguration outboundConfiguration)", "class_method_signature": "AWSClient.convertOutboundConnectionToBucketName(OutboundConfiguration outboundConfiguration)", "testcase": false, "constructor": false, "invocations": ["hasText", "getNamespace", "toLowerCase", "getNamespace", "toLowerCase", "toString", "getId", "getAccount", "getOriginatingConnection"]}, "repository": {"repo_id": 6281707, "url": "https://github.com/StreamReduce/streamreduce-core", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 21, "size": 2334, "license": "licensed"}}