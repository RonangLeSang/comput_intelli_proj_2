{"test_class": {"identifier": "MWLQueryServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final QueryParam queryParam = ParamFactory.createQueryParam();", "modifier": "private final", "type": "QueryParam", "declarator": "queryParam = ParamFactory.createQueryParam()", "var_name": "queryParam"}, {"original_string": "private MWLQueryService queryService;", "modifier": "private", "type": "MWLQueryService", "declarator": "queryService", "var_name": "queryService"}], "file": "dcm4chee-arc-service/src/test/java/org/dcm4chee/archive/mwl/dao/MWLQueryServiceTest.java"}, "test_case": {"identifier": "testByScheduledProcedureID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testByScheduledProcedureID() throws Exception {\n        queryService.findScheduledProcedureSteps(\n                null,\n                sps(Tag.ScheduledProcedureStepID, VR.SH, \"9934.2\"),\n                queryParam);\n        assertArrayEquals(new String[] { \"9934.2\" }, spsids(queryService));\n    }", "signature": "void testByScheduledProcedureID()", "full_signature": "@Test public void testByScheduledProcedureID()", "class_method_signature": "MWLQueryServiceTest.testByScheduledProcedureID()", "testcase": true, "constructor": false, "invocations": ["findScheduledProcedureSteps", "sps", "assertArrayEquals", "spsids"]}, "focal_class": {"identifier": "MWLQueryService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataSource dataSource;", "modifier": "private", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "@PersistenceUnit\n    private EntityManagerFactory emf;", "modifier": "@PersistenceUnit\n    private", "type": "EntityManagerFactory", "declarator": "emf", "var_name": "emf"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private StatelessSession session;", "modifier": "private", "type": "StatelessSession", "declarator": "session", "var_name": "session"}, {"original_string": "private ScrollableResults results;", "modifier": "private", "type": "ScrollableResults", "declarator": "results", "var_name": "results"}, {"original_string": "private boolean optionalKeyNotSupported;", "modifier": "private", "type": "boolean", "declarator": "optionalKeyNotSupported", "var_name": "optionalKeyNotSupported"}, {"original_string": "private boolean hasNext;", "modifier": "private", "type": "boolean", "declarator": "hasNext", "var_name": "hasNext"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct protected void init()", "class_method_signature": "MWLQueryService.init()", "testcase": false, "constructor": false}, {"identifier": "findScheduledProcedureSteps", "parameters": "(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam)", "modifiers": "public", "return": "void", "signature": "void findScheduledProcedureSteps(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam)", "full_signature": "public void findScheduledProcedureSteps(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam)", "class_method_signature": "MWLQueryService.findScheduledProcedureSteps(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam)", "testcase": false, "constructor": false}, {"identifier": "optionalKeyNotSupported", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean optionalKeyNotSupported()", "full_signature": "public boolean optionalKeyNotSupported()", "class_method_signature": "MWLQueryService.optionalKeyNotSupported()", "testcase": false, "constructor": false}, {"identifier": "hasMoreMatches", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasMoreMatches()", "full_signature": "public boolean hasMoreMatches()", "class_method_signature": "MWLQueryService.hasMoreMatches()", "testcase": false, "constructor": false}, {"identifier": "nextMatch", "parameters": "()", "modifiers": "public", "return": "Attributes", "signature": "Attributes nextMatch()", "full_signature": "public Attributes nextMatch()", "class_method_signature": "MWLQueryService.nextMatch()", "testcase": false, "constructor": false}, {"identifier": "toAttributes", "parameters": "(ScrollableResults results2)", "modifiers": "private", "return": "Attributes", "signature": "Attributes toAttributes(ScrollableResults results2)", "full_signature": "private Attributes toAttributes(ScrollableResults results2)", "class_method_signature": "MWLQueryService.toAttributes(ScrollableResults results2)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Remove public", "return": "void", "signature": "void close()", "full_signature": "@Remove public void close()", "class_method_signature": "MWLQueryService.close()", "testcase": false, "constructor": false}, {"identifier": "checkResults", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkResults()", "full_signature": "private void checkResults()", "class_method_signature": "MWLQueryService.checkResults()", "testcase": false, "constructor": false}], "file": "dcm4chee-arc-service/src/main/java/org/dcm4chee/archive/mwl/dao/MWLQueryService.java"}, "focal_method": {"identifier": "findScheduledProcedureSteps", "parameters": "(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam)", "modifiers": "public", "return": "void", "body": "public void findScheduledProcedureSteps(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam) {\n        if (results != null)\n            results.close();\n        BooleanBuilder builder = new BooleanBuilder();\n        Builder.addPatientLevelPredicates(builder, pids, keys, queryParam);\n        Builder.addServiceRequestPredicates(builder, keys, queryParam);\n        Builder.addRequestedProcedurePredicates(builder, keys, queryParam);\n        Attributes spsItem = keys.getNestedDataset(Tag.ScheduledProcedureStepSequence);\n        Builder.addScheduledProcedureStepPredicates(builder, spsItem, queryParam);\n        results = new HibernateQuery(session)\n            .from(QScheduledProcedureStep.scheduledProcedureStep)\n            .innerJoin(QScheduledProcedureStep.scheduledProcedureStep.requestedProcedure,\n                    QRequestedProcedure.requestedProcedure)\n            .innerJoin(QRequestedProcedure.requestedProcedure.serviceRequest,\n                    QServiceRequest.serviceRequest)\n            .innerJoin(QServiceRequest.serviceRequest.visit, QVisit.visit)\n            .innerJoin(QVisit.visit.patient, QPatient.patient)\n            .where(builder)\n            .scroll(ScrollMode.FORWARD_ONLY,\n                    QScheduledProcedureStep.scheduledProcedureStep.encodedAttributes,\n                    QRequestedProcedure.requestedProcedure.encodedAttributes,\n                    QServiceRequest.serviceRequest.encodedAttributes,\n                    QVisit.visit.encodedAttributes,\n                    QPatient.patient.encodedAttributes);\n        hasNext = results.next();\n    }", "signature": "void findScheduledProcedureSteps(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam)", "full_signature": "public void findScheduledProcedureSteps(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam)", "class_method_signature": "MWLQueryService.findScheduledProcedureSteps(IDWithIssuer[] pids, Attributes keys,\n            QueryParam queryParam)", "testcase": false, "constructor": false, "invocations": ["close", "addPatientLevelPredicates", "addServiceRequestPredicates", "addRequestedProcedurePredicates", "getNestedDataset", "addScheduledProcedureStepPredicates", "scroll", "where", "innerJoin", "innerJoin", "innerJoin", "innerJoin", "from", "next"]}, "repository": {"repo_id": 5203853, "url": "https://github.com/gunterze/dcm4chee-arc", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 2145, "license": "licensed"}}