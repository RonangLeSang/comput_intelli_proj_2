{"test_class": {"identifier": "PaaSOfferingDiscoveryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private PaaSInstance paaSInstance;", "modifier": "private", "type": "PaaSInstance", "declarator": "paaSInstance", "var_name": "paaSInstance"}, {"original_string": "private PaaSUserInstance userInstance;", "modifier": "private", "type": "PaaSUserInstance", "declarator": "userInstance", "var_name": "userInstance"}, {"original_string": "private String userInstanceId;", "modifier": "private", "type": "String", "declarator": "userInstanceId", "var_name": "userInstanceId"}, {"original_string": "@Autowired\n    private UserManagementAndSecurityModule userManagementAndSecurityModule;", "modifier": "@Autowired\n    private", "type": "UserManagementAndSecurityModule", "declarator": "userManagementAndSecurityModule", "var_name": "userManagementAndSecurityModule"}, {"original_string": "@Autowired\n    private AnnouncementModule announcementModule;", "modifier": "@Autowired\n    private", "type": "AnnouncementModule", "declarator": "announcementModule", "var_name": "announcementModule"}, {"original_string": "@Autowired\n    private PaaSOfferingDiscovery paaSOfferingDiscovery;", "modifier": "@Autowired\n    private", "type": "PaaSOfferingDiscovery", "declarator": "paaSOfferingDiscovery", "var_name": "paaSOfferingDiscovery"}, {"original_string": "@Autowired \n    private ModelManager modelManager;", "modifier": "@Autowired \n    private", "type": "ModelManager", "declarator": "modelManager", "var_name": "modelManager"}, {"original_string": "@Autowired\n    private SemanticInitializer semanticInitializer;", "modifier": "@Autowired\n    private", "type": "SemanticInitializer", "declarator": "semanticInitializer", "var_name": "semanticInitializer"}, {"original_string": "@Autowired\n    private PaaSOfferingProfilesRepository paaSOfferingProfilesRepository;", "modifier": "@Autowired\n    private", "type": "PaaSOfferingProfilesRepository", "declarator": "paaSOfferingProfilesRepository", "var_name": "paaSOfferingProfilesRepository"}, {"original_string": "@Autowired\n    private RepositoryManager repositoryManager;", "modifier": "@Autowired\n    private", "type": "RepositoryManager", "declarator": "repositoryManager", "var_name": "repositoryManager"}], "file": "soa/trunk/soa-commons/src/test/java/eu/cloud4soa/soa/PaaSOfferingDiscoveryTest.java"}, "test_case": {"identifier": "TestSearchForMatchingPlatform_Compute_WithEqRules", "parameters": "()", "modifiers": "@Ignore @Test // @DirtiesContext public", "return": "void", "body": "@Ignore \n    @Test\n//    @DirtiesContext\n    public void TestSearchForMatchingPlatform_Compute_WithEqRules() {\n        String appUriId = \"AppComputePowerFactor.AppComputePowerFactor\";\n        try {\n            semanticInitializer.initialize();\n            MatchingPlatform searchForMatchingPlatform = paaSOfferingDiscovery.searchForMatchingPlatform(appUriId);\n            List<PaaSInstance> listPaaSInstance = searchForMatchingPlatform.getListPaaSInstance();\n            Assert.assertTrue(!listPaaSInstance.isEmpty());\n            int numberOfMatchingPlatforms = listPaaSInstance.size();\n            Assert.assertEquals(\"The number Of Matching Platforms is not the expected one!\", 2, numberOfMatchingPlatforms);\n            //Adding an equivalence rule ECU = 1 Clone\n            EquivalenceRuleHWCategoryInstance erhc = new EquivalenceRuleHWCategoryInstance();\n            erhc.setHasSource(\"ECU\");\n            erhc.setHasTarget(\"Clone\");\n            erhc.setHasConversionRate(0.5f);\n            modelManager.addEquivalenceRule(erhc);\n            //Checking the new marching platforms list\n            searchForMatchingPlatform = paaSOfferingDiscovery.searchForMatchingPlatform(appUriId);\n            listPaaSInstance = searchForMatchingPlatform.getListPaaSInstance();\n            Assert.assertTrue(!listPaaSInstance.isEmpty());\n            numberOfMatchingPlatforms = listPaaSInstance.size();\n            Assert.assertEquals(\"The number Of Matching Platforms is not the expected one!\", 3, numberOfMatchingPlatforms);\n            //Adding an equivalence rule Clone = 1 AppCell\n            erhc = new EquivalenceRuleHWCategoryInstance();\n            erhc.setHasSource(\"Clone\");\n            erhc.setHasTarget(\"AppCell\");\n            erhc.setHasConversionRate(1f);\n            modelManager.addEquivalenceRule(erhc);\n            //Checking the new marching platforms list\n            searchForMatchingPlatform = paaSOfferingDiscovery.searchForMatchingPlatform(appUriId);\n            listPaaSInstance = searchForMatchingPlatform.getListPaaSInstance();\n            Assert.assertTrue(!listPaaSInstance.isEmpty());\n            numberOfMatchingPlatforms = listPaaSInstance.size();\n            Assert.assertEquals(\"The number Of Matching Platforms is not the expected one!\", 4, numberOfMatchingPlatforms);\n//            Assert.assertEquals(\"The number Of Matching Platforms is not the expected one!\", 3, numberOfMatchingPlatforms);\n        } catch (SOAException ex) {\n            logger.error(ex.getMessage());\n            Assert.fail(\"Repository initialization failed: \" + ex.getMessage());\n        }\n    }", "signature": "void TestSearchForMatchingPlatform_Compute_WithEqRules()", "full_signature": "@Ignore @Test // @DirtiesContext public void TestSearchForMatchingPlatform_Compute_WithEqRules()", "class_method_signature": "PaaSOfferingDiscoveryTest.TestSearchForMatchingPlatform_Compute_WithEqRules()", "testcase": true, "constructor": false, "invocations": ["initialize", "searchForMatchingPlatform", "getListPaaSInstance", "assertTrue", "isEmpty", "size", "assertEquals", "setHasSource", "setHasTarget", "setHasConversionRate", "addEquivalenceRule", "searchForMatchingPlatform", "getListPaaSInstance", "assertTrue", "isEmpty", "size", "assertEquals", "setHasSource", "setHasTarget", "setHasConversionRate", "addEquivalenceRule", "searchForMatchingPlatform", "getListPaaSInstance", "assertTrue", "isEmpty", "size", "assertEquals", "error", "getMessage", "fail", "getMessage"]}, "focal_class": {"identifier": "PaaSOfferingDiscovery", "superclass": "", "interfaces": "implements eu.cloud4soa.api.soa.PaaSOfferingDiscovery", "fields": [{"original_string": "final Logger logger = LoggerFactory.getLogger(PaaSOfferingDiscovery.class);", "modifier": "final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PaaSOfferingDiscovery.class)", "var_name": "logger"}, {"original_string": "private SearchAndDiscoveryInterfaces searchAndDiscoveryInterfaces;", "modifier": "private", "type": "SearchAndDiscoveryInterfaces", "declarator": "searchAndDiscoveryInterfaces", "var_name": "searchAndDiscoveryInterfaces"}, {"original_string": "eu.cloud4soa.api.datamodel.core.ApplicationInstance coreInstance;", "modifier": "", "type": "eu.cloud4soa.api.datamodel.core.ApplicationInstance", "declarator": "coreInstance", "var_name": "coreInstance"}, {"original_string": "private SLAModule slamodule;", "modifier": "private", "type": "SLAModule", "declarator": "slamodule", "var_name": "slamodule"}, {"original_string": "MatchingPlatform negotiatedSearchResults;", "modifier": "", "type": "MatchingPlatform", "declarator": "negotiatedSearchResults", "var_name": "negotiatedSearchResults"}, {"original_string": "private PaaSOfferingProfilesRepository paaSOfferingProfilesRepository;", "modifier": "private", "type": "PaaSOfferingProfilesRepository", "declarator": "paaSOfferingProfilesRepository", "var_name": "paaSOfferingProfilesRepository"}, {"original_string": "private ApplicationProfilesRepository applicationProfilesRepository;", "modifier": "private", "type": "ApplicationProfilesRepository", "declarator": "applicationProfilesRepository", "var_name": "applicationProfilesRepository"}], "methods": [{"identifier": "setPaaSOfferingProfilesRepository", "parameters": "(PaaSOfferingProfilesRepository paaSOfferingProfilesRepository)", "modifiers": "@Required public", "return": "void", "signature": "void setPaaSOfferingProfilesRepository(PaaSOfferingProfilesRepository paaSOfferingProfilesRepository)", "full_signature": "@Required public void setPaaSOfferingProfilesRepository(PaaSOfferingProfilesRepository paaSOfferingProfilesRepository)", "class_method_signature": "PaaSOfferingDiscovery.setPaaSOfferingProfilesRepository(PaaSOfferingProfilesRepository paaSOfferingProfilesRepository)", "testcase": false, "constructor": false}, {"identifier": "setApplicationProfilesRepository", "parameters": "(ApplicationProfilesRepository applicationProfilesRepository)", "modifiers": "@Required public", "return": "void", "signature": "void setApplicationProfilesRepository(ApplicationProfilesRepository applicationProfilesRepository)", "full_signature": "@Required public void setApplicationProfilesRepository(ApplicationProfilesRepository applicationProfilesRepository)", "class_method_signature": "PaaSOfferingDiscovery.setApplicationProfilesRepository(ApplicationProfilesRepository applicationProfilesRepository)", "testcase": false, "constructor": false}, {"identifier": "setSearchAndDiscoveryInterfaces", "parameters": "(SearchAndDiscoveryInterfaces searchAndDiscoveryInterfaces)", "modifiers": "@Required public", "return": "void", "signature": "void setSearchAndDiscoveryInterfaces(SearchAndDiscoveryInterfaces searchAndDiscoveryInterfaces)", "full_signature": "@Required public void setSearchAndDiscoveryInterfaces(SearchAndDiscoveryInterfaces searchAndDiscoveryInterfaces)", "class_method_signature": "PaaSOfferingDiscovery.setSearchAndDiscoveryInterfaces(SearchAndDiscoveryInterfaces searchAndDiscoveryInterfaces)", "testcase": false, "constructor": false}, {"identifier": "setSlaModule", "parameters": "(SLAModule slamodule)", "modifiers": "public", "return": "void", "signature": "void setSlaModule(SLAModule slamodule)", "full_signature": "public void setSlaModule(SLAModule slamodule)", "class_method_signature": "PaaSOfferingDiscovery.setSlaModule(SLAModule slamodule)", "testcase": false, "constructor": false}, {"identifier": "searchForMatchingPlatform", "parameters": "(String applicationInstanceUriId)", "modifiers": "@Override public", "return": "MatchingPlatform", "signature": "MatchingPlatform searchForMatchingPlatform(String applicationInstanceUriId)", "full_signature": "@Override public MatchingPlatform searchForMatchingPlatform(String applicationInstanceUriId)", "class_method_signature": "PaaSOfferingDiscovery.searchForMatchingPlatform(String applicationInstanceUriId)", "testcase": false, "constructor": false}, {"identifier": "searchForPaaS", "parameters": "(String paaSInstanceUriId)", "modifiers": "@Override public", "return": "PaaSInstance", "signature": "PaaSInstance searchForPaaS(String paaSInstanceUriId)", "full_signature": "@Override public PaaSInstance searchForPaaS(String paaSInstanceUriId)", "class_method_signature": "PaaSOfferingDiscovery.searchForPaaS(String paaSInstanceUriId)", "testcase": false, "constructor": false}, {"identifier": "getPaaSProviderDetails", "parameters": "(String paaSInstanceUriId)", "modifiers": "@Override public", "return": "PaaSProviderDetails", "signature": "PaaSProviderDetails getPaaSProviderDetails(String paaSInstanceUriId)", "full_signature": "@Override public PaaSProviderDetails getPaaSProviderDetails(String paaSInstanceUriId)", "class_method_signature": "PaaSOfferingDiscovery.getPaaSProviderDetails(String paaSInstanceUriId)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(String sparql)", "modifiers": "@Override public", "return": "String", "signature": "String query(String sparql)", "full_signature": "@Override public String query(String sparql)", "class_method_signature": "PaaSOfferingDiscovery.query(String sparql)", "testcase": false, "constructor": false}, {"identifier": "getAllAvailablePaaSInstances", "parameters": "()", "modifiers": "@Override public", "return": "List<PaaSInstance>", "signature": "List<PaaSInstance> getAllAvailablePaaSInstances()", "full_signature": "@Override public List<PaaSInstance> getAllAvailablePaaSInstances()", "class_method_signature": "PaaSOfferingDiscovery.getAllAvailablePaaSInstances()", "testcase": false, "constructor": false}], "file": "soa/trunk/soa-commons/src/main/java/eu/cloud4soa/soa/PaaSOfferingDiscovery.java"}, "focal_method": {"identifier": "searchForMatchingPlatform", "parameters": "(String applicationInstanceUriId)", "modifiers": "@Override public", "return": "MatchingPlatform", "body": "@Override\n    public MatchingPlatform searchForMatchingPlatform(String applicationInstanceUriId) throws SOAException {\n        logger.debug(\"received applicationInstanceUriId: \" + applicationInstanceUriId);\n\n        logger.debug(\"call applicationProfilesRepository.getApplicationInstance(applicationInstanceUriId)\");\n\n        ApplicationInstance applicationInstance;\n        try {\n            applicationInstance = applicationProfilesRepository.getApplicationInstance(applicationInstanceUriId);\n        } catch (RepositoryException ex) {\n            throw new SOAException(Response.Status.INTERNAL_SERVER_ERROR, ex.getMessage());\n        }\n\n        logger.debug(\"retrived applicationInstance: \" + applicationInstance);\n\n        Map<PaaSInstance,Float> searchResultList = searchAndDiscoveryInterfaces.searchForMatchingPlatform(applicationInstance);\n\n        Map<PaaSInstance,SlaTemplate> slatemplates = new HashMap<PaaSInstance,SlaTemplate>();\n\n        Iterator<PaaSInstance> iterator = searchResultList.keySet().iterator();\n\n        while (iterator.hasNext()) {\n            PaaSInstance paasInstance = iterator.next();\n            SlaTemplate slaTemplate = slamodule.startNegotiation(applicationInstance, paasInstance);\n            slatemplates.put(paasInstance, slaTemplate);\n        }\n\n        //To instantiate        \n        MatchingPlatform negotiatedSearchResults = new MatchingPlatform();\n        negotiatedSearchResults.setRankedListPaaSInstances(searchResultList);\n        //negotiatedSearchResults.setListSlaContract(slatemplates);\n        negotiatedSearchResults.setListSlaTemplates(slatemplates);\n\n        return negotiatedSearchResults;\n    }", "signature": "MatchingPlatform searchForMatchingPlatform(String applicationInstanceUriId)", "full_signature": "@Override public MatchingPlatform searchForMatchingPlatform(String applicationInstanceUriId)", "class_method_signature": "PaaSOfferingDiscovery.searchForMatchingPlatform(String applicationInstanceUriId)", "testcase": false, "constructor": false, "invocations": ["debug", "debug", "getApplicationInstance", "getMessage", "debug", "searchForMatchingPlatform", "iterator", "keySet", "hasNext", "next", "startNegotiation", "put", "setRankedListPaaSInstances", "setListSlaTemplates"]}, "repository": {"repo_id": 11971122, "url": "https://github.com/Cloud4SOA/Cloud4SOA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 5, "size": 63952, "license": "licensed"}}