{"test_class": {"identifier": "DefaultRegisteredServiceMfaRoleProcessorImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CAS_SERVICE = \"https://mfa.cas.edu\";", "modifier": "private static final", "type": "String", "declarator": "CAS_SERVICE = \"https://mfa.cas.edu\"", "var_name": "CAS_SERVICE"}, {"original_string": "private static final String CAS_AUTHN_METHOD = \"two-factor\";", "modifier": "private static final", "type": "String", "declarator": "CAS_AUTHN_METHOD = \"two-factor\"", "var_name": "CAS_AUTHN_METHOD"}, {"original_string": "public static final String MEMBER_OF = \"memberOf\";", "modifier": "public static final", "type": "String", "declarator": "MEMBER_OF = \"memberOf\"", "var_name": "MEMBER_OF"}, {"original_string": "public static final String MEMBER_OF_VALUE = \"cn=test\";", "modifier": "public static final", "type": "String", "declarator": "MEMBER_OF_VALUE = \"cn=test\"", "var_name": "MEMBER_OF_VALUE"}], "file": "cas-mfa-java/src/test/java/net/unicon/cas/mfa/authentication/DefaultRegisteredServiceMfaRoleProcessorImplTest.java"}, "test_case": {"identifier": "testResolveWithoutAnyServiceMfaAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveWithoutAnyServiceMfaAttributes() throws Exception {\n        final WebApplicationService was = getTargetService();\n        final Authentication auth = getAuthentication(true);\n\n        final RegisteredService rswa = TestUtils.getRegisteredService(\"test1\");\n        final DefaultRegisteredServiceMfaRoleProcessorImpl resolver = new DefaultRegisteredServiceMfaRoleProcessorImpl(\n            getMFWASF(was), getAMCP(), getServicesManager(rswa));\n\n        final List<MultiFactorAuthenticationRequestContext> result = resolver.resolve(auth, was);\n        assertNotNull(result);\n        assertEquals(0, result.size());\n    }", "signature": "void testResolveWithoutAnyServiceMfaAttributes()", "full_signature": "@Test public void testResolveWithoutAnyServiceMfaAttributes()", "class_method_signature": "DefaultRegisteredServiceMfaRoleProcessorImplTest.testResolveWithoutAnyServiceMfaAttributes()", "testcase": true, "constructor": false, "invocations": ["getTargetService", "getAuthentication", "getRegisteredService", "getMFWASF", "getAMCP", "getServicesManager", "resolve", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "DefaultRegisteredServiceMfaRoleProcessorImpl", "superclass": "", "interfaces": "implements RegisteredServiceMfaRoleProcessor", "fields": [{"original_string": "protected final Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private final MultiFactorWebApplicationServiceFactory mfaServiceFactory;", "modifier": "private final", "type": "MultiFactorWebApplicationServiceFactory", "declarator": "mfaServiceFactory", "var_name": "mfaServiceFactory"}, {"original_string": "private final AuthenticationMethodConfigurationProvider authenticationMethodConfiguration;", "modifier": "private final", "type": "AuthenticationMethodConfigurationProvider", "declarator": "authenticationMethodConfiguration", "var_name": "authenticationMethodConfiguration"}, {"original_string": "private final Map<String, Pattern> patternCache;", "modifier": "private final", "type": "Map<String, Pattern>", "declarator": "patternCache", "var_name": "patternCache"}, {"original_string": "private final Object cacheLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "cacheLock = new Object()", "var_name": "cacheLock"}, {"original_string": "private final ServicesManager servicesManager;", "modifier": "private final", "type": "ServicesManager", "declarator": "servicesManager", "var_name": "servicesManager"}], "methods": [{"identifier": "DefaultRegisteredServiceMfaRoleProcessorImpl", "parameters": "(\n            final MultiFactorWebApplicationServiceFactory mfaServiceFactory,\n            final AuthenticationMethodConfigurationProvider authenticationMethodConfiguration,\n            final ServicesManager servicesManager)", "modifiers": "public", "return": "", "signature": " DefaultRegisteredServiceMfaRoleProcessorImpl(\n            final MultiFactorWebApplicationServiceFactory mfaServiceFactory,\n            final AuthenticationMethodConfigurationProvider authenticationMethodConfiguration,\n            final ServicesManager servicesManager)", "full_signature": "public  DefaultRegisteredServiceMfaRoleProcessorImpl(\n            final MultiFactorWebApplicationServiceFactory mfaServiceFactory,\n            final AuthenticationMethodConfigurationProvider authenticationMethodConfiguration,\n            final ServicesManager servicesManager)", "class_method_signature": "DefaultRegisteredServiceMfaRoleProcessorImpl.DefaultRegisteredServiceMfaRoleProcessorImpl(\n            final MultiFactorWebApplicationServiceFactory mfaServiceFactory,\n            final AuthenticationMethodConfigurationProvider authenticationMethodConfiguration,\n            final ServicesManager servicesManager)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService)", "modifiers": "public", "return": "List<MultiFactorAuthenticationRequestContext>", "signature": "List<MultiFactorAuthenticationRequestContext> resolve(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService)", "full_signature": "public List<MultiFactorAuthenticationRequestContext> resolve(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService)", "class_method_signature": "DefaultRegisteredServiceMfaRoleProcessorImpl.resolve(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService)", "testcase": false, "constructor": false}, {"identifier": "getMfaRequestContext", "parameters": "(final ServiceMfaData serviceMfaData,\n                                                                         final String attributeValue,\n                                                                         final WebApplicationService targetService)", "modifiers": "private", "return": "MultiFactorAuthenticationRequestContext", "signature": "MultiFactorAuthenticationRequestContext getMfaRequestContext(final ServiceMfaData serviceMfaData,\n                                                                         final String attributeValue,\n                                                                         final WebApplicationService targetService)", "full_signature": "private MultiFactorAuthenticationRequestContext getMfaRequestContext(final ServiceMfaData serviceMfaData,\n                                                                         final String attributeValue,\n                                                                         final WebApplicationService targetService)", "class_method_signature": "DefaultRegisteredServiceMfaRoleProcessorImpl.getMfaRequestContext(final ServiceMfaData serviceMfaData,\n                                                                         final String attributeValue,\n                                                                         final WebApplicationService targetService)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(final String attributePattern, final String attributeValue)", "modifiers": "private", "return": "boolean", "signature": "boolean match(final String attributePattern, final String attributeValue)", "full_signature": "private boolean match(final String attributePattern, final String attributeValue)", "class_method_signature": "DefaultRegisteredServiceMfaRoleProcessorImpl.match(final String attributePattern, final String attributeValue)", "testcase": false, "constructor": false}, {"identifier": "getServicesAuthenticationData", "parameters": "(final WebApplicationService targetService)", "modifiers": "private", "return": "ServiceMfaData", "signature": "ServiceMfaData getServicesAuthenticationData(final WebApplicationService targetService)", "full_signature": "private ServiceMfaData getServicesAuthenticationData(final WebApplicationService targetService)", "class_method_signature": "DefaultRegisteredServiceMfaRoleProcessorImpl.getServicesAuthenticationData(final WebApplicationService targetService)", "testcase": false, "constructor": false}], "file": "cas-mfa-java/src/main/java/net/unicon/cas/mfa/authentication/DefaultRegisteredServiceMfaRoleProcessorImpl.java"}, "focal_method": {"identifier": "resolve", "parameters": "(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService)", "modifiers": "public", "return": "List<MultiFactorAuthenticationRequestContext>", "body": "public List<MultiFactorAuthenticationRequestContext> resolve(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService) {\n\n        String authenticationMethodAttributeName = null;\n        final List<MultiFactorAuthenticationRequestContext> list = new ArrayList<>();\n        if (authentication != null && targetService != null) {\n            final ServiceMfaData serviceMfaData = getServicesAuthenticationData(targetService);\n\n            if (serviceMfaData == null || !serviceMfaData.isValid()) {\n                logger.debug(\"No specific mfa role service attributes found\");\n                return list;\n            }\n\n            logger.debug(\"Found MFA Role: {}\", serviceMfaData);\n\n            authenticationMethodAttributeName = serviceMfaData.attributeName;\n\n            final Object mfaAttributeValueAsObject = authentication.getPrincipal().getAttributes().get(serviceMfaData.attributeName);\n            if (mfaAttributeValueAsObject != null) {\n                if (mfaAttributeValueAsObject instanceof String) {\n                    final String mfaAttributeValue = mfaAttributeValueAsObject.toString();\n                    final MultiFactorAuthenticationRequestContext ctx = getMfaRequestContext(\n                            serviceMfaData, mfaAttributeValue, targetService);\n                    if (ctx != null) {\n                        list.add(ctx);\n                    }\n                } else if (mfaAttributeValueAsObject instanceof List) {\n                    final List<String> mfaAttributeValues = (List<String>) mfaAttributeValueAsObject;\n                    for (final String mfaAttributeValue : mfaAttributeValues) {\n                        final MultiFactorAuthenticationRequestContext ctx = getMfaRequestContext(\n                                serviceMfaData, mfaAttributeValue, targetService);\n                        if (ctx != null) {\n                            list.add(ctx);\n                        }\n                    }\n                } else if (mfaAttributeValueAsObject instanceof Collection) {\n                    final Collection mfaAttributeValues = (Collection) mfaAttributeValueAsObject;\n                    for (final Object mfaAttributeValue : mfaAttributeValues) {\n                        final MultiFactorAuthenticationRequestContext ctx = getMfaRequestContext(\n                                serviceMfaData, String.valueOf(mfaAttributeValue), targetService);\n                        if (ctx != null) {\n                            list.add(ctx);\n                        }\n                    }\n                } else {\n                    logger.debug(\"No MFA attribute found.\");\n                }\n            }\n        }\n\n        if (list.isEmpty()) {\n            logger.debug(\"No multifactor authentication requests could be resolved based on [{}].\",\n                    authenticationMethodAttributeName);\n            return null;\n        }\n        return list;\n    }", "signature": "List<MultiFactorAuthenticationRequestContext> resolve(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService)", "full_signature": "public List<MultiFactorAuthenticationRequestContext> resolve(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService)", "class_method_signature": "DefaultRegisteredServiceMfaRoleProcessorImpl.resolve(@NotNull final Authentication authentication,\n                                                                 @NotNull final WebApplicationService targetService)", "testcase": false, "constructor": false, "invocations": ["getServicesAuthenticationData", "isValid", "debug", "debug", "get", "getAttributes", "getPrincipal", "toString", "getMfaRequestContext", "add", "getMfaRequestContext", "add", "getMfaRequestContext", "valueOf", "add", "debug", "isEmpty", "debug"]}, "repository": {"repo_id": 9797598, "url": "https://github.com/Unicon/cas-mfa", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 23, "size": 1423, "license": "licensed"}}