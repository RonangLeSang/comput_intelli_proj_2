{"test_class": {"identifier": "CassandraArchiveRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CassandraArchiveRepository repository;", "modifier": "private", "type": "CassandraArchiveRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private Path testArchiveJarFile;", "modifier": "private", "type": "Path", "declarator": "testArchiveJarFile", "var_name": "testArchiveJarFile"}, {"original_string": "private CassandraGateway gateway;", "modifier": "private", "type": "CassandraGateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private CassandraArchiveRepositoryConfig config;", "modifier": "private", "type": "CassandraArchiveRepositoryConfig", "declarator": "config", "var_name": "config"}], "file": "nicobar-cassandra/src/test/java/com/netflix/nicobar/cassandra/CassandraArchiveRepositoryTest.java"}, "test_case": {"identifier": "testDeleteArchive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteArchive() throws IllegalArgumentException, IOException {\n        repository.deleteArchive(ModuleId.fromString(\"testModule.v3\"));\n        verify(gateway).deleteRow(\"testModule.v3\");\n    }", "signature": "void testDeleteArchive()", "full_signature": "@Test public void testDeleteArchive()", "class_method_signature": "CassandraArchiveRepositoryTest.testDeleteArchive()", "testcase": true, "constructor": false, "invocations": ["deleteArchive", "fromString", "deleteRow", "verify"]}, "focal_class": {"identifier": "CassandraArchiveRepository", "superclass": "", "interfaces": "implements ArchiveRepository", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(CassandraArchiveRepository.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CassandraArchiveRepository.class)", "var_name": "logger"}, {"original_string": "protected final RepositoryView defaultView;", "modifier": "protected final", "type": "RepositoryView", "declarator": "defaultView", "var_name": "defaultView"}, {"original_string": "private final CassandraArchiveRepositoryConfig config;", "modifier": "private final", "type": "CassandraArchiveRepositoryConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final CassandraGateway cassandra;", "modifier": "private final", "type": "CassandraGateway", "declarator": "cassandra", "var_name": "cassandra"}], "methods": [{"identifier": "CassandraArchiveRepository", "parameters": "(CassandraArchiveRepositoryConfig config)", "modifiers": "public", "return": "", "signature": " CassandraArchiveRepository(CassandraArchiveRepositoryConfig config)", "full_signature": "public  CassandraArchiveRepository(CassandraArchiveRepositoryConfig config)", "class_method_signature": "CassandraArchiveRepository.CassandraArchiveRepository(CassandraArchiveRepositoryConfig config)", "testcase": false, "constructor": true}, {"identifier": "CassandraArchiveRepository", "parameters": "(CassandraArchiveRepositoryConfig config, RepositoryView defaultView)", "modifiers": "public", "return": "", "signature": " CassandraArchiveRepository(CassandraArchiveRepositoryConfig config, RepositoryView defaultView)", "full_signature": "public  CassandraArchiveRepository(CassandraArchiveRepositoryConfig config, RepositoryView defaultView)", "class_method_signature": "CassandraArchiveRepository.CassandraArchiveRepository(CassandraArchiveRepositoryConfig config, RepositoryView defaultView)", "testcase": false, "constructor": true}, {"identifier": "getRepositoryId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRepositoryId()", "full_signature": "@Override public String getRepositoryId()", "class_method_signature": "CassandraArchiveRepository.getRepositoryId()", "testcase": false, "constructor": false}, {"identifier": "getDefaultView", "parameters": "()", "modifiers": "@Override public", "return": "RepositoryView", "signature": "RepositoryView getDefaultView()", "full_signature": "@Override public RepositoryView getDefaultView()", "class_method_signature": "CassandraArchiveRepository.getDefaultView()", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "(String view)", "modifiers": "@Override public", "return": "RepositoryView", "signature": "RepositoryView getView(String view)", "full_signature": "@Override public RepositoryView getView(String view)", "class_method_signature": "CassandraArchiveRepository.getView(String view)", "testcase": false, "constructor": false}, {"identifier": "insertArchive", "parameters": "(JarScriptArchive jarScriptArchive)", "modifiers": "@Override public", "return": "void", "signature": "void insertArchive(JarScriptArchive jarScriptArchive)", "full_signature": "@Override public void insertArchive(JarScriptArchive jarScriptArchive)", "class_method_signature": "CassandraArchiveRepository.insertArchive(JarScriptArchive jarScriptArchive)", "testcase": false, "constructor": false}, {"identifier": "insertArchive", "parameters": "(JarScriptArchive jarScriptArchive, Map<String, Object> initialDeploySpecs)", "modifiers": "@Override public", "return": "void", "signature": "void insertArchive(JarScriptArchive jarScriptArchive, Map<String, Object> initialDeploySpecs)", "full_signature": "@Override public void insertArchive(JarScriptArchive jarScriptArchive, Map<String, Object> initialDeploySpecs)", "class_method_signature": "CassandraArchiveRepository.insertArchive(JarScriptArchive jarScriptArchive, Map<String, Object> initialDeploySpecs)", "testcase": false, "constructor": false}, {"identifier": "getScriptArchives", "parameters": "(Set<ModuleId> moduleIds)", "modifiers": "@Override public", "return": "Set<ScriptArchive>", "signature": "Set<ScriptArchive> getScriptArchives(Set<ModuleId> moduleIds)", "full_signature": "@Override public Set<ScriptArchive> getScriptArchives(Set<ModuleId> moduleIds)", "class_method_signature": "CassandraArchiveRepository.getScriptArchives(Set<ModuleId> moduleIds)", "testcase": false, "constructor": false}, {"identifier": "deleteArchive", "parameters": "(ModuleId moduleId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteArchive(ModuleId moduleId)", "full_signature": "@Override public void deleteArchive(ModuleId moduleId)", "class_method_signature": "CassandraArchiveRepository.deleteArchive(ModuleId moduleId)", "testcase": false, "constructor": false}, {"identifier": "getRows", "parameters": "(EnumSet<?> columns)", "modifiers": "protected", "return": "Iterable<Row<String, String>>", "signature": "Iterable<Row<String, String>> getRows(EnumSet<?> columns)", "full_signature": "protected Iterable<Row<String, String>> getRows(EnumSet<?> columns)", "class_method_signature": "CassandraArchiveRepository.getRows(EnumSet<?> columns)", "testcase": false, "constructor": false}, {"identifier": "generateSelectByShardCql", "parameters": "(EnumSet<?> columns, Integer shardNum)", "modifiers": "protected", "return": "String", "signature": "String generateSelectByShardCql(EnumSet<?> columns, Integer shardNum)", "full_signature": "protected String generateSelectByShardCql(EnumSet<?> columns, Integer shardNum)", "class_method_signature": "CassandraArchiveRepository.generateSelectByShardCql(EnumSet<?> columns, Integer shardNum)", "testcase": false, "constructor": false}, {"identifier": "verifyHash", "parameters": "(byte[] expectedHashCode, byte[] content)", "modifiers": "protected", "return": "boolean", "signature": "boolean verifyHash(byte[] expectedHashCode, byte[] content)", "full_signature": "protected boolean verifyHash(byte[] expectedHashCode, byte[] content)", "class_method_signature": "CassandraArchiveRepository.verifyHash(byte[] expectedHashCode, byte[] content)", "testcase": false, "constructor": false}, {"identifier": "calculateHash", "parameters": "(byte[] content)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] calculateHash(byte[] content)", "full_signature": "protected byte[] calculateHash(byte[] content)", "class_method_signature": "CassandraArchiveRepository.calculateHash(byte[] content)", "testcase": false, "constructor": false}, {"identifier": "calculateShardNum", "parameters": "(ModuleId moduleId)", "modifiers": "protected", "return": "int", "signature": "int calculateShardNum(ModuleId moduleId)", "full_signature": "protected int calculateShardNum(ModuleId moduleId)", "class_method_signature": "CassandraArchiveRepository.calculateShardNum(ModuleId moduleId)", "testcase": false, "constructor": false}, {"identifier": "getModuleSpec", "parameters": "(ColumnList<String> columns)", "modifiers": "private", "return": "ScriptModuleSpec", "signature": "ScriptModuleSpec getModuleSpec(ColumnList<String> columns)", "full_signature": "private ScriptModuleSpec getModuleSpec(ColumnList<String> columns)", "class_method_signature": "CassandraArchiveRepository.getModuleSpec(ColumnList<String> columns)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "CassandraArchiveRepositoryConfig", "signature": "CassandraArchiveRepositoryConfig getConfig()", "full_signature": "public CassandraArchiveRepositoryConfig getConfig()", "class_method_signature": "CassandraArchiveRepository.getConfig()", "testcase": false, "constructor": false}], "file": "nicobar-cassandra/src/main/java/com/netflix/nicobar/cassandra/CassandraArchiveRepository.java"}, "focal_method": {"identifier": "deleteArchive", "parameters": "(ModuleId moduleId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void deleteArchive(ModuleId moduleId) throws IOException {\n        Objects.requireNonNull(moduleId, \"moduleId\");\n        cassandra.deleteRow(moduleId.toString());\n    }", "signature": "void deleteArchive(ModuleId moduleId)", "full_signature": "@Override public void deleteArchive(ModuleId moduleId)", "class_method_signature": "CassandraArchiveRepository.deleteArchive(ModuleId moduleId)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "deleteRow", "toString"]}, "repository": {"repo_id": 11459376, "url": "https://github.com/Netflix/Nicobar", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 164, "size": 1206, "license": "licensed"}}