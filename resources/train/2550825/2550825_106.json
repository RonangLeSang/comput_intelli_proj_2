{"test_class": {"identifier": "DatabaseJDBCURIAnalyzerTest", "superclass": "extends AbstractDatabaseJDBCURIAnalyzerTest", "interfaces": "", "fields": [{"original_string": "private final DatabaseJDBCURIAnalyzer dbAnalyzer = new TestJDBCURIAnalyzer();", "modifier": "private final", "type": "DatabaseJDBCURIAnalyzer", "declarator": "dbAnalyzer = new TestJDBCURIAnalyzer()", "var_name": "dbAnalyzer"}], "file": "collection-plugins/jdbc/src/test/java/com/springsource/insight/plugin/jdbc/DatabaseJDBCURIAnalyzerTest.java"}, "test_case": {"identifier": "testLocateDatabaseURI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLocateDatabaseURI() throws Exception {\n        String jdbcUri = \"jdbc:foobar://huh:8080\";\n        String toHash = \"foobar\" + \"\" +\n                \"\" + \"huh\" + 8080;\n        Operation op = createJdbcOperation(jdbcUri);\n        Frame frame = createJdbcFrame(op);\n        Trace trace = createJdbcTrace(frame);\n\n        List<ExternalResourceDescriptor> descList =\n                (List<ExternalResourceDescriptor>) dbAnalyzer.locateExternalResourceName(trace);\n        assertEquals(\"Mismatched num of descriptors\", 1, descList.size());\n        ExternalResourceDescriptor externalResourceDescriptor = descList.get(0);\n\n        assertEquals(\"Mismatched extracted frame\", frame, externalResourceDescriptor.getFrame());\n        assertEquals(\"Mismatched resource type\", ExternalResourceType.DATABASE.name(), externalResourceDescriptor.getType());\n        assertEquals(\"Mismatched resource name\", \"foobar:1:\" + MD5NameGenerator.getName(toHash), externalResourceDescriptor.getName());\n        assertEquals(\"Mismatched incoming value\", Boolean.FALSE, Boolean.valueOf(externalResourceDescriptor.isIncoming()));\n    }", "signature": "void testLocateDatabaseURI()", "full_signature": "@Test public void testLocateDatabaseURI()", "class_method_signature": "DatabaseJDBCURIAnalyzerTest.testLocateDatabaseURI()", "testcase": true, "constructor": false, "invocations": ["createJdbcOperation", "createJdbcFrame", "createJdbcTrace", "locateExternalResourceName", "assertEquals", "size", "get", "assertEquals", "getFrame", "assertEquals", "name", "getType", "assertEquals", "getName", "getName", "assertEquals", "valueOf", "isIncoming"]}, "focal_class": {"identifier": "DatabaseJDBCURIAnalyzer", "superclass": "extends AbstractExternalResourceAnalyzer", "interfaces": "", "fields": [], "methods": [{"identifier": "DatabaseJDBCURIAnalyzer", "parameters": "(OperationType type)", "modifiers": "protected", "return": "", "signature": " DatabaseJDBCURIAnalyzer(OperationType type)", "full_signature": "protected  DatabaseJDBCURIAnalyzer(OperationType type)", "class_method_signature": "DatabaseJDBCURIAnalyzer.DatabaseJDBCURIAnalyzer(OperationType type)", "testcase": false, "constructor": true}, {"identifier": "locateExternalResourceName", "parameters": "(Trace trace, Collection<Frame> dbFrames)", "modifiers": "public", "return": "Collection<ExternalResourceDescriptor>", "signature": "Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> dbFrames)", "full_signature": "public Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> dbFrames)", "class_method_signature": "DatabaseJDBCURIAnalyzer.locateExternalResourceName(Trace trace, Collection<Frame> dbFrames)", "testcase": false, "constructor": false}, {"identifier": "extractMeaningfulNames", "parameters": "(Frame frame, String connectionString)", "modifiers": "public", "return": "List<ExternalResourceDescriptor>", "signature": "List<ExternalResourceDescriptor> extractMeaningfulNames(Frame frame, String connectionString)", "full_signature": "public List<ExternalResourceDescriptor> extractMeaningfulNames(Frame frame, String connectionString)", "class_method_signature": "DatabaseJDBCURIAnalyzer.extractMeaningfulNames(Frame frame, String connectionString)", "testcase": false, "constructor": false}, {"identifier": "getFallbackDescriptor", "parameters": "(Frame frame, String connectionString)", "modifiers": "static", "return": "List<ExternalResourceDescriptor>", "signature": "List<ExternalResourceDescriptor> getFallbackDescriptor(Frame frame, String connectionString)", "full_signature": "static List<ExternalResourceDescriptor> getFallbackDescriptor(Frame frame, String connectionString)", "class_method_signature": "DatabaseJDBCURIAnalyzer.getFallbackDescriptor(Frame frame, String connectionString)", "testcase": false, "constructor": false}, {"identifier": "getParserRecognizedDescriptors", "parameters": "(Frame frame, String connectionString)", "modifiers": "static", "return": "List<ExternalResourceDescriptor>", "signature": "List<ExternalResourceDescriptor> getParserRecognizedDescriptors(Frame frame, String connectionString)", "full_signature": "static List<ExternalResourceDescriptor> getParserRecognizedDescriptors(Frame frame, String connectionString)", "class_method_signature": "DatabaseJDBCURIAnalyzer.getParserRecognizedDescriptors(Frame frame, String connectionString)", "testcase": false, "constructor": false}, {"identifier": "extractURI", "parameters": "(String possibleURI)", "modifiers": "static", "return": "URI", "signature": "URI extractURI(String possibleURI)", "full_signature": "static URI extractURI(String possibleURI)", "class_method_signature": "DatabaseJDBCURIAnalyzer.extractURI(String possibleURI)", "testcase": false, "constructor": false}], "file": "collection-plugins/jdbc/src/main/java/com/springsource/insight/plugin/jdbc/DatabaseJDBCURIAnalyzer.java"}, "focal_method": {"identifier": "locateExternalResourceName", "parameters": "(Trace trace, Collection<Frame> dbFrames)", "modifiers": "public", "return": "Collection<ExternalResourceDescriptor>", "body": "public Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> dbFrames) {\n        if (ListUtil.size(dbFrames) <= 0) {\n            return Collections.emptyList();\n        }\n\n        List<ExternalResourceDescriptor> dbDescriptors = new ArrayList<ExternalResourceDescriptor>(dbFrames.size());\n        for (Frame dbFrame : dbFrames) {\n            Operation op = dbFrame.getOperation();\n            String uri = op.get(OperationFields.CONNECTION_URL, String.class);\n            if (StringUtil.isEmpty(uri)) {\n                continue;\n            }\n            dbDescriptors.addAll(extractMeaningfulNames(dbFrame, uri));\n        }\n\n        return dbDescriptors;\n    }", "signature": "Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> dbFrames)", "full_signature": "public Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> dbFrames)", "class_method_signature": "DatabaseJDBCURIAnalyzer.locateExternalResourceName(Trace trace, Collection<Frame> dbFrames)", "testcase": false, "constructor": false, "invocations": ["size", "emptyList", "size", "getOperation", "get", "isEmpty", "addAll", "extractMeaningfulNames"]}, "repository": {"repo_id": 2550825, "url": "https://github.com/spring-projects/spring-insight-plugins", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 55, "size": 6372, "license": "licensed"}}