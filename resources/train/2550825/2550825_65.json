{"test_class": {"identifier": "CassandraOperationFinalizerTest", "superclass": "extends AbstractCollectionTestSupport", "interfaces": "", "fields": [], "file": "collection-plugins/cassandra/src/test/java/com/springsource/insight/plugin/cassandra/CassandraOperationFinalizerTest.java"}, "test_case": {"identifier": "testCreateLabelDropIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateLabelDropIndex() {\n        assertEquals(\"CQL DROP INDEX (FUBAR)\", CassandraOperationFinalizer.createLabel(\"drop index fubar\"));\n        assertEquals(\"CQL DROP INDEX IF EXISTS (FUBAR)\", CassandraOperationFinalizer.createLabel(\"drop index if exists fubar\"));\n        assertEquals(\"CQL DROP INDEX\", CassandraOperationFinalizer.createLabel(\"drop index\"));\n    }", "signature": "void testCreateLabelDropIndex()", "full_signature": "@Test public void testCreateLabelDropIndex()", "class_method_signature": "CassandraOperationFinalizerTest.testCreateLabelDropIndex()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "createLabel", "assertEquals", "createLabel", "assertEquals", "createLabel"]}, "focal_class": {"identifier": "CassandraOperationFinalizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String KEYSPACE = \"keyspace\";", "modifier": "public static final", "type": "String", "declarator": "KEYSPACE = \"keyspace\"", "var_name": "KEYSPACE"}, {"original_string": "public static final String CLUSTER_NAME =\"clustername\";", "modifier": "public static final", "type": "String", "declarator": "CLUSTER_NAME =\"clustername\"", "var_name": "CLUSTER_NAME"}, {"original_string": "public static final String PORT = \"cassandra_port\";", "modifier": "public static final", "type": "String", "declarator": "PORT = \"cassandra_port\"", "var_name": "PORT"}, {"original_string": "public static final String HOSTS = \"cassandra_hosts\";", "modifier": "public static final", "type": "String", "declarator": "HOSTS = \"cassandra_hosts\"", "var_name": "HOSTS"}, {"original_string": "public static final String PARAMS_VALUES = \"params\";", "modifier": "public static final", "type": "String", "declarator": "PARAMS_VALUES = \"params\"", "var_name": "PARAMS_VALUES"}, {"original_string": "public static final String UNKNOWN_CQL = \"UNKNOWN\";", "modifier": "public static final", "type": "String", "declarator": "UNKNOWN_CQL = \"UNKNOWN\"", "var_name": "UNKNOWN_CQL"}, {"original_string": "static final WeakKeyHashMap<Statement, Operation> storage = new WeakKeyHashMap<Statement, Operation>();", "modifier": "static final", "type": "WeakKeyHashMap<Statement, Operation>", "declarator": "storage = new WeakKeyHashMap<Statement, Operation>()", "var_name": "storage"}, {"original_string": "private static final Collection<Keywords> stmtsList =\n            Collections.unmodifiableList(new ArrayList<Keywords>() {\n                {\n                    add(new Keywords(\"SELECT\", \" FROM \"));\n                    add(new Keywords(\"INSERT\", \" INTO \"));\n                    add(new Keywords(\"DELETE\", \" FROM \"));\n                    add(new Keywords(\"UPDATE\", \"UPDATE \"));\n                    add(new Keywords(\"CREATE TABLE IF NOT EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"CREATE TABLE\", \" TABLE \"));\n                    add(new Keywords(\"CREATE KEYSPACE IF NOT EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"CREATE KEYSPACE\", \" KEYSPACE \"));\n                    add(new Keywords(\"ALTER TABLE\", \" TABLE \"));\n                    add(new Keywords(\"DROP TABLE IF EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"DROP TABLE\", \" TABLE \"));\n                    add(new Keywords(\"CREATE INDEX IF NOT EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"CREATE INDEX\", \" INDEX \"));\n                    add(new Keywords(\"CREATE CUSTOM INDEX IF NOT EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"CREATE CUSTOM INDEX\", \" INDEX \"));\n                    add(new Keywords(\"DROP INDEX IF EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"DROP INDEX\", \" INDEX \"));\n                    add(new Keywords(\"TRUNCATE\", \" TRUNCATE \"));\n                    add(new Keywords(\"USE\", \" USE \"));\n                }\n            });", "modifier": "private static final", "type": "Collection<Keywords>", "declarator": "stmtsList =\n            Collections.unmodifiableList(new ArrayList<Keywords>() {\n                {\n                    add(new Keywords(\"SELECT\", \" FROM \"));\n                    add(new Keywords(\"INSERT\", \" INTO \"));\n                    add(new Keywords(\"DELETE\", \" FROM \"));\n                    add(new Keywords(\"UPDATE\", \"UPDATE \"));\n                    add(new Keywords(\"CREATE TABLE IF NOT EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"CREATE TABLE\", \" TABLE \"));\n                    add(new Keywords(\"CREATE KEYSPACE IF NOT EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"CREATE KEYSPACE\", \" KEYSPACE \"));\n                    add(new Keywords(\"ALTER TABLE\", \" TABLE \"));\n                    add(new Keywords(\"DROP TABLE IF EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"DROP TABLE\", \" TABLE \"));\n                    add(new Keywords(\"CREATE INDEX IF NOT EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"CREATE INDEX\", \" INDEX \"));\n                    add(new Keywords(\"CREATE CUSTOM INDEX IF NOT EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"CREATE CUSTOM INDEX\", \" INDEX \"));\n                    add(new Keywords(\"DROP INDEX IF EXISTS\", \" EXISTS \"));\n                    add(new Keywords(\"DROP INDEX\", \" INDEX \"));\n                    add(new Keywords(\"TRUNCATE\", \" TRUNCATE \"));\n                    add(new Keywords(\"USE\", \" USE \"));\n                }\n            })", "var_name": "stmtsList"}, {"original_string": "private static final Set<Character> WORD_DELIMS =\n            Collections.unmodifiableSet(ListUtil.asSet(Character.valueOf(' '), Character.valueOf('(')));", "modifier": "private static final", "type": "Set<Character>", "declarator": "WORD_DELIMS =\n            Collections.unmodifiableSet(ListUtil.asSet(Character.valueOf(' '), Character.valueOf('(')))", "var_name": "WORD_DELIMS"}], "methods": [{"identifier": "CassandraOperationFinalizer", "parameters": "()", "modifiers": "private", "return": "", "signature": " CassandraOperationFinalizer()", "full_signature": "private  CassandraOperationFinalizer()", "class_method_signature": "CassandraOperationFinalizer.CassandraOperationFinalizer()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(Statement statement)", "modifiers": "public static", "return": "Operation", "signature": "Operation get(Statement statement)", "full_signature": "public static Operation get(Statement statement)", "class_method_signature": "CassandraOperationFinalizer.get(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Statement statement, Operation operation)", "modifiers": "public static", "return": "Operation", "signature": "Operation put(Statement statement, Operation operation)", "full_signature": "public static Operation put(Statement statement, Operation operation)", "class_method_signature": "CassandraOperationFinalizer.put(Statement statement, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Statement statement)", "modifiers": "public static", "return": "Operation", "signature": "Operation remove(Statement statement)", "full_signature": "public static Operation remove(Statement statement)", "class_method_signature": "CassandraOperationFinalizer.remove(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "addParam", "parameters": "(Operation operation, String key, Object param)", "modifiers": "public static", "return": "void", "signature": "void addParam(Operation operation, String key, Object param)", "full_signature": "public static void addParam(Operation operation, String key, Object param)", "class_method_signature": "CassandraOperationFinalizer.addParam(Operation operation, String key, Object param)", "testcase": false, "constructor": false}, {"identifier": "addParam", "parameters": "(Operation operation, int index, Object param)", "modifiers": "public static", "return": "void", "signature": "void addParam(Operation operation, int index, Object param)", "full_signature": "public static void addParam(Operation operation, int index, Object param)", "class_method_signature": "CassandraOperationFinalizer.addParam(Operation operation, int index, Object param)", "testcase": false, "constructor": false}, {"identifier": "createLabel", "parameters": "(String cql)", "modifiers": "public static", "return": "String", "signature": "String createLabel(String cql)", "full_signature": "public static String createLabel(String cql)", "class_method_signature": "CassandraOperationFinalizer.createLabel(String cql)", "testcase": false, "constructor": false}, {"identifier": "appendArgumentValue", "parameters": "(String prefix, String agrValue)", "modifiers": "private static", "return": "String", "signature": "String appendArgumentValue(String prefix, String agrValue)", "full_signature": "private static String appendArgumentValue(String prefix, String agrValue)", "class_method_signature": "CassandraOperationFinalizer.appendArgumentValue(String prefix, String agrValue)", "testcase": false, "constructor": false}, {"identifier": "captureWordAfter", "parameters": "(String source, String delim)", "modifiers": "private static", "return": "String", "signature": "String captureWordAfter(String source, String delim)", "full_signature": "private static String captureWordAfter(String source, String delim)", "class_method_signature": "CassandraOperationFinalizer.captureWordAfter(String source, String delim)", "testcase": false, "constructor": false}], "file": "collection-plugins/cassandra/src/main/java/com/springsource/insight/plugin/cassandra/CassandraOperationFinalizer.java"}, "focal_method": {"identifier": "createLabel", "parameters": "(String cql)", "modifiers": "public static", "return": "String", "body": "public static String createLabel(String cql) {\n        if (StringUtil.isEmpty(cql)) {\n            return \"CQL\";\n        }\n\n        String upperSql = cql.toUpperCase().trim();\n        for (Keywords keywords : stmtsList) {\n            String kwd = keywords.getKeyword();\n            if (!upperSql.startsWith(kwd)) {\n                continue;\n            }\n\n            String argPos = keywords.getArgPos();\n            return appendArgumentValue(\"CQL \" + kwd, captureWordAfter(upperSql, argPos));\n        }\n\n        // some special extra statements \n        if (upperSql.startsWith(\"CREATE\") ||\n                upperSql.startsWith(\"DROP\") ||\n                upperSql.startsWith(\"ALTER\")\n                ) {\n            return \"CQL DML\";\n        } else {\n            return \"CQL STATEMENT\"; // could be any number of unhandled CQL statements\n        }\n    }", "signature": "String createLabel(String cql)", "full_signature": "public static String createLabel(String cql)", "class_method_signature": "CassandraOperationFinalizer.createLabel(String cql)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "trim", "toUpperCase", "getKeyword", "startsWith", "getArgPos", "appendArgumentValue", "captureWordAfter", "startsWith", "startsWith", "startsWith"]}, "repository": {"repo_id": 2550825, "url": "https://github.com/spring-projects/spring-insight-plugins", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 55, "size": 6372, "license": "licensed"}}