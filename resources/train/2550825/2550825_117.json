{"test_class": {"identifier": "FilesTrackerExternalResourceAnalyzerTest", "superclass": "extends AbstractCollectionTestSupport", "interfaces": "", "fields": [{"original_string": "private final FilesTrackerExternalResourceAnalyzer analyzer = FilesTrackerExternalResourceAnalyzer.getInstance();", "modifier": "private final", "type": "FilesTrackerExternalResourceAnalyzer", "declarator": "analyzer = FilesTrackerExternalResourceAnalyzer.getInstance()", "var_name": "analyzer"}], "file": "collection-plugins/files-tracker/src/test/java/com/springsource/insight/plugin/files/tracker/FilesTrackerExternalResourceAnalyzerTest.java"}, "test_case": {"identifier": "testLocateExternalResourceName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLocateExternalResourceName() {\n        final String PATH = \"/dummy/path/123\";\n        Trace trace = createValidTrace(PATH);\n\n        List<ExternalResourceDescriptor> externalResourceDescriptors = (List<ExternalResourceDescriptor>) analyzer.locateExternalResourceName(trace);\n        assertNotNull(\"No descriptors extracted\", externalResourceDescriptors);\n        assertEquals(\"Mismatched number of descriptors\", 1, externalResourceDescriptors.size());\n\n        ExternalResourceDescriptor descriptor = externalResourceDescriptors.get(0);\n        assertSame(\"Mismatched descriptor frame\", trace.getRootFrame(), descriptor.getFrame());\n        assertDescriptorContents(\"testLocateExternalResourceName\", PATH, descriptor);\n    }", "signature": "void testLocateExternalResourceName()", "full_signature": "@Test public void testLocateExternalResourceName()", "class_method_signature": "FilesTrackerExternalResourceAnalyzerTest.testLocateExternalResourceName()", "testcase": true, "constructor": false, "invocations": ["createValidTrace", "locateExternalResourceName", "assertNotNull", "assertEquals", "size", "get", "assertSame", "getRootFrame", "getFrame", "assertDescriptorContents"]}, "focal_class": {"identifier": "FilesTrackerExternalResourceAnalyzer", "superclass": "extends AbstractExternalResourceAnalyzer", "interfaces": "", "fields": [{"original_string": "private static final FilesTrackerExternalResourceAnalyzer INSTANCE = new FilesTrackerExternalResourceAnalyzer();", "modifier": "private static final", "type": "FilesTrackerExternalResourceAnalyzer", "declarator": "INSTANCE = new FilesTrackerExternalResourceAnalyzer()", "var_name": "INSTANCE"}], "methods": [{"identifier": "FilesTrackerExternalResourceAnalyzer", "parameters": "()", "modifiers": "private", "return": "", "signature": " FilesTrackerExternalResourceAnalyzer()", "full_signature": "private  FilesTrackerExternalResourceAnalyzer()", "class_method_signature": "FilesTrackerExternalResourceAnalyzer.FilesTrackerExternalResourceAnalyzer()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static final", "return": "FilesTrackerExternalResourceAnalyzer", "signature": "FilesTrackerExternalResourceAnalyzer getInstance()", "full_signature": "public static final FilesTrackerExternalResourceAnalyzer getInstance()", "class_method_signature": "FilesTrackerExternalResourceAnalyzer.getInstance()", "testcase": false, "constructor": false}, {"identifier": "locateExternalResourceName", "parameters": "(Trace trace, Collection<Frame> frames)", "modifiers": "public", "return": "Collection<ExternalResourceDescriptor>", "signature": "Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> frames)", "full_signature": "public Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> frames)", "class_method_signature": "FilesTrackerExternalResourceAnalyzer.locateExternalResourceName(Trace trace, Collection<Frame> frames)", "testcase": false, "constructor": false}], "file": "collection-plugins/files-tracker/src/main/java/com/springsource/insight/plugin/files/tracker/FilesTrackerExternalResourceAnalyzer.java"}, "focal_method": {"identifier": "locateExternalResourceName", "parameters": "(Trace trace, Collection<Frame> frames)", "modifiers": "public", "return": "Collection<ExternalResourceDescriptor>", "body": "public Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> frames) {\n        if (ListUtil.size(frames) <= 0) {\n            return Collections.emptyList();\n        }\n\n        List<ExternalResourceDescriptor> descriptors = new ArrayList<ExternalResourceDescriptor>(frames.size());\n        for (Frame frame : frames) {\n            Operation op = frame.getOperation();\n            String path = op.get(FilesTrackerDefinitions.PATH_ATTR, String.class);\n            if (StringUtil.isEmpty(path)) {\n                continue;\n            }\n\n            String hashString = MD5NameGenerator.getName(path);\n            String color = colorManager.getColor(op);\n            ExternalResourceDescriptor desc =\n                    new ExternalResourceDescriptor(frame,\n                            FilesTrackerDefinitions.TYPE.getName() + \":\" + hashString,\n                            path,\n                            ExternalResourceType.FILESTORE.name(),\n                            FilesTrackerDefinitions.TYPE.getName(),\n                            color, false);\n            descriptors.add(desc);\n        }\n\n        return descriptors;\n    }", "signature": "Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> frames)", "full_signature": "public Collection<ExternalResourceDescriptor> locateExternalResourceName(Trace trace, Collection<Frame> frames)", "class_method_signature": "FilesTrackerExternalResourceAnalyzer.locateExternalResourceName(Trace trace, Collection<Frame> frames)", "testcase": false, "constructor": false, "invocations": ["size", "emptyList", "size", "getOperation", "get", "isEmpty", "getName", "getColor", "getName", "name", "getName", "add"]}, "repository": {"repo_id": 2550825, "url": "https://github.com/spring-projects/spring-insight-plugins", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 55, "size": 6372, "license": "licensed"}}