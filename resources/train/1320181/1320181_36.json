{"test_class": {"identifier": "VirtualImageConversionDAOTest", "superclass": "extends\n    DefaultDAOTestBase<VirtualImageConversionDAO, VirtualImageConversion>", "interfaces": "", "fields": [{"original_string": "private VirtualMachineTemplateGenerator virtualImageGenerator;", "modifier": "private", "type": "VirtualMachineTemplateGenerator", "declarator": "virtualImageGenerator", "var_name": "virtualImageGenerator"}, {"original_string": "private EnterpriseGenerator enterpriseGenerator;", "modifier": "private", "type": "EnterpriseGenerator", "declarator": "enterpriseGenerator", "var_name": "enterpriseGenerator"}, {"original_string": "private VirtualMachineGenerator virtualMachineGenerator;", "modifier": "private", "type": "VirtualMachineGenerator", "declarator": "virtualMachineGenerator", "var_name": "virtualMachineGenerator"}, {"original_string": "private HypervisorGenerator hypervisorGenerator;", "modifier": "private", "type": "HypervisorGenerator", "declarator": "hypervisorGenerator", "var_name": "hypervisorGenerator"}, {"original_string": "private MachineGenerator machineGenerator;", "modifier": "private", "type": "MachineGenerator", "declarator": "machineGenerator", "var_name": "machineGenerator"}, {"original_string": "private DatacenterGenerator datacenterGenerator;", "modifier": "private", "type": "DatacenterGenerator", "declarator": "datacenterGenerator", "var_name": "datacenterGenerator"}, {"original_string": "private UserGenerator userGenerator;", "modifier": "private", "type": "UserGenerator", "declarator": "userGenerator", "var_name": "userGenerator"}, {"original_string": "private RoleGenerator roleGenerator;", "modifier": "private", "type": "RoleGenerator", "declarator": "roleGenerator", "var_name": "roleGenerator"}], "file": "model/src/test/java/com/abiquo/server/core/appslibrary/VirtualImageConversionDAOTest.java"}, "test_case": {"identifier": "testIsConverted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsConverted()\n    {\n        VirtualImageConversion imageConversion = eg().createUniqueInstance();\n        List<Object> entitiesToPersist = new ArrayList<Object>();\n        eg().addAuxiliaryEntitiesToPersist(imageConversion, entitiesToPersist);\n        persistAll(ds(), entitiesToPersist, imageConversion);\n\n        VirtualImageConversionDAO dao = createDaoForRollbackTransaction();\n\n        assertTrue(dao.isConverted(imageConversion.getVirtualMachineTemplate(),\n            imageConversion.getTargetType()));\n    }", "signature": "void testIsConverted()", "full_signature": "@Test public void testIsConverted()", "class_method_signature": "VirtualImageConversionDAOTest.testIsConverted()", "testcase": true, "constructor": false, "invocations": ["createUniqueInstance", "eg", "addAuxiliaryEntitiesToPersist", "eg", "persistAll", "ds", "createDaoForRollbackTransaction", "assertTrue", "isConverted", "getVirtualMachineTemplate", "getTargetType"]}, "focal_class": {"identifier": "VirtualImageConversionDAO", "superclass": "extends DefaultDAOBase<Integer, VirtualImageConversion>", "interfaces": "", "fields": [{"original_string": "private final String QUERY_IMAGE_CONVERTED = \"SELECT count(vic) \" + //\n        \"FROM com.abiquo.server.core.appslibrary.VirtualImageConversion vic \" + //\n        \"WHERE vic.virtualImage.id = :idVirtualImage\";", "modifier": "private final", "type": "String", "declarator": "QUERY_IMAGE_CONVERTED = \"SELECT count(vic) \" + //\n        \"FROM com.abiquo.server.core.appslibrary.VirtualImageConversion vic \" + //\n        \"WHERE vic.virtualImage.id = :idVirtualImage\"", "var_name": "QUERY_IMAGE_CONVERTED"}, {"original_string": "private final String VIRTUALIMAGECONVERSION_BY_NODEVIRTUALIMAGE = \"SELECT \"\n        + \"vic FROM com.abiquo.server.core.appslibrary.VirtualImageConversion vic, \"\n        + \"com.abiquo.server.core.cloud.NodeVirtualImage nvi \"\n        + \"WHERE nvi.id = :idVirtualImageConversion AND nvi.virtualImage.id = vic.virtualImage.id\";", "modifier": "private final", "type": "String", "declarator": "VIRTUALIMAGECONVERSION_BY_NODEVIRTUALIMAGE = \"SELECT \"\n        + \"vic FROM com.abiquo.server.core.appslibrary.VirtualImageConversion vic, \"\n        + \"com.abiquo.server.core.cloud.NodeVirtualImage nvi \"\n        + \"WHERE nvi.id = :idVirtualImageConversion AND nvi.virtualImage.id = vic.virtualImage.id\"", "var_name": "VIRTUALIMAGECONVERSION_BY_NODEVIRTUALIMAGE"}, {"original_string": "private final String DATACENTERUUID_BY_VIRTUALIMAGECONVERSION =\n        \"select distinct(dc.uuid) from virtualimage_conversions vic left outer join virtualimage vi on vic.idImage = vi.idImage left outer join repository rep on vi.idRepository = rep.idRepository left outer join datacenter dc on rep.idDataCenter = dc.idDatacenter where vic.id = :idVirtualImageConversion\";", "modifier": "private final", "type": "String", "declarator": "DATACENTERUUID_BY_VIRTUALIMAGECONVERSION =\n        \"select distinct(dc.uuid) from virtualimage_conversions vic left outer join virtualimage vi on vic.idImage = vi.idImage left outer join repository rep on vi.idRepository = rep.idRepository left outer join datacenter dc on rep.idDataCenter = dc.idDatacenter where vic.id = :idVirtualImageConversion\"", "var_name": "DATACENTERUUID_BY_VIRTUALIMAGECONVERSION"}], "methods": [{"identifier": "VirtualImageConversionDAO", "parameters": "()", "modifiers": "public", "return": "", "signature": " VirtualImageConversionDAO()", "full_signature": "public  VirtualImageConversionDAO()", "class_method_signature": "VirtualImageConversionDAO.VirtualImageConversionDAO()", "testcase": false, "constructor": true}, {"identifier": "VirtualImageConversionDAO", "parameters": "(final EntityManager entityManager)", "modifiers": "public", "return": "", "signature": " VirtualImageConversionDAO(final EntityManager entityManager)", "full_signature": "public  VirtualImageConversionDAO(final EntityManager entityManager)", "class_method_signature": "VirtualImageConversionDAO.VirtualImageConversionDAO(final EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "sameImage", "parameters": "(final VirtualMachineTemplate image)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameImage(final VirtualMachineTemplate image)", "full_signature": "private static Criterion sameImage(final VirtualMachineTemplate image)", "class_method_signature": "VirtualImageConversionDAO.sameImage(final VirtualMachineTemplate image)", "testcase": false, "constructor": false}, {"identifier": "sameImage", "parameters": "(final VirtualImageConversion conversion)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameImage(final VirtualImageConversion conversion)", "full_signature": "private static Criterion sameImage(final VirtualImageConversion conversion)", "class_method_signature": "VirtualImageConversionDAO.sameImage(final VirtualImageConversion conversion)", "testcase": false, "constructor": false}, {"identifier": "sameSourceFormat", "parameters": "(final VirtualImageConversion image)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameSourceFormat(final VirtualImageConversion image)", "full_signature": "private static Criterion sameSourceFormat(final VirtualImageConversion image)", "class_method_signature": "VirtualImageConversionDAO.sameSourceFormat(final VirtualImageConversion image)", "testcase": false, "constructor": false}, {"identifier": "sameTargetFormat", "parameters": "(final VirtualImageConversion image)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameTargetFormat(final VirtualImageConversion image)", "full_signature": "private static Criterion sameTargetFormat(final VirtualImageConversion image)", "class_method_signature": "VirtualImageConversionDAO.sameTargetFormat(final VirtualImageConversion image)", "testcase": false, "constructor": false}, {"identifier": "targetFormatIn", "parameters": "(final Collection<DiskFormatType> formats)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion targetFormatIn(final Collection<DiskFormatType> formats)", "full_signature": "private static Criterion targetFormatIn(final Collection<DiskFormatType> formats)", "class_method_signature": "VirtualImageConversionDAO.targetFormatIn(final Collection<DiskFormatType> formats)", "testcase": false, "constructor": false}, {"identifier": "targetFormatIn", "parameters": "(final DiskFormatType format)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion targetFormatIn(final DiskFormatType format)", "full_signature": "private static Criterion targetFormatIn(final DiskFormatType format)", "class_method_signature": "VirtualImageConversionDAO.targetFormatIn(final DiskFormatType format)", "testcase": false, "constructor": false}, {"identifier": "sourceFormatNull", "parameters": "()", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sourceFormatNull()", "full_signature": "private static Criterion sourceFormatNull()", "class_method_signature": "VirtualImageConversionDAO.sourceFormatNull()", "testcase": false, "constructor": false}, {"identifier": "compatilbeConversions", "parameters": "(\n        final VirtualMachineTemplate virtualImage, final HypervisorType hypervisorType)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<VirtualImageConversion>", "signature": "List<VirtualImageConversion> compatilbeConversions(\n        final VirtualMachineTemplate virtualImage, final HypervisorType hypervisorType)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<VirtualImageConversion> compatilbeConversions(\n        final VirtualMachineTemplate virtualImage, final HypervisorType hypervisorType)", "class_method_signature": "VirtualImageConversionDAO.compatilbeConversions(\n        final VirtualMachineTemplate virtualImage, final HypervisorType hypervisorType)", "testcase": false, "constructor": false}, {"identifier": "isVirtualImageConverted", "parameters": "(final Integer vImageId, final DiskFormatType format)", "modifiers": "public", "return": "boolean", "signature": "boolean isVirtualImageConverted(final Integer vImageId, final DiskFormatType format)", "full_signature": "public boolean isVirtualImageConverted(final Integer vImageId, final DiskFormatType format)", "class_method_signature": "VirtualImageConversionDAO.isVirtualImageConverted(final Integer vImageId, final DiskFormatType format)", "testcase": false, "constructor": false}, {"identifier": "getUnbundledConversion", "parameters": "(final VirtualMachineTemplate image,\n        final DiskFormatType format)", "modifiers": "@Deprecated // use selectConversion TODO delthis @SuppressWarnings(\"unchecked\") public", "return": "VirtualImageConversion", "signature": "VirtualImageConversion getUnbundledConversion(final VirtualMachineTemplate image,\n        final DiskFormatType format)", "full_signature": "@Deprecated // use selectConversion TODO delthis @SuppressWarnings(\"unchecked\") public VirtualImageConversion getUnbundledConversion(final VirtualMachineTemplate image,\n        final DiskFormatType format)", "class_method_signature": "VirtualImageConversionDAO.getUnbundledConversion(final VirtualMachineTemplate image,\n        final DiskFormatType format)", "testcase": false, "constructor": false}, {"identifier": "isConverted", "parameters": "(final VirtualMachineTemplate image, final DiskFormatType targetType)", "modifiers": "public", "return": "boolean", "signature": "boolean isConverted(final VirtualMachineTemplate image, final DiskFormatType targetType)", "full_signature": "public boolean isConverted(final VirtualMachineTemplate image, final DiskFormatType targetType)", "class_method_signature": "VirtualImageConversionDAO.isConverted(final VirtualMachineTemplate image, final DiskFormatType targetType)", "testcase": false, "constructor": false}, {"identifier": "findByVirtualImage", "parameters": "(\n        final VirtualMachineTemplate virtualImage)", "modifiers": "public", "return": "Collection<VirtualImageConversion>", "signature": "Collection<VirtualImageConversion> findByVirtualImage(\n        final VirtualMachineTemplate virtualImage)", "full_signature": "public Collection<VirtualImageConversion> findByVirtualImage(\n        final VirtualMachineTemplate virtualImage)", "class_method_signature": "VirtualImageConversionDAO.findByVirtualImage(\n        final VirtualMachineTemplate virtualImage)", "testcase": false, "constructor": false}, {"identifier": "findByVirtualImageConversionByNodeVirtualImage", "parameters": "(\n        final NodeVirtualImage nodeVirtualImage)", "modifiers": "public", "return": "Collection<VirtualImageConversion>", "signature": "Collection<VirtualImageConversion> findByVirtualImageConversionByNodeVirtualImage(\n        final NodeVirtualImage nodeVirtualImage)", "full_signature": "public Collection<VirtualImageConversion> findByVirtualImageConversionByNodeVirtualImage(\n        final NodeVirtualImage nodeVirtualImage)", "class_method_signature": "VirtualImageConversionDAO.findByVirtualImageConversionByNodeVirtualImage(\n        final NodeVirtualImage nodeVirtualImage)", "testcase": false, "constructor": false}, {"identifier": "getDatacenterUUIDByVirtualImageConversionID", "parameters": "(final Integer idVirtualImageConversion)", "modifiers": "public", "return": "String", "signature": "String getDatacenterUUIDByVirtualImageConversionID(final Integer idVirtualImageConversion)", "full_signature": "public String getDatacenterUUIDByVirtualImageConversionID(final Integer idVirtualImageConversion)", "class_method_signature": "VirtualImageConversionDAO.getDatacenterUUIDByVirtualImageConversionID(final Integer idVirtualImageConversion)", "testcase": false, "constructor": false}, {"identifier": "existDuplicatedConversion", "parameters": "(final VirtualImageConversion conversion)", "modifiers": "public", "return": "boolean", "signature": "boolean existDuplicatedConversion(final VirtualImageConversion conversion)", "full_signature": "public boolean existDuplicatedConversion(final VirtualImageConversion conversion)", "class_method_signature": "VirtualImageConversionDAO.existDuplicatedConversion(final VirtualImageConversion conversion)", "testcase": false, "constructor": false}], "file": "model/src/main/java/com/abiquo/server/core/appslibrary/VirtualImageConversionDAO.java"}, "focal_method": {"identifier": "isConverted", "parameters": "(final VirtualMachineTemplate image, final DiskFormatType targetType)", "modifiers": "public", "return": "boolean", "body": "public boolean isConverted(final VirtualMachineTemplate image, final DiskFormatType targetType)\n    {\n        final Criterion compat = Restrictions.and(sameImage(image), targetFormatIn(targetType));\n        return !createCriteria(compat).list().isEmpty();\n    }", "signature": "boolean isConverted(final VirtualMachineTemplate image, final DiskFormatType targetType)", "full_signature": "public boolean isConverted(final VirtualMachineTemplate image, final DiskFormatType targetType)", "class_method_signature": "VirtualImageConversionDAO.isConverted(final VirtualMachineTemplate image, final DiskFormatType targetType)", "testcase": false, "constructor": false, "invocations": ["and", "sameImage", "targetFormatIn", "isEmpty", "list", "createCriteria"]}, "repository": {"repo_id": 1320181, "url": "https://github.com/abiquo/abiquo", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 25, "size": 82580, "license": "licensed"}}