{"test_class": {"identifier": "IpPoolManagementDAOTest", "superclass": "extends\n    DefaultDAOTestBase<IpPoolManagementDAO, IpPoolManagement>", "interfaces": "", "fields": [{"original_string": "private VirtualDatacenterGenerator virtualDatacenterGenerator;", "modifier": "private", "type": "VirtualDatacenterGenerator", "declarator": "virtualDatacenterGenerator", "var_name": "virtualDatacenterGenerator"}, {"original_string": "private VLANNetworkGenerator vlanNetworkGenerator;", "modifier": "private", "type": "VLANNetworkGenerator", "declarator": "vlanNetworkGenerator", "var_name": "vlanNetworkGenerator"}], "file": "model/src/test/java/com/abiquo/server/core/infrastructure/network/IpPoolManagementDAOTest.java"}, "test_case": {"identifier": "findNextIpByPrivateVLANAvailableAnotherVdc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findNextIpByPrivateVLANAvailableAnotherVdc()\n    {\n        List<Object> entities = new ArrayList<Object>();\n\n        IpPoolManagement ipPoolManagement1 = eg().createUniqueInstance();\n        ipPoolManagement1.setAvailable(Boolean.FALSE);\n\n        VirtualDatacenter vdc1 = virtualDatacenterGenerator.createUniqueInstance();\n        ipPoolManagement1.setVirtualDatacenter(vdc1);\n\n        virtualDatacenterGenerator.addAuxiliaryEntitiesToPersist(vdc1, entities);\n        eg().addAuxiliaryEntitiesToPersist(ipPoolManagement1, entities);\n\n        IpPoolManagement ipPoolManagement2 = eg().createUniqueInstance();\n        ipPoolManagement2.setAvailable(Boolean.TRUE);\n\n        VirtualDatacenter vdc2 = virtualDatacenterGenerator.createUniqueInstance();\n        ipPoolManagement2.setVirtualDatacenter(vdc2);\n\n        virtualDatacenterGenerator.addAuxiliaryEntitiesToPersist(vdc2, entities);\n        eg().addAuxiliaryEntitiesToPersist(ipPoolManagement2, entities);\n\n        persistAll(ds(), entities, vdc1, vdc2, ipPoolManagement1, ipPoolManagement2);\n\n        IpPoolManagementDAO dao = createDaoForRollbackTransaction();\n        IpPoolManagement available =\n            dao.findNextIpAvailable(ipPoolManagement1.getVlanNetwork().getId());\n\n        Assert.assertNull(available);\n    }", "signature": "void findNextIpByPrivateVLANAvailableAnotherVdc()", "full_signature": "@Test public void findNextIpByPrivateVLANAvailableAnotherVdc()", "class_method_signature": "IpPoolManagementDAOTest.findNextIpByPrivateVLANAvailableAnotherVdc()", "testcase": true, "constructor": false, "invocations": ["createUniqueInstance", "eg", "setAvailable", "createUniqueInstance", "setVirtualDatacenter", "addAuxiliaryEntitiesToPersist", "addAuxiliaryEntitiesToPersist", "eg", "createUniqueInstance", "eg", "setAvailable", "createUniqueInstance", "setVirtualDatacenter", "addAuxiliaryEntitiesToPersist", "addAuxiliaryEntitiesToPersist", "eg", "persistAll", "ds", "createDaoForRollbackTransaction", "findNextIpAvailable", "getId", "getVlanNetwork", "assertNull"]}, "focal_class": {"identifier": "IpPoolManagementDAO", "superclass": "extends DefaultDAOBase<Integer, IpPoolManagement>", "interfaces": "", "fields": [{"original_string": "public static final String BY_DATACENTER =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf, \"\n            // \"INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp \"\n            + \"LEFT JOIN ip.virtualDatacenter vdc LEFT JOIN vlan.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id\"\n            + \"AND ip.vlanNetwork.id = vlan.id \"\n            + \" AND dc.id = :datacenter_id AND \"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\";", "modifier": "public static final", "type": "String", "declarator": "BY_DATACENTER =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf, \"\n            // \"INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp \"\n            + \"LEFT JOIN ip.virtualDatacenter vdc LEFT JOIN vlan.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id\"\n            + \"AND ip.vlanNetwork.id = vlan.id \"\n            + \" AND dc.id = :datacenter_id AND \"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\"", "var_name": "BY_DATACENTER"}, {"original_string": "public static final String BY_DATACENTER_AND_ENTERPRISE =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf, \"\n            // \"INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp \"\n            + \"LEFT JOIN ip.virtualDatacenter vdc LEFT JOIN vlan.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id\"\n            + \"AND ip.vlanNetwork.id = vlan.id \"\n            + \" AND dc.id = :datacenter_id AND \"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\";", "modifier": "public static final", "type": "String", "declarator": "BY_DATACENTER_AND_ENTERPRISE =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf, \"\n            // \"INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp \"\n            + \"LEFT JOIN ip.virtualDatacenter vdc LEFT JOIN vlan.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id\"\n            + \"AND ip.vlanNetwork.id = vlan.id \"\n            + \" AND dc.id = :datacenter_id AND \"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\"", "var_name": "BY_DATACENTER_AND_ENTERPRISE"}, {"original_string": "public static final String BY_DEFAULT_VLAN_USED_BY_ANY_VDC =\n        \" SELECT ip FROM  virtualdatacenter vdc, ip_pool_management ip where \"\n            + \"vdc.default_vlan_network_id=ip.vlan_network_id and vdc.default_vlan_network_id=:vlan_id\";", "modifier": "public static final", "type": "String", "declarator": "BY_DEFAULT_VLAN_USED_BY_ANY_VDC =\n        \" SELECT ip FROM  virtualdatacenter vdc, ip_pool_management ip where \"\n            + \"vdc.default_vlan_network_id=ip.vlan_network_id and vdc.default_vlan_network_id=:vlan_id\"", "var_name": "BY_DEFAULT_VLAN_USED_BY_ANY_VDC"}, {"original_string": "public static final String BY_ENT =\n        \" SELECT ip FROM IpPoolManagement ip \" + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VirtualDatacenter vdc, \"\n            + \" VLANNetwork vn, \"\n            + \" Enterprise ent \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.network.id = vdc.network.id\" + \" AND vdc.enterprise.id = ent.id\"\n            + \" AND ent.id = :ent_id \" + \" AND \" + \"( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\";", "modifier": "public static final", "type": "String", "declarator": "BY_ENT =\n        \" SELECT ip FROM IpPoolManagement ip \" + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VirtualDatacenter vdc, \"\n            + \" VLANNetwork vn, \"\n            + \" Enterprise ent \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.network.id = vdc.network.id\" + \" AND vdc.enterprise.id = ent.id\"\n            + \" AND ent.id = :ent_id \" + \" AND \" + \"( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\"", "var_name": "BY_ENT"}, {"original_string": "public static final String BY_EXTERNAL_VLAN =\n        \"SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp \"\n            + \" left join ip.virtualDatacenter vdc, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VLANNetwork vn \"\n            + \" join vn.enterprise ent, \"\n            + \" DatacenterLimits dcl\"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \" WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND ent.id = :ent_id AND \"\n            + \" dcl.enterprise.id = ent.id AND \" + \" ip.available = 1 AND \"\n            + \" dcl.id = :dc_limit_id AND \" + \"( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\";", "modifier": "public static final", "type": "String", "declarator": "BY_EXTERNAL_VLAN =\n        \"SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp \"\n            + \" left join ip.virtualDatacenter vdc, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VLANNetwork vn \"\n            + \" join vn.enterprise ent, \"\n            + \" DatacenterLimits dcl\"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \" WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND ent.id = :ent_id AND \"\n            + \" dcl.enterprise.id = ent.id AND \" + \" ip.available = 1 AND \"\n            + \" dcl.id = :dc_limit_id AND \" + \"( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\"", "var_name": "BY_EXTERNAL_VLAN"}, {"original_string": "public static final String BY_IP_PURCHASED =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp, \"\n            + \"VirtualDatacenter vdc LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \"AND ip.vlanNetwork.id = vlan.id \" + \"AND vdc.id = :vdc_id AND \"\n            + \"vdc.datacenter.id = dc.id AND ip.id = :ip_id AND \"\n            + \"ip.available = 1 AND vlan.enterprise is null AND ip.virtualDatacenter.id = :vdc_id\";", "modifier": "public static final", "type": "String", "declarator": "BY_IP_PURCHASED =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp, \"\n            + \"VirtualDatacenter vdc LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \"AND ip.vlanNetwork.id = vlan.id \" + \"AND vdc.id = :vdc_id AND \"\n            + \"vdc.datacenter.id = dc.id AND ip.id = :ip_id AND \"\n            + \"ip.available = 1 AND vlan.enterprise is null AND ip.virtualDatacenter.id = :vdc_id\"", "var_name": "BY_IP_PURCHASED"}, {"original_string": "public static final String BY_IP_TO_PURCHASE =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp, \"\n            + \"VirtualDatacenter vdc LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \"AND ip.vlanNetwork.id = vlan.id \" + \"AND vdc.id = :vdc_id AND \"\n            + \"vdc.datacenter.id = dc.id AND ip.id = :ip_id AND \"\n            + \"ip.available = 1 AND vlan.enterprise is null AND ip.virtualDatacenter is null\";", "modifier": "public static final", "type": "String", "declarator": "BY_IP_TO_PURCHASE =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp, \"\n            + \"VirtualDatacenter vdc LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \"AND ip.vlanNetwork.id = vlan.id \" + \"AND vdc.id = :vdc_id AND \"\n            + \"vdc.datacenter.id = dc.id AND ip.id = :ip_id AND \"\n            + \"ip.available = 1 AND vlan.enterprise is null AND ip.virtualDatacenter is null\"", "var_name": "BY_IP_TO_PURCHASE"}, {"original_string": "public static final String BY_NETWORK =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND vn.network.id = :net_id AND \"\n            + \"( ip.ip like :filterLike \" + \" OR ip.mac like :filterLike \"\n            + \" OR ip.vlanNetwork.name like :filterLike \" + \" OR vapp.name like :filterLike \"\n            + \" OR vm.name like :filterLike \" + \")\";", "modifier": "public static final", "type": "String", "declarator": "BY_NETWORK =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND vn.network.id = :net_id AND \"\n            + \"( ip.ip like :filterLike \" + \" OR ip.mac like :filterLike \"\n            + \" OR ip.vlanNetwork.name like :filterLike \" + \" OR vapp.name like :filterLike \"\n            + \" OR vm.name like :filterLike \" + \")\"", "var_name": "BY_NETWORK"}, {"original_string": "public static final String BY_PUBLIC_VLAN =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualDatacenter vdc LEFT JOIN ip.virtualAppliance vapp \"\n            + \"LEFT JOIN ip.virtualMachine vm LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id\"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \" AND ip.vlanNetwork.id = vlan.id \"\n            + \" AND dc.id = :datacenter_id AND \"\n            + \"vlan.id = :vlan_id AND\"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\";", "modifier": "public static final", "type": "String", "declarator": "BY_PUBLIC_VLAN =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualDatacenter vdc LEFT JOIN ip.virtualAppliance vapp \"\n            + \"LEFT JOIN ip.virtualMachine vm LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id\"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \" AND ip.vlanNetwork.id = vlan.id \"\n            + \" AND dc.id = :datacenter_id AND \"\n            + \"vlan.id = :vlan_id AND\"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\"", "var_name": "BY_PUBLIC_VLAN"}, {"original_string": "public static final String BY_VDC =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VirtualDatacenter vdc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.network.id = vdc.network.id\" + \" AND vdc.id = :vdc_id AND\"\n            + \"( ip.ip like :filterLike \" + \" OR ip.mac like :filterLike \"\n            + \" OR ip.vlanNetwork.name like :filterLike \" + \" OR vapp.name like :filterLike \"\n            + \" OR vm.name like :filterLike \" + \")\";", "modifier": "public static final", "type": "String", "declarator": "BY_VDC =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VirtualDatacenter vdc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.network.id = vdc.network.id\" + \" AND vdc.id = :vdc_id AND\"\n            + \"( ip.ip like :filterLike \" + \" OR ip.mac like :filterLike \"\n            + \" OR ip.vlanNetwork.name like :filterLike \" + \" OR vapp.name like :filterLike \"\n            + \" OR vm.name like :filterLike \" + \")\"", "var_name": "BY_VDC"}, {"original_string": "public static final String BY_VDC_PURCHASED =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp, \"\n            + \"VirtualDatacenter vdc LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \"AND ip.vlanNetwork.id = vlan.id \"\n            + \"AND vdc.id = :vdc_id AND \"\n            + \"vdc.datacenter.id = dc.id AND \"\n            + \"ip.available = 1 AND vlan.enterprise is null AND ip.virtualDatacenter.id = :vdc_id AND \"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\";", "modifier": "public static final", "type": "String", "declarator": "BY_VDC_PURCHASED =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp, \"\n            + \"VirtualDatacenter vdc LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \"AND ip.vlanNetwork.id = vlan.id \"\n            + \"AND vdc.id = :vdc_id AND \"\n            + \"vdc.datacenter.id = dc.id AND \"\n            + \"ip.available = 1 AND vlan.enterprise is null AND ip.virtualDatacenter.id = :vdc_id AND \"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\"", "var_name": "BY_VDC_PURCHASED"}, {"original_string": "public static final String BY_VDC_TO_PURCHASE =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp, \"\n            + \"VirtualDatacenter vdc LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \"AND ip.vlanNetwork.id = vlan.id \"\n            + \"AND vdc.id = :vdc_id AND \"\n            + \"vdc.datacenter.id = dc.id AND \"\n            + \"ip.available = 1 AND ip.quarantine = 0  AND vlan.enterprise is null AND ip.virtualDatacenter is null AND \"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\";", "modifier": "public static final", "type": "String", "declarator": "BY_VDC_TO_PURCHASE =\n        \" SELECT ip FROM \"\n            + \"Datacenter dc INNER JOIN dc.network net, VLANNetwork vlan \"\n            + \"INNER JOIN vlan.configuration conf,\"\n            // +\" INNER JOIN conf.dhcp dhcp, \"\n            + \"IpPoolManagement ip LEFT JOIN ip.virtualMachine vm LEFT JOIN ip.virtualAppliance vapp, \"\n            + \"VirtualDatacenter vdc LEFT JOIN vdc.enterprise ent \"\n            + \"WHERE net.id = vlan.network.id \"\n            // +\"AND dhcp.id = ip.dhcp.id \"\n            + \"AND ip.vlanNetwork.id = vlan.id \"\n            + \"AND vdc.id = :vdc_id AND \"\n            + \"vdc.datacenter.id = dc.id AND \"\n            + \"ip.available = 1 AND ip.quarantine = 0  AND vlan.enterprise is null AND ip.virtualDatacenter is null AND \"\n            + \"( ip.ip LIKE :filterLike OR ip.mac LIKE :filterLike OR ip.networkName LIKE :filterLike OR \"\n            + \" vm.name like :filterLike OR vapp.name LIKE :filterLike OR ent.name LIKE :filterLike )\"", "var_name": "BY_VDC_TO_PURCHASE"}, {"original_string": "public static final String BY_VIRTUAL_MACHINE =\n        \"SELECT ip \" + \"FROM IpPoolManagement ip INNER JOIN ip.virtualMachine vm \"\n            + \"WHERE vm.id = :vm_id \" + \"ORDER BY ip.sequence\";", "modifier": "public static final", "type": "String", "declarator": "BY_VIRTUAL_MACHINE =\n        \"SELECT ip \" + \"FROM IpPoolManagement ip INNER JOIN ip.virtualMachine vm \"\n            + \"WHERE vm.id = :vm_id \" + \"ORDER BY ip.sequence\"", "var_name": "BY_VIRTUAL_MACHINE"}, {"original_string": "public static final String BY_VLAN =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VirtualDatacenter vdc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND vn.network.id = vdc.network.id\"\n            + \" AND vdc.id = :vdc_id AND\" + \"( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\";", "modifier": "public static final", "type": "String", "declarator": "BY_VLAN =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VirtualDatacenter vdc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND vn.network.id = vdc.network.id\"\n            + \" AND vdc.id = :vdc_id AND\" + \"( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\"", "var_name": "BY_VLAN"}, {"original_string": "public static final String BY_VLAN_NEXT_AVAILABLE =\n        \" SELECT ip FROM IpPoolManagement ip \" + \" inner join ip.vlanNetwork vn \"\n            + \" WHERE vn.id = :vlan_id \" + \" AND ip.virtualMachine is null \"\n            + \" AND ip.ip NOT in ( :excludedIp ) \";", "modifier": "public static final", "type": "String", "declarator": "BY_VLAN_NEXT_AVAILABLE =\n        \" SELECT ip FROM IpPoolManagement ip \" + \" inner join ip.vlanNetwork vn \"\n            + \" WHERE vn.id = :vlan_id \" + \" AND ip.virtualMachine is null \"\n            + \" AND ip.ip NOT in ( :excludedIp ) \"", "var_name": "BY_VLAN_NEXT_AVAILABLE"}, {"original_string": "public static final String BY_VLAN_NEXT_EXTERNAL_IP_AVAILABLE =\n        \" SELECT ip FROM IpPoolManagement ip \" + \" inner join ip.vlanNetwork vn \"\n            + \" WHERE vn.id = :vlan_id \" + \" AND ip.virtualMachine is null \"\n            + \" AND ip.ip NOT in ( :excludedIp ) \" + \" AND ip.available = 1\";", "modifier": "public static final", "type": "String", "declarator": "BY_VLAN_NEXT_EXTERNAL_IP_AVAILABLE =\n        \" SELECT ip FROM IpPoolManagement ip \" + \" inner join ip.vlanNetwork vn \"\n            + \" WHERE vn.id = :vlan_id \" + \" AND ip.virtualMachine is null \"\n            + \" AND ip.ip NOT in ( :excludedIp ) \" + \" AND ip.available = 1\"", "var_name": "BY_VLAN_NEXT_EXTERNAL_IP_AVAILABLE"}, {"original_string": "public static final String BY_VLAN_USED_BY_ANY_VDC =\n        \" SELECT ip FROM ip_pool_management ip  , rasd_management rasd, virtualdatacenter vdc \"\n            + \"  WHERE ip.idManagement= rasd.idManagement and rasd.idVirtualDatacenter \"\n            + \"= vdc.idVirtualDatacenter and ip.vlan_network_id =:vlan_id\";", "modifier": "public static final", "type": "String", "declarator": "BY_VLAN_USED_BY_ANY_VDC =\n        \" SELECT ip FROM ip_pool_management ip  , rasd_management rasd, virtualdatacenter vdc \"\n            + \"  WHERE ip.idManagement= rasd.idManagement and rasd.idVirtualDatacenter \"\n            + \"= vdc.idVirtualDatacenter and ip.vlan_network_id =:vlan_id\"", "var_name": "BY_VLAN_USED_BY_ANY_VDC"}, {"original_string": "public static final String BY_VLAN_USED_BY_ANY_VM =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND ( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\";", "modifier": "public static final", "type": "String", "declarator": "BY_VLAN_USED_BY_ANY_VM =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND ( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\"", "var_name": "BY_VLAN_USED_BY_ANY_VM"}, {"original_string": "public static final String BY_VLAN_WITHOUT_USED_IPS =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VirtualDatacenter vdc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND vn.network.id = vdc.network.id\"\n            + \" AND vdc.id = :vdc_id \" + \" AND vm is null AND \" + \"( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\";", "modifier": "public static final", "type": "String", "declarator": "BY_VLAN_WITHOUT_USED_IPS =\n        \" SELECT ip FROM IpPoolManagement ip \"\n            + \" left join ip.virtualMachine vm \"\n            + \" left join ip.virtualAppliance vapp, \"\n            + \" NetworkConfiguration nc, \"\n            + \" VirtualDatacenter vdc, \"\n            + \" VLANNetwork vn \"\n            // + \" WHERE ip.dhcp.id = nc.dhcp.id \"\n            + \"WHERE ip.vlanNetwork.id = vn.id \" + \" AND nc.id = vn.configuration.id \"\n            + \" AND vn.id = :vlan_id \" + \" AND vn.network.id = vdc.network.id\"\n            + \" AND vdc.id = :vdc_id \" + \" AND vm is null AND \" + \"( ip.ip like :filterLike \"\n            + \" OR ip.mac like :filterLike \" + \" OR ip.vlanNetwork.name like :filterLike \"\n            + \" OR vapp.name like :filterLike \" + \" OR vm.name like :filterLike \" + \")\"", "var_name": "BY_VLAN_WITHOUT_USED_IPS"}, {"original_string": "private static final String GET_VLAN_ASSIGNED_TO_ANOTHER_VIRTUALMACHINE =\n        \"Select vm \" + \"FROM com.abiquo.server.core.infrastructure.network.IpPoolManagement ip \"\n            + \"INNER JOIN ip.virtualMachine vm \" + \"INNER JOIN ip.vlanNetwork vlan \"\n            + \"WHERE vlan.id = :idVlan \" + \"AND vm.id != :idVm \"\n            + \"AND vm.state != 'NOT_ALLOCATED'\";", "modifier": "private static final", "type": "String", "declarator": "GET_VLAN_ASSIGNED_TO_ANOTHER_VIRTUALMACHINE =\n        \"Select vm \" + \"FROM com.abiquo.server.core.infrastructure.network.IpPoolManagement ip \"\n            + \"INNER JOIN ip.virtualMachine vm \" + \"INNER JOIN ip.vlanNetwork vlan \"\n            + \"WHERE vlan.id = :idVlan \" + \"AND vm.id != :idVm \"\n            + \"AND vm.state != 'NOT_ALLOCATED'\"", "var_name": "GET_VLAN_ASSIGNED_TO_ANOTHER_VIRTUALMACHINE"}, {"original_string": "private final static String GET_IPPOOLMANAGEMENT_ASSIGNED_TO_DIFFERENT_VM_AND_DIFFERENT_FROM_NOT_DEPLOYED_SQL =\n        \"SELECT * \" //\n            + \"FROM ip_pool_management ip, \" //\n            + \"rasd_management rasd \" //\n            + \"JOIN virtualmachine vm \" //\n            + \"ON vm.idVM = rasd.idVM \" + \"WHERE rasd.idManagement = ip.idManagement \" //\n            + \"AND rasd.idVM != :idVM \" //\n            + \"AND ip.vlan_network_id = :idVlanNetwork \" //\n            + \"AND vm.state != 'NOT_DEPLOYED' \" + \"AND ip.idManagement != :ip\";", "modifier": "private final static", "type": "String", "declarator": "GET_IPPOOLMANAGEMENT_ASSIGNED_TO_DIFFERENT_VM_AND_DIFFERENT_FROM_NOT_DEPLOYED_SQL =\n        \"SELECT * \" //\n            + \"FROM ip_pool_management ip, \" //\n            + \"rasd_management rasd \" //\n            + \"JOIN virtualmachine vm \" //\n            + \"ON vm.idVM = rasd.idVM \" + \"WHERE rasd.idManagement = ip.idManagement \" //\n            + \"AND rasd.idVM != :idVM \" //\n            + \"AND ip.vlan_network_id = :idVlanNetwork \" //\n            + \"AND vm.state != 'NOT_DEPLOYED' \" + \"AND ip.idManagement != :ip\"", "var_name": "GET_IPPOOLMANAGEMENT_ASSIGNED_TO_DIFFERENT_VM_AND_DIFFERENT_FROM_NOT_DEPLOYED_SQL"}, {"original_string": "private final static String GET_NETWORK_POOL_PURCHASED_BY_ENTERPRISE =\n        \"SELECT ip \"//\n            + \"FROM com.abiquo.server.core.infrastructure.Datacenter dc \"//\n            + \"INNER JOIN dc.network net, \"//\n            + \"com.abiquo.server.core.infrastructure.network.VLANNetwork vlan, \"//\n            // + \"INNER JOIN vlan.configuration.dhcp dhcp, \"//\n            + \"com.abiquo.server.core.infrastructure.network.IpPoolManagement ip \"//\n            // + \"LEFT JOIN join ip.virtualMachine vm \"//\n            + \"LEFT JOIN ip.virtualAppliance vapp, \"//\n            + \"com.abiquo.server.core.cloud.VirtualDatacenter vdc \"//\n            + \"where net.id = vlan.network.id \"//\n            // + \"and dhcp.id = ip.dhcp.id \"//\n            + \"and ip.vlanNetwork.id = vlan.id \"\n            + \"and dc.id = vdc.datacenter.id \"//\n            + \"and vdc.enterprise.id = :enterpriseId \"\n            + \"and ip.virtualDatacenter.id = vdc.id \"\n            + \"and vlan.type = 'PUBLIC'\";", "modifier": "private final static", "type": "String", "declarator": "GET_NETWORK_POOL_PURCHASED_BY_ENTERPRISE =\n        \"SELECT ip \"//\n            + \"FROM com.abiquo.server.core.infrastructure.Datacenter dc \"//\n            + \"INNER JOIN dc.network net, \"//\n            + \"com.abiquo.server.core.infrastructure.network.VLANNetwork vlan, \"//\n            // + \"INNER JOIN vlan.configuration.dhcp dhcp, \"//\n            + \"com.abiquo.server.core.infrastructure.network.IpPoolManagement ip \"//\n            // + \"LEFT JOIN join ip.virtualMachine vm \"//\n            + \"LEFT JOIN ip.virtualAppliance vapp, \"//\n            + \"com.abiquo.server.core.cloud.VirtualDatacenter vdc \"//\n            + \"where net.id = vlan.network.id \"//\n            // + \"and dhcp.id = ip.dhcp.id \"//\n            + \"and ip.vlanNetwork.id = vlan.id \"\n            + \"and dc.id = vdc.datacenter.id \"//\n            + \"and vdc.enterprise.id = :enterpriseId \"\n            + \"and ip.virtualDatacenter.id = vdc.id \"\n            + \"and vlan.type = 'PUBLIC'\"", "var_name": "GET_NETWORK_POOL_PURCHASED_BY_ENTERPRISE"}, {"original_string": "public static final String GET_IP_INTO_VIRTUALMACHINE =\n        \" SELECT ip FROM IpPoolManagement ip\" + \" WHERE ip.virtualMachine.id = :idVm \"\n            + \" AND ip.id = :idIp \";", "modifier": "public static final", "type": "String", "declarator": "GET_IP_INTO_VIRTUALMACHINE =\n        \" SELECT ip FROM IpPoolManagement ip\" + \" WHERE ip.virtualMachine.id = :idVm \"\n            + \" AND ip.id = :idIp \"", "var_name": "GET_IP_INTO_VIRTUALMACHINE"}], "methods": [{"identifier": "equalMac", "parameters": "(final String mac)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion equalMac(final String mac)", "full_signature": "private static Criterion equalMac(final String mac)", "class_method_signature": "IpPoolManagementDAO.equalMac(final String mac)", "testcase": false, "constructor": false}, {"identifier": "IpPoolManagementDAO", "parameters": "()", "modifiers": "public", "return": "", "signature": " IpPoolManagementDAO()", "full_signature": "public  IpPoolManagementDAO()", "class_method_signature": "IpPoolManagementDAO.IpPoolManagementDAO()", "testcase": false, "constructor": true}, {"identifier": "IpPoolManagementDAO", "parameters": "(final EntityManager entityManager)", "modifiers": "public", "return": "", "signature": " IpPoolManagementDAO(final EntityManager entityManager)", "full_signature": "public  IpPoolManagementDAO(final EntityManager entityManager)", "class_method_signature": "IpPoolManagementDAO.IpPoolManagementDAO(final EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "existsAnyWithMac", "parameters": "(final String mac)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyWithMac(final String mac)", "full_signature": "public boolean existsAnyWithMac(final String mac)", "class_method_signature": "IpPoolManagementDAO.existsAnyWithMac(final String mac)", "testcase": false, "constructor": false}, {"identifier": "findExternalIpsByVlan", "parameters": "(final Integer entId,\n        final Integer datacenterLimitId, final Integer vlanId, Integer startwith,\n        final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, final Boolean onlyAvailable)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findExternalIpsByVlan(final Integer entId,\n        final Integer datacenterLimitId, final Integer vlanId, Integer startwith,\n        final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, final Boolean onlyAvailable)", "full_signature": "public List<IpPoolManagement> findExternalIpsByVlan(final Integer entId,\n        final Integer datacenterLimitId, final Integer vlanId, Integer startwith,\n        final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, final Boolean onlyAvailable)", "class_method_signature": "IpPoolManagementDAO.findExternalIpsByVlan(final Integer entId,\n        final Integer datacenterLimitId, final Integer vlanId, Integer startwith,\n        final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, final Boolean onlyAvailable)", "testcase": false, "constructor": false}, {"identifier": "findFreeIpsByVlan", "parameters": "(final VLANNetwork vlan)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findFreeIpsByVlan(final VLANNetwork vlan)", "full_signature": "public List<IpPoolManagement> findFreeIpsByVlan(final VLANNetwork vlan)", "class_method_signature": "IpPoolManagementDAO.findFreeIpsByVlan(final VLANNetwork vlan)", "testcase": false, "constructor": false}, {"identifier": "findIp", "parameters": "(final VLANNetwork vlan, final Integer ipId)", "modifiers": "public", "return": "IpPoolManagement", "signature": "IpPoolManagement findIp(final VLANNetwork vlan, final Integer ipId)", "full_signature": "public IpPoolManagement findIp(final VLANNetwork vlan, final Integer ipId)", "class_method_signature": "IpPoolManagementDAO.findIp(final VLANNetwork vlan, final Integer ipId)", "testcase": false, "constructor": false}, {"identifier": "findIpsByEnterprise", "parameters": "(final Integer entId, Integer firstElem,\n        final Integer numElem, final String has, final IpPoolManagement.OrderByEnum orderby,\n        final Boolean asc)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByEnterprise(final Integer entId, Integer firstElem,\n        final Integer numElem, final String has, final IpPoolManagement.OrderByEnum orderby,\n        final Boolean asc)", "full_signature": "public List<IpPoolManagement> findIpsByEnterprise(final Integer entId, Integer firstElem,\n        final Integer numElem, final String has, final IpPoolManagement.OrderByEnum orderby,\n        final Boolean asc)", "class_method_signature": "IpPoolManagementDAO.findIpsByEnterprise(final Integer entId, Integer firstElem,\n        final Integer numElem, final String has, final IpPoolManagement.OrderByEnum orderby,\n        final Boolean asc)", "testcase": false, "constructor": false}, {"identifier": "findIpsByNetwork", "parameters": "(final Network network, final Integer vlanId)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByNetwork(final Network network, final Integer vlanId)", "full_signature": "public List<IpPoolManagement> findIpsByNetwork(final Network network, final Integer vlanId)", "class_method_signature": "IpPoolManagementDAO.findIpsByNetwork(final Network network, final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "findIpsByNetwork", "parameters": "(final Network network, final Integer vlanId,\n        final String has)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByNetwork(final Network network, final Integer vlanId,\n        final String has)", "full_signature": "public List<IpPoolManagement> findIpsByNetwork(final Network network, final Integer vlanId,\n        final String has)", "class_method_signature": "IpPoolManagementDAO.findIpsByNetwork(final Network network, final Integer vlanId,\n        final String has)", "testcase": false, "constructor": false}, {"identifier": "findIpsByNetwork", "parameters": "(final Network network, final Integer vlanId,\n        final String has, Integer firstElem, final Integer numElem)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByNetwork(final Network network, final Integer vlanId,\n        final String has, Integer firstElem, final Integer numElem)", "full_signature": "public List<IpPoolManagement> findIpsByNetwork(final Network network, final Integer vlanId,\n        final String has, Integer firstElem, final Integer numElem)", "class_method_signature": "IpPoolManagementDAO.findIpsByNetwork(final Network network, final Integer vlanId,\n        final String has, Integer firstElem, final Integer numElem)", "testcase": false, "constructor": false}, {"identifier": "findIpsByPrivateVLAN", "parameters": "(final Integer vdcId, final Integer vlanId)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByPrivateVLAN(final Integer vdcId, final Integer vlanId)", "full_signature": "public List<IpPoolManagement> findIpsByPrivateVLAN(final Integer vdcId, final Integer vlanId)", "class_method_signature": "IpPoolManagementDAO.findIpsByPrivateVLAN(final Integer vdcId, final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "findIpsByPrivateVLANAvailableFiltered", "parameters": "(final Integer vdcId,\n        final Integer vlanId, Integer firstElem, final Integer numElem, final String has,\n        final IpPoolManagement.OrderByEnum orderby, final Boolean asc)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByPrivateVLANAvailableFiltered(final Integer vdcId,\n        final Integer vlanId, Integer firstElem, final Integer numElem, final String has,\n        final IpPoolManagement.OrderByEnum orderby, final Boolean asc)", "full_signature": "public List<IpPoolManagement> findIpsByPrivateVLANAvailableFiltered(final Integer vdcId,\n        final Integer vlanId, Integer firstElem, final Integer numElem, final String has,\n        final IpPoolManagement.OrderByEnum orderby, final Boolean asc)", "class_method_signature": "IpPoolManagementDAO.findIpsByPrivateVLANAvailableFiltered(final Integer vdcId,\n        final Integer vlanId, Integer firstElem, final Integer numElem, final String has,\n        final IpPoolManagement.OrderByEnum orderby, final Boolean asc)", "testcase": false, "constructor": false}, {"identifier": "findNextIpAvailable", "parameters": "(final Integer vlanId, final String... excludedIps)", "modifiers": "public", "return": "IpPoolManagement", "signature": "IpPoolManagement findNextIpAvailable(final Integer vlanId, final String... excludedIps)", "full_signature": "public IpPoolManagement findNextIpAvailable(final Integer vlanId, final String... excludedIps)", "class_method_signature": "IpPoolManagementDAO.findNextIpAvailable(final Integer vlanId, final String... excludedIps)", "testcase": false, "constructor": false}, {"identifier": "findNextExternalIpAvailable", "parameters": "(final Integer vlanId,\n        final String... excludedIps)", "modifiers": "public", "return": "IpPoolManagement", "signature": "IpPoolManagement findNextExternalIpAvailable(final Integer vlanId,\n        final String... excludedIps)", "full_signature": "public IpPoolManagement findNextExternalIpAvailable(final Integer vlanId,\n        final String... excludedIps)", "class_method_signature": "IpPoolManagementDAO.findNextExternalIpAvailable(final Integer vlanId,\n        final String... excludedIps)", "testcase": false, "constructor": false}, {"identifier": "findIpsByPrivateVLANFiltered", "parameters": "(final Integer vdcId,\n        final Integer vlanId, Integer firstElem, final Integer numElem, final String has,\n        final IpPoolManagement.OrderByEnum orderby, final Boolean asc, final Boolean freeIps)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByPrivateVLANFiltered(final Integer vdcId,\n        final Integer vlanId, Integer firstElem, final Integer numElem, final String has,\n        final IpPoolManagement.OrderByEnum orderby, final Boolean asc, final Boolean freeIps)", "full_signature": "public List<IpPoolManagement> findIpsByPrivateVLANFiltered(final Integer vdcId,\n        final Integer vlanId, Integer firstElem, final Integer numElem, final String has,\n        final IpPoolManagement.OrderByEnum orderby, final Boolean asc, final Boolean freeIps)", "class_method_signature": "IpPoolManagementDAO.findIpsByPrivateVLANFiltered(final Integer vdcId,\n        final Integer vlanId, Integer firstElem, final Integer numElem, final String has,\n        final IpPoolManagement.OrderByEnum orderby, final Boolean asc, final Boolean freeIps)", "testcase": false, "constructor": false}, {"identifier": "findIpsByVdc", "parameters": "(final Integer vdcId, Integer firstElem,\n        final Integer numElem, final String has, final IpPoolManagement.OrderByEnum orderby,\n        final Boolean asc)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByVdc(final Integer vdcId, Integer firstElem,\n        final Integer numElem, final String has, final IpPoolManagement.OrderByEnum orderby,\n        final Boolean asc)", "full_signature": "public List<IpPoolManagement> findIpsByVdc(final Integer vdcId, Integer firstElem,\n        final Integer numElem, final String has, final IpPoolManagement.OrderByEnum orderby,\n        final Boolean asc)", "class_method_signature": "IpPoolManagementDAO.findIpsByVdc(final Integer vdcId, Integer firstElem,\n        final Integer numElem, final String has, final IpPoolManagement.OrderByEnum orderby,\n        final Boolean asc)", "testcase": false, "constructor": false}, {"identifier": "findIpsByVirtualAppliance", "parameters": "(final VirtualAppliance vapp)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByVirtualAppliance(final VirtualAppliance vapp)", "full_signature": "public List<IpPoolManagement> findIpsByVirtualAppliance(final VirtualAppliance vapp)", "class_method_signature": "IpPoolManagementDAO.findIpsByVirtualAppliance(final VirtualAppliance vapp)", "testcase": false, "constructor": false}, {"identifier": "findIpsByVirtualMachine", "parameters": "(final VirtualMachine virtualMachine)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByVirtualMachine(final VirtualMachine virtualMachine)", "full_signature": "public List<IpPoolManagement> findIpsByVirtualMachine(final VirtualMachine virtualMachine)", "class_method_signature": "IpPoolManagementDAO.findIpsByVirtualMachine(final VirtualMachine virtualMachine)", "testcase": false, "constructor": false}, {"identifier": "findIpByVirtualMachine", "parameters": "(final VirtualMachine vm, final Integer nicId)", "modifiers": "public", "return": "IpPoolManagement", "signature": "IpPoolManagement findIpByVirtualMachine(final VirtualMachine vm, final Integer nicId)", "full_signature": "public IpPoolManagement findIpByVirtualMachine(final VirtualMachine vm, final Integer nicId)", "class_method_signature": "IpPoolManagementDAO.findIpByVirtualMachine(final VirtualMachine vm, final Integer nicId)", "testcase": false, "constructor": false}, {"identifier": "findIpsByVirtualMachineWithConfigurationId", "parameters": "(final VirtualMachine vm)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByVirtualMachineWithConfigurationId(final VirtualMachine vm)", "full_signature": "public List<IpPoolManagement> findIpsByVirtualMachineWithConfigurationId(final VirtualMachine vm)", "class_method_signature": "IpPoolManagementDAO.findIpsByVirtualMachineWithConfigurationId(final VirtualMachine vm)", "testcase": false, "constructor": false}, {"identifier": "findIpsByVlan", "parameters": "(final VLANNetwork vlan)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByVlan(final VLANNetwork vlan)", "full_signature": "public List<IpPoolManagement> findIpsByVlan(final VLANNetwork vlan)", "class_method_signature": "IpPoolManagementDAO.findIpsByVlan(final VLANNetwork vlan)", "testcase": false, "constructor": false}, {"identifier": "findPublicIpPurchasedByVirtualDatacenter", "parameters": "(final Integer vdcId,\n        final Integer ipId)", "modifiers": "public", "return": "IpPoolManagement", "signature": "IpPoolManagement findPublicIpPurchasedByVirtualDatacenter(final Integer vdcId,\n        final Integer ipId)", "full_signature": "public IpPoolManagement findPublicIpPurchasedByVirtualDatacenter(final Integer vdcId,\n        final Integer ipId)", "class_method_signature": "IpPoolManagementDAO.findPublicIpPurchasedByVirtualDatacenter(final Integer vdcId,\n        final Integer ipId)", "testcase": false, "constructor": false}, {"identifier": "findPublicIpsByDatacenter", "parameters": "(final Integer datacenterId,\n        Integer startwith, final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, NetworkType type, final Boolean all)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findPublicIpsByDatacenter(final Integer datacenterId,\n        Integer startwith, final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, NetworkType type, final Boolean all)", "full_signature": "public List<IpPoolManagement> findPublicIpsByDatacenter(final Integer datacenterId,\n        Integer startwith, final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, NetworkType type, final Boolean all)", "class_method_signature": "IpPoolManagementDAO.findPublicIpsByDatacenter(final Integer datacenterId,\n        Integer startwith, final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, NetworkType type, final Boolean all)", "testcase": false, "constructor": false}, {"identifier": "findPublicIpsByEnterpriseAndDatacenter", "parameters": "(\n        final Integer datacenterId, final Integer enterpriseId, Integer startwith,\n        final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, NetworkType type, final Boolean all)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findPublicIpsByEnterpriseAndDatacenter(\n        final Integer datacenterId, final Integer enterpriseId, Integer startwith,\n        final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, NetworkType type, final Boolean all)", "full_signature": "public List<IpPoolManagement> findPublicIpsByEnterpriseAndDatacenter(\n        final Integer datacenterId, final Integer enterpriseId, Integer startwith,\n        final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, NetworkType type, final Boolean all)", "class_method_signature": "IpPoolManagementDAO.findPublicIpsByEnterpriseAndDatacenter(\n        final Integer datacenterId, final Integer enterpriseId, Integer startwith,\n        final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc, NetworkType type, final Boolean all)", "testcase": false, "constructor": false}, {"identifier": "findPublicIpsByVlan", "parameters": "(final Integer datacenterId,\n        final Integer vlanId, Integer startwith, final Integer limit, final String filter,\n        final OrderByEnum orderByEnum, final Boolean descOrAsc, final Boolean all)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findPublicIpsByVlan(final Integer datacenterId,\n        final Integer vlanId, Integer startwith, final Integer limit, final String filter,\n        final OrderByEnum orderByEnum, final Boolean descOrAsc, final Boolean all)", "full_signature": "public List<IpPoolManagement> findPublicIpsByVlan(final Integer datacenterId,\n        final Integer vlanId, Integer startwith, final Integer limit, final String filter,\n        final OrderByEnum orderByEnum, final Boolean descOrAsc, final Boolean all)", "class_method_signature": "IpPoolManagementDAO.findPublicIpsByVlan(final Integer datacenterId,\n        final Integer vlanId, Integer startwith, final Integer limit, final String filter,\n        final OrderByEnum orderByEnum, final Boolean descOrAsc, final Boolean all)", "testcase": false, "constructor": false}, {"identifier": "findpublicIpsPurchasedByVirtualDatacenter", "parameters": "(final Integer vdcId,\n        final Boolean onlyAvailabe, Integer startwith, final Integer limit, final String filter,\n        final OrderByEnum orderByEnum, final Boolean descOrAsc)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findpublicIpsPurchasedByVirtualDatacenter(final Integer vdcId,\n        final Boolean onlyAvailabe, Integer startwith, final Integer limit, final String filter,\n        final OrderByEnum orderByEnum, final Boolean descOrAsc)", "full_signature": "public List<IpPoolManagement> findpublicIpsPurchasedByVirtualDatacenter(final Integer vdcId,\n        final Boolean onlyAvailabe, Integer startwith, final Integer limit, final String filter,\n        final OrderByEnum orderByEnum, final Boolean descOrAsc)", "class_method_signature": "IpPoolManagementDAO.findpublicIpsPurchasedByVirtualDatacenter(final Integer vdcId,\n        final Boolean onlyAvailabe, Integer startwith, final Integer limit, final String filter,\n        final OrderByEnum orderByEnum, final Boolean descOrAsc)", "testcase": false, "constructor": false}, {"identifier": "findPublicIpsPurchasedByVlan", "parameters": "(final VLANNetwork vlan)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findPublicIpsPurchasedByVlan(final VLANNetwork vlan)", "full_signature": "public List<IpPoolManagement> findPublicIpsPurchasedByVlan(final VLANNetwork vlan)", "class_method_signature": "IpPoolManagementDAO.findPublicIpsPurchasedByVlan(final VLANNetwork vlan)", "testcase": false, "constructor": false}, {"identifier": "findpublicIpsToPurchaseByVirtualDatacenter", "parameters": "(final Integer vdcId,\n        Integer startwith, final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findpublicIpsToPurchaseByVirtualDatacenter(final Integer vdcId,\n        Integer startwith, final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc)", "full_signature": "public List<IpPoolManagement> findpublicIpsToPurchaseByVirtualDatacenter(final Integer vdcId,\n        Integer startwith, final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc)", "class_method_signature": "IpPoolManagementDAO.findpublicIpsToPurchaseByVirtualDatacenter(final Integer vdcId,\n        Integer startwith, final Integer limit, final String filter, final OrderByEnum orderByEnum,\n        final Boolean descOrAsc)", "testcase": false, "constructor": false}, {"identifier": "findPublicIpToPurchaseByVirtualDatacenter", "parameters": "(final Integer vdcId,\n        final Integer ipId)", "modifiers": "public", "return": "IpPoolManagement", "signature": "IpPoolManagement findPublicIpToPurchaseByVirtualDatacenter(final Integer vdcId,\n        final Integer ipId)", "full_signature": "public IpPoolManagement findPublicIpToPurchaseByVirtualDatacenter(final Integer vdcId,\n        final Integer ipId)", "class_method_signature": "IpPoolManagementDAO.findPublicIpToPurchaseByVirtualDatacenter(final Integer vdcId,\n        final Integer ipId)", "testcase": false, "constructor": false}, {"identifier": "findUsedIpsByPrivateVLAN", "parameters": "(final Integer vlanId)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findUsedIpsByPrivateVLAN(final Integer vlanId)", "full_signature": "public List<IpPoolManagement> findUsedIpsByPrivateVLAN(final Integer vlanId)", "class_method_signature": "IpPoolManagementDAO.findUsedIpsByPrivateVLAN(final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "findUsedIpsByPrivateVLAN", "parameters": "(final Integer vdcId, final Integer vlanId)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findUsedIpsByPrivateVLAN(final Integer vdcId, final Integer vlanId)", "full_signature": "public List<IpPoolManagement> findUsedIpsByPrivateVLAN(final Integer vdcId, final Integer vlanId)", "class_method_signature": "IpPoolManagementDAO.findUsedIpsByPrivateVLAN(final Integer vdcId, final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "getAllMacs", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getAllMacs()", "full_signature": "public Collection<String> getAllMacs()", "class_method_signature": "IpPoolManagementDAO.getAllMacs()", "testcase": false, "constructor": false}, {"identifier": "getPublicNetworkPoolPurchasedByEnterprise", "parameters": "(\n        final Integer enterpriseId)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> getPublicNetworkPoolPurchasedByEnterprise(\n        final Integer enterpriseId)", "full_signature": "public List<IpPoolManagement> getPublicNetworkPoolPurchasedByEnterprise(\n        final Integer enterpriseId)", "class_method_signature": "IpPoolManagementDAO.getPublicNetworkPoolPurchasedByEnterprise(\n        final Integer enterpriseId)", "testcase": false, "constructor": false}, {"identifier": "isDefaultNetworkofanyVDC", "parameters": "(final Integer vlanId)", "modifiers": "public", "return": "boolean", "signature": "boolean isDefaultNetworkofanyVDC(final Integer vlanId)", "full_signature": "public boolean isDefaultNetworkofanyVDC(final Integer vlanId)", "class_method_signature": "IpPoolManagementDAO.isDefaultNetworkofanyVDC(final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "isVlanAssignedToDifferentVM", "parameters": "(final Integer virtualMachineId,\n        final VLANNetwork vlanNetwork)", "modifiers": "public", "return": "Boolean", "signature": "Boolean isVlanAssignedToDifferentVM(final Integer virtualMachineId,\n        final VLANNetwork vlanNetwork)", "full_signature": "public Boolean isVlanAssignedToDifferentVM(final Integer virtualMachineId,\n        final VLANNetwork vlanNetwork)", "class_method_signature": "IpPoolManagementDAO.isVlanAssignedToDifferentVM(final Integer virtualMachineId,\n        final VLANNetwork vlanNetwork)", "testcase": false, "constructor": false}, {"identifier": "privateVLANinUseByAnyVDC", "parameters": "(final Integer vlanId)", "modifiers": "public", "return": "boolean", "signature": "boolean privateVLANinUseByAnyVDC(final Integer vlanId)", "full_signature": "public boolean privateVLANinUseByAnyVDC(final Integer vlanId)", "class_method_signature": "IpPoolManagementDAO.privateVLANinUseByAnyVDC(final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "defineAllFilter", "parameters": "(final Boolean all)", "modifiers": "private", "return": "String", "signature": "String defineAllFilter(final Boolean all)", "full_signature": "private String defineAllFilter(final Boolean all)", "class_method_signature": "IpPoolManagementDAO.defineAllFilter(final Boolean all)", "testcase": false, "constructor": false}, {"identifier": "defineFilterAvailable", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String defineFilterAvailable()", "full_signature": "private String defineFilterAvailable()", "class_method_signature": "IpPoolManagementDAO.defineFilterAvailable()", "testcase": false, "constructor": false}, {"identifier": "defineFilterUsed", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String defineFilterUsed()", "full_signature": "private String defineFilterUsed()", "class_method_signature": "IpPoolManagementDAO.defineFilterUsed()", "testcase": false, "constructor": false}, {"identifier": "defineOnlyAvailableFilter", "parameters": "(final Boolean onlyAvailable)", "modifiers": "private", "return": "String", "signature": "String defineOnlyAvailableFilter(final Boolean onlyAvailable)", "full_signature": "private String defineOnlyAvailableFilter(final Boolean onlyAvailable)", "class_method_signature": "IpPoolManagementDAO.defineOnlyAvailableFilter(final Boolean onlyAvailable)", "testcase": false, "constructor": false}, {"identifier": "defineOrderBy", "parameters": "(final IpPoolManagement.OrderByEnum orderBy, final Boolean asc)", "modifiers": "private", "return": "String", "signature": "String defineOrderBy(final IpPoolManagement.OrderByEnum orderBy, final Boolean asc)", "full_signature": "private String defineOrderBy(final IpPoolManagement.OrderByEnum orderBy, final Boolean asc)", "class_method_signature": "IpPoolManagementDAO.defineOrderBy(final IpPoolManagement.OrderByEnum orderBy, final Boolean asc)", "testcase": false, "constructor": false}], "file": "model/src/main/java/com/abiquo/server/core/infrastructure/network/IpPoolManagementDAO.java"}, "focal_method": {"identifier": "findNextIpAvailable", "parameters": "(final Integer vlanId, final String... excludedIps)", "modifiers": "public", "return": "IpPoolManagement", "body": "public IpPoolManagement findNextIpAvailable(final Integer vlanId, final String... excludedIps)\n    {\n        // Get the query that counts the total results.\n        Query query =\n            getSession().createQuery(\n                BY_VLAN_NEXT_AVAILABLE\n                    + defineOrderBy(IpPoolManagement.OrderByEnum.IP, Boolean.TRUE));\n        query.setMaxResults(1);\n        query.setParameter(\"vlan_id\", vlanId);\n        // query.setLockMode(\"next_ip\", LockMode.PESSIMISTIC_WRITE);\n        if (excludedIps != null && excludedIps.length != 0)\n        {\n            query.setParameterList(\"excludedIp\", Arrays.asList(excludedIps));\n        }\n        else\n        {\n            query.setString(\"excludedIp\", null);\n        }\n        List<IpPoolManagement> result = query.list();\n\n        return result.isEmpty() ? null : result.get(0);\n    }", "signature": "IpPoolManagement findNextIpAvailable(final Integer vlanId, final String... excludedIps)", "full_signature": "public IpPoolManagement findNextIpAvailable(final Integer vlanId, final String... excludedIps)", "class_method_signature": "IpPoolManagementDAO.findNextIpAvailable(final Integer vlanId, final String... excludedIps)", "testcase": false, "constructor": false, "invocations": ["createQuery", "getSession", "defineOrderBy", "setMaxResults", "setParameter", "setParameterList", "asList", "setString", "list", "isEmpty", "get"]}, "repository": {"repo_id": 1320181, "url": "https://github.com/abiquo/abiquo", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 25, "size": 82580, "license": "licensed"}}