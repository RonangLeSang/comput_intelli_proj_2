{"test_class": {"identifier": "VirtualMachineTemplateDAOTest", "superclass": "extends\n    DefaultDAOTestBase<VirtualMachineTemplateDAO, VirtualMachineTemplate>", "interfaces": "", "fields": [{"original_string": "private EnterpriseGenerator enterpriseGenerator;", "modifier": "private", "type": "EnterpriseGenerator", "declarator": "enterpriseGenerator", "var_name": "enterpriseGenerator"}, {"original_string": "private RepositoryGenerator repositoryGenerator;", "modifier": "private", "type": "RepositoryGenerator", "declarator": "repositoryGenerator", "var_name": "repositoryGenerator"}, {"original_string": "private VirtualImageConversionGenerator conversionGenerator;", "modifier": "private", "type": "VirtualImageConversionGenerator", "declarator": "conversionGenerator", "var_name": "conversionGenerator"}, {"original_string": "private VolumeManagementGenerator volumeGenerator;", "modifier": "private", "type": "VolumeManagementGenerator", "declarator": "volumeGenerator", "var_name": "volumeGenerator"}, {"original_string": "private DatacenterGenerator datacenterGenerator;", "modifier": "private", "type": "DatacenterGenerator", "declarator": "datacenterGenerator", "var_name": "datacenterGenerator"}, {"original_string": "private CategoryGenerator categoryGenerator;", "modifier": "private", "type": "CategoryGenerator", "declarator": "categoryGenerator", "var_name": "categoryGenerator"}, {"original_string": "private VirtualDatacenterGenerator virtualDatacenterGenerator;", "modifier": "private", "type": "VirtualDatacenterGenerator", "declarator": "virtualDatacenterGenerator", "var_name": "virtualDatacenterGenerator"}], "file": "model/src/test/java/com/abiquo/server/core/appslibrary/VirtualMachineTemplateDAOTest.java"}, "test_case": {"identifier": "testFindStatefulsByCategoryAndDatacenter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindStatefulsByCategoryAndDatacenter()\n    {\n        VolumeManagement statefulVolume = volumeGenerator.createStatefulInstance();\n\n        List<Object> entitiesToPersist = new ArrayList<Object>();\n        volumeGenerator.addAuxiliaryEntitiesToPersist(statefulVolume, entitiesToPersist);\n        persistAll(ds(), entitiesToPersist, statefulVolume);\n\n        Datacenter datacenter = statefulVolume.getStoragePool().getDevice().getDatacenter();\n        Category category = statefulVolume.getVirtualMachineTemplate().getCategory();\n\n        VirtualMachineTemplateDAO dao = createDaoForRollbackTransaction();\n        List<VirtualMachineTemplate> templates =\n            dao.findStatefulsByCategoryAndDatacenter(category, datacenter, StatefulInclusion.ALL);\n        assertEquals(templates.size(), 1);\n    }", "signature": "void testFindStatefulsByCategoryAndDatacenter()", "full_signature": "@Test public void testFindStatefulsByCategoryAndDatacenter()", "class_method_signature": "VirtualMachineTemplateDAOTest.testFindStatefulsByCategoryAndDatacenter()", "testcase": true, "constructor": false, "invocations": ["createStatefulInstance", "addAuxiliaryEntitiesToPersist", "persistAll", "ds", "getDatacenter", "getDevice", "getStoragePool", "getCategory", "getVirtualMachineTemplate", "createDaoForRollbackTransaction", "findStatefulsByCategoryAndDatacenter", "assertEquals", "size"]}, "focal_class": {"identifier": "VirtualMachineTemplateDAO", "superclass": "extends\n    DefaultDAOBase<Integer, VirtualMachineTemplate>", "interfaces": "", "fields": [{"original_string": "private final String FIND_ICONS_BY_ENTERPRISE = \" SELECT distinct vtd.iconUrl \"//\n        + \"FROM com.abiquo.server.core.appslibrary.VirtualMachineTemplate vtd \"//\n        + \"WHERE vtd.enterprise.id = :enterpriseId\";", "modifier": "private final", "type": "String", "declarator": "FIND_ICONS_BY_ENTERPRISE = \" SELECT distinct vtd.iconUrl \"//\n        + \"FROM com.abiquo.server.core.appslibrary.VirtualMachineTemplate vtd \"//\n        + \"WHERE vtd.enterprise.id = :enterpriseId\"", "var_name": "FIND_ICONS_BY_ENTERPRISE"}], "methods": [{"identifier": "VirtualMachineTemplateDAO", "parameters": "()", "modifiers": "public", "return": "", "signature": " VirtualMachineTemplateDAO()", "full_signature": "public  VirtualMachineTemplateDAO()", "class_method_signature": "VirtualMachineTemplateDAO.VirtualMachineTemplateDAO()", "testcase": false, "constructor": true}, {"identifier": "VirtualMachineTemplateDAO", "parameters": "(final EntityManager entityManager)", "modifiers": "public", "return": "", "signature": " VirtualMachineTemplateDAO(final EntityManager entityManager)", "full_signature": "public  VirtualMachineTemplateDAO(final EntityManager entityManager)", "class_method_signature": "VirtualMachineTemplateDAO.VirtualMachineTemplateDAO(final EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "findByEnterprise", "parameters": "(final Enterprise enterprise)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findByEnterprise(final Enterprise enterprise)", "full_signature": "public List<VirtualMachineTemplate> findByEnterprise(final Enterprise enterprise)", "class_method_signature": "VirtualMachineTemplateDAO.findByEnterprise(final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "findByEnterpriseAndRepository", "parameters": "(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findByEnterpriseAndRepository(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository)", "full_signature": "public List<VirtualMachineTemplate> findByEnterpriseAndRepository(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository)", "class_method_signature": "VirtualMachineTemplateDAO.findByEnterpriseAndRepository(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository)", "testcase": false, "constructor": false}, {"identifier": "findImportedByEnterprise", "parameters": "(final Enterprise enterprise)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findImportedByEnterprise(final Enterprise enterprise)", "full_signature": "public List<VirtualMachineTemplate> findImportedByEnterprise(final Enterprise enterprise)", "class_method_signature": "VirtualMachineTemplateDAO.findImportedByEnterprise(final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "findBy", "parameters": "(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final Category category,\n        final HypervisorType hypervisor)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findBy(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final Category category,\n        final HypervisorType hypervisor)", "full_signature": "public List<VirtualMachineTemplate> findBy(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final Category category,\n        final HypervisorType hypervisor)", "class_method_signature": "VirtualMachineTemplateDAO.findBy(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final Category category,\n        final HypervisorType hypervisor)", "testcase": false, "constructor": false}, {"identifier": "findBy", "parameters": "(final Category category)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findBy(final Category category)", "full_signature": "public List<VirtualMachineTemplate> findBy(final Category category)", "class_method_signature": "VirtualMachineTemplateDAO.findBy(final Category category)", "testcase": false, "constructor": false}, {"identifier": "distinct", "parameters": "(final List<VirtualMachineTemplate> ins)", "modifiers": "private", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> distinct(final List<VirtualMachineTemplate> ins)", "full_signature": "private List<VirtualMachineTemplate> distinct(final List<VirtualMachineTemplate> ins)", "class_method_signature": "VirtualMachineTemplateDAO.distinct(final List<VirtualMachineTemplate> ins)", "testcase": false, "constructor": false}, {"identifier": "findImportedBy", "parameters": "(final Enterprise enterprise,\n        final Category category, final HypervisorType hypervisor)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findImportedBy(final Enterprise enterprise,\n        final Category category, final HypervisorType hypervisor)", "full_signature": "public List<VirtualMachineTemplate> findImportedBy(final Enterprise enterprise,\n        final Category category, final HypervisorType hypervisor)", "class_method_signature": "VirtualMachineTemplateDAO.findImportedBy(final Enterprise enterprise,\n        final Category category, final HypervisorType hypervisor)", "testcase": false, "constructor": false}, {"identifier": "importedVirtualMachineTemplate", "parameters": "(final Enterprise enterprise)", "modifiers": "private", "return": "Criterion", "signature": "Criterion importedVirtualMachineTemplate(final Enterprise enterprise)", "full_signature": "private Criterion importedVirtualMachineTemplate(final Enterprise enterprise)", "class_method_signature": "VirtualMachineTemplateDAO.importedVirtualMachineTemplate(final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "compatibleOrConversions", "parameters": "(final HypervisorType hypervisorType,\n        final Criteria criteria)", "modifiers": "private", "return": "Criterion", "signature": "Criterion compatibleOrConversions(final HypervisorType hypervisorType,\n        final Criteria criteria)", "full_signature": "private Criterion compatibleOrConversions(final HypervisorType hypervisorType,\n        final Criteria criteria)", "class_method_signature": "VirtualMachineTemplateDAO.compatibleOrConversions(final HypervisorType hypervisorType,\n        final Criteria criteria)", "testcase": false, "constructor": false}, {"identifier": "compatible", "parameters": "(final Collection<DiskFormatType> types)", "modifiers": "private", "return": "Criterion", "signature": "Criterion compatible(final Collection<DiskFormatType> types)", "full_signature": "private Criterion compatible(final Collection<DiskFormatType> types)", "class_method_signature": "VirtualMachineTemplateDAO.compatible(final Collection<DiskFormatType> types)", "testcase": false, "constructor": false}, {"identifier": "compatibleConversions", "parameters": "(final Collection<DiskFormatType> types,\n        final Criteria criteria)", "modifiers": "private", "return": "Criterion", "signature": "Criterion compatibleConversions(final Collection<DiskFormatType> types,\n        final Criteria criteria)", "full_signature": "private Criterion compatibleConversions(final Collection<DiskFormatType> types,\n        final Criteria criteria)", "class_method_signature": "VirtualMachineTemplateDAO.compatibleConversions(final Collection<DiskFormatType> types,\n        final Criteria criteria)", "testcase": false, "constructor": false}, {"identifier": "findByName", "parameters": "(final String name)", "modifiers": "public", "return": "VirtualMachineTemplate", "signature": "VirtualMachineTemplate findByName(final String name)", "full_signature": "public VirtualMachineTemplate findByName(final String name)", "class_method_signature": "VirtualMachineTemplateDAO.findByName(final String name)", "testcase": false, "constructor": false}, {"identifier": "findByPath", "parameters": "(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "modifiers": "public", "return": "VirtualMachineTemplate", "signature": "VirtualMachineTemplate findByPath(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "full_signature": "public VirtualMachineTemplate findByPath(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "class_method_signature": "VirtualMachineTemplateDAO.findByPath(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "testcase": false, "constructor": false}, {"identifier": "existWithSamePath", "parameters": "(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "modifiers": "public", "return": "boolean", "signature": "boolean existWithSamePath(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "full_signature": "public boolean existWithSamePath(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "class_method_signature": "VirtualMachineTemplateDAO.existWithSamePath(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "testcase": false, "constructor": false}, {"identifier": "findStatefuls", "parameters": "()", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findStatefuls()", "full_signature": "public List<VirtualMachineTemplate> findStatefuls()", "class_method_signature": "VirtualMachineTemplateDAO.findStatefuls()", "testcase": false, "constructor": false}, {"identifier": "findStatefulsByDatacenter", "parameters": "(final Datacenter datacenter,\n        final StatefulInclusion stateful)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findStatefulsByDatacenter(final Datacenter datacenter,\n        final StatefulInclusion stateful)", "full_signature": "public List<VirtualMachineTemplate> findStatefulsByDatacenter(final Datacenter datacenter,\n        final StatefulInclusion stateful)", "class_method_signature": "VirtualMachineTemplateDAO.findStatefulsByDatacenter(final Datacenter datacenter,\n        final StatefulInclusion stateful)", "testcase": false, "constructor": false}, {"identifier": "findStatefulsByDatacenter", "parameters": "(final Datacenter datacenter,\n        final VirtualDatacenter vdc, final StatefulInclusion stateful)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findStatefulsByDatacenter(final Datacenter datacenter,\n        final VirtualDatacenter vdc, final StatefulInclusion stateful)", "full_signature": "public List<VirtualMachineTemplate> findStatefulsByDatacenter(final Datacenter datacenter,\n        final VirtualDatacenter vdc, final StatefulInclusion stateful)", "class_method_signature": "VirtualMachineTemplateDAO.findStatefulsByDatacenter(final Datacenter datacenter,\n        final VirtualDatacenter vdc, final StatefulInclusion stateful)", "testcase": false, "constructor": false}, {"identifier": "findStatefulsByCategoryAndDatacenter", "parameters": "(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)", "full_signature": "public List<VirtualMachineTemplate> findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)", "class_method_signature": "VirtualMachineTemplateDAO.findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)", "testcase": false, "constructor": false}, {"identifier": "findStatefulsByCategoryAndDatacenter", "parameters": "(\n        final Category category, final Datacenter datacenter, final VirtualDatacenter vdc,\n        final StatefulInclusion stateful)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final VirtualDatacenter vdc,\n        final StatefulInclusion stateful)", "full_signature": "public List<VirtualMachineTemplate> findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final VirtualDatacenter vdc,\n        final StatefulInclusion stateful)", "class_method_signature": "VirtualMachineTemplateDAO.findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final VirtualDatacenter vdc,\n        final StatefulInclusion stateful)", "testcase": false, "constructor": false}, {"identifier": "findByMaster", "parameters": "(final VirtualMachineTemplate master)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "signature": "List<VirtualMachineTemplate> findByMaster(final VirtualMachineTemplate master)", "full_signature": "public List<VirtualMachineTemplate> findByMaster(final VirtualMachineTemplate master)", "class_method_signature": "VirtualMachineTemplateDAO.findByMaster(final VirtualMachineTemplate master)", "testcase": false, "constructor": false}, {"identifier": "isMaster", "parameters": "(final VirtualMachineTemplate vmtemplate)", "modifiers": "public", "return": "boolean", "signature": "boolean isMaster(final VirtualMachineTemplate vmtemplate)", "full_signature": "public boolean isMaster(final VirtualMachineTemplate vmtemplate)", "class_method_signature": "VirtualMachineTemplateDAO.isMaster(final VirtualMachineTemplate vmtemplate)", "testcase": false, "constructor": false}, {"identifier": "sameCategory", "parameters": "(final Category category)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameCategory(final Category category)", "full_signature": "private static Criterion sameCategory(final Category category)", "class_method_signature": "VirtualMachineTemplateDAO.sameCategory(final Category category)", "testcase": false, "constructor": false}, {"identifier": "sameEnterprise", "parameters": "(final Enterprise enterprise)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameEnterprise(final Enterprise enterprise)", "full_signature": "private static Criterion sameEnterprise(final Enterprise enterprise)", "class_method_signature": "VirtualMachineTemplateDAO.sameEnterprise(final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "sameRepositoryAndNotStatefull", "parameters": "(\n        final com.abiquo.server.core.infrastructure.Repository repository)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameRepositoryAndNotStatefull(\n        final com.abiquo.server.core.infrastructure.Repository repository)", "full_signature": "private static Criterion sameRepositoryAndNotStatefull(\n        final com.abiquo.server.core.infrastructure.Repository repository)", "class_method_signature": "VirtualMachineTemplateDAO.sameRepositoryAndNotStatefull(\n        final com.abiquo.server.core.infrastructure.Repository repository)", "testcase": false, "constructor": false}, {"identifier": "repositoryNull", "parameters": "()", "modifiers": "private static", "return": "Criterion", "signature": "Criterion repositoryNull()", "full_signature": "private static Criterion repositoryNull()", "class_method_signature": "VirtualMachineTemplateDAO.repositoryNull()", "testcase": false, "constructor": false}, {"identifier": "sharedVirtualMachineTemplate", "parameters": "()", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sharedVirtualMachineTemplate()", "full_signature": "private static Criterion sharedVirtualMachineTemplate()", "class_method_signature": "VirtualMachineTemplateDAO.sharedVirtualMachineTemplate()", "testcase": false, "constructor": false}, {"identifier": "statefulVirtualMachineTemplate", "parameters": "(final StatefulInclusion stateful,\n        final Criteria criteria)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion statefulVirtualMachineTemplate(final StatefulInclusion stateful,\n        final Criteria criteria)", "full_signature": "private static Criterion statefulVirtualMachineTemplate(final StatefulInclusion stateful,\n        final Criteria criteria)", "class_method_signature": "VirtualMachineTemplateDAO.statefulVirtualMachineTemplate(final StatefulInclusion stateful,\n        final Criteria criteria)", "testcase": false, "constructor": false}, {"identifier": "sameEnterpriseOrShared", "parameters": "(final Enterprise enterprise)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameEnterpriseOrShared(final Enterprise enterprise)", "full_signature": "private static Criterion sameEnterpriseOrShared(final Enterprise enterprise)", "class_method_signature": "VirtualMachineTemplateDAO.sameEnterpriseOrShared(final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "sameEnterpriseOrSharedInRepo", "parameters": "(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameEnterpriseOrSharedInRepo(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository)", "full_signature": "private static Criterion sameEnterpriseOrSharedInRepo(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository)", "class_method_signature": "VirtualMachineTemplateDAO.sameEnterpriseOrSharedInRepo(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository)", "testcase": false, "constructor": false}, {"identifier": "sameEnterpriseOrSharedInRepo", "parameters": "(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameEnterpriseOrSharedInRepo(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "full_signature": "private static Criterion sameEnterpriseOrSharedInRepo(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "class_method_signature": "VirtualMachineTemplateDAO.sameEnterpriseOrSharedInRepo(final Enterprise enterprise,\n        final com.abiquo.server.core.infrastructure.Repository repository, final String path)", "testcase": false, "constructor": false}, {"identifier": "sameMaster", "parameters": "(final VirtualMachineTemplate vmtemplate)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameMaster(final VirtualMachineTemplate vmtemplate)", "full_signature": "private static Criterion sameMaster(final VirtualMachineTemplate vmtemplate)", "class_method_signature": "VirtualMachineTemplateDAO.sameMaster(final VirtualMachineTemplate vmtemplate)", "testcase": false, "constructor": false}, {"identifier": "sameStatefulDatacenter", "parameters": "(final Datacenter datacenter)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameStatefulDatacenter(final Datacenter datacenter)", "full_signature": "private static Criterion sameStatefulDatacenter(final Datacenter datacenter)", "class_method_signature": "VirtualMachineTemplateDAO.sameStatefulDatacenter(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "sameStatefulVirtualDatacenter", "parameters": "(final VirtualDatacenter virtualDatacenter)", "modifiers": "private static", "return": "Criterion", "signature": "Criterion sameStatefulVirtualDatacenter(final VirtualDatacenter virtualDatacenter)", "full_signature": "private static Criterion sameStatefulVirtualDatacenter(final VirtualDatacenter virtualDatacenter)", "class_method_signature": "VirtualMachineTemplateDAO.sameStatefulVirtualDatacenter(final VirtualDatacenter virtualDatacenter)", "testcase": false, "constructor": false}, {"identifier": "findIconsByEnterprise", "parameters": "(final Integer enterpriseId)", "modifiers": "public", "return": "List<String>", "signature": "List<String> findIconsByEnterprise(final Integer enterpriseId)", "full_signature": "public List<String> findIconsByEnterprise(final Integer enterpriseId)", "class_method_signature": "VirtualMachineTemplateDAO.findIconsByEnterprise(final Integer enterpriseId)", "testcase": false, "constructor": false}, {"identifier": "criteriaWithStatefulNavigation", "parameters": "()", "modifiers": "private", "return": "Criteria", "signature": "Criteria criteriaWithStatefulNavigation()", "full_signature": "private Criteria criteriaWithStatefulNavigation()", "class_method_signature": "VirtualMachineTemplateDAO.criteriaWithStatefulNavigation()", "testcase": false, "constructor": false}], "file": "model/src/main/java/com/abiquo/server/core/appslibrary/VirtualMachineTemplateDAO.java"}, "focal_method": {"identifier": "findStatefulsByCategoryAndDatacenter", "parameters": "(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)", "modifiers": "public", "return": "List<VirtualMachineTemplate>", "body": "public List<VirtualMachineTemplate> findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)\n    {\n        return findStatefulsByCategoryAndDatacenter(category, datacenter, null, stateful);\n    }", "signature": "List<VirtualMachineTemplate> findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)", "full_signature": "public List<VirtualMachineTemplate> findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)", "class_method_signature": "VirtualMachineTemplateDAO.findStatefulsByCategoryAndDatacenter(\n        final Category category, final Datacenter datacenter, final StatefulInclusion stateful)", "testcase": false, "constructor": false, "invocations": ["findStatefulsByCategoryAndDatacenter"]}, "repository": {"repo_id": 1320181, "url": "https://github.com/abiquo/abiquo", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 25, "size": 82580, "license": "licensed"}}