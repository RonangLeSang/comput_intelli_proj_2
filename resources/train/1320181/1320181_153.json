{"test_class": {"identifier": "InfrastructureRepTest", "superclass": "extends DefaultJpaDataAccessTestBase", "interfaces": "", "fields": [{"original_string": "private DatacenterGenerator eg;", "modifier": "private", "type": "DatacenterGenerator", "declarator": "eg", "var_name": "eg"}, {"original_string": "private MachineGenerator machineGenerator;", "modifier": "private", "type": "MachineGenerator", "declarator": "machineGenerator", "var_name": "machineGenerator"}, {"original_string": "HypervisorGenerator hypervisorGenerator;", "modifier": "", "type": "HypervisorGenerator", "declarator": "hypervisorGenerator", "var_name": "hypervisorGenerator"}, {"original_string": "private DatastoreGenerator datastoreGenerator;", "modifier": "private", "type": "DatastoreGenerator", "declarator": "datastoreGenerator", "var_name": "datastoreGenerator"}], "file": "model/src/test/java/com/abiquo/server/core/infrastructure/InfrastructureRepTest.java"}, "test_case": {"identifier": "test_insert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_insert()\n    {\n        Datacenter datacenter = eg().createUniqueInstance();\n        EntityManager em = ds().createEntityManagerAndBeginReadWriteTransaction();\n        InfrastructureRep rep = new InfrastructureRep(em);\n        rep.insert(datacenter);\n        EntityManagerHelper.commitAndClose(em);\n\n        Assert.assertTrue(ds().canFind(datacenter));\n    }", "signature": "void test_insert()", "full_signature": "@Test public void test_insert()", "class_method_signature": "InfrastructureRepTest.test_insert()", "testcase": true, "constructor": false, "invocations": ["createUniqueInstance", "eg", "createEntityManagerAndBeginReadWriteTransaction", "ds", "insert", "commitAndClose", "assertTrue", "canFind", "ds"]}, "focal_class": {"identifier": "InfrastructureRep", "superclass": "extends DefaultRepBase", "interfaces": "", "fields": [{"original_string": "static final String BUG_INSERT_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- insert: datacenter name must be unique\";", "modifier": "static final", "type": "String", "declarator": "BUG_INSERT_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- insert: datacenter name must be unique\"", "var_name": "BUG_INSERT_NAME_MUST_BE_UNIQUE"}, {"original_string": "static final String BUG_UPDATE_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- update: datacenter name must be unique\";", "modifier": "static final", "type": "String", "declarator": "BUG_UPDATE_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- update: datacenter name must be unique\"", "var_name": "BUG_UPDATE_NAME_MUST_BE_UNIQUE"}, {"original_string": "static final String BUG_INSERT_RACK_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- rack insert: racks on the same datacenter must have a unique name\";", "modifier": "static final", "type": "String", "declarator": "BUG_INSERT_RACK_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- rack insert: racks on the same datacenter must have a unique name\"", "var_name": "BUG_INSERT_RACK_NAME_MUST_BE_UNIQUE"}, {"original_string": "static final String BUG_UPDATE_RACK_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- rack update: racks on the same datacenter must have a unique name\";", "modifier": "static final", "type": "String", "declarator": "BUG_UPDATE_RACK_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- rack update: racks on the same datacenter must have a unique name\"", "var_name": "BUG_UPDATE_RACK_NAME_MUST_BE_UNIQUE"}, {"original_string": "static final String BUG_INSERT_MACHINE_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- machine insert: machines on the same datacenter must have a unique name\";", "modifier": "static final", "type": "String", "declarator": "BUG_INSERT_MACHINE_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- machine insert: machines on the same datacenter must have a unique name\"", "var_name": "BUG_INSERT_MACHINE_NAME_MUST_BE_UNIQUE"}, {"original_string": "static final String BUG_UPDATE_MACHINE_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- machine update: machines on the same datacenter must have a unique name\";", "modifier": "static final", "type": "String", "declarator": "BUG_UPDATE_MACHINE_NAME_MUST_BE_UNIQUE =\n        \"ASSERT- machine update: machines on the same datacenter must have a unique name\"", "var_name": "BUG_UPDATE_MACHINE_NAME_MUST_BE_UNIQUE"}, {"original_string": "@Autowired\n    private DatacenterDAO dao;", "modifier": "@Autowired\n    private", "type": "DatacenterDAO", "declarator": "dao", "var_name": "dao"}, {"original_string": "@Autowired\n    private RackDAO rackDao;", "modifier": "@Autowired\n    private", "type": "RackDAO", "declarator": "rackDao", "var_name": "rackDao"}, {"original_string": "@Autowired\n    private UcsRackDAO ucsRackDao;", "modifier": "@Autowired\n    private", "type": "UcsRackDAO", "declarator": "ucsRackDao", "var_name": "ucsRackDao"}, {"original_string": "@Autowired\n    private MachineDAO machineDao;", "modifier": "@Autowired\n    private", "type": "MachineDAO", "declarator": "machineDao", "var_name": "machineDao"}, {"original_string": "@Autowired\n    private HypervisorDAO hypervisorDao;", "modifier": "@Autowired\n    private", "type": "HypervisorDAO", "declarator": "hypervisorDao", "var_name": "hypervisorDao"}, {"original_string": "@Autowired\n    private DatastoreDAO datastoreDao;", "modifier": "@Autowired\n    private", "type": "DatastoreDAO", "declarator": "datastoreDao", "var_name": "datastoreDao"}, {"original_string": "@Autowired\n    private RemoteServiceDAO remoteServiceDao;", "modifier": "@Autowired\n    private", "type": "RemoteServiceDAO", "declarator": "remoteServiceDao", "var_name": "remoteServiceDao"}, {"original_string": "@Autowired\n    private NetworkDAO networkDao;", "modifier": "@Autowired\n    private", "type": "NetworkDAO", "declarator": "networkDao", "var_name": "networkDao"}, {"original_string": "@Autowired\n    private VLANNetworkDAO vlanDao;", "modifier": "@Autowired\n    private", "type": "VLANNetworkDAO", "declarator": "vlanDao", "var_name": "vlanDao"}, {"original_string": "@Autowired\n    private IpPoolManagementDAO ipPoolDao;", "modifier": "@Autowired\n    private", "type": "IpPoolManagementDAO", "declarator": "ipPoolDao", "var_name": "ipPoolDao"}, {"original_string": "@Autowired\n    private RepositoryDAO repositoryDao;", "modifier": "@Autowired\n    private", "type": "RepositoryDAO", "declarator": "repositoryDao", "var_name": "repositoryDao"}, {"original_string": "@Autowired\n    private VirtualMachineDAO virtualMachineDao;", "modifier": "@Autowired\n    private", "type": "VirtualMachineDAO", "declarator": "virtualMachineDao", "var_name": "virtualMachineDao"}, {"original_string": "@Autowired\n    private StorageRep storageRep;", "modifier": "@Autowired\n    private", "type": "StorageRep", "declarator": "storageRep", "var_name": "storageRep"}, {"original_string": "@Autowired\n    private PricingRep pricingRep;", "modifier": "@Autowired\n    private", "type": "PricingRep", "declarator": "pricingRep", "var_name": "pricingRep"}, {"original_string": "@Autowired\n    private DatacenterLimitsDAO datacenterLimitDao;", "modifier": "@Autowired\n    private", "type": "DatacenterLimitsDAO", "declarator": "datacenterLimitDao", "var_name": "datacenterLimitDao"}, {"original_string": "@Autowired\n    private DhcpOptionDAO dhcpOptionDAO;", "modifier": "@Autowired\n    private", "type": "DhcpOptionDAO", "declarator": "dhcpOptionDAO", "var_name": "dhcpOptionDAO"}], "methods": [{"identifier": "InfrastructureRep", "parameters": "()", "modifiers": "public", "return": "", "signature": " InfrastructureRep()", "full_signature": "public  InfrastructureRep()", "class_method_signature": "InfrastructureRep.InfrastructureRep()", "testcase": false, "constructor": true}, {"identifier": "InfrastructureRep", "parameters": "(final EntityManager entityManager)", "modifiers": "public", "return": "", "signature": " InfrastructureRep(final EntityManager entityManager)", "full_signature": "public  InfrastructureRep(final EntityManager entityManager)", "class_method_signature": "InfrastructureRep.InfrastructureRep(final EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "findById", "parameters": "(final Integer id)", "modifiers": "public", "return": "Datacenter", "signature": "Datacenter findById(final Integer id)", "full_signature": "public Datacenter findById(final Integer id)", "class_method_signature": "InfrastructureRep.findById(final Integer id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "public", "return": "Collection<Datacenter>", "signature": "Collection<Datacenter> findAll()", "full_signature": "public Collection<Datacenter> findAll()", "class_method_signature": "InfrastructureRep.findAll()", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "void", "signature": "void insert(final Datacenter datacenter)", "full_signature": "public void insert(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.insert(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "void", "signature": "void delete(final Datacenter datacenter)", "full_signature": "public void delete(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.delete(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "void", "signature": "void update(final Datacenter datacenter)", "full_signature": "public void update(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.update(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "existsAnyDatacenterWithName", "parameters": "(final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyDatacenterWithName(final String name)", "full_signature": "public boolean existsAnyDatacenterWithName(final String name)", "class_method_signature": "InfrastructureRep.existsAnyDatacenterWithName(final String name)", "testcase": false, "constructor": false}, {"identifier": "existsAnyOtherWithName", "parameters": "(final Datacenter datacenter, final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyOtherWithName(final Datacenter datacenter, final String name)", "full_signature": "public boolean existsAnyOtherWithName(final Datacenter datacenter, final String name)", "class_method_signature": "InfrastructureRep.existsAnyOtherWithName(final Datacenter datacenter, final String name)", "testcase": false, "constructor": false}, {"identifier": "findRacks", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "List<Rack>", "signature": "List<Rack> findRacks(final Datacenter datacenter)", "full_signature": "public List<Rack> findRacks(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findRacks(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findRacks", "parameters": "(final Datacenter datacenter, final String filter)", "modifiers": "public", "return": "List<Rack>", "signature": "List<Rack> findRacks(final Datacenter datacenter, final String filter)", "full_signature": "public List<Rack> findRacks(final Datacenter datacenter, final String filter)", "class_method_signature": "InfrastructureRep.findRacks(final Datacenter datacenter, final String filter)", "testcase": false, "constructor": false}, {"identifier": "findMachines", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> findMachines(final Datacenter datacenter)", "full_signature": "public List<Machine> findMachines(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findMachines(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findRackMachines", "parameters": "(final Rack rack)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> findRackMachines(final Rack rack)", "full_signature": "public List<Machine> findRackMachines(final Rack rack)", "class_method_signature": "InfrastructureRep.findRackMachines(final Rack rack)", "testcase": false, "constructor": false}, {"identifier": "findRackMachines", "parameters": "(final Rack rack, final String filter)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> findRackMachines(final Rack rack, final String filter)", "full_signature": "public List<Machine> findRackMachines(final Rack rack, final String filter)", "class_method_signature": "InfrastructureRep.findRackMachines(final Rack rack, final String filter)", "testcase": false, "constructor": false}, {"identifier": "findHypervisors", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "Set<HypervisorType>", "signature": "Set<HypervisorType> findHypervisors(final Datacenter datacenter)", "full_signature": "public Set<HypervisorType> findHypervisors(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findHypervisors(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findHypervisorsType", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "Collection<HypervisorType>", "signature": "Collection<HypervisorType> findHypervisorsType(final Datacenter datacenter)", "full_signature": "public Collection<HypervisorType> findHypervisorsType(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findHypervisorsType(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findEnterprisesByDataCenter", "parameters": "(final Datacenter datacenter,\n        final Boolean network, final Integer firstElem, final Integer numElem)", "modifiers": "public", "return": "List<Enterprise>", "signature": "List<Enterprise> findEnterprisesByDataCenter(final Datacenter datacenter,\n        final Boolean network, final Integer firstElem, final Integer numElem)", "full_signature": "public List<Enterprise> findEnterprisesByDataCenter(final Datacenter datacenter,\n        final Boolean network, final Integer firstElem, final Integer numElem)", "class_method_signature": "InfrastructureRep.findEnterprisesByDataCenter(final Datacenter datacenter,\n        final Boolean network, final Integer firstElem, final Integer numElem)", "testcase": false, "constructor": false}, {"identifier": "findDatacenterLimits", "parameters": "(final Enterprise enterprise,\n        final Datacenter datacenter)", "modifiers": "public", "return": "DatacenterLimits", "signature": "DatacenterLimits findDatacenterLimits(final Enterprise enterprise,\n        final Datacenter datacenter)", "full_signature": "public DatacenterLimits findDatacenterLimits(final Enterprise enterprise,\n        final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findDatacenterLimits(final Enterprise enterprise,\n        final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findDatacenterLimits", "parameters": "(final Enterprise enterprise)", "modifiers": "public", "return": "Collection<DatacenterLimits>", "signature": "Collection<DatacenterLimits> findDatacenterLimits(final Enterprise enterprise)", "full_signature": "public Collection<DatacenterLimits> findDatacenterLimits(final Enterprise enterprise)", "class_method_signature": "InfrastructureRep.findDatacenterLimits(final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "existsAnyRackWithName", "parameters": "(final Datacenter datacenter, final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyRackWithName(final Datacenter datacenter, final String name)", "full_signature": "public boolean existsAnyRackWithName(final Datacenter datacenter, final String name)", "class_method_signature": "InfrastructureRep.existsAnyRackWithName(final Datacenter datacenter, final String name)", "testcase": false, "constructor": false}, {"identifier": "existsAnyOtherRackWithName", "parameters": "(final Rack rack, final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyOtherRackWithName(final Rack rack, final String name)", "full_signature": "public boolean existsAnyOtherRackWithName(final Rack rack, final String name)", "class_method_signature": "InfrastructureRep.existsAnyOtherRackWithName(final Rack rack, final String name)", "testcase": false, "constructor": false}, {"identifier": "existsAnyUcsRackWithIp", "parameters": "(final String ip)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyUcsRackWithIp(final String ip)", "full_signature": "public boolean existsAnyUcsRackWithIp(final String ip)", "class_method_signature": "InfrastructureRep.existsAnyUcsRackWithIp(final String ip)", "testcase": false, "constructor": false}, {"identifier": "existsAnyVirtualMachineUsingNetwork", "parameters": "(final Integer vlanId)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyVirtualMachineUsingNetwork(final Integer vlanId)", "full_signature": "public boolean existsAnyVirtualMachineUsingNetwork(final Integer vlanId)", "class_method_signature": "InfrastructureRep.existsAnyVirtualMachineUsingNetwork(final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "existsAnyMachineWithName", "parameters": "(final Datacenter datacenter, final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyMachineWithName(final Datacenter datacenter, final String name)", "full_signature": "public boolean existsAnyMachineWithName(final Datacenter datacenter, final String name)", "class_method_signature": "InfrastructureRep.existsAnyMachineWithName(final Datacenter datacenter, final String name)", "testcase": false, "constructor": false}, {"identifier": "existsAnyOtherMachineWithName", "parameters": "(final Machine machine, final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean existsAnyOtherMachineWithName(final Machine machine, final String name)", "full_signature": "public boolean existsAnyOtherMachineWithName(final Machine machine, final String name)", "class_method_signature": "InfrastructureRep.existsAnyOtherMachineWithName(final Machine machine, final String name)", "testcase": false, "constructor": false}, {"identifier": "findRackById", "parameters": "(final Integer id)", "modifiers": "public", "return": "Rack", "signature": "Rack findRackById(final Integer id)", "full_signature": "public Rack findRackById(final Integer id)", "class_method_signature": "InfrastructureRep.findRackById(final Integer id)", "testcase": false, "constructor": false}, {"identifier": "insertUcsRack", "parameters": "(final UcsRack UcsRack)", "modifiers": "public", "return": "void", "signature": "void insertUcsRack(final UcsRack UcsRack)", "full_signature": "public void insertUcsRack(final UcsRack UcsRack)", "class_method_signature": "InfrastructureRep.insertUcsRack(final UcsRack UcsRack)", "testcase": false, "constructor": false}, {"identifier": "findUcsRackById", "parameters": "(final Integer rackId)", "modifiers": "public", "return": "UcsRack", "signature": "UcsRack findUcsRackById(final Integer rackId)", "full_signature": "public UcsRack findUcsRackById(final Integer rackId)", "class_method_signature": "InfrastructureRep.findUcsRackById(final Integer rackId)", "testcase": false, "constructor": false}, {"identifier": "insertRack", "parameters": "(final Rack rack)", "modifiers": "public", "return": "void", "signature": "void insertRack(final Rack rack)", "full_signature": "public void insertRack(final Rack rack)", "class_method_signature": "InfrastructureRep.insertRack(final Rack rack)", "testcase": false, "constructor": false}, {"identifier": "updateRack", "parameters": "(final Rack rack)", "modifiers": "public", "return": "void", "signature": "void updateRack(final Rack rack)", "full_signature": "public void updateRack(final Rack rack)", "class_method_signature": "InfrastructureRep.updateRack(final Rack rack)", "testcase": false, "constructor": false}, {"identifier": "deleteRack", "parameters": "(final Rack rack)", "modifiers": "public", "return": "void", "signature": "void deleteRack(final Rack rack)", "full_signature": "public void deleteRack(final Rack rack)", "class_method_signature": "InfrastructureRep.deleteRack(final Rack rack)", "testcase": false, "constructor": false}, {"identifier": "findMachineById", "parameters": "(final Integer id)", "modifiers": "public", "return": "Machine", "signature": "Machine findMachineById(final Integer id)", "full_signature": "public Machine findMachineById(final Integer id)", "class_method_signature": "InfrastructureRep.findMachineById(final Integer id)", "testcase": false, "constructor": false}, {"identifier": "findMachineByIds", "parameters": "(final Integer datacenterId, final Integer rackId,\n        final Integer machineId)", "modifiers": "public", "return": "Machine", "signature": "Machine findMachineByIds(final Integer datacenterId, final Integer rackId,\n        final Integer machineId)", "full_signature": "public Machine findMachineByIds(final Integer datacenterId, final Integer rackId,\n        final Integer machineId)", "class_method_signature": "InfrastructureRep.findMachineByIds(final Integer datacenterId, final Integer rackId,\n        final Integer machineId)", "testcase": false, "constructor": false}, {"identifier": "findMachineByIp", "parameters": "(final Integer datacenterId, final String ip)", "modifiers": "public", "return": "Machine", "signature": "Machine findMachineByIp(final Integer datacenterId, final String ip)", "full_signature": "public Machine findMachineByIp(final Integer datacenterId, final String ip)", "class_method_signature": "InfrastructureRep.findMachineByIp(final Integer datacenterId, final String ip)", "testcase": false, "constructor": false}, {"identifier": "insertMachine", "parameters": "(final Machine machine)", "modifiers": "public", "return": "void", "signature": "void insertMachine(final Machine machine)", "full_signature": "public void insertMachine(final Machine machine)", "class_method_signature": "InfrastructureRep.insertMachine(final Machine machine)", "testcase": false, "constructor": false}, {"identifier": "updateMachine", "parameters": "(final Machine machine)", "modifiers": "public", "return": "void", "signature": "void updateMachine(final Machine machine)", "full_signature": "public void updateMachine(final Machine machine)", "class_method_signature": "InfrastructureRep.updateMachine(final Machine machine)", "testcase": false, "constructor": false}, {"identifier": "deleteMachine", "parameters": "(final Machine machine)", "modifiers": "public", "return": "void", "signature": "void deleteMachine(final Machine machine)", "full_signature": "public void deleteMachine(final Machine machine)", "class_method_signature": "InfrastructureRep.deleteMachine(final Machine machine)", "testcase": false, "constructor": false}, {"identifier": "insertTier", "parameters": "(final Tier tier)", "modifiers": "public", "return": "void", "signature": "void insertTier(final Tier tier)", "full_signature": "public void insertTier(final Tier tier)", "class_method_signature": "InfrastructureRep.insertTier(final Tier tier)", "testcase": false, "constructor": false}, {"identifier": "insertHypervisor", "parameters": "(final Hypervisor hypervisor)", "modifiers": "public", "return": "void", "signature": "void insertHypervisor(final Hypervisor hypervisor)", "full_signature": "public void insertHypervisor(final Hypervisor hypervisor)", "class_method_signature": "InfrastructureRep.insertHypervisor(final Hypervisor hypervisor)", "testcase": false, "constructor": false}, {"identifier": "findMachineDatastores", "parameters": "(final Machine machine)", "modifiers": "public", "return": "List<Datastore>", "signature": "List<Datastore> findMachineDatastores(final Machine machine)", "full_signature": "public List<Datastore> findMachineDatastores(final Machine machine)", "class_method_signature": "InfrastructureRep.findMachineDatastores(final Machine machine)", "testcase": false, "constructor": false}, {"identifier": "findDatastoreById", "parameters": "(final Integer id)", "modifiers": "public", "return": "Datastore", "signature": "Datastore findDatastoreById(final Integer id)", "full_signature": "public Datastore findDatastoreById(final Integer id)", "class_method_signature": "InfrastructureRep.findDatastoreById(final Integer id)", "testcase": false, "constructor": false}, {"identifier": "findDatastoreByUuidAndMachine", "parameters": "(final String uuid, final Machine machine)", "modifiers": "public", "return": "Datastore", "signature": "Datastore findDatastoreByUuidAndMachine(final String uuid, final Machine machine)", "full_signature": "public Datastore findDatastoreByUuidAndMachine(final String uuid, final Machine machine)", "class_method_signature": "InfrastructureRep.findDatastoreByUuidAndMachine(final String uuid, final Machine machine)", "testcase": false, "constructor": false}, {"identifier": "insertDatastore", "parameters": "(final Datastore datastore)", "modifiers": "public", "return": "void", "signature": "void insertDatastore(final Datastore datastore)", "full_signature": "public void insertDatastore(final Datastore datastore)", "class_method_signature": "InfrastructureRep.insertDatastore(final Datastore datastore)", "testcase": false, "constructor": false}, {"identifier": "updateDatastore", "parameters": "(final Datastore datastore)", "modifiers": "public", "return": "void", "signature": "void updateDatastore(final Datastore datastore)", "full_signature": "public void updateDatastore(final Datastore datastore)", "class_method_signature": "InfrastructureRep.updateDatastore(final Datastore datastore)", "testcase": false, "constructor": false}, {"identifier": "deleteDatastore", "parameters": "(final Datastore datastore)", "modifiers": "public", "return": "void", "signature": "void deleteDatastore(final Datastore datastore)", "full_signature": "public void deleteDatastore(final Datastore datastore)", "class_method_signature": "InfrastructureRep.deleteDatastore(final Datastore datastore)", "testcase": false, "constructor": false}, {"identifier": "findShares", "parameters": "(final Datastore datastore)", "modifiers": "public", "return": "List<Datastore>", "signature": "List<Datastore> findShares(final Datastore datastore)", "full_signature": "public List<Datastore> findShares(final Datastore datastore)", "class_method_signature": "InfrastructureRep.findShares(final Datastore datastore)", "testcase": false, "constructor": false}, {"identifier": "existAnyDatastoreWithName", "parameters": "(final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyDatastoreWithName(final String name)", "full_signature": "public boolean existAnyDatastoreWithName(final String name)", "class_method_signature": "InfrastructureRep.existAnyDatastoreWithName(final String name)", "testcase": false, "constructor": false}, {"identifier": "existAnyOtherDatastoreWithName", "parameters": "(final Datastore datastore, final String name)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyOtherDatastoreWithName(final Datastore datastore, final String name)", "full_signature": "public boolean existAnyOtherDatastoreWithName(final Datastore datastore, final String name)", "class_method_signature": "InfrastructureRep.existAnyOtherDatastoreWithName(final Datastore datastore, final String name)", "testcase": false, "constructor": false}, {"identifier": "existAnyDatastoreWithDirectory", "parameters": "(final String directory)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyDatastoreWithDirectory(final String directory)", "full_signature": "public boolean existAnyDatastoreWithDirectory(final String directory)", "class_method_signature": "InfrastructureRep.existAnyDatastoreWithDirectory(final String directory)", "testcase": false, "constructor": false}, {"identifier": "existAnyOtherDatastoreWithDirectory", "parameters": "(final Datastore datastore,\n        final String directory)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyOtherDatastoreWithDirectory(final Datastore datastore,\n        final String directory)", "full_signature": "public boolean existAnyOtherDatastoreWithDirectory(final Datastore datastore,\n        final String directory)", "class_method_signature": "InfrastructureRep.existAnyOtherDatastoreWithDirectory(final Datastore datastore,\n        final String directory)", "testcase": false, "constructor": false}, {"identifier": "insertRemoteService", "parameters": "(final RemoteService remoteService)", "modifiers": "public", "return": "void", "signature": "void insertRemoteService(final RemoteService remoteService)", "full_signature": "public void insertRemoteService(final RemoteService remoteService)", "class_method_signature": "InfrastructureRep.insertRemoteService(final RemoteService remoteService)", "testcase": false, "constructor": false}, {"identifier": "insertNetwork", "parameters": "(final Network network)", "modifiers": "public", "return": "void", "signature": "void insertNetwork(final Network network)", "full_signature": "public void insertNetwork(final Network network)", "class_method_signature": "InfrastructureRep.insertNetwork(final Network network)", "testcase": false, "constructor": false}, {"identifier": "updateRemoteService", "parameters": "(final RemoteService remoteService)", "modifiers": "public", "return": "void", "signature": "void updateRemoteService(final RemoteService remoteService)", "full_signature": "public void updateRemoteService(final RemoteService remoteService)", "class_method_signature": "InfrastructureRep.updateRemoteService(final RemoteService remoteService)", "testcase": false, "constructor": false}, {"identifier": "deleteRemoteService", "parameters": "(final RemoteService remoteService)", "modifiers": "public", "return": "void", "signature": "void deleteRemoteService(final RemoteService remoteService)", "full_signature": "public void deleteRemoteService(final RemoteService remoteService)", "class_method_signature": "InfrastructureRep.deleteRemoteService(final RemoteService remoteService)", "testcase": false, "constructor": false}, {"identifier": "existAnyRemoteServiceWithUri", "parameters": "(final String uri)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyRemoteServiceWithUri(final String uri)", "full_signature": "public boolean existAnyRemoteServiceWithUri(final String uri)", "class_method_signature": "InfrastructureRep.existAnyRemoteServiceWithUri(final String uri)", "testcase": false, "constructor": false}, {"identifier": "findRemoteServicesByDatacenter", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "List<RemoteService>", "signature": "List<RemoteService> findRemoteServicesByDatacenter(final Datacenter datacenter)", "full_signature": "public List<RemoteService> findRemoteServicesByDatacenter(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findRemoteServicesByDatacenter(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findAllRemoteServices", "parameters": "()", "modifiers": "public", "return": "List<RemoteService>", "signature": "List<RemoteService> findAllRemoteServices()", "full_signature": "public List<RemoteService> findAllRemoteServices()", "class_method_signature": "InfrastructureRep.findAllRemoteServices()", "testcase": false, "constructor": false}, {"identifier": "findRemoteServiceById", "parameters": "(final int id)", "modifiers": "public", "return": "RemoteService", "signature": "RemoteService findRemoteServiceById(final int id)", "full_signature": "public RemoteService findRemoteServiceById(final int id)", "class_method_signature": "InfrastructureRep.findRemoteServiceById(final int id)", "testcase": false, "constructor": false}, {"identifier": "findRemoteServiceWithTypeInDatacenter", "parameters": "(final Datacenter datacenter,\n        final RemoteServiceType type)", "modifiers": "public", "return": "List<RemoteService>", "signature": "List<RemoteService> findRemoteServiceWithTypeInDatacenter(final Datacenter datacenter,\n        final RemoteServiceType type)", "full_signature": "public List<RemoteService> findRemoteServiceWithTypeInDatacenter(final Datacenter datacenter,\n        final RemoteServiceType type)", "class_method_signature": "InfrastructureRep.findRemoteServiceWithTypeInDatacenter(final Datacenter datacenter,\n        final RemoteServiceType type)", "testcase": false, "constructor": false}, {"identifier": "existAnyRemoteServiceWithTypeInDatacenter", "parameters": "(final Datacenter datacenter,\n        final RemoteServiceType type)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyRemoteServiceWithTypeInDatacenter(final Datacenter datacenter,\n        final RemoteServiceType type)", "full_signature": "public boolean existAnyRemoteServiceWithTypeInDatacenter(final Datacenter datacenter,\n        final RemoteServiceType type)", "class_method_signature": "InfrastructureRep.existAnyRemoteServiceWithTypeInDatacenter(final Datacenter datacenter,\n        final RemoteServiceType type)", "testcase": false, "constructor": false}, {"identifier": "findCandidateMachines", "parameters": "(final Integer idRack,\n        final Integer idVirtualDatacenter, final Long hdRequiredOnDatastore,\n        final Enterprise enterprise)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> findCandidateMachines(final Integer idRack,\n        final Integer idVirtualDatacenter, final Long hdRequiredOnDatastore,\n        final Enterprise enterprise)", "full_signature": "public List<Machine> findCandidateMachines(final Integer idRack,\n        final Integer idVirtualDatacenter, final Long hdRequiredOnDatastore,\n        final Enterprise enterprise)", "class_method_signature": "InfrastructureRep.findCandidateMachines(final Integer idRack,\n        final Integer idVirtualDatacenter, final Long hdRequiredOnDatastore,\n        final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "findCandidateMachines", "parameters": "(final Integer idRack,\n        final Integer idVirtualDatacenter, final Enterprise enterprise, final String datastoreUuid,\n        final Integer originalHypervisorId)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> findCandidateMachines(final Integer idRack,\n        final Integer idVirtualDatacenter, final Enterprise enterprise, final String datastoreUuid,\n        final Integer originalHypervisorId)", "full_signature": "public List<Machine> findCandidateMachines(final Integer idRack,\n        final Integer idVirtualDatacenter, final Enterprise enterprise, final String datastoreUuid,\n        final Integer originalHypervisorId)", "class_method_signature": "InfrastructureRep.findCandidateMachines(final Integer idRack,\n        final Integer idVirtualDatacenter, final Enterprise enterprise, final String datastoreUuid,\n        final Integer originalHypervisorId)", "testcase": false, "constructor": false}, {"identifier": "getRackIdByMinVLANCount", "parameters": "(final int idDatacenter)", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> getRackIdByMinVLANCount(final int idDatacenter)", "full_signature": "public List<Integer> getRackIdByMinVLANCount(final int idDatacenter)", "class_method_signature": "InfrastructureRep.getRackIdByMinVLANCount(final int idDatacenter)", "testcase": false, "constructor": false}, {"identifier": "findByName", "parameters": "(final String name)", "modifiers": "public", "return": "Datacenter", "signature": "Datacenter findByName(final String name)", "full_signature": "public Datacenter findByName(final String name)", "class_method_signature": "InfrastructureRep.findByName(final String name)", "testcase": false, "constructor": false}, {"identifier": "findRackByName", "parameters": "(final String name)", "modifiers": "public", "return": "Rack", "signature": "Rack findRackByName(final String name)", "full_signature": "public Rack findRackByName(final String name)", "class_method_signature": "InfrastructureRep.findRackByName(final String name)", "testcase": false, "constructor": false}, {"identifier": "findMachineByName", "parameters": "(final String name)", "modifiers": "public", "return": "Machine", "signature": "Machine findMachineByName(final String name)", "full_signature": "public Machine findMachineByName(final String name)", "class_method_signature": "InfrastructureRep.findMachineByName(final String name)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfDeployedVlanNetworksByRack", "parameters": "(final Integer rackId)", "modifiers": "public", "return": "Long", "signature": "Long getNumberOfDeployedVlanNetworksByRack(final Integer rackId)", "full_signature": "public Long getNumberOfDeployedVlanNetworksByRack(final Integer rackId)", "class_method_signature": "InfrastructureRep.getNumberOfDeployedVlanNetworksByRack(final Integer rackId)", "testcase": false, "constructor": false}, {"identifier": "isRepositoryBeingUsed", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "boolean", "signature": "boolean isRepositoryBeingUsed(final Datacenter datacenter)", "full_signature": "public boolean isRepositoryBeingUsed(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.isRepositoryBeingUsed(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "updateRepositoryLocation", "parameters": "(final Datacenter datacenter, final String url)", "modifiers": "public", "return": "void", "signature": "void updateRepositoryLocation(final Datacenter datacenter, final String url)", "full_signature": "public void updateRepositoryLocation(final Datacenter datacenter, final String url)", "class_method_signature": "InfrastructureRep.updateRepositoryLocation(final Datacenter datacenter, final String url)", "testcase": false, "constructor": false}, {"identifier": "deleteRepository", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "void", "signature": "void deleteRepository(final Datacenter datacenter)", "full_signature": "public void deleteRepository(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.deleteRepository(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "existRepositoryInOtherDatacenter", "parameters": "(final Datacenter datacenter,\n        final String repositoryLocation)", "modifiers": "public", "return": "boolean", "signature": "boolean existRepositoryInOtherDatacenter(final Datacenter datacenter,\n        final String repositoryLocation)", "full_signature": "public boolean existRepositoryInOtherDatacenter(final Datacenter datacenter,\n        final String repositoryLocation)", "class_method_signature": "InfrastructureRep.existRepositoryInOtherDatacenter(final Datacenter datacenter,\n        final String repositoryLocation)", "testcase": false, "constructor": false}, {"identifier": "existRepositoryInSameDatacenter", "parameters": "(final Datacenter datacenter,\n        final String repositoryLocation)", "modifiers": "public", "return": "boolean", "signature": "boolean existRepositoryInSameDatacenter(final Datacenter datacenter,\n        final String repositoryLocation)", "full_signature": "public boolean existRepositoryInSameDatacenter(final Datacenter datacenter,\n        final String repositoryLocation)", "class_method_signature": "InfrastructureRep.existRepositoryInSameDatacenter(final Datacenter datacenter,\n        final String repositoryLocation)", "testcase": false, "constructor": false}, {"identifier": "createRepository", "parameters": "(final Datacenter datacenter, final String repositoryLocation)", "modifiers": "public", "return": "void", "signature": "void createRepository(final Datacenter datacenter, final String repositoryLocation)", "full_signature": "public void createRepository(final Datacenter datacenter, final String repositoryLocation)", "class_method_signature": "InfrastructureRep.createRepository(final Datacenter datacenter, final String repositoryLocation)", "testcase": false, "constructor": false}, {"identifier": "findRepositoryByDatacenter", "parameters": "(\n        final Datacenter datacenter)", "modifiers": "public", "return": "com.abiquo.server.core.infrastructure.Repository", "signature": "com.abiquo.server.core.infrastructure.Repository findRepositoryByDatacenter(\n        final Datacenter datacenter)", "full_signature": "public com.abiquo.server.core.infrastructure.Repository findRepositoryByDatacenter(\n        final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findRepositoryByDatacenter(\n        final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findRepositoryByLocation", "parameters": "(\n        final String location)", "modifiers": "public", "return": "com.abiquo.server.core.infrastructure.Repository", "signature": "com.abiquo.server.core.infrastructure.Repository findRepositoryByLocation(\n        final String location)", "full_signature": "public com.abiquo.server.core.infrastructure.Repository findRepositoryByLocation(\n        final String location)", "class_method_signature": "InfrastructureRep.findRepositoryByLocation(\n        final String location)", "testcase": false, "constructor": false}, {"identifier": "existDeployedVirtualMachines", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "boolean", "signature": "boolean existDeployedVirtualMachines(final Datacenter datacenter)", "full_signature": "public boolean existDeployedVirtualMachines(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.existDeployedVirtualMachines(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findRackByIds", "parameters": "(final Integer datacenterId, final Integer rackId)", "modifiers": "public", "return": "Rack", "signature": "Rack findRackByIds(final Integer datacenterId, final Integer rackId)", "full_signature": "public Rack findRackByIds(final Integer datacenterId, final Integer rackId)", "class_method_signature": "InfrastructureRep.findRackByIds(final Integer datacenterId, final Integer rackId)", "testcase": false, "constructor": false}, {"identifier": "findRacksWithHAEnabled", "parameters": "(final Datacenter dc)", "modifiers": "public", "return": "List<Rack>", "signature": "List<Rack> findRacksWithHAEnabled(final Datacenter dc)", "full_signature": "public List<Rack> findRacksWithHAEnabled(final Datacenter dc)", "class_method_signature": "InfrastructureRep.findRacksWithHAEnabled(final Datacenter dc)", "testcase": false, "constructor": false}, {"identifier": "findRackEnabledForHAMachines", "parameters": "(final Rack rack)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> findRackEnabledForHAMachines(final Rack rack)", "full_signature": "public List<Machine> findRackEnabledForHAMachines(final Rack rack)", "class_method_signature": "InfrastructureRep.findRackEnabledForHAMachines(final Rack rack)", "testcase": false, "constructor": false}, {"identifier": "findMachinesWithHAInProgress", "parameters": "()", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> findMachinesWithHAInProgress()", "full_signature": "public List<Machine> findMachinesWithHAInProgress()", "class_method_signature": "InfrastructureRep.findMachinesWithHAInProgress()", "testcase": false, "constructor": false}, {"identifier": "findAllUcsRacksByDatacenter", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "List<UcsRack>", "signature": "List<UcsRack> findAllUcsRacksByDatacenter(final Datacenter datacenter)", "full_signature": "public List<UcsRack> findAllUcsRacksByDatacenter(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findAllUcsRacksByDatacenter(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findAllUcsRacksByDatacenter", "parameters": "(final Datacenter datacenter,\n        final String filter)", "modifiers": "public", "return": "List<UcsRack>", "signature": "List<UcsRack> findAllUcsRacksByDatacenter(final Datacenter datacenter,\n        final String filter)", "full_signature": "public List<UcsRack> findAllUcsRacksByDatacenter(final Datacenter datacenter,\n        final String filter)", "class_method_signature": "InfrastructureRep.findAllUcsRacksByDatacenter(final Datacenter datacenter,\n        final String filter)", "testcase": false, "constructor": false}, {"identifier": "findAllNotManagedRacksByDatacenter", "parameters": "(final Integer datacenterId)", "modifiers": "public", "return": "List<Rack>", "signature": "List<Rack> findAllNotManagedRacksByDatacenter(final Integer datacenterId)", "full_signature": "public List<Rack> findAllNotManagedRacksByDatacenter(final Integer datacenterId)", "class_method_signature": "InfrastructureRep.findAllNotManagedRacksByDatacenter(final Integer datacenterId)", "testcase": false, "constructor": false}, {"identifier": "findAllNotManagedRacksByDatacenter", "parameters": "(final Integer datacenterId,\n        final String filter)", "modifiers": "public", "return": "List<Rack>", "signature": "List<Rack> findAllNotManagedRacksByDatacenter(final Integer datacenterId,\n        final String filter)", "full_signature": "public List<Rack> findAllNotManagedRacksByDatacenter(final Integer datacenterId,\n        final String filter)", "class_method_signature": "InfrastructureRep.findAllNotManagedRacksByDatacenter(final Integer datacenterId,\n        final String filter)", "testcase": false, "constructor": false}, {"identifier": "existAnyHypervisorWithIpInDatacenter", "parameters": "(final String ip, final Integer datacenterId)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyHypervisorWithIpInDatacenter(final String ip, final Integer datacenterId)", "full_signature": "public boolean existAnyHypervisorWithIpInDatacenter(final String ip, final Integer datacenterId)", "class_method_signature": "InfrastructureRep.existAnyHypervisorWithIpInDatacenter(final String ip, final Integer datacenterId)", "testcase": false, "constructor": false}, {"identifier": "existAnyHypervisorWithIpServiceInDatacenter", "parameters": "(final String ip,\n        final Integer datacenterId)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyHypervisorWithIpServiceInDatacenter(final String ip,\n        final Integer datacenterId)", "full_signature": "public boolean existAnyHypervisorWithIpServiceInDatacenter(final String ip,\n        final Integer datacenterId)", "class_method_signature": "InfrastructureRep.existAnyHypervisorWithIpServiceInDatacenter(final String ip,\n        final Integer datacenterId)", "testcase": false, "constructor": false}, {"identifier": "getEmptyOffMachines", "parameters": "(final Integer rackId)", "modifiers": "public", "return": "Integer", "signature": "Integer getEmptyOffMachines(final Integer rackId)", "full_signature": "public Integer getEmptyOffMachines(final Integer rackId)", "class_method_signature": "InfrastructureRep.getEmptyOffMachines(final Integer rackId)", "testcase": false, "constructor": false}, {"identifier": "getEmptyOnMachines", "parameters": "(final Integer rackId)", "modifiers": "public", "return": "Integer", "signature": "Integer getEmptyOnMachines(final Integer rackId)", "full_signature": "public Integer getEmptyOnMachines(final Integer rackId)", "class_method_signature": "InfrastructureRep.getEmptyOnMachines(final Integer rackId)", "testcase": false, "constructor": false}, {"identifier": "getRandomMachinesToStartFromRack", "parameters": "(final Integer rackId,\n        final Integer howMany)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> getRandomMachinesToStartFromRack(final Integer rackId,\n        final Integer howMany)", "full_signature": "public List<Machine> getRandomMachinesToStartFromRack(final Integer rackId,\n        final Integer howMany)", "class_method_signature": "InfrastructureRep.getRandomMachinesToStartFromRack(final Integer rackId,\n        final Integer howMany)", "testcase": false, "constructor": false}, {"identifier": "getRandomMachinesToShutDownFromRack", "parameters": "(final Integer rackId,\n        final Integer howMany)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> getRandomMachinesToShutDownFromRack(final Integer rackId,\n        final Integer howMany)", "full_signature": "public List<Machine> getRandomMachinesToShutDownFromRack(final Integer rackId,\n        final Integer howMany)", "class_method_signature": "InfrastructureRep.getRandomMachinesToShutDownFromRack(final Integer rackId,\n        final Integer howMany)", "testcase": false, "constructor": false}, {"identifier": "getAllMachinesToShutDownFromRack", "parameters": "(final Integer rackId)", "modifiers": "public", "return": "List<Machine>", "signature": "List<Machine> getAllMachinesToShutDownFromRack(final Integer rackId)", "full_signature": "public List<Machine> getAllMachinesToShutDownFromRack(final Integer rackId)", "class_method_signature": "InfrastructureRep.getAllMachinesToShutDownFromRack(final Integer rackId)", "testcase": false, "constructor": false}, {"identifier": "findAllPublicVlansByDatacenter", "parameters": "(final Datacenter datacenter,\n        final NetworkType netType)", "modifiers": "public", "return": "List<VLANNetwork>", "signature": "List<VLANNetwork> findAllPublicVlansByDatacenter(final Datacenter datacenter,\n        final NetworkType netType)", "full_signature": "public List<VLANNetwork> findAllPublicVlansByDatacenter(final Datacenter datacenter,\n        final NetworkType netType)", "class_method_signature": "InfrastructureRep.findAllPublicVlansByDatacenter(final Datacenter datacenter,\n        final NetworkType netType)", "testcase": false, "constructor": false}, {"identifier": "findAllPrivateVlansByDatacenter", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "List<VLANNetwork>", "signature": "List<VLANNetwork> findAllPrivateVlansByDatacenter(final Datacenter datacenter)", "full_signature": "public List<VLANNetwork> findAllPrivateVlansByDatacenter(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.findAllPrivateVlansByDatacenter(final Datacenter datacenter)", "testcase": false, "constructor": false}, {"identifier": "findPublicVlanByDatacenter", "parameters": "(final Datacenter dc, final Integer vlanId)", "modifiers": "public", "return": "VLANNetwork", "signature": "VLANNetwork findPublicVlanByDatacenter(final Datacenter dc, final Integer vlanId)", "full_signature": "public VLANNetwork findPublicVlanByDatacenter(final Datacenter dc, final Integer vlanId)", "class_method_signature": "InfrastructureRep.findPublicVlanByDatacenter(final Datacenter dc, final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "findIpsPurchasedInPublicVlan", "parameters": "(final VLANNetwork vlan)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsPurchasedInPublicVlan(final VLANNetwork vlan)", "full_signature": "public List<IpPoolManagement> findIpsPurchasedInPublicVlan(final VLANNetwork vlan)", "class_method_signature": "InfrastructureRep.findIpsPurchasedInPublicVlan(final VLANNetwork vlan)", "testcase": false, "constructor": false}, {"identifier": "findIpsByNetwork", "parameters": "(final Network network, final Integer vlanId)", "modifiers": "public", "return": "List<IpPoolManagement>", "signature": "List<IpPoolManagement> findIpsByNetwork(final Network network, final Integer vlanId)", "full_signature": "public List<IpPoolManagement> findIpsByNetwork(final Network network, final Integer vlanId)", "class_method_signature": "InfrastructureRep.findIpsByNetwork(final Network network, final Integer vlanId)", "testcase": false, "constructor": false}, {"identifier": "updateLimits", "parameters": "(final DatacenterLimits dclimits)", "modifiers": "public", "return": "void", "signature": "void updateLimits(final DatacenterLimits dclimits)", "full_signature": "public void updateLimits(final DatacenterLimits dclimits)", "class_method_signature": "InfrastructureRep.updateLimits(final DatacenterLimits dclimits)", "testcase": false, "constructor": false}, {"identifier": "getNotManagedVirtualMachines", "parameters": "(final Hypervisor hypervisor)", "modifiers": "public", "return": "List<VirtualMachine>", "signature": "List<VirtualMachine> getNotManagedVirtualMachines(final Hypervisor hypervisor)", "full_signature": "public List<VirtualMachine> getNotManagedVirtualMachines(final Hypervisor hypervisor)", "class_method_signature": "InfrastructureRep.getNotManagedVirtualMachines(final Hypervisor hypervisor)", "testcase": false, "constructor": false}, {"identifier": "findVirtualMachineByHypervisor", "parameters": "(final Hypervisor hypervisor,\n        final Integer vmId)", "modifiers": "public", "return": "VirtualMachine", "signature": "VirtualMachine findVirtualMachineByHypervisor(final Hypervisor hypervisor,\n        final Integer vmId)", "full_signature": "public VirtualMachine findVirtualMachineByHypervisor(final Hypervisor hypervisor,\n        final Integer vmId)", "class_method_signature": "InfrastructureRep.findVirtualMachineByHypervisor(final Hypervisor hypervisor,\n        final Integer vmId)", "testcase": false, "constructor": false}, {"identifier": "findAllDhcp", "parameters": "()", "modifiers": "public", "return": "Collection<DhcpOption>", "signature": "Collection<DhcpOption> findAllDhcp()", "full_signature": "public Collection<DhcpOption> findAllDhcp()", "class_method_signature": "InfrastructureRep.findAllDhcp()", "testcase": false, "constructor": false}, {"identifier": "findDhcpOptionById", "parameters": "(final Integer id)", "modifiers": "public", "return": "DhcpOption", "signature": "DhcpOption findDhcpOptionById(final Integer id)", "full_signature": "public DhcpOption findDhcpOptionById(final Integer id)", "class_method_signature": "InfrastructureRep.findDhcpOptionById(final Integer id)", "testcase": false, "constructor": false}, {"identifier": "insertDhcpOption", "parameters": "(final DhcpOption opt)", "modifiers": "public", "return": "void", "signature": "void insertDhcpOption(final DhcpOption opt)", "full_signature": "public void insertDhcpOption(final DhcpOption opt)", "class_method_signature": "InfrastructureRep.insertDhcpOption(final DhcpOption opt)", "testcase": false, "constructor": false}, {"identifier": "deleteAllDhcpOption", "parameters": "(final Collection<DhcpOption> dhcpOption)", "modifiers": "public", "return": "void", "signature": "void deleteAllDhcpOption(final Collection<DhcpOption> dhcpOption)", "full_signature": "public void deleteAllDhcpOption(final Collection<DhcpOption> dhcpOption)", "class_method_signature": "InfrastructureRep.deleteAllDhcpOption(final Collection<DhcpOption> dhcpOption)", "testcase": false, "constructor": false}, {"identifier": "findUsedRemoteDesktopPortsInRack", "parameters": "(final Rack rack)", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> findUsedRemoteDesktopPortsInRack(final Rack rack)", "full_signature": "public List<Integer> findUsedRemoteDesktopPortsInRack(final Rack rack)", "class_method_signature": "InfrastructureRep.findUsedRemoteDesktopPortsInRack(final Rack rack)", "testcase": false, "constructor": false}, {"identifier": "getTotalUsedCores", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getTotalUsedCores()", "full_signature": "public Long getTotalUsedCores()", "class_method_signature": "InfrastructureRep.getTotalUsedCores()", "testcase": false, "constructor": false}, {"identifier": "getTotalUsedCoresExceptMachine", "parameters": "(final Machine machine)", "modifiers": "public", "return": "Long", "signature": "Long getTotalUsedCoresExceptMachine(final Machine machine)", "full_signature": "public Long getTotalUsedCoresExceptMachine(final Machine machine)", "class_method_signature": "InfrastructureRep.getTotalUsedCoresExceptMachine(final Machine machine)", "testcase": false, "constructor": false}], "file": "model/src/main/java/com/abiquo/server/core/infrastructure/InfrastructureRep.java"}, "focal_method": {"identifier": "insert", "parameters": "(final Datacenter datacenter)", "modifiers": "public", "return": "void", "body": "public void insert(final Datacenter datacenter)\n    {\n        assert datacenter != null;\n        assert !this.dao.isManaged(datacenter);\n        assert !existsAnyDatacenterWithName(datacenter.getName()) : BUG_INSERT_NAME_MUST_BE_UNIQUE;\n\n        this.dao.persist(datacenter);\n        this.dao.flush();\n    }", "signature": "void insert(final Datacenter datacenter)", "full_signature": "public void insert(final Datacenter datacenter)", "class_method_signature": "InfrastructureRep.insert(final Datacenter datacenter)", "testcase": false, "constructor": false, "invocations": ["isManaged", "existsAnyDatacenterWithName", "getName", "persist", "flush"]}, "repository": {"repo_id": 1320181, "url": "https://github.com/abiquo/abiquo", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 25, "size": 82580, "license": "licensed"}}