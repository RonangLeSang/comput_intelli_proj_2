{"test_class": {"identifier": "UserDAOTest", "superclass": "extends DefaultDAOTestBase<UserDAO, User>", "interfaces": "", "fields": [], "file": "model/src/test/java/com/abiquo/server/core/enterprise/UserDAOTest.java"}, "test_case": {"identifier": "userIsAllowedToUseOwnEnterprise", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void userIsAllowedToUseOwnEnterprise()\n    {\n        Map<String, Object> map = setupNormalUser(null);\n        User user = (User) map.get(\"user\");\n        String[] ps = (String[]) map.get(\"user.privileges\");\n        Enterprise ent = (Enterprise) map.get(\"user.enterprise\");\n\n        UserDAO dao = createDaoForRollbackTransaction();\n\n        boolean isAllowed =\n            dao.isUserAllowedToEnterprise(user.getNick(), user.getAuthType().name(), ps,\n                ent.getId());\n        Assert.assertTrue(isAllowed);\n    }", "signature": "void userIsAllowedToUseOwnEnterprise()", "full_signature": "@Test public void userIsAllowedToUseOwnEnterprise()", "class_method_signature": "UserDAOTest.userIsAllowedToUseOwnEnterprise()", "testcase": true, "constructor": false, "invocations": ["setupNormalUser", "get", "get", "get", "createDaoForRollbackTransaction", "isUserAllowedToEnterprise", "getNick", "name", "getAuthType", "getId", "assertTrue"]}, "focal_class": {"identifier": "UserDAO", "superclass": "extends DefaultDAOBase<Integer, User>", "interfaces": "", "fields": [{"original_string": "private static final String USER_ALLOWED_VDC_SQL =\n        \"select 1 from user u where u.user = :username and u.authType = :authtype and (('ENTERPRISE_ADMINISTER_ALL' in (:privileges) or 'USERS_MANAGE_OTHER_ENTERPRISES' in (:privileges) or 'PHYS_DC_RETRIEVE_DETAILS' in (:privileges)) or u.idEnterprise = (select vdc.idEnterprise from virtualdatacenter vdc where vdc.idVirtualDatacenter = :idvdc and (u.availableVirtualDatacenters is null or u.availableVirtualDatacenters REGEXP CONCAT('.*[,]?',:idvdc,'($|[,].*$)'))))\";", "modifier": "private static final", "type": "String", "declarator": "USER_ALLOWED_VDC_SQL =\n        \"select 1 from user u where u.user = :username and u.authType = :authtype and (('ENTERPRISE_ADMINISTER_ALL' in (:privileges) or 'USERS_MANAGE_OTHER_ENTERPRISES' in (:privileges) or 'PHYS_DC_RETRIEVE_DETAILS' in (:privileges)) or u.idEnterprise = (select vdc.idEnterprise from virtualdatacenter vdc where vdc.idVirtualDatacenter = :idvdc and (u.availableVirtualDatacenters is null or u.availableVirtualDatacenters REGEXP CONCAT('.*[,]?',:idvdc,'($|[,].*$)'))))\"", "var_name": "USER_ALLOWED_VDC_SQL"}, {"original_string": "private static final String USER_ALLOWED_ENTERPRSE_SQL =\n        \"select 1 from user u where u.user = :username and u.authType = :authtype \"\n            + \"and (('ENTERPRISE_ADMINISTER_ALL' in (:privileges) or 'USERS_MANAGE_OTHER_ENTERPRISES' in (:privileges) or 'PHYS_DC_RETRIEVE_DETAILS' in (:privileges)) or u.idEnterprise = :identerprise)\";", "modifier": "private static final", "type": "String", "declarator": "USER_ALLOWED_ENTERPRSE_SQL =\n        \"select 1 from user u where u.user = :username and u.authType = :authtype \"\n            + \"and (('ENTERPRISE_ADMINISTER_ALL' in (:privileges) or 'USERS_MANAGE_OTHER_ENTERPRISES' in (:privileges) or 'PHYS_DC_RETRIEVE_DETAILS' in (:privileges)) or u.idEnterprise = :identerprise)\"", "var_name": "USER_ALLOWED_ENTERPRSE_SQL"}], "methods": [{"identifier": "UserDAO", "parameters": "()", "modifiers": "public", "return": "", "signature": " UserDAO()", "full_signature": "public  UserDAO()", "class_method_signature": "UserDAO.UserDAO()", "testcase": false, "constructor": true}, {"identifier": "UserDAO", "parameters": "(final EntityManager entityManager)", "modifiers": "public", "return": "", "signature": " UserDAO(final EntityManager entityManager)", "full_signature": "public  UserDAO(final EntityManager entityManager)", "class_method_signature": "UserDAO.UserDAO(final EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "sameEnterprise", "parameters": "(final Enterprise enterprise)", "modifiers": "public static", "return": "Criterion", "signature": "Criterion sameEnterprise(final Enterprise enterprise)", "full_signature": "public static Criterion sameEnterprise(final Enterprise enterprise)", "class_method_signature": "UserDAO.sameEnterprise(final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "sameId", "parameters": "(final Integer userId)", "modifiers": "public static", "return": "Criterion", "signature": "Criterion sameId(final Integer userId)", "full_signature": "public static Criterion sameId(final Integer userId)", "class_method_signature": "UserDAO.sameId(final Integer userId)", "testcase": false, "constructor": false}, {"identifier": "sameNick", "parameters": "(final String nick)", "modifiers": "public static", "return": "Criterion", "signature": "Criterion sameNick(final String nick)", "full_signature": "public static Criterion sameNick(final String nick)", "class_method_signature": "UserDAO.sameNick(final String nick)", "testcase": false, "constructor": false}, {"identifier": "sameRole", "parameters": "(final Role role)", "modifiers": "public static", "return": "Criterion", "signature": "Criterion sameRole(final Role role)", "full_signature": "public static Criterion sameRole(final Role role)", "class_method_signature": "UserDAO.sameRole(final Role role)", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "(final String filter)", "modifiers": "private", "return": "Criterion", "signature": "Criterion filterBy(final String filter)", "full_signature": "private Criterion filterBy(final String filter)", "class_method_signature": "UserDAO.filterBy(final String filter)", "testcase": false, "constructor": false}, {"identifier": "findByRole", "parameters": "(final Role role)", "modifiers": "public", "return": "Collection<User>", "signature": "Collection<User> findByRole(final Role role)", "full_signature": "public Collection<User> findByRole(final Role role)", "class_method_signature": "UserDAO.findByRole(final Role role)", "testcase": false, "constructor": false}, {"identifier": "findByEnterprise", "parameters": "(final Enterprise enterprise)", "modifiers": "public", "return": "Collection<User>", "signature": "Collection<User> findByEnterprise(final Enterprise enterprise)", "full_signature": "public Collection<User> findByEnterprise(final Enterprise enterprise)", "class_method_signature": "UserDAO.findByEnterprise(final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "findByEnterprise", "parameters": "(final Integer userId, final Enterprise enterprise)", "modifiers": "public", "return": "User", "signature": "User findByEnterprise(final Integer userId, final Enterprise enterprise)", "full_signature": "public User findByEnterprise(final Integer userId, final Enterprise enterprise)", "class_method_signature": "UserDAO.findByEnterprise(final Integer userId, final Enterprise enterprise)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(final Enterprise enterprise, final String filter,\n        final String orderBy, final boolean desc)", "modifiers": "public", "return": "Collection<User>", "signature": "Collection<User> find(final Enterprise enterprise, final String filter,\n        final String orderBy, final boolean desc)", "full_signature": "public Collection<User> find(final Enterprise enterprise, final String filter,\n        final String orderBy, final boolean desc)", "class_method_signature": "UserDAO.find(final Enterprise enterprise, final String filter,\n        final String orderBy, final boolean desc)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(final Enterprise enterprise, final Role role, final String filter,\n        final String orderBy, final boolean desc, final boolean connected, final Integer offset,\n        final Integer numResults)", "modifiers": "public", "return": "Collection<User>", "signature": "Collection<User> find(final Enterprise enterprise, final Role role, final String filter,\n        final String orderBy, final boolean desc, final boolean connected, final Integer offset,\n        final Integer numResults)", "full_signature": "public Collection<User> find(final Enterprise enterprise, final Role role, final String filter,\n        final String orderBy, final boolean desc, final boolean connected, final Integer offset,\n        final Integer numResults)", "class_method_signature": "UserDAO.find(final Enterprise enterprise, final Role role, final String filter,\n        final String orderBy, final boolean desc, final boolean connected, final Integer offset,\n        final Integer numResults)", "testcase": false, "constructor": false}, {"identifier": "createCriteria", "parameters": "(final Enterprise enterprise, final Role role,\n        final String[] filters, final String orderBy, final boolean desc, final boolean connected)", "modifiers": "private", "return": "Criteria", "signature": "Criteria createCriteria(final Enterprise enterprise, final Role role,\n        final String[] filters, final String orderBy, final boolean desc, final boolean connected)", "full_signature": "private Criteria createCriteria(final Enterprise enterprise, final Role role,\n        final String[] filters, final String orderBy, final boolean desc, final boolean connected)", "class_method_signature": "UserDAO.createCriteria(final Enterprise enterprise, final Role role,\n        final String[] filters, final String orderBy, final boolean desc, final boolean connected)", "testcase": false, "constructor": false}, {"identifier": "existAnyUserWithNick", "parameters": "(final String nick)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyUserWithNick(final String nick)", "full_signature": "public boolean existAnyUserWithNick(final String nick)", "class_method_signature": "UserDAO.existAnyUserWithNick(final String nick)", "testcase": false, "constructor": false}, {"identifier": "existAnyOtherUserWithNick", "parameters": "(final User user, final String nick)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyOtherUserWithNick(final User user, final String nick)", "full_signature": "public boolean existAnyOtherUserWithNick(final User user, final String nick)", "class_method_signature": "UserDAO.existAnyOtherUserWithNick(final User user, final String nick)", "testcase": false, "constructor": false}, {"identifier": "getAbiquoUserByLogin", "parameters": "(final String login)", "modifiers": "public", "return": "User", "signature": "User getAbiquoUserByLogin(final String login)", "full_signature": "public User getAbiquoUserByLogin(final String login)", "class_method_signature": "UserDAO.getAbiquoUserByLogin(final String login)", "testcase": false, "constructor": false}, {"identifier": "getUserByAuth", "parameters": "(final String login, final AuthType authType)", "modifiers": "public", "return": "User", "signature": "User getUserByAuth(final String login, final AuthType authType)", "full_signature": "public User getUserByAuth(final String login, final AuthType authType)", "class_method_signature": "UserDAO.getUserByAuth(final String login, final AuthType authType)", "testcase": false, "constructor": false}, {"identifier": "sameAuthType", "parameters": "(final AuthType authType)", "modifiers": "public static", "return": "Criterion", "signature": "Criterion sameAuthType(final AuthType authType)", "full_signature": "public static Criterion sameAuthType(final AuthType authType)", "class_method_signature": "UserDAO.sameAuthType(final AuthType authType)", "testcase": false, "constructor": false}, {"identifier": "existAnyUserWithNickAndAuth", "parameters": "(final String nick, final AuthType authType)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyUserWithNickAndAuth(final String nick, final AuthType authType)", "full_signature": "public boolean existAnyUserWithNickAndAuth(final String nick, final AuthType authType)", "class_method_signature": "UserDAO.existAnyUserWithNickAndAuth(final String nick, final AuthType authType)", "testcase": false, "constructor": false}, {"identifier": "existAnyUserWithRole", "parameters": "(final Role role)", "modifiers": "public", "return": "boolean", "signature": "boolean existAnyUserWithRole(final Role role)", "full_signature": "public boolean existAnyUserWithRole(final Role role)", "class_method_signature": "UserDAO.existAnyUserWithRole(final Role role)", "testcase": false, "constructor": false}, {"identifier": "isUserAllowedToUseVirtualDatacenter", "parameters": "(final String username,\n        final String authtype, final String[] privileges, final Integer idVdc)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "boolean", "signature": "boolean isUserAllowedToUseVirtualDatacenter(final String username,\n        final String authtype, final String[] privileges, final Integer idVdc)", "full_signature": "@SuppressWarnings(\"rawtypes\") public boolean isUserAllowedToUseVirtualDatacenter(final String username,\n        final String authtype, final String[] privileges, final Integer idVdc)", "class_method_signature": "UserDAO.isUserAllowedToUseVirtualDatacenter(final String username,\n        final String authtype, final String[] privileges, final Integer idVdc)", "testcase": false, "constructor": false}, {"identifier": "isUserAllowedToEnterprise", "parameters": "(final String username, final String authtype,\n        final String[] privileges, final Integer ident)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "boolean", "signature": "boolean isUserAllowedToEnterprise(final String username, final String authtype,\n        final String[] privileges, final Integer ident)", "full_signature": "@SuppressWarnings(\"rawtypes\") public boolean isUserAllowedToEnterprise(final String username, final String authtype,\n        final String[] privileges, final Integer ident)", "class_method_signature": "UserDAO.isUserAllowedToEnterprise(final String username, final String authtype,\n        final String[] privileges, final Integer ident)", "testcase": false, "constructor": false}], "file": "model/src/main/java/com/abiquo/server/core/enterprise/UserDAO.java"}, "focal_method": {"identifier": "isUserAllowedToEnterprise", "parameters": "(final String username, final String authtype,\n        final String[] privileges, final Integer ident)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "boolean", "body": "@SuppressWarnings(\"rawtypes\")\n    public boolean isUserAllowedToEnterprise(final String username, final String authtype,\n        final String[] privileges, final Integer ident)\n    {\n\n        Query query = getSession().createSQLQuery(USER_ALLOWED_ENTERPRSE_SQL);\n        query.setParameter(\"username\", username);\n        query.setParameter(\"authtype\", authtype);\n        query.setParameterList(\"privileges\", privileges);\n        query.setParameter(\"identerprise\", ident);\n        List result = query.list();\n\n        if (result == null || result.isEmpty())\n        {\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }", "signature": "boolean isUserAllowedToEnterprise(final String username, final String authtype,\n        final String[] privileges, final Integer ident)", "full_signature": "@SuppressWarnings(\"rawtypes\") public boolean isUserAllowedToEnterprise(final String username, final String authtype,\n        final String[] privileges, final Integer ident)", "class_method_signature": "UserDAO.isUserAllowedToEnterprise(final String username, final String authtype,\n        final String[] privileges, final Integer ident)", "testcase": false, "constructor": false, "invocations": ["createSQLQuery", "getSession", "setParameter", "setParameter", "setParameterList", "setParameter", "list", "isEmpty"]}, "repository": {"repo_id": 1320181, "url": "https://github.com/abiquo/abiquo", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 25, "size": 82580, "license": "licensed"}}