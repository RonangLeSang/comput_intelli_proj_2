{"test_class": {"identifier": "TestKVMNotifier", "superclass": "extends TestNotifierBase<KVMNotifier>", "interfaces": "", "fields": [{"original_string": "protected KVMNotifier notifier = null;", "modifier": "protected", "type": "KVMNotifier", "declarator": "notifier = null", "var_name": "notifier"}], "file": "vsm/src/test/java/com/abiquo/vsm/redis/pubsub/notifier/impl/TestKVMNotifier.java"}, "test_case": {"identifier": "test_migration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_migration()\n    {\n        VirtualMachine vm = new VirtualMachine();\n        PhysicalMachine pm0 = new PhysicalMachine();\n        PhysicalMachine pm1 = new PhysicalMachine();\n\n        pm0.setId(0);\n        pm0.setAddress(\"http://10.30.1.203:443/\");\n        pm0.setUsername(\"\");\n        pm0.setPassword(\"\");\n        pm0.setType(Type.KVM.name());\n\n        pm1.setId(1);\n        pm1.setAddress(\"http://10.30.1.205:443/\");\n        pm1.setUsername(\"\");\n        pm1.setPassword(\"\");\n        pm1.setType(Type.KVM.name());\n\n        vm.setId(0);\n        vm.setLastKnownState(null);\n        vm.setName(\"ABQ_\" + UUID.randomUUID().toString());\n        vm.setPhysicalMachine(pm0);\n\n        List<VirtualSystemEvent> notifications;\n\n        // Live migration\n        notifications = notifier.processEvent(vm, pm1, VMEventType.RESUMED);\n        assertEquals(notifications.size(), 2);\n        assertTrue(containsMovedEvent(notifications));\n        assertTrue(containsEvent(VMEventType.POWER_ON, notifications));\n        assertTrue(notificationsFromMachine(notifications, pm1));\n\n        vm.setPhysicalMachine(pm1);\n        notifications = notifier.processEvent(vm, pm0, VMEventType.POWER_OFF);\n        assertTrue(notifications.isEmpty());\n\n        vm.setPhysicalMachine(pm1);\n        notifications = notifier.processEvent(vm, pm1, VMEventType.CREATED);\n        assertTrue(notifications.isEmpty());\n\n        // Migration\n        vm.setPhysicalMachine(pm0);\n\n        notifications = notifier.processEvent(vm, pm1, VMEventType.POWER_ON);\n        assertEquals(notifications.size(), 2);\n        assertTrue(containsMovedEvent(notifications));\n        assertTrue(containsEvent(VMEventType.POWER_ON, notifications));\n        assertTrue(notificationsFromMachine(notifications, pm1));\n\n        vm.setPhysicalMachine(pm1);\n        notifications = notifier.processEvent(vm, pm0, VMEventType.POWER_OFF);\n        assertTrue(notifications.isEmpty());\n\n        vm.setPhysicalMachine(pm1);\n        notifications = notifier.processEvent(vm, pm1, VMEventType.CREATED);\n        assertTrue(notifications.isEmpty());\n\n        // Non-movement\n        vm.setPhysicalMachine(pm0);\n\n        notifications = notifier.processEvent(vm, pm1, VMEventType.POWER_OFF);\n        assertFalse(containsMovedEvent(notifications));\n\n        notifications = notifier.processEvent(vm, pm1, VMEventType.PAUSED);\n        assertFalse(containsMovedEvent(notifications));\n\n        notifications = notifier.processEvent(vm, pm1, VMEventType.CREATED);\n        assertFalse(containsMovedEvent(notifications));\n    }", "signature": "void test_migration()", "full_signature": "@Test public void test_migration()", "class_method_signature": "TestKVMNotifier.test_migration()", "testcase": true, "constructor": false, "invocations": ["setId", "setAddress", "setUsername", "setPassword", "setType", "name", "setId", "setAddress", "setUsername", "setPassword", "setType", "name", "setId", "setLastKnownState", "setName", "toString", "randomUUID", "setPhysicalMachine", "processEvent", "assertEquals", "size", "assertTrue", "containsMovedEvent", "assertTrue", "containsEvent", "assertTrue", "notificationsFromMachine", "setPhysicalMachine", "processEvent", "assertTrue", "isEmpty", "setPhysicalMachine", "processEvent", "assertTrue", "isEmpty", "setPhysicalMachine", "processEvent", "assertEquals", "size", "assertTrue", "containsMovedEvent", "assertTrue", "containsEvent", "assertTrue", "notificationsFromMachine", "setPhysicalMachine", "processEvent", "assertTrue", "isEmpty", "setPhysicalMachine", "processEvent", "assertTrue", "isEmpty", "setPhysicalMachine", "processEvent", "assertFalse", "containsMovedEvent", "processEvent", "assertFalse", "containsMovedEvent", "processEvent", "assertFalse", "containsMovedEvent"]}, "focal_class": {"identifier": "KVMNotifier", "superclass": "extends GenericNotifier", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(KVMNotifier.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KVMNotifier.class)", "var_name": "logger"}, {"original_string": "private final Set<VMEventType> mustNotifyMovement;", "modifier": "private final", "type": "Set<VMEventType>", "declarator": "mustNotifyMovement", "var_name": "mustNotifyMovement"}, {"original_string": "private final Set<VMEventType> validEvents;", "modifier": "private final", "type": "Set<VMEventType>", "declarator": "validEvents", "var_name": "validEvents"}], "methods": [{"identifier": "KVMNotifier", "parameters": "()", "modifiers": "public", "return": "", "signature": " KVMNotifier()", "full_signature": "public  KVMNotifier()", "class_method_signature": "KVMNotifier.KVMNotifier()", "testcase": false, "constructor": true}, {"identifier": "processEvent", "parameters": "(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)", "modifiers": "@Override public", "return": "List<VirtualSystemEvent>", "signature": "List<VirtualSystemEvent> processEvent(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)", "full_signature": "@Override public List<VirtualSystemEvent> processEvent(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)", "class_method_signature": "KVMNotifier.processEvent(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)", "testcase": false, "constructor": false}, {"identifier": "buildMovementNotifications", "parameters": "(VirtualMachine virtualMachine,\n        final PhysicalMachine machine)", "modifiers": "protected", "return": "List<VirtualSystemEvent>", "signature": "List<VirtualSystemEvent> buildMovementNotifications(VirtualMachine virtualMachine,\n        final PhysicalMachine machine)", "full_signature": "protected List<VirtualSystemEvent> buildMovementNotifications(VirtualMachine virtualMachine,\n        final PhysicalMachine machine)", "class_method_signature": "KVMNotifier.buildMovementNotifications(VirtualMachine virtualMachine,\n        final PhysicalMachine machine)", "testcase": false, "constructor": false}], "file": "vsm/src/main/java/com/abiquo/vsm/redis/pubsub/notifier/impl/KVMNotifier.java"}, "focal_method": {"identifier": "processEvent", "parameters": "(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)", "modifiers": "@Override public", "return": "List<VirtualSystemEvent>", "body": "@Override\n    public List<VirtualSystemEvent> processEvent(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)\n    {\n        logger.trace(String.format(\"Processing %s %s event from machine %s\",\n            virtualMachine.getName(), event.name(), machine.getAddress()));\n\n        if (samePhysicalMachineAddress(virtualMachine.getPhysicalMachine(), machine))\n        {\n            if (validEvents.contains(event) && !alreadyNotified(virtualMachine, event))\n            {\n                return Collections.singletonList(buildVirtualSystemEvent(virtualMachine, event));\n            }\n        }\n        else if (mustNotifyMovement.contains(event))\n        {\n            return buildMovementNotifications(virtualMachine, machine);\n        }\n\n        return Collections.emptyList();\n    }", "signature": "List<VirtualSystemEvent> processEvent(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)", "full_signature": "@Override public List<VirtualSystemEvent> processEvent(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)", "class_method_signature": "KVMNotifier.processEvent(final VirtualMachine virtualMachine,\n        final PhysicalMachine machine, final VMEventType event)", "testcase": false, "constructor": false, "invocations": ["trace", "format", "getName", "name", "getAddress", "samePhysicalMachineAddress", "getPhysicalMachine", "contains", "alreadyNotified", "singletonList", "buildVirtualSystemEvent", "contains", "buildMovementNotifications", "emptyList"]}, "repository": {"repo_id": 1320181, "url": "https://github.com/abiquo/abiquo", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 25, "size": 82580, "license": "licensed"}}