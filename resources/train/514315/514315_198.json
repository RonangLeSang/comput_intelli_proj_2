{"test_class": {"identifier": "JSONResultConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JSONResultConverter converterNotPaged = new JSONResultConverter(GraphSONMode.NORMAL, 0, Long.MAX_VALUE, null);", "modifier": "private", "type": "JSONResultConverter", "declarator": "converterNotPaged = new JSONResultConverter(GraphSONMode.NORMAL, 0, Long.MAX_VALUE, null)", "var_name": "converterNotPaged"}, {"original_string": "private JSONResultConverter converterPaged = new JSONResultConverter(GraphSONMode.NORMAL, 1, 3, null);", "modifier": "private", "type": "JSONResultConverter", "declarator": "converterPaged = new JSONResultConverter(GraphSONMode.NORMAL, 1, 3, null)", "var_name": "converterPaged"}], "file": "rexster-protocol/src/test/java/com/tinkerpop/rexster/gremlin/converter/JSONResultConverterTest.java"}, "test_case": {"identifier": "convertTableNotPaged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertTableNotPaged() throws Exception {\n        Table table = new Table(\"col1\", \"col2\");\n        table.addRow(\"x1\", \"x2\");\n        table.addRow(\"y1\", \"y2\");\n\n        JSONArray results = this.converterNotPaged.convert(table);\n\n        Assert.assertNotNull(results);\n        Assert.assertEquals(2, results.length());\n\n        boolean rowMatchX = false;\n        boolean rowMatchY = false;\n        for (int ix = 0; ix < results.length(); ix++) {\n            JSONObject row = results.optJSONObject(ix);\n\n            Assert.assertNotNull(row);\n            Assert.assertTrue(row.has(\"col1\"));\n            Assert.assertTrue(row.has(\"col2\"));\n\n            if (row.optString(\"col1\").equals(\"x1\") && row.optString(\"col2\").equals(\"x2\")) {\n                rowMatchX = true;\n            }\n\n            if (row.optString(\"col1\").equals(\"y1\") && row.optString(\"col2\").equals(\"y2\")) {\n                rowMatchY = true;\n            }\n        }\n\n        Assert.assertTrue(rowMatchX && rowMatchY);\n    }", "signature": "void convertTableNotPaged()", "full_signature": "@Test public void convertTableNotPaged()", "class_method_signature": "JSONResultConverterTest.convertTableNotPaged()", "testcase": true, "constructor": false, "invocations": ["addRow", "addRow", "convert", "assertNotNull", "assertEquals", "length", "length", "optJSONObject", "assertNotNull", "assertTrue", "has", "assertTrue", "has", "equals", "optString", "equals", "optString", "equals", "optString", "equals", "optString", "assertTrue"]}, "focal_class": {"identifier": "JSONResultConverter", "superclass": "", "interfaces": "implements ResultConverter<JSONArray>", "fields": [{"original_string": "private final GraphSONMode mode;", "modifier": "private final", "type": "GraphSONMode", "declarator": "mode", "var_name": "mode"}, {"original_string": "private final long offsetStart;", "modifier": "private final", "type": "long", "declarator": "offsetStart", "var_name": "offsetStart"}, {"original_string": "private final long offsetEnd;", "modifier": "private final", "type": "long", "declarator": "offsetEnd", "var_name": "offsetEnd"}, {"original_string": "private final Set<String> returnKeys;", "modifier": "private final", "type": "Set<String>", "declarator": "returnKeys", "var_name": "returnKeys"}], "methods": [{"identifier": "JSONResultConverter", "parameters": "(final GraphSONMode mode, final long offsetStart, final long offsetEnd,\n                               final Set<String> returnKeys)", "modifiers": "public", "return": "", "signature": " JSONResultConverter(final GraphSONMode mode, final long offsetStart, final long offsetEnd,\n                               final Set<String> returnKeys)", "full_signature": "public  JSONResultConverter(final GraphSONMode mode, final long offsetStart, final long offsetEnd,\n                               final Set<String> returnKeys)", "class_method_signature": "JSONResultConverter.JSONResultConverter(final GraphSONMode mode, final long offsetStart, final long offsetEnd,\n                               final Set<String> returnKeys)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(final Object result)", "modifiers": "public", "return": "JSONArray", "signature": "JSONArray convert(final Object result)", "full_signature": "public JSONArray convert(final Object result)", "class_method_signature": "JSONResultConverter.convert(final Object result)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(final Object result, final boolean returnTotal)", "modifiers": "public", "return": "Pair<JSONArray, Long>", "signature": "Pair<JSONArray, Long> convert(final Object result, final boolean returnTotal)", "full_signature": "public Pair<JSONArray, Long> convert(final Object result, final boolean returnTotal)", "class_method_signature": "JSONResultConverter.convert(final Object result, final boolean returnTotal)", "testcase": false, "constructor": false}, {"identifier": "prepareOutput", "parameters": "(final Object object)", "modifiers": "private", "return": "Object", "signature": "Object prepareOutput(final Object object)", "full_signature": "private Object prepareOutput(final Object object)", "class_method_signature": "JSONResultConverter.prepareOutput(final Object object)", "testcase": false, "constructor": false}], "file": "rexster-protocol/src/main/java/com/tinkerpop/rexster/gremlin/converter/JSONResultConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(final Object result)", "modifiers": "public", "return": "JSONArray", "body": "public JSONArray convert(final Object result) throws Exception {\n        return convert(result, false).getA();\n    }", "signature": "JSONArray convert(final Object result)", "full_signature": "public JSONArray convert(final Object result)", "class_method_signature": "JSONResultConverter.convert(final Object result)", "testcase": false, "constructor": false, "invocations": ["getA", "convert"]}, "repository": {"repo_id": 514315, "url": "https://github.com/tinkerpop/rexster", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 435, "size": 90958, "license": "licensed"}}