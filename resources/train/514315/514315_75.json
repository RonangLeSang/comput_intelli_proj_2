{"test_class": {"identifier": "AbstractSailGraphConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockSailGraphConfiguration configuration = new MockSailGraphConfiguration();", "modifier": "private", "type": "MockSailGraphConfiguration", "declarator": "configuration = new MockSailGraphConfiguration()", "var_name": "configuration"}], "file": "rexster-server/src/test/java/com/tinkerpop/rexster/config/AbstractSailGraphConfigurationTest.java"}, "test_case": {"identifier": "configureGraphInstanceNativeSailTypeEmptyGraphFile", "parameters": "()", "modifiers": "@Test(expected = GraphConfigurationException.class) public", "return": "void", "body": "@Test(expected = GraphConfigurationException.class)\n    public void configureGraphInstanceNativeSailTypeEmptyGraphFile() throws GraphConfigurationException {\n        HierarchicalConfiguration graphConfig = new HierarchicalConfiguration();\n        graphConfig.setProperty(Tokens.REXSTER_GRAPH_LOCATION, \"\");\n        Map<String, RexsterApplicationGraph> graphs = new HashMap<String, RexsterApplicationGraph>();\n        GraphConfigurationContext context = new GraphConfigurationContext(graphConfig, graphs);\n\n        this.configuration.setSailType(AbstractSailGraphConfiguration.SAIL_TYPE_NATIVE);\n\n        this.configuration.configureGraphInstance(context);\n    }", "signature": "void configureGraphInstanceNativeSailTypeEmptyGraphFile()", "full_signature": "@Test(expected = GraphConfigurationException.class) public void configureGraphInstanceNativeSailTypeEmptyGraphFile()", "class_method_signature": "AbstractSailGraphConfigurationTest.configureGraphInstanceNativeSailTypeEmptyGraphFile()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setSailType", "configureGraphInstance"]}, "focal_class": {"identifier": "AbstractSailGraphConfiguration", "superclass": "", "interfaces": "implements GraphConfiguration", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(AbstractSailGraphConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(AbstractSailGraphConfiguration.class)", "var_name": "logger"}, {"original_string": "public static final String SAIL_TYPE_MEMORY = \"memory\";", "modifier": "public static final", "type": "String", "declarator": "SAIL_TYPE_MEMORY = \"memory\"", "var_name": "SAIL_TYPE_MEMORY"}, {"original_string": "public static final String SAIL_TYPE_LINKED_DATA = \"linked-data\";", "modifier": "public static final", "type": "String", "declarator": "SAIL_TYPE_LINKED_DATA = \"linked-data\"", "var_name": "SAIL_TYPE_LINKED_DATA"}, {"original_string": "public static final String SAIL_TYPE_NATIVE = \"native\";", "modifier": "public static final", "type": "String", "declarator": "SAIL_TYPE_NATIVE = \"native\"", "var_name": "SAIL_TYPE_NATIVE"}, {"original_string": "public static final String SAIL_TYPE_SPARQL = \"sparql\";", "modifier": "public static final", "type": "String", "declarator": "SAIL_TYPE_SPARQL = \"sparql\"", "var_name": "SAIL_TYPE_SPARQL"}, {"original_string": "protected String sailType;", "modifier": "protected", "type": "String", "declarator": "sailType", "var_name": "sailType"}], "methods": [{"identifier": "configureGraphInstance", "parameters": "(final GraphConfigurationContext context)", "modifiers": "public", "return": "Graph", "signature": "Graph configureGraphInstance(final GraphConfigurationContext context)", "full_signature": "public Graph configureGraphInstance(final GraphConfigurationContext context)", "class_method_signature": "AbstractSailGraphConfiguration.configureGraphInstance(final GraphConfigurationContext context)", "testcase": false, "constructor": false}], "file": "rexster-server/src/main/java/com/tinkerpop/rexster/config/AbstractSailGraphConfiguration.java"}, "focal_method": {"identifier": "configureGraphInstance", "parameters": "(final GraphConfigurationContext context)", "modifiers": "public", "return": "Graph", "body": "public Graph configureGraphInstance(final GraphConfigurationContext context) throws GraphConfigurationException {\n        final String graphFile = context.getProperties().getString(Tokens.REXSTER_GRAPH_LOCATION, null);\n\n        // get the <properties> section of the xml configuration\n        final HierarchicalConfiguration graphSectionConfig = (HierarchicalConfiguration) context.getProperties();\n        SubnodeConfiguration sailSpecificConfiguration = null;\n\n        try {\n            sailSpecificConfiguration = graphSectionConfig.configurationAt(Tokens.REXSTER_GRAPH_PROPERTIES);\n        } catch (IllegalArgumentException iae) {\n            // it's ok if this is missing.  it is optional depending on the settings\n        }\n\n        // graph-file and data-directory must be present for native, sparql, and linked-data\n        if ((sailType.equals(SAIL_TYPE_NATIVE) || sailType.equals(SAIL_TYPE_SPARQL) || sailType.equals(SAIL_TYPE_LINKED_DATA))\n                && (graphFile == null || graphFile.trim().length() == 0)) {\n            throw new GraphConfigurationException(\"Check graph configuration. Missing or empty configuration element: \" + Tokens.REXSTER_GRAPH_LOCATION);\n        }\n\n        try {\n            SailGraph graph = null;\n\n            if (this.sailType.equals(SAIL_TYPE_MEMORY)) {\n\n                if (graphFile != null && !graphFile.isEmpty()) {\n                    logger.warn(\"[\" + MemoryStoreSailGraph.class.getSimpleName() + \"] doesn't support the graph-file parameter.  It will be ignored.\");\n                }\n\n                graph = new MemoryStoreSailGraph();\n            } else if (this.sailType.equals(SAIL_TYPE_LINKED_DATA)) {\n                RexsterApplicationGraph baseGraph = context.getGraphs().get(graphFile);\n                if (null == baseGraph) {\n                    throw new GraphConfigurationException(\"no such base graph for LinkedDataSail graph: \" + graphFile);\n                }\n                if (!(baseGraph.getGraph() instanceof SailGraph)) {\n                    throw new GraphConfigurationException(\"base graph for LinkedDataSail graph must be an instance of SailGraph\");\n                }\n                if (baseGraph.getGraph() instanceof LinkedDataSailGraph) {\n                    throw new GraphConfigurationException(\"LinkedDataSail graph based on another LinkedDataSail graph\");\n                }\n\n                graph = new LinkedDataSailGraph((SailGraph) baseGraph.getGraph());\n            } else if (this.sailType.equals(SAIL_TYPE_NATIVE)) {\n                String configTripleIndices = \"\";\n                if (sailSpecificConfiguration != null) {\n                    configTripleIndices = sailSpecificConfiguration.getString(\"triple-indices\", \"\");\n                }\n\n                if (configTripleIndices != null && configTripleIndices.trim().length() > 0) {\n                    graph = new NativeStoreSailGraph(graphFile, configTripleIndices);\n                } else {\n                    graph = new NativeStoreSailGraph(graphFile);\n                }\n            } else if (this.sailType.equals(SAIL_TYPE_SPARQL)) {\n                graph = new SparqlRepositorySailGraph(graphFile);\n            }\n\n            return graph;\n        } catch (Exception ex) {\n            throw new GraphConfigurationException(ex);\n        }\n    }", "signature": "Graph configureGraphInstance(final GraphConfigurationContext context)", "full_signature": "public Graph configureGraphInstance(final GraphConfigurationContext context)", "class_method_signature": "AbstractSailGraphConfiguration.configureGraphInstance(final GraphConfigurationContext context)", "testcase": false, "constructor": false, "invocations": ["getString", "getProperties", "getProperties", "configurationAt", "equals", "equals", "equals", "length", "trim", "equals", "isEmpty", "warn", "getSimpleName", "equals", "get", "getGraphs", "getGraph", "getGraph", "getGraph", "equals", "getString", "length", "trim", "equals"]}, "repository": {"repo_id": 514315, "url": "https://github.com/tinkerpop/rexster", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 435, "size": 90958, "license": "licensed"}}