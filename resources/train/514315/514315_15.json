{"test_class": {"identifier": "SparqlExtensionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Graph graph;", "modifier": "private", "type": "Graph", "declarator": "graph", "var_name": "graph"}, {"original_string": "private RexsterResourceContext ctx;", "modifier": "private", "type": "RexsterResourceContext", "declarator": "ctx", "var_name": "ctx"}], "file": "rexster-kibbles/sparql-kibble/src/test/java/com/tinkerpop/rexster/kibbles/sparql/SparqlExtensionTest.java"}, "test_case": {"identifier": "evaluateSparqlNoReturnKeysNoShowTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evaluateSparqlNoReturnKeysNoShowTypes() {\n        String sparqlQuery = \"SELECT ?x ?y WHERE { ?x <http://tinkerpop.com#knows> ?y }\";\n\n        this.ctx = new RexsterResourceContext(null, null, null, new JSONObject(), null, null, null, null);\n\n        SparqlExtension extension = new SparqlExtension();\n        ExtensionResponse extensionResponse = extension.evaluateSparql(this.ctx, this.graph, sparqlQuery);\n\n        Assert.assertNotNull(extensionResponse);\n        Assert.assertFalse(extensionResponse.isErrorResponse());\n\n        Response jerseyResponse = extensionResponse.getJerseyResponse();\n        Assert.assertNotNull(jerseyResponse);\n        Assert.assertEquals(Response.Status.OK.getStatusCode(), jerseyResponse.getStatus());\n\n        JSONObject jsonResponseEntity = (JSONObject) jerseyResponse.getEntity();\n        Assert.assertNotNull(jsonResponseEntity);\n\n        Assert.assertTrue(jsonResponseEntity.has(Tokens.RESULTS));\n\n        JSONArray results = jsonResponseEntity.optJSONArray(Tokens.RESULTS);\n        Assert.assertNotNull(results);\n        Assert.assertEquals(2, results.length());\n\n    }", "signature": "void evaluateSparqlNoReturnKeysNoShowTypes()", "full_signature": "@Test public void evaluateSparqlNoReturnKeysNoShowTypes()", "class_method_signature": "SparqlExtensionTest.evaluateSparqlNoReturnKeysNoShowTypes()", "testcase": true, "constructor": false, "invocations": ["evaluateSparql", "assertNotNull", "assertFalse", "isErrorResponse", "getJerseyResponse", "assertNotNull", "assertEquals", "getStatusCode", "getStatus", "getEntity", "assertNotNull", "assertTrue", "has", "optJSONArray", "assertNotNull", "assertEquals", "length"]}, "focal_class": {"identifier": "SparqlExtension", "superclass": "extends AbstractRexsterExtension", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(SparqlExtension.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(SparqlExtension.class)", "var_name": "logger"}, {"original_string": "public static final String EXTENSION_NAMESPACE = \"tp\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_NAMESPACE = \"tp\"", "var_name": "EXTENSION_NAMESPACE"}, {"original_string": "public static final String EXTENSION_NAME = \"sparql\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_NAME = \"sparql\"", "var_name": "EXTENSION_NAME"}, {"original_string": "private static final String WILDCARD = \"*\";", "modifier": "private static final", "type": "String", "declarator": "WILDCARD = \"*\"", "var_name": "WILDCARD"}, {"original_string": "private static final String API_SHOW_TYPES = \"displays the properties of the elements with their native data type (default is false)\";", "modifier": "private static final", "type": "String", "declarator": "API_SHOW_TYPES = \"displays the properties of the elements with their native data type (default is false)\"", "var_name": "API_SHOW_TYPES"}, {"original_string": "private static final String API_QUERY = \"the SPARQL query to be evaluated\";", "modifier": "private static final", "type": "String", "declarator": "API_QUERY = \"the SPARQL query to be evaluated\"", "var_name": "API_QUERY"}, {"original_string": "private static final String API_RETURN_KEYS = \"an array of element property keys to return (default is to return all element properties)\";", "modifier": "private static final", "type": "String", "declarator": "API_RETURN_KEYS = \"an array of element property keys to return (default is to return all element properties)\"", "var_name": "API_RETURN_KEYS"}], "methods": [{"identifier": "evaluateSparql", "parameters": "(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString)", "modifiers": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH) @ExtensionDescriptor(description = \"execute SPARQL queries against a SAIL graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS) }) public", "return": "ExtensionResponse", "signature": "ExtensionResponse evaluateSparql(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString)", "full_signature": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH) @ExtensionDescriptor(description = \"execute SPARQL queries against a SAIL graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS) }) public ExtensionResponse evaluateSparql(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString)", "class_method_signature": "SparqlExtension.evaluateSparql(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString)", "testcase": false, "constructor": false}], "file": "rexster-kibbles/sparql-kibble/src/main/java/com/tinkerpop/rexster/kibbles/sparql/SparqlExtension.java"}, "focal_method": {"identifier": "evaluateSparql", "parameters": "(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString)", "modifiers": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH) @ExtensionDescriptor(description = \"execute SPARQL queries against a SAIL graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS) }) public", "return": "ExtensionResponse", "body": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH)\n    @ExtensionDescriptor(description = \"execute SPARQL queries against a SAIL graph.\",\n            api = {\n                    @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES),\n                    @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS)\n            })\n    public ExtensionResponse evaluateSparql(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString) {\n        if (queryString == null || queryString.isEmpty()) {\n            final ExtensionMethod extMethod = context.getExtensionMethod();\n            return ExtensionResponse.error(\n                    \"the query parameter cannot be empty\",\n                    null,\n                    Response.Status.BAD_REQUEST.getStatusCode(),\n                    null,\n                    generateErrorJson(extMethod.getExtensionApiAsJson()));\n        }\n\n        final JSONObject requestObject = context.getRequestObject();\n        final boolean showTypes = RequestObjectHelper.getShowTypes(requestObject);\n        final GraphSONMode mode = showTypes ? GraphSONMode.EXTENDED : GraphSONMode.NORMAL;\n        final Set<String> returnKeys = RequestObjectHelper.getReturnKeys(requestObject, WILDCARD);\n\n        if (!(graph instanceof SailGraph)) {\n            final ExtensionMethod extMethod = context.getExtensionMethod();\n            return ExtensionResponse.error(\n                    \"the graph to which this extension is applied is not a SailGraph implementation\",\n                    null,\n                    Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),\n                    null,\n                    generateErrorJson(extMethod.getExtensionApiAsJson()));\n        }\n\n        try {\n\n            final SailGraph sailGraph = (SailGraph) graph;\n            final List<Map<String, Vertex>> sparqlResults = sailGraph.executeSparql(queryString);\n\n            final JSONArray jsonArray = new JSONArray();\n\n            for (Map<String, Vertex> map : sparqlResults) {\n                Map<String, JSONObject> mapOfJson = new HashMap<String, JSONObject>();\n                for (String key : map.keySet()) {\n                    mapOfJson.put(key, GraphSONUtility.jsonFromElement(map.get(key), returnKeys, mode));\n                }\n\n                jsonArray.put(new JSONObject(mapOfJson));\n            }\n\n            final HashMap<String, Object> resultMap = new HashMap<String, Object>();\n            resultMap.put(Tokens.SUCCESS, true);\n            resultMap.put(Tokens.RESULTS, jsonArray);\n\n            final JSONObject resultObject = new JSONObject(resultMap);\n            return ExtensionResponse.ok(resultObject);\n\n        } catch (Exception mqe) {\n            logger.error(mqe);\n            return ExtensionResponse.error(\n                    \"Error executing SPARQL query [\" + queryString + \"]\", generateErrorJson());\n        }\n\n    }", "signature": "ExtensionResponse evaluateSparql(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString)", "full_signature": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH) @ExtensionDescriptor(description = \"execute SPARQL queries against a SAIL graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS) }) public ExtensionResponse evaluateSparql(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString)", "class_method_signature": "SparqlExtension.evaluateSparql(@RexsterContext final RexsterResourceContext context,\n                                            @RexsterContext final Graph graph,\n                                            @ExtensionRequestParameter(name = \"query\", description = API_QUERY) final String queryString)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getExtensionMethod", "error", "getStatusCode", "generateErrorJson", "getExtensionApiAsJson", "getRequestObject", "getShowTypes", "getReturnKeys", "getExtensionMethod", "error", "getStatusCode", "generateErrorJson", "getExtensionApiAsJson", "executeSparql", "keySet", "put", "jsonFromElement", "get", "put", "put", "put", "ok", "error", "error", "generateErrorJson"]}, "repository": {"repo_id": 514315, "url": "https://github.com/tinkerpop/rexster", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 435, "size": 90958, "license": "licensed"}}