{"test_class": {"identifier": "ExtensionConfigurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "rexster-core/src/test/java/com/tinkerpop/rexster/extension/ExtensionConfigurationTest.java"}, "test_case": {"identifier": "shouldNotEqualWhenConfig1HasKeyConfig2DoesNot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotEqualWhenConfig1HasKeyConfig2DoesNot() {\n        HierarchicalConfiguration hc1 = new HierarchicalConfiguration();\n        hc1.addProperty(\"key1\", \"value1\");\n        hc1.addProperty(\"key2\", \"value2\");\n        ExtensionConfiguration config1 = new ExtensionConfiguration(\"ns\", \"name\", hc1);\n\n        HierarchicalConfiguration hc2 = new HierarchicalConfiguration();\n        hc2.addProperty(\"key1\", \"value1\");\n        hc2.addProperty(\"new-key\", \"value1\");\n        ExtensionConfiguration config2 = new ExtensionConfiguration(\"ns\", \"name\", hc2);\n\n        Assert.assertFalse(config1.equals(config2));\n    }", "signature": "void shouldNotEqualWhenConfig1HasKeyConfig2DoesNot()", "full_signature": "@Test public void shouldNotEqualWhenConfig1HasKeyConfig2DoesNot()", "class_method_signature": "ExtensionConfigurationTest.shouldNotEqualWhenConfig1HasKeyConfig2DoesNot()", "testcase": true, "constructor": false, "invocations": ["addProperty", "addProperty", "addProperty", "addProperty", "assertFalse", "equals"]}, "focal_class": {"identifier": "ExtensionConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(ExtensionConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(ExtensionConfiguration.class)", "var_name": "logger"}, {"original_string": "private final String namespace;", "modifier": "private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private final String extensionName;", "modifier": "private final", "type": "String", "declarator": "extensionName", "var_name": "extensionName"}, {"original_string": "private final HierarchicalConfiguration configuration;", "modifier": "private final", "type": "HierarchicalConfiguration", "declarator": "configuration", "var_name": "configuration"}], "methods": [{"identifier": "ExtensionConfiguration", "parameters": "(final String namespace, final String extensionName, final HierarchicalConfiguration extensionConfiguration)", "modifiers": "public", "return": "", "signature": " ExtensionConfiguration(final String namespace, final String extensionName, final HierarchicalConfiguration extensionConfiguration)", "full_signature": "public  ExtensionConfiguration(final String namespace, final String extensionName, final HierarchicalConfiguration extensionConfiguration)", "class_method_signature": "ExtensionConfiguration.ExtensionConfiguration(final String namespace, final String extensionName, final HierarchicalConfiguration extensionConfiguration)", "testcase": false, "constructor": true}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespace()", "full_signature": "public String getNamespace()", "class_method_signature": "ExtensionConfiguration.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "getExtensionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExtensionName()", "full_signature": "public String getExtensionName()", "class_method_signature": "ExtensionConfiguration.getExtensionName()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "HierarchicalConfiguration", "signature": "HierarchicalConfiguration getConfiguration()", "full_signature": "public HierarchicalConfiguration getConfiguration()", "class_method_signature": "ExtensionConfiguration.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "tryGetMapFromConfiguration", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> tryGetMapFromConfiguration()", "full_signature": "public Map<String, String> tryGetMapFromConfiguration()", "class_method_signature": "ExtensionConfiguration.tryGetMapFromConfiguration()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ExtensionConfiguration.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ExtensionConfiguration.hashCode()", "testcase": false, "constructor": false}], "file": "rexster-core/src/main/java/com/tinkerpop/rexster/extension/ExtensionConfiguration.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        final ExtensionConfiguration that = (ExtensionConfiguration) o;\n\n        if (!extensionName.equals(that.extensionName)) return false;\n        if (!namespace.equals(that.namespace)) return false;\n        if (!new HierarchicalConfigurationComparator().compare(this.getConfiguration(), that.getConfiguration())) return false;\n\n        return true;\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ExtensionConfiguration.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals", "compare", "getConfiguration", "getConfiguration"]}, "repository": {"repo_id": 514315, "url": "https://github.com/tinkerpop/rexster", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 435, "size": 90958, "license": "licensed"}}