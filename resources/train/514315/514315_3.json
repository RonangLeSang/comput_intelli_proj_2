{"test_class": {"identifier": "BatchExtensionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Graph graph;", "modifier": "private", "type": "Graph", "declarator": "graph", "var_name": "graph"}, {"original_string": "private RexsterResourceContext ctx;", "modifier": "private", "type": "RexsterResourceContext", "declarator": "ctx", "var_name": "ctx"}], "file": "rexster-kibbles/batch-kibble/src/test/java/com/tinkerpop/rexster/kibbles/batch/BatchExtensionTest.java"}, "test_case": {"identifier": "getVerticesTypeIndexNoKeyInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getVerticesTypeIndexNoKeyInvalid() throws Exception {\n        BatchExtension batchExtension = new BatchExtension();\n\n        createManualIndices((IndexableGraph) graph);\n\n        JSONObject requestObject = new JSONObject();\n        JSONArray values = new JSONArray();\n        values.put(\"(i,27)\");\n        values.put(\"(i,29)\");\n        values.put(\"(i,32)\");\n        requestObject.put(\"values\", values);\n        requestObject.put(\"type\", \"index\");\n\n        this.ctx = new RexsterResourceContext(null, null, null, requestObject, null, null, null, null);\n\n        ExtensionResponse response = batchExtension.getVertices(this.ctx, graph);\n\n        Assert.assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getJerseyResponse().getStatus());\n\n    }", "signature": "void getVerticesTypeIndexNoKeyInvalid()", "full_signature": "@Test public void getVerticesTypeIndexNoKeyInvalid()", "class_method_signature": "BatchExtensionTest.getVerticesTypeIndexNoKeyInvalid()", "testcase": true, "constructor": false, "invocations": ["createManualIndices", "put", "put", "put", "put", "put", "getVertices", "assertEquals", "getStatusCode", "getStatus", "getJerseyResponse"]}, "focal_class": {"identifier": "BatchExtension", "superclass": "extends AbstractRexsterExtension", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(BatchExtension.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(BatchExtension.class)", "var_name": "logger"}, {"original_string": "public static final String EXTENSION_NAMESPACE = \"tp\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_NAMESPACE = \"tp\"", "var_name": "EXTENSION_NAMESPACE"}, {"original_string": "public static final String EXTENSION_NAME = \"batch\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_NAME = \"batch\"", "var_name": "EXTENSION_NAME"}, {"original_string": "private static final String WILDCARD = \"*\";", "modifier": "private static final", "type": "String", "declarator": "WILDCARD = \"*\"", "var_name": "WILDCARD"}, {"original_string": "private static final String API_SHOW_TYPES = \"displays the properties of the elements with their native data type (default is false)\";", "modifier": "private static final", "type": "String", "declarator": "API_SHOW_TYPES = \"displays the properties of the elements with their native data type (default is false)\"", "var_name": "API_SHOW_TYPES"}, {"original_string": "private static final String API_VALUES = \"a list of element identifiers or index values to retrieve from the graph\";", "modifier": "private static final", "type": "String", "declarator": "API_VALUES = \"a list of element identifiers or index values to retrieve from the graph\"", "var_name": "API_VALUES"}, {"original_string": "private static final String API_RETURN_KEYS = \"an array of element property keys to return (default is to return all element properties)\";", "modifier": "private static final", "type": "String", "declarator": "API_RETURN_KEYS = \"an array of element property keys to return (default is to return all element properties)\"", "var_name": "API_RETURN_KEYS"}, {"original_string": "private static final String API_TYPE = \"specifies whether to retrieve by identifier or index (default is id)\" ;", "modifier": "private static final", "type": "String", "declarator": "API_TYPE = \"specifies whether to retrieve by identifier or index (default is id)\"", "var_name": "API_TYPE"}, {"original_string": "private static final String API_KEY = \"specifies the index key\";", "modifier": "private static final", "type": "String", "declarator": "API_KEY = \"specifies the index key\"", "var_name": "API_KEY"}], "methods": [{"identifier": "getVertices", "parameters": "(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph)", "modifiers": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.GET, path = \"vertices\") @ExtensionDescriptor(description = \"get a set of vertices from the graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS), @ExtensionApi(parameterName = \"values\", description = API_VALUES), @ExtensionApi(parameterName = \"type\", description = API_TYPE), @ExtensionApi(parameterName = \"key\", description = API_KEY) }) public", "return": "ExtensionResponse", "signature": "ExtensionResponse getVertices(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph)", "full_signature": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.GET, path = \"vertices\") @ExtensionDescriptor(description = \"get a set of vertices from the graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS), @ExtensionApi(parameterName = \"values\", description = API_VALUES), @ExtensionApi(parameterName = \"type\", description = API_TYPE), @ExtensionApi(parameterName = \"key\", description = API_KEY) }) public ExtensionResponse getVertices(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph)", "class_method_signature": "BatchExtension.getVertices(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph)", "testcase": false, "constructor": false}, {"identifier": "getEdges", "parameters": "(@RexsterContext final RexsterResourceContext context,\n                                      @RexsterContext final Graph graph)", "modifiers": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.GET, path = \"edges\") @ExtensionDescriptor(description = \"get a set of edges from the graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS), @ExtensionApi(parameterName = \"values\", description = API_VALUES), @ExtensionApi(parameterName = \"type\", description = API_TYPE), @ExtensionApi(parameterName = \"key\", description = API_KEY) }) public", "return": "ExtensionResponse", "signature": "ExtensionResponse getEdges(@RexsterContext final RexsterResourceContext context,\n                                      @RexsterContext final Graph graph)", "full_signature": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.GET, path = \"edges\") @ExtensionDescriptor(description = \"get a set of edges from the graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS), @ExtensionApi(parameterName = \"values\", description = API_VALUES), @ExtensionApi(parameterName = \"type\", description = API_TYPE), @ExtensionApi(parameterName = \"key\", description = API_KEY) }) public ExtensionResponse getEdges(@RexsterContext final RexsterResourceContext context,\n                                      @RexsterContext final Graph graph)", "class_method_signature": "BatchExtension.getEdges(@RexsterContext final RexsterResourceContext context,\n                                      @RexsterContext final Graph graph)", "testcase": false, "constructor": false}, {"identifier": "postTx", "parameters": "(@RexsterContext RexsterResourceContext context,\n                                    @RexsterContext Graph graph,\n                                    @RexsterContext RexsterApplicationGraph rag)", "modifiers": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.POST, path = \"tx\", autoCommitTransaction = true) @ExtensionDescriptor(description = \"post a transaction to the graph.\") public", "return": "ExtensionResponse", "signature": "ExtensionResponse postTx(@RexsterContext RexsterResourceContext context,\n                                    @RexsterContext Graph graph,\n                                    @RexsterContext RexsterApplicationGraph rag)", "full_signature": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.POST, path = \"tx\", autoCommitTransaction = true) @ExtensionDescriptor(description = \"post a transaction to the graph.\") public ExtensionResponse postTx(@RexsterContext RexsterResourceContext context,\n                                    @RexsterContext Graph graph,\n                                    @RexsterContext RexsterApplicationGraph rag)", "class_method_signature": "BatchExtension.postTx(@RexsterContext RexsterResourceContext context,\n                                    @RexsterContext Graph graph,\n                                    @RexsterContext RexsterApplicationGraph rag)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final JSONObject elementAsJson, final Graph graph)", "modifiers": "private", "return": "void", "signature": "void create(final JSONObject elementAsJson, final Graph graph)", "full_signature": "private void create(final JSONObject elementAsJson, final Graph graph)", "class_method_signature": "BatchExtension.create(final JSONObject elementAsJson, final Graph graph)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final JSONObject elementAsJson, final Graph graph)", "modifiers": "private", "return": "void", "signature": "void update(final JSONObject elementAsJson, final Graph graph)", "full_signature": "private void update(final JSONObject elementAsJson, final Graph graph)", "class_method_signature": "BatchExtension.update(final JSONObject elementAsJson, final Graph graph)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final JSONObject elementAsJson, final Graph graph)", "modifiers": "private", "return": "void", "signature": "void delete(final JSONObject elementAsJson, final Graph graph)", "full_signature": "private void delete(final JSONObject elementAsJson, final Graph graph)", "class_method_signature": "BatchExtension.delete(final JSONObject elementAsJson, final Graph graph)", "testcase": false, "constructor": false}, {"identifier": "checkParameters", "parameters": "(RexsterResourceContext context, JSONArray values, String type, String key)", "modifiers": "private", "return": "ExtensionResponse", "signature": "ExtensionResponse checkParameters(RexsterResourceContext context, JSONArray values, String type, String key)", "full_signature": "private ExtensionResponse checkParameters(RexsterResourceContext context, JSONArray values, String type, String key)", "class_method_signature": "BatchExtension.checkParameters(RexsterResourceContext context, JSONArray values, String type, String key)", "testcase": false, "constructor": false}], "file": "rexster-kibbles/batch-kibble/src/main/java/com/tinkerpop/rexster/kibbles/batch/BatchExtension.java"}, "focal_method": {"identifier": "getVertices", "parameters": "(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph)", "modifiers": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.GET, path = \"vertices\") @ExtensionDescriptor(description = \"get a set of vertices from the graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS), @ExtensionApi(parameterName = \"values\", description = API_VALUES), @ExtensionApi(parameterName = \"type\", description = API_TYPE), @ExtensionApi(parameterName = \"key\", description = API_KEY) }) public", "return": "ExtensionResponse", "body": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.GET, path = \"vertices\")\n    @ExtensionDescriptor(description = \"get a set of vertices from the graph.\",\n            api = {\n                    @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES),\n                    @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS),\n                    @ExtensionApi(parameterName = \"values\", description = API_VALUES),\n                    @ExtensionApi(parameterName = \"type\", description = API_TYPE),\n                    @ExtensionApi(parameterName = \"key\", description = API_KEY)\n            })\n    public ExtensionResponse getVertices(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph) {\n\n        final JSONObject requestObject = context.getRequestObject();\n        final JSONArray values = requestObject.optJSONArray(\"values\");\n        final String type = requestObject.optString(\"type\", \"id\");\n        final String key = requestObject.optString(\"key\");\n\n        final ExtensionResponse error = checkParameters(context, values, type, key);\n        if (error != null) {\n            return error;\n        }\n\n        final boolean showTypes = RequestObjectHelper.getShowTypes(requestObject);\n        final GraphSONMode mode = showTypes ? GraphSONMode.EXTENDED : GraphSONMode.NORMAL;\n        final Set<String> returnKeys = RequestObjectHelper.getReturnKeys(requestObject, WILDCARD);\n\n        try {\n\n            final JSONArray jsonArray = new JSONArray();\n\n            if (type.equals(\"id\")) {\n                for (int ix = 0; ix < values.length(); ix++) {\n                    final Vertex vertexFound = graph.getVertex(ElementHelper.getTypedPropertyValue(values.optString(ix)));\n                    if (vertexFound != null) {\n                        jsonArray.put(GraphSONUtility.jsonFromElement(vertexFound, returnKeys, mode));\n                    }\n                }\n            } else if (type.equals(\"index\")) {\n                Index idx = ((IndexableGraph)graph).getIndex(key, Vertex.class);\n\n                for (int ix = 0; ix < values.length(); ix++) {\n                    CloseableIterable<Vertex> verticesFound = idx.get(key, ElementHelper.getTypedPropertyValue(values.optString(ix)));\n                    for (Vertex vertex : verticesFound) {\n                        jsonArray.put(GraphSONUtility.jsonFromElement(vertex, returnKeys, mode));\n                    }\n                    verticesFound.close();\n                }\n            } else if (type.equals(\"keyindex\")) {\n                for (int ix = 0; ix < values.length(); ix++) {\n                    Iterable<Vertex> verticesFound = graph.getVertices(key, ElementHelper.getTypedPropertyValue(values.optString(ix)));\n                    for (Vertex vertex : verticesFound) {\n                        jsonArray.put(GraphSONUtility.jsonFromElement(vertex, returnKeys, mode));\n                    }\n                }\n            }\n\n            final HashMap<String, Object> resultMap = new HashMap<String, Object>();\n            resultMap.put(Tokens.SUCCESS, true);\n            resultMap.put(Tokens.RESULTS, jsonArray);\n\n            final JSONObject resultObject = new JSONObject(resultMap);\n            return ExtensionResponse.ok(resultObject);\n\n        } catch (Exception mqe) {\n            logger.error(mqe);\n            return ExtensionResponse.error(\n                    \"Error retrieving batch of vertices [\" + values + \"]\", generateErrorJson());\n        }\n\n    }", "signature": "ExtensionResponse getVertices(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph)", "full_signature": "@ExtensionDefinition(extensionPoint = ExtensionPoint.GRAPH, method = HttpMethod.GET, path = \"vertices\") @ExtensionDescriptor(description = \"get a set of vertices from the graph.\", api = { @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.SHOW_TYPES, description = API_SHOW_TYPES), @ExtensionApi(parameterName = Tokens.REXSTER + \".\" + Tokens.RETURN_KEYS, description = API_RETURN_KEYS), @ExtensionApi(parameterName = \"values\", description = API_VALUES), @ExtensionApi(parameterName = \"type\", description = API_TYPE), @ExtensionApi(parameterName = \"key\", description = API_KEY) }) public ExtensionResponse getVertices(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph)", "class_method_signature": "BatchExtension.getVertices(@RexsterContext final RexsterResourceContext context,\n                                         @RexsterContext final Graph graph)", "testcase": false, "constructor": false, "invocations": ["getRequestObject", "optJSONArray", "optString", "optString", "checkParameters", "getShowTypes", "getReturnKeys", "equals", "length", "getVertex", "getTypedPropertyValue", "optString", "put", "jsonFromElement", "equals", "getIndex", "length", "get", "getTypedPropertyValue", "optString", "put", "jsonFromElement", "close", "equals", "length", "getVertices", "getTypedPropertyValue", "optString", "put", "jsonFromElement", "put", "put", "ok", "error", "error", "generateErrorJson"]}, "repository": {"repo_id": 514315, "url": "https://github.com/tinkerpop/rexster", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 435, "size": 90958, "license": "licensed"}}