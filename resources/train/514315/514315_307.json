{"test_class": {"identifier": "ExtensionAllowedTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Mockery mockery = new JUnit4Mockery();", "modifier": "private", "type": "Mockery", "declarator": "mockery = new JUnit4Mockery()", "var_name": "mockery"}], "file": "rexster-core/src/test/java/com/tinkerpop/rexster/extension/ExtensionAllowedTest.java"}, "test_case": {"identifier": "isExtensionAllowedInvalidExtensionName", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void isExtensionAllowedInvalidExtensionName() {\n        ExtensionAllowed configuration = new ExtensionAllowed(\"this doesn't work as an extension name\");\n        ExtensionSegmentSet extensionSegmentSet = new ExtensionSegmentSet(this.mockTheUri(\"ns\", \"extension\", \"\"), ExtensionPoint.GRAPH);\n        configuration.isExtensionAllowed(extensionSegmentSet);\n    }", "signature": "void isExtensionAllowedInvalidExtensionName()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void isExtensionAllowedInvalidExtensionName()", "class_method_signature": "ExtensionAllowedTest.isExtensionAllowedInvalidExtensionName()", "testcase": true, "constructor": false, "invocations": ["mockTheUri", "isExtensionAllowed"]}, "focal_class": {"identifier": "ExtensionAllowed", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String namespace;", "modifier": "private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}], "methods": [{"identifier": "ExtensionAllowed", "parameters": "(final String namespace)", "modifiers": "public", "return": "", "signature": " ExtensionAllowed(final String namespace)", "full_signature": "public  ExtensionAllowed(final String namespace)", "class_method_signature": "ExtensionAllowed.ExtensionAllowed(final String namespace)", "testcase": false, "constructor": true}, {"identifier": "isExtensionAllowed", "parameters": "(final ExtensionSegmentSet extensionSegmentSet)", "modifiers": "public", "return": "boolean", "signature": "boolean isExtensionAllowed(final ExtensionSegmentSet extensionSegmentSet)", "full_signature": "public boolean isExtensionAllowed(final ExtensionSegmentSet extensionSegmentSet)", "class_method_signature": "ExtensionAllowed.isExtensionAllowed(final ExtensionSegmentSet extensionSegmentSet)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ExtensionAllowed.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ExtensionAllowed.hashCode()", "testcase": false, "constructor": false}], "file": "rexster-core/src/main/java/com/tinkerpop/rexster/extension/ExtensionAllowed.java"}, "focal_method": {"identifier": "isExtensionAllowed", "parameters": "(final ExtensionSegmentSet extensionSegmentSet)", "modifiers": "public", "return": "boolean", "body": "public boolean isExtensionAllowed(final ExtensionSegmentSet extensionSegmentSet) {\n        boolean allowed = false;\n\n        if (this.namespace.equals(\"*:*\")) {\n            allowed = true;\n        } else if (this.namespace.equals(extensionSegmentSet.getNamespace() + \":*\")) {\n            allowed = true;\n        } else if (this.namespace.equals(extensionSegmentSet.getNamespace() + \":\" + extensionSegmentSet.getExtension())) {\n            allowed = true;\n        }\n\n        return allowed;\n    }", "signature": "boolean isExtensionAllowed(final ExtensionSegmentSet extensionSegmentSet)", "full_signature": "public boolean isExtensionAllowed(final ExtensionSegmentSet extensionSegmentSet)", "class_method_signature": "ExtensionAllowed.isExtensionAllowed(final ExtensionSegmentSet extensionSegmentSet)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "getNamespace", "equals", "getNamespace", "getExtension"]}, "repository": {"repo_id": 514315, "url": "https://github.com/tinkerpop/rexster", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 435, "size": 90958, "license": "licensed"}}