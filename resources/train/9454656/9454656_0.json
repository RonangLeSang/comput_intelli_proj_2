{"test_class": {"identifier": "TemplateDebuggerTest", "superclass": "", "interfaces": "", "fields": [], "file": "template-debugger/src/test/java/com/hellblazer/autoconfigure/debug/TemplateDebuggerTest.java"}, "test_case": {"identifier": "testDebugger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDebugger() throws Exception {\n\n\t\tObjectMapper mapper = new ObjectMapper(new YAMLFactory());\n\t\tInputStream yaml = getClass().getResourceAsStream(\n\t\t\t\t\"/yaml/templateDebugger.yml\");\n\t\tTemplateDebugger debugger = mapper.readValue(yaml,\n\t\t\t\tTemplateDebugger.class);\n\t\tassertNotNull(debugger);\n\t\tString rendered = debugger.render();\n\t\tassertNotNull(rendered);\n\t\tInputStream gold = getClass().getResourceAsStream(\"/configurations/templateDebugger.rendered\");\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tUtils.copy(gold, baos);\n\t\tString expected = baos.toString();\n\t\tassertEquals(expected, rendered);\n\t}", "signature": "void testDebugger()", "full_signature": "@Test public void testDebugger()", "class_method_signature": "TemplateDebuggerTest.testDebugger()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "readValue", "assertNotNull", "render", "assertNotNull", "getResourceAsStream", "getClass", "copy", "toString", "assertEquals"]}, "focal_class": {"identifier": "TemplateDebugger", "superclass": "", "interfaces": "", "fields": [{"original_string": "@JsonProperty\n\tprivate final Map<String, List<Map<String, String>>> serviceCollections = new HashMap<>();", "modifier": "@JsonProperty\n\tprivate final", "type": "Map<String, List<Map<String, String>>>", "declarator": "serviceCollections = new HashMap<>()", "var_name": "serviceCollections"}, {"original_string": "@JsonProperty\n\tprivate final Map<String, Map<String, String>> services = new HashMap<>();", "modifier": "@JsonProperty\n\tprivate final", "type": "Map<String, Map<String, String>>", "declarator": "services = new HashMap<>()", "var_name": "services"}, {"original_string": "@JsonProperty\n\tprivate String templateGroupFile;", "modifier": "@JsonProperty\n\tprivate", "type": "String", "declarator": "templateGroupFile", "var_name": "templateGroupFile"}, {"original_string": "@JsonProperty\n\tprivate String templateName = \"configuration\";", "modifier": "@JsonProperty\n\tprivate", "type": "String", "declarator": "templateName = \"configuration\"", "var_name": "templateName"}, {"original_string": "@JsonProperty\n\tprivate Map<String, String> variables = new HashMap<>();", "modifier": "@JsonProperty\n\tprivate", "type": "Map<String, String>", "declarator": "variables = new HashMap<>()", "var_name": "variables"}], "methods": [{"identifier": "main", "parameters": "(String[] argv)", "modifiers": "public static", "return": "void", "signature": "void main(String[] argv)", "full_signature": "public static void main(String[] argv)", "class_method_signature": "TemplateDebugger.main(String[] argv)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String render()", "full_signature": "public String render()", "class_method_signature": "TemplateDebugger.render()", "testcase": false, "constructor": false}], "file": "template-debugger/src/main/java/com/hellblazer/autoconfigure/debug/TemplateDebugger.java"}, "focal_method": {"identifier": "render", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String render() {\n\t\tSTGroupFile templateGroup = new STGroupFile(templateGroupFile);\n\t\tST template = templateGroup.getInstanceOf(templateName);\n\t\tif (template == null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\tString.format(\n\t\t\t\t\t\t\t\"The template named [%s] does not exist in the template group [%s]\",\n\t\t\t\t\t\t\ttemplateName, templateGroupFile));\n\t\t}\n\t\tfor (Map.Entry<String, String> entry : variables.entrySet()) {\n\t\t\ttry {\n\t\t\t\ttemplate.add(entry.getKey(), entry.getValue());\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t// no parameter to this template\n\t\t\t}\n\t\t}\n\t\tfor (Map.Entry<String, Map<String, String>> entry : services.entrySet()) {\n\t\t\ttry {\n\t\t\t\ttemplate.add(entry.getKey(), entry.getValue());\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t// no parameter to this template\n\t\t\t}\n\t\t}\n\t\tfor (Entry<String, List<Map<String, String>>> entry : serviceCollections\n\t\t\t\t.entrySet()) {\n\t\t\ttry {\n\t\t\t\ttemplate.add(entry.getKey(), new MockCluster(entry.getValue()));\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t// no parameter to this template\n\t\t\t}\n\t\t}\n\t\treturn template.render();\n\t}", "signature": "String render()", "full_signature": "public String render()", "class_method_signature": "TemplateDebugger.render()", "testcase": false, "constructor": false, "invocations": ["getInstanceOf", "format", "entrySet", "add", "getKey", "getValue", "entrySet", "add", "getKey", "getValue", "entrySet", "add", "getKey", "getValue", "render"]}, "repository": {"repo_id": 9454656, "url": "https://github.com/ChiralBehaviors/autoconfigure", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 3018, "license": "licensed"}}