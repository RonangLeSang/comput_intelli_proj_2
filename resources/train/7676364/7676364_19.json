{"test_class": {"identifier": "DateUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "phoenix-core/src/test/java/com/salesforce/phoenix/util/DateUtilTest.java"}, "test_case": {"identifier": "testDemonstrateSetNanosOnTimestampLosingMillis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDemonstrateSetNanosOnTimestampLosingMillis() {\n        Timestamp ts1 = new Timestamp(120055);\n        ts1.setNanos(60);\n        \n        Timestamp ts2 = new Timestamp(120100);\n        ts2.setNanos(60);\n        \n        /*\n         * This really should have been assertFalse() because we started with timestamps that \n         * had different milliseconds 120055 and 120100. THe problem is that the timestamp's \n         * constructor converts the milliseconds passed into seconds and assigns the left-over\n         * milliseconds to the nanos part of the timestamp. If setNanos() is called after that\n         * then the previous value of nanos gets overwritten resulting in loss of milliseconds.\n         */\n        assertTrue(ts1.equals(ts2));\n        \n        /*\n         * The right way to deal with timestamps when you have both milliseconds and nanos to assign\n         * is to use the DateUtil.getTimestamp(long millis, int nanos).\n         */\n        ts1 = DateUtil.getTimestamp(120055,  60);\n        ts2 = DateUtil.getTimestamp(120100, 60);\n        assertFalse(ts1.equals(ts2));\n        assertTrue(ts2.after(ts1));\n    }", "signature": "void testDemonstrateSetNanosOnTimestampLosingMillis()", "full_signature": "@Test public void testDemonstrateSetNanosOnTimestampLosingMillis()", "class_method_signature": "DateUtilTest.testDemonstrateSetNanosOnTimestampLosingMillis()", "testcase": true, "constructor": false, "invocations": ["setNanos", "setNanos", "assertTrue", "equals", "getTimestamp", "getTimestamp", "assertFalse", "equals", "assertTrue", "after"]}, "focal_class": {"identifier": "DateUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final TimeZone DATE_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");", "modifier": "public static final", "type": "TimeZone", "declarator": "DATE_TIME_ZONE = TimeZone.getTimeZone(\"GMT\")", "var_name": "DATE_TIME_ZONE"}, {"original_string": "public static final String DEFAULT_DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\"", "var_name": "DEFAULT_DATE_FORMAT"}, {"original_string": "public static final Format DEFAULT_DATE_FORMATTER = FastDateFormat.getInstance(DEFAULT_DATE_FORMAT, DATE_TIME_ZONE);", "modifier": "public static final", "type": "Format", "declarator": "DEFAULT_DATE_FORMATTER = FastDateFormat.getInstance(DEFAULT_DATE_FORMAT, DATE_TIME_ZONE)", "var_name": "DEFAULT_DATE_FORMATTER"}, {"original_string": "public static final String DEFAULT_MS_DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_MS_DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\"", "var_name": "DEFAULT_MS_DATE_FORMAT"}, {"original_string": "public static final Format DEFAULT_MS_DATE_FORMATTER = FastDateFormat.getInstance(DEFAULT_MS_DATE_FORMAT, DATE_TIME_ZONE);", "modifier": "public static final", "type": "Format", "declarator": "DEFAULT_MS_DATE_FORMATTER = FastDateFormat.getInstance(DEFAULT_MS_DATE_FORMAT, DATE_TIME_ZONE)", "var_name": "DEFAULT_MS_DATE_FORMATTER"}, {"original_string": "private static ThreadLocal<Format> dateFormat =\n            new ThreadLocal < Format > () {\n        @Override protected Format initialValue() {\n            return getDateParser(DEFAULT_DATE_FORMAT);\n        }\n    };", "modifier": "private static", "type": "ThreadLocal<Format>", "declarator": "dateFormat =\n            new ThreadLocal < Format > () {\n        @Override protected Format initialValue() {\n            return getDateParser(DEFAULT_DATE_FORMAT);\n        }\n    }", "var_name": "dateFormat"}, {"original_string": "private static ThreadLocal<Format> timeFormat =\n            new ThreadLocal < Format > () {\n        @Override protected Format initialValue() {\n            return getTimeParser(DEFAULT_DATE_FORMAT);\n        }\n    };", "modifier": "private static", "type": "ThreadLocal<Format>", "declarator": "timeFormat =\n            new ThreadLocal < Format > () {\n        @Override protected Format initialValue() {\n            return getTimeParser(DEFAULT_DATE_FORMAT);\n        }\n    }", "var_name": "timeFormat"}, {"original_string": "private static ThreadLocal<Format> timestampFormat =\n            new ThreadLocal < Format > () {\n        @Override protected Format initialValue() {\n            return getTimestampParser(DEFAULT_DATE_FORMAT);\n        }\n    };", "modifier": "private static", "type": "ThreadLocal<Format>", "declarator": "timestampFormat =\n            new ThreadLocal < Format > () {\n        @Override protected Format initialValue() {\n            return getTimestampParser(DEFAULT_DATE_FORMAT);\n        }\n    }", "var_name": "timestampFormat"}], "methods": [{"identifier": "DateUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateUtil()", "full_signature": "private  DateUtil()", "class_method_signature": "DateUtil.DateUtil()", "testcase": false, "constructor": true}, {"identifier": "getDateParser", "parameters": "(String pattern)", "modifiers": "public static", "return": "Format", "signature": "Format getDateParser(String pattern)", "full_signature": "public static Format getDateParser(String pattern)", "class_method_signature": "DateUtil.getDateParser(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getTimeParser", "parameters": "(String pattern)", "modifiers": "public static", "return": "Format", "signature": "Format getTimeParser(String pattern)", "full_signature": "public static Format getTimeParser(String pattern)", "class_method_signature": "DateUtil.getTimeParser(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getTimestampParser", "parameters": "(String pattern)", "modifiers": "public static", "return": "Format", "signature": "Format getTimestampParser(String pattern)", "full_signature": "public static Format getTimestampParser(String pattern)", "class_method_signature": "DateUtil.getTimestampParser(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getDateFormatter", "parameters": "(String pattern)", "modifiers": "public static", "return": "Format", "signature": "Format getDateFormatter(String pattern)", "full_signature": "public static Format getDateFormatter(String pattern)", "class_method_signature": "DateUtil.getDateFormatter(String pattern)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String dateValue)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(String dateValue)", "full_signature": "public static Date parseDate(String dateValue)", "class_method_signature": "DateUtil.parseDate(String dateValue)", "testcase": false, "constructor": false}, {"identifier": "parseTime", "parameters": "(String timeValue)", "modifiers": "public static", "return": "Time", "signature": "Time parseTime(String timeValue)", "full_signature": "public static Time parseTime(String timeValue)", "class_method_signature": "DateUtil.parseTime(String timeValue)", "testcase": false, "constructor": false}, {"identifier": "parseTimestamp", "parameters": "(String timeValue)", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp parseTimestamp(String timeValue)", "full_signature": "public static Timestamp parseTimestamp(String timeValue)", "class_method_signature": "DateUtil.parseTimestamp(String timeValue)", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "(long millis, int nanos)", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp getTimestamp(long millis, int nanos)", "full_signature": "public static Timestamp getTimestamp(long millis, int nanos)", "class_method_signature": "DateUtil.getTimestamp(long millis, int nanos)", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "(BigDecimal bd)", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp getTimestamp(BigDecimal bd)", "full_signature": "public static Timestamp getTimestamp(BigDecimal bd)", "class_method_signature": "DateUtil.getTimestamp(BigDecimal bd)", "testcase": false, "constructor": false}], "file": "phoenix-core/src/main/java/com/salesforce/phoenix/util/DateUtil.java"}, "focal_method": {"identifier": "getTimestamp", "parameters": "(long millis, int nanos)", "modifiers": "public static", "return": "Timestamp", "body": "public static Timestamp getTimestamp(long millis, int nanos) {\n        Timestamp ts = new Timestamp(millis);\n        ts.setNanos(ts.getNanos() + nanos);\n        return ts;\n    }", "signature": "Timestamp getTimestamp(long millis, int nanos)", "full_signature": "public static Timestamp getTimestamp(long millis, int nanos)", "class_method_signature": "DateUtil.getTimestamp(long millis, int nanos)", "testcase": false, "constructor": false, "invocations": ["setNanos", "getNanos"]}, "repository": {"repo_id": 7676364, "url": "https://github.com/forcedotcom/phoenix", "language": "Java", "is_fork": false, "fork_count": 233, "stargazer_count": 564, "size": 168076, "license": "licensed"}}