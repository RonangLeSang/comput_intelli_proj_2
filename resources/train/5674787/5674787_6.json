{"test_class": {"identifier": "JasperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JSP_SOURCE = \"<html>\\n\" +\n    \"<body>\\n\" +\n    \"<h2>Hello World!</h2>\\n\" +\n    \"</body>\\n\" +\n    \"</html>\";", "modifier": "private static final", "type": "String", "declarator": "JSP_SOURCE = \"<html>\\n\" +\n    \"<body>\\n\" +\n    \"<h2>Hello World!</h2>\\n\" +\n    \"</body>\\n\" +\n    \"</html>\"", "var_name": "JSP_SOURCE"}, {"original_string": "private static final String SPRING_TLD = \"<%@ taglib prefix=\\\"spring\\\" uri=\\\"http://www.springframework.org/tags\\\" %>\\n\";", "modifier": "private static final", "type": "String", "declarator": "SPRING_TLD = \"<%@ taglib prefix=\\\"spring\\\" uri=\\\"http://www.springframework.org/tags\\\" %>\\n\"", "var_name": "SPRING_TLD"}, {"original_string": "Path tempFolder;", "modifier": "", "type": "Path", "declarator": "tempFolder", "var_name": "tempFolder"}, {"original_string": "Path webInf;", "modifier": "", "type": "Path", "declarator": "webInf", "var_name": "webInf"}, {"original_string": "@TempDir\n  Path workDir;", "modifier": "@TempDir", "type": "Path", "declarator": "workDir", "var_name": "workDir"}, {"original_string": "@Rule\n  public LogTester logTester = new LogTester();", "modifier": "@Rule\n  public", "type": "LogTester", "declarator": "logTester = new LogTester()", "var_name": "logTester"}, {"original_string": "private Path jspFile;", "modifier": "private", "type": "Path", "declarator": "jspFile", "var_name": "jspFile"}, {"original_string": "private final File springJar = Paths.get(\"target/test-jars/spring-webmvc-5.2.3.RELEASE.jar\").toFile();", "modifier": "private final", "type": "File", "declarator": "springJar = Paths.get(\"target/test-jars/spring-webmvc-5.2.3.RELEASE.jar\").toFile()", "var_name": "springJar"}, {"original_string": "private final File jstlJar = Paths.get(\"target/test-jars/jstl-1.2.jar\").toFile();", "modifier": "private final", "type": "File", "declarator": "jstlJar = Paths.get(\"target/test-jars/jstl-1.2.jar\").toFile()", "var_name": "jstlJar"}, {"original_string": "private final File jee6Jar = Paths.get(\"target/test-jars/javaee-web-api-6.0.jar\").toFile();", "modifier": "private final", "type": "File", "declarator": "jee6Jar = Paths.get(\"target/test-jars/javaee-web-api-6.0.jar\").toFile()", "var_name": "jee6Jar"}], "file": "java-jsp/src/test/java/org/sonar/java/jsp/JasperTest.java"}, "test_case": {"identifier": "test_outputdir", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void test_outputdir() throws Exception {\n    SensorContextTester ctx = SensorContextTester.create(tempFolder);\n    ctx.fileSystem().setWorkDir(workDir);\n    Files.createFile(workDir.resolve(\"jsp\"));\n    assertThatThrownBy(() -> Jasper.outputDir(ctx))\n      .isInstanceOf(IllegalStateException.class)\n      .hasMessage(\"Failed to create output dir for jsp files\");\n  }", "signature": "void test_outputdir()", "full_signature": "@Test void test_outputdir()", "class_method_signature": "JasperTest.test_outputdir()", "testcase": true, "constructor": false, "invocations": ["create", "setWorkDir", "fileSystem", "createFile", "resolve", "hasMessage", "isInstanceOf", "assertThatThrownBy", "outputDir"]}, "focal_class": {"identifier": "Jasper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Loggers.get(Jasper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Loggers.get(Jasper.class)", "var_name": "LOG"}], "methods": [{"identifier": "generateFiles", "parameters": "(SensorContext sensorContext, List<File> javaClasspath)", "modifiers": "public", "return": "Collection<GeneratedFile>", "signature": "Collection<GeneratedFile> generateFiles(SensorContext sensorContext, List<File> javaClasspath)", "full_signature": "public Collection<GeneratedFile> generateFiles(SensorContext sensorContext, List<File> javaClasspath)", "class_method_signature": "Jasper.generateFiles(SensorContext sensorContext, List<File> javaClasspath)", "testcase": false, "constructor": false}, {"identifier": "processSourceMap", "parameters": "(Path uriRoot, Map<Path, GeneratedFile> generatedJavaFiles, SmapStratum smap, FileSystem fileSystem)", "modifiers": "private static", "return": "void", "signature": "void processSourceMap(Path uriRoot, Map<Path, GeneratedFile> generatedJavaFiles, SmapStratum smap, FileSystem fileSystem)", "full_signature": "private static void processSourceMap(Path uriRoot, Map<Path, GeneratedFile> generatedJavaFiles, SmapStratum smap, FileSystem fileSystem)", "class_method_signature": "Jasper.processSourceMap(Path uriRoot, Map<Path, GeneratedFile> generatedJavaFiles, SmapStratum smap, FileSystem fileSystem)", "testcase": false, "constructor": false}, {"identifier": "transpileJsp", "parameters": "(Path jsp, Path uriRoot, ClassLoader classLoader, JspCServletContext servletContext,\n                                   JasperOptions options, JspRuntimeContext runtimeContext)", "modifiers": "private static", "return": "Path", "signature": "Path transpileJsp(Path jsp, Path uriRoot, ClassLoader classLoader, JspCServletContext servletContext,\n                                   JasperOptions options, JspRuntimeContext runtimeContext)", "full_signature": "private static Path transpileJsp(Path jsp, Path uriRoot, ClassLoader classLoader, JspCServletContext servletContext,\n                                   JasperOptions options, JspRuntimeContext runtimeContext)", "class_method_signature": "Jasper.transpileJsp(Path jsp, Path uriRoot, ClassLoader classLoader, JspCServletContext servletContext,\n                                   JasperOptions options, JspRuntimeContext runtimeContext)", "testcase": false, "constructor": false}, {"identifier": "getJasperOptions", "parameters": "(Path outputDir, JspCServletContext servletContext)", "modifiers": "", "return": "JasperOptions", "signature": "JasperOptions getJasperOptions(Path outputDir, JspCServletContext servletContext)", "full_signature": " JasperOptions getJasperOptions(Path outputDir, JspCServletContext servletContext)", "class_method_signature": "Jasper.getJasperOptions(Path outputDir, JspCServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "findWebInfParentDirectory", "parameters": "(FileSystem fs)", "modifiers": "private static", "return": "Optional<Path>", "signature": "Optional<Path> findWebInfParentDirectory(FileSystem fs)", "full_signature": "private static Optional<Path> findWebInfParentDirectory(FileSystem fs)", "class_method_signature": "Jasper.findWebInfParentDirectory(FileSystem fs)", "testcase": false, "constructor": false}, {"identifier": "jspFiles", "parameters": "(FileSystem fs)", "modifiers": "private static", "return": "List<InputFile>", "signature": "List<InputFile> jspFiles(FileSystem fs)", "full_signature": "private static List<InputFile> jspFiles(FileSystem fs)", "class_method_signature": "Jasper.jspFiles(FileSystem fs)", "testcase": false, "constructor": false}, {"identifier": "initClassLoader", "parameters": "(List<File> classPath)", "modifiers": "private static", "return": "ClassLoader", "signature": "ClassLoader initClassLoader(List<File> classPath)", "full_signature": "private static ClassLoader initClassLoader(List<File> classPath)", "class_method_signature": "Jasper.initClassLoader(List<File> classPath)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "(File f)", "modifiers": "private static", "return": "URL", "signature": "URL toUrl(File f)", "full_signature": "private static URL toUrl(File f)", "class_method_signature": "Jasper.toUrl(File f)", "testcase": false, "constructor": false}, {"identifier": "outputDir", "parameters": "(SensorContext sensorContext)", "modifiers": "static", "return": "Path", "signature": "Path outputDir(SensorContext sensorContext)", "full_signature": "static Path outputDir(SensorContext sensorContext)", "class_method_signature": "Jasper.outputDir(SensorContext sensorContext)", "testcase": false, "constructor": false}], "file": "java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java"}, "focal_method": {"identifier": "outputDir", "parameters": "(SensorContext sensorContext)", "modifiers": "static", "return": "Path", "body": "static Path outputDir(SensorContext sensorContext) {\n    Path path = sensorContext.fileSystem().workDir().toPath().resolve(\"jsp\");\n    try {\n      Files.createDirectories(path);\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"Failed to create output dir for jsp files\", ex);\n    }\n    return path;\n  }", "signature": "Path outputDir(SensorContext sensorContext)", "full_signature": "static Path outputDir(SensorContext sensorContext)", "class_method_signature": "Jasper.outputDir(SensorContext sensorContext)", "testcase": false, "constructor": false, "invocations": ["resolve", "toPath", "workDir", "fileSystem", "createDirectories"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}