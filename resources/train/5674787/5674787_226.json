{"test_class": {"identifier": "JavaAstScannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public LogTester logTester = new LogTester();", "modifier": "@Rule\n  public", "type": "LogTester", "declarator": "logTester = new LogTester()", "var_name": "logTester"}, {"original_string": "private SensorContextTester context;", "modifier": "private", "type": "SensorContextTester", "declarator": "context", "var_name": "context"}], "file": "java-frontend/src/test/java/org/sonar/java/ast/JavaAstScannerTest.java"}, "test_case": {"identifier": "scan_single_file_with_dumb_file_should_not_fail", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void scan_single_file_with_dumb_file_should_not_fail() throws Exception {\n    String filename = \"!!dummy\";\n    JavaAstScanner.scanSingleFileForTests(TestUtils.emptyInputFile(filename), new VisitorsBridge(null));\n  }", "signature": "void scan_single_file_with_dumb_file_should_not_fail()", "full_signature": "@Test void scan_single_file_with_dumb_file_should_not_fail()", "class_method_signature": "JavaAstScannerTest.scan_single_file_with_dumb_file_should_not_fail()", "testcase": true, "constructor": false, "invocations": ["scanSingleFileForTests", "emptyInputFile"]}, "focal_class": {"identifier": "JavaAstScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Loggers.get(JavaAstScanner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Loggers.get(JavaAstScanner.class)", "var_name": "LOG"}, {"original_string": "private final SonarComponents sonarComponents;", "modifier": "private final", "type": "SonarComponents", "declarator": "sonarComponents", "var_name": "sonarComponents"}, {"original_string": "private VisitorsBridge visitor;", "modifier": "private", "type": "VisitorsBridge", "declarator": "visitor", "var_name": "visitor"}], "methods": [{"identifier": "JavaAstScanner", "parameters": "(@Nullable SonarComponents sonarComponents)", "modifiers": "public", "return": "", "signature": " JavaAstScanner(@Nullable SonarComponents sonarComponents)", "full_signature": "public  JavaAstScanner(@Nullable SonarComponents sonarComponents)", "class_method_signature": "JavaAstScanner.JavaAstScanner(@Nullable SonarComponents sonarComponents)", "testcase": false, "constructor": true}, {"identifier": "scan", "parameters": "(Iterable<? extends InputFile> inputFiles)", "modifiers": "public", "return": "void", "signature": "void scan(Iterable<? extends InputFile> inputFiles)", "full_signature": "public void scan(Iterable<? extends InputFile> inputFiles)", "class_method_signature": "JavaAstScanner.scan(Iterable<? extends InputFile> inputFiles)", "testcase": false, "constructor": false}, {"identifier": "analysisCancelled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean analysisCancelled()", "full_signature": "private boolean analysisCancelled()", "class_method_signature": "JavaAstScanner.analysisCancelled()", "testcase": false, "constructor": false}, {"identifier": "simpleScan", "parameters": "(InputFile inputFile)", "modifiers": "private", "return": "void", "signature": "void simpleScan(InputFile inputFile)", "full_signature": "private void simpleScan(InputFile inputFile)", "class_method_signature": "JavaAstScanner.simpleScan(InputFile inputFile)", "testcase": false, "constructor": false}, {"identifier": "interruptIfFailFast", "parameters": "(Exception e, InputFile inputFile)", "modifiers": "private", "return": "void", "signature": "void interruptIfFailFast(Exception e, InputFile inputFile)", "full_signature": "private void interruptIfFailFast(Exception e, InputFile inputFile)", "class_method_signature": "JavaAstScanner.interruptIfFailFast(Exception e, InputFile inputFile)", "testcase": false, "constructor": false}, {"identifier": "checkInterrupted", "parameters": "(Exception e)", "modifiers": "private static", "return": "void", "signature": "void checkInterrupted(Exception e)", "full_signature": "private static void checkInterrupted(Exception e)", "class_method_signature": "JavaAstScanner.checkInterrupted(Exception e)", "testcase": false, "constructor": false}, {"identifier": "parseErrorWalkAndVisit", "parameters": "(RecognitionException e, InputFile inputFile)", "modifiers": "private", "return": "void", "signature": "void parseErrorWalkAndVisit(RecognitionException e, InputFile inputFile)", "full_signature": "private void parseErrorWalkAndVisit(RecognitionException e, InputFile inputFile)", "class_method_signature": "JavaAstScanner.parseErrorWalkAndVisit(RecognitionException e, InputFile inputFile)", "testcase": false, "constructor": false}, {"identifier": "getAnalysisExceptionMessage", "parameters": "(InputFile file)", "modifiers": "private static", "return": "String", "signature": "String getAnalysisExceptionMessage(InputFile file)", "full_signature": "private static String getAnalysisExceptionMessage(InputFile file)", "class_method_signature": "JavaAstScanner.getAnalysisExceptionMessage(InputFile file)", "testcase": false, "constructor": false}, {"identifier": "setVisitorBridge", "parameters": "(VisitorsBridge visitor)", "modifiers": "public", "return": "void", "signature": "void setVisitorBridge(VisitorsBridge visitor)", "full_signature": "public void setVisitorBridge(VisitorsBridge visitor)", "class_method_signature": "JavaAstScanner.setVisitorBridge(VisitorsBridge visitor)", "testcase": false, "constructor": false}, {"identifier": "scanSingleFileForTests", "parameters": "(InputFile file, VisitorsBridge visitorsBridge)", "modifiers": "@VisibleForTesting public static", "return": "void", "signature": "void scanSingleFileForTests(InputFile file, VisitorsBridge visitorsBridge)", "full_signature": "@VisibleForTesting public static void scanSingleFileForTests(InputFile file, VisitorsBridge visitorsBridge)", "class_method_signature": "JavaAstScanner.scanSingleFileForTests(InputFile file, VisitorsBridge visitorsBridge)", "testcase": false, "constructor": false}, {"identifier": "scanSingleFileForTests", "parameters": "(InputFile inputFile, VisitorsBridge visitorsBridge, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents)", "modifiers": "@VisibleForTesting public static", "return": "void", "signature": "void scanSingleFileForTests(InputFile inputFile, VisitorsBridge visitorsBridge, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents)", "full_signature": "@VisibleForTesting public static void scanSingleFileForTests(InputFile inputFile, VisitorsBridge visitorsBridge, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents)", "class_method_signature": "JavaAstScanner.scanSingleFileForTests(InputFile inputFile, VisitorsBridge visitorsBridge, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents)", "testcase": false, "constructor": false}], "file": "java-frontend/src/main/java/org/sonar/java/ast/JavaAstScanner.java"}, "focal_method": {"identifier": "scanSingleFileForTests", "parameters": "(InputFile file, VisitorsBridge visitorsBridge)", "modifiers": "@VisibleForTesting public static", "return": "void", "body": "@VisibleForTesting\n  public static void scanSingleFileForTests(InputFile file, VisitorsBridge visitorsBridge) {\n    scanSingleFileForTests(file, visitorsBridge, new JavaVersionImpl(), null);\n  }", "signature": "void scanSingleFileForTests(InputFile file, VisitorsBridge visitorsBridge)", "full_signature": "@VisibleForTesting public static void scanSingleFileForTests(InputFile file, VisitorsBridge visitorsBridge)", "class_method_signature": "JavaAstScanner.scanSingleFileForTests(InputFile file, VisitorsBridge visitorsBridge)", "testcase": false, "constructor": false, "invocations": ["scanSingleFileForTests"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}