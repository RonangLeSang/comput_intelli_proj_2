{"test_class": {"identifier": "XmlFileSensorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Rule\n  public LogTester logTester = new LogTester();", "modifier": "@Rule\n  public", "type": "LogTester", "declarator": "logTester = new LogTester()", "var_name": "logTester"}, {"original_string": "private static final RuleKey XML_RULE_KEY = RuleKey.of(\"java\", \"S3281\");", "modifier": "private static final", "type": "RuleKey", "declarator": "XML_RULE_KEY = RuleKey.of(\"java\", \"S3281\")", "var_name": "XML_RULE_KEY"}, {"original_string": "private SensorContextTester context;", "modifier": "private", "type": "SensorContextTester", "declarator": "context", "var_name": "context"}], "file": "sonar-java-plugin/src/test/java/org/sonar/plugins/java/XmlFileSensorTest.java"}, "test_case": {"identifier": "testDoNothingIfNoXmlRule", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testDoNothingIfNoXmlRule() throws Exception {\n    CheckFactory checkFactory = new CheckFactory(new ActiveRulesBuilder().build());\n    XmlFileSensor sensor = new XmlFileSensor(checkFactory);\n\n    DefaultInputFile xml = (DefaultInputFile) addFileWithIssue(\"xml\");\n    sensor.execute(context);\n    assertThat(xml.isPublished()).isTrue();\n\n    assertThat(context.allIssues()).isEmpty();\n  }", "signature": "void testDoNothingIfNoXmlRule()", "full_signature": "@Test void testDoNothingIfNoXmlRule()", "class_method_signature": "XmlFileSensorTest.testDoNothingIfNoXmlRule()", "testcase": true, "constructor": false, "invocations": ["build", "addFileWithIssue", "execute", "isTrue", "assertThat", "isPublished", "isEmpty", "assertThat", "allIssues"]}, "focal_class": {"identifier": "XmlFileSensor", "superclass": "", "interfaces": "implements Sensor", "fields": [{"original_string": "private static final Logger LOG = Loggers.get(XmlFileSensor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Loggers.get(XmlFileSensor.class)", "var_name": "LOG"}, {"original_string": "private final Checks<SonarXmlCheck> checks;", "modifier": "private final", "type": "Checks<SonarXmlCheck>", "declarator": "checks", "var_name": "checks"}], "methods": [{"identifier": "XmlFileSensor", "parameters": "(CheckFactory checkFactory)", "modifiers": "public", "return": "", "signature": " XmlFileSensor(CheckFactory checkFactory)", "full_signature": "public  XmlFileSensor(CheckFactory checkFactory)", "class_method_signature": "XmlFileSensor.XmlFileSensor(CheckFactory checkFactory)", "testcase": false, "constructor": true}, {"identifier": "describe", "parameters": "(SensorDescriptor descriptor)", "modifiers": "@Override public", "return": "void", "signature": "void describe(SensorDescriptor descriptor)", "full_signature": "@Override public void describe(SensorDescriptor descriptor)", "class_method_signature": "XmlFileSensor.describe(SensorDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(SensorContext context)", "modifiers": "@Override public", "return": "void", "signature": "void execute(SensorContext context)", "full_signature": "@Override public void execute(SensorContext context)", "class_method_signature": "XmlFileSensor.execute(SensorContext context)", "testcase": false, "constructor": false}, {"identifier": "scanFile", "parameters": "(SensorContext context, InputFile inputFile)", "modifiers": "private", "return": "void", "signature": "void scanFile(SensorContext context, InputFile inputFile)", "full_signature": "private void scanFile(SensorContext context, InputFile inputFile)", "class_method_signature": "XmlFileSensor.scanFile(SensorContext context, InputFile inputFile)", "testcase": false, "constructor": false}, {"identifier": "scanFile", "parameters": "(SensorContext context, XmlFile xmlFile, SonarXmlCheck check, RuleKey ruleKey)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void scanFile(SensorContext context, XmlFile xmlFile, SonarXmlCheck check, RuleKey ruleKey)", "full_signature": "@VisibleForTesting void scanFile(SensorContext context, XmlFile xmlFile, SonarXmlCheck check, RuleKey ruleKey)", "class_method_signature": "XmlFileSensor.scanFile(SensorContext context, XmlFile xmlFile, SonarXmlCheck check, RuleKey ruleKey)", "testcase": false, "constructor": false}], "file": "sonar-java-plugin/src/main/java/org/sonar/plugins/java/XmlFileSensor.java"}, "focal_method": {"identifier": "execute", "parameters": "(SensorContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute(SensorContext context) {\n    FileSystem fs = context.fileSystem();\n    FilePredicate xmlFilesPredicate = fs.predicates().matchesPathPattern(\"**/*.xml\");\n\n    List<InputFile> inputFiles = new ArrayList<>();\n    fs.inputFiles(xmlFilesPredicate).forEach(inputFile1 -> {\n      context.markForPublishing(inputFile1);\n      inputFiles.add(inputFile1);\n    });\n\n    if (inputFiles.isEmpty()) {\n      return;\n    }\n\n    ProgressReport progressReport = new ProgressReport(\"Report about progress of Java XML analyzer\", TimeUnit.SECONDS.toMillis(10));\n    progressReport.start(inputFiles.stream().map(InputFile::toString).collect(Collectors.toList()));\n\n    boolean successfullyCompleted = false;\n    boolean cancelled = false;\n    try {\n      for (InputFile inputFile : inputFiles) {\n        if (context.isCancelled()) {\n          cancelled = true;\n          break;\n        }\n        scanFile(context, inputFile);\n        progressReport.nextFile();\n      }\n      successfullyCompleted = !cancelled;\n    } finally {\n      if (successfullyCompleted) {\n        progressReport.stop();\n      } else {\n        progressReport.cancel();\n      }\n    }\n  }", "signature": "void execute(SensorContext context)", "full_signature": "@Override public void execute(SensorContext context)", "class_method_signature": "XmlFileSensor.execute(SensorContext context)", "testcase": false, "constructor": false, "invocations": ["fileSystem", "matchesPathPattern", "predicates", "forEach", "inputFiles", "markForPublishing", "add", "isEmpty", "toMillis", "start", "collect", "map", "stream", "toList", "isCancelled", "scanFile", "nextFile", "stop", "cancel"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}