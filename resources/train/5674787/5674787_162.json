{"test_class": {"identifier": "MethodTreeImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "java-frontend/src/test/java/org/sonar/java/model/declaration/MethodTreeImplTest.java"}, "test_case": {"identifier": "override_with_generic_parameters_should_be_detected", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void override_with_generic_parameters_should_be_detected() throws Exception {\n    CompilationUnitTree cut = createTree(\"public class ReferenceQueue<T> {\\n\" +\n        \"\\n\" +\n        \"    private static class Null extends ReferenceQueue {\\n\" +\n        \"        boolean enqueue(Reference r) {\\n\" +\n        \"            return false;\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"  boolean enqueue(Reference<? extends T> r) {}}\" +\n        \"public abstract class Reference<T> {}\");\n\n    ClassTree innerClass = (ClassTree) cut.types().get(0);\n    MethodTreeImpl methodInterface = (MethodTreeImpl) ((ClassTree) innerClass.members().get(0)).members().get(0);\n\n    assertThat(methodInterface.isOverriding()).isTrue();\n\n  }", "signature": "void override_with_generic_parameters_should_be_detected()", "full_signature": "@Test void override_with_generic_parameters_should_be_detected()", "class_method_signature": "MethodTreeImplTest.override_with_generic_parameters_should_be_detected()", "testcase": true, "constructor": false, "invocations": ["createTree", "get", "types", "get", "members", "get", "members", "isTrue", "assertThat", "isOverriding"]}, "focal_class": {"identifier": "MethodTreeImpl", "superclass": "extends JavaTree", "interfaces": "implements MethodTree", "fields": [{"original_string": "private ModifiersTree modifiers;", "modifier": "private", "type": "ModifiersTree", "declarator": "modifiers", "var_name": "modifiers"}, {"original_string": "private TypeParameters typeParameters;", "modifier": "private", "type": "TypeParameters", "declarator": "typeParameters", "var_name": "typeParameters"}, {"original_string": "@Nullable\n  private TypeTree returnType;", "modifier": "@Nullable\n  private", "type": "TypeTree", "declarator": "returnType", "var_name": "returnType"}, {"original_string": "private IdentifierTree simpleName;", "modifier": "private", "type": "IdentifierTree", "declarator": "simpleName", "var_name": "simpleName"}, {"original_string": "@Nullable\n  private final SyntaxToken openParenToken;", "modifier": "@Nullable\n  private final", "type": "SyntaxToken", "declarator": "openParenToken", "var_name": "openParenToken"}, {"original_string": "private final FormalParametersListTreeImpl parameters;", "modifier": "private final", "type": "FormalParametersListTreeImpl", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "@Nullable\n  private final SyntaxToken closeParenToken;", "modifier": "@Nullable\n  private final", "type": "SyntaxToken", "declarator": "closeParenToken", "var_name": "closeParenToken"}, {"original_string": "@Nullable\n  private final BlockTree block;", "modifier": "@Nullable\n  private final", "type": "BlockTree", "declarator": "block", "var_name": "block"}, {"original_string": "@Nullable\n  private SyntaxToken semicolonToken;", "modifier": "@Nullable\n  private", "type": "SyntaxToken", "declarator": "semicolonToken", "var_name": "semicolonToken"}, {"original_string": "@Nullable\n  private final SyntaxToken throwsToken;", "modifier": "@Nullable\n  private final", "type": "SyntaxToken", "declarator": "throwsToken", "var_name": "throwsToken"}, {"original_string": "private final ListTree<TypeTree> throwsClauses;", "modifier": "private final", "type": "ListTree<TypeTree>", "declarator": "throwsClauses", "var_name": "throwsClauses"}, {"original_string": "private final SyntaxToken defaultToken;", "modifier": "private final", "type": "SyntaxToken", "declarator": "defaultToken", "var_name": "defaultToken"}, {"original_string": "private final ExpressionTree defaultValue;", "modifier": "private final", "type": "ExpressionTree", "declarator": "defaultValue", "var_name": "defaultValue"}, {"original_string": "@Nullable\n  private CFG cfg;", "modifier": "@Nullable\n  private", "type": "CFG", "declarator": "cfg", "var_name": "cfg"}, {"original_string": "@Nullable\n  public IMethodBinding methodBinding;", "modifier": "@Nullable\n  public", "type": "IMethodBinding", "declarator": "methodBinding", "var_name": "methodBinding"}], "methods": [{"identifier": "MethodTreeImpl", "parameters": "(FormalParametersListTreeImpl parameters, @Nullable SyntaxToken defaultToken, @Nullable ExpressionTree defaultValue)", "modifiers": "public", "return": "", "signature": " MethodTreeImpl(FormalParametersListTreeImpl parameters, @Nullable SyntaxToken defaultToken, @Nullable ExpressionTree defaultValue)", "full_signature": "public  MethodTreeImpl(FormalParametersListTreeImpl parameters, @Nullable SyntaxToken defaultToken, @Nullable ExpressionTree defaultValue)", "class_method_signature": "MethodTreeImpl.MethodTreeImpl(FormalParametersListTreeImpl parameters, @Nullable SyntaxToken defaultToken, @Nullable ExpressionTree defaultValue)", "testcase": false, "constructor": true}, {"identifier": "MethodTreeImpl", "parameters": "(\n    @Nullable TypeTree returnType,\n    IdentifierTree simpleName,\n    FormalParametersListTreeImpl parameters,\n    @Nullable SyntaxToken throwsToken,\n    ListTree<TypeTree> throwsClauses,\n    @Nullable BlockTree block,\n    @Nullable SyntaxToken semicolonToken)", "modifiers": "public", "return": "", "signature": " MethodTreeImpl(\n    @Nullable TypeTree returnType,\n    IdentifierTree simpleName,\n    FormalParametersListTreeImpl parameters,\n    @Nullable SyntaxToken throwsToken,\n    ListTree<TypeTree> throwsClauses,\n    @Nullable BlockTree block,\n    @Nullable SyntaxToken semicolonToken)", "full_signature": "public  MethodTreeImpl(\n    @Nullable TypeTree returnType,\n    IdentifierTree simpleName,\n    FormalParametersListTreeImpl parameters,\n    @Nullable SyntaxToken throwsToken,\n    ListTree<TypeTree> throwsClauses,\n    @Nullable BlockTree block,\n    @Nullable SyntaxToken semicolonToken)", "class_method_signature": "MethodTreeImpl.MethodTreeImpl(\n    @Nullable TypeTree returnType,\n    IdentifierTree simpleName,\n    FormalParametersListTreeImpl parameters,\n    @Nullable SyntaxToken throwsToken,\n    ListTree<TypeTree> throwsClauses,\n    @Nullable BlockTree block,\n    @Nullable SyntaxToken semicolonToken)", "testcase": false, "constructor": true}, {"identifier": "complete", "parameters": "(TypeTree returnType, IdentifierTree simpleName, SyntaxToken semicolonToken)", "modifiers": "public", "return": "MethodTreeImpl", "signature": "MethodTreeImpl complete(TypeTree returnType, IdentifierTree simpleName, SyntaxToken semicolonToken)", "full_signature": "public MethodTreeImpl complete(TypeTree returnType, IdentifierTree simpleName, SyntaxToken semicolonToken)", "class_method_signature": "MethodTreeImpl.complete(TypeTree returnType, IdentifierTree simpleName, SyntaxToken semicolonToken)", "testcase": false, "constructor": false}, {"identifier": "completeWithTypeParameters", "parameters": "(TypeParameterListTreeImpl typeParameters)", "modifiers": "public", "return": "MethodTreeImpl", "signature": "MethodTreeImpl completeWithTypeParameters(TypeParameterListTreeImpl typeParameters)", "full_signature": "public MethodTreeImpl completeWithTypeParameters(TypeParameterListTreeImpl typeParameters)", "class_method_signature": "MethodTreeImpl.completeWithTypeParameters(TypeParameterListTreeImpl typeParameters)", "testcase": false, "constructor": false}, {"identifier": "completeWithModifiers", "parameters": "(ModifiersTreeImpl modifiers)", "modifiers": "public", "return": "MethodTreeImpl", "signature": "MethodTreeImpl completeWithModifiers(ModifiersTreeImpl modifiers)", "full_signature": "public MethodTreeImpl completeWithModifiers(ModifiersTreeImpl modifiers)", "class_method_signature": "MethodTreeImpl.completeWithModifiers(ModifiersTreeImpl modifiers)", "testcase": false, "constructor": false}, {"identifier": "kind", "parameters": "()", "modifiers": "@Override public", "return": "Kind", "signature": "Kind kind()", "full_signature": "@Override public Kind kind()", "class_method_signature": "MethodTreeImpl.kind()", "testcase": false, "constructor": false}, {"identifier": "modifiers", "parameters": "()", "modifiers": "@Override public", "return": "ModifiersTree", "signature": "ModifiersTree modifiers()", "full_signature": "@Override public ModifiersTree modifiers()", "class_method_signature": "MethodTreeImpl.modifiers()", "testcase": false, "constructor": false}, {"identifier": "typeParameters", "parameters": "()", "modifiers": "@Override public", "return": "TypeParameters", "signature": "TypeParameters typeParameters()", "full_signature": "@Override public TypeParameters typeParameters()", "class_method_signature": "MethodTreeImpl.typeParameters()", "testcase": false, "constructor": false}, {"identifier": "returnType", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "TypeTree", "signature": "TypeTree returnType()", "full_signature": "@Nullable @Override public TypeTree returnType()", "class_method_signature": "MethodTreeImpl.returnType()", "testcase": false, "constructor": false}, {"identifier": "simpleName", "parameters": "()", "modifiers": "@Override public", "return": "IdentifierTree", "signature": "IdentifierTree simpleName()", "full_signature": "@Override public IdentifierTree simpleName()", "class_method_signature": "MethodTreeImpl.simpleName()", "testcase": false, "constructor": false}, {"identifier": "openParenToken", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "SyntaxToken", "signature": "SyntaxToken openParenToken()", "full_signature": "@Nullable @Override public SyntaxToken openParenToken()", "class_method_signature": "MethodTreeImpl.openParenToken()", "testcase": false, "constructor": false}, {"identifier": "parameters", "parameters": "()", "modifiers": "@Override public", "return": "List<VariableTree>", "signature": "List<VariableTree> parameters()", "full_signature": "@Override public List<VariableTree> parameters()", "class_method_signature": "MethodTreeImpl.parameters()", "testcase": false, "constructor": false}, {"identifier": "closeParenToken", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "SyntaxToken", "signature": "SyntaxToken closeParenToken()", "full_signature": "@Nullable @Override public SyntaxToken closeParenToken()", "class_method_signature": "MethodTreeImpl.closeParenToken()", "testcase": false, "constructor": false}, {"identifier": "throwsToken", "parameters": "()", "modifiers": "@Override public", "return": "SyntaxToken", "signature": "SyntaxToken throwsToken()", "full_signature": "@Override public SyntaxToken throwsToken()", "class_method_signature": "MethodTreeImpl.throwsToken()", "testcase": false, "constructor": false}, {"identifier": "throwsClauses", "parameters": "()", "modifiers": "@Override public", "return": "ListTree<TypeTree>", "signature": "ListTree<TypeTree> throwsClauses()", "full_signature": "@Override public ListTree<TypeTree> throwsClauses()", "class_method_signature": "MethodTreeImpl.throwsClauses()", "testcase": false, "constructor": false}, {"identifier": "block", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "BlockTree", "signature": "BlockTree block()", "full_signature": "@Nullable @Override public BlockTree block()", "class_method_signature": "MethodTreeImpl.block()", "testcase": false, "constructor": false}, {"identifier": "semicolonToken", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "SyntaxToken", "signature": "SyntaxToken semicolonToken()", "full_signature": "@Nullable @Override public SyntaxToken semicolonToken()", "class_method_signature": "MethodTreeImpl.semicolonToken()", "testcase": false, "constructor": false}, {"identifier": "defaultToken", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "SyntaxToken", "signature": "SyntaxToken defaultToken()", "full_signature": "@Nullable @Override public SyntaxToken defaultToken()", "class_method_signature": "MethodTreeImpl.defaultToken()", "testcase": false, "constructor": false}, {"identifier": "defaultValue", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "ExpressionTree", "signature": "ExpressionTree defaultValue()", "full_signature": "@Nullable @Override public ExpressionTree defaultValue()", "class_method_signature": "MethodTreeImpl.defaultValue()", "testcase": false, "constructor": false}, {"identifier": "symbol", "parameters": "()", "modifiers": "@Override public", "return": "Symbol.MethodSymbol", "signature": "Symbol.MethodSymbol symbol()", "full_signature": "@Override public Symbol.MethodSymbol symbol()", "class_method_signature": "MethodTreeImpl.symbol()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(TreeVisitor visitor)", "modifiers": "@Override public", "return": "void", "signature": "void accept(TreeVisitor visitor)", "full_signature": "@Override public void accept(TreeVisitor visitor)", "class_method_signature": "MethodTreeImpl.accept(TreeVisitor visitor)", "testcase": false, "constructor": false}, {"identifier": "getLine", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLine()", "full_signature": "@Override public int getLine()", "class_method_signature": "MethodTreeImpl.getLine()", "testcase": false, "constructor": false}, {"identifier": "cfg", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "CFG", "signature": "CFG cfg()", "full_signature": "@Nullable @Override public CFG cfg()", "class_method_signature": "MethodTreeImpl.cfg()", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Tree>", "signature": "Iterable<Tree> children()", "full_signature": "@Override public Iterable<Tree> children()", "class_method_signature": "MethodTreeImpl.children()", "testcase": false, "constructor": false}, {"identifier": "isOverriding", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Boolean", "signature": "Boolean isOverriding()", "full_signature": "@Override @Nullable public Boolean isOverriding()", "class_method_signature": "MethodTreeImpl.isOverriding()", "testcase": false, "constructor": false}, {"identifier": "isStatic", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isStatic()", "full_signature": "private boolean isStatic()", "class_method_signature": "MethodTreeImpl.isStatic()", "testcase": false, "constructor": false}, {"identifier": "isPrivate", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isPrivate()", "full_signature": "private boolean isPrivate()", "class_method_signature": "MethodTreeImpl.isPrivate()", "testcase": false, "constructor": false}, {"identifier": "isAnnotatedOverride", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAnnotatedOverride()", "full_signature": "public boolean isAnnotatedOverride()", "class_method_signature": "MethodTreeImpl.isAnnotatedOverride()", "testcase": false, "constructor": false}, {"identifier": "isJavaLangOverride", "parameters": "(TypeTree annotationType)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJavaLangOverride(TypeTree annotationType)", "full_signature": "private static boolean isJavaLangOverride(TypeTree annotationType)", "class_method_signature": "MethodTreeImpl.isJavaLangOverride(TypeTree annotationType)", "testcase": false, "constructor": false}, {"identifier": "isJavaLangOverride", "parameters": "(MemberSelectExpressionTree annotationType)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJavaLangOverride(MemberSelectExpressionTree annotationType)", "full_signature": "private static boolean isJavaLangOverride(MemberSelectExpressionTree annotationType)", "class_method_signature": "MethodTreeImpl.isJavaLangOverride(MemberSelectExpressionTree annotationType)", "testcase": false, "constructor": false}, {"identifier": "isOverride", "parameters": "(IdentifierTree id)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOverride(IdentifierTree id)", "full_signature": "private static boolean isOverride(IdentifierTree id)", "class_method_signature": "MethodTreeImpl.isOverride(IdentifierTree id)", "testcase": false, "constructor": false}], "file": "java-frontend/src/main/java/org/sonar/java/model/declaration/MethodTreeImpl.java"}, "focal_method": {"identifier": "isOverriding", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Boolean", "body": "@Override\n  @Nullable\n  public Boolean isOverriding() {\n    if (isStatic() || isPrivate()) {\n      return false;\n    }\n    if (isAnnotatedOverride()) {\n      return true;\n    }\n    if (symbol() == null) {\n      return null;\n    }\n    Symbol.MethodSymbol methodSymbol = symbol().overriddenSymbol();\n    if (methodSymbol != null) {\n      return methodSymbol.isUnknown() ? null : true;\n    }\n    return false;\n  }", "signature": "Boolean isOverriding()", "full_signature": "@Override @Nullable public Boolean isOverriding()", "class_method_signature": "MethodTreeImpl.isOverriding()", "testcase": false, "constructor": false, "invocations": ["isStatic", "isPrivate", "isAnnotatedOverride", "symbol", "overriddenSymbol", "symbol", "isUnknown"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}