{"test_class": {"identifier": "JTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JSema sema;", "modifier": "private", "type": "JSema", "declarator": "sema", "var_name": "sema"}], "file": "java-frontend/src/test/java/org/sonar/java/model/JTypeTest.java"}, "test_case": {"identifier": "isClass", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void isClass() {\n    assertAll(\n      () ->\n        assertThat(type(\"java.util.HashMap\").isClass())\n          .as(\"for classes\")\n          .isTrue(),\n      () ->\n        assertThat(type(\"java.util.Map\").isClass())\n          .as(\"for interfaces\")\n          .isTrue(),\n      () ->\n        assertThat(type(\"java.lang.annotation.RetentionPolicy\").isClass())\n          .as(\"for enums\")\n          .isTrue()\n    );\n  }", "signature": "void isClass()", "full_signature": "@Test void isClass()", "class_method_signature": "JTypeTest.isClass()", "testcase": true, "constructor": false, "invocations": ["assertAll", "isTrue", "as", "assertThat", "isClass", "type", "isTrue", "as", "assertThat", "isClass", "type", "isTrue", "as", "assertThat", "isClass", "type"]}, "focal_class": {"identifier": "JType", "superclass": "", "interfaces": "implements Type, Type.ArrayType", "fields": [{"original_string": "final JSema sema;", "modifier": "final", "type": "JSema", "declarator": "sema", "var_name": "sema"}, {"original_string": "final ITypeBinding typeBinding;", "modifier": "final", "type": "ITypeBinding", "declarator": "typeBinding", "var_name": "typeBinding"}, {"original_string": "private final String fullyQualifiedName;", "modifier": "private final", "type": "String", "declarator": "fullyQualifiedName", "var_name": "fullyQualifiedName"}, {"original_string": "private List<Type> typeArguments;", "modifier": "private", "type": "List<Type>", "declarator": "typeArguments", "var_name": "typeArguments"}], "methods": [{"identifier": "JType", "parameters": "(JSema sema, ITypeBinding typeBinding)", "modifiers": "", "return": "", "signature": " JType(JSema sema, ITypeBinding typeBinding)", "full_signature": "  JType(JSema sema, ITypeBinding typeBinding)", "class_method_signature": "JType.JType(JSema sema, ITypeBinding typeBinding)", "testcase": false, "constructor": true}, {"identifier": "is", "parameters": "(String fullyQualifiedName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean is(String fullyQualifiedName)", "full_signature": "@Override public boolean is(String fullyQualifiedName)", "class_method_signature": "JType.is(String fullyQualifiedName)", "testcase": false, "constructor": false}, {"identifier": "isSubtypeOf", "parameters": "(String fullyQualifiedName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSubtypeOf(String fullyQualifiedName)", "full_signature": "@Override public boolean isSubtypeOf(String fullyQualifiedName)", "class_method_signature": "JType.isSubtypeOf(String fullyQualifiedName)", "testcase": false, "constructor": false}, {"identifier": "isSubtypeOf", "parameters": "(Type superType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSubtypeOf(Type superType)", "full_signature": "@Override public boolean isSubtypeOf(Type superType)", "class_method_signature": "JType.isSubtypeOf(Type superType)", "testcase": false, "constructor": false}, {"identifier": "isSubtype", "parameters": "(ITypeBinding left, ITypeBinding right)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSubtype(ITypeBinding left, ITypeBinding right)", "full_signature": "private static boolean isSubtype(ITypeBinding left, ITypeBinding right)", "class_method_signature": "JType.isSubtype(ITypeBinding left, ITypeBinding right)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isArray()", "full_signature": "@Override public boolean isArray()", "class_method_signature": "JType.isArray()", "testcase": false, "constructor": false}, {"identifier": "isClass", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClass()", "full_signature": "@Override public boolean isClass()", "class_method_signature": "JType.isClass()", "testcase": false, "constructor": false}, {"identifier": "isVoid", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVoid()", "full_signature": "@Override public boolean isVoid()", "class_method_signature": "JType.isVoid()", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPrimitive()", "full_signature": "@Override public boolean isPrimitive()", "class_method_signature": "JType.isPrimitive()", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(Primitives primitive)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPrimitive(Primitives primitive)", "full_signature": "@Override public boolean isPrimitive(Primitives primitive)", "class_method_signature": "JType.isPrimitive(Primitives primitive)", "testcase": false, "constructor": false}, {"identifier": "isUnknown", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUnknown()", "full_signature": "@Override public boolean isUnknown()", "class_method_signature": "JType.isUnknown()", "testcase": false, "constructor": false}, {"identifier": "isNumerical", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNumerical()", "full_signature": "@Override public boolean isNumerical()", "class_method_signature": "JType.isNumerical()", "testcase": false, "constructor": false}, {"identifier": "fullyQualifiedName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String fullyQualifiedName()", "full_signature": "@Override public String fullyQualifiedName()", "class_method_signature": "JType.fullyQualifiedName()", "testcase": false, "constructor": false}, {"identifier": "fullyQualifiedName", "parameters": "(ITypeBinding typeBinding)", "modifiers": "private static", "return": "String", "signature": "String fullyQualifiedName(ITypeBinding typeBinding)", "full_signature": "private static String fullyQualifiedName(ITypeBinding typeBinding)", "class_method_signature": "JType.fullyQualifiedName(ITypeBinding typeBinding)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "JType.name()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JType.toString()", "testcase": false, "constructor": false}, {"identifier": "symbol", "parameters": "()", "modifiers": "@Override public", "return": "Symbol.TypeSymbol", "signature": "Symbol.TypeSymbol symbol()", "full_signature": "@Override public Symbol.TypeSymbol symbol()", "class_method_signature": "JType.symbol()", "testcase": false, "constructor": false}, {"identifier": "erasure", "parameters": "()", "modifiers": "@Override public", "return": "Type", "signature": "Type erasure()", "full_signature": "@Override public Type erasure()", "class_method_signature": "JType.erasure()", "testcase": false, "constructor": false}, {"identifier": "elementType", "parameters": "()", "modifiers": "@Override public", "return": "Type", "signature": "Type elementType()", "full_signature": "@Override public Type elementType()", "class_method_signature": "JType.elementType()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "JType.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "JType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "areEqual", "parameters": "(@Nullable ITypeBinding binding1, @Nullable ITypeBinding binding2)", "modifiers": "static", "return": "boolean", "signature": "boolean areEqual(@Nullable ITypeBinding binding1, @Nullable ITypeBinding binding2)", "full_signature": "static boolean areEqual(@Nullable ITypeBinding binding1, @Nullable ITypeBinding binding2)", "class_method_signature": "JType.areEqual(@Nullable ITypeBinding binding1, @Nullable ITypeBinding binding2)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(ITypeBinding typeBinding)", "modifiers": "static", "return": "ITypeBinding", "signature": "ITypeBinding normalize(ITypeBinding typeBinding)", "full_signature": "static ITypeBinding normalize(ITypeBinding typeBinding)", "class_method_signature": "JType.normalize(ITypeBinding typeBinding)", "testcase": false, "constructor": false}, {"identifier": "isParameterizedOrGeneric", "parameters": "(ITypeBinding typeBinding)", "modifiers": "private static", "return": "boolean", "signature": "boolean isParameterizedOrGeneric(ITypeBinding typeBinding)", "full_signature": "private static boolean isParameterizedOrGeneric(ITypeBinding typeBinding)", "class_method_signature": "JType.isParameterizedOrGeneric(ITypeBinding typeBinding)", "testcase": false, "constructor": false}, {"identifier": "isParameterized", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isParameterized()", "full_signature": "@Override public boolean isParameterized()", "class_method_signature": "JType.isParameterized()", "testcase": false, "constructor": false}, {"identifier": "typeArguments", "parameters": "()", "modifiers": "@Override public", "return": "List<Type>", "signature": "List<Type> typeArguments()", "full_signature": "@Override public List<Type> typeArguments()", "class_method_signature": "JType.typeArguments()", "testcase": false, "constructor": false}], "file": "java-frontend/src/main/java/org/sonar/java/model/JType.java"}, "focal_method": {"identifier": "isClass", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean isClass() {\n    return typeBinding.isClass()\n      || typeBinding.isInterface()\n      || typeBinding.isEnum();\n  }", "signature": "boolean isClass()", "full_signature": "@Override public boolean isClass()", "class_method_signature": "JType.isClass()", "testcase": false, "constructor": false, "invocations": ["isClass", "isInterface", "isEnum"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}