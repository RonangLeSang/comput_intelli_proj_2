{"test_class": {"identifier": "ProgramStateTest", "superclass": "", "interfaces": "", "fields": [], "file": "java-frontend/src/test/java/org/sonar/java/se/ProgramStateTest.java"}, "test_case": {"identifier": "test_symbol_should_not_change_equals", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void test_symbol_should_not_change_equals() throws Exception {\n    ProgramState ps1 = ProgramState.EMPTY_STATE;\n    ProgramState ps2 = ProgramState.EMPTY_STATE;\n    SymbolicValue sv = new SymbolicValue();\n    Symbol.VariableSymbol symbol = variable(\"a\");\n    ps1 = ps1.stackValue(sv);\n    ps2 = ps2.stackValue(sv, symbol);\n    assertThat(ps1).isEqualTo(ps2);\n    assertThat(ImmutableSet.of(ps1, ps2)).hasSize(1);\n  }", "signature": "void test_symbol_should_not_change_equals()", "full_signature": "@Test void test_symbol_should_not_change_equals()", "class_method_signature": "ProgramStateTest.test_symbol_should_not_change_equals()", "testcase": true, "constructor": false, "invocations": ["variable", "stackValue", "stackValue", "isEqualTo", "assertThat", "hasSize", "assertThat", "of"]}, "focal_class": {"identifier": "ProgramState", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<Class<? extends Constraint>> NON_DISPOSABLE_CONSTRAINTS = ImmutableSet.of(UnclosedResourcesCheck.ResourceConstraint.class,\n    CustomUnclosedResourcesCheck.CustomResourceConstraint.class, LocksNotUnlockedCheck.LockConstraint.class, StreamConsumedCheck.StreamPipelineConstraint.class);", "modifier": "private static final", "type": "Set<Class<? extends Constraint>>", "declarator": "NON_DISPOSABLE_CONSTRAINTS = ImmutableSet.of(UnclosedResourcesCheck.ResourceConstraint.class,\n    CustomUnclosedResourcesCheck.CustomResourceConstraint.class, LocksNotUnlockedCheck.LockConstraint.class, StreamConsumedCheck.StreamPipelineConstraint.class)", "var_name": "NON_DISPOSABLE_CONSTRAINTS"}, {"original_string": "private Set<RelationalSymbolicValue> knownRelations;", "modifier": "private", "type": "Set<RelationalSymbolicValue>", "declarator": "knownRelations", "var_name": "knownRelations"}, {"original_string": "private int hashCode;", "modifier": "private", "type": "int", "declarator": "hashCode", "var_name": "hashCode"}, {"original_string": "private final int constraintSize;", "modifier": "private final", "type": "int", "declarator": "constraintSize", "var_name": "constraintSize"}, {"original_string": "public static final ProgramState EMPTY_STATE = new ProgramState(\n    PCollections.emptyMap(),\n    PCollections.emptyMap(),\n    PCollections.<SymbolicValue, ConstraintsByDomain>emptyMap()\n      .put(SymbolicValue.NULL_LITERAL, ConstraintsByDomain.empty().put(ObjectConstraint.NULL))\n      .put(SymbolicValue.TRUE_LITERAL, ConstraintsByDomain.empty().put(BooleanConstraint.TRUE).put(ObjectConstraint.NOT_NULL))\n      .put(SymbolicValue.FALSE_LITERAL, ConstraintsByDomain.empty().put(BooleanConstraint.FALSE).put(ObjectConstraint.NOT_NULL)),\n        PCollections.emptyMap(),\n    PCollections.emptyStack(),\n    null);", "modifier": "public static final", "type": "ProgramState", "declarator": "EMPTY_STATE = new ProgramState(\n    PCollections.emptyMap(),\n    PCollections.emptyMap(),\n    PCollections.<SymbolicValue, ConstraintsByDomain>emptyMap()\n      .put(SymbolicValue.NULL_LITERAL, ConstraintsByDomain.empty().put(ObjectConstraint.NULL))\n      .put(SymbolicValue.TRUE_LITERAL, ConstraintsByDomain.empty().put(BooleanConstraint.TRUE).put(ObjectConstraint.NOT_NULL))\n      .put(SymbolicValue.FALSE_LITERAL, ConstraintsByDomain.empty().put(BooleanConstraint.FALSE).put(ObjectConstraint.NOT_NULL)),\n        PCollections.emptyMap(),\n    PCollections.emptyStack(),\n    null)", "var_name": "EMPTY_STATE"}, {"original_string": "private final PMap<ProgramPoint, Integer> visitedPoints;", "modifier": "private final", "type": "PMap<ProgramPoint, Integer>", "declarator": "visitedPoints", "var_name": "visitedPoints"}, {"original_string": "private final PStack<SymbolicValueSymbol> stack;", "modifier": "private final", "type": "PStack<SymbolicValueSymbol>", "declarator": "stack", "var_name": "stack"}, {"original_string": "private final PMap<SymbolicValue, Integer> references;", "modifier": "private final", "type": "PMap<SymbolicValue, Integer>", "declarator": "references", "var_name": "references"}, {"original_string": "private SymbolicValue exitSymbolicValue;", "modifier": "private", "type": "SymbolicValue", "declarator": "exitSymbolicValue", "var_name": "exitSymbolicValue"}, {"original_string": "final PMap<Symbol, SymbolicValue> values;", "modifier": "final", "type": "PMap<Symbol, SymbolicValue>", "declarator": "values", "var_name": "values"}, {"original_string": "final PMap<Integer, SymbolicValue> valuesByIndex;", "modifier": "final", "type": "PMap<Integer, SymbolicValue>", "declarator": "valuesByIndex", "var_name": "valuesByIndex"}, {"original_string": "final PMap<SymbolicValue, ConstraintsByDomain> constraints;", "modifier": "final", "type": "PMap<SymbolicValue, ConstraintsByDomain>", "declarator": "constraints", "var_name": "constraints"}], "methods": [{"identifier": "ProgramState", "parameters": "(PMap<Symbol, SymbolicValue> values,PMap<Integer, SymbolicValue> valuesByIndex, PMap<SymbolicValue, Integer> references,\n                       PMap<SymbolicValue, ConstraintsByDomain> constraints, PMap<ProgramPoint, Integer> visitedPoints,\n                       PStack<SymbolicValueSymbol> stack, SymbolicValue exitSymbolicValue)", "modifiers": "private", "return": "", "signature": " ProgramState(PMap<Symbol, SymbolicValue> values,PMap<Integer, SymbolicValue> valuesByIndex, PMap<SymbolicValue, Integer> references,\n                       PMap<SymbolicValue, ConstraintsByDomain> constraints, PMap<ProgramPoint, Integer> visitedPoints,\n                       PStack<SymbolicValueSymbol> stack, SymbolicValue exitSymbolicValue)", "full_signature": "private  ProgramState(PMap<Symbol, SymbolicValue> values,PMap<Integer, SymbolicValue> valuesByIndex, PMap<SymbolicValue, Integer> references,\n                       PMap<SymbolicValue, ConstraintsByDomain> constraints, PMap<ProgramPoint, Integer> visitedPoints,\n                       PStack<SymbolicValueSymbol> stack, SymbolicValue exitSymbolicValue)", "class_method_signature": "ProgramState.ProgramState(PMap<Symbol, SymbolicValue> values,PMap<Integer, SymbolicValue> valuesByIndex, PMap<SymbolicValue, Integer> references,\n                       PMap<SymbolicValue, ConstraintsByDomain> constraints, PMap<ProgramPoint, Integer> visitedPoints,\n                       PStack<SymbolicValueSymbol> stack, SymbolicValue exitSymbolicValue)", "testcase": false, "constructor": true}, {"identifier": "ProgramState", "parameters": "(PMap<Symbol, SymbolicValue> values, PMap<SymbolicValue, Integer> references,\n                       PMap<SymbolicValue, ConstraintsByDomain> constraints, PMap<ProgramPoint, Integer> visitedPoints,\n                       PStack<SymbolicValueSymbol> stack, SymbolicValue exitSymbolicValue)", "modifiers": "private", "return": "", "signature": " ProgramState(PMap<Symbol, SymbolicValue> values, PMap<SymbolicValue, Integer> references,\n                       PMap<SymbolicValue, ConstraintsByDomain> constraints, PMap<ProgramPoint, Integer> visitedPoints,\n                       PStack<SymbolicValueSymbol> stack, SymbolicValue exitSymbolicValue)", "full_signature": "private  ProgramState(PMap<Symbol, SymbolicValue> values, PMap<SymbolicValue, Integer> references,\n                       PMap<SymbolicValue, ConstraintsByDomain> constraints, PMap<ProgramPoint, Integer> visitedPoints,\n                       PStack<SymbolicValueSymbol> stack, SymbolicValue exitSymbolicValue)", "class_method_signature": "ProgramState.ProgramState(PMap<Symbol, SymbolicValue> values, PMap<SymbolicValue, Integer> references,\n                       PMap<SymbolicValue, ConstraintsByDomain> constraints, PMap<ProgramPoint, Integer> visitedPoints,\n                       PStack<SymbolicValueSymbol> stack, SymbolicValue exitSymbolicValue)", "testcase": false, "constructor": true}, {"identifier": "ProgramState", "parameters": "(ProgramState ps, PStack<SymbolicValueSymbol> newStack)", "modifiers": "private", "return": "", "signature": " ProgramState(ProgramState ps, PStack<SymbolicValueSymbol> newStack)", "full_signature": "private  ProgramState(ProgramState ps, PStack<SymbolicValueSymbol> newStack)", "class_method_signature": "ProgramState.ProgramState(ProgramState ps, PStack<SymbolicValueSymbol> newStack)", "testcase": false, "constructor": true}, {"identifier": "ProgramState", "parameters": "(ProgramState ps, PMap<SymbolicValue, ConstraintsByDomain> newConstraints)", "modifiers": "private", "return": "", "signature": " ProgramState(ProgramState ps, PMap<SymbolicValue, ConstraintsByDomain> newConstraints)", "full_signature": "private  ProgramState(ProgramState ps, PMap<SymbolicValue, ConstraintsByDomain> newConstraints)", "class_method_signature": "ProgramState.ProgramState(ProgramState ps, PMap<SymbolicValue, ConstraintsByDomain> newConstraints)", "testcase": false, "constructor": true}, {"identifier": "stackValue", "parameters": "(SymbolicValue sv)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState stackValue(SymbolicValue sv)", "full_signature": "public ProgramState stackValue(SymbolicValue sv)", "class_method_signature": "ProgramState.stackValue(SymbolicValue sv)", "testcase": false, "constructor": false}, {"identifier": "stackValue", "parameters": "(SymbolicValue sv, @Nullable Symbol symbol)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState stackValue(SymbolicValue sv, @Nullable Symbol symbol)", "full_signature": "public ProgramState stackValue(SymbolicValue sv, @Nullable Symbol symbol)", "class_method_signature": "ProgramState.stackValue(SymbolicValue sv, @Nullable Symbol symbol)", "testcase": false, "constructor": false}, {"identifier": "clearStack", "parameters": "()", "modifiers": "", "return": "ProgramState", "signature": "ProgramState clearStack()", "full_signature": " ProgramState clearStack()", "class_method_signature": "ProgramState.clearStack()", "testcase": false, "constructor": false}, {"identifier": "unstackValue", "parameters": "(int nbElements)", "modifiers": "public", "return": "Pop", "signature": "Pop unstackValue(int nbElements)", "full_signature": "public Pop unstackValue(int nbElements)", "class_method_signature": "ProgramState.unstackValue(int nbElements)", "testcase": false, "constructor": false}, {"identifier": "peekValue", "parameters": "()", "modifiers": "@CheckForNull public", "return": "SymbolicValue", "signature": "SymbolicValue peekValue()", "full_signature": "@CheckForNull public SymbolicValue peekValue()", "class_method_signature": "ProgramState.peekValue()", "testcase": false, "constructor": false}, {"identifier": "peekValueSymbol", "parameters": "()", "modifiers": "public", "return": "SymbolicValueSymbol", "signature": "SymbolicValueSymbol peekValueSymbol()", "full_signature": "public SymbolicValueSymbol peekValueSymbol()", "class_method_signature": "ProgramState.peekValueSymbol()", "testcase": false, "constructor": false}, {"identifier": "peekValue", "parameters": "(int i)", "modifiers": "public", "return": "SymbolicValue", "signature": "SymbolicValue peekValue(int i)", "full_signature": "public SymbolicValue peekValue(int i)", "class_method_signature": "ProgramState.peekValue(int i)", "testcase": false, "constructor": false}, {"identifier": "peekValues", "parameters": "(int n)", "modifiers": "public", "return": "List<SymbolicValue>", "signature": "List<SymbolicValue> peekValues(int n)", "full_signature": "public List<SymbolicValue> peekValues(int n)", "class_method_signature": "ProgramState.peekValues(int n)", "testcase": false, "constructor": false}, {"identifier": "peekValuesAndSymbols", "parameters": "(int n)", "modifiers": "public", "return": "List<SymbolicValueSymbol>", "signature": "List<SymbolicValueSymbol> peekValuesAndSymbols(int n)", "full_signature": "public List<SymbolicValueSymbol> peekValuesAndSymbols(int n)", "class_method_signature": "ProgramState.peekValuesAndSymbols(int n)", "testcase": false, "constructor": false}, {"identifier": "numberOfTimeVisited", "parameters": "(ProgramPoint programPoint)", "modifiers": "public", "return": "int", "signature": "int numberOfTimeVisited(ProgramPoint programPoint)", "full_signature": "public int numberOfTimeVisited(ProgramPoint programPoint)", "class_method_signature": "ProgramState.numberOfTimeVisited(ProgramPoint programPoint)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ProgramState.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ProgramState.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ProgramState.toString()", "testcase": false, "constructor": false}, {"identifier": "addConstraintTransitively", "parameters": "(SymbolicValue symbolicValue, Constraint constraint)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState addConstraintTransitively(SymbolicValue symbolicValue, Constraint constraint)", "full_signature": "public ProgramState addConstraintTransitively(SymbolicValue symbolicValue, Constraint constraint)", "class_method_signature": "ProgramState.addConstraintTransitively(SymbolicValue symbolicValue, Constraint constraint)", "testcase": false, "constructor": false}, {"identifier": "knownRelations", "parameters": "()", "modifiers": "public", "return": "Set<RelationalSymbolicValue>", "signature": "Set<RelationalSymbolicValue> knownRelations()", "full_signature": "public Set<RelationalSymbolicValue> knownRelations()", "class_method_signature": "ProgramState.knownRelations()", "testcase": false, "constructor": false}, {"identifier": "addConstraint", "parameters": "(SymbolicValue symbolicValue, Constraint constraint)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState addConstraint(SymbolicValue symbolicValue, Constraint constraint)", "full_signature": "public ProgramState addConstraint(SymbolicValue symbolicValue, Constraint constraint)", "class_method_signature": "ProgramState.addConstraint(SymbolicValue symbolicValue, Constraint constraint)", "testcase": false, "constructor": false}, {"identifier": "addConstraints", "parameters": "(SymbolicValue symbolicValue, ConstraintsByDomain constraintsForSV)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState addConstraints(SymbolicValue symbolicValue, ConstraintsByDomain constraintsForSV)", "full_signature": "public ProgramState addConstraints(SymbolicValue symbolicValue, ConstraintsByDomain constraintsForSV)", "class_method_signature": "ProgramState.addConstraints(SymbolicValue symbolicValue, ConstraintsByDomain constraintsForSV)", "testcase": false, "constructor": false}, {"identifier": "removeConstraintsOnDomain", "parameters": "(SymbolicValue sv, Class<? extends Constraint> domain)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState removeConstraintsOnDomain(SymbolicValue sv, Class<? extends Constraint> domain)", "full_signature": "public ProgramState removeConstraintsOnDomain(SymbolicValue sv, Class<? extends Constraint> domain)", "class_method_signature": "ProgramState.removeConstraintsOnDomain(SymbolicValue sv, Class<? extends Constraint> domain)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Symbol symbol, SymbolicValue value)", "modifiers": "@VisibleForTesting public", "return": "ProgramState", "signature": "ProgramState put(Symbol symbol, SymbolicValue value)", "full_signature": "@VisibleForTesting public ProgramState put(Symbol symbol, SymbolicValue value)", "class_method_signature": "ProgramState.put(Symbol symbol, SymbolicValue value)", "testcase": false, "constructor": false}, {"identifier": "isVolatileField", "parameters": "(Symbol symbol)", "modifiers": "private static", "return": "boolean", "signature": "boolean isVolatileField(Symbol symbol)", "full_signature": "private static boolean isVolatileField(Symbol symbol)", "class_method_signature": "ProgramState.isVolatileField(Symbol symbol)", "testcase": false, "constructor": false}, {"identifier": "decreaseReference", "parameters": "(PMap<SymbolicValue, Integer> givenReferences, SymbolicValue sv)", "modifiers": "private static", "return": "PMap<SymbolicValue, Integer>", "signature": "PMap<SymbolicValue, Integer> decreaseReference(PMap<SymbolicValue, Integer> givenReferences, SymbolicValue sv)", "full_signature": "private static PMap<SymbolicValue, Integer> decreaseReference(PMap<SymbolicValue, Integer> givenReferences, SymbolicValue sv)", "class_method_signature": "ProgramState.decreaseReference(PMap<SymbolicValue, Integer> givenReferences, SymbolicValue sv)", "testcase": false, "constructor": false}, {"identifier": "increaseReference", "parameters": "(PMap<SymbolicValue, Integer> givenReferences, SymbolicValue sv)", "modifiers": "private static", "return": "PMap<SymbolicValue, Integer>", "signature": "PMap<SymbolicValue, Integer> increaseReference(PMap<SymbolicValue, Integer> givenReferences, SymbolicValue sv)", "full_signature": "private static PMap<SymbolicValue, Integer> increaseReference(PMap<SymbolicValue, Integer> givenReferences, SymbolicValue sv)", "class_method_signature": "ProgramState.increaseReference(PMap<SymbolicValue, Integer> givenReferences, SymbolicValue sv)", "testcase": false, "constructor": false}, {"identifier": "isDisposable", "parameters": "(SymbolicValue symbolicValue, @Nullable Constraint constraint)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDisposable(SymbolicValue symbolicValue, @Nullable Constraint constraint)", "full_signature": "private static boolean isDisposable(SymbolicValue symbolicValue, @Nullable Constraint constraint)", "class_method_signature": "ProgramState.isDisposable(SymbolicValue symbolicValue, @Nullable Constraint constraint)", "testcase": false, "constructor": false}, {"identifier": "isDisposable", "parameters": "(SymbolicValue symbolicValue, @Nullable ConstraintsByDomain constraints)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDisposable(SymbolicValue symbolicValue, @Nullable ConstraintsByDomain constraints)", "full_signature": "private static boolean isDisposable(SymbolicValue symbolicValue, @Nullable ConstraintsByDomain constraints)", "class_method_signature": "ProgramState.isDisposable(SymbolicValue symbolicValue, @Nullable ConstraintsByDomain constraints)", "testcase": false, "constructor": false}, {"identifier": "inStack", "parameters": "(PStack<SymbolicValueSymbol> stack, SymbolicValue symbolicValue)", "modifiers": "private static", "return": "boolean", "signature": "boolean inStack(PStack<SymbolicValueSymbol> stack, SymbolicValue symbolicValue)", "full_signature": "private static boolean inStack(PStack<SymbolicValueSymbol> stack, SymbolicValue symbolicValue)", "class_method_signature": "ProgramState.inStack(PStack<SymbolicValueSymbol> stack, SymbolicValue symbolicValue)", "testcase": false, "constructor": false}, {"identifier": "isLocalVariable", "parameters": "(Symbol symbol)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLocalVariable(Symbol symbol)", "full_signature": "private static boolean isLocalVariable(Symbol symbol)", "class_method_signature": "ProgramState.isLocalVariable(Symbol symbol)", "testcase": false, "constructor": false}, {"identifier": "cleanupDeadSymbols", "parameters": "(Set<Symbol> liveVariables, Collection<SymbolicValue> protectedSymbolicValues)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState cleanupDeadSymbols(Set<Symbol> liveVariables, Collection<SymbolicValue> protectedSymbolicValues)", "full_signature": "public ProgramState cleanupDeadSymbols(Set<Symbol> liveVariables, Collection<SymbolicValue> protectedSymbolicValues)", "class_method_signature": "ProgramState.cleanupDeadSymbols(Set<Symbol> liveVariables, Collection<SymbolicValue> protectedSymbolicValues)", "testcase": false, "constructor": false}, {"identifier": "cleanupConstraints", "parameters": "(Collection<SymbolicValue> protectedSymbolicValues)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState cleanupConstraints(Collection<SymbolicValue> protectedSymbolicValues)", "full_signature": "public ProgramState cleanupConstraints(Collection<SymbolicValue> protectedSymbolicValues)", "class_method_signature": "ProgramState.cleanupConstraints(Collection<SymbolicValue> protectedSymbolicValues)", "testcase": false, "constructor": false}, {"identifier": "resetFieldValues", "parameters": "(ConstraintManager constraintManager, boolean resetOnlyStaticFields)", "modifiers": "", "return": "ProgramState", "signature": "ProgramState resetFieldValues(ConstraintManager constraintManager, boolean resetOnlyStaticFields)", "full_signature": " ProgramState resetFieldValues(ConstraintManager constraintManager, boolean resetOnlyStaticFields)", "class_method_signature": "ProgramState.resetFieldValues(ConstraintManager constraintManager, boolean resetOnlyStaticFields)", "testcase": false, "constructor": false}, {"identifier": "isField", "parameters": "(Symbol symbol)", "modifiers": "public static", "return": "boolean", "signature": "boolean isField(Symbol symbol)", "full_signature": "public static boolean isField(Symbol symbol)", "class_method_signature": "ProgramState.isField(Symbol symbol)", "testcase": false, "constructor": false}, {"identifier": "isReachable", "parameters": "(SymbolicValue symbolicValue, PMap<SymbolicValue, Integer> references)", "modifiers": "private static", "return": "boolean", "signature": "boolean isReachable(SymbolicValue symbolicValue, PMap<SymbolicValue, Integer> references)", "full_signature": "private static boolean isReachable(SymbolicValue symbolicValue, PMap<SymbolicValue, Integer> references)", "class_method_signature": "ProgramState.isReachable(SymbolicValue symbolicValue, PMap<SymbolicValue, Integer> references)", "testcase": false, "constructor": false}, {"identifier": "canReach", "parameters": "(SymbolicValue symbolicValue)", "modifiers": "public", "return": "boolean", "signature": "boolean canReach(SymbolicValue symbolicValue)", "full_signature": "public boolean canReach(SymbolicValue symbolicValue)", "class_method_signature": "ProgramState.canReach(SymbolicValue symbolicValue)", "testcase": false, "constructor": false}, {"identifier": "visitedPoint", "parameters": "(ProgramPoint programPoint, int nbOfVisit)", "modifiers": "public", "return": "ProgramState", "signature": "ProgramState visitedPoint(ProgramPoint programPoint, int nbOfVisit)", "full_signature": "public ProgramState visitedPoint(ProgramPoint programPoint, int nbOfVisit)", "class_method_signature": "ProgramState.visitedPoint(ProgramPoint programPoint, int nbOfVisit)", "testcase": false, "constructor": false}, {"identifier": "getConstraints", "parameters": "(SymbolicValue sv)", "modifiers": "@Nullable public", "return": "ConstraintsByDomain", "signature": "ConstraintsByDomain getConstraints(SymbolicValue sv)", "full_signature": "@Nullable public ConstraintsByDomain getConstraints(SymbolicValue sv)", "class_method_signature": "ProgramState.getConstraints(SymbolicValue sv)", "testcase": false, "constructor": false}, {"identifier": "getConstraint", "parameters": "(SymbolicValue sv, Class<T> domain)", "modifiers": "@CheckForNull public", "return": "T", "signature": "T getConstraint(SymbolicValue sv, Class<T> domain)", "full_signature": "@CheckForNull public T getConstraint(SymbolicValue sv, Class<T> domain)", "class_method_signature": "ProgramState.getConstraint(SymbolicValue sv, Class<T> domain)", "testcase": false, "constructor": false}, {"identifier": "constraintsSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int constraintsSize()", "full_signature": "public int constraintsSize()", "class_method_signature": "ProgramState.constraintsSize()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int index)", "modifiers": "@CheckForNull public", "return": "SymbolicValue", "signature": "SymbolicValue getValue(int index)", "full_signature": "@CheckForNull public SymbolicValue getValue(int index)", "class_method_signature": "ProgramState.getValue(int index)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Symbol symbol)", "modifiers": "@CheckForNull public", "return": "SymbolicValue", "signature": "SymbolicValue getValue(Symbol symbol)", "full_signature": "@CheckForNull public SymbolicValue getValue(Symbol symbol)", "class_method_signature": "ProgramState.getValue(Symbol symbol)", "testcase": false, "constructor": false}, {"identifier": "getValuesWithConstraints", "parameters": "(final Constraint constraint)", "modifiers": "public", "return": "List<SymbolicValue>", "signature": "List<SymbolicValue> getValuesWithConstraints(final Constraint constraint)", "full_signature": "public List<SymbolicValue> getValuesWithConstraints(final Constraint constraint)", "class_method_signature": "ProgramState.getValuesWithConstraints(final Constraint constraint)", "testcase": false, "constructor": false}, {"identifier": "storeExitValue", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void storeExitValue()", "full_signature": "public void storeExitValue()", "class_method_signature": "ProgramState.storeExitValue()", "testcase": false, "constructor": false}, {"identifier": "exitValue", "parameters": "()", "modifiers": "@CheckForNull public", "return": "SymbolicValue", "signature": "SymbolicValue exitValue()", "full_signature": "@CheckForNull public SymbolicValue exitValue()", "class_method_signature": "ProgramState.exitValue()", "testcase": false, "constructor": false}, {"identifier": "exitingOnRuntimeException", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean exitingOnRuntimeException()", "full_signature": "public boolean exitingOnRuntimeException()", "class_method_signature": "ProgramState.exitingOnRuntimeException()", "testcase": false, "constructor": false}, {"identifier": "learnedConstraints", "parameters": "(ProgramState parent)", "modifiers": "", "return": "Set<LearnedConstraint>", "signature": "Set<LearnedConstraint> learnedConstraints(ProgramState parent)", "full_signature": " Set<LearnedConstraint> learnedConstraints(ProgramState parent)", "class_method_signature": "ProgramState.learnedConstraints(ProgramState parent)", "testcase": false, "constructor": false}, {"identifier": "learnedAssociations", "parameters": "(ProgramState parent)", "modifiers": "", "return": "Set<LearnedAssociation>", "signature": "Set<LearnedAssociation> learnedAssociations(ProgramState parent)", "full_signature": " Set<LearnedAssociation> learnedAssociations(ProgramState parent)", "class_method_signature": "ProgramState.learnedAssociations(ProgramState parent)", "testcase": false, "constructor": false}], "file": "java-frontend/src/main/java/org/sonar/java/se/ProgramState.java"}, "focal_method": {"identifier": "stackValue", "parameters": "(SymbolicValue sv)", "modifiers": "public", "return": "ProgramState", "body": "public ProgramState stackValue(SymbolicValue sv) {\n    return new ProgramState(this, stack.push(new SymbolicValueSymbol(sv, null)));\n  }", "signature": "ProgramState stackValue(SymbolicValue sv)", "full_signature": "public ProgramState stackValue(SymbolicValue sv)", "class_method_signature": "ProgramState.stackValue(SymbolicValue sv)", "testcase": false, "constructor": false, "invocations": ["push"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}