{"test_class": {"identifier": "ExpressionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "java-frontend/src/test/java/org/sonar/java/model/ExpressionUtilsTest.java"}, "test_case": {"identifier": "test_skip_parenthesis", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void test_skip_parenthesis() throws Exception {\n    File file = new File(\"src/test/java/org/sonar/java/model/ExpressionUtilsTest.java\");\n    CompilationUnitTree tree = JParserTestUtils.parse(file);\n    MethodTree methodTree = (MethodTree) ((ClassTree) tree.types().get(0)).members().get(0);\n    ExpressionTree parenthesis = ((ReturnStatementTree) methodTree.block().body().get(0)).expression();\n\n    assertThat(parenthesis).is(Tree.Kind.PARENTHESIZED_EXPRESSION);\n    ExpressionTree skipped = ExpressionUtils.skipParentheses(parenthesis);\n    assertThat(skipped).is(Tree.Kind.CONDITIONAL_AND);\n    assertThat(ExpressionUtils.skipParentheses(((BinaryExpressionTree) skipped).leftOperand())).is(Tree.Kind.IDENTIFIER);\n  }", "signature": "void test_skip_parenthesis()", "full_signature": "@Test void test_skip_parenthesis()", "class_method_signature": "ExpressionUtilsTest.test_skip_parenthesis()", "testcase": true, "constructor": false, "invocations": ["parse", "get", "members", "get", "types", "expression", "get", "body", "block", "is", "assertThat", "skipParentheses", "is", "assertThat", "is", "assertThat", "skipParentheses", "leftOperand"]}, "focal_class": {"identifier": "ExpressionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ExpressionUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExpressionUtils()", "full_signature": "private  ExpressionUtils()", "class_method_signature": "ExpressionUtils.ExpressionUtils()", "testcase": false, "constructor": true}, {"identifier": "isSimpleAssignment", "parameters": "(AssignmentExpressionTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSimpleAssignment(AssignmentExpressionTree tree)", "full_signature": "public static boolean isSimpleAssignment(AssignmentExpressionTree tree)", "class_method_signature": "ExpressionUtils.isSimpleAssignment(AssignmentExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "isSelectOnThisOrSuper", "parameters": "(AssignmentExpressionTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSelectOnThisOrSuper(AssignmentExpressionTree tree)", "full_signature": "public static boolean isSelectOnThisOrSuper(AssignmentExpressionTree tree)", "class_method_signature": "ExpressionUtils.isSelectOnThisOrSuper(AssignmentExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "isSelectOnThisOrSuper", "parameters": "(MemberSelectExpressionTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSelectOnThisOrSuper(MemberSelectExpressionTree tree)", "full_signature": "public static boolean isSelectOnThisOrSuper(MemberSelectExpressionTree tree)", "class_method_signature": "ExpressionUtils.isSelectOnThisOrSuper(MemberSelectExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "extractIdentifier", "parameters": "(AssignmentExpressionTree tree)", "modifiers": "public static", "return": "IdentifierTree", "signature": "IdentifierTree extractIdentifier(AssignmentExpressionTree tree)", "full_signature": "public static IdentifierTree extractIdentifier(AssignmentExpressionTree tree)", "class_method_signature": "ExpressionUtils.extractIdentifier(AssignmentExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "extractIdentifier", "parameters": "(ExpressionTree tree)", "modifiers": "private static", "return": "Optional<IdentifierTree>", "signature": "Optional<IdentifierTree> extractIdentifier(ExpressionTree tree)", "full_signature": "private static Optional<IdentifierTree> extractIdentifier(ExpressionTree tree)", "class_method_signature": "ExpressionUtils.extractIdentifier(ExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "extractIdentifierSymbol", "parameters": "(ExpressionTree tree)", "modifiers": "public static", "return": "Optional<Symbol>", "signature": "Optional<Symbol> extractIdentifierSymbol(ExpressionTree tree)", "full_signature": "public static Optional<Symbol> extractIdentifierSymbol(ExpressionTree tree)", "class_method_signature": "ExpressionUtils.extractIdentifierSymbol(ExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "isInvocationOnVariable", "parameters": "(MethodInvocationTree mit, @Nullable Symbol variable, boolean defaultReturn)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInvocationOnVariable(MethodInvocationTree mit, @Nullable Symbol variable, boolean defaultReturn)", "full_signature": "public static boolean isInvocationOnVariable(MethodInvocationTree mit, @Nullable Symbol variable, boolean defaultReturn)", "class_method_signature": "ExpressionUtils.isInvocationOnVariable(MethodInvocationTree mit, @Nullable Symbol variable, boolean defaultReturn)", "testcase": false, "constructor": false}, {"identifier": "skipParentheses", "parameters": "(ExpressionTree tree)", "modifiers": "public static", "return": "ExpressionTree", "signature": "ExpressionTree skipParentheses(ExpressionTree tree)", "full_signature": "public static ExpressionTree skipParentheses(ExpressionTree tree)", "class_method_signature": "ExpressionUtils.skipParentheses(ExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "isNullLiteral", "parameters": "(ExpressionTree tree)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullLiteral(ExpressionTree tree)", "full_signature": "public static boolean isNullLiteral(ExpressionTree tree)", "class_method_signature": "ExpressionUtils.isNullLiteral(ExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "isSecuringByte", "parameters": "(ExpressionTree expression)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSecuringByte(ExpressionTree expression)", "full_signature": "public static boolean isSecuringByte(ExpressionTree expression)", "class_method_signature": "ExpressionUtils.isSecuringByte(ExpressionTree expression)", "testcase": false, "constructor": false}, {"identifier": "methodName", "parameters": "(MethodInvocationTree mit)", "modifiers": "public static", "return": "IdentifierTree", "signature": "IdentifierTree methodName(MethodInvocationTree mit)", "full_signature": "public static IdentifierTree methodName(MethodInvocationTree mit)", "class_method_signature": "ExpressionUtils.methodName(MethodInvocationTree mit)", "testcase": false, "constructor": false}, {"identifier": "getEnclosingMethod", "parameters": "(ExpressionTree expr)", "modifiers": "@CheckForNull public static", "return": "MethodTree", "signature": "MethodTree getEnclosingMethod(ExpressionTree expr)", "full_signature": "@CheckForNull public static MethodTree getEnclosingMethod(ExpressionTree expr)", "class_method_signature": "ExpressionUtils.getEnclosingMethod(ExpressionTree expr)", "testcase": false, "constructor": false}, {"identifier": "getAssignedSymbol", "parameters": "(ExpressionTree exp)", "modifiers": "public static", "return": "Optional<Symbol>", "signature": "Optional<Symbol> getAssignedSymbol(ExpressionTree exp)", "full_signature": "public static Optional<Symbol> getAssignedSymbol(ExpressionTree exp)", "class_method_signature": "ExpressionUtils.getAssignedSymbol(ExpressionTree exp)", "testcase": false, "constructor": false}, {"identifier": "isThis", "parameters": "(ExpressionTree expression)", "modifiers": "public static", "return": "boolean", "signature": "boolean isThis(ExpressionTree expression)", "full_signature": "public static boolean isThis(ExpressionTree expression)", "class_method_signature": "ExpressionUtils.isThis(ExpressionTree expression)", "testcase": false, "constructor": false}, {"identifier": "resolveAsConstant", "parameters": "(ExpressionTree tree)", "modifiers": "@CheckForNull public static", "return": "Object", "signature": "Object resolveAsConstant(ExpressionTree tree)", "full_signature": "@CheckForNull public static Object resolveAsConstant(ExpressionTree tree)", "class_method_signature": "ExpressionUtils.resolveAsConstant(ExpressionTree tree)", "testcase": false, "constructor": false}, {"identifier": "resolveIdentifier", "parameters": "(IdentifierTree tree)", "modifiers": "@CheckForNull private static", "return": "Object", "signature": "Object resolveIdentifier(IdentifierTree tree)", "full_signature": "@CheckForNull private static Object resolveIdentifier(IdentifierTree tree)", "class_method_signature": "ExpressionUtils.resolveIdentifier(IdentifierTree tree)", "testcase": false, "constructor": false}, {"identifier": "resolvePlus", "parameters": "(BinaryExpressionTree binaryExpression)", "modifiers": "@CheckForNull private static", "return": "Object", "signature": "Object resolvePlus(BinaryExpressionTree binaryExpression)", "full_signature": "@CheckForNull private static Object resolvePlus(BinaryExpressionTree binaryExpression)", "class_method_signature": "ExpressionUtils.resolvePlus(BinaryExpressionTree binaryExpression)", "testcase": false, "constructor": false}, {"identifier": "resolveOr", "parameters": "(BinaryExpressionTree binaryExpression)", "modifiers": "@CheckForNull private static", "return": "Object", "signature": "Object resolveOr(BinaryExpressionTree binaryExpression)", "full_signature": "@CheckForNull private static Object resolveOr(BinaryExpressionTree binaryExpression)", "class_method_signature": "ExpressionUtils.resolveOr(BinaryExpressionTree binaryExpression)", "testcase": false, "constructor": false}], "file": "java-frontend/src/main/java/org/sonar/java/model/ExpressionUtils.java"}, "focal_method": {"identifier": "skipParentheses", "parameters": "(ExpressionTree tree)", "modifiers": "public static", "return": "ExpressionTree", "body": "public static ExpressionTree skipParentheses(ExpressionTree tree) {\n    ExpressionTree result = tree;\n    while (result.is(Tree.Kind.PARENTHESIZED_EXPRESSION)) {\n      result = ((ParenthesizedTree) result).expression();\n    }\n    return result;\n  }", "signature": "ExpressionTree skipParentheses(ExpressionTree tree)", "full_signature": "public static ExpressionTree skipParentheses(ExpressionTree tree)", "class_method_signature": "ExpressionUtils.skipParentheses(ExpressionTree tree)", "testcase": false, "constructor": false, "invocations": ["is", "expression"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}