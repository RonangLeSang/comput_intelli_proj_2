{"test_class": {"identifier": "DefaultJavaFileScannerContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File JAVA_FILE = new File(\"src/test/files/api/JavaFileScannerContext.java\");", "modifier": "private static final", "type": "File", "declarator": "JAVA_FILE = new File(\"src/test/files/api/JavaFileScannerContext.java\")", "var_name": "JAVA_FILE"}, {"original_string": "private static final InputFile JAVA_INPUT_FILE = TestUtils.inputFile(JAVA_FILE);", "modifier": "private static final", "type": "InputFile", "declarator": "JAVA_INPUT_FILE = TestUtils.inputFile(JAVA_FILE)", "var_name": "JAVA_INPUT_FILE"}, {"original_string": "private static final File WORK_DIR = new File(\"target\");", "modifier": "private static final", "type": "File", "declarator": "WORK_DIR = new File(\"target\")", "var_name": "WORK_DIR"}, {"original_string": "private static final File BASE_DIR = new File(\"\");", "modifier": "private static final", "type": "File", "declarator": "BASE_DIR = new File(\"\")", "var_name": "BASE_DIR"}, {"original_string": "private static final InputComponent PROJECT_BASE_DIR = new DefaultInputDir(\"\", BASE_DIR.getAbsolutePath());", "modifier": "private static final", "type": "InputComponent", "declarator": "PROJECT_BASE_DIR = new DefaultInputDir(\"\", BASE_DIR.getAbsolutePath())", "var_name": "PROJECT_BASE_DIR"}, {"original_string": "private static final int COST = 42;", "modifier": "private static final", "type": "int", "declarator": "COST = 42", "var_name": "COST"}, {"original_string": "private static final JavaCheck CHECK = new JavaCheck() { };", "modifier": "private static final", "type": "JavaCheck", "declarator": "CHECK = new JavaCheck() { }", "var_name": "CHECK"}, {"original_string": "private static final EndOfAnalysisCheck END_OF_ANALYSIS_CHECK = () -> { };", "modifier": "private static final", "type": "EndOfAnalysisCheck", "declarator": "END_OF_ANALYSIS_CHECK = () -> { }", "var_name": "END_OF_ANALYSIS_CHECK"}, {"original_string": "private SonarComponents sonarComponents;", "modifier": "private", "type": "SonarComponents", "declarator": "sonarComponents", "var_name": "sonarComponents"}, {"original_string": "private CompilationUnitTree compilationUnitTree;", "modifier": "private", "type": "CompilationUnitTree", "declarator": "compilationUnitTree", "var_name": "compilationUnitTree"}, {"original_string": "private DefaultJavaFileScannerContext context;", "modifier": "private", "type": "DefaultJavaFileScannerContext", "declarator": "context", "var_name": "context"}, {"original_string": "private AnalyzerMessage reportedMessage;", "modifier": "private", "type": "AnalyzerMessage", "declarator": "reportedMessage", "var_name": "reportedMessage"}], "file": "java-frontend/src/test/java/org/sonar/java/model/DefaultJavaFileScannerContextTest.java"}, "test_case": {"identifier": "add_issue_on_file", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void add_issue_on_file() {\n    context.addIssueOnFile(CHECK, \"file\");\n\n    assertThat(reportedMessage.getMessage()).isEqualTo(\"file\");\n    assertThat(reportedMessage.getInputComponent()).isEqualTo(JAVA_INPUT_FILE);\n  }", "signature": "void add_issue_on_file()", "full_signature": "@Test void add_issue_on_file()", "class_method_signature": "DefaultJavaFileScannerContextTest.add_issue_on_file()", "testcase": true, "constructor": false, "invocations": ["addIssueOnFile", "isEqualTo", "assertThat", "getMessage", "isEqualTo", "assertThat", "getInputComponent"]}, "focal_class": {"identifier": "DefaultJavaFileScannerContext", "superclass": "", "interfaces": "implements JavaFileScannerContext, RegexScannerContext", "fields": [{"original_string": "private final JavaTree.CompilationUnitTreeImpl tree;", "modifier": "private final", "type": "JavaTree.CompilationUnitTreeImpl", "declarator": "tree", "var_name": "tree"}, {"original_string": "private final boolean semanticEnabled;", "modifier": "private final", "type": "boolean", "declarator": "semanticEnabled", "var_name": "semanticEnabled"}, {"original_string": "private final SonarComponents sonarComponents;", "modifier": "private final", "type": "SonarComponents", "declarator": "sonarComponents", "var_name": "sonarComponents"}, {"original_string": "private final ComplexityVisitor complexityVisitor;", "modifier": "private final", "type": "ComplexityVisitor", "declarator": "complexityVisitor", "var_name": "complexityVisitor"}, {"original_string": "private final RegexCache regexCache;", "modifier": "private final", "type": "RegexCache", "declarator": "regexCache", "var_name": "regexCache"}, {"original_string": "private final InputFile inputFile;", "modifier": "private final", "type": "InputFile", "declarator": "inputFile", "var_name": "inputFile"}, {"original_string": "private final JavaVersion javaVersion;", "modifier": "private final", "type": "JavaVersion", "declarator": "javaVersion", "var_name": "javaVersion"}, {"original_string": "private final boolean fileParsed;", "modifier": "private final", "type": "boolean", "declarator": "fileParsed", "var_name": "fileParsed"}], "methods": [{"identifier": "DefaultJavaFileScannerContext", "parameters": "(CompilationUnitTree tree, InputFile inputFile, Sema semanticModel,\n                                       @Nullable SonarComponents sonarComponents, JavaVersion javaVersion, boolean fileParsed)", "modifiers": "public", "return": "", "signature": " DefaultJavaFileScannerContext(CompilationUnitTree tree, InputFile inputFile, Sema semanticModel,\n                                       @Nullable SonarComponents sonarComponents, JavaVersion javaVersion, boolean fileParsed)", "full_signature": "public  DefaultJavaFileScannerContext(CompilationUnitTree tree, InputFile inputFile, Sema semanticModel,\n                                       @Nullable SonarComponents sonarComponents, JavaVersion javaVersion, boolean fileParsed)", "class_method_signature": "DefaultJavaFileScannerContext.DefaultJavaFileScannerContext(CompilationUnitTree tree, InputFile inputFile, Sema semanticModel,\n                                       @Nullable SonarComponents sonarComponents, JavaVersion javaVersion, boolean fileParsed)", "testcase": false, "constructor": true}, {"identifier": "getTree", "parameters": "()", "modifiers": "@Override public", "return": "CompilationUnitTree", "signature": "CompilationUnitTree getTree()", "full_signature": "@Override public CompilationUnitTree getTree()", "class_method_signature": "DefaultJavaFileScannerContext.getTree()", "testcase": false, "constructor": false}, {"identifier": "addIssueOnFile", "parameters": "(JavaCheck javaCheck, String message)", "modifiers": "@Override public", "return": "void", "signature": "void addIssueOnFile(JavaCheck javaCheck, String message)", "full_signature": "@Override public void addIssueOnFile(JavaCheck javaCheck, String message)", "class_method_signature": "DefaultJavaFileScannerContext.addIssueOnFile(JavaCheck javaCheck, String message)", "testcase": false, "constructor": false}, {"identifier": "addIssueOnProject", "parameters": "(JavaCheck check, String message)", "modifiers": "@Override public", "return": "void", "signature": "void addIssueOnProject(JavaCheck check, String message)", "full_signature": "@Override public void addIssueOnProject(JavaCheck check, String message)", "class_method_signature": "DefaultJavaFileScannerContext.addIssueOnProject(JavaCheck check, String message)", "testcase": false, "constructor": false}, {"identifier": "addIssue", "parameters": "(int line, JavaCheck javaCheck, String message)", "modifiers": "@Override public", "return": "void", "signature": "void addIssue(int line, JavaCheck javaCheck, String message)", "full_signature": "@Override public void addIssue(int line, JavaCheck javaCheck, String message)", "class_method_signature": "DefaultJavaFileScannerContext.addIssue(int line, JavaCheck javaCheck, String message)", "testcase": false, "constructor": false}, {"identifier": "addIssue", "parameters": "(int line, JavaCheck javaCheck, String message, @Nullable Integer cost)", "modifiers": "@Override public", "return": "void", "signature": "void addIssue(int line, JavaCheck javaCheck, String message, @Nullable Integer cost)", "full_signature": "@Override public void addIssue(int line, JavaCheck javaCheck, String message, @Nullable Integer cost)", "class_method_signature": "DefaultJavaFileScannerContext.addIssue(int line, JavaCheck javaCheck, String message, @Nullable Integer cost)", "testcase": false, "constructor": false}, {"identifier": "getSemanticModel", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Object", "signature": "Object getSemanticModel()", "full_signature": "@Override @Nullable public Object getSemanticModel()", "class_method_signature": "DefaultJavaFileScannerContext.getSemanticModel()", "testcase": false, "constructor": false}, {"identifier": "getJavaVersion", "parameters": "()", "modifiers": "@Override public", "return": "JavaVersion", "signature": "JavaVersion getJavaVersion()", "full_signature": "@Override public JavaVersion getJavaVersion()", "class_method_signature": "DefaultJavaFileScannerContext.getJavaVersion()", "testcase": false, "constructor": false}, {"identifier": "fileParsed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean fileParsed()", "full_signature": "@Override public boolean fileParsed()", "class_method_signature": "DefaultJavaFileScannerContext.fileParsed()", "testcase": false, "constructor": false}, {"identifier": "getFileKey", "parameters": "()", "modifiers": "@Deprecated @Override public", "return": "String", "signature": "String getFileKey()", "full_signature": "@Deprecated @Override public String getFileKey()", "class_method_signature": "DefaultJavaFileScannerContext.getFileKey()", "testcase": false, "constructor": false}, {"identifier": "reportIssue", "parameters": "(JavaCheck javaCheck, Tree tree, String message)", "modifiers": "@Override public", "return": "void", "signature": "void reportIssue(JavaCheck javaCheck, Tree tree, String message)", "full_signature": "@Override public void reportIssue(JavaCheck javaCheck, Tree tree, String message)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssue(JavaCheck javaCheck, Tree tree, String message)", "testcase": false, "constructor": false}, {"identifier": "reportIssue", "parameters": "(RegexCheck regexCheck, RegexSyntaxElement regexTree, String message, @Nullable Integer cost, List<RegexCheck.RegexIssueLocation> secondaries)", "modifiers": "@Override public", "return": "void", "signature": "void reportIssue(RegexCheck regexCheck, RegexSyntaxElement regexTree, String message, @Nullable Integer cost, List<RegexCheck.RegexIssueLocation> secondaries)", "full_signature": "@Override public void reportIssue(RegexCheck regexCheck, RegexSyntaxElement regexTree, String message, @Nullable Integer cost, List<RegexCheck.RegexIssueLocation> secondaries)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssue(RegexCheck regexCheck, RegexSyntaxElement regexTree, String message, @Nullable Integer cost, List<RegexCheck.RegexIssueLocation> secondaries)", "testcase": false, "constructor": false}, {"identifier": "reportIssue", "parameters": "(RegexCheck regexCheck, Tree javaSyntaxElement, String message, @Nullable Integer cost, List<RegexIssueLocation> secondaries)", "modifiers": "@Override public", "return": "void", "signature": "void reportIssue(RegexCheck regexCheck, Tree javaSyntaxElement, String message, @Nullable Integer cost, List<RegexIssueLocation> secondaries)", "full_signature": "@Override public void reportIssue(RegexCheck regexCheck, Tree javaSyntaxElement, String message, @Nullable Integer cost, List<RegexIssueLocation> secondaries)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssue(RegexCheck regexCheck, Tree javaSyntaxElement, String message, @Nullable Integer cost, List<RegexIssueLocation> secondaries)", "testcase": false, "constructor": false}, {"identifier": "reportIssue", "parameters": "(RegexCheck regexCheck, AnalyzerMessage.TextSpan mainLocation, String message, @Nullable Integer cost, List<RegexIssueLocation> secondaries)", "modifiers": "private", "return": "void", "signature": "void reportIssue(RegexCheck regexCheck, AnalyzerMessage.TextSpan mainLocation, String message, @Nullable Integer cost, List<RegexIssueLocation> secondaries)", "full_signature": "private void reportIssue(RegexCheck regexCheck, AnalyzerMessage.TextSpan mainLocation, String message, @Nullable Integer cost, List<RegexIssueLocation> secondaries)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssue(RegexCheck regexCheck, AnalyzerMessage.TextSpan mainLocation, String message, @Nullable Integer cost, List<RegexIssueLocation> secondaries)", "testcase": false, "constructor": false}, {"identifier": "regexForLiterals", "parameters": "(FlagSet initialFlags, LiteralTree... stringLiterals)", "modifiers": "@Override public", "return": "RegexParseResult", "signature": "RegexParseResult regexForLiterals(FlagSet initialFlags, LiteralTree... stringLiterals)", "full_signature": "@Override public RegexParseResult regexForLiterals(FlagSet initialFlags, LiteralTree... stringLiterals)", "class_method_signature": "DefaultJavaFileScannerContext.regexForLiterals(FlagSet initialFlags, LiteralTree... stringLiterals)", "testcase": false, "constructor": false}, {"identifier": "reportIssue", "parameters": "(JavaCheck javaCheck, Tree syntaxNode, String message, List<Location> secondary, @Nullable Integer cost)", "modifiers": "@Override public", "return": "void", "signature": "void reportIssue(JavaCheck javaCheck, Tree syntaxNode, String message, List<Location> secondary, @Nullable Integer cost)", "full_signature": "@Override public void reportIssue(JavaCheck javaCheck, Tree syntaxNode, String message, List<Location> secondary, @Nullable Integer cost)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssue(JavaCheck javaCheck, Tree syntaxNode, String message, List<Location> secondary, @Nullable Integer cost)", "testcase": false, "constructor": false}, {"identifier": "reportIssueWithFlow", "parameters": "(JavaCheck javaCheck, Tree syntaxNode, String message, Iterable<List<Location>> flows, @Nullable Integer cost)", "modifiers": "@Override public", "return": "void", "signature": "void reportIssueWithFlow(JavaCheck javaCheck, Tree syntaxNode, String message, Iterable<List<Location>> flows, @Nullable Integer cost)", "full_signature": "@Override public void reportIssueWithFlow(JavaCheck javaCheck, Tree syntaxNode, String message, Iterable<List<Location>> flows, @Nullable Integer cost)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssueWithFlow(JavaCheck javaCheck, Tree syntaxNode, String message, Iterable<List<Location>> flows, @Nullable Integer cost)", "testcase": false, "constructor": false}, {"identifier": "reportIssue", "parameters": "(JavaCheck javaCheck, Tree startTree, Tree endTree, String message)", "modifiers": "@Override public", "return": "void", "signature": "void reportIssue(JavaCheck javaCheck, Tree startTree, Tree endTree, String message)", "full_signature": "@Override public void reportIssue(JavaCheck javaCheck, Tree startTree, Tree endTree, String message)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssue(JavaCheck javaCheck, Tree startTree, Tree endTree, String message)", "testcase": false, "constructor": false}, {"identifier": "reportIssue", "parameters": "(JavaCheck javaCheck, Tree startTree, Tree endTree, String message, List<Location> secondary, @Nullable Integer cost)", "modifiers": "@Override public", "return": "void", "signature": "void reportIssue(JavaCheck javaCheck, Tree startTree, Tree endTree, String message, List<Location> secondary, @Nullable Integer cost)", "full_signature": "@Override public void reportIssue(JavaCheck javaCheck, Tree startTree, Tree endTree, String message, List<Location> secondary, @Nullable Integer cost)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssue(JavaCheck javaCheck, Tree startTree, Tree endTree, String message, List<Location> secondary, @Nullable Integer cost)", "testcase": false, "constructor": false}, {"identifier": "getFileLines", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getFileLines()", "full_signature": "@Override public List<String> getFileLines()", "class_method_signature": "DefaultJavaFileScannerContext.getFileLines()", "testcase": false, "constructor": false}, {"identifier": "getFileContent", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFileContent()", "full_signature": "@Override public String getFileContent()", "class_method_signature": "DefaultJavaFileScannerContext.getFileContent()", "testcase": false, "constructor": false}, {"identifier": "reportIssue", "parameters": "(AnalyzerMessage message)", "modifiers": "public", "return": "void", "signature": "void reportIssue(AnalyzerMessage message)", "full_signature": "public void reportIssue(AnalyzerMessage message)", "class_method_signature": "DefaultJavaFileScannerContext.reportIssue(AnalyzerMessage message)", "testcase": false, "constructor": false}, {"identifier": "createAnalyzerMessage", "parameters": "(JavaCheck javaCheck, Tree startTree, String message)", "modifiers": "public", "return": "AnalyzerMessage", "signature": "AnalyzerMessage createAnalyzerMessage(JavaCheck javaCheck, Tree startTree, String message)", "full_signature": "public AnalyzerMessage createAnalyzerMessage(JavaCheck javaCheck, Tree startTree, String message)", "class_method_signature": "DefaultJavaFileScannerContext.createAnalyzerMessage(JavaCheck javaCheck, Tree startTree, String message)", "testcase": false, "constructor": false}, {"identifier": "createAnalyzerMessage", "parameters": "(InputFile inputFile, JavaCheck javaCheck, Tree startTree, @Nullable Tree endTree, String message,\n    Iterable<List<Location>> flows, @Nullable Integer cost)", "modifiers": "protected static", "return": "AnalyzerMessage", "signature": "AnalyzerMessage createAnalyzerMessage(InputFile inputFile, JavaCheck javaCheck, Tree startTree, @Nullable Tree endTree, String message,\n    Iterable<List<Location>> flows, @Nullable Integer cost)", "full_signature": "protected static AnalyzerMessage createAnalyzerMessage(InputFile inputFile, JavaCheck javaCheck, Tree startTree, @Nullable Tree endTree, String message,\n    Iterable<List<Location>> flows, @Nullable Integer cost)", "class_method_signature": "DefaultJavaFileScannerContext.createAnalyzerMessage(InputFile inputFile, JavaCheck javaCheck, Tree startTree, @Nullable Tree endTree, String message,\n    Iterable<List<Location>> flows, @Nullable Integer cost)", "testcase": false, "constructor": false}, {"identifier": "completeAnalyzerMessageWithFlows", "parameters": "(\n    AnalyzerMessage analyzerMessage,\n    Iterable<List<L>> flows,\n    Function<L, AnalyzerMessage.TextSpan> flowItemLocationProdivder,\n    Function<L, String> flowItemMessageProvider)", "modifiers": "private static", "return": "void", "signature": "void completeAnalyzerMessageWithFlows(\n    AnalyzerMessage analyzerMessage,\n    Iterable<List<L>> flows,\n    Function<L, AnalyzerMessage.TextSpan> flowItemLocationProdivder,\n    Function<L, String> flowItemMessageProvider)", "full_signature": "private static void completeAnalyzerMessageWithFlows(\n    AnalyzerMessage analyzerMessage,\n    Iterable<List<L>> flows,\n    Function<L, AnalyzerMessage.TextSpan> flowItemLocationProdivder,\n    Function<L, String> flowItemMessageProvider)", "class_method_signature": "DefaultJavaFileScannerContext.completeAnalyzerMessageWithFlows(\n    AnalyzerMessage analyzerMessage,\n    Iterable<List<L>> flows,\n    Function<L, AnalyzerMessage.TextSpan> flowItemLocationProdivder,\n    Function<L, String> flowItemMessageProvider)", "testcase": false, "constructor": false}, {"identifier": "getInputFile", "parameters": "()", "modifiers": "@Override public", "return": "InputFile", "signature": "InputFile getInputFile()", "full_signature": "@Override public InputFile getInputFile()", "class_method_signature": "DefaultJavaFileScannerContext.getInputFile()", "testcase": false, "constructor": false}, {"identifier": "getProject", "parameters": "()", "modifiers": "@Override public", "return": "InputComponent", "signature": "InputComponent getProject()", "full_signature": "@Override public InputComponent getProject()", "class_method_signature": "DefaultJavaFileScannerContext.getProject()", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getWorkingDirectory()", "full_signature": "@Override public File getWorkingDirectory()", "class_method_signature": "DefaultJavaFileScannerContext.getWorkingDirectory()", "testcase": false, "constructor": false}, {"identifier": "getComplexityNodes", "parameters": "(Tree tree)", "modifiers": "@Override public", "return": "List<Tree>", "signature": "List<Tree> getComplexityNodes(Tree tree)", "full_signature": "@Override public List<Tree> getComplexityNodes(Tree tree)", "class_method_signature": "DefaultJavaFileScannerContext.getComplexityNodes(Tree tree)", "testcase": false, "constructor": false}, {"identifier": "throwIfEndOfAnalysisCheck", "parameters": "(JavaCheck javaCheck)", "modifiers": "private static", "return": "void", "signature": "void throwIfEndOfAnalysisCheck(JavaCheck javaCheck)", "full_signature": "private static void throwIfEndOfAnalysisCheck(JavaCheck javaCheck)", "class_method_signature": "DefaultJavaFileScannerContext.throwIfEndOfAnalysisCheck(JavaCheck javaCheck)", "testcase": false, "constructor": false}, {"identifier": "sourceMap", "parameters": "()", "modifiers": "@Override public", "return": "Optional<SourceMap>", "signature": "Optional<SourceMap> sourceMap()", "full_signature": "@Override public Optional<SourceMap> sourceMap()", "class_method_signature": "DefaultJavaFileScannerContext.sourceMap()", "testcase": false, "constructor": false}], "file": "java-frontend/src/main/java/org/sonar/java/model/DefaultJavaFileScannerContext.java"}, "focal_method": {"identifier": "addIssueOnFile", "parameters": "(JavaCheck javaCheck, String message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void addIssueOnFile(JavaCheck javaCheck, String message) {\n    addIssue(-1, javaCheck, message);\n  }", "signature": "void addIssueOnFile(JavaCheck javaCheck, String message)", "full_signature": "@Override public void addIssueOnFile(JavaCheck javaCheck, String message)", "class_method_signature": "DefaultJavaFileScannerContext.addIssueOnFile(JavaCheck javaCheck, String message)", "testcase": false, "constructor": false, "invocations": ["addIssue"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}