{"test_class": {"identifier": "JavaPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Version VERSION_7_9 = Version.create(7, 9);", "modifier": "private static final", "type": "Version", "declarator": "VERSION_7_9 = Version.create(7, 9)", "var_name": "VERSION_7_9"}, {"original_string": "private static final SonarRuntime SQ_79_RUNTIME = SonarRuntimeImpl.forSonarQube(VERSION_7_9, SonarQubeSide.SERVER, SonarEdition.COMMUNITY);", "modifier": "private static final", "type": "SonarRuntime", "declarator": "SQ_79_RUNTIME = SonarRuntimeImpl.forSonarQube(VERSION_7_9, SonarQubeSide.SERVER, SonarEdition.COMMUNITY)", "var_name": "SQ_79_RUNTIME"}, {"original_string": "private JavaPlugin javaPlugin = new JavaPlugin();", "modifier": "private", "type": "JavaPlugin", "declarator": "javaPlugin = new JavaPlugin()", "var_name": "javaPlugin"}], "file": "sonar-java-plugin/src/test/java/org/sonar/plugins/java/JavaPluginTest.java"}, "test_case": {"identifier": "sonarqube_commercial_extensions_79", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void sonarqube_commercial_extensions_79() {\n    SonarRuntime sqEnterprise = SonarRuntimeImpl.forSonarQube(VERSION_7_9, SonarQubeSide.SCANNER, SonarEdition.ENTERPRISE);\n    Plugin.Context context = new Plugin.Context(sqEnterprise);\n    javaPlugin.define(context);\n    assertThat(context.getExtensions())\n      .hasSize(32)\n      .doesNotContain(Jasper.class);\n  }", "signature": "void sonarqube_commercial_extensions_79()", "full_signature": "@Test void sonarqube_commercial_extensions_79()", "class_method_signature": "JavaPluginTest.sonarqube_commercial_extensions_79()", "testcase": true, "constructor": false, "invocations": ["forSonarQube", "define", "doesNotContain", "hasSize", "assertThat", "getExtensions"]}, "focal_class": {"identifier": "JavaPlugin", "superclass": "", "interfaces": "implements Plugin", "fields": [], "methods": [{"identifier": "define", "parameters": "(Context context)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void define(Context context)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void define(Context context)", "class_method_signature": "JavaPlugin.define(Context context)", "testcase": false, "constructor": false}, {"identifier": "supportJspTranspilation", "parameters": "(Context context)", "modifiers": "private static", "return": "boolean", "signature": "boolean supportJspTranspilation(Context context)", "full_signature": "private static boolean supportJspTranspilation(Context context)", "class_method_signature": "JavaPlugin.supportJspTranspilation(Context context)", "testcase": false, "constructor": false}], "file": "sonar-java-plugin/src/main/java/org/sonar/plugins/java/JavaPlugin.java"}, "focal_method": {"identifier": "define", "parameters": "(Context context)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  @Override\n  public void define(Context context) {\n    ImmutableList.Builder<Object> builder = ImmutableList.builder();\n    if (context.getRuntime().getProduct() == SonarProduct.SONARLINT) {\n      builder.add(JavaSonarLintClasspath.class);\n    } else {\n      builder.addAll(SurefireExtensions.getExtensions());\n      builder.add(DroppedPropertiesSensor.class);\n      builder.add(JavaSonarWayProfile.class);\n      builder.add(JavaClasspath.class);\n      builder.add(PropertyDefinition.builder(SonarComponents.FAIL_ON_EXCEPTION_KEY)\n        .defaultValue(\"false\")\n        .hidden()\n        .name(\"Fail on exceptions\")\n        .description(\"when set to true, if an exception is thrown by the analyzer the analysis will fail\")\n        .build());\n\n      ExternalReportExtensions.define(context);\n    }\n    if (supportJspTranspilation(context)) {\n      builder.add(Jasper.class);\n    }\n    builder.addAll(JavaClasspathProperties.getProperties());\n    builder.add(\n      JavaTestClasspath.class,\n      Java.class,\n      PropertyDefinition.builder(Java.FILE_SUFFIXES_KEY)\n        .defaultValue(Java.DEFAULT_FILE_SUFFIXES)\n        .category(JavaConstants.JAVA_CATEGORY)\n        .name(\"File suffixes\")\n        .multiValues(true)\n        .description(\"Comma-separated list of suffixes for files to analyze. To not filter, leave the list empty.\")\n        .subCategory(\"General\")\n        .onQualifiers(Qualifiers.PROJECT)\n        .build(),\n      JavaRulesDefinition.class,\n      SonarComponents.class,\n      DefaultJavaResourceLocator.class,\n      JavaSquidSensor.class,\n      PostAnalysisIssueFilter.class,\n      XmlFileSensor.class\n      );\n\n    builder.add(AnalysisWarningsWrapper.class);\n\n    context.addExtensions(builder.build());\n  }", "signature": "void define(Context context)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void define(Context context)", "class_method_signature": "JavaPlugin.define(Context context)", "testcase": false, "constructor": false, "invocations": ["builder", "getProduct", "getRuntime", "add", "addAll", "getExtensions", "add", "add", "add", "add", "build", "description", "name", "hidden", "defaultValue", "builder", "define", "supportJspTranspilation", "add", "addAll", "getProperties", "add", "build", "onQualifiers", "subCategory", "description", "multiValues", "name", "category", "defaultValue", "builder", "add", "addExtensions", "build"]}, "repository": {"repo_id": 5674787, "url": "https://github.com/SonarSource/sonar-java", "stars": 597, "created": "9/4/2012 3:53:13 PM +00:00", "updates": "2020-01-27T13:20:27+00:00", "fork": "False", "license": "licensed"}}