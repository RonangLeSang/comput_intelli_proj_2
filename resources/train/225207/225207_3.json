{"test_class": {"identifier": "NMRDestinationTest", "superclass": "extends AbstractJBITest", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = LogUtils.getLogger(NMRDestinationTest.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LogUtils.getLogger(NMRDestinationTest.class)", "var_name": "LOG"}], "file": "cxf/cxf-transport-nmr/src/test/java/org/apache/servicemix/cxf/transport/nmr/NMRDestinationTest.java"}, "test_case": {"identifier": "testNMRDestination", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNMRDestination() throws Exception {\n        EndpointInfo ei = new EndpointInfo();\n        ei.setAddress(\"nmr:dummy\");\n        ei.setName(new QName(\"http://test\", \"endpoint\"));\n        ServiceInfo si = new ServiceInfo();\n        si.setName(new QName(\"http://test\", \"service\"));\n        InterfaceInfo interInfo = new InterfaceInfo(si, new QName(\"http://test\", \"interface\"));\n        si.setInterface(interInfo);\n        ei.setService(si);\n        org.apache.servicemix.nmr.api.NMR nmr = control.createMock(org.apache.servicemix.nmr.api.NMR.class);\n        nmrTransportFactory.setNmr(nmr);\n        NMRDestination destination = (NMRDestination) nmrTransportFactory.getDestination(ei);\n        assertNotNull(destination);\n        String destName = \"dummy\" + ei.getService().getName().toString()\n        + ei.getInterface().getName().toString();\n        try {\n            nmrTransportFactory.putDestination(destName, destination);\n            fail();\n        } catch (Exception e) {\n            //should catch exception here since try put duplicated destination  \n        }\n        assertEquals(destination, nmrTransportFactory.getDestination(destName));\n        nmrTransportFactory.removeDestination(destName);\n        nmrTransportFactory.putDestination(destName, destination);\n        \n        org.apache.servicemix.nmr.api.Exchange xchg = control.createMock(org.apache.servicemix.nmr.api.Exchange.class);\n        \n        org.apache.servicemix.nmr.api.Message inMsg = control.createMock(org.apache.servicemix.nmr.api.Message.class);\n        EasyMock.expect(xchg.getStatus()).andReturn(Status.Active);\n        EasyMock.expect(xchg.getIn()).andReturn(inMsg);\n        EasyMock.expect(inMsg.getAttachments()).andReturn(new HashMap<String, Object>());\n        Map<String, Object> nmrHeaders = new HashMap<String, Object>();\n        nmrHeaders.put(\"hello\", \"world\");\n        EasyMock.expect(inMsg.getHeaders()).andReturn(nmrHeaders);\n        Source source = new StreamSource(new ByteArrayInputStream(\n                            \"<message>TestHelloWorld</message>\".getBytes()));\n        EasyMock.expect(inMsg.getBody(Source.class)).andReturn(source);\n        EndpointRegistry endpoints = control.createMock(EndpointRegistry.class);\n        EasyMock.expect(nmr.getEndpointRegistry()).andReturn(endpoints);\n        EasyMock.expect(nmrTransportFactory.getNmr().getEndpointRegistry()).andReturn(endpoints);\n        control.replay();\n        observer = new MessageObserver() {\n            public void onMessage(Message m) {                    \n                inMessage = m;\n            }\n        };\n        destination.setMessageObserver(observer);\n        destination.process(xchg);\n        assertNotNull(inMessage);\n        @SuppressWarnings(\"unchecked\")\n\t\tMap<String, List<String>> protocolHeaders = (Map<String, List<String>>)inMessage.get(Message.PROTOCOL_HEADERS);\n        assertEquals(\"We should get a right protocol headers\", \"world\", protocolHeaders.get(\"hello\").get(0));\n    }", "signature": "void testNMRDestination()", "full_signature": "@Test public void testNMRDestination()", "class_method_signature": "NMRDestinationTest.testNMRDestination()", "testcase": true, "constructor": false, "invocations": ["setAddress", "setName", "setName", "setInterface", "setService", "createMock", "setNmr", "getDestination", "assertNotNull", "toString", "getName", "getService", "toString", "getName", "getInterface", "putDestination", "fail", "assertEquals", "getDestination", "removeDestination", "putDestination", "createMock", "createMock", "andReturn", "expect", "getStatus", "andReturn", "expect", "getIn", "andReturn", "expect", "getAttachments", "put", "andReturn", "expect", "getHeaders", "getBytes", "andReturn", "expect", "getBody", "createMock", "andReturn", "expect", "getEndpointRegistry", "andReturn", "expect", "getEndpointRegistry", "getNmr", "replay", "setMessageObserver", "process", "assertNotNull", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "NMRDestination", "superclass": "extends AbstractDestination", "interfaces": "implements Endpoint", "fields": [{"original_string": "private static final Logger LOG = LogUtils.getL7dLogger(NMRDestination.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtils.getL7dLogger(NMRDestination.class)", "var_name": "LOG"}, {"original_string": "private NMR nmr;", "modifier": "private", "type": "NMR", "declarator": "nmr", "var_name": "nmr"}, {"original_string": "private Channel channel;", "modifier": "private", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private Map<String, Object> properties;", "modifier": "private", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "NMRDestination", "parameters": "(EndpointInfo info, NMR nmr)", "modifiers": "public", "return": "", "signature": " NMRDestination(EndpointInfo info, NMR nmr)", "full_signature": "public  NMRDestination(EndpointInfo info, NMR nmr)", "class_method_signature": "NMRDestination.NMRDestination(EndpointInfo info, NMR nmr)", "testcase": false, "constructor": true}, {"identifier": "setChannel", "parameters": "(Channel dc)", "modifiers": "public", "return": "void", "signature": "void setChannel(Channel dc)", "full_signature": "public void setChannel(Channel dc)", "class_method_signature": "NMRDestination.setChannel(Channel dc)", "testcase": false, "constructor": false}, {"identifier": "getChannel", "parameters": "()", "modifiers": "public", "return": "Channel", "signature": "Channel getChannel()", "full_signature": "public Channel getChannel()", "class_method_signature": "NMRDestination.getChannel()", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "protected Logger getLogger()", "class_method_signature": "NMRDestination.getLogger()", "testcase": false, "constructor": false}, {"identifier": "getInbuiltBackChannel", "parameters": "(Message inMessage)", "modifiers": "protected", "return": "Conduit", "signature": "Conduit getInbuiltBackChannel(Message inMessage)", "full_signature": "protected Conduit getInbuiltBackChannel(Message inMessage)", "class_method_signature": "NMRDestination.getInbuiltBackChannel(Message inMessage)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "NMRDestination.shutdown()", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deactivate()", "full_signature": "public void deactivate()", "class_method_signature": "NMRDestination.deactivate()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void activate()", "full_signature": "public void activate()", "class_method_signature": "NMRDestination.activate()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Exchange exchange)", "modifiers": "public", "return": "void", "signature": "void process(Exchange exchange)", "full_signature": "public void process(Exchange exchange)", "class_method_signature": "NMRDestination.process(Exchange exchange)", "testcase": false, "constructor": false}], "file": "cxf/cxf-transport-nmr/src/main/java/org/apache/servicemix/cxf/transport/nmr/NMRDestination.java"}, "focal_method": {"identifier": "NMRDestination", "parameters": "(EndpointInfo info, NMR nmr)", "modifiers": "public", "return": "", "body": "public NMRDestination(EndpointInfo info, NMR nmr) {\n        super(getTargetReference(info, null), info);\n        this.nmr = nmr;\n        this.properties = new HashMap<String, Object>();\n        String address = info.getAddress();\n        if (address != null && address.indexOf(Endpoint.RUN_AS_SUBJECT) >= 0) {\n            String asSubject = address.substring(address.indexOf(Endpoint.RUN_AS_SUBJECT)\n                                                 + Endpoint.RUN_AS_SUBJECT.length() + 1);\n            this.properties.put(Endpoint.RUN_AS_SUBJECT, asSubject);\n        }\n        if (address != null && address.startsWith(\"nmr:\")) {\n            if (address.indexOf(\"?\") > 0) {\n                this.properties.put(Endpoint.NAME, address.substring(4, address.indexOf(\"?\")));\n            } else {\n                this.properties.put(Endpoint.NAME, address.substring(4));\n            }\n        } else {\n            this.properties.put(Endpoint.NAME, info.getName().toString());\n        }\n\n        this.properties.put(Endpoint.SERVICE_NAME, info.getService().getName().toString());\n        this.properties.put(Endpoint.INTERFACE_NAME, info.getInterface().getName().toString());\n\n        if (address.indexOf(\"?\") > 0) {\n            String[] props = address.substring(address.indexOf(\"?\") + 1).split(\"&\");\n            for (String prop : props) {\n                if (prop.indexOf(\"=\") > 0) {\n                    String key = prop.substring(0, prop.indexOf(\"=\"));\n                    String val = prop.substring(prop.indexOf(\"=\") + 1);\n                    if (key.equals(\"synchronous\")) {\n                        key = Endpoint.CHANNEL_SYNC_DELIVERY;\n                    }\n                    this.properties.put(key, val);\n                }\n            }\n        }\n    }", "signature": " NMRDestination(EndpointInfo info, NMR nmr)", "full_signature": "public  NMRDestination(EndpointInfo info, NMR nmr)", "class_method_signature": "NMRDestination.NMRDestination(EndpointInfo info, NMR nmr)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 225207, "url": "https://github.com/apache/servicemix4-features", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 14, "size": 3434, "license": "licensed"}}