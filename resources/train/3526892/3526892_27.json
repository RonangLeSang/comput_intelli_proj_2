{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/datascience/utils/UtilsTest.java"}, "test_case": {"identifier": "testWriteFile", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n\tpublic final void testWriteFile() {\n\t\tString property = \"java.io.tmpdir\";\n\t\tString fname = new String(\"dfgdfsgdfshfr.txt\");\n\t\tString fullpath = System.getProperty(property)+File.separatorChar+fname;\n\t\tString in = \"something1\\nsecond line\\n\\t3rd line\\n\\nlast line.\";\n\t\tSystem.out.println(\"In=[\"+in+\"]\");\n\t\tUtils.writeFile(in, fullpath);\n\t\tFile fToReadFromAndDeleteAfterwards = new File(fullpath);\n\t\tif (fToReadFromAndDeleteAfterwards.exists()) {\n\t\t\ttry {\n\t\t\t\tBufferedReader dataInput = new BufferedReader(new FileReader(\n\t\t\t\t\t\t\tfToReadFromAndDeleteAfterwards));\n\t\t\t\ttry {\n\t\t\t\t\tchar[] outCharBuf = new char[1000];\n\t\t\t\t\tint len = dataInput.read(outCharBuf);\n\t\t\t\t\tString out = new String(outCharBuf,0,len);\n\t\t\t\t\tSystem.out.println(\"Out=[\"+out+\"]\");\n\t\t\t\t\tboolean isTheSame =  in.equals(out);\n\t\t\t\t\tfToReadFromAndDeleteAfterwards.delete();\n\t\t\t\t\tassertTrue(isTheSame);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\tfail(\"file not found, \"+e.getMessage());\n\t\t\t}\n\t\t} else fail(\"file does not exist\");\n\t}", "signature": "void testWriteFile()", "full_signature": "@Test public final void testWriteFile()", "class_method_signature": "UtilsTest.testWriteFile()", "testcase": true, "constructor": false, "invocations": ["getProperty", "println", "writeFile", "exists", "read", "println", "equals", "delete", "assertTrue", "printStackTrace", "fail", "getMessage", "fail"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "cleanLine", "parameters": "(String line)", "modifiers": "public static", "return": "String", "signature": "String cleanLine(String line)", "full_signature": "public static String cleanLine(String line)", "class_method_signature": "Utils.cleanLine(String line)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String FileName)", "modifiers": "public static", "return": "String", "signature": "String getFile(String FileName)", "full_signature": "public static String getFile(String FileName)", "class_method_signature": "Utils.getFile(String FileName)", "testcase": false, "constructor": false}, {"identifier": "writeFile", "parameters": "(String in, String filename)", "modifiers": "public static", "return": "void", "signature": "void writeFile(String in, String filename)", "full_signature": "public static void writeFile(String in, String filename)", "class_method_signature": "Utils.writeFile(String in, String filename)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double d, int decimalPlace)", "modifiers": "public static", "return": "Double", "signature": "Double round(double d, int decimalPlace)", "full_signature": "public static Double round(double d, int decimalPlace)", "class_method_signature": "Utils.round(double d, int decimalPlace)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(double[] p)", "modifiers": "public static", "return": "Double", "signature": "Double entropy(double[] p)", "full_signature": "public static Double entropy(double[] p)", "class_method_signature": "Utils.entropy(double[] p)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/datascience/utils/Utils.java"}, "focal_method": {"identifier": "writeFile", "parameters": "(String in, String filename)", "modifiers": "public static", "return": "void", "body": "public static void writeFile(String in, String filename) {\n\t\ttry {\n\t\t\tFile outfile = new File(filename);\n\n\t\t\tif (!(new File(outfile.getParent()).exists())) {\n\t\t\t\t(new File(outfile.getParent())).mkdirs();\n\t\t\t}\n\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(outfile));\n\t\t\tbw.write(in);\n\t\t\tbw.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}", "signature": "void writeFile(String in, String filename)", "full_signature": "public static void writeFile(String in, String filename)", "class_method_signature": "Utils.writeFile(String in, String filename)", "testcase": false, "constructor": false, "invocations": ["exists", "getParent", "mkdirs", "getParent", "write", "close", "printStackTrace"]}, "repository": {"repo_id": 3526892, "url": "https://github.com/ipeirotis/Troia-Server", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 5926, "license": "licensed"}}