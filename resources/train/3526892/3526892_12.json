{"test_class": {"identifier": "ProbabilityDistributionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/datascience/utils/ProbabilityDistributionsTest.java"}, "test_case": {"identifier": "testCalculateLabelCost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCalculateLabelCost() {\n\t\tString calcLabel = \"OK\";\n\t\tMap<String, Double> labelProbabilities = new HashMap<String, Double>();\n\t\tlabelProbabilities.put(\"OK\", 0.5);\n\t\tlabelProbabilities.put(\"LOK\", 0.0);\n\t\tlabelProbabilities.put(\"HOK\", 1.);\n\n\t\tCostMatrix<String> costMatrix = new CostMatrix<String>();\n\t\tcostMatrix.add(\"OK\", \"OK\", 1.);\n\t\tcostMatrix.add(\"LOK\", \"OK\", 10.);\n\t\tcostMatrix.add(\"HOK\", \"OK\", 20.);\n\n\t\tDouble result = ProbabilityDistributions.calculateLabelCost(calcLabel, labelProbabilities,\n\t\t\t\tcostMatrix);\n\t\tassertEquals(20.5, result, 0.0);\n\t}", "signature": "void testCalculateLabelCost()", "full_signature": "@Test public void testCalculateLabelCost()", "class_method_signature": "ProbabilityDistributionsTest.testCalculateLabelCost()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "add", "add", "add", "calculateLabelCost", "assertEquals"]}, "focal_class": {"identifier": "ProbabilityDistributions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculateLabelCost", "parameters": "(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix)", "modifiers": "static public", "return": "Double", "signature": "Double calculateLabelCost(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix)", "full_signature": "static public Double calculateLabelCost(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix)", "class_method_signature": "ProbabilityDistributions.calculateLabelCost(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix)", "testcase": false, "constructor": false}, {"identifier": "generateConstantDistribution", "parameters": "(\n\t\tCollection<T> objects, double value)", "modifiers": "static public", "return": "Map<T, Double>", "signature": "Map<T, Double> generateConstantDistribution(\n\t\tCollection<T> objects, double value)", "full_signature": "static public Map<T, Double> generateConstantDistribution(\n\t\tCollection<T> objects, double value)", "class_method_signature": "ProbabilityDistributions.generateConstantDistribution(\n\t\tCollection<T> objects, double value)", "testcase": false, "constructor": false}, {"identifier": "generateUniformDistribution", "parameters": "(\n\t\tCollection<T> objects)", "modifiers": "static public", "return": "Map<T, Double>", "signature": "Map<T, Double> generateUniformDistribution(\n\t\tCollection<T> objects)", "full_signature": "static public Map<T, Double> generateUniformDistribution(\n\t\tCollection<T> objects)", "class_method_signature": "ProbabilityDistributions.generateUniformDistribution(\n\t\tCollection<T> objects)", "testcase": false, "constructor": false}, {"identifier": "generateUniformDistribution", "parameters": "(\n\t\tCollection<T> objects, Map<T, Double> initialDistribution)", "modifiers": "static public", "return": "Map<T, Double>", "signature": "Map<T, Double> generateUniformDistribution(\n\t\tCollection<T> objects, Map<T, Double> initialDistribution)", "full_signature": "static public Map<T, Double> generateUniformDistribution(\n\t\tCollection<T> objects, Map<T, Double> initialDistribution)", "class_method_signature": "ProbabilityDistributions.generateUniformDistribution(\n\t\tCollection<T> objects, Map<T, Double> initialDistribution)", "testcase": false, "constructor": false}, {"identifier": "generateGoldDistribution", "parameters": "(Collection<String> categories, String correctCat)", "modifiers": "static public", "return": "Map<String, Double>", "signature": "Map<String, Double> generateGoldDistribution(Collection<String> categories, String correctCat)", "full_signature": "static public Map<String, Double> generateGoldDistribution(Collection<String> categories, String correctCat)", "class_method_signature": "ProbabilityDistributions.generateGoldDistribution(Collection<String> categories, String correctCat)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/datascience/utils/ProbabilityDistributions.java"}, "focal_method": {"identifier": "calculateLabelCost", "parameters": "(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix)", "modifiers": "static public", "return": "Double", "body": "static public Double calculateLabelCost(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix) {\n\t\tif (calcLabel == null) {\n\t\t\treturn Double.NaN;\n\t\t}\n\t\tdouble sum = 0.;\n\t\tfor (String label: costMatrix.getKnownValues()) {\n\t\t\tdouble cost = costMatrix.getCost(label, calcLabel);\n\t\t\tdouble prob = labelProbabilities.get(label);\n\t\t\tsum += cost * prob;\n\t\t}\n\t\treturn sum;\n\t}", "signature": "Double calculateLabelCost(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix)", "full_signature": "static public Double calculateLabelCost(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix)", "class_method_signature": "ProbabilityDistributions.calculateLabelCost(String calcLabel,\n\t\t\tMap<String, Double> labelProbabilities, CostMatrix<String> costMatrix)", "testcase": false, "constructor": false, "invocations": ["getKnownValues", "getCost", "get"]}, "repository": {"repo_id": 3526892, "url": "https://github.com/ipeirotis/Troia-Server", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 5926, "license": "licensed"}}