{"test_class": {"identifier": "DictionaryLoaderTest", "superclass": "extends Validator", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/util/DictionaryLoaderTest.java"}, "test_case": {"identifier": "testCreateVacantWordList", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testCreateVacantWordList() throws IOException {\n        String sampleWordSet = \"\";\n\n        Set<String> result = WORD_LIST.load(new ByteArrayInputStream(sampleWordSet.getBytes(StandardCharsets.UTF_8)));\n        assertEquals(0, result.size());\n    }", "signature": "void testCreateVacantWordList()", "full_signature": "@Test void testCreateVacantWordList()", "class_method_signature": "DictionaryLoaderTest.testCreateVacantWordList()", "testcase": true, "constructor": false, "invocations": ["load", "getBytes", "assertEquals", "size"]}, "focal_class": {"identifier": "DictionaryLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DictionaryLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DictionaryLoader.class)", "var_name": "LOG"}, {"original_string": "private final Supplier<E> supplier;", "modifier": "private final", "type": "Supplier<E>", "declarator": "supplier", "var_name": "supplier"}, {"original_string": "private final BiConsumer<E, String> loader;", "modifier": "private final", "type": "BiConsumer<E, String>", "declarator": "loader", "var_name": "loader"}, {"original_string": "private final Map<String, E> resourceCache = new HashMap<>();", "modifier": "private final", "type": "Map<String, E>", "declarator": "resourceCache = new HashMap<>()", "var_name": "resourceCache"}, {"original_string": "private final Map<String, E> fileCache = new HashMap<>();", "modifier": "private final", "type": "Map<String, E>", "declarator": "fileCache = new HashMap<>()", "var_name": "fileCache"}, {"original_string": "private final Map<String, Long> fileNameTimestampMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, Long>", "declarator": "fileNameTimestampMap = new HashMap<>()", "var_name": "fileNameTimestampMap"}], "methods": [{"identifier": "DictionaryLoader", "parameters": "(Supplier<E> supplier, BiConsumer<E, String> loader)", "modifiers": "public", "return": "", "signature": " DictionaryLoader(Supplier<E> supplier, BiConsumer<E, String> loader)", "full_signature": "public  DictionaryLoader(Supplier<E> supplier, BiConsumer<E, String> loader)", "class_method_signature": "DictionaryLoader.DictionaryLoader(Supplier<E> supplier, BiConsumer<E, String> loader)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(InputStream inputStream)", "modifiers": "", "return": "E", "signature": "E load(InputStream inputStream)", "full_signature": " E load(InputStream inputStream)", "class_method_signature": "DictionaryLoader.load(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "loadFromResource", "parameters": "(String resourcePath)", "modifiers": "private", "return": "E", "signature": "E loadFromResource(String resourcePath)", "full_signature": "private E loadFromResource(String resourcePath)", "class_method_signature": "DictionaryLoader.loadFromResource(String resourcePath)", "testcase": false, "constructor": false}, {"identifier": "loadFromFile", "parameters": "(File file)", "modifiers": "private", "return": "E", "signature": "E loadFromFile(File file)", "full_signature": "private E loadFromFile(File file)", "class_method_signature": "DictionaryLoader.loadFromFile(File file)", "testcase": false, "constructor": false}, {"identifier": "loadCachedFromResource", "parameters": "(String path, String dictionaryName)", "modifiers": "public", "return": "E", "signature": "E loadCachedFromResource(String path, String dictionaryName)", "full_signature": "public E loadCachedFromResource(String path, String dictionaryName)", "class_method_signature": "DictionaryLoader.loadCachedFromResource(String path, String dictionaryName)", "testcase": false, "constructor": false}, {"identifier": "loadCachedFromFile", "parameters": "(File file, String dictionaryName)", "modifiers": "public", "return": "E", "signature": "E loadCachedFromFile(File file, String dictionaryName)", "full_signature": "public E loadCachedFromFile(File file, String dictionaryName)", "class_method_signature": "DictionaryLoader.loadCachedFromFile(File file, String dictionaryName)", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/util/DictionaryLoader.java"}, "focal_method": {"identifier": "load", "parameters": "(InputStream inputStream)", "modifiers": "", "return": "E", "body": "E load(InputStream inputStream) throws IOException {\n        E e = supplier.get();\n        try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream,\n                StandardCharsets.UTF_8))) {\n            bufferedReader.lines().forEach(line -> loader.accept(e, line));\n        }\n        return e;\n    }", "signature": "E load(InputStream inputStream)", "full_signature": " E load(InputStream inputStream)", "class_method_signature": "DictionaryLoader.load(InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["get", "forEach", "lines", "accept"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}