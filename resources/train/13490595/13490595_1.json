{"test_class": {"identifier": "RedPenResourceTest", "superclass": "extends MockServletInvocationTest", "interfaces": "", "fields": [], "file": "redpen-server/src/test/java/cc/redpen/server/api/RedPenResourceTest.java"}, "test_case": {"identifier": "testResponseTyped", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testResponseTyped() throws Exception {\n        assertEquals(RedPenResource.MIME_TYPE_XML, RedPenResource.responseTyped(\"test\", \"xml\").getMetadata().getFirst(HttpHeaders.CONTENT_TYPE).toString());\n        assertEquals(RedPenResource.MIME_TYPE_JSON, RedPenResource.responseTyped(\"test\", \"json\").getMetadata().getFirst(HttpHeaders.CONTENT_TYPE).toString());\n        assertEquals(RedPenResource.MIME_TYPE_JSON, RedPenResource.responseTyped(\"test\", \"json2\").getMetadata().getFirst(HttpHeaders.CONTENT_TYPE).toString());\n        assertEquals(RedPenResource.MIME_TYPE_PLAINTEXT, RedPenResource.responseTyped(\"test\", \"plain\").getMetadata().getFirst(HttpHeaders.CONTENT_TYPE).toString());\n\n        try {\n            RedPenResource.responseTyped(\"test\", \"foobarbaz\");\n            fail();\n        } catch (final RedPenException success) {\n            assertTrue(true);\n        }\n    }", "signature": "void testResponseTyped()", "full_signature": "@Test void testResponseTyped()", "class_method_signature": "RedPenResourceTest.testResponseTyped()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "getFirst", "getMetadata", "responseTyped", "assertEquals", "toString", "getFirst", "getMetadata", "responseTyped", "assertEquals", "toString", "getFirst", "getMetadata", "responseTyped", "assertEquals", "toString", "getFirst", "getMetadata", "responseTyped", "responseTyped", "fail", "assertTrue"]}, "focal_class": {"identifier": "RedPenResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RedPenResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RedPenResource.class)", "var_name": "LOG"}, {"original_string": "private static final String DEFAULT_DOCUMENT_PARSER = \"PLAIN\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_DOCUMENT_PARSER = \"PLAIN\"", "var_name": "DEFAULT_DOCUMENT_PARSER"}, {"original_string": "private static final String DEFAULT_LANG = \"en\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LANG = \"en\"", "var_name": "DEFAULT_LANG"}, {"original_string": "private static final String DEFAULT_CONFIGURATION = \"en\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CONFIGURATION = \"en\"", "var_name": "DEFAULT_CONFIGURATION"}, {"original_string": "private static final String DEFAULT_FORMAT = \"json\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FORMAT = \"json\"", "var_name": "DEFAULT_FORMAT"}, {"original_string": "static final String MIME_TYPE_XML = \"application/xml; charset=utf-8\";", "modifier": "static final", "type": "String", "declarator": "MIME_TYPE_XML = \"application/xml; charset=utf-8\"", "var_name": "MIME_TYPE_XML"}, {"original_string": "static final String MIME_TYPE_JSON = \"application/json; charset=utf-8\";", "modifier": "static final", "type": "String", "declarator": "MIME_TYPE_JSON = \"application/json; charset=utf-8\"", "var_name": "MIME_TYPE_JSON"}, {"original_string": "static final String MIME_TYPE_PLAINTEXT = \"text/plain; charset=utf-8\";", "modifier": "static final", "type": "String", "declarator": "MIME_TYPE_PLAINTEXT = \"text/plain; charset=utf-8\"", "var_name": "MIME_TYPE_PLAINTEXT"}, {"original_string": "@Context\n    private ServletContext context;", "modifier": "@Context\n    private", "type": "ServletContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "detectLanguage", "parameters": "(@FormParam(\"document\") @DefaultValue(\"\") String document)", "modifiers": "@Path(\"/language\") @POST @Produces(MediaType.APPLICATION_JSON) @WinkAPIDescriber.Description(\"Detect language of document\") public", "return": "JSONObject", "signature": "JSONObject detectLanguage(@FormParam(\"document\") @DefaultValue(\"\") String document)", "full_signature": "@Path(\"/language\") @POST @Produces(MediaType.APPLICATION_JSON) @WinkAPIDescriber.Description(\"Detect language of document\") public JSONObject detectLanguage(@FormParam(\"document\") @DefaultValue(\"\") String document)", "class_method_signature": "RedPenResource.detectLanguage(@FormParam(\"document\") @DefaultValue(\"\") String document)", "testcase": false, "constructor": false}, {"identifier": "validateDocument", "parameters": "(@FormParam(\"document\") @DefaultValue(\"\") String document,\n                                     @FormParam(\"documentParser\") @DefaultValue(DEFAULT_DOCUMENT_PARSER) String documentParser,\n                                     @FormParam(\"lang\") @DefaultValue(DEFAULT_CONFIGURATION) String lang,\n                                     @FormParam(\"format\") @DefaultValue(DEFAULT_FORMAT) String format,\n                                     @FormParam(\"config\") String config)", "modifiers": "@Path(\"/validate\") @POST @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.TEXT_PLAIN}) @WinkAPIDescriber.Description(\"Validate a document and return any redpen errors\") public", "return": "Response", "signature": "Response validateDocument(@FormParam(\"document\") @DefaultValue(\"\") String document,\n                                     @FormParam(\"documentParser\") @DefaultValue(DEFAULT_DOCUMENT_PARSER) String documentParser,\n                                     @FormParam(\"lang\") @DefaultValue(DEFAULT_CONFIGURATION) String lang,\n                                     @FormParam(\"format\") @DefaultValue(DEFAULT_FORMAT) String format,\n                                     @FormParam(\"config\") String config)", "full_signature": "@Path(\"/validate\") @POST @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.TEXT_PLAIN}) @WinkAPIDescriber.Description(\"Validate a document and return any redpen errors\") public Response validateDocument(@FormParam(\"document\") @DefaultValue(\"\") String document,\n                                     @FormParam(\"documentParser\") @DefaultValue(DEFAULT_DOCUMENT_PARSER) String documentParser,\n                                     @FormParam(\"lang\") @DefaultValue(DEFAULT_CONFIGURATION) String lang,\n                                     @FormParam(\"format\") @DefaultValue(DEFAULT_FORMAT) String format,\n                                     @FormParam(\"config\") String config)", "class_method_signature": "RedPenResource.validateDocument(@FormParam(\"document\") @DefaultValue(\"\") String document,\n                                     @FormParam(\"documentParser\") @DefaultValue(DEFAULT_DOCUMENT_PARSER) String documentParser,\n                                     @FormParam(\"lang\") @DefaultValue(DEFAULT_CONFIGURATION) String lang,\n                                     @FormParam(\"format\") @DefaultValue(DEFAULT_FORMAT) String format,\n                                     @FormParam(\"config\") String config)", "testcase": false, "constructor": false}, {"identifier": "responseTyped", "parameters": "(final String formatted, final String format)", "modifiers": "static", "return": "Response", "signature": "Response responseTyped(final String formatted, final String format)", "full_signature": "static Response responseTyped(final String formatted, final String format)", "class_method_signature": "RedPenResource.responseTyped(final String formatted, final String format)", "testcase": false, "constructor": false}, {"identifier": "validateDocumentJSON", "parameters": "(JSONObject requestJSON)", "modifiers": "@Path(\"/validate/json\") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.TEXT_PLAIN}) @WinkAPIDescriber.Description(\"Process a redpen JSON validation request and returns any redpen errors\") public", "return": "Response", "signature": "Response validateDocumentJSON(JSONObject requestJSON)", "full_signature": "@Path(\"/validate/json\") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.TEXT_PLAIN}) @WinkAPIDescriber.Description(\"Process a redpen JSON validation request and returns any redpen errors\") public Response validateDocumentJSON(JSONObject requestJSON)", "class_method_signature": "RedPenResource.validateDocumentJSON(JSONObject requestJSON)", "testcase": false, "constructor": false}, {"identifier": "tokenize", "parameters": "(@FormParam(\"document\") @DefaultValue(\"\") String document,\n                               @FormParam(\"lang\") @DefaultValue(DEFAULT_CONFIGURATION) String lang)", "modifiers": "@Path(\"/tokenize\") @POST @Produces(MediaType.APPLICATION_JSON) @WinkAPIDescriber.Description(\"Tokenize a document\") public", "return": "JSONObject", "signature": "JSONObject tokenize(@FormParam(\"document\") @DefaultValue(\"\") String document,\n                               @FormParam(\"lang\") @DefaultValue(DEFAULT_CONFIGURATION) String lang)", "full_signature": "@Path(\"/tokenize\") @POST @Produces(MediaType.APPLICATION_JSON) @WinkAPIDescriber.Description(\"Tokenize a document\") public JSONObject tokenize(@FormParam(\"document\") @DefaultValue(\"\") String document,\n                               @FormParam(\"lang\") @DefaultValue(DEFAULT_CONFIGURATION) String lang)", "class_method_signature": "RedPenResource.tokenize(@FormParam(\"document\") @DefaultValue(\"\") String document,\n                               @FormParam(\"lang\") @DefaultValue(DEFAULT_CONFIGURATION) String lang)", "testcase": false, "constructor": false}], "file": "redpen-server/src/main/java/cc/redpen/server/api/RedPenResource.java"}, "focal_method": {"identifier": "responseTyped", "parameters": "(final String formatted, final String format)", "modifiers": "static", "return": "Response", "body": "static Response responseTyped(final String formatted, final String format) throws RedPenException {\n        if (format.startsWith(\"xml\")) {\n            return Response.ok(formatted, RedPenResource.MIME_TYPE_XML).build();\n        } else if (format.startsWith(\"json\")) {\n            return Response.ok(formatted, RedPenResource.MIME_TYPE_JSON).build();\n        } else if (format.startsWith(\"plain\")) {\n            return Response.ok(formatted, RedPenResource.MIME_TYPE_PLAINTEXT).build();\n        } else {\n            throw new RedPenException(\"MIME type unknown with format: \" + format);\n        }\n    }", "signature": "Response responseTyped(final String formatted, final String format)", "full_signature": "static Response responseTyped(final String formatted, final String format)", "class_method_signature": "RedPenResource.responseTyped(final String formatted, final String format)", "testcase": false, "constructor": false, "invocations": ["startsWith", "build", "ok", "startsWith", "build", "ok", "startsWith", "build", "ok"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}