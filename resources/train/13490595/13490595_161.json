{"test_class": {"identifier": "PropertiesParserTest", "superclass": "extends BaseParserTest", "interfaces": "", "fields": [{"original_string": "private PropertiesParser parser = new PropertiesParser();", "modifier": "private", "type": "PropertiesParser", "declarator": "parser = new PropertiesParser()", "var_name": "parser"}], "file": "redpen-core/src/test/java/cc/redpen/parser/PropertiesParserTest.java"}, "test_case": {"identifier": "keyEqualsValue", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void keyEqualsValue() throws Exception {\n    Document doc = parse(\"hello=world\");\n    Sentence sentence = doc.getLastSection().getParagraph(0).getSentence(0);\n    assertEquals(\"world\", sentence.getContent());\n  }", "signature": "void keyEqualsValue()", "full_signature": "@Test void keyEqualsValue()", "class_method_signature": "PropertiesParserTest.keyEqualsValue()", "testcase": true, "constructor": false, "invocations": ["parse", "getSentence", "getParagraph", "getLastSection", "assertEquals", "getContent"]}, "focal_class": {"identifier": "PropertiesParser", "superclass": "extends BaseDocumentParser", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer)", "modifiers": "@Override public", "return": "Document", "signature": "Document parse(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer)", "full_signature": "@Override public Document parse(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer)", "class_method_signature": "PropertiesParser.parse(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer)", "testcase": false, "constructor": false}, {"identifier": "addSentences", "parameters": "(Document.DocumentBuilder builder, SentenceExtractor sentenceExtractor, ValueWithOffsets value)", "modifiers": "private", "return": "void", "signature": "void addSentences(Document.DocumentBuilder builder, SentenceExtractor sentenceExtractor, ValueWithOffsets value)", "full_signature": "private void addSentences(Document.DocumentBuilder builder, SentenceExtractor sentenceExtractor, ValueWithOffsets value)", "class_method_signature": "PropertiesParser.addSentences(Document.DocumentBuilder builder, SentenceExtractor sentenceExtractor, ValueWithOffsets value)", "testcase": false, "constructor": false}, {"identifier": "section", "parameters": "(String line, AtomicInteger lineNum, int valueStart, PreprocessingReader reader)", "modifiers": "private", "return": "ValueWithOffsets", "signature": "ValueWithOffsets section(String line, AtomicInteger lineNum, int valueStart, PreprocessingReader reader)", "full_signature": "private ValueWithOffsets section(String line, AtomicInteger lineNum, int valueStart, PreprocessingReader reader)", "class_method_signature": "PropertiesParser.section(String line, AtomicInteger lineNum, int valueStart, PreprocessingReader reader)", "testcase": false, "constructor": false}, {"identifier": "valueOffset", "parameters": "(String line, int start)", "modifiers": "private", "return": "int", "signature": "int valueOffset(String line, int start)", "full_signature": "private int valueOffset(String line, int start)", "class_method_signature": "PropertiesParser.valueOffset(String line, int start)", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/parser/PropertiesParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer)", "modifiers": "@Override public", "return": "Document", "body": "@Override\n    public Document parse(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer) throws RedPenException {\n        Document.DocumentBuilder builder = Document.builder(tokenizer);\n        fileName.ifPresent(builder::setFileName);\n\n        try (PreprocessingReader reader = createReader(inputStream)) {\n            String line;\n            AtomicInteger lineNum = new AtomicInteger(0);\n            while ((line = reader.readLine()) != null) {\n                lineNum.incrementAndGet();\n                int keyStart = skipWhitespace(line, 0);\n                if (keyStart == line.length()) continue;\n                int valueStart = valueOffset(line, keyStart);\n                addSentences(builder, sentenceExtractor, section(line, lineNum, valueStart, reader));\n            }\n            builder.setPreprocessorRules(reader.getPreprocessorRules());\n        } catch (IOException e) {\n            throw new RedPenException(e);\n        }\n\n        return builder.build();\n    }", "signature": "Document parse(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer)", "full_signature": "@Override public Document parse(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer)", "class_method_signature": "PropertiesParser.parse(InputStream inputStream, Optional<String> fileName, SentenceExtractor sentenceExtractor, RedPenTokenizer tokenizer)", "testcase": false, "constructor": false, "invocations": ["builder", "ifPresent", "createReader", "readLine", "incrementAndGet", "skipWhitespace", "length", "valueOffset", "addSentences", "section", "setPreprocessorRules", "getPreprocessorRules", "build"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}