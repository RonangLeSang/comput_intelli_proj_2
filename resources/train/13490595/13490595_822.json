{"test_class": {"identifier": "WhiteSpaceTokenizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/tokenizer/WhiteSpaceTokenizerTest.java"}, "test_case": {"identifier": "testTokenizeSentenceWithNoSpaceBracket", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testTokenizeSentenceWithNoSpaceBracket() {\n        RedPenTokenizer tokenizer = new WhiteSpaceTokenizer();\n        List<TokenElement> results = tokenizer.tokenize(\"distributed(cluster) systems are good\");\n        assertEquals(7, results.size());\n        assertEquals(\"distributed\", results.get(0).getSurface());\n        assertEquals(0, results.get(0).getTags().size());\n        assertEquals(\"cluster\", results.get(2).getSurface());\n        assertEquals(0, results.get(1).getTags().size());\n        assertEquals(\"systems\", results.get(4).getSurface());\n        assertEquals(0, results.get(2).getTags().size());\n        assertEquals(\"are\", results.get(5).getSurface());\n        assertEquals(0, results.get(3).getTags().size());\n        assertEquals(\"good\", results.get(6).getSurface());\n        assertEquals(0, results.get(4).getTags().size());\n    }", "signature": "void testTokenizeSentenceWithNoSpaceBracket()", "full_signature": "@Test void testTokenizeSentenceWithNoSpaceBracket()", "class_method_signature": "WhiteSpaceTokenizerTest.testTokenizeSentenceWithNoSpaceBracket()", "testcase": true, "constructor": false, "invocations": ["tokenize", "assertEquals", "size", "assertEquals", "getSurface", "get", "assertEquals", "size", "getTags", "get", "assertEquals", "getSurface", "get", "assertEquals", "size", "getTags", "get", "assertEquals", "getSurface", "get", "assertEquals", "size", "getTags", "get", "assertEquals", "getSurface", "get", "assertEquals", "size", "getTags", "get", "assertEquals", "getSurface", "get", "assertEquals", "size", "getTags", "get"]}, "focal_class": {"identifier": "WhiteSpaceTokenizer", "superclass": "", "interfaces": "implements RedPenTokenizer", "fields": [{"original_string": "private static final Pattern[] BLACKLIST_TOKEN_PATTERNS = new Pattern[]{\n            Pattern.compile(\"^[-+#$\u20ac\u00a3\u00a5]?\\\\d+(\\\\.\\\\d+)?[%\u20ac\u00a5\u00a2\u20bd]?$\") // a number [+-]n[.n]\n    };", "modifier": "private static final", "type": "Pattern[]", "declarator": "BLACKLIST_TOKEN_PATTERNS = new Pattern[]{\n            Pattern.compile(\"^[-+#$\u20ac\u00a3\u00a5]?\\\\d+(\\\\.\\\\d+)?[%\u20ac\u00a5\u00a2\u20bd]?$\") // a number [+-]n[.n]\n    }", "var_name": "BLACKLIST_TOKEN_PATTERNS"}, {"original_string": "private static final String DELIMITERS = \" \\u00A0\\t\\n\\r?!,:;.()\\u2014\\\"\";", "modifier": "private static final", "type": "String", "declarator": "DELIMITERS = \" \\u00A0\\t\\n\\r?!,:;.()\\u2014\\\"\"", "var_name": "DELIMITERS"}, {"original_string": "private static final String WRAPPED_DELIMITERS = \"\\'\";", "modifier": "private static final", "type": "String", "declarator": "WRAPPED_DELIMITERS = \"\\'\"", "var_name": "WRAPPED_DELIMITERS"}], "methods": [{"identifier": "WhiteSpaceTokenizer", "parameters": "()", "modifiers": "public", "return": "", "signature": " WhiteSpaceTokenizer()", "full_signature": "public  WhiteSpaceTokenizer()", "class_method_signature": "WhiteSpaceTokenizer.WhiteSpaceTokenizer()", "testcase": false, "constructor": true}, {"identifier": "tokenize", "parameters": "(String content)", "modifiers": "@Override public", "return": "List<TokenElement>", "signature": "List<TokenElement> tokenize(String content)", "full_signature": "@Override public List<TokenElement> tokenize(String content)", "class_method_signature": "WhiteSpaceTokenizer.tokenize(String content)", "testcase": false, "constructor": false}, {"identifier": "isWrappedDelimiters", "parameters": "(String content, int i)", "modifiers": "private", "return": "boolean", "signature": "boolean isWrappedDelimiters(String content, int i)", "full_signature": "private boolean isWrappedDelimiters(String content, int i)", "class_method_signature": "WhiteSpaceTokenizer.isWrappedDelimiters(String content, int i)", "testcase": false, "constructor": false}, {"identifier": "isSuitableToken", "parameters": "(String surface)", "modifiers": "private", "return": "boolean", "signature": "boolean isSuitableToken(String surface)", "full_signature": "private boolean isSuitableToken(String surface)", "class_method_signature": "WhiteSpaceTokenizer.isSuitableToken(String surface)", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/tokenizer/WhiteSpaceTokenizer.java"}, "focal_method": {"identifier": "tokenize", "parameters": "(String content)", "modifiers": "@Override public", "return": "List<TokenElement>", "body": "@Override\n    public List<TokenElement> tokenize(String content) {\n        List<TokenElement> tokens = new ArrayList<>();\n\n        String surface = \"\";\n        int offset = 0;\n        List<String> tags = new ArrayList<>();\n\n        for (int i = 0, l = content.length(); i < l; i++) {\n            char ch = content.charAt(i);\n            if ((DELIMITERS.indexOf(ch) != -1) || isWrappedDelimiters(content, i)) {\n                if (isSuitableToken(surface)) {\n                    tokens.add(new TokenElement(surface, tags, offset));\n                }\n                if (!isWhitespace(ch) && ch != '\\u00A0') {\n                    tokens.add(new TokenElement(String.valueOf(ch), tags, i));\n                }\n                surface = \"\";\n                offset = -1;\n            } else {\n                if (offset < 0) {\n                    offset = i;\n                }\n                surface += ch;\n            }\n        }\n\n        if (isSuitableToken(surface)) {\n            tokens.add(new TokenElement(surface, tags, offset));\n        }\n\n        return tokens;\n    }", "signature": "List<TokenElement> tokenize(String content)", "full_signature": "@Override public List<TokenElement> tokenize(String content)", "class_method_signature": "WhiteSpaceTokenizer.tokenize(String content)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "indexOf", "isWrappedDelimiters", "isSuitableToken", "add", "isWhitespace", "add", "valueOf", "isSuitableToken", "add"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}