{"test_class": {"identifier": "QuotationValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/validator/sentence/QuotationValidatorTest.java"}, "test_case": {"identifier": "testAsciiDoubleQuotationMakrk", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testAsciiDoubleQuotationMakrk() throws RedPenException {\n        Configuration conf = Configuration.builder()\n                .addValidatorConfig(new ValidatorConfiguration(\"Quotation\").addProperty(\"use_ascii\", false))\n                .build();\n        Validator validator = ValidatorFactory.getInstance(conf.getValidatorConfigs().get(0), conf);\n        Sentence str = new Sentence(\"I said \\\"that is true\\\".\", 0);\n        List<ValidationError> errors = new ArrayList<>();\n        validator.setErrorList(errors);\n        validator.validate(str);\n        assertNotNull(errors);\n        assertEquals(0, errors.size());\n    }", "signature": "void testAsciiDoubleQuotationMakrk()", "full_signature": "@Test void testAsciiDoubleQuotationMakrk()", "class_method_signature": "QuotationValidatorTest.testAsciiDoubleQuotationMakrk()", "testcase": true, "constructor": false, "invocations": ["build", "addValidatorConfig", "builder", "addProperty", "getInstance", "get", "getValidatorConfigs", "setErrorList", "validate", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "QuotationValidator", "superclass": "extends Validator", "interfaces": "", "fields": [{"original_string": "private static final List<String> DEFAULT_EXCEPTION_SUFFIXES;", "modifier": "private static final", "type": "List<String>", "declarator": "DEFAULT_EXCEPTION_SUFFIXES", "var_name": "DEFAULT_EXCEPTION_SUFFIXES"}, {"original_string": "private List<String> exceptionSuffixes = DEFAULT_EXCEPTION_SUFFIXES;", "modifier": "private", "type": "List<String>", "declarator": "exceptionSuffixes = DEFAULT_EXCEPTION_SUFFIXES", "var_name": "exceptionSuffixes"}, {"original_string": "private Symbol leftSingleQuotationMark;", "modifier": "private", "type": "Symbol", "declarator": "leftSingleQuotationMark", "var_name": "leftSingleQuotationMark"}, {"original_string": "private Symbol rightSingleQuotationMark;", "modifier": "private", "type": "Symbol", "declarator": "rightSingleQuotationMark", "var_name": "rightSingleQuotationMark"}, {"original_string": "private Symbol leftDoubleQuotationMark;", "modifier": "private", "type": "Symbol", "declarator": "leftDoubleQuotationMark", "var_name": "leftDoubleQuotationMark"}, {"original_string": "private Symbol rightDoubleQuotationMark;", "modifier": "private", "type": "Symbol", "declarator": "rightDoubleQuotationMark", "var_name": "rightDoubleQuotationMark"}, {"original_string": "private char period;", "modifier": "private", "type": "char", "declarator": "period", "var_name": "period"}], "methods": [{"identifier": "QuotationValidator", "parameters": "()", "modifiers": "public", "return": "", "signature": " QuotationValidator()", "full_signature": "public  QuotationValidator()", "class_method_signature": "QuotationValidator.QuotationValidator()", "testcase": false, "constructor": true}, {"identifier": "getSupportedLanguages", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSupportedLanguages()", "full_signature": "@Override public List<String> getSupportedLanguages()", "class_method_signature": "QuotationValidator.getSupportedLanguages()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Sentence sentence)", "modifiers": "@Override public", "return": "void", "signature": "void validate(Sentence sentence)", "full_signature": "@Override public void validate(Sentence sentence)", "class_method_signature": "QuotationValidator.validate(Sentence sentence)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void init()", "full_signature": "@Override protected void init()", "class_method_signature": "QuotationValidator.init()", "testcase": false, "constructor": false}, {"identifier": "setUseAscii", "parameters": "(boolean useAscii)", "modifiers": "private", "return": "void", "signature": "void setUseAscii(boolean useAscii)", "full_signature": "private void setUseAscii(boolean useAscii)", "class_method_signature": "QuotationValidator.setUseAscii(boolean useAscii)", "testcase": false, "constructor": false}, {"identifier": "checkQuotation", "parameters": "(Sentence sentence,\n                                                 Symbol leftQuotation,\n                                                 Symbol rightQuotation)", "modifiers": "private", "return": "void", "signature": "void checkQuotation(Sentence sentence,\n                                                 Symbol leftQuotation,\n                                                 Symbol rightQuotation)", "full_signature": "private void checkQuotation(Sentence sentence,\n                                                 Symbol leftQuotation,\n                                                 Symbol rightQuotation)", "class_method_signature": "QuotationValidator.checkQuotation(Sentence sentence,\n                                                 Symbol leftQuotation,\n                                                 Symbol rightQuotation)", "testcase": false, "constructor": false}, {"identifier": "getQuotePosition", "parameters": "(String sentenceStr, char quote,\n                                 int startPosition)", "modifiers": "private", "return": "int", "signature": "int getQuotePosition(String sentenceStr, char quote,\n                                 int startPosition)", "full_signature": "private int getQuotePosition(String sentenceStr, char quote,\n                                 int startPosition)", "class_method_signature": "QuotationValidator.getQuotePosition(String sentenceStr, char quote,\n                                 int startPosition)", "testcase": false, "constructor": false}, {"identifier": "detectIsFound", "parameters": "(String sentenceStr, final int startPosition)", "modifiers": "private", "return": "boolean", "signature": "boolean detectIsFound(String sentenceStr, final int startPosition)", "full_signature": "private boolean detectIsFound(String sentenceStr, final int startPosition)", "class_method_signature": "QuotationValidator.detectIsFound(String sentenceStr, final int startPosition)", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/validator/sentence/QuotationValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(Sentence sentence)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(Sentence sentence) {\n        // validate single quotation\n        checkQuotation(sentence, leftSingleQuotationMark, rightSingleQuotationMark);\n\n        // validate double quotation\n        checkQuotation(sentence, leftDoubleQuotationMark, rightDoubleQuotationMark);\n    }", "signature": "void validate(Sentence sentence)", "full_signature": "@Override public void validate(Sentence sentence)", "class_method_signature": "QuotationValidator.validate(Sentence sentence)", "testcase": false, "constructor": false, "invocations": ["checkQuotation", "checkQuotation"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}