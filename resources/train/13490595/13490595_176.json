{"test_class": {"identifier": "ReVIEWParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/parser/review/ReVIEWParserTest.java"}, "test_case": {"identifier": "ParseBlockWithoutProperties", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void ParseBlockWithoutProperties() throws Exception {\n        String sample = \"//lead{\";\n        ReVIEWParser parser = new ReVIEWParser();\n        ReVIEWParser.ReVIEWBlock block = parser.parseBlock(new ReVIEWLine(sample, 0));\n        assertEquals(\"lead\", block.type);\n        assertEquals(0, block.properties.size());\n        assertTrue(block.isOpen);\n    }", "signature": "void ParseBlockWithoutProperties()", "full_signature": "@Test void ParseBlockWithoutProperties()", "class_method_signature": "ReVIEWParserTest.ParseBlockWithoutProperties()", "testcase": true, "constructor": false, "invocations": ["parseBlock", "assertEquals", "assertEquals", "size", "assertTrue"]}, "focal_class": {"identifier": "ReVIEWParser", "superclass": "extends LineParser", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ReVIEWParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ReVIEWParser.class)", "var_name": "LOG"}, {"original_string": "static Pattern DIGIT_PATTERN = Pattern.compile(\"^\\\\s+[0-9]+\\\\.\");", "modifier": "static", "type": "Pattern", "declarator": "DIGIT_PATTERN = Pattern.compile(\"^\\\\s+[0-9]+\\\\.\")", "var_name": "DIGIT_PATTERN"}], "methods": [{"identifier": "populateModel", "parameters": "(Model model, InputStream io)", "modifiers": "protected", "return": "void", "signature": "void populateModel(Model model, InputStream io)", "full_signature": "protected void populateModel(Model model, InputStream io)", "class_method_signature": "ReVIEWParser.populateModel(Model model, InputStream io)", "testcase": false, "constructor": false}, {"identifier": "processLine", "parameters": "(Line line, Model model, State state)", "modifiers": "private", "return": "void", "signature": "void processLine(Line line, Model model, State state)", "full_signature": "private void processLine(Line line, Model model, State state)", "class_method_signature": "ReVIEWParser.processLine(Line line, Model model, State state)", "testcase": false, "constructor": false}, {"identifier": "isListElement", "parameters": "(Line line, Line nextLine)", "modifiers": "private", "return": "boolean", "signature": "boolean isListElement(Line line, Line nextLine)", "full_signature": "private boolean isListElement(Line line, Line nextLine)", "class_method_signature": "ReVIEWParser.isListElement(Line line, Line nextLine)", "testcase": false, "constructor": false}, {"identifier": "isLabeledList", "parameters": "(Line line, Line nextLine)", "modifiers": "private", "return": "boolean", "signature": "boolean isLabeledList(Line line, Line nextLine)", "full_signature": "private boolean isLabeledList(Line line, Line nextLine)", "class_method_signature": "ReVIEWParser.isLabeledList(Line line, Line nextLine)", "testcase": false, "constructor": false}, {"identifier": "isDigitList", "parameters": "(Line line)", "modifiers": "private", "return": "boolean", "signature": "boolean isDigitList(Line line)", "full_signature": "private boolean isDigitList(Line line)", "class_method_signature": "ReVIEWParser.isDigitList(Line line)", "testcase": false, "constructor": false}, {"identifier": "isNormalList", "parameters": "(Line line)", "modifiers": "private", "return": "boolean", "signature": "boolean isNormalList(Line line)", "full_signature": "private boolean isNormalList(Line line)", "class_method_signature": "ReVIEWParser.isNormalList(Line line)", "testcase": false, "constructor": false}, {"identifier": "parseBlock", "parameters": "(Line line)", "modifiers": "", "return": "ReVIEWBlock", "signature": "ReVIEWBlock parseBlock(Line line)", "full_signature": " ReVIEWBlock parseBlock(Line line)", "class_method_signature": "ReVIEWParser.parseBlock(Line line)", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/parser/review/ReVIEWParser.java"}, "focal_method": {"identifier": "parseBlock", "parameters": "(Line line)", "modifiers": "", "return": "ReVIEWBlock", "body": "ReVIEWBlock parseBlock(Line line) {\n        ReVIEWBlock block = new ReVIEWBlock();\n        String text = line.getText();\n        // detect type\n        int openIdx = text.indexOf(\"[\");\n        if (openIdx > 0) {\n            block.type = text.substring(2, openIdx);\n            // detect properties\n            int closeIdx = text.indexOf(\"]\");\n            while(closeIdx > 0) {\n                block.properties.add(text.substring(openIdx+1, closeIdx));\n                openIdx = text.indexOf(\"[\", openIdx+1);\n                closeIdx = text.indexOf(\"]\", closeIdx+1);\n            }\n        } else {\n            int leftBracePosition = text.indexOf(\"{\");\n            block.type = text.substring(2, leftBracePosition > 0 ? leftBracePosition : text.length() - 1);\n        }\n\n        // detect open block\n        if (text.indexOf(\"{\") > 0) {\n            block.isOpen = true;\n        }\n        return block;\n    }", "signature": "ReVIEWBlock parseBlock(Line line)", "full_signature": " ReVIEWBlock parseBlock(Line line)", "class_method_signature": "ReVIEWParser.parseBlock(Line line)", "testcase": false, "constructor": false, "invocations": ["getText", "indexOf", "substring", "indexOf", "add", "substring", "indexOf", "indexOf", "indexOf", "substring", "length", "indexOf"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}