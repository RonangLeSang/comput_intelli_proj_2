{"test_class": {"identifier": "JapaneseAnchorExpressionValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/validator/sentence/JapaneseAnchorExpressionValidatorTest.java"}, "test_case": {"identifier": "testValid", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testValid() throws RedPenException {\n        Configuration config = Configuration.builder(\"ja\")\n                .addValidatorConfig(new ValidatorConfiguration(\"JapaneseAnchorExpression\"))\n                .build();\n\n        List<Document> documents = new ArrayList<>();documents.add(\n                Document.builder(new NeologdJapaneseTokenizer())\n                        .addSection(1)\n                        .addParagraph()\n                        .addSentence(new Sentence(\"1\u7ae0\u3092\u53c2\u7167\u3055\u308c\u305f\u3044\u3002\", 1))\n                        .build());\n\n        RedPen redPen = new RedPen(config);\n        List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));\n        assertEquals(0, errors.size());\n    }", "signature": "void testValid()", "full_signature": "@Test void testValid()", "class_method_signature": "JapaneseAnchorExpressionValidatorTest.testValid()", "testcase": true, "constructor": false, "invocations": ["build", "addValidatorConfig", "builder", "add", "build", "addSentence", "addParagraph", "addSection", "builder", "get", "validate", "get", "assertEquals", "size"]}, "focal_class": {"identifier": "JapaneseAnchorExpressionValidator", "superclass": "extends Validator", "interfaces": "", "fields": [{"original_string": "private final List<Pattern> patternsNumeric = Arrays.asList(\n        Pattern.compile(\"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\uff10-\uff19]+\u7ae0\"),\n        Pattern.compile(\"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\uff10-\uff19]+\u7bc0\")\n    );", "modifier": "private final", "type": "List<Pattern>", "declarator": "patternsNumeric = Arrays.asList(\n        Pattern.compile(\"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\uff10-\uff19]+\u7ae0\"),\n        Pattern.compile(\"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\uff10-\uff19]+\u7bc0\")\n    )", "var_name": "patternsNumeric"}, {"original_string": "private final List<Pattern> patternsNumericZenkaku = Arrays.asList(\n        Pattern.compile(\"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d0-9]+\u7ae0\"),\n        Pattern.compile(\"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d0-9]+\u7bc0\")\n    );", "modifier": "private final", "type": "List<Pattern>", "declarator": "patternsNumericZenkaku = Arrays.asList(\n        Pattern.compile(\"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d0-9]+\u7ae0\"),\n        Pattern.compile(\"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d0-9]+\u7bc0\")\n    )", "var_name": "patternsNumericZenkaku"}, {"original_string": "private final List<Pattern> patternsKansuji = Arrays.asList(\n        Pattern.compile(\"[0-9\uff10-\uff19]+\u7ae0\"),\n        Pattern.compile(\"[0-9\uff10-\uff19]+\u7bc0\")\n    );", "modifier": "private final", "type": "List<Pattern>", "declarator": "patternsKansuji = Arrays.asList(\n        Pattern.compile(\"[0-9\uff10-\uff19]+\u7ae0\"),\n        Pattern.compile(\"[0-9\uff10-\uff19]+\u7bc0\")\n    )", "var_name": "patternsKansuji"}], "methods": [{"identifier": "JapaneseAnchorExpressionValidator", "parameters": "()", "modifiers": "public", "return": "", "signature": " JapaneseAnchorExpressionValidator()", "full_signature": "public  JapaneseAnchorExpressionValidator()", "class_method_signature": "JapaneseAnchorExpressionValidator.JapaneseAnchorExpressionValidator()", "testcase": false, "constructor": true}, {"identifier": "getSupportedLanguages", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSupportedLanguages()", "full_signature": "@Override public List<String> getSupportedLanguages()", "class_method_signature": "JapaneseAnchorExpressionValidator.getSupportedLanguages()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Sentence sentence)", "modifiers": "@Override public", "return": "void", "signature": "void validate(Sentence sentence)", "full_signature": "@Override public void validate(Sentence sentence)", "class_method_signature": "JapaneseAnchorExpressionValidator.validate(Sentence sentence)", "testcase": false, "constructor": false}, {"identifier": "patternsOfCurrentMode", "parameters": "()", "modifiers": "private", "return": "List<Pattern>", "signature": "List<Pattern> patternsOfCurrentMode()", "full_signature": "private List<Pattern> patternsOfCurrentMode()", "class_method_signature": "JapaneseAnchorExpressionValidator.patternsOfCurrentMode()", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/validator/sentence/JapaneseAnchorExpressionValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(Sentence sentence)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(Sentence sentence) {\n        for (Pattern pat : patternsOfCurrentMode()) {\n            final Matcher m = pat.matcher(sentence.getContent());\n            while (m.find()) {\n                addLocalizedError(sentence, m.group(0));\n            }\n        }\n    }", "signature": "void validate(Sentence sentence)", "full_signature": "@Override public void validate(Sentence sentence)", "class_method_signature": "JapaneseAnchorExpressionValidator.validate(Sentence sentence)", "testcase": false, "constructor": false, "invocations": ["patternsOfCurrentMode", "matcher", "getContent", "find", "addLocalizedError", "group"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}