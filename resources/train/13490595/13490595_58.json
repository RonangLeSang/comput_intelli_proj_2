{"test_class": {"identifier": "EndOfSentenceDetectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/util/EndOfSentenceDetectorTest.java"}, "test_case": {"identifier": "testEndPositionInMultipleSentence", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testEndPositionInMultipleSentence() {\n        Pattern pattern = Pattern.compile(\"\\\\.\");\n        String str = \"this is a pen. that is not pen.\";\n        EndOfSentenceDetector detector = new EndOfSentenceDetector(pattern);\n        assertEquals(13, detector.getSentenceEndPosition(str, 0));\n    }", "signature": "void testEndPositionInMultipleSentence()", "full_signature": "@Test void testEndPositionInMultipleSentence()", "class_method_signature": "EndOfSentenceDetectorTest.testEndPositionInMultipleSentence()", "testcase": true, "constructor": false, "invocations": ["compile", "assertEquals", "getSentenceEndPosition"]}, "focal_class": {"identifier": "EndOfSentenceDetector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<String> whiteList;", "modifier": "private", "type": "List<String>", "declarator": "whiteList", "var_name": "whiteList"}, {"original_string": "private Pattern pattern;", "modifier": "private", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EndOfSentenceDetector.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EndOfSentenceDetector.class)", "var_name": "LOG"}], "methods": [{"identifier": "EndOfSentenceDetector", "parameters": "(Pattern pattern)", "modifiers": "public", "return": "", "signature": " EndOfSentenceDetector(Pattern pattern)", "full_signature": "public  EndOfSentenceDetector(Pattern pattern)", "class_method_signature": "EndOfSentenceDetector.EndOfSentenceDetector(Pattern pattern)", "testcase": false, "constructor": true}, {"identifier": "EndOfSentenceDetector", "parameters": "(Pattern pattern,\n                                 List<String> whiteList)", "modifiers": "public", "return": "", "signature": " EndOfSentenceDetector(Pattern pattern,\n                                 List<String> whiteList)", "full_signature": "public  EndOfSentenceDetector(Pattern pattern,\n                                 List<String> whiteList)", "class_method_signature": "EndOfSentenceDetector.EndOfSentenceDetector(Pattern pattern,\n                                 List<String> whiteList)", "testcase": false, "constructor": true}, {"identifier": "checkPosition", "parameters": "(int position, String str)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkPosition(int position, String str)", "full_signature": "private static boolean checkPosition(int position, String str)", "class_method_signature": "EndOfSentenceDetector.checkPosition(int position, String str)", "testcase": false, "constructor": false}, {"identifier": "getSentenceEndPosition", "parameters": "(String str, int startPosition)", "modifiers": "public", "return": "int", "signature": "int getSentenceEndPosition(String str, int startPosition)", "full_signature": "public int getSentenceEndPosition(String str, int startPosition)", "class_method_signature": "EndOfSentenceDetector.getSentenceEndPosition(String str, int startPosition)", "testcase": false, "constructor": false}, {"identifier": "getEndPosition", "parameters": "(String str,\n                               int offset, Set<Integer> whitePositions)", "modifiers": "private", "return": "int", "signature": "int getEndPosition(String str,\n                               int offset, Set<Integer> whitePositions)", "full_signature": "private int getEndPosition(String str,\n                               int offset, Set<Integer> whitePositions)", "class_method_signature": "EndOfSentenceDetector.getEndPosition(String str,\n                               int offset, Set<Integer> whitePositions)", "testcase": false, "constructor": false}, {"identifier": "getEndPositionSkippingWhiteList", "parameters": "(int offset,\n                                                    Matcher matcher, Set<Integer> whitePositions)", "modifiers": "private", "return": "boolean", "signature": "boolean getEndPositionSkippingWhiteList(int offset,\n                                                    Matcher matcher, Set<Integer> whitePositions)", "full_signature": "private boolean getEndPositionSkippingWhiteList(int offset,\n                                                    Matcher matcher, Set<Integer> whitePositions)", "class_method_signature": "EndOfSentenceDetector.getEndPositionSkippingWhiteList(int offset,\n                                                    Matcher matcher, Set<Integer> whitePositions)", "testcase": false, "constructor": false}, {"identifier": "extractNonEndOfSentencePositions", "parameters": "(\n            String inputString)", "modifiers": "private", "return": "Set<Integer>", "signature": "Set<Integer> extractNonEndOfSentencePositions(\n            String inputString)", "full_signature": "private Set<Integer> extractNonEndOfSentencePositions(\n            String inputString)", "class_method_signature": "EndOfSentenceDetector.extractNonEndOfSentencePositions(\n            String inputString)", "testcase": false, "constructor": false}, {"identifier": "handleSuccessivePeriods", "parameters": "(String str,\n                                        int position, Set<Integer> whitePositions)", "modifiers": "private", "return": "int", "signature": "int handleSuccessivePeriods(String str,\n                                        int position, Set<Integer> whitePositions)", "full_signature": "private int handleSuccessivePeriods(String str,\n                                        int position, Set<Integer> whitePositions)", "class_method_signature": "EndOfSentenceDetector.handleSuccessivePeriods(String str,\n                                        int position, Set<Integer> whitePositions)", "testcase": false, "constructor": false}, {"identifier": "isNonAlphabetEndOfSentenceWithPartialSentence", "parameters": "(String str, int position, int matchPosition)", "modifiers": "private", "return": "boolean", "signature": "boolean isNonAlphabetEndOfSentenceWithPartialSentence(String str, int position, int matchPosition)", "full_signature": "private boolean isNonAlphabetEndOfSentenceWithPartialSentence(String str, int position, int matchPosition)", "class_method_signature": "EndOfSentenceDetector.isNonAlphabetEndOfSentenceWithPartialSentence(String str, int position, int matchPosition)", "testcase": false, "constructor": false}, {"identifier": "isNonAlphabetWithoutSucessiveEnd", "parameters": "(String str, int nextPosition, int matchPosition)", "modifiers": "private", "return": "boolean", "signature": "boolean isNonAlphabetWithoutSucessiveEnd(String str, int nextPosition, int matchPosition)", "full_signature": "private boolean isNonAlphabetWithoutSucessiveEnd(String str, int nextPosition, int matchPosition)", "class_method_signature": "EndOfSentenceDetector.isNonAlphabetWithoutSucessiveEnd(String str, int nextPosition, int matchPosition)", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/util/EndOfSentenceDetector.java"}, "focal_method": {"identifier": "getSentenceEndPosition", "parameters": "(String str, int startPosition)", "modifiers": "public", "return": "int", "body": "public int getSentenceEndPosition(String str, int startPosition) {\n        Set<Integer> nonEndOfSentencePositions =\n                extractNonEndOfSentencePositions(str);\n        int result = str.length();\n        try {\n            result = getEndPosition(str, startPosition, nonEndOfSentencePositions);\n        } catch (StackOverflowError e){\n            LOG.error(\"Catch StackOverflowError parsing :\" + str + \" from position: \" + startPosition);\n        }\n        return result;\n    }", "signature": "int getSentenceEndPosition(String str, int startPosition)", "full_signature": "public int getSentenceEndPosition(String str, int startPosition)", "class_method_signature": "EndOfSentenceDetector.getSentenceEndPosition(String str, int startPosition)", "testcase": false, "constructor": false, "invocations": ["extractNonEndOfSentencePositions", "length", "getEndPosition", "error"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}