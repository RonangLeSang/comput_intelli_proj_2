{"test_class": {"identifier": "ConfigurationLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/config/ConfigurationLoaderTest.java"}, "test_case": {"identifier": "testNewLoadConfigurationWithoutSymbolTableConfig", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testNewLoadConfigurationWithoutSymbolTableConfig() throws RedPenException{\n        String sampleConfigString =\n                \"<redpen-conf>\" +\n                        \"<validators>\" +\n                        \"<validator name=\\\"SentenceLength\\\">\" +\n                        \"<property name=\\\"max_length\\\" value=\\\"200\\\" />\" +\n                        \"</validator>\" +\n                        \"<validator name=\\\"MaxParagraphNumber\\\" />\" +\n                        \"</validators>\" +\n                        \"</redpen-conf>\";\n\n        Configuration configuration = new ConfigurationLoader().loadFromString(sampleConfigString);\n\n        assertNotNull(configuration);\n        assertEquals(\"en\", configuration.getLang());\n        assertEquals(2, configuration.getValidatorConfigs().size());\n        assertEquals(\"SentenceLength\",\n                configuration.getValidatorConfigs().get(0).getConfigurationName());\n        assertEquals(\"MaxParagraphNumber\",\n                configuration.getValidatorConfigs().get(1).getConfigurationName());\n        assertNotNull(configuration.getSymbolTable());\n        assertEquals('!', configuration.getSymbolTable()\n                .getSymbol(EXCLAMATION_MARK).getValue());\n    }", "signature": "void testNewLoadConfigurationWithoutSymbolTableConfig()", "full_signature": "@Test void testNewLoadConfigurationWithoutSymbolTableConfig()", "class_method_signature": "ConfigurationLoaderTest.testNewLoadConfigurationWithoutSymbolTableConfig()", "testcase": true, "constructor": false, "invocations": ["loadFromString", "assertNotNull", "assertEquals", "getLang", "assertEquals", "size", "getValidatorConfigs", "assertEquals", "getConfigurationName", "get", "getValidatorConfigs", "assertEquals", "getConfigurationName", "get", "getValidatorConfigs", "assertNotNull", "getSymbolTable", "assertEquals", "getValue", "getSymbol", "getSymbolTable"]}, "focal_class": {"identifier": "ConfigurationLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationLoader.class)", "var_name": "LOG"}, {"original_string": "private boolean secure;", "modifier": "private", "type": "boolean", "declarator": "secure", "var_name": "secure"}], "methods": [{"identifier": "createSymbol", "parameters": "(Element element)", "modifiers": "private static", "return": "Symbol", "signature": "Symbol createSymbol(Element element)", "full_signature": "private static Symbol createSymbol(Element element)", "class_method_signature": "ConfigurationLoader.createSymbol(Element element)", "testcase": false, "constructor": false}, {"identifier": "toDocument", "parameters": "(InputStream input)", "modifiers": "private static", "return": "Document", "signature": "Document toDocument(InputStream input)", "full_signature": "private static Document toDocument(InputStream input)", "class_method_signature": "ConfigurationLoader.toDocument(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(File configFile)", "modifiers": "public", "return": "Configuration", "signature": "Configuration load(File configFile)", "full_signature": "public Configuration load(File configFile)", "class_method_signature": "ConfigurationLoader.load(File configFile)", "testcase": false, "constructor": false}, {"identifier": "loadFromResource", "parameters": "(String resourcePath)", "modifiers": "public", "return": "Configuration", "signature": "Configuration loadFromResource(String resourcePath)", "full_signature": "public Configuration loadFromResource(String resourcePath)", "class_method_signature": "ConfigurationLoader.loadFromResource(String resourcePath)", "testcase": false, "constructor": false}, {"identifier": "loadFromResource", "parameters": "(String resourcePath, File base)", "modifiers": "public", "return": "Configuration", "signature": "Configuration loadFromResource(String resourcePath, File base)", "full_signature": "public Configuration loadFromResource(String resourcePath, File base)", "class_method_signature": "ConfigurationLoader.loadFromResource(String resourcePath, File base)", "testcase": false, "constructor": false}, {"identifier": "loadFromString", "parameters": "(String configString)", "modifiers": "public", "return": "Configuration", "signature": "Configuration loadFromString(String configString)", "full_signature": "public Configuration loadFromString(String configString)", "class_method_signature": "ConfigurationLoader.loadFromString(String configString)", "testcase": false, "constructor": false}, {"identifier": "loadFromString", "parameters": "(String configString, File base)", "modifiers": "public", "return": "Configuration", "signature": "Configuration loadFromString(String configString, File base)", "full_signature": "public Configuration loadFromString(String configString, File base)", "class_method_signature": "ConfigurationLoader.loadFromString(String configString, File base)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(InputStream stream)", "modifiers": "public", "return": "Configuration", "signature": "Configuration load(InputStream stream)", "full_signature": "public Configuration load(InputStream stream)", "class_method_signature": "ConfigurationLoader.load(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(InputStream stream, File base)", "modifiers": "public", "return": "Configuration", "signature": "Configuration load(InputStream stream, File base)", "full_signature": "public Configuration load(InputStream stream, File base)", "class_method_signature": "ConfigurationLoader.load(InputStream stream, File base)", "testcase": false, "constructor": false}, {"identifier": "extractValidatorConfigurations", "parameters": "(ConfigurationBuilder configBuilder, NodeList validatorElementList)", "modifiers": "private", "return": "void", "signature": "void extractValidatorConfigurations(ConfigurationBuilder configBuilder, NodeList validatorElementList)", "full_signature": "private void extractValidatorConfigurations(ConfigurationBuilder configBuilder, NodeList validatorElementList)", "class_method_signature": "ConfigurationLoader.extractValidatorConfigurations(ConfigurationBuilder configBuilder, NodeList validatorElementList)", "testcase": false, "constructor": false}, {"identifier": "extractLevel", "parameters": "(ValidatorConfiguration currentConfiguration, Element element)", "modifiers": "private", "return": "void", "signature": "void extractLevel(ValidatorConfiguration currentConfiguration, Element element)", "full_signature": "private void extractLevel(ValidatorConfiguration currentConfiguration, Element element)", "class_method_signature": "ConfigurationLoader.extractLevel(ValidatorConfiguration currentConfiguration, Element element)", "testcase": false, "constructor": false}, {"identifier": "extractProperties", "parameters": "(ValidatorConfiguration currentConfiguration,\n                                   NodeList propertyElementList)", "modifiers": "private", "return": "void", "signature": "void extractProperties(ValidatorConfiguration currentConfiguration,\n                                   NodeList propertyElementList)", "full_signature": "private void extractProperties(ValidatorConfiguration currentConfiguration,\n                                   NodeList propertyElementList)", "class_method_signature": "ConfigurationLoader.extractProperties(ValidatorConfiguration currentConfiguration,\n                                   NodeList propertyElementList)", "testcase": false, "constructor": false}, {"identifier": "extractSymbolConfig", "parameters": "(ConfigurationBuilder configBuilder, NodeList symbolTableConfigElementList, String language)", "modifiers": "private", "return": "void", "signature": "void extractSymbolConfig(ConfigurationBuilder configBuilder, NodeList symbolTableConfigElementList, String language)", "full_signature": "private void extractSymbolConfig(ConfigurationBuilder configBuilder, NodeList symbolTableConfigElementList, String language)", "class_method_signature": "ConfigurationLoader.extractSymbolConfig(ConfigurationBuilder configBuilder, NodeList symbolTableConfigElementList, String language)", "testcase": false, "constructor": false}, {"identifier": "getSpecifiedNodeList", "parameters": "(Element rootElement, String elementName)", "modifiers": "private", "return": "NodeList", "signature": "NodeList getSpecifiedNodeList(Element rootElement, String elementName)", "full_signature": "private NodeList getSpecifiedNodeList(Element rootElement, String elementName)", "class_method_signature": "ConfigurationLoader.getSpecifiedNodeList(Element rootElement, String elementName)", "testcase": false, "constructor": false}, {"identifier": "getRootNode", "parameters": "(Document doc, String rootTag)", "modifiers": "private", "return": "Element", "signature": "Element getRootNode(Document doc, String rootTag)", "full_signature": "private Element getRootNode(Document doc, String rootTag)", "class_method_signature": "ConfigurationLoader.getRootNode(Document doc, String rootTag)", "testcase": false, "constructor": false}, {"identifier": "secure", "parameters": "()", "modifiers": "public", "return": "ConfigurationLoader", "signature": "ConfigurationLoader secure()", "full_signature": "public ConfigurationLoader secure()", "class_method_signature": "ConfigurationLoader.secure()", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/config/ConfigurationLoader.java"}, "focal_method": {"identifier": "loadFromString", "parameters": "(String configString)", "modifiers": "public", "return": "Configuration", "body": "public Configuration loadFromString(String configString) throws RedPenException {\n        return loadFromString(configString, null);\n    }", "signature": "Configuration loadFromString(String configString)", "full_signature": "public Configuration loadFromString(String configString)", "class_method_signature": "ConfigurationLoader.loadFromString(String configString)", "testcase": false, "constructor": false, "invocations": ["loadFromString"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}