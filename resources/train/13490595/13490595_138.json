{"test_class": {"identifier": "SentenceExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/parser/SentenceExtractorTest.java"}, "test_case": {"identifier": "testEndWithDoubleQuotationEnglishVersion", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testEndWithDoubleQuotationEnglishVersion() {\n        SentenceExtractor extractor = new SentenceExtractor(\n                Configuration.builder().build().getSymbolTable());\n        final String input = \"this is a \\\"pen\\\".\";\n        List<Pair<Integer, Integer>> outputPositions = new ArrayList<>();\n        int lastPosition = extractor.extract(input, outputPositions);\n        List<Sentence> outputSentences = createSentences(outputPositions, lastPosition, input);\n        assertEquals(1, outputSentences.size());\n        assertEquals(\"this is a \\\"pen\\\".\", outputSentences.get(0).getContent());\n        assertEquals(input.length(), lastPosition);\n    }", "signature": "void testEndWithDoubleQuotationEnglishVersion()", "full_signature": "@Test void testEndWithDoubleQuotationEnglishVersion()", "class_method_signature": "SentenceExtractorTest.testEndWithDoubleQuotationEnglishVersion()", "testcase": true, "constructor": false, "invocations": ["getSymbolTable", "build", "builder", "extract", "createSentences", "assertEquals", "size", "assertEquals", "getContent", "get", "assertEquals", "length"]}, "focal_class": {"identifier": "SentenceExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SentenceExtractor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SentenceExtractor.class)", "var_name": "LOG"}, {"original_string": "private Pattern fullStopPattern;", "modifier": "private", "type": "Pattern", "declarator": "fullStopPattern", "var_name": "fullStopPattern"}, {"original_string": "private char[] fullStopList;", "modifier": "private", "type": "char[]", "declarator": "fullStopList", "var_name": "fullStopList"}, {"original_string": "private char[] rightQuotationList;", "modifier": "private", "type": "char[]", "declarator": "rightQuotationList", "var_name": "rightQuotationList"}, {"original_string": "private static final List<String> WHITE_WORDS = generateUmList(\"Mr.\",\n            \"Mrs.\", \"Dr.\", \"genn.ai\", \"Co., Ltd.\", \"Miss.\", \"a.m.\",\n            \"U.S.A.\", \"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\",\n            \"May.\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sep.\", \"Oct.\",\n            \"Nov.\", \"Dec.\", \"Feb.\", \"B.C\", \"A.D.\");", "modifier": "private static final", "type": "List<String>", "declarator": "WHITE_WORDS = generateUmList(\"Mr.\",\n            \"Mrs.\", \"Dr.\", \"genn.ai\", \"Co., Ltd.\", \"Miss.\", \"a.m.\",\n            \"U.S.A.\", \"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\",\n            \"May.\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sep.\", \"Oct.\",\n            \"Nov.\", \"Dec.\", \"Feb.\", \"B.C\", \"A.D.\")", "var_name": "WHITE_WORDS"}, {"original_string": "private EndOfSentenceDetector endOfSentenceDetector;", "modifier": "private", "type": "EndOfSentenceDetector", "declarator": "endOfSentenceDetector", "var_name": "endOfSentenceDetector"}, {"original_string": "private SymbolTable symbolTable = null;", "modifier": "private", "type": "SymbolTable", "declarator": "symbolTable = null", "var_name": "symbolTable"}], "methods": [{"identifier": "SentenceExtractor", "parameters": "(char...fullStopList)", "modifiers": "", "return": "", "signature": " SentenceExtractor(char...fullStopList)", "full_signature": "  SentenceExtractor(char...fullStopList)", "class_method_signature": "SentenceExtractor.SentenceExtractor(char...fullStopList)", "testcase": false, "constructor": true}, {"identifier": "SentenceExtractor", "parameters": "(SymbolTable symbolTable)", "modifiers": "public", "return": "", "signature": " SentenceExtractor(SymbolTable symbolTable)", "full_signature": "public  SentenceExtractor(SymbolTable symbolTable)", "class_method_signature": "SentenceExtractor.SentenceExtractor(SymbolTable symbolTable)", "testcase": false, "constructor": true}, {"identifier": "SentenceExtractor", "parameters": "(char[] fullStopList, char[] rightQuotationList)", "modifiers": "", "return": "", "signature": " SentenceExtractor(char[] fullStopList, char[] rightQuotationList)", "full_signature": "  SentenceExtractor(char[] fullStopList, char[] rightQuotationList)", "class_method_signature": "SentenceExtractor.SentenceExtractor(char[] fullStopList, char[] rightQuotationList)", "testcase": false, "constructor": true}, {"identifier": "extractPeriods", "parameters": "(SymbolTable symbolTable)", "modifiers": "private static", "return": "char[]", "signature": "char[] extractPeriods(SymbolTable symbolTable)", "full_signature": "private static char[] extractPeriods(SymbolTable symbolTable)", "class_method_signature": "SentenceExtractor.extractPeriods(SymbolTable symbolTable)", "testcase": false, "constructor": false}, {"identifier": "extractRightQuotations", "parameters": "(SymbolTable symbolTable)", "modifiers": "private static", "return": "char[]", "signature": "char[] extractRightQuotations(SymbolTable symbolTable)", "full_signature": "private static char[] extractRightQuotations(SymbolTable symbolTable)", "class_method_signature": "SentenceExtractor.extractRightQuotations(SymbolTable symbolTable)", "testcase": false, "constructor": false}, {"identifier": "generateSimplePattern", "parameters": "(char[] endCharacters, StringBuilder patternString)", "modifiers": "private", "return": "void", "signature": "void generateSimplePattern(char[] endCharacters, StringBuilder patternString)", "full_signature": "private void generateSimplePattern(char[] endCharacters, StringBuilder patternString)", "class_method_signature": "SentenceExtractor.generateSimplePattern(char[] endCharacters, StringBuilder patternString)", "testcase": false, "constructor": false}, {"identifier": "handleSpecialCharacter", "parameters": "(char endChar)", "modifiers": "private static", "return": "String", "signature": "String handleSpecialCharacter(char endChar)", "full_signature": "private static String handleSpecialCharacter(char endChar)", "class_method_signature": "SentenceExtractor.handleSpecialCharacter(char endChar)", "testcase": false, "constructor": false}, {"identifier": "generateUmList", "parameters": "(E... args)", "modifiers": "private static", "return": "List<E>", "signature": "List<E> generateUmList(E... args)", "full_signature": "private static List<E> generateUmList(E... args)", "class_method_signature": "SentenceExtractor.generateUmList(E... args)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(String line, List<Pair<Integer, Integer>> sentencePositions)", "modifiers": "public", "return": "int", "signature": "int extract(String line, List<Pair<Integer, Integer>> sentencePositions)", "full_signature": "public int extract(String line, List<Pair<Integer, Integer>> sentencePositions)", "class_method_signature": "SentenceExtractor.extract(String line, List<Pair<Integer, Integer>> sentencePositions)", "testcase": false, "constructor": false}, {"identifier": "getSentenceEndPosition", "parameters": "(String str)", "modifiers": "public", "return": "int", "signature": "int getSentenceEndPosition(String str)", "full_signature": "public int getSentenceEndPosition(String str)", "class_method_signature": "SentenceExtractor.getSentenceEndPosition(String str)", "testcase": false, "constructor": false}, {"identifier": "getBrokenLineSeparator", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBrokenLineSeparator()", "full_signature": "public String getBrokenLineSeparator()", "class_method_signature": "SentenceExtractor.getBrokenLineSeparator()", "testcase": false, "constructor": false}, {"identifier": "constructEndSentencePattern", "parameters": "()", "modifiers": "", "return": "Pattern", "signature": "Pattern constructEndSentencePattern()", "full_signature": " Pattern constructEndSentencePattern()", "class_method_signature": "SentenceExtractor.constructEndSentencePattern()", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/parser/SentenceExtractor.java"}, "focal_method": {"identifier": "extract", "parameters": "(String line, List<Pair<Integer, Integer>> sentencePositions)", "modifiers": "public", "return": "int", "body": "public int extract(String line, List<Pair<Integer, Integer>> sentencePositions) {\n        int startPosition = 0;\n        int periodPosition = endOfSentenceDetector.getSentenceEndPosition(line, 0);\n        while (periodPosition >= 0) {\n            sentencePositions.add(new Pair<>(startPosition, periodPosition + 1));\n            startPosition = periodPosition + 1;\n            periodPosition = endOfSentenceDetector.getSentenceEndPosition(line, startPosition);\n        }\n        return startPosition;\n    }", "signature": "int extract(String line, List<Pair<Integer, Integer>> sentencePositions)", "full_signature": "public int extract(String line, List<Pair<Integer, Integer>> sentencePositions)", "class_method_signature": "SentenceExtractor.extract(String line, List<Pair<Integer, Integer>> sentencePositions)", "testcase": false, "constructor": false, "invocations": ["getSentenceEndPosition", "add", "getSentenceEndPosition"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}