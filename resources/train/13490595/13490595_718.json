{"test_class": {"identifier": "SpaceBetweenAlphabeticalWordValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-core/src/test/java/cc/redpen/validator/sentence/SpaceBetweenAlphabeticalWordValidatorTest.java"}, "test_case": {"identifier": "testWithComma", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testWithComma() throws RedPenException {\n        Configuration config = Configuration.builder(\"ja\")\n                .addValidatorConfig(new ValidatorConfiguration(\"SpaceBetweenAlphabeticalWord\"))\n                .build();\n\n        List<Document> documents = new ArrayList<>();documents.add(\n                Document.builder(new NeologdJapaneseTokenizer())\n                        .addSection(1)\n                        .addParagraph()\n                        .addSentence(new Sentence(\"\u304d\u3087\u3046\u306f\u3001Coke \u3092\u98f2\u307f\u305f\u3044\u3002\", 1))\n                        .build());\n\n        RedPen redPen = new RedPen(config);\n        Map<Document, List<ValidationError>> errors = redPen.validate(documents);\n        assertEquals(0, errors.get(documents.get(0)).size());\n    }", "signature": "void testWithComma()", "full_signature": "@Test void testWithComma()", "class_method_signature": "SpaceBetweenAlphabeticalWordValidatorTest.testWithComma()", "testcase": true, "constructor": false, "invocations": ["build", "addValidatorConfig", "builder", "add", "build", "addSentence", "addParagraph", "addSection", "builder", "validate", "assertEquals", "size", "get", "get"]}, "focal_class": {"identifier": "SpaceBetweenAlphabeticalWordValidator", "superclass": "extends Validator", "interfaces": "", "fields": [{"original_string": "private char leftParenthesis = '(';", "modifier": "private", "type": "char", "declarator": "leftParenthesis = '('", "var_name": "leftParenthesis"}, {"original_string": "private char rightParenthesis = ')';", "modifier": "private", "type": "char", "declarator": "rightParenthesis = ')'", "var_name": "rightParenthesis"}, {"original_string": "private char comma = ',';", "modifier": "private", "type": "char", "declarator": "comma = ','", "var_name": "comma"}, {"original_string": "private final String shard = \"[^A-Za-z0-9 !@#$%^&*()_+=\\\\[\\\\]\\\\\\\\{}|=<>,.{};':\\\",./<>?\uff08\uff09\uff3b\uff3d\uff5b\uff5d-]\";", "modifier": "private final", "type": "String", "declarator": "shard = \"[^A-Za-z0-9 !@#$%^&*()_+=\\\\[\\\\]\\\\\\\\{}|=<>,.{};':\\\",./<>?\uff08\uff09\uff3b\uff3d\uff5b\uff5d-]\";", "var_name": "shard"}, {"original_string": "private final String word = \"[A-Za-z0-9 !@#$%^&*()_+=\\\\[\\\\]\\\\\\\\{}|=<>,.{};':\\\",./<>?\uff08\uff09\uff5b\uff5d\uff3b\uff3d-]+\";", "modifier": "private final", "type": "String", "declarator": "word = \"[A-Za-z0-9 !@#$%^&*()_+=\\\\[\\\\]\\\\\\\\{}|=<>,.{};':\\\",./<>?\uff08\uff09\uff5b\uff5d\uff3b\uff3d-]+\";", "var_name": "word"}, {"original_string": "private final Pattern pat = Pattern.compile(shard + \"\\\\s+(\" + word + \")\\\\s+\" + shard);", "modifier": "private final", "type": "Pattern", "declarator": "pat = Pattern.compile(shard + \"\\\\s+(\" + word + \")\\\\s+\" + shard)", "var_name": "pat"}], "methods": [{"identifier": "SpaceBetweenAlphabeticalWordValidator", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpaceBetweenAlphabeticalWordValidator()", "full_signature": "public  SpaceBetweenAlphabeticalWordValidator()", "class_method_signature": "SpaceBetweenAlphabeticalWordValidator.SpaceBetweenAlphabeticalWordValidator()", "testcase": false, "constructor": true}, {"identifier": "getSupportedLanguages", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSupportedLanguages()", "full_signature": "@Override public List<String> getSupportedLanguages()", "class_method_signature": "SpaceBetweenAlphabeticalWordValidator.getSupportedLanguages()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Sentence sentence)", "modifiers": "@Override public", "return": "void", "signature": "void validate(Sentence sentence)", "full_signature": "@Override public void validate(Sentence sentence)", "class_method_signature": "SpaceBetweenAlphabeticalWordValidator.validate(Sentence sentence)", "testcase": false, "constructor": false}, {"identifier": "notHasWhiteSpaceBeforeLeftParenthesis", "parameters": "(char prevCharacter, char character)", "modifiers": "private", "return": "boolean", "signature": "boolean notHasWhiteSpaceBeforeLeftParenthesis(char prevCharacter, char character)", "full_signature": "private boolean notHasWhiteSpaceBeforeLeftParenthesis(char prevCharacter, char character)", "class_method_signature": "SpaceBetweenAlphabeticalWordValidator.notHasWhiteSpaceBeforeLeftParenthesis(char prevCharacter, char character)", "testcase": false, "constructor": false}, {"identifier": "notHasWhiteSpaceAfterRightParenthesis", "parameters": "(char prevCharacter, char character)", "modifiers": "private", "return": "boolean", "signature": "boolean notHasWhiteSpaceAfterRightParenthesis(char prevCharacter, char character)", "full_signature": "private boolean notHasWhiteSpaceAfterRightParenthesis(char prevCharacter, char character)", "class_method_signature": "SpaceBetweenAlphabeticalWordValidator.notHasWhiteSpaceAfterRightParenthesis(char prevCharacter, char character)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void init()", "full_signature": "@Override protected void init()", "class_method_signature": "SpaceBetweenAlphabeticalWordValidator.init()", "testcase": false, "constructor": false}], "file": "redpen-core/src/main/java/cc/redpen/validator/sentence/SpaceBetweenAlphabeticalWordValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(Sentence sentence)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(Sentence sentence) {\n        if (!getBoolean(\"forbidden\")) {\n            char prevCharacter = ' ';\n            int idx = 0;\n            for (char character : sentence.getContent().toCharArray()) {\n                if (notHasWhiteSpaceBeforeLeftParenthesis(prevCharacter, character)) {\n                    addLocalizedErrorWithPosition(\"Before\", sentence, idx, idx + 1);\n                } else if (notHasWhiteSpaceAfterRightParenthesis(prevCharacter, character)) {\n                    addLocalizedErrorWithPosition(\"After\", sentence, idx, idx + 1);\n                }\n                prevCharacter = character;\n                idx++;\n            }\n        } else {\n            final Matcher m = pat.matcher(sentence.getContent());\n            while (m.find()) {\n                final String word = m.group(1);\n                if (!word.contains(\" \")) {\n                    addLocalizedError(\"Forbidden\", sentence, word);\n                }\n            }\n        }\n    }", "signature": "void validate(Sentence sentence)", "full_signature": "@Override public void validate(Sentence sentence)", "class_method_signature": "SpaceBetweenAlphabeticalWordValidator.validate(Sentence sentence)", "testcase": false, "constructor": false, "invocations": ["getBoolean", "toCharArray", "getContent", "notHasWhiteSpaceBeforeLeftParenthesis", "addLocalizedErrorWithPosition", "notHasWhiteSpaceAfterRightParenthesis", "addLocalizedErrorWithPosition", "matcher", "getContent", "find", "group", "contains", "addLocalizedError"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}