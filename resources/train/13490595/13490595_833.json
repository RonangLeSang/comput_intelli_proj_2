{"test_class": {"identifier": "MainTest", "superclass": "", "interfaces": "", "fields": [], "file": "redpen-cli/src/test/java/cc/redpen/MainTest.java"}, "test_case": {"identifier": "testMainWithoutInput", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testMainWithoutInput() throws RedPenException {\n        String[] args = new String[]{\n                \"-c\", \"sample/conf/redpen-conf-en.xml\",\n        };\n        assertEquals(1, Main.run(args));\n    }", "signature": "void testMainWithoutInput()", "full_signature": "@Test void testMainWithoutInput()", "class_method_signature": "MainTest.testMainWithoutInput()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "run"]}, "focal_class": {"identifier": "Main", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Main.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Main.class)", "var_name": "LOG"}, {"original_string": "private static final String PROGRAM = \"redpen-cli\";", "modifier": "private static final", "type": "String", "declarator": "PROGRAM = \"redpen-cli\"", "var_name": "PROGRAM"}, {"original_string": "private static final String DEFAULT_CONFIG_NAME = \"redpen-conf\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CONFIG_NAME = \"redpen-conf\"", "var_name": "DEFAULT_CONFIG_NAME"}, {"original_string": "private static final int DEFAULT_LIMIT = 1;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_LIMIT = 1", "var_name": "DEFAULT_LIMIT"}, {"original_string": "private static final String HELP_HEADER = \"\\nValidate input documents with specified configuration settings.\\n\\nOptions:\\n\";", "modifier": "private static final", "type": "String", "declarator": "HELP_HEADER = \"\\nValidate input documents with specified configuration settings.\\n\\nOptions:\\n\"", "var_name": "HELP_HEADER"}, {"original_string": "private static final String HELP_FOOTER = \"\\n\\nExample:\\n\\n\" +\n                                              \"$redpen -c redpen-config.xml input.md\\n\\n\" +\n                                              \"Note:\\n\" +\n                                              \"Setting files can be generated in http://redpen.herokuapp.com/\\n\";", "modifier": "private static final", "type": "String", "declarator": "HELP_FOOTER = \"\\n\\nExample:\\n\\n\" +\n                                              \"$redpen -c redpen-config.xml input.md\\n\\n\" +\n                                              \"Note:\\n\" +\n                                              \"Setting files can be generated in http://redpen.herokuapp.com/\\n\"", "var_name": "HELP_FOOTER"}], "methods": [{"identifier": "Main", "parameters": "()", "modifiers": "private", "return": "", "signature": " Main()", "full_signature": "private  Main()", "class_method_signature": "Main.Main()", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String... args)", "modifiers": "public static", "return": "void", "signature": "void main(String... args)", "full_signature": "public static void main(String... args)", "class_method_signature": "Main.main(String... args)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(String... args)", "modifiers": "@SuppressWarnings(\"static-access\") public static", "return": "int", "signature": "int run(String... args)", "full_signature": "@SuppressWarnings(\"static-access\") public static int run(String... args)", "class_method_signature": "Main.run(String... args)", "testcase": false, "constructor": false}, {"identifier": "getDocuments", "parameters": "(String inputFormat, String inputSentence, String[] inputFileNames, RedPen redPen)", "modifiers": "private static", "return": "List<Document>", "signature": "List<Document> getDocuments(String inputFormat, String inputSentence, String[] inputFileNames, RedPen redPen)", "full_signature": "private static List<Document> getDocuments(String inputFormat, String inputSentence, String[] inputFileNames, RedPen redPen)", "class_method_signature": "Main.getDocuments(String inputFormat, String inputSentence, String[] inputFileNames, RedPen redPen)", "testcase": false, "constructor": false}, {"identifier": "guessInputFormat", "parameters": "(String[] inputFileNames)", "modifiers": "static", "return": "String", "signature": "String guessInputFormat(String[] inputFileNames)", "full_signature": "static String guessInputFormat(String[] inputFileNames)", "class_method_signature": "Main.guessInputFormat(String[] inputFileNames)", "testcase": false, "constructor": false}, {"identifier": "detectFormat", "parameters": "(String inputFileName)", "modifiers": "private static", "return": "String", "signature": "String detectFormat(String inputFileName)", "full_signature": "private static String detectFormat(String inputFileName)", "class_method_signature": "Main.detectFormat(String inputFileName)", "testcase": false, "constructor": false}, {"identifier": "extractInputFiles", "parameters": "(String[] inputFileNames)", "modifiers": "private static", "return": "File[]", "signature": "File[] extractInputFiles(String[] inputFileNames)", "full_signature": "private static File[] extractInputFiles(String[] inputFileNames)", "class_method_signature": "Main.extractInputFiles(String[] inputFileNames)", "testcase": false, "constructor": false}, {"identifier": "printHelp", "parameters": "(Options opt)", "modifiers": "private static", "return": "void", "signature": "void printHelp(Options opt)", "full_signature": "private static void printHelp(Options opt)", "class_method_signature": "Main.printHelp(Options opt)", "testcase": false, "constructor": false}, {"identifier": "resolveConfigLocation", "parameters": "(String configFileName)", "modifiers": "static", "return": "File", "signature": "File resolveConfigLocation(String configFileName)", "full_signature": "static File resolveConfigLocation(String configFileName)", "class_method_signature": "Main.resolveConfigLocation(String configFileName)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(List<String> pathCandidates)", "modifiers": "static", "return": "File", "signature": "File resolve(List<String> pathCandidates)", "full_signature": "static File resolve(List<String> pathCandidates)", "class_method_signature": "Main.resolve(List<String> pathCandidates)", "testcase": false, "constructor": false}], "file": "redpen-cli/src/main/java/cc/redpen/Main.java"}, "focal_method": {"identifier": "run", "parameters": "(String... args)", "modifiers": "@SuppressWarnings(\"static-access\") public static", "return": "int", "body": "@SuppressWarnings(\"static-access\")\n    public static int run(String... args) throws RedPenException {\n        Options options = new Options();\n        options.addOption(\"h\", \"help\", false, \"Displays this help information and exits\");\n\n        options.addOption(OptionBuilder.withLongOpt(\"format\")\n                .withDescription(\"Input file format (markdown,plain,wiki,asciidoc,latex,rest)\")\n                .hasArg()\n                .withArgName(\"FORMAT\")\n                .create(\"f\"));\n\n        options.addOption(OptionBuilder.withLongOpt(\"conf\")\n                .withDescription(\"Configuration file (REQUIRED)\")\n                .hasArg()\n                .withArgName(\"CONF FILE\")\n                .create(\"c\"));\n\n        options.addOption(OptionBuilder.withLongOpt(\"result-format\")\n                .withDescription(\"Output result format (json,json2,plain,plain2,xml)\")\n                .hasArg()\n                .withArgName(\"RESULT FORMAT\")\n                .create(\"r\"));\n\n        options.addOption(OptionBuilder.withLongOpt(\"limit\")\n                .withDescription(\"Error limit number\")\n                .hasArg()\n                .withArgName(\"LIMIT NUMBER\")\n                .create(\"l\"));\n\n        options.addOption(OptionBuilder.withLongOpt(\"sentence\")\n                .withDescription(\"Input sentences\")\n                .hasArg()\n                .withArgName(\"INPUT SENTENCES\")\n                .create(\"s\"));\n\n        options.addOption(OptionBuilder.withLongOpt(\"lang\")\n                .withDescription(\"Language of error messages\")\n                .hasArg()\n                .withArgName(\"LANGUAGE\")\n                .create(\"L\"));\n\n        options.addOption(OptionBuilder.withLongOpt(\"threshold\")\n                .withDescription(\"Threshold of error level (info, warn, error)\")\n                .hasArg()\n                .withArgName(\"THRESHOLD\")\n                .create(\"t\"));\n\n        options.addOption(OptionBuilder.withLongOpt(\"version\")\n                .withDescription(\"Displays version information and exits\")\n                .create(\"v\"));\n\n        CommandLineParser commandLineParser = new BasicParser();\n        CommandLine commandLine;\n        try {\n            commandLine = commandLineParser.parse(options, args);\n        } catch (ParseException e) {\n            LOG.error(\"Error occurred in parsing command line options \");\n            printHelp(options);\n            return -1;\n        }\n\n        String inputFormat = \"plain\";\n        String configFileName = null;\n        String resultFormat = \"plain\";\n        String inputSentence = null;\n        String language = \"en\";\n        String threshold = \"error\";\n\n        int limit = DEFAULT_LIMIT;\n\n        if (commandLine.hasOption(\"h\")) {\n            printHelp(options);\n            return 0;\n        }\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(RedPen.VERSION);\n            return 0;\n        }\n        if (commandLine.hasOption(\"f\")) {\n            inputFormat = commandLine.getOptionValue(\"f\");\n        }\n        if (commandLine.hasOption(\"c\")) {\n            configFileName = commandLine.getOptionValue(\"c\");\n        }\n        if (commandLine.hasOption(\"r\")) {\n            resultFormat = commandLine.getOptionValue(\"r\");\n        }\n        if (commandLine.hasOption(\"l\")) {\n            limit = Integer.valueOf(commandLine.getOptionValue(\"l\"));\n        }\n        if (commandLine.hasOption(\"L\")) {\n            language = commandLine.getOptionValue(\"L\");\n        }\n        if (commandLine.hasOption(\"s\")) {\n            inputSentence = commandLine.getOptionValue(\"s\");\n        }\n        if (commandLine.hasOption(\"t\")) {\n            threshold= commandLine.getOptionValue(\"t\");\n        }\n\n        // set language\n        if (language.equals(\"ja\")) {\n            Locale.setDefault(new Locale(\"ja\", \"JA\"));\n        }  else {\n            Locale.setDefault(new Locale(\"en\", \"EN\"));\n        }\n\n        String[] inputFileNames = commandLine.getArgs();\n        if (!commandLine.hasOption(\"f\")) {\n            inputFormat = guessInputFormat(inputFileNames);\n        }\n\n        File configFile = resolveConfigLocation(configFileName);\n        if (configFile == null) {\n            LOG.error(\"Configuration file is not found.\");\n            printHelp(options);\n            return 1;\n        }\n\n        if (inputFileNames.length == 0 && inputSentence == null) {\n            LOG.error(\"Input is not given\");\n            printHelp(options);\n            return 1;\n        }\n\n        RedPen redPen;\n        try {\n            redPen = new RedPen(configFile);\n        } catch (RedPenException e) {\n            LOG.error(\"Failed to parse input files: \" + e);\n            return -1;\n        }\n\n        List<Document> documents = getDocuments(inputFormat, inputSentence, inputFileNames, redPen);\n        Map<Document, List<ValidationError>> documentListMap = redPen.validate(documents, threshold);\n\n        Formatter formatter = FormatterUtils.getFormatterByName(resultFormat);\n        if (formatter == null) {\n            LOG.error(\"Unsupported format: \" + resultFormat + \" - please use xml, plain, plain2, json or json2\");\n            return -1;\n        }\n        String result = formatter.format(documentListMap);\n        System.out.println(result);\n\n        long errorCount = documentListMap.values().stream().mapToLong(List::size).sum();\n\n        if (errorCount > limit) {\n            LOG.error(\"The number of errors \\\"{}\\\" is larger than specified (limit is \\\"{}\\\").\", errorCount, limit);\n            return 1;\n        } else {\n            return 0;\n        }\n    }", "signature": "int run(String... args)", "full_signature": "@SuppressWarnings(\"static-access\") public static int run(String... args)", "class_method_signature": "Main.run(String... args)", "testcase": false, "constructor": false, "invocations": ["addOption", "addOption", "create", "withArgName", "hasArg", "withDescription", "withLongOpt", "addOption", "create", "withArgName", "hasArg", "withDescription", "withLongOpt", "addOption", "create", "withArgName", "hasArg", "withDescription", "withLongOpt", "addOption", "create", "withArgName", "hasArg", "withDescription", "withLongOpt", "addOption", "create", "withArgName", "hasArg", "withDescription", "withLongOpt", "addOption", "create", "withArgName", "hasArg", "withDescription", "withLongOpt", "addOption", "create", "withArgName", "hasArg", "withDescription", "withLongOpt", "addOption", "create", "withDescription", "withLongOpt", "parse", "error", "printHelp", "hasOption", "printHelp", "hasOption", "println", "hasOption", "getOptionValue", "hasOption", "getOptionValue", "hasOption", "getOptionValue", "hasOption", "valueOf", "getOptionValue", "hasOption", "getOptionValue", "hasOption", "getOptionValue", "hasOption", "getOptionValue", "equals", "setDefault", "setDefault", "getArgs", "hasOption", "guessInputFormat", "resolveConfigLocation", "error", "printHelp", "error", "printHelp", "error", "getDocuments", "validate", "getFormatterByName", "error", "format", "println", "sum", "mapToLong", "stream", "values", "error"]}, "repository": {"repo_id": 13490595, "url": "https://github.com/redpen-cc/redpen", "language": "Java", "is_fork": false, "fork_count": 68, "stargazer_count": 438, "size": 9306, "license": "licensed"}}