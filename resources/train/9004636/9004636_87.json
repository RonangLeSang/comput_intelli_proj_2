{"test_class": {"identifier": "ReloadAiManagementTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Core mCoreMock = mock(Core.class);", "modifier": "", "type": "Core", "declarator": "mCoreMock = mock(Core.class)", "var_name": "mCoreMock"}, {"original_string": "Logger mLoggerMock = mock(Logger.class);", "modifier": "", "type": "Logger", "declarator": "mLoggerMock = mock(Logger.class)", "var_name": "mLoggerMock"}, {"original_string": "ArtificialIntelligence mArtificialIntelligenceMock = mock(ArtificialIntelligence.class);", "modifier": "", "type": "ArtificialIntelligence", "declarator": "mArtificialIntelligenceMock = mock(ArtificialIntelligence.class)", "var_name": "mArtificialIntelligenceMock"}, {"original_string": "ReloadAiManagement mSUT;", "modifier": "", "type": "ReloadAiManagement", "declarator": "mSUT", "var_name": "mSUT"}], "file": "mrbotkicore/src/test/java/core/ReloadAiManagementTest.java"}, "test_case": {"identifier": "testStartWhileNotAlive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStartWhileNotAlive() {\n\t\twhen(mCoreMock.getAI()).thenReturn( null );\n\t\tassertThat(mSUT.isAlive()).isFalse();\n\t\t\n\t\tmSUT.start();\n\t\t\n\t\tassertThat(mSUT.isAlive()).isTrue();\n\t\tverify(mLoggerMock).info(\"RestartAiServerManagement started.\");\n\t\t\t\n\t}", "signature": "void testStartWhileNotAlive()", "full_signature": "@Test public void testStartWhileNotAlive()", "class_method_signature": "ReloadAiManagementTest.testStartWhileNotAlive()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAI", "isFalse", "assertThat", "isAlive", "start", "isTrue", "assertThat", "isAlive", "info", "verify"]}, "focal_class": {"identifier": "ReloadAiManagement", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "private static ReloadAiManagement sINSTANCE;", "modifier": "private static", "type": "ReloadAiManagement", "declarator": "sINSTANCE", "var_name": "sINSTANCE"}, {"original_string": "private boolean mAiActive = false;", "modifier": "private", "type": "boolean", "declarator": "mAiActive = false", "var_name": "mAiActive"}], "methods": [{"identifier": "ReloadAiManagement", "parameters": "()", "modifiers": "", "return": "", "signature": " ReloadAiManagement()", "full_signature": "  ReloadAiManagement()", "class_method_signature": "ReloadAiManagement.ReloadAiManagement()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ReloadAiManagement", "signature": "ReloadAiManagement getInstance()", "full_signature": "public static ReloadAiManagement getInstance()", "class_method_signature": "ReloadAiManagement.getInstance()", "testcase": false, "constructor": false}, {"identifier": "setInstanceNull", "parameters": "()", "modifiers": "static synchronized", "return": "void", "signature": "void setInstanceNull()", "full_signature": "static synchronized void setInstanceNull()", "class_method_signature": "ReloadAiManagement.setInstanceNull()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ReloadAiManagement.close()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "ReloadAiManagement.start()", "testcase": false, "constructor": false}, {"identifier": "startManagement", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startManagement()", "full_signature": "public void startManagement()", "class_method_signature": "ReloadAiManagement.startManagement()", "testcase": false, "constructor": false}, {"identifier": "stopManagement", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopManagement()", "full_signature": "public void stopManagement()", "class_method_signature": "ReloadAiManagement.stopManagement()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ReloadAiManagement.run()", "testcase": false, "constructor": false}], "file": "mrbotkicore/src/main/java/core/ReloadAiManagement.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void start(){\n\t\t\n\t\tstartManagement();\n\t\t\n\t}", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "ReloadAiManagement.start()", "testcase": false, "constructor": false, "invocations": ["startManagement"]}, "repository": {"repo_id": 9004636, "url": "https://github.com/NorthernStars/MR-FWNS", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 21952, "license": "Other"}}