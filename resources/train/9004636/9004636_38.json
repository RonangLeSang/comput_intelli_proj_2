{"test_class": {"identifier": "ReferencePointTest", "superclass": "", "interfaces": "", "fields": [], "file": "mrbotkiessentials/src/test/java/essentials/communication/worlddata_server2008/ReferencePointTest.java"}, "test_case": {"identifier": "testMultiply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiply()\n    {\n        ReferencePoint referencePoint = new ReferencePoint(50,20, false);\n        referencePoint.multiply(2.0);\n        assertThat(referencePoint.getXOfPoint()).isCloseTo(100, Percentage.withPercentage(1));\n        assertThat(referencePoint.getYOfPoint()).isCloseTo(40,Percentage.withPercentage(1));\n    }", "signature": "void testMultiply()", "full_signature": "@Test public void testMultiply()", "class_method_signature": "ReferencePointTest.testMultiply()", "testcase": true, "constructor": false, "invocations": ["multiply", "isCloseTo", "assertThat", "getXOfPoint", "withPercentage", "isCloseTo", "assertThat", "getYOfPoint", "withPercentage"]}, "focal_class": {"identifier": "ReferencePoint", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReferencePointName mPointName = ReferencePointName.NoFixedName;", "modifier": "private", "type": "ReferencePointName", "declarator": "mPointName = ReferencePointName.NoFixedName", "var_name": "mPointName"}, {"original_string": "private double mDistanceToPoint = Double.NaN;", "modifier": "private", "type": "double", "declarator": "mDistanceToPoint = Double.NaN", "var_name": "mDistanceToPoint"}, {"original_string": "private double mAngleToPoint = Double.NaN;", "modifier": "private", "type": "double", "declarator": "mAngleToPoint = Double.NaN", "var_name": "mAngleToPoint"}, {"original_string": "private double mX = Double.NaN;", "modifier": "private", "type": "double", "declarator": "mX = Double.NaN", "var_name": "mX"}, {"original_string": "private double mY = Double.NaN;", "modifier": "private", "type": "double", "declarator": "mY = Double.NaN", "var_name": "mY"}], "methods": [{"identifier": "ReferencePoint", "parameters": "( )", "modifiers": "", "return": "", "signature": " ReferencePoint( )", "full_signature": "  ReferencePoint( )", "class_method_signature": "ReferencePoint.ReferencePoint( )", "testcase": false, "constructor": true}, {"identifier": "ReferencePoint", "parameters": "( double aDistanceToPoint, double aAngleToPoint )", "modifiers": "@Deprecated public", "return": "", "signature": " ReferencePoint( double aDistanceToPoint, double aAngleToPoint )", "full_signature": "@Deprecated public  ReferencePoint( double aDistanceToPoint, double aAngleToPoint )", "class_method_signature": "ReferencePoint.ReferencePoint( double aDistanceToPoint, double aAngleToPoint )", "testcase": false, "constructor": true}, {"identifier": "ReferencePoint", "parameters": "( double aFirstValue, double aSecondValue, boolean aPolarcoordinates )", "modifiers": "public", "return": "", "signature": " ReferencePoint( double aFirstValue, double aSecondValue, boolean aPolarcoordinates )", "full_signature": "public  ReferencePoint( double aFirstValue, double aSecondValue, boolean aPolarcoordinates )", "class_method_signature": "ReferencePoint.ReferencePoint( double aFirstValue, double aSecondValue, boolean aPolarcoordinates )", "testcase": false, "constructor": true}, {"identifier": "getPointName", "parameters": "()", "modifiers": "@XmlElement(name=\"id\") public", "return": "ReferencePointName", "signature": "ReferencePointName getPointName()", "full_signature": "@XmlElement(name=\"id\") public ReferencePointName getPointName()", "class_method_signature": "ReferencePoint.getPointName()", "testcase": false, "constructor": false}, {"identifier": "setPointName", "parameters": "( ReferencePointName aPointName )", "modifiers": "", "return": "void", "signature": "void setPointName( ReferencePointName aPointName )", "full_signature": " void setPointName( ReferencePointName aPointName )", "class_method_signature": "ReferencePoint.setPointName( ReferencePointName aPointName )", "testcase": false, "constructor": false}, {"identifier": "getDistanceToPoint", "parameters": "()", "modifiers": "@XmlElement(name=\"dist\") public", "return": "double", "signature": "double getDistanceToPoint()", "full_signature": "@XmlElement(name=\"dist\") public double getDistanceToPoint()", "class_method_signature": "ReferencePoint.getDistanceToPoint()", "testcase": false, "constructor": false}, {"identifier": "setDistanceToPoint", "parameters": "( double aDistance )", "modifiers": "public", "return": "void", "signature": "void setDistanceToPoint( double aDistance )", "full_signature": "public void setDistanceToPoint( double aDistance )", "class_method_signature": "ReferencePoint.setDistanceToPoint( double aDistance )", "testcase": false, "constructor": false}, {"identifier": "getAngleToPoint", "parameters": "()", "modifiers": "@XmlElement(name=\"angle\") public", "return": "double", "signature": "double getAngleToPoint()", "full_signature": "@XmlElement(name=\"angle\") public double getAngleToPoint()", "class_method_signature": "ReferencePoint.getAngleToPoint()", "testcase": false, "constructor": false}, {"identifier": "setAngleToPoint", "parameters": "( double aAngle )", "modifiers": "public", "return": "void", "signature": "void setAngleToPoint( double aAngle )", "full_signature": "public void setAngleToPoint( double aAngle )", "class_method_signature": "ReferencePoint.setAngleToPoint( double aAngle )", "testcase": false, "constructor": false}, {"identifier": "getXOfPoint", "parameters": "()", "modifiers": "@XmlElement(name=\"xvalue\") public", "return": "double", "signature": "double getXOfPoint()", "full_signature": "@XmlElement(name=\"xvalue\") public double getXOfPoint()", "class_method_signature": "ReferencePoint.getXOfPoint()", "testcase": false, "constructor": false}, {"identifier": "setXOfPoint", "parameters": "( double aXValue )", "modifiers": "public", "return": "void", "signature": "void setXOfPoint( double aXValue )", "full_signature": "public void setXOfPoint( double aXValue )", "class_method_signature": "ReferencePoint.setXOfPoint( double aXValue )", "testcase": false, "constructor": false}, {"identifier": "getYOfPoint", "parameters": "()", "modifiers": "@XmlElement(name=\"yvalue\") public", "return": "double", "signature": "double getYOfPoint()", "full_signature": "@XmlElement(name=\"yvalue\") public double getYOfPoint()", "class_method_signature": "ReferencePoint.getYOfPoint()", "testcase": false, "constructor": false}, {"identifier": "setYOfPoint", "parameters": "( double aYValue )", "modifiers": "public", "return": "void", "signature": "void setYOfPoint( double aYValue )", "full_signature": "public void setYOfPoint( double aYValue )", "class_method_signature": "ReferencePoint.setYOfPoint( double aYValue )", "testcase": false, "constructor": false}, {"identifier": "ReferencePoint", "parameters": "( ReferencePoint aReferencePoint )", "modifiers": "public", "return": "", "signature": " ReferencePoint( ReferencePoint aReferencePoint )", "full_signature": "public  ReferencePoint( ReferencePoint aReferencePoint )", "class_method_signature": "ReferencePoint.ReferencePoint( ReferencePoint aReferencePoint )", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "ReferencePoint", "signature": "ReferencePoint copy()", "full_signature": "public ReferencePoint copy()", "class_method_signature": "ReferencePoint.copy()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "( ReferencePoint aReferencePoint )", "modifiers": "public", "return": "ReferencePoint", "signature": "ReferencePoint set( ReferencePoint aReferencePoint )", "full_signature": "public ReferencePoint set( ReferencePoint aReferencePoint )", "class_method_signature": "ReferencePoint.set( ReferencePoint aReferencePoint )", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "( double aFirstValue, double aSecondValue, boolean aPolarcoordinates )", "modifiers": "public", "return": "ReferencePoint", "signature": "ReferencePoint set( double aFirstValue, double aSecondValue, boolean aPolarcoordinates )", "full_signature": "public ReferencePoint set( double aFirstValue, double aSecondValue, boolean aPolarcoordinates )", "class_method_signature": "ReferencePoint.set( double aFirstValue, double aSecondValue, boolean aPolarcoordinates )", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "( double aScalar )", "modifiers": "public", "return": "ReferencePoint", "signature": "ReferencePoint sub( double aScalar )", "full_signature": "public ReferencePoint sub( double aScalar )", "class_method_signature": "ReferencePoint.sub( double aScalar )", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "( ReferencePoint aReferencePoint )", "modifiers": "public", "return": "ReferencePoint", "signature": "ReferencePoint sub( ReferencePoint aReferencePoint )", "full_signature": "public ReferencePoint sub( ReferencePoint aReferencePoint )", "class_method_signature": "ReferencePoint.sub( ReferencePoint aReferencePoint )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( ReferencePoint aReferencePoint )", "modifiers": "public", "return": "ReferencePoint", "signature": "ReferencePoint add( ReferencePoint aReferencePoint )", "full_signature": "public ReferencePoint add( ReferencePoint aReferencePoint )", "class_method_signature": "ReferencePoint.add( ReferencePoint aReferencePoint )", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "( double scalar )", "modifiers": "public", "return": "ReferencePoint", "signature": "ReferencePoint multiply( double scalar )", "full_signature": "public ReferencePoint multiply( double scalar )", "class_method_signature": "ReferencePoint.multiply( double scalar )", "testcase": false, "constructor": false}, {"identifier": "epsilonEquals", "parameters": "( ReferencePoint aReferencePoint, double aEpsilon )", "modifiers": "public", "return": "boolean", "signature": "boolean epsilonEquals( ReferencePoint aReferencePoint, double aEpsilon )", "full_signature": "public boolean epsilonEquals( ReferencePoint aReferencePoint, double aEpsilon )", "class_method_signature": "ReferencePoint.epsilonEquals( ReferencePoint aReferencePoint, double aEpsilon )", "testcase": false, "constructor": false}, {"identifier": "epsilonEquals", "parameters": "( double aX, double aY, double aEpsilon )", "modifiers": "public", "return": "boolean", "signature": "boolean epsilonEquals( double aX, double aY, double aEpsilon )", "full_signature": "public boolean epsilonEquals( double aX, double aY, double aEpsilon )", "class_method_signature": "ReferencePoint.epsilonEquals( double aX, double aY, double aEpsilon )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ReferencePoint.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ReferencePoint.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ReferencePoint.equals(Object obj)", "testcase": false, "constructor": false}], "file": "mrbotkiessentials/src/main/java/essentials/communication/worlddata_server2008/ReferencePoint.java"}, "focal_method": {"identifier": "multiply", "parameters": "( double scalar )", "modifiers": "public", "return": "ReferencePoint", "body": "public ReferencePoint multiply( double scalar ) {\n            mX *= scalar;\n            mY *= scalar;\n            return set( mX, mY, false );\n    }", "signature": "ReferencePoint multiply( double scalar )", "full_signature": "public ReferencePoint multiply( double scalar )", "class_method_signature": "ReferencePoint.multiply( double scalar )", "testcase": false, "constructor": false, "invocations": ["set"]}, "repository": {"repo_id": 9004636, "url": "https://github.com/NorthernStars/MR-FWNS", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 21952, "license": "Other"}}