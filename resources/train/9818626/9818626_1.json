{"test_class": {"identifier": "ImportProcessTest", "superclass": "extends WPSTestSupport", "interfaces": "", "fields": [], "file": "src/extension/wps/wps-core/src/test/java/org/geoserver/wps/gs/ImportProcessTest.java"}, "test_case": {"identifier": "testImportBuildingsForceCRS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testImportBuildingsForceCRS() throws Exception {\n        FeatureTypeInfo ti = getCatalog().getFeatureTypeByName(getLayerId(SystemTestData.BUILDINGS));\n        SimpleFeatureCollection rawSource = (SimpleFeatureCollection) ti.getFeatureSource(null,\n                null).getFeatures();\n\n        ImportProcess importer = new ImportProcess(getCatalog());\n        String result = importer.execute(rawSource, null, SystemTestData.CITE_PREFIX, SystemTestData.CITE_PREFIX,\n                \"Buildings2\", CRS.decode(\"EPSG:4326\"), null, null);\n\n        checkBuildings2(result);\n    }", "signature": "void testImportBuildingsForceCRS()", "full_signature": "@Test public void testImportBuildingsForceCRS()", "class_method_signature": "ImportProcessTest.testImportBuildingsForceCRS()", "testcase": true, "constructor": false, "invocations": ["getFeatureTypeByName", "getCatalog", "getLayerId", "getFeatures", "getFeatureSource", "getCatalog", "execute", "decode", "checkBuildings2"]}, "focal_class": {"identifier": "ImportProcess", "superclass": "", "interfaces": "implements GSProcess", "fields": [{"original_string": "static final Logger LOGGER = Logging.getLogger(ImportProcess.class);", "modifier": "static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(ImportProcess.class)", "var_name": "LOGGER"}, {"original_string": "private final static GeoTiffWriteParams DEFAULT_WRITE_PARAMS;", "modifier": "private final static", "type": "GeoTiffWriteParams", "declarator": "DEFAULT_WRITE_PARAMS", "var_name": "DEFAULT_WRITE_PARAMS"}, {"original_string": "private Catalog catalog;", "modifier": "private", "type": "Catalog", "declarator": "catalog", "var_name": "catalog"}], "methods": [{"identifier": "ImportProcess", "parameters": "(Catalog catalog)", "modifiers": "public", "return": "", "signature": " ImportProcess(Catalog catalog)", "full_signature": "public  ImportProcess(Catalog catalog)", "class_method_signature": "ImportProcess.ImportProcess(Catalog catalog)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)", "modifiers": "@DescribeResult(name = \"layerName\", description = \"Name of the new featuretype, with workspace\") public", "return": "String", "signature": "String execute(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)", "full_signature": "@DescribeResult(name = \"layerName\", description = \"Name of the new featuretype, with workspace\") public String execute(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)", "class_method_signature": "ImportProcess.execute(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)", "testcase": false, "constructor": false}, {"identifier": "importDataIntoStore", "parameters": "(SimpleFeatureCollection features, String name,\n            DataStoreInfo storeInfo)", "modifiers": "private", "return": "SimpleFeatureType", "signature": "SimpleFeatureType importDataIntoStore(SimpleFeatureCollection features, String name,\n            DataStoreInfo storeInfo)", "full_signature": "private SimpleFeatureType importDataIntoStore(SimpleFeatureCollection features, String name,\n            DataStoreInfo storeInfo)", "class_method_signature": "ImportProcess.importDataIntoStore(SimpleFeatureCollection features, String name,\n            DataStoreInfo storeInfo)", "testcase": false, "constructor": false}, {"identifier": "buildAttributeMapping", "parameters": "(SimpleFeatureType sourceType,\n            SimpleFeatureType targetType)", "modifiers": "", "return": "Map<String, String>", "signature": "Map<String, String> buildAttributeMapping(SimpleFeatureType sourceType,\n            SimpleFeatureType targetType)", "full_signature": " Map<String, String> buildAttributeMapping(SimpleFeatureType sourceType,\n            SimpleFeatureType targetType)", "class_method_signature": "ImportProcess.buildAttributeMapping(SimpleFeatureType sourceType,\n            SimpleFeatureType targetType)", "testcase": false, "constructor": false}], "file": "src/extension/wps/wps-core/src/main/java/org/geoserver/wps/gs/ImportProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)", "modifiers": "@DescribeResult(name = \"layerName\", description = \"Name of the new featuretype, with workspace\") public", "return": "String", "body": "@DescribeResult(name = \"layerName\", description = \"Name of the new featuretype, with workspace\")\n    public String execute(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)\n            throws ProcessException {\n\n        // first off, decide what is the target store\n        WorkspaceInfo ws;\n        if (workspace != null) {\n            ws = catalog.getWorkspaceByName(workspace);\n            if (ws == null) {\n                throw new ProcessException(\"Could not find workspace \" + workspace);\n            }\n        } else {\n            ws = catalog.getDefaultWorkspace();\n            if (ws == null) {\n                throw new ProcessException(\n                        \"The catalog is empty, could not find a default workspace\");\n            }\n        }\n\n    \t//create a builder to help build catalog objects\n        CatalogBuilder cb = new CatalogBuilder(catalog);\n        cb.setWorkspace( ws );\n\n        // ok, find the target store\n        StoreInfo storeInfo = null;\n        boolean add = false;\n        if (store != null) {\n        \tif (features != null)\n        \t{\n        \t\tstoreInfo = catalog.getDataStoreByName(ws.getName(), store);\n        \t}\n        \telse if (coverage != null)\n        \t{\n        \t\tstoreInfo = catalog.getCoverageStoreByName(ws.getName(), store);\n        \t}\n            if (storeInfo == null) {\n                throw new ProcessException(\"Could not find store \" + store + \" in workspace \"\n                        + workspace);\n                // TODO: support store creation\n            }\n        } else if (features != null) {\n            storeInfo = catalog.getDefaultDataStore(ws);\n            if (storeInfo == null) {\n                throw new ProcessException(\"Could not find a default store in workspace \"\n                        + ws.getName());\n            }\n        } else if (coverage != null) {\n        \t//create a new coverage store\n            LOGGER.info(\"Auto-configuring coverage store: \" + (name != null ? name : coverage.getName().toString()));\n            \n            storeInfo = cb.buildCoverageStore((name != null ? name : coverage.getName().toString()));\n            add = true;\n            store = (name != null ? name : coverage.getName().toString());\n            \n            if (storeInfo == null) {\n                throw new ProcessException(\"Could not find a default store in workspace \" + ws.getName());\n            }\n        }\n\n        // check the target style if any\n        StyleInfo targetStyle = null;\n        if (styleName != null) {\n            targetStyle = catalog.getStyleByName(styleName);\n            if (targetStyle == null) {\n                throw new ProcessException(\"Could not find style \" + styleName);\n            }\n        }\n\n        if (features != null)\n        {\n        \t// check if the target layer and the target feature type are not\n        \t// already there (this is a half-assed attempt as we don't have\n        \t// an API telling us how the feature type name will be changed\n        \t// by DataStore.createSchema(...), but better than fully importing\n        \t// the data into the target store to find out we cannot create the layer...)\n        \tString tentativeTargetName = null;\n        \tif (name != null) {\n        \t\ttentativeTargetName = ws.getName() + \":\" + name;\n        \t} else {\n        \t\ttentativeTargetName = ws.getName() + \":\" + features.getSchema().getTypeName();\n        \t}\n        \tif (catalog.getLayer(tentativeTargetName) != null) {\n        \t\tthrow new ProcessException(\"Target layer \" + tentativeTargetName + \" already exists\");\n        \t}\n\n        \t// check the target crs\n        \tString targetSRSCode = null;\n        \tif (srs != null) {\n        \t\ttry {\n        \t\t\tInteger code = CRS.lookupEpsgCode(srs, true);\n        \t\t\tif (code == null) {\n        \t\t\t\tthrow new WPSException(\"Could not find a EPSG code for \" + srs);\n        \t\t\t}\n        \t\t\ttargetSRSCode = \"EPSG:\" + code;\n        \t\t} catch (Exception e) {\n        \t\t\tthrow new ProcessException(\"Could not lookup the EPSG code for the provided srs\", e);\n        \t\t}\n        \t} else {\n        \t\t// check we can extract a code from the original data\n        \t\tGeometryDescriptor gd = features.getSchema().getGeometryDescriptor();\n        \t\tif (gd == null) {\n        \t\t\t// data is geometryless, we need a fake SRS\n        \t\t\ttargetSRSCode = \"EPSG:4326\";\n        \t\t\tsrsHandling = ProjectionPolicy.FORCE_DECLARED;\n        \t\t} else {\n        \t\t\tCoordinateReferenceSystem nativeCrs = gd.getCoordinateReferenceSystem();\n        \t\t\tif (nativeCrs == null) {\n        \t\t\t\tthrow new ProcessException(\"The original data has no native CRS, \"\n        \t\t\t\t\t\t+ \"you need to specify the srs parameter\");\n        \t\t\t} else {\n        \t\t\t\ttry {\n        \t\t\t\t\tInteger code = CRS.lookupEpsgCode(nativeCrs, true);\n        \t\t\t\t\tif (code == null) {\n        \t\t\t\t\t\tthrow new ProcessException(\"Could not find an EPSG code for data \"\n        \t\t\t\t\t\t\t\t+ \"native spatial reference system: \" + nativeCrs);\n        \t\t\t\t\t} else {\n        \t\t\t\t\t\ttargetSRSCode = \"EPSG:\" + code;\n        \t\t\t\t\t}\n        \t\t\t\t} catch (Exception e) {\n        \t\t\t\t\tthrow new ProcessException(\"Failed to loookup an official EPSG code for \"\n        \t\t\t\t\t\t\t+ \"the source data native \" + \"spatial reference system\", e);\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n\n        \t// import the data into the target store\n        \tSimpleFeatureType targetType;\n        \ttry {\n        \t\ttargetType = importDataIntoStore(features, name, (DataStoreInfo) storeInfo);\n        \t} catch (IOException e) {\n        \t\tthrow new ProcessException(\"Failed to import data into the target store\", e);\n        \t}\n\n        \t// now import the newly created layer into GeoServer\n        \ttry {\n        \t\tcb.setStore(storeInfo);\n\n        \t\t// build the typeInfo and set CRS if necessary\n        \t\tFeatureTypeInfo typeInfo = cb.buildFeatureType(targetType.getName());\n        \t\tif (targetSRSCode != null) {\n        \t\t\ttypeInfo.setSRS(targetSRSCode);\n        \t\t}\n        \t\tif (srsHandling != null) {\n        \t\t\ttypeInfo.setProjectionPolicy(srsHandling);\n        \t\t}\n        \t\t// compute the bounds\n        \t\tcb.setupBounds(typeInfo);\n\n        \t\t// build the layer and set a style\n        \t\tLayerInfo layerInfo = cb.buildLayer(typeInfo);\n        \t\tif (targetStyle != null) {\n        \t\t\tlayerInfo.setDefaultStyle(targetStyle);\n        \t\t}\n\n        \t\tcatalog.add(typeInfo);\n        \t\tcatalog.add(layerInfo);\n\n        \t\treturn layerInfo.prefixedName();\n        \t} catch (Exception e) {\n        \t\tthrow new ProcessException(\n        \t\t\t\t\"Failed to complete the import inside the GeoServer catalog\", e);\n        \t}\n        }\n        else if (coverage != null)\n        {\n        \ttry {\n        \t\tfinal File directory = catalog.getResourceLoader().findOrCreateDirectory(\"data\", workspace, store);\n        \t\tfinal File file = File.createTempFile(store, \".tif\", directory);\n                ((CoverageStoreInfo)storeInfo).setURL( file.toURL().toExternalForm() );\n                ((CoverageStoreInfo)storeInfo).setType(\"GeoTIFF\");\n                \n            \t// check the target crs\n                CoordinateReferenceSystem cvCrs = coverage.getCoordinateReferenceSystem();\n                String targetSRSCode = null;\n            \tif (srs != null) {\n            \t\ttry {\n            \t\t\tInteger code = CRS.lookupEpsgCode(srs, true);\n            \t\t\tif (code == null) {\n            \t\t\t\tthrow new WPSException(\"Could not find a EPSG code for \" + srs);\n            \t\t\t}\n            \t\t\ttargetSRSCode = \"EPSG:\" + code;\n            \t\t} catch (Exception e) {\n            \t\t\tthrow new ProcessException(\"Could not lookup the EPSG code for the provided srs\", e);\n            \t\t}\n            \t} else {\n            \t\t// check we can extract a code from the original data\n            \t\tif (cvCrs == null) {\n            \t\t\t// data is geometryless, we need a fake SRS\n            \t\t\ttargetSRSCode = \"EPSG:4326\";\n            \t\t\tsrsHandling = ProjectionPolicy.FORCE_DECLARED;\n            \t\t\tsrs = DefaultGeographicCRS.WGS84;\n            \t\t} else {\n            \t\t\tCoordinateReferenceSystem nativeCrs = cvCrs;\n            \t\t\tif (nativeCrs == null) {\n            \t\t\t\tthrow new ProcessException(\"The original data has no native CRS, \"\n            \t\t\t\t\t\t+ \"you need to specify the srs parameter\");\n            \t\t\t} else {\n            \t\t\t\ttry {\n            \t\t\t\t\tInteger code = CRS.lookupEpsgCode(nativeCrs, true);\n            \t\t\t\t\tif (code == null) {\n            \t\t\t\t\t\tthrow new ProcessException(\"Could not find an EPSG code for data \"\n            \t\t\t\t\t\t\t\t+ \"native spatial reference system: \" + nativeCrs);\n            \t\t\t\t\t} else {\n            \t\t\t\t\t\ttargetSRSCode = \"EPSG:\" + code;\n            \t\t\t\t\t\tsrs = CRS.decode(targetSRSCode, true);\n            \t\t\t\t\t}\n            \t\t\t\t} catch (Exception e) {\n            \t\t\t\t\tthrow new ProcessException(\"Failed to loookup an official EPSG code for \"\n            \t\t\t\t\t\t\t+ \"the source data native \" + \"spatial reference system\", e);\n            \t\t\t\t}\n            \t\t\t}\n            \t\t}\n            \t}\n            \t\n            \tMathTransform tx = CRS.findMathTransform(cvCrs, srs);\n            \t\n            \tif (!tx.isIdentity() || !CRS.equalsIgnoreMetadata(cvCrs, srs))\n            \t{\n            \t\tcoverage = WCSUtils.resample(coverage, cvCrs, srs, null, Interpolation.getInstance(Interpolation.INTERP_NEAREST));\n            \t}\n            \t\n            \tGeoTiffWriter writer = new GeoTiffWriter(file);\n\n                // setting the write parameters for this geotiff\n                final ParameterValueGroup params = new GeoTiffFormat().getWriteParameters();\n                params.parameter(AbstractGridFormat.GEOTOOLS_WRITE_PARAMS.getName().toString()).setValue(\n                        DEFAULT_WRITE_PARAMS);\n                final GeneralParameterValue[] wps = (GeneralParameterValue[]) params.values().toArray(\n                        new GeneralParameterValue[1]);\n                \n                try {\n                    writer.write(coverage, wps);\n                } finally {\n                    try {\n                        writer.dispose();\n                    } catch (Exception e) {\n                        // we tried, no need to fuss around this one\n                    }\n                }\n                \n                //add or update the datastore info\n                if ( add ) {\n                    catalog.add( (CoverageStoreInfo)storeInfo );\n                }\n                else {\n                    catalog.save( (CoverageStoreInfo)storeInfo );\n                }\n                \n                cb.setStore( (CoverageStoreInfo)storeInfo );\n                \n                GridCoverage2DReader reader = new GeoTiffReader(file);\n                if ( reader == null ) {\n                    throw new ProcessException( \"Could not aquire reader for coverage.\" );\n                }\n                \n                // coverage read params\n                final Map customParameters = new HashMap();\n                /*String useJAIImageReadParam = \"USE_JAI_IMAGEREAD\";\n                if (useJAIImageReadParam != null) {\n                \tcustomParameters.put(AbstractGridFormat.USE_JAI_IMAGEREAD.getName().toString(), Boolean.valueOf(useJAIImageReadParam));\n                }*/\n                \n                CoverageInfo cinfo = cb.buildCoverage( reader, customParameters );\n                \n                //check if the name of the coverage was specified\n                if ( name != null ) {\n                    cinfo.setName( name );\n                }\n                \n                if ( !add ) {\n                    //update the existing\n                    CoverageInfo existing = catalog.getCoverageByCoverageStore((CoverageStoreInfo) storeInfo, name != null ? name : coverage.getName().toString() );\n                    if ( existing == null ) {\n                        //grab the first if there is only one\n                        List<CoverageInfo> coverages = catalog.getCoveragesByCoverageStore( (CoverageStoreInfo) storeInfo );\n                        if ( coverages.size() == 1 ) {\n                            existing = coverages.get(0);\n                        }\n                        if ( coverages.size() == 0 ) {\n                            //no coverages yet configured, change add flag and continue on\n                            add = true;\n                        }\n                        else {\n                            // multiple coverages, and one to configure not specified\n                            throw new ProcessException( \"Unable to determine coverage to configure.\");\n                        }\n                    }\n                    \n                    if ( existing != null ) {\n                        cb.updateCoverage(existing,cinfo);\n                        catalog.save( existing );\n                        cinfo = existing;\n                    }\n                }\n                \n                //do some post configuration, if srs is not known or unset, transform to 4326\n                if (\"UNKNOWN\".equals(cinfo.getSRS())) {\n                    //CoordinateReferenceSystem sourceCRS = cinfo.getBoundingBox().getCoordinateReferenceSystem();\n                    //CoordinateReferenceSystem targetCRS = CRS.decode(\"EPSG:4326\", true);\n                    //ReferencedEnvelope re = cinfo.getBoundingBox().transform(targetCRS, true);\n                    cinfo.setSRS( \"EPSG:4326\" );\n                    //cinfo.setCRS( targetCRS );\n                    //cinfo.setBoundingBox( re );\n                }\n\n                //add/save\n                if ( add ) {\n                    catalog.add( cinfo );\n                    \n                    LayerInfo layerInfo = cb.buildLayer( cinfo );\n                    if ( styleName != null && targetStyle != null ) {\n                    \tlayerInfo.setDefaultStyle( targetStyle );\n                    }\n                    //JD: commenting this out, these sorts of edits should be handled\n                    // with a second PUT request on the created coverage\n                    /*\n                    String styleName = form.getFirstValue(\"style\");\n                    if ( styleName != null ) {\n                        StyleInfo style = catalog.getStyleByName( styleName );\n                        if ( style != null ) {\n                            layerInfo.setDefaultStyle( style );\n                            if ( !layerInfo.getStyles().contains( style ) ) {\n                                layerInfo.getStyles().add( style );\n                            }\n                        }\n                        else {\n                            LOGGER.warning( \"Client specified style '\" + styleName + \"'but no such style exists.\");\n                        }\n                    }\n\n                    String path = form.getFirstValue( \"path\");\n                    if ( path != null ) {\n                        layerInfo.setPath( path );\n                    }\n                    */\n\n                    boolean valid = true;\n                    try {\n                        if (!catalog.validate(layerInfo, true).isEmpty()) {\n                            valid = false;\n                        }\n                    } catch (Exception e) {\n                        valid = false;\n                    }\n\n                    layerInfo.setEnabled(valid);\n                    catalog.add(layerInfo);\n                    \n                    return layerInfo.prefixedName();\n                }\n                else {\n                    catalog.save( cinfo );\n                    \n                    LayerInfo layerInfo = catalog.getLayerByName(cinfo.getName());\n                    if ( styleName != null && targetStyle != null ) {\n                    \tlayerInfo.setDefaultStyle( targetStyle );\n                    }\n                    \n                    return layerInfo.prefixedName();\n                }\n                \n            } catch (MalformedURLException e) {\n                throw new ProcessException( \"URL Error\", e );\n            } catch (IOException e) {\n                throw new ProcessException( \"I/O Exception\", e );\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tthrow new ProcessException( \"Exception\", e );\n\t\t\t}\n        }\n        \n        return null;\n    }", "signature": "String execute(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)", "full_signature": "@DescribeResult(name = \"layerName\", description = \"Name of the new featuretype, with workspace\") public String execute(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)", "class_method_signature": "ImportProcess.execute(\n            @DescribeParameter(name = \"features\", min = 0, description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"coverage\", min = 0, description = \"Input raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"workspace\", min = 0, description = \"Target workspace (default is the system default)\") String workspace,\n            @DescribeParameter(name = \"store\", min = 0, description = \"Target store (default is the workspace default)\") String store,\n            @DescribeParameter(name = \"name\", min = 0, description = \"Name of the new featuretype/coverage (default is the name of the features in the collection)\") String name,\n            @DescribeParameter(name = \"srs\", min = 0, description = \"Target coordinate reference system (default is based on source when possible)\") CoordinateReferenceSystem srs,\n            @DescribeParameter(name = \"srsHandling\", min = 0, description = \"Desired SRS handling (default is FORCE_DECLARED, others are REPROJECT_TO_DECLARED or NONE)\") ProjectionPolicy srsHandling,\n            @DescribeParameter(name = \"styleName\", min = 0, description = \"Name of the style to be associated with the layer (default is a standard geometry-specific style)\") String styleName)", "testcase": false, "constructor": false, "invocations": ["getWorkspaceByName", "getDefaultWorkspace", "setWorkspace", "getDataStoreByName", "getName", "getCoverageStoreByName", "getName", "getDefaultDataStore", "getName", "info", "toString", "getName", "buildCoverageStore", "toString", "getName", "toString", "getName", "getName", "getStyleByName", "getName", "getName", "getTypeName", "getSchema", "getLayer", "lookupEpsgCode", "getGeometryDescriptor", "getSchema", "getCoordinateReferenceSystem", "lookupEpsgCode", "importDataIntoStore", "setStore", "buildFeatureType", "getName", "setSRS", "setProjectionPolicy", "setupBounds", "buildLayer", "setDefaultStyle", "add", "add", "prefixedName", "findOrCreateDirectory", "getResourceLoader", "createTempFile", "setURL", "toExternalForm", "toURL", "setType", "getCoordinateReferenceSystem", "lookupEpsgCode", "lookupEpsgCode", "decode", "findMathTransform", "isIdentity", "equalsIgnoreMetadata", "resample", "getInstance", "getWriteParameters", "setValue", "parameter", "toString", "getName", "toArray", "values", "write", "dispose", "add", "save", "setStore", "buildCoverage", "setName", "getCoverageByCoverageStore", "toString", "getName", "getCoveragesByCoverageStore", "size", "get", "size", "updateCoverage", "save", "equals", "getSRS", "setSRS", "add", "buildLayer", "setDefaultStyle", "isEmpty", "validate", "setEnabled", "add", "prefixedName", "save", "getLayerByName", "getName", "setDefaultStyle", "prefixedName", "printStackTrace"]}, "repository": {"repo_id": 9818626, "url": "https://github.com/geosolutions-it/geoserver-enterprise", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 11, "size": 64057, "license": "licensed"}}