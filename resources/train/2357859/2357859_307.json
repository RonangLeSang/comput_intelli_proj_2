{"test_class": {"identifier": "AccessRestrictionUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String BASE_QUERY = \"*:*\";", "modifier": "private final static", "type": "String", "declarator": "BASE_QUERY = \"*:*\"", "var_name": "BASE_QUERY"}, {"original_string": "private final static String ACCESS_GROUP = \"group\";", "modifier": "private final static", "type": "String", "declarator": "ACCESS_GROUP = \"group\"", "var_name": "ACCESS_GROUP"}, {"original_string": "@Mock\n    private GlobalPermissionEvaluator globalPermissionEvaluator;", "modifier": "@Mock\n    private", "type": "GlobalPermissionEvaluator", "declarator": "globalPermissionEvaluator", "var_name": "globalPermissionEvaluator"}, {"original_string": "@Mock\n    private SearchSettings searchSettings;", "modifier": "@Mock\n    private", "type": "SearchSettings", "declarator": "searchSettings", "var_name": "searchSettings"}, {"original_string": "private AccessGroupSet accessGroups;", "modifier": "private", "type": "AccessGroupSet", "declarator": "accessGroups", "var_name": "accessGroups"}, {"original_string": "private AccessRestrictionUtil restrictionUtil;", "modifier": "private", "type": "AccessRestrictionUtil", "declarator": "restrictionUtil", "var_name": "restrictionUtil"}], "file": "solr-search/src/test/java/edu/unc/lib/dl/search/solr/util/AccessRestrictionUtilTest.java"}, "test_case": {"identifier": "addAccessAdminOnlyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addAccessAdminOnlyTest() {\n        when(searchSettings.getAllowPatronAccess()).thenReturn(false);\n\n        StringBuilder query = new StringBuilder(BASE_QUERY);\n        restrictionUtil.add(query, accessGroups);\n\n        assertEquals(BASE_QUERY + \" AND adminGroup:(\" + ACCESS_GROUP + \")\", query.toString());\n    }", "signature": "void addAccessAdminOnlyTest()", "full_signature": "@Test public void addAccessAdminOnlyTest()", "class_method_signature": "AccessRestrictionUtilTest.addAccessAdminOnlyTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAllowPatronAccess", "add", "assertEquals", "toString"]}, "focal_class": {"identifier": "AccessRestrictionUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SearchSettings searchSettings;", "modifier": "private", "type": "SearchSettings", "declarator": "searchSettings", "var_name": "searchSettings"}, {"original_string": "private boolean disablePermissionFiltering;", "modifier": "private", "type": "boolean", "declarator": "disablePermissionFiltering", "var_name": "disablePermissionFiltering"}, {"original_string": "private GlobalPermissionEvaluator globalPermissionEvaluator;", "modifier": "private", "type": "GlobalPermissionEvaluator", "declarator": "globalPermissionEvaluator", "var_name": "globalPermissionEvaluator"}], "methods": [{"identifier": "add", "parameters": "(StringBuilder query, AccessGroupSet principals)", "modifiers": "public", "return": "void", "signature": "void add(StringBuilder query, AccessGroupSet principals)", "full_signature": "public void add(StringBuilder query, AccessGroupSet principals)", "class_method_signature": "AccessRestrictionUtil.add(StringBuilder query, AccessGroupSet principals)", "testcase": false, "constructor": false}, {"identifier": "setSearchSettings", "parameters": "(SearchSettings searchSettings)", "modifiers": "public", "return": "void", "signature": "void setSearchSettings(SearchSettings searchSettings)", "full_signature": "public void setSearchSettings(SearchSettings searchSettings)", "class_method_signature": "AccessRestrictionUtil.setSearchSettings(SearchSettings searchSettings)", "testcase": false, "constructor": false}, {"identifier": "setDisablePermissionFiltering", "parameters": "(boolean disablePermissionFiltering)", "modifiers": "public", "return": "void", "signature": "void setDisablePermissionFiltering(boolean disablePermissionFiltering)", "full_signature": "public void setDisablePermissionFiltering(boolean disablePermissionFiltering)", "class_method_signature": "AccessRestrictionUtil.setDisablePermissionFiltering(boolean disablePermissionFiltering)", "testcase": false, "constructor": false}, {"identifier": "setGlobalPermissionEvaluator", "parameters": "(GlobalPermissionEvaluator globalPermissionEvaluator)", "modifiers": "public", "return": "void", "signature": "void setGlobalPermissionEvaluator(GlobalPermissionEvaluator globalPermissionEvaluator)", "full_signature": "public void setGlobalPermissionEvaluator(GlobalPermissionEvaluator globalPermissionEvaluator)", "class_method_signature": "AccessRestrictionUtil.setGlobalPermissionEvaluator(GlobalPermissionEvaluator globalPermissionEvaluator)", "testcase": false, "constructor": false}], "file": "solr-search/src/main/java/edu/unc/lib/dl/search/solr/util/AccessRestrictionUtil.java"}, "focal_method": {"identifier": "add", "parameters": "(StringBuilder query, AccessGroupSet principals)", "modifiers": "public", "return": "void", "body": "public void add(StringBuilder query, AccessGroupSet principals)\n            throws AccessRestrictionException {\n        // Skip adding permission filters if disabled\n        if (disablePermissionFiltering) {\n            return;\n        }\n\n        // Agent must provide principals\n        if (principals == null || principals.size() == 0) {\n            throw new AccessRestrictionException(\"No access groups were provided.\");\n        }\n\n        // If the agent has any global permissions then no filtering is necessary.\n        if (globalPermissionEvaluator.hasGlobalPrincipal(principals)) {\n            return;\n        }\n\n        boolean allowPatronAccess = searchSettings.getAllowPatronAccess();\n        String joinedGroups = principals.joinAccessGroups(\" OR \", null, true);\n        if (allowPatronAccess) {\n            query.append(\" AND (\").append(\"readGroup:(\").append(joinedGroups).append(')')\n                    .append(\" OR adminGroup:(\").append(joinedGroups).append(\"))\");\n        } else {\n            query.append(\" AND adminGroup:(\").append(joinedGroups).append(')');\n        }\n    }", "signature": "void add(StringBuilder query, AccessGroupSet principals)", "full_signature": "public void add(StringBuilder query, AccessGroupSet principals)", "class_method_signature": "AccessRestrictionUtil.add(StringBuilder query, AccessGroupSet principals)", "testcase": false, "constructor": false, "invocations": ["size", "hasGlobalPrincipal", "getAllowPatronAccess", "joinAccessGroups", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}