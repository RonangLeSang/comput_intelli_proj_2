{"test_class": {"identifier": "DepartmentOntologyUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DepartmentOntologyUtil job;", "modifier": "private", "type": "DepartmentOntologyUtil", "declarator": "job", "var_name": "job"}], "file": "metadata/src/test/java/edu/unc/lib/dl/xml/DepartmentOntologyUtilTest.java"}, "test_case": {"identifier": "getDepartmentHierarchyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDepartmentHierarchyTest() {\n\n        List<List<String>> result = job.getAuthoritativeForm(\"Folklore Program\");\n\n        assertEquals(\"Incorrect number of paths returned\", 1, result.size());\n        assertEquals(\"Incorrect number of path items returned\", 3, result.get(0).size());\n        assertEquals(\"Exact match did not return a result\", \"College of Arts and Sciences\", result.get(0).get(0));\n        assertEquals(\"Incorrect second tier\", \"Department of American Studies\", result.get(0).get(1));\n        assertEquals(\"Folklore Program\", result.get(0).get(2));\n\n    }", "signature": "void getDepartmentHierarchyTest()", "full_signature": "@Test public void getDepartmentHierarchyTest()", "class_method_signature": "DepartmentOntologyUtilTest.getDepartmentHierarchyTest()", "testcase": true, "constructor": false, "invocations": ["getAuthoritativeForm", "assertEquals", "size", "assertEquals", "size", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "DepartmentOntologyUtil", "superclass": "", "interfaces": "implements VocabularyHelper", "fields": [{"original_string": "private static final Logger log = LoggerFactory\n            .getLogger(DepartmentOntologyUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory\n            .getLogger(DepartmentOntologyUtil.class)", "var_name": "log"}, {"original_string": "private Map<String, DepartmentConcept> departments;", "modifier": "private", "type": "Map<String, DepartmentConcept>", "declarator": "departments", "var_name": "departments"}, {"original_string": "private final String UNC_NAME = \"university of north carolina\";", "modifier": "private final", "type": "String", "declarator": "UNC_NAME = \"university of north carolina\"", "var_name": "UNC_NAME"}, {"original_string": "private final Pattern addressPattern;", "modifier": "private final", "type": "Pattern", "declarator": "addressPattern", "var_name": "addressPattern"}, {"original_string": "private final Pattern addressTrailingPattern;", "modifier": "private final", "type": "Pattern", "declarator": "addressTrailingPattern", "var_name": "addressTrailingPattern"}, {"original_string": "private final Pattern addressSplit;", "modifier": "private final", "type": "Pattern", "declarator": "addressSplit", "var_name": "addressSplit"}, {"original_string": "private final Pattern trimLeading;", "modifier": "private final", "type": "Pattern", "declarator": "trimLeading", "var_name": "trimLeading"}, {"original_string": "private final Pattern trimTrailing;", "modifier": "private final", "type": "Pattern", "declarator": "trimTrailing", "var_name": "trimTrailing"}, {"original_string": "private final Pattern deptSplitPlural;", "modifier": "private final", "type": "Pattern", "declarator": "deptSplitPlural", "var_name": "deptSplitPlural"}, {"original_string": "private final Pattern trimSuffix;", "modifier": "private final", "type": "Pattern", "declarator": "trimSuffix", "var_name": "trimSuffix"}, {"original_string": "private final Pattern trimUNC;", "modifier": "private final", "type": "Pattern", "declarator": "trimUNC", "var_name": "trimUNC"}, {"original_string": "private final Pattern splitSimple;", "modifier": "private final", "type": "Pattern", "declarator": "splitSimple", "var_name": "splitSimple"}, {"original_string": "private XPathExpression<Element> namePath;", "modifier": "private", "type": "XPathExpression<Element>", "declarator": "namePath", "var_name": "namePath"}, {"original_string": "private String vocabularyURI;", "modifier": "private", "type": "String", "declarator": "vocabularyURI", "var_name": "vocabularyURI"}, {"original_string": "private static final String locationTermPattern =\n            \"dep(t\\\\.?|artment(s)?)|school|division|section(s)?|program in|center for|university\";", "modifier": "private static final", "type": "String", "declarator": "locationTermPattern =\n            \"dep(t\\\\.?|artment(s)?)|school|division|section(s)?|program in|center for|university\"", "var_name": "locationTermPattern"}], "methods": [{"identifier": "DepartmentOntologyUtil", "parameters": "()", "modifiers": "public", "return": "", "signature": " DepartmentOntologyUtil()", "full_signature": "public  DepartmentOntologyUtil()", "class_method_signature": "DepartmentOntologyUtil.DepartmentOntologyUtil()", "testcase": false, "constructor": true}, {"identifier": "getAuthoritativeForm", "parameters": "(final String affiliation)", "modifiers": "@Override public", "return": "List<List<String>>", "signature": "List<List<String>> getAuthoritativeForm(final String affiliation)", "full_signature": "@Override public List<List<String>> getAuthoritativeForm(final String affiliation)", "class_method_signature": "DepartmentOntologyUtil.getAuthoritativeForm(final String affiliation)", "testcase": false, "constructor": false}, {"identifier": "getAuthoritativeForms", "parameters": "(final Element docElement)", "modifiers": "@Override public", "return": "List<List<String>>", "signature": "List<List<String>> getAuthoritativeForms(final Element docElement)", "full_signature": "@Override public List<List<String>> getAuthoritativeForms(final Element docElement)", "class_method_signature": "DepartmentOntologyUtil.getAuthoritativeForms(final Element docElement)", "testcase": false, "constructor": false}, {"identifier": "updateDocumentTerms", "parameters": "(final Element docElement)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateDocumentTerms(final Element docElement)", "full_signature": "@Override public boolean updateDocumentTerms(final Element docElement)", "class_method_signature": "DepartmentOntologyUtil.updateDocumentTerms(final Element docElement)", "testcase": false, "constructor": false}, {"identifier": "addAffiliation", "parameters": "(final String dept, final Element parentEl,\n            final int affilIndex, final Set<String> affiliationSet)", "modifiers": "private", "return": "boolean", "signature": "boolean addAffiliation(final String dept, final Element parentEl,\n            final int affilIndex, final Set<String> affiliationSet)", "full_signature": "private boolean addAffiliation(final String dept, final Element parentEl,\n            final int affilIndex, final Set<String> affiliationSet)", "class_method_signature": "DepartmentOntologyUtil.addAffiliation(final String dept, final Element parentEl,\n            final int affilIndex, final Set<String> affiliationSet)", "testcase": false, "constructor": false}, {"identifier": "getAddressDepartment", "parameters": "(final String[] addressParts)", "modifiers": "private", "return": "List<List<String>>", "signature": "List<List<String>> getAddressDepartment(final String[] addressParts)", "full_signature": "private List<List<String>> getAddressDepartment(final String[] addressParts)", "class_method_signature": "DepartmentOntologyUtil.getAddressDepartment(final String[] addressParts)", "testcase": false, "constructor": false}, {"identifier": "getDepartment", "parameters": "(final String affiliation)", "modifiers": "private", "return": "List<List<String>>", "signature": "List<List<String>> getDepartment(final String affiliation)", "full_signature": "private List<List<String>> getDepartment(final String affiliation)", "class_method_signature": "DepartmentOntologyUtil.getDepartment(final String affiliation)", "testcase": false, "constructor": false}, {"identifier": "buildHierarchy", "parameters": "(final DepartmentConcept dept)", "modifiers": "private", "return": "List<List<String>>", "signature": "List<List<String>> buildHierarchy(final DepartmentConcept dept)", "full_signature": "private List<List<String>> buildHierarchy(final DepartmentConcept dept)", "class_method_signature": "DepartmentOntologyUtil.buildHierarchy(final DepartmentConcept dept)", "testcase": false, "constructor": false}, {"identifier": "walkHierarchy", "parameters": "(final DepartmentConcept dept,\n            final ArrayDeque<String> deptStack, final List<List<String>> deptPaths)", "modifiers": "private", "return": "void", "signature": "void walkHierarchy(final DepartmentConcept dept,\n            final ArrayDeque<String> deptStack, final List<List<String>> deptPaths)", "full_signature": "private void walkHierarchy(final DepartmentConcept dept,\n            final ArrayDeque<String> deptStack, final List<List<String>> deptPaths)", "class_method_signature": "DepartmentOntologyUtil.walkHierarchy(final DepartmentConcept dept,\n            final ArrayDeque<String> deptStack, final List<List<String>> deptPaths)", "testcase": false, "constructor": false}, {"identifier": "determineStyle", "parameters": "(final String affiliation)", "modifiers": "private", "return": "AffiliationStyle", "signature": "AffiliationStyle determineStyle(final String affiliation)", "full_signature": "private AffiliationStyle determineStyle(final String affiliation)", "class_method_signature": "DepartmentOntologyUtil.determineStyle(final String affiliation)", "testcase": false, "constructor": false}, {"identifier": "parseVocabulary", "parameters": "(final byte[] content)", "modifiers": "private", "return": "void", "signature": "void parseVocabulary(final byte[] content)", "full_signature": "private void parseVocabulary(final byte[] content)", "class_method_signature": "DepartmentOntologyUtil.parseVocabulary(final byte[] content)", "testcase": false, "constructor": false}, {"identifier": "collapsePaths", "parameters": "(final List<List<String>> paths)", "modifiers": "public static", "return": "void", "signature": "void collapsePaths(final List<List<String>> paths)", "full_signature": "public static void collapsePaths(final List<List<String>> paths)", "class_method_signature": "DepartmentOntologyUtil.collapsePaths(final List<List<String>> paths)", "testcase": false, "constructor": false}, {"identifier": "cleanLabel", "parameters": "(String label)", "modifiers": "private static", "return": "String", "signature": "String cleanLabel(String label)", "full_signature": "private static String cleanLabel(String label)", "class_method_signature": "DepartmentOntologyUtil.cleanLabel(String label)", "testcase": false, "constructor": false}, {"identifier": "addLabels", "parameters": "(final DepartmentConcept dept)", "modifiers": "private", "return": "void", "signature": "void addLabels(final DepartmentConcept dept)", "full_signature": "private void addLabels(final DepartmentConcept dept)", "class_method_signature": "DepartmentOntologyUtil.addLabels(final DepartmentConcept dept)", "testcase": false, "constructor": false}, {"identifier": "getInvalidTerms", "parameters": "(final Element modsRoot)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getInvalidTerms(final Element modsRoot)", "full_signature": "@Override public Set<String> getInvalidTerms(final Element modsRoot)", "class_method_signature": "DepartmentOntologyUtil.getInvalidTerms(final Element modsRoot)", "testcase": false, "constructor": false}, {"identifier": "getInvalidTermsWithPrefix", "parameters": "(final Element modsRoot)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getInvalidTermsWithPrefix(final Element modsRoot)", "full_signature": "@Override public Set<String> getInvalidTermsWithPrefix(final Element modsRoot)", "class_method_signature": "DepartmentOntologyUtil.getInvalidTermsWithPrefix(final Element modsRoot)", "testcase": false, "constructor": false}, {"identifier": "getInvalidTerms", "parameters": "(final Element modsRoot, final boolean includePrefix)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getInvalidTerms(final Element modsRoot, final boolean includePrefix)", "full_signature": "public Set<String> getInvalidTerms(final Element modsRoot, final boolean includePrefix)", "class_method_signature": "DepartmentOntologyUtil.getInvalidTerms(final Element modsRoot, final boolean includePrefix)", "testcase": false, "constructor": false}, {"identifier": "getDepartments", "parameters": "()", "modifiers": "public", "return": "Map<String, DepartmentConcept>", "signature": "Map<String, DepartmentConcept> getDepartments()", "full_signature": "public Map<String, DepartmentConcept> getDepartments()", "class_method_signature": "DepartmentOntologyUtil.getDepartments()", "testcase": false, "constructor": false}, {"identifier": "setSelector", "parameters": "(final String selector)", "modifiers": "@Override public", "return": "void", "signature": "void setSelector(final String selector)", "full_signature": "@Override public void setSelector(final String selector)", "class_method_signature": "DepartmentOntologyUtil.setSelector(final String selector)", "testcase": false, "constructor": false}, {"identifier": "getNamePath", "parameters": "()", "modifiers": "public", "return": "XPathExpression<Element>", "signature": "XPathExpression<Element> getNamePath()", "full_signature": "public XPathExpression<Element> getNamePath()", "class_method_signature": "DepartmentOntologyUtil.getNamePath()", "testcase": false, "constructor": false}, {"identifier": "getVocabularyTerms", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getVocabularyTerms()", "full_signature": "@Override public Collection<String> getVocabularyTerms()", "class_method_signature": "DepartmentOntologyUtil.getVocabularyTerms()", "testcase": false, "constructor": false}, {"identifier": "getInvalidTermPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getInvalidTermPrefix()", "full_signature": "@Override public String getInvalidTermPrefix()", "class_method_signature": "DepartmentOntologyUtil.getInvalidTermPrefix()", "testcase": false, "constructor": false}, {"identifier": "setContent", "parameters": "(final byte[] content)", "modifiers": "@Override public", "return": "void", "signature": "void setContent(final byte[] content)", "full_signature": "@Override public void setContent(final byte[] content)", "class_method_signature": "DepartmentOntologyUtil.setContent(final byte[] content)", "testcase": false, "constructor": false}, {"identifier": "getVocabularyURI", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVocabularyURI()", "full_signature": "@Override public String getVocabularyURI()", "class_method_signature": "DepartmentOntologyUtil.getVocabularyURI()", "testcase": false, "constructor": false}, {"identifier": "setVocabularyURI", "parameters": "(final String vocabularyURI)", "modifiers": "@Override public", "return": "void", "signature": "void setVocabularyURI(final String vocabularyURI)", "full_signature": "@Override public void setVocabularyURI(final String vocabularyURI)", "class_method_signature": "DepartmentOntologyUtil.setVocabularyURI(final String vocabularyURI)", "testcase": false, "constructor": false}, {"identifier": "setSelectorNamespaces", "parameters": "(final Namespace[] namespaces)", "modifiers": "@Override public", "return": "void", "signature": "void setSelectorNamespaces(final Namespace[] namespaces)", "full_signature": "@Override public void setSelectorNamespaces(final Namespace[] namespaces)", "class_method_signature": "DepartmentOntologyUtil.setSelectorNamespaces(final Namespace[] namespaces)", "testcase": false, "constructor": false}, {"identifier": "getSelector", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSelector()", "full_signature": "@Override public String getSelector()", "class_method_signature": "DepartmentOntologyUtil.getSelector()", "testcase": false, "constructor": false}], "file": "metadata/src/main/java/edu/unc/lib/dl/xml/DepartmentOntologyUtil.java"}, "focal_method": {"identifier": "getAuthoritativeForm", "parameters": "(final String affiliation)", "modifiers": "@Override public", "return": "List<List<String>>", "body": "@Override\n    public List<List<String>> getAuthoritativeForm(final String affiliation) {\n\n        String cleanAffil = cleanLabel(affiliation);\n\n        // First, check to see if the department matches verbatim.\n        DepartmentConcept dept = departments.get(cleanAffil);\n        if (dept != null) {\n            return buildHierarchy(dept);\n        }\n\n        AffiliationStyle style = this.determineStyle(cleanAffil);\n        switch (style) {\n        case notApplicable:\n            // log.debug(\"Affiliation {} was determined to not be applicable\",\n            // affiliation);\n            return null;\n\n        case address:\n            // Affiliation is in address format, so split it into components by\n            // commas\n            List<List<String>> resultDepts = getAddressDepartment(addressSplit\n                    .split(cleanAffil));\n\n            if (resultDepts != null) {\n                return resultDepts;\n            }\n\n            return getAddressDepartment(cleanAffil.split(\"\\\\s*,\\\\s*\"));\n\n        case simple:\n            // Clean it up and start\n            String[] affilParts = splitSimple.split(cleanAffil);\n            for (int i = affilParts.length - 1; i >= 0; i--) {\n                String affilPart = affilParts[i];\n\n                List<List<String>> result = getDepartment(affilPart);\n                if (result != null) {\n                    return result;\n                }\n            }\n            break;\n        }\n\n        return null;\n    }", "signature": "List<List<String>> getAuthoritativeForm(final String affiliation)", "full_signature": "@Override public List<List<String>> getAuthoritativeForm(final String affiliation)", "class_method_signature": "DepartmentOntologyUtil.getAuthoritativeForm(final String affiliation)", "testcase": false, "constructor": false, "invocations": ["cleanLabel", "get", "buildHierarchy", "determineStyle", "getAddressDepartment", "split", "getAddressDepartment", "split", "split", "getDepartment"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}