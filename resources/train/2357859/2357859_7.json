{"test_class": {"identifier": "WorkObjectTest", "superclass": "extends AbstractFedoraTest", "interfaces": "", "fields": [{"original_string": "private static final String FILENAME = \"file.txt\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME = \"file.txt\"", "var_name": "FILENAME"}, {"original_string": "private static final String MIMETYPE = \"plain/txt\";", "modifier": "private static final", "type": "String", "declarator": "MIMETYPE = \"plain/txt\"", "var_name": "MIMETYPE"}, {"original_string": "private static final String SHA1 = \"sha\";", "modifier": "private static final", "type": "String", "declarator": "SHA1 = \"sha\"", "var_name": "SHA1"}, {"original_string": "private static final String MD5 = \"md5\";", "modifier": "private static final", "type": "String", "declarator": "MD5 = \"md5\"", "var_name": "MD5"}, {"original_string": "private PID pid;", "modifier": "private", "type": "PID", "declarator": "pid", "var_name": "pid"}, {"original_string": "private WorkObject work;", "modifier": "private", "type": "WorkObject", "declarator": "work", "var_name": "work"}, {"original_string": "@Mock\n    private FileObject fileObj;", "modifier": "@Mock\n    private", "type": "FileObject", "declarator": "fileObj", "var_name": "fileObj"}, {"original_string": "private URI contentUri;", "modifier": "private", "type": "URI", "declarator": "contentUri", "var_name": "contentUri"}, {"original_string": "private List<String> types;", "modifier": "private", "type": "List<String>", "declarator": "types", "var_name": "types"}, {"original_string": "private Model model;", "modifier": "private", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "private Resource resc;", "modifier": "private", "type": "Resource", "declarator": "resc", "var_name": "resc"}], "file": "fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/WorkObjectTest.java"}, "test_case": {"identifier": "getNoPrimaryObjectTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNoPrimaryObjectTest() {\n        FileObject resultObj = work.getPrimaryObject();\n\n        assertNull(resultObj);\n        verify(driver, never()).getRepositoryObject(any(PID.class), eq(FileObject.class));\n    }", "signature": "void getNoPrimaryObjectTest()", "full_signature": "@Test public void getNoPrimaryObjectTest()", "class_method_signature": "WorkObjectTest.getNoPrimaryObjectTest()", "testcase": true, "constructor": false, "invocations": ["getPrimaryObject", "assertNull", "getRepositoryObject", "verify", "never", "any", "eq"]}, "focal_class": {"identifier": "WorkObject", "superclass": "extends ContentContainerObject", "interfaces": "", "fields": [], "methods": [{"identifier": "WorkObject", "parameters": "(PID pid, RepositoryObjectDriver driver, RepositoryObjectFactory repoObjFactory)", "modifiers": "protected", "return": "", "signature": " WorkObject(PID pid, RepositoryObjectDriver driver, RepositoryObjectFactory repoObjFactory)", "full_signature": "protected  WorkObject(PID pid, RepositoryObjectDriver driver, RepositoryObjectFactory repoObjFactory)", "class_method_signature": "WorkObject.WorkObject(PID pid, RepositoryObjectDriver driver, RepositoryObjectFactory repoObjFactory)", "testcase": false, "constructor": true}, {"identifier": "validateType", "parameters": "()", "modifiers": "@Override public", "return": "WorkObject", "signature": "WorkObject validateType()", "full_signature": "@Override public WorkObject validateType()", "class_method_signature": "WorkObject.validateType()", "testcase": false, "constructor": false}, {"identifier": "clearPrimaryObject", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearPrimaryObject()", "full_signature": "public void clearPrimaryObject()", "class_method_signature": "WorkObject.clearPrimaryObject()", "testcase": false, "constructor": false}, {"identifier": "setPrimaryObject", "parameters": "(PID primaryPid)", "modifiers": "public", "return": "void", "signature": "void setPrimaryObject(PID primaryPid)", "full_signature": "public void setPrimaryObject(PID primaryPid)", "class_method_signature": "WorkObject.setPrimaryObject(PID primaryPid)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryObject", "parameters": "()", "modifiers": "public", "return": "FileObject", "signature": "FileObject getPrimaryObject()", "full_signature": "public FileObject getPrimaryObject()", "class_method_signature": "WorkObject.getPrimaryObject()", "testcase": false, "constructor": false}, {"identifier": "addMember", "parameters": "(ContentObject member)", "modifiers": "@Override public", "return": "ContentContainerObject", "signature": "ContentContainerObject addMember(ContentObject member)", "full_signature": "@Override public ContentContainerObject addMember(ContentObject member)", "class_method_signature": "WorkObject.addMember(ContentObject member)", "testcase": false, "constructor": false}, {"identifier": "addDataFile", "parameters": "(URI storageUri, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum)", "modifiers": "public", "return": "FileObject", "signature": "FileObject addDataFile(URI storageUri, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum)", "full_signature": "public FileObject addDataFile(URI storageUri, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum)", "class_method_signature": "WorkObject.addDataFile(URI storageUri, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum)", "testcase": false, "constructor": false}, {"identifier": "addDataFile", "parameters": "(URI storageUri, String filename,\n            String mimetype, String sha1Checksum, String md5Checksum, Model model)", "modifiers": "public", "return": "FileObject", "signature": "FileObject addDataFile(URI storageUri, String filename,\n            String mimetype, String sha1Checksum, String md5Checksum, Model model)", "full_signature": "public FileObject addDataFile(URI storageUri, String filename,\n            String mimetype, String sha1Checksum, String md5Checksum, Model model)", "class_method_signature": "WorkObject.addDataFile(URI storageUri, String filename,\n            String mimetype, String sha1Checksum, String md5Checksum, Model model)", "testcase": false, "constructor": false}, {"identifier": "addDataFile", "parameters": "(PID filePid, URI storageUri, String filename,\n            String mimetype, String sha1Checksum, String md5Checksum, Model model)", "modifiers": "public", "return": "FileObject", "signature": "FileObject addDataFile(PID filePid, URI storageUri, String filename,\n            String mimetype, String sha1Checksum, String md5Checksum, Model model)", "full_signature": "public FileObject addDataFile(PID filePid, URI storageUri, String filename,\n            String mimetype, String sha1Checksum, String md5Checksum, Model model)", "class_method_signature": "WorkObject.addDataFile(PID filePid, URI storageUri, String filename,\n            String mimetype, String sha1Checksum, String md5Checksum, Model model)", "testcase": false, "constructor": false}], "file": "fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/WorkObject.java"}, "focal_method": {"identifier": "getPrimaryObject", "parameters": "()", "modifiers": "public", "return": "FileObject", "body": "public FileObject getPrimaryObject() {\n        Resource resc = getResource();\n        // Find the primary object relation if it is present\n        Statement primaryStmt = resc.getProperty(Cdr.primaryObject);\n        if (primaryStmt == null) {\n            return null;\n        }\n\n        PID primaryPid = PIDs.get(primaryStmt.getResource().getURI());\n        return driver.getRepositoryObject(primaryPid, FileObject.class);\n    }", "signature": "FileObject getPrimaryObject()", "full_signature": "public FileObject getPrimaryObject()", "class_method_signature": "WorkObject.getPrimaryObject()", "testcase": false, "constructor": false, "invocations": ["getResource", "getProperty", "get", "getURI", "getResource", "getRepositoryObject"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}