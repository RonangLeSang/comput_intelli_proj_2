{"test_class": {"identifier": "SimpleObjectDepositHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILENAME = \"test.txt\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME = \"test.txt\"", "var_name": "FILENAME"}, {"original_string": "private static final String MIMETYPE = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "MIMETYPE = \"text/plain\"", "var_name": "MIMETYPE"}, {"original_string": "private static final String DEPOSITOR = \"adminuser\";", "modifier": "private static final", "type": "String", "declarator": "DEPOSITOR = \"adminuser\"", "var_name": "DEPOSITOR"}, {"original_string": "private static final String DEPOSITOR_EMAIL = \"adminuser@example.com\";", "modifier": "private static final", "type": "String", "declarator": "DEPOSITOR_EMAIL = \"adminuser@example.com\"", "var_name": "DEPOSITOR_EMAIL"}, {"original_string": "private static final String FILE_CONTENT = \"Simply content\";", "modifier": "private static final", "type": "String", "declarator": "FILE_CONTENT = \"Simply content\"", "var_name": "FILE_CONTENT"}, {"original_string": "private static final String DEPOSIT_METHOD = \"unitTest\";", "modifier": "private static final", "type": "String", "declarator": "DEPOSIT_METHOD = \"unitTest\"", "var_name": "DEPOSIT_METHOD"}, {"original_string": "@Rule\n    public final TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}, {"original_string": "@Mock\n    private RepositoryPIDMinter pidMinter;", "modifier": "@Mock\n    private", "type": "RepositoryPIDMinter", "declarator": "pidMinter", "var_name": "pidMinter"}, {"original_string": "@Mock\n    private DepositStatusFactory depositStatusFactory;", "modifier": "@Mock\n    private", "type": "DepositStatusFactory", "declarator": "depositStatusFactory", "var_name": "depositStatusFactory"}, {"original_string": "@Captor\n    private ArgumentCaptor<Map<String, String>> statusCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Map<String, String>>", "declarator": "statusCaptor", "var_name": "statusCaptor"}, {"original_string": "private File depositsDir;", "modifier": "private", "type": "File", "declarator": "depositsDir", "var_name": "depositsDir"}, {"original_string": "private PID destPid;", "modifier": "private", "type": "PID", "declarator": "destPid", "var_name": "destPid"}, {"original_string": "private PID depositPid;", "modifier": "private", "type": "PID", "declarator": "depositPid", "var_name": "depositPid"}, {"original_string": "private AgentPrincipals depositingAgent;", "modifier": "private", "type": "AgentPrincipals", "declarator": "depositingAgent", "var_name": "depositingAgent"}, {"original_string": "private AccessGroupSet testPrincipals;", "modifier": "private", "type": "AccessGroupSet", "declarator": "testPrincipals", "var_name": "testPrincipals"}, {"original_string": "private SimpleObjectDepositHandler depositHandler;", "modifier": "private", "type": "SimpleObjectDepositHandler", "declarator": "depositHandler", "var_name": "depositHandler"}], "file": "persistence/src/test/java/edu/unc/lib/dl/persist/services/ingest/SimpleObjectDepositHandlerTest.java"}, "test_case": {"identifier": "testFilenameWithModifiers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFilenameWithModifiers() throws Exception {\n        String modifierFilename = \".././\" + FILENAME;\n        InputStream fileStream = new ByteArrayInputStream(FILE_CONTENT.getBytes());\n        DepositData deposit = new DepositData(fileStream, modifierFilename, MIMETYPE,\n                SIMPLE_OBJECT, DEPOSIT_METHOD, depositingAgent);\n        deposit.setDepositorEmail(DEPOSITOR_EMAIL);\n\n        PID depositPid = depositHandler.doDeposit(destPid, deposit);\n\n        verify(depositStatusFactory).save(eq(depositPid.getId()), statusCaptor.capture());\n        Map<String, String> status = statusCaptor.getValue();\n\n        verifyDepositFields(depositPid, status);\n    }", "signature": "void testFilenameWithModifiers()", "full_signature": "@Test public void testFilenameWithModifiers()", "class_method_signature": "SimpleObjectDepositHandlerTest.testFilenameWithModifiers()", "testcase": true, "constructor": false, "invocations": ["getBytes", "setDepositorEmail", "doDeposit", "save", "verify", "eq", "getId", "capture", "getValue", "verifyDepositFields"]}, "focal_class": {"identifier": "SimpleObjectDepositHandler", "superclass": "extends AbstractDepositHandler", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory\n            .getLogger(SimpleObjectDepositHandler.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory\n            .getLogger(SimpleObjectDepositHandler.class)", "var_name": "log"}], "methods": [{"identifier": "doDeposit", "parameters": "(PID destination, DepositData deposit)", "modifiers": "@Override public", "return": "PID", "signature": "PID doDeposit(PID destination, DepositData deposit)", "full_signature": "@Override public PID doDeposit(PID destination, DepositData deposit)", "class_method_signature": "SimpleObjectDepositHandler.doDeposit(PID destination, DepositData deposit)", "testcase": false, "constructor": false}], "file": "persistence/src/main/java/edu/unc/lib/dl/persist/services/ingest/SimpleObjectDepositHandler.java"}, "focal_method": {"identifier": "doDeposit", "parameters": "(PID destination, DepositData deposit)", "modifiers": "@Override public", "return": "PID", "body": "@Override\n    public PID doDeposit(PID destination, DepositData deposit) throws DepositException {\n        log.debug(\"Preparing to perform a Simple Object deposit to {}\",\n                destination.getQualifiedId());\n\n        PID depositPID = pidMinter.mintDepositRecordPid();\n\n        File created = writeStreamToDataDir(depositPID, deposit);\n        deposit.setSourceUri(created.toPath().normalize().toUri());\n\n        Map<String, String> options = new HashMap<>();\n        options.put(DepositField.excludeDepositRecord.name(), \"true\");\n\n        registerDeposit(depositPID, destination, deposit, options);\n\n        return depositPID;\n    }", "signature": "PID doDeposit(PID destination, DepositData deposit)", "full_signature": "@Override public PID doDeposit(PID destination, DepositData deposit)", "class_method_signature": "SimpleObjectDepositHandler.doDeposit(PID destination, DepositData deposit)", "testcase": false, "constructor": false, "invocations": ["debug", "getQualifiedId", "mintDepositRecordPid", "writeStreamToDataDir", "setSourceUri", "toUri", "normalize", "toPath", "put", "name", "registerDeposit"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}