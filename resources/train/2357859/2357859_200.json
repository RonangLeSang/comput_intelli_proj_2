{"test_class": {"identifier": "GlobalPermissionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String PRINC_GRP1 = \"group1\";", "modifier": "private final static", "type": "String", "declarator": "PRINC_GRP1 = \"group1\"", "var_name": "PRINC_GRP1"}, {"original_string": "private final static String PRINC_GRP2 = \"group2\";", "modifier": "private final static", "type": "String", "declarator": "PRINC_GRP2 = \"group2\"", "var_name": "PRINC_GRP2"}, {"original_string": "private Set<String> principals;", "modifier": "private", "type": "Set<String>", "declarator": "principals", "var_name": "principals"}, {"original_string": "private Properties configProperties;", "modifier": "private", "type": "Properties", "declarator": "configProperties", "var_name": "configProperties"}, {"original_string": "private GlobalPermissionEvaluator evaluator;", "modifier": "private", "type": "GlobalPermissionEvaluator", "declarator": "evaluator", "var_name": "evaluator"}], "file": "fcrepo-clients/src/test/java/edu/unc/lib/dl/acl/fcrepo4/GlobalPermissionEvaluatorTest.java"}, "test_case": {"identifier": "getNoGlobalUserRoles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNoGlobalUserRoles() {\n        addGlobalAssignment(UserRole.canDescribe, PRINC_GRP2);\n\n        evaluator = new GlobalPermissionEvaluator(configProperties);\n\n        Set<UserRole> roles = evaluator.getGlobalUserRoles(principals);\n\n        assertTrue(roles.isEmpty());\n    }", "signature": "void getNoGlobalUserRoles()", "full_signature": "@Test public void getNoGlobalUserRoles()", "class_method_signature": "GlobalPermissionEvaluatorTest.getNoGlobalUserRoles()", "testcase": true, "constructor": false, "invocations": ["addGlobalAssignment", "getGlobalUserRoles", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "GlobalPermissionEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String GLOBAL_PROP_PREFIX = \"cdr.acl.globalRoles.\";", "modifier": "protected static final", "type": "String", "declarator": "GLOBAL_PROP_PREFIX = \"cdr.acl.globalRoles.\"", "var_name": "GLOBAL_PROP_PREFIX"}, {"original_string": "private Map<String, Set<String>> globalPrincipalToPermissions;", "modifier": "private", "type": "Map<String, Set<String>>", "declarator": "globalPrincipalToPermissions", "var_name": "globalPrincipalToPermissions"}, {"original_string": "private Map<String, UserRole> globalPrincipalToRole;", "modifier": "private", "type": "Map<String, UserRole>", "declarator": "globalPrincipalToRole", "var_name": "globalPrincipalToRole"}, {"original_string": "private Set<String> globalPrincipals;", "modifier": "private", "type": "Set<String>", "declarator": "globalPrincipals", "var_name": "globalPrincipals"}], "methods": [{"identifier": "GlobalPermissionEvaluator", "parameters": "(Properties properties)", "modifiers": "public", "return": "", "signature": " GlobalPermissionEvaluator(Properties properties)", "full_signature": "public  GlobalPermissionEvaluator(Properties properties)", "class_method_signature": "GlobalPermissionEvaluator.GlobalPermissionEvaluator(Properties properties)", "testcase": false, "constructor": true}, {"identifier": "storeGlobalPrincipals", "parameters": "(Properties properties)", "modifiers": "private", "return": "void", "signature": "void storeGlobalPrincipals(Properties properties)", "full_signature": "private void storeGlobalPrincipals(Properties properties)", "class_method_signature": "GlobalPermissionEvaluator.storeGlobalPrincipals(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "hasGlobalPermission", "parameters": "(Set<String> agentPrincipals, Permission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasGlobalPermission(Set<String> agentPrincipals, Permission permission)", "full_signature": "public boolean hasGlobalPermission(Set<String> agentPrincipals, Permission permission)", "class_method_signature": "GlobalPermissionEvaluator.hasGlobalPermission(Set<String> agentPrincipals, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "hasGlobalPrincipal", "parameters": "(Set<String> agentPrincipals)", "modifiers": "public", "return": "boolean", "signature": "boolean hasGlobalPrincipal(Set<String> agentPrincipals)", "full_signature": "public boolean hasGlobalPrincipal(Set<String> agentPrincipals)", "class_method_signature": "GlobalPermissionEvaluator.hasGlobalPrincipal(Set<String> agentPrincipals)", "testcase": false, "constructor": false}, {"identifier": "getGlobalUserRoles", "parameters": "(Set<String> agentPrincipals)", "modifiers": "public", "return": "Set<UserRole>", "signature": "Set<UserRole> getGlobalUserRoles(Set<String> agentPrincipals)", "full_signature": "public Set<UserRole> getGlobalUserRoles(Set<String> agentPrincipals)", "class_method_signature": "GlobalPermissionEvaluator.getGlobalUserRoles(Set<String> agentPrincipals)", "testcase": false, "constructor": false}], "file": "fcrepo-clients/src/main/java/edu/unc/lib/dl/acl/fcrepo4/GlobalPermissionEvaluator.java"}, "focal_method": {"identifier": "getGlobalUserRoles", "parameters": "(Set<String> agentPrincipals)", "modifiers": "public", "return": "Set<UserRole>", "body": "public Set<UserRole> getGlobalUserRoles(Set<String> agentPrincipals) {\n        return agentPrincipals.stream()\n                .filter(p -> globalPrincipalToRole.containsKey(p))\n                .map(p -> globalPrincipalToRole.get(p))\n                .collect(Collectors.toSet());\n    }", "signature": "Set<UserRole> getGlobalUserRoles(Set<String> agentPrincipals)", "full_signature": "public Set<UserRole> getGlobalUserRoles(Set<String> agentPrincipals)", "class_method_signature": "GlobalPermissionEvaluator.getGlobalUserRoles(Set<String> agentPrincipals)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "filter", "stream", "containsKey", "get", "toSet"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}