{"test_class": {"identifier": "RegisterToLongleafProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RepositoryPIDMinter pidMinter;", "modifier": "private", "type": "RepositoryPIDMinter", "declarator": "pidMinter", "var_name": "pidMinter"}, {"original_string": "private PID filePid;", "modifier": "private", "type": "PID", "declarator": "filePid", "var_name": "filePid"}], "file": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/longleaf/RegisterToLongleafProcessorTest.java"}, "test_case": {"identifier": "registerableBinaryManifestMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void registerableBinaryManifestMetadata() throws Exception {\n        PID depositPid = pidMinter.mintDepositRecordPid();\n        PID binPid = DatastreamPids.getDepositManifestPid(depositPid, \"mets.xml\");\n        PID mdPid = PIDs.get(binPid.getRepositoryPath() + \"/fcr:metadata\");\n        Exchange exchange = createIndividualExchange(mdPid);\n        assertFalse(RegisterToLongleafProcessor.registerableBinary(exchange));\n    }", "signature": "void registerableBinaryManifestMetadata()", "full_signature": "@Test public void registerableBinaryManifestMetadata()", "class_method_signature": "RegisterToLongleafProcessorTest.registerableBinaryManifestMetadata()", "testcase": true, "constructor": false, "invocations": ["mintDepositRecordPid", "getDepositManifestPid", "get", "getRepositoryPath", "createIndividualExchange", "assertFalse", "registerableBinary"]}, "focal_class": {"identifier": "RegisterToLongleafProcessor", "superclass": "extends AbstractLongleafProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(RegisterToLongleafProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RegisterToLongleafProcessor.class)", "var_name": "log"}, {"original_string": "private static final Histogram batchSizeHistogram = HistogramFactory\n            .createHistogram(\"longleafRegisterBatchSize\");", "modifier": "private static final", "type": "Histogram", "declarator": "batchSizeHistogram = HistogramFactory\n            .createHistogram(\"longleafRegisterBatchSize\")", "var_name": "batchSizeHistogram"}, {"original_string": "private static final Timer timer = TimerFactory.createTimerForClass(RegisterToLongleafProcessor.class);", "modifier": "private static final", "type": "Timer", "declarator": "timer = TimerFactory.createTimerForClass(RegisterToLongleafProcessor.class)", "var_name": "timer"}, {"original_string": "public static final List<String> REGISTERABLE_IDS = asList(\n            DatastreamType.MD_DESCRIPTIVE.getId(),\n            DatastreamType.MD_DESCRIPTIVE_HISTORY.getId(),\n            DatastreamType.MD_EVENTS.getId(),\n            DatastreamType.ORIGINAL_FILE.getId(),\n            DatastreamType.TECHNICAL_METADATA.getId()\n        );", "modifier": "public static final", "type": "List<String>", "declarator": "REGISTERABLE_IDS = asList(\n            DatastreamType.MD_DESCRIPTIVE.getId(),\n            DatastreamType.MD_DESCRIPTIVE_HISTORY.getId(),\n            DatastreamType.MD_EVENTS.getId(),\n            DatastreamType.ORIGINAL_FILE.getId(),\n            DatastreamType.TECHNICAL_METADATA.getId()\n        )", "var_name": "REGISTERABLE_IDS"}, {"original_string": "private RepositoryObjectLoader repoObjLoader;", "modifier": "private", "type": "RepositoryObjectLoader", "declarator": "repoObjLoader", "var_name": "repoObjLoader"}, {"original_string": "private FcrepoClient fcrepoClient;", "modifier": "private", "type": "FcrepoClient", "declarator": "fcrepoClient", "var_name": "fcrepoClient"}], "methods": [{"identifier": "process", "parameters": "(Exchange exchange)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void process(Exchange exchange)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void process(Exchange exchange)", "class_method_signature": "RegisterToLongleafProcessor.process(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "calculateSha1", "parameters": "(PID pid)", "modifiers": "private", "return": "String", "signature": "String calculateSha1(PID pid)", "full_signature": "private String calculateSha1(PID pid)", "class_method_signature": "RegisterToLongleafProcessor.calculateSha1(PID pid)", "testcase": false, "constructor": false}, {"identifier": "registerFiles", "parameters": "(List<String> messages, Map<String, List<DigestEntry>> digestsMap)", "modifiers": "private", "return": "void", "signature": "void registerFiles(List<String> messages, Map<String, List<DigestEntry>> digestsMap)", "full_signature": "private void registerFiles(List<String> messages, Map<String, List<DigestEntry>> digestsMap)", "class_method_signature": "RegisterToLongleafProcessor.registerFiles(List<String> messages, Map<String, List<DigestEntry>> digestsMap)", "testcase": false, "constructor": false}, {"identifier": "findFcrepoUri", "parameters": "(String seekPath, Map<String, List<DigestEntry>> digestsMap)", "modifiers": "private", "return": "String", "signature": "String findFcrepoUri(String seekPath, Map<String, List<DigestEntry>> digestsMap)", "full_signature": "private String findFcrepoUri(String seekPath, Map<String, List<DigestEntry>> digestsMap)", "class_method_signature": "RegisterToLongleafProcessor.findFcrepoUri(String seekPath, Map<String, List<DigestEntry>> digestsMap)", "testcase": false, "constructor": false}, {"identifier": "trimFedoraDigest", "parameters": "(String fedoraDigest, String separator)", "modifiers": "private", "return": "String", "signature": "String trimFedoraDigest(String fedoraDigest, String separator)", "full_signature": "private String trimFedoraDigest(String fedoraDigest, String separator)", "class_method_signature": "RegisterToLongleafProcessor.trimFedoraDigest(String fedoraDigest, String separator)", "testcase": false, "constructor": false}, {"identifier": "setRepositoryObjectLoader", "parameters": "(RepositoryObjectLoader repoObjLoader)", "modifiers": "public", "return": "void", "signature": "void setRepositoryObjectLoader(RepositoryObjectLoader repoObjLoader)", "full_signature": "public void setRepositoryObjectLoader(RepositoryObjectLoader repoObjLoader)", "class_method_signature": "RegisterToLongleafProcessor.setRepositoryObjectLoader(RepositoryObjectLoader repoObjLoader)", "testcase": false, "constructor": false}, {"identifier": "setFcrepoClient", "parameters": "(FcrepoClient fcrepoClient)", "modifiers": "public", "return": "void", "signature": "void setFcrepoClient(FcrepoClient fcrepoClient)", "full_signature": "public void setFcrepoClient(FcrepoClient fcrepoClient)", "class_method_signature": "RegisterToLongleafProcessor.setFcrepoClient(FcrepoClient fcrepoClient)", "testcase": false, "constructor": false}, {"identifier": "registerableBinary", "parameters": "(Exchange exchange)", "modifiers": "public static", "return": "boolean", "signature": "boolean registerableBinary(Exchange exchange)", "full_signature": "public static boolean registerableBinary(Exchange exchange)", "class_method_signature": "RegisterToLongleafProcessor.registerableBinary(Exchange exchange)", "testcase": false, "constructor": false}], "file": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/RegisterToLongleafProcessor.java"}, "focal_method": {"identifier": "registerableBinary", "parameters": "(Exchange exchange)", "modifiers": "public static", "return": "boolean", "body": "public static boolean registerableBinary(Exchange exchange) {\n        String fcrepoUri = (String) exchange.getIn().getHeader(FCREPO_URI);\n        String dsId = StringUtils.substringAfterLast(fcrepoUri, \"/\");\n\n        if (dsId.equals(\"fcr:metadata\")) {\n            return false;\n        }\n\n        if (REGISTERABLE_IDS.contains(dsId)) {\n            return true;\n        } else {\n            // Also registerable if the datastream is a deposit manifest\n            PID dsPid = PIDs.get(fcrepoUri);\n            return dsPid.getQualifier().equals(RepositoryPathConstants.DEPOSIT_RECORD_BASE);\n        }\n    }", "signature": "boolean registerableBinary(Exchange exchange)", "full_signature": "public static boolean registerableBinary(Exchange exchange)", "class_method_signature": "RegisterToLongleafProcessor.registerableBinary(Exchange exchange)", "testcase": false, "constructor": false, "invocations": ["getHeader", "getIn", "substringAfterLast", "equals", "contains", "get", "equals", "getQualifier"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}