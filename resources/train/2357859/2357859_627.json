{"test_class": {"identifier": "SetDescriptiveMetadataFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM\");", "modifier": "private static", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(\"yyyy-MM\")", "var_name": "dateFormat"}, {"original_string": "private static final String PID_STRING = \"uuid:07d9594f-310d-4095-ab67-79a1056e7430\";", "modifier": "private static final", "type": "String", "declarator": "PID_STRING = \"uuid:07d9594f-310d-4095-ab67-79a1056e7430\"", "var_name": "PID_STRING"}, {"original_string": "@Mock\n    private DocumentIndexingPackageDataLoader loader;", "modifier": "@Mock\n    private", "type": "DocumentIndexingPackageDataLoader", "declarator": "loader", "var_name": "loader"}, {"original_string": "@Mock\n    private DocumentIndexingPackage dip;", "modifier": "@Mock\n    private", "type": "DocumentIndexingPackage", "declarator": "dip", "var_name": "dip"}, {"original_string": "private IndexDocumentBean idb;", "modifier": "private", "type": "IndexDocumentBean", "declarator": "idb", "var_name": "idb"}, {"original_string": "@Mock\n    private ContentObject contentObj;", "modifier": "@Mock\n    private", "type": "ContentObject", "declarator": "contentObj", "var_name": "contentObj"}, {"original_string": "@Mock\n    private Resource objResc;", "modifier": "@Mock\n    private", "type": "Resource", "declarator": "objResc", "var_name": "objResc"}, {"original_string": "@Mock\n    private PID pid;", "modifier": "@Mock\n    private", "type": "PID", "declarator": "pid", "var_name": "pid"}, {"original_string": "@Mock\n    private VocabularyHelperManager vocabManager;", "modifier": "@Mock\n    private", "type": "VocabularyHelperManager", "declarator": "vocabManager", "var_name": "vocabManager"}, {"original_string": "private SetDescriptiveMetadataFilter filter;", "modifier": "private", "type": "SetDescriptiveMetadataFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "@Captor\n    private ArgumentCaptor<List<String>> listCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<List<String>>", "declarator": "listCaptor", "var_name": "listCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<Date> dateCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Date>", "declarator": "dateCaptor", "var_name": "dateCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<String> stringCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<String>", "declarator": "stringCaptor", "var_name": "stringCaptor"}], "file": "solr-ingest/src/test/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDescriptiveMetadataFilterTest.java"}, "test_case": {"identifier": "testMultipleCreators", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleCreators() throws Exception {\n        SAXBuilder builder = new SAXBuilder();\n        Document modsDoc = builder.build(new FileInputStream(new File(\n                \"src/test/resources/datastream/multipleCreators.xml\")));\n        when(dip.getMods()).thenReturn(modsDoc.detachRootElement());\n\n        filter.filter(dip);\n\n        assertTrue(idb.getCreator().contains(\"Test, Creator1\"));\n        assertTrue(idb.getCreator().contains(\"Test, Creator2\"));\n\n        assertEquals(\"Test, Creator1\", idb.getCreatorSort());\n    }", "signature": "void testMultipleCreators()", "full_signature": "@Test public void testMultipleCreators()", "class_method_signature": "SetDescriptiveMetadataFilterTest.testMultipleCreators()", "testcase": true, "constructor": false, "invocations": ["build", "thenReturn", "when", "getMods", "detachRootElement", "filter", "assertTrue", "contains", "getCreator", "assertTrue", "contains", "getCreator", "assertEquals", "getCreatorSort"]}, "focal_class": {"identifier": "SetDescriptiveMetadataFilter", "superclass": "", "interfaces": "implements IndexDocumentFilter", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SetDescriptiveMetadataFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SetDescriptiveMetadataFilter.class)", "var_name": "log"}, {"original_string": "private final Properties languageCodeMap;", "modifier": "private final", "type": "Properties", "declarator": "languageCodeMap", "var_name": "languageCodeMap"}, {"original_string": "public final static String AFFIL_URI = \"http://cdr.unc.edu/vocabulary/Affiliation\";", "modifier": "public final static", "type": "String", "declarator": "AFFIL_URI = \"http://cdr.unc.edu/vocabulary/Affiliation\"", "var_name": "AFFIL_URI"}, {"original_string": "private VocabularyHelperManager vocabManager;", "modifier": "private", "type": "VocabularyHelperManager", "declarator": "vocabManager", "var_name": "vocabManager"}], "methods": [{"identifier": "SetDescriptiveMetadataFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SetDescriptiveMetadataFilter()", "full_signature": "public  SetDescriptiveMetadataFilter()", "class_method_signature": "SetDescriptiveMetadataFilter.SetDescriptiveMetadataFilter()", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(DocumentIndexingPackage dip)", "modifiers": "@Override public", "return": "void", "signature": "void filter(DocumentIndexingPackage dip)", "full_signature": "@Override public void filter(DocumentIndexingPackage dip)", "class_method_signature": "SetDescriptiveMetadataFilter.filter(DocumentIndexingPackage dip)", "testcase": false, "constructor": false}, {"identifier": "getAlternativeTitle", "parameters": "(DocumentIndexingPackage dip)", "modifiers": "private", "return": "String", "signature": "String getAlternativeTitle(DocumentIndexingPackage dip)", "full_signature": "private String getAlternativeTitle(DocumentIndexingPackage dip)", "class_method_signature": "SetDescriptiveMetadataFilter.getAlternativeTitle(DocumentIndexingPackage dip)", "testcase": false, "constructor": false}, {"identifier": "titleText", "parameters": "(Resource resc, Property field)", "modifiers": "private", "return": "String", "signature": "String titleText(Resource resc, Property field)", "full_signature": "private String titleText(Resource resc, Property field)", "class_method_signature": "SetDescriptiveMetadataFilter.titleText(Resource resc, Property field)", "testcase": false, "constructor": false}, {"identifier": "extractTitles", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractTitles(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractTitles(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractTitles(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "extractNamesAndAffiliations", "parameters": "(Element mods, IndexDocumentBean idb, boolean splitDepartments)", "modifiers": "private", "return": "void", "signature": "void extractNamesAndAffiliations(Element mods, IndexDocumentBean idb, boolean splitDepartments)", "full_signature": "private void extractNamesAndAffiliations(Element mods, IndexDocumentBean idb, boolean splitDepartments)", "class_method_signature": "SetDescriptiveMetadataFilter.extractNamesAndAffiliations(Element mods, IndexDocumentBean idb, boolean splitDepartments)", "testcase": false, "constructor": false}, {"identifier": "extractAbstract", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractAbstract(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractAbstract(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractAbstract(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "extractCollectionId", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractCollectionId(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractCollectionId(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractCollectionId(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "extractFindingAidLink", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractFindingAidLink(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractFindingAidLink(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractFindingAidLink(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "extractSubjects", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractSubjects(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractSubjects(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractSubjects(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "extractLanguages", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractLanguages(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractLanguages(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractLanguages(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "extractDateCreated", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractDateCreated(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractDateCreated(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractDateCreated(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "extractIdentifiers", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractIdentifiers(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractIdentifiers(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractIdentifiers(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "extractKeywords", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractKeywords(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractKeywords(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractKeywords(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "addValuesToList", "parameters": "(List<String> values, List<?> elements)", "modifiers": "private", "return": "void", "signature": "void addValuesToList(List<String> values, List<?> elements)", "full_signature": "private void addValuesToList(List<String> values, List<?> elements)", "class_method_signature": "SetDescriptiveMetadataFilter.addValuesToList(List<String> values, List<?> elements)", "testcase": false, "constructor": false}, {"identifier": "extractCitation", "parameters": "(Element mods, IndexDocumentBean idb)", "modifiers": "private", "return": "void", "signature": "void extractCitation(Element mods, IndexDocumentBean idb)", "full_signature": "private void extractCitation(Element mods, IndexDocumentBean idb)", "class_method_signature": "SetDescriptiveMetadataFilter.extractCitation(Element mods, IndexDocumentBean idb)", "testcase": false, "constructor": false}, {"identifier": "setVocabManager", "parameters": "(VocabularyHelperManager vocabManager)", "modifiers": "public", "return": "void", "signature": "void setVocabManager(VocabularyHelperManager vocabManager)", "full_signature": "public void setVocabManager(VocabularyHelperManager vocabManager)", "class_method_signature": "SetDescriptiveMetadataFilter.setVocabManager(VocabularyHelperManager vocabManager)", "testcase": false, "constructor": false}], "file": "solr-ingest/src/main/java/edu/unc/lib/dl/data/ingest/solr/filter/SetDescriptiveMetadataFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(DocumentIndexingPackage dip)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void filter(DocumentIndexingPackage dip) throws IndexingException {\n        IndexDocumentBean idb = dip.getDocument();\n        Element mods = dip.getMods();\n\n        idb.setKeyword(new ArrayList<String>());\n        if (mods != null) {\n            this.extractTitles(mods, idb);\n            this.extractNamesAndAffiliations(mods, idb, true);\n            this.extractAbstract(mods, idb);\n            this.extractCollectionId(mods, idb);\n            this.extractFindingAidLink(mods, idb);\n            this.extractLanguages(mods, idb);\n            this.extractSubjects(mods, idb);\n            this.extractDateCreated(mods, idb);\n            this.extractIdentifiers(mods, idb);\n            this.extractCitation(mods, idb);\n            this.extractKeywords(mods, idb);\n\n        } else {\n            // TODO basic DC mappings\n        }\n\n        if (dip.getDocument().getTitle() == null) {\n            idb.setTitle(getAlternativeTitle(dip));\n        }\n        if (dip.getDocument().getDateCreated() == null) {\n            idb.setDateCreated(idb.getDateAdded());\n        }\n        idb.getKeyword().add(dip.getPid().getId());\n    }", "signature": "void filter(DocumentIndexingPackage dip)", "full_signature": "@Override public void filter(DocumentIndexingPackage dip)", "class_method_signature": "SetDescriptiveMetadataFilter.filter(DocumentIndexingPackage dip)", "testcase": false, "constructor": false, "invocations": ["getDocument", "getMods", "setKeyword", "extractTitles", "extractNamesAndAffiliations", "extractAbstract", "extractCollectionId", "extractFindingAidLink", "extractLanguages", "extractSubjects", "extractDateCreated", "extractIdentifiers", "extractCitation", "extractKeywords", "getTitle", "getDocument", "setTitle", "getAlternativeTitle", "getDateCreated", "getDocument", "setDateCreated", "getDateAdded", "add", "getKeyword", "getId", "getPid"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}