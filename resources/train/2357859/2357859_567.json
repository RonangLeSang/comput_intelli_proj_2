{"test_class": {"identifier": "ACLTransformationHelpersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String EMBARGO_END_DATE = \"2040-01-01T00:00:00.000Z\";", "modifier": "private final static", "type": "String", "declarator": "EMBARGO_END_DATE = \"2040-01-01T00:00:00.000Z\"", "var_name": "EMBARGO_END_DATE"}, {"original_string": "private final static String BAD_EMBARGO_END_DATE = \"2040-01-01T00:00:00\";", "modifier": "private final static", "type": "String", "declarator": "BAD_EMBARGO_END_DATE = \"2040-01-01T00:00:00\"", "var_name": "BAD_EMBARGO_END_DATE"}, {"original_string": "private PID pid;", "modifier": "private", "type": "PID", "declarator": "pid", "var_name": "pid"}, {"original_string": "private PID parentPid;", "modifier": "private", "type": "PID", "declarator": "parentPid", "var_name": "parentPid"}], "file": "migration-util/src/test/java/edu/unc/lib/dcr/migration/content/ACLTransformationHelpersTest.java"}, "test_case": {"identifier": "transformPatronAccess_MultipleRolesForEveryone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void transformPatronAccess_MultipleRolesForEveryone() throws Exception {\n        Resource bxc3Resc = buildBoxc3Resource(pid, ContentModel.CONTAINER);\n\n        addRoleForPublic(bxc3Resc, Bxc3UserRole.accessCopiesPatron);\n        addRoleForPublic(bxc3Resc, Bxc3UserRole.metadataPatron);\n        addRoleForPublic(bxc3Resc, Bxc3UserRole.patron);\n\n        Resource bxc5Resc = buildBoxc5Resource(pid, Cdr.Folder);\n\n        ACLTransformationHelpers.transformPatronAccess(bxc3Resc, bxc5Resc, parentPid);\n\n        assertEveryoneHasRole(CdrAcl.canViewMetadata, bxc5Resc);\n    }", "signature": "void transformPatronAccess_MultipleRolesForEveryone()", "full_signature": "@Test public void transformPatronAccess_MultipleRolesForEveryone()", "class_method_signature": "ACLTransformationHelpersTest.transformPatronAccess_MultipleRolesForEveryone()", "testcase": true, "constructor": false, "invocations": ["buildBoxc3Resource", "addRoleForPublic", "addRoleForPublic", "addRoleForPublic", "buildBoxc5Resource", "transformPatronAccess", "assertEveryoneHasRole"]}, "focal_class": {"identifier": "ACLTransformationHelpers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = getLogger(ACLTransformationHelpers.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = getLogger(ACLTransformationHelpers.class)", "var_name": "log"}, {"original_string": "public final static String BXC3_PUBLIC_GROUP = \"public\";", "modifier": "public final static", "type": "String", "declarator": "BXC3_PUBLIC_GROUP = \"public\"", "var_name": "BXC3_PUBLIC_GROUP"}, {"original_string": "public final static String BXC3_AUTHENTICATED_GROUP = \"authenticated\";", "modifier": "public final static", "type": "String", "declarator": "BXC3_AUTHENTICATED_GROUP = \"authenticated\"", "var_name": "BXC3_AUTHENTICATED_GROUP"}, {"original_string": "private static final Map<PID, Model> unitPatronAccessCache = new HashMap<>();", "modifier": "private static final", "type": "Map<PID, Model>", "declarator": "unitPatronAccessCache = new HashMap<>()", "var_name": "unitPatronAccessCache"}], "methods": [{"identifier": "ACLTransformationHelpers", "parameters": "()", "modifiers": "private", "return": "", "signature": " ACLTransformationHelpers()", "full_signature": "private  ACLTransformationHelpers()", "class_method_signature": "ACLTransformationHelpers.ACLTransformationHelpers()", "testcase": false, "constructor": true}, {"identifier": "transformPatronAccess", "parameters": "(Resource bxc3Resc, Resource bxc5Resc, PID parentPid)", "modifiers": "public static", "return": "void", "signature": "void transformPatronAccess(Resource bxc3Resc, Resource bxc5Resc, PID parentPid)", "full_signature": "public static void transformPatronAccess(Resource bxc3Resc, Resource bxc5Resc, PID parentPid)", "class_method_signature": "ACLTransformationHelpers.transformPatronAccess(Resource bxc3Resc, Resource bxc5Resc, PID parentPid)", "testcase": false, "constructor": false}, {"identifier": "calculatePatronRoles", "parameters": "(Resource bxc3Resc)", "modifiers": "private static", "return": "Property[]", "signature": "Property[] calculatePatronRoles(Resource bxc3Resc)", "full_signature": "private static Property[] calculatePatronRoles(Resource bxc3Resc)", "class_method_signature": "ACLTransformationHelpers.calculatePatronRoles(Resource bxc3Resc)", "testcase": false, "constructor": false}, {"identifier": "mostRestrictiveRole", "parameters": "(Property existingRole, Property bxc3Role)", "modifiers": "private static", "return": "Property", "signature": "Property mostRestrictiveRole(Property existingRole, Property bxc3Role)", "full_signature": "private static Property mostRestrictiveRole(Property existingRole, Property bxc3Role)", "class_method_signature": "ACLTransformationHelpers.mostRestrictiveRole(Property existingRole, Property bxc3Role)", "testcase": false, "constructor": false}, {"identifier": "mergeParentPatronAcls", "parameters": "(PID parentPid, Resource destResc, Property everyoneRole,\n            Property authRole)", "modifiers": "private static", "return": "void", "signature": "void mergeParentPatronAcls(PID parentPid, Resource destResc, Property everyoneRole,\n            Property authRole)", "full_signature": "private static void mergeParentPatronAcls(PID parentPid, Resource destResc, Property everyoneRole,\n            Property authRole)", "class_method_signature": "ACLTransformationHelpers.mergeParentPatronAcls(PID parentPid, Resource destResc, Property everyoneRole,\n            Property authRole)", "testcase": false, "constructor": false}, {"identifier": "transformStaffRoles", "parameters": "(Resource bxc3Resc, Resource bxc5Resc)", "modifiers": "public static", "return": "void", "signature": "void transformStaffRoles(Resource bxc3Resc, Resource bxc5Resc)", "full_signature": "public static void transformStaffRoles(Resource bxc3Resc, Resource bxc5Resc)", "class_method_signature": "ACLTransformationHelpers.transformStaffRoles(Resource bxc3Resc, Resource bxc5Resc)", "testcase": false, "constructor": false}, {"identifier": "mapStaffRole", "parameters": "(Bxc3UserRole bxc3Role, Property bxc5Role,\n            Resource bxc3Resc, Resource bxc5Resc, Set<String> principalsAssigned)", "modifiers": "private static", "return": "void", "signature": "void mapStaffRole(Bxc3UserRole bxc3Role, Property bxc5Role,\n            Resource bxc3Resc, Resource bxc5Resc, Set<String> principalsAssigned)", "full_signature": "private static void mapStaffRole(Bxc3UserRole bxc3Role, Property bxc5Role,\n            Resource bxc3Resc, Resource bxc5Resc, Set<String> principalsAssigned)", "class_method_signature": "ACLTransformationHelpers.mapStaffRole(Bxc3UserRole bxc3Role, Property bxc5Role,\n            Resource bxc3Resc, Resource bxc5Resc, Set<String> principalsAssigned)", "testcase": false, "constructor": false}, {"identifier": "formatEmbargoDate", "parameters": "(String embargoDate)", "modifiers": "private static", "return": "String", "signature": "String formatEmbargoDate(String embargoDate)", "full_signature": "private static String formatEmbargoDate(String embargoDate)", "class_method_signature": "ACLTransformationHelpers.formatEmbargoDate(String embargoDate)", "testcase": false, "constructor": false}, {"identifier": "isPatronPrincipal", "parameters": "(String principal)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPatronPrincipal(String principal)", "full_signature": "private static boolean isPatronPrincipal(String principal)", "class_method_signature": "ACLTransformationHelpers.isPatronPrincipal(String principal)", "testcase": false, "constructor": false}], "file": "migration-util/src/main/java/edu/unc/lib/dcr/migration/content/ACLTransformationHelpers.java"}, "focal_method": {"identifier": "transformPatronAccess", "parameters": "(Resource bxc3Resc, Resource bxc5Resc, PID parentPid)", "modifiers": "public static", "return": "void", "body": "public static void transformPatronAccess(Resource bxc3Resc, Resource bxc5Resc, PID parentPid) {\n        // For admin units, cache patron access settings so they can be used for children instead\n\n        Resource destResc;\n        if (bxc5Resc.hasProperty(RDF.type, Cdr.AdminUnit)) {\n            Model unitModel = createDefaultModel();\n            PID unitPid = PIDs.get(bxc5Resc.getURI());\n            destResc = unitModel.getResource(unitPid.getRepositoryPath());\n            unitPatronAccessCache.put(unitPid, unitModel);\n        } else {\n            destResc = bxc5Resc;\n        }\n\n        // Migrate existing embargoes\n        if (bxc3Resc.hasProperty(CDRProperty.embargoUntil.getProperty())) {\n            String embargoDate = formatEmbargoDate(bxc3Resc.getProperty(\n                    CDRProperty.embargoUntil.getProperty()).getString());\n            Literal embargoLiteral = ResourceFactory.createTypedLiteral(embargoDate, XSDDatatype.XSDdateTime);\n            destResc.addLiteral(CdrAcl.embargoUntil, embargoLiteral);\n        }\n\n        // Calculate the most restrictive roles assigned to each patron group\n        Property[] patronRoles = calculatePatronRoles(bxc3Resc);\n        Property everyoneRole = patronRoles[0];\n        Property authRole = patronRoles[1];\n\n        // assign the patron groups roles if they were specified\n        if (everyoneRole != null) {\n            destResc.addLiteral(everyoneRole, PUBLIC_PRINC);\n        }\n        if (authRole != null) {\n            destResc.addLiteral(authRole, AUTHENTICATED_PRINC);\n        }\n\n        // Merge in access settings from parent if present in the cache\n        mergeParentPatronAcls(parentPid, destResc, everyoneRole, authRole);\n\n        // For collections if no roles specified or inherited, default to open permissions\n        // as they would normally inherit from the root in bxc3.\n        if (bxc5Resc.hasProperty(RDF.type, Cdr.Collection)) {\n            if (!(bxc5Resc.hasProperty(CdrAcl.canViewMetadata)\n                    || bxc5Resc.hasProperty(CdrAcl.canViewAccessCopies)\n                    || bxc5Resc.hasProperty(CdrAcl.canViewOriginals)\n                    || bxc5Resc.hasProperty(CdrAcl.none))) {\n                destResc.addLiteral(CdrAcl.canViewOriginals, PUBLIC_PRINC);\n                destResc.addLiteral(CdrAcl.canViewOriginals, AUTHENTICATED_PRINC);\n            }\n        }\n    }", "signature": "void transformPatronAccess(Resource bxc3Resc, Resource bxc5Resc, PID parentPid)", "full_signature": "public static void transformPatronAccess(Resource bxc3Resc, Resource bxc5Resc, PID parentPid)", "class_method_signature": "ACLTransformationHelpers.transformPatronAccess(Resource bxc3Resc, Resource bxc5Resc, PID parentPid)", "testcase": false, "constructor": false, "invocations": ["hasProperty", "createDefaultModel", "get", "getURI", "getResource", "getRepositoryPath", "put", "hasProperty", "getProperty", "formatEmbargoDate", "getString", "getProperty", "getProperty", "createTypedLiteral", "addLiteral", "calculatePatronRoles", "addLiteral", "addLiteral", "mergeParentPatronAcls", "hasProperty", "hasProperty", "hasProperty", "hasProperty", "hasProperty", "addLiteral", "addLiteral"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}