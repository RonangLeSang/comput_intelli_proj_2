{"test_class": {"identifier": "RepositoryObjectCacheLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String ETAG = \"etag\";", "modifier": "private static", "type": "String", "declarator": "ETAG = \"etag\"", "var_name": "ETAG"}, {"original_string": "private static final String ETAG_HEADER =  \"\\\"etag\\\"\";", "modifier": "private static final", "type": "String", "declarator": "ETAG_HEADER =  \"\\\"etag\\\"\"", "var_name": "ETAG_HEADER"}, {"original_string": "private RepositoryObjectCacheLoader objectCacheLoader;", "modifier": "private", "type": "RepositoryObjectCacheLoader", "declarator": "objectCacheLoader", "var_name": "objectCacheLoader"}, {"original_string": "@Mock\n    private RepositoryObjectDriver driver;", "modifier": "@Mock\n    private", "type": "RepositoryObjectDriver", "declarator": "driver", "var_name": "driver"}, {"original_string": "private FcrepoClient client;", "modifier": "private", "type": "FcrepoClient", "declarator": "client", "var_name": "client"}, {"original_string": "@Mock\n    private FcrepoResponse response;", "modifier": "@Mock\n    private", "type": "FcrepoResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private PID pid;", "modifier": "@Mock\n    private", "type": "PID", "declarator": "pid", "var_name": "pid"}], "file": "fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoaderTest.java"}, "test_case": {"identifier": "loadDepositRecordTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadDepositRecordTest() throws Exception {\n\n        pid = PIDs.get(RepositoryPathConstants.DEPOSIT_RECORD_BASE + \"/\" + UUID.randomUUID().toString());\n\n        mockResponseBodyWithType(pid, Cdr.DepositRecord);\n\n        RepositoryObject obj = objectCacheLoader.load(pid);\n\n        assertTrue(obj instanceof DepositRecord);\n        assertEquals(pid, obj.getPid());\n        assertEquals(ETAG, obj.getEtag());\n        assertTrue(obj.getResource().hasProperty(RDF.type, Cdr.DepositRecord));\n    }", "signature": "void loadDepositRecordTest()", "full_signature": "@Test public void loadDepositRecordTest()", "class_method_signature": "RepositoryObjectCacheLoaderTest.loadDepositRecordTest()", "testcase": true, "constructor": false, "invocations": ["get", "toString", "randomUUID", "mockResponseBodyWithType", "load", "assertTrue", "assertEquals", "getPid", "assertEquals", "getEtag", "assertTrue", "hasProperty", "getResource"]}, "focal_class": {"identifier": "RepositoryObjectCacheLoader", "superclass": "extends CacheLoader<PID, RepositoryObject>", "interfaces": "", "fields": [{"original_string": "private static final URI BINARY_TYPE_URI = URI.create(Ldp.NonRdfSource.getURI());", "modifier": "private static final", "type": "URI", "declarator": "BINARY_TYPE_URI = URI.create(Ldp.NonRdfSource.getURI())", "var_name": "BINARY_TYPE_URI"}, {"original_string": "private FcrepoClient client;", "modifier": "private", "type": "FcrepoClient", "declarator": "client", "var_name": "client"}, {"original_string": "private RepositoryObjectDriver repositoryObjectDriver;", "modifier": "private", "type": "RepositoryObjectDriver", "declarator": "repositoryObjectDriver", "var_name": "repositoryObjectDriver"}, {"original_string": "private RepositoryObjectFactory repoObjFactory;", "modifier": "private", "type": "RepositoryObjectFactory", "declarator": "repoObjFactory", "var_name": "repoObjFactory"}], "methods": [{"identifier": "RepositoryObjectCacheLoader", "parameters": "()", "modifiers": "protected", "return": "", "signature": " RepositoryObjectCacheLoader()", "full_signature": "protected  RepositoryObjectCacheLoader()", "class_method_signature": "RepositoryObjectCacheLoader.RepositoryObjectCacheLoader()", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(PID pid)", "modifiers": "@Override public", "return": "RepositoryObject", "signature": "RepositoryObject load(PID pid)", "full_signature": "@Override public RepositoryObject load(PID pid)", "class_method_signature": "RepositoryObjectCacheLoader.load(PID pid)", "testcase": false, "constructor": false}, {"identifier": "setClient", "parameters": "(FcrepoClient client)", "modifiers": "public", "return": "void", "signature": "void setClient(FcrepoClient client)", "full_signature": "public void setClient(FcrepoClient client)", "class_method_signature": "RepositoryObjectCacheLoader.setClient(FcrepoClient client)", "testcase": false, "constructor": false}, {"identifier": "setRepositoryObjectDriver", "parameters": "(RepositoryObjectDriver repositoryObjectDriver)", "modifiers": "public", "return": "void", "signature": "void setRepositoryObjectDriver(RepositoryObjectDriver repositoryObjectDriver)", "full_signature": "public void setRepositoryObjectDriver(RepositoryObjectDriver repositoryObjectDriver)", "class_method_signature": "RepositoryObjectCacheLoader.setRepositoryObjectDriver(RepositoryObjectDriver repositoryObjectDriver)", "testcase": false, "constructor": false}, {"identifier": "setRepositoryObjectFactory", "parameters": "(RepositoryObjectFactory repoObjFactory)", "modifiers": "public", "return": "void", "signature": "void setRepositoryObjectFactory(RepositoryObjectFactory repoObjFactory)", "full_signature": "public void setRepositoryObjectFactory(RepositoryObjectFactory repoObjFactory)", "class_method_signature": "RepositoryObjectCacheLoader.setRepositoryObjectFactory(RepositoryObjectFactory repoObjFactory)", "testcase": false, "constructor": false}, {"identifier": "instantiateBinaryObject", "parameters": "(PID pid, URI contentUri, String etag)", "modifiers": "private", "return": "BinaryObject", "signature": "BinaryObject instantiateBinaryObject(PID pid, URI contentUri, String etag)", "full_signature": "private BinaryObject instantiateBinaryObject(PID pid, URI contentUri, String etag)", "class_method_signature": "RepositoryObjectCacheLoader.instantiateBinaryObject(PID pid, URI contentUri, String etag)", "testcase": false, "constructor": false}, {"identifier": "instantiateRepositoryObject", "parameters": "(PID pid, Model model, String etag)", "modifiers": "private", "return": "RepositoryObject", "signature": "RepositoryObject instantiateRepositoryObject(PID pid, Model model, String etag)", "full_signature": "private RepositoryObject instantiateRepositoryObject(PID pid, Model model, String etag)", "class_method_signature": "RepositoryObjectCacheLoader.instantiateRepositoryObject(PID pid, Model model, String etag)", "testcase": false, "constructor": false}, {"identifier": "isContentPID", "parameters": "(PID pid)", "modifiers": "private", "return": "boolean", "signature": "boolean isContentPID(PID pid)", "full_signature": "private boolean isContentPID(PID pid)", "class_method_signature": "RepositoryObjectCacheLoader.isContentPID(PID pid)", "testcase": false, "constructor": false}, {"identifier": "isDepositPID", "parameters": "(PID pid)", "modifiers": "private", "return": "boolean", "signature": "boolean isDepositPID(PID pid)", "full_signature": "private boolean isDepositPID(PID pid)", "class_method_signature": "RepositoryObjectCacheLoader.isDepositPID(PID pid)", "testcase": false, "constructor": false}, {"identifier": "setRepoObjFactory", "parameters": "(RepositoryObjectFactory repoObjFactory)", "modifiers": "public", "return": "void", "signature": "void setRepoObjFactory(RepositoryObjectFactory repoObjFactory)", "full_signature": "public void setRepoObjFactory(RepositoryObjectFactory repoObjFactory)", "class_method_signature": "RepositoryObjectCacheLoader.setRepoObjFactory(RepositoryObjectFactory repoObjFactory)", "testcase": false, "constructor": false}], "file": "fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java"}, "focal_method": {"identifier": "load", "parameters": "(PID pid)", "modifiers": "@Override public", "return": "RepositoryObject", "body": "@Override\n    public RepositoryObject load(PID pid) {\n\n        try (FcrepoResponse response = client.head(pid.getRepositoryUri())\n                .perform()) {\n\n            boolean isBinary = response.hasType(BINARY_TYPE_URI);\n            String etag = response.getHeaderValue(\"ETag\");\n            if (etag != null) {\n                etag = new EntityTag(etag).getValue();\n            }\n\n            // For binaries, pull out location of content and immediately instantiate binary obj\n            if (isBinary) {\n                String contentLoc = response.getHeaderValue(\"Content-Location\");\n                URI contentUri = null;\n                if (contentLoc != null) {\n                    contentUri = URI.create(contentLoc);\n                }\n                return instantiateBinaryObject(pid, contentUri, etag);\n            }\n\n            // For non-binaries, retrieve the metadata body before instantiation\n            URI metadataUri = pid.getRepositoryUri();\n\n            Model model;\n            try (FcrepoResponse modelResp = client.get(metadataUri)\n                    .accept(TURTLE_MIMETYPE)\n                    .perform()) {\n\n                model = ModelFactory.createDefaultModel();\n                model.read(modelResp.getBody(), null, Lang.TURTLE.getName());\n            }\n\n            return instantiateRepositoryObject(pid, model, etag);\n        } catch (IOException e) {\n            throw new FedoraException(\"Failed to read model for \" + pid, e);\n        } catch (FcrepoOperationFailedException e) {\n            throw ClientFaultResolver.resolve(e);\n        }\n    }", "signature": "RepositoryObject load(PID pid)", "full_signature": "@Override public RepositoryObject load(PID pid)", "class_method_signature": "RepositoryObjectCacheLoader.load(PID pid)", "testcase": false, "constructor": false, "invocations": ["perform", "head", "getRepositoryUri", "hasType", "getHeaderValue", "getValue", "getHeaderValue", "create", "instantiateBinaryObject", "getRepositoryUri", "perform", "accept", "get", "createDefaultModel", "read", "getBody", "getName", "instantiateRepositoryObject", "resolve"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}