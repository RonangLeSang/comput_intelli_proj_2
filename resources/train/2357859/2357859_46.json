{"test_class": {"identifier": "RepositoryObjectFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private LdpContainerFactory ldpFactory;", "modifier": "@Mock\n    private", "type": "LdpContainerFactory", "declarator": "ldpFactory", "var_name": "ldpFactory"}, {"original_string": "@Mock\n    private RepositoryObjectCacheLoader objectCacheLoader;", "modifier": "@Mock\n    private", "type": "RepositoryObjectCacheLoader", "declarator": "objectCacheLoader", "var_name": "objectCacheLoader"}, {"original_string": "@Mock\n    private RepositoryObjectDriver driver;", "modifier": "@Mock\n    private", "type": "RepositoryObjectDriver", "declarator": "driver", "var_name": "driver"}, {"original_string": "@Mock\n    private SparqlUpdateService sparqlUpdateService;", "modifier": "@Mock\n    private", "type": "SparqlUpdateService", "declarator": "sparqlUpdateService", "var_name": "sparqlUpdateService"}, {"original_string": "@Mock\n    private FcrepoClient fcrepoClient;", "modifier": "@Mock\n    private", "type": "FcrepoClient", "declarator": "fcrepoClient", "var_name": "fcrepoClient"}, {"original_string": "@Mock\n    private PutBuilder mockPutBuilder;", "modifier": "@Mock\n    private", "type": "PutBuilder", "declarator": "mockPutBuilder", "var_name": "mockPutBuilder"}, {"original_string": "@Mock\n    private PostBuilder mockPostBuilder;", "modifier": "@Mock\n    private", "type": "PostBuilder", "declarator": "mockPostBuilder", "var_name": "mockPostBuilder"}, {"original_string": "@Mock\n    private FcrepoResponse mockResponse;", "modifier": "@Mock\n    private", "type": "FcrepoResponse", "declarator": "mockResponse", "var_name": "mockResponse"}, {"original_string": "@Mock\n    private PID pid;", "modifier": "@Mock\n    private", "type": "PID", "declarator": "pid", "var_name": "pid"}, {"original_string": "private RepositoryObjectFactory repoObjFactory;", "modifier": "private", "type": "RepositoryObjectFactory", "declarator": "repoObjFactory", "var_name": "repoObjFactory"}, {"original_string": "private RepositoryPIDMinter pidMinter;", "modifier": "private", "type": "RepositoryPIDMinter", "declarator": "pidMinter", "var_name": "pidMinter"}, {"original_string": "private List<URI> linkHeaders;", "modifier": "private", "type": "List<URI>", "declarator": "linkHeaders", "var_name": "linkHeaders"}], "file": "fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectFactoryTest.java"}, "test_case": {"identifier": "addMemberTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addMemberTest() {\n        PID parentPid = pidMinter.mintContentPid();\n        ContentObject parent = mock(ContentObject.class);\n        when(parent.getPid()).thenReturn(parentPid);\n        when(parent.getUri()).thenReturn(parentPid.getRepositoryUri());\n        when(parent.getResource()).thenReturn(createResource(parentPid.getRepositoryPath()));\n\n        Model memberModel = ModelFactory.createDefaultModel();\n        PID memberPid = pidMinter.mintContentPid();\n        ContentObject member = mock(ContentObject.class);\n        when(member.getPid()).thenReturn(memberPid);\n        when(member.getModel()).thenReturn(memberModel);\n        when(member.getMetadataUri()).thenReturn(memberPid.getRepositoryUri());\n\n        repoObjFactory.addMember(parent, member);\n\n        verify(sparqlUpdateService).executeUpdate(eq(memberPid.getRepositoryPath()), anyString());\n    }", "signature": "void addMemberTest()", "full_signature": "@Test public void addMemberTest()", "class_method_signature": "RepositoryObjectFactoryTest.addMemberTest()", "testcase": true, "constructor": false, "invocations": ["mintContentPid", "mock", "thenReturn", "when", "getPid", "thenReturn", "when", "getUri", "getRepositoryUri", "thenReturn", "when", "getResource", "createResource", "getRepositoryPath", "createDefaultModel", "mintContentPid", "mock", "thenReturn", "when", "getPid", "thenReturn", "when", "getModel", "thenReturn", "when", "getMetadataUri", "getRepositoryUri", "addMember", "executeUpdate", "verify", "eq", "getRepositoryPath", "anyString"]}, "focal_class": {"identifier": "RepositoryObjectFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = getLogger(RepositoryObjectFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = getLogger(RepositoryObjectFactory.class)", "var_name": "log"}, {"original_string": "private LdpContainerFactory ldpFactory;", "modifier": "private", "type": "LdpContainerFactory", "declarator": "ldpFactory", "var_name": "ldpFactory"}, {"original_string": "private FcrepoClient client;", "modifier": "private", "type": "FcrepoClient", "declarator": "client", "var_name": "client"}, {"original_string": "private RepositoryObjectDriver repoObjDriver;", "modifier": "private", "type": "RepositoryObjectDriver", "declarator": "repoObjDriver", "var_name": "repoObjDriver"}, {"original_string": "private RepositoryPIDMinter pidMinter;", "modifier": "private", "type": "RepositoryPIDMinter", "declarator": "pidMinter", "var_name": "pidMinter"}, {"original_string": "private SparqlUpdateService sparqlUpdateService;", "modifier": "private", "type": "SparqlUpdateService", "declarator": "sparqlUpdateService", "var_name": "sparqlUpdateService"}], "methods": [{"identifier": "createDepositRecord", "parameters": "(Model model)", "modifiers": "public", "return": "DepositRecord", "signature": "DepositRecord createDepositRecord(Model model)", "full_signature": "public DepositRecord createDepositRecord(Model model)", "class_method_signature": "RepositoryObjectFactory.createDepositRecord(Model model)", "testcase": false, "constructor": false}, {"identifier": "createDepositRecord", "parameters": "(PID pid, Model model)", "modifiers": "public", "return": "DepositRecord", "signature": "DepositRecord createDepositRecord(PID pid, Model model)", "full_signature": "public DepositRecord createDepositRecord(PID pid, Model model)", "class_method_signature": "RepositoryObjectFactory.createDepositRecord(PID pid, Model model)", "testcase": false, "constructor": false}, {"identifier": "createAdminUnit", "parameters": "(Model model)", "modifiers": "public", "return": "AdminUnit", "signature": "AdminUnit createAdminUnit(Model model)", "full_signature": "public AdminUnit createAdminUnit(Model model)", "class_method_signature": "RepositoryObjectFactory.createAdminUnit(Model model)", "testcase": false, "constructor": false}, {"identifier": "createAdminUnit", "parameters": "(PID pid, Model model)", "modifiers": "public", "return": "AdminUnit", "signature": "AdminUnit createAdminUnit(PID pid, Model model)", "full_signature": "public AdminUnit createAdminUnit(PID pid, Model model)", "class_method_signature": "RepositoryObjectFactory.createAdminUnit(PID pid, Model model)", "testcase": false, "constructor": false}, {"identifier": "createContentRootObject", "parameters": "(URI path, Model model)", "modifiers": "public", "return": "URI", "signature": "URI createContentRootObject(URI path, Model model)", "full_signature": "public URI createContentRootObject(URI path, Model model)", "class_method_signature": "RepositoryObjectFactory.createContentRootObject(URI path, Model model)", "testcase": false, "constructor": false}, {"identifier": "createCollectionObject", "parameters": "(Model model)", "modifiers": "public", "return": "CollectionObject", "signature": "CollectionObject createCollectionObject(Model model)", "full_signature": "public CollectionObject createCollectionObject(Model model)", "class_method_signature": "RepositoryObjectFactory.createCollectionObject(Model model)", "testcase": false, "constructor": false}, {"identifier": "createCollectionObject", "parameters": "(PID pid, Model model)", "modifiers": "public", "return": "CollectionObject", "signature": "CollectionObject createCollectionObject(PID pid, Model model)", "full_signature": "public CollectionObject createCollectionObject(PID pid, Model model)", "class_method_signature": "RepositoryObjectFactory.createCollectionObject(PID pid, Model model)", "testcase": false, "constructor": false}, {"identifier": "createFolderObject", "parameters": "(Model model)", "modifiers": "public", "return": "FolderObject", "signature": "FolderObject createFolderObject(Model model)", "full_signature": "public FolderObject createFolderObject(Model model)", "class_method_signature": "RepositoryObjectFactory.createFolderObject(Model model)", "testcase": false, "constructor": false}, {"identifier": "createFolderObject", "parameters": "(PID pid, Model model)", "modifiers": "public", "return": "FolderObject", "signature": "FolderObject createFolderObject(PID pid, Model model)", "full_signature": "public FolderObject createFolderObject(PID pid, Model model)", "class_method_signature": "RepositoryObjectFactory.createFolderObject(PID pid, Model model)", "testcase": false, "constructor": false}, {"identifier": "createWorkObject", "parameters": "(Model model)", "modifiers": "public", "return": "WorkObject", "signature": "WorkObject createWorkObject(Model model)", "full_signature": "public WorkObject createWorkObject(Model model)", "class_method_signature": "RepositoryObjectFactory.createWorkObject(Model model)", "testcase": false, "constructor": false}, {"identifier": "createWorkObject", "parameters": "(PID pid, Model model)", "modifiers": "public", "return": "WorkObject", "signature": "WorkObject createWorkObject(PID pid, Model model)", "full_signature": "public WorkObject createWorkObject(PID pid, Model model)", "class_method_signature": "RepositoryObjectFactory.createWorkObject(PID pid, Model model)", "testcase": false, "constructor": false}, {"identifier": "createFileObject", "parameters": "(Model model)", "modifiers": "public", "return": "FileObject", "signature": "FileObject createFileObject(Model model)", "full_signature": "public FileObject createFileObject(Model model)", "class_method_signature": "RepositoryObjectFactory.createFileObject(Model model)", "testcase": false, "constructor": false}, {"identifier": "createFileObject", "parameters": "(PID pid, Model model)", "modifiers": "public", "return": "FileObject", "signature": "FileObject createFileObject(PID pid, Model model)", "full_signature": "public FileObject createFileObject(PID pid, Model model)", "class_method_signature": "RepositoryObjectFactory.createFileObject(PID pid, Model model)", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateBinary", "parameters": "(PID pid, URI storageUri, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum, Model model)", "modifiers": "public", "return": "BinaryObject", "signature": "BinaryObject createOrUpdateBinary(PID pid, URI storageUri, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum, Model model)", "full_signature": "public BinaryObject createOrUpdateBinary(PID pid, URI storageUri, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum, Model model)", "class_method_signature": "RepositoryObjectFactory.createOrUpdateBinary(PID pid, URI storageUri, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum, Model model)", "testcase": false, "constructor": false}, {"identifier": "updateBinaryDescription", "parameters": "(PID binPid, URI describedBy, Model model)", "modifiers": "private", "return": "void", "signature": "void updateBinaryDescription(PID binPid, URI describedBy, Model model)", "full_signature": "private void updateBinaryDescription(PID binPid, URI describedBy, Model model)", "class_method_signature": "RepositoryObjectFactory.updateBinaryDescription(PID binPid, URI describedBy, Model model)", "testcase": false, "constructor": false}, {"identifier": "createBinary", "parameters": "(URI path, String slug, InputStream content, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum, Model model)", "modifiers": "public", "return": "BinaryObject", "signature": "BinaryObject createBinary(URI path, String slug, InputStream content, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum, Model model)", "full_signature": "public BinaryObject createBinary(URI path, String slug, InputStream content, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum, Model model)", "class_method_signature": "RepositoryObjectFactory.createBinary(URI path, String slug, InputStream content, String filename, String mimetype,\n            String sha1Checksum, String md5Checksum, Model model)", "testcase": false, "constructor": false}, {"identifier": "updateBinary", "parameters": "(URI path, String slug, InputStream content, String filename, String mimetype,\n             String sha1Checksum, String md5Checksum, Model model)", "modifiers": "public", "return": "BinaryObject", "signature": "BinaryObject updateBinary(URI path, String slug, InputStream content, String filename, String mimetype,\n             String sha1Checksum, String md5Checksum, Model model)", "full_signature": "public BinaryObject updateBinary(URI path, String slug, InputStream content, String filename, String mimetype,\n             String sha1Checksum, String md5Checksum, Model model)", "class_method_signature": "RepositoryObjectFactory.updateBinary(URI path, String slug, InputStream content, String filename, String mimetype,\n             String sha1Checksum, String md5Checksum, Model model)", "testcase": false, "constructor": false}, {"identifier": "addMember", "parameters": "(ContentObject parent, ContentObject member)", "modifiers": "public", "return": "void", "signature": "void addMember(ContentObject parent, ContentObject member)", "full_signature": "public void addMember(ContentObject parent, ContentObject member)", "class_method_signature": "RepositoryObjectFactory.addMember(ContentObject parent, ContentObject member)", "testcase": false, "constructor": false}, {"identifier": "createProperty", "parameters": "(RepositoryObject subject, Property property, String object)", "modifiers": "public", "return": "void", "signature": "void createProperty(RepositoryObject subject, Property property, String object)", "full_signature": "public void createProperty(RepositoryObject subject, Property property, String object)", "class_method_signature": "RepositoryObjectFactory.createProperty(RepositoryObject subject, Property property, String object)", "testcase": false, "constructor": false}, {"identifier": "createExclusiveRelationship", "parameters": "(RepositoryObject repoObj, Property property, Object object)", "modifiers": "public", "return": "void", "signature": "void createExclusiveRelationship(RepositoryObject repoObj, Property property, Object object)", "full_signature": "public void createExclusiveRelationship(RepositoryObject repoObj, Property property, Object object)", "class_method_signature": "RepositoryObjectFactory.createExclusiveRelationship(RepositoryObject repoObj, Property property, Object object)", "testcase": false, "constructor": false}, {"identifier": "deleteProperty", "parameters": "(RepositoryObject repoObj, Property property)", "modifiers": "public", "return": "void", "signature": "void deleteProperty(RepositoryObject repoObj, Property property)", "full_signature": "public void deleteProperty(RepositoryObject repoObj, Property property)", "class_method_signature": "RepositoryObjectFactory.deleteProperty(RepositoryObject repoObj, Property property)", "testcase": false, "constructor": false}, {"identifier": "createRelationship", "parameters": "(RepositoryObject subject, Property property, Resource object)", "modifiers": "public", "return": "void", "signature": "void createRelationship(RepositoryObject subject, Property property, Resource object)", "full_signature": "public void createRelationship(RepositoryObject subject, Property property, Resource object)", "class_method_signature": "RepositoryObjectFactory.createRelationship(RepositoryObject subject, Property property, Resource object)", "testcase": false, "constructor": false}, {"identifier": "createRelationships", "parameters": "(RepositoryObject subject, Model model)", "modifiers": "public", "return": "void", "signature": "void createRelationships(RepositoryObject subject, Model model)", "full_signature": "public void createRelationships(RepositoryObject subject, Model model)", "class_method_signature": "RepositoryObjectFactory.createRelationships(RepositoryObject subject, Model model)", "testcase": false, "constructor": false}, {"identifier": "createOrTransformObject", "parameters": "(URI uri, Model model)", "modifiers": "public", "return": "URI", "signature": "URI createOrTransformObject(URI uri, Model model)", "full_signature": "public URI createOrTransformObject(URI uri, Model model)", "class_method_signature": "RepositoryObjectFactory.createOrTransformObject(URI uri, Model model)", "testcase": false, "constructor": false}, {"identifier": "objectExists", "parameters": "(URI uri)", "modifiers": "public", "return": "boolean", "signature": "boolean objectExists(URI uri)", "full_signature": "public boolean objectExists(URI uri)", "class_method_signature": "RepositoryObjectFactory.objectExists(URI uri)", "testcase": false, "constructor": false}, {"identifier": "setClient", "parameters": "(FcrepoClient client)", "modifiers": "public", "return": "void", "signature": "void setClient(FcrepoClient client)", "full_signature": "public void setClient(FcrepoClient client)", "class_method_signature": "RepositoryObjectFactory.setClient(FcrepoClient client)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "()", "modifiers": "public", "return": "FcrepoClient", "signature": "FcrepoClient getClient()", "full_signature": "public FcrepoClient getClient()", "class_method_signature": "RepositoryObjectFactory.getClient()", "testcase": false, "constructor": false}, {"identifier": "getLdpFactory", "parameters": "()", "modifiers": "public", "return": "LdpContainerFactory", "signature": "LdpContainerFactory getLdpFactory()", "full_signature": "public LdpContainerFactory getLdpFactory()", "class_method_signature": "RepositoryObjectFactory.getLdpFactory()", "testcase": false, "constructor": false}, {"identifier": "setLdpFactory", "parameters": "(LdpContainerFactory ldpFactory)", "modifiers": "public", "return": "void", "signature": "void setLdpFactory(LdpContainerFactory ldpFactory)", "full_signature": "public void setLdpFactory(LdpContainerFactory ldpFactory)", "class_method_signature": "RepositoryObjectFactory.setLdpFactory(LdpContainerFactory ldpFactory)", "testcase": false, "constructor": false}, {"identifier": "setRepositoryObjectDriver", "parameters": "(RepositoryObjectDriver repoObjDriver)", "modifiers": "public", "return": "void", "signature": "void setRepositoryObjectDriver(RepositoryObjectDriver repoObjDriver)", "full_signature": "public void setRepositoryObjectDriver(RepositoryObjectDriver repoObjDriver)", "class_method_signature": "RepositoryObjectFactory.setRepositoryObjectDriver(RepositoryObjectDriver repoObjDriver)", "testcase": false, "constructor": false}, {"identifier": "setPidMinter", "parameters": "(RepositoryPIDMinter pidMinter)", "modifiers": "public", "return": "void", "signature": "void setPidMinter(RepositoryPIDMinter pidMinter)", "full_signature": "public void setPidMinter(RepositoryPIDMinter pidMinter)", "class_method_signature": "RepositoryObjectFactory.setPidMinter(RepositoryPIDMinter pidMinter)", "testcase": false, "constructor": false}, {"identifier": "setSparqlUpdateService", "parameters": "(SparqlUpdateService sparqlUpdateService)", "modifiers": "public", "return": "void", "signature": "void setSparqlUpdateService(SparqlUpdateService sparqlUpdateService)", "full_signature": "public void setSparqlUpdateService(SparqlUpdateService sparqlUpdateService)", "class_method_signature": "RepositoryObjectFactory.setSparqlUpdateService(SparqlUpdateService sparqlUpdateService)", "testcase": false, "constructor": false}, {"identifier": "persistTripleToFedora", "parameters": "(URI subject, String sparqlUpdate)", "modifiers": "private", "return": "void", "signature": "void persistTripleToFedora(URI subject, String sparqlUpdate)", "full_signature": "private void persistTripleToFedora(URI subject, String sparqlUpdate)", "class_method_signature": "RepositoryObjectFactory.persistTripleToFedora(URI subject, String sparqlUpdate)", "testcase": false, "constructor": false}, {"identifier": "formatMimetype", "parameters": "(String mimetype)", "modifiers": "private", "return": "String", "signature": "String formatMimetype(String mimetype)", "full_signature": "private String formatMimetype(String mimetype)", "class_method_signature": "RepositoryObjectFactory.formatMimetype(String mimetype)", "testcase": false, "constructor": false}, {"identifier": "createContentContainerObject", "parameters": "(URI path, Model model)", "modifiers": "private", "return": "URI", "signature": "URI createContentContainerObject(URI path, Model model)", "full_signature": "private URI createContentContainerObject(URI path, Model model)", "class_method_signature": "RepositoryObjectFactory.createContentContainerObject(URI path, Model model)", "testcase": false, "constructor": false}, {"identifier": "addMetadataContainer", "parameters": "(URI parentUri)", "modifiers": "private", "return": "void", "signature": "void addMetadataContainer(URI parentUri)", "full_signature": "private void addMetadataContainer(URI parentUri)", "class_method_signature": "RepositoryObjectFactory.addMetadataContainer(URI parentUri)", "testcase": false, "constructor": false}, {"identifier": "populateModelTypes", "parameters": "(URI rescUri, Model model, List<Resource> types)", "modifiers": "private", "return": "Model", "signature": "Model populateModelTypes(URI rescUri, Model model, List<Resource> types)", "full_signature": "private Model populateModelTypes(URI rescUri, Model model, List<Resource> types)", "class_method_signature": "RepositoryObjectFactory.populateModelTypes(URI rescUri, Model model, List<Resource> types)", "testcase": false, "constructor": false}], "file": "fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectFactory.java"}, "focal_method": {"identifier": "addMember", "parameters": "(ContentObject parent, ContentObject member)", "modifiers": "public", "return": "void", "body": "public void addMember(ContentObject parent, ContentObject member) {\n        createExclusiveRelationship(member, PcdmModels.memberOf, parent.getResource());\n    }", "signature": "void addMember(ContentObject parent, ContentObject member)", "full_signature": "public void addMember(ContentObject parent, ContentObject member)", "class_method_signature": "RepositoryObjectFactory.addMember(ContentObject parent, ContentObject member)", "testcase": false, "constructor": false, "invocations": ["createExclusiveRelationship", "getResource"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}