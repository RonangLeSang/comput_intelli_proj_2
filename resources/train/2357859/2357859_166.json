{"test_class": {"identifier": "InheritedPermissionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PATRON_PRINC = \"everyone\";", "modifier": "private static final", "type": "String", "declarator": "PATRON_PRINC = \"everyone\"", "var_name": "PATRON_PRINC"}, {"original_string": "private static final String STAFF_PRINC = \"adminGrp\";", "modifier": "private static final", "type": "String", "declarator": "STAFF_PRINC = \"adminGrp\"", "var_name": "STAFF_PRINC"}, {"original_string": "private static final Set<String> PATRON_PRINCIPLES = new HashSet<>(\n            asList(PUBLIC_PRINC));", "modifier": "private static final", "type": "Set<String>", "declarator": "PATRON_PRINCIPLES = new HashSet<>(\n            asList(PUBLIC_PRINC))", "var_name": "PATRON_PRINCIPLES"}, {"original_string": "private static final Set<String> AUTH_PRINCIPLES = new HashSet<>(\n            asList(PUBLIC_PRINC, AUTHENTICATED_PRINC));", "modifier": "private static final", "type": "Set<String>", "declarator": "AUTH_PRINCIPLES = new HashSet<>(\n            asList(PUBLIC_PRINC, AUTHENTICATED_PRINC))", "var_name": "AUTH_PRINCIPLES"}, {"original_string": "private static final Set<String> STAFF_PRINCIPLES = new HashSet<>(\n            asList(PUBLIC_PRINC, AUTHENTICATED_PRINC, STAFF_PRINC));", "modifier": "private static final", "type": "Set<String>", "declarator": "STAFF_PRINCIPLES = new HashSet<>(\n            asList(PUBLIC_PRINC, AUTHENTICATED_PRINC, STAFF_PRINC))", "var_name": "STAFF_PRINCIPLES"}, {"original_string": "@Mock\n    private ContentPathFactory pathFactory;", "modifier": "@Mock\n    private", "type": "ContentPathFactory", "declarator": "pathFactory", "var_name": "pathFactory"}, {"original_string": "@Mock\n    private ObjectAclFactory objectAclFactory;", "modifier": "@Mock\n    private", "type": "ObjectAclFactory", "declarator": "objectAclFactory", "var_name": "objectAclFactory"}, {"original_string": "private InheritedPermissionEvaluator evaluator;", "modifier": "private", "type": "InheritedPermissionEvaluator", "declarator": "evaluator", "var_name": "evaluator"}, {"original_string": "private List<PID> ancestorPids;", "modifier": "private", "type": "List<PID>", "declarator": "ancestorPids", "var_name": "ancestorPids"}, {"original_string": "private PID pid;", "modifier": "private", "type": "PID", "declarator": "pid", "var_name": "pid"}], "file": "fcrepo-clients/src/test/java/edu/unc/lib/dl/acl/fcrepo4/InheritedPermissionEvaluatorTest.java"}, "test_case": {"identifier": "contentIgnoreLocallyAssignedStaffPermission", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void contentIgnoreLocallyAssignedStaffPermission() {\n        addPidToAncestors();\n        addPidToAncestors();\n\n        mockFactoryPrincipalRoles(pid, STAFF_PRINC, canIngest);\n\n        assertFalse(evaluator.hasPermission(pid, STAFF_PRINCIPLES, Permission.ingest));\n    }", "signature": "void contentIgnoreLocallyAssignedStaffPermission()", "full_signature": "@Test public void contentIgnoreLocallyAssignedStaffPermission()", "class_method_signature": "InheritedPermissionEvaluatorTest.contentIgnoreLocallyAssignedStaffPermission()", "testcase": true, "constructor": false, "invocations": ["addPidToAncestors", "addPidToAncestors", "mockFactoryPrincipalRoles", "assertFalse", "hasPermission"]}, "focal_class": {"identifier": "InheritedPermissionEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int UNIT_PATH_DEPTH = 1;", "modifier": "private static final", "type": "int", "declarator": "UNIT_PATH_DEPTH = 1", "var_name": "UNIT_PATH_DEPTH"}, {"original_string": "private static final int COLLECTION_PATH_DEPTH = 2;", "modifier": "private static final", "type": "int", "declarator": "COLLECTION_PATH_DEPTH = 2", "var_name": "COLLECTION_PATH_DEPTH"}, {"original_string": "private static final int CONTENT_STARTING_DEPTH = 3;", "modifier": "private static final", "type": "int", "declarator": "CONTENT_STARTING_DEPTH = 3", "var_name": "CONTENT_STARTING_DEPTH"}, {"original_string": "private ContentPathFactory pathFactory;", "modifier": "private", "type": "ContentPathFactory", "declarator": "pathFactory", "var_name": "pathFactory"}, {"original_string": "private ObjectAclFactory objectAclFactory;", "modifier": "private", "type": "ObjectAclFactory", "declarator": "objectAclFactory", "var_name": "objectAclFactory"}], "methods": [{"identifier": "hasPermission", "parameters": "(PID target, Set<String> agentPrincipals, Permission permission)", "modifiers": "public", "return": "boolean", "signature": "boolean hasPermission(PID target, Set<String> agentPrincipals, Permission permission)", "full_signature": "public boolean hasPermission(PID target, Set<String> agentPrincipals, Permission permission)", "class_method_signature": "InheritedPermissionEvaluator.hasPermission(PID target, Set<String> agentPrincipals, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "hasStaffPermission", "parameters": "(List<PID> path, Set<String> agentStaffPrincipals, Permission permission)", "modifiers": "private", "return": "boolean", "signature": "boolean hasStaffPermission(List<PID> path, Set<String> agentStaffPrincipals, Permission permission)", "full_signature": "private boolean hasStaffPermission(List<PID> path, Set<String> agentStaffPrincipals, Permission permission)", "class_method_signature": "InheritedPermissionEvaluator.hasStaffPermission(List<PID> path, Set<String> agentStaffPrincipals, Permission permission)", "testcase": false, "constructor": false}, {"identifier": "hasPatronPermission", "parameters": "(List<PID> path, Set<String> agentPatronPrincipals,\n            Permission permission)", "modifiers": "private", "return": "boolean", "signature": "boolean hasPatronPermission(List<PID> path, Set<String> agentPatronPrincipals,\n            Permission permission)", "full_signature": "private boolean hasPatronPermission(List<PID> path, Set<String> agentPatronPrincipals,\n            Permission permission)", "class_method_signature": "InheritedPermissionEvaluator.hasPatronPermission(List<PID> path, Set<String> agentPatronPrincipals,\n            Permission permission)", "testcase": false, "constructor": false}, {"identifier": "revokePatronPermissions", "parameters": "(Map<String, Set<String>> princRoles, Set<String> activePrincipals,\n            Set<String> rolesWithPermission)", "modifiers": "private", "return": "void", "signature": "void revokePatronPermissions(Map<String, Set<String>> princRoles, Set<String> activePrincipals,\n            Set<String> rolesWithPermission)", "full_signature": "private void revokePatronPermissions(Map<String, Set<String>> princRoles, Set<String> activePrincipals,\n            Set<String> rolesWithPermission)", "class_method_signature": "InheritedPermissionEvaluator.revokePatronPermissions(Map<String, Set<String>> princRoles, Set<String> activePrincipals,\n            Set<String> rolesWithPermission)", "testcase": false, "constructor": false}, {"identifier": "hasRoleWithPermission", "parameters": "(Map<String, Set<String>> princRoles, Set<String> agentPrincipals,\n            Set<String> rolesWithPermission)", "modifiers": "private", "return": "boolean", "signature": "boolean hasRoleWithPermission(Map<String, Set<String>> princRoles, Set<String> agentPrincipals,\n            Set<String> rolesWithPermission)", "full_signature": "private boolean hasRoleWithPermission(Map<String, Set<String>> princRoles, Set<String> agentPrincipals,\n            Set<String> rolesWithPermission)", "class_method_signature": "InheritedPermissionEvaluator.hasRoleWithPermission(Map<String, Set<String>> princRoles, Set<String> agentPrincipals,\n            Set<String> rolesWithPermission)", "testcase": false, "constructor": false}, {"identifier": "getRolesWithPermission", "parameters": "(Permission permission)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getRolesWithPermission(Permission permission)", "full_signature": "private Set<String> getRolesWithPermission(Permission permission)", "class_method_signature": "InheritedPermissionEvaluator.getRolesWithPermission(Permission permission)", "testcase": false, "constructor": false}, {"identifier": "getObjectPath", "parameters": "(PID pid)", "modifiers": "private", "return": "List<PID>", "signature": "List<PID> getObjectPath(PID pid)", "full_signature": "private List<PID> getObjectPath(PID pid)", "class_method_signature": "InheritedPermissionEvaluator.getObjectPath(PID pid)", "testcase": false, "constructor": false}, {"identifier": "isPatronPermission", "parameters": "(Permission permission)", "modifiers": "private", "return": "boolean", "signature": "boolean isPatronPermission(Permission permission)", "full_signature": "private boolean isPatronPermission(Permission permission)", "class_method_signature": "InheritedPermissionEvaluator.isPatronPermission(Permission permission)", "testcase": false, "constructor": false}, {"identifier": "setPathFactory", "parameters": "(ContentPathFactory pathFactory)", "modifiers": "public", "return": "void", "signature": "void setPathFactory(ContentPathFactory pathFactory)", "full_signature": "public void setPathFactory(ContentPathFactory pathFactory)", "class_method_signature": "InheritedPermissionEvaluator.setPathFactory(ContentPathFactory pathFactory)", "testcase": false, "constructor": false}, {"identifier": "setObjectAclFactory", "parameters": "(ObjectAclFactory objectAclFactory)", "modifiers": "public", "return": "void", "signature": "void setObjectAclFactory(ObjectAclFactory objectAclFactory)", "full_signature": "public void setObjectAclFactory(ObjectAclFactory objectAclFactory)", "class_method_signature": "InheritedPermissionEvaluator.setObjectAclFactory(ObjectAclFactory objectAclFactory)", "testcase": false, "constructor": false}], "file": "fcrepo-clients/src/main/java/edu/unc/lib/dl/acl/fcrepo4/InheritedPermissionEvaluator.java"}, "focal_method": {"identifier": "hasPermission", "parameters": "(PID target, Set<String> agentPrincipals, Permission permission)", "modifiers": "public", "return": "boolean", "body": "public boolean hasPermission(PID target, Set<String> agentPrincipals, Permission permission) {\n\n        // Separate agents into patron and staff agents\n        Set<String> agentPatronPrincipals = new HashSet<>();\n        Set<String> agentStaffPrincipals = new HashSet<>();\n        classifyPrincipals(agentPrincipals, agentPatronPrincipals, agentStaffPrincipals);\n\n        // Retrieve the path of objects up to and including the target\n        List<PID> path = getObjectPath(target);\n\n        if (hasStaffPermission(path, agentStaffPrincipals, permission)) {\n            return true;\n        }\n        // Perform additional processing for patron permissions\n        if (isPatronPermission(permission)) {\n            return hasPatronPermission(path, agentPatronPrincipals, permission);\n        } else {\n            return false;\n        }\n    }", "signature": "boolean hasPermission(PID target, Set<String> agentPrincipals, Permission permission)", "full_signature": "public boolean hasPermission(PID target, Set<String> agentPrincipals, Permission permission)", "class_method_signature": "InheritedPermissionEvaluator.hasPermission(PID target, Set<String> agentPrincipals, Permission permission)", "testcase": false, "constructor": false, "invocations": ["classifyPrincipals", "getObjectPath", "hasStaffPermission", "isPatronPermission", "hasPatronPermission"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}