{"test_class": {"identifier": "FSToFSTransferClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String TEST_UUID = \"a168cf29-a2a9-4da8-9b8d-025855b180d5\";", "modifier": "protected static final", "type": "String", "declarator": "TEST_UUID = \"a168cf29-a2a9-4da8-9b8d-025855b180d5\"", "var_name": "TEST_UUID"}, {"original_string": "protected static final String FILE_CONTENT = \"File content\";", "modifier": "protected static final", "type": "String", "declarator": "FILE_CONTENT = \"File content\"", "var_name": "FILE_CONTENT"}, {"original_string": "protected FSToFSTransferClient client;", "modifier": "protected", "type": "FSToFSTransferClient", "declarator": "client", "var_name": "client"}, {"original_string": "@Rule\n    public final TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}, {"original_string": "protected Path sourcePath;", "modifier": "protected", "type": "Path", "declarator": "sourcePath", "var_name": "sourcePath"}, {"original_string": "protected Path storagePath;", "modifier": "protected", "type": "Path", "declarator": "storagePath", "var_name": "storagePath"}, {"original_string": "@Mock\n    protected IngestSource ingestSource;", "modifier": "@Mock\n    protected", "type": "IngestSource", "declarator": "ingestSource", "var_name": "ingestSource"}, {"original_string": "@Mock\n    private StorageLocation storageLoc;", "modifier": "@Mock\n    private", "type": "StorageLocation", "declarator": "storageLoc", "var_name": "storageLoc"}, {"original_string": "protected PID binPid;", "modifier": "protected", "type": "PID", "declarator": "binPid", "var_name": "binPid"}, {"original_string": "protected Path binDestPath;", "modifier": "protected", "type": "Path", "declarator": "binDestPath", "var_name": "binDestPath"}], "file": "persistence/src/test/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClientTest.java"}, "test_case": {"identifier": "interruptTransfer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void interruptTransfer() throws Exception {\n        when(ingestSource.isReadOnly()).thenReturn(true);\n\n        // Generate a 10mb file for transferring\n        Path sourceFile = sourcePath.resolve(\"file.txt\");\n        try (RandomAccessFile filler = new RandomAccessFile(sourceFile.toFile(), \"rw\")) {\n            filler.setLength(100 * 1024 * 1024);\n        }\n\n        Thread copyThread = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    client.transfer(binPid, sourceFile.toUri());\n                    fail(\"Transfer must be interrupted\");\n                } catch (BinaryTransferException e) {\n                    // expected\n                }\n            }\n        };\n\n        copyThread.start();\n        // Wait briefly to let transfer start\n        Thread.sleep(10);\n\n        copyThread.interrupt();\n\n        assertFalse(Files.exists(binDestPath));\n    }", "signature": "void interruptTransfer()", "full_signature": "@Test public void interruptTransfer()", "class_method_signature": "FSToFSTransferClientTest.interruptTransfer()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isReadOnly", "resolve", "toFile", "setLength", "transfer", "toUri", "fail", "start", "sleep", "interrupt", "assertFalse", "exists"]}, "focal_class": {"identifier": "FSToFSTransferClient", "superclass": "", "interfaces": "implements BinaryTransferClient", "fields": [{"original_string": "private IngestSource source;", "modifier": "private", "type": "IngestSource", "declarator": "source", "var_name": "source"}, {"original_string": "protected StorageLocation destination;", "modifier": "protected", "type": "StorageLocation", "declarator": "destination", "var_name": "destination"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(FSToFSTransferClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FSToFSTransferClient.class)", "var_name": "log"}], "methods": [{"identifier": "FSToFSTransferClient", "parameters": "(IngestSource source, StorageLocation destination)", "modifiers": "public", "return": "", "signature": " FSToFSTransferClient(IngestSource source, StorageLocation destination)", "full_signature": "public  FSToFSTransferClient(IngestSource source, StorageLocation destination)", "class_method_signature": "FSToFSTransferClient.FSToFSTransferClient(IngestSource source, StorageLocation destination)", "testcase": false, "constructor": true}, {"identifier": "transfer", "parameters": "(PID binPid, URI sourceFileUri)", "modifiers": "@Override public", "return": "URI", "signature": "URI transfer(PID binPid, URI sourceFileUri)", "full_signature": "@Override public URI transfer(PID binPid, URI sourceFileUri)", "class_method_signature": "FSToFSTransferClient.transfer(PID binPid, URI sourceFileUri)", "testcase": false, "constructor": false}, {"identifier": "transferReplaceExisting", "parameters": "(PID binPid, URI sourceFileUri)", "modifiers": "@Override public", "return": "URI", "signature": "URI transferReplaceExisting(PID binPid, URI sourceFileUri)", "full_signature": "@Override public URI transferReplaceExisting(PID binPid, URI sourceFileUri)", "class_method_signature": "FSToFSTransferClient.transferReplaceExisting(PID binPid, URI sourceFileUri)", "testcase": false, "constructor": false}, {"identifier": "transfer", "parameters": "(PID binPid, URI sourceFileUri, boolean allowOverwrite)", "modifiers": "public", "return": "URI", "signature": "URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite)", "full_signature": "public URI transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite)", "class_method_signature": "FSToFSTransferClient.transfer(PID binPid, URI sourceFileUri, boolean allowOverwrite)", "testcase": false, "constructor": false}, {"identifier": "transferVersion", "parameters": "(PID binPid, URI sourceFileUri)", "modifiers": "@Override public", "return": "URI", "signature": "URI transferVersion(PID binPid, URI sourceFileUri)", "full_signature": "@Override public URI transferVersion(PID binPid, URI sourceFileUri)", "class_method_signature": "FSToFSTransferClient.transferVersion(PID binPid, URI sourceFileUri)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "FSToFSTransferClient.shutdown()", "testcase": false, "constructor": false}, {"identifier": "isTransferred", "parameters": "(PID binPid, URI sourceUri)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTransferred(PID binPid, URI sourceUri)", "full_signature": "@Override public boolean isTransferred(PID binPid, URI sourceUri)", "class_method_signature": "FSToFSTransferClient.isTransferred(PID binPid, URI sourceUri)", "testcase": false, "constructor": false}, {"identifier": "getStoredBinaryDetails", "parameters": "(PID binPid)", "modifiers": "@Override public", "return": "BinaryDetails", "signature": "BinaryDetails getStoredBinaryDetails(PID binPid)", "full_signature": "@Override public BinaryDetails getStoredBinaryDetails(PID binPid)", "class_method_signature": "FSToFSTransferClient.getStoredBinaryDetails(PID binPid)", "testcase": false, "constructor": false}], "file": "persistence/src/main/java/edu/unc/lib/dl/persist/services/transfer/FSToFSTransferClient.java"}, "focal_method": {"identifier": "transfer", "parameters": "(PID binPid, URI sourceFileUri)", "modifiers": "@Override public", "return": "URI", "body": "@Override\n    public URI transfer(PID binPid, URI sourceFileUri) {\n        return transfer(binPid, sourceFileUri, false);\n    }", "signature": "URI transfer(PID binPid, URI sourceFileUri)", "full_signature": "@Override public URI transfer(PID binPid, URI sourceFileUri)", "class_method_signature": "FSToFSTransferClient.transfer(PID binPid, URI sourceFileUri)", "testcase": false, "constructor": false, "invocations": ["transfer"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}