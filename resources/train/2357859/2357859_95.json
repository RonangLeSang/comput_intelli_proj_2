{"test_class": {"identifier": "InheritedAclFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MANAGE_PRINC = \"manageGrp\";", "modifier": "private static final", "type": "String", "declarator": "MANAGE_PRINC = \"manageGrp\"", "var_name": "MANAGE_PRINC"}, {"original_string": "private static final String OWNER_PRINC = \"owner\";", "modifier": "private static final", "type": "String", "declarator": "OWNER_PRINC = \"owner\"", "var_name": "OWNER_PRINC"}, {"original_string": "@Mock\n    private ContentPathFactory pathFactory;", "modifier": "@Mock\n    private", "type": "ContentPathFactory", "declarator": "pathFactory", "var_name": "pathFactory"}, {"original_string": "@Mock\n    private ObjectAclFactory objectAclFactory;", "modifier": "@Mock\n    private", "type": "ObjectAclFactory", "declarator": "objectAclFactory", "var_name": "objectAclFactory"}, {"original_string": "private InheritedAclFactory aclFactory;", "modifier": "private", "type": "InheritedAclFactory", "declarator": "aclFactory", "var_name": "aclFactory"}, {"original_string": "private List<PID> ancestorPids;", "modifier": "private", "type": "List<PID>", "declarator": "ancestorPids", "var_name": "ancestorPids"}, {"original_string": "private PID pid;", "modifier": "private", "type": "PID", "declarator": "pid", "var_name": "pid"}], "file": "fcrepo-clients/src/test/java/edu/unc/lib/dl/acl/fcrepo4/InheritedAclFactoryTest.java"}, "test_case": {"identifier": "collectionGetPrincRoles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void collectionGetPrincRoles() {\n        addPidToAncestors();\n\n        addPrincipalRoles(pid, MANAGE_PRINC, UserRole.canManage);\n\n        Map<String, Set<String>> princRoles = aclFactory.getPrincipalRoles(pid);\n\n        assertPrincipalHasRoles(\"Only one role should be present on collection\",\n                princRoles, MANAGE_PRINC, canManage);\n    }", "signature": "void collectionGetPrincRoles()", "full_signature": "@Test public void collectionGetPrincRoles()", "class_method_signature": "InheritedAclFactoryTest.collectionGetPrincRoles()", "testcase": true, "constructor": false, "invocations": ["addPidToAncestors", "addPrincipalRoles", "getPrincipalRoles", "assertPrincipalHasRoles"]}, "focal_class": {"identifier": "InheritedAclFactory", "superclass": "", "interfaces": "implements AclFactory", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(InheritedAclFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(InheritedAclFactory.class)", "var_name": "log"}, {"original_string": "private static final int UNIT_PATH_DEPTH = 0;", "modifier": "private static final", "type": "int", "declarator": "UNIT_PATH_DEPTH = 0", "var_name": "UNIT_PATH_DEPTH"}, {"original_string": "private static final int COLLECTION_PATH_DEPTH = 1;", "modifier": "private static final", "type": "int", "declarator": "COLLECTION_PATH_DEPTH = 1", "var_name": "COLLECTION_PATH_DEPTH"}, {"original_string": "private static final int CONTENT_STARTING_DEPTH = 2;", "modifier": "private static final", "type": "int", "declarator": "CONTENT_STARTING_DEPTH = 2", "var_name": "CONTENT_STARTING_DEPTH"}, {"original_string": "private ObjectAclFactory objectAclFactory;", "modifier": "private", "type": "ObjectAclFactory", "declarator": "objectAclFactory", "var_name": "objectAclFactory"}, {"original_string": "private ContentPathFactory pathFactory;", "modifier": "private", "type": "ContentPathFactory", "declarator": "pathFactory", "var_name": "pathFactory"}, {"original_string": "private static final List<String> PATRON_ROLE_PRECEDENCE = asList(\n            UserRole.none.getPropertyString(),\n            UserRole.canViewMetadata.getPropertyString(),\n            UserRole.canViewAccessCopies.getPropertyString(),\n            UserRole.canViewOriginals.getPropertyString()\n            );", "modifier": "private static final", "type": "List<String>", "declarator": "PATRON_ROLE_PRECEDENCE = asList(\n            UserRole.none.getPropertyString(),\n            UserRole.canViewMetadata.getPropertyString(),\n            UserRole.canViewAccessCopies.getPropertyString(),\n            UserRole.canViewOriginals.getPropertyString()\n            )", "var_name": "PATRON_ROLE_PRECEDENCE"}, {"original_string": "private static final int EMBARGO_ROLE_PRECEDENCE = 1;", "modifier": "private static final", "type": "int", "declarator": "EMBARGO_ROLE_PRECEDENCE = 1", "var_name": "EMBARGO_ROLE_PRECEDENCE"}], "methods": [{"identifier": "getPrincipalRoles", "parameters": "(PID target)", "modifiers": "@Override public", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> getPrincipalRoles(PID target)", "full_signature": "@Override public Map<String, Set<String>> getPrincipalRoles(PID target)", "class_method_signature": "InheritedAclFactory.getPrincipalRoles(PID target)", "testcase": false, "constructor": false}, {"identifier": "getStaffRoleAssignments", "parameters": "(PID pid)", "modifiers": "@Override public", "return": "List<RoleAssignment>", "signature": "List<RoleAssignment> getStaffRoleAssignments(PID pid)", "full_signature": "@Override public List<RoleAssignment> getStaffRoleAssignments(PID pid)", "class_method_signature": "InheritedAclFactory.getStaffRoleAssignments(PID pid)", "testcase": false, "constructor": false}, {"identifier": "getPatronRoleAssignments", "parameters": "(PID pid)", "modifiers": "@Override public", "return": "List<RoleAssignment>", "signature": "List<RoleAssignment> getPatronRoleAssignments(PID pid)", "full_signature": "@Override public List<RoleAssignment> getPatronRoleAssignments(PID pid)", "class_method_signature": "InheritedAclFactory.getPatronRoleAssignments(PID pid)", "testcase": false, "constructor": false}, {"identifier": "getRoleAssignments", "parameters": "(PID pid, boolean retrieveStaffRoles)", "modifiers": "private", "return": "List<RoleAssignment>", "signature": "List<RoleAssignment> getRoleAssignments(PID pid, boolean retrieveStaffRoles)", "full_signature": "private List<RoleAssignment> getRoleAssignments(PID pid, boolean retrieveStaffRoles)", "class_method_signature": "InheritedAclFactory.getRoleAssignments(PID pid, boolean retrieveStaffRoles)", "testcase": false, "constructor": false}, {"identifier": "mergePrincipalRoles", "parameters": "(Map<String, Set<String>> basePrincRoles, Map<String,\n            Set<String>> addPrincRoles)", "modifiers": "private", "return": "void", "signature": "void mergePrincipalRoles(Map<String, Set<String>> basePrincRoles, Map<String,\n            Set<String>> addPrincRoles)", "full_signature": "private void mergePrincipalRoles(Map<String, Set<String>> basePrincRoles, Map<String,\n            Set<String>> addPrincRoles)", "class_method_signature": "InheritedAclFactory.mergePrincipalRoles(Map<String, Set<String>> basePrincRoles, Map<String,\n            Set<String>> addPrincRoles)", "testcase": false, "constructor": false}, {"identifier": "hasActivePatronRole", "parameters": "(Set<String> patronPrincipals, Map<String, Set<String>> inheritedPrincRoles)", "modifiers": "private", "return": "boolean", "signature": "boolean hasActivePatronRole(Set<String> patronPrincipals, Map<String, Set<String>> inheritedPrincRoles)", "full_signature": "private boolean hasActivePatronRole(Set<String> patronPrincipals, Map<String, Set<String>> inheritedPrincRoles)", "class_method_signature": "InheritedAclFactory.hasActivePatronRole(Set<String> patronPrincipals, Map<String, Set<String>> inheritedPrincRoles)", "testcase": false, "constructor": false}, {"identifier": "adjustPatronPrincipalRoles", "parameters": "(PID pid,\n            Map<String, Set<String>> inheritedPrincRoles,\n            Set<String> inheritedPatronPrincipals,\n            Map<String, Set<String>> objectPrincipalRoles)", "modifiers": "private", "return": "void", "signature": "void adjustPatronPrincipalRoles(PID pid,\n            Map<String, Set<String>> inheritedPrincRoles,\n            Set<String> inheritedPatronPrincipals,\n            Map<String, Set<String>> objectPrincipalRoles)", "full_signature": "private void adjustPatronPrincipalRoles(PID pid,\n            Map<String, Set<String>> inheritedPrincRoles,\n            Set<String> inheritedPatronPrincipals,\n            Map<String, Set<String>> objectPrincipalRoles)", "class_method_signature": "InheritedAclFactory.adjustPatronPrincipalRoles(PID pid,\n            Map<String, Set<String>> inheritedPrincRoles,\n            Set<String> inheritedPatronPrincipals,\n            Map<String, Set<String>> objectPrincipalRoles)", "testcase": false, "constructor": false}, {"identifier": "removeNoneRoles", "parameters": "(Map<String, Set<String>> princRoles)", "modifiers": "private", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> removeNoneRoles(Map<String, Set<String>> princRoles)", "full_signature": "private Map<String, Set<String>> removeNoneRoles(Map<String, Set<String>> princRoles)", "class_method_signature": "InheritedAclFactory.removeNoneRoles(Map<String, Set<String>> princRoles)", "testcase": false, "constructor": false}, {"identifier": "getPatronAccess", "parameters": "(PID pid)", "modifiers": "@Override public", "return": "List<RoleAssignment>", "signature": "List<RoleAssignment> getPatronAccess(PID pid)", "full_signature": "@Override public List<RoleAssignment> getPatronAccess(PID pid)", "class_method_signature": "InheritedAclFactory.getPatronAccess(PID pid)", "testcase": false, "constructor": false}, {"identifier": "getEmbargoUntil", "parameters": "(PID target)", "modifiers": "@Override public", "return": "Date", "signature": "Date getEmbargoUntil(PID target)", "full_signature": "@Override public Date getEmbargoUntil(PID target)", "class_method_signature": "InheritedAclFactory.getEmbargoUntil(PID target)", "testcase": false, "constructor": false}, {"identifier": "isMarkedForDeletion", "parameters": "(PID target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMarkedForDeletion(PID target)", "full_signature": "@Override public boolean isMarkedForDeletion(PID target)", "class_method_signature": "InheritedAclFactory.isMarkedForDeletion(PID target)", "testcase": false, "constructor": false}, {"identifier": "getPidPath", "parameters": "(PID pid)", "modifiers": "private", "return": "List<PID>", "signature": "List<PID> getPidPath(PID pid)", "full_signature": "private List<PID> getPidPath(PID pid)", "class_method_signature": "InheritedAclFactory.getPidPath(PID pid)", "testcase": false, "constructor": false}, {"identifier": "setObjectAclFactory", "parameters": "(ObjectAclFactory objectAclFactory)", "modifiers": "public", "return": "void", "signature": "void setObjectAclFactory(ObjectAclFactory objectAclFactory)", "full_signature": "public void setObjectAclFactory(ObjectAclFactory objectAclFactory)", "class_method_signature": "InheritedAclFactory.setObjectAclFactory(ObjectAclFactory objectAclFactory)", "testcase": false, "constructor": false}, {"identifier": "setPathFactory", "parameters": "(ContentPathFactory pathFactory)", "modifiers": "public", "return": "void", "signature": "void setPathFactory(ContentPathFactory pathFactory)", "full_signature": "public void setPathFactory(ContentPathFactory pathFactory)", "class_method_signature": "InheritedAclFactory.setPathFactory(ContentPathFactory pathFactory)", "testcase": false, "constructor": false}], "file": "fcrepo-clients/src/main/java/edu/unc/lib/dl/acl/fcrepo4/InheritedAclFactory.java"}, "focal_method": {"identifier": "getPrincipalRoles", "parameters": "(PID target)", "modifiers": "@Override public", "return": "Map<String, Set<String>>", "body": "@Override\n    public Map<String, Set<String>> getPrincipalRoles(PID target) {\n\n        // Retrieve the path of objects up to and including the target\n        List<PID> path = getPidPath(target);\n\n        Map<String, Set<String>> inheritedPrincRoles = new HashMap<>();\n\n        // Iterate through each step in the path except for the root content node\n        int depth = 0;\n        for (; depth < path.size(); depth++) {\n            PID pathPid = path.get(depth);\n\n            Map<String, Set<String>> objectPrincipalRoles = objectAclFactory.getPrincipalRoles(pathPid);\n\n            // For the first two objects (unit, collection), staff roles should be considered\n            if (depth < CONTENT_STARTING_DEPTH) {\n                // Add this object's principals/roles to the result\n                mergePrincipalRoles(inheritedPrincRoles, objectPrincipalRoles);\n            }\n            if (depth >= COLLECTION_PATH_DEPTH) {\n                // No patron assignments with permissions inherited, nothing further may be added\n                Set<String> inheritedPatronPrincipals = getPatronPrincipals(inheritedPrincRoles.keySet());\n                if (!hasActivePatronRole(inheritedPatronPrincipals, inheritedPrincRoles)) {\n                    return removeNoneRoles(inheritedPrincRoles);\n                }\n\n                // Apply any further patron restrictions to inherited patron principals\n                adjustPatronPrincipalRoles(pathPid, inheritedPrincRoles,\n                        inheritedPatronPrincipals, objectPrincipalRoles);\n            }\n        }\n\n        // Units cannot be assigned patron roles, but have an assumed non-inheritable everyone permission\n        // Checking for unit depth + 1 since the counter will be one past the object checked\n        if (depth == UNIT_PATH_DEPTH + 1) {\n            Set<String> roles = new HashSet<>();\n            roles.add(UserRole.canViewOriginals.getPropertyString());\n            inheritedPrincRoles.put(AccessPrincipalConstants.PUBLIC_PRINC, roles);\n        }\n\n        return inheritedPrincRoles;\n    }", "signature": "Map<String, Set<String>> getPrincipalRoles(PID target)", "full_signature": "@Override public Map<String, Set<String>> getPrincipalRoles(PID target)", "class_method_signature": "InheritedAclFactory.getPrincipalRoles(PID target)", "testcase": false, "constructor": false, "invocations": ["getPidPath", "size", "get", "getPrincipalRoles", "mergePrincipalRoles", "getPatronPrincipals", "keySet", "hasActivePatronRole", "removeNoneRoles", "adjustPatronPrincipalRoles", "add", "getPropertyString", "put"]}, "repository": {"repo_id": 2357859, "url": "https://github.com/UNC-Libraries/Carolina-Digital-Repository", "stars": 10, "created": "9/9/2011 8:22:21 PM +00:00", "updates": "2020-01-24T19:34:45+00:00", "fork": "False", "license": "licensed"}}