{"test_class": {"identifier": "ForceConnectorConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "connector/src/test/java/com/force/sdk/connector/ForceConnectorConfigTest.java"}, "test_case": {"identifier": "testParseBadConnectionUrl", "parameters": "(String connectionUrl)", "modifiers": "@Test(dataProvider = \"badConnectionUrlProvider\") public", "return": "void", "body": "@Test(dataProvider = \"badConnectionUrlProvider\")\n    public void testParseBadConnectionUrl(String connectionUrl) throws Exception {\n        ForceConnectorConfig config = new ForceConnectorConfig();\n        try {\n            // Parse the connectionUrl in the setter\n            config.setConnectionUrl(connectionUrl);\n            fail(\"ForceConnectorConfig.setConnectionUrl should have failed with bad connection url.\");\n        } catch (IllegalArgumentException expected) {\n            if (connectionUrl != null) {\n                assertTrue(expected.getMessage().contains(connectionUrl));\n            } else {\n                assertTrue(expected.getMessage().contains(\"null\"));\n            }\n        }\n    }", "signature": "void testParseBadConnectionUrl(String connectionUrl)", "full_signature": "@Test(dataProvider = \"badConnectionUrlProvider\") public void testParseBadConnectionUrl(String connectionUrl)", "class_method_signature": "ForceConnectorConfigTest.testParseBadConnectionUrl(String connectionUrl)", "testcase": true, "constructor": false, "invocations": ["setConnectionUrl", "fail", "assertTrue", "contains", "getMessage", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "ForceConnectorConfig", "superclass": "extends ConnectorConfig", "interfaces": "implements Cloneable", "fields": [{"original_string": "private static final int MIN_CONN_URL_PROPS = 3;", "modifier": "private static final", "type": "int", "declarator": "MIN_CONN_URL_PROPS = 3", "var_name": "MIN_CONN_URL_PROPS"}, {"original_string": "private boolean namespaceInitialized;", "modifier": "private", "type": "boolean", "declarator": "namespaceInitialized", "var_name": "namespaceInitialized"}, {"original_string": "private String namespace;", "modifier": "private", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private String cacheId;", "modifier": "private", "type": "String", "declarator": "cacheId", "var_name": "cacheId"}, {"original_string": "private String clientId;", "modifier": "private", "type": "String", "declarator": "clientId", "var_name": "clientId"}, {"original_string": "private PrintStream loggerStream;", "modifier": "private", "type": "PrintStream", "declarator": "loggerStream", "var_name": "loggerStream"}], "methods": [{"identifier": "loadFromName", "parameters": "(String connectionName)", "modifiers": "static", "return": "ForceConnectorConfig", "signature": "ForceConnectorConfig loadFromName(String connectionName)", "full_signature": "static ForceConnectorConfig loadFromName(String connectionName)", "class_method_signature": "ForceConnectorConfig.loadFromName(String connectionName)", "testcase": false, "constructor": false}, {"identifier": "ForceConnectorConfig", "parameters": "()", "modifiers": "public", "return": "", "signature": " ForceConnectorConfig()", "full_signature": "public  ForceConnectorConfig()", "class_method_signature": "ForceConnectorConfig.ForceConnectorConfig()", "testcase": false, "constructor": true}, {"identifier": "setAuthEndpoint", "parameters": "(String authEndpoint)", "modifiers": "@Override public", "return": "void", "signature": "void setAuthEndpoint(String authEndpoint)", "full_signature": "@Override public void setAuthEndpoint(String authEndpoint)", "class_method_signature": "ForceConnectorConfig.setAuthEndpoint(String authEndpoint)", "testcase": false, "constructor": false}, {"identifier": "initCacheId", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initCacheId()", "full_signature": "private void initCacheId()", "class_method_signature": "ForceConnectorConfig.initCacheId()", "testcase": false, "constructor": false}, {"identifier": "getCacheId", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getCacheId()", "full_signature": " String getCacheId()", "class_method_signature": "ForceConnectorConfig.getCacheId()", "testcase": false, "constructor": false}, {"identifier": "getClientId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClientId()", "full_signature": "public String getClientId()", "class_method_signature": "ForceConnectorConfig.getClientId()", "testcase": false, "constructor": false}, {"identifier": "setClientId", "parameters": "(String clientId)", "modifiers": "public", "return": "void", "signature": "void setClientId(String clientId)", "full_signature": "public void setClientId(String clientId)", "class_method_signature": "ForceConnectorConfig.setClientId(String clientId)", "testcase": false, "constructor": false}, {"identifier": "setConnectionUrl", "parameters": "(String connectionUrl)", "modifiers": "public", "return": "void", "signature": "void setConnectionUrl(String connectionUrl)", "full_signature": "public void setConnectionUrl(String connectionUrl)", "class_method_signature": "ForceConnectorConfig.setConnectionUrl(String connectionUrl)", "testcase": false, "constructor": false}, {"identifier": "isNamespaceInitialized", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isNamespaceInitialized()", "full_signature": " boolean isNamespaceInitialized()", "class_method_signature": "ForceConnectorConfig.isNamespaceInitialized()", "testcase": false, "constructor": false}, {"identifier": "setNamespace", "parameters": "(String namespace)", "modifiers": "", "return": "void", "signature": "void setNamespace(String namespace)", "full_signature": " void setNamespace(String namespace)", "class_method_signature": "ForceConnectorConfig.setNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getNamespace()", "full_signature": " String getNamespace()", "class_method_signature": "ForceConnectorConfig.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "setPropsFromMap", "parameters": "(Map<ForceConnectionProperty, String> propMap, String propSource)", "modifiers": "private", "return": "void", "signature": "void setPropsFromMap(Map<ForceConnectionProperty, String> propMap, String propSource)", "full_signature": "private void setPropsFromMap(Map<ForceConnectionProperty, String> propMap, String propSource)", "class_method_signature": "ForceConnectorConfig.setPropsFromMap(Map<ForceConnectionProperty, String> propMap, String propSource)", "testcase": false, "constructor": false}, {"identifier": "setTraceMessage", "parameters": "(boolean traceMessage)", "modifiers": "@Override public", "return": "void", "signature": "void setTraceMessage(boolean traceMessage)", "full_signature": "@Override public void setTraceMessage(boolean traceMessage)", "class_method_signature": "ForceConnectorConfig.setTraceMessage(boolean traceMessage)", "testcase": false, "constructor": false}, {"identifier": "setUsername", "parameters": "(String username)", "modifiers": "@Override public", "return": "void", "signature": "void setUsername(String username)", "full_signature": "@Override public void setUsername(String username)", "class_method_signature": "ForceConnectorConfig.setUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "getTraceStream", "parameters": "()", "modifiers": "@Override public", "return": "PrintStream", "signature": "PrintStream getTraceStream()", "full_signature": "@Override public PrintStream getTraceStream()", "class_method_signature": "ForceConnectorConfig.getTraceStream()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ForceConnectorConfig.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ForceConnectorConfig.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override protected", "return": "Object", "signature": "Object clone()", "full_signature": "@Override protected Object clone()", "class_method_signature": "ForceConnectorConfig.clone()", "testcase": false, "constructor": false}], "file": "connector/src/main/java/com/force/sdk/connector/ForceConnectorConfig.java"}, "focal_method": {"identifier": "setConnectionUrl", "parameters": "(String connectionUrl)", "modifiers": "public", "return": "void", "body": "public void setConnectionUrl(String connectionUrl) {\n        Map<ForceConnectionProperty, String> propMap = ForceConnectorUtils.loadConnectorPropsFromUrl(connectionUrl);\n        if (propMap == null || propMap.size() < MIN_CONN_URL_PROPS) {\n            throw new IllegalArgumentException(\"The connection url (\" + connectionUrl + \") must contain at least three parts. \"\n                                                + \"It should be in the form force://<endPoint>?user=<user>&password=<password>\");\n        }\n        \n        setPropsFromMap(propMap, connectionUrl);\n    }", "signature": "void setConnectionUrl(String connectionUrl)", "full_signature": "public void setConnectionUrl(String connectionUrl)", "class_method_signature": "ForceConnectorConfig.setConnectionUrl(String connectionUrl)", "testcase": false, "constructor": false, "invocations": ["loadConnectorPropsFromUrl", "size", "setPropsFromMap"]}, "repository": {"repo_id": 1812602, "url": "https://github.com/forcedotcom/java-sdk", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 46, "size": 4091, "license": "licensed"}}