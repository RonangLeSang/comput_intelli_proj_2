{"test_class": {"identifier": "UserRegionalCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject MockWebServer mMockWebServer;", "modifier": "@Inject", "type": "MockWebServer", "declarator": "mMockWebServer", "var_name": "mMockWebServer"}, {"original_string": "@Inject UserRegionalCache mUserRegionalCache;", "modifier": "@Inject", "type": "UserRegionalCache", "declarator": "mUserRegionalCache", "var_name": "mUserRegionalCache"}], "file": "app/src/test/java/fi/bitrite/android/ws/util/UserRegionalCacheTest.java"}, "test_case": {"identifier": "testSearchByLocationTimeoutOnDisposed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSearchByLocationTimeoutOnDisposed() {\n        WSTest.UncaughtRxExceptionHelper uncaughtRxExceptionHelper =\n                WSTest.createUncaughtRxExceptionHelper();\n\n        final Lock lock = new ReentrantLock();\n        final AtomicBoolean requestStarted = new AtomicBoolean(false);\n        final AtomicBoolean requestServed = new AtomicBoolean(false);\n\n        mMockWebServer.setDispatcher(new Dispatcher() {\n\n            @Override\n            public MockResponse dispatch(RecordedRequest request) throws InterruptedException {\n                if (!request.getPath().equals(\"/services/rest/hosts/by_location\")) {\n                    return new MockResponse()\n                            .setStatus(\"HTTP/1.1 500\")\n                            .setBody(\"[\\\"Unhandled\\\"]\");\n                }\n\n                requestStarted.set(true);\n                try {\n                    // Wait for the lock to be released. Then we are sure that the disposable is\n                    // disposed.\n                    lock.lock();\n\n                    return new MockResponse()\n                            .setStatus(\"HTTP/1.1 500\")\n                            .setBody(\"[\\\"Mock error\\\"]\");\n                } finally {\n                    requestServed.set(true);\n                    lock.unlock();\n                }\n            }\n        });\n\n        // Set up the request. Hold the lock to ensure the request not being served before the\n        // disposable is disposed.\n        try {\n            lock.lock();\n            Disposable disposable = mUserRegionalCache.searchByLocation(new BoundingBox(0, 3, 2, 1))\n                    .subscribe(\n                            searchResult -> fail(\"No result expected from disposed\"),\n                            throwable -> fail(\"No error expected from disposed\"));\n\n            for (int i = 0; i < 10; i++) {\n                if (requestStarted.get()) {\n                    break;\n                }\n                WSTest.sleepAndFlush(100);\n            }\n            assertThat(requestStarted.get()).isTrue();\n\n            disposable.dispose();\n        } finally {\n            lock.unlock();\n        }\n\n        // Now wait some time to verify that no uncaught exception shows up.\n        for (int i = 0; i < 10; ++i) {\n            WSTest.sleepAndFlush(100);\n        }\n        assertThat(requestServed.get()).isTrue();\n        uncaughtRxExceptionHelper.assertNoException();\n    }", "signature": "void testSearchByLocationTimeoutOnDisposed()", "full_signature": "@Test public void testSearchByLocationTimeoutOnDisposed()", "class_method_signature": "UserRegionalCacheTest.testSearchByLocationTimeoutOnDisposed()", "testcase": true, "constructor": false, "invocations": ["createUncaughtRxExceptionHelper", "setDispatcher", "equals", "getPath", "setBody", "setStatus", "set", "lock", "setBody", "setStatus", "set", "unlock", "lock", "subscribe", "searchByLocation", "fail", "fail", "get", "sleepAndFlush", "isTrue", "assertThat", "get", "dispose", "unlock", "sleepAndFlush", "isTrue", "assertThat", "get", "assertNoException"]}, "focal_class": {"identifier": "UserRegionalCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject AppScopeUserRegionalCache mAppScopeUserRegionalCache;", "modifier": "@Inject", "type": "AppScopeUserRegionalCache", "declarator": "mAppScopeUserRegionalCache", "var_name": "mAppScopeUserRegionalCache"}, {"original_string": "@Inject UserRepository mUserRepository;", "modifier": "@Inject", "type": "UserRepository", "declarator": "mUserRepository", "var_name": "mUserRepository"}], "methods": [{"identifier": "UserRegionalCache", "parameters": "()", "modifiers": "@Inject", "return": "", "signature": " UserRegionalCache()", "full_signature": "@Inject  UserRegionalCache()", "class_method_signature": "UserRegionalCache.UserRegionalCache()", "testcase": false, "constructor": true}, {"identifier": "getAllCached", "parameters": "()", "modifiers": "public", "return": "Collection<UserSearchByLocationResponse.User>", "signature": "Collection<UserSearchByLocationResponse.User> getAllCached()", "full_signature": "public Collection<UserSearchByLocationResponse.User> getAllCached()", "class_method_signature": "UserRegionalCache.getAllCached()", "testcase": false, "constructor": false}, {"identifier": "searchByLocation", "parameters": "(\n            BoundingBox boundingBox)", "modifiers": "public", "return": "Observable<List<UserSearchByLocationResponse.User>>", "signature": "Observable<List<UserSearchByLocationResponse.User>> searchByLocation(\n            BoundingBox boundingBox)", "full_signature": "public Observable<List<UserSearchByLocationResponse.User>> searchByLocation(\n            BoundingBox boundingBox)", "class_method_signature": "UserRegionalCache.searchByLocation(\n            BoundingBox boundingBox)", "testcase": false, "constructor": false}], "file": "app/src/main/java/fi/bitrite/android/ws/util/UserRegionalCache.java"}, "focal_method": {"identifier": "searchByLocation", "parameters": "(\n            BoundingBox boundingBox)", "modifiers": "public", "return": "Observable<List<UserSearchByLocationResponse.User>>", "body": "public Observable<List<UserSearchByLocationResponse.User>> searchByLocation(\n            BoundingBox boundingBox) {\n        return mAppScopeUserRegionalCache.searchByLocation(boundingBox, mUserRepository);\n    }", "signature": "Observable<List<UserSearchByLocationResponse.User>> searchByLocation(\n            BoundingBox boundingBox)", "full_signature": "public Observable<List<UserSearchByLocationResponse.User>> searchByLocation(\n            BoundingBox boundingBox)", "class_method_signature": "UserRegionalCache.searchByLocation(\n            BoundingBox boundingBox)", "testcase": false, "constructor": false, "invocations": ["searchByLocation"]}, "repository": {"repo_id": 3242289, "url": "https://github.com/warmshowers/wsandroid", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 40, "size": 6896, "license": "licensed"}}