{"test_class": {"identifier": "CastableExprTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Holder holder;", "modifier": "private", "type": "Holder", "declarator": "holder", "var_name": "holder"}], "file": "bundles/sirix-core/src/test/java/org/sirix/service/xml/xpath/expr/CastableExprTest.java"}, "test_case": {"identifier": "testCastableExpr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCastableExpr() throws SirixException {\n\n    final AbstractAxis axis1 = new XPathAxis(holder.getXmlNodeReadTrx(), \"1 castable as xs:decimal\");\n    assertEquals(true, axis1.hasNext());\n    axis1.next();\n    assertEquals(holder.getXmlNodeReadTrx().keyForName(\"xs:boolean\"), holder.getXmlNodeReadTrx().getTypeKey());\n    assertEquals(true, Boolean.parseBoolean(holder.getXmlNodeReadTrx().getValue()));\n    assertEquals(false, axis1.hasNext());\n\n    final AbstractAxis axis2 =\n        new XPathAxis(holder.getXmlNodeReadTrx(), \"10.0 castable as xs:anyAtomicType\");\n    try {\n      assertEquals(true, axis2.hasNext());\n      axis2.next();\n    } catch (XPathError e) {\n      assertThat(\n          e.getMessage(),\n          is(\n              \"err:XPST0080 \" + \"Target type of a cast or castable expression must not be \"\n                  + \"xs:NOTATION or xs:anyAtomicType.\"));\n    }\n\n    // Token is not implemented yet.\n    // final IAxis axis3 = new XPathAxis(holder.getRtx(),\n    // \"\\\"hello\\\" castable as xs:token\");\n    // assertEquals(true, axis3.hasNext());\n    // assertEquals(Type.BOOLEAN, holder.getRtx().getValueTypeAsType());\n    // assertEquals(true, holder.getRtx().getValueAsBoolean());\n    // assertEquals(false, axis3.hasNext());\n\n    final AbstractAxis axis4 = new XPathAxis(holder.getXmlNodeReadTrx(), \"\\\"hello\\\" castable as xs:string\");\n    assertEquals(true, axis4.hasNext());\n    axis4.next();\n    assertEquals(holder.getXmlNodeReadTrx().keyForName(\"xs:boolean\"), holder.getXmlNodeReadTrx().getTypeKey());\n    assertEquals(true, Boolean.parseBoolean(holder.getXmlNodeReadTrx().getValue()));\n    assertEquals(false, axis4.hasNext());\n\n    // final IAxis axis5 = new XPathAxis(holder.getRtx(),\n    // \"\\\"hello\\\" castable as xs:decimal\");\n    // assertEquals(true, axis5.hasNext());\n    // assertEquals(holder.getRtx().keyForName(\"xs:boolean\"),\n    // holder.getRtx().getTypeKey());\n    // assertEquals(true, Boolean.parseBoolean(holder.getRtx().getValue()));\n    // assertEquals(false, axis5.hasNext());\n\n  }", "signature": "void testCastableExpr()", "full_signature": "@Test public void testCastableExpr()", "class_method_signature": "CastableExprTest.testCastableExpr()", "testcase": true, "constructor": false, "invocations": ["getXmlNodeReadTrx", "assertEquals", "hasNext", "next", "assertEquals", "keyForName", "getXmlNodeReadTrx", "getTypeKey", "getXmlNodeReadTrx", "assertEquals", "parseBoolean", "getValue", "getXmlNodeReadTrx", "assertEquals", "hasNext", "getXmlNodeReadTrx", "assertEquals", "hasNext", "next", "assertThat", "getMessage", "is", "getXmlNodeReadTrx", "assertEquals", "hasNext", "next", "assertEquals", "keyForName", "getXmlNodeReadTrx", "getTypeKey", "getXmlNodeReadTrx", "assertEquals", "parseBoolean", "getValue", "getXmlNodeReadTrx", "assertEquals", "hasNext"]}, "focal_class": {"identifier": "CastableExpr", "superclass": "extends AbstractExpression", "interfaces": "", "fields": [{"original_string": "private final Axis mSourceExpr;", "modifier": "private final", "type": "Axis", "declarator": "mSourceExpr", "var_name": "mSourceExpr"}, {"original_string": "private final Type mTargetType;", "modifier": "private final", "type": "Type", "declarator": "mTargetType", "var_name": "mTargetType"}, {"original_string": "private final boolean mPermitEmptySeq;", "modifier": "private final", "type": "boolean", "declarator": "mPermitEmptySeq", "var_name": "mPermitEmptySeq"}], "methods": [{"identifier": "CastableExpr", "parameters": "(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget)", "modifiers": "public", "return": "", "signature": " CastableExpr(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget)", "full_signature": "public  CastableExpr(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget)", "class_method_signature": "CastableExpr.CastableExpr(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "(final long mNodeKey)", "modifiers": "@Override public", "return": "void", "signature": "void reset(final long mNodeKey)", "full_signature": "@Override public void reset(final long mNodeKey)", "class_method_signature": "CastableExpr.reset(final long mNodeKey)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void evaluate()", "full_signature": "@Override public void evaluate()", "class_method_signature": "CastableExpr.evaluate()", "testcase": false, "constructor": false}], "file": "bundles/sirix-core/src/main/java/org/sirix/service/xml/xpath/expr/CastableExpr.java"}, "focal_method": {"identifier": "CastableExpr", "parameters": "(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget)", "modifiers": "public", "return": "", "body": "public CastableExpr(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget) {\n\n    super(rtx);\n    mSourceExpr = inputExpr;\n    mTargetType = mTarget.getAtomic();\n    mPermitEmptySeq = mTarget.hasInterogation();\n\n  }", "signature": " CastableExpr(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget)", "full_signature": "public  CastableExpr(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget)", "class_method_signature": "CastableExpr.CastableExpr(final XmlNodeReadOnlyTrx rtx, final Axis inputExpr, final SingleType mTarget)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4604367, "url": "https://github.com/sirixdb/sirix", "stars": 510, "created": "6/9/2012 2:22:14 AM +00:00", "updates": "2020-01-27T20:14:11+00:00", "fork": "False", "license": "licensed"}}