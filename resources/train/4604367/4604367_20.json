{"test_class": {"identifier": "NodeIdRepresentationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private transient static NodeIdRepresentation ridWorker;", "modifier": "private transient static", "type": "NodeIdRepresentation", "declarator": "ridWorker", "var_name": "ridWorker"}, {"original_string": "private transient static DatabaseRepresentation sirix;", "modifier": "private transient static", "type": "DatabaseRepresentation", "declarator": "sirix", "var_name": "sirix"}, {"original_string": "private static transient final long NODEIDGETRESOURCE = 17;", "modifier": "private static transient final", "type": "long", "declarator": "NODEIDGETRESOURCE = 17", "var_name": "NODEIDGETRESOURCE"}, {"original_string": "private static transient final long NODEIDTOMODIFY = 11;", "modifier": "private static transient final", "type": "long", "declarator": "NODEIDTOMODIFY = 11", "var_name": "NODEIDTOMODIFY"}, {"original_string": "private static transient final String NAME = \"name\";", "modifier": "private static transient final", "type": "String", "declarator": "NAME = \"name\"", "var_name": "NAME"}, {"original_string": "private static final transient String RESOURCENAME = \"factyTest\";", "modifier": "private static final transient", "type": "String", "declarator": "RESOURCENAME = \"factyTest\"", "var_name": "RESOURCENAME"}, {"original_string": "private static final transient String LITERALSTRUE = \"yes\";", "modifier": "private static final transient", "type": "String", "declarator": "LITERALSTRUE = \"yes\"", "var_name": "LITERALSTRUE"}, {"original_string": "private static final transient String LITERALSFALSE = \"no\";", "modifier": "private static final transient", "type": "String", "declarator": "LITERALSFALSE = \"no\"", "var_name": "LITERALSFALSE"}, {"original_string": "private static final transient String RESULTNAME = \"jaxrx:result\";", "modifier": "private static final transient", "type": "String", "declarator": "RESULTNAME = \"jaxrx:result\"", "var_name": "RESULTNAME"}, {"original_string": "private static final transient String IDNAME = \"rest:ttid\";", "modifier": "private static final transient", "type": "String", "declarator": "IDNAME = \"rest:ttid\"", "var_name": "IDNAME"}, {"original_string": "private static final transient String COUNTRYNAME = \"country\";", "modifier": "private static final transient", "type": "String", "declarator": "COUNTRYNAME = \"country\"", "var_name": "COUNTRYNAME"}, {"original_string": "private static final String QUERY = \"/descendant-or-self::city/child::name\";", "modifier": "private static final", "type": "String", "declarator": "QUERY = \"/descendant-or-self::city/child::name\"", "var_name": "QUERY"}, {"original_string": "private static final String NODENAME = \"myNode\";", "modifier": "private static final", "type": "String", "declarator": "NODENAME = \"myNode\"", "var_name": "NODENAME"}], "file": "bundles/sirix-jax-rx/src/test/java/org/sirix/service/jaxrx/implementation/NodeIdRepresentationTest.java"}, "test_case": {"identifier": "testGetResource", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n\tpublic final void testGetResource() throws WebApplicationException,\n\t\t\tIOException, ParserConfigurationException, SAXException {\n\t\tfinal Map<QueryParameter, String> queryParams = new HashMap<QueryParameter, String>();\n\t\tqueryParams.put(QueryParameter.OUTPUT, LITERALSTRUE);\n\t\tqueryParams.put(QueryParameter.WRAP, LITERALSTRUE);\n\t\tqueryParams.put(QueryParameter.REVISION, \"0\");\n\n\t\tByteArrayOutputStream outputStream;\n\t\tStreamingOutput result;\n\t\tDocument doc;\n\t\tNodeList list;\n\t\tNode node;\n\t\tNode resultNode;\n\t\tAttr attribute;\n\n\t\t// Test for fist child\n\t\tresult = ridWorker\n\t\t\t\t.getResource(RESOURCENAME, NODEIDGETRESOURCE, queryParams);\n\t\toutputStream = new ByteArrayOutputStream();\n\t\tresult.write(outputStream);\n\t\tdoc = DOMHelper.buildDocument(outputStream);\n\t\tlist = doc.getElementsByTagName(\"city\");\n\t\tnode = list.item(0);\n\t\tattribute = (Attr) node.getAttributes().getNamedItem(IDNAME);\n\t\tfinal NodeList resultList = doc.getElementsByTagName(RESULTNAME);\n\t\tresultNode = resultList.item(0);\n\t\toutputStream.close();\n\t\tassertNotNull(\"Test if node exist 1a\", node);\n\t\tassertNotNull(\"Test if node exist 1b\", resultNode);\n\t\tassertNotNull(\"Test if node exist 1c\", attribute);\n\n\t\tqueryParams.clear();\n\t\tqueryParams.put(QueryParameter.OUTPUT, LITERALSFALSE);\n\t\tqueryParams.put(QueryParameter.QUERY, null);\n\t\tqueryParams.put(QueryParameter.WRAP, LITERALSFALSE);\n\t\tqueryParams.put(QueryParameter.REVISION, null);\n\n\t\tresult = ridWorker\n\t\t\t\t.getResource(RESOURCENAME, NODEIDGETRESOURCE, queryParams);\n\t\toutputStream = new ByteArrayOutputStream();\n\t\tresult.write(outputStream);\n\t\tdoc = DOMHelper.buildDocument(outputStream);\n\t\tlist = doc.getElementsByTagName(COUNTRYNAME);\n\t\tnode = list.item(0);\n\t\tattribute = (Attr) node.getAttributes().getNamedItem(IDNAME);\n\t\tresultNode = doc.getElementsByTagName(RESULTNAME).item(0);\n\t\toutputStream.close();\n\t\tassertNotNull(\"Test if node exist 2a\", node);\n\t\tassertNull(\"Test if node exist 2b\", resultNode);\n\t\tassertNull(\"Test if node exist 2c\", attribute);\n\n\t\tqueryParams.clear();\n\t\tqueryParams.put(QueryParameter.OUTPUT, LITERALSFALSE);\n\t\tqueryParams.put(QueryParameter.WRAP, LITERALSTRUE);\n\t\tqueryParams.put(QueryParameter.REVISION, null);\n\t\tresult = ridWorker\n\t\t\t\t.getResource(RESOURCENAME, NODEIDGETRESOURCE, queryParams);\n\t\toutputStream = new ByteArrayOutputStream();\n\t\tresult.write(outputStream);\n\t\tdoc = DOMHelper.buildDocument(outputStream);\n\t\tlist = doc.getElementsByTagName(\"city\");\n\t\tnode = list.item(0);\n\t\tattribute = (Attr) node.getAttributes().getNamedItem(IDNAME);\n\t\tresultNode = doc.getElementsByTagName(RESULTNAME).item(0);\n\t\toutputStream.close();\n\t\tassertNotNull(\"Test if node exist 3a\", node);\n\t\tassertNotNull(\"Test if node exist 3b\", resultNode);\n\t\tassertNull(\"Test if node exist 3c\", attribute);\n\n\t\tqueryParams.clear();\n\t\tqueryParams.put(QueryParameter.OUTPUT, LITERALSFALSE);\n\t\tqueryParams.put(QueryParameter.WRAP, LITERALSTRUE);\n\t\tqueryParams.put(QueryParameter.REVISION, \"0\");\n\t\tresult = ridWorker\n\t\t\t\t.getResource(RESOURCENAME, NODEIDGETRESOURCE, queryParams);\n\t\toutputStream = new ByteArrayOutputStream();\n\t\tresult.write(outputStream);\n\t\tdoc = DOMHelper.buildDocument(outputStream);\n\t\tlist = doc.getElementsByTagName(COUNTRYNAME);\n\t\tnode = list.item(0);\n\t\tattribute = (Attr) node.getAttributes().getNamedItem(IDNAME);\n\t\tresultNode = doc.getElementsByTagName(RESULTNAME).item(0);\n\t\toutputStream.close();\n\t\tassertNotNull(\"Test if node exist 4a\", node);\n\t\tassertNotNull(\"Test if node exist 4b\", resultNode);\n\t\tassertNull(\"Test if node exist 4c\", attribute);\n\t}", "signature": "void testGetResource()", "full_signature": "@Test public final void testGetResource()", "class_method_signature": "NodeIdRepresentationTest.testGetResource()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "getResource", "write", "buildDocument", "getElementsByTagName", "item", "getNamedItem", "getAttributes", "getElementsByTagName", "item", "close", "assertNotNull", "assertNotNull", "assertNotNull", "clear", "put", "put", "put", "put", "getResource", "write", "buildDocument", "getElementsByTagName", "item", "getNamedItem", "getAttributes", "item", "getElementsByTagName", "close", "assertNotNull", "assertNull", "assertNull", "clear", "put", "put", "put", "getResource", "write", "buildDocument", "getElementsByTagName", "item", "getNamedItem", "getAttributes", "item", "getElementsByTagName", "close", "assertNotNull", "assertNotNull", "assertNull", "clear", "put", "put", "put", "getResource", "write", "buildDocument", "getElementsByTagName", "item", "getNamedItem", "getAttributes", "item", "getElementsByTagName", "close", "assertNotNull", "assertNotNull", "assertNull"]}, "focal_class": {"identifier": "NodeIdRepresentation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] BEGINRESULT = \"<jaxrx:result xmlns:jaxrx=\\\"http://jaxrx.org/\\\">\"\n\t\t\t.getBytes(Constants.DEFAULT_ENCODING);", "modifier": "private static final", "type": "byte[]", "declarator": "BEGINRESULT = \"<jaxrx:result xmlns:jaxrx=\\\"http://jaxrx.org/\\\">\"\n\t\t\t.getBytes(Constants.DEFAULT_ENCODING)", "var_name": "BEGINRESULT"}, {"original_string": "private static final byte[] ENDRESULT = \"</jaxrx:result>\"\n\t\t\t.getBytes(Constants.DEFAULT_ENCODING);", "modifier": "private static final", "type": "byte[]", "declarator": "ENDRESULT = \"</jaxrx:result>\"\n\t\t\t.getBytes(Constants.DEFAULT_ENCODING)", "var_name": "ENDRESULT"}, {"original_string": "private static final String NOTFOUND = \"Node id not found\";", "modifier": "private static final", "type": "String", "declarator": "NOTFOUND = \"Node id not found\"", "var_name": "NOTFOUND"}, {"original_string": "private static final String YESSTRING = \"yes\";", "modifier": "private static final", "type": "String", "declarator": "YESSTRING = \"yes\"", "var_name": "YESSTRING"}, {"original_string": "private final File mStoragePath;", "modifier": "private final", "type": "File", "declarator": "mStoragePath", "var_name": "mStoragePath"}], "methods": [{"identifier": "NodeIdRepresentation", "parameters": "(final File storagePath)", "modifiers": "public", "return": "", "signature": " NodeIdRepresentation(final File storagePath)", "full_signature": "public  NodeIdRepresentation(final File storagePath)", "class_method_signature": "NodeIdRepresentation.NodeIdRepresentation(final File storagePath)", "testcase": false, "constructor": true}, {"identifier": "getResource", "parameters": "(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)", "modifiers": "public", "return": "StreamingOutput", "signature": "StreamingOutput getResource(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)", "full_signature": "public StreamingOutput getResource(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)", "class_method_signature": "NodeIdRepresentation.getResource(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)", "testcase": false, "constructor": false}, {"identifier": "getResourceByAT", "parameters": "(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams,\n\t\t\tfinal IDAccessType accessType)", "modifiers": "public", "return": "StreamingOutput", "signature": "StreamingOutput getResourceByAT(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams,\n\t\t\tfinal IDAccessType accessType)", "full_signature": "public StreamingOutput getResourceByAT(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams,\n\t\t\tfinal IDAccessType accessType)", "class_method_signature": "NodeIdRepresentation.getResourceByAT(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams,\n\t\t\tfinal IDAccessType accessType)", "testcase": false, "constructor": false}, {"identifier": "performQueryOnResource", "parameters": "(final String resourceName,\n\t\t\tfinal long nodeId, final String query,\n\t\t\tfinal Map<QueryParameter, String> queryParams)", "modifiers": "public", "return": "StreamingOutput", "signature": "StreamingOutput performQueryOnResource(final String resourceName,\n\t\t\tfinal long nodeId, final String query,\n\t\t\tfinal Map<QueryParameter, String> queryParams)", "full_signature": "public StreamingOutput performQueryOnResource(final String resourceName,\n\t\t\tfinal long nodeId, final String query,\n\t\t\tfinal Map<QueryParameter, String> queryParams)", "class_method_signature": "NodeIdRepresentation.performQueryOnResource(final String resourceName,\n\t\t\tfinal long nodeId, final String query,\n\t\t\tfinal Map<QueryParameter, String> queryParams)", "testcase": false, "constructor": false}, {"identifier": "deleteResource", "parameters": "(final String resourceName, final long nodeId)", "modifiers": "public", "return": "void", "signature": "void deleteResource(final String resourceName, final long nodeId)", "full_signature": "public void deleteResource(final String resourceName, final long nodeId)", "class_method_signature": "NodeIdRepresentation.deleteResource(final String resourceName, final long nodeId)", "testcase": false, "constructor": false}, {"identifier": "modifyResource", "parameters": "(final String resourceName, final long nodeId,\n\t\t\tfinal InputStream newValue)", "modifiers": "public", "return": "void", "signature": "void modifyResource(final String resourceName, final long nodeId,\n\t\t\tfinal InputStream newValue)", "full_signature": "public void modifyResource(final String resourceName, final long nodeId,\n\t\t\tfinal InputStream newValue)", "class_method_signature": "NodeIdRepresentation.modifyResource(final String resourceName, final long nodeId,\n\t\t\tfinal InputStream newValue)", "testcase": false, "constructor": false}, {"identifier": "addSubResource", "parameters": "(final String resourceName, final long nodeId,\n\t\t\tfinal InputStream input, final IDAccessType type)", "modifiers": "public", "return": "void", "signature": "void addSubResource(final String resourceName, final long nodeId,\n\t\t\tfinal InputStream input, final IDAccessType type)", "full_signature": "public void addSubResource(final String resourceName, final long nodeId,\n\t\t\tfinal InputStream input, final IDAccessType type)", "class_method_signature": "NodeIdRepresentation.addSubResource(final String resourceName, final long nodeId,\n\t\t\tfinal InputStream input, final IDAccessType type)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(final String resource, final long nodeId,\n\t\t\tfinal Long revision, final boolean doNodeId, final OutputStream output,\n\t\t\tfinal boolean wrapResult)", "modifiers": "private", "return": "void", "signature": "void serialize(final String resource, final long nodeId,\n\t\t\tfinal Long revision, final boolean doNodeId, final OutputStream output,\n\t\t\tfinal boolean wrapResult)", "full_signature": "private void serialize(final String resource, final long nodeId,\n\t\t\tfinal Long revision, final boolean doNodeId, final OutputStream output,\n\t\t\tfinal boolean wrapResult)", "class_method_signature": "NodeIdRepresentation.serialize(final String resource, final long nodeId,\n\t\t\tfinal Long revision, final boolean doNodeId, final OutputStream output,\n\t\t\tfinal boolean wrapResult)", "testcase": false, "constructor": false}, {"identifier": "serializeAT", "parameters": "(final String resource, final long nodeId,\n\t\t\tfinal Integer revision, final boolean doNodeId,\n\t\t\tfinal OutputStream output, final boolean wrapResult,\n\t\t\tfinal IDAccessType accessType)", "modifiers": "private", "return": "void", "signature": "void serializeAT(final String resource, final long nodeId,\n\t\t\tfinal Integer revision, final boolean doNodeId,\n\t\t\tfinal OutputStream output, final boolean wrapResult,\n\t\t\tfinal IDAccessType accessType)", "full_signature": "private void serializeAT(final String resource, final long nodeId,\n\t\t\tfinal Integer revision, final boolean doNodeId,\n\t\t\tfinal OutputStream output, final boolean wrapResult,\n\t\t\tfinal IDAccessType accessType)", "class_method_signature": "NodeIdRepresentation.serializeAT(final String resource, final long nodeId,\n\t\t\tfinal Integer revision, final boolean doNodeId,\n\t\t\tfinal OutputStream output, final boolean wrapResult,\n\t\t\tfinal IDAccessType accessType)", "testcase": false, "constructor": false}], "file": "bundles/sirix-jax-rx/src/main/java/org/sirix/service/jaxrx/implementation/NodeIdRepresentation.java"}, "focal_method": {"identifier": "getResource", "parameters": "(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)", "modifiers": "public", "return": "StreamingOutput", "body": "public StreamingOutput getResource(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)\n\t\t\tthrows JaxRxException {\n\t\tfinal StreamingOutput sOutput = new StreamingOutput() {\n\t\t\t@Override\n\t\t\tpublic void write(final OutputStream output) throws IOException,\n\t\t\t\t\tJaxRxException {\n\n\t\t\t\t// final String xPath = queryParams.get(QueryParameter.QUERY);\n\t\t\t\tfinal String revision = queryParams.get(QueryParameter.REVISION);\n\t\t\t\tfinal String wrap = queryParams.get(QueryParameter.WRAP);\n\t\t\t\tfinal String doNodeId = queryParams.get(QueryParameter.OUTPUT);\n\t\t\t\tfinal boolean wrapResult = (wrap == null) ? false : wrap\n\t\t\t\t\t\t.equalsIgnoreCase(YESSTRING);\n\t\t\t\tfinal boolean nodeid = (doNodeId == null) ? false : doNodeId\n\t\t\t\t\t\t.equalsIgnoreCase(YESSTRING);\n\t\t\t\tfinal Long rev = revision == null ? null : Long.valueOf(revision);\n\t\t\t\tserialize(resourceName, nodeId, rev, nodeid, output, wrapResult);\n\t\t\t}\n\t\t};\n\n\t\treturn sOutput;\n\t}", "signature": "StreamingOutput getResource(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)", "full_signature": "public StreamingOutput getResource(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)", "class_method_signature": "NodeIdRepresentation.getResource(final String resourceName,\n\t\t\tfinal long nodeId, final Map<QueryParameter, String> queryParams)", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "equalsIgnoreCase", "equalsIgnoreCase", "valueOf", "serialize"]}, "repository": {"repo_id": 4604367, "url": "https://github.com/sirixdb/sirix", "stars": 510, "created": "6/9/2012 2:22:14 AM +00:00", "updates": "2020-01-27T20:14:11+00:00", "fork": "False", "license": "licensed"}}