{"test_class": {"identifier": "AddOpAxisTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Holder holder;", "modifier": "private", "type": "Holder", "declarator": "holder", "var_name": "holder"}], "file": "bundles/sirix-core/src/test/java/org/sirix/service/xml/xpath/operators/AddOpAxisTest.java"}, "test_case": {"identifier": "testOperate", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n  public final void testOperate() throws SirixException {\n    AtomicValue item1 = new AtomicValue(1.0, Type.DOUBLE);\n    AtomicValue item2 = new AtomicValue(2.0, Type.DOUBLE);\n\n    AbstractAxis op1 =\n        new LiteralExpr(holder.getXmlNodeReadTrx(), holder.getXmlNodeReadTrx().getItemList().addItem(item1));\n    AbstractAxis op2 =\n        new LiteralExpr(holder.getXmlNodeReadTrx(), holder.getXmlNodeReadTrx().getItemList().addItem(item2));\n    AbstractObAxis axis = new AddOpAxis(holder.getXmlNodeReadTrx(), op1, op2);\n\n    assertEquals(true, axis.hasNext());\n    axis.next();\n    assertThat(3.0, is(Double.parseDouble(holder.getXmlNodeReadTrx().getValue())));\n    assertEquals(holder.getXmlNodeReadTrx().keyForName(\"xs:double\"), holder.getXmlNodeReadTrx().getTypeKey());\n    assertEquals(false, axis.hasNext());\n\n  }", "signature": "void testOperate()", "full_signature": "@Test public final void testOperate()", "class_method_signature": "AddOpAxisTest.testOperate()", "testcase": true, "constructor": false, "invocations": ["getXmlNodeReadTrx", "addItem", "getItemList", "getXmlNodeReadTrx", "getXmlNodeReadTrx", "addItem", "getItemList", "getXmlNodeReadTrx", "getXmlNodeReadTrx", "assertEquals", "hasNext", "next", "assertThat", "is", "parseDouble", "getValue", "getXmlNodeReadTrx", "assertEquals", "keyForName", "getXmlNodeReadTrx", "getTypeKey", "getXmlNodeReadTrx", "assertEquals", "hasNext"]}, "focal_class": {"identifier": "AddOpAxis", "superclass": "extends AbstractObAxis", "interfaces": "", "fields": [], "methods": [{"identifier": "AddOpAxis", "parameters": "(final XmlNodeReadOnlyTrx rtx, final Axis mOp1, final Axis mOp2)", "modifiers": "public", "return": "", "signature": " AddOpAxis(final XmlNodeReadOnlyTrx rtx, final Axis mOp1, final Axis mOp2)", "full_signature": "public  AddOpAxis(final XmlNodeReadOnlyTrx rtx, final Axis mOp1, final Axis mOp2)", "class_method_signature": "AddOpAxis.AddOpAxis(final XmlNodeReadOnlyTrx rtx, final Axis mOp1, final Axis mOp2)", "testcase": false, "constructor": true}, {"identifier": "operate", "parameters": "(final AtomicValue mOperand1, final AtomicValue mOperand2)", "modifiers": "@Override public", "return": "Node", "signature": "Node operate(final AtomicValue mOperand1, final AtomicValue mOperand2)", "full_signature": "@Override public Node operate(final AtomicValue mOperand1, final AtomicValue mOperand2)", "class_method_signature": "AddOpAxis.operate(final AtomicValue mOperand1, final AtomicValue mOperand2)", "testcase": false, "constructor": false}, {"identifier": "getReturnType", "parameters": "(final int mOp1, final int mOp2)", "modifiers": "@Override protected", "return": "Type", "signature": "Type getReturnType(final int mOp1, final int mOp2)", "full_signature": "@Override protected Type getReturnType(final int mOp1, final int mOp2)", "class_method_signature": "AddOpAxis.getReturnType(final int mOp1, final int mOp2)", "testcase": false, "constructor": false}], "file": "bundles/sirix-core/src/main/java/org/sirix/service/xml/xpath/operators/AddOpAxis.java"}, "focal_method": {"identifier": "operate", "parameters": "(final AtomicValue mOperand1, final AtomicValue mOperand2)", "modifiers": "@Override public", "return": "Node", "body": "@Override\n  public Node operate(final AtomicValue mOperand1, final AtomicValue mOperand2)\n      throws SirixXPathException {\n\n    final Type returnType = getReturnType(mOperand1.getTypeKey(), mOperand2.getTypeKey());\n    final int typeKey = asXdmNodeReadTrx().keyForName(returnType.getStringRepr());\n\n    final byte[] value;\n\n    switch (returnType) {\n      case DOUBLE:\n      case FLOAT:\n      case DECIMAL:\n      case INTEGER:\n        final double dOp1 = Double.parseDouble(new String(mOperand1.getRawValue()));\n        final double dOp2 = Double.parseDouble(new String(mOperand2.getRawValue()));\n        value = TypedValue.getBytes(dOp1 + dOp2);\n        break;\n      case DATE:\n      case TIME:\n      case DATE_TIME:\n      case YEAR_MONTH_DURATION:\n      case DAY_TIME_DURATION:\n        throw new IllegalStateException(\n            \"Add operator is not implemented for the type \" + returnType.getStringRepr() + \" yet.\");\n      default:\n        throw EXPathError.XPTY0004.getEncapsulatedException();\n\n    }\n\n    return new AtomicValue(value, typeKey);\n\n  }", "signature": "Node operate(final AtomicValue mOperand1, final AtomicValue mOperand2)", "full_signature": "@Override public Node operate(final AtomicValue mOperand1, final AtomicValue mOperand2)", "class_method_signature": "AddOpAxis.operate(final AtomicValue mOperand1, final AtomicValue mOperand2)", "testcase": false, "constructor": false, "invocations": ["getReturnType", "getTypeKey", "getTypeKey", "keyForName", "asXdmNodeReadTrx", "getStringRepr", "parseDouble", "getRawValue", "parseDouble", "getRawValue", "getBytes", "getStringRepr", "getEncapsulatedException"]}, "repository": {"repo_id": 4604367, "url": "https://github.com/sirixdb/sirix", "stars": 510, "created": "6/9/2012 2:22:14 AM +00:00", "updates": "2020-01-27T20:14:11+00:00", "fork": "False", "license": "licensed"}}