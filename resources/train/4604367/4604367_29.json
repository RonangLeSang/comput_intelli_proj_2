{"test_class": {"identifier": "TestNodeWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DatabaseConfiguration DB_CONFIG = new DatabaseConfiguration(\n\t\t\tTestHelper.PATHS.PATH1.getFile());", "modifier": "private static final", "type": "DatabaseConfiguration", "declarator": "DB_CONFIG = new DatabaseConfiguration(\n\t\t\tTestHelper.PATHS.PATH1.getFile())", "var_name": "DB_CONFIG"}, {"original_string": "private Database mDatabase;", "modifier": "private", "type": "Database", "declarator": "mDatabase", "var_name": "mDatabase"}, {"original_string": "private Holder mHolder;", "modifier": "private", "type": "Holder", "declarator": "mHolder", "var_name": "mHolder"}, {"original_string": "private NodeWrapper node;", "modifier": "private", "type": "NodeWrapper", "declarator": "node", "var_name": "node"}], "file": "bundles/sirix-saxon/src/test/java/org/sirix/saxon/wrapper/TestNodeWrapper.java"}, "test_case": {"identifier": "testCompareOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCompareOrder() throws XPathException, SirixException {\n\t\tfinal Processor proc = new Processor(false);\n\t\tfinal Configuration config = proc.getUnderlyingConfiguration();\n\n\t\tfinal Session session = generateSession();\n\t\tfinal NodeWriteTrx trx = session.beginNodeWriteTrx();\n\t\ttrx.commit();\n\t\ttrx.close();\n\n\t\t// Not the same document.\n\t\tNodeInfo node = new DocumentWrapper(session, config);\n\t\tNodeInfo other = new NodeWrapper(new DocumentWrapper(mHolder.getSession(),\n\t\t\t\tconfig), 3);\n\t\ttry {\n\t\t\tnode.compareOrder(other);\n\t\t\tfail();\n\t\t} catch (final IllegalStateException e) {\n\t\t}\n\n\t\t// Before.\n\t\tnode = new DocumentWrapper(mHolder.getSession(), config);\n\t\tother = new NodeWrapper(new DocumentWrapper(mHolder.getSession(), config),\n\t\t\t\t3);\n\t\tassertEquals(-1, node.compareOrder(other));\n\n\t\t// After.\n\t\tnode = new NodeWrapper(new DocumentWrapper(mHolder.getSession(), config), 3);\n\t\tother = new NodeWrapper(new DocumentWrapper(mHolder.getSession(), config),\n\t\t\t\t0);\n\t\tassertEquals(1, node.compareOrder(other));\n\n\t\t// Same.\n\t\tnode = new NodeWrapper(new DocumentWrapper(mHolder.getSession(), config), 3);\n\t\tother = new NodeWrapper(new DocumentWrapper(mHolder.getSession(), config),\n\t\t\t\t3);\n\t\tassertEquals(0, node.compareOrder(other));\n\n\t\tsession.close();\n\t\tmDatabase.close();\n\t}", "signature": "void testCompareOrder()", "full_signature": "@Test public void testCompareOrder()", "class_method_signature": "TestNodeWrapper.testCompareOrder()", "testcase": true, "constructor": false, "invocations": ["getUnderlyingConfiguration", "generateSession", "beginNodeWriteTrx", "commit", "close", "getSession", "compareOrder", "fail", "getSession", "getSession", "assertEquals", "compareOrder", "getSession", "getSession", "assertEquals", "compareOrder", "getSession", "getSession", "assertEquals", "compareOrder", "close", "close"]}, "focal_class": {"identifier": "NodeWrapper", "superclass": "", "interfaces": "implements SiblingCountingNode", "fields": [{"original_string": "private final Kind mNodeKind;", "modifier": "private final", "type": "Kind", "declarator": "mNodeKind", "var_name": "mNodeKind"}, {"original_string": "private final DocumentWrapper mDocWrapper;", "modifier": "private final", "type": "DocumentWrapper", "declarator": "mDocWrapper", "var_name": "mDocWrapper"}, {"original_string": "private static final Logger LOGGER = LoggerFactory\n\t\t\t.getLogger(NodeWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n\t\t\t.getLogger(NodeWrapper.class)", "var_name": "LOGGER"}, {"original_string": "private final long mKey;", "modifier": "private final", "type": "long", "declarator": "mKey", "var_name": "mKey"}, {"original_string": "private final QNm mQName;", "modifier": "private final", "type": "QNm", "declarator": "mQName", "var_name": "mQName"}, {"original_string": "private final int mRevision;", "modifier": "private final", "type": "int", "declarator": "mRevision", "var_name": "mRevision"}], "methods": [{"identifier": "NodeWrapper", "parameters": "(final DocumentWrapper docWrapper, final long nodeKeyToStart)", "modifiers": "", "return": "", "signature": " NodeWrapper(final DocumentWrapper docWrapper, final long nodeKeyToStart)", "full_signature": "  NodeWrapper(final DocumentWrapper docWrapper, final long nodeKeyToStart)", "class_method_signature": "NodeWrapper.NodeWrapper(final DocumentWrapper docWrapper, final long nodeKeyToStart)", "testcase": false, "constructor": true}, {"identifier": "atomize", "parameters": "()", "modifiers": "@Override public", "return": "Value", "signature": "Value atomize()", "full_signature": "@Override public Value atomize()", "class_method_signature": "NodeWrapper.atomize()", "testcase": false, "constructor": false}, {"identifier": "compareOrder", "parameters": "(final NodeInfo node)", "modifiers": "@Override public", "return": "int", "signature": "int compareOrder(final NodeInfo node)", "full_signature": "@Override public int compareOrder(final NodeInfo node)", "class_method_signature": "NodeWrapper.compareOrder(final NodeInfo node)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(final Receiver out, final int copyOption,\n\t\t\tfinal int locationId)", "modifiers": "public", "return": "void", "signature": "void copy(final Receiver out, final int copyOption,\n\t\t\tfinal int locationId)", "full_signature": "public void copy(final Receiver out, final int copyOption,\n\t\t\tfinal int locationId)", "class_method_signature": "NodeWrapper.copy(final Receiver out, final int copyOption,\n\t\t\tfinal int locationId)", "testcase": false, "constructor": false}, {"identifier": "generateId", "parameters": "(final FastStringBuffer buf)", "modifiers": "@Override public", "return": "void", "signature": "void generateId(final FastStringBuffer buf)", "full_signature": "@Override public void generateId(final FastStringBuffer buf)", "class_method_signature": "NodeWrapper.generateId(final FastStringBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(final int fingerprint)", "modifiers": "@Override public", "return": "String", "signature": "String getAttributeValue(final int fingerprint)", "full_signature": "@Override public String getAttributeValue(final int fingerprint)", "class_method_signature": "NodeWrapper.getAttributeValue(final int fingerprint)", "testcase": false, "constructor": false}, {"identifier": "getBaseURI", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBaseURI()", "full_signature": "@Override public String getBaseURI()", "class_method_signature": "NodeWrapper.getBaseURI()", "testcase": false, "constructor": false}, {"identifier": "getColumnNumber", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getColumnNumber()", "full_signature": "@Override public int getColumnNumber()", "class_method_signature": "NodeWrapper.getColumnNumber()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration getConfiguration()", "full_signature": "@Override public Configuration getConfiguration()", "class_method_signature": "NodeWrapper.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getDeclaredNamespaces", "parameters": "(final int[] buffer)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getDeclaredNamespaces(final int[] buffer)", "full_signature": "@Override public int[] getDeclaredNamespaces(final int[] buffer)", "class_method_signature": "NodeWrapper.getDeclaredNamespaces(final int[] buffer)", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDisplayName()", "full_signature": "@Override public String getDisplayName()", "class_method_signature": "NodeWrapper.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "getDocumentNumber", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getDocumentNumber()", "full_signature": "@Override public long getDocumentNumber()", "class_method_signature": "NodeWrapper.getDocumentNumber()", "testcase": false, "constructor": false}, {"identifier": "getDocumentRoot", "parameters": "()", "modifiers": "@Override public", "return": "DocumentInfo", "signature": "DocumentInfo getDocumentRoot()", "full_signature": "@Override public DocumentInfo getDocumentRoot()", "class_method_signature": "NodeWrapper.getDocumentRoot()", "testcase": false, "constructor": false}, {"identifier": "getFingerprint", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getFingerprint()", "full_signature": "@Override public int getFingerprint()", "class_method_signature": "NodeWrapper.getFingerprint()", "testcase": false, "constructor": false}, {"identifier": "getLineNumber", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLineNumber()", "full_signature": "@Override public int getLineNumber()", "class_method_signature": "NodeWrapper.getLineNumber()", "testcase": false, "constructor": false}, {"identifier": "getLocalPart", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLocalPart()", "full_signature": "@Override public String getLocalPart()", "class_method_signature": "NodeWrapper.getLocalPart()", "testcase": false, "constructor": false}, {"identifier": "getNameCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNameCode()", "full_signature": "@Override public int getNameCode()", "class_method_signature": "NodeWrapper.getNameCode()", "testcase": false, "constructor": false}, {"identifier": "getNamePool", "parameters": "()", "modifiers": "@Override public", "return": "NamePool", "signature": "NamePool getNamePool()", "full_signature": "@Override public NamePool getNamePool()", "class_method_signature": "NodeWrapper.getNamePool()", "testcase": false, "constructor": false}, {"identifier": "getNodeKind", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNodeKind()", "full_signature": "@Override public int getNodeKind()", "class_method_signature": "NodeWrapper.getNodeKind()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "NodeInfo", "signature": "NodeInfo getParent()", "full_signature": "@Override public NodeInfo getParent()", "class_method_signature": "NodeWrapper.getParent()", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "NodeWrapper.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "NodeInfo", "signature": "NodeInfo getRoot()", "full_signature": "@Override public NodeInfo getRoot()", "class_method_signature": "NodeWrapper.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getStringValue()", "full_signature": "@Override public final String getStringValue()", "class_method_signature": "NodeWrapper.getStringValue()", "testcase": false, "constructor": false}, {"identifier": "getStringValueCS", "parameters": "()", "modifiers": "@Override public final", "return": "CharSequence", "signature": "CharSequence getStringValueCS()", "full_signature": "@Override public final CharSequence getStringValueCS()", "class_method_signature": "NodeWrapper.getStringValueCS()", "testcase": false, "constructor": false}, {"identifier": "expandString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String expandString()", "full_signature": "private String expandString()", "class_method_signature": "NodeWrapper.expandString()", "testcase": false, "constructor": false}, {"identifier": "getSystemId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSystemId()", "full_signature": "@Override public String getSystemId()", "class_method_signature": "NodeWrapper.getSystemId()", "testcase": false, "constructor": false}, {"identifier": "getTypeAnnotation", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTypeAnnotation()", "full_signature": "public int getTypeAnnotation()", "class_method_signature": "NodeWrapper.getTypeAnnotation()", "testcase": false, "constructor": false}, {"identifier": "getURI", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getURI()", "full_signature": "@Override public String getURI()", "class_method_signature": "NodeWrapper.getURI()", "testcase": false, "constructor": false}, {"identifier": "hasChildNodes", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasChildNodes()", "full_signature": "@Override public boolean hasChildNodes()", "class_method_signature": "NodeWrapper.hasChildNodes()", "testcase": false, "constructor": false}, {"identifier": "isId", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isId()", "full_signature": "@Override public boolean isId()", "class_method_signature": "NodeWrapper.isId()", "testcase": false, "constructor": false}, {"identifier": "isIdref", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isIdref()", "full_signature": "@Override public boolean isIdref()", "class_method_signature": "NodeWrapper.isIdref()", "testcase": false, "constructor": false}, {"identifier": "isNilled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNilled()", "full_signature": "@Override public boolean isNilled()", "class_method_signature": "NodeWrapper.isNilled()", "testcase": false, "constructor": false}, {"identifier": "isSameNodeInfo", "parameters": "(final NodeInfo pOther)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSameNodeInfo(final NodeInfo pOther)", "full_signature": "@Override public boolean isSameNodeInfo(final NodeInfo pOther)", "class_method_signature": "NodeWrapper.isSameNodeInfo(final NodeInfo pOther)", "testcase": false, "constructor": false}, {"identifier": "iterateAxis", "parameters": "(final byte axisNumber)", "modifiers": "@Override public", "return": "AxisIterator", "signature": "AxisIterator iterateAxis(final byte axisNumber)", "full_signature": "@Override public AxisIterator iterateAxis(final byte axisNumber)", "class_method_signature": "NodeWrapper.iterateAxis(final byte axisNumber)", "testcase": false, "constructor": false}, {"identifier": "iterateAxis", "parameters": "(final byte axisNumber, final NodeTest nodeTest)", "modifiers": "@Override public", "return": "AxisIterator", "signature": "AxisIterator iterateAxis(final byte axisNumber, final NodeTest nodeTest)", "full_signature": "@Override public AxisIterator iterateAxis(final byte axisNumber, final NodeTest nodeTest)", "class_method_signature": "NodeWrapper.iterateAxis(final byte axisNumber, final NodeTest nodeTest)", "testcase": false, "constructor": false}, {"identifier": "setSystemId", "parameters": "(final String systemId)", "modifiers": "@Override public", "return": "void", "signature": "void setSystemId(final String systemId)", "full_signature": "@Override public void setSystemId(final String systemId)", "class_method_signature": "NodeWrapper.setSystemId(final String systemId)", "testcase": false, "constructor": false}, {"identifier": "getTypedValue", "parameters": "()", "modifiers": "@Override public", "return": "SequenceIterator", "signature": "SequenceIterator getTypedValue()", "full_signature": "@Override public SequenceIterator getTypedValue()", "class_method_signature": "NodeWrapper.getTypedValue()", "testcase": false, "constructor": false}, {"identifier": "getSiblingPosition", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSiblingPosition()", "full_signature": "@Override public int getSiblingPosition()", "class_method_signature": "NodeWrapper.getSiblingPosition()", "testcase": false, "constructor": false}, {"identifier": "createRtxAndMove", "parameters": "()", "modifiers": "private final", "return": "NodeReadTrx", "signature": "NodeReadTrx createRtxAndMove()", "full_signature": "private final NodeReadTrx createRtxAndMove()", "class_method_signature": "NodeWrapper.createRtxAndMove()", "testcase": false, "constructor": false}, {"identifier": "emptyIfNull", "parameters": "(final String s)", "modifiers": "private static", "return": "String", "signature": "String emptyIfNull(final String s)", "full_signature": "private static String emptyIfNull(final String s)", "class_method_signature": "NodeWrapper.emptyIfNull(final String s)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getKey()", "full_signature": "public long getKey()", "class_method_signature": "NodeWrapper.getKey()", "testcase": false, "constructor": false}], "file": "bundles/sirix-saxon/src/main/java/org/sirix/saxon/wrapper/NodeWrapper.java"}, "focal_method": {"identifier": "compareOrder", "parameters": "(final NodeInfo node)", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int compareOrder(final NodeInfo node) {\n\t\tif (getDocumentNumber() != node.getDocumentNumber()) {\n\t\t\tthrow new IllegalStateException(\"May not be called on different trees!\");\n\t\t}\n\t\treturn Navigator.compareOrder(this, (NodeWrapper) checkNotNull(node));\n\t}", "signature": "int compareOrder(final NodeInfo node)", "full_signature": "@Override public int compareOrder(final NodeInfo node)", "class_method_signature": "NodeWrapper.compareOrder(final NodeInfo node)", "testcase": false, "constructor": false, "invocations": ["getDocumentNumber", "getDocumentNumber", "compareOrder", "checkNotNull"]}, "repository": {"repo_id": 4604367, "url": "https://github.com/sirixdb/sirix", "stars": 510, "created": "6/9/2012 2:22:14 AM +00:00", "updates": "2020-01-27T20:14:11+00:00", "fork": "False", "license": "licensed"}}