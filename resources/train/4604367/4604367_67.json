{"test_class": {"identifier": "XmlShredderTest", "superclass": "extends XMLTestCase", "interfaces": "", "fields": [{"original_string": "public static final Path XML = Paths.get(\"src\", \"test\", \"resources\", \"test.xml\");", "modifier": "public static final", "type": "Path", "declarator": "XML = Paths.get(\"src\", \"test\", \"resources\", \"test.xml\")", "var_name": "XML"}, {"original_string": "public static final Path XML2 = Paths.get(\"src\", \"test\", \"resources\", \"test2.xml\");", "modifier": "public static final", "type": "Path", "declarator": "XML2 = Paths.get(\"src\", \"test\", \"resources\", \"test2.xml\")", "var_name": "XML2"}, {"original_string": "public static final Path XML3 = Paths.get(\"src\", \"test\", \"resources\", \"test3.xml\");", "modifier": "public static final", "type": "Path", "declarator": "XML3 = Paths.get(\"src\", \"test\", \"resources\", \"test3.xml\")", "var_name": "XML3"}, {"original_string": "private Holder holder;", "modifier": "private", "type": "Holder", "declarator": "holder", "var_name": "holder"}], "file": "bundles/sirix-core/src/test/java/org/sirix/service/xml/shredder/XmlShredderTest.java"}, "test_case": {"identifier": "testSTAXShredder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSTAXShredder() throws Exception {\n    // Setup parsed session.\n    XmlShredder.main(XML.toAbsolutePath().toString(), PATHS.PATH2.getFile().toAbsolutePath().toString());\n    final XmlNodeReadOnlyTrx expectedTrx = holder.getXdmNodeWriteTrx();\n\n    // Verify.\n    final var database2 = XmlTestHelper.getDatabase(PATHS.PATH2.getFile());\n    database2.createResource(new ResourceConfiguration.Builder(XmlTestHelper.RESOURCE).build());\n    final XmlResourceManager manager = database2.openResourceManager(XmlTestHelper.RESOURCE);\n    final XmlNodeReadOnlyTrx rtx = manager.beginNodeReadOnlyTrx();\n    rtx.moveToDocumentRoot();\n    final Iterator<Long> expectedDescendants = new DescendantAxis(expectedTrx);\n    final Iterator<Long> descendants = new DescendantAxis(rtx);\n\n    while (expectedDescendants.hasNext() && descendants.hasNext()) {\n      assertEquals(expectedTrx.getNodeKey(), rtx.getNodeKey());\n      assertEquals(expectedTrx.getParentKey(), rtx.getParentKey());\n      assertEquals(expectedTrx.getFirstChildKey(), rtx.getFirstChildKey());\n      assertEquals(expectedTrx.getLeftSiblingKey(), rtx.getLeftSiblingKey());\n      assertEquals(expectedTrx.getRightSiblingKey(), rtx.getRightSiblingKey());\n      assertEquals(expectedTrx.getChildCount(), rtx.getChildCount());\n      if (expectedTrx.getKind() == NodeKind.ELEMENT || rtx.getKind() == NodeKind.ELEMENT) {\n\n        assertEquals(expectedTrx.getAttributeCount(), rtx.getAttributeCount());\n        assertEquals(expectedTrx.getNamespaceCount(), rtx.getNamespaceCount());\n      }\n      assertEquals(expectedTrx.getKind(), rtx.getKind());\n      assertEquals(expectedTrx.getName(), rtx.getName());\n      assertEquals(expectedTrx.getValue(), expectedTrx.getValue());\n    }\n\n    rtx.close();\n    manager.close();\n    database2.close();\n    expectedTrx.close();\n  }", "signature": "void testSTAXShredder()", "full_signature": "@Test public void testSTAXShredder()", "class_method_signature": "XmlShredderTest.testSTAXShredder()", "testcase": true, "constructor": false, "invocations": ["main", "toString", "toAbsolutePath", "toString", "toAbsolutePath", "getFile", "getXdmNodeWriteTrx", "getDatabase", "getFile", "createResource", "build", "openResourceManager", "beginNodeReadOnlyTrx", "moveToDocumentRoot", "hasNext", "hasNext", "assertEquals", "getNodeKey", "getNodeKey", "assertEquals", "getParentKey", "getParentKey", "assertEquals", "getFirstChildKey", "getFirstChildKey", "assertEquals", "getLeftSiblingKey", "getLeftSiblingKey", "assertEquals", "getRightSiblingKey", "getRightSiblingKey", "assertEquals", "getChildCount", "getChildCount", "getKind", "getKind", "assertEquals", "getAttributeCount", "getAttributeCount", "assertEquals", "getNamespaceCount", "getNamespaceCount", "assertEquals", "getKind", "getKind", "assertEquals", "getName", "getName", "assertEquals", "getValue", "getValue", "close", "close", "close", "close"]}, "focal_class": {"identifier": "XmlShredder", "superclass": "extends AbstractShredder", "interfaces": "implements Callable<Long>", "fields": [{"original_string": "private static final LogWrapper LOGWRAPPER = new LogWrapper(LoggerFactory.getLogger(XmlShredder.class));", "modifier": "private static final", "type": "LogWrapper", "declarator": "LOGWRAPPER = new LogWrapper(LoggerFactory.getLogger(XmlShredder.class))", "var_name": "LOGWRAPPER"}, {"original_string": "protected final XmlNodeTrx wtx;", "modifier": "protected final", "type": "XmlNodeTrx", "declarator": "wtx", "var_name": "wtx"}, {"original_string": "protected final XMLEventReader reader;", "modifier": "protected final", "type": "XMLEventReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private final ShredderCommit commit;", "modifier": "private final", "type": "ShredderCommit", "declarator": "commit", "var_name": "commit"}, {"original_string": "protected final InsertPosition insert;", "modifier": "protected final", "type": "InsertPosition", "declarator": "insert", "var_name": "insert"}, {"original_string": "private boolean includeComments;", "modifier": "private", "type": "boolean", "declarator": "includeComments", "var_name": "includeComments"}, {"original_string": "private boolean includePIs;", "modifier": "private", "type": "boolean", "declarator": "includePIs", "var_name": "includePIs"}], "methods": [{"identifier": "XmlShredder", "parameters": "(final Builder builder)", "modifiers": "private", "return": "", "signature": " XmlShredder(final Builder builder)", "full_signature": "private  XmlShredder(final Builder builder)", "class_method_signature": "XmlShredder.XmlShredder(final Builder builder)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long call()", "full_signature": "@Override public Long call()", "class_method_signature": "XmlShredder.call()", "testcase": false, "constructor": false}, {"identifier": "insertNewContent", "parameters": "()", "modifiers": "protected final", "return": "void", "signature": "void insertNewContent()", "full_signature": "protected final void insertNewContent()", "class_method_signature": "XmlShredder.insertNewContent()", "testcase": false, "constructor": false}, {"identifier": "addNewElement", "parameters": "(final StartElement event)", "modifiers": "private", "return": "void", "signature": "void addNewElement(final StartElement event)", "full_signature": "private void addNewElement(final StartElement event)", "class_method_signature": "XmlShredder.addNewElement(final StartElement event)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(final String... args)", "modifiers": "public static", "return": "void", "signature": "void main(final String... args)", "full_signature": "public static void main(final String... args)", "class_method_signature": "XmlShredder.main(final String... args)", "testcase": false, "constructor": false}, {"identifier": "createFileReader", "parameters": "(final FileInputStream fis)", "modifiers": "public static", "return": "XMLEventReader", "signature": "XMLEventReader createFileReader(final FileInputStream fis)", "full_signature": "public static XMLEventReader createFileReader(final FileInputStream fis)", "class_method_signature": "XmlShredder.createFileReader(final FileInputStream fis)", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(final XMLInputFactory factory)", "modifiers": "private static", "return": "void", "signature": "void setProperties(final XMLInputFactory factory)", "full_signature": "private static void setProperties(final XMLInputFactory factory)", "class_method_signature": "XmlShredder.setProperties(final XMLInputFactory factory)", "testcase": false, "constructor": false}, {"identifier": "createStringReader", "parameters": "(final String xmlString)", "modifiers": "public static", "return": "XMLEventReader", "signature": "XMLEventReader createStringReader(final String xmlString)", "full_signature": "public static XMLEventReader createStringReader(final String xmlString)", "class_method_signature": "XmlShredder.createStringReader(final String xmlString)", "testcase": false, "constructor": false}, {"identifier": "createQueueReader", "parameters": "(final Queue<XMLEvent> events)", "modifiers": "public static", "return": "XMLEventReader", "signature": "XMLEventReader createQueueReader(final Queue<XMLEvent> events)", "full_signature": "public static XMLEventReader createQueueReader(final Queue<XMLEvent> events)", "class_method_signature": "XmlShredder.createQueueReader(final Queue<XMLEvent> events)", "testcase": false, "constructor": false}], "file": "bundles/sirix-core/src/main/java/org/sirix/service/xml/shredder/XmlShredder.java"}, "focal_method": {"identifier": "main", "parameters": "(final String... args)", "modifiers": "public static", "return": "void", "body": "public static void main(final String... args) throws SirixException, IOException, XMLStreamException {\n    if (args.length != 2 && args.length != 3) {\n      throw new IllegalArgumentException(\"Usage: XMLShredder XMLFile Database [true/false] (shredder comment|PI)\");\n    }\n    LOGWRAPPER.info(\"Shredding '\" + args[0] + \"' to '\" + args[1] + \"' ... \");\n    final long time = System.nanoTime();\n    final Path target = Paths.get(args[1]);\n    final DatabaseConfiguration config = new DatabaseConfiguration(target);\n    Databases.removeDatabase(target);\n    Databases.createXmlDatabase(config);\n\n    try (final var db = Databases.openXmlDatabase(target)) {\n      db.createResource(new ResourceConfiguration.Builder(\"shredded\").build());\n      try (final XmlResourceManager resMgr = db.openResourceManager(\"shredded\");\n          final XmlNodeTrx wtx = resMgr.beginNodeTrx();\n          final FileInputStream fis = new FileInputStream(Paths.get(args[0]).toFile())) {\n        final XMLEventReader reader = createFileReader(fis);\n        final boolean includeCoPI = args.length == 3\n            ? Boolean.parseBoolean(args[2])\n            : false;\n        final XmlShredder shredder =\n            new XmlShredder.Builder(wtx, reader, InsertPosition.AS_FIRST_CHILD).commitAfterwards()\n                                                                               .includeComments(includeCoPI)\n                                                                               .includePIs(includeCoPI)\n                                                                               .build();\n        shredder.call();\n      }\n    }\n\n    LOGWRAPPER.info(\" done [\" + (System.nanoTime() - time) / 1000000 + \" ms].\");\n  }", "signature": "void main(final String... args)", "full_signature": "public static void main(final String... args)", "class_method_signature": "XmlShredder.main(final String... args)", "testcase": false, "constructor": false, "invocations": ["info", "nanoTime", "get", "removeDatabase", "createXmlDatabase", "openXmlDatabase", "createResource", "build", "openResourceManager", "beginNodeTrx", "toFile", "get", "createFileReader", "parseBoolean", "build", "includePIs", "includeComments", "commitAfterwards", "call", "info", "nanoTime"]}, "repository": {"repo_id": 4604367, "url": "https://github.com/sirixdb/sirix", "stars": 510, "created": "6/9/2012 2:22:14 AM +00:00", "updates": "2020-01-27T20:14:11+00:00", "fork": "False", "license": "licensed"}}