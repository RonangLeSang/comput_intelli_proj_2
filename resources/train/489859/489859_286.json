{"test_class": {"identifier": "UltraDNSWSErrorHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "UltraDNSWSErrorHandler function = Guice.createInjector(new SaxParserModule()).getInstance(\n         UltraDNSWSErrorHandler.class);", "modifier": "", "type": "UltraDNSWSErrorHandler", "declarator": "function = Guice.createInjector(new SaxParserModule()).getInstance(\n         UltraDNSWSErrorHandler.class)", "var_name": "function"}], "file": "providers/ultradns-ws/src/test/java/org/jclouds/ultradns/ws/handlers/UltraDNSWSErrorHandlerTest.java"}, "test_case": {"identifier": "testCode2401SetsResourceNotFoundException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testCode2401SetsResourceNotFoundException() throws IOException {\n      HttpRequest request = HttpRequest.builder().method(POST)\n                                                 .endpoint(\"https://ultra-api.ultradns.com:8443/UltraDNS_WS/v01\")\n                                                 .addHeader(HOST, \"ultra-api.ultradns.com:8443\")\n                                                 .payload(payloadFromResource(\"/list_zones_by_account.xml\")).build();\n      HttpCommand command = new HttpCommand(request);\n      HttpResponse response = HttpResponse.builder()\n                                          .message(INTERNAL_SERVER_ERROR.getReasonPhrase())\n                                          .statusCode(INTERNAL_SERVER_ERROR.getStatusCode())\n                                          .payload(payloadFromResource(\"/account_doesnt_exist.xml\")).build();\n\n      function.handleError(command, response);\n\n      assertEquals(command.getException().getClass(), ResourceNotFoundException.class);\n      assertEquals(command.getException().getMessage(), \"Account not found in the system. ID: AAAAAAAAAAAAAAAA\");\n\n      UltraDNSWSResponseException exception = UltraDNSWSResponseException.class.cast(command.getException().getCause());\n\n      assertEquals(exception.getMessage(), \"Error 2401: Account not found in the system. ID: AAAAAAAAAAAAAAAA\");\n      assertEquals(exception.getError().getDescription().get(), \"Account not found in the system. ID: AAAAAAAAAAAAAAAA\");\n      assertEquals(exception.getError().getCode(), 2401);\n   }", "signature": "void testCode2401SetsResourceNotFoundException()", "full_signature": "@Test public void testCode2401SetsResourceNotFoundException()", "class_method_signature": "UltraDNSWSErrorHandlerTest.testCode2401SetsResourceNotFoundException()", "testcase": true, "constructor": false, "invocations": ["build", "payload", "addHeader", "endpoint", "method", "builder", "payloadFromResource", "build", "payload", "statusCode", "message", "builder", "getReasonPhrase", "getStatusCode", "payloadFromResource", "handleError", "assertEquals", "getClass", "getException", "assertEquals", "getMessage", "getException", "cast", "getCause", "getException", "assertEquals", "getMessage", "assertEquals", "get", "getDescription", "getError", "assertEquals", "getCode", "getError"]}, "focal_class": {"identifier": "UltraDNSWSErrorHandler", "superclass": "", "interfaces": "implements HttpErrorHandler", "fields": [{"original_string": "private final Factory factory;", "modifier": "private final", "type": "Factory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final Provider<UltraWSExceptionHandler> handlers;", "modifier": "private final", "type": "Provider<UltraWSExceptionHandler>", "declarator": "handlers", "var_name": "handlers"}], "methods": [{"identifier": "UltraDNSWSErrorHandler", "parameters": "(Factory factory, Provider<UltraWSExceptionHandler> handlers)", "modifiers": "@Inject", "return": "", "signature": " UltraDNSWSErrorHandler(Factory factory, Provider<UltraWSExceptionHandler> handlers)", "full_signature": "@Inject  UltraDNSWSErrorHandler(Factory factory, Provider<UltraWSExceptionHandler> handlers)", "class_method_signature": "UltraDNSWSErrorHandler.UltraDNSWSErrorHandler(Factory factory, Provider<UltraWSExceptionHandler> handlers)", "testcase": false, "constructor": true}, {"identifier": "handleError", "parameters": "(HttpCommand command, HttpResponse response)", "modifiers": "public", "return": "void", "signature": "void handleError(HttpCommand command, HttpResponse response)", "full_signature": "public void handleError(HttpCommand command, HttpResponse response)", "class_method_signature": "UltraDNSWSErrorHandler.handleError(HttpCommand command, HttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "refineException", "parameters": "(UltraDNSWSResponseException exception)", "modifiers": "private", "return": "Exception", "signature": "Exception refineException(UltraDNSWSResponseException exception)", "full_signature": "private Exception refineException(UltraDNSWSResponseException exception)", "class_method_signature": "UltraDNSWSErrorHandler.refineException(UltraDNSWSResponseException exception)", "testcase": false, "constructor": false}], "file": "providers/ultradns-ws/src/main/java/org/jclouds/ultradns/ws/handlers/UltraDNSWSErrorHandler.java"}, "focal_method": {"identifier": "handleError", "parameters": "(HttpCommand command, HttpResponse response)", "modifiers": "public", "return": "void", "body": "public void handleError(HttpCommand command, HttpResponse response) {\n      Exception exception = new HttpResponseException(command, response);\n      try {\n         byte[] data = closeClientButKeepContentStream(response);\n         String message = data != null ? new String(data) : null;\n         if (message != null) {\n            exception = new HttpResponseException(command, response, message);\n            String contentType = response.getPayload().getContentMetadata().getContentType();\n            if (contentType != null && (contentType.indexOf(\"xml\") != -1 || contentType.indexOf(\"unknown\") != -1)) {\n               UltraDNSWSError error = factory.create(handlers.get()).parse(message);\n               if (error != null) {\n                  exception = refineException(new UltraDNSWSResponseException(command, response, error));\n               }\n            }\n         } else {\n            exception = new HttpResponseException(command, response);\n         }\n      } finally {\n         releasePayload(response);\n         command.setException(exception);\n      }\n   }", "signature": "void handleError(HttpCommand command, HttpResponse response)", "full_signature": "public void handleError(HttpCommand command, HttpResponse response)", "class_method_signature": "UltraDNSWSErrorHandler.handleError(HttpCommand command, HttpResponse response)", "testcase": false, "constructor": false, "invocations": ["closeClientButKeepContentStream", "getContentType", "getContentMetadata", "getPayload", "indexOf", "indexOf", "parse", "create", "get", "refineException", "releasePayload", "setException"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}