{"test_class": {"identifier": "ContextBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/jclouds/ContextBuilderTest.java"}, "test_case": {"identifier": "testAddLoggingModuleIfNotPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testAddLoggingModuleIfNotPresent() {\n      List<Module> modules = Lists.newArrayList();\n      LoggingModule module = new NullLoggingModule();\n      modules.add(module);\n      ContextBuilder.addLoggingModuleIfNotPresent(modules);\n      assertEquals(modules.size(), 1);\n      assertEquals(modules.remove(0), module);\n   }", "signature": "void testAddLoggingModuleIfNotPresent()", "full_signature": "@Test public void testAddLoggingModuleIfNotPresent()", "class_method_signature": "ContextBuilderTest.testAddLoggingModuleIfNotPresent()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "add", "addLoggingModuleIfNotPresent", "assertEquals", "size", "assertEquals", "remove"]}, "focal_class": {"identifier": "ContextBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Optional<String> name = Optional.absent();", "modifier": "protected", "type": "Optional<String>", "declarator": "name = Optional.absent()", "var_name": "name"}, {"original_string": "protected Optional<ProviderMetadata> providerMetadata = Optional.absent();", "modifier": "protected", "type": "Optional<ProviderMetadata>", "declarator": "providerMetadata = Optional.absent()", "var_name": "providerMetadata"}, {"original_string": "protected final String providerId;", "modifier": "protected final", "type": "String", "declarator": "providerId", "var_name": "providerId"}, {"original_string": "protected Optional<String> endpoint = Optional.absent();", "modifier": "protected", "type": "Optional<String>", "declarator": "endpoint = Optional.absent()", "var_name": "endpoint"}, {"original_string": "protected Optional<String> identity = Optional.absent();", "modifier": "protected", "type": "Optional<String>", "declarator": "identity = Optional.absent()", "var_name": "identity"}, {"original_string": "protected Optional<Supplier<Credentials>> credentialsSupplierOption = Optional.absent();", "modifier": "protected", "type": "Optional<Supplier<Credentials>>", "declarator": "credentialsSupplierOption = Optional.absent()", "var_name": "credentialsSupplierOption"}, {"original_string": "@Nullable\n   protected String credential;", "modifier": "@Nullable\n   protected", "type": "String", "declarator": "credential", "var_name": "credential"}, {"original_string": "protected ApiMetadata apiMetadata;", "modifier": "protected", "type": "ApiMetadata", "declarator": "apiMetadata", "var_name": "apiMetadata"}, {"original_string": "protected String apiVersion;", "modifier": "protected", "type": "String", "declarator": "apiVersion", "var_name": "apiVersion"}, {"original_string": "protected String buildVersion;", "modifier": "protected", "type": "String", "declarator": "buildVersion", "var_name": "buildVersion"}, {"original_string": "protected Optional<Properties> overrides = Optional.absent();", "modifier": "protected", "type": "Optional<Properties>", "declarator": "overrides = Optional.absent()", "var_name": "overrides"}, {"original_string": "protected List<Module> modules = newArrayListWithCapacity(3);", "modifier": "protected", "type": "List<Module>", "declarator": "modules = newArrayListWithCapacity(3)", "var_name": "modules"}, {"original_string": "private static Predicate<Module> configuresApi = new Predicate<Module>() {\n      public boolean apply(Module input) {\n         return input.getClass().isAnnotationPresent(ConfiguresHttpApi.class);\n      }\n\n   };", "modifier": "private static", "type": "Predicate<Module>", "declarator": "configuresApi = new Predicate<Module>() {\n      public boolean apply(Module input) {\n         return input.getClass().isAnnotationPresent(ConfiguresHttpApi.class);\n      }\n\n   }", "var_name": "configuresApi"}, {"original_string": "private static Predicate<Module> configuresRest = new Predicate<Module>() {\n      public boolean apply(Module input) {\n         return input.getClass().isAnnotationPresent(ConfiguresRestClient.class);\n      }\n\n   };", "modifier": "private static", "type": "Predicate<Module>", "declarator": "configuresRest = new Predicate<Module>() {\n      public boolean apply(Module input) {\n         return input.getClass().isAnnotationPresent(ConfiguresRestClient.class);\n      }\n\n   }", "var_name": "configuresRest"}], "methods": [{"identifier": "newBuilder", "parameters": "(String providerOrApi)", "modifiers": "public static", "return": "ContextBuilder", "signature": "ContextBuilder newBuilder(String providerOrApi)", "full_signature": "public static ContextBuilder newBuilder(String providerOrApi)", "class_method_signature": "ContextBuilder.newBuilder(String providerOrApi)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(ApiMetadata apiMetadata)", "modifiers": "public static", "return": "ContextBuilder", "signature": "ContextBuilder newBuilder(ApiMetadata apiMetadata)", "full_signature": "public static ContextBuilder newBuilder(ApiMetadata apiMetadata)", "class_method_signature": "ContextBuilder.newBuilder(ApiMetadata apiMetadata)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(ProviderMetadata providerMetadata)", "modifiers": "public static", "return": "ContextBuilder", "signature": "ContextBuilder newBuilder(ProviderMetadata providerMetadata)", "full_signature": "public static ContextBuilder newBuilder(ProviderMetadata providerMetadata)", "class_method_signature": "ContextBuilder.newBuilder(ProviderMetadata providerMetadata)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ContextBuilder.toString()", "testcase": false, "constructor": false}, {"identifier": "ContextBuilder", "parameters": "(ProviderMetadata providerMetadata)", "modifiers": "protected", "return": "", "signature": " ContextBuilder(ProviderMetadata providerMetadata)", "full_signature": "protected  ContextBuilder(ProviderMetadata providerMetadata)", "class_method_signature": "ContextBuilder.ContextBuilder(ProviderMetadata providerMetadata)", "testcase": false, "constructor": true}, {"identifier": "ContextBuilder", "parameters": "(@Nullable ProviderMetadata providerMetadata, ApiMetadata apiMetadata)", "modifiers": "protected", "return": "", "signature": " ContextBuilder(@Nullable ProviderMetadata providerMetadata, ApiMetadata apiMetadata)", "full_signature": "protected  ContextBuilder(@Nullable ProviderMetadata providerMetadata, ApiMetadata apiMetadata)", "class_method_signature": "ContextBuilder.ContextBuilder(@Nullable ProviderMetadata providerMetadata, ApiMetadata apiMetadata)", "testcase": false, "constructor": true}, {"identifier": "ContextBuilder", "parameters": "(ApiMetadata apiMetadata)", "modifiers": "public", "return": "", "signature": " ContextBuilder(ApiMetadata apiMetadata)", "full_signature": "public  ContextBuilder(ApiMetadata apiMetadata)", "class_method_signature": "ContextBuilder.ContextBuilder(ApiMetadata apiMetadata)", "testcase": false, "constructor": true}, {"identifier": "name", "parameters": "(String name)", "modifiers": "public", "return": "ContextBuilder", "signature": "ContextBuilder name(String name)", "full_signature": "public ContextBuilder name(String name)", "class_method_signature": "ContextBuilder.name(String name)", "testcase": false, "constructor": false}, {"identifier": "credentialsSupplier", "parameters": "(Supplier<Credentials> credentialsSupplier)", "modifiers": "public", "return": "ContextBuilder", "signature": "ContextBuilder credentialsSupplier(Supplier<Credentials> credentialsSupplier)", "full_signature": "public ContextBuilder credentialsSupplier(Supplier<Credentials> credentialsSupplier)", "class_method_signature": "ContextBuilder.credentialsSupplier(Supplier<Credentials> credentialsSupplier)", "testcase": false, "constructor": false}, {"identifier": "credentials", "parameters": "(String identity, @Nullable String credential)", "modifiers": "public", "return": "ContextBuilder", "signature": "ContextBuilder credentials(String identity, @Nullable String credential)", "full_signature": "public ContextBuilder credentials(String identity, @Nullable String credential)", "class_method_signature": "ContextBuilder.credentials(String identity, @Nullable String credential)", "testcase": false, "constructor": false}, {"identifier": "endpoint", "parameters": "(String endpoint)", "modifiers": "public", "return": "ContextBuilder", "signature": "ContextBuilder endpoint(String endpoint)", "full_signature": "public ContextBuilder endpoint(String endpoint)", "class_method_signature": "ContextBuilder.endpoint(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "apiVersion", "parameters": "(String apiVersion)", "modifiers": "public", "return": "ContextBuilder", "signature": "ContextBuilder apiVersion(String apiVersion)", "full_signature": "public ContextBuilder apiVersion(String apiVersion)", "class_method_signature": "ContextBuilder.apiVersion(String apiVersion)", "testcase": false, "constructor": false}, {"identifier": "buildVersion", "parameters": "(String buildVersion)", "modifiers": "public", "return": "ContextBuilder", "signature": "ContextBuilder buildVersion(String buildVersion)", "full_signature": "public ContextBuilder buildVersion(String buildVersion)", "class_method_signature": "ContextBuilder.buildVersion(String buildVersion)", "testcase": false, "constructor": false}, {"identifier": "modules", "parameters": "(Iterable<? extends Module> modules)", "modifiers": "public", "return": "ContextBuilder", "signature": "ContextBuilder modules(Iterable<? extends Module> modules)", "full_signature": "public ContextBuilder modules(Iterable<? extends Module> modules)", "class_method_signature": "ContextBuilder.modules(Iterable<? extends Module> modules)", "testcase": false, "constructor": false}, {"identifier": "overrides", "parameters": "(Properties overrides)", "modifiers": "public", "return": "ContextBuilder", "signature": "ContextBuilder overrides(Properties overrides)", "full_signature": "public ContextBuilder overrides(Properties overrides)", "class_method_signature": "ContextBuilder.overrides(Properties overrides)", "testcase": false, "constructor": false}, {"identifier": "searchPropertiesForProviderScopedProperty", "parameters": "(Properties mutable, String prov, String key)", "modifiers": "public static", "return": "String", "signature": "String searchPropertiesForProviderScopedProperty(Properties mutable, String prov, String key)", "full_signature": "public static String searchPropertiesForProviderScopedProperty(Properties mutable, String prov, String key)", "class_method_signature": "ContextBuilder.searchPropertiesForProviderScopedProperty(Properties mutable, String prov, String key)", "testcase": false, "constructor": false}, {"identifier": "buildInjector", "parameters": "()", "modifiers": "public", "return": "Injector", "signature": "Injector buildInjector()", "full_signature": "public Injector buildInjector()", "class_method_signature": "ContextBuilder.buildInjector()", "testcase": false, "constructor": false}, {"identifier": "buildCredentialsSupplier", "parameters": "(Properties expanded)", "modifiers": "protected", "return": "Supplier<Credentials>", "signature": "Supplier<Credentials> buildCredentialsSupplier(Properties expanded)", "full_signature": "protected Supplier<Credentials> buildCredentialsSupplier(Properties expanded)", "class_method_signature": "ContextBuilder.buildCredentialsSupplier(Properties expanded)", "testcase": false, "constructor": false}, {"identifier": "getAndRemove", "parameters": "(Properties expanded, String key)", "modifiers": "private static", "return": "String", "signature": "String getAndRemove(Properties expanded, String key)", "full_signature": "private static String getAndRemove(Properties expanded, String key)", "class_method_signature": "ContextBuilder.getAndRemove(Properties expanded, String key)", "testcase": false, "constructor": false}, {"identifier": "currentStateToUnexpandedProperties", "parameters": "()", "modifiers": "private", "return": "Properties", "signature": "Properties currentStateToUnexpandedProperties()", "full_signature": "private Properties currentStateToUnexpandedProperties()", "class_method_signature": "ContextBuilder.currentStateToUnexpandedProperties()", "testcase": false, "constructor": false}, {"identifier": "getSystemProperties", "parameters": "()", "modifiers": "@VisibleForTesting protected", "return": "Properties", "signature": "Properties getSystemProperties()", "full_signature": "@VisibleForTesting protected Properties getSystemProperties()", "class_method_signature": "ContextBuilder.getSystemProperties()", "testcase": false, "constructor": false}, {"identifier": "expandProperties", "parameters": "(final Properties resolved)", "modifiers": "private", "return": "Properties", "signature": "Properties expandProperties(final Properties resolved)", "full_signature": "private Properties expandProperties(final Properties resolved)", "class_method_signature": "ContextBuilder.expandProperties(final Properties resolved)", "testcase": false, "constructor": false}, {"identifier": "buildInjector", "parameters": "(String name, ProviderMetadata providerMetadata, Supplier<Credentials> creds, List<Module> inputModules)", "modifiers": "public static", "return": "Injector", "signature": "Injector buildInjector(String name, ProviderMetadata providerMetadata, Supplier<Credentials> creds, List<Module> inputModules)", "full_signature": "public static Injector buildInjector(String name, ProviderMetadata providerMetadata, Supplier<Credentials> creds, List<Module> inputModules)", "class_method_signature": "ContextBuilder.buildInjector(String name, ProviderMetadata providerMetadata, Supplier<Credentials> creds, List<Module> inputModules)", "testcase": false, "constructor": false}, {"identifier": "resolveProperties", "parameters": "(Properties mutable, String providerId, Set<String> keys, Set<String> optionalKeys)", "modifiers": "static", "return": "Properties", "signature": "Properties resolveProperties(Properties mutable, String providerId, Set<String> keys, Set<String> optionalKeys)", "full_signature": "static Properties resolveProperties(Properties mutable, String providerId, Set<String> keys, Set<String> optionalKeys)", "class_method_signature": "ContextBuilder.resolveProperties(Properties mutable, String providerId, Set<String> keys, Set<String> optionalKeys)", "testcase": false, "constructor": false}, {"identifier": "addRestContextBinding", "parameters": "(ApiMetadata apiMetadata, List<Module> modules)", "modifiers": "static", "return": "void", "signature": "void addRestContextBinding(ApiMetadata apiMetadata, List<Module> modules)", "full_signature": "static void addRestContextBinding(ApiMetadata apiMetadata, List<Module> modules)", "class_method_signature": "ContextBuilder.addRestContextBinding(ApiMetadata apiMetadata, List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "ifSpecifiedByUserDontIncludeDefaultApiModule", "parameters": "(ApiMetadata apiMetadata,\n            boolean restModuleSpecifiedByUser)", "modifiers": "static", "return": "Iterable<Module>", "signature": "Iterable<Module> ifSpecifiedByUserDontIncludeDefaultApiModule(ApiMetadata apiMetadata,\n            boolean restModuleSpecifiedByUser)", "full_signature": "static Iterable<Module> ifSpecifiedByUserDontIncludeDefaultApiModule(ApiMetadata apiMetadata,\n            boolean restModuleSpecifiedByUser)", "class_method_signature": "ContextBuilder.ifSpecifiedByUserDontIncludeDefaultApiModule(ApiMetadata apiMetadata,\n            boolean restModuleSpecifiedByUser)", "testcase": false, "constructor": false}, {"identifier": "propertiesPrefixedWithJcloudsApiOrProviderId", "parameters": "(Properties properties, String apiId,\n            String providerId)", "modifiers": "@SuppressWarnings( { \"unchecked\" }) static", "return": "Map<String, Object>", "signature": "Map<String, Object> propertiesPrefixedWithJcloudsApiOrProviderId(Properties properties, String apiId,\n            String providerId)", "full_signature": "@SuppressWarnings( { \"unchecked\" }) static Map<String, Object> propertiesPrefixedWithJcloudsApiOrProviderId(Properties properties, String apiId,\n            String providerId)", "class_method_signature": "ContextBuilder.propertiesPrefixedWithJcloudsApiOrProviderId(Properties properties, String apiId,\n            String providerId)", "testcase": false, "constructor": false}, {"identifier": "addLoggingModuleIfNotPresent", "parameters": "(List<Module> modules)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void addLoggingModuleIfNotPresent(List<Module> modules)", "full_signature": "@VisibleForTesting static void addLoggingModuleIfNotPresent(List<Module> modules)", "class_method_signature": "ContextBuilder.addLoggingModuleIfNotPresent(List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "addHttpModuleIfNeededAndNotPresent", "parameters": "(List<Module> modules)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void addHttpModuleIfNeededAndNotPresent(List<Module> modules)", "full_signature": "@VisibleForTesting static void addHttpModuleIfNeededAndNotPresent(List<Module> modules)", "class_method_signature": "ContextBuilder.addHttpModuleIfNeededAndNotPresent(List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "nothingConfiguresAnHttpService", "parameters": "(List<Module> modules)", "modifiers": "static", "return": "boolean", "signature": "boolean nothingConfiguresAnHttpService(List<Module> modules)", "full_signature": "static boolean nothingConfiguresAnHttpService(List<Module> modules)", "class_method_signature": "ContextBuilder.nothingConfiguresAnHttpService(List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "addClientModuleIfNotPresent", "parameters": "(ApiMetadata apiMetadata, List<Module> modules)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void addClientModuleIfNotPresent(ApiMetadata apiMetadata, List<Module> modules)", "full_signature": "@VisibleForTesting static void addClientModuleIfNotPresent(ApiMetadata apiMetadata, List<Module> modules)", "class_method_signature": "ContextBuilder.addClientModuleIfNotPresent(ApiMetadata apiMetadata, List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "apiModulePresent", "parameters": "(List<Module> modules)", "modifiers": "private static", "return": "boolean", "signature": "boolean apiModulePresent(List<Module> modules)", "full_signature": "private static boolean apiModulePresent(List<Module> modules)", "class_method_signature": "ContextBuilder.apiModulePresent(List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "addClientModule", "parameters": "(ApiMetadata apiMetadata, List<Module> modules)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) static", "return": "void", "signature": "void addClientModule(ApiMetadata apiMetadata, List<Module> modules)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) static void addClientModule(ApiMetadata apiMetadata, List<Module> modules)", "class_method_signature": "ContextBuilder.addClientModule(ApiMetadata apiMetadata, List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "addEventBusIfNotPresent", "parameters": "(List<Module> modules)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void addEventBusIfNotPresent(List<Module> modules)", "full_signature": "@VisibleForTesting static void addEventBusIfNotPresent(List<Module> modules)", "class_method_signature": "ContextBuilder.addEventBusIfNotPresent(List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "addExecutorServiceIfNotPresent", "parameters": "(List<Module> modules)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void addExecutorServiceIfNotPresent(List<Module> modules)", "full_signature": "@VisibleForTesting static void addExecutorServiceIfNotPresent(List<Module> modules)", "class_method_signature": "ContextBuilder.addExecutorServiceIfNotPresent(List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "addCredentialStoreIfNotPresent", "parameters": "(List<Module> modules)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void addCredentialStoreIfNotPresent(List<Module> modules)", "full_signature": "@VisibleForTesting static void addCredentialStoreIfNotPresent(List<Module> modules)", "class_method_signature": "ContextBuilder.addCredentialStoreIfNotPresent(List<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "C", "signature": "C build()", "full_signature": "@SuppressWarnings(\"unchecked\") public C build()", "class_method_signature": "ContextBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(Class<V> viewType)", "modifiers": "public", "return": "V", "signature": "V build(Class<V> viewType)", "full_signature": "public V build(Class<V> viewType)", "class_method_signature": "ContextBuilder.build(Class<V> viewType)", "testcase": false, "constructor": false}, {"identifier": "buildView", "parameters": "(Class<V> viewType)", "modifiers": "public", "return": "V", "signature": "V buildView(Class<V> viewType)", "full_signature": "public V buildView(Class<V> viewType)", "class_method_signature": "ContextBuilder.buildView(Class<V> viewType)", "testcase": false, "constructor": false}, {"identifier": "buildView", "parameters": "(TypeToken<V> viewType)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "V", "signature": "V buildView(TypeToken<V> viewType)", "full_signature": "@SuppressWarnings(\"unchecked\") public V buildView(TypeToken<V> viewType)", "class_method_signature": "ContextBuilder.buildView(TypeToken<V> viewType)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(TypeToken<C> contextType)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "C", "signature": "C build(TypeToken<C> contextType)", "full_signature": "@SuppressWarnings(\"unchecked\") public C build(TypeToken<C> contextType)", "class_method_signature": "ContextBuilder.build(TypeToken<C> contextType)", "testcase": false, "constructor": false}, {"identifier": "buildApi", "parameters": "(Class<A> api)", "modifiers": "public", "return": "A", "signature": "A buildApi(Class<A> api)", "full_signature": "public A buildApi(Class<A> api)", "class_method_signature": "ContextBuilder.buildApi(Class<A> api)", "testcase": false, "constructor": false}, {"identifier": "buildApi", "parameters": "(TypeToken<A> apiType)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "A", "signature": "A buildApi(TypeToken<A> apiType)", "full_signature": "@SuppressWarnings(\"unchecked\") public A buildApi(TypeToken<A> apiType)", "class_method_signature": "ContextBuilder.buildApi(TypeToken<A> apiType)", "testcase": false, "constructor": false}, {"identifier": "getApiMetadata", "parameters": "()", "modifiers": "public", "return": "ApiMetadata", "signature": "ApiMetadata getApiMetadata()", "full_signature": "public ApiMetadata getApiMetadata()", "class_method_signature": "ContextBuilder.getApiMetadata()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jclouds/ContextBuilder.java"}, "focal_method": {"identifier": "addLoggingModuleIfNotPresent", "parameters": "(List<Module> modules)", "modifiers": "@VisibleForTesting static", "return": "void", "body": "@VisibleForTesting\n   static void addLoggingModuleIfNotPresent(List<Module> modules) {\n      if (!any(modules, instanceOf(LoggingModule.class)))\n         modules.add(new JDKLoggingModule());\n   }", "signature": "void addLoggingModuleIfNotPresent(List<Module> modules)", "full_signature": "@VisibleForTesting static void addLoggingModuleIfNotPresent(List<Module> modules)", "class_method_signature": "ContextBuilder.addLoggingModuleIfNotPresent(List<Module> modules)", "testcase": false, "constructor": false, "invocations": ["any", "instanceOf", "add"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}