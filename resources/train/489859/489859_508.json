{"test_class": {"identifier": "Throwables2Test", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/jclouds/util/Throwables2Test.java"}, "test_case": {"identifier": "testPropagateStandardExceptionIllegalStateExceptionNestedInHttpResponseException", "parameters": "()", "modifiers": "@Test(expectedExceptions = IllegalStateException.class) public", "return": "void", "body": "@Test(expectedExceptions = IllegalStateException.class)\n   public void testPropagateStandardExceptionIllegalStateExceptionNestedInHttpResponseException() throws Throwable {\n      Exception e = new IllegalStateException();\n      propagateIfPossible(new HttpResponseException(\"goo\", createNiceMock(HttpCommand.class), null, e),\n            ImmutableSet.<TypeToken<? extends Throwable>> of());\n   }", "signature": "void testPropagateStandardExceptionIllegalStateExceptionNestedInHttpResponseException()", "full_signature": "@Test(expectedExceptions = IllegalStateException.class) public void testPropagateStandardExceptionIllegalStateExceptionNestedInHttpResponseException()", "class_method_signature": "Throwables2Test.testPropagateStandardExceptionIllegalStateExceptionNestedInHttpResponseException()", "testcase": true, "constructor": false, "invocations": ["propagateIfPossible", "createNiceMock", "of"]}, "focal_class": {"identifier": "Throwables2", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "containsThrowable", "parameters": "(final Class<T> throwableType)", "modifiers": "public static", "return": "Predicate<Throwable>", "signature": "Predicate<Throwable> containsThrowable(final Class<T> throwableType)", "full_signature": "public static Predicate<Throwable> containsThrowable(final Class<T> throwableType)", "class_method_signature": "Throwables2.containsThrowable(final Class<T> throwableType)", "testcase": false, "constructor": false}, {"identifier": "getFirstThrowableOfType", "parameters": "(Throwable from, Class<T> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getFirstThrowableOfType(Throwable from, Class<T> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getFirstThrowableOfType(Throwable from, Class<T> clazz)", "class_method_signature": "Throwables2.getFirstThrowableOfType(Throwable from, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getFirstThrowableOfType", "parameters": "(TransformParallelException e, Class<T> clazz)", "modifiers": "@VisibleForTesting static", "return": "T", "signature": "T getFirstThrowableOfType(TransformParallelException e, Class<T> clazz)", "full_signature": "@VisibleForTesting static T getFirstThrowableOfType(TransformParallelException e, Class<T> clazz)", "class_method_signature": "Throwables2.getFirstThrowableOfType(TransformParallelException e, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getFirstThrowableOfType", "parameters": "(ProvisionException e, Class<T> clazz)", "modifiers": "@VisibleForTesting static", "return": "T", "signature": "T getFirstThrowableOfType(ProvisionException e, Class<T> clazz)", "full_signature": "@VisibleForTesting static T getFirstThrowableOfType(ProvisionException e, Class<T> clazz)", "class_method_signature": "Throwables2.getFirstThrowableOfType(ProvisionException e, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getFirstThrowableOfType", "parameters": "(CreationException e, Class<T> clazz)", "modifiers": "@VisibleForTesting static", "return": "T", "signature": "T getFirstThrowableOfType(CreationException e, Class<T> clazz)", "full_signature": "@VisibleForTesting static T getFirstThrowableOfType(CreationException e, Class<T> clazz)", "class_method_signature": "Throwables2.getFirstThrowableOfType(CreationException e, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "propagateAuthorizationOrOriginalException", "parameters": "(Exception e)", "modifiers": "public static", "return": "T", "signature": "T propagateAuthorizationOrOriginalException(Exception e)", "full_signature": "public static T propagateAuthorizationOrOriginalException(Exception e)", "class_method_signature": "Throwables2.propagateAuthorizationOrOriginalException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "propagateIfPossible", "parameters": "(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void propagateIfPossible(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void propagateIfPossible(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)", "class_method_signature": "Throwables2.propagateIfPossible(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jclouds/util/Throwables2.java"}, "focal_method": {"identifier": "propagateIfPossible", "parameters": "(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n   public static void propagateIfPossible(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)\n         throws Throwable {\n      for (TypeToken<? extends Throwable> type : throwables) {\n         Throwable throwable = Throwables2.getFirstThrowableOfType(exception, (Class<Throwable>) type.getRawType());\n         if (throwable != null) {\n            throw throwable;\n         }\n      }\n      for (Class<Exception> propagatableExceptionType : new Class[] { IllegalStateException.class,\n            AssertionError.class, UnsupportedOperationException.class, IllegalArgumentException.class,\n            AuthorizationException.class, ResourceNotFoundException.class, InsufficientResourcesException.class,\n            HttpResponseException.class }) {\n         Throwable throwable = Throwables2.getFirstThrowableOfType(exception, propagatableExceptionType);\n         if (throwable != null) {\n            throw throwable;\n         }\n      }\n   }", "signature": "void propagateIfPossible(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void propagateIfPossible(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)", "class_method_signature": "Throwables2.propagateIfPossible(Throwable exception, Iterable<TypeToken<? extends Throwable>> throwables)", "testcase": false, "constructor": false, "invocations": ["getFirstThrowableOfType", "getRawType", "getFirstThrowableOfType"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}