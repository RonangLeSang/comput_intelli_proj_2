{"test_class": {"identifier": "AddElasticIpsToNodemetadataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "NodeMetadata node = new NodeMetadataBuilder().status(Status.RUNNING).group(\"zkclustertest\").name(\"foo\").hostname(\n            \"ip-10-212-81-7\").privateAddresses(ImmutableSet.of(\"10.212.81.7\")).publicAddresses(\n            ImmutableSet.of(\"174.129.173.155\")).imageId(\"us-east-1/ami-63be790a\").id(\"us-east-1/i-911444f0\")\n            .providerId(\"i-911444f0\").tags(ImmutableSet.of(\"Empty\")).userMetadata(ImmutableMap.of(\"Name\", \"foo\"))\n            .build();", "modifier": "", "type": "NodeMetadata", "declarator": "node = new NodeMetadataBuilder().status(Status.RUNNING).group(\"zkclustertest\").name(\"foo\").hostname(\n            \"ip-10-212-81-7\").privateAddresses(ImmutableSet.of(\"10.212.81.7\")).publicAddresses(\n            ImmutableSet.of(\"174.129.173.155\")).imageId(\"us-east-1/ami-63be790a\").id(\"us-east-1/i-911444f0\")\n            .providerId(\"i-911444f0\").tags(ImmutableSet.of(\"Empty\")).userMetadata(ImmutableMap.of(\"Name\", \"foo\"))\n            .build()", "var_name": "node"}], "file": "apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/AddElasticIpsToNodemetadataTest.java"}, "test_case": {"identifier": "testReturnsNodeWithElasticIpWhenFoundInCacheAndNodeHadAPublicIp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testReturnsNodeWithElasticIpWhenFoundInCacheAndNodeHadAPublicIp() throws Exception {\n      RegionAndName key = new RegionAndName(\"us-east-1\", node.getProviderId());\n      String val = \"1.1.1.1\";\n      LoadingCache<RegionAndName, String> cache = cacheOf(key, val);\n\n      AddElasticIpsToNodemetadata fn = new AddElasticIpsToNodemetadata(cache);\n\n      assertEquals(fn.apply(node).getPublicAddresses(), ImmutableSet.of(\"1.1.1.1\"));\n   }", "signature": "void testReturnsNodeWithElasticIpWhenFoundInCacheAndNodeHadAPublicIp()", "full_signature": "@Test public void testReturnsNodeWithElasticIpWhenFoundInCacheAndNodeHadAPublicIp()", "class_method_signature": "AddElasticIpsToNodemetadataTest.testReturnsNodeWithElasticIpWhenFoundInCacheAndNodeHadAPublicIp()", "testcase": true, "constructor": false, "invocations": ["getProviderId", "cacheOf", "assertEquals", "getPublicAddresses", "apply", "of"]}, "focal_class": {"identifier": "AddElasticIpsToNodemetadata", "superclass": "", "interfaces": "implements Function<NodeMetadata, NodeMetadata>", "fields": [{"original_string": "private final LoadingCache<RegionAndName, String> cache;", "modifier": "private final", "type": "LoadingCache<RegionAndName, String>", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "AddElasticIpsToNodemetadata", "parameters": "(@Named(\"ELASTICIP\") LoadingCache<RegionAndName, String> cache)", "modifiers": "@Inject protected", "return": "", "signature": " AddElasticIpsToNodemetadata(@Named(\"ELASTICIP\") LoadingCache<RegionAndName, String> cache)", "full_signature": "@Inject protected  AddElasticIpsToNodemetadata(@Named(\"ELASTICIP\") LoadingCache<RegionAndName, String> cache)", "class_method_signature": "AddElasticIpsToNodemetadata.AddElasticIpsToNodemetadata(@Named(\"ELASTICIP\") LoadingCache<RegionAndName, String> cache)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(NodeMetadata arg0)", "modifiers": "@Override public", "return": "NodeMetadata", "signature": "NodeMetadata apply(NodeMetadata arg0)", "full_signature": "@Override public NodeMetadata apply(NodeMetadata arg0)", "class_method_signature": "AddElasticIpsToNodemetadata.apply(NodeMetadata arg0)", "testcase": false, "constructor": false}], "file": "apis/ec2/src/main/java/org/jclouds/ec2/compute/functions/AddElasticIpsToNodemetadata.java"}, "focal_method": {"identifier": "apply", "parameters": "(NodeMetadata arg0)", "modifiers": "@Override public", "return": "NodeMetadata", "body": "@Override\n   public NodeMetadata apply(NodeMetadata arg0) {\n      String[] parts = AWSUtils.parseHandle(arg0.getId());\n      String region = parts[0];\n      String instanceId = parts[1];\n      try {\n         String publicIp = cache.get(new RegionAndName(region, instanceId));\n         // Replace existing public addresses with elastic IP (see note above)\n         return NodeMetadataBuilder.fromNodeMetadata(arg0)\n                 .publicAddresses(ImmutableSet.<String> builder().add(publicIp).build()).build();\n      } catch (CacheLoader.InvalidCacheLoadException e) {\n         // no ip was found\n         return arg0;\n      } catch (ExecutionException e) {\n         throw Throwables.propagate(e);\n      }\n   }", "signature": "NodeMetadata apply(NodeMetadata arg0)", "full_signature": "@Override public NodeMetadata apply(NodeMetadata arg0)", "class_method_signature": "AddElasticIpsToNodemetadata.apply(NodeMetadata arg0)", "testcase": false, "constructor": false, "invocations": ["parseHandle", "getId", "get", "build", "publicAddresses", "fromNodeMetadata", "build", "add", "builder", "propagate"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}