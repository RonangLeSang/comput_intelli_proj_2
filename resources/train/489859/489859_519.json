{"test_class": {"identifier": "Suppliers2Test", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/jclouds/util/Suppliers2Test.java"}, "test_case": {"identifier": "testOnThrowableWhenFirstThrowsUnmatchingException", "parameters": "()", "modifiers": "@Test(expectedExceptions = RuntimeException.class) public", "return": "void", "body": "@Test(expectedExceptions = RuntimeException.class)\n   public void testOnThrowableWhenFirstThrowsUnmatchingException() {\n      Suppliers2.onThrowable(new Supplier<String>() {\n\n         @Override\n         public String get() {\n            throw new RuntimeException();\n         }\n\n      }, NoSuchElementException.class, Suppliers.ofInstance(\"foo\")).get();\n   }", "signature": "void testOnThrowableWhenFirstThrowsUnmatchingException()", "full_signature": "@Test(expectedExceptions = RuntimeException.class) public void testOnThrowableWhenFirstThrowsUnmatchingException()", "class_method_signature": "Suppliers2Test.testOnThrowableWhenFirstThrowsUnmatchingException()", "testcase": true, "constructor": false, "invocations": ["get", "onThrowable", "ofInstance"]}, "focal_class": {"identifier": "Suppliers2", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getLastValueInMap", "parameters": "(final Supplier<Map<K, Supplier<V>>> input)", "modifiers": "public static", "return": "Supplier<V>", "signature": "Supplier<V> getLastValueInMap(final Supplier<Map<K, Supplier<V>>> input)", "full_signature": "public static Supplier<V> getLastValueInMap(final Supplier<Map<K, Supplier<V>>> input)", "class_method_signature": "Suppliers2.getLastValueInMap(final Supplier<Map<K, Supplier<V>>> input)", "testcase": false, "constructor": false}, {"identifier": "ofInstanceFunction", "parameters": "()", "modifiers": "public static", "return": "Function<X, Supplier<X>>", "signature": "Function<X, Supplier<X>> ofInstanceFunction()", "full_signature": "public static Function<X, Supplier<X>> ofInstanceFunction()", "class_method_signature": "Suppliers2.ofInstanceFunction()", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(final Supplier<T> unlessNull, final Supplier<T> fallback)", "modifiers": "@Beta public static", "return": "Supplier<T>", "signature": "Supplier<T> or(final Supplier<T> unlessNull, final Supplier<T> fallback)", "full_signature": "@Beta public static Supplier<T> or(final Supplier<T> unlessNull, final Supplier<T> fallback)", "class_method_signature": "Suppliers2.or(final Supplier<T> unlessNull, final Supplier<T> fallback)", "testcase": false, "constructor": false}, {"identifier": "onThrowable", "parameters": "(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback)", "modifiers": "@Beta public static", "return": "Supplier<T>", "signature": "Supplier<T> onThrowable(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback)", "full_signature": "@Beta public static Supplier<T> onThrowable(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback)", "class_method_signature": "Suppliers2.onThrowable(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jclouds/util/Suppliers2.java"}, "focal_method": {"identifier": "onThrowable", "parameters": "(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback)", "modifiers": "@Beta public static", "return": "Supplier<T>", "body": "@Beta\n   public static <T, X extends Throwable> Supplier<T> onThrowable(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback) {\n      return new Supplier<T>() {\n\n         @Override\n         public T get() {\n            try {\n               return unlessThrowable.get();\n            } catch (Throwable t) {\n               if (Throwables2.getFirstThrowableOfType(t, throwable) != null)\n                  return fallback.get();\n               throw Throwables.propagate(t);\n            }\n         }\n\n         @Override\n         public String toString() {\n            return Objects.toStringHelper(this).add(\"unlessThrowable\", unlessThrowable)\n                     .add(\"throwable\", throwable.getSimpleName()).add(\"fallback\", fallback).toString();\n         }\n      };\n   }", "signature": "Supplier<T> onThrowable(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback)", "full_signature": "@Beta public static Supplier<T> onThrowable(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback)", "class_method_signature": "Suppliers2.onThrowable(final Supplier<T> unlessThrowable,\n            final Class<X> throwable, final Supplier<T> fallback)", "testcase": false, "constructor": false, "invocations": ["get", "getFirstThrowableOfType", "get", "propagate", "toString", "add", "add", "add", "toStringHelper", "getSimpleName"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}