{"test_class": {"identifier": "BlobToHttpGetOptionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BlobToHttpGetOptions fn = new BlobToHttpGetOptions();", "modifier": "", "type": "BlobToHttpGetOptions", "declarator": "fn = new BlobToHttpGetOptions()", "var_name": "fn"}], "file": "blobstore/src/test/java/org/jclouds/blobstore/functions/BlobToHttpGetOptionsTest.java"}, "test_case": {"identifier": "testIfModifiedSince", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testIfModifiedSince()  {\n\n      Date ifModifiedSince = new Date(999999l);\n\n      org.jclouds.blobstore.options.GetOptions in = new org.jclouds.blobstore.options.GetOptions();\n      in.ifModifiedSince(ifModifiedSince);\n      GetOptions expected = new GetOptions();\n      expected.ifModifiedSince(ifModifiedSince);\n\n      assertEquals(fn.apply(in), expected);\n   }", "signature": "void testIfModifiedSince()", "full_signature": "@Test public void testIfModifiedSince()", "class_method_signature": "BlobToHttpGetOptionsTest.testIfModifiedSince()", "testcase": true, "constructor": false, "invocations": ["ifModifiedSince", "ifModifiedSince", "assertEquals", "apply"]}, "focal_class": {"identifier": "BlobToHttpGetOptions", "superclass": "", "interfaces": "implements Function<org.jclouds.blobstore.options.GetOptions, GetOptions>", "fields": [], "methods": [{"identifier": "apply", "parameters": "(org.jclouds.blobstore.options.GetOptions from)", "modifiers": "@Override public", "return": "GetOptions", "signature": "GetOptions apply(org.jclouds.blobstore.options.GetOptions from)", "full_signature": "@Override public GetOptions apply(org.jclouds.blobstore.options.GetOptions from)", "class_method_signature": "BlobToHttpGetOptions.apply(org.jclouds.blobstore.options.GetOptions from)", "testcase": false, "constructor": false}], "file": "blobstore/src/main/java/org/jclouds/blobstore/functions/BlobToHttpGetOptions.java"}, "focal_method": {"identifier": "apply", "parameters": "(org.jclouds.blobstore.options.GetOptions from)", "modifiers": "@Override public", "return": "GetOptions", "body": "@Override\n   public GetOptions apply(org.jclouds.blobstore.options.GetOptions from) {\n      checkNotNull(from, \"options\");\n      if (from == org.jclouds.blobstore.options.GetOptions.NONE)\n         return GetOptions.NONE;\n      GetOptions httpOptions = new GetOptions();\n      if (from.getIfMatch() != null) {\n         httpOptions.ifETagMatches(from.getIfMatch());\n      }\n      if (from.getIfModifiedSince() != null) {\n         httpOptions.ifModifiedSince(from.getIfModifiedSince());\n      }\n      if (from.getIfNoneMatch() != null) {\n         httpOptions.ifETagDoesntMatch(from.getIfNoneMatch());\n      }\n      if (from.getIfUnmodifiedSince() != null) {\n         httpOptions.ifUnmodifiedSince(from.getIfUnmodifiedSince());\n      }\n      for (String range : from.getRanges()) {\n         String[] firstLast = range.split(\"\\\\-\", 2);\n         if (!firstLast[0].isEmpty() && !firstLast[1].isEmpty())\n            httpOptions.range(Long.parseLong(firstLast[0]), Long.parseLong(firstLast[1]));\n         else if (firstLast[0].isEmpty() && !firstLast[1].isEmpty())\n            httpOptions.tail(Long.parseLong(firstLast[1]));\n         else\n            httpOptions.startAt(Long.parseLong(firstLast[0]));\n      }\n      return httpOptions;\n   }", "signature": "GetOptions apply(org.jclouds.blobstore.options.GetOptions from)", "full_signature": "@Override public GetOptions apply(org.jclouds.blobstore.options.GetOptions from)", "class_method_signature": "BlobToHttpGetOptions.apply(org.jclouds.blobstore.options.GetOptions from)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "getIfMatch", "ifETagMatches", "getIfMatch", "getIfModifiedSince", "ifModifiedSince", "getIfModifiedSince", "getIfNoneMatch", "ifETagDoesntMatch", "getIfNoneMatch", "getIfUnmodifiedSince", "ifUnmodifiedSince", "getIfUnmodifiedSince", "getRanges", "split", "isEmpty", "isEmpty", "range", "parseLong", "parseLong", "isEmpty", "isEmpty", "tail", "parseLong", "startAt", "parseLong"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}