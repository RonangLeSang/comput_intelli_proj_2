{"test_class": {"identifier": "BindToJsonPayloadWrappedWithTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Injector injector = Guice.createInjector(new GsonModule(), new FactoryModuleBuilder()\n            .build(BindToJsonPayloadWrappedWith.Factory.class));", "modifier": "", "type": "Injector", "declarator": "injector = Guice.createInjector(new GsonModule(), new FactoryModuleBuilder()\n            .build(BindToJsonPayloadWrappedWith.Factory.class))", "var_name": "injector"}], "file": "core/src/test/java/org/jclouds/rest/binders/BindToJsonPayloadWrappedWithTest.java"}, "test_case": {"identifier": "testFactoryCorrect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testFactoryCorrect() throws SecurityException, NoSuchMethodException {\n      BindToJsonPayloadWrappedWith binder = injector.getInstance(BindToJsonPayloadWrappedWith.Factory.class).create(\n               \"envelope\");\n\n      HttpRequest request = HttpRequest.builder().method(\"GET\").endpoint(\"http://momma\").build();\n      request = binder.bindToRequest(request, ImmutableMap.of(\"imageName\", \"foo\", \"serverId\", \"2\"));\n      assertEquals(request.getPayload().getRawContent(), \"{\\\"envelope\\\":{\\\"imageName\\\":\\\"foo\\\",\\\"serverId\\\":\\\"2\\\"}}\");\n\n   }", "signature": "void testFactoryCorrect()", "full_signature": "@Test public void testFactoryCorrect()", "class_method_signature": "BindToJsonPayloadWrappedWithTest.testFactoryCorrect()", "testcase": true, "constructor": false, "invocations": ["create", "getInstance", "build", "endpoint", "method", "builder", "bindToRequest", "of", "assertEquals", "getRawContent", "getPayload"]}, "focal_class": {"identifier": "BindToJsonPayloadWrappedWith", "superclass": "", "interfaces": "implements MapBinder", "fields": [{"original_string": "private final BindToJsonPayload jsonBinder;", "modifier": "private final", "type": "BindToJsonPayload", "declarator": "jsonBinder", "var_name": "jsonBinder"}, {"original_string": "private final String envelope;", "modifier": "private final", "type": "String", "declarator": "envelope", "var_name": "envelope"}], "methods": [{"identifier": "BindToJsonPayloadWrappedWith", "parameters": "(BindToJsonPayload jsonBinder, @Assisted String envelope)", "modifiers": "@Inject", "return": "", "signature": " BindToJsonPayloadWrappedWith(BindToJsonPayload jsonBinder, @Assisted String envelope)", "full_signature": "@Inject  BindToJsonPayloadWrappedWith(BindToJsonPayload jsonBinder, @Assisted String envelope)", "class_method_signature": "BindToJsonPayloadWrappedWith.BindToJsonPayloadWrappedWith(BindToJsonPayload jsonBinder, @Assisted String envelope)", "testcase": false, "constructor": true}, {"identifier": "bindToRequest", "parameters": "(R request, Object payload)", "modifiers": "@Override public", "return": "R", "signature": "R bindToRequest(R request, Object payload)", "full_signature": "@Override public R bindToRequest(R request, Object payload)", "class_method_signature": "BindToJsonPayloadWrappedWith.bindToRequest(R request, Object payload)", "testcase": false, "constructor": false}, {"identifier": "bindToRequest", "parameters": "(R request, Map<String, Object> postParams)", "modifiers": "@Override public", "return": "R", "signature": "R bindToRequest(R request, Map<String, Object> postParams)", "full_signature": "@Override public R bindToRequest(R request, Map<String, Object> postParams)", "class_method_signature": "BindToJsonPayloadWrappedWith.bindToRequest(R request, Map<String, Object> postParams)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jclouds/rest/binders/BindToJsonPayloadWrappedWith.java"}, "focal_method": {"identifier": "bindToRequest", "parameters": "(R request, Object payload)", "modifiers": "@Override public", "return": "R", "body": "@Override\n   public <R extends HttpRequest> R bindToRequest(R request, Object payload) {\n      return jsonBinder.bindToRequest(request, (Object) ImmutableMap.of(envelope, checkNotNull(payload, \"payload\")));\n   }", "signature": "R bindToRequest(R request, Object payload)", "full_signature": "@Override public R bindToRequest(R request, Object payload)", "class_method_signature": "BindToJsonPayloadWrappedWith.bindToRequest(R request, Object payload)", "testcase": false, "constructor": false, "invocations": ["bindToRequest", "of", "checkNotNull"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}