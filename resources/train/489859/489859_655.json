{"test_class": {"identifier": "SshKeysTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String expectedFingerprint = \"2b:a9:62:95:5b:8b:1d:61:e0:92:f7:03:10:e9:db:d9\";", "modifier": "", "type": "String", "declarator": "expectedFingerprint = \"2b:a9:62:95:5b:8b:1d:61:e0:92:f7:03:10:e9:db:d9\"", "var_name": "expectedFingerprint"}, {"original_string": "String expectedSha1 = \"c8:01:34:c0:3c:8c:91:ac:e1:da:cf:72:15:d7:f2:e5:99:5b:28:d4\";", "modifier": "", "type": "String", "declarator": "expectedSha1 = \"c8:01:34:c0:3c:8c:91:ac:e1:da:cf:72:15:d7:f2:e5:99:5b:28:d4\"", "var_name": "expectedSha1"}], "file": "compute/src/test/java/org/jclouds/ssh/SshKeysTest.java"}, "test_case": {"identifier": "testPrivateKeyMatchesFingerprintString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testPrivateKeyMatchesFingerprintString() throws IOException {\n      String privKey = Strings2.toStringAndClose(getClass().getResourceAsStream(\"/test\"));\n      assert privateKeyHasFingerprint(privKey, expectedFingerprint);\n   }", "signature": "void testPrivateKeyMatchesFingerprintString()", "full_signature": "@Test public void testPrivateKeyMatchesFingerprintString()", "class_method_signature": "SshKeysTest.testPrivateKeyMatchesFingerprintString()", "testcase": true, "constructor": false, "invocations": ["toStringAndClose", "getResourceAsStream", "getClass", "privateKeyHasFingerprint"]}, "focal_class": {"identifier": "SshKeys", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "publicKeySpecFromOpenSSH", "parameters": "(String idRsaPub)", "modifiers": "public static", "return": "RSAPublicKeySpec", "signature": "RSAPublicKeySpec publicKeySpecFromOpenSSH(String idRsaPub)", "full_signature": "public static RSAPublicKeySpec publicKeySpecFromOpenSSH(String idRsaPub)", "class_method_signature": "SshKeys.publicKeySpecFromOpenSSH(String idRsaPub)", "testcase": false, "constructor": false}, {"identifier": "publicKeySpecFromOpenSSH", "parameters": "(InputSupplier<? extends InputStream> supplier)", "modifiers": "public static", "return": "RSAPublicKeySpec", "signature": "RSAPublicKeySpec publicKeySpecFromOpenSSH(InputSupplier<? extends InputStream> supplier)", "full_signature": "public static RSAPublicKeySpec publicKeySpecFromOpenSSH(InputSupplier<? extends InputStream> supplier)", "class_method_signature": "SshKeys.publicKeySpecFromOpenSSH(InputSupplier<? extends InputStream> supplier)", "testcase": false, "constructor": false}, {"identifier": "readLengthFirst", "parameters": "(InputStream in)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] readLengthFirst(InputStream in)", "full_signature": "private static byte[] readLengthFirst(InputStream in)", "class_method_signature": "SshKeys.readLengthFirst(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "generateRsaKeyPair", "parameters": "(KeyPairGenerator generator, SecureRandom rand)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair generateRsaKeyPair(KeyPairGenerator generator, SecureRandom rand)", "full_signature": "public static KeyPair generateRsaKeyPair(KeyPairGenerator generator, SecureRandom rand)", "class_method_signature": "SshKeys.generateRsaKeyPair(KeyPairGenerator generator, SecureRandom rand)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "()", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> generate()", "full_signature": "public static Map<String, String> generate()", "class_method_signature": "SshKeys.generate()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(KeyPairGenerator generator, SecureRandom rand)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> generate(KeyPairGenerator generator, SecureRandom rand)", "full_signature": "public static Map<String, String> generate(KeyPairGenerator generator, SecureRandom rand)", "class_method_signature": "SshKeys.generate(KeyPairGenerator generator, SecureRandom rand)", "testcase": false, "constructor": false}, {"identifier": "encodeAsOpenSSH", "parameters": "(RSAPublicKey key)", "modifiers": "public static", "return": "String", "signature": "String encodeAsOpenSSH(RSAPublicKey key)", "full_signature": "public static String encodeAsOpenSSH(RSAPublicKey key)", "class_method_signature": "SshKeys.encodeAsOpenSSH(RSAPublicKey key)", "testcase": false, "constructor": false}, {"identifier": "privateKeyMatchesPublicKey", "parameters": "(String privateKeyPEM, String publicKeyOpenSSH)", "modifiers": "public static", "return": "boolean", "signature": "boolean privateKeyMatchesPublicKey(String privateKeyPEM, String publicKeyOpenSSH)", "full_signature": "public static boolean privateKeyMatchesPublicKey(String privateKeyPEM, String publicKeyOpenSSH)", "class_method_signature": "SshKeys.privateKeyMatchesPublicKey(String privateKeyPEM, String publicKeyOpenSSH)", "testcase": false, "constructor": false}, {"identifier": "privateKeyMatchesPublicKey", "parameters": "(RSAPrivateCrtKeySpec privateKey, RSAPublicKeySpec publicKey)", "modifiers": "public static", "return": "boolean", "signature": "boolean privateKeyMatchesPublicKey(RSAPrivateCrtKeySpec privateKey, RSAPublicKeySpec publicKey)", "full_signature": "public static boolean privateKeyMatchesPublicKey(RSAPrivateCrtKeySpec privateKey, RSAPublicKeySpec publicKey)", "class_method_signature": "SshKeys.privateKeyMatchesPublicKey(RSAPrivateCrtKeySpec privateKey, RSAPublicKeySpec publicKey)", "testcase": false, "constructor": false}, {"identifier": "privateKeyHasFingerprint", "parameters": "(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "modifiers": "public static", "return": "boolean", "signature": "boolean privateKeyHasFingerprint(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "full_signature": "public static boolean privateKeyHasFingerprint(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "class_method_signature": "SshKeys.privateKeyHasFingerprint(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "testcase": false, "constructor": false}, {"identifier": "privateKeyHasFingerprint", "parameters": "(String privateKeyPEM, String fingerprint)", "modifiers": "public static", "return": "boolean", "signature": "boolean privateKeyHasFingerprint(String privateKeyPEM, String fingerprint)", "full_signature": "public static boolean privateKeyHasFingerprint(String privateKeyPEM, String fingerprint)", "class_method_signature": "SshKeys.privateKeyHasFingerprint(String privateKeyPEM, String fingerprint)", "testcase": false, "constructor": false}, {"identifier": "fingerprintPrivateKey", "parameters": "(String privateKeyPEM)", "modifiers": "public static", "return": "String", "signature": "String fingerprintPrivateKey(String privateKeyPEM)", "full_signature": "public static String fingerprintPrivateKey(String privateKeyPEM)", "class_method_signature": "SshKeys.fingerprintPrivateKey(String privateKeyPEM)", "testcase": false, "constructor": false}, {"identifier": "fingerprintPublicKey", "parameters": "(String publicKeyOpenSSH)", "modifiers": "public static", "return": "String", "signature": "String fingerprintPublicKey(String publicKeyOpenSSH)", "full_signature": "public static String fingerprintPublicKey(String publicKeyOpenSSH)", "class_method_signature": "SshKeys.fingerprintPublicKey(String publicKeyOpenSSH)", "testcase": false, "constructor": false}, {"identifier": "privateKeyHasSha1", "parameters": "(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "modifiers": "public static", "return": "boolean", "signature": "boolean privateKeyHasSha1(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "full_signature": "public static boolean privateKeyHasSha1(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "class_method_signature": "SshKeys.privateKeyHasSha1(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "testcase": false, "constructor": false}, {"identifier": "privateKeyHasSha1", "parameters": "(String privateKeyPEM, String sha1HexColonDelimited)", "modifiers": "public static", "return": "boolean", "signature": "boolean privateKeyHasSha1(String privateKeyPEM, String sha1HexColonDelimited)", "full_signature": "public static boolean privateKeyHasSha1(String privateKeyPEM, String sha1HexColonDelimited)", "class_method_signature": "SshKeys.privateKeyHasSha1(String privateKeyPEM, String sha1HexColonDelimited)", "testcase": false, "constructor": false}, {"identifier": "sha1PrivateKey", "parameters": "(String privateKeyPEM)", "modifiers": "public static", "return": "String", "signature": "String sha1PrivateKey(String privateKeyPEM)", "full_signature": "public static String sha1PrivateKey(String privateKeyPEM)", "class_method_signature": "SshKeys.sha1PrivateKey(String privateKeyPEM)", "testcase": false, "constructor": false}, {"identifier": "sha1", "parameters": "(RSAPrivateCrtKeySpec privateKey)", "modifiers": "public static", "return": "String", "signature": "String sha1(RSAPrivateCrtKeySpec privateKey)", "full_signature": "public static String sha1(RSAPrivateCrtKeySpec privateKey)", "class_method_signature": "SshKeys.sha1(RSAPrivateCrtKeySpec privateKey)", "testcase": false, "constructor": false}, {"identifier": "publicKeyHasFingerprint", "parameters": "(RSAPublicKeySpec publicKey, String fingerprint)", "modifiers": "public static", "return": "boolean", "signature": "boolean publicKeyHasFingerprint(RSAPublicKeySpec publicKey, String fingerprint)", "full_signature": "public static boolean publicKeyHasFingerprint(RSAPublicKeySpec publicKey, String fingerprint)", "class_method_signature": "SshKeys.publicKeyHasFingerprint(RSAPublicKeySpec publicKey, String fingerprint)", "testcase": false, "constructor": false}, {"identifier": "publicKeyHasFingerprint", "parameters": "(String publicKeyOpenSSH, String fingerprint)", "modifiers": "public static", "return": "boolean", "signature": "boolean publicKeyHasFingerprint(String publicKeyOpenSSH, String fingerprint)", "full_signature": "public static boolean publicKeyHasFingerprint(String publicKeyOpenSSH, String fingerprint)", "class_method_signature": "SshKeys.publicKeyHasFingerprint(String publicKeyOpenSSH, String fingerprint)", "testcase": false, "constructor": false}, {"identifier": "fingerprint", "parameters": "(BigInteger publicExponent, BigInteger modulus)", "modifiers": "public static", "return": "String", "signature": "String fingerprint(BigInteger publicExponent, BigInteger modulus)", "full_signature": "public static String fingerprint(BigInteger publicExponent, BigInteger modulus)", "class_method_signature": "SshKeys.fingerprint(BigInteger publicExponent, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "hexColonDelimited", "parameters": "(HashCode hc)", "modifiers": "private static", "return": "String", "signature": "String hexColonDelimited(HashCode hc)", "full_signature": "private static String hexColonDelimited(HashCode hc)", "class_method_signature": "SshKeys.hexColonDelimited(HashCode hc)", "testcase": false, "constructor": false}, {"identifier": "keyBlob", "parameters": "(BigInteger publicExponent, BigInteger modulus)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] keyBlob(BigInteger publicExponent, BigInteger modulus)", "full_signature": "private static byte[] keyBlob(BigInteger publicExponent, BigInteger modulus)", "class_method_signature": "SshKeys.keyBlob(BigInteger publicExponent, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "writeLengthFirst", "parameters": "(byte[] array, ByteArrayOutputStream out)", "modifiers": "private static", "return": "void", "signature": "void writeLengthFirst(byte[] array, ByteArrayOutputStream out)", "full_signature": "private static void writeLengthFirst(byte[] array, ByteArrayOutputStream out)", "class_method_signature": "SshKeys.writeLengthFirst(byte[] array, ByteArrayOutputStream out)", "testcase": false, "constructor": false}], "file": "compute/src/main/java/org/jclouds/ssh/SshKeys.java"}, "focal_method": {"identifier": "privateKeyHasFingerprint", "parameters": "(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "modifiers": "public static", "return": "boolean", "body": "public static boolean privateKeyHasFingerprint(RSAPrivateCrtKeySpec privateKey, String fingerprint) {\n      return fingerprint(privateKey.getPublicExponent(), privateKey.getModulus()).equals(fingerprint);\n   }", "signature": "boolean privateKeyHasFingerprint(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "full_signature": "public static boolean privateKeyHasFingerprint(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "class_method_signature": "SshKeys.privateKeyHasFingerprint(RSAPrivateCrtKeySpec privateKey, String fingerprint)", "testcase": false, "constructor": false, "invocations": ["equals", "fingerprint", "getPublicExponent", "getModulus"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}