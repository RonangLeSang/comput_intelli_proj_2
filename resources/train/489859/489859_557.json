{"test_class": {"identifier": "AdvanceUntilEmptyIterableTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/jclouds/collect/AdvanceUntilEmptyIterableTest.java"}, "test_case": {"identifier": "testConcatStopsWhenEmpty", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n   @Test\n   public void testConcatStopsWhenEmpty() {\n\n      Supplier<FluentIterable<String>> nextIterable = createMock(Supplier.class);\n\n      expect(nextIterable.get()).andReturn(FluentIterable.from(ImmutableSet.of(\"foo\", \"bar\")));\n      expect(nextIterable.get()).andReturn(FluentIterable.from(ImmutableSet.of(\"boo\", \"baz\")));\n\n      expect(nextIterable.get()).andReturn(FluentIterable.from(ImmutableSet.of(\"ham\", \"cheeze\")));\n      expect(nextIterable.get()).andReturn(FluentIterable.from(ImmutableSet.<String>of()));\n\n      EasyMock.replay(nextIterable);\n\n      AdvanceUntilEmptyIterable<String> iterable = new AdvanceUntilEmptyIterable<String>(nextIterable);\n\n      Assert.assertEquals(iterable.concat().toSet(),\n            ImmutableSet.of(\"foo\", \"bar\", \"boo\", \"baz\", \"ham\", \"cheeze\"));\n\n      EasyMock.verify(nextIterable);\n\n   }", "signature": "void testConcatStopsWhenEmpty()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testConcatStopsWhenEmpty()", "class_method_signature": "AdvanceUntilEmptyIterableTest.testConcatStopsWhenEmpty()", "testcase": true, "constructor": false, "invocations": ["createMock", "andReturn", "expect", "get", "from", "of", "andReturn", "expect", "get", "from", "of", "andReturn", "expect", "get", "from", "of", "andReturn", "expect", "get", "from", "of", "replay", "assertEquals", "toSet", "concat", "of", "verify"]}, "focal_class": {"identifier": "AdvanceUntilEmptyIterable", "superclass": "extends FluentIterable<FluentIterable<E>>", "interfaces": "", "fields": [{"original_string": "private final AdvanceUntilEmptyIterator<E> iterator;", "modifier": "private final", "type": "AdvanceUntilEmptyIterator<E>", "declarator": "iterator", "var_name": "iterator"}], "methods": [{"identifier": "create", "parameters": "(Supplier<FluentIterable<E>> nextIterable)", "modifiers": "public static", "return": "AdvanceUntilEmptyIterable<E>", "signature": "AdvanceUntilEmptyIterable<E> create(Supplier<FluentIterable<E>> nextIterable)", "full_signature": "public static AdvanceUntilEmptyIterable<E> create(Supplier<FluentIterable<E>> nextIterable)", "class_method_signature": "AdvanceUntilEmptyIterable.create(Supplier<FluentIterable<E>> nextIterable)", "testcase": false, "constructor": false}, {"identifier": "AdvanceUntilEmptyIterable", "parameters": "(Supplier<FluentIterable<E>> nextIterable)", "modifiers": "protected", "return": "", "signature": " AdvanceUntilEmptyIterable(Supplier<FluentIterable<E>> nextIterable)", "full_signature": "protected  AdvanceUntilEmptyIterable(Supplier<FluentIterable<E>> nextIterable)", "class_method_signature": "AdvanceUntilEmptyIterable.AdvanceUntilEmptyIterable(Supplier<FluentIterable<E>> nextIterable)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<FluentIterable<E>>", "signature": "Iterator<FluentIterable<E>> iterator()", "full_signature": "@Override public Iterator<FluentIterable<E>> iterator()", "class_method_signature": "AdvanceUntilEmptyIterable.iterator()", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "()", "modifiers": "public", "return": "FluentIterable<E>", "signature": "FluentIterable<E> concat()", "full_signature": "public FluentIterable<E> concat()", "class_method_signature": "AdvanceUntilEmptyIterable.concat()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jclouds/collect/AdvanceUntilEmptyIterable.java"}, "focal_method": {"identifier": "concat", "parameters": "()", "modifiers": "public", "return": "FluentIterable<E>", "body": "public FluentIterable<E> concat() {\n      final Iterator<FluentIterable<E>> iterator = iterator();\n      final UnmodifiableIterator<Iterator<E>> unmodifiable = new UnmodifiableIterator<Iterator<E>>() {\n         @Override\n         public boolean hasNext() {\n            return iterator.hasNext();\n         }\n\n         @Override\n         public Iterator<E> next() {\n            return iterator.next().iterator();\n         }\n      };\n      return new FluentIterable<E>() {\n         @Override\n         public Iterator<E> iterator() {\n            return Iterators.concat(unmodifiable);\n         }\n      };\n   }", "signature": "FluentIterable<E> concat()", "full_signature": "public FluentIterable<E> concat()", "class_method_signature": "AdvanceUntilEmptyIterable.concat()", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "iterator", "next", "concat"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}