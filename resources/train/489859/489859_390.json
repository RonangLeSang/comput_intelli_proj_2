{"test_class": {"identifier": "RestAnnotationProcessorTest", "superclass": "extends BaseRestApiTest", "interfaces": "", "fields": [{"original_string": "DateService dateService = new SimpleDateFormatDateService();", "modifier": "", "type": "DateService", "declarator": "dateService = new SimpleDateFormatDateService()", "var_name": "dateService"}, {"original_string": "RestAnnotationProcessor processor;", "modifier": "", "type": "RestAnnotationProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "TransformerForRequest transformer;", "modifier": "", "type": "TransformerForRequest", "declarator": "transformer", "var_name": "transformer"}], "file": "core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java"}, "test_case": {"identifier": "testBuildOneClassHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testBuildOneClassHeader() throws SecurityException, NoSuchMethodException {\n      Invokable<?, ?> method = method(TestClassHeader.class, \"oneHeader\", String.class);\n      Multimap<String, String> headers = processor.apply(Invocation.create(method,\n            ImmutableList.<Object> of(\"robot\"))).getHeaders();\n      assertEquals(headers.size(), 1);\n      assertEquals(headers.get(\"x-amz-copy-source\"), ImmutableList.of(\"/robot\"));\n   }", "signature": "void testBuildOneClassHeader()", "full_signature": "@Test public void testBuildOneClassHeader()", "class_method_signature": "RestAnnotationProcessorTest.testBuildOneClassHeader()", "testcase": true, "constructor": false, "invocations": ["method", "getHeaders", "apply", "create", "of", "assertEquals", "size", "assertEquals", "get", "of"]}, "focal_class": {"identifier": "RestAnnotationProcessor", "superclass": "", "interfaces": "implements Function<Invocation, HttpRequest>", "fields": [{"original_string": "@Resource\n   protected Logger logger = Logger.NULL;", "modifier": "@Resource\n   protected", "type": "Logger", "declarator": "logger = Logger.NULL", "var_name": "logger"}, {"original_string": "private static final Function<? super Entry<String, Object>, ? extends Part> ENTRY_TO_PART = new Function<Entry<String, Object>, Part>() {\n      @Override\n      public Part apply(Entry<String, Object> from) {\n         return Part.create(from.getKey(), from.getValue().toString());\n      }\n   };", "modifier": "private static final", "type": "Function<? super Entry<String, Object>, ? extends Part>", "declarator": "ENTRY_TO_PART = new Function<Entry<String, Object>, Part>() {\n      @Override\n      public Part apply(Entry<String, Object> from) {\n         return Part.create(from.getKey(), from.getValue().toString());\n      }\n   }", "var_name": "ENTRY_TO_PART"}, {"original_string": "private final Injector injector;", "modifier": "private final", "type": "Injector", "declarator": "injector", "var_name": "injector"}, {"original_string": "private final HttpUtils utils;", "modifier": "private final", "type": "HttpUtils", "declarator": "utils", "var_name": "utils"}, {"original_string": "private final ContentMetadataCodec contentMetadataCodec;", "modifier": "private final", "type": "ContentMetadataCodec", "declarator": "contentMetadataCodec", "var_name": "contentMetadataCodec"}, {"original_string": "private final String apiVersion;", "modifier": "private final", "type": "String", "declarator": "apiVersion", "var_name": "apiVersion"}, {"original_string": "private final String buildVersion;", "modifier": "private final", "type": "String", "declarator": "buildVersion", "var_name": "buildVersion"}, {"original_string": "private final InputParamValidator inputParamValidator;", "modifier": "private final", "type": "InputParamValidator", "declarator": "inputParamValidator", "var_name": "inputParamValidator"}, {"original_string": "private final GetAcceptHeaders getAcceptHeaders;", "modifier": "private final", "type": "GetAcceptHeaders", "declarator": "getAcceptHeaders", "var_name": "getAcceptHeaders"}, {"original_string": "private final Invocation caller;", "modifier": "private final", "type": "Invocation", "declarator": "caller", "var_name": "caller"}, {"original_string": "private static final TypeLiteral<Supplier<URI>> uriSupplierLiteral = new TypeLiteral<Supplier<URI>>() {\n   };", "modifier": "private static final", "type": "TypeLiteral<Supplier<URI>>", "declarator": "uriSupplierLiteral = new TypeLiteral<Supplier<URI>>() {\n   }", "var_name": "uriSupplierLiteral"}, {"original_string": "private static final LoadingCache<Invokable<?, ?>, Set<Integer>> invokableToIndexesOfOptions = CacheBuilder\n         .newBuilder().build(new CacheLoader<Invokable<?, ?>, Set<Integer>>() {\n            @Override\n            public Set<Integer> load(Invokable<?, ?> invokable) {\n               Builder<Integer> toReturn = ImmutableSet.builder();\n               for (Parameter param : invokable.getParameters()) {\n                  Class<?> type = param.getType().getRawType();\n                  if (HttpRequestOptions.class.isAssignableFrom(type)\n                        || HttpRequestOptions[].class.isAssignableFrom(type))\n                     toReturn.add(param.hashCode());\n               }\n               return toReturn.build();\n            }\n         });", "modifier": "private static final", "type": "LoadingCache<Invokable<?, ?>, Set<Integer>>", "declarator": "invokableToIndexesOfOptions = CacheBuilder\n         .newBuilder().build(new CacheLoader<Invokable<?, ?>, Set<Integer>>() {\n            @Override\n            public Set<Integer> load(Invokable<?, ?> invokable) {\n               Builder<Integer> toReturn = ImmutableSet.builder();\n               for (Parameter param : invokable.getParameters()) {\n                  Class<?> type = param.getType().getRawType();\n                  if (HttpRequestOptions.class.isAssignableFrom(type)\n                        || HttpRequestOptions[].class.isAssignableFrom(type))\n                     toReturn.add(param.hashCode());\n               }\n               return toReturn.build();\n            }\n         })", "var_name": "invokableToIndexesOfOptions"}], "methods": [{"identifier": "RestAnnotationProcessor", "parameters": "(Injector injector, @ApiVersion String apiVersion, @BuildVersion String buildVersion,\n         HttpUtils utils, ContentMetadataCodec contentMetadataCodec, InputParamValidator inputParamValidator,\n         GetAcceptHeaders getAcceptHeaders, @Nullable @Named(\"caller\") Invocation caller)", "modifiers": "@Inject private", "return": "", "signature": " RestAnnotationProcessor(Injector injector, @ApiVersion String apiVersion, @BuildVersion String buildVersion,\n         HttpUtils utils, ContentMetadataCodec contentMetadataCodec, InputParamValidator inputParamValidator,\n         GetAcceptHeaders getAcceptHeaders, @Nullable @Named(\"caller\") Invocation caller)", "full_signature": "@Inject private  RestAnnotationProcessor(Injector injector, @ApiVersion String apiVersion, @BuildVersion String buildVersion,\n         HttpUtils utils, ContentMetadataCodec contentMetadataCodec, InputParamValidator inputParamValidator,\n         GetAcceptHeaders getAcceptHeaders, @Nullable @Named(\"caller\") Invocation caller)", "class_method_signature": "RestAnnotationProcessor.RestAnnotationProcessor(Injector injector, @ApiVersion String apiVersion, @BuildVersion String buildVersion,\n         HttpUtils utils, ContentMetadataCodec contentMetadataCodec, InputParamValidator inputParamValidator,\n         GetAcceptHeaders getAcceptHeaders, @Nullable @Named(\"caller\") Invocation caller)", "testcase": false, "constructor": true}, {"identifier": "createRequest", "parameters": "(Invokable<?, ?> invokable, List<Object> args)", "modifiers": "@Deprecated public", "return": "GeneratedHttpRequest", "signature": "GeneratedHttpRequest createRequest(Invokable<?, ?> invokable, List<Object> args)", "full_signature": "@Deprecated public GeneratedHttpRequest createRequest(Invokable<?, ?> invokable, List<Object> args)", "class_method_signature": "RestAnnotationProcessor.createRequest(Invokable<?, ?> invokable, List<Object> args)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Invocation invocation)", "modifiers": "@Override public", "return": "GeneratedHttpRequest", "signature": "GeneratedHttpRequest apply(Invocation invocation)", "full_signature": "@Override public GeneratedHttpRequest apply(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.apply(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "findOrNull", "parameters": "(Iterable<Object> args, Class<T> clazz)", "modifiers": "private static", "return": "T", "signature": "T findOrNull(Iterable<Object> args, Class<T> clazz)", "full_signature": "private static T findOrNull(Iterable<Object> args, Class<T> clazz)", "class_method_signature": "RestAnnotationProcessor.findOrNull(Iterable<Object> args, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "convertUnsafe", "parameters": "(Multimap<K, V> in)", "modifiers": "private static", "return": "Map<K, V>", "signature": "Map<K, V> convertUnsafe(Multimap<K, V> in)", "full_signature": "private static Map<K, V> convertUnsafe(Multimap<K, V> in)", "class_method_signature": "RestAnnotationProcessor.convertUnsafe(Multimap<K, V> in)", "testcase": false, "constructor": false}, {"identifier": "overridePathEncoding", "parameters": "(UriBuilder uriBuilder, Invocation invocation)", "modifiers": "private", "return": "void", "signature": "void overridePathEncoding(UriBuilder uriBuilder, Invocation invocation)", "full_signature": "private void overridePathEncoding(UriBuilder uriBuilder, Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.overridePathEncoding(UriBuilder uriBuilder, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "findEndpoint", "parameters": "(Invocation invocation)", "modifiers": "protected", "return": "Optional<URI>", "signature": "Optional<URI> findEndpoint(Invocation invocation)", "full_signature": "protected Optional<URI> findEndpoint(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.findEndpoint(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "addPathAndGetTokens", "parameters": "(Invocation invocation, UriBuilder uriBuilder)", "modifiers": "private", "return": "Multimap<String, Object>", "signature": "Multimap<String, Object> addPathAndGetTokens(Invocation invocation, UriBuilder uriBuilder)", "full_signature": "private Multimap<String, Object> addPathAndGetTokens(Invocation invocation, UriBuilder uriBuilder)", "class_method_signature": "RestAnnotationProcessor.addPathAndGetTokens(Invocation invocation, UriBuilder uriBuilder)", "testcase": false, "constructor": false}, {"identifier": "addFormParams", "parameters": "(Multimap<String, ?> tokenValues, Invocation invocation)", "modifiers": "private", "return": "Multimap<String, Object>", "signature": "Multimap<String, Object> addFormParams(Multimap<String, ?> tokenValues, Invocation invocation)", "full_signature": "private Multimap<String, Object> addFormParams(Multimap<String, ?> tokenValues, Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.addFormParams(Multimap<String, ?> tokenValues, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "addQueryParams", "parameters": "(Multimap<String, ?> tokenValues, Invocation invocation)", "modifiers": "private", "return": "Multimap<String, Object>", "signature": "Multimap<String, Object> addQueryParams(Multimap<String, ?> tokenValues, Invocation invocation)", "full_signature": "private Multimap<String, Object> addQueryParams(Multimap<String, ?> tokenValues, Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.addQueryParams(Multimap<String, ?> tokenValues, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "addForm", "parameters": "(Multimap<String, Object> formParams, FormParams form, Multimap<String, ?> tokenValues)", "modifiers": "private", "return": "void", "signature": "void addForm(Multimap<String, Object> formParams, FormParams form, Multimap<String, ?> tokenValues)", "full_signature": "private void addForm(Multimap<String, Object> formParams, FormParams form, Multimap<String, ?> tokenValues)", "class_method_signature": "RestAnnotationProcessor.addForm(Multimap<String, Object> formParams, FormParams form, Multimap<String, ?> tokenValues)", "testcase": false, "constructor": false}, {"identifier": "addQuery", "parameters": "(Multimap<String, Object> queryParams, QueryParams query, Multimap<String, ?> tokenValues)", "modifiers": "private", "return": "void", "signature": "void addQuery(Multimap<String, Object> queryParams, QueryParams query, Multimap<String, ?> tokenValues)", "full_signature": "private void addQuery(Multimap<String, Object> queryParams, QueryParams query, Multimap<String, ?> tokenValues)", "class_method_signature": "RestAnnotationProcessor.addQuery(Multimap<String, Object> queryParams, QueryParams query, Multimap<String, ?> tokenValues)", "testcase": false, "constructor": false}, {"identifier": "addMapPayload", "parameters": "(Map<String, Object> postParams, PayloadParams mapDefaults,\n         Multimap<String, String> headers)", "modifiers": "private", "return": "void", "signature": "void addMapPayload(Map<String, Object> postParams, PayloadParams mapDefaults,\n         Multimap<String, String> headers)", "full_signature": "private void addMapPayload(Map<String, Object> postParams, PayloadParams mapDefaults,\n         Multimap<String, String> headers)", "class_method_signature": "RestAnnotationProcessor.addMapPayload(Map<String, Object> postParams, PayloadParams mapDefaults,\n         Multimap<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "getFiltersIfAnnotated", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "List<HttpRequestFilter>", "signature": "List<HttpRequestFilter> getFiltersIfAnnotated(Invocation invocation)", "full_signature": "private List<HttpRequestFilter> getFiltersIfAnnotated(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.getFiltersIfAnnotated(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getEndpointInParametersOrNull", "parameters": "(Invocation invocation, Injector injector)", "modifiers": "@VisibleForTesting static", "return": "URI", "signature": "URI getEndpointInParametersOrNull(Invocation invocation, Injector injector)", "full_signature": "@VisibleForTesting static URI getEndpointInParametersOrNull(Invocation invocation, Injector injector)", "class_method_signature": "RestAnnotationProcessor.getEndpointInParametersOrNull(Invocation invocation, Injector injector)", "testcase": false, "constructor": false}, {"identifier": "parametersWithAnnotation", "parameters": "(Invokable<?, ?> invokable,\n         final Class<? extends Annotation> annotationType)", "modifiers": "private static", "return": "Collection<Parameter>", "signature": "Collection<Parameter> parametersWithAnnotation(Invokable<?, ?> invokable,\n         final Class<? extends Annotation> annotationType)", "full_signature": "private static Collection<Parameter> parametersWithAnnotation(Invokable<?, ?> invokable,\n         final Class<? extends Annotation> annotationType)", "class_method_signature": "RestAnnotationProcessor.parametersWithAnnotation(Invokable<?, ?> invokable,\n         final Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getEndpointFor", "parameters": "(Invocation invocation)", "modifiers": "protected", "return": "Optional<URI>", "signature": "Optional<URI> getEndpointFor(Invocation invocation)", "full_signature": "protected Optional<URI> getEndpointFor(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.getEndpointFor(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "addHostIfMissing", "parameters": "(URI original, URI withHost)", "modifiers": "@VisibleForTesting static", "return": "URI", "signature": "URI addHostIfMissing(URI original, URI withHost)", "full_signature": "@VisibleForTesting static URI addHostIfMissing(URI original, URI withHost)", "class_method_signature": "RestAnnotationProcessor.addHostIfMissing(URI original, URI withHost)", "testcase": false, "constructor": false}, {"identifier": "getMapPayloadBinderOrNull", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "org.jclouds.rest.MapBinder", "signature": "org.jclouds.rest.MapBinder getMapPayloadBinderOrNull(Invocation invocation)", "full_signature": "private org.jclouds.rest.MapBinder getMapPayloadBinderOrNull(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.getMapPayloadBinderOrNull(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "shouldAddHostHeader", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldAddHostHeader(Invocation invocation)", "full_signature": "private boolean shouldAddHostHeader(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.shouldAddHostHeader(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "decorateRequest", "parameters": "(GeneratedHttpRequest request)", "modifiers": "private", "return": "GeneratedHttpRequest", "signature": "GeneratedHttpRequest decorateRequest(GeneratedHttpRequest request)", "full_signature": "private GeneratedHttpRequest decorateRequest(GeneratedHttpRequest request)", "class_method_signature": "RestAnnotationProcessor.decorateRequest(GeneratedHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "findOptionsIn", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "Set<HttpRequestOptions>", "signature": "Set<HttpRequestOptions> findOptionsIn(Invocation invocation)", "full_signature": "private Set<HttpRequestOptions> findOptionsIn(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.findOptionsIn(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "buildHeaders", "parameters": "(Multimap<String, ?> tokenValues, Invocation invocation)", "modifiers": "private", "return": "Multimap<String, String>", "signature": "Multimap<String, String> buildHeaders(Multimap<String, ?> tokenValues, Invocation invocation)", "full_signature": "private Multimap<String, String> buildHeaders(Multimap<String, ?> tokenValues, Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.buildHeaders(Multimap<String, ?> tokenValues, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "addConsumesIfPresentOnTypeOrMethod", "parameters": "(Multimap<String, String> headers, Invocation invocation)", "modifiers": "private", "return": "void", "signature": "void addConsumesIfPresentOnTypeOrMethod(Multimap<String, String> headers, Invocation invocation)", "full_signature": "private void addConsumesIfPresentOnTypeOrMethod(Multimap<String, String> headers, Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.addConsumesIfPresentOnTypeOrMethod(Multimap<String, String> headers, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "addProducesIfPresentOnTypeOrMethod", "parameters": "(Multimap<String, String> headers, Invocation invocation)", "modifiers": "private", "return": "void", "signature": "void addProducesIfPresentOnTypeOrMethod(Multimap<String, String> headers, Invocation invocation)", "full_signature": "private void addProducesIfPresentOnTypeOrMethod(Multimap<String, String> headers, Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.addProducesIfPresentOnTypeOrMethod(Multimap<String, String> headers, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "addHeaderIfAnnotationPresentOnMethod", "parameters": "(Multimap<String, String> headers, Invocation invocation,\n         Multimap<String, ?> tokenValues)", "modifiers": "private", "return": "void", "signature": "void addHeaderIfAnnotationPresentOnMethod(Multimap<String, String> headers, Invocation invocation,\n         Multimap<String, ?> tokenValues)", "full_signature": "private void addHeaderIfAnnotationPresentOnMethod(Multimap<String, String> headers, Invocation invocation,\n         Multimap<String, ?> tokenValues)", "class_method_signature": "RestAnnotationProcessor.addHeaderIfAnnotationPresentOnMethod(Multimap<String, String> headers, Invocation invocation,\n         Multimap<String, ?> tokenValues)", "testcase": false, "constructor": false}, {"identifier": "addHeader", "parameters": "(Multimap<String, String> headers, Headers header, Multimap<String, ?> tokenValues)", "modifiers": "private static", "return": "void", "signature": "void addHeader(Multimap<String, String> headers, Headers header, Multimap<String, ?> tokenValues)", "full_signature": "private static void addHeader(Multimap<String, String> headers, Headers header, Multimap<String, ?> tokenValues)", "class_method_signature": "RestAnnotationProcessor.addHeader(Multimap<String, String> headers, Headers header, Multimap<String, ?> tokenValues)", "testcase": false, "constructor": false}, {"identifier": "getParts", "parameters": "(Invocation invocation, Multimap<String, ?> tokenValues)", "modifiers": "private static", "return": "List<Part>", "signature": "List<Part> getParts(Invocation invocation, Multimap<String, ?> tokenValues)", "full_signature": "private static List<Part> getParts(Invocation invocation, Multimap<String, ?> tokenValues)", "class_method_signature": "RestAnnotationProcessor.getParts(Invocation invocation, Multimap<String, ?> tokenValues)", "testcase": false, "constructor": false}, {"identifier": "getPathParamKeyValues", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "Multimap<String, Object>", "signature": "Multimap<String, Object> getPathParamKeyValues(Invocation invocation)", "full_signature": "private Multimap<String, Object> getPathParamKeyValues(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.getPathParamKeyValues(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getParamValue", "parameters": "(Invocation invocation, @Nullable ParamParser extractor, int argIndex,\n         String paramKey)", "modifiers": "private", "return": "Optional<?>", "signature": "Optional<?> getParamValue(Invocation invocation, @Nullable ParamParser extractor, int argIndex,\n         String paramKey)", "full_signature": "private Optional<?> getParamValue(Invocation invocation, @Nullable ParamParser extractor, int argIndex,\n         String paramKey)", "class_method_signature": "RestAnnotationProcessor.getParamValue(Invocation invocation, @Nullable ParamParser extractor, int argIndex,\n         String paramKey)", "testcase": false, "constructor": false}, {"identifier": "checkPresentOrNullable", "parameters": "(Invocation invocation, String paramKey, int argIndex, Object arg)", "modifiers": "private", "return": "boolean", "signature": "boolean checkPresentOrNullable(Invocation invocation, String paramKey, int argIndex, Object arg)", "full_signature": "private boolean checkPresentOrNullable(Invocation invocation, String paramKey, int argIndex, Object arg)", "class_method_signature": "RestAnnotationProcessor.checkPresentOrNullable(Invocation invocation, String paramKey, int argIndex, Object arg)", "testcase": false, "constructor": false}, {"identifier": "getFormParamKeyValues", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "Multimap<String, Object>", "signature": "Multimap<String, Object> getFormParamKeyValues(Invocation invocation)", "full_signature": "private Multimap<String, Object> getFormParamKeyValues(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.getFormParamKeyValues(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getQueryParamKeyValues", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "Multimap<String, Object>", "signature": "Multimap<String, Object> getQueryParamKeyValues(Invocation invocation)", "full_signature": "private Multimap<String, Object> getQueryParamKeyValues(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.getQueryParamKeyValues(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "buildPayloadParams", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> buildPayloadParams(Invocation invocation)", "full_signature": "private Map<String, Object> buildPayloadParams(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.buildPayloadParams(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RestAnnotationProcessor.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java"}, "focal_method": {"identifier": "apply", "parameters": "(Invocation invocation)", "modifiers": "@Override public", "return": "GeneratedHttpRequest", "body": "@Override\n   public GeneratedHttpRequest apply(Invocation invocation) {\n      checkNotNull(invocation, \"invocation\");\n      inputParamValidator.validateMethodParametersOrThrow(invocation);\n\n      Optional<URI> endpoint = Optional.absent();\n      HttpRequest r = findOrNull(invocation.getArgs(), HttpRequest.class);\n      if (r != null) {\n         endpoint = Optional.fromNullable(r.getEndpoint());\n         if (endpoint.isPresent())\n            logger.trace(\"using endpoint %s from invocation.getArgs() for %s\", endpoint, invocation);\n      } else if (caller != null) {\n         endpoint = getEndpointFor(caller);\n         if (endpoint.isPresent())\n            logger.trace(\"using endpoint %s from caller %s for %s\", endpoint, caller, invocation);\n         else\n            endpoint = findEndpoint(invocation);\n      } else {\n         endpoint = findEndpoint(invocation);\n      }\n\n      if (!endpoint.isPresent())\n         throw new NoSuchElementException(format(\"no endpoint found for %s\", invocation));\n      GeneratedHttpRequest.Builder requestBuilder = GeneratedHttpRequest.builder().invocation(invocation)\n            .caller(caller);\n      String requestMethod = null;\n      if (r != null) {\n         requestMethod = r.getMethod();\n         requestBuilder.fromHttpRequest(r);\n      } else {\n         requestMethod = tryFindHttpMethod(invocation.getInvokable()).get();\n         requestBuilder.method(requestMethod);\n      }\n\n      requestBuilder.filters(getFiltersIfAnnotated(invocation));\n\n      Multimap<String, Object> tokenValues = LinkedHashMultimap.create();\n\n      tokenValues.put(Constants.PROPERTY_API_VERSION, apiVersion);\n      tokenValues.put(Constants.PROPERTY_BUILD_VERSION, buildVersion);\n      // URI template in rfc6570 form\n      UriBuilder uriBuilder = uriBuilder(endpoint.get().toString());\n\n      overridePathEncoding(uriBuilder, invocation);\n\n      if (caller != null)\n         tokenValues.putAll(addPathAndGetTokens(caller, uriBuilder));\n      tokenValues.putAll(addPathAndGetTokens(invocation, uriBuilder));\n      Multimap<String, Object> formParams;\n      if (caller != null) {\n         formParams = addFormParams(tokenValues, caller);\n         formParams.putAll(addFormParams(tokenValues, invocation));\n      } else {\n         formParams = addFormParams(tokenValues, invocation);\n      }      \n      Multimap<String, Object> queryParams = addQueryParams(tokenValues, invocation);\n      Multimap<String, String> headers = buildHeaders(tokenValues, invocation);\n\n      if (r != null)\n         headers.putAll(r.getHeaders());\n\n      if (shouldAddHostHeader(invocation)) {\n         StringBuilder hostHeader = new StringBuilder(endpoint.get().getHost());\n         if (endpoint.get().getPort() != -1)\n            hostHeader.append(\":\").append(endpoint.get().getPort());\n         headers.put(HOST, hostHeader.toString());\n      }\n\n      Payload payload = null;\n      for (HttpRequestOptions options : findOptionsIn(invocation)) {\n         injector.injectMembers(options);// TODO test case\n         for (Entry<String, String> header : options.buildRequestHeaders().entries()) {\n            headers.put(header.getKey(), replaceTokens(header.getValue(), tokenValues));\n         }\n         for (Entry<String, String> query : options.buildQueryParameters().entries()) {\n            queryParams.put(query.getKey(), replaceTokens(query.getValue(), tokenValues));\n         }\n         for (Entry<String, String> form : options.buildFormParameters().entries()) {\n            formParams.put(form.getKey(), replaceTokens(form.getValue(), tokenValues));\n         }\n\n         String pathSuffix = options.buildPathSuffix();\n         if (pathSuffix != null) {\n            uriBuilder.appendPath(pathSuffix);\n         }\n         String stringPayload = options.buildStringPayload();\n         if (stringPayload != null)\n            payload = Payloads.newStringPayload(stringPayload);\n      }\n\n      if (queryParams.size() > 0) {\n         uriBuilder.query(queryParams);\n      }\n\n      requestBuilder.headers(filterOutContentHeaders(headers));\n\n      requestBuilder.endpoint(uriBuilder.build(convertUnsafe(tokenValues)));\n\n      if (payload == null) {\n         PayloadEnclosing payloadEnclosing = findOrNull(invocation.getArgs(), PayloadEnclosing.class);\n         payload = (payloadEnclosing != null) ? payloadEnclosing.getPayload() : findOrNull(invocation.getArgs(),\n               Payload.class);\n      }\n\n      List<? extends Part> parts = getParts(invocation, ImmutableMultimap.<String, Object> builder()\n            .putAll(tokenValues).putAll(formParams).build());\n\n      if (parts.size() > 0) {\n         if (formParams.size() > 0) {\n            parts = newLinkedList(concat(transform(formParams.entries(), ENTRY_TO_PART), parts));\n         }\n         payload = new MultipartForm(MultipartForm.BOUNDARY, parts);\n      } else if (formParams.size() > 0) {\n         payload = Payloads.newUrlEncodedFormPayload(transformValues(formParams, NullableToStringFunction.INSTANCE));\n      } else if (headers.containsKey(CONTENT_TYPE) && !HttpRequest.NON_PAYLOAD_METHODS.contains(requestMethod)) {\n         if (payload == null)\n            payload = Payloads.newByteArrayPayload(new byte[] {});\n         payload.getContentMetadata().setContentType(get(headers.get(CONTENT_TYPE), 0));\n      }\n      if (payload != null) {\n         requestBuilder.payload(payload);\n      }\n      GeneratedHttpRequest request = requestBuilder.build();\n\n      org.jclouds.rest.MapBinder mapBinder = getMapPayloadBinderOrNull(invocation);\n      if (mapBinder != null) {\n         Map<String, Object> mapParams;\n         if (caller != null) {\n            mapParams = buildPayloadParams(caller);\n            mapParams.putAll(buildPayloadParams(invocation));\n         } else {\n            mapParams = buildPayloadParams(invocation);\n         }\n         if (invocation.getInvokable().isAnnotationPresent(PayloadParams.class)) {\n            PayloadParams params = invocation.getInvokable().getAnnotation(PayloadParams.class);\n            addMapPayload(mapParams, params, headers);\n         }\n         request = mapBinder.bindToRequest(request, mapParams);\n      } else {\n         request = decorateRequest(request);\n      }\n\n      if (request.getPayload() != null) {\n         contentMetadataCodec.fromHeaders(request.getPayload().getContentMetadata(), headers);\n      }\n      utils.checkRequestHasRequiredProperties(request);\n      return request;\n   }", "signature": "GeneratedHttpRequest apply(Invocation invocation)", "full_signature": "@Override public GeneratedHttpRequest apply(Invocation invocation)", "class_method_signature": "RestAnnotationProcessor.apply(Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "validateMethodParametersOrThrow", "absent", "findOrNull", "getArgs", "fromNullable", "getEndpoint", "isPresent", "trace", "getEndpointFor", "isPresent", "trace", "findEndpoint", "findEndpoint", "isPresent", "format", "caller", "invocation", "builder", "getMethod", "fromHttpRequest", "get", "tryFindHttpMethod", "getInvokable", "method", "filters", "getFiltersIfAnnotated", "create", "put", "put", "uriBuilder", "toString", "get", "overridePathEncoding", "putAll", "addPathAndGetTokens", "putAll", "addPathAndGetTokens", "addFormParams", "putAll", "addFormParams", "addFormParams", "addQueryParams", "buildHeaders", "putAll", "getHeaders", "shouldAddHostHeader", "getHost", "get", "getPort", "get", "append", "append", "getPort", "get", "put", "toString", "findOptionsIn", "injectMembers", "entries", "buildRequestHeaders", "put", "getKey", "replaceTokens", "getValue", "entries", "buildQueryParameters", "put", "getKey", "replaceTokens", "getValue", "entries", "buildFormParameters", "put", "getKey", "replaceTokens", "getValue", "buildPathSuffix", "appendPath", "buildStringPayload", "newStringPayload", "size", "query", "headers", "filterOutContentHeaders", "endpoint", "build", "convertUnsafe", "findOrNull", "getArgs", "getPayload", "findOrNull", "getArgs", "getParts", "build", "putAll", "putAll", "builder", "size", "size", "newLinkedList", "concat", "transform", "entries", "size", "newUrlEncodedFormPayload", "transformValues", "containsKey", "contains", "newByteArrayPayload", "setContentType", "getContentMetadata", "get", "get", "payload", "build", "getMapPayloadBinderOrNull", "buildPayloadParams", "putAll", "buildPayloadParams", "buildPayloadParams", "isAnnotationPresent", "getInvokable", "getAnnotation", "getInvokable", "addMapPayload", "bindToRequest", "decorateRequest", "getPayload", "fromHeaders", "getContentMetadata", "getPayload", "checkRequestHasRequiredProperties"]}, "repository": {"repo_id": 489859, "url": "https://github.com/jclouds/legacy-jclouds", "language": "Java", "is_fork": false, "fork_count": 231, "stargazer_count": 477, "size": 74892, "license": "licensed"}}