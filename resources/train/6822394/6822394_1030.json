{"test_class": {"identifier": "HttpHeadersImplTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private IMocksControl control;", "modifier": "private", "type": "IMocksControl", "declarator": "control", "var_name": "control"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/HttpHeadersImplTest.java"}, "test_case": {"identifier": "testGetDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDate() throws Exception {\n        \n        Message m = new MessageImpl();\n        m.put(Message.PROTOCOL_HEADERS, createHeaders());\n        HttpHeaders h = new HttpHeadersImpl(m);\n        \n        List<String> dateValues = h.getRequestHeader(\"Date\");\n        assertEquals(1, dateValues.size());\n        assertEquals(\"Tue, 21 Oct 2008 17:00:00 GMT\", dateValues.get(0));\n        \n        Date d = h.getDate();\n        \n        String theDateValue = HttpUtils.getHttpDateFormat().format(d);\n        assertEquals(theDateValue, \"Tue, 21 Oct 2008 17:00:00 GMT\");\n    }", "signature": "void testGetDate()", "full_signature": "@Test public void testGetDate()", "class_method_signature": "HttpHeadersImplTest.testGetDate()", "testcase": true, "constructor": false, "invocations": ["put", "createHeaders", "getRequestHeader", "assertEquals", "size", "assertEquals", "get", "getDate", "format", "getHttpDateFormat", "assertEquals"]}, "focal_class": {"identifier": "HttpHeadersImpl", "superclass": "", "interfaces": "implements HttpHeaders", "fields": [{"original_string": "private static final String COOKIE_SEPARATOR_PROPERTY =\n        \"org.apache.cxf.http.cookie.separator\";", "modifier": "private static final", "type": "String", "declarator": "COOKIE_SEPARATOR_PROPERTY =\n        \"org.apache.cxf.http.cookie.separator\"", "var_name": "COOKIE_SEPARATOR_PROPERTY"}, {"original_string": "private static final String COOKIE_SEPARATOR_CRLF = \"crlf\";", "modifier": "private static final", "type": "String", "declarator": "COOKIE_SEPARATOR_CRLF = \"crlf\"", "var_name": "COOKIE_SEPARATOR_CRLF"}, {"original_string": "private static final String DEFAULT_SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SEPARATOR = \",\"", "var_name": "DEFAULT_SEPARATOR"}, {"original_string": "private static final String DEFAULT_COOKIE_SEPARATOR = \";\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_COOKIE_SEPARATOR = \";\"", "var_name": "DEFAULT_COOKIE_SEPARATOR"}, {"original_string": "private static final String COMPLEX_HEADER_EXPRESSION = \n        \"(([\\\\w]+=\\\"[^\\\"]*\\\")|([\\\\w]+=[\\\\w]+)|([\\\\w]+))(;(([\\\\w]+=\\\"[^\\\"]*\\\")|([\\\\w]+=[\\\\w]+)|([\\\\w]+)))?\";", "modifier": "private static final", "type": "String", "declarator": "COMPLEX_HEADER_EXPRESSION = \n        \"(([\\\\w]+=\\\"[^\\\"]*\\\")|([\\\\w]+=[\\\\w]+)|([\\\\w]+))(;(([\\\\w]+=\\\"[^\\\"]*\\\")|([\\\\w]+=[\\\\w]+)|([\\\\w]+)))?\"", "var_name": "COMPLEX_HEADER_EXPRESSION"}, {"original_string": "private static final Pattern COMPLEX_HEADER_PATTERN =\n        Pattern.compile(COMPLEX_HEADER_EXPRESSION);", "modifier": "private static final", "type": "Pattern", "declarator": "COMPLEX_HEADER_PATTERN =\n        Pattern.compile(COMPLEX_HEADER_EXPRESSION)", "var_name": "COMPLEX_HEADER_PATTERN"}, {"original_string": "private static final String QUOTE = \"\\\"\";", "modifier": "private static final", "type": "String", "declarator": "QUOTE = \"\\\"\"", "var_name": "QUOTE"}, {"original_string": "private static final Set<String> HEADERS_WITH_POSSIBLE_QUOTES;", "modifier": "private static final", "type": "Set<String>", "declarator": "HEADERS_WITH_POSSIBLE_QUOTES", "var_name": "HEADERS_WITH_POSSIBLE_QUOTES"}, {"original_string": "private Message message;", "modifier": "private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "private MultivaluedMap<String, String> headers;", "modifier": "private", "type": "MultivaluedMap<String, String>", "declarator": "headers", "var_name": "headers"}], "methods": [{"identifier": "HttpHeadersImpl", "parameters": "(Message message)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " HttpHeadersImpl(Message message)", "full_signature": "@SuppressWarnings(\"unchecked\") public  HttpHeadersImpl(Message message)", "class_method_signature": "HttpHeadersImpl.HttpHeadersImpl(Message message)", "testcase": false, "constructor": true}, {"identifier": "getAcceptableMediaTypes", "parameters": "()", "modifiers": "public", "return": "List<MediaType>", "signature": "List<MediaType> getAcceptableMediaTypes()", "full_signature": "public List<MediaType> getAcceptableMediaTypes()", "class_method_signature": "HttpHeadersImpl.getAcceptableMediaTypes()", "testcase": false, "constructor": false}, {"identifier": "getCookies", "parameters": "()", "modifiers": "public", "return": "Map<String, Cookie>", "signature": "Map<String, Cookie> getCookies()", "full_signature": "public Map<String, Cookie> getCookies()", "class_method_signature": "HttpHeadersImpl.getCookies()", "testcase": false, "constructor": false}, {"identifier": "getCookieSeparator", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getCookieSeparator()", "full_signature": "private String getCookieSeparator()", "class_method_signature": "HttpHeadersImpl.getCookieSeparator()", "testcase": false, "constructor": false}, {"identifier": "getLanguage", "parameters": "()", "modifiers": "public", "return": "Locale", "signature": "Locale getLanguage()", "full_signature": "public Locale getLanguage()", "class_method_signature": "HttpHeadersImpl.getLanguage()", "testcase": false, "constructor": false}, {"identifier": "getMediaType", "parameters": "()", "modifiers": "public", "return": "MediaType", "signature": "MediaType getMediaType()", "full_signature": "public MediaType getMediaType()", "class_method_signature": "HttpHeadersImpl.getMediaType()", "testcase": false, "constructor": false}, {"identifier": "getRequestHeaders", "parameters": "()", "modifiers": "public", "return": "MultivaluedMap<String, String>", "signature": "MultivaluedMap<String, String> getRequestHeaders()", "full_signature": "public MultivaluedMap<String, String> getRequestHeaders()", "class_method_signature": "HttpHeadersImpl.getRequestHeaders()", "testcase": false, "constructor": false}, {"identifier": "getAcceptableLanguages", "parameters": "()", "modifiers": "public", "return": "List<Locale>", "signature": "List<Locale> getAcceptableLanguages()", "full_signature": "public List<Locale> getAcceptableLanguages()", "class_method_signature": "HttpHeadersImpl.getAcceptableLanguages()", "testcase": false, "constructor": false}, {"identifier": "getRequestHeader", "parameters": "(String name)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRequestHeader(String name)", "full_signature": "public List<String> getRequestHeader(String name)", "class_method_signature": "HttpHeadersImpl.getRequestHeader(String name)", "testcase": false, "constructor": false}, {"identifier": "getListValues", "parameters": "(String headerName)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getListValues(String headerName)", "full_signature": "private List<String> getListValues(String headerName)", "class_method_signature": "HttpHeadersImpl.getListValues(String headerName)", "testcase": false, "constructor": false}, {"identifier": "getHeaderValues", "parameters": "(String headerName, String originalValue)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getHeaderValues(String headerName, String originalValue)", "full_signature": "private List<String> getHeaderValues(String headerName, String originalValue)", "class_method_signature": "HttpHeadersImpl.getHeaderValues(String headerName, String originalValue)", "testcase": false, "constructor": false}, {"identifier": "getHeaderValues", "parameters": "(String headerName, String originalValue, String sep)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getHeaderValues(String headerName, String originalValue, String sep)", "full_signature": "private List<String> getHeaderValues(String headerName, String originalValue, String sep)", "class_method_signature": "HttpHeadersImpl.getHeaderValues(String headerName, String originalValue, String sep)", "testcase": false, "constructor": false}, {"identifier": "sortMediaTypesUsingQualityFactor", "parameters": "(List<MediaType> types)", "modifiers": "private", "return": "void", "signature": "void sortMediaTypesUsingQualityFactor(List<MediaType> types)", "full_signature": "private void sortMediaTypesUsingQualityFactor(List<MediaType> types)", "class_method_signature": "HttpHeadersImpl.sortMediaTypesUsingQualityFactor(List<MediaType> types)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getDate()", "full_signature": "public Date getDate()", "class_method_signature": "HttpHeadersImpl.getDate()", "testcase": false, "constructor": false}, {"identifier": "getHeaderString", "parameters": "(String headerName)", "modifiers": "public", "return": "String", "signature": "String getHeaderString(String headerName)", "full_signature": "public String getHeaderString(String headerName)", "class_method_signature": "HttpHeadersImpl.getHeaderString(String headerName)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLength()", "full_signature": "public int getLength()", "class_method_signature": "HttpHeadersImpl.getLength()", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java"}, "focal_method": {"identifier": "getDate", "parameters": "()", "modifiers": "public", "return": "Date", "body": "public Date getDate() {\n        List<String> values = headers.get(HttpHeaders.DATE);\n        if (values == null || StringUtils.isEmpty(values.get(0))) {\n            return null;\n        }\n        return HttpUtils.getHttpDate(values.get(0));\n    }", "signature": "Date getDate()", "full_signature": "public Date getDate()", "class_method_signature": "HttpHeadersImpl.getDate()", "testcase": false, "constructor": false, "invocations": ["get", "isEmpty", "get", "getHttpDate", "get"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}