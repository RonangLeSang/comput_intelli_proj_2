{"test_class": {"identifier": "ResponseTimeMessageInInterceptorTest", "superclass": "extends AbstractMessageResponseTestBase", "interfaces": "", "fields": [{"original_string": "private ResponseTimeMessageInInterceptor rtmii = new ResponseTimeMessageInInterceptor();", "modifier": "private", "type": "ResponseTimeMessageInInterceptor", "declarator": "rtmii = new ResponseTimeMessageInInterceptor()", "var_name": "rtmii"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/management/src/test/java/org/apache/cxf/management/interceptor/ResponseTimeMessageInInterceptorTest.java"}, "test_case": {"identifier": "testServerOneWayMessageIn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testServerOneWayMessageIn() {\n        // need to increase the counter and is not a client\n        //setupCounterRepository(false, false);\n        //setupExchangeForMessage();\n        EasyMock.expect(message.getExchange()).andReturn(exchange);\n        EasyMock.expect(message.get(Message.REQUESTOR_ROLE)).andReturn(Boolean.FALSE).anyTimes();\n        //EasyMock.expect(exchange.getOutMessage()).andReturn(message);\n        MessageHandlingTimeRecorder mhtr = EasyMock.createMock(MessageHandlingTimeRecorder.class);\n        mhtr.beginHandling();\n        EasyMock.expectLastCall();\n         \n        EasyMock.replay(mhtr);\n        //EasyMock.expect(exchange.isOneWay()).andReturn(true);\n        EasyMock.expect(exchange.get(MessageHandlingTimeRecorder.class)).andReturn(mhtr);        \n        EasyMock.replay(exchange);\n        EasyMock.replay(message);\n        \n        rtmii.handleMessage(message);\n        EasyMock.verify(message);\n        //EasyMock.verify(bus);\n        EasyMock.verify(exchange);\n        EasyMock.verify(mhtr);\n        //EasyMock.verify(cRepository);\n    }", "signature": "void testServerOneWayMessageIn()", "full_signature": "@Test public void testServerOneWayMessageIn()", "class_method_signature": "ResponseTimeMessageInInterceptorTest.testServerOneWayMessageIn()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "getExchange", "anyTimes", "andReturn", "expect", "get", "createMock", "beginHandling", "expectLastCall", "replay", "andReturn", "expect", "get", "replay", "replay", "handleMessage", "verify", "verify", "verify"]}, "focal_class": {"identifier": "ResponseTimeMessageInInterceptor", "superclass": "extends AbstractMessageResponseTimeInterceptor", "interfaces": "", "fields": [], "methods": [{"identifier": "ResponseTimeMessageInInterceptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResponseTimeMessageInInterceptor()", "full_signature": "public  ResponseTimeMessageInInterceptor()", "class_method_signature": "ResponseTimeMessageInInterceptor.ResponseTimeMessageInInterceptor()", "testcase": false, "constructor": true}, {"identifier": "handleMessage", "parameters": "(Message message)", "modifiers": "public", "return": "void", "signature": "void handleMessage(Message message)", "full_signature": "public void handleMessage(Message message)", "class_method_signature": "ResponseTimeMessageInInterceptor.handleMessage(Message message)", "testcase": false, "constructor": false}, {"identifier": "handleFault", "parameters": "(Message message)", "modifiers": "@Override public", "return": "void", "signature": "void handleFault(Message message)", "full_signature": "@Override public void handleFault(Message message)", "class_method_signature": "ResponseTimeMessageInInterceptor.handleFault(Message message)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/management/src/main/java/org/apache/cxf/management/interceptor/ResponseTimeMessageInInterceptor.java"}, "focal_method": {"identifier": "handleMessage", "parameters": "(Message message)", "modifiers": "public", "return": "void", "body": "public void handleMessage(Message message) throws Fault {\n        \n        Exchange ex = message.getExchange();        \n        if (isClient(message)) {\n            if (!ex.isOneWay()) {\n                endHandlingMessage(ex);\n            }\n        } else {            \n            beginHandlingMessage(ex);            \n        }\n    }", "signature": "void handleMessage(Message message)", "full_signature": "public void handleMessage(Message message)", "class_method_signature": "ResponseTimeMessageInInterceptor.handleMessage(Message message)", "testcase": false, "constructor": false, "invocations": ["getExchange", "isClient", "isOneWay", "endHandlingMessage", "beginHandlingMessage"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}