{"test_class": {"identifier": "SoapFaultFactoryTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private IMocksControl control;", "modifier": "private", "type": "IMocksControl", "declarator": "control", "var_name": "control"}, {"original_string": "private SequenceFault sf;", "modifier": "private", "type": "SequenceFault", "declarator": "sf", "var_name": "sf"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/soap/SoapFaultFactoryTest.java"}, "test_case": {"identifier": "createSoap12Fault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n    public void createSoap12Fault() {\n        SoapBinding sb = control.createMock(SoapBinding.class);\n        EasyMock.expect(sb.getSoapVersion()).andReturn(Soap12.getInstance());        \n        Identifier id = new Identifier();\n        id.setValue(\"sid\");\n        setupSequenceFault(true, RM10Constants.UNKNOWN_SEQUENCE_FAULT_QNAME, id);        \n        control.replay();\n        SoapFaultFactory factory = new SoapFaultFactory(sb);\n        SoapFault fault = (SoapFault)factory.createFault(sf, createInboundMessage());\n        assertEquals(\"reason\", fault.getReason());\n        assertEquals(Soap12.getInstance().getSender(), fault.getFaultCode());\n        assertEquals(RM10Constants.UNKNOWN_SEQUENCE_FAULT_QNAME, fault.getSubCode());\n        Element elem = fault.getDetail();\n        assertEquals(RM10Constants.NAMESPACE_URI, elem.getNamespaceURI());\n        assertEquals(\"Identifier\", elem.getLocalName());\n        assertNull(fault.getCause());\n        control.verify();        \n    }", "signature": "void createSoap12Fault()", "full_signature": "@Test public void createSoap12Fault()", "class_method_signature": "SoapFaultFactoryTest.createSoap12Fault()", "testcase": true, "constructor": false, "invocations": ["createMock", "andReturn", "expect", "getSoapVersion", "getInstance", "setValue", "setupSequenceFault", "replay", "createFault", "createInboundMessage", "assertEquals", "getReason", "assertEquals", "getSender", "getInstance", "getFaultCode", "assertEquals", "getSubCode", "getDetail", "assertEquals", "getNamespaceURI", "assertEquals", "getLocalName", "assertNull", "getCause", "verify"]}, "focal_class": {"identifier": "SoapFaultFactory", "superclass": "", "interfaces": "implements BindingFaultFactory", "fields": [{"original_string": "private static final Logger LOG = LogUtils.getL7dLogger(SoapFaultFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtils.getL7dLogger(SoapFaultFactory.class)", "var_name": "LOG"}, {"original_string": "private SoapVersion version;", "modifier": "private", "type": "SoapVersion", "declarator": "version", "var_name": "version"}], "methods": [{"identifier": "SoapFaultFactory", "parameters": "(Binding binding)", "modifiers": "public", "return": "", "signature": " SoapFaultFactory(Binding binding)", "full_signature": "public  SoapFaultFactory(Binding binding)", "class_method_signature": "SoapFaultFactory.SoapFaultFactory(Binding binding)", "testcase": false, "constructor": true}, {"identifier": "createFault", "parameters": "(SequenceFault sf, Message msg)", "modifiers": "public", "return": "Fault", "signature": "Fault createFault(SequenceFault sf, Message msg)", "full_signature": "public Fault createFault(SequenceFault sf, Message msg)", "class_method_signature": "SoapFaultFactory.createFault(SequenceFault sf, Message msg)", "testcase": false, "constructor": false}, {"identifier": "createSoap11Fault", "parameters": "(SequenceFault sf)", "modifiers": "", "return": "Fault", "signature": "Fault createSoap11Fault(SequenceFault sf)", "full_signature": " Fault createSoap11Fault(SequenceFault sf)", "class_method_signature": "SoapFaultFactory.createSoap11Fault(SequenceFault sf)", "testcase": false, "constructor": false}, {"identifier": "createSoap12Fault", "parameters": "(SequenceFault sf, Message msg)", "modifiers": "", "return": "Fault", "signature": "Fault createSoap12Fault(SequenceFault sf, Message msg)", "full_signature": " Fault createSoap12Fault(SequenceFault sf, Message msg)", "class_method_signature": "SoapFaultFactory.createSoap12Fault(SequenceFault sf, Message msg)", "testcase": false, "constructor": false}, {"identifier": "setDetail", "parameters": "(SoapFault fault, Object detail, EncoderDecoder codec)", "modifiers": "", "return": "void", "signature": "void setDetail(SoapFault fault, Object detail, EncoderDecoder codec)", "full_signature": " void setDetail(SoapFault fault, Object detail, EncoderDecoder codec)", "class_method_signature": "SoapFaultFactory.setDetail(SoapFault fault, Object detail, EncoderDecoder codec)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Fault f)", "modifiers": "public", "return": "String", "signature": "String toString(Fault f)", "full_signature": "public String toString(Fault f)", "class_method_signature": "SoapFaultFactory.toString(Fault f)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/SoapFaultFactory.java"}, "focal_method": {"identifier": "createSoap12Fault", "parameters": "(SequenceFault sf, Message msg)", "modifiers": "", "return": "Fault", "body": "Fault createSoap12Fault(SequenceFault sf, Message msg) {\n        SoapFault fault = (SoapFault)createSoap11Fault(sf);\n        Object detail = sf.getDetail();\n        if (null == detail) {\n            return fault;\n        }\n\n        try {\n            RMProperties rmps = RMContextUtils.retrieveRMProperties(msg, false);\n            AddressingProperties maps = RMContextUtils.retrieveMAPs(msg, false, false);\n            EncoderDecoder codec = ProtocolVariation.findVariant(rmps.getNamespaceURI(),\n                maps.getNamespaceURI()).getCodec();\n            setDetail(fault, detail, codec);\n        } catch (Exception ex) {\n            LogUtils.log(LOG, Level.SEVERE, \"MARSHAL_FAULT_DETAIL_EXC\", ex); \n            ex.printStackTrace();\n        }\n        return fault;\n    }", "signature": "Fault createSoap12Fault(SequenceFault sf, Message msg)", "full_signature": " Fault createSoap12Fault(SequenceFault sf, Message msg)", "class_method_signature": "SoapFaultFactory.createSoap12Fault(SequenceFault sf, Message msg)", "testcase": false, "constructor": false, "invocations": ["createSoap11Fault", "getDetail", "retrieveRMProperties", "retrieveMAPs", "getCodec", "findVariant", "getNamespaceURI", "getNamespaceURI", "setDetail", "log", "printStackTrace"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}