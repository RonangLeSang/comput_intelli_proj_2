{"test_class": {"identifier": "ManagedConnectionImplTest", "superclass": "extends ManagedConnectionTestBase", "interfaces": "", "fields": [{"original_string": "protected URL wsdl;", "modifier": "protected", "type": "URL", "declarator": "wsdl", "var_name": "wsdl"}, {"original_string": "protected QName serviceName;", "modifier": "protected", "type": "QName", "declarator": "serviceName", "var_name": "serviceName"}, {"original_string": "protected QName portName;", "modifier": "protected", "type": "QName", "declarator": "portName", "var_name": "portName"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/integration/jca/src/test/java/org/apache/cxf/jca/cxf/ManagedConnectionImplTest.java"}, "test_case": {"identifier": "testGetConnectionServiceGetPortThrows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetConnectionServiceGetPortThrows() throws Exception {\n        cri = new CXFConnectionRequestInfo(Foo.class, null, null, null);\n        cri.setAddress(\"http://localhost:9000/soap\");\n        Object o = mci.getConnection(subj, cri);\n        assertTrue(o instanceof Foo);\n    }", "signature": "void testGetConnectionServiceGetPortThrows()", "full_signature": "@Test public void testGetConnectionServiceGetPortThrows()", "class_method_signature": "ManagedConnectionImplTest.testGetConnectionServiceGetPortThrows()", "testcase": true, "constructor": false, "invocations": ["setAddress", "getConnection", "assertTrue"]}, "focal_class": {"identifier": "ManagedConnectionImpl", "superclass": "extends AbstractManagedConnectionImpl", "interfaces": "implements CXFManagedConnection, Connection", "fields": [{"original_string": "private static final ResourceBundle BUNDLE = BundleUtils.getBundle(ConnectionFactoryImpl.class);", "modifier": "private static final", "type": "ResourceBundle", "declarator": "BUNDLE = BundleUtils.getBundle(ConnectionFactoryImpl.class)", "var_name": "BUNDLE"}, {"original_string": "private InvocationHandlerFactory handlerFactory;", "modifier": "private", "type": "InvocationHandlerFactory", "declarator": "handlerFactory", "var_name": "handlerFactory"}, {"original_string": "private Object cxfService;", "modifier": "private", "type": "Object", "declarator": "cxfService", "var_name": "cxfService"}, {"original_string": "private boolean connectionHandleActive;", "modifier": "private", "type": "boolean", "declarator": "connectionHandleActive", "var_name": "connectionHandleActive"}], "methods": [{"identifier": "ManagedConnectionImpl", "parameters": "(ManagedConnectionFactoryImpl managedFactory, ConnectionRequestInfo crInfo,\n                                 Subject subject)", "modifiers": "public", "return": "", "signature": " ManagedConnectionImpl(ManagedConnectionFactoryImpl managedFactory, ConnectionRequestInfo crInfo,\n                                 Subject subject)", "full_signature": "public  ManagedConnectionImpl(ManagedConnectionFactoryImpl managedFactory, ConnectionRequestInfo crInfo,\n                                 Subject subject)", "class_method_signature": "ManagedConnectionImpl.ManagedConnectionImpl(ManagedConnectionFactoryImpl managedFactory, ConnectionRequestInfo crInfo,\n                                 Subject subject)", "testcase": false, "constructor": true}, {"identifier": "associateConnection", "parameters": "(Object connection)", "modifiers": "public", "return": "void", "signature": "void associateConnection(Object connection)", "full_signature": "public void associateConnection(Object connection)", "class_method_signature": "ManagedConnectionImpl.associateConnection(Object connection)", "testcase": false, "constructor": false}, {"identifier": "getManagedConnectionFactory", "parameters": "()", "modifiers": "public", "return": "CXFManagedConnectionFactory", "signature": "CXFManagedConnectionFactory getManagedConnectionFactory()", "full_signature": "public CXFManagedConnectionFactory getManagedConnectionFactory()", "class_method_signature": "ManagedConnectionImpl.getManagedConnectionFactory()", "testcase": false, "constructor": false}, {"identifier": "getCXFService", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getCXFService()", "full_signature": "public Object getCXFService()", "class_method_signature": "ManagedConnectionImpl.getCXFService()", "testcase": false, "constructor": false}, {"identifier": "initializeCXFConnection", "parameters": "(ConnectionRequestInfo crInfo, Subject subject)", "modifiers": "private", "return": "void", "signature": "void initializeCXFConnection(ConnectionRequestInfo crInfo, Subject subject)", "full_signature": "private void initializeCXFConnection(ConnectionRequestInfo crInfo, Subject subject)", "class_method_signature": "ManagedConnectionImpl.initializeCXFConnection(ConnectionRequestInfo crInfo, Subject subject)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(Subject subject, ConnectionRequestInfo crInfo)", "modifiers": "public", "return": "Object", "signature": "Object getConnection(Subject subject, ConnectionRequestInfo crInfo)", "full_signature": "public Object getConnection(Subject subject, ConnectionRequestInfo crInfo)", "class_method_signature": "ManagedConnectionImpl.getConnection(Subject subject, ConnectionRequestInfo crInfo)", "testcase": false, "constructor": false}, {"identifier": "getCXFConnection", "parameters": "(Subject subject, ConnectionRequestInfo crInfo)", "modifiers": "public synchronized", "return": "Object", "signature": "Object getCXFConnection(Subject subject, ConnectionRequestInfo crInfo)", "full_signature": "public synchronized Object getCXFConnection(Subject subject, ConnectionRequestInfo crInfo)", "class_method_signature": "ManagedConnectionImpl.getCXFConnection(Subject subject, ConnectionRequestInfo crInfo)", "testcase": false, "constructor": false}, {"identifier": "getMetaData", "parameters": "()", "modifiers": "public", "return": "ManagedConnectionMetaData", "signature": "ManagedConnectionMetaData getMetaData()", "full_signature": "public ManagedConnectionMetaData getMetaData()", "class_method_signature": "ManagedConnectionImpl.getMetaData()", "testcase": false, "constructor": false}, {"identifier": "isJaxWsServiceInterface", "parameters": "(Class<?> cls)", "modifiers": "private", "return": "boolean", "signature": "boolean isJaxWsServiceInterface(Class<?> cls)", "full_signature": "private boolean isJaxWsServiceInterface(Class<?> cls)", "class_method_signature": "ManagedConnectionImpl.isJaxWsServiceInterface(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "isBound", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBound()", "full_signature": "public boolean isBound()", "class_method_signature": "ManagedConnectionImpl.isBound()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ManagedConnectionImpl.close()", "testcase": false, "constructor": false}, {"identifier": "disassociateConnectionHandle", "parameters": "(Object handle)", "modifiers": "", "return": "void", "signature": "void disassociateConnectionHandle(Object handle)", "full_signature": " void disassociateConnectionHandle(Object handle)", "class_method_signature": "ManagedConnectionImpl.disassociateConnectionHandle(Object handle)", "testcase": false, "constructor": false}, {"identifier": "createConnectionProxy", "parameters": "(Object obj, CXFConnectionRequestInfo cri, Subject subject)", "modifiers": "private", "return": "Object", "signature": "Object createConnectionProxy(Object obj, CXFConnectionRequestInfo cri, Subject subject)", "full_signature": "private Object createConnectionProxy(Object obj, CXFConnectionRequestInfo cri, Subject subject)", "class_method_signature": "ManagedConnectionImpl.createConnectionProxy(Object obj, CXFConnectionRequestInfo cri, Subject subject)", "testcase": false, "constructor": false}, {"identifier": "createInvocationHandler", "parameters": "(Object obj, Subject subject)", "modifiers": "private", "return": "InvocationHandler", "signature": "InvocationHandler createInvocationHandler(Object obj, Subject subject)", "full_signature": "private InvocationHandler createInvocationHandler(Object obj, Subject subject)", "class_method_signature": "ManagedConnectionImpl.createInvocationHandler(Object obj, Subject subject)", "testcase": false, "constructor": false}, {"identifier": "getHandlerFactory", "parameters": "()", "modifiers": "private", "return": "InvocationHandlerFactory", "signature": "InvocationHandlerFactory getHandlerFactory()", "full_signature": "private InvocationHandlerFactory getHandlerFactory()", "class_method_signature": "ManagedConnectionImpl.getHandlerFactory()", "testcase": false, "constructor": false}, {"identifier": "getBus", "parameters": "()", "modifiers": "private", "return": "Bus", "signature": "Bus getBus()", "full_signature": "private Bus getBus()", "class_method_signature": "ManagedConnectionImpl.getBus()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Object closingHandle)", "modifiers": "public", "return": "void", "signature": "void close(Object closingHandle)", "full_signature": "public void close(Object closingHandle)", "class_method_signature": "ManagedConnectionImpl.close(Object closingHandle)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "ManagedConnectionImpl.destroy()", "testcase": false, "constructor": false}, {"identifier": "getCXFTransaction", "parameters": "()", "modifiers": "public", "return": "CXFTransaction", "signature": "CXFTransaction getCXFTransaction()", "full_signature": "public CXFTransaction getCXFTransaction()", "class_method_signature": "ManagedConnectionImpl.getCXFTransaction()", "testcase": false, "constructor": false}, {"identifier": "getXAResource", "parameters": "()", "modifiers": "public", "return": "XAResource", "signature": "XAResource getXAResource()", "full_signature": "public XAResource getXAResource()", "class_method_signature": "ManagedConnectionImpl.getXAResource()", "testcase": false, "constructor": false}, {"identifier": "getLocalTransaction", "parameters": "()", "modifiers": "public", "return": "LocalTransaction", "signature": "LocalTransaction getLocalTransaction()", "full_signature": "public LocalTransaction getLocalTransaction()", "class_method_signature": "ManagedConnectionImpl.getLocalTransaction()", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/integration/jca/src/main/java/org/apache/cxf/jca/cxf/ManagedConnectionImpl.java"}, "focal_method": {"identifier": "getConnection", "parameters": "(Subject subject, ConnectionRequestInfo crInfo)", "modifiers": "public", "return": "Object", "body": "public Object getConnection(Subject subject, ConnectionRequestInfo crInfo) throws ResourceException {\n\n        Object connection = null;\n        \n        if (getCXFService() == null) {\n            initializeCXFConnection(crInfo, subject);\n            connection = getCXFService();            \n        } else {\n            if (!connectionHandleActive && this.crinfo.equals(crInfo)) {\n                connection = getCXFService();\n            } else {\n                connection = getCXFConnection(subject, crInfo);\n            }\n        }\n        connectionHandleActive = true;\n        return connection;\n    }", "signature": "Object getConnection(Subject subject, ConnectionRequestInfo crInfo)", "full_signature": "public Object getConnection(Subject subject, ConnectionRequestInfo crInfo)", "class_method_signature": "ManagedConnectionImpl.getConnection(Subject subject, ConnectionRequestInfo crInfo)", "testcase": false, "constructor": false, "invocations": ["getCXFService", "initializeCXFConnection", "getCXFService", "equals", "getCXFService", "getCXFConnection"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}