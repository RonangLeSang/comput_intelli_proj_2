{"test_class": {"identifier": "StringUtilsTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/api/src/test/java/org/apache/cxf/common/util/StringUtilsTest.java"}, "test_case": {"identifier": "testGetParts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetParts() throws Exception {\n        String str = \"/greetMe/me/CXF\";\n        List<String> parts = StringUtils.getParts(str, \"/\");\n        assertEquals(3, parts.size());\n        assertEquals(\"greetMe\", parts.get(0));\n        assertEquals(\"me\", parts.get(1));\n        assertEquals(\"CXF\", parts.get(2));\n    }", "signature": "void testGetParts()", "full_signature": "@Test public void testGetParts()", "class_method_signature": "StringUtilsTest.testGetParts()", "testcase": true, "constructor": false, "invocations": ["getParts", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "StringUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringUtils()", "full_signature": "private  StringUtils()", "class_method_signature": "StringUtils.StringUtils()", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(String string, String startToken, String endToken)", "modifiers": "public static", "return": "String", "signature": "String extract(String string, String startToken, String endToken)", "full_signature": "public static String extract(String string, String startToken, String endToken)", "class_method_signature": "StringUtils.extract(String string, String startToken, String endToken)", "testcase": false, "constructor": false}, {"identifier": "wrapper", "parameters": "(String string, String startToken, String endToken)", "modifiers": "public static", "return": "String", "signature": "String wrapper(String string, String startToken, String endToken)", "full_signature": "public static String wrapper(String string, String startToken, String endToken)", "class_method_signature": "StringUtils.wrapper(String string, String startToken, String endToken)", "testcase": false, "constructor": false}, {"identifier": "isFileExist", "parameters": "(String file)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileExist(String file)", "full_signature": "public static boolean isFileExist(String file)", "class_method_signature": "StringUtils.isFileExist(String file)", "testcase": false, "constructor": false}, {"identifier": "isFileAbsolute", "parameters": "(String file)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileAbsolute(String file)", "full_signature": "public static boolean isFileAbsolute(String file)", "class_method_signature": "StringUtils.isFileAbsolute(String file)", "testcase": false, "constructor": false}, {"identifier": "getURL", "parameters": "(String spec)", "modifiers": "public static", "return": "URL", "signature": "URL getURL(String spec)", "full_signature": "public static URL getURL(String spec)", "class_method_signature": "StringUtils.getURL(String spec)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String str)", "full_signature": "public static boolean isEmpty(String str)", "class_method_signature": "StringUtils.isEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(List<String> list)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(List<String> list)", "full_signature": "public static boolean isEmpty(List<String> list)", "class_method_signature": "StringUtils.isEmpty(List<String> list)", "testcase": false, "constructor": false}, {"identifier": "isEqualUri", "parameters": "(String uri1, String uri2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqualUri(String uri1, String uri2)", "full_signature": "public static boolean isEqualUri(String uri1, String uri2)", "class_method_signature": "StringUtils.isEqualUri(String uri1, String uri2)", "testcase": false, "constructor": false}, {"identifier": "diff", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "String", "signature": "String diff(String str1, String str2)", "full_signature": "public static String diff(String str1, String str2)", "class_method_signature": "StringUtils.diff(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "getParts", "parameters": "(String str, String sperator)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getParts(String str, String sperator)", "full_signature": "public static List<String> getParts(String str, String sperator)", "class_method_signature": "StringUtils.getParts(String str, String sperator)", "testcase": false, "constructor": false}, {"identifier": "getFirstNotEmpty", "parameters": "(String str, String sperator)", "modifiers": "public static", "return": "String", "signature": "String getFirstNotEmpty(String str, String sperator)", "full_signature": "public static String getFirstNotEmpty(String str, String sperator)", "class_method_signature": "StringUtils.getFirstNotEmpty(String str, String sperator)", "testcase": false, "constructor": false}, {"identifier": "getFirstNotEmpty", "parameters": "(List<String> list)", "modifiers": "public static", "return": "String", "signature": "String getFirstNotEmpty(List<String> list)", "full_signature": "public static String getFirstNotEmpty(List<String> list)", "class_method_signature": "StringUtils.getFirstNotEmpty(List<String> list)", "testcase": false, "constructor": false}, {"identifier": "getFound", "parameters": "(String contents, String regex)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getFound(String contents, String regex)", "full_signature": "public static List<String> getFound(String contents, String regex)", "class_method_signature": "StringUtils.getFound(String contents, String regex)", "testcase": false, "constructor": false}, {"identifier": "getFirstFound", "parameters": "(String contents, String regex)", "modifiers": "public static", "return": "String", "signature": "String getFirstFound(String contents, String regex)", "full_signature": "public static String getFirstFound(String contents, String regex)", "class_method_signature": "StringUtils.getFirstFound(String contents, String regex)", "testcase": false, "constructor": false}, {"identifier": "formatVersionNumber", "parameters": "(String target)", "modifiers": "public static", "return": "String", "signature": "String formatVersionNumber(String target)", "full_signature": "public static String formatVersionNumber(String target)", "class_method_signature": "StringUtils.formatVersionNumber(String target)", "testcase": false, "constructor": false}, {"identifier": "addDefaultPortIfMissing", "parameters": "(String urlString)", "modifiers": "public static", "return": "String", "signature": "String addDefaultPortIfMissing(String urlString)", "full_signature": "public static String addDefaultPortIfMissing(String urlString)", "class_method_signature": "StringUtils.addDefaultPortIfMissing(String urlString)", "testcase": false, "constructor": false}, {"identifier": "addDefaultPortIfMissing", "parameters": "(String urlString, String defaultPort)", "modifiers": "public static", "return": "String", "signature": "String addDefaultPortIfMissing(String urlString, String defaultPort)", "full_signature": "public static String addDefaultPortIfMissing(String urlString, String defaultPort)", "class_method_signature": "StringUtils.addDefaultPortIfMissing(String urlString, String defaultPort)", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String capitalize(String name)", "full_signature": "public static String capitalize(String name)", "class_method_signature": "StringUtils.capitalize(String name)", "testcase": false, "constructor": false}, {"identifier": "uncapitalize", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String uncapitalize(String str)", "full_signature": "public static String uncapitalize(String str)", "class_method_signature": "StringUtils.uncapitalize(String str)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/api/src/main/java/org/apache/cxf/common/util/StringUtils.java"}, "focal_method": {"identifier": "getParts", "parameters": "(String str, String sperator)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getParts(String str, String sperator) {\n        List<String> ret = new ArrayList<String>();\n        List<String> parts = Arrays.asList(str.split(\"/\"));\n        for (String part : parts) {\n            if (!isEmpty(part)) {\n                ret.add(part);\n            }\n        }\n        return ret;\n    }", "signature": "List<String> getParts(String str, String sperator)", "full_signature": "public static List<String> getParts(String str, String sperator)", "class_method_signature": "StringUtils.getParts(String str, String sperator)", "testcase": false, "constructor": false, "invocations": ["asList", "split", "isEmpty", "add"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}