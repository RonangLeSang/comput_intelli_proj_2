{"test_class": {"identifier": "CorbaConduitTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private static IMocksControl control;", "modifier": "private static", "type": "IMocksControl", "declarator": "control", "var_name": "control"}, {"original_string": "private static ORB orb;", "modifier": "private static", "type": "ORB", "declarator": "orb", "var_name": "orb"}, {"original_string": "private static Bus bus;", "modifier": "private static", "type": "Bus", "declarator": "bus", "var_name": "bus"}, {"original_string": "protected EndpointInfo endpointInfo;", "modifier": "protected", "type": "EndpointInfo", "declarator": "endpointInfo", "var_name": "endpointInfo"}, {"original_string": "protected EndpointReferenceType target;", "modifier": "protected", "type": "EndpointReferenceType", "declarator": "target", "var_name": "target"}, {"original_string": "protected MessageObserver observer;", "modifier": "protected", "type": "MessageObserver", "declarator": "observer", "var_name": "observer"}, {"original_string": "Message inMessage;", "modifier": "", "type": "Message", "declarator": "inMessage", "var_name": "inMessage"}, {"original_string": "CorbaBindingFactory factory;", "modifier": "", "type": "CorbaBindingFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "OrbConfig orbConfig;", "modifier": "", "type": "OrbConfig", "declarator": "orbConfig", "var_name": "orbConfig"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/bindings/corba/src/test/java/org/apache/cxf/binding/corba/CorbaConduitTest.java"}, "test_case": {"identifier": "testClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClose() throws Exception {       \n        Method m = CorbaConduit.class.getDeclaredMethod(\"buildRequest\", \n            new Class[] {CorbaMessage.class, OperationType.class});\n        CorbaConduit conduit = EasyMock.createMockBuilder(CorbaConduit.class)\n            .addMockedMethod(m).createMock();       \n        \n        org.omg.CORBA.Object obj = control.createMock(org.omg.CORBA.Object.class);\n        CorbaMessage msg = control.createMock(CorbaMessage.class);\n        EasyMock.expect(msg.get(CorbaConstants.CORBA_ENDPOINT_OBJECT)).andReturn(obj);\n        Exchange exg = control.createMock(Exchange.class);\n        EasyMock.expect(msg.getExchange()).andReturn(exg);\n        BindingOperationInfo bopInfo = control.createMock(BindingOperationInfo.class);\n        EasyMock.expect(exg.get(BindingOperationInfo.class)).andReturn(bopInfo);\n        OperationType opType = control.createMock(OperationType.class);\n        bopInfo.getExtensor(OperationType.class);\n        EasyMock.expectLastCall().andReturn(opType);\n        conduit.buildRequest(msg, opType);\n        EasyMock.expectLastCall();\n        OutputStream os = control.createMock(OutputStream.class);\n        EasyMock.expect(msg.getContent(OutputStream.class)).andReturn(os);\n        os.close();\n        EasyMock.expectLastCall();\n        \n        control.replay();\n        conduit.close(msg);\n        control.verify();\n    }", "signature": "void testClose()", "full_signature": "@Test public void testClose()", "class_method_signature": "CorbaConduitTest.testClose()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "createMock", "addMockedMethod", "createMockBuilder", "createMock", "createMock", "andReturn", "expect", "get", "createMock", "andReturn", "expect", "getExchange", "createMock", "andReturn", "expect", "get", "createMock", "getExtensor", "andReturn", "expectLastCall", "buildRequest", "expectLastCall", "createMock", "andReturn", "expect", "getContent", "close", "expectLastCall", "replay", "close", "verify"]}, "focal_class": {"identifier": "CorbaConduit", "superclass": "", "interfaces": "implements Conduit", "fields": [{"original_string": "private static final Logger LOG = LogUtils.getL7dLogger(CorbaConduit.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtils.getL7dLogger(CorbaConduit.class)", "var_name": "LOG"}, {"original_string": "private EndpointInfo endpointInfo;", "modifier": "private", "type": "EndpointInfo", "declarator": "endpointInfo", "var_name": "endpointInfo"}, {"original_string": "private EndpointReferenceType target;", "modifier": "private", "type": "EndpointReferenceType", "declarator": "target", "var_name": "target"}, {"original_string": "private MessageObserver incomingObserver;", "modifier": "private", "type": "MessageObserver", "declarator": "incomingObserver", "var_name": "incomingObserver"}, {"original_string": "private ORB orb;", "modifier": "private", "type": "ORB", "declarator": "orb", "var_name": "orb"}, {"original_string": "private OrbConfig orbConfig;", "modifier": "private", "type": "OrbConfig", "declarator": "orbConfig", "var_name": "orbConfig"}, {"original_string": "private CorbaTypeMap typeMap;", "modifier": "private", "type": "CorbaTypeMap", "declarator": "typeMap", "var_name": "typeMap"}], "methods": [{"identifier": "CorbaConduit", "parameters": "(EndpointInfo ei, EndpointReferenceType ref, OrbConfig config)", "modifiers": "public", "return": "", "signature": " CorbaConduit(EndpointInfo ei, EndpointReferenceType ref, OrbConfig config)", "full_signature": "public  CorbaConduit(EndpointInfo ei, EndpointReferenceType ref, OrbConfig config)", "class_method_signature": "CorbaConduit.CorbaConduit(EndpointInfo ei, EndpointReferenceType ref, OrbConfig config)", "testcase": false, "constructor": true}, {"identifier": "getOrbConfig", "parameters": "()", "modifiers": "public", "return": "OrbConfig", "signature": "OrbConfig getOrbConfig()", "full_signature": "public OrbConfig getOrbConfig()", "class_method_signature": "CorbaConduit.getOrbConfig()", "testcase": false, "constructor": false}, {"identifier": "prepareOrb", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void prepareOrb()", "full_signature": "public synchronized void prepareOrb()", "class_method_signature": "CorbaConduit.prepareOrb()", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(Message message)", "modifiers": "public", "return": "void", "signature": "void prepare(Message message)", "full_signature": "public void prepare(Message message)", "class_method_signature": "CorbaConduit.prepare(Message message)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Message message)", "modifiers": "public", "return": "void", "signature": "void close(Message message)", "full_signature": "public void close(Message message)", "class_method_signature": "CorbaConduit.close(Message message)", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void finalize()", "full_signature": "protected void finalize()", "class_method_signature": "CorbaConduit.finalize()", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "public", "return": "EndpointReferenceType", "signature": "EndpointReferenceType getTarget()", "full_signature": "public EndpointReferenceType getTarget()", "class_method_signature": "CorbaConduit.getTarget()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "CorbaConduit.close()", "testcase": false, "constructor": false}, {"identifier": "setMessageObserver", "parameters": "(MessageObserver observer)", "modifiers": "public", "return": "void", "signature": "void setMessageObserver(MessageObserver observer)", "full_signature": "public void setMessageObserver(MessageObserver observer)", "class_method_signature": "CorbaConduit.setMessageObserver(MessageObserver observer)", "testcase": false, "constructor": false}, {"identifier": "getTargetReference", "parameters": "(EndpointReferenceType t)", "modifiers": "public final", "return": "EndpointReferenceType", "signature": "EndpointReferenceType getTargetReference(EndpointReferenceType t)", "full_signature": "public final EndpointReferenceType getTargetReference(EndpointReferenceType t)", "class_method_signature": "CorbaConduit.getTargetReference(EndpointReferenceType t)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getAddress()", "full_signature": "public final String getAddress()", "class_method_signature": "CorbaConduit.getAddress()", "testcase": false, "constructor": false}, {"identifier": "buildRequest", "parameters": "(CorbaMessage message, OperationType opType)", "modifiers": "public", "return": "void", "signature": "void buildRequest(CorbaMessage message, OperationType opType)", "full_signature": "public void buildRequest(CorbaMessage message, OperationType opType)", "class_method_signature": "CorbaConduit.buildRequest(CorbaMessage message, OperationType opType)", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "(CorbaMessage message)", "modifiers": "public", "return": "NVList", "signature": "NVList getArguments(CorbaMessage message)", "full_signature": "public NVList getArguments(CorbaMessage message)", "class_method_signature": "CorbaConduit.getArguments(CorbaMessage message)", "testcase": false, "constructor": false}, {"identifier": "getReturn", "parameters": "(CorbaMessage message)", "modifiers": "public", "return": "NamedValue", "signature": "NamedValue getReturn(CorbaMessage message)", "full_signature": "public NamedValue getReturn(CorbaMessage message)", "class_method_signature": "CorbaConduit.getReturn(CorbaMessage message)", "testcase": false, "constructor": false}, {"identifier": "getExceptionList", "parameters": "(Map<TypeCode, RaisesType> exceptions,\n                                             CorbaMessage message, \n                                             OperationType opType)", "modifiers": "public", "return": "ExceptionList", "signature": "ExceptionList getExceptionList(Map<TypeCode, RaisesType> exceptions,\n                                             CorbaMessage message, \n                                             OperationType opType)", "full_signature": "public ExceptionList getExceptionList(Map<TypeCode, RaisesType> exceptions,\n                                             CorbaMessage message, \n                                             OperationType opType)", "class_method_signature": "CorbaConduit.getExceptionList(Map<TypeCode, RaisesType> exceptions,\n                                             CorbaMessage message, \n                                             OperationType opType)", "testcase": false, "constructor": false}, {"identifier": "getRequest", "parameters": "(CorbaMessage message,\n                                 String opName,\n                                 org.omg.CORBA.NVList nvlist, \n                                 org.omg.CORBA.NamedValue ret, \n                                 org.omg.CORBA.ExceptionList exList)", "modifiers": "public", "return": "Request", "signature": "Request getRequest(CorbaMessage message,\n                                 String opName,\n                                 org.omg.CORBA.NVList nvlist, \n                                 org.omg.CORBA.NamedValue ret, \n                                 org.omg.CORBA.ExceptionList exList)", "full_signature": "public Request getRequest(CorbaMessage message,\n                                 String opName,\n                                 org.omg.CORBA.NVList nvlist, \n                                 org.omg.CORBA.NamedValue ret, \n                                 org.omg.CORBA.ExceptionList exList)", "class_method_signature": "CorbaConduit.getRequest(CorbaMessage message,\n                                 String opName,\n                                 org.omg.CORBA.NVList nvlist, \n                                 org.omg.CORBA.NamedValue ret, \n                                 org.omg.CORBA.ExceptionList exList)", "testcase": false, "constructor": false}, {"identifier": "getOperationExceptions", "parameters": "(\n                                         OperationType operation, \n                                         CorbaTypeMap map)", "modifiers": "public", "return": "Map<TypeCode, RaisesType>", "signature": "Map<TypeCode, RaisesType> getOperationExceptions(\n                                         OperationType operation, \n                                         CorbaTypeMap map)", "full_signature": "public Map<TypeCode, RaisesType> getOperationExceptions(\n                                         OperationType operation, \n                                         CorbaTypeMap map)", "class_method_signature": "CorbaConduit.getOperationExceptions(\n                                         OperationType operation, \n                                         CorbaTypeMap map)", "testcase": false, "constructor": false}, {"identifier": "getMessageObserver", "parameters": "()", "modifiers": "public", "return": "MessageObserver", "signature": "MessageObserver getMessageObserver()", "full_signature": "public MessageObserver getMessageObserver()", "class_method_signature": "CorbaConduit.getMessageObserver()", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/CorbaConduit.java"}, "focal_method": {"identifier": "close", "parameters": "(Message message)", "modifiers": "public", "return": "void", "body": "public void close(Message message) throws IOException {\n        if (message.get(CorbaConstants.CORBA_ENDPOINT_OBJECT) != null) {\n            BindingOperationInfo boi = message.getExchange().get(BindingOperationInfo.class);\n            OperationType opType = boi.getExtensor(OperationType.class);\n            try {\n                buildRequest((CorbaMessage)message, opType);            \n                message.getContent(OutputStream.class).close();\n            } catch (Exception ex) {\n                LOG.log(Level.SEVERE, \"Could not build the corba request\");\n                throw new CorbaBindingException(ex);\n            }\n        }\n    }", "signature": "void close(Message message)", "full_signature": "public void close(Message message)", "class_method_signature": "CorbaConduit.close(Message message)", "testcase": false, "constructor": false, "invocations": ["get", "get", "getExchange", "getExtensor", "buildRequest", "close", "getContent", "log"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}