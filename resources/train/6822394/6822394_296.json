{"test_class": {"identifier": "AegisElementProviderTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private Properties properties;", "modifier": "private", "type": "Properties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private String simpleBeanXml;", "modifier": "private", "type": "String", "declarator": "simpleBeanXml", "var_name": "simpleBeanXml"}, {"original_string": "private String noNamespaceXml;", "modifier": "private", "type": "String", "declarator": "noNamespaceXml", "var_name": "noNamespaceXml"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/rs/extensions/providers/src/test/java/org/apache/cxf/jaxrs/provider/aegis/AegisElementProviderTest.java"}, "test_case": {"identifier": "testNoNamespaceWriteTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoNamespaceWriteTo() throws Exception {\n        MessageBodyWriter<Object> p = new NoNamespaceAegisElementProvider<Object>();\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        AegisTestBean bean = new AegisTestBean();\n        bean.setBoolValue(Boolean.TRUE);\n        bean.setStrValue(\"hovercraft\");\n        p.writeTo(bean, null, null, null, null, null, os);\n        byte[] bytes = os.toByteArray();\n        String xml = new String(bytes, \"utf-8\");\n        assertEquals(noNamespaceXml, xml);\n    }", "signature": "void testNoNamespaceWriteTo()", "full_signature": "@Test public void testNoNamespaceWriteTo()", "class_method_signature": "AegisElementProviderTest.testNoNamespaceWriteTo()", "testcase": true, "constructor": false, "invocations": ["setBoolValue", "setStrValue", "writeTo", "toByteArray", "assertEquals"]}, "focal_class": {"identifier": "AegisElementProvider", "superclass": "extends AbstractAegisProvider<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "readFrom", "parameters": "(Class<T> type, Type genericType, Annotation[] annotations, MediaType m, \n        MultivaluedMap<String, String> headers, InputStream is)", "modifiers": "public", "return": "T", "signature": "T readFrom(Class<T> type, Type genericType, Annotation[] annotations, MediaType m, \n        MultivaluedMap<String, String> headers, InputStream is)", "full_signature": "public T readFrom(Class<T> type, Type genericType, Annotation[] annotations, MediaType m, \n        MultivaluedMap<String, String> headers, InputStream is)", "class_method_signature": "AegisElementProvider.readFrom(Class<T> type, Type genericType, Annotation[] annotations, MediaType m, \n        MultivaluedMap<String, String> headers, InputStream is)", "testcase": false, "constructor": false}, {"identifier": "messyCastToRawType", "parameters": "(Type genericType)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Class<T>", "signature": "Class<T> messyCastToRawType(Type genericType)", "full_signature": "@SuppressWarnings(\"unchecked\") private Class<T> messyCastToRawType(Type genericType)", "class_method_signature": "AegisElementProvider.messyCastToRawType(Type genericType)", "testcase": false, "constructor": false}, {"identifier": "createStreamReader", "parameters": "(AegisType topType, InputStream is)", "modifiers": "protected", "return": "XMLStreamReader", "signature": "XMLStreamReader createStreamReader(AegisType topType, InputStream is)", "full_signature": "protected XMLStreamReader createStreamReader(AegisType topType, InputStream is)", "class_method_signature": "AegisElementProvider.createStreamReader(AegisType topType, InputStream is)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)", "modifiers": "public", "return": "void", "signature": "void writeTo(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)", "full_signature": "public void writeTo(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)", "class_method_signature": "AegisElementProvider.writeTo(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "createStreamWriter", "parameters": "(QName typeQName, \n                                                 OutputStream os)", "modifiers": "protected", "return": "XMLStreamWriter", "signature": "XMLStreamWriter createStreamWriter(QName typeQName, \n                                                 OutputStream os)", "full_signature": "protected XMLStreamWriter createStreamWriter(QName typeQName, \n                                                 OutputStream os)", "class_method_signature": "AegisElementProvider.createStreamWriter(QName typeQName, \n                                                 OutputStream os)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/aegis/AegisElementProvider.java"}, "focal_method": {"identifier": "writeTo", "parameters": "(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)", "modifiers": "public", "return": "void", "body": "public void writeTo(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os) \n        throws IOException {\n        if (type == null) {\n            type = obj.getClass();\n        }\n        if (genericType == null) {\n            genericType = type;\n        }\n        AegisContext context = getAegisContext(type, genericType);\n        AegisType aegisType = context.getTypeMapping().getType(genericType);\n        AegisWriter<XMLStreamWriter> aegisWriter = context.createXMLStreamWriter();\n        try {\n            XMLStreamWriter xmlStreamWriter = createStreamWriter(aegisType.getSchemaType(), os);\n            // use type qname as element qname?\n            xmlStreamWriter.writeStartDocument();\n            aegisWriter.write(obj, aegisType.getSchemaType(), false, xmlStreamWriter, aegisType);\n            xmlStreamWriter.writeEndDocument();\n            xmlStreamWriter.close();\n        } catch (Exception e) {\n            throw new WebApplicationException(e);\n        }\n    }", "signature": "void writeTo(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)", "full_signature": "public void writeTo(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)", "class_method_signature": "AegisElementProvider.writeTo(T obj, Class<?> type, Type genericType, Annotation[] anns,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)", "testcase": false, "constructor": false, "invocations": ["getClass", "getAegisContext", "getType", "getTypeMapping", "createXMLStreamWriter", "createStreamWriter", "getSchemaType", "writeStartDocument", "write", "getSchemaType", "writeEndDocument", "close"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}