{"test_class": {"identifier": "CommandLineParserTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private CommandLineParser parser;", "modifier": "private", "type": "CommandLineParser", "declarator": "parser", "var_name": "parser"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/tools/common/src/test/java/org/apache/cxf/tools/common/toolspec/parser/CommandLineParserTest.java"}, "test_case": {"identifier": "testInvalidOption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidOption() {\n        try {\n            String[] args = new String[] {\"-n\", \"-r\", \"arg1\"};\n            parser.parseArguments(args);\n\n            fail(\"testInvalidOption failed\");\n        } catch (BadUsageException ex) {\n            Object[] errors = ex.getErrors().toArray();\n\n            assertEquals(\"testInvalidOption failed\", 1, errors.length);\n            CommandLineError error = (CommandLineError)errors[0];\n\n            assertTrue(\"Expected InvalidOption error\", error instanceof ErrorVisitor.InvalidOption);\n            ErrorVisitor.InvalidOption option = (ErrorVisitor.InvalidOption)error;\n\n            assertEquals(\"Invalid option incorrect\", \"-n\", option.getOptionSwitch());\n            assertEquals(\"Invalid option message incorrect\",\n                         \"Invalid option: -n is missing its associated argument\", option.toString());\n        }\n    }", "signature": "void testInvalidOption()", "full_signature": "@Test public void testInvalidOption()", "class_method_signature": "CommandLineParserTest.testInvalidOption()", "testcase": true, "constructor": false, "invocations": ["parseArguments", "fail", "toArray", "getErrors", "assertEquals", "assertTrue", "assertEquals", "getOptionSwitch", "assertEquals", "toString"]}, "focal_class": {"identifier": "CommandLineParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogUtils.getL7dLogger(CommandLineParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtils.getL7dLogger(CommandLineParser.class)", "var_name": "LOG"}, {"original_string": "private ToolSpec toolspec;", "modifier": "private", "type": "ToolSpec", "declarator": "toolspec", "var_name": "toolspec"}], "methods": [{"identifier": "CommandLineParser", "parameters": "(ToolSpec ts)", "modifiers": "public", "return": "", "signature": " CommandLineParser(ToolSpec ts)", "full_signature": "public  CommandLineParser(ToolSpec ts)", "class_method_signature": "CommandLineParser.CommandLineParser(ToolSpec ts)", "testcase": false, "constructor": true}, {"identifier": "setToolSpec", "parameters": "(ToolSpec ts)", "modifiers": "public", "return": "void", "signature": "void setToolSpec(ToolSpec ts)", "full_signature": "public void setToolSpec(ToolSpec ts)", "class_method_signature": "CommandLineParser.setToolSpec(ToolSpec ts)", "testcase": false, "constructor": false}, {"identifier": "getArgsFromString", "parameters": "(String s)", "modifiers": "public static", "return": "String[]", "signature": "String[] getArgsFromString(String s)", "full_signature": "public static String[] getArgsFromString(String s)", "class_method_signature": "CommandLineParser.getArgsFromString(String s)", "testcase": false, "constructor": false}, {"identifier": "parseArguments", "parameters": "(String args)", "modifiers": "public", "return": "CommandDocument", "signature": "CommandDocument parseArguments(String args)", "full_signature": "public CommandDocument parseArguments(String args)", "class_method_signature": "CommandLineParser.parseArguments(String args)", "testcase": false, "constructor": false}, {"identifier": "parseArguments", "parameters": "(String[] args)", "modifiers": "public", "return": "CommandDocument", "signature": "CommandDocument parseArguments(String[] args)", "full_signature": "public CommandDocument parseArguments(String[] args)", "class_method_signature": "CommandLineParser.parseArguments(String[] args)", "testcase": false, "constructor": false}, {"identifier": "throwUsage", "parameters": "(ErrorVisitor errors)", "modifiers": "public", "return": "void", "signature": "void throwUsage(ErrorVisitor errors)", "full_signature": "public void throwUsage(ErrorVisitor errors)", "class_method_signature": "CommandLineParser.throwUsage(ErrorVisitor errors)", "testcase": false, "constructor": false}, {"identifier": "getUsage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsage()", "full_signature": "public String getUsage()", "class_method_signature": "CommandLineParser.getUsage()", "testcase": false, "constructor": false}, {"identifier": "getDetailedUsage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDetailedUsage()", "full_signature": "public String getDetailedUsage()", "class_method_signature": "CommandLineParser.getDetailedUsage()", "testcase": false, "constructor": false}, {"identifier": "getFormattedDetailedUsage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFormattedDetailedUsage()", "full_signature": "public String getFormattedDetailedUsage()", "class_method_signature": "CommandLineParser.getFormattedDetailedUsage()", "testcase": false, "constructor": false}, {"identifier": "splitAndAppendText", "parameters": "(StringBuilder buffer, String tmpStr, int idx, int lastIdx)", "modifiers": "private", "return": "int", "signature": "int splitAndAppendText(StringBuilder buffer, String tmpStr, int idx, int lastIdx)", "full_signature": "private int splitAndAppendText(StringBuilder buffer, String tmpStr, int idx, int lastIdx)", "class_method_signature": "CommandLineParser.splitAndAppendText(StringBuilder buffer, String tmpStr, int idx, int lastIdx)", "testcase": false, "constructor": false}, {"identifier": "addWhiteNamespace", "parameters": "(StringBuilder strbuffer, int count)", "modifiers": "private", "return": "void", "signature": "void addWhiteNamespace(StringBuilder strbuffer, int count)", "full_signature": "private void addWhiteNamespace(StringBuilder strbuffer, int count)", "class_method_signature": "CommandLineParser.addWhiteNamespace(StringBuilder strbuffer, int count)", "testcase": false, "constructor": false}, {"identifier": "getDetailedUsage", "parameters": "(String id)", "modifiers": "public", "return": "String", "signature": "String getDetailedUsage(String id)", "full_signature": "public String getDetailedUsage(String id)", "class_method_signature": "CommandLineParser.getDetailedUsage(String id)", "testcase": false, "constructor": false}, {"identifier": "getToolUsage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getToolUsage()", "full_signature": "public String getToolUsage()", "class_method_signature": "CommandLineParser.getToolUsage()", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/tools/common/src/main/java/org/apache/cxf/tools/common/toolspec/parser/CommandLineParser.java"}, "focal_method": {"identifier": "parseArguments", "parameters": "(String args)", "modifiers": "public", "return": "CommandDocument", "body": "public CommandDocument parseArguments(String args) throws BadUsageException {\n        return parseArguments(getArgsFromString(args));\n    }", "signature": "CommandDocument parseArguments(String args)", "full_signature": "public CommandDocument parseArguments(String args)", "class_method_signature": "CommandLineParser.parseArguments(String args)", "testcase": false, "constructor": false, "invocations": ["parseArguments", "getArgsFromString"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}