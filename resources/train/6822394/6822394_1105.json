{"test_class": {"identifier": "AbstractProtocolHandlerInterceptorTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private IMocksControl control;", "modifier": "private", "type": "IMocksControl", "declarator": "control", "var_name": "control"}, {"original_string": "private Binding binding;", "modifier": "private", "type": "Binding", "declarator": "binding", "var_name": "binding"}, {"original_string": "private HandlerChainInvoker invoker;", "modifier": "private", "type": "HandlerChainInvoker", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "private IIOPMessage message;", "modifier": "private", "type": "IIOPMessage", "declarator": "message", "var_name": "message"}, {"original_string": "private Exchange exchange;", "modifier": "private", "type": "Exchange", "declarator": "exchange", "var_name": "exchange"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/handler/AbstractProtocolHandlerInterceptorTest.java"}, "test_case": {"identifier": "testInterceptSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInterceptSuccess() {\n        expect(message.getExchange()).andReturn(exchange).anyTimes();\n        expect(exchange.get(HandlerChainInvoker.class)).andReturn(invoker).anyTimes();\n        expect(invoker.invokeProtocolHandlers(eq(false),\n                        isA(MessageContext.class))).andReturn(true);\n        expect(exchange.getOutMessage()).andReturn(message);\n        control.replay();\n        IIOPHandlerInterceptor pi = new IIOPHandlerInterceptor(binding);\n        assertEquals(\"unexpected phase\", \"user-protocol\", pi.getPhase());\n        pi.handleMessage(message);\n    }", "signature": "void testInterceptSuccess()", "full_signature": "@Test public void testInterceptSuccess()", "class_method_signature": "AbstractProtocolHandlerInterceptorTest.testInterceptSuccess()", "testcase": true, "constructor": false, "invocations": ["anyTimes", "andReturn", "expect", "getExchange", "anyTimes", "andReturn", "expect", "get", "andReturn", "expect", "invokeProtocolHandlers", "eq", "isA", "andReturn", "expect", "getOutMessage", "replay", "assertEquals", "getPhase", "handleMessage"]}, "focal_class": {"identifier": "AbstractProtocolHandlerInterceptor", "superclass": "extends AbstractJAXWSHandlerInterceptor<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "AbstractProtocolHandlerInterceptor", "parameters": "(Binding binding)", "modifiers": "protected", "return": "", "signature": " AbstractProtocolHandlerInterceptor(Binding binding)", "full_signature": "protected  AbstractProtocolHandlerInterceptor(Binding binding)", "class_method_signature": "AbstractProtocolHandlerInterceptor.AbstractProtocolHandlerInterceptor(Binding binding)", "testcase": false, "constructor": true}, {"identifier": "AbstractProtocolHandlerInterceptor", "parameters": "(Binding binding, String phase)", "modifiers": "protected", "return": "", "signature": " AbstractProtocolHandlerInterceptor(Binding binding, String phase)", "full_signature": "protected  AbstractProtocolHandlerInterceptor(Binding binding, String phase)", "class_method_signature": "AbstractProtocolHandlerInterceptor.AbstractProtocolHandlerInterceptor(Binding binding, String phase)", "testcase": false, "constructor": true}, {"identifier": "handleMessage", "parameters": "(T message)", "modifiers": "public", "return": "void", "signature": "void handleMessage(T message)", "full_signature": "public void handleMessage(T message)", "class_method_signature": "AbstractProtocolHandlerInterceptor.handleMessage(T message)", "testcase": false, "constructor": false}, {"identifier": "createProtocolMessageContext", "parameters": "(T message)", "modifiers": "protected", "return": "MessageContext", "signature": "MessageContext createProtocolMessageContext(T message)", "full_signature": "protected MessageContext createProtocolMessageContext(T message)", "class_method_signature": "AbstractProtocolHandlerInterceptor.createProtocolMessageContext(T message)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/AbstractProtocolHandlerInterceptor.java"}, "focal_method": {"identifier": "handleMessage", "parameters": "(T message)", "modifiers": "public", "return": "void", "body": "public void handleMessage(T message) {\n        if (binding.getHandlerChain().isEmpty()) {\n            return;\n        }\n        MessageContext context = createProtocolMessageContext(message);\n        HandlerChainInvoker invoker = getInvoker(message);\n        invoker.setProtocolMessageContext(context);\n        invoker.invokeProtocolHandlers(isRequestor(message), context);      \n        \n        onCompletion(message);\n    }", "signature": "void handleMessage(T message)", "full_signature": "public void handleMessage(T message)", "class_method_signature": "AbstractProtocolHandlerInterceptor.handleMessage(T message)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getHandlerChain", "createProtocolMessageContext", "getInvoker", "setProtocolMessageContext", "invokeProtocolHandlers", "isRequestor", "onCompletion"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}