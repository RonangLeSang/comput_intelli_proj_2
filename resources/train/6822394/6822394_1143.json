{"test_class": {"identifier": "ProviderFactoryTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private String epAddr = \"http://cxf.apache.org/\";", "modifier": "private", "type": "String", "declarator": "epAddr = \"http://cxf.apache.org/\"", "var_name": "epAddr"}, {"original_string": "private ProviderFactory ph;", "modifier": "private", "type": "ProviderFactory", "declarator": "ph", "var_name": "ph"}, {"original_string": "private AbstractDOMProvider dpMock;", "modifier": "private", "type": "AbstractDOMProvider", "declarator": "dpMock", "var_name": "dpMock"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/js/src/test/java/org/apache/cxf/js/rhino/ProviderFactoryTest.java"}, "test_case": {"identifier": "testProviderException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProviderException() throws Exception {\n        dpMock.publish();\n        EasyMock.expectLastCall()\n            .andThrow(new AbstractDOMProvider.JSDOMProviderException(AbstractDOMProvider.NO_EP_ADDR));\n        EasyMock.replay(dpMock);\n        File f = new File(getClass().getResource(\"msg.js\").toURI().getPath());\n        try {\n            ph.createAndPublish(f);\n            fail(\"expected exception did not occur\");\n        } catch (Exception ex) {\n            assertEquals(\"wrong exception message\",\n                         f.getPath() + \": \" + AbstractDOMProvider.NO_EP_ADDR,\n                         ex.getMessage());\n        }\n        EasyMock.verify(dpMock);\n    }", "signature": "void testProviderException()", "full_signature": "@Test public void testProviderException()", "class_method_signature": "ProviderFactoryTest.testProviderException()", "testcase": true, "constructor": false, "invocations": ["publish", "andThrow", "expectLastCall", "replay", "getPath", "toURI", "getResource", "getClass", "createAndPublish", "fail", "assertEquals", "getPath", "getMessage", "verify"]}, "focal_class": {"identifier": "ProviderFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ILLEGAL_SVCMD_MODE = \": unknown ServiceMode: \";", "modifier": "public static final", "type": "String", "declarator": "ILLEGAL_SVCMD_MODE = \": unknown ServiceMode: \"", "var_name": "ILLEGAL_SVCMD_MODE"}, {"original_string": "public static final String ILLEGAL_SVCMD_TYPE = \": ServiceMode value must be of type string\";", "modifier": "public static final", "type": "String", "declarator": "ILLEGAL_SVCMD_TYPE = \": ServiceMode value must be of type string\"", "var_name": "ILLEGAL_SVCMD_TYPE"}, {"original_string": "public static final String NO_SUCH_FILE = \": file does not exist\";", "modifier": "public static final", "type": "String", "declarator": "NO_SUCH_FILE = \": file does not exist\"", "var_name": "NO_SUCH_FILE"}, {"original_string": "public static final String NO_PROVIDER = \": file contains no WebServiceProviders\";", "modifier": "public static final", "type": "String", "declarator": "NO_PROVIDER = \": file contains no WebServiceProviders\"", "var_name": "NO_PROVIDER"}, {"original_string": "private static final Logger LOG = LogUtils.getL7dLogger(ProviderFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtils.getL7dLogger(ProviderFactory.class)", "var_name": "LOG"}, {"original_string": "private String epAddress;", "modifier": "private", "type": "String", "declarator": "epAddress", "var_name": "epAddress"}, {"original_string": "private boolean isBaseAddr;", "modifier": "private", "type": "boolean", "declarator": "isBaseAddr", "var_name": "isBaseAddr"}, {"original_string": "private List<AbstractDOMProvider> providers = new CopyOnWriteArrayList<AbstractDOMProvider>();", "modifier": "private", "type": "List<AbstractDOMProvider>", "declarator": "providers = new CopyOnWriteArrayList<AbstractDOMProvider>()", "var_name": "providers"}], "methods": [{"identifier": "ProviderFactory", "parameters": "(String baseAddr)", "modifiers": "public", "return": "", "signature": " ProviderFactory(String baseAddr)", "full_signature": "public  ProviderFactory(String baseAddr)", "class_method_signature": "ProviderFactory.ProviderFactory(String baseAddr)", "testcase": false, "constructor": true}, {"identifier": "ProviderFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProviderFactory()", "full_signature": "public  ProviderFactory()", "class_method_signature": "ProviderFactory.ProviderFactory()", "testcase": false, "constructor": true}, {"identifier": "createAndPublish", "parameters": "(File f, String epAddr, boolean isBase)", "modifiers": "public", "return": "void", "signature": "void createAndPublish(File f, String epAddr, boolean isBase)", "full_signature": "public void createAndPublish(File f, String epAddr, boolean isBase)", "class_method_signature": "ProviderFactory.createAndPublish(File f, String epAddr, boolean isBase)", "testcase": false, "constructor": false}, {"identifier": "createAndPublish", "parameters": "(File f)", "modifiers": "public synchronized", "return": "void", "signature": "void createAndPublish(File f)", "full_signature": "public synchronized void createAndPublish(File f)", "class_method_signature": "ProviderFactory.createAndPublish(File f)", "testcase": false, "constructor": false}, {"identifier": "publishImpl", "parameters": "(File f, String epAddr, boolean isBase)", "modifiers": "private", "return": "void", "signature": "void publishImpl(File f, String epAddr, boolean isBase)", "full_signature": "private void publishImpl(File f, String epAddr, boolean isBase)", "class_method_signature": "ProviderFactory.publishImpl(File f, String epAddr, boolean isBase)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "ProviderFactory.stop()", "testcase": false, "constructor": false}, {"identifier": "createProvider", "parameters": "(Service.Mode mode, Scriptable scope,\n                                                 Scriptable wsp, String epAddr,\n                                                 boolean isBase, boolean e4x)", "modifiers": "protected", "return": "AbstractDOMProvider", "signature": "AbstractDOMProvider createProvider(Service.Mode mode, Scriptable scope,\n                                                 Scriptable wsp, String epAddr,\n                                                 boolean isBase, boolean e4x)", "full_signature": "protected AbstractDOMProvider createProvider(Service.Mode mode, Scriptable scope,\n                                                 Scriptable wsp, String epAddr,\n                                                 boolean isBase, boolean e4x)", "class_method_signature": "ProviderFactory.createProvider(Service.Mode mode, Scriptable scope,\n                                                 Scriptable wsp, String epAddr,\n                                                 boolean isBase, boolean e4x)", "testcase": false, "constructor": false}, {"identifier": "compileScript", "parameters": "(Context cx, String scriptStr, Scriptable scriptScope, File f)", "modifiers": "private", "return": "Object[]", "signature": "Object[] compileScript(Context cx, String scriptStr, Scriptable scriptScope, File f)", "full_signature": "private Object[] compileScript(Context cx, String scriptStr, Scriptable scriptScope, File f)", "class_method_signature": "ProviderFactory.compileScript(Context cx, String scriptStr, Scriptable scriptScope, File f)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/js/src/main/java/org/apache/cxf/js/rhino/ProviderFactory.java"}, "focal_method": {"identifier": "createAndPublish", "parameters": "(File f, String epAddr, boolean isBase)", "modifiers": "public", "return": "void", "body": "public void createAndPublish(File f, String epAddr, boolean isBase) throws Exception {\n        publishImpl(f, epAddr, isBase);\n    }", "signature": "void createAndPublish(File f, String epAddr, boolean isBase)", "full_signature": "public void createAndPublish(File f, String epAddr, boolean isBase)", "class_method_signature": "ProviderFactory.createAndPublish(File f, String epAddr, boolean isBase)", "testcase": false, "constructor": false, "invocations": ["publishImpl"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}