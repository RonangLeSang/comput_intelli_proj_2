{"test_class": {"identifier": "JMSDestinationTest", "superclass": "extends AbstractJMSTester", "interfaces": "", "fields": [{"original_string": "private static final int MAX_RECEIVE_TIME = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_RECEIVE_TIME = 10", "var_name": "MAX_RECEIVE_TIME"}, {"original_string": "private Message destMessage;", "modifier": "private", "type": "Message", "declarator": "destMessage", "var_name": "destMessage"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/transports/jms/src/test/java/org/apache/cxf/transport/jms/JMSDestinationTest.java"}, "test_case": {"identifier": "testProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProperty() throws Exception {\n\n        final String customPropertyName = \"THIS_PROPERTY_WILL_NOT_BE_AUTO_COPIED\";\n\n        setupServiceInfo(\"http://cxf.apache.org/hello_world_jms\", \"/wsdl/jms_test.wsdl\",\n                         \"HelloWorldService\", \"HelloWorldPort\");\n        // set up the conduit send to be true\n        JMSConduit conduit = setupJMSConduit(true, false);\n        final Message outMessage = new MessageImpl();\n        setupMessageHeader(outMessage, null);\n\n        JMSPropertyType excludeProp = new JMSPropertyType();\n        excludeProp.setName(customPropertyName);\n        excludeProp.setValue(customPropertyName);\n\n        JMSMessageHeadersType headers = (JMSMessageHeadersType)outMessage\n            .get(JMSConstants.JMS_CLIENT_REQUEST_HEADERS);\n        headers.getProperty().add(excludeProp);\n\n        final JMSDestination destination = setupJMSDestination(false);\n\n        // set up MessageObserver for handling the conduit message\n        MessageObserver observer = new MessageObserver() {\n            public void onMessage(Message m) {\n                Exchange exchange = new ExchangeImpl();\n                exchange.setInMessage(m);\n                m.setExchange(exchange);\n                verifyReceivedMessage(m);\n                verifyHeaders(m, outMessage);\n                // setup the message for\n                Conduit backConduit;\n                try {\n                    backConduit = destination.getBackChannel(m, null, null);\n                    // wait for the message to be got from the conduit\n                    Message replyMessage = new MessageImpl();\n                    // copy the message encoding\n                    replyMessage.put(Message.ENCODING, m.get(Message.ENCODING));\n                    sendoutMessage(backConduit, replyMessage, true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        };\n        destination.setMessageObserver(observer);\n        // set is oneway false for get response from destination\n        sendoutMessage(conduit, outMessage, false);\n        // wait for the message to be got from the destination,\n        // create the thread to handler the Destination incoming message\n\n        waitForReceiveInMessage();\n        verifyReceivedMessage(inMessage);\n\n        verifyRequestResponseHeaders(inMessage, outMessage);\n\n        JMSMessageHeadersType inHeader = (JMSMessageHeadersType)inMessage\n            .get(JMSConstants.JMS_CLIENT_RESPONSE_HEADERS);\n        assertNotNull(\"The inHeader should not be null\", inHeader);\n        assertNotNull(\"The property should not be null \" + inHeader.getProperty());\n        // TODO we need to check the SOAP JMS transport properties here\n        \n        // wait for a while for the jms session recycling\n        Thread.sleep(1000);\n        conduit.close();\n        destination.shutdown();\n    }", "signature": "void testProperty()", "full_signature": "@Test public void testProperty()", "class_method_signature": "JMSDestinationTest.testProperty()", "testcase": true, "constructor": false, "invocations": ["setupServiceInfo", "setupJMSConduit", "setupMessageHeader", "setName", "setValue", "get", "add", "getProperty", "setupJMSDestination", "setInMessage", "setExchange", "verifyReceivedMessage", "verifyHeaders", "getBackChannel", "put", "get", "sendoutMessage", "setMessageObserver", "sendoutMessage", "waitForReceiveInMessage", "verifyReceivedMessage", "verifyRequestResponseHeaders", "get", "assertNotNull", "assertNotNull", "getProperty", "sleep", "close", "shutdown"]}, "focal_class": {"identifier": "JMSDestination", "superclass": "extends AbstractMultiplexDestination", "interfaces": "implements SessionAwareMessageListener<javax.jms.Message>,\n        MessageListener, JMSExchangeSender", "fields": [{"original_string": "private static final Logger LOG = LogUtils.getL7dLogger(JMSDestination.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtils.getL7dLogger(JMSDestination.class)", "var_name": "LOG"}, {"original_string": "private JMSConfiguration jmsConfig;", "modifier": "private", "type": "JMSConfiguration", "declarator": "jmsConfig", "var_name": "jmsConfig"}, {"original_string": "private Bus bus;", "modifier": "private", "type": "Bus", "declarator": "bus", "var_name": "bus"}, {"original_string": "private EndpointInfo ei;", "modifier": "private", "type": "EndpointInfo", "declarator": "ei", "var_name": "ei"}, {"original_string": "private AbstractMessageListenerContainer jmsListener;", "modifier": "private", "type": "AbstractMessageListenerContainer", "declarator": "jmsListener", "var_name": "jmsListener"}, {"original_string": "private Collection<JMSContinuation> continuations = \n        new ConcurrentLinkedQueue<JMSContinuation>();", "modifier": "private", "type": "Collection<JMSContinuation>", "declarator": "continuations = \n        new ConcurrentLinkedQueue<JMSContinuation>()", "var_name": "continuations"}, {"original_string": "private ClassLoader loader;", "modifier": "private", "type": "ClassLoader", "declarator": "loader", "var_name": "loader"}], "methods": [{"identifier": "JMSDestination", "parameters": "(Bus b, EndpointInfo info, JMSConfiguration jmsConfig)", "modifiers": "public", "return": "", "signature": " JMSDestination(Bus b, EndpointInfo info, JMSConfiguration jmsConfig)", "full_signature": "public  JMSDestination(Bus b, EndpointInfo info, JMSConfiguration jmsConfig)", "class_method_signature": "JMSDestination.JMSDestination(Bus b, EndpointInfo info, JMSConfiguration jmsConfig)", "testcase": false, "constructor": true}, {"identifier": "getInbuiltBackChannel", "parameters": "(Message inMessage)", "modifiers": "protected", "return": "Conduit", "signature": "Conduit getInbuiltBackChannel(Message inMessage)", "full_signature": "protected Conduit getInbuiltBackChannel(Message inMessage)", "class_method_signature": "JMSDestination.getInbuiltBackChannel(Message inMessage)", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void activate()", "full_signature": "public void activate()", "class_method_signature": "JMSDestination.activate()", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deactivate()", "full_signature": "public void deactivate()", "class_method_signature": "JMSDestination.deactivate()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "JMSDestination.shutdown()", "testcase": false, "constructor": false}, {"identifier": "resolveDestinationName", "parameters": "(final JmsTemplate jmsTemplate, final String name)", "modifiers": "private", "return": "Destination", "signature": "Destination resolveDestinationName(final JmsTemplate jmsTemplate, final String name)", "full_signature": "private Destination resolveDestinationName(final JmsTemplate jmsTemplate, final String name)", "class_method_signature": "JMSDestination.resolveDestinationName(final JmsTemplate jmsTemplate, final String name)", "testcase": false, "constructor": false}, {"identifier": "getReplyToDestination", "parameters": "(JmsTemplate jmsTemplate, Message inMessage)", "modifiers": "public", "return": "Destination", "signature": "Destination getReplyToDestination(JmsTemplate jmsTemplate, Message inMessage)", "full_signature": "public Destination getReplyToDestination(JmsTemplate jmsTemplate, Message inMessage)", "class_method_signature": "JMSDestination.getReplyToDestination(JmsTemplate jmsTemplate, Message inMessage)", "testcase": false, "constructor": false}, {"identifier": "determineCorrelationID", "parameters": "(javax.jms.Message request)", "modifiers": "public", "return": "String", "signature": "String determineCorrelationID(javax.jms.Message request)", "full_signature": "public String determineCorrelationID(javax.jms.Message request)", "class_method_signature": "JMSDestination.determineCorrelationID(javax.jms.Message request)", "testcase": false, "constructor": false}, {"identifier": "onMessage", "parameters": "(javax.jms.Message message)", "modifiers": "public", "return": "void", "signature": "void onMessage(javax.jms.Message message)", "full_signature": "public void onMessage(javax.jms.Message message)", "class_method_signature": "JMSDestination.onMessage(javax.jms.Message message)", "testcase": false, "constructor": false}, {"identifier": "onMessage", "parameters": "(javax.jms.Message message, Session session)", "modifiers": "public", "return": "void", "signature": "void onMessage(javax.jms.Message message, Session session)", "full_signature": "public void onMessage(javax.jms.Message message, Session session)", "class_method_signature": "JMSDestination.onMessage(javax.jms.Message message, Session session)", "testcase": false, "constructor": false}, {"identifier": "sendExchange", "parameters": "(Exchange exchange, final Object replyObj)", "modifiers": "public", "return": "void", "signature": "void sendExchange(Exchange exchange, final Object replyObj)", "full_signature": "public void sendExchange(Exchange exchange, final Object replyObj)", "class_method_signature": "JMSDestination.sendExchange(Exchange exchange, final Object replyObj)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "protected Logger getLogger()", "class_method_signature": "JMSDestination.getLogger()", "testcase": false, "constructor": false}, {"identifier": "getJmsConfig", "parameters": "()", "modifiers": "public", "return": "JMSConfiguration", "signature": "JMSConfiguration getJmsConfig()", "full_signature": "public JMSConfiguration getJmsConfig()", "class_method_signature": "JMSDestination.getJmsConfig()", "testcase": false, "constructor": false}, {"identifier": "setJmsConfig", "parameters": "(JMSConfiguration jmsConfig)", "modifiers": "public", "return": "void", "signature": "void setJmsConfig(JMSConfiguration jmsConfig)", "full_signature": "public void setJmsConfig(JMSConfiguration jmsConfig)", "class_method_signature": "JMSDestination.setJmsConfig(JMSConfiguration jmsConfig)", "testcase": false, "constructor": false}, {"identifier": "isMtomEnabled", "parameters": "(final Message message)", "modifiers": "private", "return": "boolean", "signature": "boolean isMtomEnabled(final Message message)", "full_signature": "private boolean isMtomEnabled(final Message message)", "class_method_signature": "JMSDestination.isMtomEnabled(final Message message)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java"}, "focal_method": {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void shutdown() {\n        getLogger().log(Level.FINE, \"JMSDestination shutdown()\");\n        this.deactivate();\n    }", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "JMSDestination.shutdown()", "testcase": false, "constructor": false, "invocations": ["log", "getLogger", "deactivate"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}