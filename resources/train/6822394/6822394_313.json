{"test_class": {"identifier": "SimpleSearchConditionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SearchCondition<SingleAttr> cEq;", "modifier": "private static", "type": "SearchCondition<SingleAttr>", "declarator": "cEq", "var_name": "cEq"}, {"original_string": "private static SearchCondition<SingleAttr> cGt;", "modifier": "private static", "type": "SearchCondition<SingleAttr>", "declarator": "cGt", "var_name": "cGt"}, {"original_string": "private static SearchCondition<SingleAttr> cGeq;", "modifier": "private static", "type": "SearchCondition<SingleAttr>", "declarator": "cGeq", "var_name": "cGeq"}, {"original_string": "private static SearchCondition<SingleAttr> cLt;", "modifier": "private static", "type": "SearchCondition<SingleAttr>", "declarator": "cLt", "var_name": "cLt"}, {"original_string": "private static SearchCondition<SingleAttr> cLeq;", "modifier": "private static", "type": "SearchCondition<SingleAttr>", "declarator": "cLeq", "var_name": "cLeq"}, {"original_string": "private static SingleAttr attr = new SingleAttr(\"bbb\");", "modifier": "private static", "type": "SingleAttr", "declarator": "attr = new SingleAttr(\"bbb\")", "var_name": "attr"}, {"original_string": "private static SingleAttr attrGreater = new SingleAttr(\"ccc\");", "modifier": "private static", "type": "SingleAttr", "declarator": "attrGreater = new SingleAttr(\"ccc\")", "var_name": "attrGreater"}, {"original_string": "private static SingleAttr attrLesser = new SingleAttr(\"aaa\");", "modifier": "private static", "type": "SingleAttr", "declarator": "attrLesser = new SingleAttr(\"aaa\")", "var_name": "attrLesser"}, {"original_string": "private static DoubleAttr attr2Vals = new DoubleAttr(\"bbb\", \"ccc\");", "modifier": "private static", "type": "DoubleAttr", "declarator": "attr2Vals = new DoubleAttr(\"bbb\", \"ccc\")", "var_name": "attr2Vals"}, {"original_string": "private static DoubleAttr attr2ValsGreater = new DoubleAttr(\"ccc\", \"ddd\");", "modifier": "private static", "type": "DoubleAttr", "declarator": "attr2ValsGreater = new DoubleAttr(\"ccc\", \"ddd\")", "var_name": "attr2ValsGreater"}, {"original_string": "private static DoubleAttr attr2ValsLesser = new DoubleAttr(\"aaa\", \"bbb\");", "modifier": "private static", "type": "DoubleAttr", "declarator": "attr2ValsLesser = new DoubleAttr(\"aaa\", \"bbb\")", "var_name": "attr2ValsLesser"}, {"original_string": "private static DoubleAttr attr1Val = new DoubleAttr(\"bbb\", null);", "modifier": "private static", "type": "DoubleAttr", "declarator": "attr1Val = new DoubleAttr(\"bbb\", null)", "var_name": "attr1Val"}, {"original_string": "private static DoubleAttr attr1ValGreater = new DoubleAttr(\"ccc\", \"ingored\");", "modifier": "private static", "type": "DoubleAttr", "declarator": "attr1ValGreater = new DoubleAttr(\"ccc\", \"ingored\")", "var_name": "attr1ValGreater"}, {"original_string": "private static DoubleAttr attr1ValLesser = new DoubleAttr(\"aaa\", \"ingored\");", "modifier": "private static", "type": "DoubleAttr", "declarator": "attr1ValLesser = new DoubleAttr(\"aaa\", \"ingored\")", "var_name": "attr1ValLesser"}, {"original_string": "private static SearchCondition<DoubleAttr> dc1Eq;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc1Eq", "var_name": "dc1Eq"}, {"original_string": "private static SearchCondition<DoubleAttr> dc1Gt;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc1Gt", "var_name": "dc1Gt"}, {"original_string": "private static SearchCondition<DoubleAttr> dc1Geq;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc1Geq", "var_name": "dc1Geq"}, {"original_string": "private static SearchCondition<DoubleAttr> dc1Lt;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc1Lt", "var_name": "dc1Lt"}, {"original_string": "private static SearchCondition<DoubleAttr> dc1Leq;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc1Leq", "var_name": "dc1Leq"}, {"original_string": "private static SearchCondition<DoubleAttr> dc2Eq;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc2Eq", "var_name": "dc2Eq"}, {"original_string": "private static SearchCondition<DoubleAttr> dc2Gt;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc2Gt", "var_name": "dc2Gt"}, {"original_string": "private static SearchCondition<DoubleAttr> dc2Geq;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc2Geq", "var_name": "dc2Geq"}, {"original_string": "private static SearchCondition<DoubleAttr> dc2Lt;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc2Lt", "var_name": "dc2Lt"}, {"original_string": "private static SearchCondition<DoubleAttr> dc2Leq;", "modifier": "private static", "type": "SearchCondition<DoubleAttr>", "declarator": "dc2Leq", "var_name": "dc2Leq"}, {"original_string": "private static List<ConditionType> supported = Arrays.asList(ConditionType.EQUALS,\n                                                                 ConditionType.NOT_EQUALS,\n                                                                 ConditionType.GREATER_OR_EQUALS,\n                                                                 ConditionType.GREATER_THAN,\n                                                                 ConditionType.LESS_OR_EQUALS,\n                                                                 ConditionType.LESS_THAN);", "modifier": "private static", "type": "List<ConditionType>", "declarator": "supported = Arrays.asList(ConditionType.EQUALS,\n                                                                 ConditionType.NOT_EQUALS,\n                                                                 ConditionType.GREATER_OR_EQUALS,\n                                                                 ConditionType.GREATER_THAN,\n                                                                 ConditionType.LESS_OR_EQUALS,\n                                                                 ConditionType.LESS_THAN)", "var_name": "supported"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/rs/extensions/search/src/test/java/org/apache/cxf/jaxrs/ext/search/SimpleSearchConditionTest.java"}, "test_case": {"identifier": "testIsMetGeqDouble1Val", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsMetGeqDouble1Val() {\n        assertTrue(dc1Geq.isMet(attr1ValGreater));\n        assertTrue(dc1Geq.isMet(attr1Val));\n        assertFalse(dc1Geq.isMet(attr1ValLesser));\n    }", "signature": "void testIsMetGeqDouble1Val()", "full_signature": "@Test public void testIsMetGeqDouble1Val()", "class_method_signature": "SimpleSearchConditionTest.testIsMetGeqDouble1Val()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isMet", "assertTrue", "isMet", "assertFalse", "isMet"]}, "focal_class": {"identifier": "SimpleSearchCondition", "superclass": "", "interfaces": "implements SearchCondition<T>", "fields": [{"original_string": "private static Set<ConditionType> supportedTypes = new HashSet<ConditionType>();", "modifier": "private static", "type": "Set<ConditionType>", "declarator": "supportedTypes = new HashSet<ConditionType>()", "var_name": "supportedTypes"}, {"original_string": "private ConditionType joiningType = ConditionType.AND;", "modifier": "private", "type": "ConditionType", "declarator": "joiningType = ConditionType.AND", "var_name": "joiningType"}, {"original_string": "private T condition;", "modifier": "private", "type": "T", "declarator": "condition", "var_name": "condition"}, {"original_string": "private List<SearchCondition<T>> scts;", "modifier": "private", "type": "List<SearchCondition<T>>", "declarator": "scts", "var_name": "scts"}], "methods": [{"identifier": "SimpleSearchCondition", "parameters": "(ConditionType cType, T condition)", "modifiers": "public", "return": "", "signature": " SimpleSearchCondition(ConditionType cType, T condition)", "full_signature": "public  SimpleSearchCondition(ConditionType cType, T condition)", "class_method_signature": "SimpleSearchCondition.SimpleSearchCondition(ConditionType cType, T condition)", "testcase": false, "constructor": true}, {"identifier": "SimpleSearchCondition", "parameters": "(Map<String, ConditionType> getters2operators, T condition)", "modifiers": "public", "return": "", "signature": " SimpleSearchCondition(Map<String, ConditionType> getters2operators, T condition)", "full_signature": "public  SimpleSearchCondition(Map<String, ConditionType> getters2operators, T condition)", "class_method_signature": "SimpleSearchCondition.SimpleSearchCondition(Map<String, ConditionType> getters2operators, T condition)", "testcase": false, "constructor": true}, {"identifier": "getCondition", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getCondition()", "full_signature": "public T getCondition()", "class_method_signature": "SimpleSearchCondition.getCondition()", "testcase": false, "constructor": false}, {"identifier": "getConditionType", "parameters": "()", "modifiers": "public", "return": "ConditionType", "signature": "ConditionType getConditionType()", "full_signature": "public ConditionType getConditionType()", "class_method_signature": "SimpleSearchCondition.getConditionType()", "testcase": false, "constructor": false}, {"identifier": "getSearchConditions", "parameters": "()", "modifiers": "public", "return": "List<SearchCondition<T>>", "signature": "List<SearchCondition<T>> getSearchConditions()", "full_signature": "public List<SearchCondition<T>> getSearchConditions()", "class_method_signature": "SimpleSearchCondition.getSearchConditions()", "testcase": false, "constructor": false}, {"identifier": "createConditions", "parameters": "(Map<String, ConditionType> getters2operators, \n                                                      ConditionType sharedType)", "modifiers": "private", "return": "List<SearchCondition<T>>", "signature": "List<SearchCondition<T>> createConditions(Map<String, ConditionType> getters2operators, \n                                                      ConditionType sharedType)", "full_signature": "private List<SearchCondition<T>> createConditions(Map<String, ConditionType> getters2operators, \n                                                      ConditionType sharedType)", "class_method_signature": "SimpleSearchCondition.createConditions(Map<String, ConditionType> getters2operators, \n                                                      ConditionType sharedType)", "testcase": false, "constructor": false}, {"identifier": "isMet", "parameters": "(T pojo)", "modifiers": "public", "return": "boolean", "signature": "boolean isMet(T pojo)", "full_signature": "public boolean isMet(T pojo)", "class_method_signature": "SimpleSearchCondition.isMet(T pojo)", "testcase": false, "constructor": false}, {"identifier": "getGettersAndValues", "parameters": "()", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getGettersAndValues()", "full_signature": "private Map<String, Object> getGettersAndValues()", "class_method_signature": "SimpleSearchCondition.getGettersAndValues()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Beanspector<T> beanspector, String getter, T pojo)", "modifiers": "private", "return": "Object", "signature": "Object getValue(Beanspector<T> beanspector, String getter, T pojo)", "full_signature": "private Object getValue(Beanspector<T> beanspector, String getter, T pojo)", "class_method_signature": "SimpleSearchCondition.getValue(Beanspector<T> beanspector, String getter, T pojo)", "testcase": false, "constructor": false}, {"identifier": "isBuiltIn", "parameters": "(T pojo)", "modifiers": "private", "return": "boolean", "signature": "boolean isBuiltIn(T pojo)", "full_signature": "private boolean isBuiltIn(T pojo)", "class_method_signature": "SimpleSearchCondition.isBuiltIn(T pojo)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Collection<T> pojos)", "modifiers": "public", "return": "List<T>", "signature": "List<T> findAll(Collection<T> pojos)", "full_signature": "public List<T> findAll(Collection<T> pojos)", "class_method_signature": "SimpleSearchCondition.findAll(Collection<T> pojos)", "testcase": false, "constructor": false}, {"identifier": "toSQL", "parameters": "(String table, String... columns)", "modifiers": "public", "return": "String", "signature": "String toSQL(String table, String... columns)", "full_signature": "public String toSQL(String table, String... columns)", "class_method_signature": "SimpleSearchCondition.toSQL(String table, String... columns)", "testcase": false, "constructor": false}, {"identifier": "getStatement", "parameters": "()", "modifiers": "public", "return": "PrimitiveStatement", "signature": "PrimitiveStatement getStatement()", "full_signature": "public PrimitiveStatement getStatement()", "class_method_signature": "SimpleSearchCondition.getStatement()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(SearchConditionVisitor<T> visitor)", "modifiers": "public", "return": "void", "signature": "void accept(SearchConditionVisitor<T> visitor)", "full_signature": "public void accept(SearchConditionVisitor<T> visitor)", "class_method_signature": "SimpleSearchCondition.accept(SearchConditionVisitor<T> visitor)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/SimpleSearchCondition.java"}, "focal_method": {"identifier": "isMet", "parameters": "(T pojo)", "modifiers": "public", "return": "boolean", "body": "public boolean isMet(T pojo) {\n        for (SearchCondition<T> sc : scts) {\n            if (!sc.isMet(pojo)) {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean isMet(T pojo)", "full_signature": "public boolean isMet(T pojo)", "class_method_signature": "SimpleSearchCondition.isMet(T pojo)", "testcase": false, "constructor": false, "invocations": ["isMet"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}