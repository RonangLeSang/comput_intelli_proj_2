{"test_class": {"identifier": "CorbaTypeMapTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/bindings/corba/src/test/java/org/apache/cxf/binding/corba/CorbaTypeMapTest.java"}, "test_case": {"identifier": "testCorbaTypeMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorbaTypeMap() throws Exception {\n        CorbaTypeMap typeMap = new CorbaTypeMap(\"http://yoko.apache.org/ComplexTypes\");\n                \n        String targetNamespace = typeMap.getTargetNamespace();\n        assertEquals(targetNamespace, \"http://yoko.apache.org/ComplexTypes\");\n        \n        QName qname = new QName(\"http://yoko.apache.org/ComplexTypes\", \n                                \"Test.MultiPart.Colour\", \"\");\n        QName type = new QName(\"http://yoko.apache.org/ComplexTypes\",\n                               \"xsd1:Test.MultiPart.Colour\", \"\");\n                \n        CorbaTypeImpl corbaTypeImpl = new CorbaTypeImpl();\n        corbaTypeImpl.setQName(qname);\n        corbaTypeImpl.setType(type);\n        corbaTypeImpl.setName(\"Test.MultiPart.Colour\");\n        typeMap.addType(\"Test.MultiPart.Colour\", corbaTypeImpl);\n        \n        CorbaTypeImpl corbatype = typeMap.getType(\"Test.MultiPart.Colour\");\n        assertEquals(corbatype.getName(), \"Test.MultiPart.Colour\");\n        assertEquals(corbatype.getQName().getNamespaceURI(), \"http://yoko.apache.org/ComplexTypes\");\n        assertEquals(corbatype.getType().getLocalPart(), \"xsd1:Test.MultiPart.Colour\");\n    }", "signature": "void testCorbaTypeMap()", "full_signature": "@Test public void testCorbaTypeMap()", "class_method_signature": "CorbaTypeMapTest.testCorbaTypeMap()", "testcase": true, "constructor": false, "invocations": ["getTargetNamespace", "assertEquals", "setQName", "setType", "setName", "addType", "getType", "assertEquals", "getName", "assertEquals", "getNamespaceURI", "getQName", "assertEquals", "getLocalPart", "getType"]}, "focal_class": {"identifier": "CorbaTypeMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String targetNamespace;", "modifier": "private", "type": "String", "declarator": "targetNamespace", "var_name": "targetNamespace"}, {"original_string": "private Map<String, CorbaTypeImpl> typeMap;", "modifier": "private", "type": "Map<String, CorbaTypeImpl>", "declarator": "typeMap", "var_name": "typeMap"}, {"original_string": "private Map<QName, TypeCode> typeCodeMap;", "modifier": "private", "type": "Map<QName, TypeCode>", "declarator": "typeCodeMap", "var_name": "typeCodeMap"}], "methods": [{"identifier": "CorbaTypeMap", "parameters": "(String namespace)", "modifiers": "public", "return": "", "signature": " CorbaTypeMap(String namespace)", "full_signature": "public  CorbaTypeMap(String namespace)", "class_method_signature": "CorbaTypeMap.CorbaTypeMap(String namespace)", "testcase": false, "constructor": true}, {"identifier": "addType", "parameters": "(String name, CorbaTypeImpl type)", "modifiers": "public", "return": "void", "signature": "void addType(String name, CorbaTypeImpl type)", "full_signature": "public void addType(String name, CorbaTypeImpl type)", "class_method_signature": "CorbaTypeMap.addType(String name, CorbaTypeImpl type)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(String name)", "modifiers": "public", "return": "CorbaTypeImpl", "signature": "CorbaTypeImpl getType(String name)", "full_signature": "public CorbaTypeImpl getType(String name)", "class_method_signature": "CorbaTypeMap.getType(String name)", "testcase": false, "constructor": false}, {"identifier": "getTargetNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTargetNamespace()", "full_signature": "public String getTargetNamespace()", "class_method_signature": "CorbaTypeMap.getTargetNamespace()", "testcase": false, "constructor": false}, {"identifier": "addTypeCode", "parameters": "(QName name, TypeCode tc)", "modifiers": "public", "return": "void", "signature": "void addTypeCode(QName name, TypeCode tc)", "full_signature": "public void addTypeCode(QName name, TypeCode tc)", "class_method_signature": "CorbaTypeMap.addTypeCode(QName name, TypeCode tc)", "testcase": false, "constructor": false}, {"identifier": "getTypeCode", "parameters": "(QName name)", "modifiers": "public", "return": "TypeCode", "signature": "TypeCode getTypeCode(QName name)", "full_signature": "public TypeCode getTypeCode(QName name)", "class_method_signature": "CorbaTypeMap.getTypeCode(QName name)", "testcase": false, "constructor": false}, {"identifier": "getIdlType", "parameters": "(TypeCode tc)", "modifiers": "public", "return": "QName", "signature": "QName getIdlType(TypeCode tc)", "full_signature": "public QName getIdlType(TypeCode tc)", "class_method_signature": "CorbaTypeMap.getIdlType(TypeCode tc)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/CorbaTypeMap.java"}, "focal_method": {"identifier": "CorbaTypeMap", "parameters": "(String namespace)", "modifiers": "public", "return": "", "body": "public CorbaTypeMap(String namespace) {\n        targetNamespace = namespace;\n        typeMap = new HashMap<String, CorbaTypeImpl>();\n        typeCodeMap = new HashMap<QName, TypeCode>();\n    }", "signature": " CorbaTypeMap(String namespace)", "full_signature": "public  CorbaTypeMap(String namespace)", "class_method_signature": "CorbaTypeMap.CorbaTypeMap(String namespace)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}