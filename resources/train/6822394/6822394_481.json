{"test_class": {"identifier": "FirstAlternativeSelectorTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private IMocksControl control;", "modifier": "private", "type": "IMocksControl", "declarator": "control", "var_name": "control"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/ws/policy/src/test/java/org/apache/cxf/ws/policy/selector/FirstAlternativeSelectorTest.java"}, "test_case": {"identifier": "testChooseAlternative", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChooseAlternative() {\n        AlternativeSelector selector = new FirstAlternativeSelector();\n        \n        PolicyEngine engine = control.createMock(PolicyEngine.class);\n        Assertor assertor = control.createMock(Assertor.class);\n               \n        Policy policy = new Policy();\n        ExactlyOne ea = new ExactlyOne();\n        All all = new All();\n        PolicyAssertion a1 = new TestAssertion(); \n        all.addAssertion(a1);\n        ea.addPolicyComponent(all);\n        Collection<PolicyAssertion> firstAlternative = \n            CastUtils.cast(all.getPolicyComponents(), PolicyAssertion.class);\n        policy.addPolicyComponent(ea);\n        \n        EasyMock.expect(engine.supportsAlternative(firstAlternative, assertor)).andReturn(false);\n        control.replay();\n        \n        assertNull(selector.selectAlternative(policy, engine, assertor, null));  \n        control.verify();\n        \n        control.reset();        \n        EasyMock.expect(engine.supportsAlternative(firstAlternative, assertor)).andReturn(true);\n        control.replay();         \n        Collection<Assertion> chosen = selector.selectAlternative(policy, engine, assertor, null); \n        assertSame(1, chosen.size());\n        assertSame(chosen.size(), firstAlternative.size());\n        assertSame(chosen.iterator().next(), firstAlternative.iterator().next());\n        control.verify();\n        \n        control.reset();\n        All other = new All();\n        other.addAssertion(a1);\n        ea.addPolicyComponent(other);\n        Collection<PolicyAssertion> secondAlternative = \n            CastUtils.cast(other.getPolicyComponents(), PolicyAssertion.class);\n        EasyMock.expect(engine.supportsAlternative(firstAlternative, assertor)).andReturn(false);\n        EasyMock.expect(engine.supportsAlternative(secondAlternative, assertor)).andReturn(true);\n        control.replay();        \n      \n        chosen = selector.selectAlternative(policy, engine, assertor, null); \n        assertSame(1, chosen.size());\n        assertSame(chosen.size(), secondAlternative.size());\n        assertSame(chosen.iterator().next(), secondAlternative.iterator().next());\n        control.verify();\n    }", "signature": "void testChooseAlternative()", "full_signature": "@Test public void testChooseAlternative()", "class_method_signature": "FirstAlternativeSelectorTest.testChooseAlternative()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "addAssertion", "addPolicyComponent", "cast", "getPolicyComponents", "addPolicyComponent", "andReturn", "expect", "supportsAlternative", "replay", "assertNull", "selectAlternative", "verify", "reset", "andReturn", "expect", "supportsAlternative", "replay", "selectAlternative", "assertSame", "size", "assertSame", "size", "size", "assertSame", "next", "iterator", "next", "iterator", "verify", "reset", "addAssertion", "addPolicyComponent", "cast", "getPolicyComponents", "andReturn", "expect", "supportsAlternative", "andReturn", "expect", "supportsAlternative", "replay", "selectAlternative", "assertSame", "size", "assertSame", "size", "size", "assertSame", "next", "iterator", "next", "iterator", "verify"]}, "focal_class": {"identifier": "FirstAlternativeSelector", "superclass": "extends BaseAlternativeSelector", "interfaces": "", "fields": [], "methods": [{"identifier": "selectAlternative", "parameters": "(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request)", "modifiers": "public", "return": "Collection<Assertion>", "signature": "Collection<Assertion> selectAlternative(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request)", "full_signature": "public Collection<Assertion> selectAlternative(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request)", "class_method_signature": "FirstAlternativeSelector.selectAlternative(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/selector/FirstAlternativeSelector.java"}, "focal_method": {"identifier": "selectAlternative", "parameters": "(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request)", "modifiers": "public", "return": "Collection<Assertion>", "body": "public Collection<Assertion> selectAlternative(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request) {\n\n        Iterator<List<Assertion>> alternatives = policy.getAlternatives();\n        while (alternatives.hasNext()) {\n            List<Assertion> alternative = alternatives.next();\n            if (engine.supportsAlternative(alternative, assertor)\n                && this.isCompatibleWithRequest(alternative, request)) {\n                return alternative;\n            }\n        }        \n        alternatives = policy.getAlternatives();\n        while (alternatives.hasNext()) {\n            List<Assertion> alternative = alternatives.next();\n            if (engine.supportsAlternative(alternative, assertor)) {\n                return alternative;\n            }\n        }        \n        return null;\n    }", "signature": "Collection<Assertion> selectAlternative(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request)", "full_signature": "public Collection<Assertion> selectAlternative(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request)", "class_method_signature": "FirstAlternativeSelector.selectAlternative(Policy policy, PolicyEngine engine, Assertor assertor,\n                                                   List<List<Assertion>> request)", "testcase": false, "constructor": false, "invocations": ["getAlternatives", "hasNext", "next", "supportsAlternative", "isCompatibleWithRequest", "getAlternatives", "hasNext", "next", "supportsAlternative"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}