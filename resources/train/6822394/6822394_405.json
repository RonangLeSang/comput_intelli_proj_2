{"test_class": {"identifier": "AbstractRMInterceptorTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private IMocksControl control;", "modifier": "private", "type": "IMocksControl", "declarator": "control", "var_name": "control"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/ws/rm/src/test/java/org/apache/cxf/ws/rm/AbstractRMInterceptorTest.java"}, "test_case": {"identifier": "testHandleMessageRMException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleMessageRMException() {\n        RMInterceptor interceptor = new RMInterceptor();\n        Message message = control.createMock(Message.class);\n        RMException rme = control.createMock(RMException.class);      \n        interceptor.setRMException(rme);\n        control.replay();\n        try {\n            interceptor.handleMessage(message);\n            fail(\"Expected Fault not thrown.\");\n        } catch (Fault f) {\n            assertSame(rme, f.getCause());            \n        }\n    }", "signature": "void testHandleMessageRMException()", "full_signature": "@Test public void testHandleMessageRMException()", "class_method_signature": "AbstractRMInterceptorTest.testHandleMessageRMException()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "setRMException", "replay", "handleMessage", "fail", "assertSame", "getCause"]}, "focal_class": {"identifier": "AbstractRMInterceptor", "superclass": "extends AbstractPhaseInterceptor<T>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogUtils.getL7dLogger(AbstractRMInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtils.getL7dLogger(AbstractRMInterceptor.class)", "var_name": "LOG"}, {"original_string": "private RMManager manager;", "modifier": "private", "type": "RMManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private Bus bus;", "modifier": "private", "type": "Bus", "declarator": "bus", "var_name": "bus"}], "methods": [{"identifier": "AbstractRMInterceptor", "parameters": "(String phase)", "modifiers": "protected", "return": "", "signature": " AbstractRMInterceptor(String phase)", "full_signature": "protected  AbstractRMInterceptor(String phase)", "class_method_signature": "AbstractRMInterceptor.AbstractRMInterceptor(String phase)", "testcase": false, "constructor": true}, {"identifier": "AbstractRMInterceptor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " AbstractRMInterceptor()", "full_signature": "protected  AbstractRMInterceptor()", "class_method_signature": "AbstractRMInterceptor.AbstractRMInterceptor()", "testcase": false, "constructor": true}, {"identifier": "getManager", "parameters": "()", "modifiers": "public", "return": "RMManager", "signature": "RMManager getManager()", "full_signature": "public RMManager getManager()", "class_method_signature": "AbstractRMInterceptor.getManager()", "testcase": false, "constructor": false}, {"identifier": "setManager", "parameters": "(RMManager m)", "modifiers": "public", "return": "void", "signature": "void setManager(RMManager m)", "full_signature": "public void setManager(RMManager m)", "class_method_signature": "AbstractRMInterceptor.setManager(RMManager m)", "testcase": false, "constructor": false}, {"identifier": "getBus", "parameters": "()", "modifiers": "public", "return": "Bus", "signature": "Bus getBus()", "full_signature": "public Bus getBus()", "class_method_signature": "AbstractRMInterceptor.getBus()", "testcase": false, "constructor": false}, {"identifier": "setBus", "parameters": "(Bus bus)", "modifiers": "public", "return": "void", "signature": "void setBus(Bus bus)", "full_signature": "public void setBus(Bus bus)", "class_method_signature": "AbstractRMInterceptor.setBus(Bus bus)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(Message msg)", "modifiers": "public", "return": "void", "signature": "void handleMessage(Message msg)", "full_signature": "public void handleMessage(Message msg)", "class_method_signature": "AbstractRMInterceptor.handleMessage(Message msg)", "testcase": false, "constructor": false}, {"identifier": "assertReliability", "parameters": "(Message message)", "modifiers": "", "return": "void", "signature": "void assertReliability(Message message)", "full_signature": " void assertReliability(Message message)", "class_method_signature": "AbstractRMInterceptor.assertReliability(Message message)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(Message message)", "modifiers": "protected abstract", "return": "void", "signature": "void handle(Message message)", "full_signature": "protected abstract void handle(Message message)", "class_method_signature": "AbstractRMInterceptor.handle(Message message)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/AbstractRMInterceptor.java"}, "focal_method": {"identifier": "handleMessage", "parameters": "(Message msg)", "modifiers": "public", "return": "void", "body": "public void handleMessage(Message msg) throws Fault {\n        \n        try {\n            handle(msg);\n        } catch (SequenceFault sf) {\n            \n            // log the fault as it may not be reported back to the client\n            \n            Endpoint e = msg.getExchange().get(Endpoint.class);\n            Binding b = null;\n            if (null != e) {\n                b = e.getBinding();\n            }\n            if (null != b) {\n                RMManager m = getManager();\n                LOG.fine(\"Manager: \" + m);\n                BindingFaultFactory bff = m.getBindingFaultFactory(b);\n                Fault f = bff.createFault(sf, msg);\n                LogUtils.log(LOG, Level.SEVERE, \"SEQ_FAULT_MSG\", bff.toString(f));\n                throw f;\n            }\n            throw new Fault(sf);\n        }  catch (RMException ex) {\n            throw new Fault(ex);\n        }\n    }", "signature": "void handleMessage(Message msg)", "full_signature": "public void handleMessage(Message msg)", "class_method_signature": "AbstractRMInterceptor.handleMessage(Message msg)", "testcase": false, "constructor": false, "invocations": ["handle", "get", "getExchange", "getBinding", "getManager", "fine", "getBindingFaultFactory", "createFault", "log", "toString"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}