{"test_class": {"identifier": "ReadOnlyFileStorageTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private ReadOnlyFileStorage storage;", "modifier": "private", "type": "ReadOnlyFileStorage", "declarator": "storage", "var_name": "storage"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/management-web/src/test/java/org/apache/cxf/management/web/logging/ReadOnlyFileStorageTest.java"}, "test_case": {"identifier": "testReadRecordsWithMultiLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadRecordsWithMultiLines() throws Exception {\n        \n        storage.setLogLocation(getClass().getResource(\"logs/2011-01-23-karaf.log\").toURI().getPath());\n        List<LogRecord> recordsFirstPage1 = readPage(1, 10, 10);\n        \n        List<LogRecord> recordsLastPage1 = readPage(2, 10, 10);\n        \n        List<LogRecord> recordsFirstPage2 = readPage(1, 10, 10);\n        compareRecords(recordsFirstPage1, recordsFirstPage2);\n        \n        List<LogRecord> recordsLastPage2 = readPage(2, 10, 10);\n        compareRecords(recordsLastPage1, recordsLastPage2);\n        \n        LogRecord recordWithExceptionInMessage = recordsFirstPage1.get(2);\n        assertEquals(LogLevel.ERROR, recordWithExceptionInMessage.getLevel());\n        assertTrue(recordWithExceptionInMessage.getMessage()\n                   .contains(\"mvn:org.apache.cxf/cxf-bundle/\"));\n        assertTrue(recordWithExceptionInMessage.getMessage()\n                   .contains(\"Caused by: org.osgi.framework.BundleException\"));\n    }", "signature": "void testReadRecordsWithMultiLines()", "full_signature": "@Test public void testReadRecordsWithMultiLines()", "class_method_signature": "ReadOnlyFileStorageTest.testReadRecordsWithMultiLines()", "testcase": true, "constructor": false, "invocations": ["setLogLocation", "getPath", "toURI", "getResource", "getClass", "readPage", "readPage", "readPage", "compareRecords", "readPage", "compareRecords", "get", "assertEquals", "getLevel", "assertTrue", "contains", "getMessage", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "ReadOnlyFileStorage", "superclass": "", "interfaces": "implements ReadableLogStorage", "fields": [{"original_string": "public static final String LEVEL_PROPERTY = \"level\";", "modifier": "public static final", "type": "String", "declarator": "LEVEL_PROPERTY = \"level\"", "var_name": "LEVEL_PROPERTY"}, {"original_string": "public static final String DATE_PROPERTY = \"date\";", "modifier": "public static final", "type": "String", "declarator": "DATE_PROPERTY = \"date\"", "var_name": "DATE_PROPERTY"}, {"original_string": "public static final String MESSAGE_PROPERTY = \"message\";", "modifier": "public static final", "type": "String", "declarator": "MESSAGE_PROPERTY = \"message\"", "var_name": "MESSAGE_PROPERTY"}, {"original_string": "public static final String CATEGORY_PROPERTY = \"category\";", "modifier": "public static final", "type": "String", "declarator": "CATEGORY_PROPERTY = \"category\"", "var_name": "CATEGORY_PROPERTY"}, {"original_string": "public static final String THREAD_PROPERTY = \"thread\";", "modifier": "public static final", "type": "String", "declarator": "THREAD_PROPERTY = \"thread\"", "var_name": "THREAD_PROPERTY"}, {"original_string": "public static final String DATE_ONLY_FORMAT = \"yyyy-MM-dd\";", "modifier": "public static final", "type": "String", "declarator": "DATE_ONLY_FORMAT = \"yyyy-MM-dd\"", "var_name": "DATE_ONLY_FORMAT"}, {"original_string": "private static final String LINE_SEP = SystemPropertyAction.getProperty(\"line.separator\");", "modifier": "private static final", "type": "String", "declarator": "LINE_SEP = SystemPropertyAction.getProperty(\"line.separator\")", "var_name": "LINE_SEP"}, {"original_string": "private static final String DEFAULT_COLUMN_SEP = \"|\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_COLUMN_SEP = \"|\"", "var_name": "DEFAULT_COLUMN_SEP"}, {"original_string": "private String columnSep = DEFAULT_COLUMN_SEP;", "modifier": "private", "type": "String", "declarator": "columnSep = DEFAULT_COLUMN_SEP", "var_name": "columnSep"}, {"original_string": "private int numberOfColumns;", "modifier": "private", "type": "int", "declarator": "numberOfColumns", "var_name": "numberOfColumns"}, {"original_string": "private boolean startsFromSeparator;", "modifier": "private", "type": "boolean", "declarator": "startsFromSeparator", "var_name": "startsFromSeparator"}, {"original_string": "private boolean endsWithSeparator;", "modifier": "private", "type": "boolean", "declarator": "endsWithSeparator", "var_name": "endsWithSeparator"}, {"original_string": "private SimpleDateFormat recordDateFormat;", "modifier": "private", "type": "SimpleDateFormat", "declarator": "recordDateFormat", "var_name": "recordDateFormat"}, {"original_string": "private boolean useFileModifiedDate;", "modifier": "private", "type": "boolean", "declarator": "useFileModifiedDate", "var_name": "useFileModifiedDate"}, {"original_string": "private Pattern fileNameDatePattern;", "modifier": "private", "type": "Pattern", "declarator": "fileNameDatePattern", "var_name": "fileNameDatePattern"}, {"original_string": "private String fileNameDateFormat;", "modifier": "private", "type": "String", "declarator": "fileNameDateFormat", "var_name": "fileNameDateFormat"}, {"original_string": "private File logDirectory;", "modifier": "private", "type": "File", "declarator": "logDirectory", "var_name": "logDirectory"}, {"original_string": "private Comparator<String> fileNameComparator;", "modifier": "private", "type": "Comparator<String>", "declarator": "fileNameComparator", "var_name": "fileNameComparator"}, {"original_string": "private Map<Integer, String> columnsMap;", "modifier": "private", "type": "Map<Integer, String>", "declarator": "columnsMap", "var_name": "columnsMap"}, {"original_string": "private List<FileInfo> logFiles = new LinkedList<FileInfo>();", "modifier": "private", "type": "List<FileInfo>", "declarator": "logFiles = new LinkedList<FileInfo>()", "var_name": "logFiles"}, {"original_string": "private Map<String, String> levelsMap;", "modifier": "private", "type": "Map<String, String>", "declarator": "levelsMap", "var_name": "levelsMap"}, {"original_string": "private Map<Integer, PageInfo> pagesMap = new HashMap<Integer, PageInfo>();", "modifier": "private", "type": "Map<Integer, PageInfo>", "declarator": "pagesMap = new HashMap<Integer, PageInfo>()", "var_name": "pagesMap"}], "methods": [{"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "ReadOnlyFileStorage.getSize()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(List<LogRecord> list, \n                     SearchCondition<LogRecord> condition, \n                     int pageNumber,\n                     int pageSize)", "modifiers": "public synchronized", "return": "int", "signature": "int load(List<LogRecord> list, \n                     SearchCondition<LogRecord> condition, \n                     int pageNumber,\n                     int pageSize)", "full_signature": "public synchronized int load(List<LogRecord> list, \n                     SearchCondition<LogRecord> condition, \n                     int pageNumber,\n                     int pageSize)", "class_method_signature": "ReadOnlyFileStorage.load(List<LogRecord> list, \n                     SearchCondition<LogRecord> condition, \n                     int pageNumber,\n                     int pageSize)", "testcase": false, "constructor": false}, {"identifier": "getNextLogFileInfo", "parameters": "(FileInfo logFileInfo, boolean firstTry)", "modifiers": "private", "return": "FileInfo", "signature": "FileInfo getNextLogFileInfo(FileInfo logFileInfo, boolean firstTry)", "full_signature": "private FileInfo getNextLogFileInfo(FileInfo logFileInfo, boolean firstTry)", "class_method_signature": "ReadOnlyFileStorage.getNextLogFileInfo(FileInfo logFileInfo, boolean firstTry)", "testcase": false, "constructor": false}, {"identifier": "setFilePosition", "parameters": "(FileInfo fileInfo, long pos)", "modifiers": "private", "return": "FileInfo", "signature": "FileInfo setFilePosition(FileInfo fileInfo, long pos)", "full_signature": "private FileInfo setFilePosition(FileInfo fileInfo, long pos)", "class_method_signature": "ReadOnlyFileStorage.setFilePosition(FileInfo fileInfo, long pos)", "testcase": false, "constructor": false}, {"identifier": "getLogFileInfo", "parameters": "(int pageNumber)", "modifiers": "private", "return": "FileInfo", "signature": "FileInfo getLogFileInfo(int pageNumber)", "full_signature": "private FileInfo getLogFileInfo(int pageNumber)", "class_method_signature": "ReadOnlyFileStorage.getLogFileInfo(int pageNumber)", "testcase": false, "constructor": false}, {"identifier": "saveNextPagePosition", "parameters": "(int pageNumber, FileInfo fileInfo)", "modifiers": "private", "return": "void", "signature": "void saveNextPagePosition(int pageNumber, FileInfo fileInfo)", "full_signature": "private void saveNextPagePosition(int pageNumber, FileInfo fileInfo)", "class_method_signature": "ReadOnlyFileStorage.saveNextPagePosition(int pageNumber, FileInfo fileInfo)", "testcase": false, "constructor": false}, {"identifier": "readRecord", "parameters": "(FileInfo logFileInfo)", "modifiers": "protected", "return": "LogRecord", "signature": "LogRecord readRecord(FileInfo logFileInfo)", "full_signature": "protected LogRecord readRecord(FileInfo logFileInfo)", "class_method_signature": "ReadOnlyFileStorage.readRecord(FileInfo logFileInfo)", "testcase": false, "constructor": false}, {"identifier": "createRecord", "parameters": "(Map<Integer, String> map, FileInfo logFileInfo)", "modifiers": "protected", "return": "LogRecord", "signature": "LogRecord createRecord(Map<Integer, String> map, FileInfo logFileInfo)", "full_signature": "protected LogRecord createRecord(Map<Integer, String> map, FileInfo logFileInfo)", "class_method_signature": "ReadOnlyFileStorage.createRecord(Map<Integer, String> map, FileInfo logFileInfo)", "testcase": false, "constructor": false}, {"identifier": "setLogRecordLevel", "parameters": "(LogRecord record, String logLevel)", "modifiers": "protected", "return": "void", "signature": "void setLogRecordLevel(LogRecord record, String logLevel)", "full_signature": "protected void setLogRecordLevel(LogRecord record, String logLevel)", "class_method_signature": "ReadOnlyFileStorage.setLogRecordLevel(LogRecord record, String logLevel)", "testcase": false, "constructor": false}, {"identifier": "setLogRecordDate", "parameters": "(LogRecord record, String logDate, FileInfo logFileInfo)", "modifiers": "protected", "return": "void", "signature": "void setLogRecordDate(LogRecord record, String logDate, FileInfo logFileInfo)", "full_signature": "protected void setLogRecordDate(LogRecord record, String logDate, FileInfo logFileInfo)", "class_method_signature": "ReadOnlyFileStorage.setLogRecordDate(LogRecord record, String logDate, FileInfo logFileInfo)", "testcase": false, "constructor": false}, {"identifier": "readTheLine", "parameters": "(RandomAccessFile logFile, Map<Integer, String> map, int columnIndex)", "modifiers": "protected", "return": "void", "signature": "void readTheLine(RandomAccessFile logFile, Map<Integer, String> map, int columnIndex)", "full_signature": "protected void readTheLine(RandomAccessFile logFile, Map<Integer, String> map, int columnIndex)", "class_method_signature": "ReadOnlyFileStorage.readTheLine(RandomAccessFile logFile, Map<Integer, String> map, int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "setColumnSep", "parameters": "(String columnSep)", "modifiers": "public", "return": "void", "signature": "void setColumnSep(String columnSep)", "full_signature": "public void setColumnSep(String columnSep)", "class_method_signature": "ReadOnlyFileStorage.setColumnSep(String columnSep)", "testcase": false, "constructor": false}, {"identifier": "setNumberOfColumns", "parameters": "(String number)", "modifiers": "public", "return": "void", "signature": "void setNumberOfColumns(String number)", "full_signature": "public void setNumberOfColumns(String number)", "class_method_signature": "ReadOnlyFileStorage.setNumberOfColumns(String number)", "testcase": false, "constructor": false}, {"identifier": "setColumnsMap", "parameters": "(Map<Integer, String> columnsMap)", "modifiers": "public", "return": "void", "signature": "void setColumnsMap(Map<Integer, String> columnsMap)", "full_signature": "public void setColumnsMap(Map<Integer, String> columnsMap)", "class_method_signature": "ReadOnlyFileStorage.setColumnsMap(Map<Integer, String> columnsMap)", "testcase": false, "constructor": false}, {"identifier": "setLogLocations", "parameters": "(List<String> locations)", "modifiers": "public", "return": "void", "signature": "void setLogLocations(List<String> locations)", "full_signature": "public void setLogLocations(List<String> locations)", "class_method_signature": "ReadOnlyFileStorage.setLogLocations(List<String> locations)", "testcase": false, "constructor": false}, {"identifier": "processNewLogFile", "parameters": "(File file)", "modifiers": "private", "return": "void", "signature": "void processNewLogFile(File file)", "full_signature": "private void processNewLogFile(File file)", "class_method_signature": "ReadOnlyFileStorage.processNewLogFile(File file)", "testcase": false, "constructor": false}, {"identifier": "getDateFromFileName", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String getDateFromFileName(String name)", "full_signature": "private String getDateFromFileName(String name)", "class_method_signature": "ReadOnlyFileStorage.getDateFromFileName(String name)", "testcase": false, "constructor": false}, {"identifier": "getLogDateFormat", "parameters": "()", "modifiers": "private", "return": "SimpleDateFormat", "signature": "SimpleDateFormat getLogDateFormat()", "full_signature": "private SimpleDateFormat getLogDateFormat()", "class_method_signature": "ReadOnlyFileStorage.getLogDateFormat()", "testcase": false, "constructor": false}, {"identifier": "getRealLocation", "parameters": "(String location)", "modifiers": "private", "return": "String", "signature": "String getRealLocation(String location)", "full_signature": "private String getRealLocation(String location)", "class_method_signature": "ReadOnlyFileStorage.getRealLocation(String location)", "testcase": false, "constructor": false}, {"identifier": "setLogLocation", "parameters": "(String location)", "modifiers": "public", "return": "void", "signature": "void setLogLocation(String location)", "full_signature": "public void setLogLocation(String location)", "class_method_signature": "ReadOnlyFileStorage.setLogLocation(String location)", "testcase": false, "constructor": false}, {"identifier": "skipIgnorableRecords", "parameters": "(RandomAccessFile file)", "modifiers": "private", "return": "void", "signature": "void skipIgnorableRecords(RandomAccessFile file)", "full_signature": "private void skipIgnorableRecords(RandomAccessFile file)", "class_method_signature": "ReadOnlyFileStorage.skipIgnorableRecords(RandomAccessFile file)", "testcase": false, "constructor": false}, {"identifier": "setRecordDateFormat", "parameters": "(String format)", "modifiers": "public", "return": "void", "signature": "void setRecordDateFormat(String format)", "full_signature": "public void setRecordDateFormat(String format)", "class_method_signature": "ReadOnlyFileStorage.setRecordDateFormat(String format)", "testcase": false, "constructor": false}, {"identifier": "setLevelsMap", "parameters": "(Map<String, String> map)", "modifiers": "public", "return": "void", "signature": "void setLevelsMap(Map<String, String> map)", "full_signature": "public void setLevelsMap(Map<String, String> map)", "class_method_signature": "ReadOnlyFileStorage.setLevelsMap(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "setFileNameComparator", "parameters": "(Comparator<String> comp)", "modifiers": "public", "return": "void", "signature": "void setFileNameComparator(Comparator<String> comp)", "full_signature": "public void setFileNameComparator(Comparator<String> comp)", "class_method_signature": "ReadOnlyFileStorage.setFileNameComparator(Comparator<String> comp)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ReadOnlyFileStorage.close()", "testcase": false, "constructor": false}, {"identifier": "setUseFileModifiedDate", "parameters": "(boolean useFileModifiedDate)", "modifiers": "public", "return": "void", "signature": "void setUseFileModifiedDate(boolean useFileModifiedDate)", "full_signature": "public void setUseFileModifiedDate(boolean useFileModifiedDate)", "class_method_signature": "ReadOnlyFileStorage.setUseFileModifiedDate(boolean useFileModifiedDate)", "testcase": false, "constructor": false}, {"identifier": "scanLogDirectory", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean scanLogDirectory()", "full_signature": "private boolean scanLogDirectory()", "class_method_signature": "ReadOnlyFileStorage.scanLogDirectory()", "testcase": false, "constructor": false}, {"identifier": "setFileNameDatePattern", "parameters": "(String fileNameDatePattern)", "modifiers": "public", "return": "void", "signature": "void setFileNameDatePattern(String fileNameDatePattern)", "full_signature": "public void setFileNameDatePattern(String fileNameDatePattern)", "class_method_signature": "ReadOnlyFileStorage.setFileNameDatePattern(String fileNameDatePattern)", "testcase": false, "constructor": false}, {"identifier": "setFileNameDateFormat", "parameters": "(String fileNameDateFormat)", "modifiers": "public", "return": "void", "signature": "void setFileNameDateFormat(String fileNameDateFormat)", "full_signature": "public void setFileNameDateFormat(String fileNameDateFormat)", "class_method_signature": "ReadOnlyFileStorage.setFileNameDateFormat(String fileNameDateFormat)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/management-web/src/main/java/org/apache/cxf/management/web/logging/ReadOnlyFileStorage.java"}, "focal_method": {"identifier": "setLogLocation", "parameters": "(String location)", "modifiers": "public", "return": "void", "body": "public void setLogLocation(String location) {\n        String realPath = getRealLocation(location);\n        File file = new File(realPath);\n        if (file.isDirectory()) {\n            logDirectory = file;\n        } else {\n            setLogLocations(Collections.singletonList(realPath));\n        }\n    }", "signature": "void setLogLocation(String location)", "full_signature": "public void setLogLocation(String location)", "class_method_signature": "ReadOnlyFileStorage.setLogLocation(String location)", "testcase": false, "constructor": false, "invocations": ["getRealLocation", "isDirectory", "setLogLocations", "singletonList"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}