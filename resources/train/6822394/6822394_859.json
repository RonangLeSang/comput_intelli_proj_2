{"test_class": {"identifier": "SourceProviderTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/provider/SourceProviderTest.java"}, "test_case": {"identifier": "testReadFrom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadFrom() throws Exception {\n        SourceProvider<Object> p = new TestSourceProvider<Object>();\n        assertSame(StreamSource.class, verifyRead(p, StreamSource.class).getClass());\n        assertSame(StaxSource.class, verifyRead(p, Source.class).getClass());\n        assertSame(StaxSource.class, verifyRead(p, SAXSource.class).getClass());\n        assertSame(StaxSource.class, verifyRead(p, StaxSource.class).getClass());\n        assertSame(DOMSource.class, verifyRead(p, DOMSource.class).getClass());\n        assertTrue(Document.class.isAssignableFrom(verifyRead(p, Document.class).getClass()));\n    }", "signature": "void testReadFrom()", "full_signature": "@Test public void testReadFrom()", "class_method_signature": "SourceProviderTest.testReadFrom()", "testcase": true, "constructor": false, "invocations": ["assertSame", "getClass", "verifyRead", "assertSame", "getClass", "verifyRead", "assertSame", "getClass", "verifyRead", "assertSame", "getClass", "verifyRead", "assertSame", "getClass", "verifyRead", "assertTrue", "isAssignableFrom", "getClass", "verifyRead"]}, "focal_class": {"identifier": "SourceProvider", "superclass": "extends AbstractConfigurableProvider", "interfaces": "implements \n    MessageBodyReader<T>, MessageBodyWriter<T>", "fields": [{"original_string": "private static final String PREFERRED_FORMAT = \"source-preferred-format\";", "modifier": "private static final", "type": "String", "declarator": "PREFERRED_FORMAT = \"source-preferred-format\"", "var_name": "PREFERRED_FORMAT"}, {"original_string": "@Context\n    private MessageContext context;", "modifier": "@Context\n    private", "type": "MessageContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mt)", "modifiers": "public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mt)", "full_signature": "public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mt)", "class_method_signature": "SourceProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mt)", "testcase": false, "constructor": false}, {"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mt)", "modifiers": "public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mt)", "full_signature": "public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mt)", "class_method_signature": "SourceProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mt)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is)", "modifiers": "public", "return": "T", "signature": "T readFrom(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is)", "full_signature": "public T readFrom(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is)", "class_method_signature": "SourceProvider.readFrom(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getReader", "parameters": "(InputStream is)", "modifiers": "protected", "return": "XMLStreamReader", "signature": "XMLStreamReader getReader(InputStream is)", "full_signature": "protected XMLStreamReader getReader(InputStream is)", "class_method_signature": "SourceProvider.getReader(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getRealStream", "parameters": "(InputStream is)", "modifiers": "protected", "return": "InputStream", "signature": "InputStream getRealStream(InputStream is)", "full_signature": "protected InputStream getRealStream(InputStream is)", "class_method_signature": "SourceProvider.getRealStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getStreamFromReader", "parameters": "(XMLStreamReader input)", "modifiers": "private", "return": "InputStream", "signature": "InputStream getStreamFromReader(XMLStreamReader input)", "full_signature": "private InputStream getStreamFromReader(XMLStreamReader input)", "class_method_signature": "SourceProvider.getStreamFromReader(XMLStreamReader input)", "testcase": false, "constructor": false}, {"identifier": "getReaderFromMessage", "parameters": "()", "modifiers": "protected", "return": "XMLStreamReader", "signature": "XMLStreamReader getReaderFromMessage()", "full_signature": "protected XMLStreamReader getReaderFromMessage()", "class_method_signature": "SourceProvider.getReaderFromMessage()", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(T source, Class<?> clazz, Type genericType, Annotation[] annotations,  \n        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os)", "modifiers": "public", "return": "void", "signature": "void writeTo(T source, Class<?> clazz, Type genericType, Annotation[] annotations,  \n        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os)", "full_signature": "public void writeTo(T source, Class<?> clazz, Type genericType, Annotation[] annotations,  \n        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os)", "class_method_signature": "SourceProvider.writeTo(T source, Class<?> clazz, Type genericType, Annotation[] annotations,  \n        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(T source, Class<?> type, Type genericType, Annotation[] annotations, \n                        MediaType mt)", "modifiers": "public", "return": "long", "signature": "long getSize(T source, Class<?> type, Type genericType, Annotation[] annotations, \n                        MediaType mt)", "full_signature": "public long getSize(T source, Class<?> type, Type genericType, Annotation[] annotations, \n                        MediaType mt)", "class_method_signature": "SourceProvider.getSize(T source, Class<?> type, Type genericType, Annotation[] annotations, \n                        MediaType mt)", "testcase": false, "constructor": false}, {"identifier": "getPreferredSource", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getPreferredSource()", "full_signature": "protected String getPreferredSource()", "class_method_signature": "SourceProvider.getPreferredSource()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "protected", "return": "MessageContext", "signature": "MessageContext getContext()", "full_signature": "protected MessageContext getContext()", "class_method_signature": "SourceProvider.getContext()", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/SourceProvider.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is)", "modifiers": "public", "return": "T", "body": "public T readFrom(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is) \n        throws IOException {\n        \n        Class<?> theSource = source;\n        if (theSource == Source.class) {\n            String s = getPreferredSource();\n            if (\"sax\".equalsIgnoreCase(s) || \"cxf.stax\".equalsIgnoreCase(s)) {\n                theSource = SAXSource.class;\n            }\n        }\n        \n        if (DOMSource.class.isAssignableFrom(theSource) || Document.class.isAssignableFrom(theSource)) {\n            \n            boolean docRequired = Document.class.isAssignableFrom(theSource);\n            XMLStreamReader reader = getReader(is);\n            try {\n                Document doc = StaxUtils.read(reader);\n                return source.cast(docRequired ? doc : new DOMSource(doc));\n            } catch (DepthExceededStaxException e) {\n                throw new WebApplicationException(413);\n            } catch (Exception e) {\n                IOException ioex = new IOException(\"Problem creating a Source object\");\n                ioex.setStackTrace(e.getStackTrace());\n                throw ioex;\n            } finally {\n                try {\n                    reader.close();\n                } catch (XMLStreamException e) {\n                    //ignore\n                }\n            }\n        } else if (SAXSource.class.isAssignableFrom(theSource)\n                  || StaxSource.class.isAssignableFrom(theSource)) {\n            return source.cast(new StaxSource(getReader(is)));\n        } else if (StreamSource.class.isAssignableFrom(theSource)\n                   || Source.class.isAssignableFrom(theSource)) {\n            return source.cast(new StreamSource(getRealStream(is)));\n        } else if (XMLSource.class.isAssignableFrom(theSource)) {\n            return source.cast(new XMLSource(getRealStream(is)));\n        }\n        \n        throw new IOException(\"Unrecognized source\");\n    }", "signature": "T readFrom(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is)", "full_signature": "public T readFrom(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is)", "class_method_signature": "SourceProvider.readFrom(Class<T> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is)", "testcase": false, "constructor": false, "invocations": ["getPreferredSource", "equalsIgnoreCase", "equalsIgnoreCase", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "getReader", "read", "cast", "setStackTrace", "getStackTrace", "close", "isAssignableFrom", "isAssignableFrom", "cast", "getReader", "isAssignableFrom", "isAssignableFrom", "cast", "getRealStream", "isAssignableFrom", "cast", "getRealStream"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}