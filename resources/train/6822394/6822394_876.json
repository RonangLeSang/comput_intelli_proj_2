{"test_class": {"identifier": "XMLSourceTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/ext/xml/XMLSourceTest.java"}, "test_case": {"identifier": "testGetNodeAsSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNodeAsSource() {\n        InputStream is = new ByteArrayInputStream(\"<foo><bar/></foo>\".getBytes());\n        XMLSource xp = new XMLSource(is);\n        Source element = xp.getNode(\"/foo/bar\", Source.class);\n        assertNotNull(element);\n    }", "signature": "void testGetNodeAsSource()", "full_signature": "@Test public void testGetNodeAsSource()", "class_method_signature": "XMLSourceTest.testGetNodeAsSource()", "testcase": true, "constructor": false, "invocations": ["getBytes", "getNode", "assertNotNull"]}, "focal_class": {"identifier": "XMLSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogUtils.getL7dLogger(XMLSource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtils.getL7dLogger(XMLSource.class)", "var_name": "LOG"}, {"original_string": "private static final ResourceBundle BUNDLE = BundleUtils.getBundle(XMLSource.class);", "modifier": "private static final", "type": "ResourceBundle", "declarator": "BUNDLE = BundleUtils.getBundle(XMLSource.class)", "var_name": "BUNDLE"}, {"original_string": "private static final String XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";", "modifier": "private static final", "type": "String", "declarator": "XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\"", "var_name": "XML_NAMESPACE"}, {"original_string": "private InputStream stream;", "modifier": "private", "type": "InputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private boolean buffering;", "modifier": "private", "type": "boolean", "declarator": "buffering", "var_name": "buffering"}, {"original_string": "private boolean markFailed;", "modifier": "private", "type": "boolean", "declarator": "markFailed", "var_name": "markFailed"}], "methods": [{"identifier": "XMLSource", "parameters": "(InputStream is)", "modifiers": "public", "return": "", "signature": " XMLSource(InputStream is)", "full_signature": "public  XMLSource(InputStream is)", "class_method_signature": "XMLSource.XMLSource(InputStream is)", "testcase": false, "constructor": true}, {"identifier": "setBuffering", "parameters": "(boolean enable)", "modifiers": "public", "return": "void", "signature": "void setBuffering(boolean enable)", "full_signature": "public void setBuffering(boolean enable)", "class_method_signature": "XMLSource.setBuffering(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(String expression, Class<T> cls)", "modifiers": "public", "return": "T", "signature": "T getNode(String expression, Class<T> cls)", "full_signature": "public T getNode(String expression, Class<T> cls)", "class_method_signature": "XMLSource.getNode(String expression, Class<T> cls)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(String expression, Map<String, String> namespaces, Class<T> cls)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getNode(String expression, Map<String, String> namespaces, Class<T> cls)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getNode(String expression, Map<String, String> namespaces, Class<T> cls)", "class_method_signature": "XMLSource.getNode(String expression, Map<String, String> namespaces, Class<T> cls)", "testcase": false, "constructor": false}, {"identifier": "getNodes", "parameters": "(String expression, Class<T> cls)", "modifiers": "public", "return": "T[]", "signature": "T[] getNodes(String expression, Class<T> cls)", "full_signature": "public T[] getNodes(String expression, Class<T> cls)", "class_method_signature": "XMLSource.getNodes(String expression, Class<T> cls)", "testcase": false, "constructor": false}, {"identifier": "getNodes", "parameters": "(String expression, Map<String, String> namespaces, Class<T> cls)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T[]", "signature": "T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls)", "full_signature": "@SuppressWarnings(\"unchecked\") public T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls)", "class_method_signature": "XMLSource.getNodes(String expression, Map<String, String> namespaces, Class<T> cls)", "testcase": false, "constructor": false}, {"identifier": "getLink", "parameters": "(String expression)", "modifiers": "public", "return": "URI", "signature": "URI getLink(String expression)", "full_signature": "public URI getLink(String expression)", "class_method_signature": "XMLSource.getLink(String expression)", "testcase": false, "constructor": false}, {"identifier": "getLink", "parameters": "(String expression, Map<String, String> namespaces)", "modifiers": "public", "return": "URI", "signature": "URI getLink(String expression, Map<String, String> namespaces)", "full_signature": "public URI getLink(String expression, Map<String, String> namespaces)", "class_method_signature": "XMLSource.getLink(String expression, Map<String, String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "getLinks", "parameters": "(String expression, Map<String, String> namespaces)", "modifiers": "public", "return": "URI[]", "signature": "URI[] getLinks(String expression, Map<String, String> namespaces)", "full_signature": "public URI[] getLinks(String expression, Map<String, String> namespaces)", "class_method_signature": "XMLSource.getLinks(String expression, Map<String, String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "getBaseURI", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getBaseURI()", "full_signature": "public URI getBaseURI()", "class_method_signature": "XMLSource.getBaseURI()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String expression)", "modifiers": "public", "return": "String", "signature": "String getValue(String expression)", "full_signature": "public String getValue(String expression)", "class_method_signature": "XMLSource.getValue(String expression)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String expression, Map<String, String> namespaces)", "modifiers": "public", "return": "String", "signature": "String getValue(String expression, Map<String, String> namespaces)", "full_signature": "public String getValue(String expression, Map<String, String> namespaces)", "class_method_signature": "XMLSource.getValue(String expression, Map<String, String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(String expression)", "modifiers": "public", "return": "String[]", "signature": "String[] getValues(String expression)", "full_signature": "public String[] getValues(String expression)", "class_method_signature": "XMLSource.getValues(String expression)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(String expression, Map<String, String> namespaces)", "modifiers": "public", "return": "String[]", "signature": "String[] getValues(String expression, Map<String, String> namespaces)", "full_signature": "public String[] getValues(String expression, Map<String, String> namespaces)", "class_method_signature": "XMLSource.getValues(String expression, Map<String, String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String expression, Map<String, String> namespaces, Class<T> cls)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getValue(String expression, Map<String, String> namespaces, Class<T> cls)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getValue(String expression, Map<String, String> namespaces, Class<T> cls)", "class_method_signature": "XMLSource.getValue(String expression, Map<String, String> namespaces, Class<T> cls)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String expression, Map<String, String> namespaces, QName type)", "modifiers": "private", "return": "Object", "signature": "Object evaluate(String expression, Map<String, String> namespaces, QName type)", "full_signature": "private Object evaluate(String expression, Map<String, String> namespaces, QName type)", "class_method_signature": "XMLSource.evaluate(String expression, Map<String, String> namespaces, QName type)", "testcase": false, "constructor": false}, {"identifier": "readPrimitiveValue", "parameters": "(Node node, Class<T> cls)", "modifiers": "private", "return": "Object", "signature": "Object readPrimitiveValue(Node node, Class<T> cls)", "full_signature": "private Object readPrimitiveValue(Node node, Class<T> cls)", "class_method_signature": "XMLSource.readPrimitiveValue(Node node, Class<T> cls)", "testcase": false, "constructor": false}, {"identifier": "readNode", "parameters": "(Node node, Class<T> cls)", "modifiers": "private", "return": "T", "signature": "T readNode(Node node, Class<T> cls)", "full_signature": "private T readNode(Node node, Class<T> cls)", "class_method_signature": "XMLSource.readNode(Node node, Class<T> cls)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "private", "return": "InputSource", "signature": "InputSource getSource()", "full_signature": "private InputSource getSource()", "class_method_signature": "XMLSource.getSource()", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java"}, "focal_method": {"identifier": "getNode", "parameters": "(String expression, Class<T> cls)", "modifiers": "public", "return": "T", "body": "public <T> T getNode(String expression, Class<T> cls) {\n        return getNode(expression, CastUtils.cast(Collections.emptyMap(), String.class, String.class), cls);\n    }", "signature": "T getNode(String expression, Class<T> cls)", "full_signature": "public T getNode(String expression, Class<T> cls)", "class_method_signature": "XMLSource.getNode(String expression, Class<T> cls)", "testcase": false, "constructor": false, "invocations": ["getNode", "cast", "emptyMap"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}