{"test_class": {"identifier": "SQLPrinterVisitorTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private FiqlParser<Condition> parser = new FiqlParser<Condition>(Condition.class);", "modifier": "private", "type": "FiqlParser<Condition>", "declarator": "parser = new FiqlParser<Condition>(Condition.class)", "var_name": "parser"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/rs/extensions/search/src/test/java/org/apache/cxf/jaxrs/ext/search/sql/SQLPrinterVisitorTest.java"}, "test_case": {"identifier": "testSQL3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSQL3() throws SearchParseException {\n        SearchCondition<Condition> filter = parser.parse(\"name==foo*;(name!=*bar,level=gt=10)\");\n        SQLPrinterVisitor<Condition> visitor = new SQLPrinterVisitor<Condition>(\"table\");\n        filter.accept(visitor);\n        String sql = visitor.getQuery();\n        assertTrue((\"SELECT * FROM table WHERE (name LIKE 'foo%') AND ((name NOT LIKE '%bar') \"\n                   + \"OR (level > '10'))\").equals(sql)\n                   || (\"SELECT * FROM table WHERE (name LIKE 'foo%') AND \"\n                   + \"((level > '10') OR (name NOT LIKE '%bar'))\").equals(sql));\n    }", "signature": "void testSQL3()", "full_signature": "@Test public void testSQL3()", "class_method_signature": "SQLPrinterVisitorTest.testSQL3()", "testcase": true, "constructor": false, "invocations": ["parse", "accept", "getQuery", "assertTrue", "equals", "equals"]}, "focal_class": {"identifier": "SQLPrinterVisitor", "superclass": "extends AbstractSearchConditionVisitor<T>", "interfaces": "", "fields": [{"original_string": "private StringBuilder sb;", "modifier": "private", "type": "StringBuilder", "declarator": "sb", "var_name": "sb"}, {"original_string": "private String table;", "modifier": "private", "type": "String", "declarator": "table", "var_name": "table"}, {"original_string": "private String tableAlias;", "modifier": "private", "type": "String", "declarator": "tableAlias", "var_name": "tableAlias"}, {"original_string": "private List<String> columns;", "modifier": "private", "type": "List<String>", "declarator": "columns", "var_name": "columns"}], "methods": [{"identifier": "SQLPrinterVisitor", "parameters": "(String table, String... columns)", "modifiers": "public", "return": "", "signature": " SQLPrinterVisitor(String table, String... columns)", "full_signature": "public  SQLPrinterVisitor(String table, String... columns)", "class_method_signature": "SQLPrinterVisitor.SQLPrinterVisitor(String table, String... columns)", "testcase": false, "constructor": true}, {"identifier": "SQLPrinterVisitor", "parameters": "(Map<String, String> fieldMap, \n                             String table,\n                             List<String> columns)", "modifiers": "public", "return": "", "signature": " SQLPrinterVisitor(Map<String, String> fieldMap, \n                             String table,\n                             List<String> columns)", "full_signature": "public  SQLPrinterVisitor(Map<String, String> fieldMap, \n                             String table,\n                             List<String> columns)", "class_method_signature": "SQLPrinterVisitor.SQLPrinterVisitor(Map<String, String> fieldMap, \n                             String table,\n                             List<String> columns)", "testcase": false, "constructor": true}, {"identifier": "SQLPrinterVisitor", "parameters": "(Map<String, String> fieldMap, \n                             String table, \n                             String tableAlias,\n                             List<String> columns)", "modifiers": "public", "return": "", "signature": " SQLPrinterVisitor(Map<String, String> fieldMap, \n                             String table, \n                             String tableAlias,\n                             List<String> columns)", "full_signature": "public  SQLPrinterVisitor(Map<String, String> fieldMap, \n                             String table, \n                             String tableAlias,\n                             List<String> columns)", "class_method_signature": "SQLPrinterVisitor.SQLPrinterVisitor(Map<String, String> fieldMap, \n                             String table, \n                             String tableAlias,\n                             List<String> columns)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(SearchCondition<T> sc)", "modifiers": "public", "return": "void", "signature": "void visit(SearchCondition<T> sc)", "full_signature": "public void visit(SearchCondition<T> sc)", "class_method_signature": "SQLPrinterVisitor.visit(SearchCondition<T> sc)", "testcase": false, "constructor": false}, {"identifier": "getResult", "parameters": "()", "modifiers": "@Deprecated public", "return": "String", "signature": "String getResult()", "full_signature": "@Deprecated public String getResult()", "class_method_signature": "SQLPrinterVisitor.getResult()", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getQuery()", "full_signature": "public String getQuery()", "class_method_signature": "SQLPrinterVisitor.getQuery()", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/sql/SQLPrinterVisitor.java"}, "focal_method": {"identifier": "getQuery", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getQuery() {\n        return sb == null ? null : sb.toString();\n    }", "signature": "String getQuery()", "full_signature": "public String getQuery()", "class_method_signature": "SQLPrinterVisitor.getQuery()", "testcase": false, "constructor": false, "invocations": ["toString"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}