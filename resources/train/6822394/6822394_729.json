{"test_class": {"identifier": "URITemplateTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/model/URITemplateTest.java"}, "test_case": {"identifier": "testMatchWithMatrixOnClearPath2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatchWithMatrixOnClearPath2() throws Exception {\n        URITemplate uriTemplate = new URITemplate(\"/customers/{id}/orders/{order}\");\n        MultivaluedMap<String, String> values = new MetadataMap<String, String>();\n\n        assertTrue(uriTemplate.match(\"/customers;123456/123/orders;456/3\", values));\n        assertEquals(\"123\", values.getFirst(\"id\"));\n        assertEquals(\"3\", values.getFirst(\"order\"));\n    }", "signature": "void testMatchWithMatrixOnClearPath2()", "full_signature": "@Test public void testMatchWithMatrixOnClearPath2()", "class_method_signature": "URITemplateTest.testMatchWithMatrixOnClearPath2()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "match", "assertEquals", "getFirst", "assertEquals", "getFirst"]}, "focal_class": {"identifier": "URITemplate", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TEMPLATE_PARAMETERS = \"jaxrs.template.parameters\";", "modifier": "public static final", "type": "String", "declarator": "TEMPLATE_PARAMETERS = \"jaxrs.template.parameters\"", "var_name": "TEMPLATE_PARAMETERS"}, {"original_string": "public static final String LIMITED_REGEX_SUFFIX = \"(/.*)?\";", "modifier": "public static final", "type": "String", "declarator": "LIMITED_REGEX_SUFFIX = \"(/.*)?\"", "var_name": "LIMITED_REGEX_SUFFIX"}, {"original_string": "public static final String FINAL_MATCH_GROUP = \"FINAL_MATCH_GROUP\";", "modifier": "public static final", "type": "String", "declarator": "FINAL_MATCH_GROUP = \"FINAL_MATCH_GROUP\"", "var_name": "FINAL_MATCH_GROUP"}, {"original_string": "private static final String DEFAULT_PATH_VARIABLE_REGEX = \"([^/]+?)\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PATH_VARIABLE_REGEX = \"([^/]+?)\"", "var_name": "DEFAULT_PATH_VARIABLE_REGEX"}, {"original_string": "private static final String CHARACTERS_TO_ESCAPE = \".*+$()\";", "modifier": "private static final", "type": "String", "declarator": "CHARACTERS_TO_ESCAPE = \".*+$()\"", "var_name": "CHARACTERS_TO_ESCAPE"}, {"original_string": "private static final String SLASH = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SLASH = \"/\"", "var_name": "SLASH"}, {"original_string": "private static final String SLASH_QUOTE = \"/;\";", "modifier": "private static final", "type": "String", "declarator": "SLASH_QUOTE = \"/;\"", "var_name": "SLASH_QUOTE"}, {"original_string": "private final String template;", "modifier": "private final", "type": "String", "declarator": "template", "var_name": "template"}, {"original_string": "private final List<String> variables = new ArrayList<String>();", "modifier": "private final", "type": "List<String>", "declarator": "variables = new ArrayList<String>()", "var_name": "variables"}, {"original_string": "private final List<String> customVariables = new ArrayList<String>();", "modifier": "private final", "type": "List<String>", "declarator": "customVariables = new ArrayList<String>()", "var_name": "customVariables"}, {"original_string": "private final Pattern templateRegexPattern;", "modifier": "private final", "type": "Pattern", "declarator": "templateRegexPattern", "var_name": "templateRegexPattern"}, {"original_string": "private final String literals;", "modifier": "private final", "type": "String", "declarator": "literals", "var_name": "literals"}, {"original_string": "private final List<UriChunk> uriChunks;", "modifier": "private final", "type": "List<UriChunk>", "declarator": "uriChunks", "var_name": "uriChunks"}], "methods": [{"identifier": "URITemplate", "parameters": "(String theTemplate)", "modifiers": "public", "return": "", "signature": " URITemplate(String theTemplate)", "full_signature": "public  URITemplate(String theTemplate)", "class_method_signature": "URITemplate.URITemplate(String theTemplate)", "testcase": false, "constructor": true}, {"identifier": "getLiteralChars", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLiteralChars()", "full_signature": "public String getLiteralChars()", "class_method_signature": "URITemplate.getLiteralChars()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "URITemplate.getValue()", "testcase": false, "constructor": false}, {"identifier": "getPatternValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPatternValue()", "full_signature": "public String getPatternValue()", "class_method_signature": "URITemplate.getPatternValue()", "testcase": false, "constructor": false}, {"identifier": "getVariables", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getVariables()", "full_signature": "public List<String> getVariables()", "class_method_signature": "URITemplate.getVariables()", "testcase": false, "constructor": false}, {"identifier": "getCustomVariables", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getCustomVariables()", "full_signature": "public List<String> getCustomVariables()", "class_method_signature": "URITemplate.getCustomVariables()", "testcase": false, "constructor": false}, {"identifier": "escapeCharacters", "parameters": "(String expression)", "modifiers": "private static", "return": "String", "signature": "String escapeCharacters(String expression)", "full_signature": "private static String escapeCharacters(String expression)", "class_method_signature": "URITemplate.escapeCharacters(String expression)", "testcase": false, "constructor": false}, {"identifier": "isReservedCharacter", "parameters": "(char ch)", "modifiers": "private static", "return": "boolean", "signature": "boolean isReservedCharacter(char ch)", "full_signature": "private static boolean isReservedCharacter(char ch)", "class_method_signature": "URITemplate.isReservedCharacter(char ch)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(String uri, MultivaluedMap<String, String> templateVariableToValue)", "modifiers": "public", "return": "boolean", "signature": "boolean match(String uri, MultivaluedMap<String, String> templateVariableToValue)", "full_signature": "public boolean match(String uri, MultivaluedMap<String, String> templateVariableToValue)", "class_method_signature": "URITemplate.match(String uri, MultivaluedMap<String, String> templateVariableToValue)", "testcase": false, "constructor": false}, {"identifier": "substitute", "parameters": "(List<String> values)", "modifiers": "public", "return": "String", "signature": "String substitute(List<String> values)", "full_signature": "public String substitute(List<String> values)", "class_method_signature": "URITemplate.substitute(List<String> values)", "testcase": false, "constructor": false}, {"identifier": "substitute", "parameters": "(Map<String, ? extends Object> valuesMap)", "modifiers": "public", "return": "String", "signature": "String substitute(Map<String, ? extends Object> valuesMap)", "full_signature": "public String substitute(Map<String, ? extends Object> valuesMap)", "class_method_signature": "URITemplate.substitute(Map<String, ? extends Object> valuesMap)", "testcase": false, "constructor": false}, {"identifier": "encodeLiteralCharacters", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encodeLiteralCharacters()", "full_signature": "public String encodeLiteralCharacters()", "class_method_signature": "URITemplate.encodeLiteralCharacters()", "testcase": false, "constructor": false}, {"identifier": "createTemplate", "parameters": "(Path path)", "modifiers": "public static", "return": "URITemplate", "signature": "URITemplate createTemplate(Path path)", "full_signature": "public static URITemplate createTemplate(Path path)", "class_method_signature": "URITemplate.createTemplate(Path path)", "testcase": false, "constructor": false}, {"identifier": "createTemplate", "parameters": "(String pathValue)", "modifiers": "public static", "return": "URITemplate", "signature": "URITemplate createTemplate(String pathValue)", "full_signature": "public static URITemplate createTemplate(String pathValue)", "class_method_signature": "URITemplate.createTemplate(String pathValue)", "testcase": false, "constructor": false}, {"identifier": "compareTemplates", "parameters": "(URITemplate t1, URITemplate t2)", "modifiers": "public static", "return": "int", "signature": "int compareTemplates(URITemplate t1, URITemplate t2)", "full_signature": "public static int compareTemplates(URITemplate t1, URITemplate t2)", "class_method_signature": "URITemplate.compareTemplates(URITemplate t1, URITemplate t2)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java"}, "focal_method": {"identifier": "match", "parameters": "(String uri, MultivaluedMap<String, String> templateVariableToValue)", "modifiers": "public", "return": "boolean", "body": "public boolean match(String uri, MultivaluedMap<String, String> templateVariableToValue) {\n\n        if (uri == null) {\n            return (templateRegexPattern == null) ? true : false;\n        }\n\n        if (templateRegexPattern == null) {\n            return false;\n        }\n\n        Matcher m = templateRegexPattern.matcher(uri);\n        if (!m.matches() || template.equals(SLASH) && uri.startsWith(SLASH_QUOTE)) {\n            if (uri.contains(\";\")) {\n                // we might be trying to match one or few path segments\n                // containing matrix\n                // parameters against a clear path segment as in @Path(\"base\").\n                List<PathSegment> pList = JAXRSUtils.getPathSegments(template, false);\n                List<PathSegment> uList = JAXRSUtils.getPathSegments(uri, false);\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < uList.size(); i++) {\n                    String segment = null;\n                    if (pList.size() > i && pList.get(i).getPath().indexOf('{') == -1) {\n                        segment = uList.get(i).getPath();\n                    } else {\n                        segment = HttpUtils.fromPathSegment(uList.get(i));\n                    }\n                    if (segment.length() > 0) {\n                        sb.append(SLASH);    \n                    }\n                    sb.append(segment);\n                }\n                uri = sb.toString();\n                if (uri.length() == 0) {\n                    uri = SLASH;\n                }\n                m = templateRegexPattern.matcher(uri);\n                if (!m.matches()) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n\n        // Assign the matched template values to template variables\n        int groupCount = m.groupCount();\n        \n        int i = 1;\n        for (String name : variables) {\n            while (i <= groupCount) {\n                String value = m.group(i++);\n                if (value == null || value.length() == 0 && i < groupCount) {\n                    continue;\n                }\n                templateVariableToValue.add(name, value);\n                break;\n            }\n        }\n        // The right hand side value, might be used to further resolve\n        // sub-resources.\n        \n        String finalGroup = i > groupCount ? SLASH : m.group(groupCount);\n        if (finalGroup == null) {\n            finalGroup = SLASH;\n        }\n        templateVariableToValue.putSingle(FINAL_MATCH_GROUP, finalGroup);\n\n        return true;\n    }", "signature": "boolean match(String uri, MultivaluedMap<String, String> templateVariableToValue)", "full_signature": "public boolean match(String uri, MultivaluedMap<String, String> templateVariableToValue)", "class_method_signature": "URITemplate.match(String uri, MultivaluedMap<String, String> templateVariableToValue)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "equals", "startsWith", "contains", "getPathSegments", "getPathSegments", "size", "size", "indexOf", "getPath", "get", "getPath", "get", "fromPathSegment", "get", "length", "append", "append", "toString", "length", "matcher", "matches", "groupCount", "group", "length", "add", "group", "putSingle"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}