{"test_class": {"identifier": "FiqlParserTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private FiqlParser<Condition> parser = new FiqlParser<Condition>(Condition.class);", "modifier": "private", "type": "FiqlParser<Condition>", "declarator": "parser = new FiqlParser<Condition>(Condition.class)", "var_name": "parser"}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/rs/extensions/search/src/test/java/org/apache/cxf/jaxrs/ext/search/fiql/FiqlParserTest.java"}, "test_case": {"identifier": "testSetterWrongType", "parameters": "()", "modifiers": "@Test(expected = SearchParseException.class) public", "return": "void", "body": "@Test(expected = SearchParseException.class)\n    public void testSetterWrongType() throws SearchParseException {\n        parser.parse(\"exception==text\");\n    }", "signature": "void testSetterWrongType()", "full_signature": "@Test(expected = SearchParseException.class) public void testSetterWrongType()", "class_method_signature": "FiqlParserTest.testSetterWrongType()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "FiqlParser", "superclass": "", "interfaces": "implements SearchConditionParser<T>", "fields": [{"original_string": "public static final String OR = \",\";", "modifier": "public static final", "type": "String", "declarator": "OR = \",\"", "var_name": "OR"}, {"original_string": "public static final String AND = \";\";", "modifier": "public static final", "type": "String", "declarator": "AND = \";\"", "var_name": "AND"}, {"original_string": "public static final String GT = \"=gt=\";", "modifier": "public static final", "type": "String", "declarator": "GT = \"=gt=\"", "var_name": "GT"}, {"original_string": "public static final String GE = \"=ge=\";", "modifier": "public static final", "type": "String", "declarator": "GE = \"=ge=\"", "var_name": "GE"}, {"original_string": "public static final String LT = \"=lt=\";", "modifier": "public static final", "type": "String", "declarator": "LT = \"=lt=\"", "var_name": "LT"}, {"original_string": "public static final String LE = \"=le=\";", "modifier": "public static final", "type": "String", "declarator": "LE = \"=le=\"", "var_name": "LE"}, {"original_string": "public static final String EQ = \"==\";", "modifier": "public static final", "type": "String", "declarator": "EQ = \"==\"", "var_name": "EQ"}, {"original_string": "public static final String NEQ = \"!=\";", "modifier": "public static final", "type": "String", "declarator": "NEQ = \"!=\"", "var_name": "NEQ"}, {"original_string": "public static final String DEFAULT_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", "var_name": "DEFAULT_DATE_FORMAT"}, {"original_string": "private static final Pattern COMPARATORS_PATTERN;", "modifier": "private static final", "type": "Pattern", "declarator": "COMPARATORS_PATTERN", "var_name": "COMPARATORS_PATTERN"}, {"original_string": "private static final Map<String, ConditionType> OPERATORS_MAP;", "modifier": "private static final", "type": "Map<String, ConditionType>", "declarator": "OPERATORS_MAP", "var_name": "OPERATORS_MAP"}, {"original_string": "private Beanspector<T> beanspector;", "modifier": "private", "type": "Beanspector<T>", "declarator": "beanspector", "var_name": "beanspector"}, {"original_string": "private Class<T> conditionClass;", "modifier": "private", "type": "Class<T>", "declarator": "conditionClass", "var_name": "conditionClass"}, {"original_string": "private Map<String, String> properties;", "modifier": "private", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "FiqlParser", "parameters": "(Class<T> tclass)", "modifiers": "public", "return": "", "signature": " FiqlParser(Class<T> tclass)", "full_signature": "public  FiqlParser(Class<T> tclass)", "class_method_signature": "FiqlParser.FiqlParser(Class<T> tclass)", "testcase": false, "constructor": true}, {"identifier": "FiqlParser", "parameters": "(Class<T> tclass, Map<String, String> contextProperties)", "modifiers": "public", "return": "", "signature": " FiqlParser(Class<T> tclass, Map<String, String> contextProperties)", "full_signature": "public  FiqlParser(Class<T> tclass, Map<String, String> contextProperties)", "class_method_signature": "FiqlParser.FiqlParser(Class<T> tclass, Map<String, String> contextProperties)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String fiqlExpression)", "modifiers": "public", "return": "SearchCondition<T>", "signature": "SearchCondition<T> parse(String fiqlExpression)", "full_signature": "public SearchCondition<T> parse(String fiqlExpression)", "class_method_signature": "FiqlParser.parse(String fiqlExpression)", "testcase": false, "constructor": false}, {"identifier": "parseAndsOrsBrackets", "parameters": "(String expr)", "modifiers": "private", "return": "ASTNode<T>", "signature": "ASTNode<T> parseAndsOrsBrackets(String expr)", "full_signature": "private ASTNode<T> parseAndsOrsBrackets(String expr)", "class_method_signature": "FiqlParser.parseAndsOrsBrackets(String expr)", "testcase": false, "constructor": false}, {"identifier": "parseComparison", "parameters": "(String expr)", "modifiers": "private", "return": "Comparison", "signature": "Comparison parseComparison(String expr)", "full_signature": "private Comparison parseComparison(String expr)", "class_method_signature": "FiqlParser.parseComparison(String expr)", "testcase": false, "constructor": false}, {"identifier": "parseDatatype", "parameters": "(String setter, String value)", "modifiers": "private", "return": "Object", "signature": "Object parseDatatype(String setter, String value)", "full_signature": "private Object parseDatatype(String setter, String value)", "class_method_signature": "FiqlParser.parseDatatype(String setter, String value)", "testcase": false, "constructor": false}], "file": "webserviceCXF/WebContent/officaldoc/apache-cxf-2.7.0-src/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/fiql/FiqlParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String fiqlExpression)", "modifiers": "public", "return": "SearchCondition<T>", "body": "public SearchCondition<T> parse(String fiqlExpression) throws SearchParseException {\n        ASTNode<T> ast = parseAndsOrsBrackets(fiqlExpression);\n        // System.out.println(ast);\n        return ast.build();\n    }", "signature": "SearchCondition<T> parse(String fiqlExpression)", "full_signature": "public SearchCondition<T> parse(String fiqlExpression)", "class_method_signature": "FiqlParser.parse(String fiqlExpression)", "testcase": false, "constructor": false, "invocations": ["parseAndsOrsBrackets", "build"]}, "repository": {"repo_id": 6822394, "url": "https://github.com/jerrtop/Java_demo_set", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 13, "size": 123833, "license": "licensed"}}