{"test_class": {"identifier": "StubDragLogicTest", "superclass": "", "interfaces": "", "fields": [], "file": "user/src/test/java/org/tessell/gwt/user/client/ui/StubDragLogicTest.java"}, "test_case": {"identifier": "elementMustBeDraggable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void elementMustBeDraggable() {\n    StubFocusWidget w = new StubFocusWidget();\n    try {\n      w.dragStart();\n      fail();\n    } catch (IllegalStateException ise) {\n      assertThat(ise.getMessage(), is(\"Element must have draggable=true\"));\n    }\n\n    w.getIsElement().setAttribute(\"draggable\", \"true\");\n    w.dragStart();\n  }", "signature": "void elementMustBeDraggable()", "full_signature": "@Test public void elementMustBeDraggable()", "class_method_signature": "StubDragLogicTest.elementMustBeDraggable()", "testcase": true, "constructor": false, "invocations": ["dragStart", "fail", "assertThat", "getMessage", "is", "setAttribute", "getIsElement", "dragStart"]}, "focal_class": {"identifier": "StubDragLogic", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static HasAllDragAndDropHandlers currentDraggable;", "modifier": "public static", "type": "HasAllDragAndDropHandlers", "declarator": "currentDraggable", "var_name": "currentDraggable"}, {"original_string": "public static StubDragStartEvent currentStart;", "modifier": "public static", "type": "StubDragStartEvent", "declarator": "currentStart", "var_name": "currentStart"}, {"original_string": "public static StubDragOverEvent currentOver;", "modifier": "public static", "type": "StubDragOverEvent", "declarator": "currentOver", "var_name": "currentOver"}, {"original_string": "public static HasAllDragAndDropHandlers currentOverOwner;", "modifier": "public static", "type": "HasAllDragAndDropHandlers", "declarator": "currentOverOwner", "var_name": "currentOverOwner"}, {"original_string": "public static StubDropEvent currentDrop;", "modifier": "public static", "type": "StubDropEvent", "declarator": "currentDrop", "var_name": "currentDrop"}, {"original_string": "private final HasAllDragAndDropHandlers owner;", "modifier": "private final", "type": "HasAllDragAndDropHandlers", "declarator": "owner", "var_name": "owner"}, {"original_string": "private boolean hasDragOver;", "modifier": "private", "type": "boolean", "declarator": "hasDragOver", "var_name": "hasDragOver"}], "methods": [{"identifier": "reset", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void reset()", "full_signature": "private static void reset()", "class_method_signature": "StubDragLogic.reset()", "testcase": false, "constructor": false}, {"identifier": "StubDragLogic", "parameters": "(HasAllDragAndDropHandlers owner)", "modifiers": "", "return": "", "signature": " StubDragLogic(HasAllDragAndDropHandlers owner)", "full_signature": "  StubDragLogic(HasAllDragAndDropHandlers owner)", "class_method_signature": "StubDragLogic.StubDragLogic(HasAllDragAndDropHandlers owner)", "testcase": false, "constructor": true}, {"identifier": "markHasDragOverHandler", "parameters": "()", "modifiers": "", "return": "void", "signature": "void markHasDragOverHandler()", "full_signature": " void markHasDragOverHandler()", "class_method_signature": "StubDragLogic.markHasDragOverHandler()", "testcase": false, "constructor": false}, {"identifier": "dragStart", "parameters": "()", "modifiers": "", "return": "void", "signature": "void dragStart()", "full_signature": " void dragStart()", "class_method_signature": "StubDragLogic.dragStart()", "testcase": false, "constructor": false}, {"identifier": "dragEnd", "parameters": "()", "modifiers": "", "return": "void", "signature": "void dragEnd()", "full_signature": " void dragEnd()", "class_method_signature": "StubDragLogic.dragEnd()", "testcase": false, "constructor": false}, {"identifier": "dragEnter", "parameters": "()", "modifiers": "", "return": "void", "signature": "void dragEnter()", "full_signature": " void dragEnter()", "class_method_signature": "StubDragLogic.dragEnter()", "testcase": false, "constructor": false}, {"identifier": "dragLeave", "parameters": "()", "modifiers": "", "return": "void", "signature": "void dragLeave()", "full_signature": " void dragLeave()", "class_method_signature": "StubDragLogic.dragLeave()", "testcase": false, "constructor": false}, {"identifier": "dragOver", "parameters": "()", "modifiers": "", "return": "void", "signature": "void dragOver()", "full_signature": " void dragOver()", "class_method_signature": "StubDragLogic.dragOver()", "testcase": false, "constructor": false}, {"identifier": "drop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void drop()", "full_signature": " void drop()", "class_method_signature": "StubDragLogic.drop()", "testcase": false, "constructor": false}, {"identifier": "ensureCanBeDraggedOver", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureCanBeDraggedOver()", "full_signature": "private void ensureCanBeDraggedOver()", "class_method_signature": "StubDragLogic.ensureCanBeDraggedOver()", "testcase": false, "constructor": false}, {"identifier": "ensureCanBeDroppedOn", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureCanBeDroppedOn()", "full_signature": "private void ensureCanBeDroppedOn()", "class_method_signature": "StubDragLogic.ensureCanBeDroppedOn()", "testcase": false, "constructor": false}, {"identifier": "ensureDraggable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureDraggable()", "full_signature": "private void ensureDraggable()", "class_method_signature": "StubDragLogic.ensureDraggable()", "testcase": false, "constructor": false}], "file": "user/src/main/java/org/tessell/gwt/user/client/ui/StubDragLogic.java"}, "focal_method": {"identifier": "dragStart", "parameters": "()", "modifiers": "", "return": "void", "body": "void dragStart() {\n    ensureDraggable();\n    if (currentStart != null) {\n      currentDraggable.fireEvent(new StubDragEndEvent());\n    }\n    currentDraggable = owner;\n    currentStart = new StubDragStartEvent();\n    owner.fireEvent(currentStart);\n  }", "signature": "void dragStart()", "full_signature": " void dragStart()", "class_method_signature": "StubDragLogic.dragStart()", "testcase": false, "constructor": false, "invocations": ["ensureDraggable", "fireEvent", "fireEvent"]}, "repository": {"repo_id": 766240, "url": "https://github.com/stephenh/tessell", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 38, "size": 4399, "license": "licensed"}}