{"test_class": {"identifier": "CalendarPickerViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Activity activity;", "modifier": "private", "type": "Activity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private TimeZone timeZone;", "modifier": "private", "type": "TimeZone", "declarator": "timeZone", "var_name": "timeZone"}, {"original_string": "private Locale locale;", "modifier": "private", "type": "Locale", "declarator": "locale", "var_name": "locale"}, {"original_string": "private CalendarPickerView view;", "modifier": "private", "type": "CalendarPickerView", "declarator": "view", "var_name": "view"}, {"original_string": "private Calendar today;", "modifier": "private", "type": "Calendar", "declarator": "today", "var_name": "today"}, {"original_string": "private Date maxDate;", "modifier": "private", "type": "Date", "declarator": "maxDate", "var_name": "maxDate"}, {"original_string": "private Date minDate;", "modifier": "private", "type": "Date", "declarator": "minDate", "var_name": "minDate"}], "file": "library/src/test/java/com/squareup/timessquare/CalendarPickerViewTest.java"}, "test_case": {"identifier": "testInitDecember", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testInitDecember() throws Exception {\n    Calendar dec2012 = buildCal(2012, DECEMBER, 1);\n    Calendar dec2013 = buildCal(2013, DECEMBER, 1);\n    view.init(dec2012.getTime(), dec2013.getTime(), timeZone, locale) //\n        .inMode(SINGLE) //\n        .withSelectedDate(dec2012.getTime());\n    assertThat(view.months).hasSize(12);\n  }", "signature": "void testInitDecember()", "full_signature": "@Test public void testInitDecember()", "class_method_signature": "CalendarPickerViewTest.testInitDecember()", "testcase": true, "constructor": false, "invocations": ["buildCal", "buildCal", "withSelectedDate", "inMode", "init", "getTime", "getTime", "getTime", "hasSize", "assertThat"]}, "focal_class": {"identifier": "CalendarPickerView", "superclass": "extends ListView", "interfaces": "", "fields": [{"original_string": "private static final ArrayList<String> explicitlyNumericYearLocaleLanguages =\n      new ArrayList<>(Arrays.asList(\"ar\", \"my\"));", "modifier": "private static final", "type": "ArrayList<String>", "declarator": "explicitlyNumericYearLocaleLanguages =\n      new ArrayList<>(Arrays.asList(\"ar\", \"my\"))", "var_name": "explicitlyNumericYearLocaleLanguages"}, {"original_string": "private final CalendarPickerView.MonthAdapter adapter;", "modifier": "private final", "type": "CalendarPickerView.MonthAdapter", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "private final IndexedLinkedHashMap<String, List<List<MonthCellDescriptor>>> cells =\n      new IndexedLinkedHashMap<>();", "modifier": "private final", "type": "IndexedLinkedHashMap<String, List<List<MonthCellDescriptor>>>", "declarator": "cells =\n      new IndexedLinkedHashMap<>()", "var_name": "cells"}, {"original_string": "final MonthView.Listener listener = new CellClickedListener();", "modifier": "final", "type": "MonthView.Listener", "declarator": "listener = new CellClickedListener()", "var_name": "listener"}, {"original_string": "final List<MonthDescriptor> months = new ArrayList<>();", "modifier": "final", "type": "List<MonthDescriptor>", "declarator": "months = new ArrayList<>()", "var_name": "months"}, {"original_string": "final List<MonthCellDescriptor> selectedCells = new ArrayList<>();", "modifier": "final", "type": "List<MonthCellDescriptor>", "declarator": "selectedCells = new ArrayList<>()", "var_name": "selectedCells"}, {"original_string": "final List<MonthCellDescriptor> highlightedCells = new ArrayList<>();", "modifier": "final", "type": "List<MonthCellDescriptor>", "declarator": "highlightedCells = new ArrayList<>()", "var_name": "highlightedCells"}, {"original_string": "final List<Calendar> selectedCals = new ArrayList<>();", "modifier": "final", "type": "List<Calendar>", "declarator": "selectedCals = new ArrayList<>()", "var_name": "selectedCals"}, {"original_string": "final List<Calendar> highlightedCals = new ArrayList<>();", "modifier": "final", "type": "List<Calendar>", "declarator": "highlightedCals = new ArrayList<>()", "var_name": "highlightedCals"}, {"original_string": "private Locale locale;", "modifier": "private", "type": "Locale", "declarator": "locale", "var_name": "locale"}, {"original_string": "private TimeZone timeZone;", "modifier": "private", "type": "TimeZone", "declarator": "timeZone", "var_name": "timeZone"}, {"original_string": "private DateFormat weekdayNameFormat;", "modifier": "private", "type": "DateFormat", "declarator": "weekdayNameFormat", "var_name": "weekdayNameFormat"}, {"original_string": "private DateFormat fullDateFormat;", "modifier": "private", "type": "DateFormat", "declarator": "fullDateFormat", "var_name": "fullDateFormat"}, {"original_string": "private Calendar minCal;", "modifier": "private", "type": "Calendar", "declarator": "minCal", "var_name": "minCal"}, {"original_string": "private Calendar maxCal;", "modifier": "private", "type": "Calendar", "declarator": "maxCal", "var_name": "maxCal"}, {"original_string": "private Calendar monthCounter;", "modifier": "private", "type": "Calendar", "declarator": "monthCounter", "var_name": "monthCounter"}, {"original_string": "private boolean displayOnly;", "modifier": "private", "type": "boolean", "declarator": "displayOnly", "var_name": "displayOnly"}, {"original_string": "SelectionMode selectionMode;", "modifier": "", "type": "SelectionMode", "declarator": "selectionMode", "var_name": "selectionMode"}, {"original_string": "Calendar today;", "modifier": "", "type": "Calendar", "declarator": "today", "var_name": "today"}, {"original_string": "private int dividerColor;", "modifier": "private", "type": "int", "declarator": "dividerColor", "var_name": "dividerColor"}, {"original_string": "private int dayBackgroundResId;", "modifier": "private", "type": "int", "declarator": "dayBackgroundResId", "var_name": "dayBackgroundResId"}, {"original_string": "private int dayTextColorResId;", "modifier": "private", "type": "int", "declarator": "dayTextColorResId", "var_name": "dayTextColorResId"}, {"original_string": "private int titleTextStyle;", "modifier": "private", "type": "int", "declarator": "titleTextStyle", "var_name": "titleTextStyle"}, {"original_string": "private boolean displayHeader;", "modifier": "private", "type": "boolean", "declarator": "displayHeader", "var_name": "displayHeader"}, {"original_string": "private int headerTextColor;", "modifier": "private", "type": "int", "declarator": "headerTextColor", "var_name": "headerTextColor"}, {"original_string": "private boolean displayDayNamesHeaderRow;", "modifier": "private", "type": "boolean", "declarator": "displayDayNamesHeaderRow", "var_name": "displayDayNamesHeaderRow"}, {"original_string": "private boolean displayAlwaysDigitNumbers;", "modifier": "private", "type": "boolean", "declarator": "displayAlwaysDigitNumbers", "var_name": "displayAlwaysDigitNumbers"}, {"original_string": "private Typeface titleTypeface;", "modifier": "private", "type": "Typeface", "declarator": "titleTypeface", "var_name": "titleTypeface"}, {"original_string": "private Typeface dateTypeface;", "modifier": "private", "type": "Typeface", "declarator": "dateTypeface", "var_name": "dateTypeface"}, {"original_string": "private OnDateSelectedListener dateListener;", "modifier": "private", "type": "OnDateSelectedListener", "declarator": "dateListener", "var_name": "dateListener"}, {"original_string": "private DateSelectableFilter dateConfiguredListener;", "modifier": "private", "type": "DateSelectableFilter", "declarator": "dateConfiguredListener", "var_name": "dateConfiguredListener"}, {"original_string": "private OnInvalidDateSelectedListener invalidDateListener =\n      new DefaultOnInvalidDateSelectedListener();", "modifier": "private", "type": "OnInvalidDateSelectedListener", "declarator": "invalidDateListener =\n      new DefaultOnInvalidDateSelectedListener()", "var_name": "invalidDateListener"}, {"original_string": "private CellClickInterceptor cellClickInterceptor;", "modifier": "private", "type": "CellClickInterceptor", "declarator": "cellClickInterceptor", "var_name": "cellClickInterceptor"}, {"original_string": "private List<CalendarCellDecorator> decorators;", "modifier": "private", "type": "List<CalendarCellDecorator>", "declarator": "decorators", "var_name": "decorators"}, {"original_string": "private DayViewAdapter dayViewAdapter = new DefaultDayViewAdapter();", "modifier": "private", "type": "DayViewAdapter", "declarator": "dayViewAdapter = new DefaultDayViewAdapter()", "var_name": "dayViewAdapter"}, {"original_string": "private boolean monthsReverseOrder;", "modifier": "private", "type": "boolean", "declarator": "monthsReverseOrder", "var_name": "monthsReverseOrder"}, {"original_string": "private final StringBuilder monthBuilder = new StringBuilder(50);", "modifier": "private final", "type": "StringBuilder", "declarator": "monthBuilder = new StringBuilder(50)", "var_name": "monthBuilder"}, {"original_string": "private Formatter monthFormatter;", "modifier": "private", "type": "Formatter", "declarator": "monthFormatter", "var_name": "monthFormatter"}], "methods": [{"identifier": "setDecorators", "parameters": "(List<CalendarCellDecorator> decorators)", "modifiers": "public", "return": "void", "signature": "void setDecorators(List<CalendarCellDecorator> decorators)", "full_signature": "public void setDecorators(List<CalendarCellDecorator> decorators)", "class_method_signature": "CalendarPickerView.setDecorators(List<CalendarCellDecorator> decorators)", "testcase": false, "constructor": false}, {"identifier": "getDecorators", "parameters": "()", "modifiers": "public", "return": "List<CalendarCellDecorator>", "signature": "List<CalendarCellDecorator> getDecorators()", "full_signature": "public List<CalendarCellDecorator> getDecorators()", "class_method_signature": "CalendarPickerView.getDecorators()", "testcase": false, "constructor": false}, {"identifier": "CalendarPickerView", "parameters": "(Context context, AttributeSet attrs)", "modifiers": "public", "return": "", "signature": " CalendarPickerView(Context context, AttributeSet attrs)", "full_signature": "public  CalendarPickerView(Context context, AttributeSet attrs)", "class_method_signature": "CalendarPickerView.CalendarPickerView(Context context, AttributeSet attrs)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Date minDate, Date maxDate, TimeZone timeZone, Locale locale)", "modifiers": "public", "return": "FluentInitializer", "signature": "FluentInitializer init(Date minDate, Date maxDate, TimeZone timeZone, Locale locale)", "full_signature": "public FluentInitializer init(Date minDate, Date maxDate, TimeZone timeZone, Locale locale)", "class_method_signature": "CalendarPickerView.init(Date minDate, Date maxDate, TimeZone timeZone, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Date minDate, Date maxDate)", "modifiers": "public", "return": "FluentInitializer", "signature": "FluentInitializer init(Date minDate, Date maxDate)", "full_signature": "public FluentInitializer init(Date minDate, Date maxDate)", "class_method_signature": "CalendarPickerView.init(Date minDate, Date maxDate)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Date minDate, Date maxDate, TimeZone timeZone)", "modifiers": "public", "return": "FluentInitializer", "signature": "FluentInitializer init(Date minDate, Date maxDate, TimeZone timeZone)", "full_signature": "public FluentInitializer init(Date minDate, Date maxDate, TimeZone timeZone)", "class_method_signature": "CalendarPickerView.init(Date minDate, Date maxDate, TimeZone timeZone)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Date minDate, Date maxDate, Locale locale)", "modifiers": "public", "return": "FluentInitializer", "signature": "FluentInitializer init(Date minDate, Date maxDate, Locale locale)", "full_signature": "public FluentInitializer init(Date minDate, Date maxDate, Locale locale)", "class_method_signature": "CalendarPickerView.init(Date minDate, Date maxDate, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "validateAndUpdate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateAndUpdate()", "full_signature": "private void validateAndUpdate()", "class_method_signature": "CalendarPickerView.validateAndUpdate()", "testcase": false, "constructor": false}, {"identifier": "scrollToSelectedMonth", "parameters": "(final int selectedIndex)", "modifiers": "private", "return": "void", "signature": "void scrollToSelectedMonth(final int selectedIndex)", "full_signature": "private void scrollToSelectedMonth(final int selectedIndex)", "class_method_signature": "CalendarPickerView.scrollToSelectedMonth(final int selectedIndex)", "testcase": false, "constructor": false}, {"identifier": "scrollToSelectedMonth", "parameters": "(final int selectedIndex, final boolean smoothScroll)", "modifiers": "private", "return": "void", "signature": "void scrollToSelectedMonth(final int selectedIndex, final boolean smoothScroll)", "full_signature": "private void scrollToSelectedMonth(final int selectedIndex, final boolean smoothScroll)", "class_method_signature": "CalendarPickerView.scrollToSelectedMonth(final int selectedIndex, final boolean smoothScroll)", "testcase": false, "constructor": false}, {"identifier": "scrollToSelectedDates", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scrollToSelectedDates()", "full_signature": "private void scrollToSelectedDates()", "class_method_signature": "CalendarPickerView.scrollToSelectedDates()", "testcase": false, "constructor": false}, {"identifier": "scrollToDate", "parameters": "(Date date)", "modifiers": "public", "return": "boolean", "signature": "boolean scrollToDate(Date date)", "full_signature": "public boolean scrollToDate(Date date)", "class_method_signature": "CalendarPickerView.scrollToDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "fixDialogDimens", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void fixDialogDimens()", "full_signature": "public void fixDialogDimens()", "class_method_signature": "CalendarPickerView.fixDialogDimens()", "testcase": false, "constructor": false}, {"identifier": "setTitleTypeface", "parameters": "(Typeface titleTypeface)", "modifiers": "public", "return": "void", "signature": "void setTitleTypeface(Typeface titleTypeface)", "full_signature": "public void setTitleTypeface(Typeface titleTypeface)", "class_method_signature": "CalendarPickerView.setTitleTypeface(Typeface titleTypeface)", "testcase": false, "constructor": false}, {"identifier": "setDateTypeface", "parameters": "(Typeface dateTypeface)", "modifiers": "public", "return": "void", "signature": "void setDateTypeface(Typeface dateTypeface)", "full_signature": "public void setDateTypeface(Typeface dateTypeface)", "class_method_signature": "CalendarPickerView.setDateTypeface(Typeface dateTypeface)", "testcase": false, "constructor": false}, {"identifier": "setTypeface", "parameters": "(Typeface typeface)", "modifiers": "public", "return": "void", "signature": "void setTypeface(Typeface typeface)", "full_signature": "public void setTypeface(Typeface typeface)", "class_method_signature": "CalendarPickerView.setTypeface(Typeface typeface)", "testcase": false, "constructor": false}, {"identifier": "unfixDialogDimens", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unfixDialogDimens()", "full_signature": "public void unfixDialogDimens()", "class_method_signature": "CalendarPickerView.unfixDialogDimens()", "testcase": false, "constructor": false}, {"identifier": "onMeasure", "parameters": "(int widthMeasureSpec, int heightMeasureSpec)", "modifiers": "@Override protected", "return": "void", "signature": "void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "full_signature": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "class_method_signature": "CalendarPickerView.onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "testcase": false, "constructor": false}, {"identifier": "getSelectedDate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getSelectedDate()", "full_signature": "public Date getSelectedDate()", "class_method_signature": "CalendarPickerView.getSelectedDate()", "testcase": false, "constructor": false}, {"identifier": "getSelectedDates", "parameters": "()", "modifiers": "public", "return": "List<Date>", "signature": "List<Date> getSelectedDates()", "full_signature": "public List<Date> getSelectedDates()", "class_method_signature": "CalendarPickerView.getSelectedDates()", "testcase": false, "constructor": false}, {"identifier": "dbg", "parameters": "(Date minDate, Date maxDate)", "modifiers": "private static", "return": "String", "signature": "String dbg(Date minDate, Date maxDate)", "full_signature": "private static String dbg(Date minDate, Date maxDate)", "class_method_signature": "CalendarPickerView.dbg(Date minDate, Date maxDate)", "testcase": false, "constructor": false}, {"identifier": "setMidnight", "parameters": "(Calendar cal)", "modifiers": "static", "return": "void", "signature": "void setMidnight(Calendar cal)", "full_signature": "static void setMidnight(Calendar cal)", "class_method_signature": "CalendarPickerView.setMidnight(Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "selectDate", "parameters": "(Date date)", "modifiers": "public", "return": "boolean", "signature": "boolean selectDate(Date date)", "full_signature": "public boolean selectDate(Date date)", "class_method_signature": "CalendarPickerView.selectDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "selectDate", "parameters": "(Date date, boolean smoothScroll)", "modifiers": "public", "return": "boolean", "signature": "boolean selectDate(Date date, boolean smoothScroll)", "full_signature": "public boolean selectDate(Date date, boolean smoothScroll)", "class_method_signature": "CalendarPickerView.selectDate(Date date, boolean smoothScroll)", "testcase": false, "constructor": false}, {"identifier": "formatMonthDate", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String formatMonthDate(Date date)", "full_signature": "private String formatMonthDate(Date date)", "class_method_signature": "CalendarPickerView.formatMonthDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "validateDate", "parameters": "(Date date)", "modifiers": "private", "return": "void", "signature": "void validateDate(Date date)", "full_signature": "private void validateDate(Date date)", "class_method_signature": "CalendarPickerView.validateDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "doSelectDate", "parameters": "(Date date, MonthCellDescriptor cell)", "modifiers": "private", "return": "boolean", "signature": "boolean doSelectDate(Date date, MonthCellDescriptor cell)", "full_signature": "private boolean doSelectDate(Date date, MonthCellDescriptor cell)", "class_method_signature": "CalendarPickerView.doSelectDate(Date date, MonthCellDescriptor cell)", "testcase": false, "constructor": false}, {"identifier": "monthKey", "parameters": "(Calendar cal)", "modifiers": "private", "return": "String", "signature": "String monthKey(Calendar cal)", "full_signature": "private String monthKey(Calendar cal)", "class_method_signature": "CalendarPickerView.monthKey(Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "monthKey", "parameters": "(MonthDescriptor month)", "modifiers": "private", "return": "String", "signature": "String monthKey(MonthDescriptor month)", "full_signature": "private String monthKey(MonthDescriptor month)", "class_method_signature": "CalendarPickerView.monthKey(MonthDescriptor month)", "testcase": false, "constructor": false}, {"identifier": "clearOldSelections", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clearOldSelections()", "full_signature": "private void clearOldSelections()", "class_method_signature": "CalendarPickerView.clearOldSelections()", "testcase": false, "constructor": false}, {"identifier": "applyMultiSelect", "parameters": "(Date date, Calendar selectedCal)", "modifiers": "private", "return": "Date", "signature": "Date applyMultiSelect(Date date, Calendar selectedCal)", "full_signature": "private Date applyMultiSelect(Date date, Calendar selectedCal)", "class_method_signature": "CalendarPickerView.applyMultiSelect(Date date, Calendar selectedCal)", "testcase": false, "constructor": false}, {"identifier": "highlightDates", "parameters": "(Collection<Date> dates)", "modifiers": "public", "return": "void", "signature": "void highlightDates(Collection<Date> dates)", "full_signature": "public void highlightDates(Collection<Date> dates)", "class_method_signature": "CalendarPickerView.highlightDates(Collection<Date> dates)", "testcase": false, "constructor": false}, {"identifier": "clearSelectedDates", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearSelectedDates()", "full_signature": "public void clearSelectedDates()", "class_method_signature": "CalendarPickerView.clearSelectedDates()", "testcase": false, "constructor": false}, {"identifier": "clearHighlightedDates", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearHighlightedDates()", "full_signature": "public void clearHighlightedDates()", "class_method_signature": "CalendarPickerView.clearHighlightedDates()", "testcase": false, "constructor": false}, {"identifier": "getMonthCellWithIndexByDate", "parameters": "(Date date)", "modifiers": "private", "return": "MonthCellWithMonthIndex", "signature": "MonthCellWithMonthIndex getMonthCellWithIndexByDate(Date date)", "full_signature": "private MonthCellWithMonthIndex getMonthCellWithIndexByDate(Date date)", "class_method_signature": "CalendarPickerView.getMonthCellWithIndexByDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "getMonthCells", "parameters": "(MonthDescriptor month, Calendar startCal)", "modifiers": "", "return": "List<List<MonthCellDescriptor>>", "signature": "List<List<MonthCellDescriptor>> getMonthCells(MonthDescriptor month, Calendar startCal)", "full_signature": " List<List<MonthCellDescriptor>> getMonthCells(MonthDescriptor month, Calendar startCal)", "class_method_signature": "CalendarPickerView.getMonthCells(MonthDescriptor month, Calendar startCal)", "testcase": false, "constructor": false}, {"identifier": "containsDate", "parameters": "(List<Calendar> selectedCals, Date date)", "modifiers": "private", "return": "boolean", "signature": "boolean containsDate(List<Calendar> selectedCals, Date date)", "full_signature": "private boolean containsDate(List<Calendar> selectedCals, Date date)", "class_method_signature": "CalendarPickerView.containsDate(List<Calendar> selectedCals, Date date)", "testcase": false, "constructor": false}, {"identifier": "containsDate", "parameters": "(List<Calendar> selectedCals, Calendar cal)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsDate(List<Calendar> selectedCals, Calendar cal)", "full_signature": "private static boolean containsDate(List<Calendar> selectedCals, Calendar cal)", "class_method_signature": "CalendarPickerView.containsDate(List<Calendar> selectedCals, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "minDate", "parameters": "(List<Calendar> selectedCals)", "modifiers": "private static", "return": "Calendar", "signature": "Calendar minDate(List<Calendar> selectedCals)", "full_signature": "private static Calendar minDate(List<Calendar> selectedCals)", "class_method_signature": "CalendarPickerView.minDate(List<Calendar> selectedCals)", "testcase": false, "constructor": false}, {"identifier": "maxDate", "parameters": "(List<Calendar> selectedCals)", "modifiers": "private static", "return": "Calendar", "signature": "Calendar maxDate(List<Calendar> selectedCals)", "full_signature": "private static Calendar maxDate(List<Calendar> selectedCals)", "class_method_signature": "CalendarPickerView.maxDate(List<Calendar> selectedCals)", "testcase": false, "constructor": false}, {"identifier": "sameDate", "parameters": "(Calendar cal, Calendar selectedDate)", "modifiers": "private static", "return": "boolean", "signature": "boolean sameDate(Calendar cal, Calendar selectedDate)", "full_signature": "private static boolean sameDate(Calendar cal, Calendar selectedDate)", "class_method_signature": "CalendarPickerView.sameDate(Calendar cal, Calendar selectedDate)", "testcase": false, "constructor": false}, {"identifier": "betweenDates", "parameters": "(Calendar cal, Calendar minCal, Calendar maxCal)", "modifiers": "private static", "return": "boolean", "signature": "boolean betweenDates(Calendar cal, Calendar minCal, Calendar maxCal)", "full_signature": "private static boolean betweenDates(Calendar cal, Calendar minCal, Calendar maxCal)", "class_method_signature": "CalendarPickerView.betweenDates(Calendar cal, Calendar minCal, Calendar maxCal)", "testcase": false, "constructor": false}, {"identifier": "betweenDates", "parameters": "(Date date, Calendar minCal, Calendar maxCal)", "modifiers": "static", "return": "boolean", "signature": "boolean betweenDates(Date date, Calendar minCal, Calendar maxCal)", "full_signature": "static boolean betweenDates(Date date, Calendar minCal, Calendar maxCal)", "class_method_signature": "CalendarPickerView.betweenDates(Date date, Calendar minCal, Calendar maxCal)", "testcase": false, "constructor": false}, {"identifier": "sameMonth", "parameters": "(Calendar cal, MonthDescriptor month)", "modifiers": "private static", "return": "boolean", "signature": "boolean sameMonth(Calendar cal, MonthDescriptor month)", "full_signature": "private static boolean sameMonth(Calendar cal, MonthDescriptor month)", "class_method_signature": "CalendarPickerView.sameMonth(Calendar cal, MonthDescriptor month)", "testcase": false, "constructor": false}, {"identifier": "isDateSelectable", "parameters": "(Date date)", "modifiers": "private", "return": "boolean", "signature": "boolean isDateSelectable(Date date)", "full_signature": "private boolean isDateSelectable(Date date)", "class_method_signature": "CalendarPickerView.isDateSelectable(Date date)", "testcase": false, "constructor": false}, {"identifier": "setOnDateSelectedListener", "parameters": "(OnDateSelectedListener listener)", "modifiers": "public", "return": "void", "signature": "void setOnDateSelectedListener(OnDateSelectedListener listener)", "full_signature": "public void setOnDateSelectedListener(OnDateSelectedListener listener)", "class_method_signature": "CalendarPickerView.setOnDateSelectedListener(OnDateSelectedListener listener)", "testcase": false, "constructor": false}, {"identifier": "setOnInvalidDateSelectedListener", "parameters": "(OnInvalidDateSelectedListener listener)", "modifiers": "public", "return": "void", "signature": "void setOnInvalidDateSelectedListener(OnInvalidDateSelectedListener listener)", "full_signature": "public void setOnInvalidDateSelectedListener(OnInvalidDateSelectedListener listener)", "class_method_signature": "CalendarPickerView.setOnInvalidDateSelectedListener(OnInvalidDateSelectedListener listener)", "testcase": false, "constructor": false}, {"identifier": "setDateSelectableFilter", "parameters": "(DateSelectableFilter listener)", "modifiers": "public", "return": "void", "signature": "void setDateSelectableFilter(DateSelectableFilter listener)", "full_signature": "public void setDateSelectableFilter(DateSelectableFilter listener)", "class_method_signature": "CalendarPickerView.setDateSelectableFilter(DateSelectableFilter listener)", "testcase": false, "constructor": false}, {"identifier": "setCustomDayView", "parameters": "(DayViewAdapter dayViewAdapter)", "modifiers": "public", "return": "void", "signature": "void setCustomDayView(DayViewAdapter dayViewAdapter)", "full_signature": "public void setCustomDayView(DayViewAdapter dayViewAdapter)", "class_method_signature": "CalendarPickerView.setCustomDayView(DayViewAdapter dayViewAdapter)", "testcase": false, "constructor": false}, {"identifier": "setCellClickInterceptor", "parameters": "(CellClickInterceptor listener)", "modifiers": "public", "return": "void", "signature": "void setCellClickInterceptor(CellClickInterceptor listener)", "full_signature": "public void setCellClickInterceptor(CellClickInterceptor listener)", "class_method_signature": "CalendarPickerView.setCellClickInterceptor(CellClickInterceptor listener)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/squareup/timessquare/CalendarPickerView.java"}, "focal_method": {"identifier": "init", "parameters": "(Date minDate, Date maxDate, TimeZone timeZone, Locale locale)", "modifiers": "public", "return": "FluentInitializer", "body": "public FluentInitializer init(Date minDate, Date maxDate, TimeZone timeZone, Locale locale) {\n    if (minDate == null || maxDate == null) {\n      throw new IllegalArgumentException(\n          \"minDate and maxDate must be non-null.  \" + dbg(minDate, maxDate));\n    }\n    if (minDate.after(maxDate)) {\n      throw new IllegalArgumentException(\n          \"minDate must be before maxDate.  \" + dbg(minDate, maxDate));\n    }\n    if (locale == null) {\n      throw new IllegalArgumentException(\"Locale is null.\");\n    }\n    if (timeZone == null) {\n      throw new IllegalArgumentException(\"Time zone is null.\");\n    }\n\n    // Make sure that all calendar instances use the same time zone and locale.\n    this.timeZone = timeZone;\n    this.locale = locale;\n    today = Calendar.getInstance(timeZone, locale);\n    minCal = Calendar.getInstance(timeZone, locale);\n    maxCal = Calendar.getInstance(timeZone, locale);\n    monthCounter = Calendar.getInstance(timeZone, locale);\n    for (MonthDescriptor month : months) {\n      month.setLabel(formatMonthDate(month.getDate()));\n    }\n    weekdayNameFormat =\n        new SimpleDateFormat(getContext().getString(R.string.day_name_format), locale);\n    weekdayNameFormat.setTimeZone(timeZone);\n    fullDateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM, locale);\n    fullDateFormat.setTimeZone(timeZone);\n    monthFormatter = new Formatter(monthBuilder, locale);\n\n    this.selectionMode = SelectionMode.SINGLE;\n    // Clear out any previously-selected dates/cells.\n    selectedCals.clear();\n    selectedCells.clear();\n    highlightedCals.clear();\n    highlightedCells.clear();\n\n    // Clear previous state.\n    cells.clear();\n    months.clear();\n    minCal.setTime(minDate);\n    maxCal.setTime(maxDate);\n    setMidnight(minCal);\n    setMidnight(maxCal);\n    displayOnly = false;\n\n    // maxDate is exclusive: bump back to the previous day so if maxDate is the first of a month,\n    // we don't accidentally include that month in the view.\n    maxCal.add(MINUTE, -1);\n\n    // Now iterate between minCal and maxCal and build up our list of months to show.\n    monthCounter.setTime(minCal.getTime());\n    final int maxMonth = maxCal.get(MONTH);\n    final int maxYear = maxCal.get(YEAR);\n    while ((monthCounter.get(MONTH) <= maxMonth // Up to, including the month.\n        || monthCounter.get(YEAR) < maxYear) // Up to the year.\n        && monthCounter.get(YEAR) < maxYear + 1) { // But not > next yr.\n      Date date = monthCounter.getTime();\n      MonthDescriptor month =\n          new MonthDescriptor(monthCounter.get(MONTH), monthCounter.get(YEAR),\n                  date, formatMonthDate(date));\n      cells.put(monthKey(month), getMonthCells(month, monthCounter));\n      Logr.d(\"Adding month %s\", month);\n      months.add(month);\n      monthCounter.add(MONTH, 1);\n    }\n\n    validateAndUpdate();\n    return new FluentInitializer();\n  }", "signature": "FluentInitializer init(Date minDate, Date maxDate, TimeZone timeZone, Locale locale)", "full_signature": "public FluentInitializer init(Date minDate, Date maxDate, TimeZone timeZone, Locale locale)", "class_method_signature": "CalendarPickerView.init(Date minDate, Date maxDate, TimeZone timeZone, Locale locale)", "testcase": false, "constructor": false, "invocations": ["dbg", "after", "dbg", "getInstance", "getInstance", "getInstance", "getInstance", "setLabel", "formatMonthDate", "getDate", "getString", "getContext", "setTimeZone", "getDateInstance", "setTimeZone", "clear", "clear", "clear", "clear", "clear", "clear", "setTime", "setTime", "setMidnight", "setMidnight", "add", "setTime", "getTime", "get", "get", "get", "get", "get", "getTime", "get", "get", "formatMonthDate", "put", "monthKey", "getMonthCells", "d", "add", "add", "validateAndUpdate"]}, "repository": {"repo_id": 7923123, "url": "https://github.com/square/android-times-square", "language": "Java", "is_fork": false, "fork_count": 1219, "stargazer_count": 4411, "size": 1524, "license": "licensed"}}