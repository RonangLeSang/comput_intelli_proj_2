{"test_class": {"identifier": "TryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SUCCESS_VALUE = \"success\";", "modifier": "private static final", "type": "String", "declarator": "SUCCESS_VALUE = \"success\"", "var_name": "SUCCESS_VALUE"}, {"original_string": "private static final Try<String> SUCCESS = Try.success(SUCCESS_VALUE);", "modifier": "private static final", "type": "Try<String>", "declarator": "SUCCESS = Try.success(SUCCESS_VALUE)", "var_name": "SUCCESS"}, {"original_string": "private static final Exception FAILURE_CAUSE = new IllegalStateException(\"failure\");", "modifier": "private static final", "type": "Exception", "declarator": "FAILURE_CAUSE = new IllegalStateException(\"failure\")", "var_name": "FAILURE_CAUSE"}, {"original_string": "private static final Try<String> FAILURE = Try.failure(FAILURE_CAUSE);", "modifier": "private static final", "type": "Try<String>", "declarator": "FAILURE = Try.failure(FAILURE_CAUSE)", "var_name": "FAILURE"}, {"original_string": "private static final Error ERROR = new Error();", "modifier": "private static final", "type": "Error", "declarator": "ERROR = new Error()", "var_name": "ERROR"}, {"original_string": "private static final AssertionError ASSERTION_ERROR = new AssertionError(\"unexpected\");", "modifier": "private static final", "type": "AssertionError", "declarator": "ASSERTION_ERROR = new AssertionError(\"unexpected\")", "var_name": "ASSERTION_ERROR"}, {"original_string": "private static final LinkageError LINKAGE_ERROR = new LinkageError();", "modifier": "private static final", "type": "LinkageError", "declarator": "LINKAGE_ERROR = new LinkageError()", "var_name": "LINKAGE_ERROR"}, {"original_string": "private static final ThreadDeath THREAD_DEATH = new ThreadDeath();", "modifier": "private static final", "type": "ThreadDeath", "declarator": "THREAD_DEATH = new ThreadDeath()", "var_name": "THREAD_DEATH"}, {"original_string": "private static final VirtualMachineError VM_ERROR = new VirtualMachineError() {\n        private static final long serialVersionUID = 1L;\n    };", "modifier": "private static final", "type": "VirtualMachineError", "declarator": "VM_ERROR = new VirtualMachineError() {\n        private static final long serialVersionUID = 1L;\n    }", "var_name": "VM_ERROR"}], "file": "app/src/test/java/io/vavr/control/TryTest.java"}, "test_case": {"identifier": "shouldThrowNPEWhenFlatMappingFailureWithNullParam", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldThrowNPEWhenFlatMappingFailureWithNullParam() {\n        assertEquals(\n                \"mapper is null\",\n                assertThrows(NullPointerException.class, () -> FAILURE.flatMap(null)).getMessage()\n        );\n    }", "signature": "void shouldThrowNPEWhenFlatMappingFailureWithNullParam()", "full_signature": "@Test void shouldThrowNPEWhenFlatMappingFailureWithNullParam()", "class_method_signature": "TryTest.shouldThrowNPEWhenFlatMappingFailureWithNullParam()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMessage", "assertThrows", "flatMap"]}, "focal_class": {"identifier": "Try", "superclass": "", "interfaces": "implements Iterable<T>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "Try", "parameters": "()", "modifiers": "private", "return": "", "signature": " Try()", "full_signature": "private  Try()", "class_method_signature": "Try.Try()", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(Callable<? extends T> callable)", "modifiers": "public static", "return": "Try<T>", "signature": "Try<T> of(Callable<? extends T> callable)", "full_signature": "public static Try<T> of(Callable<? extends T> callable)", "class_method_signature": "Try.of(Callable<? extends T> callable)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CheckedRunnable runnable)", "modifiers": "public static", "return": "Try<Void>", "signature": "Try<Void> run(CheckedRunnable runnable)", "full_signature": "public static Try<Void> run(CheckedRunnable runnable)", "class_method_signature": "Try.run(CheckedRunnable runnable)", "testcase": false, "constructor": false}, {"identifier": "success", "parameters": "(T value)", "modifiers": "public static", "return": "Try<T>", "signature": "Try<T> success(T value)", "full_signature": "public static Try<T> success(T value)", "class_method_signature": "Try.success(T value)", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "(Throwable exception)", "modifiers": "public static", "return": "Try<T>", "signature": "Try<T> failure(Throwable exception)", "full_signature": "public static Try<T> failure(Throwable exception)", "class_method_signature": "Try.failure(Throwable exception)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(Collector<? super T, A, R> collector)", "modifiers": "public", "return": "R", "signature": "R collect(Collector<? super T, A, R> collector)", "full_signature": "public R collect(Collector<? super T, A, R> collector)", "class_method_signature": "Try.collect(Collector<? super T, A, R> collector)", "testcase": false, "constructor": false}, {"identifier": "failed", "parameters": "()", "modifiers": "public", "return": "Try<Throwable>", "signature": "Try<Throwable> failed()", "full_signature": "public Try<Throwable> failed()", "class_method_signature": "Try.failed()", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(CheckedPredicate<? super T> predicate)", "modifiers": "public", "return": "Try<T>", "signature": "Try<T> filter(CheckedPredicate<? super T> predicate)", "full_signature": "public Try<T> filter(CheckedPredicate<? super T> predicate)", "class_method_signature": "Try.filter(CheckedPredicate<? super T> predicate)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(CheckedFunction<? super T, ? extends Try<? extends U>> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Try<U>", "signature": "Try<U> flatMap(CheckedFunction<? super T, ? extends Try<? extends U>> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public Try<U> flatMap(CheckedFunction<? super T, ? extends Try<? extends U>> mapper)", "class_method_signature": "Try.flatMap(CheckedFunction<? super T, ? extends Try<? extends U>> mapper)", "testcase": false, "constructor": false}, {"identifier": "fold", "parameters": "(Function<? super Throwable, ? extends U> ifFailure, Function<? super T, ? extends U> ifSuccess)", "modifiers": "public", "return": "U", "signature": "U fold(Function<? super Throwable, ? extends U> ifFailure, Function<? super T, ? extends U> ifSuccess)", "full_signature": "public U fold(Function<? super Throwable, ? extends U> ifFailure, Function<? super T, ? extends U> ifSuccess)", "class_method_signature": "Try.fold(Function<? super Throwable, ? extends U> ifFailure, Function<? super T, ? extends U> ifSuccess)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Deprecated public abstract", "return": "T", "signature": "T get()", "full_signature": "@Deprecated public abstract T get()", "class_method_signature": "Try.get()", "testcase": false, "constructor": false}, {"identifier": "getCause", "parameters": "()", "modifiers": "@Deprecated public abstract", "return": "Throwable", "signature": "Throwable getCause()", "full_signature": "@Deprecated public abstract Throwable getCause()", "class_method_signature": "Try.getCause()", "testcase": false, "constructor": false}, {"identifier": "getOrElse", "parameters": "(T other)", "modifiers": "public", "return": "T", "signature": "T getOrElse(T other)", "full_signature": "public T getOrElse(T other)", "class_method_signature": "Try.getOrElse(T other)", "testcase": false, "constructor": false}, {"identifier": "getOrElseGet", "parameters": "(Supplier<? extends T> supplier)", "modifiers": "public", "return": "T", "signature": "T getOrElseGet(Supplier<? extends T> supplier)", "full_signature": "public T getOrElseGet(Supplier<? extends T> supplier)", "class_method_signature": "Try.getOrElseGet(Supplier<? extends T> supplier)", "testcase": false, "constructor": false}, {"identifier": "getOrElseThrow", "parameters": "(Function<? super Throwable, ? extends X> exceptionProvider)", "modifiers": "public", "return": "T", "signature": "T getOrElseThrow(Function<? super Throwable, ? extends X> exceptionProvider)", "full_signature": "public T getOrElseThrow(Function<? super Throwable, ? extends X> exceptionProvider)", "class_method_signature": "Try.getOrElseThrow(Function<? super Throwable, ? extends X> exceptionProvider)", "testcase": false, "constructor": false}, {"identifier": "isFailure", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isFailure()", "full_signature": "public abstract boolean isFailure()", "class_method_signature": "Try.isFailure()", "testcase": false, "constructor": false}, {"identifier": "isSuccess", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isSuccess()", "full_signature": "public abstract boolean isSuccess()", "class_method_signature": "Try.isSuccess()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<T>", "signature": "Iterator<T> iterator()", "full_signature": "@Override public Iterator<T> iterator()", "class_method_signature": "Try.iterator()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(CheckedFunction<? super T, ? extends U> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Try<U>", "signature": "Try<U> map(CheckedFunction<? super T, ? extends U> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public Try<U> map(CheckedFunction<? super T, ? extends U> mapper)", "class_method_signature": "Try.map(CheckedFunction<? super T, ? extends U> mapper)", "testcase": false, "constructor": false}, {"identifier": "mapFailure", "parameters": "(CheckedFunction<? super Throwable, ? extends Throwable> mapper)", "modifiers": "public", "return": "Try<T>", "signature": "Try<T> mapFailure(CheckedFunction<? super Throwable, ? extends Throwable> mapper)", "full_signature": "public Try<T> mapFailure(CheckedFunction<? super Throwable, ? extends Throwable> mapper)", "class_method_signature": "Try.mapFailure(CheckedFunction<? super Throwable, ? extends Throwable> mapper)", "testcase": false, "constructor": false}, {"identifier": "onFailure", "parameters": "(Consumer<? super Throwable> action)", "modifiers": "public", "return": "Try<T>", "signature": "Try<T> onFailure(Consumer<? super Throwable> action)", "full_signature": "public Try<T> onFailure(Consumer<? super Throwable> action)", "class_method_signature": "Try.onFailure(Consumer<? super Throwable> action)", "testcase": false, "constructor": false}, {"identifier": "onSuccess", "parameters": "(Consumer<? super T> action)", "modifiers": "public", "return": "Try<T>", "signature": "Try<T> onSuccess(Consumer<? super T> action)", "full_signature": "public Try<T> onSuccess(Consumer<? super T> action)", "class_method_signature": "Try.onSuccess(Consumer<? super T> action)", "testcase": false, "constructor": false}, {"identifier": "orElse", "parameters": "(Callable<? extends Try<? extends T>> callable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Try<T>", "signature": "Try<T> orElse(Callable<? extends Try<? extends T>> callable)", "full_signature": "@SuppressWarnings(\"unchecked\") public Try<T> orElse(Callable<? extends Try<? extends T>> callable)", "class_method_signature": "Try.orElse(Callable<? extends Try<? extends T>> callable)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "(Class<X> exceptionType, CheckedFunction<? super X, ? extends T> recoveryFunction)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Try<T>", "signature": "Try<T> recover(Class<X> exceptionType, CheckedFunction<? super X, ? extends T> recoveryFunction)", "full_signature": "@SuppressWarnings(\"unchecked\") public Try<T> recover(Class<X> exceptionType, CheckedFunction<? super X, ? extends T> recoveryFunction)", "class_method_signature": "Try.recover(Class<X> exceptionType, CheckedFunction<? super X, ? extends T> recoveryFunction)", "testcase": false, "constructor": false}, {"identifier": "recoverWith", "parameters": "(Class<X> exceptionType, CheckedFunction<? super X, ? extends Try<? extends T>> recoveryFunction)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Try<T>", "signature": "Try<T> recoverWith(Class<X> exceptionType, CheckedFunction<? super X, ? extends Try<? extends T>> recoveryFunction)", "full_signature": "@SuppressWarnings(\"unchecked\") public Try<T> recoverWith(Class<X> exceptionType, CheckedFunction<? super X, ? extends Try<? extends T>> recoveryFunction)", "class_method_signature": "Try.recoverWith(Class<X> exceptionType, CheckedFunction<? super X, ? extends Try<? extends T>> recoveryFunction)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "public", "return": "Stream<T>", "signature": "Stream<T> stream()", "full_signature": "public Stream<T> stream()", "class_method_signature": "Try.stream()", "testcase": false, "constructor": false}, {"identifier": "toOptional", "parameters": "()", "modifiers": "public", "return": "Optional<T>", "signature": "Optional<T> toOptional()", "full_signature": "public Optional<T> toOptional()", "class_method_signature": "Try.toOptional()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(CheckedFunction<? super Throwable, ? extends Try<? extends U>> ifFailure, CheckedFunction<? super T, ? extends Try<? extends U>> ifSuccess)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Try<U>", "signature": "Try<U> transform(CheckedFunction<? super Throwable, ? extends Try<? extends U>> ifFailure, CheckedFunction<? super T, ? extends Try<? extends U>> ifSuccess)", "full_signature": "@SuppressWarnings(\"unchecked\") public Try<U> transform(CheckedFunction<? super Throwable, ? extends Try<? extends U>> ifFailure, CheckedFunction<? super T, ? extends Try<? extends U>> ifSuccess)", "class_method_signature": "Try.transform(CheckedFunction<? super Throwable, ? extends Try<? extends U>> ifFailure, CheckedFunction<? super T, ? extends Try<? extends U>> ifSuccess)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object that)", "modifiers": "@Override public abstract", "return": "boolean", "signature": "boolean equals(Object that)", "full_signature": "@Override public abstract boolean equals(Object that)", "class_method_signature": "Try.equals(Object that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public abstract", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public abstract int hashCode()", "class_method_signature": "Try.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public abstract", "return": "String", "signature": "String toString()", "full_signature": "@Override public abstract String toString()", "class_method_signature": "Try.toString()", "testcase": false, "constructor": false}], "file": "app/src/main/java/io/vavr/control/Try.java"}, "focal_method": {"identifier": "flatMap", "parameters": "(CheckedFunction<? super T, ? extends Try<? extends U>> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Try<U>", "body": "@SuppressWarnings(\"unchecked\")\n    public <U> Try<U> flatMap(CheckedFunction<? super T, ? extends Try<? extends U>> mapper) {\n        Objects.requireNonNull(mapper, \"mapper is null\");\n        if (isSuccess()) {\n            try {\n                return (Try<U>) mapper.apply(get());\n            } catch (Throwable t) {\n                return failure(t);\n            }\n        } else {\n            return (Try<U>) this;\n        }\n    }", "signature": "Try<U> flatMap(CheckedFunction<? super T, ? extends Try<? extends U>> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public Try<U> flatMap(CheckedFunction<? super T, ? extends Try<? extends U>> mapper)", "class_method_signature": "Try.flatMap(CheckedFunction<? super T, ? extends Try<? extends U>> mapper)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "isSuccess", "apply", "get", "failure"]}, "repository": {"repo_id": 4315362, "url": "https://github.com/plusonelabs/calendar-widget", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 354, "size": 49170, "license": "licensed"}}