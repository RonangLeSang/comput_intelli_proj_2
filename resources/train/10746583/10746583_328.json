{"test_class": {"identifier": "TestRoaring64NavigableMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final long outOfRoaringBitmapRange = 2L * Integer.MAX_VALUE + 3L;", "modifier": "public static final", "type": "long", "declarator": "outOfRoaringBitmapRange = 2L * Integer.MAX_VALUE + 3L", "var_name": "outOfRoaringBitmapRange"}], "file": "RoaringBitmap/src/test/java/org/roaringbitmap/longlong/TestRoaring64NavigableMap.java"}, "test_case": {"identifier": "testSelect_Empty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSelect_Empty() {\n    assertThrows(IllegalArgumentException.class, () -> {\n      Roaring64NavigableMap map = newUnsignedHeap();\n\n      map.select(0);\n    });\n  }", "signature": "void testSelect_Empty()", "full_signature": "@Test public void testSelect_Empty()", "class_method_signature": "TestRoaring64NavigableMap.testSelect_Empty()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "newUnsignedHeap", "select"]}, "focal_class": {"identifier": "Roaring64NavigableMap", "superclass": "", "interfaces": "implements Externalizable, LongBitmapDataProvider", "fields": [{"original_string": "private NavigableMap<Integer, BitmapDataProvider> highToBitmap;", "modifier": "private", "type": "NavigableMap<Integer, BitmapDataProvider>", "declarator": "highToBitmap", "var_name": "highToBitmap"}, {"original_string": "private boolean signedLongs = false;", "modifier": "private", "type": "boolean", "declarator": "signedLongs = false", "var_name": "signedLongs"}, {"original_string": "private BitmapDataProviderSupplier supplier;", "modifier": "private", "type": "BitmapDataProviderSupplier", "declarator": "supplier", "var_name": "supplier"}, {"original_string": "private transient boolean doCacheCardinalities = true;", "modifier": "private transient", "type": "boolean", "declarator": "doCacheCardinalities = true", "var_name": "doCacheCardinalities"}, {"original_string": "private transient int firstHighNotValid = highestHigh() + 1;", "modifier": "private transient", "type": "int", "declarator": "firstHighNotValid = highestHigh() + 1", "var_name": "firstHighNotValid"}, {"original_string": "private transient boolean allValid = false;", "modifier": "private transient", "type": "boolean", "declarator": "allValid = false", "var_name": "allValid"}, {"original_string": "private transient long[] sortedCumulatedCardinality = new long[0];", "modifier": "private transient", "type": "long[]", "declarator": "sortedCumulatedCardinality = new long[0]", "var_name": "sortedCumulatedCardinality"}, {"original_string": "private transient int[] sortedHighs = new int[0];", "modifier": "private transient", "type": "int[]", "declarator": "sortedHighs = new int[0]", "var_name": "sortedHighs"}, {"original_string": "private transient Map.Entry<Integer, BitmapDataProvider> latestAddedHigh = null;", "modifier": "private transient", "type": "Map.Entry<Integer, BitmapDataProvider>", "declarator": "latestAddedHigh = null", "var_name": "latestAddedHigh"}, {"original_string": "private static final boolean DEFAULT_ORDER_IS_SIGNED = false;", "modifier": "private static final", "type": "boolean", "declarator": "DEFAULT_ORDER_IS_SIGNED = false", "var_name": "DEFAULT_ORDER_IS_SIGNED"}, {"original_string": "private static final boolean DEFAULT_CARDINALITIES_ARE_CACHED = true;", "modifier": "private static final", "type": "boolean", "declarator": "DEFAULT_CARDINALITIES_ARE_CACHED = true", "var_name": "DEFAULT_CARDINALITIES_ARE_CACHED"}], "methods": [{"identifier": "Roaring64NavigableMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " Roaring64NavigableMap()", "full_signature": "public  Roaring64NavigableMap()", "class_method_signature": "Roaring64NavigableMap.Roaring64NavigableMap()", "testcase": false, "constructor": true}, {"identifier": "Roaring64NavigableMap", "parameters": "(boolean signedLongs)", "modifiers": "public", "return": "", "signature": " Roaring64NavigableMap(boolean signedLongs)", "full_signature": "public  Roaring64NavigableMap(boolean signedLongs)", "class_method_signature": "Roaring64NavigableMap.Roaring64NavigableMap(boolean signedLongs)", "testcase": false, "constructor": true}, {"identifier": "Roaring64NavigableMap", "parameters": "(boolean signedLongs, boolean cacheCardinalities)", "modifiers": "public", "return": "", "signature": " Roaring64NavigableMap(boolean signedLongs, boolean cacheCardinalities)", "full_signature": "public  Roaring64NavigableMap(boolean signedLongs, boolean cacheCardinalities)", "class_method_signature": "Roaring64NavigableMap.Roaring64NavigableMap(boolean signedLongs, boolean cacheCardinalities)", "testcase": false, "constructor": true}, {"identifier": "Roaring64NavigableMap", "parameters": "(BitmapDataProviderSupplier supplier)", "modifiers": "public", "return": "", "signature": " Roaring64NavigableMap(BitmapDataProviderSupplier supplier)", "full_signature": "public  Roaring64NavigableMap(BitmapDataProviderSupplier supplier)", "class_method_signature": "Roaring64NavigableMap.Roaring64NavigableMap(BitmapDataProviderSupplier supplier)", "testcase": false, "constructor": true}, {"identifier": "Roaring64NavigableMap", "parameters": "(boolean signedLongs, BitmapDataProviderSupplier supplier)", "modifiers": "public", "return": "", "signature": " Roaring64NavigableMap(boolean signedLongs, BitmapDataProviderSupplier supplier)", "full_signature": "public  Roaring64NavigableMap(boolean signedLongs, BitmapDataProviderSupplier supplier)", "class_method_signature": "Roaring64NavigableMap.Roaring64NavigableMap(boolean signedLongs, BitmapDataProviderSupplier supplier)", "testcase": false, "constructor": true}, {"identifier": "Roaring64NavigableMap", "parameters": "(boolean signedLongs, boolean cacheCardinalities,\n      BitmapDataProviderSupplier supplier)", "modifiers": "public", "return": "", "signature": " Roaring64NavigableMap(boolean signedLongs, boolean cacheCardinalities,\n      BitmapDataProviderSupplier supplier)", "full_signature": "public  Roaring64NavigableMap(boolean signedLongs, boolean cacheCardinalities,\n      BitmapDataProviderSupplier supplier)", "class_method_signature": "Roaring64NavigableMap.Roaring64NavigableMap(boolean signedLongs, boolean cacheCardinalities,\n      BitmapDataProviderSupplier supplier)", "testcase": false, "constructor": true}, {"identifier": "resetPerfHelpers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetPerfHelpers()", "full_signature": "private void resetPerfHelpers()", "class_method_signature": "Roaring64NavigableMap.resetPerfHelpers()", "testcase": false, "constructor": false}, {"identifier": "getHighToBitmap", "parameters": "()", "modifiers": "", "return": "NavigableMap<Integer, BitmapDataProvider>", "signature": "NavigableMap<Integer, BitmapDataProvider> getHighToBitmap()", "full_signature": " NavigableMap<Integer, BitmapDataProvider> getHighToBitmap()", "class_method_signature": "Roaring64NavigableMap.getHighToBitmap()", "testcase": false, "constructor": false}, {"identifier": "getLowestInvalidHigh", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getLowestInvalidHigh()", "full_signature": " int getLowestInvalidHigh()", "class_method_signature": "Roaring64NavigableMap.getLowestInvalidHigh()", "testcase": false, "constructor": false}, {"identifier": "getSortedCumulatedCardinality", "parameters": "()", "modifiers": "", "return": "long[]", "signature": "long[] getSortedCumulatedCardinality()", "full_signature": " long[] getSortedCumulatedCardinality()", "class_method_signature": "Roaring64NavigableMap.getSortedCumulatedCardinality()", "testcase": false, "constructor": false}, {"identifier": "addLong", "parameters": "(long x)", "modifiers": "@Override public", "return": "void", "signature": "void addLong(long x)", "full_signature": "@Override public void addLong(long x)", "class_method_signature": "Roaring64NavigableMap.addLong(long x)", "testcase": false, "constructor": false}, {"identifier": "addInt", "parameters": "(int x)", "modifiers": "public", "return": "void", "signature": "void addInt(int x)", "full_signature": "public void addInt(int x)", "class_method_signature": "Roaring64NavigableMap.addInt(int x)", "testcase": false, "constructor": false}, {"identifier": "newRoaringBitmap", "parameters": "()", "modifiers": "private", "return": "BitmapDataProvider", "signature": "BitmapDataProvider newRoaringBitmap()", "full_signature": "private BitmapDataProvider newRoaringBitmap()", "class_method_signature": "Roaring64NavigableMap.newRoaringBitmap()", "testcase": false, "constructor": false}, {"identifier": "invalidateAboveHigh", "parameters": "(int high)", "modifiers": "private", "return": "void", "signature": "void invalidateAboveHigh(int high)", "full_signature": "private void invalidateAboveHigh(int high)", "class_method_signature": "Roaring64NavigableMap.invalidateAboveHigh(int high)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(int x, int y)", "modifiers": "private", "return": "int", "signature": "int compare(int x, int y)", "full_signature": "private int compare(int x, int y)", "class_method_signature": "Roaring64NavigableMap.compare(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "pushBitmapForHigh", "parameters": "(int high, BitmapDataProvider bitmap)", "modifiers": "private", "return": "void", "signature": "void pushBitmapForHigh(int high, BitmapDataProvider bitmap)", "full_signature": "private void pushBitmapForHigh(int high, BitmapDataProvider bitmap)", "class_method_signature": "Roaring64NavigableMap.pushBitmapForHigh(int high, BitmapDataProvider bitmap)", "testcase": false, "constructor": false}, {"identifier": "low", "parameters": "(long id)", "modifiers": "private", "return": "int", "signature": "int low(long id)", "full_signature": "private int low(long id)", "class_method_signature": "Roaring64NavigableMap.low(long id)", "testcase": false, "constructor": false}, {"identifier": "high", "parameters": "(long id)", "modifiers": "private", "return": "int", "signature": "int high(long id)", "full_signature": "private int high(long id)", "class_method_signature": "Roaring64NavigableMap.high(long id)", "testcase": false, "constructor": false}, {"identifier": "getLongCardinality", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLongCardinality()", "full_signature": "@Override public long getLongCardinality()", "class_method_signature": "Roaring64NavigableMap.getLongCardinality()", "testcase": false, "constructor": false}, {"identifier": "getIntCardinality", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIntCardinality()", "full_signature": "public int getIntCardinality()", "class_method_signature": "Roaring64NavigableMap.getIntCardinality()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(final long j)", "modifiers": "@Override public", "return": "long", "signature": "long select(final long j)", "full_signature": "@Override public long select(final long j)", "class_method_signature": "Roaring64NavigableMap.select(final long j)", "testcase": false, "constructor": false}, {"identifier": "selectNoCache", "parameters": "(long j)", "modifiers": "private", "return": "long", "signature": "long selectNoCache(long j)", "full_signature": "private long selectNoCache(long j)", "class_method_signature": "Roaring64NavigableMap.selectNoCache(long j)", "testcase": false, "constructor": false}, {"identifier": "throwSelectInvalidIndex", "parameters": "(long j)", "modifiers": "private", "return": "long", "signature": "long throwSelectInvalidIndex(long j)", "full_signature": "private long throwSelectInvalidIndex(long j)", "class_method_signature": "Roaring64NavigableMap.throwSelectInvalidIndex(long j)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<Long>", "signature": "Iterator<Long> iterator()", "full_signature": "public Iterator<Long> iterator()", "class_method_signature": "Roaring64NavigableMap.iterator()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(final LongConsumer lc)", "modifiers": "@Override public", "return": "void", "signature": "void forEach(final LongConsumer lc)", "full_signature": "@Override public void forEach(final LongConsumer lc)", "class_method_signature": "Roaring64NavigableMap.forEach(final LongConsumer lc)", "testcase": false, "constructor": false}, {"identifier": "rankLong", "parameters": "(long id)", "modifiers": "@Override public", "return": "long", "signature": "long rankLong(long id)", "full_signature": "@Override public long rankLong(long id)", "class_method_signature": "Roaring64NavigableMap.rankLong(long id)", "testcase": false, "constructor": false}, {"identifier": "rankLongNoCache", "parameters": "(int high, int low)", "modifiers": "private", "return": "long", "signature": "long rankLongNoCache(int high, int low)", "full_signature": "private long rankLongNoCache(int high, int low)", "class_method_signature": "Roaring64NavigableMap.rankLongNoCache(int high, int low)", "testcase": false, "constructor": false}, {"identifier": "ensureCumulatives", "parameters": "(int high)", "modifiers": "protected", "return": "int", "signature": "int ensureCumulatives(int high)", "full_signature": "protected int ensureCumulatives(int high)", "class_method_signature": "Roaring64NavigableMap.ensureCumulatives(int high)", "testcase": false, "constructor": false}, {"identifier": "binarySearch", "parameters": "(int[] array, int key)", "modifiers": "private", "return": "int", "signature": "int binarySearch(int[] array, int key)", "full_signature": "private int binarySearch(int[] array, int key)", "class_method_signature": "Roaring64NavigableMap.binarySearch(int[] array, int key)", "testcase": false, "constructor": false}, {"identifier": "binarySearch", "parameters": "(int[] array, int from, int to, int key)", "modifiers": "private", "return": "int", "signature": "int binarySearch(int[] array, int from, int to, int key)", "full_signature": "private int binarySearch(int[] array, int from, int to, int key)", "class_method_signature": "Roaring64NavigableMap.binarySearch(int[] array, int from, int to, int key)", "testcase": false, "constructor": false}, {"identifier": "unsignedBinarySearch", "parameters": "(int[] a, int fromIndex, int toIndex, int key,\n      Comparator<? super Integer> c)", "modifiers": "private static", "return": "int", "signature": "int unsignedBinarySearch(int[] a, int fromIndex, int toIndex, int key,\n      Comparator<? super Integer> c)", "full_signature": "private static int unsignedBinarySearch(int[] a, int fromIndex, int toIndex, int key,\n      Comparator<? super Integer> c)", "class_method_signature": "Roaring64NavigableMap.unsignedBinarySearch(int[] a, int fromIndex, int toIndex, int key,\n      Comparator<? super Integer> c)", "testcase": false, "constructor": false}, {"identifier": "ensureOne", "parameters": "(Map.Entry<Integer, BitmapDataProvider> e, int currentHigh, int indexOk)", "modifiers": "private", "return": "void", "signature": "void ensureOne(Map.Entry<Integer, BitmapDataProvider> e, int currentHigh, int indexOk)", "full_signature": "private void ensureOne(Map.Entry<Integer, BitmapDataProvider> e, int currentHigh, int indexOk)", "class_method_signature": "Roaring64NavigableMap.ensureOne(Map.Entry<Integer, BitmapDataProvider> e, int currentHigh, int indexOk)", "testcase": false, "constructor": false}, {"identifier": "highestHigh", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int highestHigh()", "full_signature": "private int highestHigh()", "class_method_signature": "Roaring64NavigableMap.highestHigh()", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(final Roaring64NavigableMap x2)", "modifiers": "public", "return": "void", "signature": "void or(final Roaring64NavigableMap x2)", "full_signature": "public void or(final Roaring64NavigableMap x2)", "class_method_signature": "Roaring64NavigableMap.or(final Roaring64NavigableMap x2)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(final Roaring64NavigableMap x2)", "modifiers": "public", "return": "void", "signature": "void xor(final Roaring64NavigableMap x2)", "full_signature": "public void xor(final Roaring64NavigableMap x2)", "class_method_signature": "Roaring64NavigableMap.xor(final Roaring64NavigableMap x2)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(final Roaring64NavigableMap x2)", "modifiers": "public", "return": "void", "signature": "void and(final Roaring64NavigableMap x2)", "full_signature": "public void and(final Roaring64NavigableMap x2)", "class_method_signature": "Roaring64NavigableMap.and(final Roaring64NavigableMap x2)", "testcase": false, "constructor": false}, {"identifier": "andNot", "parameters": "(final Roaring64NavigableMap x2)", "modifiers": "public", "return": "void", "signature": "void andNot(final Roaring64NavigableMap x2)", "full_signature": "public void andNot(final Roaring64NavigableMap x2)", "class_method_signature": "Roaring64NavigableMap.andNot(final Roaring64NavigableMap x2)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "Roaring64NavigableMap.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@Override public void readExternal(ObjectInput in)", "class_method_signature": "Roaring64NavigableMap.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Roaring64NavigableMap.toString()", "testcase": false, "constructor": false}, {"identifier": "getLongIterator", "parameters": "()", "modifiers": "@Override public", "return": "LongIterator", "signature": "LongIterator getLongIterator()", "full_signature": "@Override public LongIterator getLongIterator()", "class_method_signature": "Roaring64NavigableMap.getLongIterator()", "testcase": false, "constructor": false}, {"identifier": "toIterator", "parameters": "(final Iterator<Map.Entry<Integer, BitmapDataProvider>> it,\n      final boolean reversed)", "modifiers": "protected", "return": "LongIterator", "signature": "LongIterator toIterator(final Iterator<Map.Entry<Integer, BitmapDataProvider>> it,\n      final boolean reversed)", "full_signature": "protected LongIterator toIterator(final Iterator<Map.Entry<Integer, BitmapDataProvider>> it,\n      final boolean reversed)", "class_method_signature": "Roaring64NavigableMap.toIterator(final Iterator<Map.Entry<Integer, BitmapDataProvider>> it,\n      final boolean reversed)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(long x)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(long x)", "full_signature": "@Override public boolean contains(long x)", "class_method_signature": "Roaring64NavigableMap.contains(long x)", "testcase": false, "constructor": false}, {"identifier": "getSizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSizeInBytes()", "full_signature": "@Override public int getSizeInBytes()", "class_method_signature": "Roaring64NavigableMap.getSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "getLongSizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLongSizeInBytes()", "full_signature": "@Override public long getLongSizeInBytes()", "class_method_signature": "Roaring64NavigableMap.getLongSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "Roaring64NavigableMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "(long x)", "modifiers": "@Override public", "return": "ImmutableLongBitmapDataProvider", "signature": "ImmutableLongBitmapDataProvider limit(long x)", "full_signature": "@Override public ImmutableLongBitmapDataProvider limit(long x)", "class_method_signature": "Roaring64NavigableMap.limit(long x)", "testcase": false, "constructor": false}, {"identifier": "runOptimize", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean runOptimize()", "full_signature": "public boolean runOptimize()", "class_method_signature": "Roaring64NavigableMap.runOptimize()", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void serialize(DataOutput out)", "full_signature": "@Override public void serialize(DataOutput out)", "class_method_signature": "Roaring64NavigableMap.serialize(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(DataInput in)", "modifiers": "public", "return": "void", "signature": "void deserialize(DataInput in)", "full_signature": "public void deserialize(DataInput in)", "class_method_signature": "Roaring64NavigableMap.deserialize(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "serializedSizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long serializedSizeInBytes()", "full_signature": "@Override public long serializedSizeInBytes()", "class_method_signature": "Roaring64NavigableMap.serializedSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Roaring64NavigableMap.clear()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "long[]", "signature": "long[] toArray()", "full_signature": "@Override public long[] toArray()", "class_method_signature": "Roaring64NavigableMap.toArray()", "testcase": false, "constructor": false}, {"identifier": "bitmapOf", "parameters": "(final long... dat)", "modifiers": "public static", "return": "Roaring64NavigableMap", "signature": "Roaring64NavigableMap bitmapOf(final long... dat)", "full_signature": "public static Roaring64NavigableMap bitmapOf(final long... dat)", "class_method_signature": "Roaring64NavigableMap.bitmapOf(final long... dat)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(long... dat)", "modifiers": "public", "return": "void", "signature": "void add(long... dat)", "full_signature": "public void add(long... dat)", "class_method_signature": "Roaring64NavigableMap.add(long... dat)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final long rangeStart, final long rangeEnd)", "modifiers": "public", "return": "void", "signature": "void add(final long rangeStart, final long rangeEnd)", "full_signature": "public void add(final long rangeStart, final long rangeEnd)", "class_method_signature": "Roaring64NavigableMap.add(final long rangeStart, final long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "getReverseLongIterator", "parameters": "()", "modifiers": "@Override public", "return": "LongIterator", "signature": "LongIterator getReverseLongIterator()", "full_signature": "@Override public LongIterator getReverseLongIterator()", "class_method_signature": "Roaring64NavigableMap.getReverseLongIterator()", "testcase": false, "constructor": false}, {"identifier": "removeLong", "parameters": "(long x)", "modifiers": "@Override public", "return": "void", "signature": "void removeLong(long x)", "full_signature": "@Override public void removeLong(long x)", "class_method_signature": "Roaring64NavigableMap.removeLong(long x)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void trim()", "full_signature": "@Override public void trim()", "class_method_signature": "Roaring64NavigableMap.trim()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Roaring64NavigableMap.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Roaring64NavigableMap.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "(final long x)", "modifiers": "public", "return": "void", "signature": "void flip(final long x)", "full_signature": "public void flip(final long x)", "class_method_signature": "Roaring64NavigableMap.flip(final long x)", "testcase": false, "constructor": false}], "file": "RoaringBitmap/src/main/java/org/roaringbitmap/longlong/Roaring64NavigableMap.java"}, "focal_method": {"identifier": "select", "parameters": "(final long j)", "modifiers": "@Override public", "return": "long", "body": "@Override\n  public long select(final long j) throws IllegalArgumentException {\n    if (!doCacheCardinalities) {\n      return selectNoCache(j);\n    }\n\n    // Ensure all cumulatives as we we have straightforward way to know in advance the high of the\n    // j-th value\n    int indexOk = ensureCumulatives(highestHigh());\n\n    if (highToBitmap.isEmpty()) {\n      return throwSelectInvalidIndex(j);\n    }\n\n    // Use normal binarySearch as cardinality does not depends on considering longs signed or\n    // unsigned\n    // We need sortedCumulatedCardinality not to contain duplicated, else binarySearch may return\n    // any of the duplicates: we need to ensure it holds no high associated to an empty bitmap\n    int position = Arrays.binarySearch(sortedCumulatedCardinality, 0, indexOk, j);\n\n    if (position >= 0) {\n      if (position == indexOk - 1) {\n        // .select has been called on this.getCardinality\n        return throwSelectInvalidIndex(j);\n      }\n\n      // There is a bucket leading to this cardinality: the j-th element is the first element of\n      // next bucket\n      int high = sortedHighs[position + 1];\n      BitmapDataProvider nextBitmap = highToBitmap.get(high);\n      return RoaringIntPacking.pack(high, nextBitmap.select(0));\n    } else {\n      // There is no bucket with this cardinality\n      int insertionPoint = -position - 1;\n\n      final long previousBucketCardinality;\n      if (insertionPoint == 0) {\n        previousBucketCardinality = 0L;\n      } else if (insertionPoint >= indexOk) {\n        return throwSelectInvalidIndex(j);\n      } else {\n        previousBucketCardinality = sortedCumulatedCardinality[insertionPoint - 1];\n      }\n\n      // We get a 'select' query for a single bitmap: should fit in an int\n      final int givenBitmapSelect = (int) (j - previousBucketCardinality);\n\n      int high = sortedHighs[insertionPoint];\n      BitmapDataProvider lowBitmap = highToBitmap.get(high);\n      int low = lowBitmap.select(givenBitmapSelect);\n\n      return RoaringIntPacking.pack(high, low);\n    }\n  }", "signature": "long select(final long j)", "full_signature": "@Override public long select(final long j)", "class_method_signature": "Roaring64NavigableMap.select(final long j)", "testcase": false, "constructor": false, "invocations": ["selectNoCache", "ensureCumulatives", "highestHigh", "isEmpty", "throwSelectInvalidIndex", "binarySearch", "throwSelectInvalidIndex", "get", "pack", "select", "throwSelectInvalidIndex", "get", "select", "pack"]}, "repository": {"repo_id": 10746583, "url": "https://github.com/RoaringBitmap/RoaringBitmap", "language": "Java", "is_fork": false, "fork_count": 335, "stargazer_count": 1786, "size": 88641, "license": "licensed"}}