{"test_class": {"identifier": "TestImmutableRoaringBitmap", "superclass": "", "interfaces": "", "fields": [], "file": "RoaringBitmap/src/test/java/org/roaringbitmap/buffer/TestImmutableRoaringBitmap.java"}, "test_case": {"identifier": "fliptest1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void fliptest1() {\n    final MutableRoaringBitmap rb = new MutableRoaringBitmap();\n    rb.add(0);\n    rb.add(2);\n    final MutableRoaringBitmap rb2 = MutableRoaringBitmap.flip(rb, 0L, 3);\n    final MutableRoaringBitmap result = new MutableRoaringBitmap();\n    result.add(1);\n\n    assertEquals(result, rb2);\n  }", "signature": "void fliptest1()", "full_signature": "@Test public void fliptest1()", "class_method_signature": "TestImmutableRoaringBitmap.fliptest1()", "testcase": true, "constructor": false, "invocations": ["add", "add", "flip", "add", "assertEquals"]}, "focal_class": {"identifier": "ImmutableRoaringBitmap", "superclass": "", "interfaces": "implements Iterable<Integer>, Cloneable, ImmutableBitmapDataProvider", "fields": [{"original_string": "PointableRoaringArray highLowContainer = null;", "modifier": "", "type": "PointableRoaringArray", "declarator": "highLowContainer = null", "var_name": "highLowContainer"}], "methods": [{"identifier": "and", "parameters": "(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap and(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "full_signature": "public static MutableRoaringBitmap and(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.and(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final int rangeStart, final int rangeEnd)", "modifiers": "@Deprecated public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap and(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final int rangeStart, final int rangeEnd)", "full_signature": "@Deprecated public static MutableRoaringBitmap and(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final int rangeStart, final int rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.and(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final int rangeStart, final int rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap and(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "full_signature": "public static MutableRoaringBitmap and(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.and(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "andCardinality", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "int", "signature": "int andCardinality(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "full_signature": "public static int andCardinality(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.andCardinality(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "xorCardinality", "parameters": "(final ImmutableRoaringBitmap x1,\n                                   final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "int", "signature": "int xorCardinality(final ImmutableRoaringBitmap x1,\n                                   final ImmutableRoaringBitmap x2)", "full_signature": "public static int xorCardinality(final ImmutableRoaringBitmap x1,\n                                   final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.xorCardinality(final ImmutableRoaringBitmap x1,\n                                   final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "andNotCardinality", "parameters": "(final ImmutableRoaringBitmap x1,\n                                      final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "int", "signature": "int andNotCardinality(final ImmutableRoaringBitmap x1,\n                                      final ImmutableRoaringBitmap x2)", "full_signature": "public static int andNotCardinality(final ImmutableRoaringBitmap x1,\n                                      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.andNotCardinality(final ImmutableRoaringBitmap x1,\n                                      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "andNot", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2, long rangeStart, long rangeEnd)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap andNot(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2, long rangeStart, long rangeEnd)", "full_signature": "public static MutableRoaringBitmap andNot(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2, long rangeStart, long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.andNot(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2, long rangeStart, long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "andNot", "parameters": "(final ImmutableRoaringBitmap x1,\n                                              final ImmutableRoaringBitmap x2,\n                                              final int rangeStart, final int rangeEnd)", "modifiers": "@Deprecated public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap andNot(final ImmutableRoaringBitmap x1,\n                                              final ImmutableRoaringBitmap x2,\n                                              final int rangeStart, final int rangeEnd)", "full_signature": "@Deprecated public static MutableRoaringBitmap andNot(final ImmutableRoaringBitmap x1,\n                                              final ImmutableRoaringBitmap x2,\n                                              final int rangeStart, final int rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.andNot(final ImmutableRoaringBitmap x1,\n                                              final ImmutableRoaringBitmap x2,\n                                              final int rangeStart, final int rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "andNot", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap andNot(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "full_signature": "public static MutableRoaringBitmap andNot(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.andNot(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "orNot", "parameters": "(\n          final ImmutableRoaringBitmap x1, final ImmutableRoaringBitmap x2, long rangeEnd)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap orNot(\n          final ImmutableRoaringBitmap x1, final ImmutableRoaringBitmap x2, long rangeEnd)", "full_signature": "public static MutableRoaringBitmap orNot(\n          final ImmutableRoaringBitmap x1, final ImmutableRoaringBitmap x2, long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.orNot(\n          final ImmutableRoaringBitmap x1, final ImmutableRoaringBitmap x2, long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "bitmapOf", "parameters": "(final int... data)", "modifiers": "public static", "return": "ImmutableRoaringBitmap", "signature": "ImmutableRoaringBitmap bitmapOf(final int... data)", "full_signature": "public static ImmutableRoaringBitmap bitmapOf(final int... data)", "class_method_signature": "ImmutableRoaringBitmap.bitmapOf(final int... data)", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap flip(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd)", "full_signature": "public static MutableRoaringBitmap flip(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.flip(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "(ImmutableRoaringBitmap bm,\n                                            final int rangeStart, final int rangeEnd)", "modifiers": "@Deprecated public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap flip(ImmutableRoaringBitmap bm,\n                                            final int rangeStart, final int rangeEnd)", "full_signature": "@Deprecated public static MutableRoaringBitmap flip(ImmutableRoaringBitmap bm,\n                                            final int rangeStart, final int rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.flip(ImmutableRoaringBitmap bm,\n                                            final int rangeStart, final int rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "selectRangeWithoutCopy", "parameters": "(\n      final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "modifiers": "private static", "return": "Iterator<ImmutableRoaringBitmap>", "signature": "Iterator<ImmutableRoaringBitmap> selectRangeWithoutCopy(\n      final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "full_signature": "private static Iterator<ImmutableRoaringBitmap> selectRangeWithoutCopy(\n      final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.selectRangeWithoutCopy(\n      final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "selectRangeWithoutCopy", "parameters": "(ImmutableRoaringBitmap rb,\n      final long rangeStart, final long rangeEnd)", "modifiers": "private static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap selectRangeWithoutCopy(ImmutableRoaringBitmap rb,\n      final long rangeStart, final long rangeEnd)", "full_signature": "private static MutableRoaringBitmap selectRangeWithoutCopy(ImmutableRoaringBitmap rb,\n      final long rangeStart, final long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.selectRangeWithoutCopy(ImmutableRoaringBitmap rb,\n      final long rangeStart, final long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "boolean", "signature": "boolean intersects(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "full_signature": "public static boolean intersects(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.intersects(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "lazyor", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "modifiers": "protected static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap lazyor(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "full_signature": "protected static MutableRoaringBitmap lazyor(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.lazyor(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(ImmutableRoaringBitmap... bitmaps)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap or(ImmutableRoaringBitmap... bitmaps)", "full_signature": "public static MutableRoaringBitmap or(ImmutableRoaringBitmap... bitmaps)", "class_method_signature": "ImmutableRoaringBitmap.or(ImmutableRoaringBitmap... bitmaps)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap or(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "full_signature": "public static MutableRoaringBitmap or(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.or(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Iterator<? extends ImmutableRoaringBitmap> bitmaps)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap or(Iterator<? extends ImmutableRoaringBitmap> bitmaps)", "full_signature": "public static MutableRoaringBitmap or(Iterator<? extends ImmutableRoaringBitmap> bitmaps)", "class_method_signature": "ImmutableRoaringBitmap.or(Iterator<? extends ImmutableRoaringBitmap> bitmaps)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap or(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "full_signature": "public static MutableRoaringBitmap or(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.or(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n          final int rangeStart, final int rangeEnd)", "modifiers": "@Deprecated public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap or(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n          final int rangeStart, final int rangeEnd)", "full_signature": "@Deprecated public static MutableRoaringBitmap or(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n          final int rangeStart, final int rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.or(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n          final int rangeStart, final int rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "orCardinality", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "int", "signature": "int orCardinality(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "full_signature": "public static int orCardinality(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.orCardinality(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap xor(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "full_signature": "public static MutableRoaringBitmap xor(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.xor(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n      final long rangeStart, final long rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n          final int rangeStart, final int rangeEnd)", "modifiers": "@Deprecated public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap xor(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n          final int rangeStart, final int rangeEnd)", "full_signature": "@Deprecated public static MutableRoaringBitmap xor(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n          final int rangeStart, final int rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.xor(final Iterator<? extends ImmutableRoaringBitmap> bitmaps,\n          final int rangeStart, final int rangeEnd)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap xor(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "full_signature": "public static MutableRoaringBitmap xor(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "class_method_signature": "ImmutableRoaringBitmap.xor(final ImmutableRoaringBitmap x1,\n      final ImmutableRoaringBitmap x2)", "testcase": false, "constructor": false}, {"identifier": "ImmutableRoaringBitmap", "parameters": "()", "modifiers": "protected", "return": "", "signature": " ImmutableRoaringBitmap()", "full_signature": "protected  ImmutableRoaringBitmap()", "class_method_signature": "ImmutableRoaringBitmap.ImmutableRoaringBitmap()", "testcase": false, "constructor": true}, {"identifier": "ImmutableRoaringBitmap", "parameters": "(final ByteBuffer b)", "modifiers": "public", "return": "", "signature": " ImmutableRoaringBitmap(final ByteBuffer b)", "full_signature": "public  ImmutableRoaringBitmap(final ByteBuffer b)", "class_method_signature": "ImmutableRoaringBitmap.ImmutableRoaringBitmap(final ByteBuffer b)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "ImmutableRoaringBitmap", "signature": "ImmutableRoaringBitmap clone()", "full_signature": "@Override public ImmutableRoaringBitmap clone()", "class_method_signature": "ImmutableRoaringBitmap.clone()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final int x)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(final int x)", "full_signature": "@Override public boolean contains(final int x)", "class_method_signature": "ImmutableRoaringBitmap.contains(final int x)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(long minimum, long supremum)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(long minimum, long supremum)", "full_signature": "public boolean contains(long minimum, long supremum)", "class_method_signature": "ImmutableRoaringBitmap.contains(long minimum, long supremum)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(ImmutableRoaringBitmap subset)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(ImmutableRoaringBitmap subset)", "full_signature": "public boolean contains(ImmutableRoaringBitmap subset)", "class_method_signature": "ImmutableRoaringBitmap.contains(ImmutableRoaringBitmap subset)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ImmutableRoaringBitmap.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "isHammingSimilar", "parameters": "(ImmutableRoaringBitmap other, int tolerance)", "modifiers": "public", "return": "boolean", "signature": "boolean isHammingSimilar(ImmutableRoaringBitmap other, int tolerance)", "full_signature": "public boolean isHammingSimilar(ImmutableRoaringBitmap other, int tolerance)", "class_method_signature": "ImmutableRoaringBitmap.isHammingSimilar(ImmutableRoaringBitmap other, int tolerance)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(long minimum, long supremum)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(long minimum, long supremum)", "full_signature": "public boolean intersects(long minimum, long supremum)", "class_method_signature": "ImmutableRoaringBitmap.intersects(long minimum, long supremum)", "testcase": false, "constructor": false}, {"identifier": "getLongCardinality", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLongCardinality()", "full_signature": "@Override public long getLongCardinality()", "class_method_signature": "ImmutableRoaringBitmap.getLongCardinality()", "testcase": false, "constructor": false}, {"identifier": "getCardinality", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCardinality()", "full_signature": "@Override public int getCardinality()", "class_method_signature": "ImmutableRoaringBitmap.getCardinality()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(IntConsumer ic)", "modifiers": "@Override public", "return": "void", "signature": "void forEach(IntConsumer ic)", "full_signature": "@Override public void forEach(IntConsumer ic)", "class_method_signature": "ImmutableRoaringBitmap.forEach(IntConsumer ic)", "testcase": false, "constructor": false}, {"identifier": "getContainerPointer", "parameters": "()", "modifiers": "public", "return": "MappeableContainerPointer", "signature": "MappeableContainerPointer getContainerPointer()", "full_signature": "public MappeableContainerPointer getContainerPointer()", "class_method_signature": "ImmutableRoaringBitmap.getContainerPointer()", "testcase": false, "constructor": false}, {"identifier": "getIntIterator", "parameters": "()", "modifiers": "@Override public", "return": "PeekableIntIterator", "signature": "PeekableIntIterator getIntIterator()", "full_signature": "@Override public PeekableIntIterator getIntIterator()", "class_method_signature": "ImmutableRoaringBitmap.getIntIterator()", "testcase": false, "constructor": false}, {"identifier": "getReverseIntIterator", "parameters": "()", "modifiers": "@Override public", "return": "IntIterator", "signature": "IntIterator getReverseIntIterator()", "full_signature": "@Override public IntIterator getReverseIntIterator()", "class_method_signature": "ImmutableRoaringBitmap.getReverseIntIterator()", "testcase": false, "constructor": false}, {"identifier": "getBatchIterator", "parameters": "()", "modifiers": "@Override public", "return": "BatchIterator", "signature": "BatchIterator getBatchIterator()", "full_signature": "@Override public BatchIterator getBatchIterator()", "class_method_signature": "ImmutableRoaringBitmap.getBatchIterator()", "testcase": false, "constructor": false}, {"identifier": "getLongSizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLongSizeInBytes()", "full_signature": "@Override public long getLongSizeInBytes()", "class_method_signature": "ImmutableRoaringBitmap.getLongSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "getSizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSizeInBytes()", "full_signature": "@Override public int getSizeInBytes()", "class_method_signature": "ImmutableRoaringBitmap.getSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableRoaringBitmap.hashCode()", "testcase": false, "constructor": false}, {"identifier": "hasRunCompression", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasRunCompression()", "full_signature": "public boolean hasRunCompression()", "class_method_signature": "ImmutableRoaringBitmap.hasRunCompression()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ImmutableRoaringBitmap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Integer>", "signature": "Iterator<Integer> iterator()", "full_signature": "@Override public Iterator<Integer> iterator()", "class_method_signature": "ImmutableRoaringBitmap.iterator()", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "(int maxcardinality)", "modifiers": "@Override public", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap limit(int maxcardinality)", "full_signature": "@Override public MutableRoaringBitmap limit(int maxcardinality)", "class_method_signature": "ImmutableRoaringBitmap.limit(int maxcardinality)", "testcase": false, "constructor": false}, {"identifier": "rankLong", "parameters": "(int x)", "modifiers": "@Override public", "return": "long", "signature": "long rankLong(int x)", "full_signature": "@Override public long rankLong(int x)", "class_method_signature": "ImmutableRoaringBitmap.rankLong(int x)", "testcase": false, "constructor": false}, {"identifier": "rangeCardinality", "parameters": "(long start, long end)", "modifiers": "@Override public", "return": "long", "signature": "long rangeCardinality(long start, long end)", "full_signature": "@Override public long rangeCardinality(long start, long end)", "class_method_signature": "ImmutableRoaringBitmap.rangeCardinality(long start, long end)", "testcase": false, "constructor": false}, {"identifier": "rank", "parameters": "(int x)", "modifiers": "@Override public", "return": "int", "signature": "int rank(int x)", "full_signature": "@Override public int rank(int x)", "class_method_signature": "ImmutableRoaringBitmap.rank(int x)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(int j)", "modifiers": "@Override public", "return": "int", "signature": "int select(int j)", "full_signature": "@Override public int select(int j)", "class_method_signature": "ImmutableRoaringBitmap.select(int j)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int first()", "full_signature": "@Override public int first()", "class_method_signature": "ImmutableRoaringBitmap.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int last()", "full_signature": "@Override public int last()", "class_method_signature": "ImmutableRoaringBitmap.last()", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "(int fromValue)", "modifiers": "@Override public", "return": "long", "signature": "long nextValue(int fromValue)", "full_signature": "@Override public long nextValue(int fromValue)", "class_method_signature": "ImmutableRoaringBitmap.nextValue(int fromValue)", "testcase": false, "constructor": false}, {"identifier": "previousValue", "parameters": "(int fromValue)", "modifiers": "@Override public", "return": "long", "signature": "long previousValue(int fromValue)", "full_signature": "@Override public long previousValue(int fromValue)", "class_method_signature": "ImmutableRoaringBitmap.previousValue(int fromValue)", "testcase": false, "constructor": false}, {"identifier": "nextAbsentValue", "parameters": "(int fromValue)", "modifiers": "@Override public", "return": "long", "signature": "long nextAbsentValue(int fromValue)", "full_signature": "@Override public long nextAbsentValue(int fromValue)", "class_method_signature": "ImmutableRoaringBitmap.nextAbsentValue(int fromValue)", "testcase": false, "constructor": false}, {"identifier": "computeNextAbsentValue", "parameters": "(int fromValue)", "modifiers": "private", "return": "long", "signature": "long computeNextAbsentValue(int fromValue)", "full_signature": "private long computeNextAbsentValue(int fromValue)", "class_method_signature": "ImmutableRoaringBitmap.computeNextAbsentValue(int fromValue)", "testcase": false, "constructor": false}, {"identifier": "previousAbsentValue", "parameters": "(int fromValue)", "modifiers": "@Override public", "return": "long", "signature": "long previousAbsentValue(int fromValue)", "full_signature": "@Override public long previousAbsentValue(int fromValue)", "class_method_signature": "ImmutableRoaringBitmap.previousAbsentValue(int fromValue)", "testcase": false, "constructor": false}, {"identifier": "computePreviousAbsentValue", "parameters": "(int fromValue)", "modifiers": "private", "return": "long", "signature": "long computePreviousAbsentValue(int fromValue)", "full_signature": "private long computePreviousAbsentValue(int fromValue)", "class_method_signature": "ImmutableRoaringBitmap.computePreviousAbsentValue(int fromValue)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void serialize(DataOutput out)", "full_signature": "@Override public void serialize(DataOutput out)", "class_method_signature": "ImmutableRoaringBitmap.serialize(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "void", "signature": "void serialize(ByteBuffer buffer)", "full_signature": "@Override public void serialize(ByteBuffer buffer)", "class_method_signature": "ImmutableRoaringBitmap.serialize(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "serializedSizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int serializedSizeInBytes()", "full_signature": "@Override public int serializedSizeInBytes()", "class_method_signature": "ImmutableRoaringBitmap.serializedSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] toArray()", "full_signature": "@Override public int[] toArray()", "class_method_signature": "ImmutableRoaringBitmap.toArray()", "testcase": false, "constructor": false}, {"identifier": "toMutableRoaringBitmap", "parameters": "()", "modifiers": "public", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap toMutableRoaringBitmap()", "full_signature": "public MutableRoaringBitmap toMutableRoaringBitmap()", "class_method_signature": "ImmutableRoaringBitmap.toMutableRoaringBitmap()", "testcase": false, "constructor": false}, {"identifier": "toRoaringBitmap", "parameters": "()", "modifiers": "public", "return": "RoaringBitmap", "signature": "RoaringBitmap toRoaringBitmap()", "full_signature": "public RoaringBitmap toRoaringBitmap()", "class_method_signature": "ImmutableRoaringBitmap.toRoaringBitmap()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableRoaringBitmap.toString()", "testcase": false, "constructor": false}], "file": "RoaringBitmap/src/main/java/org/roaringbitmap/buffer/ImmutableRoaringBitmap.java"}, "focal_method": {"identifier": "flip", "parameters": "(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd)", "modifiers": "public static", "return": "MutableRoaringBitmap", "body": "public static MutableRoaringBitmap flip(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd) {\n    rangeSanityCheck(rangeStart, rangeEnd);\n    if (rangeStart >= rangeEnd) {\n      throw new RuntimeException(\"Invalid range \" + rangeStart + \" -- \" + rangeEnd);\n    }\n\n    MutableRoaringBitmap answer = new MutableRoaringBitmap();\n    final char hbStart = highbits(rangeStart);\n    final char lbStart = lowbits(rangeStart);\n    final char hbLast = highbits(rangeEnd - 1);\n    final char lbLast = lowbits(rangeEnd - 1);\n\n    // copy the containers before the active area\n    answer.getMappeableRoaringArray().appendCopiesUntil(bm.highLowContainer, hbStart);\n\n    final int max = (BufferUtil.maxLowBit());\n    for (char hb = hbStart; hb <= hbLast; ++hb) {\n      final int containerStart = (hb == hbStart) ? (lbStart) : 0;\n      final int containerLast = (hb == hbLast) ? (lbLast) : max;\n\n      final int i = bm.highLowContainer.getIndex(hb);\n      final int j = answer.getMappeableRoaringArray().getIndex(hb);\n      assert j < 0;\n\n      if (i >= 0) {\n        final MappeableContainer c =\n            bm.highLowContainer.getContainerAtIndex(i).not(containerStart, containerLast + 1);\n        if (!c.isEmpty()) {\n          answer.getMappeableRoaringArray().insertNewKeyValueAt(-j - 1, hb, c);\n        }\n\n      } else { // *think* the range of ones must never be\n        // empty.\n        answer.getMappeableRoaringArray().insertNewKeyValueAt(-j - 1, hb,\n            MappeableContainer.rangeOfOnes(containerStart, containerLast + 1));\n      }\n    }\n    // copy the containers after the active area.\n    answer.getMappeableRoaringArray().appendCopiesAfter(bm.highLowContainer, hbLast);\n\n    return answer;\n  }", "signature": "MutableRoaringBitmap flip(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd)", "full_signature": "public static MutableRoaringBitmap flip(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd)", "class_method_signature": "ImmutableRoaringBitmap.flip(ImmutableRoaringBitmap bm, final long rangeStart,\n      final long rangeEnd)", "testcase": false, "constructor": false, "invocations": ["rangeSanityCheck", "highbits", "lowbits", "highbits", "lowbits", "appendCopiesUntil", "getMappeableRoaringArray", "maxLowBit", "getIndex", "getIndex", "getMappeableRoaringArray", "not", "getContainerAtIndex", "isEmpty", "insertNewKeyValueAt", "getMappeableRoaringArray", "insertNewKeyValueAt", "getMappeableRoaringArray", "rangeOfOnes", "appendCopiesAfter", "getMappeableRoaringArray"]}, "repository": {"repo_id": 10746583, "url": "https://github.com/RoaringBitmap/RoaringBitmap", "language": "Java", "is_fork": false, "fork_count": 335, "stargazer_count": 1786, "size": 88641, "license": "licensed"}}