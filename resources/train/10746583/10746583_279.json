{"test_class": {"identifier": "TestMappeableArrayContainer", "superclass": "", "interfaces": "", "fields": [], "file": "RoaringBitmap/src/test/java/org/roaringbitmap/buffer/TestMappeableArrayContainer.java"}, "test_case": {"identifier": "addInvalidRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void addInvalidRange() {\n    assertThrows(IllegalArgumentException.class, () -> {\n      MappeableContainer ac = new MappeableArrayContainer();\n      ac.add(13, 1);\n    });\n  }", "signature": "void addInvalidRange()", "full_signature": "@Test public void addInvalidRange()", "class_method_signature": "TestMappeableArrayContainer.addInvalidRange()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "add"]}, "focal_class": {"identifier": "MappeableArrayContainer", "superclass": "extends MappeableContainer", "interfaces": "implements Cloneable", "fields": [{"original_string": "private static final int DEFAULT_INIT_SIZE = 4;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_INIT_SIZE = 4", "var_name": "DEFAULT_INIT_SIZE"}, {"original_string": "private static final int ARRAY_LAZY_LOWERBOUND = 1024;", "modifier": "private static final", "type": "int", "declarator": "ARRAY_LAZY_LOWERBOUND = 1024", "var_name": "ARRAY_LAZY_LOWERBOUND"}, {"original_string": "protected static final int DEFAULT_MAX_SIZE = 4096;", "modifier": "protected static final", "type": "int", "declarator": "DEFAULT_MAX_SIZE = 4096", "var_name": "DEFAULT_MAX_SIZE"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "protected int cardinality = 0;", "modifier": "protected", "type": "int", "declarator": "cardinality = 0", "var_name": "cardinality"}, {"original_string": "protected CharBuffer content;", "modifier": "protected", "type": "CharBuffer", "declarator": "content", "var_name": "content"}], "methods": [{"identifier": "getArraySizeInBytes", "parameters": "(int cardinality)", "modifiers": "protected static", "return": "int", "signature": "int getArraySizeInBytes(int cardinality)", "full_signature": "protected static int getArraySizeInBytes(int cardinality)", "class_method_signature": "MappeableArrayContainer.getArraySizeInBytes(int cardinality)", "testcase": false, "constructor": false}, {"identifier": "serializedSizeInBytes", "parameters": "(int cardinality)", "modifiers": "protected static", "return": "int", "signature": "int serializedSizeInBytes(int cardinality)", "full_signature": "protected static int serializedSizeInBytes(int cardinality)", "class_method_signature": "MappeableArrayContainer.serializedSizeInBytes(int cardinality)", "testcase": false, "constructor": false}, {"identifier": "MappeableArrayContainer", "parameters": "()", "modifiers": "public", "return": "", "signature": " MappeableArrayContainer()", "full_signature": "public  MappeableArrayContainer()", "class_method_signature": "MappeableArrayContainer.MappeableArrayContainer()", "testcase": false, "constructor": true}, {"identifier": "empty", "parameters": "()", "modifiers": "public static", "return": "MappeableArrayContainer", "signature": "MappeableArrayContainer empty()", "full_signature": "public static MappeableArrayContainer empty()", "class_method_signature": "MappeableArrayContainer.empty()", "testcase": false, "constructor": false}, {"identifier": "MappeableArrayContainer", "parameters": "(ArrayContainer bc)", "modifiers": "public", "return": "", "signature": " MappeableArrayContainer(ArrayContainer bc)", "full_signature": "public  MappeableArrayContainer(ArrayContainer bc)", "class_method_signature": "MappeableArrayContainer.MappeableArrayContainer(ArrayContainer bc)", "testcase": false, "constructor": true}, {"identifier": "MappeableArrayContainer", "parameters": "(final int capacity)", "modifiers": "public", "return": "", "signature": " MappeableArrayContainer(final int capacity)", "full_signature": "public  MappeableArrayContainer(final int capacity)", "class_method_signature": "MappeableArrayContainer.MappeableArrayContainer(final int capacity)", "testcase": false, "constructor": true}, {"identifier": "MappeableArrayContainer", "parameters": "(final int firstOfRun, final int lastOfRun)", "modifiers": "public", "return": "", "signature": " MappeableArrayContainer(final int firstOfRun, final int lastOfRun)", "full_signature": "public  MappeableArrayContainer(final int firstOfRun, final int lastOfRun)", "class_method_signature": "MappeableArrayContainer.MappeableArrayContainer(final int firstOfRun, final int lastOfRun)", "testcase": false, "constructor": true}, {"identifier": "MappeableArrayContainer", "parameters": "(int newCard, CharBuffer newContent)", "modifiers": "private", "return": "", "signature": " MappeableArrayContainer(int newCard, CharBuffer newContent)", "full_signature": "private  MappeableArrayContainer(int newCard, CharBuffer newContent)", "class_method_signature": "MappeableArrayContainer.MappeableArrayContainer(int newCard, CharBuffer newContent)", "testcase": false, "constructor": true}, {"identifier": "MappeableArrayContainer", "parameters": "(final CharBuffer array, final int cardinality)", "modifiers": "public", "return": "", "signature": " MappeableArrayContainer(final CharBuffer array, final int cardinality)", "full_signature": "public  MappeableArrayContainer(final CharBuffer array, final int cardinality)", "class_method_signature": "MappeableArrayContainer.MappeableArrayContainer(final CharBuffer array, final int cardinality)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(int begin, int end)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer add(int begin, int end)", "full_signature": "@Override public MappeableContainer add(int begin, int end)", "class_method_signature": "MappeableArrayContainer.add(int begin, int end)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final char x)", "modifiers": "@Override // not thread-safe public", "return": "MappeableContainer", "signature": "MappeableContainer add(final char x)", "full_signature": "@Override // not thread-safe public MappeableContainer add(final char x)", "class_method_signature": "MappeableArrayContainer.add(final char x)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "MappeableArrayContainer.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "isFull", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFull()", "full_signature": "@Override public boolean isFull()", "class_method_signature": "MappeableArrayContainer.isFull()", "testcase": false, "constructor": false}, {"identifier": "advance", "parameters": "(CharIterator it)", "modifiers": "private", "return": "int", "signature": "int advance(CharIterator it)", "full_signature": "private int advance(CharIterator it)", "class_method_signature": "MappeableArrayContainer.advance(CharIterator it)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "MappeableArrayContainer", "signature": "MappeableArrayContainer and(final MappeableArrayContainer value2)", "full_signature": "@Override public MappeableArrayContainer and(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.and(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(MappeableBitmapContainer x)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer and(MappeableBitmapContainer x)", "full_signature": "@Override public MappeableContainer and(MappeableBitmapContainer x)", "class_method_signature": "MappeableArrayContainer.and(MappeableBitmapContainer x)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(final MappeableRunContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer and(final MappeableRunContainer value2)", "full_signature": "@Override public MappeableContainer and(final MappeableRunContainer value2)", "class_method_signature": "MappeableArrayContainer.and(final MappeableRunContainer value2)", "testcase": false, "constructor": false}, {"identifier": "andNot", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "MappeableArrayContainer", "signature": "MappeableArrayContainer andNot(final MappeableArrayContainer value2)", "full_signature": "@Override public MappeableArrayContainer andNot(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.andNot(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "andNot", "parameters": "(MappeableBitmapContainer value2)", "modifiers": "@Override public", "return": "MappeableArrayContainer", "signature": "MappeableArrayContainer andNot(MappeableBitmapContainer value2)", "full_signature": "@Override public MappeableArrayContainer andNot(MappeableBitmapContainer value2)", "class_method_signature": "MappeableArrayContainer.andNot(MappeableBitmapContainer value2)", "testcase": false, "constructor": false}, {"identifier": "andNot", "parameters": "(final MappeableRunContainer x)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer andNot(final MappeableRunContainer x)", "full_signature": "@Override public MappeableContainer andNot(final MappeableRunContainer x)", "class_method_signature": "MappeableArrayContainer.andNot(final MappeableRunContainer x)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "MappeableArrayContainer.clear()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "MappeableArrayContainer", "signature": "MappeableArrayContainer clone()", "full_signature": "@Override public MappeableArrayContainer clone()", "class_method_signature": "MappeableArrayContainer.clone()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final char x)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(final char x)", "full_signature": "@Override public boolean contains(final char x)", "class_method_signature": "MappeableArrayContainer.contains(final char x)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(ByteBuffer buf, int position, final char x, int cardinality)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(ByteBuffer buf, int position, final char x, int cardinality)", "full_signature": "public static boolean contains(ByteBuffer buf, int position, final char x, int cardinality)", "class_method_signature": "MappeableArrayContainer.contains(ByteBuffer buf, int position, final char x, int cardinality)", "testcase": false, "constructor": false}, {"identifier": "emit", "parameters": "(char val)", "modifiers": "private", "return": "void", "signature": "void emit(char val)", "full_signature": "private void emit(char val)", "class_method_signature": "MappeableArrayContainer.emit(char val)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MappeableArrayContainer.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "fillLeastSignificant16bits", "parameters": "(int[] x, int i, int mask)", "modifiers": "@Override public", "return": "void", "signature": "void fillLeastSignificant16bits(int[] x, int i, int mask)", "full_signature": "@Override public void fillLeastSignificant16bits(int[] x, int i, int mask)", "class_method_signature": "MappeableArrayContainer.fillLeastSignificant16bits(int[] x, int i, int mask)", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "(char x)", "modifiers": "@Override // not thread-safe public", "return": "MappeableContainer", "signature": "MappeableContainer flip(char x)", "full_signature": "@Override // not thread-safe public MappeableContainer flip(char x)", "class_method_signature": "MappeableArrayContainer.flip(char x)", "testcase": false, "constructor": false}, {"identifier": "getArraySizeInBytes", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int getArraySizeInBytes()", "full_signature": "@Override protected int getArraySizeInBytes()", "class_method_signature": "MappeableArrayContainer.getArraySizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "getCardinality", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCardinality()", "full_signature": "@Override public int getCardinality()", "class_method_signature": "MappeableArrayContainer.getCardinality()", "testcase": false, "constructor": false}, {"identifier": "getReverseCharIterator", "parameters": "()", "modifiers": "@Override public", "return": "CharIterator", "signature": "CharIterator getReverseCharIterator()", "full_signature": "@Override public CharIterator getReverseCharIterator()", "class_method_signature": "MappeableArrayContainer.getReverseCharIterator()", "testcase": false, "constructor": false}, {"identifier": "getCharIterator", "parameters": "()", "modifiers": "@Override public", "return": "PeekableCharIterator", "signature": "PeekableCharIterator getCharIterator()", "full_signature": "@Override public PeekableCharIterator getCharIterator()", "class_method_signature": "MappeableArrayContainer.getCharIterator()", "testcase": false, "constructor": false}, {"identifier": "getBatchIterator", "parameters": "()", "modifiers": "@Override public", "return": "ContainerBatchIterator", "signature": "ContainerBatchIterator getBatchIterator()", "full_signature": "@Override public ContainerBatchIterator getBatchIterator()", "class_method_signature": "MappeableArrayContainer.getBatchIterator()", "testcase": false, "constructor": false}, {"identifier": "getSizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSizeInBytes()", "full_signature": "@Override public int getSizeInBytes()", "class_method_signature": "MappeableArrayContainer.getSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MappeableArrayContainer.hashCode()", "testcase": false, "constructor": false}, {"identifier": "iadd", "parameters": "(int begin, int end)", "modifiers": "@Override // not thread-safe public", "return": "MappeableContainer", "signature": "MappeableContainer iadd(int begin, int end)", "full_signature": "@Override // not thread-safe public MappeableContainer iadd(int begin, int end)", "class_method_signature": "MappeableArrayContainer.iadd(int begin, int end)", "testcase": false, "constructor": false}, {"identifier": "iand", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "MappeableArrayContainer", "signature": "MappeableArrayContainer iand(final MappeableArrayContainer value2)", "full_signature": "@Override public MappeableArrayContainer iand(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.iand(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "iand", "parameters": "(MappeableBitmapContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer iand(MappeableBitmapContainer value2)", "full_signature": "@Override public MappeableContainer iand(MappeableBitmapContainer value2)", "class_method_signature": "MappeableArrayContainer.iand(MappeableBitmapContainer value2)", "testcase": false, "constructor": false}, {"identifier": "iand", "parameters": "(final MappeableRunContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer iand(final MappeableRunContainer value2)", "full_signature": "@Override public MappeableContainer iand(final MappeableRunContainer value2)", "class_method_signature": "MappeableArrayContainer.iand(final MappeableRunContainer value2)", "testcase": false, "constructor": false}, {"identifier": "iandNot", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "MappeableArrayContainer", "signature": "MappeableArrayContainer iandNot(final MappeableArrayContainer value2)", "full_signature": "@Override public MappeableArrayContainer iandNot(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.iandNot(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "iandNot", "parameters": "(MappeableBitmapContainer value2)", "modifiers": "@Override public", "return": "MappeableArrayContainer", "signature": "MappeableArrayContainer iandNot(MappeableBitmapContainer value2)", "full_signature": "@Override public MappeableArrayContainer iandNot(MappeableBitmapContainer value2)", "class_method_signature": "MappeableArrayContainer.iandNot(MappeableBitmapContainer value2)", "testcase": false, "constructor": false}, {"identifier": "iandNot", "parameters": "(final MappeableRunContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer iandNot(final MappeableRunContainer value2)", "full_signature": "@Override public MappeableContainer iandNot(final MappeableRunContainer value2)", "class_method_signature": "MappeableArrayContainer.iandNot(final MappeableRunContainer value2)", "testcase": false, "constructor": false}, {"identifier": "increaseCapacity", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void increaseCapacity()", "full_signature": "private void increaseCapacity()", "class_method_signature": "MappeableArrayContainer.increaseCapacity()", "testcase": false, "constructor": false}, {"identifier": "increaseCapacity", "parameters": "(boolean allowIllegalSize)", "modifiers": "private", "return": "void", "signature": "void increaseCapacity(boolean allowIllegalSize)", "full_signature": "private void increaseCapacity(boolean allowIllegalSize)", "class_method_signature": "MappeableArrayContainer.increaseCapacity(boolean allowIllegalSize)", "testcase": false, "constructor": false}, {"identifier": "calculateCapacity", "parameters": "(int min)", "modifiers": "private", "return": "int", "signature": "int calculateCapacity(int min)", "full_signature": "private int calculateCapacity(int min)", "class_method_signature": "MappeableArrayContainer.calculateCapacity(int min)", "testcase": false, "constructor": false}, {"identifier": "inot", "parameters": "(final int firstOfRange, final int lastOfRange)", "modifiers": "@Override // not thread safe! (duh!) public", "return": "MappeableContainer", "signature": "MappeableContainer inot(final int firstOfRange, final int lastOfRange)", "full_signature": "@Override // not thread safe! (duh!) public MappeableContainer inot(final int firstOfRange, final int lastOfRange)", "class_method_signature": "MappeableArrayContainer.inot(final int firstOfRange, final int lastOfRange)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(MappeableArrayContainer value2)", "full_signature": "@Override public boolean intersects(MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.intersects(MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(MappeableBitmapContainer x)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(MappeableBitmapContainer x)", "full_signature": "@Override public boolean intersects(MappeableBitmapContainer x)", "class_method_signature": "MappeableArrayContainer.intersects(MappeableBitmapContainer x)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(MappeableRunContainer x)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(MappeableRunContainer x)", "full_signature": "@Override public boolean intersects(MappeableRunContainer x)", "class_method_signature": "MappeableArrayContainer.intersects(MappeableRunContainer x)", "testcase": false, "constructor": false}, {"identifier": "ior", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer ior(final MappeableArrayContainer value2)", "full_signature": "@Override public MappeableContainer ior(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.ior(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "ior", "parameters": "(MappeableBitmapContainer x)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer ior(MappeableBitmapContainer x)", "full_signature": "@Override public MappeableContainer ior(MappeableBitmapContainer x)", "class_method_signature": "MappeableArrayContainer.ior(MappeableBitmapContainer x)", "testcase": false, "constructor": false}, {"identifier": "ior", "parameters": "(final MappeableRunContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer ior(final MappeableRunContainer value2)", "full_signature": "@Override public MappeableContainer ior(final MappeableRunContainer value2)", "class_method_signature": "MappeableArrayContainer.ior(final MappeableRunContainer value2)", "testcase": false, "constructor": false}, {"identifier": "iremove", "parameters": "(int begin, int end)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer iremove(int begin, int end)", "full_signature": "@Override public MappeableContainer iremove(int begin, int end)", "class_method_signature": "MappeableArrayContainer.iremove(int begin, int end)", "testcase": false, "constructor": false}, {"identifier": "isArrayBacked", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isArrayBacked()", "full_signature": "@Override protected boolean isArrayBacked()", "class_method_signature": "MappeableArrayContainer.isArrayBacked()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Character>", "signature": "Iterator<Character> iterator()", "full_signature": "@Override public Iterator<Character> iterator()", "class_method_signature": "MappeableArrayContainer.iterator()", "testcase": false, "constructor": false}, {"identifier": "ixor", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer ixor(final MappeableArrayContainer value2)", "full_signature": "@Override public MappeableContainer ixor(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.ixor(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "ixor", "parameters": "(MappeableBitmapContainer x)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer ixor(MappeableBitmapContainer x)", "full_signature": "@Override public MappeableContainer ixor(MappeableBitmapContainer x)", "class_method_signature": "MappeableArrayContainer.ixor(MappeableBitmapContainer x)", "testcase": false, "constructor": false}, {"identifier": "ixor", "parameters": "(final MappeableRunContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer ixor(final MappeableRunContainer value2)", "full_signature": "@Override public MappeableContainer ixor(final MappeableRunContainer value2)", "class_method_signature": "MappeableArrayContainer.ixor(final MappeableRunContainer value2)", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "(int maxcardinality)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer limit(int maxcardinality)", "full_signature": "@Override public MappeableContainer limit(int maxcardinality)", "class_method_signature": "MappeableArrayContainer.limit(int maxcardinality)", "testcase": false, "constructor": false}, {"identifier": "loadData", "parameters": "(final MappeableBitmapContainer bitmapContainer)", "modifiers": "", "return": "void", "signature": "void loadData(final MappeableBitmapContainer bitmapContainer)", "full_signature": " void loadData(final MappeableBitmapContainer bitmapContainer)", "class_method_signature": "MappeableArrayContainer.loadData(final MappeableBitmapContainer bitmapContainer)", "testcase": false, "constructor": false}, {"identifier": "negateRange", "parameters": "(final CharBuffer buffer, final int startIndex, final int lastIndex,\n      final int startRange, final int lastRange)", "modifiers": "private", "return": "void", "signature": "void negateRange(final CharBuffer buffer, final int startIndex, final int lastIndex,\n      final int startRange, final int lastRange)", "full_signature": "private void negateRange(final CharBuffer buffer, final int startIndex, final int lastIndex,\n      final int startRange, final int lastRange)", "class_method_signature": "MappeableArrayContainer.negateRange(final CharBuffer buffer, final int startIndex, final int lastIndex,\n      final int startRange, final int lastRange)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(final int firstOfRange, final int lastOfRange)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer not(final int firstOfRange, final int lastOfRange)", "full_signature": "@Override public MappeableContainer not(final int firstOfRange, final int lastOfRange)", "class_method_signature": "MappeableArrayContainer.not(final int firstOfRange, final int lastOfRange)", "testcase": false, "constructor": false}, {"identifier": "numberOfRuns", "parameters": "()", "modifiers": "@Override", "return": "int", "signature": "int numberOfRuns()", "full_signature": "@Override int numberOfRuns()", "class_method_signature": "MappeableArrayContainer.numberOfRuns()", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer or(final MappeableArrayContainer value2)", "full_signature": "@Override public MappeableContainer or(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.or(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "lazyor", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "protected", "return": "MappeableContainer", "signature": "MappeableContainer lazyor(final MappeableArrayContainer value2)", "full_signature": "protected MappeableContainer lazyor(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.lazyor(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(MappeableBitmapContainer x)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer or(MappeableBitmapContainer x)", "full_signature": "@Override public MappeableContainer or(MappeableBitmapContainer x)", "class_method_signature": "MappeableArrayContainer.or(MappeableBitmapContainer x)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(final MappeableRunContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer or(final MappeableRunContainer value2)", "full_signature": "@Override public MappeableContainer or(final MappeableRunContainer value2)", "class_method_signature": "MappeableArrayContainer.or(final MappeableRunContainer value2)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(CharIterator it)", "modifiers": "protected", "return": "MappeableContainer", "signature": "MappeableContainer or(CharIterator it)", "full_signature": "protected MappeableContainer or(CharIterator it)", "class_method_signature": "MappeableArrayContainer.or(CharIterator it)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(CharIterator it, boolean exclusive)", "modifiers": "private", "return": "MappeableContainer", "signature": "MappeableContainer or(CharIterator it, boolean exclusive)", "full_signature": "private MappeableContainer or(CharIterator it, boolean exclusive)", "class_method_signature": "MappeableArrayContainer.or(CharIterator it, boolean exclusive)", "testcase": false, "constructor": false}, {"identifier": "rank", "parameters": "(char lowbits)", "modifiers": "@Override public", "return": "int", "signature": "int rank(char lowbits)", "full_signature": "@Override public int rank(char lowbits)", "class_method_signature": "MappeableArrayContainer.rank(char lowbits)", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@Override public void readExternal(ObjectInput in)", "class_method_signature": "MappeableArrayContainer.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int begin, int end)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer remove(int begin, int end)", "full_signature": "@Override public MappeableContainer remove(int begin, int end)", "class_method_signature": "MappeableArrayContainer.remove(int begin, int end)", "testcase": false, "constructor": false}, {"identifier": "removeAtIndex", "parameters": "(final int loc)", "modifiers": "", "return": "void", "signature": "void removeAtIndex(final int loc)", "full_signature": " void removeAtIndex(final int loc)", "class_method_signature": "MappeableArrayContainer.removeAtIndex(final int loc)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final char x)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer remove(final char x)", "full_signature": "@Override public MappeableContainer remove(final char x)", "class_method_signature": "MappeableArrayContainer.remove(final char x)", "testcase": false, "constructor": false}, {"identifier": "repairAfterLazy", "parameters": "()", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer repairAfterLazy()", "full_signature": "@Override public MappeableContainer repairAfterLazy()", "class_method_signature": "MappeableArrayContainer.repairAfterLazy()", "testcase": false, "constructor": false}, {"identifier": "runOptimize", "parameters": "()", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer runOptimize()", "full_signature": "@Override public MappeableContainer runOptimize()", "class_method_signature": "MappeableArrayContainer.runOptimize()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(int j)", "modifiers": "@Override public", "return": "char", "signature": "char select(int j)", "full_signature": "@Override public char select(int j)", "class_method_signature": "MappeableArrayContainer.select(int j)", "testcase": false, "constructor": false}, {"identifier": "serializedSizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int serializedSizeInBytes()", "full_signature": "@Override public int serializedSizeInBytes()", "class_method_signature": "MappeableArrayContainer.serializedSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "toBitmapContainer", "parameters": "()", "modifiers": "@Override public", "return": "MappeableBitmapContainer", "signature": "MappeableBitmapContainer toBitmapContainer()", "full_signature": "@Override public MappeableBitmapContainer toBitmapContainer()", "class_method_signature": "MappeableArrayContainer.toBitmapContainer()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int first()", "full_signature": "@Override public int first()", "class_method_signature": "MappeableArrayContainer.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int last()", "full_signature": "@Override public int last()", "class_method_signature": "MappeableArrayContainer.last()", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "(char fromValue)", "modifiers": "@Override public", "return": "int", "signature": "int nextValue(char fromValue)", "full_signature": "@Override public int nextValue(char fromValue)", "class_method_signature": "MappeableArrayContainer.nextValue(char fromValue)", "testcase": false, "constructor": false}, {"identifier": "previousValue", "parameters": "(char fromValue)", "modifiers": "@Override public", "return": "int", "signature": "int previousValue(char fromValue)", "full_signature": "@Override public int previousValue(char fromValue)", "class_method_signature": "MappeableArrayContainer.previousValue(char fromValue)", "testcase": false, "constructor": false}, {"identifier": "nextAbsentValue", "parameters": "(char fromValue)", "modifiers": "@Override public", "return": "int", "signature": "int nextAbsentValue(char fromValue)", "full_signature": "@Override public int nextAbsentValue(char fromValue)", "class_method_signature": "MappeableArrayContainer.nextAbsentValue(char fromValue)", "testcase": false, "constructor": false}, {"identifier": "previousAbsentValue", "parameters": "(char fromValue)", "modifiers": "@Override public", "return": "int", "signature": "int previousAbsentValue(char fromValue)", "full_signature": "@Override public int previousAbsentValue(char fromValue)", "class_method_signature": "MappeableArrayContainer.previousAbsentValue(char fromValue)", "testcase": false, "constructor": false}, {"identifier": "toContainer", "parameters": "()", "modifiers": "@Override public", "return": "Container", "signature": "Container toContainer()", "full_signature": "@Override public Container toContainer()", "class_method_signature": "MappeableArrayContainer.toContainer()", "testcase": false, "constructor": false}, {"identifier": "toShortArray", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] toShortArray()", "full_signature": "public char[] toShortArray()", "class_method_signature": "MappeableArrayContainer.toShortArray()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MappeableArrayContainer.toString()", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void trim()", "full_signature": "@Override public void trim()", "class_method_signature": "MappeableArrayContainer.trim()", "testcase": false, "constructor": false}, {"identifier": "writeArray", "parameters": "(DataOutput out)", "modifiers": "@Override protected", "return": "void", "signature": "void writeArray(DataOutput out)", "full_signature": "@Override protected void writeArray(DataOutput out)", "class_method_signature": "MappeableArrayContainer.writeArray(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "writeArray", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override protected", "return": "void", "signature": "void writeArray(ByteBuffer buffer)", "full_signature": "@Override protected void writeArray(ByteBuffer buffer)", "class_method_signature": "MappeableArrayContainer.writeArray(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "MappeableArrayContainer.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(final MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer xor(final MappeableArrayContainer value2)", "full_signature": "@Override public MappeableContainer xor(final MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.xor(final MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(MappeableBitmapContainer x)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer xor(MappeableBitmapContainer x)", "full_signature": "@Override public MappeableContainer xor(MappeableBitmapContainer x)", "class_method_signature": "MappeableArrayContainer.xor(MappeableBitmapContainer x)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(final MappeableRunContainer value2)", "modifiers": "@Override public", "return": "MappeableContainer", "signature": "MappeableContainer xor(final MappeableRunContainer value2)", "full_signature": "@Override public MappeableContainer xor(final MappeableRunContainer value2)", "class_method_signature": "MappeableArrayContainer.xor(final MappeableRunContainer value2)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(CharIterator it)", "modifiers": "protected", "return": "MappeableContainer", "signature": "MappeableContainer xor(CharIterator it)", "full_signature": "protected MappeableContainer xor(CharIterator it)", "class_method_signature": "MappeableArrayContainer.xor(CharIterator it)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(char msb, IntConsumer ic)", "modifiers": "@Override public", "return": "void", "signature": "void forEach(char msb, IntConsumer ic)", "full_signature": "@Override public void forEach(char msb, IntConsumer ic)", "class_method_signature": "MappeableArrayContainer.forEach(char msb, IntConsumer ic)", "testcase": false, "constructor": false}, {"identifier": "andCardinality", "parameters": "(MappeableArrayContainer value2)", "modifiers": "@Override public", "return": "int", "signature": "int andCardinality(MappeableArrayContainer value2)", "full_signature": "@Override public int andCardinality(MappeableArrayContainer value2)", "class_method_signature": "MappeableArrayContainer.andCardinality(MappeableArrayContainer value2)", "testcase": false, "constructor": false}, {"identifier": "andCardinality", "parameters": "(MappeableBitmapContainer x)", "modifiers": "@Override public", "return": "int", "signature": "int andCardinality(MappeableBitmapContainer x)", "full_signature": "@Override public int andCardinality(MappeableBitmapContainer x)", "class_method_signature": "MappeableArrayContainer.andCardinality(MappeableBitmapContainer x)", "testcase": false, "constructor": false}, {"identifier": "andCardinality", "parameters": "(MappeableRunContainer x)", "modifiers": "@Override // see andNot for an approach that might be better. public", "return": "int", "signature": "int andCardinality(MappeableRunContainer x)", "full_signature": "@Override // see andNot for an approach that might be better. public int andCardinality(MappeableRunContainer x)", "class_method_signature": "MappeableArrayContainer.andCardinality(MappeableRunContainer x)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(MappeableRunContainer runContainer)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean contains(MappeableRunContainer runContainer)", "full_signature": "@Override protected boolean contains(MappeableRunContainer runContainer)", "class_method_signature": "MappeableArrayContainer.contains(MappeableRunContainer runContainer)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(MappeableArrayContainer arrayContainer)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean contains(MappeableArrayContainer arrayContainer)", "full_signature": "@Override protected boolean contains(MappeableArrayContainer arrayContainer)", "class_method_signature": "MappeableArrayContainer.contains(MappeableArrayContainer arrayContainer)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(MappeableBitmapContainer bitmapContainer)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean contains(MappeableBitmapContainer bitmapContainer)", "full_signature": "@Override protected boolean contains(MappeableBitmapContainer bitmapContainer)", "class_method_signature": "MappeableArrayContainer.contains(MappeableBitmapContainer bitmapContainer)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(int minimum, int supremum)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(int minimum, int supremum)", "full_signature": "@Override public boolean intersects(int minimum, int supremum)", "class_method_signature": "MappeableArrayContainer.intersects(int minimum, int supremum)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int minimum, int supremum)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(int minimum, int supremum)", "full_signature": "@Override public boolean contains(int minimum, int supremum)", "class_method_signature": "MappeableArrayContainer.contains(int minimum, int supremum)", "testcase": false, "constructor": false}], "file": "RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MappeableArrayContainer.java"}, "focal_method": {"identifier": "add", "parameters": "(int begin, int end)", "modifiers": "@Override public", "return": "MappeableContainer", "body": "@Override\n  public MappeableContainer add(int begin, int end) {\n    // TODO: may need to convert to a RunContainer\n    if (end == begin) {\n      return clone();\n    }\n    if ((begin > end) || (end > (1 << 16))) {\n      throw new IllegalArgumentException(\"Invalid range [\" + begin + \",\" + end + \")\");\n    }\n    int indexstart = BufferUtil.unsignedBinarySearch(content, 0, cardinality, (char) begin);\n    if (indexstart < 0) {\n      indexstart = -indexstart - 1;\n    }\n    int indexend = BufferUtil.unsignedBinarySearch(content, 0, cardinality, (char) (end - 1));\n    if (indexend < 0) {\n      indexend = -indexend - 1;\n    } else {\n      indexend++;\n    }\n    int rangelength = end - begin;\n    int newcardinality = indexstart + (cardinality - indexend) + rangelength;\n    if (newcardinality > DEFAULT_MAX_SIZE) {\n      MappeableBitmapContainer a = this.toBitmapContainer();\n      return a.iadd(begin, end);\n    }\n    MappeableArrayContainer answer = new MappeableArrayContainer(newcardinality, content);\n    if (!BufferUtil.isBackedBySimpleArray(answer.content)) {\n      throw new RuntimeException(\"Should not happen. Internal bug.\");\n    }\n    BufferUtil.arraycopy(content, indexend, answer.content, indexstart + rangelength,\n        cardinality - indexend);\n    char[] answerarray = answer.content.array();\n    for (int k = 0; k < rangelength; ++k) {\n      answerarray[k + indexstart] = (char) (begin + k);\n    }\n    answer.cardinality = newcardinality;\n    return answer;\n  }", "signature": "MappeableContainer add(int begin, int end)", "full_signature": "@Override public MappeableContainer add(int begin, int end)", "class_method_signature": "MappeableArrayContainer.add(int begin, int end)", "testcase": false, "constructor": false, "invocations": ["clone", "unsignedBinarySearch", "unsignedBinarySearch", "toBitmapContainer", "iadd", "isBackedBySimpleArray", "arraycopy", "array"]}, "repository": {"repo_id": 10746583, "url": "https://github.com/RoaringBitmap/RoaringBitmap", "language": "Java", "is_fork": false, "fork_count": 335, "stargazer_count": 1786, "size": 88641, "license": "licensed"}}