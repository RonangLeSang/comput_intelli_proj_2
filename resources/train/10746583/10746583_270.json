{"test_class": {"identifier": "BufferParallelAggregationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ForkJoinPool POOL;", "modifier": "private static", "type": "ForkJoinPool", "declarator": "POOL", "var_name": "POOL"}, {"original_string": "private static ForkJoinPool NO_PARALLELISM_AVAILABLE;", "modifier": "private static", "type": "ForkJoinPool", "declarator": "NO_PARALLELISM_AVAILABLE", "var_name": "NO_PARALLELISM_AVAILABLE"}], "file": "RoaringBitmap/src/test/java/org/roaringbitmap/buffer/BufferParallelAggregationTest.java"}, "test_case": {"identifier": "hugeOrNoParallelismAvailable3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void hugeOrNoParallelismAvailable3() {\n    ImmutableRoaringBitmap[] input = IntStream.range(0, 4096)\n            .mapToObj(i -> testCase().withBitmapAt(0).withArrayAt(1).withRunAt(2).build().toMutableRoaringBitmap())\n            .toArray(ImmutableRoaringBitmap[]::new);\n    assertEquals(BufferFastAggregation.or(input),\n            NO_PARALLELISM_AVAILABLE.submit(() -> BufferParallelAggregation.or(input)).join());\n  }", "signature": "void hugeOrNoParallelismAvailable3()", "full_signature": "@Test public void hugeOrNoParallelismAvailable3()", "class_method_signature": "BufferParallelAggregationTest.hugeOrNoParallelismAvailable3()", "testcase": true, "constructor": false, "invocations": ["toArray", "mapToObj", "range", "toMutableRoaringBitmap", "build", "withRunAt", "withArrayAt", "withBitmapAt", "testCase", "assertEquals", "or", "join", "submit", "or"]}, "focal_class": {"identifier": "BufferParallelAggregation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Collector<Map.Entry<Character, List<MappeableContainer>>,\n          MutableRoaringArray, MutableRoaringBitmap>\n          XOR = new ContainerCollector(BufferParallelAggregation::xor);", "modifier": "private static final", "type": "Collector<Map.Entry<Character, List<MappeableContainer>>,\n          MutableRoaringArray, MutableRoaringBitmap>", "declarator": "XOR = new ContainerCollector(BufferParallelAggregation::xor)", "var_name": "XOR"}, {"original_string": "private static final OrCollector OR = new OrCollector();", "modifier": "private static final", "type": "OrCollector", "declarator": "OR = new OrCollector()", "var_name": "OR"}], "methods": [{"identifier": "groupByKey", "parameters": "(\n          ImmutableRoaringBitmap... bitmaps)", "modifiers": "public static", "return": "SortedMap<Character, List<MappeableContainer>>", "signature": "SortedMap<Character, List<MappeableContainer>> groupByKey(\n          ImmutableRoaringBitmap... bitmaps)", "full_signature": "public static SortedMap<Character, List<MappeableContainer>> groupByKey(\n          ImmutableRoaringBitmap... bitmaps)", "class_method_signature": "BufferParallelAggregation.groupByKey(\n          ImmutableRoaringBitmap... bitmaps)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(ImmutableRoaringBitmap... bitmaps)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap or(ImmutableRoaringBitmap... bitmaps)", "full_signature": "public static MutableRoaringBitmap or(ImmutableRoaringBitmap... bitmaps)", "class_method_signature": "BufferParallelAggregation.or(ImmutableRoaringBitmap... bitmaps)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(ImmutableRoaringBitmap... bitmaps)", "modifiers": "public static", "return": "MutableRoaringBitmap", "signature": "MutableRoaringBitmap xor(ImmutableRoaringBitmap... bitmaps)", "full_signature": "public static MutableRoaringBitmap xor(ImmutableRoaringBitmap... bitmaps)", "class_method_signature": "BufferParallelAggregation.xor(ImmutableRoaringBitmap... bitmaps)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(List<MappeableContainer> containers)", "modifiers": "private static", "return": "MappeableContainer", "signature": "MappeableContainer xor(List<MappeableContainer> containers)", "full_signature": "private static MappeableContainer xor(List<MappeableContainer> containers)", "class_method_signature": "BufferParallelAggregation.xor(List<MappeableContainer> containers)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(List<MappeableContainer> containers)", "modifiers": "private static", "return": "MappeableContainer", "signature": "MappeableContainer or(List<MappeableContainer> containers)", "full_signature": "private static MappeableContainer or(List<MappeableContainer> containers)", "class_method_signature": "BufferParallelAggregation.or(List<MappeableContainer> containers)", "testcase": false, "constructor": false}, {"identifier": "availableParallelism", "parameters": "()", "modifiers": "private static", "return": "int", "signature": "int availableParallelism()", "full_signature": "private static int availableParallelism()", "class_method_signature": "BufferParallelAggregation.availableParallelism()", "testcase": false, "constructor": false}], "file": "RoaringBitmap/src/main/java/org/roaringbitmap/buffer/BufferParallelAggregation.java"}, "focal_method": {"identifier": "or", "parameters": "(ImmutableRoaringBitmap... bitmaps)", "modifiers": "public static", "return": "MutableRoaringBitmap", "body": "public static MutableRoaringBitmap or(ImmutableRoaringBitmap... bitmaps) {\n    SortedMap<Character, List<MappeableContainer>> grouped = groupByKey(bitmaps);\n    char[] keys = new char[grouped.size()];\n    MappeableContainer[] values = new MappeableContainer[grouped.size()];\n    List<List<MappeableContainer>> slices = new ArrayList<>(grouped.size());\n    int i = 0;\n    for (Map.Entry<Character, List<MappeableContainer>> slice : grouped.entrySet()) {\n      keys[i++] = slice.getKey();\n      slices.add(slice.getValue());\n    }\n    IntStream.range(0, i)\n            .parallel()\n            .forEach(position -> values[position] = or(slices.get(position)));\n    return new MutableRoaringBitmap(new MutableRoaringArray(keys, values, i));\n  }", "signature": "MutableRoaringBitmap or(ImmutableRoaringBitmap... bitmaps)", "full_signature": "public static MutableRoaringBitmap or(ImmutableRoaringBitmap... bitmaps)", "class_method_signature": "BufferParallelAggregation.or(ImmutableRoaringBitmap... bitmaps)", "testcase": false, "constructor": false, "invocations": ["groupByKey", "size", "size", "size", "entrySet", "getKey", "add", "getValue", "forEach", "parallel", "range", "or", "get"]}, "repository": {"repo_id": 10746583, "url": "https://github.com/RoaringBitmap/RoaringBitmap", "language": "Java", "is_fork": false, "fork_count": 335, "stargazer_count": 1786, "size": 88641, "license": "licensed"}}