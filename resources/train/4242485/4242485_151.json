{"test_class": {"identifier": "OperatingSystemPatternTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/uadetector-core/src/test/java/net/sf/uadetector/internal/data/domain/OperatingSystemPatternTest.java"}, "test_case": {"identifier": "compareTo_identical", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void compareTo_identical() {\n\t\tfinal OperatingSystemPattern pattern1 = new OperatingSystemPattern(1, Pattern.compile(\"[0-9]+\"), 1);\n\t\tfinal OperatingSystemPattern pattern2 = new OperatingSystemPattern(1, Pattern.compile(\"[0-9]+\"), 1);\n\t\tassertThat(pattern1.compareTo(pattern2)).isEqualTo(0);\n\t}", "signature": "void compareTo_identical()", "full_signature": "@Test public void compareTo_identical()", "class_method_signature": "OperatingSystemPatternTest.compareTo_identical()", "testcase": true, "constructor": false, "invocations": ["compile", "compile", "isEqualTo", "assertThat", "compareTo"]}, "focal_class": {"identifier": "OperatingSystemPattern", "superclass": "", "interfaces": "implements Identifiable, OrderedPattern<OperatingSystemPattern>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1583732916568404647L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1583732916568404647L", "var_name": "serialVersionUID"}, {"original_string": "@Nonnegative\n\tprivate final int id;", "modifier": "@Nonnegative\n\tprivate final", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "@Nonnull\n\tprivate final Pattern pattern;", "modifier": "@Nonnull\n\tprivate final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "@Nonnegative\n\tprivate final int position;", "modifier": "@Nonnegative\n\tprivate final", "type": "int", "declarator": "position", "var_name": "position"}], "methods": [{"identifier": "OperatingSystemPattern", "parameters": "(@Nonnegative final int id, @Nonnull final Pattern pattern, @Nonnegative final int position)", "modifiers": "public", "return": "", "signature": " OperatingSystemPattern(@Nonnegative final int id, @Nonnull final Pattern pattern, @Nonnegative final int position)", "full_signature": "public  OperatingSystemPattern(@Nonnegative final int id, @Nonnull final Pattern pattern, @Nonnegative final int position)", "class_method_signature": "OperatingSystemPattern.OperatingSystemPattern(@Nonnegative final int id, @Nonnull final Pattern pattern, @Nonnegative final int position)", "testcase": false, "constructor": true}, {"identifier": "compareTo", "parameters": "(final OperatingSystemPattern other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final OperatingSystemPattern other)", "full_signature": "@Override public int compareTo(final OperatingSystemPattern other)", "class_method_signature": "OperatingSystemPattern.compareTo(final OperatingSystemPattern other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "OperatingSystemPattern.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getId()", "full_signature": "@Override public int getId()", "class_method_signature": "OperatingSystemPattern.getId()", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "()", "modifiers": "@Override public", "return": "Pattern", "signature": "Pattern getPattern()", "full_signature": "@Override public Pattern getPattern()", "class_method_signature": "OperatingSystemPattern.getPattern()", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPosition()", "full_signature": "@Override public int getPosition()", "class_method_signature": "OperatingSystemPattern.getPosition()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "OperatingSystemPattern.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "OperatingSystemPattern.toString()", "testcase": false, "constructor": false}], "file": "modules/uadetector-core/src/main/java/net/sf/uadetector/internal/data/domain/OperatingSystemPattern.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(final OperatingSystemPattern other)", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int compareTo(final OperatingSystemPattern other) {\n\t\tint result = other == null ? -1 : 0;\n\t\tif (result == 0) {\n\t\t\tresult = CompareNullSafe.compareInt(getPosition(), other.getPosition());\n\t\t\tif (result == 0) {\n\t\t\t\tresult = CompareNullSafe.compareInt(getId(), other.getId());\n\t\t\t}\n\t\t\tif (result == 0) {\n\t\t\t\tresult = getPattern().pattern().compareTo(other.getPattern().pattern());\n\t\t\t}\n\t\t\tif (result == 0) {\n\t\t\t\tresult = CompareNullSafe.compareInt(getPattern().flags(), other.getPattern().flags());\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "signature": "int compareTo(final OperatingSystemPattern other)", "full_signature": "@Override public int compareTo(final OperatingSystemPattern other)", "class_method_signature": "OperatingSystemPattern.compareTo(final OperatingSystemPattern other)", "testcase": false, "constructor": false, "invocations": ["compareInt", "getPosition", "getPosition", "compareInt", "getId", "getId", "compareTo", "pattern", "getPattern", "pattern", "getPattern", "compareInt", "flags", "getPattern", "flags", "getPattern"]}, "repository": {"repo_id": 4242485, "url": "https://github.com/arouel/uadetector", "language": "Java", "is_fork": false, "fork_count": 102, "stargazer_count": 231, "size": 7755, "license": "licensed"}}