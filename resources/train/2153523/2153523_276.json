{"test_class": {"identifier": "DefaultRpcServiceLookupTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private DefaultRpcServiceLookup svcLookup;", "modifier": "private", "type": "DefaultRpcServiceLookup", "declarator": "svcLookup", "var_name": "svcLookup"}, {"original_string": "private String socialEndpoint;", "modifier": "private", "type": "String", "declarator": "socialEndpoint", "var_name": "socialEndpoint"}, {"original_string": "private String host;", "modifier": "private", "type": "String", "declarator": "host", "var_name": "host"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/render/DefaultRpcServiceLookupTest.java"}, "test_case": {"identifier": "testGetServicesForContainer_Null", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetServicesForContainer_Null() throws Exception {\n    String container = null;\n    Multimap<String, String> services = svcLookup.getServicesFor(container, host);\n    assertEquals(0, services.size());\n  }", "signature": "void testGetServicesForContainer_Null()", "full_signature": "@Test public void testGetServicesForContainer_Null()", "class_method_signature": "DefaultRpcServiceLookupTest.testGetServicesForContainer_Null()", "testcase": true, "constructor": false, "invocations": ["getServicesFor", "assertEquals", "size"]}, "focal_class": {"identifier": "DefaultRpcServiceLookup", "superclass": "", "interfaces": "implements RpcServiceLookup", "fields": [{"original_string": "private final ConcurrentMap<String, Multimap<String, String>> containerServices;", "modifier": "private final", "type": "ConcurrentMap<String, Multimap<String, String>>", "declarator": "containerServices", "var_name": "containerServices"}, {"original_string": "private final DefaultServiceFetcher fetcher;", "modifier": "private final", "type": "DefaultServiceFetcher", "declarator": "fetcher", "var_name": "fetcher"}], "methods": [{"identifier": "DefaultRpcServiceLookup", "parameters": "(DefaultServiceFetcher fetcher,\n      @Named(\"org.apache.shindig.serviceExpirationDurationMinutes\")Long duration)", "modifiers": "@Inject public", "return": "", "signature": " DefaultRpcServiceLookup(DefaultServiceFetcher fetcher,\n      @Named(\"org.apache.shindig.serviceExpirationDurationMinutes\")Long duration)", "full_signature": "@Inject public  DefaultRpcServiceLookup(DefaultServiceFetcher fetcher,\n      @Named(\"org.apache.shindig.serviceExpirationDurationMinutes\")Long duration)", "class_method_signature": "DefaultRpcServiceLookup.DefaultRpcServiceLookup(DefaultServiceFetcher fetcher,\n      @Named(\"org.apache.shindig.serviceExpirationDurationMinutes\")Long duration)", "testcase": false, "constructor": true}, {"identifier": "getServicesFor", "parameters": "(String container, String host)", "modifiers": "public", "return": "Multimap<String, String>", "signature": "Multimap<String, String> getServicesFor(String container, String host)", "full_signature": "public Multimap<String, String> getServicesFor(String container, String host)", "class_method_signature": "DefaultRpcServiceLookup.getServicesFor(String container, String host)", "testcase": false, "constructor": false}, {"identifier": "setServicesFor", "parameters": "(String container, Multimap<String, String> foundServices)", "modifiers": "", "return": "void", "signature": "void setServicesFor(String container, Multimap<String, String> foundServices)", "full_signature": " void setServicesFor(String container, Multimap<String, String> foundServices)", "class_method_signature": "DefaultRpcServiceLookup.setServicesFor(String container, Multimap<String, String> foundServices)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/DefaultRpcServiceLookup.java"}, "focal_method": {"identifier": "getServicesFor", "parameters": "(String container, String host)", "modifiers": "public", "return": "Multimap<String, String>", "body": "public Multimap<String, String> getServicesFor(String container, String host) {\n    // Support empty container or host by providing empty services:\n    if (container == null || container.length() == 0 || host == null) {\n      return ImmutableMultimap.<String, String>builder().build();\n    }\n\n    Multimap<String, String> foundServices = containerServices.get(container);\n    if (foundServices == null) {\n      foundServices = fetcher.getServicesForContainer(container, host);\n      if (foundServices != null) {\n        setServicesFor(container, foundServices);\n      }\n    }\n    if (foundServices == null) {\n      foundServices = ImmutableMultimap.<String, String>builder().build();\n    }\n    return foundServices;\n  }", "signature": "Multimap<String, String> getServicesFor(String container, String host)", "full_signature": "public Multimap<String, String> getServicesFor(String container, String host)", "class_method_signature": "DefaultRpcServiceLookup.getServicesFor(String container, String host)", "testcase": false, "constructor": false, "invocations": ["length", "build", "builder", "get", "getServicesForContainer", "setServicesFor", "build", "builder"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}