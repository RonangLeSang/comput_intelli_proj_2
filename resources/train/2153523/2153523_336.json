{"test_class": {"identifier": "MakeRequestHandlerTest", "superclass": "extends ServletTestFixture", "interfaces": "", "fields": [{"original_string": "private static final Uri REQUEST_URL = Uri.parse(\"http://example.org/file\");", "modifier": "private static final", "type": "Uri", "declarator": "REQUEST_URL = Uri.parse(\"http://example.org/file\")", "var_name": "REQUEST_URL"}, {"original_string": "private static final String REQUEST_BODY = \"I+am+the+request+body!foo=baz%20la\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_BODY = \"I+am+the+request+body!foo=baz%20la\"", "var_name": "REQUEST_BODY"}, {"original_string": "private static final String RESPONSE_BODY = \"makeRequest response body\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_BODY = \"makeRequest response body\"", "var_name": "RESPONSE_BODY"}, {"original_string": "private static final SecurityToken DUMMY_TOKEN = new FakeGadgetToken();", "modifier": "private static final", "type": "SecurityToken", "declarator": "DUMMY_TOKEN = new FakeGadgetToken()", "var_name": "DUMMY_TOKEN"}, {"original_string": "private final MakeRequestHandler handler\n      = new MakeRequestHandler(pipeline, rewriterRegistry);", "modifier": "private final", "type": "MakeRequestHandler", "declarator": "handler\n      = new MakeRequestHandler(pipeline, rewriterRegistry)", "var_name": "handler"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/MakeRequestHandlerTest.java"}, "test_case": {"identifier": "testBadHttpResponseIsPropagated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBadHttpResponseIsPropagated() throws Exception {\n    HttpRequest internalRequest = new HttpRequest(REQUEST_URL);\n    expect(pipeline.execute(internalRequest)).andReturn(HttpResponse.error());\n    replay();\n\n    handler.fetch(request, recorder);\n    JSONObject results = extractJsonFromResponse();\n\n    assertEquals(HttpResponse.SC_INTERNAL_SERVER_ERROR, results.getInt(\"rc\"));\n    assertTrue(rewriter.responseWasRewritten());\n  }", "signature": "void testBadHttpResponseIsPropagated()", "full_signature": "@Test public void testBadHttpResponseIsPropagated()", "class_method_signature": "MakeRequestHandlerTest.testBadHttpResponseIsPropagated()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "execute", "error", "replay", "fetch", "extractJsonFromResponse", "assertEquals", "getInt", "assertTrue", "responseWasRewritten"]}, "focal_class": {"identifier": "MakeRequestHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String UNPARSEABLE_CRUFT = \"throw 1; < don't be evil' >\";", "modifier": "public static final", "type": "String", "declarator": "UNPARSEABLE_CRUFT = \"throw 1; < don't be evil' >\"", "var_name": "UNPARSEABLE_CRUFT"}, {"original_string": "public static final String POST_DATA_PARAM = \"postData\";", "modifier": "public static final", "type": "String", "declarator": "POST_DATA_PARAM = \"postData\"", "var_name": "POST_DATA_PARAM"}, {"original_string": "public static final String METHOD_PARAM = \"httpMethod\";", "modifier": "public static final", "type": "String", "declarator": "METHOD_PARAM = \"httpMethod\"", "var_name": "METHOD_PARAM"}, {"original_string": "public static final String HEADERS_PARAM = \"headers\";", "modifier": "public static final", "type": "String", "declarator": "HEADERS_PARAM = \"headers\"", "var_name": "HEADERS_PARAM"}, {"original_string": "public static final String CONTENT_TYPE_PARAM = \"contentType\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_TYPE_PARAM = \"contentType\"", "var_name": "CONTENT_TYPE_PARAM"}, {"original_string": "public static final String NUM_ENTRIES_PARAM = \"numEntries\";", "modifier": "public static final", "type": "String", "declarator": "NUM_ENTRIES_PARAM = \"numEntries\"", "var_name": "NUM_ENTRIES_PARAM"}, {"original_string": "public static final String DEFAULT_NUM_ENTRIES = \"3\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_NUM_ENTRIES = \"3\"", "var_name": "DEFAULT_NUM_ENTRIES"}, {"original_string": "public static final String GET_SUMMARIES_PARAM = \"getSummaries\";", "modifier": "public static final", "type": "String", "declarator": "GET_SUMMARIES_PARAM = \"getSummaries\"", "var_name": "GET_SUMMARIES_PARAM"}, {"original_string": "public static final String GET_FULL_HEADERS_PARAM = \"getFullHeaders\";", "modifier": "public static final", "type": "String", "declarator": "GET_FULL_HEADERS_PARAM = \"getFullHeaders\"", "var_name": "GET_FULL_HEADERS_PARAM"}, {"original_string": "public static final String AUTHZ_PARAM = \"authz\";", "modifier": "public static final", "type": "String", "declarator": "AUTHZ_PARAM = \"authz\"", "var_name": "AUTHZ_PARAM"}, {"original_string": "private final RequestPipeline requestPipeline;", "modifier": "private final", "type": "RequestPipeline", "declarator": "requestPipeline", "var_name": "requestPipeline"}, {"original_string": "private final ResponseRewriterRegistry contentRewriterRegistry;", "modifier": "private final", "type": "ResponseRewriterRegistry", "declarator": "contentRewriterRegistry", "var_name": "contentRewriterRegistry"}], "methods": [{"identifier": "MakeRequestHandler", "parameters": "(RequestPipeline requestPipeline,\n      ResponseRewriterRegistry contentRewriterRegistry)", "modifiers": "@Inject public", "return": "", "signature": " MakeRequestHandler(RequestPipeline requestPipeline,\n      ResponseRewriterRegistry contentRewriterRegistry)", "full_signature": "@Inject public  MakeRequestHandler(RequestPipeline requestPipeline,\n      ResponseRewriterRegistry contentRewriterRegistry)", "class_method_signature": "MakeRequestHandler.MakeRequestHandler(RequestPipeline requestPipeline,\n      ResponseRewriterRegistry contentRewriterRegistry)", "testcase": false, "constructor": true}, {"identifier": "fetch", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "public", "return": "void", "signature": "void fetch(HttpServletRequest request, HttpServletResponse response)", "full_signature": "public void fetch(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "MakeRequestHandler.fetch(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "buildHttpRequest", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "HttpRequest", "signature": "HttpRequest buildHttpRequest(HttpServletRequest request)", "full_signature": "protected HttpRequest buildHttpRequest(HttpServletRequest request)", "class_method_signature": "MakeRequestHandler.buildHttpRequest(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "setPostData", "parameters": "(HttpServletRequest request, HttpRequest req)", "modifiers": "protected", "return": "void", "signature": "void setPostData(HttpServletRequest request, HttpRequest req)", "full_signature": "protected void setPostData(HttpServletRequest request, HttpRequest req)", "class_method_signature": "MakeRequestHandler.setPostData(HttpServletRequest request, HttpRequest req)", "testcase": false, "constructor": false}, {"identifier": "convertResponseToJson", "parameters": "(SecurityToken authToken, HttpServletRequest request,\n      HttpResponse results)", "modifiers": "protected", "return": "String", "signature": "String convertResponseToJson(SecurityToken authToken, HttpServletRequest request,\n      HttpResponse results)", "full_signature": "protected String convertResponseToJson(SecurityToken authToken, HttpServletRequest request,\n      HttpResponse results)", "class_method_signature": "MakeRequestHandler.convertResponseToJson(SecurityToken authToken, HttpServletRequest request,\n      HttpResponse results)", "testcase": false, "constructor": false}, {"identifier": "getRequestPipeline", "parameters": "()", "modifiers": "protected", "return": "RequestPipeline", "signature": "RequestPipeline getRequestPipeline()", "full_signature": "protected RequestPipeline getRequestPipeline()", "class_method_signature": "MakeRequestHandler.getRequestPipeline()", "testcase": false, "constructor": false}, {"identifier": "extractAndValidateToken", "parameters": "(HttpServletRequest request)", "modifiers": "private", "return": "SecurityToken", "signature": "SecurityToken extractAndValidateToken(HttpServletRequest request)", "full_signature": "private SecurityToken extractAndValidateToken(HttpServletRequest request)", "class_method_signature": "MakeRequestHandler.extractAndValidateToken(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "processFeed", "parameters": "(String url, HttpServletRequest req, String xml)", "modifiers": "private", "return": "String", "signature": "String processFeed(String url, HttpServletRequest req, String xml)", "full_signature": "private String processFeed(String url, HttpServletRequest req, String xml)", "class_method_signature": "MakeRequestHandler.processFeed(String url, HttpServletRequest req, String xml)", "testcase": false, "constructor": false}, {"identifier": "getContainer", "parameters": "(HttpServletRequest request)", "modifiers": "@SuppressWarnings(\"deprecation\") protected static", "return": "String", "signature": "String getContainer(HttpServletRequest request)", "full_signature": "@SuppressWarnings(\"deprecation\") protected static String getContainer(HttpServletRequest request)", "class_method_signature": "MakeRequestHandler.getContainer(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(HttpServletRequest request, String key, String defaultValue)", "modifiers": "protected static", "return": "String", "signature": "String getParameter(HttpServletRequest request, String key, String defaultValue)", "full_signature": "protected static String getParameter(HttpServletRequest request, String key, String defaultValue)", "class_method_signature": "MakeRequestHandler.getParameter(HttpServletRequest request, String key, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "setResponseHeaders", "parameters": "(HttpServletRequest request,\n      HttpServletResponse response, HttpResponse results)", "modifiers": "@SuppressWarnings(\"boxing\") protected static", "return": "void", "signature": "void setResponseHeaders(HttpServletRequest request,\n      HttpServletResponse response, HttpResponse results)", "full_signature": "@SuppressWarnings(\"boxing\") protected static void setResponseHeaders(HttpServletRequest request,\n      HttpServletResponse response, HttpResponse results)", "class_method_signature": "MakeRequestHandler.setResponseHeaders(HttpServletRequest request,\n      HttpServletResponse response, HttpResponse results)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/MakeRequestHandler.java"}, "focal_method": {"identifier": "fetch", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "public", "return": "void", "body": "public void fetch(HttpServletRequest request, HttpServletResponse response)\n      throws GadgetException, IOException {\n    HttpRequest rcr = buildHttpRequest(request);\n\n    // Serialize the response\n    HttpResponse results = requestPipeline.execute(rcr);\n\n    // Rewrite the response\n    if (contentRewriterRegistry != null) {\n      try {\n        results = contentRewriterRegistry.rewriteHttpResponse(rcr, results);\n      } catch (RewritingException e) {\n        throw new GadgetException(GadgetException.Code.INTERNAL_SERVER_ERROR, e,\n            e.getHttpStatusCode());\n      }\n    }\n\n    // Serialize the response\n    String output = convertResponseToJson(rcr.getSecurityToken(), request, results);\n\n    // Find and set the refresh interval\n    setResponseHeaders(request, response, results);\n\n    response.setStatus(HttpServletResponse.SC_OK);\n    response.setContentType(\"application/json\");\n    response.setCharacterEncoding(\"UTF-8\");\n    response.getWriter().write(UNPARSEABLE_CRUFT + output);\n  }", "signature": "void fetch(HttpServletRequest request, HttpServletResponse response)", "full_signature": "public void fetch(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "MakeRequestHandler.fetch(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["buildHttpRequest", "execute", "rewriteHttpResponse", "getHttpStatusCode", "convertResponseToJson", "getSecurityToken", "setResponseHeaders", "setStatus", "setContentType", "setCharacterEncoding", "write", "getWriter"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}