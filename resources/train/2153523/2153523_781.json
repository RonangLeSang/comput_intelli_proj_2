{"test_class": {"identifier": "DefaultSecurityTokenCodecTest", "superclass": "", "interfaces": "", "fields": [], "file": "java/common/src/test/java/org/apache/shindig/auth/DefaultSecurityTokenCodecTest.java"}, "test_case": {"identifier": "testBasicDecoder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBasicDecoder() throws Exception {\n    DefaultSecurityTokenCodec codec = new DefaultSecurityTokenCodec(\n        new FakeContainerConfig(\"insecure\"));\n    String token = \"o:v:app:domain:appurl:12345:container\";\n    Map<String, String> parameters = Collections.singletonMap(\n        SecurityTokenCodec.SECURITY_TOKEN_NAME, token);\n    SecurityToken st = codec.createToken(parameters);\n    assertEquals(\"o\", st.getOwnerId());\n    assertEquals(\"v\", st.getViewerId());\n    assertEquals(\"appurl\", st.getAppUrl());\n    assertEquals(\"container\", st.getContainer());\n  }", "signature": "void testBasicDecoder()", "full_signature": "@Test public void testBasicDecoder()", "class_method_signature": "DefaultSecurityTokenCodecTest.testBasicDecoder()", "testcase": true, "constructor": false, "invocations": ["singletonMap", "createToken", "assertEquals", "getOwnerId", "assertEquals", "getViewerId", "assertEquals", "getAppUrl", "assertEquals", "getContainer"]}, "focal_class": {"identifier": "DefaultSecurityTokenCodec", "superclass": "", "interfaces": "implements SecurityTokenCodec", "fields": [{"original_string": "private static final String SECURITY_TOKEN_TYPE = \"gadgets.securityTokenType\";", "modifier": "private static final", "type": "String", "declarator": "SECURITY_TOKEN_TYPE = \"gadgets.securityTokenType\"", "var_name": "SECURITY_TOKEN_TYPE"}, {"original_string": "private final SecurityTokenCodec codec;", "modifier": "private final", "type": "SecurityTokenCodec", "declarator": "codec", "var_name": "codec"}], "methods": [{"identifier": "DefaultSecurityTokenCodec", "parameters": "(ContainerConfig config)", "modifiers": "@Inject public", "return": "", "signature": " DefaultSecurityTokenCodec(ContainerConfig config)", "full_signature": "@Inject public  DefaultSecurityTokenCodec(ContainerConfig config)", "class_method_signature": "DefaultSecurityTokenCodec.DefaultSecurityTokenCodec(ContainerConfig config)", "testcase": false, "constructor": true}, {"identifier": "createToken", "parameters": "(Map<String, String> tokenParameters)", "modifiers": "public", "return": "SecurityToken", "signature": "SecurityToken createToken(Map<String, String> tokenParameters)", "full_signature": "public SecurityToken createToken(Map<String, String> tokenParameters)", "class_method_signature": "DefaultSecurityTokenCodec.createToken(Map<String, String> tokenParameters)", "testcase": false, "constructor": false}, {"identifier": "encodeToken", "parameters": "(SecurityToken token)", "modifiers": "public", "return": "String", "signature": "String encodeToken(SecurityToken token)", "full_signature": "public String encodeToken(SecurityToken token)", "class_method_signature": "DefaultSecurityTokenCodec.encodeToken(SecurityToken token)", "testcase": false, "constructor": false}], "file": "java/common/src/main/java/org/apache/shindig/auth/DefaultSecurityTokenCodec.java"}, "focal_method": {"identifier": "createToken", "parameters": "(Map<String, String> tokenParameters)", "modifiers": "public", "return": "SecurityToken", "body": "public SecurityToken createToken(Map<String, String> tokenParameters)\n      throws SecurityTokenException {\n    return codec.createToken(tokenParameters);\n  }", "signature": "SecurityToken createToken(Map<String, String> tokenParameters)", "full_signature": "public SecurityToken createToken(Map<String, String> tokenParameters)", "class_method_signature": "DefaultSecurityTokenCodec.createToken(Map<String, String> tokenParameters)", "testcase": false, "constructor": false, "invocations": ["createToken"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}