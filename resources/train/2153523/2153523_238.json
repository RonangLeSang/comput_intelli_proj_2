{"test_class": {"identifier": "SanitizingGadgetRewriterTest", "superclass": "extends RewriterTestBase", "interfaces": "", "fields": [{"original_string": "private static final Set<String> DEFAULT_TAGS = ImmutableSet.of(\"html\", \"head\", \"body\");", "modifier": "private static final", "type": "Set<String>", "declarator": "DEFAULT_TAGS = ImmutableSet.of(\"html\", \"head\", \"body\")", "var_name": "DEFAULT_TAGS"}, {"original_string": "private static final Pattern BODY_REGEX = Pattern.compile(\".*<body>(.+)</body>.*\");", "modifier": "private static final", "type": "Pattern", "declarator": "BODY_REGEX = Pattern.compile(\".*<body>(.+)</body>.*\")", "var_name": "BODY_REGEX"}, {"original_string": "private final GadgetContext sanitaryGadgetContext = new GadgetContext() {\n    @Override\n    public String getParameter(String name) {\n      return Param.SANITIZE.getKey().equals(name) ? \"1\" : null;\n    }\n    \n    @Override\n    public String getContainer() {\n      return MOCK_CONTAINER;\n    }\n  };", "modifier": "private final", "type": "GadgetContext", "declarator": "sanitaryGadgetContext = new GadgetContext() {\n    @Override\n    public String getParameter(String name) {\n      return Param.SANITIZE.getKey().equals(name) ? \"1\" : null;\n    }\n    \n    @Override\n    public String getContainer() {\n      return MOCK_CONTAINER;\n    }\n  }", "var_name": "sanitaryGadgetContext"}, {"original_string": "private final GadgetContext unsanitaryGadgetContext = new GadgetContext();", "modifier": "private final", "type": "GadgetContext", "declarator": "unsanitaryGadgetContext = new GadgetContext()", "var_name": "unsanitaryGadgetContext"}, {"original_string": "private final GadgetContext unsanitaryGadgetContextNoCacheAndDebug = new GadgetContext(){\n    @Override\n    public boolean getIgnoreCache() {\n      return true;\n    }\n    @Override\n    public boolean getDebug() {\n      return true;\n    }\n  };", "modifier": "private final", "type": "GadgetContext", "declarator": "unsanitaryGadgetContextNoCacheAndDebug = new GadgetContext(){\n    @Override\n    public boolean getIgnoreCache() {\n      return true;\n    }\n    @Override\n    public boolean getDebug() {\n      return true;\n    }\n  }", "var_name": "unsanitaryGadgetContextNoCacheAndDebug"}, {"original_string": "private Gadget gadget;", "modifier": "private", "type": "Gadget", "declarator": "gadget", "var_name": "gadget"}, {"original_string": "private Gadget gadgetNoCacheAndDebug;", "modifier": "private", "type": "Gadget", "declarator": "gadgetNoCacheAndDebug", "var_name": "gadgetNoCacheAndDebug"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/render/SanitizingGadgetRewriterTest.java"}, "test_case": {"identifier": "enforceBadImageUrlStripped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void enforceBadImageUrlStripped() throws Exception {\n    String markup = \"<img src='java\\\\ script:evil()'>Evil happens</img>\";\n    String sanitized = \"<img>Evil happens\";\n    assertEquals(sanitized, rewrite(gadget, markup, set(\"img\"), set(\"src\")));\n  }", "signature": "void enforceBadImageUrlStripped()", "full_signature": "@Test public void enforceBadImageUrlStripped()", "class_method_signature": "SanitizingGadgetRewriterTest.enforceBadImageUrlStripped()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "rewrite", "set", "set"]}, "focal_class": {"identifier": "SanitizingGadgetRewriter", "superclass": "extends DomWalker.Rewriter", "interfaces": "", "fields": [{"original_string": "private static final String BYPASS_SANITIZATION_KEY = \"shindig.bypassSanitization\";", "modifier": "private static final", "type": "String", "declarator": "BYPASS_SANITIZATION_KEY = \"shindig.bypassSanitization\"", "var_name": "BYPASS_SANITIZATION_KEY"}, {"original_string": "private static UserDataHandler copyOnClone = new UserDataHandler() {\n    public void handle(short operation, String key, Object data, Node src, Node dst) {\n      if (operation == NODE_IMPORTED || operation == NODE_CLONED) {\n        dst.setUserData(key, data, copyOnClone);\n      }\n    }\n  };", "modifier": "private static", "type": "UserDataHandler", "declarator": "copyOnClone = new UserDataHandler() {\n    public void handle(short operation, String key, Object data, Node src, Node dst) {\n      if (operation == NODE_IMPORTED || operation == NODE_CLONED) {\n        dst.setUserData(key, data, copyOnClone);\n      }\n    }\n  }", "var_name": "copyOnClone"}], "methods": [{"identifier": "isSanitizedRenderingRequest", "parameters": "(Gadget gadget)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSanitizedRenderingRequest(Gadget gadget)", "full_signature": "public static boolean isSanitizedRenderingRequest(Gadget gadget)", "class_method_signature": "SanitizingGadgetRewriter.isSanitizedRenderingRequest(Gadget gadget)", "testcase": false, "constructor": false}, {"identifier": "bypassSanitization", "parameters": "(Element element, boolean includingChildren)", "modifiers": "public static", "return": "void", "signature": "void bypassSanitization(Element element, boolean includingChildren)", "full_signature": "public static void bypassSanitization(Element element, boolean includingChildren)", "class_method_signature": "SanitizingGadgetRewriter.bypassSanitization(Element element, boolean includingChildren)", "testcase": false, "constructor": false}, {"identifier": "SanitizingGadgetRewriter", "parameters": "(@AllowedTags Set<String> allowedTags,\n      @AllowedAttributes Set<String> allowedAttributes,\n      ContentRewriterFeature.Factory rewriterFeatureFactory,\n      CajaCssSanitizer cssSanitizer,\n      ProxyUriManager proxyUriManager)", "modifiers": "@Inject public", "return": "", "signature": " SanitizingGadgetRewriter(@AllowedTags Set<String> allowedTags,\n      @AllowedAttributes Set<String> allowedAttributes,\n      ContentRewriterFeature.Factory rewriterFeatureFactory,\n      CajaCssSanitizer cssSanitizer,\n      ProxyUriManager proxyUriManager)", "full_signature": "@Inject public  SanitizingGadgetRewriter(@AllowedTags Set<String> allowedTags,\n      @AllowedAttributes Set<String> allowedAttributes,\n      ContentRewriterFeature.Factory rewriterFeatureFactory,\n      CajaCssSanitizer cssSanitizer,\n      ProxyUriManager proxyUriManager)", "class_method_signature": "SanitizingGadgetRewriter.SanitizingGadgetRewriter(@AllowedTags Set<String> allowedTags,\n      @AllowedAttributes Set<String> allowedAttributes,\n      ContentRewriterFeature.Factory rewriterFeatureFactory,\n      CajaCssSanitizer cssSanitizer,\n      ProxyUriManager proxyUriManager)", "testcase": false, "constructor": true}, {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent content)", "modifiers": "@Override public", "return": "void", "signature": "void rewrite(Gadget gadget, MutableContent content)", "full_signature": "@Override public void rewrite(Gadget gadget, MutableContent content)", "class_method_signature": "SanitizingGadgetRewriter.rewrite(Gadget gadget, MutableContent content)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(NamedNodeMap nodes)", "modifiers": "private static", "return": "List<Attr>", "signature": "List<Attr> toList(NamedNodeMap nodes)", "full_signature": "private static List<Attr> toList(NamedNodeMap nodes)", "class_method_signature": "SanitizingGadgetRewriter.toList(NamedNodeMap nodes)", "testcase": false, "constructor": false}, {"identifier": "canBypassSanitization", "parameters": "(Element element)", "modifiers": "public static", "return": "Bypass", "signature": "Bypass canBypassSanitization(Element element)", "full_signature": "public static Bypass canBypassSanitization(Element element)", "class_method_signature": "SanitizingGadgetRewriter.canBypassSanitization(Element element)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/SanitizingGadgetRewriter.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent content)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void rewrite(Gadget gadget, MutableContent content) throws RewritingException {\n    if (gadget.sanitizeOutput()) {\n      boolean sanitized = false;\n      try {\n        super.rewrite(gadget, content);\n        sanitized = true;\n      } finally {\n        // Defensively clean the content in case of failure\n        if (!sanitized) {\n          content.setContent(\"\");\n        }\n      }\n    }\n  }", "signature": "void rewrite(Gadget gadget, MutableContent content)", "full_signature": "@Override public void rewrite(Gadget gadget, MutableContent content)", "class_method_signature": "SanitizingGadgetRewriter.rewrite(Gadget gadget, MutableContent content)", "testcase": false, "constructor": false, "invocations": ["sanitizeOutput", "rewrite", "setContent"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}