{"test_class": {"identifier": "BasicOAuthStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SAMPLE_FILE =\n      '{' +\n    \"'http://localhost:8080/samplecontainer/examples/oauth.xml' : {\" +\n    \"'' : {\" +\n    \"'consumer_key' : 'gadgetConsumer',\" +\n    \"'consumer_secret' : 'gadgetSecret',\" +\n    \"'key_type' : 'HMAC_SYMMETRIC'\" +\n          '}' +\n    \"},\" +\n    \"'http://rsagadget/test.xml' : {\" +\n    \"'' : {\" +\n    \"'consumer_key' : 'rsaconsumer',\" +\n    \"'consumer_secret' : 'rsaprivate',\" +\n    \"'callback_url' : 'callback',\" +\n    \"'key_type' : 'RSA_PRIVATE'\" +\n          '}' +\n          '}' +\n\n          '}';", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_FILE =\n      '{' +\n    \"'http://localhost:8080/samplecontainer/examples/oauth.xml' : {\" +\n    \"'' : {\" +\n    \"'consumer_key' : 'gadgetConsumer',\" +\n    \"'consumer_secret' : 'gadgetSecret',\" +\n    \"'key_type' : 'HMAC_SYMMETRIC'\" +\n          '}' +\n    \"},\" +\n    \"'http://rsagadget/test.xml' : {\" +\n    \"'' : {\" +\n    \"'consumer_key' : 'rsaconsumer',\" +\n    \"'consumer_secret' : 'rsaprivate',\" +\n    \"'callback_url' : 'callback',\" +\n    \"'key_type' : 'RSA_PRIVATE'\" +\n          '}' +\n          '}' +\n\n          '}'", "var_name": "SAMPLE_FILE"}, {"original_string": "private BasicOAuthStore store;", "modifier": "private", "type": "BasicOAuthStore", "declarator": "store", "var_name": "store"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/oauth/BasicOAuthStoreTest.java"}, "test_case": {"identifier": "testInit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInit() throws Exception {\n    FakeGadgetToken t = new FakeGadgetToken();\n    t.setAppUrl(\"http://localhost:8080/samplecontainer/examples/oauth.xml\");\n    OAuthServiceProvider provider = new OAuthServiceProvider(\"req\", \"authorize\", \"access\");\n    ConsumerInfo consumerInfo = store.getConsumerKeyAndSecret(t, \"\", provider);\n    OAuthConsumer consumer = consumerInfo.getConsumer();\n    assertEquals(\"gadgetConsumer\", consumer.consumerKey);\n    assertEquals(\"gadgetSecret\", consumer.consumerSecret);\n    assertEquals(\"HMAC-SHA1\", consumer.getProperty(\"oauth_signature_method\"));\n    assertEquals(provider, consumer.serviceProvider);\n    assertNull(consumerInfo.getKeyName());\n    assertEquals(\"default callback\", consumerInfo.getCallbackUrl());\n\n    t.setAppUrl(\"http://rsagadget/test.xml\");\n    consumerInfo = store.getConsumerKeyAndSecret(t, \"\", provider);\n    consumer = consumerInfo.getConsumer();\n    assertEquals(\"rsaconsumer\", consumer.consumerKey);\n    assertNull(consumer.consumerSecret);\n    assertEquals(\"RSA-SHA1\", consumer.getProperty(\"oauth_signature_method\"));\n    assertEquals(provider, consumer.serviceProvider);\n    assertEquals(\"rsaprivate\", consumer.getProperty(RSA_SHA1.PRIVATE_KEY));\n    assertNull(consumerInfo.getKeyName());\n    assertEquals(\"callback\", consumerInfo.getCallbackUrl());\n  }", "signature": "void testInit()", "full_signature": "@Test public void testInit()", "class_method_signature": "BasicOAuthStoreTest.testInit()", "testcase": true, "constructor": false, "invocations": ["setAppUrl", "getConsumerKeyAndSecret", "getConsumer", "assertEquals", "assertEquals", "assertEquals", "getProperty", "assertEquals", "assertNull", "getKeyName", "assertEquals", "getCallbackUrl", "setAppUrl", "getConsumerKeyAndSecret", "getConsumer", "assertEquals", "assertNull", "assertEquals", "getProperty", "assertEquals", "assertEquals", "getProperty", "assertNull", "getKeyName", "assertEquals", "getCallbackUrl"]}, "focal_class": {"identifier": "BasicOAuthStore", "superclass": "", "interfaces": "implements OAuthStore", "fields": [{"original_string": "private static final String CONSUMER_SECRET_KEY = \"consumer_secret\";", "modifier": "private static final", "type": "String", "declarator": "CONSUMER_SECRET_KEY = \"consumer_secret\"", "var_name": "CONSUMER_SECRET_KEY"}, {"original_string": "private static final String CONSUMER_KEY_KEY = \"consumer_key\";", "modifier": "private static final", "type": "String", "declarator": "CONSUMER_KEY_KEY = \"consumer_key\"", "var_name": "CONSUMER_KEY_KEY"}, {"original_string": "private static final String KEY_TYPE_KEY = \"key_type\";", "modifier": "private static final", "type": "String", "declarator": "KEY_TYPE_KEY = \"key_type\"", "var_name": "KEY_TYPE_KEY"}, {"original_string": "private static final String CALLBACK_URL = \"callback_url\";", "modifier": "private static final", "type": "String", "declarator": "CALLBACK_URL = \"callback_url\"", "var_name": "CALLBACK_URL"}, {"original_string": "private final Map<BasicOAuthStoreConsumerIndex, BasicOAuthStoreConsumerKeyAndSecret> consumerInfos;", "modifier": "private final", "type": "Map<BasicOAuthStoreConsumerIndex, BasicOAuthStoreConsumerKeyAndSecret>", "declarator": "consumerInfos", "var_name": "consumerInfos"}, {"original_string": "private final Map<BasicOAuthStoreTokenIndex, TokenInfo> tokens;", "modifier": "private final", "type": "Map<BasicOAuthStoreTokenIndex, TokenInfo>", "declarator": "tokens", "var_name": "tokens"}, {"original_string": "private BasicOAuthStoreConsumerKeyAndSecret defaultKey;", "modifier": "private", "type": "BasicOAuthStoreConsumerKeyAndSecret", "declarator": "defaultKey", "var_name": "defaultKey"}, {"original_string": "private String defaultCallbackUrl;", "modifier": "private", "type": "String", "declarator": "defaultCallbackUrl", "var_name": "defaultCallbackUrl"}, {"original_string": "private int consumerKeyLookupCount = 0;", "modifier": "private", "type": "int", "declarator": "consumerKeyLookupCount = 0", "var_name": "consumerKeyLookupCount"}, {"original_string": "private int accessTokenLookupCount = 0;", "modifier": "private", "type": "int", "declarator": "accessTokenLookupCount = 0", "var_name": "accessTokenLookupCount"}, {"original_string": "private int accessTokenAddCount = 0;", "modifier": "private", "type": "int", "declarator": "accessTokenAddCount = 0", "var_name": "accessTokenAddCount"}, {"original_string": "private int accessTokenRemoveCount = 0;", "modifier": "private", "type": "int", "declarator": "accessTokenRemoveCount = 0", "var_name": "accessTokenRemoveCount"}], "methods": [{"identifier": "BasicOAuthStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicOAuthStore()", "full_signature": "public  BasicOAuthStore()", "class_method_signature": "BasicOAuthStore.BasicOAuthStore()", "testcase": false, "constructor": true}, {"identifier": "initFromConfigString", "parameters": "(String oauthConfigStr)", "modifiers": "public", "return": "void", "signature": "void initFromConfigString(String oauthConfigStr)", "full_signature": "public void initFromConfigString(String oauthConfigStr)", "class_method_signature": "BasicOAuthStore.initFromConfigString(String oauthConfigStr)", "testcase": false, "constructor": false}, {"identifier": "storeConsumerInfos", "parameters": "(URI gadgetUri, JSONObject oauthConfig)", "modifiers": "private", "return": "void", "signature": "void storeConsumerInfos(URI gadgetUri, JSONObject oauthConfig)", "full_signature": "private void storeConsumerInfos(URI gadgetUri, JSONObject oauthConfig)", "class_method_signature": "BasicOAuthStore.storeConsumerInfos(URI gadgetUri, JSONObject oauthConfig)", "testcase": false, "constructor": false}, {"identifier": "storeConsumerInfo", "parameters": "(URI gadgetUri, String serviceName, JSONObject consumerInfo)", "modifiers": "private", "return": "void", "signature": "void storeConsumerInfo(URI gadgetUri, String serviceName, JSONObject consumerInfo)", "full_signature": "private void storeConsumerInfo(URI gadgetUri, String serviceName, JSONObject consumerInfo)", "class_method_signature": "BasicOAuthStore.storeConsumerInfo(URI gadgetUri, String serviceName, JSONObject consumerInfo)", "testcase": false, "constructor": false}, {"identifier": "realStoreConsumerInfo", "parameters": "(URI gadgetUri, String serviceName, JSONObject consumerInfo)", "modifiers": "private", "return": "void", "signature": "void realStoreConsumerInfo(URI gadgetUri, String serviceName, JSONObject consumerInfo)", "full_signature": "private void realStoreConsumerInfo(URI gadgetUri, String serviceName, JSONObject consumerInfo)", "class_method_signature": "BasicOAuthStore.realStoreConsumerInfo(URI gadgetUri, String serviceName, JSONObject consumerInfo)", "testcase": false, "constructor": false}, {"identifier": "convertFromOpenSsl", "parameters": "(String privateKey)", "modifiers": "public static", "return": "String", "signature": "String convertFromOpenSsl(String privateKey)", "full_signature": "public static String convertFromOpenSsl(String privateKey)", "class_method_signature": "BasicOAuthStore.convertFromOpenSsl(String privateKey)", "testcase": false, "constructor": false}, {"identifier": "setDefaultKey", "parameters": "(BasicOAuthStoreConsumerKeyAndSecret defaultKey)", "modifiers": "public", "return": "void", "signature": "void setDefaultKey(BasicOAuthStoreConsumerKeyAndSecret defaultKey)", "full_signature": "public void setDefaultKey(BasicOAuthStoreConsumerKeyAndSecret defaultKey)", "class_method_signature": "BasicOAuthStore.setDefaultKey(BasicOAuthStoreConsumerKeyAndSecret defaultKey)", "testcase": false, "constructor": false}, {"identifier": "setDefaultCallbackUrl", "parameters": "(String defaultCallbackUrl)", "modifiers": "public", "return": "void", "signature": "void setDefaultCallbackUrl(String defaultCallbackUrl)", "full_signature": "public void setDefaultCallbackUrl(String defaultCallbackUrl)", "class_method_signature": "BasicOAuthStore.setDefaultCallbackUrl(String defaultCallbackUrl)", "testcase": false, "constructor": false}, {"identifier": "setConsumerKeyAndSecret", "parameters": "(\n      BasicOAuthStoreConsumerIndex providerKey, BasicOAuthStoreConsumerKeyAndSecret keyAndSecret)", "modifiers": "public", "return": "void", "signature": "void setConsumerKeyAndSecret(\n      BasicOAuthStoreConsumerIndex providerKey, BasicOAuthStoreConsumerKeyAndSecret keyAndSecret)", "full_signature": "public void setConsumerKeyAndSecret(\n      BasicOAuthStoreConsumerIndex providerKey, BasicOAuthStoreConsumerKeyAndSecret keyAndSecret)", "class_method_signature": "BasicOAuthStore.setConsumerKeyAndSecret(\n      BasicOAuthStoreConsumerIndex providerKey, BasicOAuthStoreConsumerKeyAndSecret keyAndSecret)", "testcase": false, "constructor": false}, {"identifier": "getConsumerKeyAndSecret", "parameters": "(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)", "modifiers": "public", "return": "ConsumerInfo", "signature": "ConsumerInfo getConsumerKeyAndSecret(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)", "full_signature": "public ConsumerInfo getConsumerKeyAndSecret(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)", "class_method_signature": "BasicOAuthStore.getConsumerKeyAndSecret(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)", "testcase": false, "constructor": false}, {"identifier": "makeBasicOAuthStoreTokenIndex", "parameters": "(\n      SecurityToken securityToken, String serviceName, String tokenName)", "modifiers": "private", "return": "BasicOAuthStoreTokenIndex", "signature": "BasicOAuthStoreTokenIndex makeBasicOAuthStoreTokenIndex(\n      SecurityToken securityToken, String serviceName, String tokenName)", "full_signature": "private BasicOAuthStoreTokenIndex makeBasicOAuthStoreTokenIndex(\n      SecurityToken securityToken, String serviceName, String tokenName)", "class_method_signature": "BasicOAuthStore.makeBasicOAuthStoreTokenIndex(\n      SecurityToken securityToken, String serviceName, String tokenName)", "testcase": false, "constructor": false}, {"identifier": "getTokenInfo", "parameters": "(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName)", "modifiers": "public", "return": "TokenInfo", "signature": "TokenInfo getTokenInfo(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName)", "full_signature": "public TokenInfo getTokenInfo(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName)", "class_method_signature": "BasicOAuthStore.getTokenInfo(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName)", "testcase": false, "constructor": false}, {"identifier": "setTokenInfo", "parameters": "(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName, TokenInfo tokenInfo)", "modifiers": "public", "return": "void", "signature": "void setTokenInfo(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName, TokenInfo tokenInfo)", "full_signature": "public void setTokenInfo(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName, TokenInfo tokenInfo)", "class_method_signature": "BasicOAuthStore.setTokenInfo(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName, TokenInfo tokenInfo)", "testcase": false, "constructor": false}, {"identifier": "removeToken", "parameters": "(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName)", "modifiers": "public", "return": "void", "signature": "void removeToken(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName)", "full_signature": "public void removeToken(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName)", "class_method_signature": "BasicOAuthStore.removeToken(SecurityToken securityToken, ConsumerInfo consumerInfo,\n      String serviceName, String tokenName)", "testcase": false, "constructor": false}, {"identifier": "getConsumerKeyLookupCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getConsumerKeyLookupCount()", "full_signature": "public int getConsumerKeyLookupCount()", "class_method_signature": "BasicOAuthStore.getConsumerKeyLookupCount()", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenLookupCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAccessTokenLookupCount()", "full_signature": "public int getAccessTokenLookupCount()", "class_method_signature": "BasicOAuthStore.getAccessTokenLookupCount()", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenAddCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAccessTokenAddCount()", "full_signature": "public int getAccessTokenAddCount()", "class_method_signature": "BasicOAuthStore.getAccessTokenAddCount()", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenRemoveCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAccessTokenRemoveCount()", "full_signature": "public int getAccessTokenRemoveCount()", "class_method_signature": "BasicOAuthStore.getAccessTokenRemoveCount()", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/oauth/BasicOAuthStore.java"}, "focal_method": {"identifier": "getConsumerKeyAndSecret", "parameters": "(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)", "modifiers": "public", "return": "ConsumerInfo", "body": "public ConsumerInfo getConsumerKeyAndSecret(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)\n      throws GadgetException {\n    ++consumerKeyLookupCount;\n    BasicOAuthStoreConsumerIndex pk = new BasicOAuthStoreConsumerIndex();\n    pk.setGadgetUri(securityToken.getAppUrl());\n    pk.setServiceName(serviceName);\n    BasicOAuthStoreConsumerKeyAndSecret cks = consumerInfos.get(pk);\n    if (cks == null) {\n      cks = defaultKey;\n    }\n    if (cks == null) {\n      throw new GadgetException(GadgetException.Code.INTERNAL_SERVER_ERROR,\n          \"No key for gadget \" + securityToken.getAppUrl() + \" and service \" + serviceName);\n    }\n    OAuthConsumer consumer = null;\n    if (cks.getKeyType() == KeyType.RSA_PRIVATE) {\n      consumer = new OAuthConsumer(null, cks.getConsumerKey(), null, provider);\n      // The oauth.net java code has lots of magic.  By setting this property here, code thousands\n      // of lines away knows that the consumerSecret value in the consumer should be treated as\n      // an RSA private key and not an HMAC key.\n      consumer.setProperty(OAuth.OAUTH_SIGNATURE_METHOD, OAuth.RSA_SHA1);\n      consumer.setProperty(RSA_SHA1.PRIVATE_KEY, cks.getConsumerSecret());\n    } else {\n      consumer = new OAuthConsumer(null, cks.getConsumerKey(), cks.getConsumerSecret(), provider);\n      consumer.setProperty(OAuth.OAUTH_SIGNATURE_METHOD, OAuth.HMAC_SHA1);\n    }\n    String callback = (cks.getCallbackUrl() != null ? cks.getCallbackUrl() : defaultCallbackUrl);\n    return new ConsumerInfo(consumer, cks.getKeyName(), callback);\n  }", "signature": "ConsumerInfo getConsumerKeyAndSecret(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)", "full_signature": "public ConsumerInfo getConsumerKeyAndSecret(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)", "class_method_signature": "BasicOAuthStore.getConsumerKeyAndSecret(\n      SecurityToken securityToken, String serviceName, OAuthServiceProvider provider)", "testcase": false, "constructor": false, "invocations": ["setGadgetUri", "getAppUrl", "setServiceName", "get", "getAppUrl", "getKeyType", "getConsumerKey", "setProperty", "setProperty", "getConsumerSecret", "getConsumerKey", "getConsumerSecret", "setProperty", "getCallbackUrl", "getCallbackUrl", "getKeyName"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}