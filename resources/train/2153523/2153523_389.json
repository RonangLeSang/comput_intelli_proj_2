{"test_class": {"identifier": "ServletUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/ServletUtilTest.java"}, "test_case": {"identifier": "testValidateUrlWithPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testValidateUrlWithPort() throws Exception {\n    Uri url = ServletUtil.validateUrl(Uri.parse(\"http://www.example.com:8080/foo\"));\n    assertEquals(\"http\", url.getScheme());\n    assertEquals(\"www.example.com:8080\", url.getAuthority());\n    assertEquals(\"/foo\", url.getPath());\n    assertNull(url.getQuery());\n    assertNull(url.getFragment());\n  }", "signature": "void testValidateUrlWithPort()", "full_signature": "@Test public void testValidateUrlWithPort()", "class_method_signature": "ServletUtilTest.testValidateUrlWithPort()", "testcase": true, "constructor": false, "invocations": ["validateUrl", "parse", "assertEquals", "getScheme", "assertEquals", "getAuthority", "assertEquals", "getPath", "assertNull", "getQuery", "assertNull", "getFragment"]}, "focal_class": {"identifier": "ServletUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String REMOTE_ADDR_KEY = \"RemoteAddress\";", "modifier": "public static final", "type": "String", "declarator": "REMOTE_ADDR_KEY = \"RemoteAddress\"", "var_name": "REMOTE_ADDR_KEY"}, {"original_string": "public static final String DATA_URI_KEY = \"dataUri\";", "modifier": "public static final", "type": "String", "declarator": "DATA_URI_KEY = \"dataUri\"", "var_name": "DATA_URI_KEY"}], "methods": [{"identifier": "ServletUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ServletUtil()", "full_signature": "private  ServletUtil()", "class_method_signature": "ServletUtil.ServletUtil()", "testcase": false, "constructor": true}, {"identifier": "fromHttpServletRequest", "parameters": "(HttpServletRequest servletReq)", "modifiers": "public static", "return": "HttpRequest", "signature": "HttpRequest fromHttpServletRequest(HttpServletRequest servletReq)", "full_signature": "public static HttpRequest fromHttpServletRequest(HttpServletRequest servletReq)", "class_method_signature": "ServletUtil.fromHttpServletRequest(HttpServletRequest servletReq)", "testcase": false, "constructor": false}, {"identifier": "setCachingHeaders", "parameters": "(HttpResponseBuilder response, int ttl, boolean noProxy)", "modifiers": "public static", "return": "void", "signature": "void setCachingHeaders(HttpResponseBuilder response, int ttl, boolean noProxy)", "full_signature": "public static void setCachingHeaders(HttpResponseBuilder response, int ttl, boolean noProxy)", "class_method_signature": "ServletUtil.setCachingHeaders(HttpResponseBuilder response, int ttl, boolean noProxy)", "testcase": false, "constructor": false}, {"identifier": "copyResponseToServlet", "parameters": "(HttpResponse response, HttpServletResponse servletResponse)", "modifiers": "public static", "return": "void", "signature": "void copyResponseToServlet(HttpResponse response, HttpServletResponse servletResponse)", "full_signature": "public static void copyResponseToServlet(HttpResponse response, HttpServletResponse servletResponse)", "class_method_signature": "ServletUtil.copyResponseToServlet(HttpResponse response, HttpServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "validateUrl", "parameters": "(Uri urlToValidate)", "modifiers": "public static", "return": "Uri", "signature": "Uri validateUrl(Uri urlToValidate)", "full_signature": "public static Uri validateUrl(Uri urlToValidate)", "class_method_signature": "ServletUtil.validateUrl(Uri urlToValidate)", "testcase": false, "constructor": false}, {"identifier": "setXForwardedForHeader", "parameters": "(HttpRequest inboundRequest, HttpRequest req)", "modifiers": "public static", "return": "void", "signature": "void setXForwardedForHeader(HttpRequest inboundRequest, HttpRequest req)", "full_signature": "public static void setXForwardedForHeader(HttpRequest inboundRequest, HttpRequest req)", "class_method_signature": "ServletUtil.setXForwardedForHeader(HttpRequest inboundRequest, HttpRequest req)", "testcase": false, "constructor": false}, {"identifier": "setXForwardedForHeader", "parameters": "(HttpServletRequest inboundRequest, HttpRequest req)", "modifiers": "public static", "return": "void", "signature": "void setXForwardedForHeader(HttpServletRequest inboundRequest, HttpRequest req)", "full_signature": "public static void setXForwardedForHeader(HttpServletRequest inboundRequest, HttpRequest req)", "class_method_signature": "ServletUtil.setXForwardedForHeader(HttpServletRequest inboundRequest, HttpRequest req)", "testcase": false, "constructor": false}, {"identifier": "getXForwardedForHeader", "parameters": "(String origValue, String remoteAddr)", "modifiers": "private static", "return": "String", "signature": "String getXForwardedForHeader(String origValue, String remoteAddr)", "full_signature": "private static String getXForwardedForHeader(String origValue, String remoteAddr)", "class_method_signature": "ServletUtil.getXForwardedForHeader(String origValue, String remoteAddr)", "testcase": false, "constructor": false}, {"identifier": "errorResponse", "parameters": "(GadgetException e)", "modifiers": "public static", "return": "HttpResponse", "signature": "HttpResponse errorResponse(GadgetException e)", "full_signature": "public static HttpResponse errorResponse(GadgetException e)", "class_method_signature": "ServletUtil.errorResponse(GadgetException e)", "testcase": false, "constructor": false}, {"identifier": "convertToJsonResponse", "parameters": "(HttpResponse response)", "modifiers": "public static", "return": "HttpResponse", "signature": "HttpResponse convertToJsonResponse(HttpResponse response)", "full_signature": "public static HttpResponse convertToJsonResponse(HttpResponse response)", "class_method_signature": "ServletUtil.convertToJsonResponse(HttpResponse response)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ServletUtil.java"}, "focal_method": {"identifier": "validateUrl", "parameters": "(Uri urlToValidate)", "modifiers": "public static", "return": "Uri", "body": "public static Uri validateUrl(Uri urlToValidate) throws GadgetException {\n    if (urlToValidate == null) {\n      throw new GadgetException(GadgetException.Code.MISSING_PARAMETER, \"Missing url param\",\n          HttpResponse.SC_BAD_REQUEST);\n    }\n    UriBuilder url = new UriBuilder(urlToValidate);\n    if (!\"http\".equals(url.getScheme()) && !\"https\".equals(url.getScheme())) {\n      throw new GadgetException(GadgetException.Code.INVALID_PARAMETER,\n          \"Invalid request url scheme in url: \" + Utf8UrlCoder.encode(urlToValidate.toString()) +\n          \"; only \\\"http\\\" and \\\"https\\\" supported.\", HttpResponse.SC_BAD_REQUEST);\n    }\n    if (url.getPath() == null || url.getPath().length() == 0) {\n      url.setPath(\"/\");\n    }\n    return url.toUri();\n  }", "signature": "Uri validateUrl(Uri urlToValidate)", "full_signature": "public static Uri validateUrl(Uri urlToValidate)", "class_method_signature": "ServletUtil.validateUrl(Uri urlToValidate)", "testcase": false, "constructor": false, "invocations": ["equals", "getScheme", "equals", "getScheme", "encode", "toString", "getPath", "length", "getPath", "setPath", "toUri"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}