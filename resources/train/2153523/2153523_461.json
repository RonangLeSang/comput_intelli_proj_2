{"test_class": {"identifier": "TemplateRewriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GadgetSpec gadgetSpec;", "modifier": "private", "type": "GadgetSpec", "declarator": "gadgetSpec", "var_name": "gadgetSpec"}, {"original_string": "private Gadget gadget;", "modifier": "private", "type": "Gadget", "declarator": "gadget", "var_name": "gadget"}, {"original_string": "private MutableContent content;", "modifier": "private", "type": "MutableContent", "declarator": "content", "var_name": "content"}, {"original_string": "private TemplateRewriter rewriter;", "modifier": "private", "type": "TemplateRewriter", "declarator": "rewriter", "var_name": "rewriter"}, {"original_string": "private final Map<String, Object> config = Maps.newHashMap();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "config = Maps.newHashMap()", "var_name": "config"}, {"original_string": "private static final Uri GADGET_URI = Uri.parse(\"http://example.org/gadget.php\");", "modifier": "private static final", "type": "Uri", "declarator": "GADGET_URI = Uri.parse(\"http://example.org/gadget.php\")", "var_name": "GADGET_URI"}, {"original_string": "private static final String CONTENT_PLAIN =\n    \"<script type='text/os-template'>Hello, ${user.name}</script>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_PLAIN =\n    \"<script type='text/os-template'>Hello, ${user.name}</script>\"", "var_name": "CONTENT_PLAIN"}, {"original_string": "private static final String CONTENT_WITH_MESSAGE =\n    \"<script type='text/os-template'>Hello, ${Msg.name}</script>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_WITH_MESSAGE =\n    \"<script type='text/os-template'>Hello, ${Msg.name}</script>\"", "var_name": "CONTENT_WITH_MESSAGE"}, {"original_string": "private static final String CONTENT_REQUIRE =\n    \"<script type='text/os-template' require='user'>Hello, ${user.name}</script>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_REQUIRE =\n    \"<script type='text/os-template' require='user'>Hello, ${user.name}</script>\"", "var_name": "CONTENT_REQUIRE"}, {"original_string": "private static final String CONTENT_REQUIRE_MISSING =\n    \"<script type='text/os-template' require='foo'>Hello, ${user.name}</script>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_REQUIRE_MISSING =\n    \"<script type='text/os-template' require='foo'>Hello, ${user.name}</script>\"", "var_name": "CONTENT_REQUIRE_MISSING"}, {"original_string": "private static final String CONTENT_WITH_TAG =\n    \"<script type='text/os-template' xmlns:foo='#foo' tag='foo:Bar'>Hello, ${user.name}</script>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_WITH_TAG =\n    \"<script type='text/os-template' xmlns:foo='#foo' tag='foo:Bar'>Hello, ${user.name}</script>\"", "var_name": "CONTENT_WITH_TAG"}, {"original_string": "private static final String CONTENT_WITH_AUTO_UPDATE =\n    \"<script type='text/os-template' autoUpdate='true'>Hello, ${user.name}</script>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_WITH_AUTO_UPDATE =\n    \"<script type='text/os-template' autoUpdate='true'>Hello, ${user.name}</script>\"", "var_name": "CONTENT_WITH_AUTO_UPDATE"}, {"original_string": "private static final String TEMPLATE_LIBRARY =\n    \"<Templates xmlns:my='#my'>\" +\n    \"  <Namespace prefix='my' url='#my'/>\" +\n    \"  <JavaScript>script</JavaScript>\" +\n    \"  <Style>style</Style>\" +\n    \"  <Template tag='my:Tag1'>external1</Template>\" +\n    \"  <Template tag='my:Tag2'>external2</Template>\" +\n    \"  <Template tag='my:Tag3'>external3</Template>\" +\n    \"  <Template tag='my:Tag4'>external4</Template>\" +\n    \"</Templates>\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_LIBRARY =\n    \"<Templates xmlns:my='#my'>\" +\n    \"  <Namespace prefix='my' url='#my'/>\" +\n    \"  <JavaScript>script</JavaScript>\" +\n    \"  <Style>style</Style>\" +\n    \"  <Template tag='my:Tag1'>external1</Template>\" +\n    \"  <Template tag='my:Tag2'>external2</Template>\" +\n    \"  <Template tag='my:Tag3'>external3</Template>\" +\n    \"  <Template tag='my:Tag4'>external4</Template>\" +\n    \"</Templates>\"", "var_name": "TEMPLATE_LIBRARY"}, {"original_string": "private static final String TEMPLATE_LIBRARY_URI = \"http://example.org/library.xml\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_LIBRARY_URI = \"http://example.org/library.xml\"", "var_name": "TEMPLATE_LIBRARY_URI"}, {"original_string": "private static final String CONTENT_WITH_TAG_FROM_LIBRARY =\n    \"<script type='text/os-template' xmlns:my='#my'><my:Tag4/></script>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_WITH_TAG_FROM_LIBRARY =\n    \"<script type='text/os-template' xmlns:my='#my'><my:Tag4/></script>\"", "var_name": "CONTENT_WITH_TAG_FROM_LIBRARY"}, {"original_string": "private static final String CONTENT_TESTING_PRECEDENCE_RULES =\n    \"<script type='text/os-template' xmlns:my='#my' tag='my:Tag1'>inline1</script>\" +\n    \"<script type='text/os-template' xmlns:my='#my' tag='my:Tag2'>inline2</script>\" +\n    \"<script type='text/os-template' xmlns:my='#my' tag='my:Tag3'>inline3</script>\" +\n    \"<script type='text/os-template' xmlns:my='#my'><my:Tag1/><my:Tag2/><my:Tag3/><my:Tag4/></script>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TESTING_PRECEDENCE_RULES =\n    \"<script type='text/os-template' xmlns:my='#my' tag='my:Tag1'>inline1</script>\" +\n    \"<script type='text/os-template' xmlns:my='#my' tag='my:Tag2'>inline2</script>\" +\n    \"<script type='text/os-template' xmlns:my='#my' tag='my:Tag3'>inline3</script>\" +\n    \"<script type='text/os-template' xmlns:my='#my'><my:Tag1/><my:Tag2/><my:Tag3/><my:Tag4/></script>\"", "var_name": "CONTENT_TESTING_PRECEDENCE_RULES"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/TemplateRewriterTest.java"}, "test_case": {"identifier": "templateWithLibrary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void templateWithLibrary() throws Exception {\n    setupGadget(getGadgetXmlWithLibrary(CONTENT_WITH_TAG_FROM_LIBRARY));\n    rewriter.rewrite(gadget, content);\n    assertTrue(\"Script not inserted\", content.getContent().indexOf(\n        \"<script type=\\\"text/javascript\\\">script</script>\") > 0);\n    assertTrue(\"Style not inserted\", content.getContent().indexOf(\n        \"<style type=\\\"text/css\\\">style</style>\") > 0);\n    assertTrue(\"Tag not executed\", content.getContent().indexOf(\n        \"external4\") > 0);\n    \n    testFeatureRemoved();\n  }", "signature": "void templateWithLibrary()", "full_signature": "@Test public void templateWithLibrary()", "class_method_signature": "TemplateRewriterTest.templateWithLibrary()", "testcase": true, "constructor": false, "invocations": ["setupGadget", "getGadgetXmlWithLibrary", "rewrite", "assertTrue", "indexOf", "getContent", "assertTrue", "indexOf", "getContent", "assertTrue", "indexOf", "getContent", "testFeatureRemoved"]}, "focal_class": {"identifier": "TemplateRewriter", "superclass": "", "interfaces": "implements GadgetRewriter", "fields": [{"original_string": "public final static Set<String> TAGS = ImmutableSet.of(\"script\");", "modifier": "public final static", "type": "Set<String>", "declarator": "TAGS = ImmutableSet.of(\"script\")", "var_name": "TAGS"}, {"original_string": "public static final String TEMPLATES_FEATURE_NAME = \"opensocial-templates\";", "modifier": "public static final", "type": "String", "declarator": "TEMPLATES_FEATURE_NAME = \"opensocial-templates\"", "var_name": "TEMPLATES_FEATURE_NAME"}, {"original_string": "public static final String OSML_FEATURE_NAME = \"osml\";", "modifier": "public static final", "type": "String", "declarator": "OSML_FEATURE_NAME = \"osml\"", "var_name": "OSML_FEATURE_NAME"}, {"original_string": "static final String DISABLE_AUTO_PROCESSING_PARAM = \"disableAutoProcessing\";", "modifier": "static final", "type": "String", "declarator": "DISABLE_AUTO_PROCESSING_PARAM = \"disableAutoProcessing\"", "var_name": "DISABLE_AUTO_PROCESSING_PARAM"}, {"original_string": "static final String REQUIRE_LIBRARY_PARAM = \"requireLibrary\";", "modifier": "static final", "type": "String", "declarator": "REQUIRE_LIBRARY_PARAM = \"requireLibrary\"", "var_name": "REQUIRE_LIBRARY_PARAM"}, {"original_string": "static final String CLIENT_SUPPORT_PARAM = \"client\";", "modifier": "static final", "type": "String", "declarator": "CLIENT_SUPPORT_PARAM = \"client\"", "var_name": "CLIENT_SUPPORT_PARAM"}, {"original_string": "private static final Logger LOG = Logger.getLogger(TemplateRewriter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(TemplateRewriter.class.getName())", "var_name": "LOG"}, {"original_string": "private final Provider<TemplateProcessor> processor;", "modifier": "private final", "type": "Provider<TemplateProcessor>", "declarator": "processor", "var_name": "processor"}, {"original_string": "private final MessageBundleFactory messageBundleFactory;", "modifier": "private final", "type": "MessageBundleFactory", "declarator": "messageBundleFactory", "var_name": "messageBundleFactory"}, {"original_string": "private final Expressions expressions;", "modifier": "private final", "type": "Expressions", "declarator": "expressions", "var_name": "expressions"}, {"original_string": "private final TagRegistry baseTagRegistry;", "modifier": "private final", "type": "TagRegistry", "declarator": "baseTagRegistry", "var_name": "baseTagRegistry"}, {"original_string": "private final TemplateLibraryFactory libraryFactory;", "modifier": "private final", "type": "TemplateLibraryFactory", "declarator": "libraryFactory", "var_name": "libraryFactory"}, {"original_string": "private final ContainerTagLibraryFactory containerTags;", "modifier": "private final", "type": "ContainerTagLibraryFactory", "declarator": "containerTags", "var_name": "containerTags"}], "methods": [{"identifier": "TemplateRewriter", "parameters": "(Provider<TemplateProcessor> processor,\n      MessageBundleFactory messageBundleFactory, Expressions expressions, \n      TagRegistry baseTagRegistry, TemplateLibraryFactory libraryFactory,\n      ContainerTagLibraryFactory containerTags)", "modifiers": "@Inject public", "return": "", "signature": " TemplateRewriter(Provider<TemplateProcessor> processor,\n      MessageBundleFactory messageBundleFactory, Expressions expressions, \n      TagRegistry baseTagRegistry, TemplateLibraryFactory libraryFactory,\n      ContainerTagLibraryFactory containerTags)", "full_signature": "@Inject public  TemplateRewriter(Provider<TemplateProcessor> processor,\n      MessageBundleFactory messageBundleFactory, Expressions expressions, \n      TagRegistry baseTagRegistry, TemplateLibraryFactory libraryFactory,\n      ContainerTagLibraryFactory containerTags)", "class_method_signature": "TemplateRewriter.TemplateRewriter(Provider<TemplateProcessor> processor,\n      MessageBundleFactory messageBundleFactory, Expressions expressions, \n      TagRegistry baseTagRegistry, TemplateLibraryFactory libraryFactory,\n      ContainerTagLibraryFactory containerTags)", "testcase": false, "constructor": true}, {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent content)", "modifiers": "public", "return": "void", "signature": "void rewrite(Gadget gadget, MutableContent content)", "full_signature": "public void rewrite(Gadget gadget, MutableContent content)", "class_method_signature": "TemplateRewriter.rewrite(Gadget gadget, MutableContent content)", "testcase": false, "constructor": false}, {"identifier": "isServerTemplatingEnabled", "parameters": "(Feature feature)", "modifiers": "private", "return": "boolean", "signature": "boolean isServerTemplatingEnabled(Feature feature)", "full_signature": "private boolean isServerTemplatingEnabled(Feature feature)", "class_method_signature": "TemplateRewriter.isServerTemplatingEnabled(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "rewriteImpl", "parameters": "(Gadget gadget, Feature feature, MutableContent content)", "modifiers": "private", "return": "void", "signature": "void rewriteImpl(Gadget gadget, Feature feature, MutableContent content)", "full_signature": "private void rewriteImpl(Gadget gadget, Feature feature, MutableContent content)", "class_method_signature": "TemplateRewriter.rewriteImpl(Gadget gadget, Feature feature, MutableContent content)", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "(TemplateContext templateContext, boolean needsFeature, Element head,\n      List<Element> allTemplates, List<TemplateLibrary> libraries)", "modifiers": "private", "return": "void", "signature": "void postProcess(TemplateContext templateContext, boolean needsFeature, Element head,\n      List<Element> allTemplates, List<TemplateLibrary> libraries)", "full_signature": "private void postProcess(TemplateContext templateContext, boolean needsFeature, Element head,\n      List<Element> allTemplates, List<TemplateLibrary> libraries)", "class_method_signature": "TemplateRewriter.postProcess(TemplateContext templateContext, boolean needsFeature, Element head,\n      List<Element> allTemplates, List<TemplateLibrary> libraries)", "testcase": false, "constructor": false}, {"identifier": "loadTemplateLibraries", "parameters": "(GadgetContext context, Feature feature,\n      List<TagRegistry> registries, List<TemplateLibrary> libraries)", "modifiers": "private", "return": "void", "signature": "void loadTemplateLibraries(GadgetContext context, Feature feature,\n      List<TagRegistry> registries, List<TemplateLibrary> libraries)", "full_signature": "private void loadTemplateLibraries(GadgetContext context, Feature feature,\n      List<TagRegistry> registries, List<TemplateLibrary> libraries)", "class_method_signature": "TemplateRewriter.loadTemplateLibraries(GadgetContext context, Feature feature,\n      List<TagRegistry> registries, List<TemplateLibrary> libraries)", "testcase": false, "constructor": false}, {"identifier": "injectTemplateLibraryAssets", "parameters": "(TemplateResource resource, Element head)", "modifiers": "private", "return": "void", "signature": "void injectTemplateLibraryAssets(TemplateResource resource, Element head)", "full_signature": "private void injectTemplateLibraryAssets(TemplateResource resource, Element head)", "class_method_signature": "TemplateRewriter.injectTemplateLibraryAssets(TemplateResource resource, Element head)", "testcase": false, "constructor": false}, {"identifier": "injectTemplateLibrary", "parameters": "(TemplateLibrary library, Element head)", "modifiers": "private", "return": "void", "signature": "void injectTemplateLibrary(TemplateLibrary library, Element head)", "full_signature": "private void injectTemplateLibrary(TemplateLibrary library, Element head)", "class_method_signature": "TemplateRewriter.injectTemplateLibrary(TemplateLibrary library, Element head)", "testcase": false, "constructor": false}, {"identifier": "registerCustomTags", "parameters": "(List<Element> allTemplates)", "modifiers": "private", "return": "TagRegistry", "signature": "TagRegistry registerCustomTags(List<Element> allTemplates)", "full_signature": "private TagRegistry registerCustomTags(List<Element> allTemplates)", "class_method_signature": "TemplateRewriter.registerCustomTags(List<Element> allTemplates)", "testcase": false, "constructor": false}, {"identifier": "executeTemplates", "parameters": "(TemplateContext templateContext, MutableContent content,\n      List<Element> allTemplates, TagRegistry registry)", "modifiers": "private", "return": "boolean", "signature": "boolean executeTemplates(TemplateContext templateContext, MutableContent content,\n      List<Element> allTemplates, TagRegistry registry)", "full_signature": "private boolean executeTemplates(TemplateContext templateContext, MutableContent content,\n      List<Element> allTemplates, TagRegistry registry)", "class_method_signature": "TemplateRewriter.executeTemplates(TemplateContext templateContext, MutableContent content,\n      List<Element> allTemplates, TagRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "checkRequiredData", "parameters": "(String requiredData, Set<String> availableData)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkRequiredData(String requiredData, Set<String> availableData)", "full_signature": "private static boolean checkRequiredData(String requiredData, Set<String> availableData)", "class_method_signature": "TemplateRewriter.checkRequiredData(String requiredData, Set<String> availableData)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/TemplateRewriter.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent content)", "modifiers": "public", "return": "void", "body": "public void rewrite(Gadget gadget, MutableContent content) throws RewritingException {\n    Map<String, Feature> directFeatures = gadget.getSpec().getModulePrefs()\n        .getFeatures();\n\n    Feature feature = directFeatures.get(TEMPLATES_FEATURE_NAME);\n    if (feature == null && directFeatures.containsKey(OSML_FEATURE_NAME)) {\n      feature = directFeatures.get(OSML_FEATURE_NAME);\n    }\n    \n    if (feature != null && isServerTemplatingEnabled(feature)) {\n      try {\n        rewriteImpl(gadget, feature, content);\n      } catch (GadgetException ge) {\n        throw new RewritingException(ge, ge.getHttpStatusCode());\n      }\n    }\n  }", "signature": "void rewrite(Gadget gadget, MutableContent content)", "full_signature": "public void rewrite(Gadget gadget, MutableContent content)", "class_method_signature": "TemplateRewriter.rewrite(Gadget gadget, MutableContent content)", "testcase": false, "constructor": false, "invocations": ["getFeatures", "getModulePrefs", "getSpec", "get", "containsKey", "get", "isServerTemplatingEnabled", "rewriteImpl", "getHttpStatusCode"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}