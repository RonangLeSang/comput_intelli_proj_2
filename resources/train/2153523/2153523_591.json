{"test_class": {"identifier": "FlashTagHandlerTest", "superclass": "extends EasyMockTestCase", "interfaces": "", "fields": [{"original_string": "private MyTemplateProcessor processor;", "modifier": "private", "type": "MyTemplateProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private DOMImplementation documentProvider;", "modifier": "private", "type": "DOMImplementation", "declarator": "documentProvider", "var_name": "documentProvider"}, {"original_string": "private FlashTagHandler handler;", "modifier": "private", "type": "FlashTagHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private FeatureRegistry featureRegistry;", "modifier": "private", "type": "FeatureRegistry", "declarator": "featureRegistry", "var_name": "featureRegistry"}, {"original_string": "private GadgetContext gadgetContext = mock(GadgetContext.class);", "modifier": "private", "type": "GadgetContext", "declarator": "gadgetContext = mock(GadgetContext.class)", "var_name": "gadgetContext"}, {"original_string": "private Gadget gadget = mock(Gadget.class);", "modifier": "private", "type": "Gadget", "declarator": "gadget = mock(Gadget.class)", "var_name": "gadget"}, {"original_string": "private NekoSimplifiedHtmlParser parser;", "modifier": "private", "type": "NekoSimplifiedHtmlParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "protected Document result;", "modifier": "protected", "type": "Document", "declarator": "result", "var_name": "result"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/templates/tags/FlashTagHandlerTest.java"}, "test_case": {"identifier": "testConfigBindingFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConfigBindingFailure() throws Exception {\n    Document document = parser.parseDom(\n        \"<script type='text/os-template'>\"\n            + \"<osx:flash swf='http://www.example.org/test.swf' play='junk'>\"\n            + \"Click Me\"\n          + \"</osx:flash></script>\");\n    Element tag = DomUtil.getElementsByTagNameCaseInsensitive(document, ImmutableSet.of(\"osx:flash\"))\n        .get(0);\n    handler.process(result.getDocumentElement().getFirstChild().getNextSibling(), tag, processor);\n    XPathWrapper wrapper = new XPathWrapper(result);\n    assertTrue(wrapper.getValue(\"/html/body/span\").startsWith(\"Failed to process os:Flash tag\"));\n  }", "signature": "void testConfigBindingFailure()", "full_signature": "@Test public void testConfigBindingFailure()", "class_method_signature": "FlashTagHandlerTest.testConfigBindingFailure()", "testcase": true, "constructor": false, "invocations": ["parseDom", "get", "getElementsByTagNameCaseInsensitive", "of", "process", "getNextSibling", "getFirstChild", "getDocumentElement", "assertTrue", "startsWith", "getValue"]}, "focal_class": {"identifier": "FlashTagHandler", "superclass": "extends AbstractTagHandler", "interfaces": "", "fields": [{"original_string": "static final String SWFOBJECT = \"swfobject\";", "modifier": "static final", "type": "String", "declarator": "SWFOBJECT = \"swfobject\"", "var_name": "SWFOBJECT"}, {"original_string": "static final String TAG_NAME = \"Flash\";", "modifier": "static final", "type": "String", "declarator": "TAG_NAME = \"Flash\"", "var_name": "TAG_NAME"}, {"original_string": "private final BeanJsonConverter beanConverter;", "modifier": "private final", "type": "BeanJsonConverter", "declarator": "beanConverter", "var_name": "beanConverter"}, {"original_string": "private final FeatureRegistry featureRegistry;", "modifier": "private final", "type": "FeatureRegistry", "declarator": "featureRegistry", "var_name": "featureRegistry"}, {"original_string": "private final String flashMinVersion;", "modifier": "private final", "type": "String", "declarator": "flashMinVersion", "var_name": "flashMinVersion"}, {"original_string": "final AtomicLong idGenerator = new AtomicLong();", "modifier": "final", "type": "AtomicLong", "declarator": "idGenerator = new AtomicLong()", "var_name": "idGenerator"}, {"original_string": "private static final String ALT_CONTENT_PREFIX = \"os_xFlash_alt_\";", "modifier": "private static final", "type": "String", "declarator": "ALT_CONTENT_PREFIX = \"os_xFlash_alt_\"", "var_name": "ALT_CONTENT_PREFIX"}], "methods": [{"identifier": "FlashTagHandler", "parameters": "(BeanJsonConverter beanConverter, FeatureRegistry featureRegistry,\n      @Named(\"shindig.template-rewrite.extension-tag-namespace\") String namespace,\n      @Named(\"shindig.flash.min-version\") String flashMinVersion)", "modifiers": "@Inject public", "return": "", "signature": " FlashTagHandler(BeanJsonConverter beanConverter, FeatureRegistry featureRegistry,\n      @Named(\"shindig.template-rewrite.extension-tag-namespace\") String namespace,\n      @Named(\"shindig.flash.min-version\") String flashMinVersion)", "full_signature": "@Inject public  FlashTagHandler(BeanJsonConverter beanConverter, FeatureRegistry featureRegistry,\n      @Named(\"shindig.template-rewrite.extension-tag-namespace\") String namespace,\n      @Named(\"shindig.flash.min-version\") String flashMinVersion)", "class_method_signature": "FlashTagHandler.FlashTagHandler(BeanJsonConverter beanConverter, FeatureRegistry featureRegistry,\n      @Named(\"shindig.template-rewrite.extension-tag-namespace\") String namespace,\n      @Named(\"shindig.flash.min-version\") String flashMinVersion)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(Node result, Element tag, TemplateProcessor processor)", "modifiers": "public", "return": "void", "signature": "void process(Node result, Element tag, TemplateProcessor processor)", "full_signature": "public void process(Node result, Element tag, TemplateProcessor processor)", "class_method_signature": "FlashTagHandler.process(Node result, Element tag, TemplateProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "buildSwfObjectCall", "parameters": "(SwfObjectConfig config, String altContentId)", "modifiers": "", "return": "String", "signature": "String buildSwfObjectCall(SwfObjectConfig config, String altContentId)", "full_signature": " String buildSwfObjectCall(SwfObjectConfig config, String altContentId)", "class_method_signature": "FlashTagHandler.buildSwfObjectCall(SwfObjectConfig config, String altContentId)", "testcase": false, "constructor": false}, {"identifier": "getSwfConfig", "parameters": "(Element tag, TemplateProcessor processor)", "modifiers": "", "return": "SwfObjectConfig", "signature": "SwfObjectConfig getSwfConfig(Element tag, TemplateProcessor processor)", "full_signature": " SwfObjectConfig getSwfConfig(Element tag, TemplateProcessor processor)", "class_method_signature": "FlashTagHandler.getSwfConfig(Element tag, TemplateProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "getAllAttributesLowerCase", "parameters": "(Element tag, TemplateProcessor processor)", "modifiers": "", "return": "Map<String, String>", "signature": "Map<String, String> getAllAttributesLowerCase(Element tag, TemplateProcessor processor)", "full_signature": " Map<String, String> getAllAttributesLowerCase(Element tag, TemplateProcessor processor)", "class_method_signature": "FlashTagHandler.getAllAttributesLowerCase(Element tag, TemplateProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "ensureSwfobject", "parameters": "(Document doc, TemplateProcessor processor)", "modifiers": "", "return": "void", "signature": "void ensureSwfobject(Document doc, TemplateProcessor processor)", "full_signature": " void ensureSwfobject(Document doc, TemplateProcessor processor)", "class_method_signature": "FlashTagHandler.ensureSwfobject(Document doc, TemplateProcessor processor)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/templates/tags/FlashTagHandler.java"}, "focal_method": {"identifier": "process", "parameters": "(Node result, Element tag, TemplateProcessor processor)", "modifiers": "public", "return": "void", "body": "public void process(Node result, Element tag, TemplateProcessor processor) {\n    SwfObjectConfig config;\n    try {\n      config = getSwfConfig(tag, processor);\n    } catch (RuntimeException re) {\n      // Record the processing error into the output\n      Element err = result.getOwnerDocument().createElement(\"span\");\n      err.setTextContent(\"Failed to process os:Flash tag: \" +\n          StringEscapeUtils.escapeHtml(re.getMessage()));\n      result.appendChild(err);\n      return;\n    }\n\n    // Bind the security token to the flashvars if its available\n    String st = processor.getTemplateContext().getGadget()\n        .getContext().getParameter(\"st\");\n    if (!StringUtils.isEmpty(st)) {\n      String stVar = \"st=\" + Utf8UrlCoder.encode(st);\n      if (StringUtils.isEmpty(config.flashvars)) {\n        config.flashvars = stVar;\n      } else {\n        config.flashvars += '&' + stVar;\n      }\n    }\n\n    // Restrict the content if sanitization is enabled\n    if (processor.getTemplateContext().getGadget().sanitizeOutput()) {\n      config.allowscriptaccess = SwfObjectConfig.ScriptAccess.never;\n      config.swliveconnect = false;\n      config.allownetworking = SwfObjectConfig.NetworkAccess.internal;\n      // TODO - Implement container control over autoplay on views\n    }\n\n    // Create a div wrapper around the provided alternate content\n    Element altHolder = result.getOwnerDocument().createElement(\"div\");\n    String altContentId = ALT_CONTENT_PREFIX + idGenerator.incrementAndGet();\n    altHolder.setAttribute(\"id\", altContentId);\n    result.appendChild(altHolder);\n\n    // Add the alternate content to the holder\n    NodeList alternateContent = tag.getChildNodes();\n    if (alternateContent.getLength() > 0) {\n      processor.processChildNodes(altHolder, tag);\n    }\n\n    // Create the call to swfobject\n    String swfObjectCall = buildSwfObjectCall(config, altContentId);\n    Element script = result.getOwnerDocument().createElement(\"script\");\n    script.setAttribute(\"type\", \"text/javascript\");\n    result.appendChild(script);\n\n    if (config.play == SwfObjectConfig.Play.immediate) {\n      // Call swfobject immediately\n      script.setTextContent(swfObjectCall);\n    } else {\n      // Add onclick handler to trigger call to swfobject\n      script.setTextContent(\"function \" + altContentId + \"(){ \" + swfObjectCall + \" }\");\n      altHolder.setAttribute(\"onclick\", altContentId + \"()\");\n    }\n\n    // Bypass sanitization for the holder tag and the call to swfobject\n    SanitizingGadgetRewriter.bypassSanitization(altHolder, false);\n    SanitizingGadgetRewriter.bypassSanitization(script, false);\n    ensureSwfobject(result.getOwnerDocument(), processor);\n  }", "signature": "void process(Node result, Element tag, TemplateProcessor processor)", "full_signature": "public void process(Node result, Element tag, TemplateProcessor processor)", "class_method_signature": "FlashTagHandler.process(Node result, Element tag, TemplateProcessor processor)", "testcase": false, "constructor": false, "invocations": ["getSwfConfig", "createElement", "getOwnerDocument", "setTextContent", "escapeHtml", "getMessage", "appendChild", "getParameter", "getContext", "getGadget", "getTemplateContext", "isEmpty", "encode", "isEmpty", "sanitizeOutput", "getGadget", "getTemplateContext", "createElement", "getOwnerDocument", "incrementAndGet", "setAttribute", "appendChild", "getChildNodes", "getLength", "processChildNodes", "buildSwfObjectCall", "createElement", "getOwnerDocument", "setAttribute", "appendChild", "setTextContent", "setTextContent", "setAttribute", "bypassSanitization", "bypassSanitization", "ensureSwfobject", "getOwnerDocument"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}