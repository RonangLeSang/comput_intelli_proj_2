{"test_class": {"identifier": "OAuthServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Uri SPEC_URL = Uri.parse(\"http://example.org/g.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "SPEC_URL = Uri.parse(\"http://example.org/g.xml\")", "var_name": "SPEC_URL"}, {"original_string": "private OAuthService service;", "modifier": "private", "type": "OAuthService", "declarator": "service", "var_name": "service"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/spec/OAuthServiceTest.java"}, "test_case": {"identifier": "testParseAuthorizeUrl_notHttp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParseAuthorizeUrl_notHttp() throws Exception {\n    OAuthService service = new OAuthService();\n    String xml = \"<Authorization url='ftp://www.example.com'/>\";\n    try {\n      service.parseAuthorizationUrl(XmlUtil.parse(xml), SPEC_URL);\n      fail(\"Should have rejected malformed Authorization element\");\n    } catch (SpecParserException e) {\n      assertEquals(\"OAuth/Service/Authorization @url is not valid: ftp://www.example.com\", e.getMessage());\n    }\n  }", "signature": "void testParseAuthorizeUrl_notHttp()", "full_signature": "@Test public void testParseAuthorizeUrl_notHttp()", "class_method_signature": "OAuthServiceTest.testParseAuthorizeUrl_notHttp()", "testcase": true, "constructor": false, "invocations": ["parseAuthorizationUrl", "parse", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "OAuthService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EndPoint requestUrl;", "modifier": "private", "type": "EndPoint", "declarator": "requestUrl", "var_name": "requestUrl"}, {"original_string": "private EndPoint accessUrl;", "modifier": "private", "type": "EndPoint", "declarator": "accessUrl", "var_name": "accessUrl"}, {"original_string": "private Uri authorizationUrl;", "modifier": "private", "type": "Uri", "declarator": "authorizationUrl", "var_name": "authorizationUrl"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private static final String URL_ATTR = \"url\";", "modifier": "private static final", "type": "String", "declarator": "URL_ATTR = \"url\"", "var_name": "URL_ATTR"}, {"original_string": "private static final String PARAM_LOCATION_ATTR = \"param_location\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_LOCATION_ATTR = \"param_location\"", "var_name": "PARAM_LOCATION_ATTR"}, {"original_string": "private static final String METHOD_ATTR = \"method\";", "modifier": "private static final", "type": "String", "declarator": "METHOD_ATTR = \"method\"", "var_name": "METHOD_ATTR"}], "methods": [{"identifier": "OAuthService", "parameters": "()", "modifiers": "", "return": "", "signature": " OAuthService()", "full_signature": "  OAuthService()", "class_method_signature": "OAuthService.OAuthService()", "testcase": false, "constructor": true}, {"identifier": "OAuthService", "parameters": "(Element serviceElement, Uri base)", "modifiers": "public", "return": "", "signature": " OAuthService(Element serviceElement, Uri base)", "full_signature": "public  OAuthService(Element serviceElement, Uri base)", "class_method_signature": "OAuthService.OAuthService(Element serviceElement, Uri base)", "testcase": false, "constructor": true}, {"identifier": "getRequestUrl", "parameters": "()", "modifiers": "public", "return": "EndPoint", "signature": "EndPoint getRequestUrl()", "full_signature": "public EndPoint getRequestUrl()", "class_method_signature": "OAuthService.getRequestUrl()", "testcase": false, "constructor": false}, {"identifier": "getAccessUrl", "parameters": "()", "modifiers": "public", "return": "EndPoint", "signature": "EndPoint getAccessUrl()", "full_signature": "public EndPoint getAccessUrl()", "class_method_signature": "OAuthService.getAccessUrl()", "testcase": false, "constructor": false}, {"identifier": "getAuthorizationUrl", "parameters": "()", "modifiers": "public", "return": "Uri", "signature": "Uri getAuthorizationUrl()", "full_signature": "public Uri getAuthorizationUrl()", "class_method_signature": "OAuthService.getAuthorizationUrl()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "OAuthService.getName()", "testcase": false, "constructor": false}, {"identifier": "parseAuthorizationUrl", "parameters": "(Element child, Uri base)", "modifiers": "", "return": "Uri", "signature": "Uri parseAuthorizationUrl(Element child, Uri base)", "full_signature": " Uri parseAuthorizationUrl(Element child, Uri base)", "class_method_signature": "OAuthService.parseAuthorizationUrl(Element child, Uri base)", "testcase": false, "constructor": false}, {"identifier": "parseEndPoint", "parameters": "(String where, Element child, Uri base)", "modifiers": "", "return": "EndPoint", "signature": "EndPoint parseEndPoint(String where, Element child, Uri base)", "full_signature": " EndPoint parseEndPoint(String where, Element child, Uri base)", "class_method_signature": "OAuthService.parseEndPoint(String where, Element child, Uri base)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/spec/OAuthService.java"}, "focal_method": {"identifier": "parseAuthorizationUrl", "parameters": "(Element child, Uri base)", "modifiers": "", "return": "Uri", "body": "Uri parseAuthorizationUrl(Element child, Uri base) throws SpecParserException {\n    Uri url = XmlUtil.getHttpUriAttribute(child, URL_ATTR, base);\n    if (url == null) {\n      throw new SpecParserException(\"OAuth/Service/Authorization @url is not valid: \" +\n          child.getAttribute(URL_ATTR));\n    }\n    return base.resolve(url);\n  }", "signature": "Uri parseAuthorizationUrl(Element child, Uri base)", "full_signature": " Uri parseAuthorizationUrl(Element child, Uri base)", "class_method_signature": "OAuthService.parseAuthorizationUrl(Element child, Uri base)", "testcase": false, "constructor": false, "invocations": ["getHttpUriAttribute", "getAttribute", "resolve"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}