{"test_class": {"identifier": "BaseTagRemoverRewriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BaseTagRemoverRewriter rewriter;", "modifier": "", "type": "BaseTagRemoverRewriter", "declarator": "rewriter", "var_name": "rewriter"}, {"original_string": "CajaHtmlParser parser;", "modifier": "", "type": "CajaHtmlParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "ParseModule.DOMImplementationProvider domImpl;", "modifier": "", "type": "ParseModule.DOMImplementationProvider", "declarator": "domImpl", "var_name": "domImpl"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/BaseTagRemoverRewriterTest.java"}, "test_case": {"identifier": "testContentTypeXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testContentTypeXml() throws Exception {\n    String content = \"Hello world. My name is gagan<html><head>\"\n                     + \"<base href='http://hello.com/'></head><body>\"\n                     + \"<img src='/img1.png'>\"\n                     + \"</body></html>\";\n    String expected = \"Hello world. My name is gagan<html><head>\"\n                     + \"<base href='http://hello.com/'></head><body>\"\n                     + \"<img src='/img1.png'>\"\n                     + \"</body></html>\";\n\n    HttpRequest req = new HttpRequest(Uri.parse(\"http://www.google.com/\"));\n    HttpResponse resp = new HttpResponseBuilder()\n        .setHttpStatusCode(200)\n        .setHeader(\"Content-Type\", \"text/xml\")\n        .setResponse(content.getBytes())\n        .create();\n    HttpResponseBuilder builder = new HttpResponseBuilder(parser, resp);\n\n    rewriter.rewrite(req, builder);\n\n    assertEquals(StringUtils.deleteWhitespace(expected),\n                 StringUtils.deleteWhitespace(builder.getContent()));\n  }", "signature": "void testContentTypeXml()", "full_signature": "@Test public void testContentTypeXml()", "class_method_signature": "BaseTagRemoverRewriterTest.testContentTypeXml()", "testcase": true, "constructor": false, "invocations": ["parse", "create", "setResponse", "setHeader", "setHttpStatusCode", "getBytes", "rewrite", "assertEquals", "deleteWhitespace", "deleteWhitespace", "getContent"]}, "focal_class": {"identifier": "BaseTagRemoverRewriter", "superclass": "", "interfaces": "implements GadgetRewriter, ResponseRewriter", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(BaseTagRemoverRewriter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(BaseTagRemoverRewriter.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent mc)", "modifiers": "public", "return": "void", "signature": "void rewrite(Gadget gadget, MutableContent mc)", "full_signature": "public void rewrite(Gadget gadget, MutableContent mc)", "class_method_signature": "BaseTagRemoverRewriter.rewrite(Gadget gadget, MutableContent mc)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(HttpRequest request, HttpResponseBuilder response)", "modifiers": "public", "return": "void", "signature": "void rewrite(HttpRequest request, HttpResponseBuilder response)", "full_signature": "public void rewrite(HttpRequest request, HttpResponseBuilder response)", "class_method_signature": "BaseTagRemoverRewriter.rewrite(HttpRequest request, HttpResponseBuilder response)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/BaseTagRemoverRewriter.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent mc)", "modifiers": "public", "return": "void", "body": "public void rewrite(Gadget gadget, MutableContent mc) {\n    Document doc = mc.getDocument();\n\n    NodeList list = doc.getElementsByTagName(\"base\");\n    for (int i = 0; i < list.getLength(); i++) {\n      Element baseElement = (Element) list.item(i);\n      baseElement.getParentNode().removeChild(baseElement);\n\n      if (baseElement.hasAttribute(\"href\") && logger.isLoggable(Level.FINE)) {\n        logger.fine(\"Removing base tag pointing to: \"\n                    + baseElement.getAttribute(\"href\") + \" for gadget: \"\n                    + gadget.getContext().getUrl().toString());\n      }\n    }\n\n    mc.documentChanged();\n  }", "signature": "void rewrite(Gadget gadget, MutableContent mc)", "full_signature": "public void rewrite(Gadget gadget, MutableContent mc)", "class_method_signature": "BaseTagRemoverRewriter.rewrite(Gadget gadget, MutableContent mc)", "testcase": false, "constructor": false, "invocations": ["getDocument", "getElementsByTagName", "getLength", "item", "removeChild", "getParentNode", "hasAttribute", "isLoggable", "fine", "getAttribute", "toString", "getUrl", "getContext", "documentChanged"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}