{"test_class": {"identifier": "BeanXmlConverterTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private Model.Car car;", "modifier": "private", "type": "Model.Car", "declarator": "car", "var_name": "car"}, {"original_string": "private BeanXmlConverter beanXmlConverter;", "modifier": "private", "type": "BeanXmlConverter", "declarator": "beanXmlConverter", "var_name": "beanXmlConverter"}], "file": "java/common/src/test/java/org/apache/shindig/protocol/conversion/BeanXmlConverterTest.java"}, "test_case": {"identifier": "testMapsToXml", "parameters": "()", "modifiers": "@Test //@Ignore(\"unknown why this is disabled\") public", "return": "void", "body": "@Test\n  //@Ignore(\"unknown why this is disabled\")\n  public void testMapsToXml() throws Exception {\n    // This is the structure our app data currently takes\n    Map<String, Map<String, String>> map = Maps.newTreeMap();\n    Map<String, String> item1Map = ImmutableMap.of(\"value\",\"1\");\n    map.put(\"item1\", item1Map);\n\n    Map<String, String> item2Map = ImmutableMap.of(\"value\", \"2\");\n    map.put(\"item2\", item2Map);\n\n    String xml = beanXmlConverter.convertToXml(map);\n\n    // TODO: Change this test to use parsing once we have the right format\n    XmlUtil.parse(xml);\n\n    // TODO: I don't believe this is the output we are looking for for app\n    // data... we will probably have to tweak this.\n    String expectedXml =\n        \"<response>\" +\n        \"<empty>false</empty>\" +\n        \"<entry>\" +\n          \"<key>item1</key>\" +\n          \"<value>\" +\n            \"<empty>false</empty>\" +\n            \"<entry>\" +\n              \"<key>value</key>\" +\n              \"<value>1</value>\" +\n            \"</entry>\" +\n          \"</value>\" +\n        \"</entry>\" +\n        \"<entry>\" +\n          \"<key>item2</key>\" +\n          \"<value>\" +\n            \"<empty>false</empty>\" +\n            \"<entry>\" +\n              \"<key>value</key>\" +\n              \"<value>2</value>\" +\n            \"</entry>\" +\n          \"</value>\" +\n        \"</entry>\" +\n        \"</response>\";\n    assertEquals(expectedXml, StringUtils.deleteWhitespace(xml));\n  }", "signature": "void testMapsToXml()", "full_signature": "@Test //@Ignore(\"unknown why this is disabled\") public void testMapsToXml()", "class_method_signature": "BeanXmlConverterTest.testMapsToXml()", "testcase": true, "constructor": false, "invocations": ["newTreeMap", "of", "put", "of", "put", "convertToXml", "parse", "assertEquals", "deleteWhitespace"]}, "focal_class": {"identifier": "BeanXmlConverter", "superclass": "", "interfaces": "implements BeanConverter", "fields": [{"original_string": "private static final Logger LOG =\n      Logger.getLogger(BeanXmlConverter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      Logger.getLogger(BeanXmlConverter.class.getName())", "var_name": "LOG"}], "methods": [{"identifier": "getContentType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContentType()", "full_signature": "public String getContentType()", "class_method_signature": "BeanXmlConverter.getContentType()", "testcase": false, "constructor": false}, {"identifier": "convertToString", "parameters": "(Object pojo)", "modifiers": "public", "return": "String", "signature": "String convertToString(Object pojo)", "full_signature": "public String convertToString(Object pojo)", "class_method_signature": "BeanXmlConverter.convertToString(Object pojo)", "testcase": false, "constructor": false}, {"identifier": "convertToXml", "parameters": "(Object obj)", "modifiers": "public", "return": "String", "signature": "String convertToXml(Object obj)", "full_signature": "public String convertToXml(Object obj)", "class_method_signature": "BeanXmlConverter.convertToXml(Object obj)", "testcase": false, "constructor": false}, {"identifier": "convertToObject", "parameters": "(String xml, Class<T> className)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T convertToObject(String xml, Class<T> className)", "full_signature": "@SuppressWarnings(\"unchecked\") public T convertToObject(String xml, Class<T> className)", "class_method_signature": "BeanXmlConverter.convertToObject(String xml, Class<T> className)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Appendable buf, Object pojo)", "modifiers": "public", "return": "void", "signature": "void append(Appendable buf, Object pojo)", "full_signature": "public void append(Appendable buf, Object pojo)", "class_method_signature": "BeanXmlConverter.append(Appendable buf, Object pojo)", "testcase": false, "constructor": false}], "file": "java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanXmlConverter.java"}, "focal_method": {"identifier": "convertToXml", "parameters": "(Object obj)", "modifiers": "public", "return": "String", "body": "public String convertToXml(Object obj) {\n    StringWriter outputWriter = new StringWriter();\n    BeanWriter writer = new BeanWriter(outputWriter);\n    IntrospectionConfiguration configuration = writer.getXMLIntrospector().getConfiguration();\n    configuration.setAttributesForPrimitives(false);\n    configuration.setWrapCollectionsInElement(true);\n\n    writer.getBindingConfiguration().setMapIDs(false);\n    // Print no line endings\n    writer.setEndOfLine(\"\");\n    writer.setWriteEmptyElements(false);\n\n    // Still left to do:\n    //\n    // Fix map output with custom outputter:\n    // for a map with {key : value, key2 : value2} we need:\n    // <key>value</key> <key2>value2</key2>\n\n    // Supress empty lists\n\n    // Within a list the items need to be renamed - this probably means with need a .betwixt file\n\n    String toReturn = null;\n    try {\n      writer.write(\"response\", obj);\n      toReturn = outputWriter.toString();\n      if (LOG.isLoggable(Level.FINEST)) LOG.finest(\"XML is: \" + toReturn + \"\\n **** \\n\\n\");\n\n    } catch (SAXException e) {\n      LOG.log(Level.SEVERE, e.getMessage(), e);\n    } catch (IOException e) {\n      LOG.log(Level.SEVERE, e.getMessage(), e);\n    } catch (IntrospectionException e) {\n      LOG.log(Level.SEVERE, e.getMessage(), e);\n    } finally {\n      try {\n        writer.close();\n      } catch (IOException e) {\n        if (LOG.isLoggable(Level.FINEST)) LOG.log(Level.FINEST, e.getMessage(), e);\n      }\n    }\n\n    return toReturn;\n  }", "signature": "String convertToXml(Object obj)", "full_signature": "public String convertToXml(Object obj)", "class_method_signature": "BeanXmlConverter.convertToXml(Object obj)", "testcase": false, "constructor": false, "invocations": ["getConfiguration", "getXMLIntrospector", "setAttributesForPrimitives", "setWrapCollectionsInElement", "setMapIDs", "getBindingConfiguration", "setEndOfLine", "setWriteEmptyElements", "write", "toString", "isLoggable", "finest", "log", "getMessage", "log", "getMessage", "log", "getMessage", "close", "isLoggable", "log", "getMessage"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}