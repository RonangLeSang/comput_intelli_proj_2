{"test_class": {"identifier": "PersonHandlerTest", "superclass": "extends EasyMockTestCase", "interfaces": "", "fields": [{"original_string": "private PersonService personService;", "modifier": "private", "type": "PersonService", "declarator": "personService", "var_name": "personService"}, {"original_string": "private PersonHandler handler;", "modifier": "private", "type": "PersonHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private FakeGadgetToken token;", "modifier": "private", "type": "FakeGadgetToken", "declarator": "token", "var_name": "token"}, {"original_string": "protected HandlerRegistry registry;", "modifier": "protected", "type": "HandlerRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private BeanJsonConverter converter;", "modifier": "private", "type": "BeanJsonConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private static final Set<String> DEFAULT_FIELDS = ImmutableSet.of(Person.Field.ID.toString(),\n      Person.Field.NAME.toString(),\n      Person.Field.THUMBNAIL_URL.toString());", "modifier": "private static final", "type": "Set<String>", "declarator": "DEFAULT_FIELDS = ImmutableSet.of(Person.Field.ID.toString(),\n      Person.Field.NAME.toString(),\n      Person.Field.THUMBNAIL_URL.toString())", "var_name": "DEFAULT_FIELDS"}, {"original_string": "private static final Set<UserId> JOHN_DOE = \n      ImmutableSet.of(new UserId(UserId.Type.userId, \"john.doe\"));", "modifier": "private static final", "type": "Set<UserId>", "declarator": "JOHN_DOE = \n      ImmutableSet.of(new UserId(UserId.Type.userId, \"john.doe\"))", "var_name": "JOHN_DOE"}, {"original_string": "private static CollectionOptions DEFAULT_OPTIONS = new CollectionOptions();", "modifier": "private static", "type": "CollectionOptions", "declarator": "DEFAULT_OPTIONS = new CollectionOptions()", "var_name": "DEFAULT_OPTIONS"}, {"original_string": "protected ContainerConfig containerConfig;", "modifier": "protected", "type": "ContainerConfig", "declarator": "containerConfig", "var_name": "containerConfig"}], "file": "java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/PersonHandlerTest.java"}, "test_case": {"identifier": "testHandleGetAllNoParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHandleGetAllNoParams() throws Exception {\n    String path = \"/people/john.doe/@all\";\n    RestHandler operation = registry.getRestHandler(path, \"GET\");\n\n    List<Person> personList = ImmutableList.of();\n    RestfulCollection<Person> data = new RestfulCollection<Person>(personList);\n\n    expect(personService.getPeople(\n        eq(JOHN_DOE),\n        eq(new GroupId(GroupId.Type.all, null)),\n        eq(DEFAULT_OPTIONS),\n        eq(DEFAULT_FIELDS),\n        eq(token)))\n        .andReturn(ImmediateFuture.newInstance(data));\n\n    replay();\n    assertEquals(data, operation.execute(Maps.<String, String[]>newHashMap(), null,\n        token, converter).get());\n    verify();\n  }", "signature": "void testHandleGetAllNoParams()", "full_signature": "@Test public void testHandleGetAllNoParams()", "class_method_signature": "PersonHandlerTest.testHandleGetAllNoParams()", "testcase": true, "constructor": false, "invocations": ["getRestHandler", "of", "andReturn", "expect", "getPeople", "eq", "eq", "eq", "eq", "eq", "newInstance", "replay", "assertEquals", "get", "execute", "newHashMap", "verify"]}, "focal_class": {"identifier": "PersonHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PersonService personService;", "modifier": "private final", "type": "PersonService", "declarator": "personService", "var_name": "personService"}, {"original_string": "private final ContainerConfig config;", "modifier": "private final", "type": "ContainerConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "PersonHandler", "parameters": "(PersonService personService, ContainerConfig config)", "modifiers": "@Inject public", "return": "", "signature": " PersonHandler(PersonService personService, ContainerConfig config)", "full_signature": "@Inject public  PersonHandler(PersonService personService, ContainerConfig config)", "class_method_signature": "PersonHandler.PersonHandler(PersonService personService, ContainerConfig config)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(SocialRequestItem request)", "modifiers": "@Operation(httpMethods = \"GET\") public", "return": "Future<?>", "signature": "Future<?> get(SocialRequestItem request)", "full_signature": "@Operation(httpMethods = \"GET\") public Future<?> get(SocialRequestItem request)", "class_method_signature": "PersonHandler.get(SocialRequestItem request)", "testcase": false, "constructor": false}, {"identifier": "supportedFields", "parameters": "(RequestItem request)", "modifiers": "@Operation(httpMethods = \"GET\", path=\"/@supportedFields\") public", "return": "List<Object>", "signature": "List<Object> supportedFields(RequestItem request)", "full_signature": "@Operation(httpMethods = \"GET\", path=\"/@supportedFields\") public List<Object> supportedFields(RequestItem request)", "class_method_signature": "PersonHandler.supportedFields(RequestItem request)", "testcase": false, "constructor": false}], "file": "java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/PersonHandler.java"}, "focal_method": {"identifier": "get", "parameters": "(SocialRequestItem request)", "modifiers": "@Operation(httpMethods = \"GET\") public", "return": "Future<?>", "body": "@Operation(httpMethods = \"GET\")\n  public Future<?> get(SocialRequestItem request) throws ProtocolException {\n    GroupId groupId = request.getGroup();\n    Set<String> optionalPersonId = ImmutableSet.copyOf(request.getListParameter(\"personId\"));\n    Set<String> fields = request.getFields(Person.Field.DEFAULT_FIELDS);\n    Set<UserId> userIds = request.getUsers();\n\n    // Preconditions\n    HandlerPreconditions.requireNotEmpty(userIds, \"No userId specified\");\n    if (userIds.size() > 1 && !optionalPersonId.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot fetch personIds for multiple userIds\");\n    }\n\n    CollectionOptions options = new CollectionOptions(request);\n\n    if (userIds.size() == 1) {\n      if (optionalPersonId.isEmpty()) {\n        if (groupId.getType() == GroupId.Type.self) {\n            // If a filter is set then we have to call getPeople(), otherwise use the simpler getPerson()\n          if (options.getFilter() != null) {\n            Future<RestfulCollection<Person>> people = personService.getPeople(\n                userIds, groupId, options, fields, request.getToken());\n            return FutureUtil.getFirstFromCollection(people);\n          } else {\n            return personService.getPerson(userIds.iterator().next(), fields, request.getToken());\n          }\n        } else {\n          return personService.getPeople(userIds, groupId, options, fields, request.getToken());\n        }\n      } else if (optionalPersonId.size() == 1) {\n        // TODO: Add some crazy concept to handle the userId?\n        Set<UserId> optionalUserIds = ImmutableSet.of(\n            new UserId(UserId.Type.userId, optionalPersonId.iterator().next()));\n\n        Future<RestfulCollection<Person>> people = personService.getPeople(\n            optionalUserIds, new GroupId(GroupId.Type.self, null),\n            options, fields, request.getToken());\n        return FutureUtil.getFirstFromCollection(people);\n      } else {\n        ImmutableSet.Builder<UserId> personIds = ImmutableSet.builder();\n        for (String pid : optionalPersonId) {\n          personIds.add(new UserId(UserId.Type.userId, pid));\n        }\n        // Every other case is a collection response of optional person ids\n        return personService.getPeople(personIds.build(), new GroupId(GroupId.Type.self, null),\n            options, fields, request.getToken());\n      }\n    }\n\n    // Every other case is a collection response.\n    return personService.getPeople(userIds, groupId, options, fields, request.getToken());\n  }", "signature": "Future<?> get(SocialRequestItem request)", "full_signature": "@Operation(httpMethods = \"GET\") public Future<?> get(SocialRequestItem request)", "class_method_signature": "PersonHandler.get(SocialRequestItem request)", "testcase": false, "constructor": false, "invocations": ["getGroup", "copyOf", "getListParameter", "getFields", "getUsers", "requireNotEmpty", "size", "isEmpty", "size", "isEmpty", "getType", "getFilter", "getPeople", "getToken", "getFirstFromCollection", "getPerson", "next", "iterator", "getToken", "getPeople", "getToken", "size", "of", "next", "iterator", "getPeople", "getToken", "getFirstFromCollection", "builder", "add", "getPeople", "build", "getToken", "getPeople", "getToken"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}