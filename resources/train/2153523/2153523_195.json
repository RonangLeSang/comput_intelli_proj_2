{"test_class": {"identifier": "DefaultJsUriManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONTAINER = \"container\";", "modifier": "private static final", "type": "String", "declarator": "CONTAINER = \"container\"", "var_name": "CONTAINER"}, {"original_string": "private static final Uri GADGET_URI = Uri.parse(\"http://example.com/gadget.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "GADGET_URI = Uri.parse(\"http://example.com/gadget.xml\")", "var_name": "GADGET_URI"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultJsUriManagerTest.java"}, "test_case": {"identifier": "processPathPrefixMismatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void processPathPrefixMismatch() throws GadgetException {\n    String targetHost = \"target-host.org\";\n    ContainerConfig config = mockConfig(\"http://\" + targetHost, \"/gadgets/js\");\n    TestDefaultJsUriManager manager = makeManager(config, null);\n    Uri testUri = Uri.parse(\"http://target-host.org/gadgets/other-js/feature\" + JS_SUFFIX + '?' +\n        Param.CONTAINER.getKey() + '=' + CONTAINER);\n    JsUri jsUri = manager.processExternJsUri(testUri);\n    assertTrue(manager.hadError());\n    assertEquals(jsUri.getStatus(), UriStatus.BAD_URI);\n    assertSame(DefaultJsUriManager.INVALID_URI, jsUri);\n  }", "signature": "void processPathPrefixMismatch()", "full_signature": "@Test public void processPathPrefixMismatch()", "class_method_signature": "DefaultJsUriManagerTest.processPathPrefixMismatch()", "testcase": true, "constructor": false, "invocations": ["mockConfig", "makeManager", "parse", "getKey", "processExternJsUri", "assertTrue", "hadError", "assertEquals", "getStatus", "assertSame"]}, "focal_class": {"identifier": "DefaultJsUriManager", "superclass": "", "interfaces": "implements JsUriManager", "fields": [{"original_string": "static final String JS_HOST_PARAM = \"gadgets.uri.js.host\";", "modifier": "static final", "type": "String", "declarator": "JS_HOST_PARAM = \"gadgets.uri.js.host\"", "var_name": "JS_HOST_PARAM"}, {"original_string": "static final String JS_PATH_PARAM = \"gadgets.uri.js.path\";", "modifier": "static final", "type": "String", "declarator": "JS_PATH_PARAM = \"gadgets.uri.js.path\"", "var_name": "JS_PATH_PARAM"}, {"original_string": "static final JsUri INVALID_URI = new JsUri(UriStatus.BAD_URI, Lists.<String>newArrayList());", "modifier": "static final", "type": "JsUri", "declarator": "INVALID_URI = new JsUri(UriStatus.BAD_URI, Lists.<String>newArrayList())", "var_name": "INVALID_URI"}, {"original_string": "protected static final String JS_SUFFIX = \".js\";", "modifier": "protected static final", "type": "String", "declarator": "JS_SUFFIX = \".js\"", "var_name": "JS_SUFFIX"}, {"original_string": "protected static final String JS_DELIMITER = \":\";", "modifier": "protected static final", "type": "String", "declarator": "JS_DELIMITER = \":\"", "var_name": "JS_DELIMITER"}, {"original_string": "private final ContainerConfig config;", "modifier": "private final", "type": "ContainerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final Versioner versioner;", "modifier": "private final", "type": "Versioner", "declarator": "versioner", "var_name": "versioner"}], "methods": [{"identifier": "DefaultJsUriManager", "parameters": "(ContainerConfig config,\n                             Versioner versioner)", "modifiers": "@Inject public", "return": "", "signature": " DefaultJsUriManager(ContainerConfig config,\n                             Versioner versioner)", "full_signature": "@Inject public  DefaultJsUriManager(ContainerConfig config,\n                             Versioner versioner)", "class_method_signature": "DefaultJsUriManager.DefaultJsUriManager(ContainerConfig config,\n                             Versioner versioner)", "testcase": false, "constructor": true}, {"identifier": "makeExternJsUri", "parameters": "(Gadget gadget, Collection<String> extern)", "modifiers": "public", "return": "Uri", "signature": "Uri makeExternJsUri(Gadget gadget, Collection<String> extern)", "full_signature": "public Uri makeExternJsUri(Gadget gadget, Collection<String> extern)", "class_method_signature": "DefaultJsUriManager.makeExternJsUri(Gadget gadget, Collection<String> extern)", "testcase": false, "constructor": false}, {"identifier": "processExternJsUri", "parameters": "(Uri uri)", "modifiers": "public", "return": "JsUri", "signature": "JsUri processExternJsUri(Uri uri)", "full_signature": "public JsUri processExternJsUri(Uri uri)", "class_method_signature": "DefaultJsUriManager.processExternJsUri(Uri uri)", "testcase": false, "constructor": false}, {"identifier": "addJsLibs", "parameters": "(Collection<String> extern)", "modifiers": "static", "return": "String", "signature": "String addJsLibs(Collection<String> extern)", "full_signature": "static String addJsLibs(Collection<String> extern)", "class_method_signature": "DefaultJsUriManager.addJsLibs(Collection<String> extern)", "testcase": false, "constructor": false}, {"identifier": "getJsLibs", "parameters": "(String path)", "modifiers": "static", "return": "Collection<String>", "signature": "Collection<String> getJsLibs(String path)", "full_signature": "static Collection<String> getJsLibs(String path)", "class_method_signature": "DefaultJsUriManager.getJsLibs(String path)", "testcase": false, "constructor": false}, {"identifier": "getReqConfig", "parameters": "(String container, String key)", "modifiers": "private", "return": "String", "signature": "String getReqConfig(String container, String key)", "full_signature": "private String getReqConfig(String container, String key)", "class_method_signature": "DefaultJsUriManager.getReqConfig(String container, String key)", "testcase": false, "constructor": false}, {"identifier": "issueUriFormatError", "parameters": "(String err)", "modifiers": "protected", "return": "void", "signature": "void issueUriFormatError(String err)", "full_signature": "protected void issueUriFormatError(String err)", "class_method_signature": "DefaultJsUriManager.issueUriFormatError(String err)", "testcase": false, "constructor": false}, {"identifier": "addGadgetUri", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean addGadgetUri()", "full_signature": "protected boolean addGadgetUri()", "class_method_signature": "DefaultJsUriManager.addGadgetUri()", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultJsUriManager.java"}, "focal_method": {"identifier": "processExternJsUri", "parameters": "(Uri uri)", "modifiers": "public", "return": "JsUri", "body": "public JsUri processExternJsUri(Uri uri) throws GadgetException {\n    // Validate basic Uri structure and params\n    String container = uri.getQueryParameter(Param.CONTAINER.getKey());\n    if (container == null) {\n      container = ContainerConfig.DEFAULT_CONTAINER;\n    }\n\n    // Get config values up front.\n    getReqConfig(container, JS_HOST_PARAM); // validate that it exists\n    String jsPrefix = getReqConfig(container, JS_PATH_PARAM);\n\n    String host = uri.getAuthority();\n    if (host == null) {\n      issueUriFormatError(\"Unexpected: Js Uri has no host\");\n      return INVALID_URI;\n    }\n\n    // Pull out the collection of features referenced by the Uri.\n    String path = uri.getPath();\n    if (path == null) {\n      issueUriFormatError(\"Unexpected: Js Uri has no path\");\n      return INVALID_URI;\n    }\n    if (!path.startsWith(jsPrefix)) {\n      issueUriFormatError(\"Js Uri path invalid, expected prefix: \" + jsPrefix + \", is: \" + path);\n      return INVALID_URI;\n    }\n    path = path.substring(jsPrefix.length());\n    \n    // Convenience suffix: pull off .js if present; leave alone otherwise.\n    if (path.endsWith(JS_SUFFIX)) {\n      path = path.substring(0, path.length() - JS_SUFFIX.length());\n    }\n    \n    while (path.startsWith(\"/\")) {\n      path = path.substring(1);\n    }\n\n    Collection<String> libs = getJsLibs(path);\n    UriStatus status = UriStatus.VALID_UNVERSIONED;\n    String version = uri.getQueryParameter(Param.VERSION.getKey());\n    if (version != null && versioner != null) {\n      Uri gadgetUri = null;\n      String gadgetParam = uri.getQueryParameter(Param.URL.getKey());\n      if (gadgetParam != null) {\n        gadgetUri = Uri.parse(gadgetParam);\n      }\n      status = versioner.validate(gadgetUri, container, libs, version);\n    }\n\n    return new JsUri(status, libs);\n  }", "signature": "JsUri processExternJsUri(Uri uri)", "full_signature": "public JsUri processExternJsUri(Uri uri)", "class_method_signature": "DefaultJsUriManager.processExternJsUri(Uri uri)", "testcase": false, "constructor": false, "invocations": ["getQueryParameter", "getKey", "getReqConfig", "getReqConfig", "getAuthority", "issueUriFormatError", "getPath", "issueUriFormatError", "startsWith", "issueUriFormatError", "substring", "length", "endsWith", "substring", "length", "length", "startsWith", "substring", "getJsLibs", "getQueryParameter", "getKey", "getQueryParameter", "getKey", "parse", "validate"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}