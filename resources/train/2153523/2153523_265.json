{"test_class": {"identifier": "RenderingGadgetRewriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Uri SPEC_URL = Uri.parse(\"http://example.org/gadget.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "SPEC_URL = Uri.parse(\"http://example.org/gadget.xml\")", "var_name": "SPEC_URL"}, {"original_string": "private static final String BODY_CONTENT = \"Some body content\";", "modifier": "private static final", "type": "String", "declarator": "BODY_CONTENT = \"Some body content\"", "var_name": "BODY_CONTENT"}, {"original_string": "static final Pattern DOCUMENT_SPLIT_PATTERN = Pattern.compile(\n      \"(.*)<head>(.*?)<\\\\/head>(?:.*)<body(.*?)>(.*?)<\\\\/body>(?:.*)\", Pattern.DOTALL |\n      Pattern.CASE_INSENSITIVE);", "modifier": "static final", "type": "Pattern", "declarator": "DOCUMENT_SPLIT_PATTERN = Pattern.compile(\n      \"(.*)<head>(.*?)<\\\\/head>(?:.*)<body(.*?)>(.*?)<\\\\/body>(?:.*)\", Pattern.DOTALL |\n      Pattern.CASE_INSENSITIVE)", "var_name": "DOCUMENT_SPLIT_PATTERN"}, {"original_string": "static final int BEFORE_HEAD_GROUP = 1;", "modifier": "static final", "type": "int", "declarator": "BEFORE_HEAD_GROUP = 1", "var_name": "BEFORE_HEAD_GROUP"}, {"original_string": "static final int HEAD_GROUP = 2;", "modifier": "static final", "type": "int", "declarator": "HEAD_GROUP = 2", "var_name": "HEAD_GROUP"}, {"original_string": "static final int BODY_ATTRIBUTES_GROUP = 3;", "modifier": "static final", "type": "int", "declarator": "BODY_ATTRIBUTES_GROUP = 3", "var_name": "BODY_ATTRIBUTES_GROUP"}, {"original_string": "static final int BODY_GROUP = 4;", "modifier": "static final", "type": "int", "declarator": "BODY_GROUP = 4", "var_name": "BODY_GROUP"}, {"original_string": "private final FakeMessageBundleFactory messageBundleFactory = new FakeMessageBundleFactory();", "modifier": "private final", "type": "FakeMessageBundleFactory", "declarator": "messageBundleFactory = new FakeMessageBundleFactory()", "var_name": "messageBundleFactory"}, {"original_string": "private final FakeContainerConfig config = new FakeContainerConfig();", "modifier": "private final", "type": "FakeContainerConfig", "declarator": "config = new FakeContainerConfig()", "var_name": "config"}, {"original_string": "private final JsUriManager jsUriManager = new FakeJsUriManager();", "modifier": "private final", "type": "JsUriManager", "declarator": "jsUriManager = new FakeJsUriManager()", "var_name": "jsUriManager"}, {"original_string": "private final MapGadgetContext context = new MapGadgetContext();", "modifier": "private final", "type": "MapGadgetContext", "declarator": "context = new MapGadgetContext()", "var_name": "context"}, {"original_string": "private FeatureRegistry featureRegistry;", "modifier": "private", "type": "FeatureRegistry", "declarator": "featureRegistry", "var_name": "featureRegistry"}, {"original_string": "private RenderingGadgetRewriter rewriter;", "modifier": "private", "type": "RenderingGadgetRewriter", "declarator": "rewriter", "var_name": "rewriter"}, {"original_string": "private GadgetHtmlParser parser;", "modifier": "private", "type": "GadgetHtmlParser", "declarator": "parser", "var_name": "parser"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriterTest.java"}, "test_case": {"identifier": "preloadsInjected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void preloadsInjected() throws Exception {\n    final Collection<Object> someData = ImmutableList.of(\"string\", (Object) 99, 4343434.345345d);\n\n    // Other types are supported (anything valid for org.json.JSONObject), but equality comparisons\n    // are more complicated because JSON doesn't implement interfaces like Collection or Map, or\n    // implementing equals.\n    PreloadedData preloadedData = new PreloadedData() {\n      public Collection<Object> toJson() throws PreloadException {\n        return someData;\n      }\n    };\n    Gadget gadget = makeDefaultGadget().setPreloads(ImmutableList.of(preloadedData));\n\n    String rewritten = rewrite(gadget, \"\");\n\n    JSONArray json = getPreloadedJson(rewritten);\n    int i = 0;\n    for (Object entry : someData) {\n      assertEquals(entry, json.get(i++));\n    }\n  }", "signature": "void preloadsInjected()", "full_signature": "@Test public void preloadsInjected()", "class_method_signature": "RenderingGadgetRewriterTest.preloadsInjected()", "testcase": true, "constructor": false, "invocations": ["of", "setPreloads", "makeDefaultGadget", "of", "rewrite", "getPreloadedJson", "assertEquals", "get"]}, "focal_class": {"identifier": "RenderingGadgetRewriter", "superclass": "", "interfaces": "implements GadgetRewriter", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(RenderingGadgetRewriter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(RenderingGadgetRewriter.class.getName())", "var_name": "LOG"}, {"original_string": "private static final int INLINE_JS_BUFFER = 50;", "modifier": "private static final", "type": "int", "declarator": "INLINE_JS_BUFFER = 50", "var_name": "INLINE_JS_BUFFER"}, {"original_string": "protected static final String DEFAULT_CSS =\n      \"body,td,div,span,p{font-family:arial,sans-serif;}\" +\n      \"a {color:#0000cc;}a:visited {color:#551a8b;}\" +\n      \"a:active {color:#ff0000;}\" +\n      \"body{margin: 0px;padding: 0px;background-color:white;}\";", "modifier": "protected static final", "type": "String", "declarator": "DEFAULT_CSS =\n      \"body,td,div,span,p{font-family:arial,sans-serif;}\" +\n      \"a {color:#0000cc;}a:visited {color:#551a8b;}\" +\n      \"a:active {color:#ff0000;}\" +\n      \"body{margin: 0px;padding: 0px;background-color:white;}\"", "var_name": "DEFAULT_CSS"}, {"original_string": "static final String IS_GADGET_BEACON = \"window['__isgadget']=true;\";", "modifier": "static final", "type": "String", "declarator": "IS_GADGET_BEACON = \"window['__isgadget']=true;\"", "var_name": "IS_GADGET_BEACON"}, {"original_string": "static final String INSERT_BASE_ELEMENT_KEY = \"gadgets.insertBaseElement\";", "modifier": "static final", "type": "String", "declarator": "INSERT_BASE_ELEMENT_KEY = \"gadgets.insertBaseElement\"", "var_name": "INSERT_BASE_ELEMENT_KEY"}, {"original_string": "static final String FEATURES_KEY = \"gadgets.features\";", "modifier": "static final", "type": "String", "declarator": "FEATURES_KEY = \"gadgets.features\"", "var_name": "FEATURES_KEY"}, {"original_string": "protected final MessageBundleFactory messageBundleFactory;", "modifier": "protected final", "type": "MessageBundleFactory", "declarator": "messageBundleFactory", "var_name": "messageBundleFactory"}, {"original_string": "protected final ContainerConfig containerConfig;", "modifier": "protected final", "type": "ContainerConfig", "declarator": "containerConfig", "var_name": "containerConfig"}, {"original_string": "protected final FeatureRegistry featureRegistry;", "modifier": "protected final", "type": "FeatureRegistry", "declarator": "featureRegistry", "var_name": "featureRegistry"}, {"original_string": "protected final JsUriManager jsUriManager;", "modifier": "protected final", "type": "JsUriManager", "declarator": "jsUriManager", "var_name": "jsUriManager"}, {"original_string": "protected final Map<String, ConfigContributor> configContributors;", "modifier": "protected final", "type": "Map<String, ConfigContributor>", "declarator": "configContributors", "var_name": "configContributors"}, {"original_string": "protected Set<String> defaultExternLibs = ImmutableSet.of();", "modifier": "protected", "type": "Set<String>", "declarator": "defaultExternLibs = ImmutableSet.of()", "var_name": "defaultExternLibs"}, {"original_string": "protected Boolean externalizeFeatures = false;", "modifier": "protected", "type": "Boolean", "declarator": "externalizeFeatures = false", "var_name": "externalizeFeatures"}], "methods": [{"identifier": "RenderingGadgetRewriter", "parameters": "(MessageBundleFactory messageBundleFactory,\n                                 ContainerConfig containerConfig,\n                                 FeatureRegistry featureRegistry,\n                                 JsUriManager jsUriManager,\n                                 Map<String, ConfigContributor> configContributors)", "modifiers": "@Inject public", "return": "", "signature": " RenderingGadgetRewriter(MessageBundleFactory messageBundleFactory,\n                                 ContainerConfig containerConfig,\n                                 FeatureRegistry featureRegistry,\n                                 JsUriManager jsUriManager,\n                                 Map<String, ConfigContributor> configContributors)", "full_signature": "@Inject public  RenderingGadgetRewriter(MessageBundleFactory messageBundleFactory,\n                                 ContainerConfig containerConfig,\n                                 FeatureRegistry featureRegistry,\n                                 JsUriManager jsUriManager,\n                                 Map<String, ConfigContributor> configContributors)", "class_method_signature": "RenderingGadgetRewriter.RenderingGadgetRewriter(MessageBundleFactory messageBundleFactory,\n                                 ContainerConfig containerConfig,\n                                 FeatureRegistry featureRegistry,\n                                 JsUriManager jsUriManager,\n                                 Map<String, ConfigContributor> configContributors)", "testcase": false, "constructor": true}, {"identifier": "setDefaultForcedLibs", "parameters": "(@Named(\"shindig.gadget-rewrite.default-forced-libs\")String forcedLibs)", "modifiers": "@Inject public", "return": "void", "signature": "void setDefaultForcedLibs(@Named(\"shindig.gadget-rewrite.default-forced-libs\")String forcedLibs)", "full_signature": "@Inject public void setDefaultForcedLibs(@Named(\"shindig.gadget-rewrite.default-forced-libs\")String forcedLibs)", "class_method_signature": "RenderingGadgetRewriter.setDefaultForcedLibs(@Named(\"shindig.gadget-rewrite.default-forced-libs\")String forcedLibs)", "testcase": false, "constructor": false}, {"identifier": "setExternalizeFeatureLibs", "parameters": "(@Named(\"shindig.gadget-rewrite.externalize-feature-libs\")Boolean externalizeFeatures)", "modifiers": "@Inject(optional = true) public", "return": "void", "signature": "void setExternalizeFeatureLibs(@Named(\"shindig.gadget-rewrite.externalize-feature-libs\")Boolean externalizeFeatures)", "full_signature": "@Inject(optional = true) public void setExternalizeFeatureLibs(@Named(\"shindig.gadget-rewrite.externalize-feature-libs\")Boolean externalizeFeatures)", "class_method_signature": "RenderingGadgetRewriter.setExternalizeFeatureLibs(@Named(\"shindig.gadget-rewrite.externalize-feature-libs\")Boolean externalizeFeatures)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent mutableContent)", "modifiers": "public", "return": "void", "signature": "void rewrite(Gadget gadget, MutableContent mutableContent)", "full_signature": "public void rewrite(Gadget gadget, MutableContent mutableContent)", "class_method_signature": "RenderingGadgetRewriter.rewrite(Gadget gadget, MutableContent mutableContent)", "testcase": false, "constructor": false}, {"identifier": "injectBaseTag", "parameters": "(Gadget gadget, Node headTag)", "modifiers": "protected", "return": "void", "signature": "void injectBaseTag(Gadget gadget, Node headTag)", "full_signature": "protected void injectBaseTag(Gadget gadget, Node headTag)", "class_method_signature": "RenderingGadgetRewriter.injectBaseTag(Gadget gadget, Node headTag)", "testcase": false, "constructor": false}, {"identifier": "injectOnLoadHandlers", "parameters": "(Node bodyTag)", "modifiers": "protected", "return": "void", "signature": "void injectOnLoadHandlers(Node bodyTag)", "full_signature": "protected void injectOnLoadHandlers(Node bodyTag)", "class_method_signature": "RenderingGadgetRewriter.injectOnLoadHandlers(Node bodyTag)", "testcase": false, "constructor": false}, {"identifier": "injectGadgetBeacon", "parameters": "(Gadget gadget, Node headTag, Node firstHeadChild)", "modifiers": "protected", "return": "void", "signature": "void injectGadgetBeacon(Gadget gadget, Node headTag, Node firstHeadChild)", "full_signature": "protected void injectGadgetBeacon(Gadget gadget, Node headTag, Node firstHeadChild)", "class_method_signature": "RenderingGadgetRewriter.injectGadgetBeacon(Gadget gadget, Node headTag, Node firstHeadChild)", "testcase": false, "constructor": false}, {"identifier": "injectFeatureLibraries", "parameters": "(Gadget gadget, Node headTag, Node firstHeadChild)", "modifiers": "protected", "return": "void", "signature": "void injectFeatureLibraries(Gadget gadget, Node headTag, Node firstHeadChild)", "full_signature": "protected void injectFeatureLibraries(Gadget gadget, Node headTag, Node firstHeadChild)", "class_method_signature": "RenderingGadgetRewriter.injectFeatureLibraries(Gadget gadget, Node headTag, Node firstHeadChild)", "testcase": false, "constructor": false}, {"identifier": "getLibraryConfig", "parameters": "(Gadget gadget, List<String> reqs)", "modifiers": "protected", "return": "String", "signature": "String getLibraryConfig(Gadget gadget, List<String> reqs)", "full_signature": "protected String getLibraryConfig(Gadget gadget, List<String> reqs)", "class_method_signature": "RenderingGadgetRewriter.getLibraryConfig(Gadget gadget, List<String> reqs)", "testcase": false, "constructor": false}, {"identifier": "injectMessageBundles", "parameters": "(MessageBundle bundle, Node scriptTag)", "modifiers": "protected", "return": "void", "signature": "void injectMessageBundles(MessageBundle bundle, Node scriptTag)", "full_signature": "protected void injectMessageBundles(MessageBundle bundle, Node scriptTag)", "class_method_signature": "RenderingGadgetRewriter.injectMessageBundles(MessageBundle bundle, Node scriptTag)", "testcase": false, "constructor": false}, {"identifier": "injectDefaultPrefs", "parameters": "(Gadget gadget, Node scriptTag)", "modifiers": "protected", "return": "void", "signature": "void injectDefaultPrefs(Gadget gadget, Node scriptTag)", "full_signature": "protected void injectDefaultPrefs(Gadget gadget, Node scriptTag)", "class_method_signature": "RenderingGadgetRewriter.injectDefaultPrefs(Gadget gadget, Node scriptTag)", "testcase": false, "constructor": false}, {"identifier": "injectPreloads", "parameters": "(Gadget gadget, Node scriptTag)", "modifiers": "protected", "return": "void", "signature": "void injectPreloads(Gadget gadget, Node scriptTag)", "full_signature": "protected void injectPreloads(Gadget gadget, Node scriptTag)", "class_method_signature": "RenderingGadgetRewriter.injectPreloads(Gadget gadget, Node scriptTag)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriter.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent mutableContent)", "modifiers": "public", "return": "void", "body": "public void rewrite(Gadget gadget, MutableContent mutableContent) throws RewritingException {\n    // Don't touch sanitized gadgets.\n    if (gadget.sanitizeOutput()) {\n      return;\n    }\n\n    try {\n      Document document = mutableContent.getDocument();\n\n      Element head = (Element)DomUtil.getFirstNamedChildNode(document.getDocumentElement(), \"head\");\n\n      // Insert new content before any of the existing children of the head element\n      Node firstHeadChild = head.getFirstChild();\n\n      // Only inject default styles if no doctype was specified.\n      if (document.getDoctype() == null) {\n        Element defaultStyle = document.createElement(\"style\");\n        defaultStyle.setAttribute(\"type\", \"text/css\");\n        head.insertBefore(defaultStyle, firstHeadChild);\n        defaultStyle.appendChild(defaultStyle.getOwnerDocument().\n            createTextNode(DEFAULT_CSS));\n      }\n\n      injectBaseTag(gadget, head);\n      injectGadgetBeacon(gadget, head, firstHeadChild);\n      injectFeatureLibraries(gadget, head, firstHeadChild);\n\n      // This can be one script block.\n      Element mainScriptTag = document.createElement(\"script\");\n      GadgetContext context = gadget.getContext();\n      MessageBundle bundle = messageBundleFactory.getBundle(\n          gadget.getSpec(), context.getLocale(), context.getIgnoreCache(), context.getContainer());\n      injectMessageBundles(bundle, mainScriptTag);\n      injectDefaultPrefs(gadget, mainScriptTag);\n      injectPreloads(gadget, mainScriptTag);\n\n      // We need to inject our script before any developer scripts.\n      head.insertBefore(mainScriptTag, firstHeadChild);\n\n      Element body = (Element)DomUtil.getFirstNamedChildNode(document.getDocumentElement(), \"body\");\n\n      body.setAttribute(\"dir\", bundle.getLanguageDirection());\n\n      injectOnLoadHandlers(body);\n\n      mutableContent.documentChanged();\n    } catch (GadgetException e) {\n      throw new RewritingException(e.getLocalizedMessage(), e, e.getHttpStatusCode());\n    }\n  }", "signature": "void rewrite(Gadget gadget, MutableContent mutableContent)", "full_signature": "public void rewrite(Gadget gadget, MutableContent mutableContent)", "class_method_signature": "RenderingGadgetRewriter.rewrite(Gadget gadget, MutableContent mutableContent)", "testcase": false, "constructor": false, "invocations": ["sanitizeOutput", "getDocument", "getFirstNamedChildNode", "getDocumentElement", "getFirstChild", "getDoctype", "createElement", "setAttribute", "insertBefore", "appendChild", "createTextNode", "getOwnerDocument", "injectBaseTag", "injectGadgetBeacon", "injectFeatureLibraries", "createElement", "getContext", "getBundle", "getSpec", "getLocale", "getIgnoreCache", "getContainer", "injectMessageBundles", "injectDefaultPrefs", "injectPreloads", "insertBefore", "getFirstNamedChildNode", "getDocumentElement", "setAttribute", "getLanguageDirection", "injectOnLoadHandlers", "documentChanged", "getLocalizedMessage", "getHttpStatusCode"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}