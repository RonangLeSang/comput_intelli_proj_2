{"test_class": {"identifier": "DefaultRequestPipelineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Uri DEFAULT_URI = Uri.parse(\"http://example.org/gadget.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "DEFAULT_URI = Uri.parse(\"http://example.org/gadget.xml\")", "var_name": "DEFAULT_URI"}, {"original_string": "private final FakeHttpFetcher fetcher = new FakeHttpFetcher();", "modifier": "private final", "type": "FakeHttpFetcher", "declarator": "fetcher = new FakeHttpFetcher()", "var_name": "fetcher"}, {"original_string": "private final FakeHttpCache cache = new FakeHttpCache();", "modifier": "private final", "type": "FakeHttpCache", "declarator": "cache = new FakeHttpCache()", "var_name": "cache"}, {"original_string": "private final FakeOAuthRequestProvider oauth = new FakeOAuthRequestProvider();", "modifier": "private final", "type": "FakeOAuthRequestProvider", "declarator": "oauth = new FakeOAuthRequestProvider()", "var_name": "oauth"}, {"original_string": "private final HttpResponseMetadataHelper helper = new HttpResponseMetadataHelper() {\n    @Override\n    public String getHash(HttpResponse resp) {\n      return resp.getResponseAsString();\n    }\n  };", "modifier": "private final", "type": "HttpResponseMetadataHelper", "declarator": "helper = new HttpResponseMetadataHelper() {\n    @Override\n    public String getHash(HttpResponse resp) {\n      return resp.getResponseAsString();\n    }\n  }", "var_name": "helper"}, {"original_string": "private final RequestPipeline pipeline = new DefaultRequestPipeline(fetcher, cache, oauth,\n      new DefaultResponseRewriterRegistry(null, null), new NoOpInvalidationService(), helper);", "modifier": "private final", "type": "RequestPipeline", "declarator": "pipeline = new DefaultRequestPipeline(fetcher, cache, oauth,\n      new DefaultResponseRewriterRegistry(null, null), new NoOpInvalidationService(), helper)", "var_name": "pipeline"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/http/DefaultRequestPipelineTest.java"}, "test_case": {"identifier": "authTypeNoneNotCached", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void authTypeNoneNotCached() throws Exception {\n    HttpRequest request = new HttpRequest(DEFAULT_URI)\n        .setAuthType(AuthType.NONE);\n\n    fetcher.response = new HttpResponse(\"response\");\n\n    HttpResponse response = pipeline.execute(request);\n\n    assertEquals(request, fetcher.request);\n    assertEquals(fetcher.response, response);\n    assertEquals(response, cache.data.get(DEFAULT_URI));\n    assertEquals(1, cache.readCount);\n    assertEquals(1, cache.writeCount);\n    assertEquals(1, fetcher.fetchCount);\n    assertEquals(1, response.getMetadata().size());\n    assertEquals(\"response\",\n        response.getMetadata().get(HttpResponseMetadataHelper.DATA_HASH));\n  }", "signature": "void authTypeNoneNotCached()", "full_signature": "@Test public void authTypeNoneNotCached()", "class_method_signature": "DefaultRequestPipelineTest.authTypeNoneNotCached()", "testcase": true, "constructor": false, "invocations": ["setAuthType", "execute", "assertEquals", "assertEquals", "assertEquals", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "size", "getMetadata", "assertEquals", "get", "getMetadata"]}, "focal_class": {"identifier": "DefaultRequestPipeline", "superclass": "", "interfaces": "implements RequestPipeline", "fields": [{"original_string": "private final HttpFetcher httpFetcher;", "modifier": "private final", "type": "HttpFetcher", "declarator": "httpFetcher", "var_name": "httpFetcher"}, {"original_string": "private final HttpCache httpCache;", "modifier": "private final", "type": "HttpCache", "declarator": "httpCache", "var_name": "httpCache"}, {"original_string": "private final Provider<OAuthRequest> oauthRequestProvider;", "modifier": "private final", "type": "Provider<OAuthRequest>", "declarator": "oauthRequestProvider", "var_name": "oauthRequestProvider"}, {"original_string": "private final ResponseRewriterRegistry responseRewriterRegistry;", "modifier": "private final", "type": "ResponseRewriterRegistry", "declarator": "responseRewriterRegistry", "var_name": "responseRewriterRegistry"}, {"original_string": "private final InvalidationService invalidationService;", "modifier": "private final", "type": "InvalidationService", "declarator": "invalidationService", "var_name": "invalidationService"}, {"original_string": "private final HttpResponseMetadataHelper metadataHelper;", "modifier": "private final", "type": "HttpResponseMetadataHelper", "declarator": "metadataHelper", "var_name": "metadataHelper"}], "methods": [{"identifier": "DefaultRequestPipeline", "parameters": "(HttpFetcher httpFetcher,\n                                HttpCache httpCache,\n                                Provider<OAuthRequest> oauthRequestProvider,\n                                @Named(\"shindig.rewriters.response.pre-cache\")\n                                ResponseRewriterRegistry responseRewriterRegistry,\n                                InvalidationService invalidationService,\n                                @Nullable HttpResponseMetadataHelper metadataHelper)", "modifiers": "@Inject public", "return": "", "signature": " DefaultRequestPipeline(HttpFetcher httpFetcher,\n                                HttpCache httpCache,\n                                Provider<OAuthRequest> oauthRequestProvider,\n                                @Named(\"shindig.rewriters.response.pre-cache\")\n                                ResponseRewriterRegistry responseRewriterRegistry,\n                                InvalidationService invalidationService,\n                                @Nullable HttpResponseMetadataHelper metadataHelper)", "full_signature": "@Inject public  DefaultRequestPipeline(HttpFetcher httpFetcher,\n                                HttpCache httpCache,\n                                Provider<OAuthRequest> oauthRequestProvider,\n                                @Named(\"shindig.rewriters.response.pre-cache\")\n                                ResponseRewriterRegistry responseRewriterRegistry,\n                                InvalidationService invalidationService,\n                                @Nullable HttpResponseMetadataHelper metadataHelper)", "class_method_signature": "DefaultRequestPipeline.DefaultRequestPipeline(HttpFetcher httpFetcher,\n                                HttpCache httpCache,\n                                Provider<OAuthRequest> oauthRequestProvider,\n                                @Named(\"shindig.rewriters.response.pre-cache\")\n                                ResponseRewriterRegistry responseRewriterRegistry,\n                                InvalidationService invalidationService,\n                                @Nullable HttpResponseMetadataHelper metadataHelper)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(HttpRequest request)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse execute(HttpRequest request)", "full_signature": "public HttpResponse execute(HttpRequest request)", "class_method_signature": "DefaultRequestPipeline.execute(HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "normalizeProtocol", "parameters": "(HttpRequest request)", "modifiers": "protected", "return": "void", "signature": "void normalizeProtocol(HttpRequest request)", "full_signature": "protected void normalizeProtocol(HttpRequest request)", "class_method_signature": "DefaultRequestPipeline.normalizeProtocol(HttpRequest request)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/DefaultRequestPipeline.java"}, "focal_method": {"identifier": "execute", "parameters": "(HttpRequest request)", "modifiers": "public", "return": "HttpResponse", "body": "public HttpResponse execute(HttpRequest request) throws GadgetException {\n    normalizeProtocol(request);\n    HttpResponse invalidatedResponse = null;\n    HttpResponse staleResponse = null;\n\n    if (!request.getIgnoreCache()) {\n      HttpResponse cachedResponse = httpCache.getResponse(request);\n      // Note that we don't remove invalidated entries from the cache as we want them to be\n      // available in the event of a backend fetch failure\n      if (cachedResponse != null) {\n        if (!cachedResponse.isStale()) {\n          if(invalidationService.isValid(request, cachedResponse)) {\n            return cachedResponse;\n          } else {\n            invalidatedResponse = cachedResponse;\n          }\n        } else {\n          if (!cachedResponse.isError()) {\n            // Remember good but stale cached response, to be served if server unavailable\n            staleResponse = cachedResponse;\n          }\n        }\n      }\n    }\n\n    HttpResponse fetchedResponse = null;\n    switch (request.getAuthType()) {\n      case NONE:\n        fetchedResponse = httpFetcher.fetch(request);\n        break;\n      case SIGNED:\n      case OAUTH:\n        fetchedResponse = oauthRequestProvider.get().fetch(request);\n        break;\n      default:\n        return HttpResponse.error();\n    }\n\n    if (fetchedResponse.isError() && invalidatedResponse != null) {\n      // Use the invalidated cached response if it is not stale. We don't update its\n      // mark so it remains invalidated\n      return invalidatedResponse;\n    }\n\n    if (fetchedResponse.getHttpStatusCode() >= 500 && staleResponse != null) {\n      // If we have trouble accessing the remote server,\n      // Lets try the latest good but staled result \n      return staleResponse;\n    }\n    \n    if (!fetchedResponse.isError() && !request.getIgnoreCache() && request.getCacheTtl() != 0) {\n      try {\n        fetchedResponse = responseRewriterRegistry.rewriteHttpResponse(request, fetchedResponse);\n      } catch (RewritingException e) {\n        throw new GadgetException(GadgetException.Code.INTERNAL_SERVER_ERROR, e, e.getHttpStatusCode());\n      }\n    }\n    \n    // Set response hash value in metadata (used for url versioning)\n    fetchedResponse = HttpResponseMetadataHelper.updateHash(fetchedResponse, metadataHelper);\n    if (!request.getIgnoreCache()) {\n      // Mark the response with invalidation information prior to caching\n      if (fetchedResponse.getCacheTtl() > 0) {\n        fetchedResponse = invalidationService.markResponse(request, fetchedResponse);\n      }\n      httpCache.addResponse(request, fetchedResponse);\n    }\n    return fetchedResponse;\n  }", "signature": "HttpResponse execute(HttpRequest request)", "full_signature": "public HttpResponse execute(HttpRequest request)", "class_method_signature": "DefaultRequestPipeline.execute(HttpRequest request)", "testcase": false, "constructor": false, "invocations": ["normalizeProtocol", "getIgnoreCache", "getResponse", "isStale", "isValid", "isError", "getAuthType", "fetch", "fetch", "get", "error", "isError", "getHttpStatusCode", "isError", "getIgnoreCache", "getCacheTtl", "rewriteHttpResponse", "getHttpStatusCode", "updateHash", "getIgnoreCache", "getCacheTtl", "markResponse", "addResponse"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}