{"test_class": {"identifier": "ProxyHandlerTest", "superclass": "extends EasyMockTestCase", "interfaces": "", "fields": [{"original_string": "private final static String URL_ONE = \"http://www.example.org/test.html\";", "modifier": "private final static", "type": "String", "declarator": "URL_ONE = \"http://www.example.org/test.html\"", "var_name": "URL_ONE"}, {"original_string": "private final static String DATA_ONE = \"hello world\";", "modifier": "private final static", "type": "String", "declarator": "DATA_ONE = \"hello world\"", "var_name": "DATA_ONE"}, {"original_string": "public final RequestPipeline pipeline = mock(RequestPipeline.class);", "modifier": "public final", "type": "RequestPipeline", "declarator": "pipeline = mock(RequestPipeline.class)", "var_name": "pipeline"}, {"original_string": "public CaptureRewriter rewriter = new CaptureRewriter();", "modifier": "public", "type": "CaptureRewriter", "declarator": "rewriter = new CaptureRewriter()", "var_name": "rewriter"}, {"original_string": "public ResponseRewriterRegistry rewriterRegistry\n      = new DefaultResponseRewriterRegistry(Arrays.<ResponseRewriter>asList(rewriter), null);", "modifier": "public", "type": "ResponseRewriterRegistry", "declarator": "rewriterRegistry\n      = new DefaultResponseRewriterRegistry(Arrays.<ResponseRewriter>asList(rewriter), null)", "var_name": "rewriterRegistry"}, {"original_string": "private ProxyUriManager.ProxyUri request;", "modifier": "private", "type": "ProxyUriManager.ProxyUri", "declarator": "request", "var_name": "request"}, {"original_string": "private final ProxyHandler proxyHandler\n      = new ProxyHandler(pipeline, rewriterRegistry, true);", "modifier": "private final", "type": "ProxyHandler", "declarator": "proxyHandler\n      = new ProxyHandler(pipeline, rewriterRegistry, true)", "var_name": "proxyHandler"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/ProxyHandlerTest.java"}, "test_case": {"identifier": "testRecoverableRewritingException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRecoverableRewritingException() throws Exception {\n    String url = \"http://example.org/mypage.html\";\n    String domain = \"example.org\";\n\n    setupProxyRequestMock(domain, url, true, -1, null, null);\n\n    String contentType = \"text/html; charset=UTF-8\";\n    HttpResponse resp = new HttpResponseBuilder()\n        .setResponseString(\"Hello\")\n        .addHeader(\"Content-Type\", contentType)\n        .create();\n\n    expect(pipeline.execute((HttpRequest) EasyMock.anyObject())).andReturn(resp);\n\n    replay();\n\n    final StringBuilder stringBuilder = new StringBuilder(\"\");\n    ResponseRewriter rewriter = getResponseRewriterThatThrowsExceptions(stringBuilder);\n\n    ResponseRewriterRegistry rewriterRegistry =\n        new DefaultResponseRewriterRegistry(\n            Arrays.<ResponseRewriter>asList(rewriter), null);\n    ProxyHandler proxyHandler = new ProxyHandler(pipeline, rewriterRegistry, true);\n\n    request.setReturnOriginalContentOnError(true);\n    HttpResponse recorder = proxyHandler.fetch(request);\n\n    verify();\n\n    // Ensure that original content is returned.\n    assertEquals(recorder.getHeader(\"Content-Type\"), contentType);\n    assertEquals(\"Hello\", recorder.getResponseAsString());\n    assertEquals(\"exceptionThrown\", stringBuilder.toString());\n  }", "signature": "void testRecoverableRewritingException()", "full_signature": "@Test public void testRecoverableRewritingException()", "class_method_signature": "ProxyHandlerTest.testRecoverableRewritingException()", "testcase": true, "constructor": false, "invocations": ["setupProxyRequestMock", "create", "addHeader", "setResponseString", "andReturn", "expect", "execute", "anyObject", "replay", "getResponseRewriterThatThrowsExceptions", "asList", "setReturnOriginalContentOnError", "fetch", "verify", "assertEquals", "getHeader", "assertEquals", "getResponseAsString", "assertEquals", "toString"]}, "focal_class": {"identifier": "ProxyHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Integer LONG_LIVED_REFRESH = (365 * 24 * 60 * 60);", "modifier": "static final", "type": "Integer", "declarator": "LONG_LIVED_REFRESH = (365 * 24 * 60 * 60)", "var_name": "LONG_LIVED_REFRESH"}, {"original_string": "static final Integer DEFAULT_REFRESH = (60 * 60);", "modifier": "static final", "type": "Integer", "declarator": "DEFAULT_REFRESH = (60 * 60)", "var_name": "DEFAULT_REFRESH"}, {"original_string": "private final RequestPipeline requestPipeline;", "modifier": "private final", "type": "RequestPipeline", "declarator": "requestPipeline", "var_name": "requestPipeline"}, {"original_string": "private final ResponseRewriterRegistry contentRewriterRegistry;", "modifier": "private final", "type": "ResponseRewriterRegistry", "declarator": "contentRewriterRegistry", "var_name": "contentRewriterRegistry"}, {"original_string": "protected final boolean remapInternalServerError;", "modifier": "protected final", "type": "boolean", "declarator": "remapInternalServerError", "var_name": "remapInternalServerError"}, {"original_string": "private static final String FLASH_CONTENT_TYPE = \"application/x-shockwave-flash\";", "modifier": "private static final", "type": "String", "declarator": "FLASH_CONTENT_TYPE = \"application/x-shockwave-flash\"", "var_name": "FLASH_CONTENT_TYPE"}], "methods": [{"identifier": "ProxyHandler", "parameters": "(RequestPipeline requestPipeline,\n                      ResponseRewriterRegistry contentRewriterRegistry,\n                      @Named(\"shindig.proxy.remapInternalServerError\")\n                      Boolean remapInternalServerError)", "modifiers": "@Inject public", "return": "", "signature": " ProxyHandler(RequestPipeline requestPipeline,\n                      ResponseRewriterRegistry contentRewriterRegistry,\n                      @Named(\"shindig.proxy.remapInternalServerError\")\n                      Boolean remapInternalServerError)", "full_signature": "@Inject public  ProxyHandler(RequestPipeline requestPipeline,\n                      ResponseRewriterRegistry contentRewriterRegistry,\n                      @Named(\"shindig.proxy.remapInternalServerError\")\n                      Boolean remapInternalServerError)", "class_method_signature": "ProxyHandler.ProxyHandler(RequestPipeline requestPipeline,\n                      ResponseRewriterRegistry contentRewriterRegistry,\n                      @Named(\"shindig.proxy.remapInternalServerError\")\n                      Boolean remapInternalServerError)", "testcase": false, "constructor": true}, {"identifier": "buildHttpRequest", "parameters": "(\n      ProxyUriManager.ProxyUri uriCtx, Uri tgt)", "modifiers": "private", "return": "HttpRequest", "signature": "HttpRequest buildHttpRequest(\n      ProxyUriManager.ProxyUri uriCtx, Uri tgt)", "full_signature": "private HttpRequest buildHttpRequest(\n      ProxyUriManager.ProxyUri uriCtx, Uri tgt)", "class_method_signature": "ProxyHandler.buildHttpRequest(\n      ProxyUriManager.ProxyUri uriCtx, Uri tgt)", "testcase": false, "constructor": false}, {"identifier": "fetch", "parameters": "(ProxyUriManager.ProxyUri proxyUri)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse fetch(ProxyUriManager.ProxyUri proxyUri)", "full_signature": "public HttpResponse fetch(ProxyUriManager.ProxyUri proxyUri)", "class_method_signature": "ProxyHandler.fetch(ProxyUriManager.ProxyUri proxyUri)", "testcase": false, "constructor": false}, {"identifier": "setResponseContentHeaders", "parameters": "(HttpResponseBuilder response, HttpResponse results)", "modifiers": "protected", "return": "void", "signature": "void setResponseContentHeaders(HttpResponseBuilder response, HttpResponse results)", "full_signature": "protected void setResponseContentHeaders(HttpResponseBuilder response, HttpResponse results)", "class_method_signature": "ProxyHandler.setResponseContentHeaders(HttpResponseBuilder response, HttpResponse results)", "testcase": false, "constructor": false}, {"identifier": "isFlash", "parameters": "(String responseContentType, String resultsContentType)", "modifiers": "private", "return": "boolean", "signature": "boolean isFlash(String responseContentType, String resultsContentType)", "full_signature": "private boolean isFlash(String responseContentType, String resultsContentType)", "class_method_signature": "ProxyHandler.isFlash(String responseContentType, String resultsContentType)", "testcase": false, "constructor": false}, {"identifier": "isRecoverable", "parameters": "(HttpResponse results)", "modifiers": "public", "return": "boolean", "signature": "boolean isRecoverable(HttpResponse results)", "full_signature": "public boolean isRecoverable(HttpResponse results)", "class_method_signature": "ProxyHandler.isRecoverable(HttpResponse results)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyHandler.java"}, "focal_method": {"identifier": "fetch", "parameters": "(ProxyUriManager.ProxyUri proxyUri)", "modifiers": "public", "return": "HttpResponse", "body": "public HttpResponse fetch(ProxyUriManager.ProxyUri proxyUri)\n      throws IOException, GadgetException {\n    HttpRequest rcr = buildHttpRequest(proxyUri, proxyUri.getResource());\n    if (rcr == null) {\n      throw new GadgetException(GadgetException.Code.INVALID_PARAMETER,\n          \"No url parameter in request\", HttpResponse.SC_BAD_REQUEST);\n    }\n\n    HttpResponse results = requestPipeline.execute(rcr);\n\n    if (results.isError()) {\n      // Error: try the fallback. Particularly useful for proxied images.\n      Uri fallbackUri = proxyUri.getFallbackUri();\n      if (fallbackUri != null) {\n        HttpRequest fallbackRcr = buildHttpRequest(proxyUri, fallbackUri);\n        results = requestPipeline.execute(fallbackRcr);\n      }\n    }\n\n    if (contentRewriterRegistry != null) {\n      try {\n        results = contentRewriterRegistry.rewriteHttpResponse(rcr, results);\n      } catch (RewritingException e) {\n        // Throw exception if the RETURN_ORIGINAL_CONTENT_ON_ERROR param is not\n        // set to \"true\" or the error is irrecoverable from.\n        if (!proxyUri.shouldReturnOrigOnErr() || !isRecoverable(results)) {\n          throw new GadgetException(GadgetException.Code.INTERNAL_SERVER_ERROR, e,\n              e.getHttpStatusCode());\n        }\n      }\n    }\n\n    HttpResponseBuilder response = new HttpResponseBuilder(results);\n    response.clearAllHeaders();\n\n    try {\n      ServletUtil.setCachingHeaders(response,\n          proxyUri.translateStatusRefresh(LONG_LIVED_REFRESH, DEFAULT_REFRESH), false);\n    } catch (GadgetException gex) {\n      return ServletUtil.errorResponse(gex);\n    }\n\n    UriUtils.copyResponseHeadersAndStatusCode(results, response, remapInternalServerError, true,\n        DisallowedHeaders.CACHING_DIRECTIVES,  // Proxy sets its own caching headers.\n        DisallowedHeaders.CLIENT_STATE_DIRECTIVES,  // Overridden or irrelevant to proxy.\n        DisallowedHeaders.OUTPUT_TRANSFER_DIRECTIVES\n        );\n\n    // Set Content-Type and Content-Disposition. Do this after copy results headers,\n    // in order to prevent those from overwriting the correct values.\n    setResponseContentHeaders(response, results);\n\n    UriUtils.maybeRewriteContentType(rcr, response);\n\n    // TODO: replace this with streaming APIs when ready\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    IOUtils.copy(results.getResponse(), baos);\n    response.setResponse(baos.toByteArray());\n    return response.create();\n  }", "signature": "HttpResponse fetch(ProxyUriManager.ProxyUri proxyUri)", "full_signature": "public HttpResponse fetch(ProxyUriManager.ProxyUri proxyUri)", "class_method_signature": "ProxyHandler.fetch(ProxyUriManager.ProxyUri proxyUri)", "testcase": false, "constructor": false, "invocations": ["buildHttpRequest", "getResource", "execute", "isError", "getFallbackUri", "buildHttpRequest", "execute", "rewriteHttpResponse", "shouldReturnOrigOnErr", "isRecoverable", "getHttpStatusCode", "clearAllHeaders", "setCachingHeaders", "translateStatusRefresh", "errorResponse", "copyResponseHeadersAndStatusCode", "setResponseContentHeaders", "maybeRewriteContentType", "copy", "getResponse", "setResponse", "toByteArray", "create"]}, "repository": {"repo_id": 2153523, "url": "https://github.com/gatein/gatein-shindig", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 3564, "license": "licensed"}}