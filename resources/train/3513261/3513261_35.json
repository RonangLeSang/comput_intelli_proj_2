{"test_class": {"identifier": "SCMUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/xcode-maven-plugin/src/test/java/com/sap/prd/mobile/ios/mios/SCMUtilTest.java"}, "test_case": {"identifier": "testGitHideConfidentialInformation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGitHideConfidentialInformation() throws Exception {\n    \n    Properties versionInfo = new Properties();\n    versionInfo.setProperty(\"type\", \"git\");\n    versionInfo.setProperty(\"repo\", \"ssh://scm.example.com:1234/MyProject\");\n    \n    String connectionString = SCMUtil.getConnectionString(versionInfo, true);\n    \n    Assert.assertEquals(\"1234/MyProject\", connectionString);\n  }", "signature": "void testGitHideConfidentialInformation()", "full_signature": "@Test public void testGitHideConfidentialInformation()", "class_method_signature": "SCMUtilTest.testGitHideConfidentialInformation()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "getConnectionString", "assertEquals"]}, "focal_class": {"identifier": "SCMUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String THREEDOTS = \"...\";", "modifier": "private static final", "type": "String", "declarator": "THREEDOTS = \"...\"", "var_name": "THREEDOTS"}, {"original_string": "private static final String PROTOCOL_PREFIX_PERFORCE = \"scm:perforce:\";", "modifier": "private static final", "type": "String", "declarator": "PROTOCOL_PREFIX_PERFORCE = \"scm:perforce:\"", "var_name": "PROTOCOL_PREFIX_PERFORCE"}, {"original_string": "private static final String PROTOCOL_PREFIX_GIT = \"scm:git:\";", "modifier": "private static final", "type": "String", "declarator": "PROTOCOL_PREFIX_GIT = \"scm:git:\"", "var_name": "PROTOCOL_PREFIX_GIT"}, {"original_string": "private final static Map<String, Integer> gitDefaultPorts = new HashMap<String, Integer>();", "modifier": "private final static", "type": "Map<String, Integer>", "declarator": "gitDefaultPorts = new HashMap<String, Integer>()", "var_name": "gitDefaultPorts"}, {"original_string": "private static final int PERFORCE_DEFAULT_PORT = 1666;", "modifier": "private static final", "type": "int", "declarator": "PERFORCE_DEFAULT_PORT = 1666", "var_name": "PERFORCE_DEFAULT_PORT"}], "methods": [{"identifier": "getConnectionString", "parameters": "(final Properties versionInfo, final boolean hideConfidentialInformation)", "modifiers": "public static", "return": "String", "signature": "String getConnectionString(final Properties versionInfo, final boolean hideConfidentialInformation)", "full_signature": "public static String getConnectionString(final Properties versionInfo, final boolean hideConfidentialInformation)", "class_method_signature": "SCMUtil.getConnectionString(final Properties versionInfo, final boolean hideConfidentialInformation)", "testcase": false, "constructor": false}, {"identifier": "getRevision", "parameters": "(final Properties versionInfo)", "modifiers": "public static", "return": "String", "signature": "String getRevision(final Properties versionInfo)", "full_signature": "public static String getRevision(final Properties versionInfo)", "class_method_signature": "SCMUtil.getRevision(final Properties versionInfo)", "testcase": false, "constructor": false}, {"identifier": "getDepotPath", "parameters": "(String fullDepotPath)", "modifiers": "private static", "return": "String", "signature": "String getDepotPath(String fullDepotPath)", "full_signature": "private static String getDepotPath(String fullDepotPath)", "class_method_signature": "SCMUtil.getDepotPath(String fullDepotPath)", "testcase": false, "constructor": false}], "file": "modules/xcode-maven-plugin/src/main/java/com/sap/prd/mobile/ios/mios/SCMUtil.java"}, "focal_method": {"identifier": "getConnectionString", "parameters": "(final Properties versionInfo, final boolean hideConfidentialInformation)", "modifiers": "public static", "return": "String", "body": "public static String getConnectionString(final Properties versionInfo, final boolean hideConfidentialInformation) throws IOException {\n\n    final String type = versionInfo.getProperty(\"type\");\n\n    final StringBuilder connectionString = new StringBuilder(128);\n\n    if (type != null && type.equals(\"git\")) {\n\n      final String repo = versionInfo.getProperty(\"repo\");\n\n      if(StringUtils.isBlank(repo))\n      {\n        if(! StringUtils.isBlank(versionInfo.getProperty(\"repo_1\")))\n        {\n          throw new IllegalStateException(\"Multipe git repositories provided. This use case is not supported. Provide only one git repository.\"); \n        }\n        throw new IllegalStateException(\"No git repository provided. \");\n      }\n\n      if(hideConfidentialInformation) {\n        try {\n          URI uri = new URI(repo);\n          int port = uri.getPort();\n          if(port == -1) \n          {\n            final String scheme = uri.getScheme();\n            if(scheme != null && gitDefaultPorts.containsKey(scheme))\n            {\n              port = gitDefaultPorts.get(scheme);\n            }\n          }\n          connectionString.append(port);\n\n          if(uri.getHost() != null)\n          {\n            connectionString.append(uri.getPath());\n          }\n        }\n        catch (URISyntaxException e) {\n          throw new IllegalStateException(String.format(\"Invalid repository uri: %s\", repo));\n        }\n      } else {\n        connectionString.append(PROTOCOL_PREFIX_GIT).append(repo);\n      }\n\n    } else {\n\n      final String port = versionInfo.getProperty(\"port\");\n\n      if(StringUtils.isBlank(port))\n        throw new IllegalStateException(\"No SCM port provided.\");\n            \n      final String depotPath = versionInfo.getProperty(\"depotpath\");\n\n      if(hideConfidentialInformation) {\n        try {\n          URI perforceUri = new URI(\"perforce://\" + port);\n          \n          int _port = perforceUri.getPort();\n          if(_port == -1) {\n            _port = PERFORCE_DEFAULT_PORT;\n          }\n          connectionString.append(_port);\n          connectionString.append(depotPath);\n        }\n        catch (URISyntaxException e) {\n          throw new IllegalStateException(String.format(\"Invalid port: %s\", port));\n        }\n      } else {\n\n        if(StringUtils.isBlank(depotPath))\n          throw new IllegalStateException(\"No depot path provided.\");\n\n        connectionString.append(PROTOCOL_PREFIX_PERFORCE)\n        .append(port).append(\":\")\n        .append(getDepotPath(depotPath));\n      } \n    }\n\n    return connectionString.toString();\n  }", "signature": "String getConnectionString(final Properties versionInfo, final boolean hideConfidentialInformation)", "full_signature": "public static String getConnectionString(final Properties versionInfo, final boolean hideConfidentialInformation)", "class_method_signature": "SCMUtil.getConnectionString(final Properties versionInfo, final boolean hideConfidentialInformation)", "testcase": false, "constructor": false, "invocations": ["getProperty", "equals", "getProperty", "isBlank", "isBlank", "getProperty", "getPort", "getScheme", "containsKey", "get", "append", "getHost", "append", "getPath", "format", "append", "append", "getProperty", "isBlank", "getProperty", "getPort", "append", "append", "format", "isBlank", "append", "append", "append", "append", "getDepotPath", "toString"]}, "repository": {"repo_id": 3513261, "url": "https://github.com/sap-production/xcode-maven-plugin", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 66, "size": 12424, "license": "licensed"}}