{"test_class": {"identifier": "VersionInfoPListManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder tempFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "tempFolder = new TemporaryFolder()", "var_name": "tempFolder"}, {"original_string": "private File plistFilePerforce;", "modifier": "private", "type": "File", "declarator": "plistFilePerforce", "var_name": "plistFilePerforce"}, {"original_string": "private File plistFileGit;", "modifier": "private", "type": "File", "declarator": "plistFileGit", "var_name": "plistFileGit"}, {"original_string": "private PListAccessor plistAccessorPerforce;", "modifier": "private", "type": "PListAccessor", "declarator": "plistAccessorPerforce", "var_name": "plistAccessorPerforce"}, {"original_string": "private PListAccessor plistAccessorGit;", "modifier": "private", "type": "PListAccessor", "declarator": "plistAccessorGit", "var_name": "plistAccessorGit"}], "file": "modules/xcode-maven-plugin/src/test/java/com/sap/prd/mobile/ios/mios/VersionInfoPListManagerTest.java"}, "test_case": {"identifier": "testScmPortForPerforceHideConfidentialInformation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n  public void testScmPortForPerforceHideConfidentialInformation() {\n    SCM scm = new SCM();\n\n    scm.setConnection(\"scm:perforce:p4.example.com:1666://MyProject\");\n    Dependency dependency = new Dependency();\n    dependency.setScm(scm);\n    String port = VersionInfoPListManager.getScmPort(dependency, true);\n    Assert.assertEquals(\"1666//MyProject\", port);\n  }", "signature": "void testScmPortForPerforceHideConfidentialInformation()", "full_signature": "@Test public void testScmPortForPerforceHideConfidentialInformation()", "class_method_signature": "VersionInfoPListManagerTest.testScmPortForPerforceHideConfidentialInformation()", "testcase": true, "constructor": false, "invocations": ["setConnection", "setScm", "getScmPort", "assertEquals"]}, "focal_class": {"identifier": "VersionInfoPListManager", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createVersionInfoPlistFile", "parameters": "(final String groupId, final String artifactId, final String version,\n        final File syncInfoFile, List<Dependency> dependencies, File file, boolean hideConfidentialInformation)", "modifiers": "", "return": "void", "signature": "void createVersionInfoPlistFile(final String groupId, final String artifactId, final String version,\n        final File syncInfoFile, List<Dependency> dependencies, File file, boolean hideConfidentialInformation)", "full_signature": " void createVersionInfoPlistFile(final String groupId, final String artifactId, final String version,\n        final File syncInfoFile, List<Dependency> dependencies, File file, boolean hideConfidentialInformation)", "class_method_signature": "VersionInfoPListManager.createVersionInfoPlistFile(final String groupId, final String artifactId, final String version,\n        final File syncInfoFile, List<Dependency> dependencies, File file, boolean hideConfidentialInformation)", "testcase": false, "constructor": false}, {"identifier": "createVersionInfoPlistFile", "parameters": "(final String groupId, final String artifactId, final String version,\n        Properties versionInfo, List<Dependency> dependencies, File file, boolean hideConfidentialInformation)", "modifiers": "private", "return": "void", "signature": "void createVersionInfoPlistFile(final String groupId, final String artifactId, final String version,\n        Properties versionInfo, List<Dependency> dependencies, File file, boolean hideConfidentialInformation)", "full_signature": "private void createVersionInfoPlistFile(final String groupId, final String artifactId, final String version,\n        Properties versionInfo, List<Dependency> dependencies, File file, boolean hideConfidentialInformation)", "class_method_signature": "VersionInfoPListManager.createVersionInfoPlistFile(final String groupId, final String artifactId, final String version,\n        Properties versionInfo, List<Dependency> dependencies, File file, boolean hideConfidentialInformation)", "testcase": false, "constructor": false}, {"identifier": "addDependencyToPlist", "parameters": "(List<Dependency> dependencies, PListAccessor plistAccessor, String path,\n        boolean hideConfidentialInformation)", "modifiers": "", "return": "void", "signature": "void addDependencyToPlist(List<Dependency> dependencies, PListAccessor plistAccessor, String path,\n        boolean hideConfidentialInformation)", "full_signature": " void addDependencyToPlist(List<Dependency> dependencies, PListAccessor plistAccessor, String path,\n        boolean hideConfidentialInformation)", "class_method_signature": "VersionInfoPListManager.addDependencyToPlist(List<Dependency> dependencies, PListAccessor plistAccessor, String path,\n        boolean hideConfidentialInformation)", "testcase": false, "constructor": false}, {"identifier": "getScmPort", "parameters": "(Dependency dep, boolean hideConfidentialInformation)", "modifiers": "static", "return": "String", "signature": "String getScmPort(Dependency dep, boolean hideConfidentialInformation)", "full_signature": "static String getScmPort(Dependency dep, boolean hideConfidentialInformation)", "class_method_signature": "VersionInfoPListManager.getScmPort(Dependency dep, boolean hideConfidentialInformation)", "testcase": false, "constructor": false}], "file": "modules/xcode-maven-plugin/src/main/java/com/sap/prd/mobile/ios/mios/VersionInfoPListManager.java"}, "focal_method": {"identifier": "getScmPort", "parameters": "(Dependency dep, boolean hideConfidentialInformation)", "modifiers": "static", "return": "String", "body": "static String getScmPort(Dependency dep, boolean hideConfidentialInformation)\n  {\n    if (!hideConfidentialInformation) {\n      return dep.getScm().getConnection();\n    } else {\n\n      String[] parts = dep.getScm().getConnection().split(\":\");\n      String port;\n      if (parts.length == 1)\n      {\n        port = parts[0]; // the connection string in the dependency hides already the confidential information.\n      }\n      else\n      {\n        int index;\n        \n        if(!parts[0].equals(\"scm\"))\n          throw new IllegalStateException(String.format(\"Invalid connection string: '%s'.\", dep.getScm().getConnection()));\n        \n        if(parts[3].startsWith(\"//github\")){\n\t\treturn \"\"; //scm:git:git://host/user/path\n        } else if(parts[1].equals(\"perforce\")) {\n          index = 3; //scm:perforce:PERFORCEHOST:4321:PATH\n        } else if(parts[1].equals(\"git\")) {\n          index = 4; //scm:git:ssh://user@host:port/path\n        } else {\n          throw new IllegalStateException(String.format(\"Invalid scm type (%s) found in connection string (%s).\", parts[1], dep.getScm().getConnection()));\n        }\n\n        port = parts[index];\n        if(parts.length > index + 1) {\n//          port += \":\";\n          port += parts[index + 1];\n        }\n\n      }\n      return port;\n      \n    }\n  }", "signature": "String getScmPort(Dependency dep, boolean hideConfidentialInformation)", "full_signature": "static String getScmPort(Dependency dep, boolean hideConfidentialInformation)", "class_method_signature": "VersionInfoPListManager.getScmPort(Dependency dep, boolean hideConfidentialInformation)", "testcase": false, "constructor": false, "invocations": ["getConnection", "getScm", "split", "getConnection", "getScm", "equals", "format", "getConnection", "getScm", "startsWith", "equals", "equals", "format", "getConnection", "getScm"]}, "repository": {"repo_id": 3513261, "url": "https://github.com/sap-production/xcode-maven-plugin", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 66, "size": 12424, "license": "licensed"}}