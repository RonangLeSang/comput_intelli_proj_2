{"test_class": {"identifier": "HandlerChainImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "annotations-impl/src/test/java/org/ocpsoft/rewrite/annotation/HandlerChainImplTest.java"}, "test_case": {"identifier": "testTwoHandlers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testTwoHandlers()\n   {\n\n      List<String> log = new ArrayList<String>();\n\n      HandlerChainImpl chain = new HandlerChainImpl(new ClassContextImpl(ConfigurationBuilder.begin(),\n               TestAnnotationHandler.class), TestAnnotationHandler.class, Arrays.asList(\n               new TestAnnotationHandler(\"First\", log),\n               new TestAnnotationHandler(\"Second\", log)\n               ));\n\n      chain.proceed();\n\n      assertEquals(Arrays.asList(\n               \"Before: First\",\n               \"Before: Second\",\n               \"After: Second\",\n               \"After: First\"\n               ), log);\n\n   }", "signature": "void testTwoHandlers()", "full_signature": "@Test public void testTwoHandlers()", "class_method_signature": "HandlerChainImplTest.testTwoHandlers()", "testcase": true, "constructor": false, "invocations": ["begin", "asList", "proceed", "assertEquals", "asList"]}, "focal_class": {"identifier": "HandlerChainImpl", "superclass": "", "interfaces": "implements HandlerChain", "fields": [{"original_string": "private final ClassContext context;", "modifier": "private final", "type": "ClassContext", "declarator": "context", "var_name": "context"}, {"original_string": "private AnnotatedElement element;", "modifier": "private", "type": "AnnotatedElement", "declarator": "element", "var_name": "element"}, {"original_string": "private final List<AnnotationHandler<Annotation>> handlers;", "modifier": "private final", "type": "List<AnnotationHandler<Annotation>>", "declarator": "handlers", "var_name": "handlers"}, {"original_string": "private int pos = 0;", "modifier": "private", "type": "int", "declarator": "pos = 0", "var_name": "pos"}], "methods": [{"identifier": "HandlerChainImpl", "parameters": "(ClassContext context, AnnotatedElement element, List<? extends AnnotationHandler<?>> handlers)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " HandlerChainImpl(ClassContext context, AnnotatedElement element, List<? extends AnnotationHandler<?>> handlers)", "full_signature": "@SuppressWarnings(\"unchecked\") public  HandlerChainImpl(ClassContext context, AnnotatedElement element, List<? extends AnnotationHandler<?>> handlers)", "class_method_signature": "HandlerChainImpl.HandlerChainImpl(ClassContext context, AnnotatedElement element, List<? extends AnnotationHandler<?>> handlers)", "testcase": false, "constructor": true}, {"identifier": "proceed", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void proceed()", "full_signature": "@Override public void proceed()", "class_method_signature": "HandlerChainImpl.proceed()", "testcase": false, "constructor": false}], "file": "annotations-impl/src/main/java/org/ocpsoft/rewrite/annotation/HandlerChainImpl.java"}, "focal_method": {"identifier": "proceed", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n   public void proceed()\n   {\n      if (pos < handlers.size()) {\n         AnnotationHandler<Annotation> handler = handlers.get(pos++);\n         Annotation annotation = element.getAnnotation(handler.handles());\n         Assert.notNull(annotation, \"Could not find annotation [\" + handler.handles().getName() + \"] on: \" + element);\n         handler.process(context, annotation, this);\n      }\n\n   }", "signature": "void proceed()", "full_signature": "@Override public void proceed()", "class_method_signature": "HandlerChainImpl.proceed()", "testcase": false, "constructor": false, "invocations": ["size", "get", "getAnnotation", "handles", "notNull", "getName", "handles", "process"]}, "repository": {"repo_id": 1946637, "url": "https://github.com/ocpsoft/rewrite", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 167, "size": 8176, "license": "licensed"}}