{"test_class": {"identifier": "AddressBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "addressbuilder/src/test/java/org/ocpsoft/urlbuilder/AddressBuilderTest.java"}, "test_case": {"identifier": "testFromStringOnlyWithPathAndQuery2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testFromStringOnlyWithPathAndQuery2()\n   {\n      Address address = AddressBuilder.create(\"search?q=foobar\");\n      assertEquals(null, address.getScheme());\n      assertEquals(null, address.getDomain());\n      assertEquals(null, address.getPort());\n      assertEquals(\"search\", address.getPath());\n      assertEquals(\"q=foobar\", address.getQuery());\n      assertEquals(\"search?q=foobar\", address.getPathAndQuery());\n   }", "signature": "void testFromStringOnlyWithPathAndQuery2()", "full_signature": "@Test public void testFromStringOnlyWithPathAndQuery2()", "class_method_signature": "AddressBuilderTest.testFromStringOnlyWithPathAndQuery2()", "testcase": true, "constructor": false, "invocations": ["create", "assertEquals", "getScheme", "assertEquals", "getDomain", "assertEquals", "getPort", "assertEquals", "getPath", "assertEquals", "getQuery", "assertEquals", "getPathAndQuery"]}, "focal_class": {"identifier": "AddressBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private volatile Address address;", "modifier": "private volatile", "type": "Address", "declarator": "address", "var_name": "address"}, {"original_string": "protected volatile CharSequence scheme;", "modifier": "protected volatile", "type": "CharSequence", "declarator": "scheme", "var_name": "scheme"}, {"original_string": "protected volatile CharSequence schemeSpecificPart;", "modifier": "protected volatile", "type": "CharSequence", "declarator": "schemeSpecificPart", "var_name": "schemeSpecificPart"}, {"original_string": "protected volatile CharSequence domain;", "modifier": "protected volatile", "type": "CharSequence", "declarator": "domain", "var_name": "domain"}, {"original_string": "protected volatile Integer port;", "modifier": "protected volatile", "type": "Integer", "declarator": "port", "var_name": "port"}, {"original_string": "protected volatile CharSequence path;", "modifier": "protected volatile", "type": "CharSequence", "declarator": "path", "var_name": "path"}, {"original_string": "protected Map<CharSequence, Parameter> parameters = new LinkedHashMap<CharSequence, Parameter>();", "modifier": "protected", "type": "Map<CharSequence, Parameter>", "declarator": "parameters = new LinkedHashMap<CharSequence, Parameter>()", "var_name": "parameters"}, {"original_string": "protected Map<CharSequence, Parameter> queries = new LinkedHashMap<CharSequence, Parameter>();", "modifier": "protected", "type": "Map<CharSequence, Parameter>", "declarator": "queries = new LinkedHashMap<CharSequence, Parameter>()", "var_name": "queries"}, {"original_string": "protected CharSequence anchor;", "modifier": "protected", "type": "CharSequence", "declarator": "anchor", "var_name": "anchor"}], "methods": [{"identifier": "AddressBuilder", "parameters": "()", "modifiers": "protected", "return": "", "signature": " AddressBuilder()", "full_signature": "protected  AddressBuilder()", "class_method_signature": "AddressBuilder.AddressBuilder()", "testcase": false, "constructor": true}, {"identifier": "begin", "parameters": "()", "modifiers": "public static", "return": "AddressBuilderBase", "signature": "AddressBuilderBase begin()", "full_signature": "public static AddressBuilderBase begin()", "class_method_signature": "AddressBuilder.begin()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "protected", "return": "Address", "signature": "Address build()", "full_signature": "protected Address build()", "class_method_signature": "AddressBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "buildLiteral", "parameters": "()", "modifiers": "protected", "return": "Address", "signature": "Address buildLiteral()", "full_signature": "protected Address buildLiteral()", "class_method_signature": "AddressBuilder.buildLiteral()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String url)", "modifiers": "public static", "return": "Address", "signature": "Address create(String url)", "full_signature": "public static Address create(String url)", "class_method_signature": "AddressBuilder.create(String url)", "testcase": false, "constructor": false}, {"identifier": "scheme", "parameters": "(CharSequence scheme)", "modifiers": "", "return": "AddressBuilderScheme", "signature": "AddressBuilderScheme scheme(CharSequence scheme)", "full_signature": " AddressBuilderScheme scheme(CharSequence scheme)", "class_method_signature": "AddressBuilder.scheme(CharSequence scheme)", "testcase": false, "constructor": false}, {"identifier": "schemeSpecificPart", "parameters": "(CharSequence schemeSpecificPart)", "modifiers": "", "return": "AddressBuilderSchemeSpecificPart", "signature": "AddressBuilderSchemeSpecificPart schemeSpecificPart(CharSequence schemeSpecificPart)", "full_signature": " AddressBuilderSchemeSpecificPart schemeSpecificPart(CharSequence schemeSpecificPart)", "class_method_signature": "AddressBuilder.schemeSpecificPart(CharSequence schemeSpecificPart)", "testcase": false, "constructor": false}, {"identifier": "domain", "parameters": "(CharSequence domain)", "modifiers": "", "return": "AddressBuilderDomain", "signature": "AddressBuilderDomain domain(CharSequence domain)", "full_signature": " AddressBuilderDomain domain(CharSequence domain)", "class_method_signature": "AddressBuilder.domain(CharSequence domain)", "testcase": false, "constructor": false}, {"identifier": "port", "parameters": "(int port)", "modifiers": "", "return": "AddressBuilderPort", "signature": "AddressBuilderPort port(int port)", "full_signature": " AddressBuilderPort port(int port)", "class_method_signature": "AddressBuilder.port(int port)", "testcase": false, "constructor": false}, {"identifier": "path", "parameters": "(CharSequence path)", "modifiers": "", "return": "AddressBuilderPath", "signature": "AddressBuilderPath path(CharSequence path)", "full_signature": " AddressBuilderPath path(CharSequence path)", "class_method_signature": "AddressBuilder.path(CharSequence path)", "testcase": false, "constructor": false}, {"identifier": "pathDecoded", "parameters": "(CharSequence path)", "modifiers": "", "return": "AddressBuilderPath", "signature": "AddressBuilderPath pathDecoded(CharSequence path)", "full_signature": " AddressBuilderPath pathDecoded(CharSequence path)", "class_method_signature": "AddressBuilder.pathDecoded(CharSequence path)", "testcase": false, "constructor": false}, {"identifier": "pathEncoded", "parameters": "(CharSequence path)", "modifiers": "", "return": "AddressBuilderPath", "signature": "AddressBuilderPath pathEncoded(CharSequence path)", "full_signature": " AddressBuilderPath pathEncoded(CharSequence path)", "class_method_signature": "AddressBuilder.pathEncoded(CharSequence path)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(CharSequence name, Object... values)", "modifiers": "", "return": "AddressBuilderQuery", "signature": "AddressBuilderQuery query(CharSequence name, Object... values)", "full_signature": " AddressBuilderQuery query(CharSequence name, Object... values)", "class_method_signature": "AddressBuilder.query(CharSequence name, Object... values)", "testcase": false, "constructor": false}, {"identifier": "queryDecoded", "parameters": "(CharSequence name, Object... values)", "modifiers": "", "return": "AddressBuilderQuery", "signature": "AddressBuilderQuery queryDecoded(CharSequence name, Object... values)", "full_signature": " AddressBuilderQuery queryDecoded(CharSequence name, Object... values)", "class_method_signature": "AddressBuilder.queryDecoded(CharSequence name, Object... values)", "testcase": false, "constructor": false}, {"identifier": "queryEncoded", "parameters": "(CharSequence name, Object... values)", "modifiers": "", "return": "AddressBuilderQuery", "signature": "AddressBuilderQuery queryEncoded(CharSequence name, Object... values)", "full_signature": " AddressBuilderQuery queryEncoded(CharSequence name, Object... values)", "class_method_signature": "AddressBuilder.queryEncoded(CharSequence name, Object... values)", "testcase": false, "constructor": false}, {"identifier": "queryLiteral", "parameters": "(String query)", "modifiers": "", "return": "AddressBuilderQuery", "signature": "AddressBuilderQuery queryLiteral(String query)", "full_signature": " AddressBuilderQuery queryLiteral(String query)", "class_method_signature": "AddressBuilder.queryLiteral(String query)", "testcase": false, "constructor": false}, {"identifier": "decodeHTMLAmpersands", "parameters": "(String url)", "modifiers": "private", "return": "String", "signature": "String decodeHTMLAmpersands(String url)", "full_signature": "private String decodeHTMLAmpersands(String url)", "class_method_signature": "AddressBuilder.decodeHTMLAmpersands(String url)", "testcase": false, "constructor": false}, {"identifier": "anchor", "parameters": "(CharSequence anchor)", "modifiers": "", "return": "AddressBuilderAnchor", "signature": "AddressBuilderAnchor anchor(CharSequence anchor)", "full_signature": " AddressBuilderAnchor anchor(CharSequence anchor)", "class_method_signature": "AddressBuilder.anchor(CharSequence anchor)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(CharSequence name, Object... values)", "modifiers": "", "return": "void", "signature": "void set(CharSequence name, Object... values)", "full_signature": " void set(CharSequence name, Object... values)", "class_method_signature": "AddressBuilder.set(CharSequence name, Object... values)", "testcase": false, "constructor": false}, {"identifier": "setDecoded", "parameters": "(CharSequence name, Object... values)", "modifiers": "", "return": "void", "signature": "void setDecoded(CharSequence name, Object... values)", "full_signature": " void setDecoded(CharSequence name, Object... values)", "class_method_signature": "AddressBuilder.setDecoded(CharSequence name, Object... values)", "testcase": false, "constructor": false}, {"identifier": "setEncoded", "parameters": "(CharSequence name, Object... values)", "modifiers": "", "return": "void", "signature": "void setEncoded(CharSequence name, Object... values)", "full_signature": " void setEncoded(CharSequence name, Object... values)", "class_method_signature": "AddressBuilder.setEncoded(CharSequence name, Object... values)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AddressBuilder.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Address address)", "modifiers": "static", "return": "StringBuilder", "signature": "StringBuilder toString(Address address)", "full_signature": "static StringBuilder toString(Address address)", "class_method_signature": "AddressBuilder.toString(Address address)", "testcase": false, "constructor": false}, {"identifier": "getQueries", "parameters": "()", "modifiers": "", "return": "Map<String, List<Object>>", "signature": "Map<String, List<Object>> getQueries()", "full_signature": " Map<String, List<Object>> getQueries()", "class_method_signature": "AddressBuilder.getQueries()", "testcase": false, "constructor": false}], "file": "addressbuilder/src/main/java/org/ocpsoft/urlbuilder/AddressBuilder.java"}, "focal_method": {"identifier": "create", "parameters": "(String url)", "modifiers": "public static", "return": "Address", "body": "public static Address create(String url) throws IllegalArgumentException\n   {\n      try {\n         URI u = new URI(url);\n         String scheme = u.getScheme();\n         String host = u.getHost();\n         if (scheme != null && host == null)\n            return AddressBuilder.begin().scheme(u.getScheme()).schemeSpecificPart(u.getRawSchemeSpecificPart())\n                     .buildLiteral();\n         else\n            return AddressBuilder.begin().scheme(scheme).domain(host).port(u.getPort())\n                     .path(u.getRawPath()).queryLiteral(u.getRawQuery()).anchor(u.getRawFragment()).buildLiteral();\n      }\n      catch (URISyntaxException e) {\n         throw new IllegalArgumentException(\n                  \"[\" + url + \"] is not a valid URL fragment. Consider encoding relevant portions of the URL with [\"\n                           + Encoder.class\n                           + \"], or use the provided builder pattern via this class to specify part encoding.\", e);\n      }\n   }", "signature": "Address create(String url)", "full_signature": "public static Address create(String url)", "class_method_signature": "AddressBuilder.create(String url)", "testcase": false, "constructor": false, "invocations": ["getScheme", "getHost", "buildLiteral", "schemeSpecificPart", "scheme", "begin", "getScheme", "getRawSchemeSpecificPart", "buildLiteral", "anchor", "queryLiteral", "path", "port", "domain", "scheme", "begin", "getPort", "getRawPath", "getRawQuery", "getRawFragment"]}, "repository": {"repo_id": 1946637, "url": "https://github.com/ocpsoft/rewrite", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 167, "size": 8176, "license": "licensed"}}