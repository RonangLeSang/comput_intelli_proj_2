{"test_class": {"identifier": "ParseToolsTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/org/ocpsoft/rewrite/util/ParseToolsTest.java"}, "test_case": {"identifier": "testBalancedCaptureNested5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testBalancedCaptureNested5()\n   {\n      CapturingGroup group = ParseTools.balancedCapture(\"(one(two)(three(four(five))))\".toCharArray(), 20, 28,\n               CaptureType.PAREN);\n      Assert.assertEquals(25, group.getEnd());\n      Assert.assertArrayEquals(\"five\".toCharArray(), group.getCaptured());\n   }", "signature": "void testBalancedCaptureNested5()", "full_signature": "@Test public void testBalancedCaptureNested5()", "class_method_signature": "ParseToolsTest.testBalancedCaptureNested5()", "testcase": true, "constructor": false, "invocations": ["balancedCapture", "toCharArray", "assertEquals", "getEnd", "assertArrayEquals", "toCharArray", "getCaptured"]}, "focal_class": {"identifier": "ParseTools", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char ESCAPE_CHAR = '\\\\';", "modifier": "private static final", "type": "char", "declarator": "ESCAPE_CHAR = '\\\\'", "var_name": "ESCAPE_CHAR"}], "methods": [{"identifier": "balancedCapture", "parameters": "(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)", "modifiers": "public static", "return": "CapturingGroup", "signature": "CapturingGroup balancedCapture(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)", "full_signature": "public static CapturingGroup balancedCapture(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)", "class_method_signature": "ParseTools.balancedCapture(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)", "testcase": false, "constructor": false}, {"identifier": "isEscaped", "parameters": "(final char[] chars, final int cursor)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEscaped(final char[] chars, final int cursor)", "full_signature": "public static boolean isEscaped(final char[] chars, final int cursor)", "class_method_signature": "ParseTools.isEscaped(final char[] chars, final int cursor)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/ocpsoft/rewrite/util/ParseTools.java"}, "focal_method": {"identifier": "balancedCapture", "parameters": "(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)", "modifiers": "public static", "return": "CapturingGroup", "body": "public static CapturingGroup balancedCapture(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)\n   {\n      Assert.notNull(chars, \"Character input array must not be null.\");\n      Assert.assertTrue(startPos >= 0, \"Start position must be greater than zero.\");\n      Assert.assertTrue(startPos < (chars.length - 1),\n               \"Start position must be at least one character before the array upper bound.\");\n      Assert.assertTrue(endPos > 0, \"End position must be greater than zero.\");\n      Assert.assertTrue(endPos < chars.length, \"End position must be less than or equal to the array upper bound.\");\n      Assert.assertTrue(startPos < endPos, \"Start position must be less than end position.\");\n\n      Assert.assertTrue(chars[startPos] == type.getBegin(), \"Character at starting position was [\" + chars[startPos]\n               + \"] but expected [\" + type.getBegin() + \"]\");\n\n      if (isEscaped(chars, startPos))\n      {\n         throw new IllegalArgumentException(\n                  \"Character at starting position is escaped, and cannot be used in capturing a group.\");\n      }\n\n      char begin = type.getBegin();\n      char end = type.getEnd();\n\n      int cursor = startPos + 1;\n      Stack<Integer> beginPositions = new Stack<Integer>();\n      beginPositions.push(cursor);\n      while ((cursor <= endPos) && (beginPositions.size() > 0))\n      {\n         char character = chars[cursor];\n         if (character == end)\n         {\n            if (!isEscaped(chars, cursor))\n            {\n               beginPositions.pop();\n            }\n         }\n         else if (character == begin)\n         {\n            if (!isEscaped(chars, cursor))\n            {\n               beginPositions.push(cursor);\n            }\n         }\n\n         if (beginPositions.size() == 0)\n         {\n            break;\n         }\n         cursor++;\n      }\n\n      if (beginPositions.size() > 0)\n      {\n         throw new IllegalArgumentException(\n                  \"Unclosed capturing group at index [\" + beginPositions.peek() + \"] of [\" + new String(chars) + \"]\");\n      }\n\n      return new CapturingGroup(chars, startPos, cursor);\n   }", "signature": "CapturingGroup balancedCapture(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)", "full_signature": "public static CapturingGroup balancedCapture(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)", "class_method_signature": "ParseTools.balancedCapture(final char[] chars, final int startPos, final int endPos,\n            final CaptureType type)", "testcase": false, "constructor": false, "invocations": ["notNull", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBegin", "getBegin", "isEscaped", "getBegin", "getEnd", "push", "size", "isEscaped", "pop", "isEscaped", "push", "size", "size", "peek"]}, "repository": {"repo_id": 1946637, "url": "https://github.com/ocpsoft/rewrite", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 167, "size": 8176, "license": "licensed"}}