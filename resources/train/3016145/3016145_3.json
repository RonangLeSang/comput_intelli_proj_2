{"test_class": {"identifier": "ChunkedDocumentReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String docStr;", "modifier": "private", "type": "String", "declarator": "docStr", "var_name": "docStr"}, {"original_string": "private InputStream docStream;", "modifier": "private", "type": "InputStream", "declarator": "docStream", "var_name": "docStream"}, {"original_string": "private static ChunkedDocumentReader reader;", "modifier": "private static", "type": "ChunkedDocumentReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "core/src/test/java/edu/washington/cs/knowitall/nlp/ChunkedDocumentReaderTest.java"}, "test_case": {"identifier": "testReadDocumentFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadDocumentFile() throws Exception {\n        File temp = folder.newFile(\"tmp\");\n        FileWriter w = new FileWriter(temp);\n        w.write(docStr);\n        w.close();\n        ChunkedDocument doc = reader.readDocument(temp);\n        assertEquals(temp.getAbsolutePath(), doc.getId());\n        assertEquals(2, doc.getSentences().size());\n    }", "signature": "void testReadDocumentFile()", "full_signature": "@Test public void testReadDocumentFile()", "class_method_signature": "ChunkedDocumentReaderTest.testReadDocumentFile()", "testcase": true, "constructor": false, "invocations": ["newFile", "write", "close", "readDocument", "assertEquals", "getAbsolutePath", "getId", "assertEquals", "size", "getSentences"]}, "focal_class": {"identifier": "ChunkedDocumentReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SentenceExtractor sentExtractor;", "modifier": "private", "type": "SentenceExtractor", "declarator": "sentExtractor", "var_name": "sentExtractor"}, {"original_string": "private SentenceChunker sentChunker;", "modifier": "private", "type": "SentenceChunker", "declarator": "sentChunker", "var_name": "sentChunker"}], "methods": [{"identifier": "ChunkedDocumentReader", "parameters": "(SentenceExtractor sentExtractor,\n            SentenceChunker sentChunker)", "modifiers": "public", "return": "", "signature": " ChunkedDocumentReader(SentenceExtractor sentExtractor,\n            SentenceChunker sentChunker)", "full_signature": "public  ChunkedDocumentReader(SentenceExtractor sentExtractor,\n            SentenceChunker sentChunker)", "class_method_signature": "ChunkedDocumentReader.ChunkedDocumentReader(SentenceExtractor sentExtractor,\n            SentenceChunker sentChunker)", "testcase": false, "constructor": true}, {"identifier": "ChunkedDocumentReader", "parameters": "(SentenceExtractor sentExtractor)", "modifiers": "public", "return": "", "signature": " ChunkedDocumentReader(SentenceExtractor sentExtractor)", "full_signature": "public  ChunkedDocumentReader(SentenceExtractor sentExtractor)", "class_method_signature": "ChunkedDocumentReader.ChunkedDocumentReader(SentenceExtractor sentExtractor)", "testcase": false, "constructor": true}, {"identifier": "ChunkedDocumentReader", "parameters": "(SentenceChunker sentChunker)", "modifiers": "public", "return": "", "signature": " ChunkedDocumentReader(SentenceChunker sentChunker)", "full_signature": "public  ChunkedDocumentReader(SentenceChunker sentChunker)", "class_method_signature": "ChunkedDocumentReader.ChunkedDocumentReader(SentenceChunker sentChunker)", "testcase": false, "constructor": true}, {"identifier": "ChunkedDocumentReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChunkedDocumentReader()", "full_signature": "public  ChunkedDocumentReader()", "class_method_signature": "ChunkedDocumentReader.ChunkedDocumentReader()", "testcase": false, "constructor": true}, {"identifier": "getSentenceExtractor", "parameters": "()", "modifiers": "public", "return": "SentenceExtractor", "signature": "SentenceExtractor getSentenceExtractor()", "full_signature": "public SentenceExtractor getSentenceExtractor()", "class_method_signature": "ChunkedDocumentReader.getSentenceExtractor()", "testcase": false, "constructor": false}, {"identifier": "getSentenceChunker", "parameters": "()", "modifiers": "public", "return": "SentenceChunker", "signature": "SentenceChunker getSentenceChunker()", "full_signature": "public SentenceChunker getSentenceChunker()", "class_method_signature": "ChunkedDocumentReader.getSentenceChunker()", "testcase": false, "constructor": false}, {"identifier": "readDocument", "parameters": "(InputStream input, String id)", "modifiers": "public", "return": "ChunkedDocument", "signature": "ChunkedDocument readDocument(InputStream input, String id)", "full_signature": "public ChunkedDocument readDocument(InputStream input, String id)", "class_method_signature": "ChunkedDocumentReader.readDocument(InputStream input, String id)", "testcase": false, "constructor": false}, {"identifier": "readDocument", "parameters": "(File file)", "modifiers": "public", "return": "ChunkedDocument", "signature": "ChunkedDocument readDocument(File file)", "full_signature": "public ChunkedDocument readDocument(File file)", "class_method_signature": "ChunkedDocumentReader.readDocument(File file)", "testcase": false, "constructor": false}, {"identifier": "readDocument", "parameters": "(String docStr, String id)", "modifiers": "public", "return": "ChunkedDocument", "signature": "ChunkedDocument readDocument(String docStr, String id)", "full_signature": "public ChunkedDocument readDocument(String docStr, String id)", "class_method_signature": "ChunkedDocumentReader.readDocument(String docStr, String id)", "testcase": false, "constructor": false}], "file": "core/src/main/java/edu/washington/cs/knowitall/nlp/ChunkedDocumentReader.java"}, "focal_method": {"identifier": "readDocument", "parameters": "(InputStream input, String id)", "modifiers": "public", "return": "ChunkedDocument", "body": "public ChunkedDocument readDocument(InputStream input, String id)\n            throws ExtractorException {\n        StringWriter writer = new StringWriter();\n        InputStreamReader reader = new InputStreamReader(input);\n        try {\n            FileUtils.pipe(reader, writer);\n            return readDocument(writer.toString(), id);\n        } catch (IOException e) {\n            String msg = String.format(\"Could not read document %s\", id);\n            throw new ExtractorException(msg, e);\n        }\n    }", "signature": "ChunkedDocument readDocument(InputStream input, String id)", "full_signature": "public ChunkedDocument readDocument(InputStream input, String id)", "class_method_signature": "ChunkedDocumentReader.readDocument(InputStream input, String id)", "testcase": false, "constructor": false, "invocations": ["pipe", "readDocument", "toString", "format"]}, "repository": {"repo_id": 3016145, "url": "https://github.com/knowitall/reverb", "language": "Java", "is_fork": false, "fork_count": 137, "stargazer_count": 500, "size": 11891, "license": "licensed"}}