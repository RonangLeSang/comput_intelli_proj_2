{"test_class": {"identifier": "TwilioAdapterTest", "superclass": "extends TestFramework", "interfaces": "", "fields": [{"original_string": "Logger log = Logger.getLogger( TwilioAdapterTest.class.getName() );", "modifier": "", "type": "Logger", "declarator": "log = Logger.getLogger( TwilioAdapterTest.class.getName() )", "var_name": "log"}, {"original_string": "protected static final String COMMENT_QUESTION_ID = \"1\";", "modifier": "protected static final", "type": "String", "declarator": "COMMENT_QUESTION_ID = \"1\"", "var_name": "COMMENT_QUESTION_ID"}, {"original_string": "protected static final String COMMENT_QUESTION_AUDIO = \"http://audio\";", "modifier": "protected static final", "type": "String", "declarator": "COMMENT_QUESTION_AUDIO = \"http://audio\"", "var_name": "COMMENT_QUESTION_AUDIO"}, {"original_string": "protected static final String COMMENT_QUESTION_TEXT = \"text://Hello World\";", "modifier": "protected static final", "type": "String", "declarator": "COMMENT_QUESTION_TEXT = \"text://Hello World\"", "var_name": "COMMENT_QUESTION_TEXT"}, {"original_string": "protected static final String REFERRAL_PHONE_NUMBER = \"tel:0612345679\";", "modifier": "protected static final", "type": "String", "declarator": "REFERRAL_PHONE_NUMBER = \"tel:0612345679\"", "var_name": "REFERRAL_PHONE_NUMBER"}, {"original_string": "protected static final String secondRemoteAddress = \"0612345678\";", "modifier": "protected static final", "type": "String", "declarator": "secondRemoteAddress = \"0612345678\"", "var_name": "secondRemoteAddress"}], "file": "dialoghandler/src/test/java/com/almende/dialog/adapter/TwilioAdapterTest.java"}, "test_case": {"identifier": "renderClosedQuestionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void renderClosedQuestionTest() throws Exception {\n\n        Question question = getClosedQuestion( false );\n        AdapterConfig adapter = createTwilioAdapter();\n        Session session = createSession(adapter, remoteAddressVoice);\n        String result = renderQuestion( question, adapter, session);\n\n        Document doc = getXMLDocumentBuilder( result );\n        Node response = doc.getFirstChild();\n        Node gather = response.getFirstChild();\n        Node play1 = gather.getFirstChild();\n        Node play2 = play1.getNextSibling();\n        Node play3 = play2.getNextSibling();\n        Node redirect = gather.getNextSibling();\n\n        assertEquals( \"Gather\", gather.getNodeName() );\n        assertEquals( \"GET\", gather.getAttributes().getNamedItem( \"method\" )\n            .getTextContent() );\n        assertTrue( gather.getAttributes().getNamedItem( \"action\" )\n            .getTextContent().endsWith( \"/dialoghandler/rest/twilio/answer\" ) );\n        assertEquals( \"Play\", play1.getNodeName() );\n        assertEquals( \"http://audio\", play1.getTextContent() );\n        assertEquals( \"Play\", play2.getNodeName() );\n        assertEquals( \"http://answer1.wav\", play2.getTextContent() );\n        assertEquals( \"Play\", play3.getNodeName() );\n        assertEquals( \"http://answer2.wav\", play3.getTextContent() );\n        assertEquals( \"Redirect\", redirect.getNodeName() );\n        assertTrue( redirect.getTextContent()\n            .endsWith( \"/dialoghandler/rest/twilio/timeout\" ) );\n\n        assertEquals( \"GET\", redirect.getAttributes().getNamedItem( \"method\" )\n            .getTextContent() );\n    }", "signature": "void renderClosedQuestionTest()", "full_signature": "@Test public void renderClosedQuestionTest()", "class_method_signature": "TwilioAdapterTest.renderClosedQuestionTest()", "testcase": true, "constructor": false, "invocations": ["getClosedQuestion", "createTwilioAdapter", "createSession", "renderQuestion", "getXMLDocumentBuilder", "getFirstChild", "getFirstChild", "getFirstChild", "getNextSibling", "getNextSibling", "getNextSibling", "assertEquals", "getNodeName", "assertEquals", "getTextContent", "getNamedItem", "getAttributes", "assertTrue", "endsWith", "getTextContent", "getNamedItem", "getAttributes", "assertEquals", "getNodeName", "assertEquals", "getTextContent", "assertEquals", "getNodeName", "assertEquals", "getTextContent", "assertEquals", "getNodeName", "assertEquals", "getTextContent", "assertEquals", "getNodeName", "assertTrue", "endsWith", "getTextContent", "assertEquals", "getTextContent", "getNamedItem", "getAttributes"]}, "focal_class": {"identifier": "TwilioAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger log = Logger.getLogger(TwilioAdapter.class.getName());", "modifier": "protected static final", "type": "Logger", "declarator": "log = Logger.getLogger(TwilioAdapter.class.getName())", "var_name": "log"}, {"original_string": "protected static final com.almende.dialog.Logger dialogLog = new com.almende.dialog.Logger();", "modifier": "protected static final", "type": "com.almende.dialog.Logger", "declarator": "dialogLog = new com.almende.dialog.Logger()", "var_name": "dialogLog"}, {"original_string": "private static final int LOOP_DETECTION = 10;", "modifier": "private static final", "type": "int", "declarator": "LOOP_DETECTION = 10", "var_name": "LOOP_DETECTION"}, {"original_string": "protected String TIMEOUT_URL = \"timeout\";", "modifier": "protected", "type": "String", "declarator": "TIMEOUT_URL = \"timeout\"", "var_name": "TIMEOUT_URL"}, {"original_string": "protected static final String CONFERENCE_ROOM_NAME_KEY = \"CONFERENCE_ROOM_NAME\";", "modifier": "protected static final", "type": "String", "declarator": "CONFERENCE_ROOM_NAME_KEY = \"CONFERENCE_ROOM_NAME\"", "var_name": "CONFERENCE_ROOM_NAME_KEY"}], "methods": [{"identifier": "dial", "parameters": "(Map<String, String> addressNameMap, String dialogIdOrUrl,\n        AdapterConfig config, String accountId, String applicationId, String bearerToken)", "modifiers": "public static", "return": "HashMap<String, String>", "signature": "HashMap<String, String> dial(Map<String, String> addressNameMap, String dialogIdOrUrl,\n        AdapterConfig config, String accountId, String applicationId, String bearerToken)", "full_signature": "public static HashMap<String, String> dial(Map<String, String> addressNameMap, String dialogIdOrUrl,\n        AdapterConfig config, String accountId, String applicationId, String bearerToken)", "class_method_signature": "TwilioAdapter.dial(Map<String, String> addressNameMap, String dialogIdOrUrl,\n        AdapterConfig config, String accountId, String applicationId, String bearerToken)", "testcase": false, "constructor": false}, {"identifier": "getNewDialog", "parameters": "(@QueryParam(\"CallSid\") String CallSid, @QueryParam(\"AccountSid\") String AccountSid,\n        @QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction, \n        @QueryParam(\"ForwardedFrom\") String forwardedFrom, @QueryParam(\"CallStatus\") String callStatus, @QueryParam(\"isTest\") Boolean isTest)", "modifiers": "@Path(\"new\") @GET @Produces(\"application/xml\") public", "return": "Response", "signature": "Response getNewDialog(@QueryParam(\"CallSid\") String CallSid, @QueryParam(\"AccountSid\") String AccountSid,\n        @QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction, \n        @QueryParam(\"ForwardedFrom\") String forwardedFrom, @QueryParam(\"CallStatus\") String callStatus, @QueryParam(\"isTest\") Boolean isTest)", "full_signature": "@Path(\"new\") @GET @Produces(\"application/xml\") public Response getNewDialog(@QueryParam(\"CallSid\") String CallSid, @QueryParam(\"AccountSid\") String AccountSid,\n        @QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction, \n        @QueryParam(\"ForwardedFrom\") String forwardedFrom, @QueryParam(\"CallStatus\") String callStatus, @QueryParam(\"isTest\") Boolean isTest)", "class_method_signature": "TwilioAdapter.getNewDialog(@QueryParam(\"CallSid\") String CallSid, @QueryParam(\"AccountSid\") String AccountSid,\n        @QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction, \n        @QueryParam(\"ForwardedFrom\") String forwardedFrom, @QueryParam(\"CallStatus\") String callStatus, @QueryParam(\"isTest\") Boolean isTest)", "testcase": false, "constructor": false}, {"identifier": "getNewDialogPost", "parameters": "(@FormParam(\"CallSid\") String CallSid, @FormParam(\"AccountSid\") String AccountSid,\n        @FormParam(\"From\") String localID, @FormParam(\"To\") String remoteID, @FormParam(\"Direction\") String direction,\n        @FormParam(\"ForwardedFrom\") String forwardedFrom, @FormParam(\"CallStatus\") String callStatus, @QueryParam(\"isTest\") Boolean isTest)", "modifiers": "@Path(\"new\") @POST @Produces(\"application/xml\") public", "return": "Response", "signature": "Response getNewDialogPost(@FormParam(\"CallSid\") String CallSid, @FormParam(\"AccountSid\") String AccountSid,\n        @FormParam(\"From\") String localID, @FormParam(\"To\") String remoteID, @FormParam(\"Direction\") String direction,\n        @FormParam(\"ForwardedFrom\") String forwardedFrom, @FormParam(\"CallStatus\") String callStatus, @QueryParam(\"isTest\") Boolean isTest)", "full_signature": "@Path(\"new\") @POST @Produces(\"application/xml\") public Response getNewDialogPost(@FormParam(\"CallSid\") String CallSid, @FormParam(\"AccountSid\") String AccountSid,\n        @FormParam(\"From\") String localID, @FormParam(\"To\") String remoteID, @FormParam(\"Direction\") String direction,\n        @FormParam(\"ForwardedFrom\") String forwardedFrom, @FormParam(\"CallStatus\") String callStatus, @QueryParam(\"isTest\") Boolean isTest)", "class_method_signature": "TwilioAdapter.getNewDialogPost(@FormParam(\"CallSid\") String CallSid, @FormParam(\"AccountSid\") String AccountSid,\n        @FormParam(\"From\") String localID, @FormParam(\"To\") String remoteID, @FormParam(\"Direction\") String direction,\n        @FormParam(\"ForwardedFrom\") String forwardedFrom, @FormParam(\"CallStatus\") String callStatus, @QueryParam(\"isTest\") Boolean isTest)", "testcase": false, "constructor": false}, {"identifier": "answer", "parameters": "(@QueryParam(\"answerId\") String answer_id, @QueryParam(\"Digits\") String answer_input,\n        @QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID,\n        @QueryParam(\"Direction\") String direction, @QueryParam(\"RecordingUrl\") String recordingUrl,\n        @QueryParam(\"DialCallStatus\") String dialCallStatus, @QueryParam(\"DialCallSid\") String dialCallSid,\n        @QueryParam(\"CallSid\") String callSid, @QueryParam(\"ConferenceSid\") String conferenceSid, \n        @QueryParam(\"CallStatus\") String callStatus)", "modifiers": "@Path(\"answer\") @GET @Produces(\"application/xml\") public", "return": "Response", "signature": "Response answer(@QueryParam(\"answerId\") String answer_id, @QueryParam(\"Digits\") String answer_input,\n        @QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID,\n        @QueryParam(\"Direction\") String direction, @QueryParam(\"RecordingUrl\") String recordingUrl,\n        @QueryParam(\"DialCallStatus\") String dialCallStatus, @QueryParam(\"DialCallSid\") String dialCallSid,\n        @QueryParam(\"CallSid\") String callSid, @QueryParam(\"ConferenceSid\") String conferenceSid, \n        @QueryParam(\"CallStatus\") String callStatus)", "full_signature": "@Path(\"answer\") @GET @Produces(\"application/xml\") public Response answer(@QueryParam(\"answerId\") String answer_id, @QueryParam(\"Digits\") String answer_input,\n        @QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID,\n        @QueryParam(\"Direction\") String direction, @QueryParam(\"RecordingUrl\") String recordingUrl,\n        @QueryParam(\"DialCallStatus\") String dialCallStatus, @QueryParam(\"DialCallSid\") String dialCallSid,\n        @QueryParam(\"CallSid\") String callSid, @QueryParam(\"ConferenceSid\") String conferenceSid, \n        @QueryParam(\"CallStatus\") String callStatus)", "class_method_signature": "TwilioAdapter.answer(@QueryParam(\"answerId\") String answer_id, @QueryParam(\"Digits\") String answer_input,\n        @QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID,\n        @QueryParam(\"Direction\") String direction, @QueryParam(\"RecordingUrl\") String recordingUrl,\n        @QueryParam(\"DialCallStatus\") String dialCallStatus, @QueryParam(\"DialCallSid\") String dialCallSid,\n        @QueryParam(\"CallSid\") String callSid, @QueryParam(\"ConferenceSid\") String conferenceSid, \n        @QueryParam(\"CallStatus\") String callStatus)", "testcase": false, "constructor": false}, {"identifier": "timeout", "parameters": "(@QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID,\n        @QueryParam(\"Direction\") String direction, @QueryParam(\"CallSid\") String callSid, @QueryParam(\"CallStatus\") String callStatus)", "modifiers": "@Path(\"timeout\") @GET @Produces(\"application/xml\") public", "return": "Response", "signature": "Response timeout(@QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID,\n        @QueryParam(\"Direction\") String direction, @QueryParam(\"CallSid\") String callSid, @QueryParam(\"CallStatus\") String callStatus)", "full_signature": "@Path(\"timeout\") @GET @Produces(\"application/xml\") public Response timeout(@QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID,\n        @QueryParam(\"Direction\") String direction, @QueryParam(\"CallSid\") String callSid, @QueryParam(\"CallStatus\") String callStatus)", "class_method_signature": "TwilioAdapter.timeout(@QueryParam(\"From\") String localID, @QueryParam(\"To\") String remoteID,\n        @QueryParam(\"Direction\") String direction, @QueryParam(\"CallSid\") String callSid, @QueryParam(\"CallStatus\") String callStatus)", "testcase": false, "constructor": false}, {"identifier": "preconnect", "parameters": "(@QueryParam(\"From\") String localID, @QueryParam(\"AccountSid\") String accountSid,\n        @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction,\n        @QueryParam(\"CallSid\") String callSid, @QueryParam(\"ParentCallSid\") String parentCallSid)", "modifiers": "@Path(\"preconnect\") @GET @Produces(\"application/xml\") public", "return": "Response", "signature": "Response preconnect(@QueryParam(\"From\") String localID, @QueryParam(\"AccountSid\") String accountSid,\n        @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction,\n        @QueryParam(\"CallSid\") String callSid, @QueryParam(\"ParentCallSid\") String parentCallSid)", "full_signature": "@Path(\"preconnect\") @GET @Produces(\"application/xml\") public Response preconnect(@QueryParam(\"From\") String localID, @QueryParam(\"AccountSid\") String accountSid,\n        @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction,\n        @QueryParam(\"CallSid\") String callSid, @QueryParam(\"ParentCallSid\") String parentCallSid)", "class_method_signature": "TwilioAdapter.preconnect(@QueryParam(\"From\") String localID, @QueryParam(\"AccountSid\") String accountSid,\n        @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction,\n        @QueryParam(\"CallSid\") String callSid, @QueryParam(\"ParentCallSid\") String parentCallSid)", "testcase": false, "constructor": false}, {"identifier": "receiveCCMessage", "parameters": "(@QueryParam(\"CallSid\") String callSid, @QueryParam(\"From\") String localID,\n        @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction,\n        @QueryParam(\"CallStatus\") String status)", "modifiers": "@Path(\"cc\") @GET public", "return": "Response", "signature": "Response receiveCCMessage(@QueryParam(\"CallSid\") String callSid, @QueryParam(\"From\") String localID,\n        @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction,\n        @QueryParam(\"CallStatus\") String status)", "full_signature": "@Path(\"cc\") @GET public Response receiveCCMessage(@QueryParam(\"CallSid\") String callSid, @QueryParam(\"From\") String localID,\n        @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction,\n        @QueryParam(\"CallStatus\") String status)", "class_method_signature": "TwilioAdapter.receiveCCMessage(@QueryParam(\"CallSid\") String callSid, @QueryParam(\"From\") String localID,\n        @QueryParam(\"To\") String remoteID, @QueryParam(\"Direction\") String direction,\n        @QueryParam(\"CallStatus\") String status)", "testcase": false, "constructor": false}, {"identifier": "answered", "parameters": "(String direction, String remoteID, String localID, String sessionKey)", "modifiers": "public", "return": "void", "signature": "void answered(String direction, String remoteID, String localID, String sessionKey)", "full_signature": "public void answered(String direction, String remoteID, String localID, String sessionKey)", "class_method_signature": "TwilioAdapter.answered(String direction, String remoteID, String localID, String sessionKey)", "testcase": false, "constructor": false}, {"identifier": "finalizeCall", "parameters": "(AdapterConfig config, Session session, String callSid, String remoteID)", "modifiers": "private", "return": "void", "signature": "void finalizeCall(AdapterConfig config, Session session, String callSid, String remoteID)", "full_signature": "private void finalizeCall(AdapterConfig config, Session session, String callSid, String remoteID)", "class_method_signature": "TwilioAdapter.finalizeCall(AdapterConfig config, Session session, String callSid, String remoteID)", "testcase": false, "constructor": false}, {"identifier": "hangup", "parameters": "(Session session)", "modifiers": "public", "return": "Response", "signature": "Response hangup(Session session)", "full_signature": "public Response hangup(Session session)", "class_method_signature": "TwilioAdapter.hangup(Session session)", "testcase": false, "constructor": false}, {"identifier": "updateSessionWithCallTimes", "parameters": "(Session session, Call call)", "modifiers": "public static", "return": "Session", "signature": "Session updateSessionWithCallTimes(Session session, Call call)", "full_signature": "public static Session updateSessionWithCallTimes(Session session, Call call)", "class_method_signature": "TwilioAdapter.updateSessionWithCallTimes(Session session, Call call)", "testcase": false, "constructor": false}, {"identifier": "getTimeMap", "parameters": "( String startTime, String answerTime, String releaseTime )", "modifiers": "private", "return": "HashMap<String, Object>", "signature": "HashMap<String, Object> getTimeMap( String startTime, String answerTime, String releaseTime )", "full_signature": "private HashMap<String, Object> getTimeMap( String startTime, String answerTime, String releaseTime )", "class_method_signature": "TwilioAdapter.getTimeMap( String startTime, String answerTime, String releaseTime )", "testcase": false, "constructor": false}, {"identifier": "isEventTriggered", "parameters": "(String eventName, Session session)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEventTriggered(String eventName, Session session)", "full_signature": "private static boolean isEventTriggered(String eventName, Session session)", "class_method_signature": "TwilioAdapter.isEventTriggered(String eventName, Session session)", "testcase": false, "constructor": false}, {"identifier": "formQuestion", "parameters": "(Question question, String adapterID, String address, String ddrRecordId,\n        Session session, Map<String, String> extraParams)", "modifiers": "public", "return": "Return", "signature": "Return formQuestion(Question question, String adapterID, String address, String ddrRecordId,\n        Session session, Map<String, String> extraParams)", "full_signature": "public Return formQuestion(Question question, String adapterID, String address, String ddrRecordId,\n        Session session, Map<String, String> extraParams)", "class_method_signature": "TwilioAdapter.formQuestion(Question question, String adapterID, String address, String ddrRecordId,\n        Session session, Map<String, String> extraParams)", "testcase": false, "constructor": false}, {"identifier": "getTwilioAccount", "parameters": "(String accountSid, String authToken)", "modifiers": "public static", "return": "Account", "signature": "Account getTwilioAccount(String accountSid, String authToken)", "full_signature": "public static Account getTwilioAccount(String accountSid, String authToken)", "class_method_signature": "TwilioAdapter.getTwilioAccount(String accountSid, String authToken)", "testcase": false, "constructor": false}, {"identifier": "renderComment", "parameters": "(Question question, ArrayList<String> prompts, String sessionKey)", "modifiers": "protected", "return": "String", "signature": "String renderComment(Question question, ArrayList<String> prompts, String sessionKey)", "full_signature": "protected String renderComment(Question question, ArrayList<String> prompts, String sessionKey)", "class_method_signature": "TwilioAdapter.renderComment(Question question, ArrayList<String> prompts, String sessionKey)", "testcase": false, "constructor": false}, {"identifier": "renderReferral", "parameters": "(Question question,ArrayList<String> prompts, String sessionKey, String remoteID)", "modifiers": "protected", "return": "String", "signature": "String renderReferral(Question question,ArrayList<String> prompts, String sessionKey, String remoteID)", "full_signature": "protected String renderReferral(Question question,ArrayList<String> prompts, String sessionKey, String remoteID)", "class_method_signature": "TwilioAdapter.renderReferral(Question question,ArrayList<String> prompts, String sessionKey, String remoteID)", "testcase": false, "constructor": false}, {"identifier": "renderClosedQuestion", "parameters": "(Question question, ArrayList<String> prompts, String sessionKey)", "modifiers": "protected", "return": "String", "signature": "String renderClosedQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "full_signature": "protected String renderClosedQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "class_method_signature": "TwilioAdapter.renderClosedQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "testcase": false, "constructor": false}, {"identifier": "renderOpenQuestion", "parameters": "(Question question, ArrayList<String> prompts, String sessionKey)", "modifiers": "protected", "return": "String", "signature": "String renderOpenQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "full_signature": "protected String renderOpenQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "class_method_signature": "TwilioAdapter.renderOpenQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "testcase": false, "constructor": false}, {"identifier": "renderVoiceMailQuestion", "parameters": "(Question question, ArrayList<String> prompts, String sessionKey,\n        TwiMLResponse twiml)", "modifiers": "protected", "return": "void", "signature": "void renderVoiceMailQuestion(Question question, ArrayList<String> prompts, String sessionKey,\n        TwiMLResponse twiml)", "full_signature": "protected void renderVoiceMailQuestion(Question question, ArrayList<String> prompts, String sessionKey,\n        TwiMLResponse twiml)", "class_method_signature": "TwilioAdapter.renderVoiceMailQuestion(Question question, ArrayList<String> prompts, String sessionKey,\n        TwiMLResponse twiml)", "testcase": false, "constructor": false}, {"identifier": "renderExitQuestion", "parameters": "(Question question, List<String> prompts, String sessionKey)", "modifiers": "protected", "return": "String", "signature": "String renderExitQuestion(Question question, List<String> prompts, String sessionKey)", "full_signature": "protected String renderExitQuestion(Question question, List<String> prompts, String sessionKey)", "class_method_signature": "TwilioAdapter.renderExitQuestion(Question question, List<String> prompts, String sessionKey)", "testcase": false, "constructor": false}, {"identifier": "renderConferenceQuestion", "parameters": "(Question question, List<String> prompts, String sessionKey)", "modifiers": "protected", "return": "String", "signature": "String renderConferenceQuestion(Question question, List<String> prompts, String sessionKey)", "full_signature": "protected String renderConferenceQuestion(Question question, List<String> prompts, String sessionKey)", "class_method_signature": "TwilioAdapter.renderConferenceQuestion(Question question, List<String> prompts, String sessionKey)", "testcase": false, "constructor": false}, {"identifier": "addPrompts", "parameters": "(List<String> prompts, Verb twiml, TTSInfo ttsInfo)", "modifiers": "protected", "return": "void", "signature": "void addPrompts(List<String> prompts, Verb twiml, TTSInfo ttsInfo)", "full_signature": "protected void addPrompts(List<String> prompts, Verb twiml, TTSInfo ttsInfo)", "class_method_signature": "TwilioAdapter.addPrompts(List<String> prompts, Verb twiml, TTSInfo ttsInfo)", "testcase": false, "constructor": false}, {"identifier": "formatPrompt", "parameters": "(String prompt)", "modifiers": "private", "return": "String", "signature": "String formatPrompt(String prompt)", "full_signature": "private String formatPrompt(String prompt)", "class_method_signature": "TwilioAdapter.formatPrompt(String prompt)", "testcase": false, "constructor": false}, {"identifier": "handleQuestion", "parameters": "(Question question, AdapterConfig adapterConfig, String remoteID, Session session,\n        Map<String, String> extraParams)", "modifiers": "private", "return": "Response", "signature": "Response handleQuestion(Question question, AdapterConfig adapterConfig, String remoteID, Session session,\n        Map<String, String> extraParams)", "full_signature": "private Response handleQuestion(Question question, AdapterConfig adapterConfig, String remoteID, Session session,\n        Map<String, String> extraParams)", "class_method_signature": "TwilioAdapter.handleQuestion(Question question, AdapterConfig adapterConfig, String remoteID, Session session,\n        Map<String, String> extraParams)", "testcase": false, "constructor": false}, {"identifier": "updateSessionOnRedirect", "parameters": "(Question question, AdapterConfig adapterConfig, String originalRemoteID,\n        Session session, String referralFromID, String referralToId)", "modifiers": "private", "return": "void", "signature": "void updateSessionOnRedirect(Question question, AdapterConfig adapterConfig, String originalRemoteID,\n        Session session, String referralFromID, String referralToId)", "full_signature": "private void updateSessionOnRedirect(Question question, AdapterConfig adapterConfig, String originalRemoteID,\n        Session session, String referralFromID, String referralToId)", "class_method_signature": "TwilioAdapter.updateSessionOnRedirect(Question question, AdapterConfig adapterConfig, String originalRemoteID,\n        Session session, String referralFromID, String referralToId)", "testcase": false, "constructor": false}, {"identifier": "getAnswerUrl", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getAnswerUrl()", "full_signature": "protected String getAnswerUrl()", "class_method_signature": "TwilioAdapter.getAnswerUrl()", "testcase": false, "constructor": false}, {"identifier": "getTimeoutUrl", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getTimeoutUrl()", "full_signature": "protected String getTimeoutUrl()", "class_method_signature": "TwilioAdapter.getTimeoutUrl()", "testcase": false, "constructor": false}, {"identifier": "getPreconnectUrl", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getPreconnectUrl()", "full_signature": "protected String getPreconnectUrl()", "class_method_signature": "TwilioAdapter.getPreconnectUrl()", "testcase": false, "constructor": false}, {"identifier": "getCCUrl", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getCCUrl()", "full_signature": "protected String getCCUrl()", "class_method_signature": "TwilioAdapter.getCCUrl()", "testcase": false, "constructor": false}, {"identifier": "checkAnonymousCallerId", "parameters": "(String callerId)", "modifiers": "private", "return": "String", "signature": "String checkAnonymousCallerId(String callerId)", "full_signature": "private String checkAnonymousCallerId(String callerId)", "class_method_signature": "TwilioAdapter.checkAnonymousCallerId(String callerId)", "testcase": false, "constructor": false}, {"identifier": "storeAudioFile", "parameters": "(String url, String accountId, String ddrId, String adapterId)", "modifiers": "private", "return": "String", "signature": "String storeAudioFile(String url, String accountId, String ddrId, String adapterId)", "full_signature": "private String storeAudioFile(String url, String accountId, String ddrId, String adapterId)", "class_method_signature": "TwilioAdapter.storeAudioFile(String url, String accountId, String ddrId, String adapterId)", "testcase": false, "constructor": false}, {"identifier": "fetchSessionFromParent", "parameters": "(String localID, String remoteID, String accountSid, String callSid,\n        String parentCallSid)", "modifiers": "public", "return": "Session", "signature": "Session fetchSessionFromParent(String localID, String remoteID, String accountSid, String callSid,\n        String parentCallSid)", "full_signature": "public Session fetchSessionFromParent(String localID, String remoteID, String accountSid, String callSid,\n        String parentCallSid)", "class_method_signature": "TwilioAdapter.fetchSessionFromParent(String localID, String remoteID, String accountSid, String callSid,\n        String parentCallSid)", "testcase": false, "constructor": false}, {"identifier": "convertTextsToTTSURLS", "parameters": "(Question question, Return res, Session session)", "modifiers": "private", "return": "void", "signature": "void convertTextsToTTSURLS(Question question, Return res, Session session)", "full_signature": "private void convertTextsToTTSURLS(Question question, Return res, Session session)", "class_method_signature": "TwilioAdapter.convertTextsToTTSURLS(Question question, Return res, Session session)", "testcase": false, "constructor": false}], "file": "dialoghandler/src/main/java/com/almende/dialog/adapter/TwilioAdapter.java"}, "focal_method": {"identifier": "renderClosedQuestion", "parameters": "(Question question, ArrayList<String> prompts, String sessionKey)", "modifiers": "protected", "return": "String", "body": "protected String renderClosedQuestion(Question question, ArrayList<String> prompts, String sessionKey) {\n\n        try {\n            sessionKey = URLEncoder.encode(sessionKey, \"UTF-8\");\n        }\n        catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n\n        TwiMLResponse twiml = new TwiMLResponse();\n        Gather gather = new Gather();\n        gather.setAction(getAnswerUrl());\n        gather.setMethod(\"GET\");\n        gather.setNumDigits(1);\n\n        String noAnswerTimeout = question.getMediaPropertyValue(MediumType.BROADSOFT, MediaPropertyKey.TIMEOUT);\n        \n        boolean useHash = true;\n        if(question.getAnswers().size() > 11) {\n        \tuseHash = false;\n        }\n        else {\n            List<Answer> answers = question.getAnswers();\n            for (Answer answer : answers) {\n                if (answer != null && answer.getAnswer_text() != null &&\n                    answer.getAnswer_text().startsWith(\"dtmfKey://#\")) {\n\n                    useHash = true;\n                    break;\n                }\n            }\n        }\n        \n        //assign a default timeout if one is not specified\n        noAnswerTimeout = noAnswerTimeout != null ? noAnswerTimeout : \"5\";\n        if (noAnswerTimeout.endsWith(\"s\")) {\n            log.warning(\"No answer timeout must end with 's'. E.g. 10s. Found: \" + noAnswerTimeout);\n            noAnswerTimeout = noAnswerTimeout.replace(\"s\", \"\");\n        }\n        int timeout = 5;\n        try {\n            timeout = Integer.parseInt(noAnswerTimeout);\n        }\n        catch (NumberFormatException e) {\n            e.printStackTrace();\n        }\n        gather.setTimeout(timeout);\n        if(useHash) {\n        \tgather.setFinishOnKey(\"\");\n        }\n        try {\n            addPrompts(prompts, gather, ServerUtils.getTTSInfoFromSession(question, sessionKey));\n            twiml.append(gather);\n            Redirect redirect = new Redirect(getTimeoutUrl());\n            redirect.setMethod(\"GET\");\n            twiml.append(redirect);\n        }\n        catch (TwiMLException e) {\n            e.printStackTrace();\n        }\n\n        return twiml.toXML();\n    }", "signature": "String renderClosedQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "full_signature": "protected String renderClosedQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "class_method_signature": "TwilioAdapter.renderClosedQuestion(Question question, ArrayList<String> prompts, String sessionKey)", "testcase": false, "constructor": false, "invocations": ["encode", "printStackTrace", "setAction", "getAnswerUrl", "setMethod", "setNumDigits", "getMediaPropertyValue", "size", "getAnswers", "getAnswers", "getAnswer_text", "startsWith", "getAnswer_text", "endsWith", "warning", "replace", "parseInt", "printStackTrace", "setTimeout", "setFinishOnKey", "addPrompts", "getTTSInfoFromSession", "append", "getTimeoutUrl", "setMethod", "append", "printStackTrace", "toXML"]}, "repository": {"repo_id": 3429525, "url": "https://github.com/almende/dialog", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 59928, "license": "licensed"}}