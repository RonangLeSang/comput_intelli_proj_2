{"test_class": {"identifier": "DependencyConfigurationUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXAMPLE_POM_PATH = \"testProject/pom.xml\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_POM_PATH = \"testProject/pom.xml\"", "var_name": "EXAMPLE_POM_PATH"}, {"original_string": "private static final String EXAMPLE_POM2_PATH = \"testProject/test/pom.xml\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_POM2_PATH = \"testProject/test/pom.xml\"", "var_name": "EXAMPLE_POM2_PATH"}, {"original_string": "private static final String EXAMPLE_REPO_ID = \"test\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_REPO_ID = \"test\"", "var_name": "EXAMPLE_REPO_ID"}, {"original_string": "private static final String EXAMPLE_REPO_TYPE = \"default\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_REPO_TYPE = \"default\"", "var_name": "EXAMPLE_REPO_TYPE"}, {"original_string": "private static final String EXAMPLE_REPO_URL = \"http://example.org/maven/repo\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_REPO_URL = \"http://example.org/maven/repo\"", "var_name": "EXAMPLE_REPO_URL"}, {"original_string": "private static final String EXAMPLE_MAVEN_REPO = String.format(\"%s|%s|%s\", \n            EXAMPLE_REPO_ID, EXAMPLE_REPO_TYPE, EXAMPLE_REPO_URL);", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_MAVEN_REPO = String.format(\"%s|%s|%s\", \n            EXAMPLE_REPO_ID, EXAMPLE_REPO_TYPE, EXAMPLE_REPO_URL)", "var_name": "EXAMPLE_MAVEN_REPO"}, {"original_string": "private static final String EXAMPLE_REPO2_ID = \"test2\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_REPO2_ID = \"test2\"", "var_name": "EXAMPLE_REPO2_ID"}, {"original_string": "private static final String EXAMPLE_REPO2_TYPE = \"legacy\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_REPO2_TYPE = \"legacy\"", "var_name": "EXAMPLE_REPO2_TYPE"}, {"original_string": "private static final String EXAMPLE_REPO2_URL = \"http://example.org/maven/repo2\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_REPO2_URL = \"http://example.org/maven/repo2\"", "var_name": "EXAMPLE_REPO2_URL"}, {"original_string": "private static final String EXAMPLE_MAVEN_REPO2 = String.format(\"%s|%s|%s\", \n            EXAMPLE_REPO2_ID, EXAMPLE_REPO2_TYPE, EXAMPLE_REPO2_URL);", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_MAVEN_REPO2 = String.format(\"%s|%s|%s\", \n            EXAMPLE_REPO2_ID, EXAMPLE_REPO2_TYPE, EXAMPLE_REPO2_URL)", "var_name": "EXAMPLE_MAVEN_REPO2"}, {"original_string": "private static final String EXAMPLE_APP_GROUPID = \"org.example\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_APP_GROUPID = \"org.example\"", "var_name": "EXAMPLE_APP_GROUPID"}, {"original_string": "private static final String EXAMPLE_APP_ARTIFACTID = \"best.app.ever\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_APP_ARTIFACTID = \"best.app.ever\"", "var_name": "EXAMPLE_APP_ARTIFACTID"}, {"original_string": "private static final String EXAMPLE_APP_VERSION = \"1.0\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_APP_VERSION = \"1.0\"", "var_name": "EXAMPLE_APP_VERSION"}, {"original_string": "private static final String EXAMPLE_APP_COORDS = String.format(\"%s:%s:%s\", \n            EXAMPLE_APP_GROUPID, EXAMPLE_APP_ARTIFACTID, EXAMPLE_APP_VERSION);", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_APP_COORDS = String.format(\"%s:%s:%s\", \n            EXAMPLE_APP_GROUPID, EXAMPLE_APP_ARTIFACTID, EXAMPLE_APP_VERSION)", "var_name": "EXAMPLE_APP_COORDS"}, {"original_string": "private static final String EXAMPLE_APP2_GROUPID = \"org.example\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_APP2_GROUPID = \"org.example\"", "var_name": "EXAMPLE_APP2_GROUPID"}, {"original_string": "private static final String EXAMPLE_APP2_ARTIFACTID = \"second.best.app.ever\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_APP2_ARTIFACTID = \"second.best.app.ever\"", "var_name": "EXAMPLE_APP2_ARTIFACTID"}, {"original_string": "private static final String EXAMPLE_APP2_VERSION = \"1.5-SNAPSHOT\";", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_APP2_VERSION = \"1.5-SNAPSHOT\"", "var_name": "EXAMPLE_APP2_VERSION"}, {"original_string": "private static final String EXAMPLE_APP2_COORDS = String.format(\"%s:%s:%s\", \n            EXAMPLE_APP2_GROUPID, EXAMPLE_APP2_ARTIFACTID, EXAMPLE_APP2_VERSION);", "modifier": "private static final", "type": "String", "declarator": "EXAMPLE_APP2_COORDS = String.format(\"%s:%s:%s\", \n            EXAMPLE_APP2_GROUPID, EXAMPLE_APP2_ARTIFACTID, EXAMPLE_APP2_VERSION)", "var_name": "EXAMPLE_APP2_COORDS"}, {"original_string": "@Mock\n    private MavenRepositorySystem mavenRepositorySystem;", "modifier": "@Mock\n    private", "type": "MavenRepositorySystem", "declarator": "mavenRepositorySystem", "var_name": "mavenRepositorySystem"}], "file": "provisioning/src/test/java/com/github/nethad/clustermeister/provisioning/dependencymanager/DependencyConfigurationUtilTest.java"}, "test_case": {"identifier": "testPreloadArtifact", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPreloadArtifact() throws DependencyResolutionException {\n        PropertiesConfiguration configuration = new PropertiesConfiguration();\n        configuration.addProperty(DependencyConfigurationUtil.PRELOAD_ARTIFACTS, \n                EXAMPLE_APP_COORDS);\n        \n        DependencyConfigurationUtil.getConfiguredDependencies(configuration);\n        \n        ArgumentCaptor<Artifact> artifact = ArgumentCaptor.forClass(Artifact.class);\n        \n        verify(mavenRepositorySystem, times(1)).resolveDependencies(artifact.capture(), \n                argThat(isEmptyList()), argThat(isEmptyList()));\n        assertThat(artifact.getValue().getGroupId(), is(equalTo(EXAMPLE_APP_GROUPID)));\n        assertThat(artifact.getValue().getArtifactId(), is(equalTo(EXAMPLE_APP_ARTIFACTID)));\n        assertThat(artifact.getValue().getVersion(), is(equalTo(EXAMPLE_APP_VERSION)));\n    }", "signature": "void testPreloadArtifact()", "full_signature": "@Test public void testPreloadArtifact()", "class_method_signature": "DependencyConfigurationUtilTest.testPreloadArtifact()", "testcase": true, "constructor": false, "invocations": ["addProperty", "getConfiguredDependencies", "forClass", "resolveDependencies", "verify", "times", "capture", "argThat", "isEmptyList", "argThat", "isEmptyList", "assertThat", "getGroupId", "getValue", "is", "equalTo", "assertThat", "getArtifactId", "getValue", "is", "equalTo", "assertThat", "getVersion", "getValue", "is", "equalTo"]}, "focal_class": {"identifier": "DependencyConfigurationUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MAVEN_REPOSITORIES = \"preload.maven_repositories\";", "modifier": "public static final", "type": "String", "declarator": "MAVEN_REPOSITORIES = \"preload.maven_repositories\"", "var_name": "MAVEN_REPOSITORIES"}, {"original_string": "public static final String MAVEN_REPO_LAYOUT = \"layout\";", "modifier": "public static final", "type": "String", "declarator": "MAVEN_REPO_LAYOUT = \"layout\"", "var_name": "MAVEN_REPO_LAYOUT"}, {"original_string": "public static final String MAVEN_REPO_URL = \"url\";", "modifier": "public static final", "type": "String", "declarator": "MAVEN_REPO_URL = \"url\"", "var_name": "MAVEN_REPO_URL"}, {"original_string": "public static final String PRELOAD_ARTIFACTS = \"preload.artifacts\";", "modifier": "public static final", "type": "String", "declarator": "PRELOAD_ARTIFACTS = \"preload.artifacts\"", "var_name": "PRELOAD_ARTIFACTS"}, {"original_string": "public static final String PRELOAD_EXCLUDES = \"preload.excludes\";", "modifier": "public static final", "type": "String", "declarator": "PRELOAD_EXCLUDES = \"preload.excludes\"", "var_name": "PRELOAD_EXCLUDES"}, {"original_string": "public static final String PRELOAD_POMS = \"preload.poms\";", "modifier": "public static final", "type": "String", "declarator": "PRELOAD_POMS = \"preload.poms\"", "var_name": "PRELOAD_POMS"}, {"original_string": "private final static Logger logger =\n            LoggerFactory.getLogger(Loggers.PROVISIONING);", "modifier": "private final static", "type": "Logger", "declarator": "logger =\n            LoggerFactory.getLogger(Loggers.PROVISIONING)", "var_name": "logger"}, {"original_string": "@VisibleForTesting\n    static MavenRepositorySystem repositorySystem = null;", "modifier": "@VisibleForTesting\n    static", "type": "MavenRepositorySystem", "declarator": "repositorySystem = null", "var_name": "repositorySystem"}], "methods": [{"identifier": "getConfiguredDependencies", "parameters": "(Configuration configuration)", "modifiers": "public static", "return": "Collection<File>", "signature": "Collection<File> getConfiguredDependencies(Configuration configuration)", "full_signature": "public static Collection<File> getConfiguredDependencies(Configuration configuration)", "class_method_signature": "DependencyConfigurationUtil.getConfiguredDependencies(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "addToListIfUnique", "parameters": "(List<File> dependencies, List<File> artifactsToPreload)", "modifiers": "private static", "return": "void", "signature": "void addToListIfUnique(List<File> dependencies, List<File> artifactsToPreload)", "full_signature": "private static void addToListIfUnique(List<File> dependencies, List<File> artifactsToPreload)", "class_method_signature": "DependencyConfigurationUtil.addToListIfUnique(List<File> dependencies, List<File> artifactsToPreload)", "testcase": false, "constructor": false}, {"identifier": "addDefaultGlobalExclusions", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void addDefaultGlobalExclusions()", "full_signature": "private static void addDefaultGlobalExclusions()", "class_method_signature": "DependencyConfigurationUtil.addDefaultGlobalExclusions()", "testcase": false, "constructor": false}, {"identifier": "processMavenRepositories", "parameters": "(Configuration configuration, \n            MavenRepositorySystem repositorySystem)", "modifiers": "static", "return": "void", "signature": "void processMavenRepositories(Configuration configuration, \n            MavenRepositorySystem repositorySystem)", "full_signature": "static void processMavenRepositories(Configuration configuration, \n            MavenRepositorySystem repositorySystem)", "class_method_signature": "DependencyConfigurationUtil.processMavenRepositories(Configuration configuration, \n            MavenRepositorySystem repositorySystem)", "testcase": false, "constructor": false}], "file": "provisioning/src/main/java/com/github/nethad/clustermeister/provisioning/dependencymanager/DependencyConfigurationUtil.java"}, "focal_method": {"identifier": "getConfiguredDependencies", "parameters": "(Configuration configuration)", "modifiers": "public static", "return": "Collection<File>", "body": "public static Collection<File> getConfiguredDependencies(Configuration configuration) {\n        if(repositorySystem == null) {\n            repositorySystem = new MavenRepositorySystem();\n        }\n        \n        List<File> artifactsToPreload = new LinkedList<File>();\n        \n        addDefaultGlobalExclusions();\n        \n        List<Object> excludePatterns = configuration.getList(PRELOAD_EXCLUDES, \n                Collections.EMPTY_LIST);\n        for (Object excludePattern : excludePatterns) {\n            String excludePatternString = excludePattern.toString();\n            if(excludePattern != null && !excludePatternString.isEmpty()) {\n                logger.info(\"Excluding {} from dependency resolution.\", excludePattern);\n                repositorySystem.addGlobalExclusion(excludePatternString);\n            }\n        }\n        \n        processMavenRepositories(configuration, repositorySystem);\n        \n        List<Object> artifacts = configuration.getList(PRELOAD_ARTIFACTS, \n                Collections.EMPTY_LIST);\n        for (Object artifactSpecification : artifacts) {\n            logger.info(\"Resolving artifact {}.\", artifactSpecification);\n            try {\n                List<File> dependencies = repositorySystem.\n                        resolveDependencies(artifactSpecification.toString());\n                addToListIfUnique(dependencies, artifactsToPreload);\n                logger.debug(\"{} resolved to {}.\", artifactSpecification, dependencies);\n            } catch (DependencyResolutionException ex) {\n                logger.warn(\"Could not resolve artifact {}.\", artifactSpecification, ex);\n            }\n        }\n        \n        List<Object> poms = configuration.getList(PRELOAD_POMS, \n                Collections.EMPTY_LIST);\n        for (Object pomPath : poms) {\n            logger.info(\"Resolving artifacts from POM file: {}.\", pomPath);\n            try {\n                List<File> dependencies = repositorySystem.\n                        resolveDependenciesFromPom(new File(pomPath.toString()));\n                addToListIfUnique(dependencies, artifactsToPreload);\n                logger.debug(\"{} resolved to {}.\", pomPath, dependencies);\n            } catch (DependencyResolutionException ex) {\n                logger.warn(\"Could not resolve artifacts from {}.\", pomPath, ex);\n            }\n        }\n        \n        repositorySystem = null;\n        \n        return artifactsToPreload;\n    }", "signature": "Collection<File> getConfiguredDependencies(Configuration configuration)", "full_signature": "public static Collection<File> getConfiguredDependencies(Configuration configuration)", "class_method_signature": "DependencyConfigurationUtil.getConfiguredDependencies(Configuration configuration)", "testcase": false, "constructor": false, "invocations": ["addDefaultGlobalExclusions", "getList", "toString", "isEmpty", "info", "addGlobalExclusion", "processMavenRepositories", "getList", "info", "resolveDependencies", "toString", "addToListIfUnique", "debug", "warn", "getList", "info", "resolveDependenciesFromPom", "toString", "addToListIfUnique", "debug", "warn"]}, "repository": {"repo_id": 3315140, "url": "https://github.com/nethad/clustermeister", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 27875, "license": "licensed"}}