{"test_class": {"identifier": "TorqueCommandLineEvaluationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TorqueCommandLineEvaluation commandLineEvaluation;", "modifier": "private", "type": "TorqueCommandLineEvaluation", "declarator": "commandLineEvaluation", "var_name": "commandLineEvaluation"}, {"original_string": "private CommandLineHandleMock commandLineHandle;", "modifier": "private", "type": "CommandLineHandleMock", "declarator": "commandLineHandle", "var_name": "commandLineHandle"}, {"original_string": "private JPPFSystemInformation jppfSystemInformation;", "modifier": "private", "type": "JPPFSystemInformation", "declarator": "jppfSystemInformation", "var_name": "jppfSystemInformation"}, {"original_string": "private RmiServerForApi rmiServerForApi;", "modifier": "private", "type": "RmiServerForApi", "declarator": "rmiServerForApi", "var_name": "rmiServerForApi"}, {"original_string": "private TorqueNodeManager torqueNodeManager;", "modifier": "private", "type": "TorqueNodeManager", "declarator": "torqueNodeManager", "var_name": "torqueNodeManager"}], "file": "provisioning/src/test/java/com/github/nethad/clustermeister/provisioning/torque/commands/TorqueCommandLineEvaluationTest.java"}, "test_case": {"identifier": "removeNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeNodes() {\n        SettableFuture<TorqueNode> settableFuture = SettableFuture.create();\n        settableFuture.set(null);\n        doReturn(settableFuture).when(torqueNodeManager).removeNodes(anyCollection());\n        \n        Collection<NodeInformation> allNodesFromRmi = new LinkedList<NodeInformation>();\n        allNodesFromRmi.add(new NodeInformationImpl(\"1\", null));\n        when(rmiServerForApi.getAllNodes()).thenReturn(allNodesFromRmi);\n        \n        commandLineEvaluation.handleCommand(\"removenode\", new CommandLineArguments(\"1\"));\n        \n        ArgumentCaptor<Collection> nodeUuidsCaptor = ArgumentCaptor.forClass(Collection.class);\n        verify(torqueNodeManager).removeNodes(nodeUuidsCaptor.capture());\n        assertThat(nodeUuidsCaptor.getValue().size(), is(1));\n        assertThat((Collection<String>)nodeUuidsCaptor.getValue(), hasItem(\"1\"));\n    }", "signature": "void removeNodes()", "full_signature": "@Test public void removeNodes()", "class_method_signature": "TorqueCommandLineEvaluationTest.removeNodes()", "testcase": true, "constructor": false, "invocations": ["create", "set", "removeNodes", "when", "doReturn", "anyCollection", "add", "thenReturn", "when", "getAllNodes", "handleCommand", "forClass", "removeNodes", "verify", "capture", "assertThat", "size", "getValue", "is", "assertThat", "getValue", "hasItem"]}, "focal_class": {"identifier": "TorqueCommandLineEvaluation", "superclass": "", "interfaces": "implements CommandLineEvaluation", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TorqueCommandLineEvaluation.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TorqueCommandLineEvaluation.class)", "var_name": "logger"}, {"original_string": "private final TorqueNodeManager nodeManager;", "modifier": "private final", "type": "TorqueNodeManager", "declarator": "nodeManager", "var_name": "nodeManager"}, {"original_string": "private final CommandLineHandle handle;", "modifier": "private final", "type": "CommandLineHandle", "declarator": "handle", "var_name": "handle"}, {"original_string": "@VisibleForTesting\n    private final RmiServerForApi rmiServerForApi;", "modifier": "@VisibleForTesting\n    private final", "type": "RmiServerForApi", "declarator": "rmiServerForApi", "var_name": "rmiServerForApi"}, {"original_string": "private Collection<AbstractExecutableCommand> commands = new LinkedList<AbstractExecutableCommand>();", "modifier": "private", "type": "Collection<AbstractExecutableCommand>", "declarator": "commands = new LinkedList<AbstractExecutableCommand>()", "var_name": "commands"}], "methods": [{"identifier": "TorqueCommandLineEvaluation", "parameters": "(TorqueNodeManager nodeManager, CommandLineHandle handle, RmiServerForApi rmiServerForApi)", "modifiers": "public", "return": "", "signature": " TorqueCommandLineEvaluation(TorqueNodeManager nodeManager, CommandLineHandle handle, RmiServerForApi rmiServerForApi)", "full_signature": "public  TorqueCommandLineEvaluation(TorqueNodeManager nodeManager, CommandLineHandle handle, RmiServerForApi rmiServerForApi)", "class_method_signature": "TorqueCommandLineEvaluation.TorqueCommandLineEvaluation(TorqueNodeManager nodeManager, CommandLineHandle handle, RmiServerForApi rmiServerForApi)", "testcase": false, "constructor": true}, {"identifier": "registerCommands", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerCommands()", "full_signature": "private void registerCommands()", "class_method_signature": "TorqueCommandLineEvaluation.registerCommands()", "testcase": false, "constructor": false}, {"identifier": "addAndRegisterCommand", "parameters": "(AbstractExecutableCommand command)", "modifiers": "private", "return": "void", "signature": "void addAndRegisterCommand(AbstractExecutableCommand command)", "full_signature": "private void addAndRegisterCommand(AbstractExecutableCommand command)", "class_method_signature": "TorqueCommandLineEvaluation.addAndRegisterCommand(AbstractExecutableCommand command)", "testcase": false, "constructor": false}, {"identifier": "state", "parameters": "(CommandLineArguments arguments)", "modifiers": "@Override public", "return": "void", "signature": "void state(CommandLineArguments arguments)", "full_signature": "@Override public void state(CommandLineArguments arguments)", "class_method_signature": "TorqueCommandLineEvaluation.state(CommandLineArguments arguments)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(CommandLineArguments arguments)", "modifiers": "@Override public", "return": "void", "signature": "void shutdown(CommandLineArguments arguments)", "full_signature": "@Override public void shutdown(CommandLineArguments arguments)", "class_method_signature": "TorqueCommandLineEvaluation.shutdown(CommandLineArguments arguments)", "testcase": false, "constructor": false}, {"identifier": "handleCommand", "parameters": "(String command, CommandLineArguments arguments)", "modifiers": "@Override public", "return": "void", "signature": "void handleCommand(String command, CommandLineArguments arguments)", "full_signature": "@Override public void handleCommand(String command, CommandLineArguments arguments)", "class_method_signature": "TorqueCommandLineEvaluation.handleCommand(String command, CommandLineArguments arguments)", "testcase": false, "constructor": false}, {"identifier": "getCommandLineHandle", "parameters": "()", "modifiers": "@Override public", "return": "CommandLineHandle", "signature": "CommandLineHandle getCommandLineHandle()", "full_signature": "@Override public CommandLineHandle getCommandLineHandle()", "class_method_signature": "TorqueCommandLineEvaluation.getCommandLineHandle()", "testcase": false, "constructor": false}, {"identifier": "getNodeManager", "parameters": "()", "modifiers": "public", "return": "TorqueNodeManager", "signature": "TorqueNodeManager getNodeManager()", "full_signature": "public TorqueNodeManager getNodeManager()", "class_method_signature": "TorqueCommandLineEvaluation.getNodeManager()", "testcase": false, "constructor": false}, {"identifier": "getRmiServerForApi", "parameters": "()", "modifiers": "public", "return": "RmiServerForApi", "signature": "RmiServerForApi getRmiServerForApi()", "full_signature": "public RmiServerForApi getRmiServerForApi()", "class_method_signature": "TorqueCommandLineEvaluation.getRmiServerForApi()", "testcase": false, "constructor": false}], "file": "provisioning/src/main/java/com/github/nethad/clustermeister/provisioning/torque/commands/TorqueCommandLineEvaluation.java"}, "focal_method": {"identifier": "handleCommand", "parameters": "(String command, CommandLineArguments arguments)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handleCommand(String command, CommandLineArguments arguments) {\n        for (AbstractExecutableCommand executableCommand : commands) {\n            if (executableCommand.getCommandName().equals(command)) {\n                executableCommand.execute(arguments);\n            }\n        }\n    }", "signature": "void handleCommand(String command, CommandLineArguments arguments)", "full_signature": "@Override public void handleCommand(String command, CommandLineArguments arguments)", "class_method_signature": "TorqueCommandLineEvaluation.handleCommand(String command, CommandLineArguments arguments)", "testcase": false, "constructor": false, "invocations": ["equals", "getCommandName", "execute"]}, "repository": {"repo_id": 3315140, "url": "https://github.com/nethad/clustermeister", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 27875, "license": "licensed"}}