{"test_class": {"identifier": "EnablementListViewTest", "superclass": "", "interfaces": "", "fields": [], "file": "impl/src/test/java/org/jboss/weld/bootstrap/enablement/EnablementListViewTest.java"}, "test_case": {"identifier": "testListIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListIterator() {\n\n        final List<Item> list = new ArrayList<>();\n        EnablementListView view = new EnablementListView() {\n            @Override\n            protected ViewType getViewType() {\n                return null;\n            }\n\n            @Override\n            protected Extension getExtension() {\n                return null;\n            }\n\n            @Override\n            protected List<Item> getDelegate() {\n                return list;\n            }\n        };\n        int stringPriority = 20;\n        list.add(new Item(Integer.class, 10));\n        list.add(new Item(String.class, stringPriority));\n        list.add(new Item(Double.class, 30));\n\n        ListIterator<Class<?>> iterator = view.listIterator();\n        // -> Integer, String, Double\n        assertEquals(Integer.class, iterator.next());\n        // Integer, -> String, Double\n        iterator.remove();\n        // -> String, Double\n        iterator.add(Float.class);\n        assertEquals(Float.class, iterator.previous());\n        // -> Float, String, Double\n        assertFalse(iterator.hasPrevious());\n        assertTrue(iterator.hasNext());\n        assertEquals(Float.class, iterator.next());\n        assertEquals(String.class, iterator.next());\n        // Float, -> String, Double\n        iterator.set(StringBuilder.class);\n        assertEquals(3, list.size());\n        assertEquals(StringBuilder.class, view.get(1));\n        assertEquals(stringPriority, list.get(1).getPriority());\n    }", "signature": "void testListIterator()", "full_signature": "@Test public void testListIterator()", "class_method_signature": "EnablementListViewTest.testListIterator()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "listIterator", "assertEquals", "next", "remove", "add", "assertEquals", "previous", "assertFalse", "hasPrevious", "assertTrue", "hasNext", "assertEquals", "next", "assertEquals", "next", "set", "assertEquals", "size", "assertEquals", "get", "assertEquals", "getPriority", "get"]}, "focal_class": {"identifier": "EnablementListView", "superclass": "extends ListView<Item, Class<?>>", "interfaces": "", "fields": [{"original_string": "private static final String ADD_OPERATION = \"adds\";", "modifier": "private static final", "type": "String", "declarator": "ADD_OPERATION = \"adds\"", "var_name": "ADD_OPERATION"}, {"original_string": "private static final String REMOVE_OPERATION = \"removes\";", "modifier": "private static final", "type": "String", "declarator": "REMOVE_OPERATION = \"removes\"", "var_name": "REMOVE_OPERATION"}, {"original_string": "private static final String SET_OPERATION = \"sets\";", "modifier": "private static final", "type": "String", "declarator": "SET_OPERATION = \"sets\"", "var_name": "SET_OPERATION"}, {"original_string": "private static final String RETAIN_OPERATION = \"retains\";", "modifier": "private static final", "type": "String", "declarator": "RETAIN_OPERATION = \"retains\"", "var_name": "RETAIN_OPERATION"}, {"original_string": "@SuppressWarnings(\"checkstyle:magicnumber\")\n    private static final int DEFAULT_PRIORITY = jakarta.interceptor.Interceptor.Priority.APPLICATION + 500;", "modifier": "@SuppressWarnings(\"checkstyle:magicnumber\")\n    private static final", "type": "int", "declarator": "DEFAULT_PRIORITY = jakarta.interceptor.Interceptor.Priority.APPLICATION + 500", "var_name": "DEFAULT_PRIORITY"}], "methods": [{"identifier": "getViewType", "parameters": "()", "modifiers": "protected abstract", "return": "ViewType", "signature": "ViewType getViewType()", "full_signature": "protected abstract ViewType getViewType()", "class_method_signature": "EnablementListView.getViewType()", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "()", "modifiers": "protected abstract", "return": "Extension", "signature": "Extension getExtension()", "full_signature": "protected abstract Extension getExtension()", "class_method_signature": "EnablementListView.getExtension()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Class<?> element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Class<?> element)", "full_signature": "@Override public boolean add(Class<?> element)", "class_method_signature": "EnablementListView.add(Class<?> element)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, Class<?> element)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> set(int index, Class<?> element)", "full_signature": "@Override public Class<?> set(int index, Class<?> element)", "class_method_signature": "EnablementListView.set(int index, Class<?> element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int index, Class<?> element)", "modifiers": "@Override public", "return": "void", "signature": "void add(int index, Class<?> element)", "full_signature": "@Override public void add(int index, Class<?> element)", "class_method_signature": "EnablementListView.add(int index, Class<?> element)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> remove(int index)", "full_signature": "@Override public Class<?> remove(int index)", "class_method_signature": "EnablementListView.remove(int index)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> c)", "full_signature": "@Override public boolean removeAll(Collection<?> c)", "class_method_signature": "EnablementListView.removeAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "EnablementListView.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(Collection<?> c)", "full_signature": "@Override public boolean retainAll(Collection<?> c)", "class_method_signature": "EnablementListView.retainAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "EnablementListView.clear()", "testcase": false, "constructor": false}, {"identifier": "toView", "parameters": "(Item source)", "modifiers": "@Override protected", "return": "Class<?>", "signature": "Class<?> toView(Item source)", "full_signature": "@Override protected Class<?> toView(Item source)", "class_method_signature": "EnablementListView.toView(Item source)", "testcase": false, "constructor": false}, {"identifier": "createSource", "parameters": "(Class<?> view)", "modifiers": "@Override protected", "return": "Item", "signature": "Item createSource(Class<?> view)", "full_signature": "@Override protected Item createSource(Class<?> view)", "class_method_signature": "EnablementListView.createSource(Class<?> view)", "testcase": false, "constructor": false}, {"identifier": "createSource", "parameters": "(Class<?> view, Item previous, Item next)", "modifiers": "private", "return": "Item", "signature": "Item createSource(Class<?> view, Item previous, Item next)", "full_signature": "private Item createSource(Class<?> view, Item previous, Item next)", "class_method_signature": "EnablementListView.createSource(Class<?> view, Item previous, Item next)", "testcase": false, "constructor": false}, {"identifier": "createSource", "parameters": "(Class<?> view, int priority)", "modifiers": "private", "return": "Item", "signature": "Item createSource(Class<?> view, int priority)", "full_signature": "private Item createSource(Class<?> view, int priority)", "class_method_signature": "EnablementListView.createSource(Class<?> view, int priority)", "testcase": false, "constructor": false}, {"identifier": "getPriority", "parameters": "(Item previous, Item next)", "modifiers": "private", "return": "int", "signature": "int getPriority(Item previous, Item next)", "full_signature": "private int getPriority(Item previous, Item next)", "class_method_signature": "EnablementListView.getPriority(Item previous, Item next)", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "()", "modifiers": "@Override public", "return": "ListIterator<Class<?>>", "signature": "ListIterator<Class<?>> listIterator()", "full_signature": "@Override public ListIterator<Class<?>> listIterator()", "class_method_signature": "EnablementListView.listIterator()", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "(int index)", "modifiers": "@Override public", "return": "ListIterator<Class<?>>", "signature": "ListIterator<Class<?>> listIterator(int index)", "full_signature": "@Override public ListIterator<Class<?>> listIterator(int index)", "class_method_signature": "EnablementListView.listIterator(int index)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override /** * Override contains to support Object -> Item conversion */ public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override /** * Override contains to support Object -> Item conversion */ public boolean contains(Object o)", "class_method_signature": "EnablementListView.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(Object o)", "full_signature": "@Override public int indexOf(Object o)", "class_method_signature": "EnablementListView.indexOf(Object o)", "testcase": false, "constructor": false}, {"identifier": "objectToItemIfNeeded", "parameters": "(Object o)", "modifiers": "private", "return": "Object", "signature": "Object objectToItemIfNeeded(Object o)", "full_signature": "private Object objectToItemIfNeeded(Object o)", "class_method_signature": "EnablementListView.objectToItemIfNeeded(Object o)", "testcase": false, "constructor": false}], "file": "impl/src/main/java/org/jboss/weld/bootstrap/enablement/EnablementListView.java"}, "focal_method": {"identifier": "listIterator", "parameters": "()", "modifiers": "@Override public", "return": "ListIterator<Class<?>>", "body": "@Override\n    public ListIterator<Class<?>> listIterator() {\n        return new EnablementListViewIterator(getDelegate().listIterator());\n    }", "signature": "ListIterator<Class<?>> listIterator()", "full_signature": "@Override public ListIterator<Class<?>> listIterator()", "class_method_signature": "EnablementListView.listIterator()", "testcase": false, "constructor": false, "invocations": ["listIterator", "getDelegate"]}, "repository": {"repo_id": 819907, "url": "https://github.com/weld/core", "stars": 311, "created": "8/5/2010 7:41:31 PM +00:00", "updates": "2020-01-17T09:37:54+00:00", "fork": "False", "license": "licensed"}}