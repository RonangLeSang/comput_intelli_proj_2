{"test_class": {"identifier": "KTypeArrayListTest", "superclass": "extends AbstractKTypeTest<KType>", "interfaces": "", "fields": [{"original_string": "public KTypeArrayList<KType> list;", "modifier": "public", "type": "KTypeArrayList<KType>", "declarator": "list", "var_name": "list"}], "file": "hppc/src/test/templates/com/carrotsearch/hppc/KTypeArrayListTest.java"}, "test_case": {"identifier": "testTrimToSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTrimToSize()\n    {\n        list.add(asArray(1, 2));\n        list.trimToSize();\n        assertEquals(2, list.buffer.length);\n    }", "signature": "void testTrimToSize()", "full_signature": "@Test public void testTrimToSize()", "class_method_signature": "KTypeArrayListTest.testTrimToSize()", "testcase": true, "constructor": false, "invocations": ["add", "asArray", "trimToSize", "assertEquals"]}, "focal_class": {"identifier": "KTypeArrayList", "superclass": "extends AbstractKTypeCollection<KType>", "interfaces": "implements KTypeIndexedContainer<KType>,\n             Preallocable,\n             Cloneable,\n             Accountable", "fields": [{"original_string": "public final static \n      /*! #if ($TemplateOptions.KTypePrimitive) \n          KType [] \n          #else !*/ \n          Object [] \n      /*! #end !*/ \n          EMPTY_ARRAY = \n      /*! #if ($TemplateOptions.KTypePrimitive) \n          new KType [0]; \n          #else !*/ \n          new Object [0];", "modifier": "public final static", "type": "Object []", "declarator": "EMPTY_ARRAY = \n      /*! #if ($TemplateOptions.KTypePrimitive) \n          new KType [0]; \n          #else !*/ \n          new Object [0]", "var_name": "EMPTY_ARRAY"}, {"original_string": "public \n      /*! #if ($TemplateOptions.KTypePrimitive) \n          KType [] \n          #else !*/ \n          Object [] \n      /*! #end !*/\n          buffer = EMPTY_ARRAY;", "modifier": "public", "type": "Object []", "declarator": "buffer = EMPTY_ARRAY", "var_name": "buffer"}, {"original_string": "public int elementsCount;", "modifier": "public", "type": "int", "declarator": "elementsCount", "var_name": "elementsCount"}, {"original_string": "protected final ArraySizingStrategy resizer;", "modifier": "protected final", "type": "ArraySizingStrategy", "declarator": "resizer", "var_name": "resizer"}], "methods": [{"identifier": "KTypeArrayList", "parameters": "()", "modifiers": "public", "return": "", "signature": " KTypeArrayList()", "full_signature": "public  KTypeArrayList()", "class_method_signature": "KTypeArrayList.KTypeArrayList()", "testcase": false, "constructor": true}, {"identifier": "KTypeArrayList", "parameters": "(int expectedElements)", "modifiers": "public", "return": "", "signature": " KTypeArrayList(int expectedElements)", "full_signature": "public  KTypeArrayList(int expectedElements)", "class_method_signature": "KTypeArrayList.KTypeArrayList(int expectedElements)", "testcase": false, "constructor": true}, {"identifier": "KTypeArrayList", "parameters": "(int expectedElements, ArraySizingStrategy resizer)", "modifiers": "public", "return": "", "signature": " KTypeArrayList(int expectedElements, ArraySizingStrategy resizer)", "full_signature": "public  KTypeArrayList(int expectedElements, ArraySizingStrategy resizer)", "class_method_signature": "KTypeArrayList.KTypeArrayList(int expectedElements, ArraySizingStrategy resizer)", "testcase": false, "constructor": true}, {"identifier": "KTypeArrayList", "parameters": "(KTypeContainer<? extends KType> container)", "modifiers": "public", "return": "", "signature": " KTypeArrayList(KTypeContainer<? extends KType> container)", "full_signature": "public  KTypeArrayList(KTypeContainer<? extends KType> container)", "class_method_signature": "KTypeArrayList.KTypeArrayList(KTypeContainer<? extends KType> container)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "void", "signature": "void add(KType e1)", "full_signature": "@Override public void add(KType e1)", "class_method_signature": "KTypeArrayList.add(KType e1)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(KType e1, KType e2)", "modifiers": "public", "return": "void", "signature": "void add(KType e1, KType e2)", "full_signature": "public void add(KType e1, KType e2)", "class_method_signature": "KTypeArrayList.add(KType e1, KType e2)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(KType[] elements, int start, int length)", "modifiers": "public", "return": "void", "signature": "void add(KType[] elements, int start, int length)", "full_signature": "public void add(KType[] elements, int start, int length)", "class_method_signature": "KTypeArrayList.add(KType[] elements, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(KType... elements)", "modifiers": "@SafeVarargs /* #end */ public final", "return": "void", "signature": "void add(KType... elements)", "full_signature": "@SafeVarargs /* #end */ public final void add(KType... elements)", "class_method_signature": "KTypeArrayList.add(KType... elements)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(KTypeContainer<? extends KType> container)", "modifiers": "public", "return": "int", "signature": "int addAll(KTypeContainer<? extends KType> container)", "full_signature": "public int addAll(KTypeContainer<? extends KType> container)", "class_method_signature": "KTypeArrayList.addAll(KTypeContainer<? extends KType> container)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "modifiers": "public", "return": "int", "signature": "int addAll(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "full_signature": "public int addAll(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "class_method_signature": "KTypeArrayList.addAll(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(int index, KType e1)", "modifiers": "@Override public", "return": "void", "signature": "void insert(int index, KType e1)", "full_signature": "@Override public void insert(int index, KType e1)", "class_method_signature": "KTypeArrayList.insert(int index, KType e1)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "KType", "signature": "KType get(int index)", "full_signature": "@Override public KType get(int index)", "class_method_signature": "KTypeArrayList.get(int index)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, KType e1)", "modifiers": "@Override public", "return": "KType", "signature": "KType set(int index, KType e1)", "full_signature": "@Override public KType set(int index, KType e1)", "class_method_signature": "KTypeArrayList.set(int index, KType e1)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index)", "modifiers": "@Override public", "return": "KType", "signature": "KType remove(int index)", "full_signature": "@Override public KType remove(int index)", "class_method_signature": "KTypeArrayList.remove(int index)", "testcase": false, "constructor": false}, {"identifier": "removeRange", "parameters": "(int fromIndex, int toIndex)", "modifiers": "@Override public", "return": "void", "signature": "void removeRange(int fromIndex, int toIndex)", "full_signature": "@Override public void removeRange(int fromIndex, int toIndex)", "class_method_signature": "KTypeArrayList.removeRange(int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "removeFirst", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "int", "signature": "int removeFirst(KType e1)", "full_signature": "@Override public int removeFirst(KType e1)", "class_method_signature": "KTypeArrayList.removeFirst(KType e1)", "testcase": false, "constructor": false}, {"identifier": "removeLast", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "int", "signature": "int removeLast(KType e1)", "full_signature": "@Override public int removeLast(KType e1)", "class_method_signature": "KTypeArrayList.removeLast(KType e1)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KType e1)", "full_signature": "@Override public int removeAll(KType e1)", "class_method_signature": "KTypeArrayList.removeAll(KType e1)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(KType e1)", "full_signature": "@Override public boolean contains(KType e1)", "class_method_signature": "KTypeArrayList.contains(KType e1)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(KType e1)", "full_signature": "@Override public int indexOf(KType e1)", "class_method_signature": "KTypeArrayList.indexOf(KType e1)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "int", "signature": "int lastIndexOf(KType e1)", "full_signature": "@Override public int lastIndexOf(KType e1)", "class_method_signature": "KTypeArrayList.lastIndexOf(KType e1)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "KTypeArrayList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "ensureCapacity", "parameters": "(int expectedElements)", "modifiers": "@Override public", "return": "void", "signature": "void ensureCapacity(int expectedElements)", "full_signature": "@Override public void ensureCapacity(int expectedElements)", "class_method_signature": "KTypeArrayList.ensureCapacity(int expectedElements)", "testcase": false, "constructor": false}, {"identifier": "ensureBufferSpace", "parameters": "(int expectedAdditions)", "modifiers": "protected", "return": "void", "signature": "void ensureBufferSpace(int expectedAdditions)", "full_signature": "protected void ensureBufferSpace(int expectedAdditions)", "class_method_signature": "KTypeArrayList.ensureBufferSpace(int expectedAdditions)", "testcase": false, "constructor": false}, {"identifier": "resize", "parameters": "(int newSize)", "modifiers": "public", "return": "void", "signature": "void resize(int newSize)", "full_signature": "public void resize(int newSize)", "class_method_signature": "KTypeArrayList.resize(int newSize)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "KTypeArrayList.size()", "testcase": false, "constructor": false}, {"identifier": "trimToSize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void trimToSize()", "full_signature": "public void trimToSize()", "class_method_signature": "KTypeArrayList.trimToSize()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "KTypeArrayList.clear()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void release()", "full_signature": "@Override public void release()", "class_method_signature": "KTypeArrayList.release()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override /*! #if ($TemplateOptions.KTypePrimitive) public KType [] toArray() #else !*/ public", "return": "Object []", "signature": "Object [] toArray()", "full_signature": "@Override /*! #if ($TemplateOptions.KTypePrimitive) public KType [] toArray() #else !*/ public Object [] toArray()", "class_method_signature": "KTypeArrayList.toArray()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "KTypeArrayList<KType>", "signature": "KTypeArrayList<KType> clone()", "full_signature": "@Override public KTypeArrayList<KType> clone()", "class_method_signature": "KTypeArrayList.clone()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "KTypeArrayList.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "KTypeArrayList.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equalElements", "parameters": "(KTypeArrayList<?> other)", "modifiers": "protected", "return": "boolean", "signature": "boolean equalElements(KTypeArrayList<?> other)", "full_signature": "protected boolean equalElements(KTypeArrayList<?> other)", "class_method_signature": "KTypeArrayList.equalElements(KTypeArrayList<?> other)", "testcase": false, "constructor": false}, {"identifier": "ramBytesAllocated", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long ramBytesAllocated()", "full_signature": "@Override public long ramBytesAllocated()", "class_method_signature": "KTypeArrayList.ramBytesAllocated()", "testcase": false, "constructor": false}, {"identifier": "ramBytesUsed", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long ramBytesUsed()", "full_signature": "@Override public long ramBytesUsed()", "class_method_signature": "KTypeArrayList.ramBytesUsed()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<KTypeCursor<KType>>", "signature": "Iterator<KTypeCursor<KType>> iterator()", "full_signature": "@Override public Iterator<KTypeCursor<KType>> iterator()", "class_method_signature": "KTypeArrayList.iterator()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T procedure)", "modifiers": "@Override public", "return": "T", "signature": "T forEach(T procedure)", "full_signature": "@Override public T forEach(T procedure)", "class_method_signature": "KTypeArrayList.forEach(T procedure)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T procedure, int fromIndex, final int toIndex)", "modifiers": "public", "return": "T", "signature": "T forEach(T procedure, int fromIndex, final int toIndex)", "full_signature": "public T forEach(T procedure, int fromIndex, final int toIndex)", "class_method_signature": "KTypeArrayList.forEach(T procedure, int fromIndex, final int toIndex)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KTypePredicate<? super KType> predicate)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KTypePredicate<? super KType> predicate)", "full_signature": "@Override public int removeAll(KTypePredicate<? super KType> predicate)", "class_method_signature": "KTypeArrayList.removeAll(KTypePredicate<? super KType> predicate)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T predicate)", "modifiers": "@Override public", "return": "T", "signature": "T forEach(T predicate)", "full_signature": "@Override public T forEach(T predicate)", "class_method_signature": "KTypeArrayList.forEach(T predicate)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T predicate, int fromIndex, final int toIndex)", "modifiers": "public", "return": "T", "signature": "T forEach(T predicate, int fromIndex, final int toIndex)", "full_signature": "public T forEach(T predicate, int fromIndex, final int toIndex)", "class_method_signature": "KTypeArrayList.forEach(T predicate, int fromIndex, final int toIndex)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(KType... elements)", "modifiers": "@SafeVarargs /* #end */ public static", "return": "KTypeArrayList<KType>", "signature": "KTypeArrayList<KType> from(KType... elements)", "full_signature": "@SafeVarargs /* #end */ public static KTypeArrayList<KType> from(KType... elements)", "class_method_signature": "KTypeArrayList.from(KType... elements)", "testcase": false, "constructor": false}], "file": "hppc/src/main/templates/com/carrotsearch/hppc/KTypeArrayList.java"}, "focal_method": {"identifier": "trimToSize", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void trimToSize() {\n    if (size() != this.buffer.length) {\n      this.buffer = Intrinsics.<KType[]> cast(toArray());\n    }\n  }", "signature": "void trimToSize()", "full_signature": "public void trimToSize()", "class_method_signature": "KTypeArrayList.trimToSize()", "testcase": false, "constructor": false, "invocations": ["size", "cast", "toArray"]}, "repository": {"repo_id": 1397974, "url": "https://github.com/carrotsearch/hppc", "stars": 638, "created": "2/22/2011 3:14:20 PM +00:00", "updates": "2020-01-08T06:28:34+00:00", "fork": "False", "license": "licensed"}}