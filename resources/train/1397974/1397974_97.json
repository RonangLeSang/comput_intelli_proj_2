{"test_class": {"identifier": "KTypeVTypeHashMapTest", "superclass": "extends AbstractKTypeTest<KType>", "interfaces": "", "fields": [{"original_string": "protected VType value0 = vcast(0);", "modifier": "protected", "type": "VType", "declarator": "value0 = vcast(0)", "var_name": "value0"}, {"original_string": "protected VType value1 = vcast(1);", "modifier": "protected", "type": "VType", "declarator": "value1 = vcast(1)", "var_name": "value1"}, {"original_string": "protected VType value2 = vcast(2);", "modifier": "protected", "type": "VType", "declarator": "value2 = vcast(2)", "var_name": "value2"}, {"original_string": "protected VType value3 = vcast(3);", "modifier": "protected", "type": "VType", "declarator": "value3 = vcast(3)", "var_name": "value3"}, {"original_string": "protected VType value4 = vcast(4);", "modifier": "protected", "type": "VType", "declarator": "value4 = vcast(4)", "var_name": "value4"}, {"original_string": "public KTypeVTypeHashMap<KType, VType> map = newInstance();", "modifier": "public", "type": "KTypeVTypeHashMap<KType, VType>", "declarator": "map = newInstance()", "var_name": "map"}], "file": "hppc/src/test/templates/com/carrotsearch/hppc/KTypeVTypeHashMapTest.java"}, "test_case": {"identifier": "testCloningConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCloningConstructor()\n    {\n        map.put(key1, value1);\n        map.put(key2, value2);\n        map.put(key3, value3);\n\n        assertSameMap(map, new KTypeVTypeHashMap<>(map));\n    }", "signature": "void testCloningConstructor()", "full_signature": "@Test public void testCloningConstructor()", "class_method_signature": "KTypeVTypeHashMapTest.testCloningConstructor()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "assertSameMap"]}, "focal_class": {"identifier": "KTypeVTypeHashMap", "superclass": "", "interfaces": "implements /*! #if ($templateonly) !*/ Intrinsics.EqualityFunction, /*! #end !*/\n             /*! #if ($templateonly) !*/ Intrinsics.KeyHasher<KType>, /*! #end !*/\n             KTypeVTypeMap<KType, VType>,\n             Preallocable,\n             Cloneable,\n             Accountable", "fields": [{"original_string": "public /*! #if ($TemplateOptions.KTypeGeneric) !*/ \n         Object [] \n         /*! #else KType [] #end !*/ \n         keys;", "modifier": "public", "type": "Object []", "declarator": "keys", "var_name": "keys"}, {"original_string": "public /*! #if ($TemplateOptions.VTypeGeneric) !*/ \n         Object [] \n         /*! #else VType [] #end !*/ \n         values;", "modifier": "public", "type": "Object []", "declarator": "values", "var_name": "values"}, {"original_string": "protected int assigned;", "modifier": "protected", "type": "int", "declarator": "assigned", "var_name": "assigned"}, {"original_string": "protected int mask;", "modifier": "protected", "type": "int", "declarator": "mask", "var_name": "mask"}, {"original_string": "protected int resizeAt;", "modifier": "protected", "type": "int", "declarator": "resizeAt", "var_name": "resizeAt"}, {"original_string": "protected boolean hasEmptyKey;", "modifier": "protected", "type": "boolean", "declarator": "hasEmptyKey", "var_name": "hasEmptyKey"}, {"original_string": "protected double loadFactor;", "modifier": "protected", "type": "double", "declarator": "loadFactor", "var_name": "loadFactor"}, {"original_string": "protected int iterationSeed;", "modifier": "protected", "type": "int", "declarator": "iterationSeed", "var_name": "iterationSeed"}], "methods": [{"identifier": "KTypeVTypeHashMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " KTypeVTypeHashMap()", "full_signature": "public  KTypeVTypeHashMap()", "class_method_signature": "KTypeVTypeHashMap.KTypeVTypeHashMap()", "testcase": false, "constructor": true}, {"identifier": "KTypeVTypeHashMap", "parameters": "(int expectedElements)", "modifiers": "public", "return": "", "signature": " KTypeVTypeHashMap(int expectedElements)", "full_signature": "public  KTypeVTypeHashMap(int expectedElements)", "class_method_signature": "KTypeVTypeHashMap.KTypeVTypeHashMap(int expectedElements)", "testcase": false, "constructor": true}, {"identifier": "KTypeVTypeHashMap", "parameters": "(int expectedElements, double loadFactor)", "modifiers": "public", "return": "", "signature": " KTypeVTypeHashMap(int expectedElements, double loadFactor)", "full_signature": "public  KTypeVTypeHashMap(int expectedElements, double loadFactor)", "class_method_signature": "KTypeVTypeHashMap.KTypeVTypeHashMap(int expectedElements, double loadFactor)", "testcase": false, "constructor": true}, {"identifier": "KTypeVTypeHashMap", "parameters": "(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "modifiers": "public", "return": "", "signature": " KTypeVTypeHashMap(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "full_signature": "public  KTypeVTypeHashMap(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "class_method_signature": "KTypeVTypeHashMap.KTypeVTypeHashMap(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(KType key, VType value)", "modifiers": "@Override public", "return": "VType", "signature": "VType put(KType key, VType value)", "full_signature": "@Override public VType put(KType key, VType value)", "class_method_signature": "KTypeVTypeHashMap.put(KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "modifiers": "@Override public", "return": "int", "signature": "int putAll(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "full_signature": "@Override public int putAll(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "class_method_signature": "KTypeVTypeHashMap.putAll(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Iterable<? extends KTypeVTypeCursor<? extends KType, ? extends VType>> iterable)", "modifiers": "@Override public", "return": "int", "signature": "int putAll(Iterable<? extends KTypeVTypeCursor<? extends KType, ? extends VType>> iterable)", "full_signature": "@Override public int putAll(Iterable<? extends KTypeVTypeCursor<? extends KType, ? extends VType>> iterable)", "class_method_signature": "KTypeVTypeHashMap.putAll(Iterable<? extends KTypeVTypeCursor<? extends KType, ? extends VType>> iterable)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(KType key, VType value)", "modifiers": "public", "return": "boolean", "signature": "boolean putIfAbsent(KType key, VType value)", "full_signature": "public boolean putIfAbsent(KType key, VType value)", "class_method_signature": "KTypeVTypeHashMap.putIfAbsent(KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "putOrAdd", "parameters": "(KType key, VType putValue, VType incrementValue)", "modifiers": "@Override public", "return": "VType", "signature": "VType putOrAdd(KType key, VType putValue, VType incrementValue)", "full_signature": "@Override public VType putOrAdd(KType key, VType putValue, VType incrementValue)", "class_method_signature": "KTypeVTypeHashMap.putOrAdd(KType key, VType putValue, VType incrementValue)", "testcase": false, "constructor": false}, {"identifier": "addTo", "parameters": "(KType key, VType incrementValue)", "modifiers": "@Override public", "return": "VType", "signature": "VType addTo(KType key, VType incrementValue)", "full_signature": "@Override public VType addTo(KType key, VType incrementValue)", "class_method_signature": "KTypeVTypeHashMap.addTo(KType key, VType incrementValue)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(KType key)", "modifiers": "@Override public", "return": "VType", "signature": "VType remove(KType key)", "full_signature": "@Override public VType remove(KType key)", "class_method_signature": "KTypeVTypeHashMap.remove(KType key)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KTypeContainer<? super KType> other)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KTypeContainer<? super KType> other)", "full_signature": "@Override public int removeAll(KTypeContainer<? super KType> other)", "class_method_signature": "KTypeVTypeHashMap.removeAll(KTypeContainer<? super KType> other)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KTypeVTypePredicate<? super KType, ? super VType> predicate)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KTypeVTypePredicate<? super KType, ? super VType> predicate)", "full_signature": "@Override public int removeAll(KTypeVTypePredicate<? super KType, ? super VType> predicate)", "class_method_signature": "KTypeVTypeHashMap.removeAll(KTypeVTypePredicate<? super KType, ? super VType> predicate)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KTypePredicate<? super KType> predicate)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KTypePredicate<? super KType> predicate)", "full_signature": "@Override public int removeAll(KTypePredicate<? super KType> predicate)", "class_method_signature": "KTypeVTypeHashMap.removeAll(KTypePredicate<? super KType> predicate)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(KType key)", "modifiers": "@Override public", "return": "VType", "signature": "VType get(KType key)", "full_signature": "@Override public VType get(KType key)", "class_method_signature": "KTypeVTypeHashMap.get(KType key)", "testcase": false, "constructor": false}, {"identifier": "getOrDefault", "parameters": "(KType key, VType defaultValue)", "modifiers": "@Override public", "return": "VType", "signature": "VType getOrDefault(KType key, VType defaultValue)", "full_signature": "@Override public VType getOrDefault(KType key, VType defaultValue)", "class_method_signature": "KTypeVTypeHashMap.getOrDefault(KType key, VType defaultValue)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(KType key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(KType key)", "full_signature": "@Override public boolean containsKey(KType key)", "class_method_signature": "KTypeVTypeHashMap.containsKey(KType key)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(KType key)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(KType key)", "full_signature": "@Override public int indexOf(KType key)", "class_method_signature": "KTypeVTypeHashMap.indexOf(KType key)", "testcase": false, "constructor": false}, {"identifier": "indexExists", "parameters": "(int index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean indexExists(int index)", "full_signature": "@Override public boolean indexExists(int index)", "class_method_signature": "KTypeVTypeHashMap.indexExists(int index)", "testcase": false, "constructor": false}, {"identifier": "indexGet", "parameters": "(int index)", "modifiers": "@Override public", "return": "VType", "signature": "VType indexGet(int index)", "full_signature": "@Override public VType indexGet(int index)", "class_method_signature": "KTypeVTypeHashMap.indexGet(int index)", "testcase": false, "constructor": false}, {"identifier": "indexReplace", "parameters": "(int index, VType newValue)", "modifiers": "@Override public", "return": "VType", "signature": "VType indexReplace(int index, VType newValue)", "full_signature": "@Override public VType indexReplace(int index, VType newValue)", "class_method_signature": "KTypeVTypeHashMap.indexReplace(int index, VType newValue)", "testcase": false, "constructor": false}, {"identifier": "indexInsert", "parameters": "(int index, KType key, VType value)", "modifiers": "@Override public", "return": "void", "signature": "void indexInsert(int index, KType key, VType value)", "full_signature": "@Override public void indexInsert(int index, KType key, VType value)", "class_method_signature": "KTypeVTypeHashMap.indexInsert(int index, KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "KTypeVTypeHashMap.clear()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void release()", "full_signature": "@Override public void release()", "class_method_signature": "KTypeVTypeHashMap.release()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "KTypeVTypeHashMap.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "KTypeVTypeHashMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "KTypeVTypeHashMap.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "KTypeVTypeHashMap.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equalElements", "parameters": "(KTypeVTypeHashMap<?, ?> other)", "modifiers": "protected", "return": "boolean", "signature": "boolean equalElements(KTypeVTypeHashMap<?, ?> other)", "full_signature": "protected boolean equalElements(KTypeVTypeHashMap<?, ?> other)", "class_method_signature": "KTypeVTypeHashMap.equalElements(KTypeVTypeHashMap<?, ?> other)", "testcase": false, "constructor": false}, {"identifier": "ensureCapacity", "parameters": "(int expectedElements)", "modifiers": "@Override public", "return": "void", "signature": "void ensureCapacity(int expectedElements)", "full_signature": "@Override public void ensureCapacity(int expectedElements)", "class_method_signature": "KTypeVTypeHashMap.ensureCapacity(int expectedElements)", "testcase": false, "constructor": false}, {"identifier": "ramBytesAllocated", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long ramBytesAllocated()", "full_signature": "@Override public long ramBytesAllocated()", "class_method_signature": "KTypeVTypeHashMap.ramBytesAllocated()", "testcase": false, "constructor": false}, {"identifier": "ramBytesUsed", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long ramBytesUsed()", "full_signature": "@Override public long ramBytesUsed()", "class_method_signature": "KTypeVTypeHashMap.ramBytesUsed()", "testcase": false, "constructor": false}, {"identifier": "nextIterationSeed", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int nextIterationSeed()", "full_signature": "protected int nextIterationSeed()", "class_method_signature": "KTypeVTypeHashMap.nextIterationSeed()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<KTypeVTypeCursor<KType, VType>>", "signature": "Iterator<KTypeVTypeCursor<KType, VType>> iterator()", "full_signature": "@Override public Iterator<KTypeVTypeCursor<KType, VType>> iterator()", "class_method_signature": "KTypeVTypeHashMap.iterator()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T procedure)", "modifiers": "@Override public", "return": "T", "signature": "T forEach(T procedure)", "full_signature": "@Override public T forEach(T procedure)", "class_method_signature": "KTypeVTypeHashMap.forEach(T procedure)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T predicate)", "modifiers": "@Override public", "return": "T", "signature": "T forEach(T predicate)", "full_signature": "@Override public T forEach(T predicate)", "class_method_signature": "KTypeVTypeHashMap.forEach(T predicate)", "testcase": false, "constructor": false}, {"identifier": "keys", "parameters": "()", "modifiers": "public", "return": "KeysContainer", "signature": "KeysContainer keys()", "full_signature": "public KeysContainer keys()", "class_method_signature": "KTypeVTypeHashMap.keys()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "KTypeCollection<VType>", "signature": "KTypeCollection<VType> values()", "full_signature": "@Override public KTypeCollection<VType> values()", "class_method_signature": "KTypeVTypeHashMap.values()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "KTypeVTypeHashMap<KType, VType>", "signature": "KTypeVTypeHashMap<KType, VType> clone()", "full_signature": "@Override public KTypeVTypeHashMap<KType, VType> clone()", "class_method_signature": "KTypeVTypeHashMap.clone()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "KTypeVTypeHashMap.toString()", "testcase": false, "constructor": false}, {"identifier": "visualizeKeyDistribution", "parameters": "(int characters)", "modifiers": "@Override public", "return": "String", "signature": "String visualizeKeyDistribution(int characters)", "full_signature": "@Override public String visualizeKeyDistribution(int characters)", "class_method_signature": "KTypeVTypeHashMap.visualizeKeyDistribution(int characters)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(KType[] keys, VType[] values)", "modifiers": "public static", "return": "KTypeVTypeHashMap<KType, VType>", "signature": "KTypeVTypeHashMap<KType, VType> from(KType[] keys, VType[] values)", "full_signature": "public static KTypeVTypeHashMap<KType, VType> from(KType[] keys, VType[] values)", "class_method_signature": "KTypeVTypeHashMap.from(KType[] keys, VType[] values)", "testcase": false, "constructor": false}, {"identifier": "hashKey", "parameters": "(KType key)", "modifiers": "@Override public", "return": "int", "signature": "int hashKey(KType key)", "full_signature": "@Override public int hashKey(KType key)", "class_method_signature": "KTypeVTypeHashMap.hashKey(KType key)", "testcase": false, "constructor": false}, {"identifier": "verifyLoadFactor", "parameters": "(double loadFactor)", "modifiers": "protected", "return": "double", "signature": "double verifyLoadFactor(double loadFactor)", "full_signature": "protected double verifyLoadFactor(double loadFactor)", "class_method_signature": "KTypeVTypeHashMap.verifyLoadFactor(double loadFactor)", "testcase": false, "constructor": false}, {"identifier": "rehash", "parameters": "(KType[] fromKeys, VType[] fromValues)", "modifiers": "protected", "return": "void", "signature": "void rehash(KType[] fromKeys, VType[] fromValues)", "full_signature": "protected void rehash(KType[] fromKeys, VType[] fromValues)", "class_method_signature": "KTypeVTypeHashMap.rehash(KType[] fromKeys, VType[] fromValues)", "testcase": false, "constructor": false}, {"identifier": "allocateBuffers", "parameters": "(int arraySize)", "modifiers": "protected", "return": "void", "signature": "void allocateBuffers(int arraySize)", "full_signature": "protected void allocateBuffers(int arraySize)", "class_method_signature": "KTypeVTypeHashMap.allocateBuffers(int arraySize)", "testcase": false, "constructor": false}, {"identifier": "allocateThenInsertThenRehash", "parameters": "(int slot, KType pendingKey, VType pendingValue)", "modifiers": "protected", "return": "void", "signature": "void allocateThenInsertThenRehash(int slot, KType pendingKey, VType pendingValue)", "full_signature": "protected void allocateThenInsertThenRehash(int slot, KType pendingKey, VType pendingValue)", "class_method_signature": "KTypeVTypeHashMap.allocateThenInsertThenRehash(int slot, KType pendingKey, VType pendingValue)", "testcase": false, "constructor": false}, {"identifier": "shiftConflictingKeys", "parameters": "(int gapSlot)", "modifiers": "protected", "return": "void", "signature": "void shiftConflictingKeys(int gapSlot)", "full_signature": "protected void shiftConflictingKeys(int gapSlot)", "class_method_signature": "KTypeVTypeHashMap.shiftConflictingKeys(int gapSlot)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object v1, Object v2)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object v1, Object v2)", "full_signature": "@Override public boolean equals(Object v1, Object v2)", "class_method_signature": "KTypeVTypeHashMap.equals(Object v1, Object v2)", "testcase": false, "constructor": false}], "file": "hppc/src/main/templates/com/carrotsearch/hppc/KTypeVTypeHashMap.java"}, "focal_method": {"identifier": "put", "parameters": "(KType key, VType value)", "modifiers": "@Override public", "return": "VType", "body": "@Override\n  public VType put(KType key, VType value) {\n    assert assigned < mask + 1;\n\n    final int mask = this.mask;\n    if (Intrinsics.<KType> isEmpty(key)) {\n      hasEmptyKey = true;\n      VType previousValue = Intrinsics.<VType> cast(values[mask + 1]);\n      values[mask + 1] = value;\n      return previousValue;\n    } else {\n      final KType[] keys = Intrinsics.<KType[]> cast(this.keys);\n      int slot = hashKey(key) & mask;\n\n      KType existing;\n      while (!Intrinsics.<KType> isEmpty(existing = keys[slot])) {\n        if (Intrinsics.<KType> equals(this, key, existing)) {\n          final VType previousValue = Intrinsics.<VType> cast(values[slot]);\n          values[slot] = value;\n          return previousValue;\n        }\n        slot = (slot + 1) & mask;\n      }\n\n      if (assigned == resizeAt) {\n        allocateThenInsertThenRehash(slot, key, value);\n      } else {\n        keys[slot] = key;\n        values[slot] = value;\n      }\n\n      assigned++;\n      return Intrinsics.<VType> empty();\n    }\n  }", "signature": "VType put(KType key, VType value)", "full_signature": "@Override public VType put(KType key, VType value)", "class_method_signature": "KTypeVTypeHashMap.put(KType key, VType value)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "cast", "cast", "hashKey", "isEmpty", "equals", "cast", "allocateThenInsertThenRehash", "empty"]}, "repository": {"repo_id": 1397974, "url": "https://github.com/carrotsearch/hppc", "stars": 638, "created": "2/22/2011 3:14:20 PM +00:00", "updates": "2020-01-08T06:28:34+00:00", "fork": "False", "license": "licensed"}}