{"test_class": {"identifier": "KTypeArrayDequeTest", "superclass": "extends AbstractKTypeTest<KType>", "interfaces": "", "fields": [{"original_string": "public KTypeArrayDeque<KType> deque;", "modifier": "public", "type": "KTypeArrayDeque<KType>", "declarator": "deque", "var_name": "deque"}, {"original_string": "private KTypeArrayList<KType> sequence;", "modifier": "private", "type": "KTypeArrayList<KType>", "declarator": "sequence", "var_name": "sequence"}], "file": "hppc/src/test/templates/com/carrotsearch/hppc/KTypeArrayDequeTest.java"}, "test_case": {"identifier": "testIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIterator()\n    {\n        deque.addLast(asArray(0, 1, 2, 3));\n        \n        Iterator<KTypeCursor<KType>> iterator = deque.iterator();\n        int count = 0;\n        while (iterator.hasNext())\n        {\n            iterator.hasNext();\n            iterator.hasNext();\n            iterator.hasNext();\n            iterator.next();\n            count++;\n        }\n        assertEquals(count, deque.size());\n\n        deque.clear();\n        assertFalse(deque.iterator().hasNext());\n    }", "signature": "void testIterator()", "full_signature": "@Test public void testIterator()", "class_method_signature": "KTypeArrayDequeTest.testIterator()", "testcase": true, "constructor": false, "invocations": ["addLast", "asArray", "iterator", "hasNext", "hasNext", "hasNext", "hasNext", "next", "assertEquals", "size", "clear", "assertFalse", "hasNext", "iterator"]}, "focal_class": {"identifier": "KTypeArrayDeque", "superclass": "extends AbstractKTypeCollection<KType>", "interfaces": "implements KTypeDeque<KType>,\n             Preallocable, \n             Cloneable,\n             Accountable", "fields": [{"original_string": "public \n    /*! #if ($TemplateOptions.KTypePrimitive) \n        KType [] \n        #else !*/ \n        Object [] \n    /*! #end !*/\n        buffer = KTypeArrayList.EMPTY_ARRAY;", "modifier": "public", "type": "Object []", "declarator": "buffer = KTypeArrayList.EMPTY_ARRAY", "var_name": "buffer"}, {"original_string": "public int head;", "modifier": "public", "type": "int", "declarator": "head", "var_name": "head"}, {"original_string": "public int tail;", "modifier": "public", "type": "int", "declarator": "tail", "var_name": "tail"}, {"original_string": "protected final ArraySizingStrategy resizer;", "modifier": "protected final", "type": "ArraySizingStrategy", "declarator": "resizer", "var_name": "resizer"}], "methods": [{"identifier": "KTypeArrayDeque", "parameters": "()", "modifiers": "public", "return": "", "signature": " KTypeArrayDeque()", "full_signature": "public  KTypeArrayDeque()", "class_method_signature": "KTypeArrayDeque.KTypeArrayDeque()", "testcase": false, "constructor": true}, {"identifier": "KTypeArrayDeque", "parameters": "(int expectedElements)", "modifiers": "public", "return": "", "signature": " KTypeArrayDeque(int expectedElements)", "full_signature": "public  KTypeArrayDeque(int expectedElements)", "class_method_signature": "KTypeArrayDeque.KTypeArrayDeque(int expectedElements)", "testcase": false, "constructor": true}, {"identifier": "KTypeArrayDeque", "parameters": "(int expectedElements, ArraySizingStrategy resizer)", "modifiers": "public", "return": "", "signature": " KTypeArrayDeque(int expectedElements, ArraySizingStrategy resizer)", "full_signature": "public  KTypeArrayDeque(int expectedElements, ArraySizingStrategy resizer)", "class_method_signature": "KTypeArrayDeque.KTypeArrayDeque(int expectedElements, ArraySizingStrategy resizer)", "testcase": false, "constructor": true}, {"identifier": "KTypeArrayDeque", "parameters": "(KTypeContainer<? extends KType> container)", "modifiers": "public", "return": "", "signature": " KTypeArrayDeque(KTypeContainer<? extends KType> container)", "full_signature": "public  KTypeArrayDeque(KTypeContainer<? extends KType> container)", "class_method_signature": "KTypeArrayDeque.KTypeArrayDeque(KTypeContainer<? extends KType> container)", "testcase": false, "constructor": true}, {"identifier": "addFirst", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "void", "signature": "void addFirst(KType e1)", "full_signature": "@Override public void addFirst(KType e1)", "class_method_signature": "KTypeArrayDeque.addFirst(KType e1)", "testcase": false, "constructor": false}, {"identifier": "addFirst", "parameters": "(KType... elements)", "modifiers": "@SafeVarargs /* #end */ public final", "return": "void", "signature": "void addFirst(KType... elements)", "full_signature": "@SafeVarargs /* #end */ public final void addFirst(KType... elements)", "class_method_signature": "KTypeArrayDeque.addFirst(KType... elements)", "testcase": false, "constructor": false}, {"identifier": "addFirst", "parameters": "(KTypeContainer<? extends KType> container)", "modifiers": "public", "return": "int", "signature": "int addFirst(KTypeContainer<? extends KType> container)", "full_signature": "public int addFirst(KTypeContainer<? extends KType> container)", "class_method_signature": "KTypeArrayDeque.addFirst(KTypeContainer<? extends KType> container)", "testcase": false, "constructor": false}, {"identifier": "addFirst", "parameters": "(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "modifiers": "public", "return": "int", "signature": "int addFirst(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "full_signature": "public int addFirst(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "class_method_signature": "KTypeArrayDeque.addFirst(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "testcase": false, "constructor": false}, {"identifier": "addLast", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "void", "signature": "void addLast(KType e1)", "full_signature": "@Override public void addLast(KType e1)", "class_method_signature": "KTypeArrayDeque.addLast(KType e1)", "testcase": false, "constructor": false}, {"identifier": "addLast", "parameters": "(KType... elements)", "modifiers": "@SafeVarargs /* #end */ public final", "return": "void", "signature": "void addLast(KType... elements)", "full_signature": "@SafeVarargs /* #end */ public final void addLast(KType... elements)", "class_method_signature": "KTypeArrayDeque.addLast(KType... elements)", "testcase": false, "constructor": false}, {"identifier": "addLast", "parameters": "(KTypeContainer<? extends KType> container)", "modifiers": "public", "return": "int", "signature": "int addLast(KTypeContainer<? extends KType> container)", "full_signature": "public int addLast(KTypeContainer<? extends KType> container)", "class_method_signature": "KTypeArrayDeque.addLast(KTypeContainer<? extends KType> container)", "testcase": false, "constructor": false}, {"identifier": "addLast", "parameters": "(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "modifiers": "public", "return": "int", "signature": "int addLast(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "full_signature": "public int addLast(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "class_method_signature": "KTypeArrayDeque.addLast(Iterable<? extends KTypeCursor<? extends KType>> iterable)", "testcase": false, "constructor": false}, {"identifier": "removeFirst", "parameters": "()", "modifiers": "@Override public", "return": "KType", "signature": "KType removeFirst()", "full_signature": "@Override public KType removeFirst()", "class_method_signature": "KTypeArrayDeque.removeFirst()", "testcase": false, "constructor": false}, {"identifier": "removeLast", "parameters": "()", "modifiers": "@Override public", "return": "KType", "signature": "KType removeLast()", "full_signature": "@Override public KType removeLast()", "class_method_signature": "KTypeArrayDeque.removeLast()", "testcase": false, "constructor": false}, {"identifier": "getFirst", "parameters": "()", "modifiers": "@Override public", "return": "KType", "signature": "KType getFirst()", "full_signature": "@Override public KType getFirst()", "class_method_signature": "KTypeArrayDeque.getFirst()", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "()", "modifiers": "@Override public", "return": "KType", "signature": "KType getLast()", "full_signature": "@Override public KType getLast()", "class_method_signature": "KTypeArrayDeque.getLast()", "testcase": false, "constructor": false}, {"identifier": "removeFirst", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "int", "signature": "int removeFirst(KType e1)", "full_signature": "@Override public int removeFirst(KType e1)", "class_method_signature": "KTypeArrayDeque.removeFirst(KType e1)", "testcase": false, "constructor": false}, {"identifier": "bufferIndexOf", "parameters": "(KType e1)", "modifiers": "public", "return": "int", "signature": "int bufferIndexOf(KType e1)", "full_signature": "public int bufferIndexOf(KType e1)", "class_method_signature": "KTypeArrayDeque.bufferIndexOf(KType e1)", "testcase": false, "constructor": false}, {"identifier": "removeLast", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "int", "signature": "int removeLast(KType e1)", "full_signature": "@Override public int removeLast(KType e1)", "class_method_signature": "KTypeArrayDeque.removeLast(KType e1)", "testcase": false, "constructor": false}, {"identifier": "lastBufferIndexOf", "parameters": "(KType e1)", "modifiers": "public", "return": "int", "signature": "int lastBufferIndexOf(KType e1)", "full_signature": "public int lastBufferIndexOf(KType e1)", "class_method_signature": "KTypeArrayDeque.lastBufferIndexOf(KType e1)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KType e1)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KType e1)", "full_signature": "@Override public int removeAll(KType e1)", "class_method_signature": "KTypeArrayDeque.removeAll(KType e1)", "testcase": false, "constructor": false}, {"identifier": "removeAtBufferIndex", "parameters": "(int index)", "modifiers": "public", "return": "void", "signature": "void removeAtBufferIndex(int index)", "full_signature": "public void removeAtBufferIndex(int index)", "class_method_signature": "KTypeArrayDeque.removeAtBufferIndex(int index)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "KTypeArrayDeque.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "KTypeArrayDeque.size()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "KTypeArrayDeque.clear()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void release()", "full_signature": "public void release()", "class_method_signature": "KTypeArrayDeque.release()", "testcase": false, "constructor": false}, {"identifier": "ensureCapacity", "parameters": "(int expectedElements)", "modifiers": "@Override public", "return": "void", "signature": "void ensureCapacity(int expectedElements)", "full_signature": "@Override public void ensureCapacity(int expectedElements)", "class_method_signature": "KTypeArrayDeque.ensureCapacity(int expectedElements)", "testcase": false, "constructor": false}, {"identifier": "ensureBufferSpace", "parameters": "(int expectedAdditions)", "modifiers": "protected", "return": "void", "signature": "void ensureBufferSpace(int expectedAdditions)", "full_signature": "protected void ensureBufferSpace(int expectedAdditions)", "class_method_signature": "KTypeArrayDeque.ensureBufferSpace(int expectedAdditions)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override /*! #if ($TemplateOptions.KTypePrimitive) public KType [] toArray() #else !*/ public", "return": "Object []", "signature": "Object [] toArray()", "full_signature": "@Override /*! #if ($TemplateOptions.KTypePrimitive) public KType [] toArray() #else !*/ public Object [] toArray()", "class_method_signature": "KTypeArrayDeque.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(KType[] target)", "modifiers": "public", "return": "KType[]", "signature": "KType[] toArray(KType[] target)", "full_signature": "public KType[] toArray(KType[] target)", "class_method_signature": "KTypeArrayDeque.toArray(KType[] target)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "KTypeArrayDeque<KType>", "signature": "KTypeArrayDeque<KType> clone()", "full_signature": "@Override public KTypeArrayDeque<KType> clone()", "class_method_signature": "KTypeArrayDeque.clone()", "testcase": false, "constructor": false}, {"identifier": "oneLeft", "parameters": "(int index, int modulus)", "modifiers": "protected static", "return": "int", "signature": "int oneLeft(int index, int modulus)", "full_signature": "protected static int oneLeft(int index, int modulus)", "class_method_signature": "KTypeArrayDeque.oneLeft(int index, int modulus)", "testcase": false, "constructor": false}, {"identifier": "oneRight", "parameters": "(int index, int modulus)", "modifiers": "protected static", "return": "int", "signature": "int oneRight(int index, int modulus)", "full_signature": "protected static int oneRight(int index, int modulus)", "class_method_signature": "KTypeArrayDeque.oneRight(int index, int modulus)", "testcase": false, "constructor": false}, {"identifier": "ramBytesAllocated", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long ramBytesAllocated()", "full_signature": "@Override public long ramBytesAllocated()", "class_method_signature": "KTypeArrayDeque.ramBytesAllocated()", "testcase": false, "constructor": false}, {"identifier": "ramBytesUsed", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long ramBytesUsed()", "full_signature": "@Override public long ramBytesUsed()", "class_method_signature": "KTypeArrayDeque.ramBytesUsed()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<KTypeCursor<KType>>", "signature": "Iterator<KTypeCursor<KType>> iterator()", "full_signature": "public Iterator<KTypeCursor<KType>> iterator()", "class_method_signature": "KTypeArrayDeque.iterator()", "testcase": false, "constructor": false}, {"identifier": "descendingIterator", "parameters": "()", "modifiers": "public", "return": "Iterator<KTypeCursor<KType>>", "signature": "Iterator<KTypeCursor<KType>> descendingIterator()", "full_signature": "public Iterator<KTypeCursor<KType>> descendingIterator()", "class_method_signature": "KTypeArrayDeque.descendingIterator()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T procedure)", "modifiers": "@Override public", "return": "T", "signature": "T forEach(T procedure)", "full_signature": "@Override public T forEach(T procedure)", "class_method_signature": "KTypeArrayDeque.forEach(T procedure)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(KTypeProcedure<? super KType> procedure, int fromIndex, final int toIndex)", "modifiers": "private", "return": "void", "signature": "void forEach(KTypeProcedure<? super KType> procedure, int fromIndex, final int toIndex)", "full_signature": "private void forEach(KTypeProcedure<? super KType> procedure, int fromIndex, final int toIndex)", "class_method_signature": "KTypeArrayDeque.forEach(KTypeProcedure<? super KType> procedure, int fromIndex, final int toIndex)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T predicate)", "modifiers": "@Override public", "return": "T", "signature": "T forEach(T predicate)", "full_signature": "@Override public T forEach(T predicate)", "class_method_signature": "KTypeArrayDeque.forEach(T predicate)", "testcase": false, "constructor": false}, {"identifier": "descendingForEach", "parameters": "(T procedure)", "modifiers": "@Override public", "return": "T", "signature": "T descendingForEach(T procedure)", "full_signature": "@Override public T descendingForEach(T procedure)", "class_method_signature": "KTypeArrayDeque.descendingForEach(T procedure)", "testcase": false, "constructor": false}, {"identifier": "descendingForEach", "parameters": "(KTypeProcedure<? super KType> procedure, int fromIndex, final int toIndex)", "modifiers": "private", "return": "void", "signature": "void descendingForEach(KTypeProcedure<? super KType> procedure, int fromIndex, final int toIndex)", "full_signature": "private void descendingForEach(KTypeProcedure<? super KType> procedure, int fromIndex, final int toIndex)", "class_method_signature": "KTypeArrayDeque.descendingForEach(KTypeProcedure<? super KType> procedure, int fromIndex, final int toIndex)", "testcase": false, "constructor": false}, {"identifier": "descendingForEach", "parameters": "(T predicate)", "modifiers": "@Override public", "return": "T", "signature": "T descendingForEach(T predicate)", "full_signature": "@Override public T descendingForEach(T predicate)", "class_method_signature": "KTypeArrayDeque.descendingForEach(T predicate)", "testcase": false, "constructor": false}, {"identifier": "descendingForEach", "parameters": "(KTypePredicate<? super KType> predicate, int fromIndex, final int toIndex)", "modifiers": "private", "return": "void", "signature": "void descendingForEach(KTypePredicate<? super KType> predicate, int fromIndex, final int toIndex)", "full_signature": "private void descendingForEach(KTypePredicate<? super KType> predicate, int fromIndex, final int toIndex)", "class_method_signature": "KTypeArrayDeque.descendingForEach(KTypePredicate<? super KType> predicate, int fromIndex, final int toIndex)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KTypePredicate<? super KType> predicate)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KTypePredicate<? super KType> predicate)", "full_signature": "@Override public int removeAll(KTypePredicate<? super KType> predicate)", "class_method_signature": "KTypeArrayDeque.removeAll(KTypePredicate<? super KType> predicate)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(KType e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(KType e)", "full_signature": "@Override public boolean contains(KType e)", "class_method_signature": "KTypeArrayDeque.contains(KType e)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "KTypeArrayDeque.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "KTypeArrayDeque.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equalElements", "parameters": "(KTypeArrayDeque<?> other)", "modifiers": "protected", "return": "boolean", "signature": "boolean equalElements(KTypeArrayDeque<?> other)", "full_signature": "protected boolean equalElements(KTypeArrayDeque<?> other)", "class_method_signature": "KTypeArrayDeque.equalElements(KTypeArrayDeque<?> other)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(KType... elements)", "modifiers": "@SafeVarargs /* #end */ public static", "return": "KTypeArrayDeque<KType>", "signature": "KTypeArrayDeque<KType> from(KType... elements)", "full_signature": "@SafeVarargs /* #end */ public static KTypeArrayDeque<KType> from(KType... elements)", "class_method_signature": "KTypeArrayDeque.from(KType... elements)", "testcase": false, "constructor": false}], "file": "hppc/src/main/templates/com/carrotsearch/hppc/KTypeArrayDeque.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<KTypeCursor<KType>>", "body": "public Iterator<KTypeCursor<KType>> iterator() {\n    return new ValueIterator();\n  }", "signature": "Iterator<KTypeCursor<KType>> iterator()", "full_signature": "public Iterator<KTypeCursor<KType>> iterator()", "class_method_signature": "KTypeArrayDeque.iterator()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1397974, "url": "https://github.com/carrotsearch/hppc", "stars": 638, "created": "2/22/2011 3:14:20 PM +00:00", "updates": "2020-01-08T06:28:34+00:00", "fork": "False", "license": "licensed"}}