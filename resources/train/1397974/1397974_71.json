{"test_class": {"identifier": "KTypeVTypeWormMapTest", "superclass": "extends AbstractKTypeTest<KType>", "interfaces": "", "fields": [{"original_string": "protected VType value0 = vcast(0);", "modifier": "protected", "type": "VType", "declarator": "value0 = vcast(0)", "var_name": "value0"}, {"original_string": "protected VType value1 = vcast(1);", "modifier": "protected", "type": "VType", "declarator": "value1 = vcast(1)", "var_name": "value1"}, {"original_string": "protected VType value2 = vcast(2);", "modifier": "protected", "type": "VType", "declarator": "value2 = vcast(2)", "var_name": "value2"}, {"original_string": "protected VType value3 = vcast(3);", "modifier": "protected", "type": "VType", "declarator": "value3 = vcast(3)", "var_name": "value3"}, {"original_string": "protected VType value4 = vcast(4);", "modifier": "protected", "type": "VType", "declarator": "value4 = vcast(4)", "var_name": "value4"}, {"original_string": "public KTypeVTypeWormMap<KType, VType> map = newInstance();", "modifier": "public", "type": "KTypeVTypeWormMap<KType, VType>", "declarator": "map = newInstance()", "var_name": "map"}, {"original_string": "private static final int MIN_RANDOM_KEY = -50;", "modifier": "private static final", "type": "int", "declarator": "MIN_RANDOM_KEY = -50", "var_name": "MIN_RANDOM_KEY"}, {"original_string": "private static final int MAX_RANDOM_KEY = 50;", "modifier": "private static final", "type": "int", "declarator": "MAX_RANDOM_KEY = 50", "var_name": "MAX_RANDOM_KEY"}], "file": "hppc/src/test/templates/com/carrotsearch/hppc/KTypeVTypeWormMapTest.java"}, "test_case": {"identifier": "testRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemove()\n    {\n        map.put(key1, value1);\n        assertEquals2(value1, map.remove(key1));\n        assertEquals2(Intrinsics.<VType> empty(), map.remove(key1));\n        assertEquals(0, map.size());\n\n        // These are internals, but perhaps worth asserting too.\n        assertEquals(0, map.size());\n    }", "signature": "void testRemove()", "full_signature": "@Test public void testRemove()", "class_method_signature": "KTypeVTypeWormMapTest.testRemove()", "testcase": true, "constructor": false, "invocations": ["put", "assertEquals2", "remove", "assertEquals2", "empty", "remove", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "KTypeVTypeWormMap", "superclass": "", "interfaces": "implements /*! #if ($templateonly) !*/ Intrinsics.EqualityFunction, /*! #end !*/\n        /*! #if ($templateonly) !*/ Intrinsics.KeyHasher<KType>, /*! #end !*/\n        KTypeVTypeMap<KType, VType>,\n        Preallocable,\n        Cloneable,\n        Accountable", "fields": [{"original_string": "public /*! #if ($TemplateOptions.KTypeGeneric) !*/\n          Object[]\n          /*! #else KType [] #end !*/\n          keys;", "modifier": "public", "type": "Object[]", "declarator": "keys", "var_name": "keys"}, {"original_string": "public /*! #if ($TemplateOptions.VTypeGeneric) !*/\n          Object[]\n          /*! #else VType [] #end !*/\n          values;", "modifier": "public", "type": "Object[]", "declarator": "values", "var_name": "values"}, {"original_string": "public byte[] next;", "modifier": "public", "type": "byte[]", "declarator": "next", "var_name": "next"}, {"original_string": "protected int size;", "modifier": "protected", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "protected int iterationSeed;", "modifier": "protected", "type": "int", "declarator": "iterationSeed", "var_name": "iterationSeed"}], "methods": [{"identifier": "KTypeVTypeWormMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " KTypeVTypeWormMap()", "full_signature": "public  KTypeVTypeWormMap()", "class_method_signature": "KTypeVTypeWormMap.KTypeVTypeWormMap()", "testcase": false, "constructor": true}, {"identifier": "KTypeVTypeWormMap", "parameters": "(int expectedElements)", "modifiers": "public", "return": "", "signature": " KTypeVTypeWormMap(int expectedElements)", "full_signature": "public  KTypeVTypeWormMap(int expectedElements)", "class_method_signature": "KTypeVTypeWormMap.KTypeVTypeWormMap(int expectedElements)", "testcase": false, "constructor": true}, {"identifier": "KTypeVTypeWormMap", "parameters": "(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "modifiers": "public", "return": "", "signature": " KTypeVTypeWormMap(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "full_signature": "public  KTypeVTypeWormMap(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "class_method_signature": "KTypeVTypeWormMap.KTypeVTypeWormMap(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "testcase": false, "constructor": true}, {"identifier": "from", "parameters": "(KType[] keys, VType[] values)", "modifiers": "public static", "return": "KTypeVTypeWormMap<KType, VType>", "signature": "KTypeVTypeWormMap<KType, VType> from(KType[] keys, VType[] values)", "full_signature": "public static KTypeVTypeWormMap<KType, VType> from(KType[] keys, VType[] values)", "class_method_signature": "KTypeVTypeWormMap.from(KType[] keys, VType[] values)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "KTypeVTypeWormMap<KType, VType>", "signature": "KTypeVTypeWormMap<KType, VType> clone()", "full_signature": "@Override public KTypeVTypeWormMap<KType, VType> clone()", "class_method_signature": "KTypeVTypeWormMap.clone()", "testcase": false, "constructor": false}, {"identifier": "noValue", "parameters": "()", "modifiers": "public", "return": "VType", "signature": "VType noValue()", "full_signature": "public VType noValue()", "class_method_signature": "KTypeVTypeWormMap.noValue()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "KTypeVTypeWormMap.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "KTypeVTypeWormMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(KType key)", "modifiers": "@Override public", "return": "VType", "signature": "VType get(KType key)", "full_signature": "@Override public VType get(KType key)", "class_method_signature": "KTypeVTypeWormMap.get(KType key)", "testcase": false, "constructor": false}, {"identifier": "getOrDefault", "parameters": "(KType key, VType defaultValue)", "modifiers": "@Override public", "return": "VType", "signature": "VType getOrDefault(KType key, VType defaultValue)", "full_signature": "@Override public VType getOrDefault(KType key, VType defaultValue)", "class_method_signature": "KTypeVTypeWormMap.getOrDefault(KType key, VType defaultValue)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(KType key, VType value)", "modifiers": "@Override public", "return": "VType", "signature": "VType put(KType key, VType value)", "full_signature": "@Override public VType put(KType key, VType value)", "class_method_signature": "KTypeVTypeWormMap.put(KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "modifiers": "@Override public", "return": "int", "signature": "int putAll(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "full_signature": "@Override public int putAll(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "class_method_signature": "KTypeVTypeWormMap.putAll(KTypeVTypeAssociativeContainer<? extends KType, ? extends VType> container)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Iterable<? extends KTypeVTypeCursor<? extends KType, ? extends VType>> iterable)", "modifiers": "@Override public", "return": "int", "signature": "int putAll(Iterable<? extends KTypeVTypeCursor<? extends KType, ? extends VType>> iterable)", "full_signature": "@Override public int putAll(Iterable<? extends KTypeVTypeCursor<? extends KType, ? extends VType>> iterable)", "class_method_signature": "KTypeVTypeWormMap.putAll(Iterable<? extends KTypeVTypeCursor<? extends KType, ? extends VType>> iterable)", "testcase": false, "constructor": false}, {"identifier": "putOrAdd", "parameters": "(KType key, VType putValue, VType incrementValue)", "modifiers": "@Override public", "return": "VType", "signature": "VType putOrAdd(KType key, VType putValue, VType incrementValue)", "full_signature": "@Override public VType putOrAdd(KType key, VType putValue, VType incrementValue)", "class_method_signature": "KTypeVTypeWormMap.putOrAdd(KType key, VType putValue, VType incrementValue)", "testcase": false, "constructor": false}, {"identifier": "addTo", "parameters": "(KType key, VType additionValue)", "modifiers": "@Override public", "return": "VType", "signature": "VType addTo(KType key, VType additionValue)", "full_signature": "@Override public VType addTo(KType key, VType additionValue)", "class_method_signature": "KTypeVTypeWormMap.addTo(KType key, VType additionValue)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(KType key, VType value)", "modifiers": "public", "return": "boolean", "signature": "boolean putIfAbsent(KType key, VType value)", "full_signature": "public boolean putIfAbsent(KType key, VType value)", "class_method_signature": "KTypeVTypeWormMap.putIfAbsent(KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(KType key)", "modifiers": "@Override public", "return": "VType", "signature": "VType remove(KType key)", "full_signature": "@Override public VType remove(KType key)", "class_method_signature": "KTypeVTypeWormMap.remove(KType key)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KTypeContainer<? super KType> other)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KTypeContainer<? super KType> other)", "full_signature": "@Override public int removeAll(KTypeContainer<? super KType> other)", "class_method_signature": "KTypeVTypeWormMap.removeAll(KTypeContainer<? super KType> other)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KTypePredicate<? super KType> predicate)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KTypePredicate<? super KType> predicate)", "full_signature": "@Override public int removeAll(KTypePredicate<? super KType> predicate)", "class_method_signature": "KTypeVTypeWormMap.removeAll(KTypePredicate<? super KType> predicate)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(KTypeVTypePredicate<? super KType, ? super VType> predicate)", "modifiers": "@Override public", "return": "int", "signature": "int removeAll(KTypeVTypePredicate<? super KType, ? super VType> predicate)", "full_signature": "@Override public int removeAll(KTypeVTypePredicate<? super KType, ? super VType> predicate)", "class_method_signature": "KTypeVTypeWormMap.removeAll(KTypeVTypePredicate<? super KType, ? super VType> predicate)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T procedure)", "modifiers": "@Override public", "return": "T", "signature": "T forEach(T procedure)", "full_signature": "@Override public T forEach(T procedure)", "class_method_signature": "KTypeVTypeWormMap.forEach(T procedure)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(T predicate)", "modifiers": "@Override public", "return": "T", "signature": "T forEach(T predicate)", "full_signature": "@Override public T forEach(T predicate)", "class_method_signature": "KTypeVTypeWormMap.forEach(T predicate)", "testcase": false, "constructor": false}, {"identifier": "keys", "parameters": "()", "modifiers": "@Override public", "return": "KeysContainer", "signature": "KeysContainer keys()", "full_signature": "@Override public KeysContainer keys()", "class_method_signature": "KTypeVTypeWormMap.keys()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "KTypeCollection<VType>", "signature": "KTypeCollection<VType> values()", "full_signature": "@Override public KTypeCollection<VType> values()", "class_method_signature": "KTypeVTypeWormMap.values()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<KTypeVTypeCursor<KType, VType>>", "signature": "Iterator<KTypeVTypeCursor<KType, VType>> iterator()", "full_signature": "@Override public Iterator<KTypeVTypeCursor<KType, VType>> iterator()", "class_method_signature": "KTypeVTypeWormMap.iterator()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(KType key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(KType key)", "full_signature": "@Override public boolean containsKey(KType key)", "class_method_signature": "KTypeVTypeWormMap.containsKey(KType key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "KTypeVTypeWormMap.clear()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void release()", "full_signature": "@Override public void release()", "class_method_signature": "KTypeVTypeWormMap.release()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public boolean equals(Object o)", "class_method_signature": "KTypeVTypeWormMap.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object v1, Object v2)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object v1, Object v2)", "full_signature": "@Override public boolean equals(Object v1, Object v2)", "class_method_signature": "KTypeVTypeWormMap.equals(Object v1, Object v2)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "KTypeVTypeWormMap.hashCode()", "testcase": false, "constructor": false}, {"identifier": "hashKey", "parameters": "(KType key)", "modifiers": "@Override public", "return": "int", "signature": "int hashKey(KType key)", "full_signature": "@Override public int hashKey(KType key)", "class_method_signature": "KTypeVTypeWormMap.hashKey(KType key)", "testcase": false, "constructor": false}, {"identifier": "hashMod", "parameters": "(KType key)", "modifiers": "private", "return": "int", "signature": "int hashMod(KType key)", "full_signature": "private int hashMod(KType key)", "class_method_signature": "KTypeVTypeWormMap.hashMod(KType key)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(KType key)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(KType key)", "full_signature": "@Override public int indexOf(KType key)", "class_method_signature": "KTypeVTypeWormMap.indexOf(KType key)", "testcase": false, "constructor": false}, {"identifier": "indexExists", "parameters": "(int index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean indexExists(int index)", "full_signature": "@Override public boolean indexExists(int index)", "class_method_signature": "KTypeVTypeWormMap.indexExists(int index)", "testcase": false, "constructor": false}, {"identifier": "indexGet", "parameters": "(int index)", "modifiers": "@Override public", "return": "VType", "signature": "VType indexGet(int index)", "full_signature": "@Override public VType indexGet(int index)", "class_method_signature": "KTypeVTypeWormMap.indexGet(int index)", "testcase": false, "constructor": false}, {"identifier": "indexReplace", "parameters": "(int index, VType newValue)", "modifiers": "@Override public", "return": "VType", "signature": "VType indexReplace(int index, VType newValue)", "full_signature": "@Override public VType indexReplace(int index, VType newValue)", "class_method_signature": "KTypeVTypeWormMap.indexReplace(int index, VType newValue)", "testcase": false, "constructor": false}, {"identifier": "indexInsert", "parameters": "(int index, KType key, VType value)", "modifiers": "@Override public", "return": "void", "signature": "void indexInsert(int index, KType key, VType value)", "full_signature": "@Override public void indexInsert(int index, KType key, VType value)", "class_method_signature": "KTypeVTypeWormMap.indexInsert(int index, KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "KTypeVTypeWormMap.toString()", "testcase": false, "constructor": false}, {"identifier": "ensureCapacity", "parameters": "(int expectedElements)", "modifiers": "@Override public", "return": "void", "signature": "void ensureCapacity(int expectedElements)", "full_signature": "@Override public void ensureCapacity(int expectedElements)", "class_method_signature": "KTypeVTypeWormMap.ensureCapacity(int expectedElements)", "testcase": false, "constructor": false}, {"identifier": "visualizeKeyDistribution", "parameters": "(int characters)", "modifiers": "@Override public", "return": "String", "signature": "String visualizeKeyDistribution(int characters)", "full_signature": "@Override public String visualizeKeyDistribution(int characters)", "class_method_signature": "KTypeVTypeWormMap.visualizeKeyDistribution(int characters)", "testcase": false, "constructor": false}, {"identifier": "ramBytesAllocated", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long ramBytesAllocated()", "full_signature": "@Override public long ramBytesAllocated()", "class_method_signature": "KTypeVTypeWormMap.ramBytesAllocated()", "testcase": false, "constructor": false}, {"identifier": "ramBytesUsed", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long ramBytesUsed()", "full_signature": "@Override public long ramBytesUsed()", "class_method_signature": "KTypeVTypeWormMap.ramBytesUsed()", "testcase": false, "constructor": false}, {"identifier": "allocateBuffers", "parameters": "(int capacity)", "modifiers": "protected", "return": "void", "signature": "void allocateBuffers(int capacity)", "full_signature": "protected void allocateBuffers(int capacity)", "class_method_signature": "KTypeVTypeWormMap.allocateBuffers(int capacity)", "testcase": false, "constructor": false}, {"identifier": "putOldEntries", "parameters": "(KType[] oldKeys, VType[] oldValues, byte[] oldNext, int entryNum)", "modifiers": "private", "return": "void", "signature": "void putOldEntries(KType[] oldKeys, VType[] oldValues, byte[] oldNext, int entryNum)", "full_signature": "private void putOldEntries(KType[] oldKeys, VType[] oldValues, byte[] oldNext, int entryNum)", "class_method_signature": "KTypeVTypeWormMap.putOldEntries(KType[] oldKeys, VType[] oldValues, byte[] oldNext, int entryNum)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(KType key, VType value, PutPolicy policy, boolean sizeIncrease)", "modifiers": "private", "return": "VType", "signature": "VType put(KType key, VType value, PutPolicy policy, boolean sizeIncrease)", "full_signature": "private VType put(KType key, VType value, PutPolicy policy, boolean sizeIncrease)", "class_method_signature": "KTypeVTypeWormMap.put(KType key, VType value, PutPolicy policy, boolean sizeIncrease)", "testcase": false, "constructor": false}, {"identifier": "enlargeIfNeeded", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean enlargeIfNeeded()", "full_signature": "private boolean enlargeIfNeeded()", "class_method_signature": "KTypeVTypeWormMap.enlargeIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "enlargeAndPutNewEntry", "parameters": "(KType key, VType value)", "modifiers": "private", "return": "void", "signature": "void enlargeAndPutNewEntry(KType key, VType value)", "full_signature": "private void enlargeAndPutNewEntry(KType key, VType value)", "class_method_signature": "KTypeVTypeWormMap.enlargeAndPutNewEntry(KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int headIndex, int previousEntryIndex, int entryToRemoveIndex)", "modifiers": "private", "return": "VType", "signature": "VType remove(int headIndex, int previousEntryIndex, int entryToRemoveIndex)", "full_signature": "private VType remove(int headIndex, int previousEntryIndex, int entryToRemoveIndex)", "class_method_signature": "KTypeVTypeWormMap.remove(int headIndex, int previousEntryIndex, int entryToRemoveIndex)", "testcase": false, "constructor": false}, {"identifier": "appendTailOfChain", "parameters": "(int lastEntryIndex, KType key, VType value)", "modifiers": "private", "return": "boolean", "signature": "boolean appendTailOfChain(int lastEntryIndex, KType key, VType value)", "full_signature": "private boolean appendTailOfChain(int lastEntryIndex, KType key, VType value)", "class_method_signature": "KTypeVTypeWormMap.appendTailOfChain(int lastEntryIndex, KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "appendTailOfChain", "parameters": "(int lastEntryIndex, KType key, VType value, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "modifiers": "private", "return": "boolean", "signature": "boolean appendTailOfChain(int lastEntryIndex, KType key, VType value, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "full_signature": "private boolean appendTailOfChain(int lastEntryIndex, KType key, VType value, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "class_method_signature": "KTypeVTypeWormMap.appendTailOfChain(int lastEntryIndex, KType key, VType value, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "testcase": false, "constructor": false}, {"identifier": "searchAndMoveBucket", "parameters": "(int fromIndex, int range, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "modifiers": "private", "return": "int", "signature": "int searchAndMoveBucket(int fromIndex, int range, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "full_signature": "private int searchAndMoveBucket(int fromIndex, int range, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "class_method_signature": "KTypeVTypeWormMap.searchAndMoveBucket(int fromIndex, int range, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "testcase": false, "constructor": false}, {"identifier": "putNewEntry", "parameters": "(int hashIndex, int nextOffset, KType key, VType value)", "modifiers": "private", "return": "void", "signature": "void putNewEntry(int hashIndex, int nextOffset, KType key, VType value)", "full_signature": "private void putNewEntry(int hashIndex, int nextOffset, KType key, VType value)", "class_method_signature": "KTypeVTypeWormMap.putNewEntry(int hashIndex, int nextOffset, KType key, VType value)", "testcase": false, "constructor": false}, {"identifier": "moveTailOfChain", "parameters": "(int tailIndex, int nextOffset, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "modifiers": "private", "return": "boolean", "signature": "boolean moveTailOfChain(int tailIndex, int nextOffset, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "full_signature": "private boolean moveTailOfChain(int tailIndex, int nextOffset, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "class_method_signature": "KTypeVTypeWormMap.moveTailOfChain(int tailIndex, int nextOffset, ExcludedIndexes excludedIndexes, int recursiveCallLevel)", "testcase": false, "constructor": false}, {"identifier": "searchInChain", "parameters": "(KType key, int index, int nextOffset)", "modifiers": "private", "return": "int", "signature": "int searchInChain(KType key, int index, int nextOffset)", "full_signature": "private int searchInChain(KType key, int index, int nextOffset)", "class_method_signature": "KTypeVTypeWormMap.searchInChain(KType key, int index, int nextOffset)", "testcase": false, "constructor": false}, {"identifier": "searchInChainReturnPrevious", "parameters": "(KType key, int index, int nextOffset)", "modifiers": "private", "return": "int", "signature": "int searchInChainReturnPrevious(KType key, int index, int nextOffset)", "full_signature": "private int searchInChainReturnPrevious(KType key, int index, int nextOffset)", "class_method_signature": "KTypeVTypeWormMap.searchInChainReturnPrevious(KType key, int index, int nextOffset)", "testcase": false, "constructor": false}, {"identifier": "nextIterationSeed", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int nextIterationSeed()", "full_signature": "protected int nextIterationSeed()", "class_method_signature": "KTypeVTypeWormMap.nextIterationSeed()", "testcase": false, "constructor": false}], "file": "hppc/src/main/templates/com/carrotsearch/hppc/KTypeVTypeWormMap.java"}, "focal_method": {"identifier": "remove", "parameters": "(KType key)", "modifiers": "@Override public", "return": "VType", "body": "@Override\n  public VType remove(KType key) {\n    final byte[] next = this.next;\n\n    // Compute the key hash index.\n    int hashIndex = hashMod(key);\n    int nextOffset = next[hashIndex];\n    if (nextOffset <= 0) {\n      // The bucket is either free, or in tail-of-chain, so no entry for the key.\n      return noValue();\n    }\n    // The bucket contains a head-of-chain entry.\n    // Look for the key in the chain.\n    int previousEntryIndex = searchInChainReturnPrevious(key, hashIndex, nextOffset);\n    if (previousEntryIndex < 0) {\n      // No entry matches the key.\n      return noValue();\n    }\n    int entryToRemoveIndex = previousEntryIndex == Integer.MAX_VALUE ?\n            hashIndex : addOffset(previousEntryIndex, Math.abs(next[previousEntryIndex]), next.length);\n    return remove(hashIndex, previousEntryIndex, entryToRemoveIndex);\n  }", "signature": "VType remove(KType key)", "full_signature": "@Override public VType remove(KType key)", "class_method_signature": "KTypeVTypeWormMap.remove(KType key)", "testcase": false, "constructor": false, "invocations": ["hashMod", "noValue", "searchInChainReturnPrevious", "noValue", "addOffset", "abs", "remove"]}, "repository": {"repo_id": 1397974, "url": "https://github.com/carrotsearch/hppc", "stars": 638, "created": "2/22/2011 3:14:20 PM +00:00", "updates": "2020-01-08T06:28:34+00:00", "fork": "False", "license": "licensed"}}