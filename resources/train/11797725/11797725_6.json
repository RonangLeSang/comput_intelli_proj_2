{"test_class": {"identifier": "FixMessageEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static FixMessageEncoder encoder;", "modifier": "private static", "type": "FixMessageEncoder", "declarator": "encoder", "var_name": "encoder"}, {"original_string": "private final ZonedDateTime timestamp = ZonedDateTime.ofInstant(Instant.ofEpochMilli(123456789), ZoneId.of(\"UTC\"));", "modifier": "private final", "type": "ZonedDateTime", "declarator": "timestamp = ZonedDateTime.ofInstant(Instant.ofEpochMilli(123456789), ZoneId.of(\"UTC\"))", "var_name": "timestamp"}, {"original_string": "@Mock\n    private ChannelHandlerContext ctx;", "modifier": "@Mock\n    private", "type": "ChannelHandlerContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "@Mock\n    private ByteBufAllocator byteBufAllocator;", "modifier": "@Mock\n    private", "type": "ByteBufAllocator", "declarator": "byteBufAllocator", "var_name": "byteBufAllocator"}, {"original_string": "private FixMessageBuilder messageBuilder;", "modifier": "private", "type": "FixMessageBuilder", "declarator": "messageBuilder", "var_name": "messageBuilder"}, {"original_string": "private ByteBuf out;", "modifier": "private", "type": "ByteBuf", "declarator": "out", "var_name": "out"}], "file": "core/src/test/java/fixio/netty/codec/FixMessageEncoderTest.java"}, "test_case": {"identifier": "testEncodeWithGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeWithGroup() throws Exception {\n\n        Group group1 = messageBuilder.newGroup(1002, 2);\n        group1.add(1003, \"g1-1\");\n        group1.add(1004, \"g1-2\");\n\n        Group group2 = messageBuilder.newGroup(1002);\n        group2.add(1003, \"g2-1\");\n        group2.add(1004, \"g2-2\");\n\n        encoder.encode(ctx, messageBuilder, out);\n\n        verify(ctx).flush();\n\n        String expectedString = \"8=FIX.4.2\\u00019=136\\u000135=0\\u000149=SenderCompID\\u000156=TargetCompID\\u000134=2\\u000152=19700102-10:17:36.789\\u00011001=test2\\u00011000=test1\\u00011002=2\\u00011003=g1-1\\u00011004=g1-2\\u00011003=g2-1\\u00011004=g2-2\\u000110=014\\u0001\";\n\n        assertResult(expectedString);\n    }", "signature": "void testEncodeWithGroup()", "full_signature": "@Test public void testEncodeWithGroup()", "class_method_signature": "FixMessageEncoderTest.testEncodeWithGroup()", "testcase": true, "constructor": false, "invocations": ["newGroup", "add", "add", "newGroup", "add", "add", "encode", "flush", "verify", "assertResult"]}, "focal_class": {"identifier": "FixMessageEncoder", "superclass": "extends MessageToByteEncoder<FixMessageBuilder>", "interfaces": "", "fields": [{"original_string": "private static final Charset CHARSET = StandardCharsets.US_ASCII;", "modifier": "private static final", "type": "Charset", "declarator": "CHARSET = StandardCharsets.US_ASCII", "var_name": "CHARSET"}], "methods": [{"identifier": "validateRequiredFields", "parameters": "(FixMessageHeader header)", "modifiers": "private static", "return": "void", "signature": "void validateRequiredFields(FixMessageHeader header)", "full_signature": "private static void validateRequiredFields(FixMessageHeader header)", "class_method_signature": "FixMessageEncoder.validateRequiredFields(FixMessageHeader header)", "testcase": false, "constructor": false}, {"identifier": "writeField", "parameters": "(int fieldNum, AbstractField field, ByteBuf out)", "modifiers": "private static", "return": "void", "signature": "void writeField(int fieldNum, AbstractField field, ByteBuf out)", "full_signature": "private static void writeField(int fieldNum, AbstractField field, ByteBuf out)", "class_method_signature": "FixMessageEncoder.writeField(int fieldNum, AbstractField field, ByteBuf out)", "testcase": false, "constructor": false}, {"identifier": "writeField", "parameters": "(int fieldNum, String stringValue, ByteBuf out)", "modifiers": "private static", "return": "void", "signature": "void writeField(int fieldNum, String stringValue, ByteBuf out)", "full_signature": "private static void writeField(int fieldNum, String stringValue, ByteBuf out)", "class_method_signature": "FixMessageEncoder.writeField(int fieldNum, String stringValue, ByteBuf out)", "testcase": false, "constructor": false}, {"identifier": "calculateChecksum", "parameters": "(ByteBuf buf, int offset)", "modifiers": "static", "return": "int", "signature": "int calculateChecksum(ByteBuf buf, int offset)", "full_signature": "static int calculateChecksum(ByteBuf buf, int offset)", "class_method_signature": "FixMessageEncoder.calculateChecksum(ByteBuf buf, int offset)", "testcase": false, "constructor": false}, {"identifier": "encodeHeader", "parameters": "(FixMessageHeader header, ByteBuf out)", "modifiers": "private static", "return": "void", "signature": "void encodeHeader(FixMessageHeader header, ByteBuf out)", "full_signature": "private static void encodeHeader(FixMessageHeader header, ByteBuf out)", "class_method_signature": "FixMessageEncoder.encodeHeader(FixMessageHeader header, ByteBuf out)", "testcase": false, "constructor": false}, {"identifier": "fillBodyBuf", "parameters": "(final ByteBuf payloadBuf,\n                                   FixMessageBuilder msg,\n                                   FixMessageHeader header)", "modifiers": "private static", "return": "int", "signature": "int fillBodyBuf(final ByteBuf payloadBuf,\n                                   FixMessageBuilder msg,\n                                   FixMessageHeader header)", "full_signature": "private static int fillBodyBuf(final ByteBuf payloadBuf,\n                                   FixMessageBuilder msg,\n                                   FixMessageHeader header)", "class_method_signature": "FixMessageEncoder.fillBodyBuf(final ByteBuf payloadBuf,\n                                   FixMessageBuilder msg,\n                                   FixMessageHeader header)", "testcase": false, "constructor": false}, {"identifier": "encodeMessageFragment", "parameters": "(ByteBuf payloadBuf,\n                                              FixMessageFragment messageFragment)", "modifiers": "private static", "return": "void", "signature": "void encodeMessageFragment(ByteBuf payloadBuf,\n                                              FixMessageFragment messageFragment)", "full_signature": "private static void encodeMessageFragment(ByteBuf payloadBuf,\n                                              FixMessageFragment messageFragment)", "class_method_signature": "FixMessageEncoder.encodeMessageFragment(ByteBuf payloadBuf,\n                                              FixMessageFragment messageFragment)", "testcase": false, "constructor": false}, {"identifier": "writeChecksumField", "parameters": "(ByteBuf out, int value)", "modifiers": "static", "return": "void", "signature": "void writeChecksumField(ByteBuf out, int value)", "full_signature": "static void writeChecksumField(ByteBuf out, int value)", "class_method_signature": "FixMessageEncoder.writeChecksumField(ByteBuf out, int value)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out)", "modifiers": "@Override public", "return": "void", "signature": "void encode(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out)", "full_signature": "@Override public void encode(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out)", "class_method_signature": "FixMessageEncoder.encode(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out)", "testcase": false, "constructor": false}], "file": "core/src/main/java/fixio/netty/codec/FixMessageEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void encode(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out) {\n        final FixMessageHeader header = msg.getHeader();\n        validateRequiredFields(header);\n\n        final int initialOffset = out.writerIndex();\n\n        final ByteBufAllocator byteBufAllocator = ctx.alloc();\n\n        final ByteBuf bodyBuf = byteBufAllocator.buffer();\n        final ByteBuf headBuf = byteBufAllocator.buffer();\n\n        int bodyLength = fillBodyBuf(bodyBuf, msg, header);\n\n        // begin string\n        writeField(8, header.getBeginString(), headBuf);\n        // body length\n        writeField(9, Integer.toString(bodyLength), headBuf);\n\n        out.writeBytes(headBuf);\n        out.writeBytes(bodyBuf);\n\n        int checksum = calculateChecksum(out, initialOffset);\n\n        // Checksum\n        writeChecksumField(out, checksum);\n        ctx.flush();\n\n        headBuf.release();\n        bodyBuf.release();\n        assert (headBuf.refCnt() == 0);\n        assert (bodyBuf.refCnt() == 0);\n    }", "signature": "void encode(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out)", "full_signature": "@Override public void encode(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out)", "class_method_signature": "FixMessageEncoder.encode(ChannelHandlerContext ctx,\n                       FixMessageBuilder msg,\n                       ByteBuf out)", "testcase": false, "constructor": false, "invocations": ["getHeader", "validateRequiredFields", "writerIndex", "alloc", "buffer", "buffer", "fillBodyBuf", "writeField", "getBeginString", "writeField", "toString", "writeBytes", "writeBytes", "calculateChecksum", "writeChecksumField", "flush", "release", "release", "refCnt", "refCnt"]}, "repository": {"repo_id": 11797725, "url": "https://github.com/kpavlov/fixio", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 77, "size": 1138, "license": "licensed"}}