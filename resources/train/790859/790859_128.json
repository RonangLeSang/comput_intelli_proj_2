{"test_class": {"identifier": "DeploymentTest", "superclass": "", "interfaces": "", "fields": [], "file": "deploy/base/src/test/java/org/switchyard/deploy/internal/DeploymentTest.java"}, "test_case": {"identifier": "testActivationTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testActivationTypes() throws Exception {\n        InputStream swConfigStream = Classes.getResourceAsStream(\"/switchyard-config-mock-01.xml\", getClass());\n        Deployment deployment = new Deployment(swConfigStream);\n        swConfigStream.close();\n\n        List<String> types = deployment.getActivationTypes();\n        Assert.assertEquals(1, types.size());\n        Assert.assertEquals(\"mock\", types.iterator().next());\n    }", "signature": "void testActivationTypes()", "full_signature": "@Test public void testActivationTypes()", "class_method_signature": "DeploymentTest.testActivationTypes()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "close", "getActivationTypes", "assertEquals", "size", "assertEquals", "next", "iterator"]}, "focal_class": {"identifier": "Deployment", "superclass": "extends AbstractDeployment", "interfaces": "", "fields": [{"original_string": "private static Logger _log = Logger.getLogger(Deployment.class);", "modifier": "private static", "type": "Logger", "declarator": "_log = Logger.getLogger(Deployment.class)", "var_name": "_log"}, {"original_string": "private Map<String, Activator> _activators = new HashMap<String, Activator>();", "modifier": "private", "type": "Map<String, Activator>", "declarator": "_activators = new HashMap<String, Activator>()", "var_name": "_activators"}, {"original_string": "private List<Activation> _components = new LinkedList<Activation>();", "modifier": "private", "type": "List<Activation>", "declarator": "_components = new LinkedList<Activation>()", "var_name": "_components"}, {"original_string": "private List<Activation> _serviceBindings = new LinkedList<Activation>();", "modifier": "private", "type": "List<Activation>", "declarator": "_serviceBindings = new LinkedList<Activation>()", "var_name": "_serviceBindings"}, {"original_string": "private List<Activation> _referenceBindings = new LinkedList<Activation>();", "modifier": "private", "type": "List<Activation>", "declarator": "_referenceBindings = new LinkedList<Activation>()", "var_name": "_referenceBindings"}], "methods": [{"identifier": "Deployment", "parameters": "(InputStream configStream)", "modifiers": "public", "return": "", "signature": " Deployment(InputStream configStream)", "full_signature": "public  Deployment(InputStream configStream)", "class_method_signature": "Deployment.Deployment(InputStream configStream)", "testcase": false, "constructor": true}, {"identifier": "Deployment", "parameters": "(SwitchYardModel configModel)", "modifiers": "public", "return": "", "signature": " Deployment(SwitchYardModel configModel)", "full_signature": "public  Deployment(SwitchYardModel configModel)", "class_method_signature": "Deployment.Deployment(SwitchYardModel configModel)", "testcase": false, "constructor": true}, {"identifier": "doInit", "parameters": "(List<Activator> activators)", "modifiers": "protected", "return": "void", "signature": "void doInit(List<Activator> activators)", "full_signature": "protected void doInit(List<Activator> activators)", "class_method_signature": "Deployment.doInit(List<Activator> activators)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "Deployment.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "Deployment.stop()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "Deployment.destroy()", "testcase": false, "constructor": false}, {"identifier": "getGatwayLifecycle", "parameters": "(final QName serviceName, final String bindingName)", "modifiers": "@Override public", "return": "Lifecycle", "signature": "Lifecycle getGatwayLifecycle(final QName serviceName, final String bindingName)", "full_signature": "@Override public Lifecycle getGatwayLifecycle(final QName serviceName, final String bindingName)", "class_method_signature": "Deployment.getGatwayLifecycle(final QName serviceName, final String bindingName)", "testcase": false, "constructor": false}, {"identifier": "findActivator", "parameters": "(String type)", "modifiers": "public", "return": "Activator", "signature": "Activator findActivator(String type)", "full_signature": "public Activator findActivator(String type)", "class_method_signature": "Deployment.findActivator(String type)", "testcase": false, "constructor": false}, {"identifier": "getActivationTypes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getActivationTypes()", "full_signature": "public List<String> getActivationTypes()", "class_method_signature": "Deployment.getActivationTypes()", "testcase": false, "constructor": false}, {"identifier": "findActivator", "parameters": "(ComponentModel component)", "modifiers": "private", "return": "Activator", "signature": "Activator findActivator(ComponentModel component)", "full_signature": "private Activator findActivator(ComponentModel component)", "class_method_signature": "Deployment.findActivator(ComponentModel component)", "testcase": false, "constructor": false}, {"identifier": "registerTransformers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerTransformers()", "full_signature": "private void registerTransformers()", "class_method_signature": "Deployment.registerTransformers()", "testcase": false, "constructor": false}, {"identifier": "registerValidators", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerValidators()", "full_signature": "private void registerValidators()", "class_method_signature": "Deployment.registerValidators()", "testcase": false, "constructor": false}, {"identifier": "deployReferenceBindings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deployReferenceBindings()", "full_signature": "private void deployReferenceBindings()", "class_method_signature": "Deployment.deployReferenceBindings()", "testcase": false, "constructor": false}, {"identifier": "getCompositeReferenceInterface", "parameters": "(CompositeReferenceModel compositeRefModel)", "modifiers": "private", "return": "ServiceInterface", "signature": "ServiceInterface getCompositeReferenceInterface(CompositeReferenceModel compositeRefModel)", "full_signature": "private ServiceInterface getCompositeReferenceInterface(CompositeReferenceModel compositeRefModel)", "class_method_signature": "Deployment.getCompositeReferenceInterface(CompositeReferenceModel compositeRefModel)", "testcase": false, "constructor": false}, {"identifier": "getCompositeServiceInterface", "parameters": "(CompositeServiceModel compositeServiceModel)", "modifiers": "private", "return": "ServiceInterface", "signature": "ServiceInterface getCompositeServiceInterface(CompositeServiceModel compositeServiceModel)", "full_signature": "private ServiceInterface getCompositeServiceInterface(CompositeServiceModel compositeServiceModel)", "class_method_signature": "Deployment.getCompositeServiceInterface(CompositeServiceModel compositeServiceModel)", "testcase": false, "constructor": false}, {"identifier": "getCompositeServiceThrottling", "parameters": "(CompositeServiceModel compositeServiceModel)", "modifiers": "private", "return": "Throttling", "signature": "Throttling getCompositeServiceThrottling(CompositeServiceModel compositeServiceModel)", "full_signature": "private Throttling getCompositeServiceThrottling(CompositeServiceModel compositeServiceModel)", "class_method_signature": "Deployment.getCompositeServiceThrottling(CompositeServiceModel compositeServiceModel)", "testcase": false, "constructor": false}, {"identifier": "hasComponentReferenceInterface", "parameters": "(ComponentReferenceModel componentRef)", "modifiers": "private", "return": "boolean", "signature": "boolean hasComponentReferenceInterface(ComponentReferenceModel componentRef)", "full_signature": "private boolean hasComponentReferenceInterface(ComponentReferenceModel componentRef)", "class_method_signature": "Deployment.hasComponentReferenceInterface(ComponentReferenceModel componentRef)", "testcase": false, "constructor": false}, {"identifier": "hasCompositeReferenceInterface", "parameters": "(CompositeReferenceModel compositeRef)", "modifiers": "private", "return": "boolean", "signature": "boolean hasCompositeReferenceInterface(CompositeReferenceModel compositeRef)", "full_signature": "private boolean hasCompositeReferenceInterface(CompositeReferenceModel compositeRef)", "class_method_signature": "Deployment.hasCompositeReferenceInterface(CompositeReferenceModel compositeRef)", "testcase": false, "constructor": false}, {"identifier": "hasComponentServiceInterface", "parameters": "(ComponentServiceModel componentService)", "modifiers": "private", "return": "boolean", "signature": "boolean hasComponentServiceInterface(ComponentServiceModel componentService)", "full_signature": "private boolean hasComponentServiceInterface(ComponentServiceModel componentService)", "class_method_signature": "Deployment.hasComponentServiceInterface(ComponentServiceModel componentService)", "testcase": false, "constructor": false}, {"identifier": "hasCompositeServiceInterface", "parameters": "(CompositeServiceModel compositeService)", "modifiers": "private", "return": "boolean", "signature": "boolean hasCompositeServiceInterface(CompositeServiceModel compositeService)", "full_signature": "private boolean hasCompositeServiceInterface(CompositeServiceModel compositeService)", "class_method_signature": "Deployment.hasCompositeServiceInterface(CompositeServiceModel compositeService)", "testcase": false, "constructor": false}, {"identifier": "getComponentReferenceInterface", "parameters": "(ComponentReferenceModel reference)", "modifiers": "private", "return": "ServiceInterface", "signature": "ServiceInterface getComponentReferenceInterface(ComponentReferenceModel reference)", "full_signature": "private ServiceInterface getComponentReferenceInterface(ComponentReferenceModel reference)", "class_method_signature": "Deployment.getComponentReferenceInterface(ComponentReferenceModel reference)", "testcase": false, "constructor": false}, {"identifier": "getComponentServiceInterface", "parameters": "(ComponentServiceModel service)", "modifiers": "private", "return": "ServiceInterface", "signature": "ServiceInterface getComponentServiceInterface(ComponentServiceModel service)", "full_signature": "private ServiceInterface getComponentServiceInterface(ComponentServiceModel service)", "class_method_signature": "Deployment.getComponentServiceInterface(ComponentServiceModel service)", "testcase": false, "constructor": false}, {"identifier": "loadServiceInterface", "parameters": "(InterfaceModel intfModel)", "modifiers": "private", "return": "ServiceInterface", "signature": "ServiceInterface loadServiceInterface(InterfaceModel intfModel)", "full_signature": "private ServiceInterface loadServiceInterface(InterfaceModel intfModel)", "class_method_signature": "Deployment.loadServiceInterface(InterfaceModel intfModel)", "testcase": false, "constructor": false}, {"identifier": "validateEsbInterface", "parameters": "(EsbInterfaceModel esbIntf)", "modifiers": "private", "return": "void", "signature": "void validateEsbInterface(EsbInterfaceModel esbIntf)", "full_signature": "private void validateEsbInterface(EsbInterfaceModel esbIntf)", "class_method_signature": "Deployment.validateEsbInterface(EsbInterfaceModel esbIntf)", "testcase": false, "constructor": false}, {"identifier": "isJavaInterface", "parameters": "(final String type)", "modifiers": "private", "return": "boolean", "signature": "boolean isJavaInterface(final String type)", "full_signature": "private boolean isJavaInterface(final String type)", "class_method_signature": "Deployment.isJavaInterface(final String type)", "testcase": false, "constructor": false}, {"identifier": "deployImplementations", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deployImplementations()", "full_signature": "private void deployImplementations()", "class_method_signature": "Deployment.deployImplementations()", "testcase": false, "constructor": false}, {"identifier": "deployServiceBindings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deployServiceBindings()", "full_signature": "private void deployServiceBindings()", "class_method_signature": "Deployment.deployServiceBindings()", "testcase": false, "constructor": false}, {"identifier": "undeployServiceBindings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void undeployServiceBindings()", "full_signature": "private void undeployServiceBindings()", "class_method_signature": "Deployment.undeployServiceBindings()", "testcase": false, "constructor": false}, {"identifier": "undeployImplementations", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void undeployImplementations()", "full_signature": "private void undeployImplementations()", "class_method_signature": "Deployment.undeployImplementations()", "testcase": false, "constructor": false}, {"identifier": "undeployReferenceBindings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void undeployReferenceBindings()", "full_signature": "private void undeployReferenceBindings()", "class_method_signature": "Deployment.undeployReferenceBindings()", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(String className)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> loadClass(String className)", "full_signature": "private Class<?> loadClass(String className)", "class_method_signature": "Deployment.loadClass(String className)", "testcase": false, "constructor": false}, {"identifier": "getPolicyRequirements", "parameters": "(ComponentServiceModel serviceModel)", "modifiers": "private", "return": "List<Policy>", "signature": "List<Policy> getPolicyRequirements(ComponentServiceModel serviceModel)", "full_signature": "private List<Policy> getPolicyRequirements(ComponentServiceModel serviceModel)", "class_method_signature": "Deployment.getPolicyRequirements(ComponentServiceModel serviceModel)", "testcase": false, "constructor": false}, {"identifier": "getPolicyRequirements", "parameters": "(ComponentImplementationModel implModel)", "modifiers": "private", "return": "List<Policy>", "signature": "List<Policy> getPolicyRequirements(ComponentImplementationModel implModel)", "full_signature": "private List<Policy> getPolicyRequirements(ComponentImplementationModel implModel)", "class_method_signature": "Deployment.getPolicyRequirements(ComponentImplementationModel implModel)", "testcase": false, "constructor": false}, {"identifier": "getPolicyRequirements", "parameters": "(ComponentReferenceModel referenceModel)", "modifiers": "private", "return": "List<Policy>", "signature": "List<Policy> getPolicyRequirements(ComponentReferenceModel referenceModel)", "full_signature": "private List<Policy> getPolicyRequirements(ComponentReferenceModel referenceModel)", "class_method_signature": "Deployment.getPolicyRequirements(ComponentReferenceModel referenceModel)", "testcase": false, "constructor": false}, {"identifier": "processPolicyDependency", "parameters": "(List<Policy> interaction, List<Policy> implementation)", "modifiers": "private", "return": "void", "signature": "void processPolicyDependency(List<Policy> interaction, List<Policy> implementation)", "full_signature": "private void processPolicyDependency(List<Policy> interaction, List<Policy> implementation)", "class_method_signature": "Deployment.processPolicyDependency(List<Policy> interaction, List<Policy> implementation)", "testcase": false, "constructor": false}, {"identifier": "validatePolicy", "parameters": "(List<Policy> interaction, List<Policy> implementation)", "modifiers": "private", "return": "void", "signature": "void validatePolicy(List<Policy> interaction, List<Policy> implementation)", "full_signature": "private void validatePolicy(List<Policy> interaction, List<Policy> implementation)", "class_method_signature": "Deployment.validatePolicy(List<Policy> interaction, List<Policy> implementation)", "testcase": false, "constructor": false}, {"identifier": "validateServiceRegistration", "parameters": "(QName name)", "modifiers": "private", "return": "void", "signature": "void validateServiceRegistration(QName name)", "full_signature": "private void validateServiceRegistration(QName name)", "class_method_signature": "Deployment.validateServiceRegistration(QName name)", "testcase": false, "constructor": false}], "file": "deploy/base/src/main/java/org/switchyard/deploy/internal/Deployment.java"}, "focal_method": {"identifier": "getActivationTypes", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> getActivationTypes() {\n        HashSet<String> types = new HashSet<String>();\n        CompositeModel composite = getConfig().getComposite();\n        if (composite != null) {\n            // reference bindings\n            for (CompositeReferenceModel reference : composite.getReferences()) {\n                for (BindingModel binding : reference.getBindings()) {\n                    types.add(binding.getType());\n                }\n            }\n            // service bindings\n            for (CompositeServiceModel service : composite.getServices()) {\n                for (BindingModel binding : service.getBindings()) {\n                    types.add(binding.getType());\n                }\n            }\n            // implementations\n            for (ComponentModel component : composite.getComponents()) {\n                if (component.getImplementation() != null) {\n                    types.add(component.getImplementation().getType());\n                }\n            }\n        }\n        \n        return new ArrayList<String>(types);\n    }", "signature": "List<String> getActivationTypes()", "full_signature": "public List<String> getActivationTypes()", "class_method_signature": "Deployment.getActivationTypes()", "testcase": false, "constructor": false, "invocations": ["getComposite", "getConfig", "getReferences", "getBindings", "add", "getType", "getServices", "getBindings", "add", "getType", "getComponents", "getImplementation", "add", "getType", "getImplementation"]}, "repository": {"repo_id": 790859, "url": "https://github.com/jboss-switchyard/core", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 43, "size": 9065, "license": "licensed"}}