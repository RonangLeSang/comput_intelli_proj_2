{"test_class": {"identifier": "TransactionHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockTransactionManager tm;", "modifier": "private", "type": "MockTransactionManager", "declarator": "tm", "var_name": "tm"}, {"original_string": "private MockExchange exchange;", "modifier": "private", "type": "MockExchange", "declarator": "exchange", "var_name": "exchange"}, {"original_string": "private TransactionHandler handler;", "modifier": "private", "type": "TransactionHandler", "declarator": "handler", "var_name": "handler"}], "file": "runtime/src/test/java/org/switchyard/handlers/TransactionHandlerTest.java"}, "test_case": {"identifier": "propagateRequiredAndProvided", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void propagateRequiredAndProvided() throws Exception {\n        PolicyUtil.require(exchange, TransactionPolicy.PROPAGATES_TRANSACTION);\n        PolicyUtil.provide(exchange, TransactionPolicy.PROPAGATES_TRANSACTION);\n        exchange.setPhase(ExchangePhase.IN);\n\n        tm.begin();\n        Transaction tx = tm.getTransaction();\n\n        handler.handleMessage(exchange);\n        exchange.setPhase(ExchangePhase.OUT);\n        handler.handleMessage(exchange);\n\n        Transaction tx2 = tm.getTransaction();\n        Assert.assertEquals(tx, tx2);\n        Assert.assertEquals(Status.STATUS_ACTIVE, tx2.getStatus());\n    }", "signature": "void propagateRequiredAndProvided()", "full_signature": "@Test public void propagateRequiredAndProvided()", "class_method_signature": "TransactionHandlerTest.propagateRequiredAndProvided()", "testcase": true, "constructor": false, "invocations": ["require", "provide", "setPhase", "begin", "getTransaction", "handleMessage", "setPhase", "handleMessage", "getTransaction", "assertEquals", "assertEquals", "getStatus"]}, "focal_class": {"identifier": "TransactionHandler", "superclass": "", "interfaces": "implements ExchangeHandler", "fields": [{"original_string": "private static final String SUSPENDED_TRANSACTION_PROPERTY = \n            \"org.switchyard.exchange.transaction.suspended\";", "modifier": "private static final", "type": "String", "declarator": "SUSPENDED_TRANSACTION_PROPERTY = \n            \"org.switchyard.exchange.transaction.suspended\"", "var_name": "SUSPENDED_TRANSACTION_PROPERTY"}, {"original_string": "private static final String INITIATED_TRANSACTION_PROPERTY = \n            \"org.switchyard.exchange.transaction.initiated\";", "modifier": "private static final", "type": "String", "declarator": "INITIATED_TRANSACTION_PROPERTY = \n            \"org.switchyard.exchange.transaction.initiated\"", "var_name": "INITIATED_TRANSACTION_PROPERTY"}, {"original_string": "private static final String BEFORE_INVOKED_PROPERTY =\n            \"org.switchyard.exchange.transaction.beforeInvoked\";", "modifier": "private static final", "type": "String", "declarator": "BEFORE_INVOKED_PROPERTY =\n            \"org.switchyard.exchange.transaction.beforeInvoked\"", "var_name": "BEFORE_INVOKED_PROPERTY"}, {"original_string": "private static Logger _log = Logger.getLogger(TransactionHandler.class);", "modifier": "private static", "type": "Logger", "declarator": "_log = Logger.getLogger(TransactionHandler.class)", "var_name": "_log"}, {"original_string": "private TransactionManager _transactionManager;", "modifier": "private", "type": "TransactionManager", "declarator": "_transactionManager", "var_name": "_transactionManager"}], "methods": [{"identifier": "TransactionHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " TransactionHandler()", "full_signature": "public  TransactionHandler()", "class_method_signature": "TransactionHandler.TransactionHandler()", "testcase": false, "constructor": true}, {"identifier": "handleMessage", "parameters": "(Exchange exchange)", "modifiers": "@Override public", "return": "void", "signature": "void handleMessage(Exchange exchange)", "full_signature": "@Override public void handleMessage(Exchange exchange)", "class_method_signature": "TransactionHandler.handleMessage(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "handleFault", "parameters": "(Exchange exchange)", "modifiers": "@Override public", "return": "void", "signature": "void handleFault(Exchange exchange)", "full_signature": "@Override public void handleFault(Exchange exchange)", "class_method_signature": "TransactionHandler.handleFault(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "setTransactionManager", "parameters": "(TransactionManager transactionManager)", "modifiers": "", "return": "void", "signature": "void setTransactionManager(TransactionManager transactionManager)", "full_signature": " void setTransactionManager(TransactionManager transactionManager)", "class_method_signature": "TransactionHandler.setTransactionManager(TransactionManager transactionManager)", "testcase": false, "constructor": false}, {"identifier": "getTransactionManager", "parameters": "()", "modifiers": "", "return": "TransactionManager", "signature": "TransactionManager getTransactionManager()", "full_signature": " TransactionManager getTransactionManager()", "class_method_signature": "TransactionHandler.getTransactionManager()", "testcase": false, "constructor": false}, {"identifier": "handleAfter", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void handleAfter(Exchange exchange)", "full_signature": "private void handleAfter(Exchange exchange)", "class_method_signature": "TransactionHandler.handleAfter(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "handleBefore", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void handleBefore(Exchange exchange)", "full_signature": "private void handleBefore(Exchange exchange)", "class_method_signature": "TransactionHandler.handleBefore(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "evaluatePolicyCombination", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void evaluatePolicyCombination(Exchange exchange)", "full_signature": "private void evaluatePolicyCombination(Exchange exchange)", "class_method_signature": "TransactionHandler.evaluatePolicyCombination(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "evaluateTransactionStatus", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void evaluateTransactionStatus(Exchange exchange)", "full_signature": "private void evaluateTransactionStatus(Exchange exchange)", "class_method_signature": "TransactionHandler.evaluateTransactionStatus(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "isEligibleToSuspendTransaction", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "boolean", "signature": "boolean isEligibleToSuspendTransaction(Exchange exchange)", "full_signature": "private boolean isEligibleToSuspendTransaction(Exchange exchange)", "class_method_signature": "TransactionHandler.isEligibleToSuspendTransaction(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "isEligibleToStartTransaction", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "boolean", "signature": "boolean isEligibleToStartTransaction(Exchange exchange)", "full_signature": "private boolean isEligibleToStartTransaction(Exchange exchange)", "class_method_signature": "TransactionHandler.isEligibleToStartTransaction(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "provideRequiredPolicies", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void provideRequiredPolicies(Exchange exchange)", "full_signature": "private void provideRequiredPolicies(Exchange exchange)", "class_method_signature": "TransactionHandler.provideRequiredPolicies(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "managedGlobalRequired", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "boolean", "signature": "boolean managedGlobalRequired(Exchange exchange)", "full_signature": "private boolean managedGlobalRequired(Exchange exchange)", "class_method_signature": "TransactionHandler.managedGlobalRequired(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "managedLocalRequired", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "boolean", "signature": "boolean managedLocalRequired(Exchange exchange)", "full_signature": "private boolean managedLocalRequired(Exchange exchange)", "class_method_signature": "TransactionHandler.managedLocalRequired(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "noManagedRequired", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "boolean", "signature": "boolean noManagedRequired(Exchange exchange)", "full_signature": "private boolean noManagedRequired(Exchange exchange)", "class_method_signature": "TransactionHandler.noManagedRequired(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "suspendsRequired", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "boolean", "signature": "boolean suspendsRequired(Exchange exchange)", "full_signature": "private boolean suspendsRequired(Exchange exchange)", "class_method_signature": "TransactionHandler.suspendsRequired(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "propagatesRequired", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "boolean", "signature": "boolean propagatesRequired(Exchange exchange)", "full_signature": "private boolean propagatesRequired(Exchange exchange)", "class_method_signature": "TransactionHandler.propagatesRequired(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "providePropagates", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void providePropagates(Exchange exchange)", "full_signature": "private void providePropagates(Exchange exchange)", "class_method_signature": "TransactionHandler.providePropagates(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "provideSuspends", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void provideSuspends(Exchange exchange)", "full_signature": "private void provideSuspends(Exchange exchange)", "class_method_signature": "TransactionHandler.provideSuspends(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "provideManagedGlobal", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void provideManagedGlobal(Exchange exchange)", "full_signature": "private void provideManagedGlobal(Exchange exchange)", "class_method_signature": "TransactionHandler.provideManagedGlobal(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "provideManagedLocal", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void provideManagedLocal(Exchange exchange)", "full_signature": "private void provideManagedLocal(Exchange exchange)", "class_method_signature": "TransactionHandler.provideManagedLocal(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "provideNoManaged", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void provideNoManaged(Exchange exchange)", "full_signature": "private void provideNoManaged(Exchange exchange)", "class_method_signature": "TransactionHandler.provideNoManaged(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "startTransaction", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void startTransaction(Exchange exchange)", "full_signature": "private void startTransaction(Exchange exchange)", "class_method_signature": "TransactionHandler.startTransaction(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "endTransaction", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void endTransaction()", "full_signature": "private void endTransaction()", "class_method_signature": "TransactionHandler.endTransaction()", "testcase": false, "constructor": false}, {"identifier": "suspendTransaction", "parameters": "(Exchange exchange)", "modifiers": "private", "return": "void", "signature": "void suspendTransaction(Exchange exchange)", "full_signature": "private void suspendTransaction(Exchange exchange)", "class_method_signature": "TransactionHandler.suspendTransaction(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "resumeTransaction", "parameters": "(Transaction transaction)", "modifiers": "private", "return": "void", "signature": "void resumeTransaction(Transaction transaction)", "full_signature": "private void resumeTransaction(Transaction transaction)", "class_method_signature": "TransactionHandler.resumeTransaction(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getCurrentTransaction", "parameters": "()", "modifiers": "private", "return": "Transaction", "signature": "Transaction getCurrentTransaction()", "full_signature": "private Transaction getCurrentTransaction()", "class_method_signature": "TransactionHandler.getCurrentTransaction()", "testcase": false, "constructor": false}, {"identifier": "getCurrentTransactionStatus", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getCurrentTransactionStatus()", "full_signature": "private int getCurrentTransactionStatus()", "class_method_signature": "TransactionHandler.getCurrentTransactionStatus()", "testcase": false, "constructor": false}, {"identifier": "printDebugInfo", "parameters": "(String message)", "modifiers": "private", "return": "void", "signature": "void printDebugInfo(String message)", "full_signature": "private void printDebugInfo(String message)", "class_method_signature": "TransactionHandler.printDebugInfo(String message)", "testcase": false, "constructor": false}], "file": "runtime/src/main/java/org/switchyard/handlers/TransactionHandler.java"}, "focal_method": {"identifier": "handleMessage", "parameters": "(Exchange exchange)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handleMessage(Exchange exchange) throws HandlerException {\n        // if no TM is available, there's nothing to do\n        if (_transactionManager == null) {\n            return;\n        }\n        \n        Property prop = exchange.getContext().getProperty(BEFORE_INVOKED_PROPERTY, Scope.EXCHANGE);\n        if (prop != null && Boolean.class.cast(prop.getValue())) {\n            // OUT phase in IN_OUT exchange or 2nd invocation in IN_ONLY exchange\n            handleAfter(exchange);\n        } else {\n            exchange.getContext().setProperty(BEFORE_INVOKED_PROPERTY, Boolean.TRUE, Scope.EXCHANGE).addLabels(BehaviorLabel.TRANSIENT.label());\n            handleBefore(exchange);\n        }\n    }", "signature": "void handleMessage(Exchange exchange)", "full_signature": "@Override public void handleMessage(Exchange exchange)", "class_method_signature": "TransactionHandler.handleMessage(Exchange exchange)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getContext", "cast", "getValue", "handleAfter", "addLabels", "setProperty", "getContext", "label", "handleBefore"]}, "repository": {"repo_id": 790859, "url": "https://github.com/jboss-switchyard/core", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 43, "size": 9065, "license": "licensed"}}