{"test_class": {"identifier": "DefaultWhenVertxTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultWhenVertx whenVertx;", "modifier": "private", "type": "DefaultWhenVertx", "declarator": "whenVertx", "var_name": "whenVertx"}, {"original_string": "private Done<String> done = new Done<>();", "modifier": "private", "type": "Done<String>", "declarator": "done = new Done<>()", "var_name": "done"}, {"original_string": "private String identifier = \"com.englishtown.test.Verticle\";", "modifier": "private", "type": "String", "declarator": "identifier = \"com.englishtown.test.Verticle\"", "var_name": "identifier"}, {"original_string": "@Mock\n    Vertx vertx;", "modifier": "@Mock", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "@Mock\n    AsyncResult<String> result;", "modifier": "@Mock", "type": "AsyncResult<String>", "declarator": "result", "var_name": "result"}, {"original_string": "@Mock\n    AsyncResult<Void> voidResult;", "modifier": "@Mock", "type": "AsyncResult<Void>", "declarator": "voidResult", "var_name": "voidResult"}, {"original_string": "@Mock\n    DeploymentOptions options;", "modifier": "@Mock", "type": "DeploymentOptions", "declarator": "options", "var_name": "options"}, {"original_string": "@Mock\n    Verticle verticle;", "modifier": "@Mock", "type": "Verticle", "declarator": "verticle", "var_name": "verticle"}, {"original_string": "@Mock\n    Handler<Future<String>> futureHandler;", "modifier": "@Mock", "type": "Handler<Future<String>>", "declarator": "futureHandler", "var_name": "futureHandler"}, {"original_string": "@Captor\n    ArgumentCaptor<Handler<AsyncResult<String>>> handlerCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<Handler<AsyncResult<String>>>", "declarator": "handlerCaptor", "var_name": "handlerCaptor"}, {"original_string": "@Captor\n    ArgumentCaptor<Handler<AsyncResult<Void>>> voidHandlerCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<Handler<AsyncResult<Void>>>", "declarator": "voidHandlerCaptor", "var_name": "voidHandlerCaptor"}, {"original_string": "@Captor\n    ArgumentCaptor<Handler<AsyncResult<String>>> stringHandlerCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<Handler<AsyncResult<String>>>", "declarator": "stringHandlerCaptor", "var_name": "stringHandlerCaptor"}], "file": "vertx-when/src/test/java/com/englishtown/vertx/promises/impl/DefaultWhenVertxTest.java"}, "test_case": {"identifier": "testDeployVerticle_Identifier_Success1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeployVerticle_Identifier_Success1() throws Exception {\n        when(result.succeeded()).thenReturn(true);\n\n        whenVertx.deployVerticle(identifier).then(done.onFulfilled, done.onRejected);\n        verify(vertx).deployVerticle(eq(identifier), handlerCaptor.capture());\n\n        handlerCaptor.getValue().handle(result);\n        done.assertFulfilled();\n    }", "signature": "void testDeployVerticle_Identifier_Success1()", "full_signature": "@Test public void testDeployVerticle_Identifier_Success1()", "class_method_signature": "DefaultWhenVertxTest.testDeployVerticle_Identifier_Success1()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "succeeded", "then", "deployVerticle", "deployVerticle", "verify", "eq", "capture", "handle", "getValue", "assertFulfilled"]}, "focal_class": {"identifier": "DefaultWhenVertx", "superclass": "", "interfaces": "implements WhenVertx", "fields": [{"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final PromiseAdapter adapter;", "modifier": "private final", "type": "PromiseAdapter", "declarator": "adapter", "var_name": "adapter"}], "methods": [{"identifier": "DefaultWhenVertx", "parameters": "(Vertx vertx, PromiseAdapter adapter)", "modifiers": "@Inject public", "return": "", "signature": " DefaultWhenVertx(Vertx vertx, PromiseAdapter adapter)", "full_signature": "@Inject public  DefaultWhenVertx(Vertx vertx, PromiseAdapter adapter)", "class_method_signature": "DefaultWhenVertx.DefaultWhenVertx(Vertx vertx, PromiseAdapter adapter)", "testcase": false, "constructor": true}, {"identifier": "DefaultWhenVertx", "parameters": "(Vertx vertx, When when)", "modifiers": "public", "return": "", "signature": " DefaultWhenVertx(Vertx vertx, When when)", "full_signature": "public  DefaultWhenVertx(Vertx vertx, When when)", "class_method_signature": "DefaultWhenVertx.DefaultWhenVertx(Vertx vertx, When when)", "testcase": false, "constructor": true}, {"identifier": "deployVerticle", "parameters": "(Verticle verticle)", "modifiers": "@Override public", "return": "Promise<String>", "signature": "Promise<String> deployVerticle(Verticle verticle)", "full_signature": "@Override public Promise<String> deployVerticle(Verticle verticle)", "class_method_signature": "DefaultWhenVertx.deployVerticle(Verticle verticle)", "testcase": false, "constructor": false}, {"identifier": "deployVerticle", "parameters": "(Verticle verticle, DeploymentOptions options)", "modifiers": "@Override public", "return": "Promise<String>", "signature": "Promise<String> deployVerticle(Verticle verticle, DeploymentOptions options)", "full_signature": "@Override public Promise<String> deployVerticle(Verticle verticle, DeploymentOptions options)", "class_method_signature": "DefaultWhenVertx.deployVerticle(Verticle verticle, DeploymentOptions options)", "testcase": false, "constructor": false}, {"identifier": "deployVerticle", "parameters": "(String name)", "modifiers": "@Override public", "return": "Promise<String>", "signature": "Promise<String> deployVerticle(String name)", "full_signature": "@Override public Promise<String> deployVerticle(String name)", "class_method_signature": "DefaultWhenVertx.deployVerticle(String name)", "testcase": false, "constructor": false}, {"identifier": "deployVerticle", "parameters": "(String name, DeploymentOptions options)", "modifiers": "@Override public", "return": "Promise<String>", "signature": "Promise<String> deployVerticle(String name, DeploymentOptions options)", "full_signature": "@Override public Promise<String> deployVerticle(String name, DeploymentOptions options)", "class_method_signature": "DefaultWhenVertx.deployVerticle(String name, DeploymentOptions options)", "testcase": false, "constructor": false}, {"identifier": "undeploy", "parameters": "(String deploymentID)", "modifiers": "@Override public", "return": "Promise<Void>", "signature": "Promise<Void> undeploy(String deploymentID)", "full_signature": "@Override public Promise<Void> undeploy(String deploymentID)", "class_method_signature": "DefaultWhenVertx.undeploy(String deploymentID)", "testcase": false, "constructor": false}, {"identifier": "executeBlocking", "parameters": "(Handler<Future<T>> blockingCodeHandler, boolean ordered)", "modifiers": "@Override public", "return": "Promise<T>", "signature": "Promise<T> executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered)", "full_signature": "@Override public Promise<T> executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered)", "class_method_signature": "DefaultWhenVertx.executeBlocking(Handler<Future<T>> blockingCodeHandler, boolean ordered)", "testcase": false, "constructor": false}], "file": "vertx-when/src/main/java/com/englishtown/vertx/promises/impl/DefaultWhenVertx.java"}, "focal_method": {"identifier": "deployVerticle", "parameters": "(Verticle verticle)", "modifiers": "@Override public", "return": "Promise<String>", "body": "@Override\n    public Promise<String> deployVerticle(Verticle verticle) {\n        return adapter.toPromise(handler -> vertx.deployVerticle(verticle, handler));\n    }", "signature": "Promise<String> deployVerticle(Verticle verticle)", "full_signature": "@Override public Promise<String> deployVerticle(Verticle verticle)", "class_method_signature": "DefaultWhenVertx.deployVerticle(Verticle verticle)", "testcase": false, "constructor": false, "invocations": ["toPromise", "deployVerticle"]}, "repository": {"repo_id": 11754395, "url": "https://github.com/ef-labs/vertx-when", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 42, "size": 184, "license": "licensed"}}