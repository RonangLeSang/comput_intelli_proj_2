{"test_class": {"identifier": "DefaultWhenEventBusTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DefaultWhenEventBus whenEventBus;", "modifier": "", "type": "DefaultWhenEventBus", "declarator": "whenEventBus", "var_name": "whenEventBus"}, {"original_string": "String address = \"et.test.eb\";", "modifier": "", "type": "String", "declarator": "address = \"et.test.eb\"", "var_name": "address"}, {"original_string": "Done<Message<Object>> done = new Done<>();", "modifier": "", "type": "Done<Message<Object>>", "declarator": "done = new Done<>()", "var_name": "done"}, {"original_string": "@Mock\n    Vertx vertx;", "modifier": "@Mock", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "@Mock\n    EventBus eventBus;", "modifier": "@Mock", "type": "EventBus", "declarator": "eventBus", "var_name": "eventBus"}, {"original_string": "@Mock\n    Message<Object> replyMessage;", "modifier": "@Mock", "type": "Message<Object>", "declarator": "replyMessage", "var_name": "replyMessage"}, {"original_string": "@Mock\n    AsyncResult<Void> voidResult;", "modifier": "@Mock", "type": "AsyncResult<Void>", "declarator": "voidResult", "var_name": "voidResult"}, {"original_string": "@Mock\n    AsyncResult<Message<Object>> replyMessageResult;", "modifier": "@Mock", "type": "AsyncResult<Message<Object>>", "declarator": "replyMessageResult", "var_name": "replyMessageResult"}, {"original_string": "@Captor\n    ArgumentCaptor<Handler<AsyncResult<Void>>> voidHandlerCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<Handler<AsyncResult<Void>>>", "declarator": "voidHandlerCaptor", "var_name": "voidHandlerCaptor"}, {"original_string": "@Captor\n    ArgumentCaptor<Handler<AsyncResult<Message<Object>>>> resultCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<Handler<AsyncResult<Message<Object>>>>", "declarator": "resultCaptor", "var_name": "resultCaptor"}], "file": "vertx-when/src/test/java/com/englishtown/vertx/promises/impl/DefaultWhenEventBusTest.java"}, "test_case": {"identifier": "testClose_Success", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClose_Success() throws Exception {\n\n        Done<Void> done = new Done<>();\n\n        whenEventBus.close().then(done.onFulfilled, done.onRejected);\n\n        verify(eventBus).close(voidHandlerCaptor.capture());\n\n        when(voidResult.succeeded()).thenReturn(true);\n        voidHandlerCaptor.getValue().handle(voidResult);\n\n        done.assertFulfilled();\n    }", "signature": "void testClose_Success()", "full_signature": "@Test public void testClose_Success()", "class_method_signature": "DefaultWhenEventBusTest.testClose_Success()", "testcase": true, "constructor": false, "invocations": ["then", "close", "close", "verify", "capture", "thenReturn", "when", "succeeded", "handle", "getValue", "assertFulfilled"]}, "focal_class": {"identifier": "DefaultWhenEventBus", "superclass": "", "interfaces": "implements WhenEventBus", "fields": [{"original_string": "private final EventBus eventBus;", "modifier": "private final", "type": "EventBus", "declarator": "eventBus", "var_name": "eventBus"}, {"original_string": "private final PromiseAdapter adapter;", "modifier": "private final", "type": "PromiseAdapter", "declarator": "adapter", "var_name": "adapter"}], "methods": [{"identifier": "DefaultWhenEventBus", "parameters": "(Vertx vertx, PromiseAdapter adapter)", "modifiers": "@Inject public", "return": "", "signature": " DefaultWhenEventBus(Vertx vertx, PromiseAdapter adapter)", "full_signature": "@Inject public  DefaultWhenEventBus(Vertx vertx, PromiseAdapter adapter)", "class_method_signature": "DefaultWhenEventBus.DefaultWhenEventBus(Vertx vertx, PromiseAdapter adapter)", "testcase": false, "constructor": true}, {"identifier": "DefaultWhenEventBus", "parameters": "(Vertx vertx, When when)", "modifiers": "public", "return": "", "signature": " DefaultWhenEventBus(Vertx vertx, When when)", "full_signature": "public  DefaultWhenEventBus(Vertx vertx, When when)", "class_method_signature": "DefaultWhenEventBus.DefaultWhenEventBus(Vertx vertx, When when)", "testcase": false, "constructor": true}, {"identifier": "DefaultWhenEventBus", "parameters": "(EventBus eventBus, PromiseAdapter adapter)", "modifiers": "public", "return": "", "signature": " DefaultWhenEventBus(EventBus eventBus, PromiseAdapter adapter)", "full_signature": "public  DefaultWhenEventBus(EventBus eventBus, PromiseAdapter adapter)", "class_method_signature": "DefaultWhenEventBus.DefaultWhenEventBus(EventBus eventBus, PromiseAdapter adapter)", "testcase": false, "constructor": true}, {"identifier": "DefaultWhenEventBus", "parameters": "(EventBus eventBus, When when)", "modifiers": "public", "return": "", "signature": " DefaultWhenEventBus(EventBus eventBus, When when)", "full_signature": "public  DefaultWhenEventBus(EventBus eventBus, When when)", "class_method_signature": "DefaultWhenEventBus.DefaultWhenEventBus(EventBus eventBus, When when)", "testcase": false, "constructor": true}, {"identifier": "getEventBus", "parameters": "()", "modifiers": "@Override public", "return": "EventBus", "signature": "EventBus getEventBus()", "full_signature": "@Override public EventBus getEventBus()", "class_method_signature": "DefaultWhenEventBus.getEventBus()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "Promise<Void>", "signature": "Promise<Void> close()", "full_signature": "@Override public Promise<Void> close()", "class_method_signature": "DefaultWhenEventBus.close()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String address, Object message)", "modifiers": "@Override public", "return": "Promise<Message<T>>", "signature": "Promise<Message<T>> send(String address, Object message)", "full_signature": "@Override public Promise<Message<T>> send(String address, Object message)", "class_method_signature": "DefaultWhenEventBus.send(String address, Object message)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String address, Object message, DeliveryOptions options)", "modifiers": "@Override public", "return": "Promise<Message<T>>", "signature": "Promise<Message<T>> send(String address, Object message, DeliveryOptions options)", "full_signature": "@Override public Promise<Message<T>> send(String address, Object message, DeliveryOptions options)", "class_method_signature": "DefaultWhenEventBus.send(String address, Object message, DeliveryOptions options)", "testcase": false, "constructor": false}], "file": "vertx-when/src/main/java/com/englishtown/vertx/promises/impl/DefaultWhenEventBus.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "Promise<Void>", "body": "@Override\n    public Promise<Void> close() {\n        return adapter.toPromise(eventBus::close);\n    }", "signature": "Promise<Void> close()", "full_signature": "@Override public Promise<Void> close()", "class_method_signature": "DefaultWhenEventBus.close()", "testcase": false, "constructor": false, "invocations": ["toPromise"]}, "repository": {"repo_id": 11754395, "url": "https://github.com/ef-labs/vertx-when", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 42, "size": 184, "license": "licensed"}}