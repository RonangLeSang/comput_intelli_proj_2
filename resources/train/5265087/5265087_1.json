{"test_class": {"identifier": "InteractionProtocolTest", "superclass": "extends AbstractZkTest", "interfaces": "", "fields": [], "file": "modules/katta-core/src/test/java/net/sf/katta/protocol/InteractionProtocolTest.java"}, "test_case": {"identifier": "testLifecycle", "parameters": "()", "modifiers": "@Test(timeout = 7000) public", "return": "void", "body": "@Test(timeout = 7000)\n  public void testLifecycle() throws Exception {\n    int GATEWAY_PORT = 2190;\n    Gateway gateway = new Gateway(GATEWAY_PORT, _zk.getServerPort());\n    gateway.start();\n    ZkClient zkClient = new ZkClient(\"localhost:\" + GATEWAY_PORT);\n\n    InteractionProtocol protocol = new InteractionProtocol(zkClient, _zk.getZkConf());\n    final AtomicInteger connectCount = new AtomicInteger();\n    final AtomicInteger disconnectCount = new AtomicInteger();\n    final Object mutex = new Object();\n\n    protocol.registerComponent(new ConnectedComponent() {\n      @Override\n      public void disconnect() {\n        disconnectCount.incrementAndGet();\n        synchronized (mutex) {\n          mutex.notifyAll();\n        }\n      }\n\n      @Override\n      public void reconnect() {\n        connectCount.incrementAndGet();\n        synchronized (mutex) {\n          mutex.notifyAll();\n        }\n      }\n    });\n    synchronized (mutex) {\n      gateway.stop();\n      mutex.wait();\n      gateway.start();\n      mutex.wait();\n      gateway.stop();\n      mutex.wait();\n      gateway.start();\n      mutex.wait();\n    }\n    zkClient.close();\n    assertEquals(2, connectCount.get());\n    assertEquals(2, connectCount.get());\n    gateway.stop();\n  }", "signature": "void testLifecycle()", "full_signature": "@Test(timeout = 7000) public void testLifecycle()", "class_method_signature": "InteractionProtocolTest.testLifecycle()", "testcase": true, "constructor": false, "invocations": ["getServerPort", "start", "getZkConf", "registerComponent", "incrementAndGet", "notifyAll", "incrementAndGet", "notifyAll", "stop", "wait", "start", "wait", "stop", "wait", "start", "wait", "close", "assertEquals", "get", "assertEquals", "get", "stop"]}, "focal_class": {"identifier": "InteractionProtocol", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final static Logger LOG = Logger.getLogger(InteractionProtocol.class);", "modifier": "protected final static", "type": "Logger", "declarator": "LOG = Logger.getLogger(InteractionProtocol.class)", "var_name": "LOG"}, {"original_string": "protected volatile boolean _connected = true;", "modifier": "protected volatile", "type": "boolean", "declarator": "_connected = true", "var_name": "_connected"}, {"original_string": "protected final ZkClient _zkClient;", "modifier": "protected final", "type": "ZkClient", "declarator": "_zkClient", "var_name": "_zkClient"}, {"original_string": "protected final ZkConfiguration _zkConf;", "modifier": "protected final", "type": "ZkConfiguration", "declarator": "_zkConf", "var_name": "_zkConf"}, {"original_string": "protected ConcurrentOne2ManyListMap<ConnectedComponent, ListenerAdapter> _zkListenerByComponent = new ConcurrentOne2ManyListMap<ConnectedComponent, ListenerAdapter>();", "modifier": "protected", "type": "ConcurrentOne2ManyListMap<ConnectedComponent, ListenerAdapter>", "declarator": "_zkListenerByComponent = new ConcurrentOne2ManyListMap<ConnectedComponent, ListenerAdapter>()", "var_name": "_zkListenerByComponent"}, {"original_string": "private SetMultimap<ConnectedComponent, String> _zkEphemeralPublishesByComponent = HashMultimap.create();", "modifier": "private", "type": "SetMultimap<ConnectedComponent, String>", "declarator": "_zkEphemeralPublishesByComponent = HashMultimap.create()", "var_name": "_zkEphemeralPublishesByComponent"}, {"original_string": "private IZkStateListener _stateListener = new IZkStateListener() {\n    @Override\n    public void handleStateChanged(KeeperState state) throws Exception {\n      Set<ConnectedComponent> components = new HashSet<ConnectedComponent>(_zkListenerByComponent.keySet());\n      switch (state) {\n      case Disconnected:\n      case Expired:\n        if (_connected) { // disconnected & expired can come after each other\n          for (ConnectedComponent component : components) {\n            component.disconnect();\n          }\n          _connected = false;\n        }\n        break;\n      case SyncConnected:\n        _connected = true;\n        for (ConnectedComponent kattaComponent : components) {\n          kattaComponent.reconnect();\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"state \" + state + \" not handled\");\n      }\n    }\n\n    @Override\n    public void handleNewSession() throws Exception {\n      // should be covered by handleStateChanged()\n    }\n  };", "modifier": "private", "type": "IZkStateListener", "declarator": "_stateListener = new IZkStateListener() {\n    @Override\n    public void handleStateChanged(KeeperState state) throws Exception {\n      Set<ConnectedComponent> components = new HashSet<ConnectedComponent>(_zkListenerByComponent.keySet());\n      switch (state) {\n      case Disconnected:\n      case Expired:\n        if (_connected) { // disconnected & expired can come after each other\n          for (ConnectedComponent component : components) {\n            component.disconnect();\n          }\n          _connected = false;\n        }\n        break;\n      case SyncConnected:\n        _connected = true;\n        for (ConnectedComponent kattaComponent : components) {\n          kattaComponent.reconnect();\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"state \" + state + \" not handled\");\n      }\n    }\n\n    @Override\n    public void handleNewSession() throws Exception {\n      // should be covered by handleStateChanged()\n    }\n  }", "var_name": "_stateListener"}], "methods": [{"identifier": "InteractionProtocol", "parameters": "(ZkClient zkClient, ZkConfiguration zkConfiguration)", "modifiers": "public", "return": "", "signature": " InteractionProtocol(ZkClient zkClient, ZkConfiguration zkConfiguration)", "full_signature": "public  InteractionProtocol(ZkClient zkClient, ZkConfiguration zkConfiguration)", "class_method_signature": "InteractionProtocol.InteractionProtocol(ZkClient zkClient, ZkConfiguration zkConfiguration)", "testcase": false, "constructor": true}, {"identifier": "registerComponent", "parameters": "(ConnectedComponent connectedComponent)", "modifiers": "public", "return": "void", "signature": "void registerComponent(ConnectedComponent connectedComponent)", "full_signature": "public void registerComponent(ConnectedComponent connectedComponent)", "class_method_signature": "InteractionProtocol.registerComponent(ConnectedComponent connectedComponent)", "testcase": false, "constructor": false}, {"identifier": "unregisterComponent", "parameters": "(ConnectedComponent component)", "modifiers": "public", "return": "void", "signature": "void unregisterComponent(ConnectedComponent component)", "full_signature": "public void unregisterComponent(ConnectedComponent component)", "class_method_signature": "InteractionProtocol.unregisterComponent(ConnectedComponent component)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disconnect()", "full_signature": "public void disconnect()", "class_method_signature": "InteractionProtocol.disconnect()", "testcase": false, "constructor": false}, {"identifier": "getRegisteredComponentCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRegisteredComponentCount()", "full_signature": "public int getRegisteredComponentCount()", "class_method_signature": "InteractionProtocol.getRegisteredComponentCount()", "testcase": false, "constructor": false}, {"identifier": "getRegisteredListenerCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRegisteredListenerCount()", "full_signature": "public int getRegisteredListenerCount()", "class_method_signature": "InteractionProtocol.getRegisteredListenerCount()", "testcase": false, "constructor": false}, {"identifier": "registerChildListener", "parameters": "(ConnectedComponent component, PathDef pathDef, IAddRemoveListener listener)", "modifiers": "public", "return": "List<String>", "signature": "List<String> registerChildListener(ConnectedComponent component, PathDef pathDef, IAddRemoveListener listener)", "full_signature": "public List<String> registerChildListener(ConnectedComponent component, PathDef pathDef, IAddRemoveListener listener)", "class_method_signature": "InteractionProtocol.registerChildListener(ConnectedComponent component, PathDef pathDef, IAddRemoveListener listener)", "testcase": false, "constructor": false}, {"identifier": "registerChildListener", "parameters": "(ConnectedComponent component, PathDef pathDef, String childName,\n          IAddRemoveListener listener)", "modifiers": "public", "return": "List<String>", "signature": "List<String> registerChildListener(ConnectedComponent component, PathDef pathDef, String childName,\n          IAddRemoveListener listener)", "full_signature": "public List<String> registerChildListener(ConnectedComponent component, PathDef pathDef, String childName,\n          IAddRemoveListener listener)", "class_method_signature": "InteractionProtocol.registerChildListener(ConnectedComponent component, PathDef pathDef, String childName,\n          IAddRemoveListener listener)", "testcase": false, "constructor": false}, {"identifier": "unregisterChildListener", "parameters": "(ConnectedComponent component, PathDef pathDef)", "modifiers": "public", "return": "void", "signature": "void unregisterChildListener(ConnectedComponent component, PathDef pathDef)", "full_signature": "public void unregisterChildListener(ConnectedComponent component, PathDef pathDef)", "class_method_signature": "InteractionProtocol.unregisterChildListener(ConnectedComponent component, PathDef pathDef)", "testcase": false, "constructor": false}, {"identifier": "unregisterChildListener", "parameters": "(ConnectedComponent component, PathDef pathDef, String childName)", "modifiers": "public", "return": "void", "signature": "void unregisterChildListener(ConnectedComponent component, PathDef pathDef, String childName)", "full_signature": "public void unregisterChildListener(ConnectedComponent component, PathDef pathDef, String childName)", "class_method_signature": "InteractionProtocol.unregisterChildListener(ConnectedComponent component, PathDef pathDef, String childName)", "testcase": false, "constructor": false}, {"identifier": "registerDataListener", "parameters": "(ConnectedComponent component, PathDef pathDef, String childName,\n          IZkDataListener listener)", "modifiers": "public", "return": "void", "signature": "void registerDataListener(ConnectedComponent component, PathDef pathDef, String childName,\n          IZkDataListener listener)", "full_signature": "public void registerDataListener(ConnectedComponent component, PathDef pathDef, String childName,\n          IZkDataListener listener)", "class_method_signature": "InteractionProtocol.registerDataListener(ConnectedComponent component, PathDef pathDef, String childName,\n          IZkDataListener listener)", "testcase": false, "constructor": false}, {"identifier": "unregisterDataChanges", "parameters": "(ConnectedComponent component, PathDef pathDef, String childName)", "modifiers": "public", "return": "void", "signature": "void unregisterDataChanges(ConnectedComponent component, PathDef pathDef, String childName)", "full_signature": "public void unregisterDataChanges(ConnectedComponent component, PathDef pathDef, String childName)", "class_method_signature": "InteractionProtocol.unregisterDataChanges(ConnectedComponent component, PathDef pathDef, String childName)", "testcase": false, "constructor": false}, {"identifier": "unregisterDataChanges", "parameters": "(ConnectedComponent component, String dataPath)", "modifiers": "public", "return": "void", "signature": "void unregisterDataChanges(ConnectedComponent component, String dataPath)", "full_signature": "public void unregisterDataChanges(ConnectedComponent component, String dataPath)", "class_method_signature": "InteractionProtocol.unregisterDataChanges(ConnectedComponent component, String dataPath)", "testcase": false, "constructor": false}, {"identifier": "registerDataListener", "parameters": "(ConnectedComponent component, IZkDataListener dataListener, String zkPath)", "modifiers": "private", "return": "void", "signature": "void registerDataListener(ConnectedComponent component, IZkDataListener dataListener, String zkPath)", "full_signature": "private void registerDataListener(ConnectedComponent component, IZkDataListener dataListener, String zkPath)", "class_method_signature": "InteractionProtocol.registerDataListener(ConnectedComponent component, IZkDataListener dataListener, String zkPath)", "testcase": false, "constructor": false}, {"identifier": "unregisterDataListener", "parameters": "(ConnectedComponent component, String zkPath)", "modifiers": "private", "return": "void", "signature": "void unregisterDataListener(ConnectedComponent component, String zkPath)", "full_signature": "private void unregisterDataListener(ConnectedComponent component, String zkPath)", "class_method_signature": "InteractionProtocol.unregisterDataListener(ConnectedComponent component, String zkPath)", "testcase": false, "constructor": false}, {"identifier": "registerAddRemoveListener", "parameters": "(final ConnectedComponent component, final IAddRemoveListener listener,\n          String zkPath)", "modifiers": "private", "return": "List<String>", "signature": "List<String> registerAddRemoveListener(final ConnectedComponent component, final IAddRemoveListener listener,\n          String zkPath)", "full_signature": "private List<String> registerAddRemoveListener(final ConnectedComponent component, final IAddRemoveListener listener,\n          String zkPath)", "class_method_signature": "InteractionProtocol.registerAddRemoveListener(final ConnectedComponent component, final IAddRemoveListener listener,\n          String zkPath)", "testcase": false, "constructor": false}, {"identifier": "unregisterAddRemoveListener", "parameters": "(final ConnectedComponent component, String zkPath)", "modifiers": "private", "return": "void", "signature": "void unregisterAddRemoveListener(final ConnectedComponent component, String zkPath)", "full_signature": "private void unregisterAddRemoveListener(final ConnectedComponent component, String zkPath)", "class_method_signature": "InteractionProtocol.unregisterAddRemoveListener(final ConnectedComponent component, String zkPath)", "testcase": false, "constructor": false}, {"identifier": "getComponentListener", "parameters": "(final ConnectedComponent component,\n          Class<T> listenerClass, String zkPath)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T getComponentListener(final ConnectedComponent component,\n          Class<T> listenerClass, String zkPath)", "full_signature": "@SuppressWarnings(\"unchecked\") private T getComponentListener(final ConnectedComponent component,\n          Class<T> listenerClass, String zkPath)", "class_method_signature": "InteractionProtocol.getComponentListener(final ConnectedComponent component,\n          Class<T> listenerClass, String zkPath)", "testcase": false, "constructor": false}, {"identifier": "getKnownNodes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getKnownNodes()", "full_signature": "public List<String> getKnownNodes()", "class_method_signature": "InteractionProtocol.getKnownNodes()", "testcase": false, "constructor": false}, {"identifier": "getLiveNodes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getLiveNodes()", "full_signature": "public List<String> getLiveNodes()", "class_method_signature": "InteractionProtocol.getLiveNodes()", "testcase": false, "constructor": false}, {"identifier": "getIndices", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getIndices()", "full_signature": "public List<String> getIndices()", "class_method_signature": "InteractionProtocol.getIndices()", "testcase": false, "constructor": false}, {"identifier": "getMasterMD", "parameters": "()", "modifiers": "public", "return": "MasterMetaData", "signature": "MasterMetaData getMasterMD()", "full_signature": "public MasterMetaData getMasterMD()", "class_method_signature": "InteractionProtocol.getMasterMD()", "testcase": false, "constructor": false}, {"identifier": "getNodeMD", "parameters": "(String node)", "modifiers": "public", "return": "NodeMetaData", "signature": "NodeMetaData getNodeMD(String node)", "full_signature": "public NodeMetaData getNodeMD(String node)", "class_method_signature": "InteractionProtocol.getNodeMD(String node)", "testcase": false, "constructor": false}, {"identifier": "readZkData", "parameters": "(String zkPath)", "modifiers": "private", "return": "Serializable", "signature": "Serializable readZkData(String zkPath)", "full_signature": "private Serializable readZkData(String zkPath)", "class_method_signature": "InteractionProtocol.readZkData(String zkPath)", "testcase": false, "constructor": false}, {"identifier": "getNodeShards", "parameters": "(String nodeName)", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getNodeShards(String nodeName)", "full_signature": "public Collection<String> getNodeShards(String nodeName)", "class_method_signature": "InteractionProtocol.getNodeShards(String nodeName)", "testcase": false, "constructor": false}, {"identifier": "getShardReplication", "parameters": "(String shard)", "modifiers": "public", "return": "int", "signature": "int getShardReplication(String shard)", "full_signature": "public int getShardReplication(String shard)", "class_method_signature": "InteractionProtocol.getShardReplication(String shard)", "testcase": false, "constructor": false}, {"identifier": "getShardAnnounceTime", "parameters": "(String node, String shard)", "modifiers": "public", "return": "long", "signature": "long getShardAnnounceTime(String node, String shard)", "full_signature": "public long getShardAnnounceTime(String node, String shard)", "class_method_signature": "InteractionProtocol.getShardAnnounceTime(String node, String shard)", "testcase": false, "constructor": false}, {"identifier": "getShard2NodesMap", "parameters": "(Collection<String> shardNames)", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getShard2NodesMap(Collection<String> shardNames)", "full_signature": "public Map<String, List<String>> getShard2NodesMap(Collection<String> shardNames)", "class_method_signature": "InteractionProtocol.getShard2NodesMap(Collection<String> shardNames)", "testcase": false, "constructor": false}, {"identifier": "getShardNodes", "parameters": "(String shard)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getShardNodes(String shard)", "full_signature": "public List<String> getShardNodes(String shard)", "class_method_signature": "InteractionProtocol.getShardNodes(String shard)", "testcase": false, "constructor": false}, {"identifier": "getShard2NodeShards", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getShard2NodeShards()", "full_signature": "public List<String> getShard2NodeShards()", "class_method_signature": "InteractionProtocol.getShard2NodeShards()", "testcase": false, "constructor": false}, {"identifier": "getReplicationReport", "parameters": "(IndexMetaData indexMD)", "modifiers": "public", "return": "ReplicationReport", "signature": "ReplicationReport getReplicationReport(IndexMetaData indexMD)", "full_signature": "public ReplicationReport getReplicationReport(IndexMetaData indexMD)", "class_method_signature": "InteractionProtocol.getReplicationReport(IndexMetaData indexMD)", "testcase": false, "constructor": false}, {"identifier": "publishMaster", "parameters": "(final Master master)", "modifiers": "public", "return": "MasterQueue", "signature": "MasterQueue publishMaster(final Master master)", "full_signature": "public MasterQueue publishMaster(final Master master)", "class_method_signature": "InteractionProtocol.publishMaster(final Master master)", "testcase": false, "constructor": false}, {"identifier": "cleanupOldMasterData", "parameters": "(final String masterName, String zkMasterPath)", "modifiers": "private", "return": "void", "signature": "void cleanupOldMasterData(final String masterName, String zkMasterPath)", "full_signature": "private void cleanupOldMasterData(final String masterName, String zkMasterPath)", "class_method_signature": "InteractionProtocol.cleanupOldMasterData(final String masterName, String zkMasterPath)", "testcase": false, "constructor": false}, {"identifier": "publishNode", "parameters": "(Node node, NodeMetaData nodeMetaData)", "modifiers": "public", "return": "NodeQueue", "signature": "NodeQueue publishNode(Node node, NodeMetaData nodeMetaData)", "full_signature": "public NodeQueue publishNode(Node node, NodeMetaData nodeMetaData)", "class_method_signature": "InteractionProtocol.publishNode(Node node, NodeMetaData nodeMetaData)", "testcase": false, "constructor": false}, {"identifier": "publishIndex", "parameters": "(IndexMetaData indexMD)", "modifiers": "public", "return": "void", "signature": "void publishIndex(IndexMetaData indexMD)", "full_signature": "public void publishIndex(IndexMetaData indexMD)", "class_method_signature": "InteractionProtocol.publishIndex(IndexMetaData indexMD)", "testcase": false, "constructor": false}, {"identifier": "unpublishIndex", "parameters": "(String indexName)", "modifiers": "public", "return": "void", "signature": "void unpublishIndex(String indexName)", "full_signature": "public void unpublishIndex(String indexName)", "class_method_signature": "InteractionProtocol.unpublishIndex(String indexName)", "testcase": false, "constructor": false}, {"identifier": "getIndexMD", "parameters": "(String index)", "modifiers": "public", "return": "IndexMetaData", "signature": "IndexMetaData getIndexMD(String index)", "full_signature": "public IndexMetaData getIndexMD(String index)", "class_method_signature": "InteractionProtocol.getIndexMD(String index)", "testcase": false, "constructor": false}, {"identifier": "updateIndexMD", "parameters": "(IndexMetaData indexMD)", "modifiers": "public", "return": "void", "signature": "void updateIndexMD(IndexMetaData indexMD)", "full_signature": "public void updateIndexMD(IndexMetaData indexMD)", "class_method_signature": "InteractionProtocol.updateIndexMD(IndexMetaData indexMD)", "testcase": false, "constructor": false}, {"identifier": "publishShard", "parameters": "(Node node, String shardName)", "modifiers": "public", "return": "void", "signature": "void publishShard(Node node, String shardName)", "full_signature": "public void publishShard(Node node, String shardName)", "class_method_signature": "InteractionProtocol.publishShard(Node node, String shardName)", "testcase": false, "constructor": false}, {"identifier": "unpublishShard", "parameters": "(Node node, String shard)", "modifiers": "public", "return": "void", "signature": "void unpublishShard(Node node, String shard)", "full_signature": "public void unpublishShard(Node node, String shard)", "class_method_signature": "InteractionProtocol.unpublishShard(Node node, String shard)", "testcase": false, "constructor": false}, {"identifier": "setMetric", "parameters": "(String nodeName, MetricsRecord metricsRecord)", "modifiers": "public", "return": "void", "signature": "void setMetric(String nodeName, MetricsRecord metricsRecord)", "full_signature": "public void setMetric(String nodeName, MetricsRecord metricsRecord)", "class_method_signature": "InteractionProtocol.setMetric(String nodeName, MetricsRecord metricsRecord)", "testcase": false, "constructor": false}, {"identifier": "getMetric", "parameters": "(String nodeName)", "modifiers": "public", "return": "MetricsRecord", "signature": "MetricsRecord getMetric(String nodeName)", "full_signature": "public MetricsRecord getMetric(String nodeName)", "class_method_signature": "InteractionProtocol.getMetric(String nodeName)", "testcase": false, "constructor": false}, {"identifier": "createEphemeral", "parameters": "(ConnectedComponent component, String path, Serializable content)", "modifiers": "private", "return": "void", "signature": "void createEphemeral(ConnectedComponent component, String path, Serializable content)", "full_signature": "private void createEphemeral(ConnectedComponent component, String path, Serializable content)", "class_method_signature": "InteractionProtocol.createEphemeral(ConnectedComponent component, String path, Serializable content)", "testcase": false, "constructor": false}, {"identifier": "addMasterOperation", "parameters": "(MasterOperation operation)", "modifiers": "public", "return": "void", "signature": "void addMasterOperation(MasterOperation operation)", "full_signature": "public void addMasterOperation(MasterOperation operation)", "class_method_signature": "InteractionProtocol.addMasterOperation(MasterOperation operation)", "testcase": false, "constructor": false}, {"identifier": "addNodeOperation", "parameters": "(String nodeName, NodeOperation nodeOperation)", "modifiers": "public", "return": "OperationId", "signature": "OperationId addNodeOperation(String nodeName, NodeOperation nodeOperation)", "full_signature": "public OperationId addNodeOperation(String nodeName, NodeOperation nodeOperation)", "class_method_signature": "InteractionProtocol.addNodeOperation(String nodeName, NodeOperation nodeOperation)", "testcase": false, "constructor": false}, {"identifier": "getNodeOperationResult", "parameters": "(OperationId operationId, boolean remove)", "modifiers": "public", "return": "OperationResult", "signature": "OperationResult getNodeOperationResult(OperationId operationId, boolean remove)", "full_signature": "public OperationResult getNodeOperationResult(OperationId operationId, boolean remove)", "class_method_signature": "InteractionProtocol.getNodeOperationResult(OperationId operationId, boolean remove)", "testcase": false, "constructor": false}, {"identifier": "isNodeOperationQueued", "parameters": "(OperationId operationId)", "modifiers": "public", "return": "boolean", "signature": "boolean isNodeOperationQueued(OperationId operationId)", "full_signature": "public boolean isNodeOperationQueued(OperationId operationId)", "class_method_signature": "InteractionProtocol.isNodeOperationQueued(OperationId operationId)", "testcase": false, "constructor": false}, {"identifier": "registerNodeOperationListener", "parameters": "(ConnectedComponent component, OperationId operationId,\n          IZkDataListener dataListener)", "modifiers": "public", "return": "void", "signature": "void registerNodeOperationListener(ConnectedComponent component, OperationId operationId,\n          IZkDataListener dataListener)", "full_signature": "public void registerNodeOperationListener(ConnectedComponent component, OperationId operationId,\n          IZkDataListener dataListener)", "class_method_signature": "InteractionProtocol.registerNodeOperationListener(ConnectedComponent component, OperationId operationId,\n          IZkDataListener dataListener)", "testcase": false, "constructor": false}, {"identifier": "getNodeQueue", "parameters": "(String nodeName)", "modifiers": "private", "return": "NodeQueue", "signature": "NodeQueue getNodeQueue(String nodeName)", "full_signature": "private NodeQueue getNodeQueue(String nodeName)", "class_method_signature": "InteractionProtocol.getNodeQueue(String nodeName)", "testcase": false, "constructor": false}, {"identifier": "indexExists", "parameters": "(String indexName)", "modifiers": "public", "return": "boolean", "signature": "boolean indexExists(String indexName)", "full_signature": "public boolean indexExists(String indexName)", "class_method_signature": "InteractionProtocol.indexExists(String indexName)", "testcase": false, "constructor": false}, {"identifier": "showStructure", "parameters": "(final boolean all)", "modifiers": "public", "return": "void", "signature": "void showStructure(final boolean all)", "full_signature": "public void showStructure(final boolean all)", "class_method_signature": "InteractionProtocol.showStructure(final boolean all)", "testcase": false, "constructor": false}, {"identifier": "explainStructure", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void explainStructure()", "full_signature": "public void explainStructure()", "class_method_signature": "InteractionProtocol.explainStructure()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(Version version)", "modifiers": "public", "return": "void", "signature": "void setVersion(Version version)", "full_signature": "public void setVersion(Version version)", "class_method_signature": "InteractionProtocol.setVersion(Version version)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "Version", "signature": "Version getVersion()", "full_signature": "public Version getVersion()", "class_method_signature": "InteractionProtocol.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setFlag", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setFlag(String name)", "full_signature": "public void setFlag(String name)", "class_method_signature": "InteractionProtocol.setFlag(String name)", "testcase": false, "constructor": false}, {"identifier": "flagExists", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean flagExists(String name)", "full_signature": "public boolean flagExists(String name)", "class_method_signature": "InteractionProtocol.flagExists(String name)", "testcase": false, "constructor": false}, {"identifier": "removeFlag", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void removeFlag(String name)", "full_signature": "public void removeFlag(String name)", "class_method_signature": "InteractionProtocol.removeFlag(String name)", "testcase": false, "constructor": false}, {"identifier": "getZkConfiguration", "parameters": "()", "modifiers": "public", "return": "ZkConfiguration", "signature": "ZkConfiguration getZkConfiguration()", "full_signature": "public ZkConfiguration getZkConfiguration()", "class_method_signature": "InteractionProtocol.getZkConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getZkClient", "parameters": "()", "modifiers": "public", "return": "ZkClient", "signature": "ZkClient getZkClient()", "full_signature": "public ZkClient getZkClient()", "class_method_signature": "InteractionProtocol.getZkClient()", "testcase": false, "constructor": false}], "file": "modules/katta-core/src/main/java/net/sf/katta/protocol/InteractionProtocol.java"}, "focal_method": {"identifier": "registerComponent", "parameters": "(ConnectedComponent connectedComponent)", "modifiers": "public", "return": "void", "body": "public void registerComponent(ConnectedComponent connectedComponent) {\n    if (_zkListenerByComponent.size() == 0) {\n      _zkClient.subscribeStateChanges(_stateListener);\n    }\n    _zkListenerByComponent.add(connectedComponent);\n  }", "signature": "void registerComponent(ConnectedComponent connectedComponent)", "full_signature": "public void registerComponent(ConnectedComponent connectedComponent)", "class_method_signature": "InteractionProtocol.registerComponent(ConnectedComponent connectedComponent)", "testcase": false, "constructor": false, "invocations": ["size", "subscribeStateChanges", "add"]}, "repository": {"repo_id": 5265087, "url": "https://github.com/sgroschupf/katta", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 54, "size": 105648, "license": "licensed"}}