{"test_class": {"identifier": "ParseUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "oshi-core/src/test/java/oshi/util/ParseUtilTest.java"}, "test_case": {"identifier": "testGetStringBetweenMultipleQuotes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetStringBetweenMultipleQuotes() {\n        assertEquals(\"hello $ is\", ParseUtil.getStringBetween(\"hello = $hello $ is $\", '$'));\n        assertEquals(\"Realtek AC'97 Audio\", ParseUtil.getStringBetween(\"pci.device = 'Realtek AC'97 Audio'\", '\\''));\n    }", "signature": "void testGetStringBetweenMultipleQuotes()", "full_signature": "@Test public void testGetStringBetweenMultipleQuotes()", "class_method_signature": "ParseUtilTest.testGetStringBetweenMultipleQuotes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getStringBetween", "assertEquals", "getStringBetween"]}, "focal_class": {"identifier": "ParseUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ParseUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ParseUtil.class)", "var_name": "LOG"}, {"original_string": "private static final String DEFAULT_LOG_MSG = \"{} didn't parse. Returning default. {}\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LOG_MSG = \"{} didn't parse. Returning default. {}\"", "var_name": "DEFAULT_LOG_MSG"}, {"original_string": "private static final Pattern HERTZ_PATTERN = Pattern.compile(\"(\\\\d+(.\\\\d+)?) ?([kMGT]?Hz).*\");", "modifier": "private static final", "type": "Pattern", "declarator": "HERTZ_PATTERN = Pattern.compile(\"(\\\\d+(.\\\\d+)?) ?([kMGT]?Hz).*\")", "var_name": "HERTZ_PATTERN"}, {"original_string": "private static final Pattern BYTES_PATTERN = Pattern.compile(\"(\\\\d+) ?([kMGT]?B).*\");", "modifier": "private static final", "type": "Pattern", "declarator": "BYTES_PATTERN = Pattern.compile(\"(\\\\d+) ?([kMGT]?B).*\")", "var_name": "BYTES_PATTERN"}, {"original_string": "private static final Pattern VALID_HEX = Pattern.compile(\"[0-9a-fA-F]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "VALID_HEX = Pattern.compile(\"[0-9a-fA-F]+\")", "var_name": "VALID_HEX"}, {"original_string": "private static final Pattern DHMS = Pattern.compile(\"(?:(\\\\d+)-)?(?:(\\\\d+):)??(?:(\\\\d+):)?(\\\\d+)(?:\\\\.(\\\\d+))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "DHMS = Pattern.compile(\"(?:(\\\\d+)-)?(?:(\\\\d+):)??(?:(\\\\d+):)?(\\\\d+)(?:\\\\.(\\\\d+))?\")", "var_name": "DHMS"}, {"original_string": "private static final Pattern UUID_PATTERN = Pattern\n            .compile(\".*([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}).*\");", "modifier": "private static final", "type": "Pattern", "declarator": "UUID_PATTERN = Pattern\n            .compile(\".*([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}).*\")", "var_name": "UUID_PATTERN"}, {"original_string": "private static final Pattern VENDOR_PRODUCT_ID = Pattern\n            .compile(\".*(?:VID|VEN)_(\\\\p{XDigit}{4})&(?:PID|DEV)_(\\\\p{XDigit}{4}).*\");", "modifier": "private static final", "type": "Pattern", "declarator": "VENDOR_PRODUCT_ID = Pattern\n            .compile(\".*(?:VID|VEN)_(\\\\p{XDigit}{4})&(?:PID|DEV)_(\\\\p{XDigit}{4}).*\")", "var_name": "VENDOR_PRODUCT_ID"}, {"original_string": "private static final Pattern LSPCI_MACHINE_READABLE = Pattern.compile(\"(.+)\\\\s\\\\[(.*?)\\\\]\");", "modifier": "private static final", "type": "Pattern", "declarator": "LSPCI_MACHINE_READABLE = Pattern.compile(\"(.+)\\\\s\\\\[(.*?)\\\\]\")", "var_name": "LSPCI_MACHINE_READABLE"}, {"original_string": "private static final Pattern LSPCI_MEMORY_SIZE = Pattern.compile(\".+\\\\s\\\\[size=(\\\\d+)([kKMGT])\\\\]\");", "modifier": "private static final", "type": "Pattern", "declarator": "LSPCI_MEMORY_SIZE = Pattern.compile(\".+\\\\s\\\\[size=(\\\\d+)([kKMGT])\\\\]\")", "var_name": "LSPCI_MEMORY_SIZE"}, {"original_string": "private static final String HZ = \"Hz\";", "modifier": "private static final", "type": "String", "declarator": "HZ = \"Hz\"", "var_name": "HZ"}, {"original_string": "private static final String KHZ = \"kHz\";", "modifier": "private static final", "type": "String", "declarator": "KHZ = \"kHz\"", "var_name": "KHZ"}, {"original_string": "private static final String MHZ = \"MHz\";", "modifier": "private static final", "type": "String", "declarator": "MHZ = \"MHz\"", "var_name": "MHZ"}, {"original_string": "private static final String GHZ = \"GHz\";", "modifier": "private static final", "type": "String", "declarator": "GHZ = \"GHz\"", "var_name": "GHZ"}, {"original_string": "private static final String THZ = \"THz\";", "modifier": "private static final", "type": "String", "declarator": "THZ = \"THz\"", "var_name": "THZ"}, {"original_string": "private static final String PHZ = \"PHz\";", "modifier": "private static final", "type": "String", "declarator": "PHZ = \"PHz\"", "var_name": "PHZ"}, {"original_string": "private static final Map<String, Long> multipliers;", "modifier": "private static final", "type": "Map<String, Long>", "declarator": "multipliers", "var_name": "multipliers"}, {"original_string": "private static final long EPOCH_DIFF = 11_644_473_600_000L;", "modifier": "private static final", "type": "long", "declarator": "EPOCH_DIFF = 11_644_473_600_000L", "var_name": "EPOCH_DIFF"}, {"original_string": "private static final int TZ_OFFSET = TimeZone.getDefault().getOffset(System.currentTimeMillis());", "modifier": "private static final", "type": "int", "declarator": "TZ_OFFSET = TimeZone.getDefault().getOffset(System.currentTimeMillis())", "var_name": "TZ_OFFSET"}, {"original_string": "public static final Pattern whitespacesColonWhitespace = Pattern.compile(\"\\\\s+:\\\\s\");", "modifier": "public static final", "type": "Pattern", "declarator": "whitespacesColonWhitespace = Pattern.compile(\"\\\\s+:\\\\s\")", "var_name": "whitespacesColonWhitespace"}, {"original_string": "public static final Pattern whitespaces = Pattern.compile(\"\\\\s+\");", "modifier": "public static final", "type": "Pattern", "declarator": "whitespaces = Pattern.compile(\"\\\\s+\")", "var_name": "whitespaces"}, {"original_string": "public static final Pattern notDigits = Pattern.compile(\"[^0-9]+\");", "modifier": "public static final", "type": "Pattern", "declarator": "notDigits = Pattern.compile(\"[^0-9]+\")", "var_name": "notDigits"}, {"original_string": "public static final Pattern startWithNotDigits = Pattern.compile(\"^[^0-9]*\");", "modifier": "public static final", "type": "Pattern", "declarator": "startWithNotDigits = Pattern.compile(\"^[^0-9]*\")", "var_name": "startWithNotDigits"}, {"original_string": "public static final Pattern slash = Pattern.compile(\"\\\\/\");", "modifier": "public static final", "type": "Pattern", "declarator": "slash = Pattern.compile(\"\\\\/\")", "var_name": "slash"}, {"original_string": "private static final long[] POWERS_OF_TEN = { 1L, 10L, 100L, 1_000L, 10_000L, 100_000L, 1_000_000L, 10_000_000L,\n            100_000_000L, 1_000_000_000L, 10_000_000_000L, 100_000_000_000L, 1_000_000_000_000L, 10_000_000_000_000L,\n            100_000_000_000_000L, 1_000_000_000_000_000L, 10_000_000_000_000_000L, 100_000_000_000_000_000L,\n            1_000_000_000_000_000_000L };", "modifier": "private static final", "type": "long[]", "declarator": "POWERS_OF_TEN = { 1L, 10L, 100L, 1_000L, 10_000L, 100_000L, 1_000_000L, 10_000_000L,\n            100_000_000L, 1_000_000_000L, 10_000_000_000L, 100_000_000_000L, 1_000_000_000_000L, 10_000_000_000_000L,\n            100_000_000_000_000L, 1_000_000_000_000_000L, 10_000_000_000_000_000L, 100_000_000_000_000_000L,\n            1_000_000_000_000_000_000L }", "var_name": "POWERS_OF_TEN"}, {"original_string": "private static final char[] HEX_ARRAY = \"0123456789ABCDEF\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "HEX_ARRAY = \"0123456789ABCDEF\".toCharArray()", "var_name": "HEX_ARRAY"}, {"original_string": "private static final DateTimeFormatter CIM_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss.SSSSSSZZZZZ\",\n            Locale.US);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "CIM_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss.SSSSSSZZZZZ\",\n            Locale.US)", "var_name": "CIM_FORMAT"}], "methods": [{"identifier": "ParseUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ParseUtil()", "full_signature": "private  ParseUtil()", "class_method_signature": "ParseUtil.ParseUtil()", "testcase": false, "constructor": true}, {"identifier": "parseHertz", "parameters": "(String hertz)", "modifiers": "public static", "return": "long", "signature": "long parseHertz(String hertz)", "full_signature": "public static long parseHertz(String hertz)", "class_method_signature": "ParseUtil.parseHertz(String hertz)", "testcase": false, "constructor": false}, {"identifier": "parseLastInt", "parameters": "(String s, int i)", "modifiers": "public static", "return": "int", "signature": "int parseLastInt(String s, int i)", "full_signature": "public static int parseLastInt(String s, int i)", "class_method_signature": "ParseUtil.parseLastInt(String s, int i)", "testcase": false, "constructor": false}, {"identifier": "parseLastLong", "parameters": "(String s, long li)", "modifiers": "public static", "return": "long", "signature": "long parseLastLong(String s, long li)", "full_signature": "public static long parseLastLong(String s, long li)", "class_method_signature": "ParseUtil.parseLastLong(String s, long li)", "testcase": false, "constructor": false}, {"identifier": "parseLastDouble", "parameters": "(String s, double d)", "modifiers": "public static", "return": "double", "signature": "double parseLastDouble(String s, double d)", "full_signature": "public static double parseLastDouble(String s, double d)", "class_method_signature": "ParseUtil.parseLastDouble(String s, double d)", "testcase": false, "constructor": false}, {"identifier": "parseLastString", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String parseLastString(String s)", "full_signature": "public static String parseLastString(String s)", "class_method_signature": "ParseUtil.parseLastString(String s)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToHexString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String byteArrayToHexString(byte[] bytes)", "full_signature": "public static String byteArrayToHexString(byte[] bytes)", "class_method_signature": "ParseUtil.byteArrayToHexString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "hexStringToByteArray", "parameters": "(String digits)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hexStringToByteArray(String digits)", "full_signature": "public static byte[] hexStringToByteArray(String digits)", "class_method_signature": "ParseUtil.hexStringToByteArray(String digits)", "testcase": false, "constructor": false}, {"identifier": "asciiStringToByteArray", "parameters": "(String text, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] asciiStringToByteArray(String text, int length)", "full_signature": "public static byte[] asciiStringToByteArray(String text, int length)", "class_method_signature": "ParseUtil.asciiStringToByteArray(String text, int length)", "testcase": false, "constructor": false}, {"identifier": "longToByteArray", "parameters": "(long value, int valueSize, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToByteArray(long value, int valueSize, int length)", "full_signature": "public static byte[] longToByteArray(long value, int valueSize, int length)", "class_method_signature": "ParseUtil.longToByteArray(long value, int valueSize, int length)", "testcase": false, "constructor": false}, {"identifier": "strToLong", "parameters": "(String str, int size)", "modifiers": "public static", "return": "long", "signature": "long strToLong(String str, int size)", "full_signature": "public static long strToLong(String str, int size)", "class_method_signature": "ParseUtil.strToLong(String str, int size)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToLong", "parameters": "(byte[] bytes, int size)", "modifiers": "public static", "return": "long", "signature": "long byteArrayToLong(byte[] bytes, int size)", "full_signature": "public static long byteArrayToLong(byte[] bytes, int size)", "class_method_signature": "ParseUtil.byteArrayToLong(byte[] bytes, int size)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToFloat", "parameters": "(byte[] bytes, int size, int fpBits)", "modifiers": "public static", "return": "float", "signature": "float byteArrayToFloat(byte[] bytes, int size, int fpBits)", "full_signature": "public static float byteArrayToFloat(byte[] bytes, int size, int fpBits)", "class_method_signature": "ParseUtil.byteArrayToFloat(byte[] bytes, int size, int fpBits)", "testcase": false, "constructor": false}, {"identifier": "unsignedIntToLong", "parameters": "(int unsignedValue)", "modifiers": "public static", "return": "long", "signature": "long unsignedIntToLong(int unsignedValue)", "full_signature": "public static long unsignedIntToLong(int unsignedValue)", "class_method_signature": "ParseUtil.unsignedIntToLong(int unsignedValue)", "testcase": false, "constructor": false}, {"identifier": "unsignedLongToSignedLong", "parameters": "(long unsignedValue)", "modifiers": "public static", "return": "long", "signature": "long unsignedLongToSignedLong(long unsignedValue)", "full_signature": "public static long unsignedLongToSignedLong(long unsignedValue)", "class_method_signature": "ParseUtil.unsignedLongToSignedLong(long unsignedValue)", "testcase": false, "constructor": false}, {"identifier": "hexStringToString", "parameters": "(String hexString)", "modifiers": "public static", "return": "String", "signature": "String hexStringToString(String hexString)", "full_signature": "public static String hexStringToString(String hexString)", "class_method_signature": "ParseUtil.hexStringToString(String hexString)", "testcase": false, "constructor": false}, {"identifier": "parseIntOrDefault", "parameters": "(String s, int defaultInt)", "modifiers": "public static", "return": "int", "signature": "int parseIntOrDefault(String s, int defaultInt)", "full_signature": "public static int parseIntOrDefault(String s, int defaultInt)", "class_method_signature": "ParseUtil.parseIntOrDefault(String s, int defaultInt)", "testcase": false, "constructor": false}, {"identifier": "parseLongOrDefault", "parameters": "(String s, long defaultLong)", "modifiers": "public static", "return": "long", "signature": "long parseLongOrDefault(String s, long defaultLong)", "full_signature": "public static long parseLongOrDefault(String s, long defaultLong)", "class_method_signature": "ParseUtil.parseLongOrDefault(String s, long defaultLong)", "testcase": false, "constructor": false}, {"identifier": "parseUnsignedLongOrDefault", "parameters": "(String s, long defaultLong)", "modifiers": "public static", "return": "long", "signature": "long parseUnsignedLongOrDefault(String s, long defaultLong)", "full_signature": "public static long parseUnsignedLongOrDefault(String s, long defaultLong)", "class_method_signature": "ParseUtil.parseUnsignedLongOrDefault(String s, long defaultLong)", "testcase": false, "constructor": false}, {"identifier": "parseDoubleOrDefault", "parameters": "(String s, double defaultDouble)", "modifiers": "public static", "return": "double", "signature": "double parseDoubleOrDefault(String s, double defaultDouble)", "full_signature": "public static double parseDoubleOrDefault(String s, double defaultDouble)", "class_method_signature": "ParseUtil.parseDoubleOrDefault(String s, double defaultDouble)", "testcase": false, "constructor": false}, {"identifier": "parseDHMSOrDefault", "parameters": "(String s, long defaultLong)", "modifiers": "public static", "return": "long", "signature": "long parseDHMSOrDefault(String s, long defaultLong)", "full_signature": "public static long parseDHMSOrDefault(String s, long defaultLong)", "class_method_signature": "ParseUtil.parseDHMSOrDefault(String s, long defaultLong)", "testcase": false, "constructor": false}, {"identifier": "parseUuidOrDefault", "parameters": "(String s, String defaultStr)", "modifiers": "public static", "return": "String", "signature": "String parseUuidOrDefault(String s, String defaultStr)", "full_signature": "public static String parseUuidOrDefault(String s, String defaultStr)", "class_method_signature": "ParseUtil.parseUuidOrDefault(String s, String defaultStr)", "testcase": false, "constructor": false}, {"identifier": "getSingleQuoteStringValue", "parameters": "(String line)", "modifiers": "public static", "return": "String", "signature": "String getSingleQuoteStringValue(String line)", "full_signature": "public static String getSingleQuoteStringValue(String line)", "class_method_signature": "ParseUtil.getSingleQuoteStringValue(String line)", "testcase": false, "constructor": false}, {"identifier": "getDoubleQuoteStringValue", "parameters": "(String line)", "modifiers": "public static", "return": "String", "signature": "String getDoubleQuoteStringValue(String line)", "full_signature": "public static String getDoubleQuoteStringValue(String line)", "class_method_signature": "ParseUtil.getDoubleQuoteStringValue(String line)", "testcase": false, "constructor": false}, {"identifier": "getStringBetween", "parameters": "(String line, char c)", "modifiers": "public static", "return": "String", "signature": "String getStringBetween(String line, char c)", "full_signature": "public static String getStringBetween(String line, char c)", "class_method_signature": "ParseUtil.getStringBetween(String line, char c)", "testcase": false, "constructor": false}, {"identifier": "getFirstIntValue", "parameters": "(String line)", "modifiers": "public static", "return": "int", "signature": "int getFirstIntValue(String line)", "full_signature": "public static int getFirstIntValue(String line)", "class_method_signature": "ParseUtil.getFirstIntValue(String line)", "testcase": false, "constructor": false}, {"identifier": "getNthIntValue", "parameters": "(String line, int n)", "modifiers": "public static", "return": "int", "signature": "int getNthIntValue(String line, int n)", "full_signature": "public static int getNthIntValue(String line, int n)", "class_method_signature": "ParseUtil.getNthIntValue(String line, int n)", "testcase": false, "constructor": false}, {"identifier": "removeMatchingString", "parameters": "(final String original, final String toRemove)", "modifiers": "public static", "return": "String", "signature": "String removeMatchingString(final String original, final String toRemove)", "full_signature": "public static String removeMatchingString(final String original, final String toRemove)", "class_method_signature": "ParseUtil.removeMatchingString(final String original, final String toRemove)", "testcase": false, "constructor": false}, {"identifier": "parseStringToLongArray", "parameters": "(String s, int[] indices, int length, char delimiter)", "modifiers": "public static", "return": "long[]", "signature": "long[] parseStringToLongArray(String s, int[] indices, int length, char delimiter)", "full_signature": "public static long[] parseStringToLongArray(String s, int[] indices, int length, char delimiter)", "class_method_signature": "ParseUtil.parseStringToLongArray(String s, int[] indices, int length, char delimiter)", "testcase": false, "constructor": false}, {"identifier": "countStringToLongArray", "parameters": "(String s, char delimiter)", "modifiers": "public static", "return": "int", "signature": "int countStringToLongArray(String s, char delimiter)", "full_signature": "public static int countStringToLongArray(String s, char delimiter)", "class_method_signature": "ParseUtil.countStringToLongArray(String s, char delimiter)", "testcase": false, "constructor": false}, {"identifier": "getTextBetweenStrings", "parameters": "(String text, String before, String after)", "modifiers": "public static", "return": "String", "signature": "String getTextBetweenStrings(String text, String before, String after)", "full_signature": "public static String getTextBetweenStrings(String text, String before, String after)", "class_method_signature": "ParseUtil.getTextBetweenStrings(String text, String before, String after)", "testcase": false, "constructor": false}, {"identifier": "filetimeToUtcMs", "parameters": "(long filetime, boolean local)", "modifiers": "public static", "return": "long", "signature": "long filetimeToUtcMs(long filetime, boolean local)", "full_signature": "public static long filetimeToUtcMs(long filetime, boolean local)", "class_method_signature": "ParseUtil.filetimeToUtcMs(long filetime, boolean local)", "testcase": false, "constructor": false}, {"identifier": "parseMmDdYyyyToYyyyMmDD", "parameters": "(String dateString)", "modifiers": "public static", "return": "String", "signature": "String parseMmDdYyyyToYyyyMmDD(String dateString)", "full_signature": "public static String parseMmDdYyyyToYyyyMmDD(String dateString)", "class_method_signature": "ParseUtil.parseMmDdYyyyToYyyyMmDD(String dateString)", "testcase": false, "constructor": false}, {"identifier": "parseCimDateTimeToOffset", "parameters": "(String cimDateTime)", "modifiers": "public static", "return": "OffsetDateTime", "signature": "OffsetDateTime parseCimDateTimeToOffset(String cimDateTime)", "full_signature": "public static OffsetDateTime parseCimDateTimeToOffset(String cimDateTime)", "class_method_signature": "ParseUtil.parseCimDateTimeToOffset(String cimDateTime)", "testcase": false, "constructor": false}, {"identifier": "filePathStartsWith", "parameters": "(List<String> prefixList, String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean filePathStartsWith(List<String> prefixList, String path)", "full_signature": "public static boolean filePathStartsWith(List<String> prefixList, String path)", "class_method_signature": "ParseUtil.filePathStartsWith(List<String> prefixList, String path)", "testcase": false, "constructor": false}, {"identifier": "parseDecimalMemorySizeToBinary", "parameters": "(String size)", "modifiers": "public static", "return": "long", "signature": "long parseDecimalMemorySizeToBinary(String size)", "full_signature": "public static long parseDecimalMemorySizeToBinary(String size)", "class_method_signature": "ParseUtil.parseDecimalMemorySizeToBinary(String size)", "testcase": false, "constructor": false}, {"identifier": "parsePnPDeviceIdToVendorProductId", "parameters": "(String pnpDeviceId)", "modifiers": "public static", "return": "Pair<String, String>", "signature": "Pair<String, String> parsePnPDeviceIdToVendorProductId(String pnpDeviceId)", "full_signature": "public static Pair<String, String> parsePnPDeviceIdToVendorProductId(String pnpDeviceId)", "class_method_signature": "ParseUtil.parsePnPDeviceIdToVendorProductId(String pnpDeviceId)", "testcase": false, "constructor": false}, {"identifier": "parseLshwResourceString", "parameters": "(String resources)", "modifiers": "public static", "return": "long", "signature": "long parseLshwResourceString(String resources)", "full_signature": "public static long parseLshwResourceString(String resources)", "class_method_signature": "ParseUtil.parseLshwResourceString(String resources)", "testcase": false, "constructor": false}, {"identifier": "parseLspciMachineReadable", "parameters": "(String line)", "modifiers": "public static", "return": "Pair<String, String>", "signature": "Pair<String, String> parseLspciMachineReadable(String line)", "full_signature": "public static Pair<String, String> parseLspciMachineReadable(String line)", "class_method_signature": "ParseUtil.parseLspciMachineReadable(String line)", "testcase": false, "constructor": false}, {"identifier": "parseLspciMemorySize", "parameters": "(String line)", "modifiers": "public static", "return": "long", "signature": "long parseLspciMemorySize(String line)", "full_signature": "public static long parseLspciMemorySize(String line)", "class_method_signature": "ParseUtil.parseLspciMemorySize(String line)", "testcase": false, "constructor": false}, {"identifier": "parseHyphenatedIntList", "parameters": "(String str)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> parseHyphenatedIntList(String str)", "full_signature": "public static List<Integer> parseHyphenatedIntList(String str)", "class_method_signature": "ParseUtil.parseHyphenatedIntList(String str)", "testcase": false, "constructor": false}, {"identifier": "parseUtAddrV6toIP", "parameters": "(int[] utAddrV6)", "modifiers": "public static", "return": "String", "signature": "String parseUtAddrV6toIP(int[] utAddrV6)", "full_signature": "public static String parseUtAddrV6toIP(int[] utAddrV6)", "class_method_signature": "ParseUtil.parseUtAddrV6toIP(int[] utAddrV6)", "testcase": false, "constructor": false}, {"identifier": "hexStringToLong", "parameters": "(String hexString, long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long hexStringToLong(String hexString, long defaultValue)", "full_signature": "public static long hexStringToLong(String hexString, long defaultValue)", "class_method_signature": "ParseUtil.hexStringToLong(String hexString, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "removeLeadingDots", "parameters": "(String dotPrefixedStr)", "modifiers": "public static", "return": "String", "signature": "String removeLeadingDots(String dotPrefixedStr)", "full_signature": "public static String removeLeadingDots(String dotPrefixedStr)", "class_method_signature": "ParseUtil.removeLeadingDots(String dotPrefixedStr)", "testcase": false, "constructor": false}], "file": "oshi-core/src/main/java/oshi/util/ParseUtil.java"}, "focal_method": {"identifier": "getStringBetween", "parameters": "(String line, char c)", "modifiers": "public static", "return": "String", "body": "public static String getStringBetween(String line, char c) {\n        int firstOcc = line.indexOf(c);\n        if (firstOcc < 0) {\n            return \"\";\n        }\n        return line.substring(firstOcc + 1, line.lastIndexOf(c)).trim();\n    }", "signature": "String getStringBetween(String line, char c)", "full_signature": "public static String getStringBetween(String line, char c)", "class_method_signature": "ParseUtil.getStringBetween(String line, char c)", "testcase": false, "constructor": false, "invocations": ["indexOf", "trim", "substring", "lastIndexOf"]}, "repository": {"repo_id": 3407114, "url": "https://github.com/oshi/oshi", "stars": 1381, "created": "2/10/2012 12:46:48 PM +00:00", "updates": "2020-01-27T17:17:27+00:00", "fork": "False", "license": "licensed"}}