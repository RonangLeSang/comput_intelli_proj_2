{"test_class": {"identifier": "BoonTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Company company;", "modifier": "", "type": "Company", "declarator": "company", "var_name": "company"}, {"original_string": "BoonTemplate template;", "modifier": "", "type": "BoonTemplate", "declarator": "template", "var_name": "template"}, {"original_string": "String replace;", "modifier": "", "type": "String", "declarator": "replace", "var_name": "replace"}, {"original_string": "private boolean ok;", "modifier": "private", "type": "boolean", "declarator": "ok", "var_name": "ok"}, {"original_string": "List<Employee> employees;", "modifier": "", "type": "List<Employee>", "declarator": "employees", "var_name": "employees"}, {"original_string": "String listTemplate = \"\\n{{#each items}}\" +\n\n            \" this {{this}}, index {{@index}}, key {{@key}}, first {{@first}}, last {{@last}}\\n\" +\n\n            \"{{/each}}\";", "modifier": "", "type": "String", "declarator": "listTemplate = \"\\n{{#each items}}\" +\n\n            \" this {{this}}, index {{@index}}, key {{@key}}, first {{@first}}, last {{@last}}\\n\" +\n\n            \"{{/each}}\"", "var_name": "listTemplate"}, {"original_string": "String jstListTemplate = \"\\n<c:forEach items=\\\"items\\\">\" +\n            \" this ${this}, index ${@index}, key ${@key}, first ${@first}, last ${@last}\" +\n            \"\\n</c:forEach>\";", "modifier": "", "type": "String", "declarator": "jstListTemplate = \"\\n<c:forEach items=\\\"items\\\">\" +\n            \" this ${this}, index ${@index}, key ${@key}, first ${@first}, last ${@last}\" +\n            \"\\n</c:forEach>\"", "var_name": "jstListTemplate"}], "file": "boon/src/test/java/org/boon/template/BoonTemplateTest.java"}, "test_case": {"identifier": "simpleJstlIf6", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleJstlIf6() {\n\n\n        replace = template.replace(\"<c:if test=\\\"name2\\\">\\n${name}\\n\\n</c:if>\",\n                map(\"name\", \"Rick\", \"name2\", null));\n\n\n        ok = Str.isEmpty(replace) || die(replace);\n    }", "signature": "void simpleJstlIf6()", "full_signature": "@Test public void simpleJstlIf6()", "class_method_signature": "BoonTemplateTest.simpleJstlIf6()", "testcase": true, "constructor": false, "invocations": ["replace", "map", "isEmpty", "die"]}, "focal_class": {"identifier": "BoonTemplate", "superclass": "", "interfaces": "implements Template", "fields": [{"original_string": "private CharBuf _buf = CharBuf.create(16);", "modifier": "private", "type": "CharBuf", "declarator": "_buf = CharBuf.create(16)", "var_name": "_buf"}, {"original_string": "private BoonTemplate parentTemplate;", "modifier": "private", "type": "BoonTemplate", "declarator": "parentTemplate", "var_name": "parentTemplate"}, {"original_string": "private TemplateParser parser;", "modifier": "private", "type": "TemplateParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private String template;", "modifier": "private", "type": "String", "declarator": "template", "var_name": "template"}, {"original_string": "private final ExpressionContext _context;", "modifier": "private final", "type": "ExpressionContext", "declarator": "_context", "var_name": "_context"}, {"original_string": "private BoonCommandArgumentParser commandArgumentParser = new BoonCommandArgumentParser();", "modifier": "private", "type": "BoonCommandArgumentParser", "declarator": "commandArgumentParser = new BoonCommandArgumentParser()", "var_name": "commandArgumentParser"}], "methods": [{"identifier": "output", "parameters": "(Object object)", "modifiers": "private", "return": "void", "signature": "void output(Object object)", "full_signature": "private void output(Object object)", "class_method_signature": "BoonTemplate.output(Object object)", "testcase": false, "constructor": false}, {"identifier": "output", "parameters": "(Token token)", "modifiers": "private", "return": "void", "signature": "void output(Token token)", "full_signature": "private void output(Token token)", "class_method_signature": "BoonTemplate.output(Token token)", "testcase": false, "constructor": false}, {"identifier": "BoonTemplate", "parameters": "()", "modifiers": "public", "return": "", "signature": " BoonTemplate()", "full_signature": "public  BoonTemplate()", "class_method_signature": "BoonTemplate.BoonTemplate()", "testcase": false, "constructor": true}, {"identifier": "BoonTemplate", "parameters": "(TemplateParser templateParser)", "modifiers": "public", "return": "", "signature": " BoonTemplate(TemplateParser templateParser)", "full_signature": "public  BoonTemplate(TemplateParser templateParser)", "class_method_signature": "BoonTemplate.BoonTemplate(TemplateParser templateParser)", "testcase": false, "constructor": true}, {"identifier": "BoonTemplate", "parameters": "(ExpressionContext context, TemplateParser templateParser)", "modifiers": "public", "return": "", "signature": " BoonTemplate(ExpressionContext context, TemplateParser templateParser)", "full_signature": "public  BoonTemplate(ExpressionContext context, TemplateParser templateParser)", "class_method_signature": "BoonTemplate.BoonTemplate(ExpressionContext context, TemplateParser templateParser)", "testcase": false, "constructor": true}, {"identifier": "replace", "parameters": "(String template, Object... context)", "modifiers": "@Override public", "return": "String", "signature": "String replace(String template, Object... context)", "full_signature": "@Override public String replace(String template, Object... context)", "class_method_signature": "BoonTemplate.replace(String template, Object... context)", "testcase": false, "constructor": false}, {"identifier": "include", "parameters": "(String template)", "modifiers": "private", "return": "String", "signature": "String include(String template)", "full_signature": "private String include(String template)", "class_method_signature": "BoonTemplate.include(String template)", "testcase": false, "constructor": false}, {"identifier": "replaceFromResource", "parameters": "(String resource, Object... context)", "modifiers": "@Override public", "return": "String", "signature": "String replaceFromResource(String resource, Object... context)", "full_signature": "@Override public String replaceFromResource(String resource, Object... context)", "class_method_signature": "BoonTemplate.replaceFromResource(String resource, Object... context)", "testcase": false, "constructor": false}, {"identifier": "replaceFromFile", "parameters": "(String resource, Object... context)", "modifiers": "@Override public", "return": "String", "signature": "String replaceFromFile(String resource, Object... context)", "full_signature": "@Override public String replaceFromFile(String resource, Object... context)", "class_method_signature": "BoonTemplate.replaceFromFile(String resource, Object... context)", "testcase": false, "constructor": false}, {"identifier": "replaceFromURI", "parameters": "(String resource, Object... context)", "modifiers": "@Override public", "return": "String", "signature": "String replaceFromURI(String resource, Object... context)", "full_signature": "@Override public String replaceFromURI(String resource, Object... context)", "class_method_signature": "BoonTemplate.replaceFromURI(String resource, Object... context)", "testcase": false, "constructor": false}, {"identifier": "inlcudeFromURI", "parameters": "(String resource)", "modifiers": "public", "return": "String", "signature": "String inlcudeFromURI(String resource)", "full_signature": "public String inlcudeFromURI(String resource)", "class_method_signature": "BoonTemplate.inlcudeFromURI(String resource)", "testcase": false, "constructor": false}, {"identifier": "textFromToken", "parameters": "(Token token)", "modifiers": "private", "return": "String", "signature": "String textFromToken(Token token)", "full_signature": "private String textFromToken(Token token)", "class_method_signature": "BoonTemplate.textFromToken(Token token)", "testcase": false, "constructor": false}, {"identifier": "initContext", "parameters": "(final Object... root)", "modifiers": "protected", "return": "void", "signature": "void initContext(final Object... root)", "full_signature": "protected void initContext(final Object... root)", "class_method_signature": "BoonTemplate.initContext(final Object... root)", "testcase": false, "constructor": false}, {"identifier": "handleCommand", "parameters": "(String template, Token commandToken, Iterator<Token> tokens)", "modifiers": "private", "return": "Token", "signature": "Token handleCommand(String template, Token commandToken, Iterator<Token> tokens)", "full_signature": "private Token handleCommand(String template, Token commandToken, Iterator<Token> tokens)", "class_method_signature": "BoonTemplate.handleCommand(String template, Token commandToken, Iterator<Token> tokens)", "testcase": false, "constructor": false}, {"identifier": "dispatchCommand", "parameters": "(\n            String command,\n            Map<String, Object> params,\n            List<Token> commandTokens\n    )", "modifiers": "private", "return": "void", "signature": "void dispatchCommand(\n            String command,\n            Map<String, Object> params,\n            List<Token> commandTokens\n    )", "full_signature": "private void dispatchCommand(\n            String command,\n            Map<String, Object> params,\n            List<Token> commandTokens\n    )", "class_method_signature": "BoonTemplate.dispatchCommand(\n            String command,\n            Map<String, Object> params,\n            List<Token> commandTokens\n    )", "testcase": false, "constructor": false}, {"identifier": "processCommandBodyTokens", "parameters": "(List<Token> commandTokens)", "modifiers": "private", "return": "void", "signature": "void processCommandBodyTokens(List<Token> commandTokens)", "full_signature": "private void processCommandBodyTokens(List<Token> commandTokens)", "class_method_signature": "BoonTemplate.processCommandBodyTokens(List<Token> commandTokens)", "testcase": false, "constructor": false}, {"identifier": "processToken", "parameters": "(Iterator<Token> tokens, Token token)", "modifiers": "private", "return": "void", "signature": "void processToken(Iterator<Token> tokens, Token token)", "full_signature": "private void processToken(Iterator<Token> tokens, Token token)", "class_method_signature": "BoonTemplate.processToken(Iterator<Token> tokens, Token token)", "testcase": false, "constructor": false}, {"identifier": "getStringParam", "parameters": "(String param, Map<String, Object> params, String defaultValue)", "modifiers": "private", "return": "String", "signature": "String getStringParam(String param, Map<String, Object> params, String defaultValue)", "full_signature": "private String getStringParam(String param, Map<String, Object> params, String defaultValue)", "class_method_signature": "BoonTemplate.getStringParam(String param, Map<String, Object> params, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getIntParam", "parameters": "(String param, Map<String, Object> params, int defaultValue)", "modifiers": "private", "return": "int", "signature": "int getIntParam(String param, Map<String, Object> params, int defaultValue)", "full_signature": "private int getIntParam(String param, Map<String, Object> params, int defaultValue)", "class_method_signature": "BoonTemplate.getIntParam(String param, Map<String, Object> params, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "displayTokens", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void displayTokens()", "full_signature": "public void displayTokens()", "class_method_signature": "BoonTemplate.displayTokens()", "testcase": false, "constructor": false}, {"identifier": "handleLoop", "parameters": "(Map<String, Object> params, List<Token> commandTokens)", "modifiers": "private", "return": "void", "signature": "void handleLoop(Map<String, Object> params, List<Token> commandTokens)", "full_signature": "private void handleLoop(Map<String, Object> params, List<Token> commandTokens)", "class_method_signature": "BoonTemplate.handleLoop(Map<String, Object> params, List<Token> commandTokens)", "testcase": false, "constructor": false}, {"identifier": "handleSet", "parameters": "(Map<String, Object> params, List<Token> commandTokens)", "modifiers": "private", "return": "void", "signature": "void handleSet(Map<String, Object> params, List<Token> commandTokens)", "full_signature": "private void handleSet(Map<String, Object> params, List<Token> commandTokens)", "class_method_signature": "BoonTemplate.handleSet(Map<String, Object> params, List<Token> commandTokens)", "testcase": false, "constructor": false}, {"identifier": "handleInclude", "parameters": "(Map<String, Object> params, List<Token> commandTokens)", "modifiers": "private", "return": "void", "signature": "void handleInclude(Map<String, Object> params, List<Token> commandTokens)", "full_signature": "private void handleInclude(Map<String, Object> params, List<Token> commandTokens)", "class_method_signature": "BoonTemplate.handleInclude(Map<String, Object> params, List<Token> commandTokens)", "testcase": false, "constructor": false}, {"identifier": "includeFromResource", "parameters": "(String resource)", "modifiers": "private", "return": "String", "signature": "String includeFromResource(String resource)", "full_signature": "private String includeFromResource(String resource)", "class_method_signature": "BoonTemplate.includeFromResource(String resource)", "testcase": false, "constructor": false}, {"identifier": "handleIf", "parameters": "(Map<String, Object> params, List<Token> commandTokens,\n                          boolean normal)", "modifiers": "private", "return": "void", "signature": "void handleIf(Map<String, Object> params, List<Token> commandTokens,\n                          boolean normal)", "full_signature": "private void handleIf(Map<String, Object> params, List<Token> commandTokens,\n                          boolean normal)", "class_method_signature": "BoonTemplate.handleIf(Map<String, Object> params, List<Token> commandTokens,\n                          boolean normal)", "testcase": false, "constructor": false}, {"identifier": "template", "parameters": "()", "modifiers": "public static", "return": "Template", "signature": "Template template()", "full_signature": "public static Template template()", "class_method_signature": "BoonTemplate.template()", "testcase": false, "constructor": false}, {"identifier": "jstl", "parameters": "()", "modifiers": "public static", "return": "Template", "signature": "Template jstl()", "full_signature": "public static Template jstl()", "class_method_signature": "BoonTemplate.jstl()", "testcase": false, "constructor": false}, {"identifier": "addFunctions", "parameters": "(Class<?> functions)", "modifiers": "public", "return": "void", "signature": "void addFunctions(Class<?> functions)", "full_signature": "public void addFunctions(Class<?> functions)", "class_method_signature": "BoonTemplate.addFunctions(Class<?> functions)", "testcase": false, "constructor": false}, {"identifier": "addFunctions", "parameters": "(String prefix, Class<?> functions)", "modifiers": "public", "return": "void", "signature": "void addFunctions(String prefix, Class<?> functions)", "full_signature": "public void addFunctions(String prefix, Class<?> functions)", "class_method_signature": "BoonTemplate.addFunctions(String prefix, Class<?> functions)", "testcase": false, "constructor": false}], "file": "boon/src/main/java/org/boon/template/BoonTemplate.java"}, "focal_method": {"identifier": "replace", "parameters": "(String template, Object... context)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String replace(String template, Object... context) {\n\n        initContext(context);\n        this.template = template;\n        parser.parse(template);\n        _buf.readForRecycle();\n\n        Iterator<Token> tokens = parser.getTokenList().iterator();\n\n        while (tokens.hasNext()) {\n            final Token token = tokens.next();\n            processToken(tokens, token);\n        }\n\n        return _buf.toString();\n    }", "signature": "String replace(String template, Object... context)", "full_signature": "@Override public String replace(String template, Object... context)", "class_method_signature": "BoonTemplate.replace(String template, Object... context)", "testcase": false, "constructor": false, "invocations": ["initContext", "parse", "readForRecycle", "iterator", "getTokenList", "hasNext", "next", "processToken", "toString"]}, "repository": {"repo_id": 13580866, "url": "https://github.com/boonproject/boon", "language": "Java", "is_fork": false, "fork_count": 103, "stargazer_count": 512, "size": 7401, "license": "licensed"}}