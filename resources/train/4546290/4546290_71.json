{"test_class": {"identifier": "LilyHBaseSchemaTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RECORD_TABLE_NAME = \"myrecordtable\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_TABLE_NAME = \"myrecordtable\"", "var_name": "RECORD_TABLE_NAME"}, {"original_string": "private static final String NON_RECORD_TABLE_NAME = \"notarecordtable\";", "modifier": "private static final", "type": "String", "declarator": "NON_RECORD_TABLE_NAME = \"notarecordtable\"", "var_name": "NON_RECORD_TABLE_NAME"}, {"original_string": "private HBaseTableFactory tableFactory;", "modifier": "private", "type": "HBaseTableFactory", "declarator": "tableFactory", "var_name": "tableFactory"}, {"original_string": "private HTableInterface recordTable;", "modifier": "private", "type": "HTableInterface", "declarator": "recordTable", "var_name": "recordTable"}, {"original_string": "private HTableInterface nonRecordTable;", "modifier": "private", "type": "HTableInterface", "declarator": "nonRecordTable", "var_name": "nonRecordTable"}], "file": "global/hbase-util/src/test/java/org/lilyproject/util/hbase/LilyHBaseSchemaTest.java"}, "test_case": {"identifier": "testGetRecordTable_WithSplits_NotRecordTable", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n    public void testGetRecordTable_WithSplits_NotRecordTable() throws IOException, InterruptedException {\n        when(tableFactory.getTable(any(HTableDescriptor.class), any(byte[][].class))).thenReturn(nonRecordTable);\n        LilyHBaseSchema.getRecordTable(tableFactory, RepoAndTableUtil.DEFAULT_REPOSITORY, NON_RECORD_TABLE_NAME, new byte[][]{});\n    }", "signature": "void testGetRecordTable_WithSplits_NotRecordTable()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void testGetRecordTable_WithSplits_NotRecordTable()", "class_method_signature": "LilyHBaseSchemaTest.testGetRecordTable_WithSplits_NotRecordTable()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getTable", "any", "any", "getRecordTable"]}, "focal_class": {"identifier": "LilyHBaseSchema", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final HColumnDescriptor DATA_CF;", "modifier": "private static final", "type": "HColumnDescriptor", "declarator": "DATA_CF", "var_name": "DATA_CF"}, {"original_string": "public static final byte[] TABLE_TYPE_PROPERTY = Bytes.toBytes(\"lilyTableType\");", "modifier": "public static final", "type": "byte[]", "declarator": "TABLE_TYPE_PROPERTY = Bytes.toBytes(\"lilyTableType\")", "var_name": "TABLE_TYPE_PROPERTY"}, {"original_string": "public static final byte[] TABLE_TYPE_RECORD = Bytes.toBytes(\"record\");", "modifier": "public static final", "type": "byte[]", "declarator": "TABLE_TYPE_RECORD = Bytes.toBytes(\"record\")", "var_name": "TABLE_TYPE_RECORD"}, {"original_string": "private static final HTableDescriptor typeTableDescriptor;", "modifier": "private static final", "type": "HTableDescriptor", "declarator": "typeTableDescriptor", "var_name": "typeTableDescriptor"}, {"original_string": "private static final HTableDescriptor blobIncubatorDescriptor;", "modifier": "private static final", "type": "HTableDescriptor", "declarator": "blobIncubatorDescriptor", "var_name": "blobIncubatorDescriptor"}], "methods": [{"identifier": "LilyHBaseSchema", "parameters": "()", "modifiers": "private", "return": "", "signature": " LilyHBaseSchema()", "full_signature": "private  LilyHBaseSchema()", "class_method_signature": "LilyHBaseSchema.LilyHBaseSchema()", "testcase": false, "constructor": true}, {"identifier": "createRecordTableDescriptor", "parameters": "(String repositoryName, String tableName)", "modifiers": "@VisibleForTesting static", "return": "HTableDescriptor", "signature": "HTableDescriptor createRecordTableDescriptor(String repositoryName, String tableName)", "full_signature": "@VisibleForTesting static HTableDescriptor createRecordTableDescriptor(String repositoryName, String tableName)", "class_method_signature": "LilyHBaseSchema.createRecordTableDescriptor(String repositoryName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "isRecordTableDescriptor", "parameters": "(HTableDescriptor htableDescriptor)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRecordTableDescriptor(HTableDescriptor htableDescriptor)", "full_signature": "public static boolean isRecordTableDescriptor(HTableDescriptor htableDescriptor)", "class_method_signature": "LilyHBaseSchema.isRecordTableDescriptor(HTableDescriptor htableDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getRecordTable", "parameters": "(HBaseTableFactory tableFactory, String repositoryName, String tableName)", "modifiers": "public static", "return": "HTableInterface", "signature": "HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName)", "full_signature": "public static HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName)", "class_method_signature": "LilyHBaseSchema.getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "getRecordTable", "parameters": "(HBaseTableFactory tableFactory, String repositoryName, String tableName, byte[][] splitKeys)", "modifiers": "public static", "return": "HTableInterface", "signature": "HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName, byte[][] splitKeys)", "full_signature": "public static HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName, byte[][] splitKeys)", "class_method_signature": "LilyHBaseSchema.getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName, byte[][] splitKeys)", "testcase": false, "constructor": false}, {"identifier": "getRecordTable", "parameters": "(HBaseTableFactory tableFactory, String repositoryName, String tableName, boolean clientMode)", "modifiers": "public static", "return": "HTableInterface", "signature": "HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName, boolean clientMode)", "full_signature": "public static HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName, boolean clientMode)", "class_method_signature": "LilyHBaseSchema.getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName, boolean clientMode)", "testcase": false, "constructor": false}, {"identifier": "verifyIsRecordTable", "parameters": "(HTableDescriptor htableDescriptor)", "modifiers": "private static", "return": "void", "signature": "void verifyIsRecordTable(HTableDescriptor htableDescriptor)", "full_signature": "private static void verifyIsRecordTable(HTableDescriptor htableDescriptor)", "class_method_signature": "LilyHBaseSchema.verifyIsRecordTable(HTableDescriptor htableDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getTypeTable", "parameters": "(HBaseTableFactory tableFactory)", "modifiers": "public static", "return": "HTableInterface", "signature": "HTableInterface getTypeTable(HBaseTableFactory tableFactory)", "full_signature": "public static HTableInterface getTypeTable(HBaseTableFactory tableFactory)", "class_method_signature": "LilyHBaseSchema.getTypeTable(HBaseTableFactory tableFactory)", "testcase": false, "constructor": false}, {"identifier": "getBlobIncubatorTable", "parameters": "(HBaseTableFactory tableFactory, boolean clientMode)", "modifiers": "public static", "return": "HTableInterface", "signature": "HTableInterface getBlobIncubatorTable(HBaseTableFactory tableFactory, boolean clientMode)", "full_signature": "public static HTableInterface getBlobIncubatorTable(HBaseTableFactory tableFactory, boolean clientMode)", "class_method_signature": "LilyHBaseSchema.getBlobIncubatorTable(HBaseTableFactory tableFactory, boolean clientMode)", "testcase": false, "constructor": false}], "file": "global/hbase-util/src/main/java/org/lilyproject/util/hbase/LilyHBaseSchema.java"}, "focal_method": {"identifier": "getRecordTable", "parameters": "(HBaseTableFactory tableFactory, String repositoryName, String tableName)", "modifiers": "public static", "return": "HTableInterface", "body": "public static HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName) throws IOException, InterruptedException {\n        HTableInterface recordTable = tableFactory.getTable(createRecordTableDescriptor(repositoryName, tableName));\n        verifyIsRecordTable(recordTable.getTableDescriptor());\n        return recordTable;\n    }", "signature": "HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName)", "full_signature": "public static HTableInterface getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName)", "class_method_signature": "LilyHBaseSchema.getRecordTable(HBaseTableFactory tableFactory, String repositoryName, String tableName)", "testcase": false, "constructor": false, "invocations": ["getTable", "createRecordTableDescriptor", "verifyIsRecordTable", "getTableDescriptor"]}, "repository": {"repo_id": 4546290, "url": "https://github.com/NGDATA/lilyproject", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 82, "size": 20489, "license": "licensed"}}