{"test_class": {"identifier": "RepoAndTableUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "global/hbase-util/src/test/java/org/lilyproject/util/hbase/RepoAndTableUtilTest.java"}, "test_case": {"identifier": "testSetRepositoryOwnership", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetRepositoryOwnership() {\n        String repoName = \"MyRepositoryName\";\n        HTableDescriptor tableDescriptor = new HTableDescriptor(\"MyTable\");\n        \n        RepoAndTableUtil.setRepositoryOwnership(tableDescriptor, repoName);\n        \n        assertEquals(repoName, tableDescriptor.getValue(RepoAndTableUtil.OWNING_REPOSITORY_KEY));\n    }", "signature": "void testSetRepositoryOwnership()", "full_signature": "@Test public void testSetRepositoryOwnership()", "class_method_signature": "RepoAndTableUtilTest.testSetRepositoryOwnership()", "testcase": true, "constructor": false, "invocations": ["setRepositoryOwnership", "assertEquals", "getValue"]}, "focal_class": {"identifier": "RepoAndTableUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_REPOSITORY = \"default\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_REPOSITORY = \"default\"", "var_name": "DEFAULT_REPOSITORY"}, {"original_string": "public static final String REPOSITORY_TABLE_SEPARATOR = \"__\";", "modifier": "public static final", "type": "String", "declarator": "REPOSITORY_TABLE_SEPARATOR = \"__\"", "var_name": "REPOSITORY_TABLE_SEPARATOR"}, {"original_string": "private static final String VALID_NAME_PATTERN = \"[a-zA-Z_0-9-.]+\";", "modifier": "private static final", "type": "String", "declarator": "VALID_NAME_PATTERN = \"[a-zA-Z_0-9-.]+\"", "var_name": "VALID_NAME_PATTERN"}, {"original_string": "private static final Pattern VALID_NAME_CHARS = Pattern.compile(VALID_NAME_PATTERN);", "modifier": "private static final", "type": "Pattern", "declarator": "VALID_NAME_CHARS = Pattern.compile(VALID_NAME_PATTERN)", "var_name": "VALID_NAME_CHARS"}, {"original_string": "public static final String VALID_NAME_EXPLANATION = \"A valid name should follow the regex \" + VALID_NAME_PATTERN\n            + \" and not contain \" + REPOSITORY_TABLE_SEPARATOR + \".\";", "modifier": "public static final", "type": "String", "declarator": "VALID_NAME_EXPLANATION = \"A valid name should follow the regex \" + VALID_NAME_PATTERN\n            + \" and not contain \" + REPOSITORY_TABLE_SEPARATOR + \".\"", "var_name": "VALID_NAME_EXPLANATION"}, {"original_string": "static final String OWNING_REPOSITORY_KEY = \"lilyOwningRepository\";", "modifier": "static final", "type": "String", "declarator": "OWNING_REPOSITORY_KEY = \"lilyOwningRepository\"", "var_name": "OWNING_REPOSITORY_KEY"}], "methods": [{"identifier": "belongsToRepository", "parameters": "(String hbaseTableName, String repositoryName)", "modifiers": "public static final", "return": "boolean", "signature": "boolean belongsToRepository(String hbaseTableName, String repositoryName)", "full_signature": "public static final boolean belongsToRepository(String hbaseTableName, String repositoryName)", "class_method_signature": "RepoAndTableUtil.belongsToRepository(String hbaseTableName, String repositoryName)", "testcase": false, "constructor": false}, {"identifier": "getHBaseTableName", "parameters": "(String repositoryName, String tableName)", "modifiers": "public static", "return": "String", "signature": "String getHBaseTableName(String repositoryName, String tableName)", "full_signature": "public static String getHBaseTableName(String repositoryName, String tableName)", "class_method_signature": "RepoAndTableUtil.getHBaseTableName(String repositoryName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "isValidTableName", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidTableName(String name)", "full_signature": "public static boolean isValidTableName(String name)", "class_method_signature": "RepoAndTableUtil.isValidTableName(String name)", "testcase": false, "constructor": false}, {"identifier": "isDefaultRepository", "parameters": "(String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDefaultRepository(String name)", "full_signature": "private static boolean isDefaultRepository(String name)", "class_method_signature": "RepoAndTableUtil.isDefaultRepository(String name)", "testcase": false, "constructor": false}, {"identifier": "extractLilyTableName", "parameters": "(String repositoryName, String hbaseTableName)", "modifiers": "public static", "return": "String", "signature": "String extractLilyTableName(String repositoryName, String hbaseTableName)", "full_signature": "public static String extractLilyTableName(String repositoryName, String hbaseTableName)", "class_method_signature": "RepoAndTableUtil.extractLilyTableName(String repositoryName, String hbaseTableName)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryAndTable", "parameters": "(String hbaseTableName)", "modifiers": "public static", "return": "String[]", "signature": "String[] getRepositoryAndTable(String hbaseTableName)", "full_signature": "public static String[] getRepositoryAndTable(String hbaseTableName)", "class_method_signature": "RepoAndTableUtil.getRepositoryAndTable(String hbaseTableName)", "testcase": false, "constructor": false}, {"identifier": "setRepositoryOwnership", "parameters": "(HTableDescriptor tableDescriptor, String repositoryName)", "modifiers": "public static", "return": "void", "signature": "void setRepositoryOwnership(HTableDescriptor tableDescriptor, String repositoryName)", "full_signature": "public static void setRepositoryOwnership(HTableDescriptor tableDescriptor, String repositoryName)", "class_method_signature": "RepoAndTableUtil.setRepositoryOwnership(HTableDescriptor tableDescriptor, String repositoryName)", "testcase": false, "constructor": false}, {"identifier": "getOwningRepository", "parameters": "(HTableDescriptor tableDescriptor)", "modifiers": "public static", "return": "String", "signature": "String getOwningRepository(HTableDescriptor tableDescriptor)", "full_signature": "public static String getOwningRepository(HTableDescriptor tableDescriptor)", "class_method_signature": "RepoAndTableUtil.getOwningRepository(HTableDescriptor tableDescriptor)", "testcase": false, "constructor": false}], "file": "global/hbase-util/src/main/java/org/lilyproject/util/hbase/RepoAndTableUtil.java"}, "focal_method": {"identifier": "setRepositoryOwnership", "parameters": "(HTableDescriptor tableDescriptor, String repositoryName)", "modifiers": "public static", "return": "void", "body": "public static void setRepositoryOwnership(HTableDescriptor tableDescriptor, String repositoryName) {\n        String existingValue = tableDescriptor.getValue(OWNING_REPOSITORY_KEY);\n        if (existingValue != null && !existingValue.equals(repositoryName)) {\n            throw new IllegalStateException(\"Table descriptor already belongs to repository '\"\n                                            + existingValue + \"', can't set owning repository to \" + repositoryName);\n        }\n        tableDescriptor.setValue(OWNING_REPOSITORY_KEY, repositoryName);\n    }", "signature": "void setRepositoryOwnership(HTableDescriptor tableDescriptor, String repositoryName)", "full_signature": "public static void setRepositoryOwnership(HTableDescriptor tableDescriptor, String repositoryName)", "class_method_signature": "RepoAndTableUtil.setRepositoryOwnership(HTableDescriptor tableDescriptor, String repositoryName)", "testcase": false, "constructor": false, "invocations": ["getValue", "equals", "setValue"]}, "repository": {"repo_id": 4546290, "url": "https://github.com/NGDATA/lilyproject", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 82, "size": 20489, "license": "licensed"}}