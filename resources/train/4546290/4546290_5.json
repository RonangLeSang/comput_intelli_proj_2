{"test_class": {"identifier": "AvroConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static LRepository repository;", "modifier": "private static", "type": "LRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private static TypeManager typeManager;", "modifier": "private static", "type": "TypeManager", "declarator": "typeManager", "var_name": "typeManager"}, {"original_string": "private static RecordFactory recordFactory;", "modifier": "private static", "type": "RecordFactory", "declarator": "recordFactory", "var_name": "recordFactory"}, {"original_string": "private static AvroConverter converter;", "modifier": "private static", "type": "AvroConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private static IMocksControl control;", "modifier": "private static", "type": "IMocksControl", "declarator": "control", "var_name": "control"}], "file": "cr/avro-api/src/test/java/org/lilyproject/avro/AvroConverterTest.java"}, "test_case": {"identifier": "testEmptyRecordType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyRecordType() throws Exception {\n        QName name = new QName(\"aNamespace\", \"aName\");\n        SchemaId id = new SchemaIdImpl(UUID.randomUUID());\n        RecordType recordType = new RecordTypeImpl(id, name);\n        typeManager.newRecordType(id, name);\n        expectLastCall().andReturn(recordType);\n\n        control.replay();\n        converter = new AvroConverter();\n        AvroRecordType avroRecordType = new AvroRecordType();\n        AvroSchemaId avroSchemaId = new AvroSchemaId();\n        avroSchemaId.idBytes = ByteBuffer.wrap(id.getBytes());\n        avroRecordType.id = avroSchemaId;\n        AvroQName avroQName = new AvroQName();\n        avroQName.namespace = \"aNamespace\";\n        avroQName.name = \"aName\";\n        avroRecordType.name = avroQName;\n        // fieldTypeEntries and supertypes are by default empty instead of null\n        avroRecordType.fieldTypeEntries =\n                new GenericData.Array<AvroFieldTypeEntry>(0, Schema.createArray(AvroFieldTypeEntry.SCHEMA$));\n        avroRecordType.supertypes = new GenericData.Array<AvroSupertype>(0, Schema.createArray(AvroSupertype.SCHEMA$));\n        assertEquals(recordType, converter.convert(avroRecordType, typeManager));\n        assertEquals(avroRecordType, converter.convert(recordType));\n        control.verify();\n    }", "signature": "void testEmptyRecordType()", "full_signature": "@Test public void testEmptyRecordType()", "class_method_signature": "AvroConverterTest.testEmptyRecordType()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "newRecordType", "andReturn", "expectLastCall", "replay", "wrap", "getBytes", "createArray", "createArray", "assertEquals", "convert", "assertEquals", "convert", "verify"]}, "focal_class": {"identifier": "AvroConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Log log = LogFactory.getLog(getClass());", "modifier": "protected", "type": "Log", "declarator": "log = LogFactory.getLog(getClass())", "var_name": "log"}], "methods": [{"identifier": "AvroConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " AvroConverter()", "full_signature": "public  AvroConverter()", "class_method_signature": "AvroConverter.AvroConverter()", "testcase": false, "constructor": true}, {"identifier": "asArray", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "byte[]", "signature": "byte[] asArray(ByteBuffer buffer)", "full_signature": "private byte[] asArray(ByteBuffer buffer)", "class_method_signature": "AvroConverter.asArray(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroAuthzContext authzContext)", "modifiers": "public", "return": "AuthorizationContext", "signature": "AuthorizationContext convert(AvroAuthzContext authzContext)", "full_signature": "public AuthorizationContext convert(AvroAuthzContext authzContext)", "class_method_signature": "AvroConverter.convert(AvroAuthzContext authzContext)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AuthorizationContext authzContext)", "modifiers": "public", "return": "AvroAuthzContext", "signature": "AvroAuthzContext convert(AuthorizationContext authzContext)", "full_signature": "public AvroAuthzContext convert(AuthorizationContext authzContext)", "class_method_signature": "AvroConverter.convert(AuthorizationContext authzContext)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Record record, LRepository repository)", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer convert(Record record, LRepository repository)", "full_signature": "public ByteBuffer convert(Record record, LRepository repository)", "class_method_signature": "AvroConverter.convert(Record record, LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(IdRecord idRecord, LRepository repository)", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer convert(IdRecord idRecord, LRepository repository)", "full_signature": "public ByteBuffer convert(IdRecord idRecord, LRepository repository)", "class_method_signature": "AvroConverter.convert(IdRecord idRecord, LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convertRecord", "parameters": "(ByteBuffer recordData, LRepository repository)", "modifiers": "public", "return": "Record", "signature": "Record convertRecord(ByteBuffer recordData, LRepository repository)", "full_signature": "public Record convertRecord(ByteBuffer recordData, LRepository repository)", "class_method_signature": "AvroConverter.convertRecord(ByteBuffer recordData, LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convertIdRecord", "parameters": "(ByteBuffer avroIdRecord, LRepository repository)", "modifiers": "public", "return": "IdRecord", "signature": "IdRecord convertIdRecord(ByteBuffer avroIdRecord, LRepository repository)", "full_signature": "public IdRecord convertIdRecord(ByteBuffer avroIdRecord, LRepository repository)", "class_method_signature": "AvroConverter.convertIdRecord(ByteBuffer avroIdRecord, LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Record parentRecord, List<MutationCondition> conditions,\n            LRepository repository)", "modifiers": "public", "return": "List<AvroMutationCondition>", "signature": "List<AvroMutationCondition> convert(Record parentRecord, List<MutationCondition> conditions,\n            LRepository repository)", "full_signature": "public List<AvroMutationCondition> convert(Record parentRecord, List<MutationCondition> conditions,\n            LRepository repository)", "class_method_signature": "AvroConverter.convert(Record parentRecord, List<MutationCondition> conditions,\n            LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convertAvroRecords", "parameters": "(List<ByteBuffer> avroRecords, LRepository repository)", "modifiers": "public", "return": "List<Record>", "signature": "List<Record> convertAvroRecords(List<ByteBuffer> avroRecords, LRepository repository)", "full_signature": "public List<Record> convertAvroRecords(List<ByteBuffer> avroRecords, LRepository repository)", "class_method_signature": "AvroConverter.convertAvroRecords(List<ByteBuffer> avroRecords, LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convertRecords", "parameters": "(Collection<Record> records, LRepository repository)", "modifiers": "public", "return": "List<ByteBuffer>", "signature": "List<ByteBuffer> convertRecords(Collection<Record> records, LRepository repository)", "full_signature": "public List<ByteBuffer> convertRecords(Collection<Record> records, LRepository repository)", "class_method_signature": "AvroConverter.convertRecords(Collection<Record> records, LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroFieldType avroFieldType, TypeManager typeManager)", "modifiers": "public", "return": "FieldType", "signature": "FieldType convert(AvroFieldType avroFieldType, TypeManager typeManager)", "full_signature": "public FieldType convert(AvroFieldType avroFieldType, TypeManager typeManager)", "class_method_signature": "AvroConverter.convert(AvroFieldType avroFieldType, TypeManager typeManager)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroScope scope)", "modifiers": "public", "return": "Scope", "signature": "Scope convert(AvroScope scope)", "full_signature": "public Scope convert(AvroScope scope)", "class_method_signature": "AvroConverter.convert(AvroScope scope)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(FieldType fieldType)", "modifiers": "public", "return": "AvroFieldType", "signature": "AvroFieldType convert(FieldType fieldType)", "full_signature": "public AvroFieldType convert(FieldType fieldType)", "class_method_signature": "AvroConverter.convert(FieldType fieldType)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Scope scope)", "modifiers": "public", "return": "AvroScope", "signature": "AvroScope convert(Scope scope)", "full_signature": "public AvroScope convert(Scope scope)", "class_method_signature": "AvroConverter.convert(Scope scope)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroRecordType avroRecordType, TypeManager typeManager)", "modifiers": "public", "return": "RecordType", "signature": "RecordType convert(AvroRecordType avroRecordType, TypeManager typeManager)", "full_signature": "public RecordType convert(AvroRecordType avroRecordType, TypeManager typeManager)", "class_method_signature": "AvroConverter.convert(AvroRecordType avroRecordType, TypeManager typeManager)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(RecordType recordType)", "modifiers": "public", "return": "AvroRecordType", "signature": "AvroRecordType convert(RecordType recordType)", "full_signature": "public AvroRecordType convert(RecordType recordType)", "class_method_signature": "AvroConverter.convert(RecordType recordType)", "testcase": false, "constructor": false}, {"identifier": "convertFieldAndRecordTypes", "parameters": "(Pair<List<FieldType>, List<RecordType>> types)", "modifiers": "public", "return": "AvroFieldAndRecordTypes", "signature": "AvroFieldAndRecordTypes convertFieldAndRecordTypes(Pair<List<FieldType>, List<RecordType>> types)", "full_signature": "public AvroFieldAndRecordTypes convertFieldAndRecordTypes(Pair<List<FieldType>, List<RecordType>> types)", "class_method_signature": "AvroConverter.convertFieldAndRecordTypes(Pair<List<FieldType>, List<RecordType>> types)", "testcase": false, "constructor": false}, {"identifier": "convertAvroFieldAndRecordTypes", "parameters": "(AvroFieldAndRecordTypes types,\n            TypeManager typeManager)", "modifiers": "public", "return": "Pair<List<FieldType>, List<RecordType>>", "signature": "Pair<List<FieldType>, List<RecordType>> convertAvroFieldAndRecordTypes(AvroFieldAndRecordTypes types,\n            TypeManager typeManager)", "full_signature": "public Pair<List<FieldType>, List<RecordType>> convertAvroFieldAndRecordTypes(AvroFieldAndRecordTypes types,\n            TypeManager typeManager)", "class_method_signature": "AvroConverter.convertAvroFieldAndRecordTypes(AvroFieldAndRecordTypes types,\n            TypeManager typeManager)", "testcase": false, "constructor": false}, {"identifier": "convertTypeBucket", "parameters": "(TypeBucket typeBucket)", "modifiers": "public", "return": "AvroTypeBucket", "signature": "AvroTypeBucket convertTypeBucket(TypeBucket typeBucket)", "full_signature": "public AvroTypeBucket convertTypeBucket(TypeBucket typeBucket)", "class_method_signature": "AvroConverter.convertTypeBucket(TypeBucket typeBucket)", "testcase": false, "constructor": false}, {"identifier": "convertAvroTypeBucket", "parameters": "(AvroTypeBucket avroTypeBucket, TypeManager  typeManager)", "modifiers": "public", "return": "TypeBucket", "signature": "TypeBucket convertAvroTypeBucket(AvroTypeBucket avroTypeBucket, TypeManager  typeManager)", "full_signature": "public TypeBucket convertAvroTypeBucket(AvroTypeBucket avroTypeBucket, TypeManager  typeManager)", "class_method_signature": "AvroConverter.convertAvroTypeBucket(AvroTypeBucket avroTypeBucket, TypeManager  typeManager)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroValueType valueType, TypeManager typeManager)", "modifiers": "public", "return": "ValueType", "signature": "ValueType convert(AvroValueType valueType, TypeManager typeManager)", "full_signature": "public ValueType convert(AvroValueType valueType, TypeManager typeManager)", "class_method_signature": "AvroConverter.convert(AvroValueType valueType, TypeManager typeManager)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(ValueType valueType)", "modifiers": "public", "return": "AvroValueType", "signature": "AvroValueType convert(ValueType valueType)", "full_signature": "public AvroValueType convert(ValueType valueType)", "class_method_signature": "AvroConverter.convert(ValueType valueType)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroQName name)", "modifiers": "public", "return": "QName", "signature": "QName convert(AvroQName name)", "full_signature": "public QName convert(AvroQName name)", "class_method_signature": "AvroConverter.convert(AvroQName name)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(QName name)", "modifiers": "public", "return": "AvroQName", "signature": "AvroQName convert(QName name)", "full_signature": "public AvroQName convert(QName name)", "class_method_signature": "AvroConverter.convert(QName name)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Entry<SchemaId, Long> supertypeEntry)", "modifiers": "public", "return": "AvroSupertype", "signature": "AvroSupertype convert(Entry<SchemaId, Long> supertypeEntry)", "full_signature": "public AvroSupertype convert(Entry<SchemaId, Long> supertypeEntry)", "class_method_signature": "AvroConverter.convert(Entry<SchemaId, Long> supertypeEntry)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroFieldTypeEntry avroFieldTypeEntry, TypeManager typeManager)", "modifiers": "public", "return": "FieldTypeEntry", "signature": "FieldTypeEntry convert(AvroFieldTypeEntry avroFieldTypeEntry, TypeManager typeManager)", "full_signature": "public FieldTypeEntry convert(AvroFieldTypeEntry avroFieldTypeEntry, TypeManager typeManager)", "class_method_signature": "AvroConverter.convert(AvroFieldTypeEntry avroFieldTypeEntry, TypeManager typeManager)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(FieldTypeEntry fieldTypeEntry)", "modifiers": "public", "return": "AvroFieldTypeEntry", "signature": "AvroFieldTypeEntry convert(FieldTypeEntry fieldTypeEntry)", "full_signature": "public AvroFieldTypeEntry convert(FieldTypeEntry fieldTypeEntry)", "class_method_signature": "AvroConverter.convert(FieldTypeEntry fieldTypeEntry)", "testcase": false, "constructor": false}, {"identifier": "convertOtherException", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "AvroGenericException", "signature": "AvroGenericException convertOtherException(Throwable throwable)", "full_signature": "public static AvroGenericException convertOtherException(Throwable throwable)", "class_method_signature": "AvroConverter.convertOtherException(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroGenericException avroException)", "modifiers": "public", "return": "RuntimeException", "signature": "RuntimeException convert(AvroGenericException avroException)", "full_signature": "public RuntimeException convert(AvroGenericException avroException)", "class_method_signature": "AvroConverter.convert(AvroGenericException avroException)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroRemoteException exception)", "modifiers": "public", "return": "RemoteException", "signature": "RemoteException convert(AvroRemoteException exception)", "full_signature": "public RemoteException convert(AvroRemoteException exception)", "class_method_signature": "AvroConverter.convert(AvroRemoteException exception)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(RepositoryException exception)", "modifiers": "public", "return": "AvroRepositoryException", "signature": "AvroRepositoryException convert(RepositoryException exception)", "full_signature": "public AvroRepositoryException convert(RepositoryException exception)", "class_method_signature": "AvroConverter.convert(RepositoryException exception)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroRepositoryException avroException)", "modifiers": "public", "return": "RepositoryException", "signature": "RepositoryException convert(AvroRepositoryException avroException)", "full_signature": "public RepositoryException convert(AvroRepositoryException avroException)", "class_method_signature": "AvroConverter.convert(AvroRepositoryException avroException)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(InterruptedException exception)", "modifiers": "public", "return": "AvroInterruptedException", "signature": "AvroInterruptedException convert(InterruptedException exception)", "full_signature": "public AvroInterruptedException convert(InterruptedException exception)", "class_method_signature": "AvroConverter.convert(InterruptedException exception)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(IOException exception)", "modifiers": "public", "return": "AvroIOException", "signature": "AvroIOException convert(IOException exception)", "full_signature": "public AvroIOException convert(IOException exception)", "class_method_signature": "AvroConverter.convert(IOException exception)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroIOException avroException)", "modifiers": "public", "return": "IOException", "signature": "IOException convert(AvroIOException avroException)", "full_signature": "public IOException convert(AvroIOException avroException)", "class_method_signature": "AvroConverter.convert(AvroIOException avroException)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(RecordId recordId)", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer convert(RecordId recordId)", "full_signature": "public ByteBuffer convert(RecordId recordId)", "class_method_signature": "AvroConverter.convert(RecordId recordId)", "testcase": false, "constructor": false}, {"identifier": "convertAvroVersion", "parameters": "(long avroVersion)", "modifiers": "public", "return": "Long", "signature": "Long convertAvroVersion(long avroVersion)", "full_signature": "public Long convertAvroVersion(long avroVersion)", "class_method_signature": "AvroConverter.convertAvroVersion(long avroVersion)", "testcase": false, "constructor": false}, {"identifier": "convertVersion", "parameters": "(Long version)", "modifiers": "public", "return": "long", "signature": "long convertVersion(Long version)", "full_signature": "public long convertVersion(Long version)", "class_method_signature": "AvroConverter.convertVersion(Long version)", "testcase": false, "constructor": false}, {"identifier": "buildCauses", "parameters": "(Throwable throwable)", "modifiers": "private static", "return": "List<AvroExceptionCause>", "signature": "List<AvroExceptionCause> buildCauses(Throwable throwable)", "full_signature": "private static List<AvroExceptionCause> buildCauses(Throwable throwable)", "class_method_signature": "AvroConverter.buildCauses(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "convertCause", "parameters": "(Throwable throwable)", "modifiers": "private static", "return": "AvroExceptionCause", "signature": "AvroExceptionCause convertCause(Throwable throwable)", "full_signature": "private static AvroExceptionCause convertCause(Throwable throwable)", "class_method_signature": "AvroConverter.convertCause(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(StackTraceElement el)", "modifiers": "private static", "return": "AvroStackTraceElement", "signature": "AvroStackTraceElement convert(StackTraceElement el)", "full_signature": "private static AvroStackTraceElement convert(StackTraceElement el)", "class_method_signature": "AvroConverter.convert(StackTraceElement el)", "testcase": false, "constructor": false}, {"identifier": "restoreCauses", "parameters": "(List<AvroExceptionCause> remoteCauses, Throwable throwable)", "modifiers": "private", "return": "void", "signature": "void restoreCauses(List<AvroExceptionCause> remoteCauses, Throwable throwable)", "full_signature": "private void restoreCauses(List<AvroExceptionCause> remoteCauses, Throwable throwable)", "class_method_signature": "AvroConverter.restoreCauses(List<AvroExceptionCause> remoteCauses, Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "restoreCauses", "parameters": "(List<AvroExceptionCause> remoteCauses)", "modifiers": "private", "return": "Throwable", "signature": "Throwable restoreCauses(List<AvroExceptionCause> remoteCauses)", "full_signature": "private Throwable restoreCauses(List<AvroExceptionCause> remoteCauses)", "class_method_signature": "AvroConverter.restoreCauses(List<AvroExceptionCause> remoteCauses)", "testcase": false, "constructor": false}, {"identifier": "convertAvroFieldTypes", "parameters": "(List<AvroFieldType> avroFieldTypes, TypeManager typeManager)", "modifiers": "public", "return": "List<FieldType>", "signature": "List<FieldType> convertAvroFieldTypes(List<AvroFieldType> avroFieldTypes, TypeManager typeManager)", "full_signature": "public List<FieldType> convertAvroFieldTypes(List<AvroFieldType> avroFieldTypes, TypeManager typeManager)", "class_method_signature": "AvroConverter.convertAvroFieldTypes(List<AvroFieldType> avroFieldTypes, TypeManager typeManager)", "testcase": false, "constructor": false}, {"identifier": "convertAvroRecordTypes", "parameters": "(List<AvroRecordType> avroRecordTypes, TypeManager typeManager)", "modifiers": "public", "return": "List<RecordType>", "signature": "List<RecordType> convertAvroRecordTypes(List<AvroRecordType> avroRecordTypes, TypeManager typeManager)", "full_signature": "public List<RecordType> convertAvroRecordTypes(List<AvroRecordType> avroRecordTypes, TypeManager typeManager)", "class_method_signature": "AvroConverter.convertAvroRecordTypes(List<AvroRecordType> avroRecordTypes, TypeManager typeManager)", "testcase": false, "constructor": false}, {"identifier": "convertFieldTypes", "parameters": "(Collection<FieldType> fieldTypes)", "modifiers": "public", "return": "List<AvroFieldType>", "signature": "List<AvroFieldType> convertFieldTypes(Collection<FieldType> fieldTypes)", "full_signature": "public List<AvroFieldType> convertFieldTypes(Collection<FieldType> fieldTypes)", "class_method_signature": "AvroConverter.convertFieldTypes(Collection<FieldType> fieldTypes)", "testcase": false, "constructor": false}, {"identifier": "convertRecordTypes", "parameters": "(Collection<RecordType> recordTypes)", "modifiers": "public", "return": "List<AvroRecordType>", "signature": "List<AvroRecordType> convertRecordTypes(Collection<RecordType> recordTypes)", "full_signature": "public List<AvroRecordType> convertRecordTypes(Collection<RecordType> recordTypes)", "class_method_signature": "AvroConverter.convertRecordTypes(Collection<RecordType> recordTypes)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroSchemaId avroSchemaId)", "modifiers": "public", "return": "SchemaId", "signature": "SchemaId convert(AvroSchemaId avroSchemaId)", "full_signature": "public SchemaId convert(AvroSchemaId avroSchemaId)", "class_method_signature": "AvroConverter.convert(AvroSchemaId avroSchemaId)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(SchemaId schemaId)", "modifiers": "public", "return": "AvroSchemaId", "signature": "AvroSchemaId convert(SchemaId schemaId)", "full_signature": "public AvroSchemaId convert(SchemaId schemaId)", "class_method_signature": "AvroConverter.convert(SchemaId schemaId)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(List<AvroQName> avroNames)", "modifiers": "public", "return": "QName[]", "signature": "QName[] convert(List<AvroQName> avroNames)", "full_signature": "public QName[] convert(List<AvroQName> avroNames)", "class_method_signature": "AvroConverter.convert(List<AvroQName> avroNames)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Set<RecordId> recordIds)", "modifiers": "public", "return": "List<String>", "signature": "List<String> convert(Set<RecordId> recordIds)", "full_signature": "public List<String> convert(Set<RecordId> recordIds)", "class_method_signature": "AvroConverter.convert(Set<RecordId> recordIds)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroCompareOp op)", "modifiers": "public", "return": "CompareOp", "signature": "CompareOp convert(AvroCompareOp op)", "full_signature": "public CompareOp convert(AvroCompareOp op)", "class_method_signature": "AvroConverter.convert(AvroCompareOp op)", "testcase": false, "constructor": false}, {"identifier": "convertFromAvro", "parameters": "(List<AvroMutationCondition> avroConditions, LRepository repository)", "modifiers": "public", "return": "List<MutationCondition>", "signature": "List<MutationCondition> convertFromAvro(List<AvroMutationCondition> avroConditions, LRepository repository)", "full_signature": "public List<MutationCondition> convertFromAvro(List<AvroMutationCondition> avroConditions, LRepository repository)", "class_method_signature": "AvroConverter.convertFromAvro(List<AvroMutationCondition> avroConditions, LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(TableCreateDescriptor descriptor)", "modifiers": "public", "return": "AvroTableCreateDescriptor", "signature": "AvroTableCreateDescriptor convert(TableCreateDescriptor descriptor)", "full_signature": "public AvroTableCreateDescriptor convert(TableCreateDescriptor descriptor)", "class_method_signature": "AvroConverter.convert(TableCreateDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(AvroTableCreateDescriptor avroDescriptor)", "modifiers": "public", "return": "TableCreateDescriptor", "signature": "TableCreateDescriptor convert(AvroTableCreateDescriptor avroDescriptor)", "full_signature": "public TableCreateDescriptor convert(AvroTableCreateDescriptor avroDescriptor)", "class_method_signature": "AvroConverter.convert(AvroTableCreateDescriptor avroDescriptor)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(CompareOp op)", "modifiers": "public", "return": "AvroCompareOp", "signature": "AvroCompareOp convert(CompareOp op)", "full_signature": "public AvroCompareOp convert(CompareOp op)", "class_method_signature": "AvroConverter.convert(CompareOp op)", "testcase": false, "constructor": false}, {"identifier": "convertAvroRecordId", "parameters": "(ByteBuffer recordId, LRepository repository)", "modifiers": "public", "return": "RecordId", "signature": "RecordId convertAvroRecordId(ByteBuffer recordId, LRepository repository)", "full_signature": "public RecordId convertAvroRecordId(ByteBuffer recordId, LRepository repository)", "class_method_signature": "AvroConverter.convertAvroRecordId(ByteBuffer recordId, LRepository repository)", "testcase": false, "constructor": false}, {"identifier": "convertAvroRecordIds", "parameters": "(List<String> avroRecordIds, LRepository repository)", "modifiers": "public", "return": "Set<RecordId>", "signature": "Set<RecordId> convertAvroRecordIds(List<String> avroRecordIds, LRepository repository)", "full_signature": "public Set<RecordId> convertAvroRecordIds(List<String> avroRecordIds, LRepository repository)", "class_method_signature": "AvroConverter.convertAvroRecordIds(List<String> avroRecordIds, LRepository repository)", "testcase": false, "constructor": false}], "file": "cr/avro-api/src/main/java/org/lilyproject/avro/AvroConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(AvroAuthzContext authzContext)", "modifiers": "public", "return": "AuthorizationContext", "body": "public AuthorizationContext convert(AvroAuthzContext authzContext) {\n        if (authzContext == null)\n            return null;\n\n        Set<String> roles = new HashSet<String>();\n        for (String role : authzContext.getRoles()) {\n            roles.add(role);\n        }\n\n        return new AuthorizationContext(authzContext.getName(), authzContext.getTenant(), roles);\n    }", "signature": "AuthorizationContext convert(AvroAuthzContext authzContext)", "full_signature": "public AuthorizationContext convert(AvroAuthzContext authzContext)", "class_method_signature": "AvroConverter.convert(AvroAuthzContext authzContext)", "testcase": false, "constructor": false, "invocations": ["getRoles", "add", "getName", "getTenant"]}, "repository": {"repo_id": 4546290, "url": "https://github.com/NGDATA/lilyproject", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 82, "size": 20489, "license": "licensed"}}