{"test_class": {"identifier": "ForEachNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final QName USERDEFINED_FIELDTYPE_NAME = new QName(\"_namespace_\", \"_fieldtypename_\");", "modifier": "private static final", "type": "QName", "declarator": "USERDEFINED_FIELDTYPE_NAME = new QName(\"_namespace_\", \"_fieldtypename_\")", "var_name": "USERDEFINED_FIELDTYPE_NAME"}, {"original_string": "private static final QName SYSTEM_FIELDTYPE_NAME = new QName(\"_system_\", \"_systemfieldtypename_\");", "modifier": "private static final", "type": "QName", "declarator": "SYSTEM_FIELDTYPE_NAME = new QName(\"_system_\", \"_systemfieldtypename_\")", "var_name": "SYSTEM_FIELDTYPE_NAME"}, {"original_string": "private static final SchemaId USERDEFINED_FIELDTYPE_ID = mock(SchemaId.class);", "modifier": "private static final", "type": "SchemaId", "declarator": "USERDEFINED_FIELDTYPE_ID = mock(SchemaId.class)", "var_name": "USERDEFINED_FIELDTYPE_ID"}, {"original_string": "private static final SchemaId SYSTEM_FIELDTYPE_ID = mock(SchemaId.class);", "modifier": "private static final", "type": "SchemaId", "declarator": "SYSTEM_FIELDTYPE_ID = mock(SchemaId.class)", "var_name": "SYSTEM_FIELDTYPE_ID"}, {"original_string": "private SystemFields systemFields;", "modifier": "private", "type": "SystemFields", "declarator": "systemFields", "var_name": "systemFields"}, {"original_string": "private IndexUpdateBuilder indexUpdateBuilder;", "modifier": "private", "type": "IndexUpdateBuilder", "declarator": "indexUpdateBuilder", "var_name": "indexUpdateBuilder"}, {"original_string": "private RecordContext recordContext;", "modifier": "private", "type": "RecordContext", "declarator": "recordContext", "var_name": "recordContext"}, {"original_string": "private Record recordContextRecord;", "modifier": "private", "type": "Record", "declarator": "recordContextRecord", "var_name": "recordContextRecord"}, {"original_string": "private FieldType systemFieldType;", "modifier": "private", "type": "FieldType", "declarator": "systemFieldType", "var_name": "systemFieldType"}, {"original_string": "private FieldType userDefinedFieldType;", "modifier": "private", "type": "FieldType", "declarator": "userDefinedFieldType", "var_name": "userDefinedFieldType"}], "file": "cr/indexer/model/src/test/java/org/lilyproject/indexer/model/indexerconf/ForEachNodeTest.java"}, "test_case": {"identifier": "testCollectIndexUpdate_EmbeddedRecordFieldType_FieldIsNotWithinRecordContextRecord", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectIndexUpdate_EmbeddedRecordFieldType_FieldIsNotWithinRecordContextRecord()\n            throws InterruptedException, RepositoryException, IOException {\n\n        when(recordContextRecord.hasField(USERDEFINED_FIELDTYPE_NAME)).thenReturn(false);\n\n        RecordFieldFollow recordFieldFollow = mock(RecordFieldFollow.class);\n        when(recordFieldFollow.getFieldType()).thenReturn(userDefinedFieldType);\n        ForEachNode forEachNode = new ForEachNode(systemFields, recordFieldFollow);\n\n        forEachNode.collectIndexUpdate(indexUpdateBuilder);\n\n        verify(indexUpdateBuilder).addDependency(USERDEFINED_FIELDTYPE_ID);\n        verify(recordFieldFollow, never()).follow(eq(indexUpdateBuilder), any(FollowCallback.class));\n    }", "signature": "void testCollectIndexUpdate_EmbeddedRecordFieldType_FieldIsNotWithinRecordContextRecord()", "full_signature": "@Test public void testCollectIndexUpdate_EmbeddedRecordFieldType_FieldIsNotWithinRecordContextRecord()", "class_method_signature": "ForEachNodeTest.testCollectIndexUpdate_EmbeddedRecordFieldType_FieldIsNotWithinRecordContextRecord()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "hasField", "mock", "thenReturn", "when", "getFieldType", "collectIndexUpdate", "addDependency", "verify", "follow", "verify", "never", "eq", "any"]}, "focal_class": {"identifier": "ForEachNode", "superclass": "extends ContainerMappingNode", "interfaces": "", "fields": [{"original_string": "private final SystemFields systemFields;", "modifier": "private final", "type": "SystemFields", "declarator": "systemFields", "var_name": "systemFields"}, {"original_string": "private final Follow follow;", "modifier": "private final", "type": "Follow", "declarator": "follow", "var_name": "follow"}, {"original_string": "private final FieldType fieldType;", "modifier": "private final", "type": "FieldType", "declarator": "fieldType", "var_name": "fieldType"}], "methods": [{"identifier": "ForEachNode", "parameters": "(SystemFields systemFields, Follow follow)", "modifiers": "public", "return": "", "signature": " ForEachNode(SystemFields systemFields, Follow follow)", "full_signature": "public  ForEachNode(SystemFields systemFields, Follow follow)", "class_method_signature": "ForEachNode.ForEachNode(SystemFields systemFields, Follow follow)", "testcase": false, "constructor": true}, {"identifier": "getFollow", "parameters": "()", "modifiers": "public", "return": "Follow", "signature": "Follow getFollow()", "full_signature": "public Follow getFollow()", "class_method_signature": "ForEachNode.getFollow()", "testcase": false, "constructor": false}, {"identifier": "isIndexAffectedByUpdate", "parameters": "(VTaggedRecord vtRecord, Scope scope)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isIndexAffectedByUpdate(VTaggedRecord vtRecord, Scope scope)", "full_signature": "@Override public boolean isIndexAffectedByUpdate(VTaggedRecord vtRecord, Scope scope)", "class_method_signature": "ForEachNode.isIndexAffectedByUpdate(VTaggedRecord vtRecord, Scope scope)", "testcase": false, "constructor": false}, {"identifier": "collectIndexUpdate", "parameters": "(final IndexUpdateBuilder indexUpdateBuilder)", "modifiers": "@Override public", "return": "void", "signature": "void collectIndexUpdate(final IndexUpdateBuilder indexUpdateBuilder)", "full_signature": "@Override public void collectIndexUpdate(final IndexUpdateBuilder indexUpdateBuilder)", "class_method_signature": "ForEachNode.collectIndexUpdate(final IndexUpdateBuilder indexUpdateBuilder)", "testcase": false, "constructor": false}], "file": "cr/indexer/model/src/main/java/org/lilyproject/indexer/model/indexerconf/ForEachNode.java"}, "focal_method": {"identifier": "collectIndexUpdate", "parameters": "(final IndexUpdateBuilder indexUpdateBuilder)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void collectIndexUpdate(final IndexUpdateBuilder indexUpdateBuilder)\n            throws InterruptedException, IOException, RepositoryException {\n        RecordContext ctx = indexUpdateBuilder.getRecordContext();\n        if (fieldType != null && !systemFields.isSystemField(fieldType.getName())) {\n            indexUpdateBuilder.addDependency(fieldType.getId());\n            if (ctx.record != null && !ctx.record.hasField(fieldType.getName())) {\n                return;\n            }\n        }\n\n        follow.follow(indexUpdateBuilder, new FollowCallback() {\n            @Override\n            public void call() throws RepositoryException, InterruptedException, IOException {\n                ForEachNode.super.collectIndexUpdate(indexUpdateBuilder);\n            }\n        });\n    }", "signature": "void collectIndexUpdate(final IndexUpdateBuilder indexUpdateBuilder)", "full_signature": "@Override public void collectIndexUpdate(final IndexUpdateBuilder indexUpdateBuilder)", "class_method_signature": "ForEachNode.collectIndexUpdate(final IndexUpdateBuilder indexUpdateBuilder)", "testcase": false, "constructor": false, "invocations": ["getRecordContext", "isSystemField", "getName", "addDependency", "getId", "hasField", "getName", "follow", "collectIndexUpdate"]}, "repository": {"repo_id": 4546290, "url": "https://github.com/NGDATA/lilyproject", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 82, "size": 20489, "license": "licensed"}}