{"test_class": {"identifier": "BoundedArrayListTest", "superclass": "", "interfaces": "", "fields": [], "file": "proxy/src/test/java/net/md_5/bungee/util/BoundedArrayListTest.java"}, "test_case": {"identifier": "testBadAdd1", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testBadAdd1() throws Exception\n    {\n        BoundedArrayList<Object> list = new BoundedArrayList<>( 1 );\n        list.add( new Object() );\n        list.add( 0, new Object() );\n    }", "signature": "void testBadAdd1()", "full_signature": "@Test(expected = IllegalStateException.class) public void testBadAdd1()", "class_method_signature": "BoundedArrayListTest.testBadAdd1()", "testcase": true, "constructor": false, "invocations": ["add", "add"]}, "focal_class": {"identifier": "BoundedArrayList", "superclass": "extends ArrayList<E>", "interfaces": "", "fields": [{"original_string": "private final int maxSize;", "modifier": "private final", "type": "int", "declarator": "maxSize", "var_name": "maxSize"}], "methods": [{"identifier": "BoundedArrayList", "parameters": "(int maxSize)", "modifiers": "public", "return": "", "signature": " BoundedArrayList(int maxSize)", "full_signature": "public  BoundedArrayList(int maxSize)", "class_method_signature": "BoundedArrayList.BoundedArrayList(int maxSize)", "testcase": false, "constructor": true}, {"identifier": "checkSize", "parameters": "(int increment)", "modifiers": "private", "return": "void", "signature": "void checkSize(int increment)", "full_signature": "private void checkSize(int increment)", "class_method_signature": "BoundedArrayList.checkSize(int increment)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(E e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(E e)", "full_signature": "@Override public boolean add(E e)", "class_method_signature": "BoundedArrayList.add(E e)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int index, E element)", "modifiers": "@Override public", "return": "void", "signature": "void add(int index, E element)", "full_signature": "@Override public void add(int index, E element)", "class_method_signature": "BoundedArrayList.add(int index, E element)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends E> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(Collection<? extends E> c)", "full_signature": "@Override public boolean addAll(Collection<? extends E> c)", "class_method_signature": "BoundedArrayList.addAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(int index, Collection<? extends E> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(int index, Collection<? extends E> c)", "full_signature": "@Override public boolean addAll(int index, Collection<? extends E> c)", "class_method_signature": "BoundedArrayList.addAll(int index, Collection<? extends E> c)", "testcase": false, "constructor": false}], "file": "proxy/src/main/java/net/md_5/bungee/util/BoundedArrayList.java"}, "focal_method": {"identifier": "add", "parameters": "(E e)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean add(E e)\n    {\n        checkSize( 1 );\n        return super.add( e );\n    }", "signature": "boolean add(E e)", "full_signature": "@Override public boolean add(E e)", "class_method_signature": "BoundedArrayList.add(E e)", "testcase": false, "constructor": false, "invocations": ["checkSize", "add"]}, "repository": {"repo_id": 6084210, "url": "https://github.com/SpigotMC/BungeeCord", "stars": 806, "created": "10/5/2012 1:01:56 AM +00:00", "updates": "2020-01-27T11:17:46+00:00", "fork": "False", "license": "licensed"}}