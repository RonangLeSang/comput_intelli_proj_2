{"test_class": {"identifier": "MessageParserTest", "superclass": "extends AbstractJSkatTest", "interfaces": "", "fields": [], "file": "jskat-base/src/test/java/org/jskat/control/iss/MessageParserTest.java"}, "test_case": {"identifier": "testParseTableUpdateNullOuvertGame_JSkatUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseTableUpdateNullOuvertGame_JSkatUser() {\n\n        final String ouvertGame = \"table .0 foo play 1 NO.DJ.SA.D8.D9.DQ.H8.HT.HQ.C7.C8.CK.CA 237.6 225.8 237.7\";\n        final StringTokenizer token = new StringTokenizer(ouvertGame);\n        token.nextToken(); // table\n        token.nextToken(); // .1\n        final String creator = token.nextToken(); // foo\n        token.nextToken(); // play\n        final List<String> detailParams = new ArrayList<>();\n        while (token.hasMoreTokens()) {\n            detailParams.add(token.nextToken());\n        }\n\n        final MoveInformation moveInfo = MessageParser.getMoveInformation(detailParams);\n\n        assertThat(moveInfo.getType()).isEqualTo(MoveType.GAME_ANNOUNCEMENT);\n\n        final GameAnnouncement announcement = moveInfo.getGameAnnouncement();\n        assertThat(announcement.getGameType()).isEqualTo(GameType.NULL);\n        assertTrue(announcement.isOuvert());\n\n        assertThat(moveInfo.getOuvertCards())\n                .containsExactlyInAnyOrder(\n                        Card.D8, Card.D9, Card.DQ, Card.H8, Card.HT, Card.HQ, Card.C7, Card.C8, Card.CK, Card.CA);\n    }", "signature": "void testParseTableUpdateNullOuvertGame_JSkatUser()", "full_signature": "@Test public void testParseTableUpdateNullOuvertGame_JSkatUser()", "class_method_signature": "MessageParserTest.testParseTableUpdateNullOuvertGame_JSkatUser()", "testcase": true, "constructor": false, "invocations": ["nextToken", "nextToken", "nextToken", "nextToken", "hasMoreTokens", "add", "nextToken", "getMoveInformation", "isEqualTo", "assertThat", "getType", "getGameAnnouncement", "isEqualTo", "assertThat", "getGameType", "assertTrue", "isOuvert", "containsExactlyInAnyOrder", "assertThat", "getOuvertCards"]}, "focal_class": {"identifier": "MessageParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(MessageParser.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MessageParser.class)", "var_name": "log"}], "methods": [{"identifier": "getTableStatus", "parameters": "(final String loginName,\n\t\t\tfinal List<String> params)", "modifiers": "static", "return": "TablePanelStatus", "signature": "TablePanelStatus getTableStatus(final String loginName,\n\t\t\tfinal List<String> params)", "full_signature": "static TablePanelStatus getTableStatus(final String loginName,\n\t\t\tfinal List<String> params)", "class_method_signature": "MessageParser.getTableStatus(final String loginName,\n\t\t\tfinal List<String> params)", "testcase": false, "constructor": false}, {"identifier": "parsePlayerStatus", "parameters": "(final List<String> params)", "modifiers": "private static", "return": "PlayerStatus", "signature": "PlayerStatus parsePlayerStatus(final List<String> params)", "full_signature": "private static PlayerStatus parsePlayerStatus(final List<String> params)", "class_method_signature": "MessageParser.parsePlayerStatus(final List<String> params)", "testcase": false, "constructor": false}, {"identifier": "getGameStartStatus", "parameters": "(final String loginName,\n\t\t\tfinal List<String> params)", "modifiers": "static", "return": "GameStartInformation", "signature": "GameStartInformation getGameStartStatus(final String loginName,\n\t\t\tfinal List<String> params)", "full_signature": "static GameStartInformation getGameStartStatus(final String loginName,\n\t\t\tfinal List<String> params)", "class_method_signature": "MessageParser.getGameStartStatus(final String loginName,\n\t\t\tfinal List<String> params)", "testcase": false, "constructor": false}, {"identifier": "getMoveInformation", "parameters": "(final List<String> params)", "modifiers": "static", "return": "MoveInformation", "signature": "MoveInformation getMoveInformation(final List<String> params)", "full_signature": "static MoveInformation getMoveInformation(final List<String> params)", "class_method_signature": "MessageParser.getMoveInformation(final List<String> params)", "testcase": false, "constructor": false}, {"identifier": "parsePlayerTimes", "parameters": "(final List<String> params,\n\t\t\tfinal MoveInformation info)", "modifiers": "static", "return": "void", "signature": "void parsePlayerTimes(final List<String> params,\n\t\t\tfinal MoveInformation info)", "full_signature": "static void parsePlayerTimes(final List<String> params,\n\t\t\tfinal MoveInformation info)", "class_method_signature": "MessageParser.parsePlayerTimes(final List<String> params,\n\t\t\tfinal MoveInformation info)", "testcase": false, "constructor": false}, {"identifier": "parseSkatCards", "parameters": "(final String move)", "modifiers": "private static", "return": "CardList", "signature": "CardList parseSkatCards(final String move)", "full_signature": "private static CardList parseSkatCards(final String move)", "class_method_signature": "MessageParser.parseSkatCards(final String move)", "testcase": false, "constructor": false}, {"identifier": "getMovePlayer", "parameters": "(final String movePlayer,\n\t\t\tfinal MoveInformation info)", "modifiers": "private static", "return": "void", "signature": "void getMovePlayer(final String movePlayer,\n\t\t\tfinal MoveInformation info)", "full_signature": "private static void getMovePlayer(final String movePlayer,\n\t\t\tfinal MoveInformation info)", "class_method_signature": "MessageParser.getMovePlayer(final String movePlayer,\n\t\t\tfinal MoveInformation info)", "testcase": false, "constructor": false}, {"identifier": "parseGameAnnoucement", "parameters": "(\n\t\t\tfinal MoveInformation info, final String move)", "modifiers": "private static", "return": "GameAnnouncement", "signature": "GameAnnouncement parseGameAnnoucement(\n\t\t\tfinal MoveInformation info, final String move)", "full_signature": "private static GameAnnouncement parseGameAnnoucement(\n\t\t\tfinal MoveInformation info, final String move)", "class_method_signature": "MessageParser.parseGameAnnoucement(\n\t\t\tfinal MoveInformation info, final String move)", "testcase": false, "constructor": false}, {"identifier": "parseCardDeal", "parameters": "(final String move)", "modifiers": "private static", "return": "List<CardList>", "signature": "List<CardList> parseCardDeal(final String move)", "full_signature": "private static List<CardList> parseCardDeal(final String move)", "class_method_signature": "MessageParser.parseCardDeal(final String move)", "testcase": false, "constructor": false}, {"identifier": "parseCardDealFromISSMessage", "parameters": "(final String move)", "modifiers": "private static", "return": "List<CardList>", "signature": "List<CardList> parseCardDealFromISSMessage(final String move)", "full_signature": "private static List<CardList> parseCardDealFromISSMessage(final String move)", "class_method_signature": "MessageParser.parseCardDealFromISSMessage(final String move)", "testcase": false, "constructor": false}, {"identifier": "parseCardDealFromSummary", "parameters": "(final String move)", "modifiers": "private static", "return": "List<CardList>", "signature": "List<CardList> parseCardDealFromSummary(final String move)", "full_signature": "private static List<CardList> parseCardDealFromSummary(final String move)", "class_method_signature": "MessageParser.parseCardDealFromSummary(final String move)", "testcase": false, "constructor": false}, {"identifier": "parseHand", "parameters": "(final String hand)", "modifiers": "private static", "return": "CardList", "signature": "CardList parseHand(final String hand)", "full_signature": "private static CardList parseHand(final String hand)", "class_method_signature": "MessageParser.parseHand(final String hand)", "testcase": false, "constructor": false}, {"identifier": "parseTimeOut", "parameters": "(final String timeOut)", "modifiers": "private static", "return": "Player", "signature": "Player parseTimeOut(final String timeOut)", "full_signature": "private static Player parseTimeOut(final String timeOut)", "class_method_signature": "MessageParser.parseTimeOut(final String timeOut)", "testcase": false, "constructor": false}, {"identifier": "parseLeaveTable", "parameters": "(final String leaveTable)", "modifiers": "private static", "return": "Player", "signature": "Player parseLeaveTable(final String leaveTable)", "full_signature": "private static Player parseLeaveTable(final String leaveTable)", "class_method_signature": "MessageParser.parseLeaveTable(final String leaveTable)", "testcase": false, "constructor": false}, {"identifier": "extractPlayer", "parameters": "(final String playerAtLastCharacter)", "modifiers": "private static", "return": "Player", "signature": "Player extractPlayer(final String playerAtLastCharacter)", "full_signature": "private static Player extractPlayer(final String playerAtLastCharacter)", "class_method_signature": "MessageParser.extractPlayer(final String playerAtLastCharacter)", "testcase": false, "constructor": false}, {"identifier": "parseGameSummary", "parameters": "(final String gameSummary)", "modifiers": "static", "return": "SkatGameData", "signature": "SkatGameData parseGameSummary(final String gameSummary)", "full_signature": "static SkatGameData parseGameSummary(final String gameSummary)", "class_method_signature": "MessageParser.parseGameSummary(final String gameSummary)", "testcase": false, "constructor": false}, {"identifier": "parseSummaryPart", "parameters": "(final SkatGameData result,\n\t\t\tfinal String summaryPartMarker, final String summaryPart)", "modifiers": "private static", "return": "void", "signature": "void parseSummaryPart(final SkatGameData result,\n\t\t\tfinal String summaryPartMarker, final String summaryPart)", "full_signature": "private static void parseSummaryPart(final SkatGameData result,\n\t\t\tfinal String summaryPartMarker, final String summaryPart)", "class_method_signature": "MessageParser.parseSummaryPart(final SkatGameData result,\n\t\t\tfinal String summaryPartMarker, final String summaryPart)", "testcase": false, "constructor": false}, {"identifier": "parseMoves", "parameters": "(final SkatGameData result,\n\t\t\tfinal String summaryPart)", "modifiers": "private static", "return": "void", "signature": "void parseMoves(final SkatGameData result,\n\t\t\tfinal String summaryPart)", "full_signature": "private static void parseMoves(final SkatGameData result,\n\t\t\tfinal String summaryPart)", "class_method_signature": "MessageParser.parseMoves(final SkatGameData result,\n\t\t\tfinal String summaryPart)", "testcase": false, "constructor": false}, {"identifier": "parseGameResult", "parameters": "(final SkatGameData result,\n\t\t\tfinal String summaryPart)", "modifiers": "private static", "return": "void", "signature": "void parseGameResult(final SkatGameData result,\n\t\t\tfinal String summaryPart)", "full_signature": "private static void parseGameResult(final SkatGameData result,\n\t\t\tfinal String summaryPart)", "class_method_signature": "MessageParser.parseGameResult(final SkatGameData result,\n\t\t\tfinal String summaryPart)", "testcase": false, "constructor": false}, {"identifier": "parseResultToken", "parameters": "(final SkatGameData gameData,\n\t\t\tfinal String token)", "modifiers": "private static", "return": "void", "signature": "void parseResultToken(final SkatGameData gameData,\n\t\t\tfinal String token)", "full_signature": "private static void parseResultToken(final SkatGameData gameData,\n\t\t\tfinal String token)", "class_method_signature": "MessageParser.parseResultToken(final SkatGameData gameData,\n\t\t\tfinal String token)", "testcase": false, "constructor": false}, {"identifier": "parseDeclarerToken", "parameters": "(final SkatGameData result,\n\t\t\tfinal String token)", "modifiers": "private static", "return": "void", "signature": "void parseDeclarerToken(final SkatGameData result,\n\t\t\tfinal String token)", "full_signature": "private static void parseDeclarerToken(final SkatGameData result,\n\t\t\tfinal String token)", "class_method_signature": "MessageParser.parseDeclarerToken(final SkatGameData result,\n\t\t\tfinal String token)", "testcase": false, "constructor": false}, {"identifier": "getTableChatMessage", "parameters": "(final String tableName,\n\t\t\tfinal List<String> detailParams)", "modifiers": "static", "return": "ChatMessage", "signature": "ChatMessage getTableChatMessage(final String tableName,\n\t\t\tfinal List<String> detailParams)", "full_signature": "static ChatMessage getTableChatMessage(final String tableName,\n\t\t\tfinal List<String> detailParams)", "class_method_signature": "MessageParser.getTableChatMessage(final String tableName,\n\t\t\tfinal List<String> detailParams)", "testcase": false, "constructor": false}], "file": "jskat-base/src/main/java/org/jskat/control/iss/MessageParser.java"}, "focal_method": {"identifier": "getMoveInformation", "parameters": "(final List<String> params)", "modifiers": "static", "return": "MoveInformation", "body": "static MoveInformation getMoveInformation(final List<String> params) {\n\n\t\tfinal MoveInformation info = new MoveInformation();\n\n\t\tgetMovePlayer(params.get(0), info);\n\n\t\t// FIXME Unhandled moves\n\t\tfinal String move = params.get(1);\n\t\tlog.debug(\"Move: \" + move); //$NON-NLS-1$\n\t\tif (\"y\".equals(move)) { //$NON-NLS-1$\n\t\t\t// holding bid move\n\t\t\tinfo.setType(MoveType.HOLD_BID);\n\t\t} else if (\"p\".equals(move)) { //$NON-NLS-1$\n\t\t\t// pass move\n\t\t\tinfo.setType(MoveType.PASS);\n\t\t} else if (\"s\".equals(move)) { //$NON-NLS-1$\n\t\t\t// skat request move\n\t\t\tinfo.setType(MoveType.SKAT_REQUEST);\n\t\t} else if (\"??.??\".equals(move)) { //$NON-NLS-1$\n\t\t\t// hidden skat given to a player\n\t\t\tinfo.setType(MoveType.PICK_UP_SKAT);\n\t\t} else if (move.startsWith(\"TI.\")) { //$NON-NLS-1$\n\t\t\t// time out for player\n\t\t\tinfo.setType(MoveType.TIME_OUT);\n\t\t\tinfo.setTimeOutPlayer(parseTimeOut(move));\n\t\t} else if (move.equals(\"RE\")) { //$NON-NLS-1$\n\t\t\t// resigning of player\n\t\t\tinfo.setType(MoveType.RESIGN);\n\t\t} else if (move.startsWith(\"SC\")) { //$NON-NLS-1$\n\t\t\t// declarer shows cards\n\t\t\tinfo.setType(MoveType.SHOW_CARDS);\n\t\t\tif (move.length() > 2) {\n\t\t\t\t// declarer cards follow, SC could also stand allone\n\t\t\t\tinfo.setOuvertCards(parseSkatCards(move.substring(move\n\t\t\t\t\t\t.indexOf(\".\") + 1))); //$NON-NLS-1$\n\t\t\t}\n\t\t} else if (move.startsWith(\"LE.\")) { //$NON-NLS-1$\n\t\t\t// one player left the table during the game\n\t\t\tinfo.setType(MoveType.LEAVE_TABLE);\n\t\t\tinfo.setLeavingPlayer(parseLeaveTable(move));\n\t\t} else {\n\t\t\t// extensive parsing needed\n\n\t\t\t// test card move\n\t\t\tfinal Card card = Card.getCardFromString(move);\n\t\t\tif (card != null) {\n\t\t\t\t// card play move\n\t\t\t\tinfo.setType(MoveType.CARD_PLAY);\n\t\t\t\tinfo.setCard(card);\n\t\t\t} else {\n\t\t\t\t// card parsing failed\n\n\t\t\t\t// test bidding\n\t\t\t\tint bid = -1;\n\t\t\t\ttry {\n\n\t\t\t\t\tbid = Integer.parseInt(move);\n\n\t\t\t\t} catch (final NumberFormatException e) {\n\n\t\t\t\t\tbid = -1;\n\t\t\t\t}\n\t\t\t\tif (bid > -1) {\n\t\t\t\t\t// bidding\n\t\t\t\t\tinfo.setType(MoveType.BID);\n\t\t\t\t\tinfo.setBidValue(Integer.parseInt(move));\n\t\t\t\t} else {\n\n\t\t\t\t\tif (move.length() == 95) {\n\t\t\t\t\t\t// card dealing\n\t\t\t\t\t\tinfo.setType(MoveType.DEAL);\n\t\t\t\t\t\tinfo.setDealCards(parseCardDeal(move));\n\t\t\t\t\t} else if (move.length() == 5) {\n\t\t\t\t\t\t// open skat given to a player\n\t\t\t\t\t\tinfo.setType(MoveType.PICK_UP_SKAT);\n\t\t\t\t\t\tinfo.setSkat(parseSkatCards(move));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// game announcement\n\t\t\t\t\t\tinfo.setType(MoveType.GAME_ANNOUNCEMENT);\n\t\t\t\t\t\tparseGameAnnoucement(info, move);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn info;\n\t}", "signature": "MoveInformation getMoveInformation(final List<String> params)", "full_signature": "static MoveInformation getMoveInformation(final List<String> params)", "class_method_signature": "MessageParser.getMoveInformation(final List<String> params)", "testcase": false, "constructor": false, "invocations": ["getMovePlayer", "get", "get", "debug", "equals", "setType", "equals", "setType", "equals", "setType", "equals", "setType", "startsWith", "setType", "setTimeOutPlayer", "parseTimeOut", "equals", "setType", "startsWith", "setType", "length", "setOuvertCards", "parseSkatCards", "substring", "indexOf", "startsWith", "setType", "setLeavingPlayer", "parseLeaveTable", "getCardFromString", "setType", "setCard", "parseInt", "setType", "setBidValue", "parseInt", "length", "setType", "setDealCards", "parseCardDeal", "length", "setType", "setSkat", "parseSkatCards", "setType", "parseGameAnnoucement"]}, "repository": {"repo_id": 11219096, "url": "https://github.com/b0n541/jskat-multimodule", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 12, "size": 83207, "license": "licensed"}}