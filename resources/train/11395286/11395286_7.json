{"test_class": {"identifier": "ProgressHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "clodhopper-core/src/test/java/org/battelle/clodhopper/task/ProgressHandlerTest.java"}, "test_case": {"identifier": "testPostIndeterminate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPostIndeterminate() throws InterruptedException {\n\n        final int loops = 10;\n        \n        Task<Void> task = new AbstractTask<Void> () {\n            @Override\n            protected Void doTask() throws Exception {\n                ProgressHandler ph = new ProgressHandler(this, 0.0, 1.0);\n                ph.postBegin();\n                for (int i=0; i<loops; i++) {\n                    ph.postIndeterminate();\n                }\n                ph.postEnd();\n                return null;\n            }\n            @Override\n            public String taskName() {\n                return \"testPostIndeterminate() task\";\n            }\n        };\n        \n        final AtomicInteger numIndeterminates = new AtomicInteger();\n        task.addTaskListener(new TaskAdapter() {\n           @Override\n           public void taskProgress(TaskEvent evt) {\n               if (evt.getProgress() == -1.0) {\n                    numIndeterminates.incrementAndGet();\n               }\n           }\n        });\n        \n        Thread t = new Thread(task);\n        t.start();\n        t.join();\n        \n        // Should've only gotten 1 even though there were 10 loops! \n        assertThat(numIndeterminates.get(), is(equalTo(1)));\n    }", "signature": "void testPostIndeterminate()", "full_signature": "@Test public void testPostIndeterminate()", "class_method_signature": "ProgressHandlerTest.testPostIndeterminate()", "testcase": true, "constructor": false, "invocations": ["postBegin", "postIndeterminate", "postEnd", "addTaskListener", "getProgress", "incrementAndGet", "start", "join", "assertThat", "get", "is", "equalTo"]}, "focal_class": {"identifier": "ProgressHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double DEFAULT_START_VALUE = 0.0;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_START_VALUE = 0.0", "var_name": "DEFAULT_START_VALUE"}, {"original_string": "public static final double DEFAULT_END_VALUE = 1.0;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_END_VALUE = 1.0", "var_name": "DEFAULT_END_VALUE"}, {"original_string": "public static final double DEFAULT_MIN_PROGRESS_INC = 0.01;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_MIN_PROGRESS_INC = 0.01", "var_name": "DEFAULT_MIN_PROGRESS_INC"}, {"original_string": "public static final long DEFAULT_MIN_TIME_INC = 500L;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_MIN_TIME_INC = 500L", "var_name": "DEFAULT_MIN_TIME_INC"}, {"original_string": "AbstractTask<?> task;", "modifier": "", "type": "AbstractTask<?>", "declarator": "task", "var_name": "task"}, {"original_string": "Step rootStep;", "modifier": "", "type": "Step", "declarator": "rootStep", "var_name": "rootStep"}, {"original_string": "Step currentStep;", "modifier": "", "type": "Step", "declarator": "currentStep", "var_name": "currentStep"}, {"original_string": "double lastProgress = -Double.MAX_VALUE;", "modifier": "", "type": "double", "declarator": "lastProgress = -Double.MAX_VALUE", "var_name": "lastProgress"}, {"original_string": "long lastTime;", "modifier": "", "type": "long", "declarator": "lastTime", "var_name": "lastTime"}, {"original_string": "double minProgressInc = DEFAULT_MIN_PROGRESS_INC;", "modifier": "", "type": "double", "declarator": "minProgressInc = DEFAULT_MIN_PROGRESS_INC", "var_name": "minProgressInc"}, {"original_string": "long minTimeInc = DEFAULT_MIN_TIME_INC;", "modifier": "", "type": "long", "declarator": "minTimeInc = DEFAULT_MIN_TIME_INC", "var_name": "minTimeInc"}], "methods": [{"identifier": "ProgressHandler", "parameters": "(AbstractTask<?> t,\n            double begin,\n            double end,\n            int steps)", "modifiers": "public", "return": "", "signature": " ProgressHandler(AbstractTask<?> t,\n            double begin,\n            double end,\n            int steps)", "full_signature": "public  ProgressHandler(AbstractTask<?> t,\n            double begin,\n            double end,\n            int steps)", "class_method_signature": "ProgressHandler.ProgressHandler(AbstractTask<?> t,\n            double begin,\n            double end,\n            int steps)", "testcase": false, "constructor": true}, {"identifier": "ProgressHandler", "parameters": "(AbstractTask<?> t, int steps)", "modifiers": "public", "return": "", "signature": " ProgressHandler(AbstractTask<?> t, int steps)", "full_signature": "public  ProgressHandler(AbstractTask<?> t, int steps)", "class_method_signature": "ProgressHandler.ProgressHandler(AbstractTask<?> t, int steps)", "testcase": false, "constructor": true}, {"identifier": "ProgressHandler", "parameters": "(final AbstractTask<?> task,\n        final double begin, \n        final double end)", "modifiers": "public", "return": "", "signature": " ProgressHandler(final AbstractTask<?> task,\n        final double begin, \n        final double end)", "full_signature": "public  ProgressHandler(final AbstractTask<?> task,\n        final double begin, \n        final double end)", "class_method_signature": "ProgressHandler.ProgressHandler(final AbstractTask<?> task,\n        final double begin, \n        final double end)", "testcase": false, "constructor": true}, {"identifier": "ProgressHandler", "parameters": "(AbstractTask<?> t)", "modifiers": "public", "return": "", "signature": " ProgressHandler(AbstractTask<?> t)", "full_signature": "public  ProgressHandler(AbstractTask<?> t)", "class_method_signature": "ProgressHandler.ProgressHandler(AbstractTask<?> t)", "testcase": false, "constructor": true}, {"identifier": "setMinProgressIncrement", "parameters": "(final double minInc)", "modifiers": "public", "return": "void", "signature": "void setMinProgressIncrement(final double minInc)", "full_signature": "public void setMinProgressIncrement(final double minInc)", "class_method_signature": "ProgressHandler.setMinProgressIncrement(final double minInc)", "testcase": false, "constructor": false}, {"identifier": "setMinTimeIncrement", "parameters": "(final long ms)", "modifiers": "public", "return": "void", "signature": "void setMinTimeIncrement(final long ms)", "full_signature": "public void setMinTimeIncrement(final long ms)", "class_method_signature": "ProgressHandler.setMinTimeIncrement(final long ms)", "testcase": false, "constructor": false}, {"identifier": "postMessage", "parameters": "(final String msg)", "modifiers": "public", "return": "void", "signature": "void postMessage(final String msg)", "full_signature": "public void postMessage(final String msg)", "class_method_signature": "ProgressHandler.postMessage(final String msg)", "testcase": false, "constructor": false}, {"identifier": "postValue", "parameters": "(final double value, final boolean force)", "modifiers": "private", "return": "void", "signature": "void postValue(final double value, final boolean force)", "full_signature": "private void postValue(final double value, final boolean force)", "class_method_signature": "ProgressHandler.postValue(final double value, final boolean force)", "testcase": false, "constructor": false}, {"identifier": "postValue", "parameters": "(final double value)", "modifiers": "private", "return": "void", "signature": "void postValue(final double value)", "full_signature": "private void postValue(final double value)", "class_method_signature": "ProgressHandler.postValue(final double value)", "testcase": false, "constructor": false}, {"identifier": "okToPost", "parameters": "(final double progress)", "modifiers": "private", "return": "boolean", "signature": "boolean okToPost(final double progress)", "full_signature": "private boolean okToPost(final double progress)", "class_method_signature": "ProgressHandler.okToPost(final double progress)", "testcase": false, "constructor": false}, {"identifier": "postFraction", "parameters": "(final double fraction)", "modifiers": "public", "return": "void", "signature": "void postFraction(final double fraction)", "full_signature": "public void postFraction(final double fraction)", "class_method_signature": "ProgressHandler.postFraction(final double fraction)", "testcase": false, "constructor": false}, {"identifier": "postStep", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void postStep()", "full_signature": "public void postStep()", "class_method_signature": "ProgressHandler.postStep()", "testcase": false, "constructor": false}, {"identifier": "postSteps", "parameters": "(final int steps)", "modifiers": "public", "return": "void", "signature": "void postSteps(final int steps)", "full_signature": "public void postSteps(final int steps)", "class_method_signature": "ProgressHandler.postSteps(final int steps)", "testcase": false, "constructor": false}, {"identifier": "postEnd", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void postEnd()", "full_signature": "public void postEnd()", "class_method_signature": "ProgressHandler.postEnd()", "testcase": false, "constructor": false}, {"identifier": "postIndeterminate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void postIndeterminate()", "full_signature": "public void postIndeterminate()", "class_method_signature": "ProgressHandler.postIndeterminate()", "testcase": false, "constructor": false}, {"identifier": "subsection", "parameters": "(final double fraction)", "modifiers": "public", "return": "void", "signature": "void subsection(final double fraction)", "full_signature": "public void subsection(final double fraction)", "class_method_signature": "ProgressHandler.subsection(final double fraction)", "testcase": false, "constructor": false}, {"identifier": "subsection", "parameters": "(final double fraction, final int steps)", "modifiers": "public", "return": "void", "signature": "void subsection(final double fraction, final int steps)", "full_signature": "public void subsection(final double fraction, final int steps)", "class_method_signature": "ProgressHandler.subsection(final double fraction, final int steps)", "testcase": false, "constructor": false}, {"identifier": "subsection", "parameters": "(final int steps)", "modifiers": "public", "return": "void", "signature": "void subsection(final int steps)", "full_signature": "public void subsection(final int steps)", "class_method_signature": "ProgressHandler.subsection(final int steps)", "testcase": false, "constructor": false}, {"identifier": "subsection", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void subsection()", "full_signature": "public void subsection()", "class_method_signature": "ProgressHandler.subsection()", "testcase": false, "constructor": false}, {"identifier": "postBegin", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void postBegin()", "full_signature": "public void postBegin()", "class_method_signature": "ProgressHandler.postBegin()", "testcase": false, "constructor": false}, {"identifier": "postRootEnd", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void postRootEnd()", "full_signature": "private void postRootEnd()", "class_method_signature": "ProgressHandler.postRootEnd()", "testcase": false, "constructor": false}, {"identifier": "getCurrentProgress", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCurrentProgress()", "full_signature": "public double getCurrentProgress()", "class_method_signature": "ProgressHandler.getCurrentProgress()", "testcase": false, "constructor": false}], "file": "clodhopper-core/src/main/java/org/battelle/clodhopper/task/ProgressHandler.java"}, "focal_method": {"identifier": "postIndeterminate", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void postIndeterminate() {\n        postValue(-1.0);\n    }", "signature": "void postIndeterminate()", "full_signature": "public void postIndeterminate()", "class_method_signature": "ProgressHandler.postIndeterminate()", "testcase": false, "constructor": false, "invocations": ["postValue"]}, "repository": {"repo_id": 11395286, "url": "https://github.com/rscarberry-wa/clodhopper", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 4667, "license": "licensed"}}