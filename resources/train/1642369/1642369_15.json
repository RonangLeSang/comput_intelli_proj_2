{"test_class": {"identifier": "HotelSummaryRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@PersistenceContext\n\tEntityManager entityManager;", "modifier": "@PersistenceContext", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}, {"original_string": "@Autowired\n\tprivate HotelSummaryRepository hotelSummaryRepository;", "modifier": "@Autowired\n\tprivate", "type": "HotelSummaryRepository", "declarator": "hotelSummaryRepository", "var_name": "hotelSummaryRepository"}, {"original_string": "private Pageable pageable = new PageRequest(0, 10);", "modifier": "private", "type": "Pageable", "declarator": "pageable = new PageRequest(0, 10)", "var_name": "pageable"}, {"original_string": "private City bath;", "modifier": "private", "type": "City", "declarator": "bath", "var_name": "bath"}, {"original_string": "private City tokyo;", "modifier": "private", "type": "City", "declarator": "tokyo", "var_name": "tokyo"}, {"original_string": "private Hotel bathPriory;", "modifier": "private", "type": "Hotel", "declarator": "bathPriory", "var_name": "bathPriory"}], "file": "springfaces-samples/springfaces-traveladvisor/src/test/java/org/springframework/springfaces/traveladvisor/domain/repository/HotelSummaryRepositoryTest.java"}, "test_case": {"identifier": "shouldFindRatingCounts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldFindRatingCounts() throws Exception {\n\t\tList<RatingCount> ratingCounts = this.hotelSummaryRepository.findRatingCounts(this.bathPriory);\n\t\tassertThat(ratingCounts.get(0).getRating(), is(Rating.EXCELLENT));\n\t\tassertThat(ratingCounts.get(0).getCount(), is(11L));\n\t\tassertThat(ratingCounts.get(1).getRating(), is(Rating.GOOD));\n\t\tassertThat(ratingCounts.get(1).getCount(), is(6L));\n\t\tassertThat(ratingCounts.get(2).getRating(), is(Rating.AVERAGE));\n\t\tassertThat(ratingCounts.get(2).getCount(), is(3L));\n\t\tassertThat(ratingCounts.get(3).getRating(), is(Rating.POOR));\n\t\tassertThat(ratingCounts.get(3).getCount(), is(1L));\n\t\tassertThat(ratingCounts.get(4).getRating(), is(Rating.TERRIBLE));\n\t\tassertThat(ratingCounts.get(4).getCount(), is(1L));\n\t}", "signature": "void shouldFindRatingCounts()", "full_signature": "@Test public void shouldFindRatingCounts()", "class_method_signature": "HotelSummaryRepositoryTest.shouldFindRatingCounts()", "testcase": true, "constructor": false, "invocations": ["findRatingCounts", "assertThat", "getRating", "get", "is", "assertThat", "getCount", "get", "is", "assertThat", "getRating", "get", "is", "assertThat", "getCount", "get", "is", "assertThat", "getRating", "get", "is", "assertThat", "getCount", "get", "is", "assertThat", "getRating", "get", "is", "assertThat", "getCount", "get", "is", "assertThat", "getRating", "get", "is", "assertThat", "getCount", "get", "is"]}, "focal_class": {"identifier": "HotelSummaryRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String AVERAGE_REVIEW_FUNCTION = \"avg(r.rating)\";", "modifier": "private static final", "type": "String", "declarator": "AVERAGE_REVIEW_FUNCTION = \"avg(r.rating)\"", "var_name": "AVERAGE_REVIEW_FUNCTION"}, {"original_string": "private static final String FIND_BY_CITY_QUERY = \"select new \" + HotelSummary.class.getName() + \"(h.city, h.name, \"\n\t\t\t+ AVERAGE_REVIEW_FUNCTION + \") from Hotel h left outer join h.reviews r where h.city = ?1 group by h\";", "modifier": "private static final", "type": "String", "declarator": "FIND_BY_CITY_QUERY = \"select new \" + HotelSummary.class.getName() + \"(h.city, h.name, \"\n\t\t\t+ AVERAGE_REVIEW_FUNCTION + \") from Hotel h left outer join h.reviews r where h.city = ?1 group by h\"", "var_name": "FIND_BY_CITY_QUERY"}, {"original_string": "private static final String FIND_BY_CITY_COUNT_QUERY = \"select count(h) from Hotel h where h.city = ?1\";", "modifier": "private static final", "type": "String", "declarator": "FIND_BY_CITY_COUNT_QUERY = \"select count(h) from Hotel h where h.city = ?1\"", "var_name": "FIND_BY_CITY_COUNT_QUERY"}, {"original_string": "private static final String FIND_RATING_COUNTS_QUERY = \"select new \" + RatingCount.class.getName()\n\t\t\t+ \"(r.rating, count(r)) \" + \"from Review r where r.hotel = ?1 group by r.rating order by r.rating DESC\";", "modifier": "private static final", "type": "String", "declarator": "FIND_RATING_COUNTS_QUERY = \"select new \" + RatingCount.class.getName()\n\t\t\t+ \"(r.rating, count(r)) \" + \"from Review r where r.hotel = ?1 group by r.rating order by r.rating DESC\"", "var_name": "FIND_RATING_COUNTS_QUERY"}, {"original_string": "private EntityManager entityManager;", "modifier": "private", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}], "methods": [{"identifier": "findByCity", "parameters": "(City city, Pageable pageable)", "modifiers": "public", "return": "Page<HotelSummary>", "signature": "Page<HotelSummary> findByCity(City city, Pageable pageable)", "full_signature": "public Page<HotelSummary> findByCity(City city, Pageable pageable)", "class_method_signature": "HotelSummaryRepository.findByCity(City city, Pageable pageable)", "testcase": false, "constructor": false}, {"identifier": "findRatingCounts", "parameters": "(Hotel hotel)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<RatingCount>", "signature": "List<RatingCount> findRatingCounts(Hotel hotel)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<RatingCount> findRatingCounts(Hotel hotel)", "class_method_signature": "HotelSummaryRepository.findRatingCounts(Hotel hotel)", "testcase": false, "constructor": false}, {"identifier": "applySorting", "parameters": "(StringBuilder query, Sort sort)", "modifiers": "private", "return": "void", "signature": "void applySorting(StringBuilder query, Sort sort)", "full_signature": "private void applySorting(StringBuilder query, Sort sort)", "class_method_signature": "HotelSummaryRepository.applySorting(StringBuilder query, Sort sort)", "testcase": false, "constructor": false}, {"identifier": "getAliasedProperty", "parameters": "(String property)", "modifiers": "private", "return": "String", "signature": "String getAliasedProperty(String property)", "full_signature": "private String getAliasedProperty(String property)", "class_method_signature": "HotelSummaryRepository.getAliasedProperty(String property)", "testcase": false, "constructor": false}, {"identifier": "setEntityManager", "parameters": "(EntityManager entityManager)", "modifiers": "@PersistenceContext public", "return": "void", "signature": "void setEntityManager(EntityManager entityManager)", "full_signature": "@PersistenceContext public void setEntityManager(EntityManager entityManager)", "class_method_signature": "HotelSummaryRepository.setEntityManager(EntityManager entityManager)", "testcase": false, "constructor": false}], "file": "springfaces-samples/springfaces-traveladvisor/src/main/java/org/springframework/springfaces/traveladvisor/domain/repository/HotelSummaryRepository.java"}, "focal_method": {"identifier": "findRatingCounts", "parameters": "(Hotel hotel)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<RatingCount>", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic List<RatingCount> findRatingCounts(Hotel hotel) {\n\t\tQuery query = entityManager.createQuery(FIND_RATING_COUNTS_QUERY);\n\t\tquery.setParameter(1, hotel);\n\t\treturn query.getResultList();\n\t}", "signature": "List<RatingCount> findRatingCounts(Hotel hotel)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<RatingCount> findRatingCounts(Hotel hotel)", "class_method_signature": "HotelSummaryRepository.findRatingCounts(Hotel hotel)", "testcase": false, "constructor": false, "invocations": ["createQuery", "setParameter", "getResultList"]}, "repository": {"repo_id": 1642369, "url": "https://github.com/philwebb/springfaces", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 34, "size": 3761, "license": "licensed"}}