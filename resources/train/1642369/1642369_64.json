{"test_class": {"identifier": "DefaultSpringFacesContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ThreadLocal<DefaultSpringFacesContextTest> test = new ThreadLocal<DefaultSpringFacesContextTest>();", "modifier": "private static", "type": "ThreadLocal<DefaultSpringFacesContextTest>", "declarator": "test = new ThreadLocal<DefaultSpringFacesContextTest>()", "var_name": "test"}, {"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private DefaultSpringFacesContext springFacesContext;", "modifier": "private", "type": "DefaultSpringFacesContext", "declarator": "springFacesContext", "var_name": "springFacesContext"}, {"original_string": "@Mock\n\tprivate LifecycleAccessor lifecycleAccessor;", "modifier": "@Mock\n\tprivate", "type": "LifecycleAccessor", "declarator": "lifecycleAccessor", "var_name": "lifecycleAccessor"}, {"original_string": "@Mock\n\tprivate WebApplicationContext webApplicationContext;", "modifier": "@Mock\n\tprivate", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@Mock\n\tprivate HttpServletRequest request;", "modifier": "@Mock\n\tprivate", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n\tprivate HttpServletResponse response;", "modifier": "@Mock\n\tprivate", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n\tprivate Object handler;", "modifier": "@Mock\n\tprivate", "type": "Object", "declarator": "handler", "var_name": "handler"}, {"original_string": "@Mock\n\tprivate FacesContext facesContext;", "modifier": "@Mock\n\tprivate", "type": "FacesContext", "declarator": "facesContext", "var_name": "facesContext"}, {"original_string": "@Mock\n\tprivate ExternalContext externalContext;", "modifier": "@Mock\n\tprivate", "type": "ExternalContext", "declarator": "externalContext", "var_name": "externalContext"}, {"original_string": "@Mock\n\tprivate PartialViewContext partialViewContext;", "modifier": "@Mock\n\tprivate", "type": "PartialViewContext", "declarator": "partialViewContext", "var_name": "partialViewContext"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<FacesContext> facesContextCaptor;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<FacesContext>", "declarator": "facesContextCaptor", "var_name": "facesContextCaptor"}], "file": "springfaces-mvc/src/test/java/org/springframework/springfaces/mvc/servlet/DefaultSpringFacesContextTest.java"}, "test_case": {"identifier": "shouldRenderFacesRenderedView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldRenderFacesRenderedView() throws Exception {\n\t\tFacesRenderedView view = mock(FacesRenderedView.class);\n\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\tthis.springFacesContext.render(view, model);\n\t\tverify(view).render(eq(model), this.facesContextCaptor.capture());\n\t\tassertIsWrappedFacesContext(this.facesContextCaptor.getValue());\n\t}", "signature": "void shouldRenderFacesRenderedView()", "full_signature": "@Test public void shouldRenderFacesRenderedView()", "class_method_signature": "DefaultSpringFacesContextTest.shouldRenderFacesRenderedView()", "testcase": true, "constructor": false, "invocations": ["mock", "render", "render", "verify", "eq", "capture", "assertIsWrappedFacesContext", "getValue"]}, "focal_class": {"identifier": "DefaultSpringFacesContext", "superclass": "extends SpringFacesContext", "interfaces": "", "fields": [{"original_string": "private LifecycleAccessor lifecycleAccessor;", "modifier": "private", "type": "LifecycleAccessor", "declarator": "lifecycleAccessor", "var_name": "lifecycleAccessor"}, {"original_string": "private WebApplicationContext webApplicationContext;", "modifier": "private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "private HttpServletRequest request;", "modifier": "private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private HttpServletResponse response;", "modifier": "private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private Object handler;", "modifier": "private", "type": "Object", "declarator": "handler", "var_name": "handler"}, {"original_string": "private ReferenceCountedFacesContext facesContext = new ReferenceCountedFacesContext();", "modifier": "private", "type": "ReferenceCountedFacesContext", "declarator": "facesContext = new ReferenceCountedFacesContext()", "var_name": "facesContext"}, {"original_string": "private boolean released;", "modifier": "private", "type": "boolean", "declarator": "released", "var_name": "released"}, {"original_string": "private ModelAndViewArtifact rendering;", "modifier": "private", "type": "ModelAndViewArtifact", "declarator": "rendering", "var_name": "rendering"}], "methods": [{"identifier": "DefaultSpringFacesContext", "parameters": "(LifecycleAccessor lifecycleAccessor, WebApplicationContext webApplicationContext,\n\t\t\tHttpServletRequest request, HttpServletResponse response, Object handler)", "modifiers": "public", "return": "", "signature": " DefaultSpringFacesContext(LifecycleAccessor lifecycleAccessor, WebApplicationContext webApplicationContext,\n\t\t\tHttpServletRequest request, HttpServletResponse response, Object handler)", "full_signature": "public  DefaultSpringFacesContext(LifecycleAccessor lifecycleAccessor, WebApplicationContext webApplicationContext,\n\t\t\tHttpServletRequest request, HttpServletResponse response, Object handler)", "class_method_signature": "DefaultSpringFacesContext.DefaultSpringFacesContext(LifecycleAccessor lifecycleAccessor, WebApplicationContext webApplicationContext,\n\t\t\tHttpServletRequest request, HttpServletResponse response, Object handler)", "testcase": false, "constructor": true}, {"identifier": "release", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void release()", "full_signature": "public void release()", "class_method_signature": "DefaultSpringFacesContext.release()", "testcase": false, "constructor": false}, {"identifier": "getHandler", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getHandler()", "full_signature": "@Override public Object getHandler()", "class_method_signature": "DefaultSpringFacesContext.getHandler()", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getController()", "full_signature": "@Override public Object getController()", "class_method_signature": "DefaultSpringFacesContext.getController()", "testcase": false, "constructor": false}, {"identifier": "getFacesContext", "parameters": "()", "modifiers": "@Override public", "return": "FacesContext", "signature": "FacesContext getFacesContext()", "full_signature": "@Override public FacesContext getFacesContext()", "class_method_signature": "DefaultSpringFacesContext.getFacesContext()", "testcase": false, "constructor": false}, {"identifier": "getWebApplicationContext", "parameters": "()", "modifiers": "@Override public", "return": "WebApplicationContext", "signature": "WebApplicationContext getWebApplicationContext()", "full_signature": "@Override public WebApplicationContext getWebApplicationContext()", "class_method_signature": "DefaultSpringFacesContext.getWebApplicationContext()", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(View view, Map<String, Object> model)", "modifiers": "@Override public", "return": "void", "signature": "void render(View view, Map<String, Object> model)", "full_signature": "@Override public void render(View view, Map<String, Object> model)", "class_method_signature": "DefaultSpringFacesContext.render(View view, Map<String, Object> model)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(FacesContext context, ViewArtifact viewArtifact, Map<String, Object> model)", "modifiers": "private", "return": "void", "signature": "void render(FacesContext context, ViewArtifact viewArtifact, Map<String, Object> model)", "full_signature": "private void render(FacesContext context, ViewArtifact viewArtifact, Map<String, Object> model)", "class_method_signature": "DefaultSpringFacesContext.render(FacesContext context, ViewArtifact viewArtifact, Map<String, Object> model)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(FacesContext context, View view, Map<String, Object> model)", "modifiers": "private", "return": "void", "signature": "void render(FacesContext context, View view, Map<String, Object> model)", "full_signature": "private void render(FacesContext context, View view, Map<String, Object> model)", "class_method_signature": "DefaultSpringFacesContext.render(FacesContext context, View view, Map<String, Object> model)", "testcase": false, "constructor": false}, {"identifier": "getRendering", "parameters": "()", "modifiers": "@Override public", "return": "ModelAndViewArtifact", "signature": "ModelAndViewArtifact getRendering()", "full_signature": "@Override public ModelAndViewArtifact getRendering()", "class_method_signature": "DefaultSpringFacesContext.getRendering()", "testcase": false, "constructor": false}, {"identifier": "checkNotRelased", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkNotRelased()", "full_signature": "private void checkNotRelased()", "class_method_signature": "DefaultSpringFacesContext.checkNotRelased()", "testcase": false, "constructor": false}], "file": "springfaces-mvc/src/main/java/org/springframework/springfaces/mvc/servlet/DefaultSpringFacesContext.java"}, "focal_method": {"identifier": "render", "parameters": "(View view, Map<String, Object> model)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void render(View view, Map<String, Object> model) {\n\t\tFacesContext context = getFacesContext();\n\t\ttry {\n\t\t\tif (view instanceof FacesView) {\n\t\t\t\trender(context, ((FacesView) view).getViewArtifact(), model);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\trender(context, view, model);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tReflectionUtils.rethrowRuntimeException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tcontext.release();\n\t\t}\n\t}", "signature": "void render(View view, Map<String, Object> model)", "full_signature": "@Override public void render(View view, Map<String, Object> model)", "class_method_signature": "DefaultSpringFacesContext.render(View view, Map<String, Object> model)", "testcase": false, "constructor": false, "invocations": ["getFacesContext", "render", "getViewArtifact", "render", "rethrowRuntimeException", "release"]}, "repository": {"repo_id": 1642369, "url": "https://github.com/philwebb/springfaces", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 34, "size": 3761, "license": "licensed"}}