{"test_class": {"identifier": "GenericFacesConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GenericFacesConverter converter = new GenericFacesConverter();", "modifier": "private", "type": "GenericFacesConverter", "declarator": "converter = new GenericFacesConverter()", "var_name": "converter"}, {"original_string": "@Mock\n\tprivate SpringFacesContext springFacesContext;", "modifier": "@Mock\n\tprivate", "type": "SpringFacesContext", "declarator": "springFacesContext", "var_name": "springFacesContext"}, {"original_string": "@Mock\n\tprivate FacesContext facesContext;", "modifier": "@Mock\n\tprivate", "type": "FacesContext", "declarator": "facesContext", "var_name": "facesContext"}, {"original_string": "@Mock\n\tprivate Application application;", "modifier": "@Mock\n\tprivate", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "@Mock\n\tprivate Converter facesConverter;", "modifier": "@Mock\n\tprivate", "type": "Converter", "declarator": "facesConverter", "var_name": "facesConverter"}, {"original_string": "private TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class);", "modifier": "private", "type": "TypeDescriptor", "declarator": "sourceType = TypeDescriptor.valueOf(String.class)", "var_name": "sourceType"}, {"original_string": "private String source = \"test\";", "modifier": "private", "type": "String", "declarator": "source = \"test\"", "var_name": "source"}, {"original_string": "private Object converted = new Object();", "modifier": "private", "type": "Object", "declarator": "converted = new Object()", "var_name": "converted"}, {"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "springfaces-mvc/src/test/java/org/springframework/springfaces/mvc/converter/GenericFacesConverterTest.java"}, "test_case": {"identifier": "shouldMatchIfHasAnnotationOnField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldMatchIfHasAnnotationOnField() throws Exception {\n\t\tTypeDescriptor targetType = AnnotatedClass.getFieldTypeDescriptor();\n\t\tassertThat(this.converter.matches(this.sourceType, targetType), is(true));\n\t}", "signature": "void shouldMatchIfHasAnnotationOnField()", "full_signature": "@Test public void shouldMatchIfHasAnnotationOnField()", "class_method_signature": "GenericFacesConverterTest.shouldMatchIfHasAnnotationOnField()", "testcase": true, "constructor": false, "invocations": ["getFieldTypeDescriptor", "assertThat", "matches", "is"]}, "focal_class": {"identifier": "GenericFacesConverter", "superclass": "extends WebApplicationObjectSupport", "interfaces": "implements ConditionalGenericConverter", "fields": [], "methods": [{"identifier": "getConvertibleTypes", "parameters": "()", "modifiers": "public", "return": "Set<ConvertiblePair>", "signature": "Set<ConvertiblePair> getConvertibleTypes()", "full_signature": "public Set<ConvertiblePair> getConvertibleTypes()", "class_method_signature": "GenericFacesConverter.getConvertibleTypes()", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(TypeDescriptor sourceType, TypeDescriptor targetType)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType)", "full_signature": "public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType)", "class_method_signature": "GenericFacesConverter.matches(TypeDescriptor sourceType, TypeDescriptor targetType)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(final Object source, final TypeDescriptor sourceType, final TypeDescriptor targetType)", "modifiers": "public", "return": "Object", "signature": "Object convert(final Object source, final TypeDescriptor sourceType, final TypeDescriptor targetType)", "full_signature": "public Object convert(final Object source, final TypeDescriptor sourceType, final TypeDescriptor targetType)", "class_method_signature": "GenericFacesConverter.convert(final Object source, final TypeDescriptor sourceType, final TypeDescriptor targetType)", "testcase": false, "constructor": false}, {"identifier": "createFacesConverter", "parameters": "(FacesContext facesContext, TypeDescriptor targetType)", "modifiers": "private", "return": "Converter", "signature": "Converter createFacesConverter(FacesContext facesContext, TypeDescriptor targetType)", "full_signature": "private Converter createFacesConverter(FacesContext facesContext, TypeDescriptor targetType)", "class_method_signature": "GenericFacesConverter.createFacesConverter(FacesContext facesContext, TypeDescriptor targetType)", "testcase": false, "constructor": false}, {"identifier": "getConverterId", "parameters": "(TypeDescriptor targetType)", "modifiers": "private", "return": "String", "signature": "String getConverterId(TypeDescriptor targetType)", "full_signature": "private String getConverterId(TypeDescriptor targetType)", "class_method_signature": "GenericFacesConverter.getConverterId(TypeDescriptor targetType)", "testcase": false, "constructor": false}], "file": "springfaces-mvc/src/main/java/org/springframework/springfaces/mvc/converter/GenericFacesConverter.java"}, "focal_method": {"identifier": "matches", "parameters": "(TypeDescriptor sourceType, TypeDescriptor targetType)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (SpringFacesContext.getCurrentInstance() == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (targetType.getAnnotation(FacesConverterId.class) != null) {\n\t\t\treturn true;\n\t\t}\n\t\tFacesContext facesContext = SpringFacesContext.getCurrentInstance().getFacesContext();\n\t\tApplication application = facesContext.getApplication();\n\t\treturn ((application != null) && (application.createConverter(targetType.getType()) != null));\n\t}", "signature": "boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType)", "full_signature": "public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType)", "class_method_signature": "GenericFacesConverter.matches(TypeDescriptor sourceType, TypeDescriptor targetType)", "testcase": false, "constructor": false, "invocations": ["getCurrentInstance", "getAnnotation", "getFacesContext", "getCurrentInstance", "getApplication", "createConverter", "getType"]}, "repository": {"repo_id": 1642369, "url": "https://github.com/philwebb/springfaces", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 34, "size": 3761, "license": "licensed"}}