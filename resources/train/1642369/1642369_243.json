{"test_class": {"identifier": "ForClassFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, Object> beans;", "modifier": "private", "type": "Map<String, Object>", "declarator": "beans", "var_name": "beans"}, {"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "springfaces/src/test/java/org/springframework/springfaces/util/ForClassFilterTest.java"}, "test_case": {"identifier": "shouldNeedTargetOnBean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldNeedTargetOnBean() throws Exception {\n\t\tthis.thrown.expect(IllegalArgumentException.class);\n\t\tthis.thrown.expectMessage(\"TargetClass must not be null\");\n\t\tnew ForClassFilter().match(new Object(), null);\n\t}", "signature": "void shouldNeedTargetOnBean()", "full_signature": "@Test public void shouldNeedTargetOnBean()", "class_method_signature": "ForClassFilterTest.shouldNeedTargetOnBean()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "match"]}, "focal_class": {"identifier": "ForClassFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Deducer deducer;", "modifier": "private", "type": "Deducer", "declarator": "deducer", "var_name": "deducer"}], "methods": [{"identifier": "ForClassFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ForClassFilter()", "full_signature": "public  ForClassFilter()", "class_method_signature": "ForClassFilter.ForClassFilter()", "testcase": false, "constructor": true}, {"identifier": "ForClassFilter", "parameters": "(Class<?> genericType)", "modifiers": "public", "return": "", "signature": " ForClassFilter(Class<?> genericType)", "full_signature": "public  ForClassFilter(Class<?> genericType)", "class_method_signature": "ForClassFilter.ForClassFilter(Class<?> genericType)", "testcase": false, "constructor": true}, {"identifier": "ForClassFilter", "parameters": "(Class<?> genericType, int parameterIndex)", "modifiers": "public", "return": "", "signature": " ForClassFilter(Class<?> genericType, int parameterIndex)", "full_signature": "public  ForClassFilter(Class<?> genericType, int parameterIndex)", "class_method_signature": "ForClassFilter.ForClassFilter(Class<?> genericType, int parameterIndex)", "testcase": false, "constructor": true}, {"identifier": "ForClassFilter", "parameters": "(Deducer deducer)", "modifiers": "public", "return": "", "signature": " ForClassFilter(Deducer deducer)", "full_signature": "public  ForClassFilter(Deducer deducer)", "class_method_signature": "ForClassFilter.ForClassFilter(Deducer deducer)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Collection<E> collection, Class<?> targetClass)", "modifiers": "public", "return": "Collection<E>", "signature": "Collection<E> apply(Collection<E> collection, Class<?> targetClass)", "full_signature": "public Collection<E> apply(Collection<E> collection, Class<?> targetClass)", "class_method_signature": "ForClassFilter.apply(Collection<E> collection, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Map<K, V> map, Class<?> targetClass)", "modifiers": "public", "return": "Map<K, V>", "signature": "Map<K, V> apply(Map<K, V> map, Class<?> targetClass)", "full_signature": "public Map<K, V> apply(Map<K, V> map, Class<?> targetClass)", "class_method_signature": "ForClassFilter.apply(Map<K, V> map, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Iterator<E> iterator, final Class<?> targetClass)", "modifiers": "public", "return": "Iterator<E>", "signature": "Iterator<E> apply(Iterator<E> iterator, final Class<?> targetClass)", "full_signature": "public Iterator<E> apply(Iterator<E> iterator, final Class<?> targetClass)", "class_method_signature": "ForClassFilter.apply(Iterator<E> iterator, final Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(Object object, Class<?> targetClass)", "modifiers": "public", "return": "boolean", "signature": "boolean match(Object object, Class<?> targetClass)", "full_signature": "public boolean match(Object object, Class<?> targetClass)", "class_method_signature": "ForClassFilter.match(Object object, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "getForClasses", "parameters": "(Object object)", "modifiers": "private", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getForClasses(Object object)", "full_signature": "private Set<Class<?>> getForClasses(Object object)", "class_method_signature": "ForClassFilter.getForClasses(Object object)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFromAny", "parameters": "(Class<?> type, Set<Class<?>> candidates)", "modifiers": "private", "return": "boolean", "signature": "boolean isAssignableFromAny(Class<?> type, Set<Class<?>> candidates)", "full_signature": "private boolean isAssignableFromAny(Class<?> type, Set<Class<?>> candidates)", "class_method_signature": "ForClassFilter.isAssignableFromAny(Class<?> type, Set<Class<?>> candidates)", "testcase": false, "constructor": false}], "file": "springfaces/src/main/java/org/springframework/springfaces/util/ForClassFilter.java"}, "focal_method": {"identifier": "match", "parameters": "(Object object, Class<?> targetClass)", "modifiers": "public", "return": "boolean", "body": "public boolean match(Object object, Class<?> targetClass) {\n\t\tAssert.notNull(targetClass, \"TargetClass must not be null\");\n\t\tif (object == null) {\n\t\t\treturn false;\n\t\t}\n\t\tSet<Class<?>> classes = getForClasses(object);\n\t\tboolean isForClass = isAssignableFromAny(targetClass, classes);\n\n\t\tif (!(object instanceof ConditionalForClass)) {\n\t\t\treturn isForClass;\n\t\t}\n\n\t\tConditionalForClass conditionalForClass = (ConditionalForClass) object;\n\t\t// Only call the conditional if we match one of the classes or there was no specific classes to match against\n\t\tif (isForClass || classes.isEmpty()) {\n\t\t\treturn conditionalForClass.isForClass(targetClass);\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean match(Object object, Class<?> targetClass)", "full_signature": "public boolean match(Object object, Class<?> targetClass)", "class_method_signature": "ForClassFilter.match(Object object, Class<?> targetClass)", "testcase": false, "constructor": false, "invocations": ["notNull", "getForClasses", "isAssignableFromAny", "isEmpty", "isForClass"]}, "repository": {"repo_id": 1642369, "url": "https://github.com/philwebb/springfaces", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 34, "size": 3761, "license": "licensed"}}