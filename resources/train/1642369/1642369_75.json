{"test_class": {"identifier": "ModelBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int generatedId;", "modifier": "private", "type": "int", "declarator": "generatedId", "var_name": "generatedId"}, {"original_string": "@Mock\n\tprivate FacesContext context;", "modifier": "@Mock\n\tprivate", "type": "FacesContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n\tprivate Application application;", "modifier": "@Mock\n\tprivate", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "private ModelBuilder modelBuilder;", "modifier": "private", "type": "ModelBuilder", "declarator": "modelBuilder", "var_name": "modelBuilder"}], "file": "springfaces-mvc/src/test/java/org/springframework/springfaces/mvc/internal/ModelBuilderTest.java"}, "test_case": {"identifier": "shouldNotAttemptResolveOfMalformedExpressions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldNotAttemptResolveOfMalformedExpressions() throws Exception {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"m1\", \"#{expression\");\n\t\tmap.put(\"m2\", \"#expression}\");\n\t\tmap.put(\"m3\", \"#}expression{\");\n\t\tmap.put(\"m4\", new StringBuffer(\"#{expression}\"));\n\t\tthis.modelBuilder.add(map, true);\n\t\tverifyZeroInteractions(this.application);\n\t}", "signature": "void shouldNotAttemptResolveOfMalformedExpressions()", "full_signature": "@Test public void shouldNotAttemptResolveOfMalformedExpressions()", "class_method_signature": "ModelBuilderTest.shouldNotAttemptResolveOfMalformedExpressions()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "add", "verifyZeroInteractions"]}, "focal_class": {"identifier": "ModelBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Log logger = LogFactory.getLog(ModelBuilder.class);", "modifier": "private", "type": "Log", "declarator": "logger = LogFactory.getLog(ModelBuilder.class)", "var_name": "logger"}, {"original_string": "private FacesContext context;", "modifier": "private", "type": "FacesContext", "declarator": "context", "var_name": "context"}, {"original_string": "private Map<String, Object> model = new HashMap<String, Object>();", "modifier": "private", "type": "Map<String, Object>", "declarator": "model = new HashMap<String, Object>()", "var_name": "model"}], "methods": [{"identifier": "ModelBuilder", "parameters": "(FacesContext context)", "modifiers": "public", "return": "", "signature": " ModelBuilder(FacesContext context)", "full_signature": "public  ModelBuilder(FacesContext context)", "class_method_signature": "ModelBuilder.ModelBuilder(FacesContext context)", "testcase": false, "constructor": true}, {"identifier": "addFromComponent", "parameters": "(UIComponent component)", "modifiers": "public", "return": "void", "signature": "void addFromComponent(UIComponent component)", "full_signature": "public void addFromComponent(UIComponent component)", "class_method_signature": "ModelBuilder.addFromComponent(UIComponent component)", "testcase": false, "constructor": false}, {"identifier": "addUIParam", "parameters": "(UIParameter parameter)", "modifiers": "private", "return": "void", "signature": "void addUIParam(UIParameter parameter)", "full_signature": "private void addUIParam(UIParameter parameter)", "class_method_signature": "ModelBuilder.addUIParam(UIParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Map<String, Object> map, boolean resolveExpressions)", "modifiers": "public", "return": "void", "signature": "void add(Map<String, Object> map, boolean resolveExpressions)", "full_signature": "public void add(Map<String, Object> map, boolean resolveExpressions)", "class_method_signature": "ModelBuilder.add(Map<String, Object> map, boolean resolveExpressions)", "testcase": false, "constructor": false}, {"identifier": "addFromParameterList", "parameters": "(Map<String, List<String>> parameters)", "modifiers": "public", "return": "void", "signature": "void addFromParameterList(Map<String, List<String>> parameters)", "full_signature": "public void addFromParameterList(Map<String, List<String>> parameters)", "class_method_signature": "ModelBuilder.addFromParameterList(Map<String, List<String>> parameters)", "testcase": false, "constructor": false}, {"identifier": "addIfNotInModel", "parameters": "(String source, String key, Object value, boolean resolveExpressions,\n\t\t\tboolean expandModelHolder)", "modifiers": "private", "return": "void", "signature": "void addIfNotInModel(String source, String key, Object value, boolean resolveExpressions,\n\t\t\tboolean expandModelHolder)", "full_signature": "private void addIfNotInModel(String source, String key, Object value, boolean resolveExpressions,\n\t\t\tboolean expandModelHolder)", "class_method_signature": "ModelBuilder.addIfNotInModel(String source, String key, Object value, boolean resolveExpressions,\n\t\t\tboolean expandModelHolder)", "testcase": false, "constructor": false}, {"identifier": "resolveExpressionIfNecessary", "parameters": "(Object value)", "modifiers": "private", "return": "Object", "signature": "Object resolveExpressionIfNecessary(Object value)", "full_signature": "private Object resolveExpressionIfNecessary(Object value)", "class_method_signature": "ModelBuilder.resolveExpressionIfNecessary(Object value)", "testcase": false, "constructor": false}, {"identifier": "isExpression", "parameters": "(Object value)", "modifiers": "private", "return": "boolean", "signature": "boolean isExpression(Object value)", "full_signature": "private boolean isExpression(Object value)", "class_method_signature": "ModelBuilder.isExpression(Object value)", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getModel()", "full_signature": "public Map<String, Object> getModel()", "class_method_signature": "ModelBuilder.getModel()", "testcase": false, "constructor": false}], "file": "springfaces-mvc/src/main/java/org/springframework/springfaces/mvc/internal/ModelBuilder.java"}, "focal_method": {"identifier": "add", "parameters": "(Map<String, Object> map, boolean resolveExpressions)", "modifiers": "public", "return": "void", "body": "public void add(Map<String, Object> map, boolean resolveExpressions) {\n\t\tif (map != null) {\n\t\t\tfor (Map.Entry<String, Object> modelEntry : map.entrySet()) {\n\t\t\t\taddIfNotInModel(modelEntry.getKey(), modelEntry.getKey(), modelEntry.getValue(), resolveExpressions,\n\t\t\t\t\t\tfalse);\n\t\t\t}\n\t\t}\n\t}", "signature": "void add(Map<String, Object> map, boolean resolveExpressions)", "full_signature": "public void add(Map<String, Object> map, boolean resolveExpressions)", "class_method_signature": "ModelBuilder.add(Map<String, Object> map, boolean resolveExpressions)", "testcase": false, "constructor": false, "invocations": ["entrySet", "addIfNotInModel", "getKey", "getKey", "getValue"]}, "repository": {"repo_id": 1642369, "url": "https://github.com/philwebb/springfaces", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 34, "size": 3761, "license": "licensed"}}