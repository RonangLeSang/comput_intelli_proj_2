{"test_class": {"identifier": "LazyDataModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private LazyDataModel<String, ? extends LazyDataModelState> dataModel;", "modifier": "private", "type": "LazyDataModel<String, ? extends LazyDataModelState>", "declarator": "dataModel", "var_name": "dataModel"}, {"original_string": "private MockLoader loader = spy(new MockLoader());", "modifier": "private", "type": "MockLoader", "declarator": "loader = spy(new MockLoader())", "var_name": "loader"}, {"original_string": "private LazyDataModelState state = newLazyDataModelState();", "modifier": "private", "type": "LazyDataModelState", "declarator": "state = newLazyDataModelState()", "var_name": "state"}, {"original_string": "private long totalNumberOfRows = 1000;", "modifier": "private", "type": "long", "declarator": "totalNumberOfRows = 1000", "var_name": "totalNumberOfRows"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<DataModelEvent> dataModelEvent;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<DataModelEvent>", "declarator": "dataModelEvent", "var_name": "dataModelEvent"}], "file": "springfaces/src/test/java/org/springframework/springfaces/model/LazyDataModelTest.java"}, "test_case": {"identifier": "shouldNotDoubleFireListeners", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldNotDoubleFireListeners() throws Exception {\n\t\tDataModelListener listener = mock(DataModelListener.class);\n\t\tthis.dataModel.addDataModelListener(listener);\n\t\tthis.dataModel.setRowIndex(0);\n\t\tthis.dataModel.setRowIndex(0);\n\t\tverify(listener).rowSelected(this.dataModelEvent.capture());\n\t\tverifyNoMoreInteractions(listener);\n\t}", "signature": "void shouldNotDoubleFireListeners()", "full_signature": "@Test public void shouldNotDoubleFireListeners()", "class_method_signature": "LazyDataModelTest.shouldNotDoubleFireListeners()", "testcase": true, "constructor": false, "invocations": ["mock", "addDataModelListener", "setRowIndex", "setRowIndex", "rowSelected", "verify", "capture", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "LazyDataModel", "superclass": "extends DataModel<E>", "interfaces": "", "fields": [{"original_string": "private LazyDataLoader<E, S> loader;", "modifier": "private", "type": "LazyDataLoader<E, S>", "declarator": "loader", "var_name": "loader"}, {"original_string": "private S state;", "modifier": "private", "type": "S", "declarator": "state", "var_name": "state"}, {"original_string": "private DataModelRowSet<E> rowSet;", "modifier": "private", "type": "DataModelRowSet<E>", "declarator": "rowSet", "var_name": "rowSet"}, {"original_string": "private int nextRowIndex = 0;", "modifier": "private", "type": "int", "declarator": "nextRowIndex = 0", "var_name": "nextRowIndex"}], "methods": [{"identifier": "LazyDataModel", "parameters": "(LazyDataLoader<E, S> loader, S state)", "modifiers": "public", "return": "", "signature": " LazyDataModel(LazyDataLoader<E, S> loader, S state)", "full_signature": "public  LazyDataModel(LazyDataLoader<E, S> loader, S state)", "class_method_signature": "LazyDataModel.LazyDataModel(LazyDataLoader<E, S> loader, S state)", "testcase": false, "constructor": true}, {"identifier": "getState", "parameters": "()", "modifiers": "protected final", "return": "S", "signature": "S getState()", "full_signature": "protected final S getState()", "class_method_signature": "LazyDataModel.getState()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void reset()", "full_signature": "protected void reset()", "class_method_signature": "LazyDataModel.reset()", "testcase": false, "constructor": false}, {"identifier": "isRowAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRowAvailable()", "full_signature": "@Override public boolean isRowAvailable()", "class_method_signature": "LazyDataModel.isRowAvailable()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRowCount()", "full_signature": "@Override public int getRowCount()", "class_method_signature": "LazyDataModel.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "clearCachedRowCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearCachedRowCount()", "full_signature": "public void clearCachedRowCount()", "class_method_signature": "LazyDataModel.clearCachedRowCount()", "testcase": false, "constructor": false}, {"identifier": "clearCachedRowCount", "parameters": "(int nextRowIndex)", "modifiers": "public", "return": "void", "signature": "void clearCachedRowCount(int nextRowIndex)", "full_signature": "public void clearCachedRowCount(int nextRowIndex)", "class_method_signature": "LazyDataModel.clearCachedRowCount(int nextRowIndex)", "testcase": false, "constructor": false}, {"identifier": "getRowData", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E getRowData()", "full_signature": "@Override public E getRowData()", "class_method_signature": "LazyDataModel.getRowData()", "testcase": false, "constructor": false}, {"identifier": "getRowIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRowIndex()", "full_signature": "@Override public int getRowIndex()", "class_method_signature": "LazyDataModel.getRowIndex()", "testcase": false, "constructor": false}, {"identifier": "setRowIndex", "parameters": "(int rowIndex)", "modifiers": "@Override public", "return": "void", "signature": "void setRowIndex(int rowIndex)", "full_signature": "@Override public void setRowIndex(int rowIndex)", "class_method_signature": "LazyDataModel.setRowIndex(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "fireDataModelListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireDataModelListeners()", "full_signature": "private void fireDataModelListeners()", "class_method_signature": "LazyDataModel.fireDataModelListeners()", "testcase": false, "constructor": false}, {"identifier": "getWrappedData", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getWrappedData()", "full_signature": "@Override public Object getWrappedData()", "class_method_signature": "LazyDataModel.getWrappedData()", "testcase": false, "constructor": false}, {"identifier": "setWrappedData", "parameters": "(Object o)", "modifiers": "@Override public", "return": "void", "signature": "void setWrappedData(Object o)", "full_signature": "@Override public void setWrappedData(Object o)", "class_method_signature": "LazyDataModel.setWrappedData(Object o)", "testcase": false, "constructor": false}, {"identifier": "getRowSet", "parameters": "()", "modifiers": "private", "return": "DataModelRowSet<E>", "signature": "DataModelRowSet<E> getRowSet()", "full_signature": "private DataModelRowSet<E> getRowSet()", "class_method_signature": "LazyDataModel.getRowSet()", "testcase": false, "constructor": false}, {"identifier": "getAnyNonEmptyRowSet", "parameters": "()", "modifiers": "private", "return": "DataModelRowSet<E>", "signature": "DataModelRowSet<E> getAnyNonEmptyRowSet()", "full_signature": "private DataModelRowSet<E> getAnyNonEmptyRowSet()", "class_method_signature": "LazyDataModel.getAnyNonEmptyRowSet()", "testcase": false, "constructor": false}, {"identifier": "getRowSet", "parameters": "(int rowIndex)", "modifiers": "private", "return": "DataModelRowSet<E>", "signature": "DataModelRowSet<E> getRowSet(int rowIndex)", "full_signature": "private DataModelRowSet<E> getRowSet(int rowIndex)", "class_method_signature": "LazyDataModel.getRowSet(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "loadRowSet", "parameters": "(int rowIndex)", "modifiers": "private", "return": "DataModelRowSet<E>", "signature": "DataModelRowSet<E> loadRowSet(int rowIndex)", "full_signature": "private DataModelRowSet<E> loadRowSet(int rowIndex)", "class_method_signature": "LazyDataModel.loadRowSet(int rowIndex)", "testcase": false, "constructor": false}], "file": "springfaces/src/main/java/org/springframework/springfaces/model/LazyDataModel.java"}, "focal_method": {"identifier": "setRowIndex", "parameters": "(int rowIndex)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void setRowIndex(int rowIndex) {\n\t\tif (getRowIndex() != rowIndex) {\n\t\t\tAssert.isTrue(rowIndex >= -1, \"RowIndex must not be less than -1\");\n\t\t\tthis.state.setRowIndex(rowIndex);\n\t\t\tfireDataModelListeners();\n\t\t}\n\t}", "signature": "void setRowIndex(int rowIndex)", "full_signature": "@Override public void setRowIndex(int rowIndex)", "class_method_signature": "LazyDataModel.setRowIndex(int rowIndex)", "testcase": false, "constructor": false, "invocations": ["getRowIndex", "isTrue", "setRowIndex", "fireDataModelListeners"]}, "repository": {"repo_id": 1642369, "url": "https://github.com/philwebb/springfaces", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 34, "size": 3761, "license": "licensed"}}