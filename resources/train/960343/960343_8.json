{"test_class": {"identifier": "TestSimpleFormula", "superclass": "", "interfaces": "", "fields": [], "file": "3-sat-core/src/test/java/com/anjlab/sat3/TestSimpleFormula.java"}, "test_case": {"identifier": "testEvaluate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluate()\n    {\n        ITabularFormula formula = Helper.createFormula(1, 2, 3);\n        \n        ObjectArrayList route = new ObjectArrayList();\n        //  Route contains inverse values\n        route.add(new SimpleVertex(new SimpleTripletPermutation(1, 2, 3), 0, _111_instance, null));\n        \n        assertTrue(formula.evaluate(route));\n    }", "signature": "void testEvaluate()", "full_signature": "@Test public void testEvaluate()", "class_method_signature": "TestSimpleFormula.testEvaluate()", "testcase": true, "constructor": false, "invocations": ["createFormula", "add", "assertTrue", "evaluate"]}, "focal_class": {"identifier": "SimpleFormula", "superclass": "", "interfaces": "implements ICompactTripletsStructure, ICompactTripletsStructureHolder", "fields": [{"original_string": "private final ObjectArrayList tiers;", "modifier": "private final", "type": "ObjectArrayList", "declarator": "tiers", "var_name": "tiers"}, {"original_string": "private OpenIntObjectHashMap tiersHash1;", "modifier": "private", "type": "OpenIntObjectHashMap", "declarator": "tiersHash1", "var_name": "tiersHash1"}, {"original_string": "private OpenLongObjectHashMap tiersHash2;", "modifier": "private", "type": "OpenLongObjectHashMap", "declarator": "tiersHash2", "var_name": "tiersHash2"}, {"original_string": "private OpenLongObjectHashMap tiersHash3;", "modifier": "private", "type": "OpenLongObjectHashMap", "declarator": "tiersHash3", "var_name": "tiersHash3"}, {"original_string": "private final IPermutation permutation;", "modifier": "private final", "type": "IPermutation", "declarator": "permutation", "var_name": "permutation"}, {"original_string": "private OpenIntIntHashMap internalToOriginalMap;", "modifier": "private", "type": "OpenIntIntHashMap", "declarator": "internalToOriginalMap", "var_name": "internalToOriginalMap"}, {"original_string": "private final Comparator<ITier> tierComparator = new Comparator<ITier>()\n    {\n        public int compare(ITier t1, ITier t2)\n        {\n            return permutation.indexOf(t1.getAName()) - permutation.indexOf(t2.getAName());\n        }\n    };", "modifier": "private final", "type": "Comparator<ITier>", "declarator": "tierComparator = new Comparator<ITier>()\n    {\n        public int compare(ITier t1, ITier t2)\n        {\n            return permutation.indexOf(t1.getAName()) - permutation.indexOf(t2.getAName());\n        }\n    }", "var_name": "tierComparator"}], "methods": [{"identifier": "SimpleFormula", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleFormula()", "full_signature": "public  SimpleFormula()", "class_method_signature": "SimpleFormula.SimpleFormula()", "testcase": false, "constructor": true}, {"identifier": "SimpleFormula", "parameters": "(IPermutation permutation)", "modifiers": "public", "return": "", "signature": " SimpleFormula(IPermutation permutation)", "full_signature": "public  SimpleFormula(IPermutation permutation)", "class_method_signature": "SimpleFormula.SimpleFormula(IPermutation permutation)", "testcase": false, "constructor": true}, {"identifier": "SimpleFormula", "parameters": "(SimpleFormula formula, final boolean fillTiersHash3)", "modifiers": "private", "return": "", "signature": " SimpleFormula(SimpleFormula formula, final boolean fillTiersHash3)", "full_signature": "private  SimpleFormula(SimpleFormula formula, final boolean fillTiersHash3)", "class_method_signature": "SimpleFormula.SimpleFormula(SimpleFormula formula, final boolean fillTiersHash3)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "SimpleFormula", "signature": "SimpleFormula clone()", "full_signature": "public SimpleFormula clone()", "class_method_signature": "SimpleFormula.clone()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "SimpleFormula.clear()", "testcase": false, "constructor": false}, {"identifier": "getClausesCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getClausesCount()", "full_signature": "public int getClausesCount()", "class_method_signature": "SimpleFormula.getClausesCount()", "testcase": false, "constructor": false}, {"identifier": "getVarCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVarCount()", "full_signature": "public int getVarCount()", "class_method_signature": "SimpleFormula.getVarCount()", "testcase": false, "constructor": false}, {"identifier": "getTiers", "parameters": "()", "modifiers": "public", "return": "ObjectArrayList", "signature": "ObjectArrayList getTiers()", "full_signature": "public ObjectArrayList getTiers()", "class_method_signature": "SimpleFormula.getTiers()", "testcase": false, "constructor": false}, {"identifier": "tiersSorted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean tiersSorted()", "full_signature": "public boolean tiersSorted()", "class_method_signature": "SimpleFormula.tiersSorted()", "testcase": false, "constructor": false}, {"identifier": "sortTiers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sortTiers()", "full_signature": "public void sortTiers()", "class_method_signature": "SimpleFormula.sortTiers()", "testcase": false, "constructor": false}, {"identifier": "complete", "parameters": "(IPermutation variables)", "modifiers": "public", "return": "void", "signature": "void complete(IPermutation variables)", "full_signature": "public void complete(IPermutation variables)", "class_method_signature": "SimpleFormula.complete(IPermutation variables)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ITriplet triplet)", "modifiers": "public", "return": "void", "signature": "void add(ITriplet triplet)", "full_signature": "public void add(ITriplet triplet)", "class_method_signature": "SimpleFormula.add(ITriplet triplet)", "testcase": false, "constructor": false}, {"identifier": "findTiersFor", "parameters": "(int varName)", "modifiers": "public", "return": "ObjectArrayList", "signature": "ObjectArrayList findTiersFor(int varName)", "full_signature": "public ObjectArrayList findTiersFor(int varName)", "class_method_signature": "SimpleFormula.findTiersFor(int varName)", "testcase": false, "constructor": false}, {"identifier": "findTiersFor", "parameters": "(int varName1, int varName2)", "modifiers": "public", "return": "ObjectArrayList", "signature": "ObjectArrayList findTiersFor(int varName1, int varName2)", "full_signature": "public ObjectArrayList findTiersFor(int varName1, int varName2)", "class_method_signature": "SimpleFormula.findTiersFor(int varName1, int varName2)", "testcase": false, "constructor": false}, {"identifier": "unionOrAdd", "parameters": "(ITier tier)", "modifiers": "public", "return": "void", "signature": "void unionOrAdd(ITier tier)", "full_signature": "public void unionOrAdd(ITier tier)", "class_method_signature": "SimpleFormula.unionOrAdd(ITier tier)", "testcase": false, "constructor": false}, {"identifier": "addTiersHash1", "parameters": "(ITier tier, int varName)", "modifiers": "private", "return": "void", "signature": "void addTiersHash1(ITier tier, int varName)", "full_signature": "private void addTiersHash1(ITier tier, int varName)", "class_method_signature": "SimpleFormula.addTiersHash1(ITier tier, int varName)", "testcase": false, "constructor": false}, {"identifier": "addTiersHash2", "parameters": "(ITier tier, int varName1, int varName2)", "modifiers": "private", "return": "void", "signature": "void addTiersHash2(ITier tier, int varName1, int varName2)", "full_signature": "private void addTiersHash2(ITier tier, int varName1, int varName2)", "class_method_signature": "SimpleFormula.addTiersHash2(ITier tier, int varName1, int varName2)", "testcase": false, "constructor": false}, {"identifier": "addTier", "parameters": "(ITier tier)", "modifiers": "", "return": "void", "signature": "void addTier(ITier tier)", "full_signature": " void addTier(ITier tier)", "class_method_signature": "SimpleFormula.addTier(ITier tier)", "testcase": false, "constructor": false}, {"identifier": "findOrCreateTargetTierFor", "parameters": "(ITripletPermutation triplet)", "modifiers": "private", "return": "ITier", "signature": "ITier findOrCreateTargetTierFor(ITripletPermutation triplet)", "full_signature": "private ITier findOrCreateTargetTierFor(ITripletPermutation triplet)", "class_method_signature": "SimpleFormula.findOrCreateTargetTierFor(ITripletPermutation triplet)", "testcase": false, "constructor": false}, {"identifier": "createTierFor", "parameters": "(ITripletPermutation variables)", "modifiers": "private", "return": "ITripletPermutation", "signature": "ITripletPermutation createTierFor(ITripletPermutation variables)", "full_signature": "private ITripletPermutation createTierFor(ITripletPermutation variables)", "class_method_signature": "SimpleFormula.createTierFor(ITripletPermutation variables)", "testcase": false, "constructor": false}, {"identifier": "ensurePermutationContains", "parameters": "(ITripletPermutation variables)", "modifiers": "private", "return": "void", "signature": "void ensurePermutationContains(ITripletPermutation variables)", "full_signature": "private void ensurePermutationContains(ITripletPermutation variables)", "class_method_signature": "SimpleFormula.ensurePermutationContains(ITripletPermutation variables)", "testcase": false, "constructor": false}, {"identifier": "findTierFor", "parameters": "(ITripletPermutation tripletPermutation)", "modifiers": "public", "return": "ITier", "signature": "ITier findTierFor(ITripletPermutation tripletPermutation)", "full_signature": "public ITier findTierFor(ITripletPermutation tripletPermutation)", "class_method_signature": "SimpleFormula.findTierFor(ITripletPermutation tripletPermutation)", "testcase": false, "constructor": false}, {"identifier": "orderIs", "parameters": "(int aIndex, int bIndex, int cIndex)", "modifiers": "private static", "return": "boolean", "signature": "boolean orderIs(int aIndex, int bIndex, int cIndex)", "full_signature": "private static boolean orderIs(int aIndex, int bIndex, int cIndex)", "class_method_signature": "SimpleFormula.orderIs(int aIndex, int bIndex, int cIndex)", "testcase": false, "constructor": false}, {"identifier": "getPermutation", "parameters": "()", "modifiers": "public", "return": "IPermutation", "signature": "IPermutation getPermutation()", "full_signature": "public IPermutation getPermutation()", "class_method_signature": "SimpleFormula.getPermutation()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(int from, int to)", "modifiers": "public", "return": "CleanupStatus", "signature": "CleanupStatus cleanup(int from, int to)", "full_signature": "public CleanupStatus cleanup(int from, int to)", "class_method_signature": "SimpleFormula.cleanup(int from, int to)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean cleanup()", "full_signature": "public boolean cleanup()", "class_method_signature": "SimpleFormula.cleanup()", "testcase": false, "constructor": false}, {"identifier": "assertTiersSorted", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void assertTiersSorted()", "full_signature": "private void assertTiersSorted()", "class_method_signature": "SimpleFormula.assertTiersSorted()", "testcase": false, "constructor": false}, {"identifier": "internalCleanup", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean internalCleanup()", "full_signature": "private boolean internalCleanup()", "class_method_signature": "SimpleFormula.internalCleanup()", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(ICompactTripletsStructure cts)", "modifiers": "public", "return": "void", "signature": "void union(ICompactTripletsStructure cts)", "full_signature": "public void union(ICompactTripletsStructure cts)", "class_method_signature": "SimpleFormula.union(ICompactTripletsStructure cts)", "testcase": false, "constructor": false}, {"identifier": "assertSamePermutation", "parameters": "(SimpleFormula operand)", "modifiers": "private", "return": "void", "signature": "void assertSamePermutation(SimpleFormula operand)", "full_signature": "private void assertSamePermutation(SimpleFormula operand)", "class_method_signature": "SimpleFormula.assertSamePermutation(SimpleFormula operand)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(ICompactTripletsStructure cts)", "modifiers": "public", "return": "void", "signature": "void intersect(ICompactTripletsStructure cts)", "full_signature": "public void intersect(ICompactTripletsStructure cts)", "class_method_signature": "SimpleFormula.intersect(ICompactTripletsStructure cts)", "testcase": false, "constructor": false}, {"identifier": "concretize", "parameters": "(int varName, Value value)", "modifiers": "public", "return": "CleanupStatus", "signature": "CleanupStatus concretize(int varName, Value value)", "full_signature": "public CleanupStatus concretize(int varName, Value value)", "class_method_signature": "SimpleFormula.concretize(int varName, Value value)", "testcase": false, "constructor": false}, {"identifier": "concretize", "parameters": "(ITripletPermutation tripletPermutation, ITripletValue tripletValue)", "modifiers": "public", "return": "boolean", "signature": "boolean concretize(ITripletPermutation tripletPermutation, ITripletValue tripletValue)", "full_signature": "public boolean concretize(ITripletPermutation tripletPermutation, ITripletValue tripletValue)", "class_method_signature": "SimpleFormula.concretize(ITripletPermutation tripletPermutation, ITripletValue tripletValue)", "testcase": false, "constructor": false}, {"identifier": "internalConcretize", "parameters": "(int varName, Value value)", "modifiers": "private", "return": "CleanupStatus", "signature": "CleanupStatus internalConcretize(int varName, Value value)", "full_signature": "private CleanupStatus internalConcretize(int varName, Value value)", "class_method_signature": "SimpleFormula.internalConcretize(int varName, Value value)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "SimpleFormula.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "SimpleFormula.toString()", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(int varName)", "modifiers": "public", "return": "Value", "signature": "Value valueOf(int varName)", "full_signature": "public Value valueOf(int varName)", "class_method_signature": "SimpleFormula.valueOf(int varName)", "testcase": false, "constructor": false}, {"identifier": "getCTS", "parameters": "()", "modifiers": "public", "return": "ICompactTripletsStructure", "signature": "ICompactTripletsStructure getCTS()", "full_signature": "public ICompactTripletsStructure getCTS()", "class_method_signature": "SimpleFormula.getCTS()", "testcase": false, "constructor": false}, {"identifier": "getTier", "parameters": "(int tierIndex)", "modifiers": "public", "return": "ITier", "signature": "ITier getTier(int tierIndex)", "full_signature": "public ITier getTier(int tierIndex)", "class_method_signature": "SimpleFormula.getTier(int tierIndex)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Properties properties)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate(Properties properties)", "full_signature": "public boolean evaluate(Properties properties)", "class_method_signature": "SimpleFormula.evaluate(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(ObjectArrayList route)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate(ObjectArrayList route)", "full_signature": "public boolean evaluate(ObjectArrayList route)", "class_method_signature": "SimpleFormula.evaluate(ObjectArrayList route)", "testcase": false, "constructor": false}, {"identifier": "getValueFromRoute", "parameters": "(ObjectArrayList route, int varName)", "modifiers": "private", "return": "boolean", "signature": "boolean getValueFromRoute(ObjectArrayList route, int varName)", "full_signature": "private boolean getValueFromRoute(ObjectArrayList route, int varName)", "class_method_signature": "SimpleFormula.getValueFromRoute(ObjectArrayList route, int varName)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "SimpleFormula.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "containsAllValuesOf", "parameters": "(ITier anotherTier)", "modifiers": "public", "return": "boolean", "signature": "boolean containsAllValuesOf(ITier anotherTier)", "full_signature": "public boolean containsAllValuesOf(ITier anotherTier)", "class_method_signature": "SimpleFormula.containsAllValuesOf(ITier anotherTier)", "testcase": false, "constructor": false}, {"identifier": "isElementary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isElementary()", "full_signature": "public boolean isElementary()", "class_method_signature": "SimpleFormula.isElementary()", "testcase": false, "constructor": false}, {"identifier": "clearTierHash3", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearTierHash3()", "full_signature": "public void clearTierHash3()", "class_method_signature": "SimpleFormula.clearTierHash3()", "testcase": false, "constructor": false}, {"identifier": "setVarMappings", "parameters": "(OpenIntIntHashMap internalToOriginalMap)", "modifiers": "public", "return": "void", "signature": "void setVarMappings(OpenIntIntHashMap internalToOriginalMap)", "full_signature": "public void setVarMappings(OpenIntIntHashMap internalToOriginalMap)", "class_method_signature": "SimpleFormula.setVarMappings(OpenIntIntHashMap internalToOriginalMap)", "testcase": false, "constructor": false}, {"identifier": "getOriginalVarName", "parameters": "(int varName)", "modifiers": "public", "return": "int", "signature": "int getOriginalVarName(int varName)", "full_signature": "public int getOriginalVarName(int varName)", "class_method_signature": "SimpleFormula.getOriginalVarName(int varName)", "testcase": false, "constructor": false}], "file": "3-sat-core/src/main/java/com/anjlab/sat3/SimpleFormula.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Properties properties)", "modifiers": "public", "return": "boolean", "body": "public boolean evaluate(Properties properties)\n    {\n        boolean result = true;\n        for (int j = 0; j < getTiers().size(); j++)\n        {\n            for (ITripletValue tiplet : getTier(j))\n            {\n                ITripletPermutation permutation = getTier(j);\n                \n                boolean aValue = parseBoolean(String.valueOf(properties.get(\"_\" + permutation.getAName())));\n                boolean bValue = parseBoolean(String.valueOf(properties.get(\"_\" + permutation.getBName())));\n                boolean cValue = parseBoolean(String.valueOf(properties.get(\"_\" + permutation.getCName())));\n\n                if (tiplet.isNotA()) aValue = !aValue;\n                if (tiplet.isNotB()) bValue = !bValue;\n                if (tiplet.isNotC()) cValue = !cValue;\n\n                result = result && (aValue || bValue || cValue);\n                \n                if (!result)\n                {\n                    return result;\n                }\n            }\n        }\n        return result;\n    }", "signature": "boolean evaluate(Properties properties)", "full_signature": "public boolean evaluate(Properties properties)", "class_method_signature": "SimpleFormula.evaluate(Properties properties)", "testcase": false, "constructor": false, "invocations": ["size", "getTiers", "getTier", "getTier", "parseBoolean", "valueOf", "get", "getAName", "parseBoolean", "valueOf", "get", "getBName", "parseBoolean", "valueOf", "get", "getCName", "isNotA", "isNotB", "isNotC"]}, "repository": {"repo_id": 960343, "url": "https://github.com/anjlab/sat3", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 84, "size": 1752, "license": "licensed"}}