{"test_class": {"identifier": "TestSimpleTier", "superclass": "", "interfaces": "", "fields": [], "file": "3-sat-core/src/test/java/com/anjlab/sat3/TestSimpleTier.java"}, "test_case": {"identifier": "testSwapAC", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSwapAC()\n    {\n        ITier tier;\n        \n        tier = new SimpleTier(1, 2, 3);\n        \n        tier.add(_000_instance);\n        tier.swapAC();\n        assertTrue(tier.contains(_000_instance));\n        \n        tier = new SimpleTier(1, 2, 3);\n        \n        tier.add(_001_instance);\n        tier.swapAC();\n        assertTrue(tier.contains(_100_instance));\n        \n        tier = new SimpleTier(1, 2, 3);\n        \n        tier.add(_010_instance);\n        tier.swapAC();\n        assertTrue(tier.contains(_010_instance));\n        \n        tier = new SimpleTier(1, 2, 3);\n        \n        tier.add(_011_instance);\n        tier.swapAC();\n        assertTrue(tier.contains(_110_instance));\n        \n        tier = new SimpleTier(1, 2, 3);\n        \n        tier.add(_100_instance);\n        tier.swapAC();\n        assertTrue(tier.contains(_001_instance));\n        \n        tier = new SimpleTier(1, 2, 3);\n        \n        tier.add(_101_instance);\n        tier.swapAC();\n        assertTrue(tier.contains(_101_instance));\n        \n        tier = new SimpleTier(1, 2, 3);\n        \n        tier.add(_110_instance);\n        tier.swapAC();\n        assertTrue(tier.contains(_011_instance));\n        \n        tier = new SimpleTier(1, 2, 3);\n        \n        tier.add(_111_instance);\n        tier.swapAC();\n        assertTrue(tier.contains(_111_instance));\n    }", "signature": "void testSwapAC()", "full_signature": "@Test public void testSwapAC()", "class_method_signature": "TestSimpleTier.testSwapAC()", "testcase": true, "constructor": false, "invocations": ["add", "swapAC", "assertTrue", "contains", "add", "swapAC", "assertTrue", "contains", "add", "swapAC", "assertTrue", "contains", "add", "swapAC", "assertTrue", "contains", "add", "swapAC", "assertTrue", "contains", "add", "swapAC", "assertTrue", "contains", "add", "swapAC", "assertTrue", "contains", "add", "swapAC", "assertTrue", "contains"]}, "focal_class": {"identifier": "SimpleTier", "superclass": "extends SimpleTripletPermutation", "interfaces": "implements ITier", "fields": [{"original_string": "protected byte keys_73516240;", "modifier": "protected", "type": "byte", "declarator": "keys_73516240", "var_name": "keys_73516240"}, {"original_string": "protected int size;", "modifier": "protected", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "createCompleteTier", "parameters": "(int a, int b, int c)", "modifiers": "public static", "return": "SimpleTier", "signature": "SimpleTier createCompleteTier(int a, int b, int c)", "full_signature": "public static SimpleTier createCompleteTier(int a, int b, int c)", "class_method_signature": "SimpleTier.createCompleteTier(int a, int b, int c)", "testcase": false, "constructor": false}, {"identifier": "SimpleTier", "parameters": "(int a, int b, int c)", "modifiers": "public", "return": "", "signature": " SimpleTier(int a, int b, int c)", "full_signature": "public  SimpleTier(int a, int b, int c)", "class_method_signature": "SimpleTier.SimpleTier(int a, int b, int c)", "testcase": false, "constructor": true}, {"identifier": "SimpleTier", "parameters": "(SimpleTier tier)", "modifiers": "private", "return": "", "signature": " SimpleTier(SimpleTier tier)", "full_signature": "private  SimpleTier(SimpleTier tier)", "class_method_signature": "SimpleTier.SimpleTier(SimpleTier tier)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "ITier", "signature": "ITier clone()", "full_signature": "public ITier clone()", "class_method_signature": "SimpleTier.clone()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ITripletValue triplet)", "modifiers": "public", "return": "void", "signature": "void add(ITripletValue triplet)", "full_signature": "public void add(ITripletValue triplet)", "class_method_signature": "SimpleTier.add(ITripletValue triplet)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(ITripletValue tripletValue)", "modifiers": "public", "return": "void", "signature": "void intersect(ITripletValue tripletValue)", "full_signature": "public void intersect(ITripletValue tripletValue)", "class_method_signature": "SimpleTier.intersect(ITripletValue tripletValue)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "SimpleTier.size()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(ITripletValue triplet)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(ITripletValue triplet)", "full_signature": "public boolean contains(ITripletValue triplet)", "class_method_signature": "SimpleTier.contains(ITripletValue triplet)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(ITripletValue triplet)", "modifiers": "public", "return": "void", "signature": "void remove(ITripletValue triplet)", "full_signature": "public void remove(ITripletValue triplet)", "class_method_signature": "SimpleTier.remove(ITripletValue triplet)", "testcase": false, "constructor": false}, {"identifier": "removeKey", "parameters": "(int key)", "modifiers": "private", "return": "void", "signature": "void removeKey(int key)", "full_signature": "private void removeKey(int key)", "class_method_signature": "SimpleTier.removeKey(int key)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<ITripletValue>", "signature": "Iterator<ITripletValue> iterator()", "full_signature": "public Iterator<ITripletValue> iterator()", "class_method_signature": "SimpleTier.iterator()", "testcase": false, "constructor": false}, {"identifier": "swapAB", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void swapAB()", "full_signature": "public void swapAB()", "class_method_signature": "SimpleTier.swapAB()", "testcase": false, "constructor": false}, {"identifier": "swapAC", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void swapAC()", "full_signature": "public void swapAC()", "class_method_signature": "SimpleTier.swapAC()", "testcase": false, "constructor": false}, {"identifier": "swapBC", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void swapBC()", "full_signature": "public void swapBC()", "class_method_signature": "SimpleTier.swapBC()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "SimpleTier.toString()", "testcase": false, "constructor": false}, {"identifier": "adjoinRight", "parameters": "(ITier tier)", "modifiers": "public", "return": "void", "signature": "void adjoinRight(ITier tier)", "full_signature": "public void adjoinRight(ITier tier)", "class_method_signature": "SimpleTier.adjoinRight(ITier tier)", "testcase": false, "constructor": false}, {"identifier": "adjoinLeft", "parameters": "(ITier tier)", "modifiers": "public", "return": "void", "signature": "void adjoinLeft(ITier tier)", "full_signature": "public void adjoinLeft(ITier tier)", "class_method_signature": "SimpleTier.adjoinLeft(ITier tier)", "testcase": false, "constructor": false}, {"identifier": "updateSize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateSize()", "full_signature": "private void updateSize()", "class_method_signature": "SimpleTier.updateSize()", "testcase": false, "constructor": false}, {"identifier": "get_keys_73516240_from", "parameters": "(int keys_76325410)", "modifiers": "private", "return": "byte", "signature": "byte get_keys_73516240_from(int keys_76325410)", "full_signature": "private byte get_keys_73516240_from(int keys_76325410)", "class_method_signature": "SimpleTier.get_keys_73516240_from(int keys_76325410)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "SimpleTier.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "get_keys_76325410", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int get_keys_76325410()", "full_signature": "private int get_keys_76325410()", "class_method_signature": "SimpleTier.get_keys_76325410()", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(ITier tier)", "modifiers": "public", "return": "void", "signature": "void intersect(ITier tier)", "full_signature": "public void intersect(ITier tier)", "class_method_signature": "SimpleTier.intersect(ITier tier)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(ITier tier)", "modifiers": "public", "return": "void", "signature": "void union(ITier tier)", "full_signature": "public void union(ITier tier)", "class_method_signature": "SimpleTier.union(ITier tier)", "testcase": false, "constructor": false}, {"identifier": "concretize", "parameters": "(int varName, Value value)", "modifiers": "public", "return": "void", "signature": "void concretize(int varName, Value value)", "full_signature": "public void concretize(int varName, Value value)", "class_method_signature": "SimpleTier.concretize(int varName, Value value)", "testcase": false, "constructor": false}, {"identifier": "valueOfA", "parameters": "()", "modifiers": "public", "return": "Value", "signature": "Value valueOfA()", "full_signature": "public Value valueOfA()", "class_method_signature": "SimpleTier.valueOfA()", "testcase": false, "constructor": false}, {"identifier": "valueOfB", "parameters": "()", "modifiers": "public", "return": "Value", "signature": "Value valueOfB()", "full_signature": "public Value valueOfB()", "class_method_signature": "SimpleTier.valueOfB()", "testcase": false, "constructor": false}, {"identifier": "valueOfC", "parameters": "()", "modifiers": "public", "return": "Value", "signature": "Value valueOfC()", "full_signature": "public Value valueOfC()", "class_method_signature": "SimpleTier.valueOfC()", "testcase": false, "constructor": false}, {"identifier": "inverse", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void inverse()", "full_signature": "public void inverse()", "class_method_signature": "SimpleTier.inverse()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "SimpleTier.equals(Object obj)", "testcase": false, "constructor": false}], "file": "3-sat-core/src/main/java/com/anjlab/sat3/SimpleTier.java"}, "focal_method": {"identifier": "swapAC", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void swapAC()\n    {\n        super.swapAC();\n        \n        if (size == 0)\n        {\n            return;\n        }\n        \n        int keys_o3o1oooo = keys_73516240 & 0x50;\n        int keys_oooo6o4o = keys_73516240 & 0x0A;\n        \n        keys_73516240 = (byte)\n                       ((keys_73516240 & 0xA5)\n                      | ((keys_o3o1oooo >> 3) & 0x1F)\n                      | (keys_oooo6o4o << 3));\n    }", "signature": "void swapAC()", "full_signature": "public void swapAC()", "class_method_signature": "SimpleTier.swapAC()", "testcase": false, "constructor": false, "invocations": ["swapAC"]}, "repository": {"repo_id": 960343, "url": "https://github.com/anjlab/sat3", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 84, "size": 1752, "license": "licensed"}}