{"test_class": {"identifier": "PluginRegisterServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Long USER_ID = 1L;", "modifier": "private static final", "type": "Long", "declarator": "USER_ID = 1L", "var_name": "USER_ID"}, {"original_string": "private static final String ACCESS_TOKEN = \"accessToken\";", "modifier": "private static final", "type": "String", "declarator": "ACCESS_TOKEN = \"accessToken\"", "var_name": "ACCESS_TOKEN"}, {"original_string": "private static final String REFRESH_TOKEN = \"refreshToken\";", "modifier": "private static final", "type": "String", "declarator": "REFRESH_TOKEN = \"refreshToken\"", "var_name": "REFRESH_TOKEN"}, {"original_string": "private static final String PROXY_PLUGIN_ENDPOINT = \"proxyEndpoint\";", "modifier": "private static final", "type": "String", "declarator": "PROXY_PLUGIN_ENDPOINT = \"proxyEndpoint\"", "var_name": "PROXY_PLUGIN_ENDPOINT"}, {"original_string": "private static final String AUTHORIZATION = \"auth\";", "modifier": "private static final", "type": "String", "declarator": "AUTHORIZATION = \"auth\"", "var_name": "AUTHORIZATION"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock\n    private HiveValidator hiveValidator;", "modifier": "@Mock\n    private", "type": "HiveValidator", "declarator": "hiveValidator", "var_name": "hiveValidator"}, {"original_string": "@Mock\n    private PluginService pluginService;", "modifier": "@Mock\n    private", "type": "PluginService", "declarator": "pluginService", "var_name": "pluginService"}, {"original_string": "@Mock\n    private FilterService filterService;", "modifier": "@Mock\n    private", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "@Mock\n    private RpcClient rpcClient;", "modifier": "@Mock\n    private", "type": "RpcClient", "declarator": "rpcClient", "var_name": "rpcClient"}, {"original_string": "@Mock\n    private KafkaTopicService kafkaTopicService;", "modifier": "@Mock\n    private", "type": "KafkaTopicService", "declarator": "kafkaTopicService", "var_name": "kafkaTopicService"}, {"original_string": "@Mock\n    private LongIdGenerator idGenerator;", "modifier": "@Mock\n    private", "type": "LongIdGenerator", "declarator": "idGenerator", "var_name": "idGenerator"}, {"original_string": "@Mock\n    private BaseDeviceService deviceService;", "modifier": "@Mock\n    private", "type": "BaseDeviceService", "declarator": "deviceService", "var_name": "deviceService"}, {"original_string": "@Mock\n    private HttpRestHelper httpRestHelper;", "modifier": "@Mock\n    private", "type": "HttpRestHelper", "declarator": "httpRestHelper", "var_name": "httpRestHelper"}, {"original_string": "@Mock\n    private WebSocketKafkaProxyConfig webSocketKafkaProxyConfig;", "modifier": "@Mock\n    private", "type": "WebSocketKafkaProxyConfig", "declarator": "webSocketKafkaProxyConfig", "var_name": "webSocketKafkaProxyConfig"}, {"original_string": "@Mock\n    private Gson gson;", "modifier": "@Mock\n    private", "type": "Gson", "declarator": "gson", "var_name": "gson"}, {"original_string": "@InjectMocks\n    PluginRegisterService pluginRegisterService;", "modifier": "@InjectMocks", "type": "PluginRegisterService", "declarator": "pluginRegisterService", "var_name": "pluginRegisterService"}], "file": "devicehive-plugin/src/test/java/com/devicehive/service/PluginRegisterServiceTest.java"}, "test_case": {"identifier": "shouldRegisterPlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRegisterPlugin() throws Exception {\n        PluginReqisterQuery pluginReqisterQuery = new PluginReqisterQuery();\n        pluginReqisterQuery.setReturnCommands(true);\n        pluginReqisterQuery.setReturnUpdatedCommands(true);\n        pluginReqisterQuery.setReturnNotifications(true);\n\n        PluginUpdate pluginUpdate = new PluginUpdate();\n\n        given(webSocketKafkaProxyConfig.getProxyPluginConnect()).willReturn(PROXY_PLUGIN_ENDPOINT);\n        given(httpRestHelper.post(any(), any(), any(), any())).willReturn(createJwtTokenVO(ACCESS_TOKEN, REFRESH_TOKEN));\n\n        doAnswer(invocation -> {\n            Object[] args = invocation.getArguments();\n            Request request = (Request)args[0];\n            ResponseConsumer responseConsumer = (ResponseConsumer)args[1];\n            responseConsumer.accept(Response.newBuilder()\n                    .withBody(request.getBody())\n                    .buildSuccess());\n\n            return null;\n        }).when(rpcClient).call(any(), any());\n\n        //when\n        JsonObject actual = (JsonObject) pluginRegisterService.register(1L, pluginReqisterQuery, pluginUpdate, AUTHORIZATION).join().getEntity();\n\n        //then\n        assertEquals(actual.get(ACCESS_TOKEN).getAsString(), ACCESS_TOKEN);\n        assertEquals(actual.get(REFRESH_TOKEN).getAsString(), REFRESH_TOKEN);\n        assertEquals(actual.get(PROXY_PLUGIN_ENDPOINT).getAsString(), PROXY_PLUGIN_ENDPOINT);\n\n        verify(rpcClient, times(0)).call(any(), any());\n    }", "signature": "void shouldRegisterPlugin()", "full_signature": "@Test public void shouldRegisterPlugin()", "class_method_signature": "PluginRegisterServiceTest.shouldRegisterPlugin()", "testcase": true, "constructor": false, "invocations": ["setReturnCommands", "setReturnUpdatedCommands", "setReturnNotifications", "willReturn", "given", "getProxyPluginConnect", "willReturn", "given", "post", "any", "any", "any", "any", "createJwtTokenVO", "call", "when", "doAnswer", "getArguments", "accept", "buildSuccess", "withBody", "newBuilder", "getBody", "any", "any", "getEntity", "join", "register", "assertEquals", "getAsString", "get", "assertEquals", "getAsString", "get", "assertEquals", "getAsString", "get", "call", "verify", "times", "any", "any"]}, "focal_class": {"identifier": "PluginRegisterService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PluginRegisterService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PluginRegisterService.class)", "var_name": "logger"}, {"original_string": "@Value(\"${auth.base.url}\")\n    private String authBaseUrl;", "modifier": "@Value(\"${auth.base.url}\")\n    private", "type": "String", "declarator": "authBaseUrl", "var_name": "authBaseUrl"}, {"original_string": "private final HiveValidator hiveValidator;", "modifier": "private final", "type": "HiveValidator", "declarator": "hiveValidator", "var_name": "hiveValidator"}, {"original_string": "private final PluginService pluginService;", "modifier": "private final", "type": "PluginService", "declarator": "pluginService", "var_name": "pluginService"}, {"original_string": "private final FilterService filterService;", "modifier": "private final", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "private final RpcClient rpcClient;", "modifier": "private final", "type": "RpcClient", "declarator": "rpcClient", "var_name": "rpcClient"}, {"original_string": "private final KafkaTopicService kafkaTopicService;", "modifier": "private final", "type": "KafkaTopicService", "declarator": "kafkaTopicService", "var_name": "kafkaTopicService"}, {"original_string": "private final LongIdGenerator idGenerator;", "modifier": "private final", "type": "LongIdGenerator", "declarator": "idGenerator", "var_name": "idGenerator"}, {"original_string": "private final HttpRestHelper httpRestHelper;", "modifier": "private final", "type": "HttpRestHelper", "declarator": "httpRestHelper", "var_name": "httpRestHelper"}, {"original_string": "private final WebSocketKafkaProxyConfig webSocketKafkaProxyConfig;", "modifier": "private final", "type": "WebSocketKafkaProxyConfig", "declarator": "webSocketKafkaProxyConfig", "var_name": "webSocketKafkaProxyConfig"}, {"original_string": "private final Gson gson;", "modifier": "private final", "type": "Gson", "declarator": "gson", "var_name": "gson"}], "methods": [{"identifier": "PluginRegisterService", "parameters": "(\n            HiveValidator hiveValidator,\n            PluginService pluginService,\n            FilterService filterService, RpcClient rpcClient,\n            KafkaTopicService kafkaTopicService,\n            LongIdGenerator idGenerator,\n            HttpRestHelper httpRestHelper,\n            WebSocketKafkaProxyConfig webSocketKafkaProxyConfig,\n            Gson gson)", "modifiers": "@Autowired public", "return": "", "signature": " PluginRegisterService(\n            HiveValidator hiveValidator,\n            PluginService pluginService,\n            FilterService filterService, RpcClient rpcClient,\n            KafkaTopicService kafkaTopicService,\n            LongIdGenerator idGenerator,\n            HttpRestHelper httpRestHelper,\n            WebSocketKafkaProxyConfig webSocketKafkaProxyConfig,\n            Gson gson)", "full_signature": "@Autowired public  PluginRegisterService(\n            HiveValidator hiveValidator,\n            PluginService pluginService,\n            FilterService filterService, RpcClient rpcClient,\n            KafkaTopicService kafkaTopicService,\n            LongIdGenerator idGenerator,\n            HttpRestHelper httpRestHelper,\n            WebSocketKafkaProxyConfig webSocketKafkaProxyConfig,\n            Gson gson)", "class_method_signature": "PluginRegisterService.PluginRegisterService(\n            HiveValidator hiveValidator,\n            PluginService pluginService,\n            FilterService filterService, RpcClient rpcClient,\n            KafkaTopicService kafkaTopicService,\n            LongIdGenerator idGenerator,\n            HttpRestHelper httpRestHelper,\n            WebSocketKafkaProxyConfig webSocketKafkaProxyConfig,\n            Gson gson)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization)", "modifiers": "public", "return": "CompletableFuture<Response>", "signature": "CompletableFuture<Response> register(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization)", "full_signature": "public CompletableFuture<Response> register(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization)", "class_method_signature": "PluginRegisterService.register(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(PluginVO existingPlugin, PluginUpdateQuery pluginUpdateQuery)", "modifiers": "@Transactional public", "return": "CompletableFuture<Response>", "signature": "CompletableFuture<Response> update(PluginVO existingPlugin, PluginUpdateQuery pluginUpdateQuery)", "full_signature": "@Transactional public CompletableFuture<Response> update(PluginVO existingPlugin, PluginUpdateQuery pluginUpdateQuery)", "class_method_signature": "PluginRegisterService.update(PluginVO existingPlugin, PluginUpdateQuery pluginUpdateQuery)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(PluginVO existingPlugin)", "modifiers": "@Transactional public", "return": "CompletableFuture<Response>", "signature": "CompletableFuture<Response> delete(PluginVO existingPlugin)", "full_signature": "@Transactional public CompletableFuture<Response> delete(PluginVO existingPlugin)", "class_method_signature": "PluginRegisterService.delete(PluginVO existingPlugin)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(String name, String namePattern, String topicName, Integer status, Long userId,\n                                                  String sortField, String sortOrderSt, Integer take, Integer skip,\n                                                  HivePrincipal principal)", "modifiers": "public", "return": "CompletableFuture<List<PluginVO>>", "signature": "CompletableFuture<List<PluginVO>> list(String name, String namePattern, String topicName, Integer status, Long userId,\n                                                  String sortField, String sortOrderSt, Integer take, Integer skip,\n                                                  HivePrincipal principal)", "full_signature": "public CompletableFuture<List<PluginVO>> list(String name, String namePattern, String topicName, Integer status, Long userId,\n                                                  String sortField, String sortOrderSt, Integer take, Integer skip,\n                                                  HivePrincipal principal)", "class_method_signature": "PluginRegisterService.list(String name, String namePattern, String topicName, Integer status, Long userId,\n                                                  String sortField, String sortOrderSt, Integer take, Integer skip,\n                                                  HivePrincipal principal)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(ListPluginRequest listPluginRequest)", "modifiers": "public", "return": "CompletableFuture<List<PluginVO>>", "signature": "CompletableFuture<List<PluginVO>> list(ListPluginRequest listPluginRequest)", "full_signature": "public CompletableFuture<List<PluginVO>> list(ListPluginRequest listPluginRequest)", "class_method_signature": "PluginRegisterService.list(ListPluginRequest listPluginRequest)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String name, String namePattern, String topicName,\n                                                        Integer status, Long userId, HivePrincipal principal)", "modifiers": "public", "return": "CompletableFuture<EntityCountResponse>", "signature": "CompletableFuture<EntityCountResponse> count(String name, String namePattern, String topicName,\n                                                        Integer status, Long userId, HivePrincipal principal)", "full_signature": "public CompletableFuture<EntityCountResponse> count(String name, String namePattern, String topicName,\n                                                        Integer status, Long userId, HivePrincipal principal)", "class_method_signature": "PluginRegisterService.count(String name, String namePattern, String topicName,\n                                                        Integer status, Long userId, HivePrincipal principal)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(CountPluginRequest countPluginRequest)", "modifiers": "public", "return": "CompletableFuture<EntityCountResponse>", "signature": "CompletableFuture<EntityCountResponse> count(CountPluginRequest countPluginRequest)", "full_signature": "public CompletableFuture<EntityCountResponse> count(CountPluginRequest countPluginRequest)", "class_method_signature": "PluginRegisterService.count(CountPluginRequest countPluginRequest)", "testcase": false, "constructor": false}, {"identifier": "persistPlugin", "parameters": "(PluginUpdate pluginUpdate, String filterString, Long userId)", "modifiers": "private", "return": "CompletableFuture<PluginVO>", "signature": "CompletableFuture<PluginVO> persistPlugin(PluginUpdate pluginUpdate, String filterString, Long userId)", "full_signature": "private CompletableFuture<PluginVO> persistPlugin(PluginUpdate pluginUpdate, String filterString, Long userId)", "class_method_signature": "PluginRegisterService.persistPlugin(PluginUpdate pluginUpdate, String filterString, Long userId)", "testcase": false, "constructor": false}, {"identifier": "updatePlugin", "parameters": "(PluginVO existingPlugin, PluginUpdateQuery pluginUpdateQuery)", "modifiers": "private", "return": "CompletableFuture<PluginVO>", "signature": "CompletableFuture<PluginVO> updatePlugin(PluginVO existingPlugin, PluginUpdateQuery pluginUpdateQuery)", "full_signature": "private CompletableFuture<PluginVO> updatePlugin(PluginVO existingPlugin, PluginUpdateQuery pluginUpdateQuery)", "class_method_signature": "PluginRegisterService.updatePlugin(PluginVO existingPlugin, PluginUpdateQuery pluginUpdateQuery)", "testcase": false, "constructor": false}, {"identifier": "checkAuthServiceAvailable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkAuthServiceAvailable()", "full_signature": "private void checkAuthServiceAvailable()", "class_method_signature": "PluginRegisterService.checkAuthServiceAvailable()", "testcase": false, "constructor": false}, {"identifier": "validateSubscription", "parameters": "(PluginReqisterQuery pluginReqisterQuery)", "modifiers": "private", "return": "void", "signature": "void validateSubscription(PluginReqisterQuery pluginReqisterQuery)", "full_signature": "private void validateSubscription(PluginReqisterQuery pluginReqisterQuery)", "class_method_signature": "PluginRegisterService.validateSubscription(PluginReqisterQuery pluginReqisterQuery)", "testcase": false, "constructor": false}, {"identifier": "createPluginTokens", "parameters": "(String topicName, String authorization)", "modifiers": "private", "return": "JwtTokenVO", "signature": "JwtTokenVO createPluginTokens(String topicName, String authorization)", "full_signature": "private JwtTokenVO createPluginTokens(String topicName, String authorization)", "class_method_signature": "PluginRegisterService.createPluginTokens(String topicName, String authorization)", "testcase": false, "constructor": false}, {"identifier": "createTokenResponse", "parameters": "(String topicName, JwtTokenVO jwtTokenVO)", "modifiers": "private", "return": "JsonObject", "signature": "JsonObject createTokenResponse(String topicName, JwtTokenVO jwtTokenVO)", "full_signature": "private JsonObject createTokenResponse(String topicName, JwtTokenVO jwtTokenVO)", "class_method_signature": "PluginRegisterService.createTokenResponse(String topicName, JwtTokenVO jwtTokenVO)", "testcase": false, "constructor": false}], "file": "devicehive-plugin/src/main/java/com/devicehive/service/PluginRegisterService.java"}, "focal_method": {"identifier": "register", "parameters": "(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization)", "modifiers": "public", "return": "CompletableFuture<Response>", "body": "public CompletableFuture<Response> register(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization) {\n        validateSubscription(pluginReqisterQuery);\n\n        checkAuthServiceAvailable();\n\n        return persistPlugin(pluginUpdate, pluginReqisterQuery.constructFilterString(), userId).thenApply(pluginVO -> {\n            JwtTokenVO jwtTokenVO = createPluginTokens(pluginVO.getTopicName(), authorization);\n            JsonObject response = createTokenResponse(pluginVO.getTopicName(), jwtTokenVO);\n\n            return ResponseFactory.response(CREATED, response, PLUGIN_SUBMITTED);\n        });\n    }", "signature": "CompletableFuture<Response> register(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization)", "full_signature": "public CompletableFuture<Response> register(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization)", "class_method_signature": "PluginRegisterService.register(Long userId, PluginReqisterQuery pluginReqisterQuery, PluginUpdate pluginUpdate,\n                                                String authorization)", "testcase": false, "constructor": false, "invocations": ["validateSubscription", "checkAuthServiceAvailable", "thenApply", "persistPlugin", "constructFilterString", "createPluginTokens", "getTopicName", "createTokenResponse", "getTopicName", "response"]}, "repository": {"repo_id": 10476504, "url": "https://github.com/devicehive/devicehive-java-server", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 221, "size": 9842, "license": "licensed"}}