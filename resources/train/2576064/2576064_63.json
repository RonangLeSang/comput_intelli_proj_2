{"test_class": {"identifier": "TestRegManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String deviceFamilyIdentity1 = \"Sensors\";", "modifier": "private", "type": "String", "declarator": "deviceFamilyIdentity1 = \"Sensors\"", "var_name": "deviceFamilyIdentity1"}, {"original_string": "private String deviceName_1 = \"Device1\";", "modifier": "private", "type": "String", "declarator": "deviceName_1 = \"Device1\"", "var_name": "deviceName_1"}, {"original_string": "private String deviceType = \"lightSensor\";", "modifier": "private", "type": "String", "declarator": "deviceType = \"lightSensor\"", "var_name": "deviceType"}, {"original_string": "private String deviceDescription = \"this is a good device\";", "modifier": "private", "type": "String", "declarator": "deviceDescription = \"this is a good device\"", "var_name": "deviceDescription"}, {"original_string": "private String deviceConnectionType1 = \"wifi\";", "modifier": "private", "type": "String", "declarator": "deviceConnectionType1 = \"wifi\"", "var_name": "deviceConnectionType1"}, {"original_string": "private String deviceLocation1 = \"Room1\";", "modifier": "private", "type": "String", "declarator": "deviceLocation1 = \"Room1\"", "var_name": "deviceLocation1"}, {"original_string": "private String deviceProvider1 = \"INTEL\";", "modifier": "private", "type": "String", "declarator": "deviceProvider1 = \"INTEL\"", "var_name": "deviceProvider1"}, {"original_string": "private String deviceId = \"liam.societies.org/first/service\";", "modifier": "private", "type": "String", "declarator": "deviceId = \"liam.societies.org/first/service\"", "var_name": "deviceId"}, {"original_string": "private boolean contextSource1 = true;", "modifier": "private", "type": "boolean", "declarator": "contextSource1 = true", "var_name": "contextSource1"}, {"original_string": "private String deviceFamilyIdentity2 = \"Actuators\";", "modifier": "private", "type": "String", "declarator": "deviceFamilyIdentity2 = \"Actuators\"", "var_name": "deviceFamilyIdentity2"}, {"original_string": "private String deviceName_2 = \"Device2\";", "modifier": "private", "type": "String", "declarator": "deviceName_2 = \"Device2\"", "var_name": "deviceName_2"}, {"original_string": "private String deviceType2 = \"TempSensor\";", "modifier": "private", "type": "String", "declarator": "deviceType2 = \"TempSensor\"", "var_name": "deviceType2"}, {"original_string": "private String deviceDescription2 = \"this is a fair device\";", "modifier": "private", "type": "String", "declarator": "deviceDescription2 = \"this is a fair device\"", "var_name": "deviceDescription2"}, {"original_string": "private String deviceConnectionType2 = \"Zigbee\";", "modifier": "private", "type": "String", "declarator": "deviceConnectionType2 = \"Zigbee\"", "var_name": "deviceConnectionType2"}, {"original_string": "private String deviceLocation2 = \"Room2\";", "modifier": "private", "type": "String", "declarator": "deviceLocation2 = \"Room2\"", "var_name": "deviceLocation2"}, {"original_string": "private String deviceProvider2 = \"IBM\";", "modifier": "private", "type": "String", "declarator": "deviceProvider2 = \"IBM\"", "var_name": "deviceProvider2"}, {"original_string": "private String deviceId2 = \"liam.societies.org/second/service\";", "modifier": "private", "type": "String", "declarator": "deviceId2 = \"liam.societies.org/second/service\"", "var_name": "deviceId2"}, {"original_string": "private boolean contextSource2 = false;", "modifier": "private", "type": "boolean", "declarator": "contextSource2 = false", "var_name": "contextSource2"}, {"original_string": "private String deviceFamilyIdentity3 = \"GPS\";", "modifier": "private", "type": "String", "declarator": "deviceFamilyIdentity3 = \"GPS\"", "var_name": "deviceFamilyIdentity3"}, {"original_string": "private String deviceName_3 = \"Device3\";", "modifier": "private", "type": "String", "declarator": "deviceName_3 = \"Device3\"", "var_name": "deviceName_3"}, {"original_string": "private String deviceType3 = \"GPSSensor\";", "modifier": "private", "type": "String", "declarator": "deviceType3 = \"GPSSensor\"", "var_name": "deviceType3"}, {"original_string": "private String deviceDescription3 = \"this is a bad device\";", "modifier": "private", "type": "String", "declarator": "deviceDescription3 = \"this is a bad device\"", "var_name": "deviceDescription3"}, {"original_string": "private String deviceConnectionType3 = \"Bluetooth\";", "modifier": "private", "type": "String", "declarator": "deviceConnectionType3 = \"Bluetooth\"", "var_name": "deviceConnectionType3"}, {"original_string": "private String deviceLocation3 = \"Room3\";", "modifier": "private", "type": "String", "declarator": "deviceLocation3 = \"Room3\"", "var_name": "deviceLocation3"}, {"original_string": "private String deviceProvider3 = \"MICROSOFT\";", "modifier": "private", "type": "String", "declarator": "deviceProvider3 = \"MICROSOFT\"", "var_name": "deviceProvider3"}, {"original_string": "private String deviceId3 = \"liam.societies.org/third/service\";", "modifier": "private", "type": "String", "declarator": "deviceId3 = \"liam.societies.org/third/service\"", "var_name": "deviceId3"}, {"original_string": "private boolean contextSource3 = true;", "modifier": "private", "type": "boolean", "declarator": "contextSource3 = true", "var_name": "contextSource3"}, {"original_string": "private BundleContext context;", "modifier": "private", "type": "BundleContext", "declarator": "context", "var_name": "context"}, {"original_string": "private DeviceRegistry registry;", "modifier": "private", "type": "DeviceRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private RegManager regmanager;", "modifier": "private", "type": "RegManager", "declarator": "regmanager", "var_name": "regmanager"}, {"original_string": "private PubsubClient pubSubManager;", "modifier": "private", "type": "PubsubClient", "declarator": "pubSubManager", "var_name": "pubSubManager"}, {"original_string": "private DeviceCommonInfo device_1;", "modifier": "private", "type": "DeviceCommonInfo", "declarator": "device_1", "var_name": "device_1"}, {"original_string": "private DeviceCommonInfo device_2;", "modifier": "private", "type": "DeviceCommonInfo", "declarator": "device_2", "var_name": "device_2"}, {"original_string": "private DeviceCommonInfo device_3;", "modifier": "private", "type": "DeviceCommonInfo", "declarator": "device_3", "var_name": "device_3"}, {"original_string": "private String CSSNodeID = \"liam@societies.org\";", "modifier": "private", "type": "String", "declarator": "CSSNodeID = \"liam@societies.org\"", "var_name": "CSSNodeID"}, {"original_string": "private String node = \"DEVICE_REGISTERED\";", "modifier": "private", "type": "String", "declarator": "node = \"DEVICE_REGISTERED\"", "var_name": "node"}, {"original_string": "private String EVENTING_NODE_NAME = \"DEVICE_REGISTERED\";", "modifier": "private", "type": "String", "declarator": "EVENTING_NODE_NAME = \"DEVICE_REGISTERED\"", "var_name": "EVENTING_NODE_NAME"}, {"original_string": "private String EVENTING_NODE_NAME1 = \"DEVICE_DISCONNECTED\";", "modifier": "private", "type": "String", "declarator": "EVENTING_NODE_NAME1 = \"DEVICE_DISCONNECTED\"", "var_name": "EVENTING_NODE_NAME1"}, {"original_string": "private IIdentityManager idManager;", "modifier": "private", "type": "IIdentityManager", "declarator": "idManager", "var_name": "idManager"}, {"original_string": "private DmEvent dmEventMock;", "modifier": "private", "type": "DmEvent", "declarator": "dmEventMock", "var_name": "dmEventMock"}, {"original_string": "private DmEvent dmEvent1Mock;", "modifier": "private", "type": "DmEvent", "declarator": "dmEvent1Mock", "var_name": "dmEvent1Mock"}, {"original_string": "private ICommManager commManagerMock;", "modifier": "private", "type": "ICommManager", "declarator": "commManagerMock", "var_name": "commManagerMock"}, {"original_string": "private IIdentityManager identityManagerMock;", "modifier": "private", "type": "IIdentityManager", "declarator": "identityManagerMock", "var_name": "identityManagerMock"}, {"original_string": "private INetworkNode iNetworkNodeMock;", "modifier": "private", "type": "INetworkNode", "declarator": "iNetworkNodeMock", "var_name": "iNetworkNodeMock"}, {"original_string": "private PubsubClient pubSubManagerMock;", "modifier": "private", "type": "PubsubClient", "declarator": "pubSubManagerMock", "var_name": "pubSubManagerMock"}, {"original_string": "private DmCommManager dmCommManagerMock;", "modifier": "private", "type": "DmCommManager", "declarator": "dmCommManagerMock", "var_name": "dmCommManagerMock"}], "file": "css-modules/device-mgmt/RegSynchroniser/src/test/java/org/societies/css/devicemgmt/RegSynchroniser/impl/TestRegManager.java"}, "test_case": {"identifier": "testAddDevice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddDevice() throws Exception {\n\t\t\n\t\t\n\n        boolean retValue = false;\n        \n        RegManager regmanager = new RegManager(\n                this.context);\n        dmCommManagerMock = mock(DmCommManager.class);\n        when(commManagerMock.getIdManager()).thenReturn(identityManagerMock);\t\n\t\twhen(identityManagerMock.getThisNetworkNode()).thenReturn(iNetworkNodeMock);\n\t\t//\n\t\t//when(iNetworkNodeMock.getJid()).thenReturn(\"node1\");\n\t\t//\n\t\tregmanager.setCommManager(commManagerMock);\n\n        DeviceRegistry registry = DeviceRegistry.getInstance();\n        registry.setCommManager(dmCommManagerMock);\n        assertTrue(null != registry);\n        registry.clearRegistry();\n        assertEquals(0, registry.registrySize());\n\n        try {\n            retValue = regmanager.addDevice(device_1, CSSNodeID);\n            assertTrue(retValue);\n            retValue = regmanager.addDevice(device_2, CSSNodeID);\n            assertTrue(retValue);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n        assertEquals(2, registry.registrySize());\n\n        assertEquals(2, registry.findAllDevices().size());\n        \n        assertEquals(2, registry.registrySize());\n\n        assertEquals(2, registry.findAllDevices().size());\n\n        assertEquals(device_1, registry.findDevice(device_1.getDeviceID()));\n        assertEquals(device_2, registry.findDevice(device_2.getDeviceID()));\n\n\t}", "signature": "void testAddDevice()", "full_signature": "@Test public void testAddDevice()", "class_method_signature": "TestRegManager.testAddDevice()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getIdManager", "thenReturn", "when", "getThisNetworkNode", "setCommManager", "getInstance", "setCommManager", "assertTrue", "clearRegistry", "assertEquals", "registrySize", "addDevice", "assertTrue", "addDevice", "assertTrue", "printStackTrace", "assertEquals", "registrySize", "assertEquals", "size", "findAllDevices", "assertEquals", "registrySize", "assertEquals", "size", "findAllDevices", "assertEquals", "findDevice", "getDeviceID", "assertEquals", "findDevice", "getDeviceID"]}, "focal_class": {"identifier": "RegManager", "superclass": "", "interfaces": "implements ILocalDevice, Subscriber, BundleContextAware", "fields": [{"original_string": "private static Logger LOG = LoggerFactory.getLogger(RegManager.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RegManager.class)", "var_name": "LOG"}, {"original_string": "private IDeviceRegistry deviceRegistry;", "modifier": "private", "type": "IDeviceRegistry", "declarator": "deviceRegistry", "var_name": "deviceRegistry"}, {"original_string": "private BundleContext bundleContext;", "modifier": "private", "type": "BundleContext", "declarator": "bundleContext", "var_name": "bundleContext"}, {"original_string": "private PubsubClient pubSubManager;", "modifier": "private", "type": "PubsubClient", "declarator": "pubSubManager", "var_name": "pubSubManager"}, {"original_string": "private IIdentityManager idManager;", "modifier": "private", "type": "IIdentityManager", "declarator": "idManager", "var_name": "idManager"}, {"original_string": "private ICommManager commManager;", "modifier": "private", "type": "ICommManager", "declarator": "commManager", "var_name": "commManager"}, {"original_string": "IIdentity pubsubID = null;", "modifier": "", "type": "IIdentity", "declarator": "pubsubID = null", "var_name": "pubsubID"}], "methods": [{"identifier": "RegManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " RegManager()", "full_signature": "public  RegManager()", "class_method_signature": "RegManager.RegManager()", "testcase": false, "constructor": true}, {"identifier": "RegManager", "parameters": "(BundleContext bundlecontext)", "modifiers": "public", "return": "", "signature": " RegManager(BundleContext bundlecontext)", "full_signature": "public  RegManager(BundleContext bundlecontext)", "class_method_signature": "RegManager.RegManager(BundleContext bundlecontext)", "testcase": false, "constructor": true}, {"identifier": "addDevice", "parameters": "(DeviceCommonInfo device, String CSSNodeID)", "modifiers": "public", "return": "boolean", "signature": "boolean addDevice(DeviceCommonInfo device, String CSSNodeID)", "full_signature": "public boolean addDevice(DeviceCommonInfo device, String CSSNodeID)", "class_method_signature": "RegManager.addDevice(DeviceCommonInfo device, String CSSNodeID)", "testcase": false, "constructor": false}, {"identifier": "addDevices", "parameters": "(Collection<DeviceCommonInfo> deviceCollection, String CSSNodeID)", "modifiers": "public", "return": "boolean", "signature": "boolean addDevices(Collection<DeviceCommonInfo> deviceCollection, String CSSNodeID)", "full_signature": "public boolean addDevices(Collection<DeviceCommonInfo> deviceCollection, String CSSNodeID)", "class_method_signature": "RegManager.addDevices(Collection<DeviceCommonInfo> deviceCollection, String CSSNodeID)", "testcase": false, "constructor": false}, {"identifier": "removeDevice", "parameters": "(DeviceCommonInfo device, String CSSNodeID)", "modifiers": "public", "return": "boolean", "signature": "boolean removeDevice(DeviceCommonInfo device, String CSSNodeID)", "full_signature": "public boolean removeDevice(DeviceCommonInfo device, String CSSNodeID)", "class_method_signature": "RegManager.removeDevice(DeviceCommonInfo device, String CSSNodeID)", "testcase": false, "constructor": false}, {"identifier": "removeDevices", "parameters": "(\n            Collection<DeviceCommonInfo> deviceCollection, String CSSNodeID)", "modifiers": "public", "return": "boolean", "signature": "boolean removeDevices(\n            Collection<DeviceCommonInfo> deviceCollection, String CSSNodeID)", "full_signature": "public boolean removeDevices(\n            Collection<DeviceCommonInfo> deviceCollection, String CSSNodeID)", "class_method_signature": "RegManager.removeDevices(\n            Collection<DeviceCommonInfo> deviceCollection, String CSSNodeID)", "testcase": false, "constructor": false}, {"identifier": "clearRegistry", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean clearRegistry()", "full_signature": "public boolean clearRegistry()", "class_method_signature": "RegManager.clearRegistry()", "testcase": false, "constructor": false}, {"identifier": "setBundleContext", "parameters": "(BundleContext arg0)", "modifiers": "@Override public", "return": "void", "signature": "void setBundleContext(BundleContext arg0)", "full_signature": "@Override public void setBundleContext(BundleContext arg0)", "class_method_signature": "RegManager.setBundleContext(BundleContext arg0)", "testcase": false, "constructor": false}, {"identifier": "removedevice", "parameters": "(String deviceID, String CSSNodeID)", "modifiers": "public", "return": "boolean", "signature": "boolean removedevice(String deviceID, String CSSNodeID)", "full_signature": "public boolean removedevice(String deviceID, String CSSNodeID)", "class_method_signature": "RegManager.removedevice(String deviceID, String CSSNodeID)", "testcase": false, "constructor": false}, {"identifier": "getPubSubManager", "parameters": "()", "modifiers": "public", "return": "PubsubClient", "signature": "PubsubClient getPubSubManager()", "full_signature": "public PubsubClient getPubSubManager()", "class_method_signature": "RegManager.getPubSubManager()", "testcase": false, "constructor": false}, {"identifier": "setPubSubManager", "parameters": "(PubsubClient pubSubManager)", "modifiers": "public", "return": "void", "signature": "void setPubSubManager(PubsubClient pubSubManager)", "full_signature": "public void setPubSubManager(PubsubClient pubSubManager)", "class_method_signature": "RegManager.setPubSubManager(PubsubClient pubSubManager)", "testcase": false, "constructor": false}, {"identifier": "getCommManager", "parameters": "()", "modifiers": "public", "return": "ICommManager", "signature": "ICommManager getCommManager()", "full_signature": "public ICommManager getCommManager()", "class_method_signature": "RegManager.getCommManager()", "testcase": false, "constructor": false}, {"identifier": "setCommManager", "parameters": "(ICommManager commManager)", "modifiers": "public", "return": "void", "signature": "void setCommManager(ICommManager commManager)", "full_signature": "public void setCommManager(ICommManager commManager)", "class_method_signature": "RegManager.setCommManager(ICommManager commManager)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "RegManager.init()", "testcase": false, "constructor": false}, {"identifier": "pubsubEvent", "parameters": "(IIdentity pubsubService, String node, String itemId, Object payload)", "modifiers": "@Override public", "return": "void", "signature": "void pubsubEvent(IIdentity pubsubService, String node, String itemId, Object payload)", "full_signature": "@Override public void pubsubEvent(IIdentity pubsubService, String node, String itemId, Object payload)", "class_method_signature": "RegManager.pubsubEvent(IIdentity pubsubService, String node, String itemId, Object payload)", "testcase": false, "constructor": false}], "file": "css-modules/device-mgmt/RegSynchroniser/src/main/java/org/societies/css/devicemgmt/RegSynchroniser/impl/RegManager.java"}, "focal_method": {"identifier": "addDevice", "parameters": "(DeviceCommonInfo device, String CSSNodeID)", "modifiers": "public", "return": "boolean", "body": "public boolean addDevice(DeviceCommonInfo device, String CSSNodeID) throws Exception {\n\n    \tLOG.info(\"+++ RegManager addDevice called to add device: \" +device.getDeviceID());\n        boolean retValue = true;\n        \n        retValue = LocalDevices.addDevice(device, CSSNodeID);\n        \n        return retValue;\n    }", "signature": "boolean addDevice(DeviceCommonInfo device, String CSSNodeID)", "full_signature": "public boolean addDevice(DeviceCommonInfo device, String CSSNodeID)", "class_method_signature": "RegManager.addDevice(DeviceCommonInfo device, String CSSNodeID)", "testcase": false, "constructor": false, "invocations": ["info", "getDeviceID", "addDevice"]}, "repository": {"repo_id": 2576064, "url": "https://github.com/societies/SOCIETIES-Platform", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 25, "size": 122500, "license": "licensed"}}