{"test_class": {"identifier": "TestServiceMethodTranslator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String methodsArray [] = {\"getGreeting()\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"getGreeting(String appendToMessage)\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"getAnotherGreeting(String appendToMessage, int index)\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"getParcelable(String value, int number, org.societies.android.TestParcel parcel)\"};", "modifier": "private static", "type": "String", "declarator": "methodsArray [] = {\"getGreeting()\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"getGreeting(String appendToMessage)\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"getAnotherGreeting(String appendToMessage, int index)\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"getParcelable(String value, int number, org.societies.android.TestParcel parcel)\"}", "var_name": "methodsArray"}, {"original_string": "private static String METHOD_1 = \"getGreeting\";", "modifier": "private static", "type": "String", "declarator": "METHOD_1 = \"getGreeting\"", "var_name": "METHOD_1"}, {"original_string": "private static String METHOD_2 = \"getAnotherGreeting\";", "modifier": "private static", "type": "String", "declarator": "METHOD_2 = \"getAnotherGreeting\"", "var_name": "METHOD_2"}, {"original_string": "private static String METHOD_3 = \"getParcelable\";", "modifier": "private static", "type": "String", "declarator": "METHOD_3 = \"getParcelable\"", "var_name": "METHOD_3"}, {"original_string": "private static String METHOD_NON_EXIST = \"doesNotExist()\";", "modifier": "private static", "type": "String", "declarator": "METHOD_NON_EXIST = \"doesNotExist()\"", "var_name": "METHOD_NON_EXIST"}, {"original_string": "private static String PARAM_1_NAME = \"appendToMessage\";", "modifier": "private static", "type": "String", "declarator": "PARAM_1_NAME = \"appendToMessage\"", "var_name": "PARAM_1_NAME"}, {"original_string": "private static String PARAM_2_NAME = \"index\";", "modifier": "private static", "type": "String", "declarator": "PARAM_2_NAME = \"index\"", "var_name": "PARAM_2_NAME"}, {"original_string": "private static String PARAM_3_NAME = \"value\";", "modifier": "private static", "type": "String", "declarator": "PARAM_3_NAME = \"value\"", "var_name": "PARAM_3_NAME"}, {"original_string": "private static String PARAM_4_NAME = \"number\";", "modifier": "private static", "type": "String", "declarator": "PARAM_4_NAME = \"number\"", "var_name": "PARAM_4_NAME"}, {"original_string": "private static String PARAM_5_NAME = \"parcel\";", "modifier": "private static", "type": "String", "declarator": "PARAM_5_NAME = \"parcel\"", "var_name": "PARAM_5_NAME"}, {"original_string": "private static String PARAM_1_TYPE = \"String\";", "modifier": "private static", "type": "String", "declarator": "PARAM_1_TYPE = \"String\"", "var_name": "PARAM_1_TYPE"}, {"original_string": "private static String PARAM_2_TYPE = \"int\";", "modifier": "private static", "type": "String", "declarator": "PARAM_2_TYPE = \"int\"", "var_name": "PARAM_2_TYPE"}, {"original_string": "private static String PARAM_3_TYPE = \"long\";", "modifier": "private static", "type": "String", "declarator": "PARAM_3_TYPE = \"long\"", "var_name": "PARAM_3_TYPE"}, {"original_string": "private static String PARAM_4_TYPE = \"double\";", "modifier": "private static", "type": "String", "declarator": "PARAM_4_TYPE = \"double\"", "var_name": "PARAM_4_TYPE"}, {"original_string": "private static String PARAM_5_TYPE = \"float\";", "modifier": "private static", "type": "String", "declarator": "PARAM_5_TYPE = \"float\"", "var_name": "PARAM_5_TYPE"}, {"original_string": "private static String PARAM_6_TYPE = \"byte\";", "modifier": "private static", "type": "String", "declarator": "PARAM_6_TYPE = \"byte\"", "var_name": "PARAM_6_TYPE"}, {"original_string": "private static String PARAM_7_TYPE = \"char\";", "modifier": "private static", "type": "String", "declarator": "PARAM_7_TYPE = \"char\"", "var_name": "PARAM_7_TYPE"}, {"original_string": "private static String PARAM_8_TYPE = \"boolean\";", "modifier": "private static", "type": "String", "declarator": "PARAM_8_TYPE = \"boolean\"", "var_name": "PARAM_8_TYPE"}, {"original_string": "private static String PARAM_9_TYPE = \"short\";", "modifier": "private static", "type": "String", "declarator": "PARAM_9_TYPE = \"short\"", "var_name": "PARAM_9_TYPE"}, {"original_string": "private static String PARAM_10_TYPE = \"org.societies.android.TestParcel\";", "modifier": "private static", "type": "String", "declarator": "PARAM_10_TYPE = \"org.societies.android.TestParcel\"", "var_name": "PARAM_10_TYPE"}, {"original_string": "private static String PARAM_1_TYPE_CAP = \"String\";", "modifier": "private static", "type": "String", "declarator": "PARAM_1_TYPE_CAP = \"String\"", "var_name": "PARAM_1_TYPE_CAP"}, {"original_string": "private static String PARAM_2_TYPE_CAP = \"Int\";", "modifier": "private static", "type": "String", "declarator": "PARAM_2_TYPE_CAP = \"Int\"", "var_name": "PARAM_2_TYPE_CAP"}, {"original_string": "private static String PARAM_3_TYPE_CAP = \"Long\";", "modifier": "private static", "type": "String", "declarator": "PARAM_3_TYPE_CAP = \"Long\"", "var_name": "PARAM_3_TYPE_CAP"}, {"original_string": "private static String PARAM_4_TYPE_CAP = \"Double\";", "modifier": "private static", "type": "String", "declarator": "PARAM_4_TYPE_CAP = \"Double\"", "var_name": "PARAM_4_TYPE_CAP"}], "file": "android/client-frwk/Examples/CoreInterfaces/src/test/java/org/societies/android/platform/utilities/TestServiceMethodTranslator.java"}, "test_case": {"identifier": "testGetMethodParameterName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetMethodParameterName() {\n\t\tassertEquals(null, ServiceMethodTranslator.getMethodParameterName(methodsArray[0], 0));\n\t\tassertEquals(null, ServiceMethodTranslator.getMethodParameterName(methodsArray[0], 1));\n\t\tassertEquals(PARAM_1_NAME, ServiceMethodTranslator.getMethodParameterName(methodsArray[1], 0));\n\t\tassertEquals(null, ServiceMethodTranslator.getMethodParameterName(methodsArray[1], 1));\n\t\tassertEquals(PARAM_1_NAME, ServiceMethodTranslator.getMethodParameterName(methodsArray[2], 0));\n\t\tassertEquals(PARAM_2_NAME, ServiceMethodTranslator.getMethodParameterName(methodsArray[2], 1));\n\t\tassertEquals(null, ServiceMethodTranslator.getMethodParameterName(methodsArray[2], 2));\n\t\tassertEquals(PARAM_3_NAME, ServiceMethodTranslator.getMethodParameterName(methodsArray[3], 0));\n\t\tassertEquals(PARAM_4_NAME, ServiceMethodTranslator.getMethodParameterName(methodsArray[3], 1));\n\t\tassertEquals(PARAM_5_NAME, ServiceMethodTranslator.getMethodParameterName(methodsArray[3], 2));\n\t\tassertEquals(null, ServiceMethodTranslator.getMethodParameterName(methodsArray[3], 3));\n\t}", "signature": "void testGetMethodParameterName()", "full_signature": "@Test public void testGetMethodParameterName()", "class_method_signature": "TestServiceMethodTranslator.testGetMethodParameterName()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName", "assertEquals", "getMethodParameterName"]}, "focal_class": {"identifier": "ServiceMethodTranslator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ParameterStart = \"(\";", "modifier": "private static final", "type": "String", "declarator": "ParameterStart = \"(\"", "var_name": "ParameterStart"}, {"original_string": "private static final String ParameterEnd = \")\";", "modifier": "private static final", "type": "String", "declarator": "ParameterEnd = \")\"", "var_name": "ParameterEnd"}, {"original_string": "private static final String PACKAGE_SEPARATOR = \".\";", "modifier": "private static final", "type": "String", "declarator": "PACKAGE_SEPARATOR = \".\"", "var_name": "PACKAGE_SEPARATOR"}, {"original_string": "private static final String ParameterDelimiter = \",\";", "modifier": "private static final", "type": "String", "declarator": "ParameterDelimiter = \",\"", "var_name": "ParameterDelimiter"}, {"original_string": "private static final String ParameterSeparator = \" \";", "modifier": "private static final", "type": "String", "declarator": "ParameterSeparator = \" \"", "var_name": "ParameterSeparator"}, {"original_string": "public static final String JAVA_LANG_PREFIX = \"java.lang.\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_LANG_PREFIX = \"java.lang.\"", "var_name": "JAVA_LANG_PREFIX"}, {"original_string": "public static final String ANDROID_OS_PREFIX = \"android.os.\";", "modifier": "public static final", "type": "String", "declarator": "ANDROID_OS_PREFIX = \"android.os.\"", "var_name": "ANDROID_OS_PREFIX"}, {"original_string": "public static final String JAVA_PRIMITIVES [] = {\"int\", \"long\", \"double\", \"float\", \"byte\", \"char\", \"boolean\", \"short\"};", "modifier": "public static final", "type": "String", "declarator": "JAVA_PRIMITIVES [] = {\"int\", \"long\", \"double\", \"float\", \"byte\", \"char\", \"boolean\", \"short\"}", "var_name": "JAVA_PRIMITIVES"}, {"original_string": "public static final String JAVA_LANG_CLASSES [] = {\"String\"};", "modifier": "public static final", "type": "String", "declarator": "JAVA_LANG_CLASSES [] = {\"String\"}", "var_name": "JAVA_LANG_CLASSES"}], "methods": [{"identifier": "getMethodIndex", "parameters": "(String [] methodsArray, String methodName)", "modifiers": "public static", "return": "int", "signature": "int getMethodIndex(String [] methodsArray, String methodName)", "full_signature": "public static int getMethodIndex(String [] methodsArray, String methodName)", "class_method_signature": "ServiceMethodTranslator.getMethodIndex(String [] methodsArray, String methodName)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "(String [] methodsArray, int index)", "modifiers": "public static", "return": "String", "signature": "String getMethodName(String [] methodsArray, int index)", "full_signature": "public static String getMethodName(String [] methodsArray, int index)", "class_method_signature": "ServiceMethodTranslator.getMethodName(String [] methodsArray, int index)", "testcase": false, "constructor": false}, {"identifier": "getMethodSignature", "parameters": "(String [] methodsArray, int index)", "modifiers": "public static", "return": "String", "signature": "String getMethodSignature(String [] methodsArray, int index)", "full_signature": "public static String getMethodSignature(String [] methodsArray, int index)", "class_method_signature": "ServiceMethodTranslator.getMethodSignature(String [] methodsArray, int index)", "testcase": false, "constructor": false}, {"identifier": "getParameterNumber", "parameters": "(String methodName)", "modifiers": "public static", "return": "int", "signature": "int getParameterNumber(String methodName)", "full_signature": "public static int getParameterNumber(String methodName)", "class_method_signature": "ServiceMethodTranslator.getParameterNumber(String methodName)", "testcase": false, "constructor": false}, {"identifier": "getMethodParameterType", "parameters": "(String methodName, int parameter)", "modifiers": "public static", "return": "String", "signature": "String getMethodParameterType(String methodName, int parameter)", "full_signature": "public static String getMethodParameterType(String methodName, int parameter)", "class_method_signature": "ServiceMethodTranslator.getMethodParameterType(String methodName, int parameter)", "testcase": false, "constructor": false}, {"identifier": "getMethodParameterTypeCapitalised", "parameters": "(String methodName, int parameter)", "modifiers": "public static", "return": "String", "signature": "String getMethodParameterTypeCapitalised(String methodName, int parameter)", "full_signature": "public static String getMethodParameterTypeCapitalised(String methodName, int parameter)", "class_method_signature": "ServiceMethodTranslator.getMethodParameterTypeCapitalised(String methodName, int parameter)", "testcase": false, "constructor": false}, {"identifier": "getMethodParameterTypesCapitalised", "parameters": "(String methodName)", "modifiers": "public static", "return": "String []", "signature": "String [] getMethodParameterTypesCapitalised(String methodName)", "full_signature": "public static String [] getMethodParameterTypesCapitalised(String methodName)", "class_method_signature": "ServiceMethodTranslator.getMethodParameterTypesCapitalised(String methodName)", "testcase": false, "constructor": false}, {"identifier": "getMethodParameterTypes", "parameters": "(String methodName)", "modifiers": "public static", "return": "String []", "signature": "String [] getMethodParameterTypes(String methodName)", "full_signature": "public static String [] getMethodParameterTypes(String methodName)", "class_method_signature": "ServiceMethodTranslator.getMethodParameterTypes(String methodName)", "testcase": false, "constructor": false}, {"identifier": "getMethodParameterName", "parameters": "(String methodName, int parameter)", "modifiers": "public static", "return": "String", "signature": "String getMethodParameterName(String methodName, int parameter)", "full_signature": "public static String getMethodParameterName(String methodName, int parameter)", "class_method_signature": "ServiceMethodTranslator.getMethodParameterName(String methodName, int parameter)", "testcase": false, "constructor": false}, {"identifier": "getMethodParameterNames", "parameters": "(String methodName)", "modifiers": "public static", "return": "String []", "signature": "String [] getMethodParameterNames(String methodName)", "full_signature": "public static String [] getMethodParameterNames(String methodName)", "class_method_signature": "ServiceMethodTranslator.getMethodParameterNames(String methodName)", "testcase": false, "constructor": false}, {"identifier": "getParameterClasses", "parameters": "(String methodName)", "modifiers": "public static", "return": "Class []", "signature": "Class [] getParameterClasses(String methodName)", "full_signature": "public static Class [] getParameterClasses(String methodName)", "class_method_signature": "ServiceMethodTranslator.getParameterClasses(String methodName)", "testcase": false, "constructor": false}, {"identifier": "parseMethod", "parameters": "(String methodSignature)", "modifiers": "static", "return": "String", "signature": "String parseMethod(String methodSignature)", "full_signature": "static String parseMethod(String methodSignature)", "class_method_signature": "ServiceMethodTranslator.parseMethod(String methodSignature)", "testcase": false, "constructor": false}, {"identifier": "capitaliseString", "parameters": "(String value)", "modifiers": "static", "return": "String", "signature": "String capitaliseString(String value)", "full_signature": "static String capitaliseString(String value)", "class_method_signature": "ServiceMethodTranslator.capitaliseString(String value)", "testcase": false, "constructor": false}, {"identifier": "arrayContains", "parameters": "(String [] array, String value)", "modifiers": "static", "return": "boolean", "signature": "boolean arrayContains(String [] array, String value)", "full_signature": "static boolean arrayContains(String [] array, String value)", "class_method_signature": "ServiceMethodTranslator.arrayContains(String [] array, String value)", "testcase": false, "constructor": false}, {"identifier": "arrayElement", "parameters": "(String [] array, String value)", "modifiers": "static", "return": "int", "signature": "int arrayElement(String [] array, String value)", "full_signature": "static int arrayElement(String [] array, String value)", "class_method_signature": "ServiceMethodTranslator.arrayElement(String [] array, String value)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "(String parameter)", "modifiers": "static", "return": "Class", "signature": "Class getPrimitiveClass(String parameter)", "full_signature": "static Class getPrimitiveClass(String parameter)", "class_method_signature": "ServiceMethodTranslator.getPrimitiveClass(String parameter)", "testcase": false, "constructor": false}], "file": "android/client-frwk/Examples/CoreInterfaces/src/main/java/org/societies/android/platform/utilities/ServiceMethodTranslator.java"}, "focal_method": {"identifier": "getMethodParameterName", "parameters": "(String methodName, int parameter)", "modifiers": "public static", "return": "String", "body": "public static String getMethodParameterName(String methodName, int parameter) {\n\t\tDbc.require(\"A method must be specified\", methodName != null && methodName.length() > 0);\n\t\tDbc.require(\"A method must have \" + ParameterStart + \" and \" + ParameterEnd + \" characters\", methodName.contains(ParameterStart) && methodName.contains(ParameterEnd));\n\t\tDbc.require(\"Method index must be 0 or greater\", parameter >= 0);\n\n\t\tString retValue = null;\n\t\t\n\t\tString methodNames [] = getMethodParameterNames(methodName);\n\t\t\n\t\tif (methodNames.length > 0 && parameter < methodNames.length) {\n\t\t\tretValue = methodNames[parameter];\n\t\t}\n\t\treturn retValue;\n\t}", "signature": "String getMethodParameterName(String methodName, int parameter)", "full_signature": "public static String getMethodParameterName(String methodName, int parameter)", "class_method_signature": "ServiceMethodTranslator.getMethodParameterName(String methodName, int parameter)", "testcase": false, "constructor": false, "invocations": ["require", "length", "require", "contains", "contains", "require", "getMethodParameterNames"]}, "repository": {"repo_id": 2576064, "url": "https://github.com/societies/SOCIETIES-Platform", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 25, "size": 122500, "license": "licensed"}}