{"test_class": {"identifier": "BundleLoggingProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LoggingProvider first;", "modifier": "private", "type": "LoggingProvider", "declarator": "first", "var_name": "first"}, {"original_string": "private LoggingProvider second;", "modifier": "private", "type": "LoggingProvider", "declarator": "second", "var_name": "second"}, {"original_string": "private LoggingProvider bundle;", "modifier": "private", "type": "LoggingProvider", "declarator": "bundle", "var_name": "bundle"}], "file": "tinylog-api/src/test/java/org/tinylog/provider/BundleLoggingProviderTest.java"}, "test_case": {"identifier": "logWithLoggerClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void logWithLoggerClass() {\n\t\tinit(Level.TRACE, Level.TRACE);\n\n\t\tNullPointerException exception = new NullPointerException();\n\t\tMessageFormatter formatter = mock(MessageFormatter.class);\n\t\tbundle.log(BundleContextProvider.class.getName(), \"technical\", Level.INFO, exception, formatter, \"Test\", 42);\n\n\t\tverify(first).log(BundleContextProvider.class.getName(), \"technical\", Level.INFO, exception, formatter, \"Test\", 42);\n\t\tverify(second).log(BundleContextProvider.class.getName(), \"technical\", Level.INFO, exception, formatter, \"Test\", 42);\n\t}", "signature": "void logWithLoggerClass()", "full_signature": "@Test public void logWithLoggerClass()", "class_method_signature": "BundleLoggingProviderTest.logWithLoggerClass()", "testcase": true, "constructor": false, "invocations": ["init", "mock", "log", "getName", "log", "verify", "getName", "log", "verify", "getName"]}, "focal_class": {"identifier": "BundleLoggingProvider", "superclass": "", "interfaces": "implements LoggingProvider", "fields": [{"original_string": "private final LoggingProvider[] loggingProviders;", "modifier": "private final", "type": "LoggingProvider[]", "declarator": "loggingProviders", "var_name": "loggingProviders"}, {"original_string": "private final ContextProvider contextProvider;", "modifier": "private final", "type": "ContextProvider", "declarator": "contextProvider", "var_name": "contextProvider"}], "methods": [{"identifier": "BundleLoggingProvider", "parameters": "(final Collection<LoggingProvider> providers)", "modifiers": "", "return": "", "signature": " BundleLoggingProvider(final Collection<LoggingProvider> providers)", "full_signature": "  BundleLoggingProvider(final Collection<LoggingProvider> providers)", "class_method_signature": "BundleLoggingProvider.BundleLoggingProvider(final Collection<LoggingProvider> providers)", "testcase": false, "constructor": true}, {"identifier": "getContextProvider", "parameters": "()", "modifiers": "@Override public", "return": "ContextProvider", "signature": "ContextProvider getContextProvider()", "full_signature": "@Override public ContextProvider getContextProvider()", "class_method_signature": "BundleLoggingProvider.getContextProvider()", "testcase": false, "constructor": false}, {"identifier": "getMinimumLevel", "parameters": "()", "modifiers": "@Override public", "return": "Level", "signature": "Level getMinimumLevel()", "full_signature": "@Override public Level getMinimumLevel()", "class_method_signature": "BundleLoggingProvider.getMinimumLevel()", "testcase": false, "constructor": false}, {"identifier": "getMinimumLevel", "parameters": "(final String tag)", "modifiers": "@Override public", "return": "Level", "signature": "Level getMinimumLevel(final String tag)", "full_signature": "@Override public Level getMinimumLevel(final String tag)", "class_method_signature": "BundleLoggingProvider.getMinimumLevel(final String tag)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "(final int depth, final String tag, final Level level)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnabled(final int depth, final String tag, final Level level)", "full_signature": "@Override public boolean isEnabled(final int depth, final String tag, final Level level)", "class_method_signature": "BundleLoggingProvider.isEnabled(final int depth, final String tag, final Level level)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments)", "modifiers": "@Override public", "return": "void", "signature": "void log(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments)", "full_signature": "@Override public void log(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments)", "class_method_signature": "BundleLoggingProvider.log(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(final String loggerClassName, final String tag, final Level level, final Throwable exception,\n\t\tfinal MessageFormatter formatter, final Object obj, final Object... arguments)", "modifiers": "@Override public", "return": "void", "signature": "void log(final String loggerClassName, final String tag, final Level level, final Throwable exception,\n\t\tfinal MessageFormatter formatter, final Object obj, final Object... arguments)", "full_signature": "@Override public void log(final String loggerClassName, final String tag, final Level level, final Throwable exception,\n\t\tfinal MessageFormatter formatter, final Object obj, final Object... arguments)", "class_method_signature": "BundleLoggingProvider.log(final String loggerClassName, final String tag, final Level level, final Throwable exception,\n\t\tfinal MessageFormatter formatter, final Object obj, final Object... arguments)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "BundleLoggingProvider.shutdown()", "testcase": false, "constructor": false}, {"identifier": "createContextProvider", "parameters": "(final Collection<LoggingProvider> loggingProviders)", "modifiers": "private static", "return": "ContextProvider", "signature": "ContextProvider createContextProvider(final Collection<LoggingProvider> loggingProviders)", "full_signature": "private static ContextProvider createContextProvider(final Collection<LoggingProvider> loggingProviders)", "class_method_signature": "BundleLoggingProvider.createContextProvider(final Collection<LoggingProvider> loggingProviders)", "testcase": false, "constructor": false}, {"identifier": "getLoggingProviders", "parameters": "()", "modifiers": "", "return": "List<LoggingProvider>", "signature": "List<LoggingProvider> getLoggingProviders()", "full_signature": " List<LoggingProvider> getLoggingProviders()", "class_method_signature": "BundleLoggingProvider.getLoggingProviders()", "testcase": false, "constructor": false}], "file": "tinylog-api/src/main/java/org/tinylog/provider/BundleLoggingProvider.java"}, "focal_method": {"identifier": "log", "parameters": "(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void log(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments) {\n\t\tfor (int i = 0; i < loggingProviders.length; ++i) {\n\t\t\tloggingProviders[i].log(depth + 1, tag, level, exception, formatter, obj, arguments);\n\t\t}\n\t}", "signature": "void log(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments)", "full_signature": "@Override public void log(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments)", "class_method_signature": "BundleLoggingProvider.log(final int depth, final String tag, final Level level, final Throwable exception, final MessageFormatter formatter,\n\t\tfinal Object obj, final Object... arguments)", "testcase": false, "constructor": false, "invocations": ["log"]}, "repository": {"repo_id": 5793618, "url": "https://github.com/pmwmedia/tinylog", "stars": 274, "created": "9/13/2012 11:21:42 AM +00:00", "updates": "2020-01-23T21:53:25+00:00", "fork": "False", "license": "licensed"}}