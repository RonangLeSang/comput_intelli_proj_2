{"test_class": {"identifier": "LegacyTimestampFormatterTest", "superclass": "", "interfaces": "", "fields": [], "file": "tinylog-api/src/test/java/org/tinylog/runtime/LegacyTimestampFormatterTest.java"}, "test_case": {"identifier": "millisecondPrecision", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void millisecondPrecision() {\n\t\tLegacyTimestampFormatter formatter = new LegacyTimestampFormatter(\"HH:mm:ss.SSS\", Locale.US);\n\n\t\tassertThat(formatter.format(TimestampFactory.create(2016, 2, 1, 12, 30, 55, 0))).isEqualTo(\"12:30:55.000\");\n\t\tassertThat(formatter.format(TimestampFactory.create(2016, 2, 1, 12, 30, 55, 999_000_000))).isEqualTo(\"12:30:55.999\");\n\t\tassertThat(formatter.format(TimestampFactory.create(2016, 2, 1, 12, 30, 56, 0))).isEqualTo(\"12:30:56.000\");\n\t}", "signature": "void millisecondPrecision()", "full_signature": "@Test public void millisecondPrecision()", "class_method_signature": "LegacyTimestampFormatterTest.millisecondPrecision()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "format", "create", "isEqualTo", "assertThat", "format", "create", "isEqualTo", "assertThat", "format", "create"]}, "focal_class": {"identifier": "LegacyTimestampFormatter", "superclass": "", "interfaces": "implements TimestampFormatter", "fields": [{"original_string": "private static final int MILLISECOND_PRECISION = 1;", "modifier": "private static final", "type": "int", "declarator": "MILLISECOND_PRECISION = 1", "var_name": "MILLISECOND_PRECISION"}, {"original_string": "private static final int SECOND_PRECISION = 1000;", "modifier": "private static final", "type": "int", "declarator": "SECOND_PRECISION = 1000", "var_name": "SECOND_PRECISION"}, {"original_string": "private static final int MINUTE_PRECISION = 60000;", "modifier": "private static final", "type": "int", "declarator": "MINUTE_PRECISION = 60000", "var_name": "MINUTE_PRECISION"}, {"original_string": "private final DateFormat formatter;", "modifier": "private final", "type": "DateFormat", "declarator": "formatter", "var_name": "formatter"}, {"original_string": "private final long divisor;", "modifier": "private final", "type": "long", "declarator": "divisor", "var_name": "divisor"}, {"original_string": "private Date lastDate;", "modifier": "private", "type": "Date", "declarator": "lastDate", "var_name": "lastDate"}, {"original_string": "private String lastFormat;", "modifier": "private", "type": "String", "declarator": "lastFormat", "var_name": "lastFormat"}], "methods": [{"identifier": "LegacyTimestampFormatter", "parameters": "(final String pattern, final Locale locale)", "modifiers": "public", "return": "", "signature": " LegacyTimestampFormatter(final String pattern, final Locale locale)", "full_signature": "public  LegacyTimestampFormatter(final String pattern, final Locale locale)", "class_method_signature": "LegacyTimestampFormatter.LegacyTimestampFormatter(final String pattern, final Locale locale)", "testcase": false, "constructor": true}, {"identifier": "isValid", "parameters": "(final String timestamp)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(final String timestamp)", "full_signature": "@Override public boolean isValid(final String timestamp)", "class_method_signature": "LegacyTimestampFormatter.isValid(final String timestamp)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(final Timestamp timestamp)", "modifiers": "@Override public", "return": "String", "signature": "String format(final Timestamp timestamp)", "full_signature": "@Override public String format(final Timestamp timestamp)", "class_method_signature": "LegacyTimestampFormatter.format(final Timestamp timestamp)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(final Date date)", "modifiers": "private", "return": "String", "signature": "String format(final Date date)", "full_signature": "private String format(final Date date)", "class_method_signature": "LegacyTimestampFormatter.format(final Date date)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String timestamp)", "modifiers": "private", "return": "Date", "signature": "Date parse(final String timestamp)", "full_signature": "private Date parse(final String timestamp)", "class_method_signature": "LegacyTimestampFormatter.parse(final String timestamp)", "testcase": false, "constructor": false}], "file": "tinylog-api/src/main/java/org/tinylog/runtime/LegacyTimestampFormatter.java"}, "focal_method": {"identifier": "format", "parameters": "(final Timestamp timestamp)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String format(final Timestamp timestamp) {\n\t\treturn format(timestamp.toDate());\n\t}", "signature": "String format(final Timestamp timestamp)", "full_signature": "@Override public String format(final Timestamp timestamp)", "class_method_signature": "LegacyTimestampFormatter.format(final Timestamp timestamp)", "testcase": false, "constructor": false, "invocations": ["format", "toDate"]}, "repository": {"repo_id": 5793618, "url": "https://github.com/pmwmedia/tinylog", "stars": 274, "created": "9/13/2012 11:21:42 AM +00:00", "updates": "2020-01-23T21:53:25+00:00", "fork": "False", "license": "licensed"}}