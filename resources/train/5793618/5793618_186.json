{"test_class": {"identifier": "LegacyJavaRuntimeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final SystemStreamCollector systemStream = new SystemStreamCollector(true);", "modifier": "@Rule\n\tpublic final", "type": "SystemStreamCollector", "declarator": "systemStream = new SystemStreamCollector(true)", "var_name": "systemStream"}], "file": "tinylog-api/src/test/java/org/tinylog/runtime/LegacyJavaRuntimeTest.java"}, "test_case": {"identifier": "callerClassNameByIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void callerClassNameByIndex() {\n\t\tassertThat(new LegacyJavaRuntime().getCallerClassName(1)).isEqualTo(LegacyJavaRuntimeTest.class.getName());\n\t}", "signature": "void callerClassNameByIndex()", "full_signature": "@Test public void callerClassNameByIndex()", "class_method_signature": "LegacyJavaRuntimeTest.callerClassNameByIndex()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getCallerClassName", "getName"]}, "focal_class": {"identifier": "LegacyJavaRuntime", "superclass": "extends AbstractJavaRuntime", "interfaces": "", "fields": [{"original_string": "private static final Timestamp startTime = new LegacyTimestamp(ManagementFactory.getRuntimeMXBean().getStartTime());", "modifier": "private static final", "type": "Timestamp", "declarator": "startTime = new LegacyTimestamp(ManagementFactory.getRuntimeMXBean().getStartTime())", "var_name": "startTime"}, {"original_string": "private final boolean hasSunReflection;", "modifier": "private final", "type": "boolean", "declarator": "hasSunReflection", "var_name": "hasSunReflection"}, {"original_string": "private final Method stackTraceElementGetter;", "modifier": "private final", "type": "Method", "declarator": "stackTraceElementGetter", "var_name": "stackTraceElementGetter"}], "methods": [{"identifier": "LegacyJavaRuntime", "parameters": "()", "modifiers": "public", "return": "", "signature": " LegacyJavaRuntime()", "full_signature": "public  LegacyJavaRuntime()", "class_method_signature": "LegacyJavaRuntime.LegacyJavaRuntime()", "testcase": false, "constructor": true}, {"identifier": "isAndroid", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAndroid()", "full_signature": "@Override public boolean isAndroid()", "class_method_signature": "LegacyJavaRuntime.isAndroid()", "testcase": false, "constructor": false}, {"identifier": "getProcessId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getProcessId()", "full_signature": "@Override public long getProcessId()", "class_method_signature": "LegacyJavaRuntime.getProcessId()", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "@Override public", "return": "Timestamp", "signature": "Timestamp getStartTime()", "full_signature": "@Override public Timestamp getStartTime()", "class_method_signature": "LegacyJavaRuntime.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "getCallerClassName", "parameters": "(final int depth)", "modifiers": "@Override @SuppressWarnings(\"removal\") @IgnoreJRERequirement public", "return": "String", "signature": "String getCallerClassName(final int depth)", "full_signature": "@Override @SuppressWarnings(\"removal\") @IgnoreJRERequirement public String getCallerClassName(final int depth)", "class_method_signature": "LegacyJavaRuntime.getCallerClassName(final int depth)", "testcase": false, "constructor": false}, {"identifier": "getCallerClassName", "parameters": "(final String loggerClassName)", "modifiers": "@Override public", "return": "String", "signature": "String getCallerClassName(final String loggerClassName)", "full_signature": "@Override public String getCallerClassName(final String loggerClassName)", "class_method_signature": "LegacyJavaRuntime.getCallerClassName(final String loggerClassName)", "testcase": false, "constructor": false}, {"identifier": "getCallerStackTraceElement", "parameters": "(final int depth)", "modifiers": "@Override public", "return": "StackTraceElement", "signature": "StackTraceElement getCallerStackTraceElement(final int depth)", "full_signature": "@Override public StackTraceElement getCallerStackTraceElement(final int depth)", "class_method_signature": "LegacyJavaRuntime.getCallerStackTraceElement(final int depth)", "testcase": false, "constructor": false}, {"identifier": "getCallerStackTraceElement", "parameters": "(final String loggerClassName)", "modifiers": "@Override public", "return": "StackTraceElement", "signature": "StackTraceElement getCallerStackTraceElement(final String loggerClassName)", "full_signature": "@Override public StackTraceElement getCallerStackTraceElement(final String loggerClassName)", "class_method_signature": "LegacyJavaRuntime.getCallerStackTraceElement(final String loggerClassName)", "testcase": false, "constructor": false}, {"identifier": "createTimestamp", "parameters": "()", "modifiers": "@Override public", "return": "Timestamp", "signature": "Timestamp createTimestamp()", "full_signature": "@Override public Timestamp createTimestamp()", "class_method_signature": "LegacyJavaRuntime.createTimestamp()", "testcase": false, "constructor": false}, {"identifier": "createTimestampFormatter", "parameters": "(final String pattern, final Locale locale)", "modifiers": "@Override public", "return": "TimestampFormatter", "signature": "TimestampFormatter createTimestampFormatter(final String pattern, final Locale locale)", "full_signature": "@Override public TimestampFormatter createTimestampFormatter(final String pattern, final Locale locale)", "class_method_signature": "LegacyJavaRuntime.createTimestampFormatter(final String pattern, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "verifySunReflection", "parameters": "()", "modifiers": "@SuppressWarnings(\"removal\") @IgnoreJRERequirement private static", "return": "boolean", "signature": "boolean verifySunReflection()", "full_signature": "@SuppressWarnings(\"removal\") @IgnoreJRERequirement private static boolean verifySunReflection()", "class_method_signature": "LegacyJavaRuntime.verifySunReflection()", "testcase": false, "constructor": false}, {"identifier": "getStackTraceElementGetter", "parameters": "()", "modifiers": "private static", "return": "Method", "signature": "Method getStackTraceElementGetter()", "full_signature": "private static Method getStackTraceElementGetter()", "class_method_signature": "LegacyJavaRuntime.getStackTraceElementGetter()", "testcase": false, "constructor": false}], "file": "tinylog-api/src/main/java/org/tinylog/runtime/LegacyJavaRuntime.java"}, "focal_method": {"identifier": "getCallerClassName", "parameters": "(final int depth)", "modifiers": "@Override @SuppressWarnings(\"removal\") @IgnoreJRERequirement public", "return": "String", "body": "@Override\n\t@SuppressWarnings(\"removal\")\n\t@IgnoreJRERequirement\n\tpublic String getCallerClassName(final int depth) {\n\t\tif (hasSunReflection) {\n\t\t\treturn sun.reflect.Reflection.getCallerClass(depth + 1).getName();\n\t\t} else {\n\t\t\treturn getCallerStackTraceElement(depth + 1).getClassName();\n\t\t}\n\t}", "signature": "String getCallerClassName(final int depth)", "full_signature": "@Override @SuppressWarnings(\"removal\") @IgnoreJRERequirement public String getCallerClassName(final int depth)", "class_method_signature": "LegacyJavaRuntime.getCallerClassName(final int depth)", "testcase": false, "constructor": false, "invocations": ["getName", "getCallerClass", "getClassName", "getCallerStackTraceElement"]}, "repository": {"repo_id": 5793618, "url": "https://github.com/pmwmedia/tinylog", "stars": 274, "created": "9/13/2012 11:21:42 AM +00:00", "updates": "2020-01-23T21:53:25+00:00", "fork": "False", "license": "licensed"}}