{"test_class": {"identifier": "LogcatWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final SystemStreamCollector systemStream = new SystemStreamCollector(true);", "modifier": "@Rule\n\tpublic final", "type": "SystemStreamCollector", "declarator": "systemStream = new SystemStreamCollector(true)", "var_name": "systemStream"}, {"original_string": "private ArgumentCaptor<Integer> levelCaptor;", "modifier": "private", "type": "ArgumentCaptor<Integer>", "declarator": "levelCaptor", "var_name": "levelCaptor"}, {"original_string": "private ArgumentCaptor<String> tagCaptor;", "modifier": "private", "type": "ArgumentCaptor<String>", "declarator": "tagCaptor", "var_name": "tagCaptor"}, {"original_string": "private ArgumentCaptor<String> messageCaptor;", "modifier": "private", "type": "ArgumentCaptor<String>", "declarator": "messageCaptor", "var_name": "messageCaptor"}], "file": "tinylog-impl/src/test/java/org/tinylog/writers/LogcatWriterTest.java"}, "test_case": {"identifier": "trace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void trace() {\n\t\tLogcatWriter writer = new LogcatWriter(doubletonMap(\"tagname\", \"{class-name}\", \"format\", \"{message}\"));\n\t\twriter.write(LogEntryBuilder.empty().level(Level.TRACE).className(\"MyClass\").message(\"Hello World!\").create());\n\n\t\tassertThat(levelCaptor.getAllValues()).containsOnly(Log.VERBOSE);\n\t\tassertThat(tagCaptor.getAllValues()).containsOnly(\"MyClass\");\n\t\tassertThat(messageCaptor.getAllValues()).containsOnly(\"Hello World!\");\n\t}", "signature": "void trace()", "full_signature": "@Test public void trace()", "class_method_signature": "LogcatWriterTest.trace()", "testcase": true, "constructor": false, "invocations": ["doubletonMap", "write", "create", "message", "className", "level", "empty", "containsOnly", "assertThat", "getAllValues", "containsOnly", "assertThat", "getAllValues", "containsOnly", "assertThat", "getAllValues"]}, "focal_class": {"identifier": "LogcatWriter", "superclass": "", "interfaces": "implements Writer", "fields": [{"original_string": "private static final String DEFAULT_TAG_FORMAT_PATTERN = \"{class-name}\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TAG_FORMAT_PATTERN = \"{class-name}\"", "var_name": "DEFAULT_TAG_FORMAT_PATTERN"}, {"original_string": "private static final String DEFAULT_MESSAGE_FORMAT_PATTERN = \"{message}\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_MESSAGE_FORMAT_PATTERN = \"{message}\"", "var_name": "DEFAULT_MESSAGE_FORMAT_PATTERN"}, {"original_string": "private static final String ELLIPSIS = \"...\";", "modifier": "private static final", "type": "String", "declarator": "ELLIPSIS = \"...\"", "var_name": "ELLIPSIS"}, {"original_string": "private static final int TAG_MAX_LENGTH = 23;", "modifier": "private static final", "type": "int", "declarator": "TAG_MAX_LENGTH = 23", "var_name": "TAG_MAX_LENGTH"}, {"original_string": "private static final int MESSAGE_BUILDER_CAPACITY = 1024;", "modifier": "private static final", "type": "int", "declarator": "MESSAGE_BUILDER_CAPACITY = 1024", "var_name": "MESSAGE_BUILDER_CAPACITY"}, {"original_string": "private final StringBuilder tagBuilder;", "modifier": "private final", "type": "StringBuilder", "declarator": "tagBuilder", "var_name": "tagBuilder"}, {"original_string": "private final Token tagToken;", "modifier": "private final", "type": "Token", "declarator": "tagToken", "var_name": "tagToken"}, {"original_string": "private final StringBuilder messageBuilder;", "modifier": "private final", "type": "StringBuilder", "declarator": "messageBuilder", "var_name": "messageBuilder"}, {"original_string": "private final Token messageToken;", "modifier": "private final", "type": "Token", "declarator": "messageToken", "var_name": "messageToken"}], "methods": [{"identifier": "LogcatWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " LogcatWriter()", "full_signature": "public  LogcatWriter()", "class_method_signature": "LogcatWriter.LogcatWriter()", "testcase": false, "constructor": true}, {"identifier": "LogcatWriter", "parameters": "(final Map<String, String> properties)", "modifiers": "public", "return": "", "signature": " LogcatWriter(final Map<String, String> properties)", "full_signature": "public  LogcatWriter(final Map<String, String> properties)", "class_method_signature": "LogcatWriter.LogcatWriter(final Map<String, String> properties)", "testcase": false, "constructor": true}, {"identifier": "getRequiredLogEntryValues", "parameters": "()", "modifiers": "@Override public", "return": "Collection<LogEntryValue>", "signature": "Collection<LogEntryValue> getRequiredLogEntryValues()", "full_signature": "@Override public Collection<LogEntryValue> getRequiredLogEntryValues()", "class_method_signature": "LogcatWriter.getRequiredLogEntryValues()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final LogEntry logEntry)", "modifiers": "@Override public", "return": "void", "signature": "void write(final LogEntry logEntry)", "full_signature": "@Override public void write(final LogEntry logEntry)", "class_method_signature": "LogcatWriter.write(final LogEntry logEntry)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "LogcatWriter.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LogcatWriter.close()", "testcase": false, "constructor": false}, {"identifier": "renderTag", "parameters": "(final LogEntry logEntry)", "modifiers": "protected", "return": "String", "signature": "String renderTag(final LogEntry logEntry)", "full_signature": "protected String renderTag(final LogEntry logEntry)", "class_method_signature": "LogcatWriter.renderTag(final LogEntry logEntry)", "testcase": false, "constructor": false}, {"identifier": "renderMessage", "parameters": "(final LogEntry logEntry)", "modifiers": "protected", "return": "String", "signature": "String renderMessage(final LogEntry logEntry)", "full_signature": "protected String renderMessage(final LogEntry logEntry)", "class_method_signature": "LogcatWriter.renderMessage(final LogEntry logEntry)", "testcase": false, "constructor": false}, {"identifier": "reuseOrCreate", "parameters": "(final StringBuilder builder, final int capacity)", "modifiers": "private static", "return": "StringBuilder", "signature": "StringBuilder reuseOrCreate(final StringBuilder builder, final int capacity)", "full_signature": "private static StringBuilder reuseOrCreate(final StringBuilder builder, final int capacity)", "class_method_signature": "LogcatWriter.reuseOrCreate(final StringBuilder builder, final int capacity)", "testcase": false, "constructor": false}], "file": "tinylog-impl/src/main/java/org/tinylog/writers/LogcatWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(final LogEntry logEntry)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void write(final LogEntry logEntry) {\n\t\tString tag = renderTag(logEntry);\n\t\tString message = renderMessage(logEntry);\n\n\t\tswitch (logEntry.getLevel()) {\n\t\t\tcase TRACE:\n\t\t\t\tLog.println(Log.VERBOSE, tag, message);\n\t\t\t\tbreak;\n\n\t\t\tcase DEBUG:\n\t\t\t\tLog.println(Log.DEBUG, tag, message);\n\t\t\t\tbreak;\n\n\t\t\tcase INFO:\n\t\t\t\tLog.println(Log.INFO, tag, message);\n\t\t\t\tbreak;\n\n\t\t\tcase WARN:\n\t\t\t\tLog.println(Log.WARN, tag, message);\n\t\t\t\tbreak;\n\n\t\t\tcase ERROR:\n\t\t\t\tLog.println(Log.ERROR, tag, message);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tInternalLogger.log(Level.ERROR, \"Unexpected logging level: \" + logEntry.getLevel());\n\t\t\t\tbreak;\n\t\t}\n\t}", "signature": "void write(final LogEntry logEntry)", "full_signature": "@Override public void write(final LogEntry logEntry)", "class_method_signature": "LogcatWriter.write(final LogEntry logEntry)", "testcase": false, "constructor": false, "invocations": ["renderTag", "renderMessage", "getLevel", "println", "println", "println", "println", "println", "log", "getLevel"]}, "repository": {"repo_id": 5793618, "url": "https://github.com/pmwmedia/tinylog", "stars": 274, "created": "9/13/2012 11:21:42 AM +00:00", "updates": "2020-01-23T21:53:25+00:00", "fork": "False", "license": "licensed"}}