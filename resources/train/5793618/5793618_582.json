{"test_class": {"identifier": "LogManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "log4j1.2-api/src/test/java/org/apache/log4j/LogManagerTest.java"}, "test_case": {"identifier": "loggerByName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void loggerByName() {\n\t\tLogger logger = LogManager.getLogger(\"test.example.MyClass\");\n\t\tassertThat(logger.getName()).isEqualTo(\"test.example.MyClass\");\n\n\t\tCategory parent = logger.getParent();\n\t\tassertThat(parent).isNotNull();\n\t\tassertThat(parent.getName()).isEqualTo(\"test.example\");\n\t}", "signature": "void loggerByName()", "full_signature": "@Test public void loggerByName()", "class_method_signature": "LogManagerTest.loggerByName()", "testcase": true, "constructor": false, "invocations": ["getLogger", "isEqualTo", "assertThat", "getName", "getParent", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getName"]}, "focal_class": {"identifier": "LogManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger root = new Logger(null, \"root\");", "modifier": "private static final", "type": "Logger", "declarator": "root = new Logger(null, \"root\")", "var_name": "root"}, {"original_string": "private static final Map<String, Logger> loggers = new HashMap<String, Logger>();", "modifier": "private static final", "type": "Map<String, Logger>", "declarator": "loggers = new HashMap<String, Logger>()", "var_name": "loggers"}, {"original_string": "private static final Object mutex = new Object();", "modifier": "private static final", "type": "Object", "declarator": "mutex = new Object()", "var_name": "mutex"}], "methods": [{"identifier": "LogManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " LogManager()", "full_signature": "public  LogManager()", "class_method_signature": "LogManager.LogManager()", "testcase": false, "constructor": true}, {"identifier": "getRootLogger", "parameters": "()", "modifiers": "public static", "return": "Logger", "signature": "Logger getRootLogger()", "full_signature": "public static Logger getRootLogger()", "class_method_signature": "LogManager.getRootLogger()", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "(final String name)", "modifiers": "public static", "return": "Logger", "signature": "Logger getLogger(final String name)", "full_signature": "public static Logger getLogger(final String name)", "class_method_signature": "LogManager.getLogger(final String name)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "(final String name, final LoggerFactory factory)", "modifiers": "public static", "return": "Logger", "signature": "Logger getLogger(final String name, final LoggerFactory factory)", "full_signature": "public static Logger getLogger(final String name, final LoggerFactory factory)", "class_method_signature": "LogManager.getLogger(final String name, final LoggerFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "(final Class clazz)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "Logger", "signature": "Logger getLogger(final Class clazz)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static Logger getLogger(final Class clazz)", "class_method_signature": "LogManager.getLogger(final Class clazz)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(final String name)", "modifiers": "public static", "return": "Logger", "signature": "Logger exists(final String name)", "full_signature": "public static Logger exists(final String name)", "class_method_signature": "LogManager.exists(final String name)", "testcase": false, "constructor": false}, {"identifier": "getCurrentLoggers", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "Enumeration", "signature": "Enumeration getCurrentLoggers()", "full_signature": "@SuppressWarnings(\"rawtypes\") public static Enumeration getCurrentLoggers()", "class_method_signature": "LogManager.getCurrentLoggers()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void shutdown()", "full_signature": "public static void shutdown()", "class_method_signature": "LogManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "resetConfiguration", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void resetConfiguration()", "full_signature": "public static void resetConfiguration()", "class_method_signature": "LogManager.resetConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getParentLogger", "parameters": "(final String name)", "modifiers": "static", "return": "Logger", "signature": "Logger getParentLogger(final String name)", "full_signature": "static Logger getParentLogger(final String name)", "class_method_signature": "LogManager.getParentLogger(final String name)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateLogger", "parameters": "(final String name)", "modifiers": "private static", "return": "Logger", "signature": "Logger getOrCreateLogger(final String name)", "full_signature": "private static Logger getOrCreateLogger(final String name)", "class_method_signature": "LogManager.getOrCreateLogger(final String name)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(final String name)", "modifiers": "private static", "return": "String", "signature": "String reduce(final String name)", "full_signature": "private static String reduce(final String name)", "class_method_signature": "LogManager.reduce(final String name)", "testcase": false, "constructor": false}], "file": "log4j1.2-api/src/main/java/org/apache/log4j/LogManager.java"}, "focal_method": {"identifier": "getLogger", "parameters": "(final String name)", "modifiers": "public static", "return": "Logger", "body": "public static Logger getLogger(final String name) {\n\t\tsynchronized (mutex) {\n\t\t\treturn getOrCreateLogger(name);\n\t\t}\n\t}", "signature": "Logger getLogger(final String name)", "full_signature": "public static Logger getLogger(final String name)", "class_method_signature": "LogManager.getLogger(final String name)", "testcase": false, "constructor": false, "invocations": ["getOrCreateLogger"]}, "repository": {"repo_id": 5793618, "url": "https://github.com/pmwmedia/tinylog", "stars": 274, "created": "9/13/2012 11:21:42 AM +00:00", "updates": "2020-01-23T21:53:25+00:00", "fork": "False", "license": "licensed"}}