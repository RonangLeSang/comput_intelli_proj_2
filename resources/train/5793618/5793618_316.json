{"test_class": {"identifier": "UnpackThrowableFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "tinylog-impl/src/test/java/org/tinylog/throwable/UnpackThrowableFilterTest.java"}, "test_case": {"identifier": "unpackNestedCause", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void unpackNestedCause() {\n\t\tNullPointerException grandChildException = new NullPointerException(\"Hello Hell!\");\n\t\tRuntimeException childException = new RuntimeException(\"Hello World!\", grandChildException);\n\t\tRuntimeException parentException = new RuntimeException(\"Hello Heaven!\", childException);\n\t\t\n\t\tThrowableFilter filter = new UnpackThrowableFilter(RuntimeException.class.getName());\n\t\tThrowableData data = filter.filter(new ThrowableWrapper(parentException));\n\n\t\tassertThat(data.getClassName()).isEqualTo(NullPointerException.class.getName());\n\t\tassertThat(data.getMessage()).isEqualTo(\"Hello Hell!\");\n\t\tassertThat(data.getStackTrace()).containsExactly(grandChildException.getStackTrace());\n\t\tassertThat(data.getCause()).isNull();\n\t}", "signature": "void unpackNestedCause()", "full_signature": "@Test public void unpackNestedCause()", "class_method_signature": "UnpackThrowableFilterTest.unpackNestedCause()", "testcase": true, "constructor": false, "invocations": ["getName", "filter", "isEqualTo", "assertThat", "getClassName", "getName", "isEqualTo", "assertThat", "getMessage", "containsExactly", "assertThat", "getStackTrace", "getStackTrace", "isNull", "assertThat", "getCause"]}, "focal_class": {"identifier": "UnpackThrowableFilter", "superclass": "extends AbstractThrowableFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "UnpackThrowableFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " UnpackThrowableFilter()", "full_signature": "public  UnpackThrowableFilter()", "class_method_signature": "UnpackThrowableFilter.UnpackThrowableFilter()", "testcase": false, "constructor": true}, {"identifier": "UnpackThrowableFilter", "parameters": "(final String arguments)", "modifiers": "public", "return": "", "signature": " UnpackThrowableFilter(final String arguments)", "full_signature": "public  UnpackThrowableFilter(final String arguments)", "class_method_signature": "UnpackThrowableFilter.UnpackThrowableFilter(final String arguments)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(final ThrowableData origin)", "modifiers": "@Override public", "return": "ThrowableData", "signature": "ThrowableData filter(final ThrowableData origin)", "full_signature": "@Override public ThrowableData filter(final ThrowableData origin)", "class_method_signature": "UnpackThrowableFilter.filter(final ThrowableData origin)", "testcase": false, "constructor": false}], "file": "tinylog-impl/src/main/java/org/tinylog/throwable/UnpackThrowableFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(final ThrowableData origin)", "modifiers": "@Override public", "return": "ThrowableData", "body": "@Override\n\tpublic ThrowableData filter(final ThrowableData origin) {\n\t\tThrowableData cause = origin.getCause();\n\n\t\tif (cause != null) {\n\t\t\tList<String> classNames = getArguments();\n\n\t\t\tif (classNames.isEmpty()) {\n\t\t\t\treturn filter(cause);\n\t\t\t}\n\n\t\t\tfor (String className : classNames) {\n\t\t\t\tif (className.equals(origin.getClassName())) {\n\t\t\t\t\treturn filter(cause);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn origin;\n\t}", "signature": "ThrowableData filter(final ThrowableData origin)", "full_signature": "@Override public ThrowableData filter(final ThrowableData origin)", "class_method_signature": "UnpackThrowableFilter.filter(final ThrowableData origin)", "testcase": false, "constructor": false, "invocations": ["getCause", "getArguments", "isEmpty", "filter", "equals", "getClassName", "filter"]}, "repository": {"repo_id": 5793618, "url": "https://github.com/pmwmedia/tinylog", "stars": 274, "created": "9/13/2012 11:21:42 AM +00:00", "updates": "2020-01-23T21:53:25+00:00", "fork": "False", "license": "licensed"}}