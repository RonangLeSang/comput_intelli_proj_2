{"test_class": {"identifier": "AdvancedMessageFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final SystemStreamCollector systemStream = new SystemStreamCollector(true);", "modifier": "@Rule\n\tpublic final", "type": "SystemStreamCollector", "declarator": "systemStream = new SystemStreamCollector(true)", "var_name": "systemStream"}, {"original_string": "private final boolean escape;", "modifier": "private final", "type": "boolean", "declarator": "escape", "var_name": "escape"}], "file": "tinylog-api/src/test/java/org/tinylog/format/AdvancedMessageFormatterTest.java"}, "test_case": {"identifier": "choiceAndNumberFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void choiceAndNumberFormat() {\n\t\tassertThat(format(\"{0#zero|1#one|1<{000}}\", 0)).isEqualTo(\"zero\");\n\t\tassertThat(format(\"{0#zero|1#one|1<{000}}\", 42)).isEqualTo(\"042\");\n\t}", "signature": "void choiceAndNumberFormat()", "full_signature": "@Test public void choiceAndNumberFormat()", "class_method_signature": "AdvancedMessageFormatterTest.choiceAndNumberFormat()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "format", "isEqualTo", "assertThat", "format"]}, "focal_class": {"identifier": "AdvancedMessageFormatter", "superclass": "extends AbstractMessageFormatter", "interfaces": "", "fields": [{"original_string": "private final DecimalFormatSymbols symbols;", "modifier": "private final", "type": "DecimalFormatSymbols", "declarator": "symbols", "var_name": "symbols"}, {"original_string": "private final boolean escape;", "modifier": "private final", "type": "boolean", "declarator": "escape", "var_name": "escape"}], "methods": [{"identifier": "AdvancedMessageFormatter", "parameters": "(final Locale locale, final boolean escape)", "modifiers": "public", "return": "", "signature": " AdvancedMessageFormatter(final Locale locale, final boolean escape)", "full_signature": "public  AdvancedMessageFormatter(final Locale locale, final boolean escape)", "class_method_signature": "AdvancedMessageFormatter.AdvancedMessageFormatter(final Locale locale, final boolean escape)", "testcase": false, "constructor": true}, {"identifier": "format", "parameters": "(final String message, final Object[] arguments)", "modifiers": "@Override public", "return": "String", "signature": "String format(final String message, final Object[] arguments)", "full_signature": "@Override public String format(final String message, final Object[] arguments)", "class_method_signature": "AdvancedMessageFormatter.format(final String message, final Object[] arguments)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(final String pattern, final Object argument)", "modifiers": "private", "return": "String", "signature": "String format(final String pattern, final Object argument)", "full_signature": "private String format(final String pattern, final Object argument)", "class_method_signature": "AdvancedMessageFormatter.format(final String pattern, final Object argument)", "testcase": false, "constructor": false}, {"identifier": "getFormatter", "parameters": "(final String pattern, final Object argument)", "modifiers": "private", "return": "Format", "signature": "Format getFormatter(final String pattern, final Object argument)", "full_signature": "private Format getFormatter(final String pattern, final Object argument)", "class_method_signature": "AdvancedMessageFormatter.getFormatter(final String pattern, final Object argument)", "testcase": false, "constructor": false}], "file": "tinylog-api/src/main/java/org/tinylog/format/AdvancedMessageFormatter.java"}, "focal_method": {"identifier": "format", "parameters": "(final String message, final Object[] arguments)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String format(final String message, final Object[] arguments) {\n\t\tint length = message.length();\n\n\t\tStringBuilder builder = new StringBuilder(length + ADDITIONAL_STRING_BUILDER_CAPACITY);\n\t\tStringBuilder buffer = new StringBuilder(length + ADDITIONAL_STRING_BUILDER_CAPACITY);\n\t\tStringBuilder current = builder;\n\n\t\tint argumentIndex = 0;\n\t\tint openingTickIndex = -1;\n\t\tint openingCurlyBrackets = 0;\n\n\t\tfor (int index = 0; index < length; ++index) {\n\t\t\tchar character = message.charAt(index);\n\t\t\tif (escape && character == '\\'' && index + 1 < length && openingCurlyBrackets == 0) {\n\t\t\t\tif (message.charAt(index + 1) == '\\'') {\n\t\t\t\t\tcurrent.append('\\'');\n\t\t\t\t\tindex += 1;\n\t\t\t\t} else {\n\t\t\t\t\topeningTickIndex = openingTickIndex < 0 ? index : -1;\n\t\t\t\t}\n\t\t\t} else if (character == '{' && index + 1 < length && argumentIndex < arguments.length && openingTickIndex < 0) {\n\t\t\t\tif (openingCurlyBrackets++ == 0) {\n\t\t\t\t\tcurrent = buffer;\n\t\t\t\t} else {\n\t\t\t\t\tcurrent.append(character);\n\t\t\t\t}\n\t\t\t} else if (character == '}' && openingCurlyBrackets > 0 && openingTickIndex < 0) {\n\t\t\t\tif (--openingCurlyBrackets == 0) {\n\t\t\t\t\tObject argument = resolve(arguments[argumentIndex++]);\n\t\t\t\t\tif (buffer.length() == 0) {\n\t\t\t\t\t\tbuilder.append(argument);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuilder.append(format(buffer.toString(), argument));\n\t\t\t\t\t\tbuffer.setLength(0);\n\t\t\t\t\t}\n\t\t\t\t\tbuffer.setLength(0);\n\t\t\t\t\tcurrent = builder;\n\t\t\t\t} else {\n\t\t\t\t\tcurrent.append(character);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrent.append(character);\n\t\t\t}\n\t\t}\n\n\t\tif (buffer.length() > 0) {\n\t\t\tbuilder.append('{');\n\t\t\tbuilder.append(buffer);\n\t\t}\n\n\t\tif (openingTickIndex >= 0) {\n\t\t\tbuilder.insert(openingTickIndex, '\\'');\n\t\t}\n\n\t\treturn builder.toString();\n\t}", "signature": "String format(final String message, final Object[] arguments)", "full_signature": "@Override public String format(final String message, final Object[] arguments)", "class_method_signature": "AdvancedMessageFormatter.format(final String message, final Object[] arguments)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "charAt", "append", "append", "resolve", "length", "append", "append", "format", "toString", "setLength", "setLength", "append", "append", "length", "append", "append", "insert", "toString"]}, "repository": {"repo_id": 5793618, "url": "https://github.com/pmwmedia/tinylog", "stars": 274, "created": "9/13/2012 11:21:42 AM +00:00", "updates": "2020-01-23T21:53:25+00:00", "fork": "False", "license": "licensed"}}