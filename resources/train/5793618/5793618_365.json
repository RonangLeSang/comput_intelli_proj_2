{"test_class": {"identifier": "IndentationTokenTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NEW_LINE = System.lineSeparator();", "modifier": "private static final", "type": "String", "declarator": "NEW_LINE = System.lineSeparator()", "var_name": "NEW_LINE"}], "file": "tinylog-impl/src/test/java/org/tinylog/pattern/IndentationTokenTest.java"}, "test_case": {"identifier": "renderMultipleLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void renderMultipleLines() {\n\t\tIndentationToken token = new IndentationToken(new PlainTextToken(\"A\" + NEW_LINE + \"B\" + NEW_LINE + \"C\"), 2);\n\t\tassertThat(render(token)).isEqualTo(\"A\" + NEW_LINE + \"  B\" + NEW_LINE + \"  C\");\n\t}", "signature": "void renderMultipleLines()", "full_signature": "@Test public void renderMultipleLines()", "class_method_signature": "IndentationTokenTest.renderMultipleLines()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "render"]}, "focal_class": {"identifier": "IndentationToken", "superclass": "", "interfaces": "implements Token", "fields": [{"original_string": "private static final int INITIAL_CAPACITY = 1024;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_CAPACITY = 1024", "var_name": "INITIAL_CAPACITY"}, {"original_string": "private static final String NEW_LINE = System.getProperty(\"line.separator\");", "modifier": "private static final", "type": "String", "declarator": "NEW_LINE = System.getProperty(\"line.separator\")", "var_name": "NEW_LINE"}, {"original_string": "private final Token token;", "modifier": "private final", "type": "Token", "declarator": "token", "var_name": "token"}, {"original_string": "private final char[] spaces;", "modifier": "private final", "type": "char[]", "declarator": "spaces", "var_name": "spaces"}], "methods": [{"identifier": "IndentationToken", "parameters": "(final Token token, final int indentation)", "modifiers": "", "return": "", "signature": " IndentationToken(final Token token, final int indentation)", "full_signature": "  IndentationToken(final Token token, final int indentation)", "class_method_signature": "IndentationToken.IndentationToken(final Token token, final int indentation)", "testcase": false, "constructor": true}, {"identifier": "getRequiredLogEntryValues", "parameters": "()", "modifiers": "@Override public", "return": "Collection<LogEntryValue>", "signature": "Collection<LogEntryValue> getRequiredLogEntryValues()", "full_signature": "@Override public Collection<LogEntryValue> getRequiredLogEntryValues()", "class_method_signature": "IndentationToken.getRequiredLogEntryValues()", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(final LogEntry logEntry, final StringBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void render(final LogEntry logEntry, final StringBuilder builder)", "full_signature": "@Override public void render(final LogEntry logEntry, final StringBuilder builder)", "class_method_signature": "IndentationToken.render(final LogEntry logEntry, final StringBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final LogEntry logEntry, final PreparedStatement statement, final int index)", "modifiers": "@Override public", "return": "void", "signature": "void apply(final LogEntry logEntry, final PreparedStatement statement, final int index)", "full_signature": "@Override public void apply(final LogEntry logEntry, final PreparedStatement statement, final int index)", "class_method_signature": "IndentationToken.apply(final LogEntry logEntry, final PreparedStatement statement, final int index)", "testcase": false, "constructor": false}], "file": "tinylog-impl/src/main/java/org/tinylog/pattern/IndentationToken.java"}, "focal_method": {"identifier": "render", "parameters": "(final LogEntry logEntry, final StringBuilder builder)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void render(final LogEntry logEntry, final StringBuilder builder) {\n\t\tStringBuilder source = new StringBuilder(INITIAL_CAPACITY);\n\t\ttoken.render(logEntry, source);\n\n\t\tint head = 0;\n\t\tfor (int i = source.indexOf(NEW_LINE, head); i != -1; i = source.indexOf(NEW_LINE, head)) {\n\t\t\tbuilder.append(source, head, i + NEW_LINE.length());\n\t\t\thead = i + NEW_LINE.length();\n\t\t\tif (head < source.length()) {\n\t\t\t\tbuilder.append(spaces);\n\t\t\t\twhile (head < source.length() && source.charAt(head) == '\\t') {\n\t\t\t\t\tbuilder.append(spaces);\n\t\t\t\t\t++head;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbuilder.append(source, head, source.length());\n\t}", "signature": "void render(final LogEntry logEntry, final StringBuilder builder)", "full_signature": "@Override public void render(final LogEntry logEntry, final StringBuilder builder)", "class_method_signature": "IndentationToken.render(final LogEntry logEntry, final StringBuilder builder)", "testcase": false, "constructor": false, "invocations": ["render", "indexOf", "indexOf", "append", "length", "length", "length", "append", "length", "charAt", "append", "append", "length"]}, "repository": {"repo_id": 5793618, "url": "https://github.com/pmwmedia/tinylog", "stars": 274, "created": "9/13/2012 11:21:42 AM +00:00", "updates": "2020-01-23T21:53:25+00:00", "fork": "False", "license": "licensed"}}