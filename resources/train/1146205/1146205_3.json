{"test_class": {"identifier": "AbstractMuxConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MemBlobStore        store1;", "modifier": "private", "type": "MemBlobStore", "declarator": "store1", "var_name": "store1"}, {"original_string": "private MemBlobStore        store2;", "modifier": "private", "type": "MemBlobStore", "declarator": "store2", "var_name": "store2"}, {"original_string": "private AbstractMuxStore    store;", "modifier": "private", "type": "AbstractMuxStore", "declarator": "store", "var_name": "store"}, {"original_string": "private TestConnection      con;", "modifier": "private", "type": "TestConnection", "declarator": "con", "var_name": "con"}, {"original_string": "private Map<String, String> s1Hint;", "modifier": "private", "type": "Map<String, String>", "declarator": "s1Hint", "var_name": "s1Hint"}, {"original_string": "private Map<String, String> s2Hint;", "modifier": "private", "type": "Map<String, String>", "declarator": "s2Hint", "var_name": "s2Hint"}], "file": "akubra-mux/src/test/java/org/akubraproject/mux/AbstractMuxConnectionTest.java"}, "test_case": {"identifier": "testGetStores", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetStores() {\n    Set<BlobStore> s = con.getStores(null);\n    assertEquals(2, s.size());\n    assertTrue(s.contains(store1));\n    assertTrue(s.contains(store2));\n  }", "signature": "void testGetStores()", "full_signature": "@Test public void testGetStores()", "class_method_signature": "AbstractMuxConnectionTest.testGetStores()", "testcase": true, "constructor": false, "invocations": ["getStores", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "AbstractMuxConnection", "superclass": "extends AbstractBlobStoreConnection", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AbstractBlobStoreConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AbstractBlobStoreConnection.class)", "var_name": "log"}, {"original_string": "protected final Transaction txn;", "modifier": "protected final", "type": "Transaction", "declarator": "txn", "var_name": "txn"}, {"original_string": "protected Map<URI, BlobStoreConnection> cons = new HashMap<URI, BlobStoreConnection>();", "modifier": "protected", "type": "Map<URI, BlobStoreConnection>", "declarator": "cons = new HashMap<URI, BlobStoreConnection>()", "var_name": "cons"}], "methods": [{"identifier": "AbstractMuxConnection", "parameters": "(BlobStore store, Transaction txn)", "modifiers": "public", "return": "", "signature": " AbstractMuxConnection(BlobStore store, Transaction txn)", "full_signature": "public  AbstractMuxConnection(BlobStore store, Transaction txn)", "class_method_signature": "AbstractMuxConnection.AbstractMuxConnection(BlobStore store, Transaction txn)", "testcase": false, "constructor": true}, {"identifier": "getStore", "parameters": "(URI blobId, Map<String, String> hints)", "modifiers": "public abstract", "return": "BlobStore", "signature": "BlobStore getStore(URI blobId, Map<String, String> hints)", "full_signature": "public abstract BlobStore getStore(URI blobId, Map<String, String> hints)", "class_method_signature": "AbstractMuxConnection.getStore(URI blobId, Map<String, String> hints)", "testcase": false, "constructor": false}, {"identifier": "getStores", "parameters": "(String prefix)", "modifiers": "public", "return": "Set<BlobStore>", "signature": "Set<BlobStore> getStores(String prefix)", "full_signature": "public Set<BlobStore> getStores(String prefix)", "class_method_signature": "AbstractMuxConnection.getStores(String prefix)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AbstractMuxConnection.close()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(BlobStore store, Map<String, String> hints)", "modifiers": "protected", "return": "BlobStoreConnection", "signature": "BlobStoreConnection getConnection(BlobStore store, Map<String, String> hints)", "full_signature": "protected BlobStoreConnection getConnection(BlobStore store, Map<String, String> hints)", "class_method_signature": "AbstractMuxConnection.getConnection(BlobStore store, Map<String, String> hints)", "testcase": false, "constructor": false}, {"identifier": "getBlob", "parameters": "(URI blobId, Map<String, String> hints)", "modifiers": "@Override public", "return": "Blob", "signature": "Blob getBlob(URI blobId, Map<String, String> hints)", "full_signature": "@Override public Blob getBlob(URI blobId, Map<String, String> hints)", "class_method_signature": "AbstractMuxConnection.getBlob(URI blobId, Map<String, String> hints)", "testcase": false, "constructor": false}, {"identifier": "listBlobIds", "parameters": "(String filterPrefix)", "modifiers": "@Override public", "return": "Iterator<URI>", "signature": "Iterator<URI> listBlobIds(String filterPrefix)", "full_signature": "@Override public Iterator<URI> listBlobIds(String filterPrefix)", "class_method_signature": "AbstractMuxConnection.listBlobIds(String filterPrefix)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sync()", "full_signature": "@Override public void sync()", "class_method_signature": "AbstractMuxConnection.sync()", "testcase": false, "constructor": false}], "file": "akubra-mux/src/main/java/org/akubraproject/mux/AbstractMuxConnection.java"}, "focal_method": {"identifier": "getStores", "parameters": "(String prefix)", "modifiers": "public", "return": "Set<BlobStore>", "body": "public Set<BlobStore> getStores(String prefix) {\n    return new HashSet<BlobStore>(((AbstractMuxStore) getBlobStore()).getBackingStores());\n  }", "signature": "Set<BlobStore> getStores(String prefix)", "full_signature": "public Set<BlobStore> getStores(String prefix)", "class_method_signature": "AbstractMuxConnection.getStores(String prefix)", "testcase": false, "constructor": false, "invocations": ["getBackingStores", "getBlobStore"]}, "repository": {"repo_id": 1146205, "url": "https://github.com/akubra/akubra", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 11, "size": 5955, "license": "licensed"}}