{"test_class": {"identifier": "ServerTransactionListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Exporter                  exporter;", "modifier": "private", "type": "Exporter", "declarator": "exporter", "var_name": "exporter"}, {"original_string": "private ServerTransactionListener st;", "modifier": "private", "type": "ServerTransactionListener", "declarator": "st", "var_name": "st"}, {"original_string": "private ExecutorService           executor;", "modifier": "private", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private BlobStoreConnection       con;", "modifier": "private", "type": "BlobStoreConnection", "declarator": "con", "var_name": "con"}], "file": "akubra-rmi/src/test/java/org/akubraproject/rmi/server/ServerTransactionListenerTest.java"}, "test_case": {"identifier": "testRegisterSynchronization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRegisterSynchronization() throws Exception {\n    final Synchronization sync   = createMock(Synchronization.class);\n\n    Future<Void>          future =\n      executor.submit(new Callable<Void>() {\n          public Void call() throws Exception {\n            st.registerSynchronization(sync);\n\n            return null;\n          }\n        });\n\n    Operation<?> op              = st.getNextOperation();\n    assertTrue(op instanceof RegisterSynchronization);\n\n    RemoteSynchronization rsync = ((RegisterSynchronization) op).getSynchronization();\n    assertTrue(rsync instanceof ServerSynchronization);\n    assertEquals(sync, ((ServerSynchronization) rsync).getSynchronization());\n    st.postResult(new Result<Void>());\n\n    assertNull(future.get());\n  }", "signature": "void testRegisterSynchronization()", "full_signature": "@Test public void testRegisterSynchronization()", "class_method_signature": "ServerTransactionListenerTest.testRegisterSynchronization()", "testcase": true, "constructor": false, "invocations": ["createMock", "submit", "registerSynchronization", "getNextOperation", "assertTrue", "getSynchronization", "assertTrue", "assertEquals", "getSynchronization", "postResult", "assertNull", "get"]}, "focal_class": {"identifier": "ServerTransactionListener", "superclass": "extends UnicastExportable", "interfaces": "implements Transaction, RemoteTransactionListener", "fields": [{"original_string": "private static final Logger  log              = LoggerFactory.getLogger(ServerTransactionListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "log              = LoggerFactory.getLogger(ServerTransactionListener.class)", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final SynchronousQueue<Operation<?>> operations    = new SynchronousQueue<Operation<?>>();", "modifier": "private final", "type": "SynchronousQueue<Operation<?>>", "declarator": "operations    = new SynchronousQueue<Operation<?>>()", "var_name": "operations"}, {"original_string": "private final SynchronousQueue<Result<?>>    results       = new SynchronousQueue<Result<?>>();", "modifier": "private final", "type": "SynchronousQueue<Result<?>>", "declarator": "results       = new SynchronousQueue<Result<?>>()", "var_name": "results"}, {"original_string": "private final Map<XAResource, ServerXAResource> xas = new HashMap<XAResource, ServerXAResource>();", "modifier": "private final", "type": "Map<XAResource, ServerXAResource>", "declarator": "xas = new HashMap<XAResource, ServerXAResource>()", "var_name": "xas"}], "methods": [{"identifier": "ServerTransactionListener", "parameters": "(final BlobStore store, final Map<String, String> hints,\n                                   Exporter exporter)", "modifiers": "public", "return": "", "signature": " ServerTransactionListener(final BlobStore store, final Map<String, String> hints,\n                                   Exporter exporter)", "full_signature": "public  ServerTransactionListener(final BlobStore store, final Map<String, String> hints,\n                                   Exporter exporter)", "class_method_signature": "ServerTransactionListener.ServerTransactionListener(final BlobStore store, final Map<String, String> hints,\n                                   Exporter exporter)", "testcase": false, "constructor": true}, {"identifier": "openConnection", "parameters": "(BlobStore store, Map<String, String> hints)", "modifiers": "private", "return": "void", "signature": "void openConnection(BlobStore store, Map<String, String> hints)", "full_signature": "private void openConnection(BlobStore store, Map<String, String> hints)", "class_method_signature": "ServerTransactionListener.openConnection(BlobStore store, Map<String, String> hints)", "testcase": false, "constructor": false}, {"identifier": "getNextOperation", "parameters": "()", "modifiers": "public", "return": "Operation<?>", "signature": "Operation<?> getNextOperation()", "full_signature": "public Operation<?> getNextOperation()", "class_method_signature": "ServerTransactionListener.getNextOperation()", "testcase": false, "constructor": false}, {"identifier": "postResult", "parameters": "(Result<?> result)", "modifiers": "public", "return": "void", "signature": "void postResult(Result<?> result)", "full_signature": "public void postResult(Result<?> result)", "class_method_signature": "ServerTransactionListener.postResult(Result<?> result)", "testcase": false, "constructor": false}, {"identifier": "executeOnClient", "parameters": "(Operation<T> operation)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T executeOnClient(Operation<T> operation)", "full_signature": "@SuppressWarnings(\"unchecked\") private T executeOnClient(Operation<T> operation)", "class_method_signature": "ServerTransactionListener.executeOnClient(Operation<T> operation)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void commit()", "full_signature": "public void commit()", "class_method_signature": "ServerTransactionListener.commit()", "testcase": false, "constructor": false}, {"identifier": "delistResource", "parameters": "(XAResource xaRes, int flags)", "modifiers": "public", "return": "boolean", "signature": "boolean delistResource(XAResource xaRes, int flags)", "full_signature": "public boolean delistResource(XAResource xaRes, int flags)", "class_method_signature": "ServerTransactionListener.delistResource(XAResource xaRes, int flags)", "testcase": false, "constructor": false}, {"identifier": "enlistResource", "parameters": "(XAResource xaRes)", "modifiers": "public", "return": "boolean", "signature": "boolean enlistResource(XAResource xaRes)", "full_signature": "public boolean enlistResource(XAResource xaRes)", "class_method_signature": "ServerTransactionListener.enlistResource(XAResource xaRes)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStatus()", "full_signature": "public int getStatus()", "class_method_signature": "ServerTransactionListener.getStatus()", "testcase": false, "constructor": false}, {"identifier": "registerSynchronization", "parameters": "(Synchronization sync)", "modifiers": "public", "return": "void", "signature": "void registerSynchronization(Synchronization sync)", "full_signature": "public void registerSynchronization(Synchronization sync)", "class_method_signature": "ServerTransactionListener.registerSynchronization(Synchronization sync)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rollback()", "full_signature": "public void rollback()", "class_method_signature": "ServerTransactionListener.rollback()", "testcase": false, "constructor": false}, {"identifier": "setRollbackOnly", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setRollbackOnly()", "full_signature": "public void setRollbackOnly()", "class_method_signature": "ServerTransactionListener.setRollbackOnly()", "testcase": false, "constructor": false}, {"identifier": "getXAResource", "parameters": "(RemoteXAResource res)", "modifiers": "public", "return": "XAResource", "signature": "XAResource getXAResource(RemoteXAResource res)", "full_signature": "public XAResource getXAResource(RemoteXAResource res)", "class_method_signature": "ServerTransactionListener.getXAResource(RemoteXAResource res)", "testcase": false, "constructor": false}], "file": "akubra-rmi/src/main/java/org/akubraproject/rmi/server/ServerTransactionListener.java"}, "focal_method": {"identifier": "registerSynchronization", "parameters": "(Synchronization sync)", "modifiers": "public", "return": "void", "body": "public void registerSynchronization(Synchronization sync)\n                               throws RollbackException, IllegalStateException, SystemException {\n    RemoteSynchronization rsync;\n\n    try {\n      rsync = new ServerSynchronization(sync, getExporter());\n    } catch (RemoteException e) {\n      throw (SystemException) new SystemException(\"Failed to export Synchronization\").initCause(e);\n    }\n\n    try {\n      executeOnClient(new RegisterSynchronization(rsync));\n    } catch (ExecutionException e) {\n      Throwable cause = e.getCause();\n\n      if (cause instanceof RollbackException)\n        throw (RollbackException) cause;\n\n      if (cause instanceof SystemException)\n        throw (SystemException) cause;\n\n      if (cause instanceof RuntimeException)\n        throw (RuntimeException) cause;\n\n      throw new RuntimeException(\"Error reported by server\", cause);\n    }\n  }", "signature": "void registerSynchronization(Synchronization sync)", "full_signature": "public void registerSynchronization(Synchronization sync)", "class_method_signature": "ServerTransactionListener.registerSynchronization(Synchronization sync)", "testcase": false, "constructor": false, "invocations": ["getExporter", "initCause", "executeOnClient", "getCause"]}, "repository": {"repo_id": 1146205, "url": "https://github.com/akubra/akubra", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 11, "size": 5955, "license": "licensed"}}