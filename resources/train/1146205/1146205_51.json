{"test_class": {"identifier": "ServerOutputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Exporter                    exporter;", "modifier": "private", "type": "Exporter", "declarator": "exporter", "var_name": "exporter"}, {"original_string": "private ServerOutputStream          so;", "modifier": "private", "type": "ServerOutputStream", "declarator": "so", "var_name": "so"}, {"original_string": "private final ByteArrayOutputStream bo = new ByteArrayOutputStream();", "modifier": "private final", "type": "ByteArrayOutputStream", "declarator": "bo = new ByteArrayOutputStream()", "var_name": "bo"}], "file": "akubra-rmi/src/test/java/org/akubraproject/rmi/server/ServerOutputStreamTest.java"}, "test_case": {"identifier": "testWritePartialBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWritePartialBuffer() throws IOException {\n    bo.reset();\n\n    byte[]        in = \"Hello World\".getBytes();\n    PartialBuffer pb = new PartialBuffer(new byte[in.length * 3], in.length, in.length);\n    System.arraycopy(in, 0, pb.getBuffer(), pb.getOffset(), pb.getLength());\n    so.write(pb);\n\n    byte[] b = bo.toByteArray();\n    assertNotNull(b);\n    assertEquals(in, b);\n  }", "signature": "void testWritePartialBuffer()", "full_signature": "@Test public void testWritePartialBuffer()", "class_method_signature": "ServerOutputStreamTest.testWritePartialBuffer()", "testcase": true, "constructor": false, "invocations": ["reset", "getBytes", "arraycopy", "getBuffer", "getOffset", "getLength", "write", "toByteArray", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "ServerOutputStream", "superclass": "extends UnicastExportable", "interfaces": "implements RemoteOutputStream, Closeable", "fields": [{"original_string": "private static final Logger   log              = LoggerFactory.getLogger(ServerOutputStream.class);", "modifier": "private static final", "type": "Logger", "declarator": "log              = LoggerFactory.getLogger(ServerOutputStream.class)", "var_name": "log"}, {"original_string": "private static final long  serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "protected final OutputStream out;", "modifier": "protected final", "type": "OutputStream", "declarator": "out", "var_name": "out"}], "methods": [{"identifier": "ServerOutputStream", "parameters": "(OutputStream out, Exporter exporter)", "modifiers": "public", "return": "", "signature": " ServerOutputStream(OutputStream out, Exporter exporter)", "full_signature": "public  ServerOutputStream(OutputStream out, Exporter exporter)", "class_method_signature": "ServerOutputStream.ServerOutputStream(OutputStream out, Exporter exporter)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(int b)", "modifiers": "public", "return": "void", "signature": "void write(int b)", "full_signature": "public void write(int b)", "class_method_signature": "ServerOutputStream.write(int b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] b)", "modifiers": "public", "return": "void", "signature": "void write(byte[] b)", "full_signature": "public void write(byte[] b)", "class_method_signature": "ServerOutputStream.write(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(PartialBuffer b)", "modifiers": "public", "return": "void", "signature": "void write(PartialBuffer b)", "full_signature": "public void write(PartialBuffer b)", "class_method_signature": "ServerOutputStream.write(PartialBuffer b)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "ServerOutputStream.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ServerOutputStream.close()", "testcase": false, "constructor": false}, {"identifier": "unreferenced", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unreferenced()", "full_signature": "@Override public void unreferenced()", "class_method_signature": "ServerOutputStream.unreferenced()", "testcase": false, "constructor": false}, {"identifier": "getOutputStream", "parameters": "()", "modifiers": "", "return": "OutputStream", "signature": "OutputStream getOutputStream()", "full_signature": " OutputStream getOutputStream()", "class_method_signature": "ServerOutputStream.getOutputStream()", "testcase": false, "constructor": false}], "file": "akubra-rmi/src/main/java/org/akubraproject/rmi/server/ServerOutputStream.java"}, "focal_method": {"identifier": "write", "parameters": "(int b)", "modifiers": "public", "return": "void", "body": "public void write(int b) throws IOException {\n    out.write(b);\n  }", "signature": "void write(int b)", "full_signature": "public void write(int b)", "class_method_signature": "ServerOutputStream.write(int b)", "testcase": false, "constructor": false, "invocations": ["write"]}, "repository": {"repo_id": 1146205, "url": "https://github.com/akubra/akubra", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 11, "size": 5955, "license": "licensed"}}