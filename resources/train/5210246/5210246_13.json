{"test_class": {"identifier": "AggregateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n\tprivate Foldable<Integer> function = mock(Foldable.class);", "modifier": "@SuppressWarnings(\"unchecked\")\n\tprivate", "type": "Foldable<Integer>", "declarator": "function = mock(Foldable.class)", "var_name": "function"}, {"original_string": "private final Expression exp1 = mock(Expression.class);", "modifier": "private final", "type": "Expression", "declarator": "exp1 = mock(Expression.class)", "var_name": "exp1"}, {"original_string": "private final Expression exp2 = mock(Expression.class);", "modifier": "private final", "type": "Expression", "declarator": "exp2 = mock(Expression.class)", "var_name": "exp2"}, {"original_string": "private Aggregate<Integer> agg;", "modifier": "private", "type": "Aggregate<Integer>", "declarator": "agg", "var_name": "agg"}], "file": "server/src/test/java/com/readytalk/revori/AggregateTest.java"}, "test_case": {"identifier": "equalsSelfIsTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void equalsSelfIsTrue() {\n\t\tassertTrue(agg.equals(agg));\n\t}", "signature": "void equalsSelfIsTrue()", "full_signature": "@Test public void equalsSelfIsTrue()", "class_method_signature": "AggregateTest.equalsSelfIsTrue()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals"]}, "focal_class": {"identifier": "Aggregate", "superclass": "", "interfaces": "implements Expression", "fields": [{"original_string": "private static final AtomicInteger nextOrder = new AtomicInteger();", "modifier": "private static final", "type": "AtomicInteger", "declarator": "nextOrder = new AtomicInteger()", "var_name": "nextOrder"}, {"original_string": "public final Class<T> type;", "modifier": "public final", "type": "Class<T>", "declarator": "type", "var_name": "type"}, {"original_string": "public final Foldable<T> function;", "modifier": "public final", "type": "Foldable<T>", "declarator": "function", "var_name": "function"}, {"original_string": "public final List<Expression> expressions;", "modifier": "public final", "type": "List<Expression>", "declarator": "expressions", "var_name": "expressions"}, {"original_string": "public final int order;", "modifier": "public final", "type": "int", "declarator": "order", "var_name": "order"}], "methods": [{"identifier": "Aggregate", "parameters": "(Class<T> type,\n                   Foldable<T> function,\n                   List<Expression> expressions)", "modifiers": "public", "return": "", "signature": " Aggregate(Class<T> type,\n                   Foldable<T> function,\n                   List<Expression> expressions)", "full_signature": "public  Aggregate(Class<T> type,\n                   Foldable<T> function,\n                   List<Expression> expressions)", "class_method_signature": "Aggregate.Aggregate(Class<T> type,\n                   Foldable<T> function,\n                   List<Expression> expressions)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(ExpressionVisitor visitor)", "modifiers": "public", "return": "void", "signature": "void visit(ExpressionVisitor visitor)", "full_signature": "public void visit(ExpressionVisitor visitor)", "class_method_signature": "Aggregate.visit(ExpressionVisitor visitor)", "testcase": false, "constructor": false}, {"identifier": "typeConstraint", "parameters": "()", "modifiers": "public", "return": "Class<T>", "signature": "Class<T> typeConstraint()", "full_signature": "public Class<T> typeConstraint()", "class_method_signature": "Aggregate.typeConstraint()", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "()", "modifiers": "public", "return": "Iterable<Expression>", "signature": "Iterable<Expression> children()", "full_signature": "public Iterable<Expression> children()", "class_method_signature": "Aggregate.children()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Expression e)", "modifiers": "public", "return": "int", "signature": "int compareTo(Expression e)", "full_signature": "public int compareTo(Expression e)", "class_method_signature": "Aggregate.compareTo(Expression e)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "Aggregate.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Aggregate.hashCode()", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/readytalk/revori/Aggregate.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object o) {\n    return o instanceof Aggregate && compareTo((Aggregate) o) == 0;\n  }", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "Aggregate.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["compareTo"]}, "repository": {"repo_id": 5210246, "url": "https://github.com/ReadyTalk/revori", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 1984, "license": "licensed"}}