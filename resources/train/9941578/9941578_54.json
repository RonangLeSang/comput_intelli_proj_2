{"test_class": {"identifier": "MerlinsBeardTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean DISCONNECTED = false;", "modifier": "private static final", "type": "boolean", "declarator": "DISCONNECTED = false", "var_name": "DISCONNECTED"}, {"original_string": "private static final boolean CONNECTED = true;", "modifier": "private static final", "type": "boolean", "declarator": "CONNECTED = true", "var_name": "CONNECTED"}, {"original_string": "private static final boolean BELOW_LOLLIPOP = false;", "modifier": "private static final", "type": "boolean", "declarator": "BELOW_LOLLIPOP = false", "var_name": "BELOW_LOLLIPOP"}, {"original_string": "private static final boolean LOLLIPOP_OR_ABOVE = true;", "modifier": "private static final", "type": "boolean", "declarator": "LOLLIPOP_OR_ABOVE = true", "var_name": "LOLLIPOP_OR_ABOVE"}, {"original_string": "private final ConnectivityManager connectivityManager = mock(ConnectivityManager.class);", "modifier": "private final", "type": "ConnectivityManager", "declarator": "connectivityManager = mock(ConnectivityManager.class)", "var_name": "connectivityManager"}, {"original_string": "private final NetworkInfo networkInfo = mock(NetworkInfo.class);", "modifier": "private final", "type": "NetworkInfo", "declarator": "networkInfo = mock(NetworkInfo.class)", "var_name": "networkInfo"}, {"original_string": "private final AndroidVersion androidVersion = mock(AndroidVersion.class);", "modifier": "private final", "type": "AndroidVersion", "declarator": "androidVersion = mock(AndroidVersion.class)", "var_name": "androidVersion"}, {"original_string": "private final EndpointPinger endpointPinger = mock(EndpointPinger.class);", "modifier": "private final", "type": "EndpointPinger", "declarator": "endpointPinger = mock(EndpointPinger.class)", "var_name": "endpointPinger"}, {"original_string": "private final MerlinsBeard.InternetAccessCallback mockCaptivePortalCallback = mock(MerlinsBeard.InternetAccessCallback.class);", "modifier": "private final", "type": "MerlinsBeard.InternetAccessCallback", "declarator": "mockCaptivePortalCallback = mock(MerlinsBeard.InternetAccessCallback.class)", "var_name": "mockCaptivePortalCallback"}, {"original_string": "private final Ping mockPing = mock(Ping.class);", "modifier": "private final", "type": "Ping", "declarator": "mockPing = mock(Ping.class)", "var_name": "mockPing"}, {"original_string": "private MerlinsBeard merlinsBeard;", "modifier": "private", "type": "MerlinsBeard", "declarator": "merlinsBeard", "var_name": "merlinsBeard"}], "file": "core/src/test/java/com/novoda/merlin/MerlinsBeardTest.java"}, "test_case": {"identifier": "givenNetworkIsDisconnected_andAndroidVersionIsBelowLollipop_whenCheckingIfConnectedToWifi_thenReturnsFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void givenNetworkIsDisconnected_andAndroidVersionIsBelowLollipop_whenCheckingIfConnectedToWifi_thenReturnsFalse() {\n        givenNetworkStateForBelowLollipop(DISCONNECTED, ConnectivityManager.TYPE_WIFI);\n\n        boolean connectedToWifi = merlinsBeard.isConnectedToWifi();\n\n        assertThat(connectedToWifi).isFalse();\n    }", "signature": "void givenNetworkIsDisconnected_andAndroidVersionIsBelowLollipop_whenCheckingIfConnectedToWifi_thenReturnsFalse()", "full_signature": "@Test public void givenNetworkIsDisconnected_andAndroidVersionIsBelowLollipop_whenCheckingIfConnectedToWifi_thenReturnsFalse()", "class_method_signature": "MerlinsBeardTest.givenNetworkIsDisconnected_andAndroidVersionIsBelowLollipop_whenCheckingIfConnectedToWifi_thenReturnsFalse()", "testcase": true, "constructor": false, "invocations": ["givenNetworkStateForBelowLollipop", "isConnectedToWifi", "isFalse", "assertThat"]}, "focal_class": {"identifier": "MerlinsBeard", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean IS_NOT_CONNECTED_TO_NETWORK_TYPE = false;", "modifier": "private static final", "type": "boolean", "declarator": "IS_NOT_CONNECTED_TO_NETWORK_TYPE = false", "var_name": "IS_NOT_CONNECTED_TO_NETWORK_TYPE"}, {"original_string": "private final ConnectivityManager connectivityManager;", "modifier": "private final", "type": "ConnectivityManager", "declarator": "connectivityManager", "var_name": "connectivityManager"}, {"original_string": "private final AndroidVersion androidVersion;", "modifier": "private final", "type": "AndroidVersion", "declarator": "androidVersion", "var_name": "androidVersion"}, {"original_string": "private final EndpointPinger captivePortalPinger;", "modifier": "private final", "type": "EndpointPinger", "declarator": "captivePortalPinger", "var_name": "captivePortalPinger"}, {"original_string": "private final Ping captivePortalPing;", "modifier": "private final", "type": "Ping", "declarator": "captivePortalPing", "var_name": "captivePortalPing"}], "methods": [{"identifier": "from", "parameters": "(Context context)", "modifiers": "@Deprecated public static", "return": "MerlinsBeard", "signature": "MerlinsBeard from(Context context)", "full_signature": "@Deprecated public static MerlinsBeard from(Context context)", "class_method_signature": "MerlinsBeard.from(Context context)", "testcase": false, "constructor": false}, {"identifier": "MerlinsBeard", "parameters": "(ConnectivityManager connectivityManager, AndroidVersion androidVersion, EndpointPinger captivePortalPinger, Ping CaptivePortalPing)", "modifiers": "", "return": "", "signature": " MerlinsBeard(ConnectivityManager connectivityManager, AndroidVersion androidVersion, EndpointPinger captivePortalPinger, Ping CaptivePortalPing)", "full_signature": "  MerlinsBeard(ConnectivityManager connectivityManager, AndroidVersion androidVersion, EndpointPinger captivePortalPinger, Ping CaptivePortalPing)", "class_method_signature": "MerlinsBeard.MerlinsBeard(ConnectivityManager connectivityManager, AndroidVersion androidVersion, EndpointPinger captivePortalPinger, Ping CaptivePortalPing)", "testcase": false, "constructor": true}, {"identifier": "isConnected", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "public boolean isConnected()", "class_method_signature": "MerlinsBeard.isConnected()", "testcase": false, "constructor": false}, {"identifier": "networkInfo", "parameters": "()", "modifiers": "private", "return": "NetworkInfo", "signature": "NetworkInfo networkInfo()", "full_signature": "private NetworkInfo networkInfo()", "class_method_signature": "MerlinsBeard.networkInfo()", "testcase": false, "constructor": false}, {"identifier": "isConnectedToMobileNetwork", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnectedToMobileNetwork()", "full_signature": "public boolean isConnectedToMobileNetwork()", "class_method_signature": "MerlinsBeard.isConnectedToMobileNetwork()", "testcase": false, "constructor": false}, {"identifier": "isConnectedToWifi", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnectedToWifi()", "full_signature": "public boolean isConnectedToWifi()", "class_method_signature": "MerlinsBeard.isConnectedToWifi()", "testcase": false, "constructor": false}, {"identifier": "isConnectedTo", "parameters": "(int networkType)", "modifiers": "private", "return": "boolean", "signature": "boolean isConnectedTo(int networkType)", "full_signature": "private boolean isConnectedTo(int networkType)", "class_method_signature": "MerlinsBeard.isConnectedTo(int networkType)", "testcase": false, "constructor": false}, {"identifier": "connectedToNetworkTypeForLollipop", "parameters": "(int networkType)", "modifiers": "@TargetApi(Build.VERSION_CODES.LOLLIPOP) private", "return": "boolean", "signature": "boolean connectedToNetworkTypeForLollipop(int networkType)", "full_signature": "@TargetApi(Build.VERSION_CODES.LOLLIPOP) private boolean connectedToNetworkTypeForLollipop(int networkType)", "class_method_signature": "MerlinsBeard.connectedToNetworkTypeForLollipop(int networkType)", "testcase": false, "constructor": false}, {"identifier": "getMobileNetworkSubtypeName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMobileNetworkSubtypeName()", "full_signature": "public String getMobileNetworkSubtypeName()", "class_method_signature": "MerlinsBeard.getMobileNetworkSubtypeName()", "testcase": false, "constructor": false}, {"identifier": "hasInternetAccess", "parameters": "(final InternetAccessCallback callback)", "modifiers": "public", "return": "void", "signature": "void hasInternetAccess(final InternetAccessCallback callback)", "full_signature": "public void hasInternetAccess(final InternetAccessCallback callback)", "class_method_signature": "MerlinsBeard.hasInternetAccess(final InternetAccessCallback callback)", "testcase": false, "constructor": false}, {"identifier": "hasInternetAccess", "parameters": "()", "modifiers": "@WorkerThread public", "return": "boolean", "signature": "boolean hasInternetAccess()", "full_signature": "@WorkerThread public boolean hasInternetAccess()", "class_method_signature": "MerlinsBeard.hasInternetAccess()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/novoda/merlin/MerlinsBeard.java"}, "focal_method": {"identifier": "isConnectedToWifi", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isConnectedToWifi() {\n        return isConnectedTo(ConnectivityManager.TYPE_WIFI);\n    }", "signature": "boolean isConnectedToWifi()", "full_signature": "public boolean isConnectedToWifi()", "class_method_signature": "MerlinsBeard.isConnectedToWifi()", "testcase": false, "constructor": false, "invocations": ["isConnectedTo"]}, "repository": {"repo_id": 9941578, "url": "https://github.com/novoda/merlin", "language": "Java", "is_fork": false, "fork_count": 67, "stargazer_count": 521, "size": 2602, "license": "licensed"}}