{"test_class": {"identifier": "ConnectivityCallbacksTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean CONNECTED = true;", "modifier": "private static final", "type": "boolean", "declarator": "CONNECTED = true", "var_name": "CONNECTED"}, {"original_string": "private static final boolean DISCONNECTED = false;", "modifier": "private static final", "type": "boolean", "declarator": "DISCONNECTED = false", "var_name": "DISCONNECTED"}, {"original_string": "private static final String ANY_REASON = \"reason\";", "modifier": "private static final", "type": "String", "declarator": "ANY_REASON = \"reason\"", "var_name": "ANY_REASON"}, {"original_string": "private static final String ANY_EXTRA_INFO = \"extra info\";", "modifier": "private static final", "type": "String", "declarator": "ANY_EXTRA_INFO = \"extra info\"", "var_name": "ANY_EXTRA_INFO"}, {"original_string": "private static final int MAX_MS_TO_LIVE = 0;", "modifier": "private static final", "type": "int", "declarator": "MAX_MS_TO_LIVE = 0", "var_name": "MAX_MS_TO_LIVE"}, {"original_string": "private static final Network MISSING_NETWORK = null;", "modifier": "private static final", "type": "Network", "declarator": "MISSING_NETWORK = null", "var_name": "MISSING_NETWORK"}, {"original_string": "private static final boolean CAN_NOTIFY = true;", "modifier": "private static final", "type": "boolean", "declarator": "CAN_NOTIFY = true", "var_name": "CAN_NOTIFY"}, {"original_string": "private static final boolean CANNOT_NOTIFY = false;", "modifier": "private static final", "type": "boolean", "declarator": "CANNOT_NOTIFY = false", "var_name": "CANNOT_NOTIFY"}, {"original_string": "private final ConnectivityManager connectivityManager = mock(ConnectivityManager.class);", "modifier": "private final", "type": "ConnectivityManager", "declarator": "connectivityManager = mock(ConnectivityManager.class)", "var_name": "connectivityManager"}, {"original_string": "private final MerlinService.ConnectivityChangesNotifier connectivityChangesNotifier = mock(MerlinService.ConnectivityChangesNotifier.class);", "modifier": "private final", "type": "MerlinService.ConnectivityChangesNotifier", "declarator": "connectivityChangesNotifier = mock(MerlinService.ConnectivityChangesNotifier.class)", "var_name": "connectivityChangesNotifier"}, {"original_string": "private final Network network = mock(Network.class);", "modifier": "private final", "type": "Network", "declarator": "network = mock(Network.class)", "var_name": "network"}, {"original_string": "private ConnectivityCallbacks networkCallbacks;", "modifier": "private", "type": "ConnectivityCallbacks", "declarator": "networkCallbacks", "var_name": "networkCallbacks"}], "file": "core/src/test/java/com/novoda/merlin/ConnectivityCallbacksTest.java"}, "test_case": {"identifier": "givenCannotNotify_whenNetworkIsLost_thenNeverNotifiesConnectivityChangeEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void givenCannotNotify_whenNetworkIsLost_thenNeverNotifiesConnectivityChangeEvent() {\n        given(connectivityChangesNotifier.canNotify()).willReturn(CANNOT_NOTIFY);\n\n        networkCallbacks.onLost(MISSING_NETWORK);\n\n        InOrder inOrder = inOrder(connectivityChangesNotifier);\n        inOrder.verify(connectivityChangesNotifier).canNotify();\n        inOrder.verifyNoMoreInteractions();\n    }", "signature": "void givenCannotNotify_whenNetworkIsLost_thenNeverNotifiesConnectivityChangeEvent()", "full_signature": "@Test public void givenCannotNotify_whenNetworkIsLost_thenNeverNotifiesConnectivityChangeEvent()", "class_method_signature": "ConnectivityCallbacksTest.givenCannotNotify_whenNetworkIsLost_thenNeverNotifiesConnectivityChangeEvent()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "canNotify", "onLost", "inOrder", "canNotify", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ConnectivityCallbacks", "superclass": "extends ConnectivityManager.NetworkCallback", "interfaces": "", "fields": [{"original_string": "private final MerlinService.ConnectivityChangesNotifier connectivityChangesNotifier;", "modifier": "private final", "type": "MerlinService.ConnectivityChangesNotifier", "declarator": "connectivityChangesNotifier", "var_name": "connectivityChangesNotifier"}, {"original_string": "private final ConnectivityChangeEventExtractor connectivityChangeEventExtractor;", "modifier": "private final", "type": "ConnectivityChangeEventExtractor", "declarator": "connectivityChangeEventExtractor", "var_name": "connectivityChangeEventExtractor"}], "methods": [{"identifier": "ConnectivityCallbacks", "parameters": "(MerlinService.ConnectivityChangesNotifier connectivityChangesNotifier,\n                          ConnectivityChangeEventExtractor connectivityChangeEventExtractor)", "modifiers": "", "return": "", "signature": " ConnectivityCallbacks(MerlinService.ConnectivityChangesNotifier connectivityChangesNotifier,\n                          ConnectivityChangeEventExtractor connectivityChangeEventExtractor)", "full_signature": "  ConnectivityCallbacks(MerlinService.ConnectivityChangesNotifier connectivityChangesNotifier,\n                          ConnectivityChangeEventExtractor connectivityChangeEventExtractor)", "class_method_signature": "ConnectivityCallbacks.ConnectivityCallbacks(MerlinService.ConnectivityChangesNotifier connectivityChangesNotifier,\n                          ConnectivityChangeEventExtractor connectivityChangeEventExtractor)", "testcase": false, "constructor": true}, {"identifier": "onAvailable", "parameters": "(Network network)", "modifiers": "@Override public", "return": "void", "signature": "void onAvailable(Network network)", "full_signature": "@Override public void onAvailable(Network network)", "class_method_signature": "ConnectivityCallbacks.onAvailable(Network network)", "testcase": false, "constructor": false}, {"identifier": "onLosing", "parameters": "(Network network, int maxMsToLive)", "modifiers": "@Override public", "return": "void", "signature": "void onLosing(Network network, int maxMsToLive)", "full_signature": "@Override public void onLosing(Network network, int maxMsToLive)", "class_method_signature": "ConnectivityCallbacks.onLosing(Network network, int maxMsToLive)", "testcase": false, "constructor": false}, {"identifier": "onLost", "parameters": "(Network network)", "modifiers": "@Override public", "return": "void", "signature": "void onLost(Network network)", "full_signature": "@Override public void onLost(Network network)", "class_method_signature": "ConnectivityCallbacks.onLost(Network network)", "testcase": false, "constructor": false}, {"identifier": "notifyMerlinService", "parameters": "(Network network)", "modifiers": "private", "return": "void", "signature": "void notifyMerlinService(Network network)", "full_signature": "private void notifyMerlinService(Network network)", "class_method_signature": "ConnectivityCallbacks.notifyMerlinService(Network network)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/novoda/merlin/ConnectivityCallbacks.java"}, "focal_method": {"identifier": "onLost", "parameters": "(Network network)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onLost(Network network) {\n        notifyMerlinService(network);\n    }", "signature": "void onLost(Network network)", "full_signature": "@Override public void onLost(Network network)", "class_method_signature": "ConnectivityCallbacks.onLost(Network network)", "testcase": false, "constructor": false, "invocations": ["notifyMerlinService"]}, "repository": {"repo_id": 9941578, "url": "https://github.com/novoda/merlin", "language": "Java", "is_fork": false, "fork_count": 67, "stargazer_count": 521, "size": 2602, "license": "licensed"}}