{"test_class": {"identifier": "MeteredMethodWithRegistryFromStringTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String REGISTRY_NAME = \"singleMeterRegistry\";", "modifier": "private final static", "type": "String", "declarator": "REGISTRY_NAME = \"singleMeterRegistry\"", "var_name": "REGISTRY_NAME"}, {"original_string": "private final static String METER_NAME = MetricRegistry.name(MeteredMethodWithRegistryFromString.class, \"singleMeteredMethod\");", "modifier": "private final static", "type": "String", "declarator": "METER_NAME = MetricRegistry.name(MeteredMethodWithRegistryFromString.class, \"singleMeteredMethod\")", "var_name": "METER_NAME"}, {"original_string": "private MeteredMethodWithRegistryFromString instance;", "modifier": "private", "type": "MeteredMethodWithRegistryFromString", "declarator": "instance", "var_name": "instance"}], "file": "envs/se/src/test/java/io/astefanutti/metrics/aspectj/se/MeteredMethodWithRegistryFromStringTest.java"}, "test_case": {"identifier": "callMeteredMethodOnce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void callMeteredMethodOnce() {\n        assertThat(\"Shared metric registry is not created\", SharedMetricRegistries.names(), hasItem(REGISTRY_NAME));\n        MetricRegistry registry = SharedMetricRegistries.getOrCreate(REGISTRY_NAME);\n        assertThat(\"Meter is not registered correctly\", registry.getMeters(), hasKey(METER_NAME));\n        Meter meter = registry.getMeters().get(METER_NAME);\n\n        // Call the metered method and assert it's been marked\n        instance.singleMeteredMethod();\n        assertThat(\"Meter count is incorrect\", meter.getCount(), is(equalTo(1L)));\n    }", "signature": "void callMeteredMethodOnce()", "full_signature": "@Test public void callMeteredMethodOnce()", "class_method_signature": "MeteredMethodWithRegistryFromStringTest.callMeteredMethodOnce()", "testcase": true, "constructor": false, "invocations": ["assertThat", "names", "hasItem", "getOrCreate", "assertThat", "getMeters", "hasKey", "get", "getMeters", "singleMeteredMethod", "assertThat", "getCount", "is", "equalTo"]}, "focal_class": {"identifier": "MeteredMethodWithRegistryFromString", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "singleMeteredMethod", "parameters": "()", "modifiers": "@Metered(name = \"singleMeteredMethod\") public", "return": "void", "signature": "void singleMeteredMethod()", "full_signature": "@Metered(name = \"singleMeteredMethod\") public void singleMeteredMethod()", "class_method_signature": "MeteredMethodWithRegistryFromString.singleMeteredMethod()", "testcase": false, "constructor": false}], "file": "envs/se/src/main/java/io/astefanutti/metrics/aspectj/se/MeteredMethodWithRegistryFromString.java"}, "focal_method": {"identifier": "singleMeteredMethod", "parameters": "()", "modifiers": "@Metered(name = \"singleMeteredMethod\") public", "return": "void", "body": "@Metered(name = \"singleMeteredMethod\")\n    public void singleMeteredMethod() {\n    }", "signature": "void singleMeteredMethod()", "full_signature": "@Metered(name = \"singleMeteredMethod\") public void singleMeteredMethod()", "class_method_signature": "MeteredMethodWithRegistryFromString.singleMeteredMethod()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 12847265, "url": "https://github.com/astefanutti/metrics-aspectj", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 75, "size": 362, "license": "licensed"}}