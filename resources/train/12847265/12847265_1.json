{"test_class": {"identifier": "TimedMethodWithRegistryFromSharedMetricRegistriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String REGISTRY_NAME = \"staticRegistry\";", "modifier": "private final static", "type": "String", "declarator": "REGISTRY_NAME = \"staticRegistry\"", "var_name": "REGISTRY_NAME"}, {"original_string": "private final static String TIMER_NAME = MetricRegistry.name(TimedMethodWithRegistryFromSharedMetricRegistries.class, \"singleTimedMethod\");", "modifier": "private final static", "type": "String", "declarator": "TIMER_NAME = MetricRegistry.name(TimedMethodWithRegistryFromSharedMetricRegistries.class, \"singleTimedMethod\")", "var_name": "TIMER_NAME"}, {"original_string": "private TimedMethodWithRegistryFromSharedMetricRegistries instance;", "modifier": "private", "type": "TimedMethodWithRegistryFromSharedMetricRegistries", "declarator": "instance", "var_name": "instance"}], "file": "envs/el/src/test/java/io/astefanutti/metrics/aspectj/el/TimedMethodWithRegistryFromSharedMetricRegistriesTest.java"}, "test_case": {"identifier": "callTimedMethodOnce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void callTimedMethodOnce() {\n        assertThat(\"Shared metric registry is not created\", SharedMetricRegistries.names(), hasItem(REGISTRY_NAME));\n        MetricRegistry registry = SharedMetricRegistries.getOrCreate(REGISTRY_NAME);\n        assertThat(\"Timer is not registered correctly\", registry.getTimers(), hasKey(TIMER_NAME));\n        Timer timer = registry.getTimers().get(TIMER_NAME);\n\n        // Call the timed method and assert it's been timed\n        instance.singleTimedMethod();\n        assertThat(\"Timer count is incorrect\", timer.getCount(), is(equalTo(1L)));\n    }", "signature": "void callTimedMethodOnce()", "full_signature": "@Test public void callTimedMethodOnce()", "class_method_signature": "TimedMethodWithRegistryFromSharedMetricRegistriesTest.callTimedMethodOnce()", "testcase": true, "constructor": false, "invocations": ["assertThat", "names", "hasItem", "getOrCreate", "assertThat", "getTimers", "hasKey", "get", "getTimers", "singleTimedMethod", "assertThat", "getCount", "is", "equalTo"]}, "focal_class": {"identifier": "TimedMethodWithRegistryFromSharedMetricRegistries", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "singleTimedMethod", "parameters": "()", "modifiers": "@Timed(name = \"singleTimedMethod\") public", "return": "void", "signature": "void singleTimedMethod()", "full_signature": "@Timed(name = \"singleTimedMethod\") public void singleTimedMethod()", "class_method_signature": "TimedMethodWithRegistryFromSharedMetricRegistries.singleTimedMethod()", "testcase": false, "constructor": false}], "file": "envs/el/src/main/java/io/astefanutti/metrics/aspectj/el/TimedMethodWithRegistryFromSharedMetricRegistries.java"}, "focal_method": {"identifier": "singleTimedMethod", "parameters": "()", "modifiers": "@Timed(name = \"singleTimedMethod\") public", "return": "void", "body": "@Timed(name = \"singleTimedMethod\")\n    public void singleTimedMethod() {\n    }", "signature": "void singleTimedMethod()", "full_signature": "@Timed(name = \"singleTimedMethod\") public void singleTimedMethod()", "class_method_signature": "TimedMethodWithRegistryFromSharedMetricRegistries.singleTimedMethod()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 12847265, "url": "https://github.com/astefanutti/metrics-aspectj", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 75, "size": 362, "license": "licensed"}}