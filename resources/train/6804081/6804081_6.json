{"test_class": {"identifier": "UniversalVisitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "UniversalVisitor underTest;", "modifier": "", "type": "UniversalVisitor", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "A a;", "modifier": "", "type": "A", "declarator": "a", "var_name": "a"}, {"original_string": "D d;", "modifier": "", "type": "D", "declarator": "d", "var_name": "d"}, {"original_string": "H h;", "modifier": "", "type": "H", "declarator": "h", "var_name": "h"}, {"original_string": "M m;", "modifier": "", "type": "M", "declarator": "m", "var_name": "m"}, {"original_string": "N n;", "modifier": "", "type": "N", "declarator": "n", "var_name": "n"}, {"original_string": "Issue1 issue1;", "modifier": "", "type": "Issue1", "declarator": "issue1", "var_name": "issue1"}, {"original_string": "Issue2 issue2;", "modifier": "", "type": "Issue2", "declarator": "issue2", "var_name": "issue2"}, {"original_string": "L1 l1;", "modifier": "", "type": "L1", "declarator": "l1", "var_name": "l1"}], "file": "universalvisitor/src/test/java/org/nuunframework/universalvisitor/UniversalVisitorTest.java"}, "test_case": {"identifier": "issue2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void issue2 () {\n\t\tCountMapper nopMap = new CountMapper();\n//\t\tSystem.out.println(\"============================== ISSUE2 ===================================\");\n\t\tunderTest.visit(issue2, nopMap);\n\t\t\n\t\tassertThat(nopMap.methods).contains(\"interface1M\",\"interface2M\",\"interface3M\",\"issue2Private\" , \"issue2Package\", \"issue2Protected\" , \"issue2Public\" , \"parentPrivate\" , \"parentProtected\", \"parentPackage\" , \"parentPublic\");\n//\t\tSystem.out.println(nopMap.methods);\n\t\tassertThat(nopMap.fields).contains(\"interface1F\",\"interface2F\",\"interface3F\", \"issue2Private\" , \"issue2Package\", \"issue2Protected\" , \"issue2Public\" , \"parentPrivate\" , \"parentProtected\", \"parentPackage\" , \"parentPublic\");\n//\t\tSystem.out.println(nopMap.fields);\n\t\tSystem.out.println(nopMap.node);\n\t}", "signature": "void issue2()", "full_signature": "@Test public void issue2()", "class_method_signature": "UniversalVisitorTest.issue2()", "testcase": true, "constructor": false, "invocations": ["visit", "contains", "assertThat", "contains", "assertThat", "println"]}, "focal_class": {"identifier": "UniversalVisitor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "visit", "parameters": "(AnnotatedElement ae, Mapper<T> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void visit(AnnotatedElement ae, Mapper<T> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public void visit(AnnotatedElement ae, Mapper<T> mapper)", "class_method_signature": "UniversalVisitor.visit(AnnotatedElement ae, Mapper<T> mapper)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o, Mapper<T> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void visit(Object o, Mapper<T> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public void visit(Object o, Mapper<T> mapper)", "class_method_signature": "UniversalVisitor.visit(Object o, Mapper<T> mapper)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(AnnotatedElement o, Filter filter, Mapper<T> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void visit(AnnotatedElement o, Filter filter, Mapper<T> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public void visit(AnnotatedElement o, Filter filter, Mapper<T> mapper)", "class_method_signature": "UniversalVisitor.visit(AnnotatedElement o, Filter filter, Mapper<T> mapper)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o, Filter filter, Mapper<T> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void visit(Object o, Filter filter, Mapper<T> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public void visit(Object o, Filter filter, Mapper<T> mapper)", "class_method_signature": "UniversalVisitor.visit(Object o, Filter filter, Mapper<T> mapper)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o, Mapper<T> mapper, Reducer... reducers)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "void", "signature": "void visit(Object o, Mapper<T> mapper, Reducer... reducers)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public void visit(Object o, Mapper<T> mapper, Reducer... reducers)", "class_method_signature": "UniversalVisitor.visit(Object o, Mapper<T> mapper, Reducer... reducers)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o, Filter filter, Mapper<T> mapper, Reducer<T, ?> reducer)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void visit(Object o, Filter filter, Mapper<T> mapper, Reducer<T, ?> reducer)", "full_signature": "@SuppressWarnings(\"unchecked\") public void visit(Object o, Filter filter, Mapper<T> mapper, Reducer<T, ?> reducer)", "class_method_signature": "UniversalVisitor.visit(Object o, Filter filter, Mapper<T> mapper, Reducer<T, ?> reducer)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o,  MapReduce<?> ...mapReduces)", "modifiers": "public", "return": "void", "signature": "void visit(Object o,  MapReduce<?> ...mapReduces)", "full_signature": "public void visit(Object o,  MapReduce<?> ...mapReduces)", "class_method_signature": "UniversalVisitor.visit(Object o,  MapReduce<?> ...mapReduces)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(AnnotatedElement ae, Filter filter, MapReduce<?> ...mapReduces)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "void", "signature": "void visit(AnnotatedElement ae, Filter filter, MapReduce<?> ...mapReduces)", "full_signature": "@SuppressWarnings(\"rawtypes\") public void visit(AnnotatedElement ae, Filter filter, MapReduce<?> ...mapReduces)", "class_method_signature": "UniversalVisitor.visit(AnnotatedElement ae, Filter filter, MapReduce<?> ...mapReduces)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o, Filter filter, MapReduce ...mapReduces)", "modifiers": "@SuppressWarnings({ \"rawtypes\" }) public", "return": "void", "signature": "void visit(Object o, Filter filter, MapReduce ...mapReduces)", "full_signature": "@SuppressWarnings({ \"rawtypes\" }) public void visit(Object o, Filter filter, MapReduce ...mapReduces)", "class_method_signature": "UniversalVisitor.visit(Object o, Filter filter, MapReduce ...mapReduces)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(AnnotatedElement ae,  Job job)", "modifiers": "@SuppressWarnings({ \"rawtypes\" }) public", "return": "void", "signature": "void visit(AnnotatedElement ae,  Job job)", "full_signature": "@SuppressWarnings({ \"rawtypes\" }) public void visit(AnnotatedElement ae,  Job job)", "class_method_signature": "UniversalVisitor.visit(AnnotatedElement ae,  Job job)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(AnnotatedElement ae, Filter filter, Job job)", "modifiers": "@SuppressWarnings({ \"rawtypes\" }) public", "return": "void", "signature": "void visit(AnnotatedElement ae, Filter filter, Job job)", "full_signature": "@SuppressWarnings({ \"rawtypes\" }) public void visit(AnnotatedElement ae, Filter filter, Job job)", "class_method_signature": "UniversalVisitor.visit(AnnotatedElement ae, Filter filter, Job job)", "testcase": false, "constructor": false}, {"identifier": "doMapReduce", "parameters": "(Job<?> job, ChainedNode node)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private", "return": "void", "signature": "void doMapReduce(Job<?> job, ChainedNode node)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private void doMapReduce(Job<?> job, ChainedNode node)", "class_method_signature": "UniversalVisitor.doMapReduce(Job<?> job, ChainedNode node)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o, Job job)", "modifiers": "@SuppressWarnings({ \"rawtypes\" }) public", "return": "void", "signature": "void visit(Object o, Job job)", "full_signature": "@SuppressWarnings({ \"rawtypes\" }) public void visit(Object o, Job job)", "class_method_signature": "UniversalVisitor.visit(Object o, Job job)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o, Filter filter, Job job)", "modifiers": "@SuppressWarnings({ \"rawtypes\" }) public", "return": "void", "signature": "void visit(Object o, Filter filter, Job job)", "full_signature": "@SuppressWarnings({ \"rawtypes\" }) public void visit(Object o, Filter filter, Job job)", "class_method_signature": "UniversalVisitor.visit(Object o, Filter filter, Job job)", "testcase": false, "constructor": false}, {"identifier": "recursiveVisit", "parameters": "(AnnotatedElement ae, Set<Object> cache, ChainedNode node, Filter filter)", "modifiers": "private", "return": "void", "signature": "void recursiveVisit(AnnotatedElement ae, Set<Object> cache, ChainedNode node, Filter filter)", "full_signature": "private void recursiveVisit(AnnotatedElement ae, Set<Object> cache, ChainedNode node, Filter filter)", "class_method_signature": "UniversalVisitor.recursiveVisit(AnnotatedElement ae, Set<Object> cache, ChainedNode node, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "doVisitPackage", "parameters": "(AnnotatedElement ae, Package p, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata)", "modifiers": "private", "return": "void", "signature": "void doVisitPackage(AnnotatedElement ae, Package p, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata)", "full_signature": "private void doVisitPackage(AnnotatedElement ae, Package p, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata)", "class_method_signature": "UniversalVisitor.doVisitPackage(AnnotatedElement ae, Package p, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata)", "testcase": false, "constructor": false}, {"identifier": "doVisitAnnotation", "parameters": "(AnnotatedElement ae, Annotation a, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata)", "modifiers": "private", "return": "void", "signature": "void doVisitAnnotation(AnnotatedElement ae, Annotation a, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata)", "full_signature": "private void doVisitAnnotation(AnnotatedElement ae, Annotation a, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata)", "class_method_signature": "UniversalVisitor.doVisitAnnotation(AnnotatedElement ae, Annotation a, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata)", "testcase": false, "constructor": false}, {"identifier": "visitClass", "parameters": "(Class<?> cl\u00e4ss, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter ) ", "modifiers": "private", "return": "void", "signature": "void visitClass(Class<?> cl\u00e4ss, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter ) ", "full_signature": "private void visitClass(Class<?> cl\u00e4ss, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter ) ", "class_method_signature": "UniversalVisitor.visitClass(Class<?> cl\u00e4ss, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter ) ", "testcase": false, "constructor": false}, {"identifier": "visitClass", "parameters": "(Class<?> cl\u00e4ss, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata) ", "modifiers": "private", "return": "void", "signature": "void visitClass(Class<?> cl\u00e4ss, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata) ", "full_signature": "private void visitClass(Class<?> cl\u00e4ss, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata) ", "class_method_signature": "UniversalVisitor.visitClass(Class<?> cl\u00e4ss, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter, Metadata metadata) ", "testcase": false, "constructor": false}, {"identifier": "recursiveVisit", "parameters": "(Object object, Set<Object> cache, ChainedNode node, Filter filter)", "modifiers": "private", "return": "void", "signature": "void recursiveVisit(Object object, Set<Object> cache, ChainedNode node, Filter filter)", "full_signature": "private void recursiveVisit(Object object, Set<Object> cache, ChainedNode node, Filter filter)", "class_method_signature": "UniversalVisitor.recursiveVisit(Object object, Set<Object> cache, ChainedNode node, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "visitObject", "parameters": "(Object object, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter)", "modifiers": "private", "return": "void", "signature": "void visitObject(Object object, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter)", "full_signature": "private void visitObject(Object object, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter)", "class_method_signature": "UniversalVisitor.visitObject(Object object, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter)", "testcase": false, "constructor": false}, {"identifier": "visitConstructor", "parameters": "(Constructor<T> ae, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter , Metadata metadata)", "modifiers": "private", "return": "void", "signature": "void visitConstructor(Constructor<T> ae, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter , Metadata metadata)", "full_signature": "private void visitConstructor(Constructor<T> ae, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter , Metadata metadata)", "class_method_signature": "UniversalVisitor.visitConstructor(Constructor<T> ae, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter , Metadata metadata)", "testcase": false, "constructor": false}, {"identifier": "visitObject", "parameters": "(Object object, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter , Metadata metadata)", "modifiers": "private", "return": "void", "signature": "void visitObject(Object object, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter , Metadata metadata)", "full_signature": "private void visitObject(Object object, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter , Metadata metadata)", "class_method_signature": "UniversalVisitor.visitObject(Object object, Set<Object> cache, ChainedNode node, int currentLevel,  Filter filter , Metadata metadata)", "testcase": false, "constructor": false}, {"identifier": "visitAllCollection", "parameters": "(Collection<?> collection, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter)", "modifiers": "private", "return": "void", "signature": "void visitAllCollection(Collection<?> collection, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter)", "full_signature": "private void visitAllCollection(Collection<?> collection, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter)", "class_method_signature": "UniversalVisitor.visitAllCollection(Collection<?> collection, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "visitAllArray", "parameters": "(Object arrayObject, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter)", "modifiers": "private", "return": "void", "signature": "void visitAllArray(Object arrayObject, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter)", "full_signature": "private void visitAllArray(Object arrayObject, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter)", "class_method_signature": "UniversalVisitor.visitAllArray(Object arrayObject, Set<Object> cache, ChainedNode node, int currentLevel, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "visitAllMap", "parameters": "(Map<?, ?> values, Set<Object> cache, ChainedNode pair, int currentLevel, Filter filter)", "modifiers": "private", "return": "void", "signature": "void visitAllMap(Map<?, ?> values, Set<Object> cache, ChainedNode pair, int currentLevel, Filter filter)", "full_signature": "private void visitAllMap(Map<?, ?> values, Set<Object> cache, ChainedNode pair, int currentLevel, Filter filter)", "class_method_signature": "UniversalVisitor.visitAllMap(Map<?, ?> values, Set<Object> cache, ChainedNode pair, int currentLevel, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "isJdkMember", "parameters": "(Member input)", "modifiers": "private", "return": "boolean", "signature": "boolean isJdkMember(Member input)", "full_signature": "private boolean isJdkMember(Member input)", "class_method_signature": "UniversalVisitor.isJdkMember(Member input)", "testcase": false, "constructor": false}, {"identifier": "isJdkMember", "parameters": "(Class<?> input)", "modifiers": "private", "return": "boolean", "signature": "boolean isJdkMember(Class<?> input)", "full_signature": "private boolean isJdkMember(Class<?> input)", "class_method_signature": "UniversalVisitor.isJdkMember(Class<?> input)", "testcase": false, "constructor": false}, {"identifier": "readField", "parameters": "(Field f, Object instance)", "modifiers": "private", "return": "Object", "signature": "Object readField(Field f, Object instance)", "full_signature": "private Object readField(Field f, Object instance)", "class_method_signature": "UniversalVisitor.readField(Field f, Object instance)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfacesAndClasses", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "Class<?>[]", "signature": "Class<?>[] getAllInterfacesAndClasses(Class<?> clazz)", "full_signature": "private Class<?>[] getAllInterfacesAndClasses(Class<?> clazz)", "class_method_signature": "UniversalVisitor.getAllInterfacesAndClasses(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfacesAndClasses", "parameters": "(Class<?>[] classes)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Class<?>[]", "signature": "Class<?>[] getAllInterfacesAndClasses(Class<?>[] classes)", "full_signature": "@SuppressWarnings(\"unchecked\") private Class<?>[] getAllInterfacesAndClasses(Class<?>[] classes)", "class_method_signature": "UniversalVisitor.getAllInterfacesAndClasses(Class<?>[] classes)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(Class[] A, Class[] B)", "modifiers": "@SuppressWarnings(\"rawtypes\") private", "return": "Class[]", "signature": "Class[] concat(Class[] A, Class[] B)", "full_signature": "@SuppressWarnings(\"rawtypes\") private Class[] concat(Class[] A, Class[] B)", "class_method_signature": "UniversalVisitor.concat(Class[] A, Class[] B)", "testcase": false, "constructor": false}], "file": "universalvisitor/src/main/java/org/nuunframework/universalvisitor/UniversalVisitor.java"}, "focal_method": {"identifier": "visit", "parameters": "(AnnotatedElement ae, Mapper<T> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic <T> void visit(AnnotatedElement ae, Mapper<T> mapper) {\n\t\tvisit(ae, (Filter) null, new MapReduceDefault<T>(mapper));\n\t}", "signature": "void visit(AnnotatedElement ae, Mapper<T> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public void visit(AnnotatedElement ae, Mapper<T> mapper)", "class_method_signature": "UniversalVisitor.visit(AnnotatedElement ae, Mapper<T> mapper)", "testcase": false, "constructor": false, "invocations": ["visit"]}, "repository": {"repo_id": 6804081, "url": "https://github.com/kametic/nuun-framework", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 13, "size": 1053, "license": "licensed"}}