{"test_class": {"identifier": "FrameOptionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "acteur-util/src/test/java/com/mastfrog/acteur/util/FrameOptionsTest.java"}, "test_case": {"identifier": "testMissingArgumen2t", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n    public void testMissingArgumen2t() {\n        FrameOptions.parse(\"SAMEORIGIN http://mastfrog.com\");\n    }", "signature": "void testMissingArgumen2t()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void testMissingArgumen2t()", "class_method_signature": "FrameOptionsTest.testMissingArgumen2t()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "FrameOptions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FrameOptionType type;", "modifier": "private final", "type": "FrameOptionType", "declarator": "type", "var_name": "type"}, {"original_string": "private final URI value;", "modifier": "private final", "type": "URI", "declarator": "value", "var_name": "value"}, {"original_string": "public static final FrameOptions DENY = new FrameOptions(FrameOptionType.DENY);", "modifier": "public static final", "type": "FrameOptions", "declarator": "DENY = new FrameOptions(FrameOptionType.DENY)", "var_name": "DENY"}, {"original_string": "public static final FrameOptions SAMEORIGIN = new FrameOptions(FrameOptionType.SAMEORIGIN);", "modifier": "public static final", "type": "FrameOptions", "declarator": "SAMEORIGIN = new FrameOptions(FrameOptionType.SAMEORIGIN)", "var_name": "SAMEORIGIN"}], "methods": [{"identifier": "FrameOptions", "parameters": "(FrameOptionType type)", "modifiers": "", "return": "", "signature": " FrameOptions(FrameOptionType type)", "full_signature": "  FrameOptions(FrameOptionType type)", "class_method_signature": "FrameOptions.FrameOptions(FrameOptionType type)", "testcase": false, "constructor": true}, {"identifier": "FrameOptions", "parameters": "(FrameOptionType type, URI value)", "modifiers": "", "return": "", "signature": " FrameOptions(FrameOptionType type, URI value)", "full_signature": "  FrameOptions(FrameOptionType type, URI value)", "class_method_signature": "FrameOptions.FrameOptions(FrameOptionType type, URI value)", "testcase": false, "constructor": true}, {"identifier": "type", "parameters": "()", "modifiers": "public", "return": "FrameOptionType", "signature": "FrameOptionType type()", "full_signature": "public FrameOptionType type()", "class_method_signature": "FrameOptions.type()", "testcase": false, "constructor": false}, {"identifier": "uri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI uri()", "full_signature": "public URI uri()", "class_method_signature": "FrameOptions.uri()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String name()", "full_signature": "public String name()", "class_method_signature": "FrameOptions.name()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "FrameOptions.toString()", "testcase": false, "constructor": false}, {"identifier": "allowFrom", "parameters": "(URI uri)", "modifiers": "public static", "return": "FrameOptions", "signature": "FrameOptions allowFrom(URI uri)", "full_signature": "public static FrameOptions allowFrom(URI uri)", "class_method_signature": "FrameOptions.allowFrom(URI uri)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(CharSequence seq)", "modifiers": "public static", "return": "FrameOptions", "signature": "FrameOptions parse(CharSequence seq)", "full_signature": "public static FrameOptions parse(CharSequence seq)", "class_method_signature": "FrameOptions.parse(CharSequence seq)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "FrameOptions.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "FrameOptions.hashCode()", "testcase": false, "constructor": false}], "file": "acteur-util/src/main/java/com/mastfrog/acteur/util/FrameOptions.java"}, "focal_method": {"identifier": "parse", "parameters": "(CharSequence seq)", "modifiers": "public static", "return": "FrameOptions", "body": "public static FrameOptions parse(CharSequence seq) {\n        Set<CharSequence> s = Strings.splitUniqueNoEmpty(' ', notNull(\"seq\", seq));\n        if (s.size() > 2) {\n            throw new IllegalArgumentException(\"FrameOptions should be \"\n                    + \"DENY, SAMEORIGIN or ALLOW-FROM $uri.  Found \" \n                    + s.size() + \" elements in '\" + seq + \"'\");\n        }\n        Iterator<CharSequence> it = s.iterator();\n        if (!it.hasNext()) {\n            return null;\n        }\n        CharSequence first = it.next();\n        outer:\n        for (FrameOptionType ft : FrameOptionType.values()) {\n            if (Strings.charSequencesEqual(ft.toString(), first, true)) {\n                if (ft.takesValue != it.hasNext()) {\n                    if (it.hasNext()) {\n                        throw new IllegalArgumentException(ft + \" does not take a value\");\n                    } else {\n                        throw new IllegalArgumentException(ft + \" must be followed by a uri\");\n                    }\n                }\n                switch(ft) {\n                    case SAMEORIGIN :\n                        return SAMEORIGIN;\n                    case DENY :\n                        return DENY;\n                    case ALLOW_FROM :\n                        URI uri = URI.create(it.next().toString());\n                        return new FrameOptions(ALLOW_FROM, uri);\n                    default :\n                        throw new AssertionError(ft);\n                }\n            }\n        }\n        throw new IllegalArgumentException(\"Could not parse '\" + seq + \"'\");\n    }", "signature": "FrameOptions parse(CharSequence seq)", "full_signature": "public static FrameOptions parse(CharSequence seq)", "class_method_signature": "FrameOptions.parse(CharSequence seq)", "testcase": false, "constructor": false, "invocations": ["splitUniqueNoEmpty", "notNull", "size", "size", "iterator", "hasNext", "next", "values", "charSequencesEqual", "toString", "hasNext", "hasNext", "create", "toString", "next"]}, "repository": {"repo_id": 9283641, "url": "https://github.com/timboudreau/acteur", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 64, "size": 2283, "license": "licensed"}}