{"test_class": {"identifier": "URLTest", "superclass": "", "interfaces": "", "fields": [], "file": "url/src/test/java/com/mastfrog/url/URLTest.java"}, "test_case": {"identifier": "testSameDomain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSameDomain() {\n        Host h = Host.parse(\"weblogs.java.net\");\n        assertTrue(h.isDomain(\"java.net\"));\n        assertTrue(h.isDomain(\"weblogs.java.net\"));\n        assertFalse(h.isDomain(\"bubble.java.net\"));\n        assertFalse(h.isDomain(\"java.com\"));\n    }", "signature": "void testSameDomain()", "full_signature": "@Test public void testSameDomain()", "class_method_signature": "URLTest.testSameDomain()", "testcase": true, "constructor": false, "invocations": ["parse", "assertTrue", "isDomain", "assertTrue", "isDomain", "assertFalse", "isDomain", "assertFalse", "isDomain"]}, "focal_class": {"identifier": "URL", "superclass": "", "interfaces": "implements URLComponent, Validating, Comparable<URL>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final Anchor anchor;", "modifier": "private final", "type": "Anchor", "declarator": "anchor", "var_name": "anchor"}, {"original_string": "private final Protocol protocol;", "modifier": "private final", "type": "Protocol", "declarator": "protocol", "var_name": "protocol"}, {"original_string": "private final Host host;", "modifier": "private final", "type": "Host", "declarator": "host", "var_name": "host"}, {"original_string": "private final Port port;", "modifier": "private final", "type": "Port", "declarator": "port", "var_name": "port"}, {"original_string": "private final Path path;", "modifier": "private final", "type": "Path", "declarator": "path", "var_name": "path"}, {"original_string": "private final Parameters parameters;", "modifier": "private final", "type": "Parameters", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private final String password;", "modifier": "private final", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private final String userName;", "modifier": "private final", "type": "String", "declarator": "userName", "var_name": "userName"}], "methods": [{"identifier": "URL", "parameters": "(String userName, String password, Protocol protocol, Host host, Port port, Path path, Parameters query, Anchor anchor)", "modifiers": "", "return": "", "signature": " URL(String userName, String password, Protocol protocol, Host host, Port port, Path path, Parameters query, Anchor anchor)", "full_signature": "  URL(String userName, String password, Protocol protocol, Host host, Port port, Path path, Parameters query, Anchor anchor)", "class_method_signature": "URL.URL(String userName, String password, Protocol protocol, Host host, Port port, Path path, Parameters query, Anchor anchor)", "testcase": false, "constructor": true}, {"identifier": "withProtocol", "parameters": "(Protocol protocol)", "modifiers": "public", "return": "URL", "signature": "URL withProtocol(Protocol protocol)", "full_signature": "public URL withProtocol(Protocol protocol)", "class_method_signature": "URL.withProtocol(Protocol protocol)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "URLBuilder", "signature": "URLBuilder builder()", "full_signature": "public static URLBuilder builder()", "class_method_signature": "URL.builder()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(Protocol protocol)", "modifiers": "public static", "return": "URLBuilder", "signature": "URLBuilder builder(Protocol protocol)", "full_signature": "public static URLBuilder builder(Protocol protocol)", "class_method_signature": "URL.builder(Protocol protocol)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(URL startWith)", "modifiers": "public static", "return": "URLBuilder", "signature": "URLBuilder builder(URL startWith)", "full_signature": "public static URLBuilder builder(URL startWith)", "class_method_signature": "URL.builder(URL startWith)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String url)", "modifiers": "public static", "return": "URL", "signature": "URL parse(String url)", "full_signature": "public static URL parse(String url)", "class_method_signature": "URL.parse(String url)", "testcase": false, "constructor": false}, {"identifier": "getBaseURL", "parameters": "(boolean retainPort)", "modifiers": "public", "return": "URL", "signature": "URL getBaseURL(boolean retainPort)", "full_signature": "public URL getBaseURL(boolean retainPort)", "class_method_signature": "URL.getBaseURL(boolean retainPort)", "testcase": false, "constructor": false}, {"identifier": "getAnchor", "parameters": "()", "modifiers": "public", "return": "Anchor", "signature": "Anchor getAnchor()", "full_signature": "public Anchor getAnchor()", "class_method_signature": "URL.getAnchor()", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "Host", "signature": "Host getHost()", "full_signature": "public Host getHost()", "class_method_signature": "URL.getHost()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getPath()", "full_signature": "public Path getPath()", "class_method_signature": "URL.getPath()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "Port", "signature": "Port getPort()", "full_signature": "public Port getPort()", "class_method_signature": "URL.getPort()", "testcase": false, "constructor": false}, {"identifier": "getProtocol", "parameters": "()", "modifiers": "public", "return": "Protocol", "signature": "Protocol getProtocol()", "full_signature": "public Protocol getProtocol()", "class_method_signature": "URL.getProtocol()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "Parameters", "signature": "Parameters getParameters()", "full_signature": "public Parameters getParameters()", "class_method_signature": "URL.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getUserName", "parameters": "()", "modifiers": "public", "return": "URLComponent", "signature": "URLComponent getUserName()", "full_signature": "public URLComponent getUserName()", "class_method_signature": "URL.getUserName()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "URLComponent", "signature": "URLComponent getPassword()", "full_signature": "public URLComponent getPassword()", "class_method_signature": "URL.getPassword()", "testcase": false, "constructor": false}, {"identifier": "isKnownProtocol", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isKnownProtocol()", "full_signature": "public boolean isKnownProtocol()", "class_method_signature": "URL.isKnownProtocol()", "testcase": false, "constructor": false}, {"identifier": "isProbableFileReference", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isProbableFileReference()", "full_signature": "public boolean isProbableFileReference()", "class_method_signature": "URL.isProbableFileReference()", "testcase": false, "constructor": false}, {"identifier": "isSameDomain", "parameters": "(String domain)", "modifiers": "public", "return": "boolean", "signature": "boolean isSameDomain(String domain)", "full_signature": "public boolean isSameDomain(String domain)", "class_method_signature": "URL.isSameDomain(String domain)", "testcase": false, "constructor": false}, {"identifier": "getHostAndPort", "parameters": "()", "modifiers": "public", "return": "HostAndPort", "signature": "HostAndPort getHostAndPort()", "full_signature": "public HostAndPort getHostAndPort()", "class_method_signature": "URL.getHostAndPort()", "testcase": false, "constructor": false}, {"identifier": "appendTo", "parameters": "(StringBuilder sb)", "modifiers": "public", "return": "void", "signature": "void appendTo(StringBuilder sb)", "full_signature": "public void appendTo(StringBuilder sb)", "class_method_signature": "URL.appendTo(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "getPathAndQuery", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPathAndQuery()", "full_signature": "public String getPathAndQuery()", "class_method_signature": "URL.getPathAndQuery()", "testcase": false, "constructor": false}, {"identifier": "isSecure", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSecure()", "full_signature": "public boolean isSecure()", "class_method_signature": "URL.isSecure()", "testcase": false, "constructor": false}, {"identifier": "components", "parameters": "()", "modifiers": "public", "return": "URLComponent[]", "signature": "URLComponent[] components()", "full_signature": "public URLComponent[] components()", "class_method_signature": "URL.components()", "testcase": false, "constructor": false}, {"identifier": "allComponents", "parameters": "()", "modifiers": "public", "return": "URLComponent[]", "signature": "URLComponent[] allComponents()", "full_signature": "public URLComponent[] allComponents()", "class_method_signature": "URL.allComponents()", "testcase": false, "constructor": false}, {"identifier": "getInvalidComponent", "parameters": "()", "modifiers": "public", "return": "URLComponent", "signature": "URLComponent getInvalidComponent()", "full_signature": "public URLComponent getInvalidComponent()", "class_method_signature": "URL.getInvalidComponent()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "@Override public boolean isValid()", "class_method_signature": "URL.isValid()", "testcase": false, "constructor": false}, {"identifier": "addIfNotNull", "parameters": "(List<T> list, T obj)", "modifiers": "private static", "return": "void", "signature": "void addIfNotNull(List<T> list, T obj)", "full_signature": "private static void addIfNotNull(List<T> list, T obj)", "class_method_signature": "URL.addIfNotNull(List<T> list, T obj)", "testcase": false, "constructor": false}, {"identifier": "getComponentName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getComponentName()", "full_signature": "public String getComponentName()", "class_method_signature": "URL.getComponentName()", "testcase": false, "constructor": false}, {"identifier": "isHostOnlyURL", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isHostOnlyURL()", "full_signature": "private boolean isHostOnlyURL()", "class_method_signature": "URL.isHostOnlyURL()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "URL.toString()", "testcase": false, "constructor": false}, {"identifier": "toUnescapedForm", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toUnescapedForm()", "full_signature": "public String toUnescapedForm()", "class_method_signature": "URL.toUnescapedForm()", "testcase": false, "constructor": false}, {"identifier": "stripAnchor", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL stripAnchor()", "full_signature": "public URL stripAnchor()", "class_method_signature": "URL.stripAnchor()", "testcase": false, "constructor": false}, {"identifier": "stripQuery", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL stripQuery()", "full_signature": "public URL stripQuery()", "class_method_signature": "URL.stripQuery()", "testcase": false, "constructor": false}, {"identifier": "toSimpleURL", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL toSimpleURL()", "full_signature": "public URL toSimpleURL()", "class_method_signature": "URL.toSimpleURL()", "testcase": false, "constructor": false}, {"identifier": "toURI", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI toURI()", "full_signature": "public URI toURI()", "class_method_signature": "URL.toURI()", "testcase": false, "constructor": false}, {"identifier": "withParameter", "parameters": "(String name, String value)", "modifiers": "public", "return": "URL", "signature": "URL withParameter(String name, String value)", "full_signature": "public URL withParameter(String name, String value)", "class_method_signature": "URL.withParameter(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "simpleEquals", "parameters": "(URL other)", "modifiers": "public", "return": "boolean", "signature": "boolean simpleEquals(URL other)", "full_signature": "public boolean simpleEquals(URL other)", "class_method_signature": "URL.simpleEquals(URL other)", "testcase": false, "constructor": false}, {"identifier": "getParentURL", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getParentURL()", "full_signature": "public URL getParentURL()", "class_method_signature": "URL.getParentURL()", "testcase": false, "constructor": false}, {"identifier": "fromFile", "parameters": "(File file)", "modifiers": "public static", "return": "URL", "signature": "URL fromFile(File file)", "full_signature": "public static URL fromFile(File file)", "class_method_signature": "URL.fromFile(File file)", "testcase": false, "constructor": false}, {"identifier": "fromJavaUrl", "parameters": "(java.net.URL url)", "modifiers": "public static", "return": "URL", "signature": "URL fromJavaUrl(java.net.URL url)", "full_signature": "public static URL fromJavaUrl(java.net.URL url)", "class_method_signature": "URL.fromJavaUrl(java.net.URL url)", "testcase": false, "constructor": false}, {"identifier": "appendIfNotNull", "parameters": "(StringBuilder sb, URLComponent c)", "modifiers": "private static", "return": "void", "signature": "void appendIfNotNull(StringBuilder sb, URLComponent c)", "full_signature": "private static void appendIfNotNull(StringBuilder sb, URLComponent c)", "class_method_signature": "URL.appendIfNotNull(StringBuilder sb, URLComponent c)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "URL.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "URL.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getURLEncoding", "parameters": "()", "modifiers": "public static", "return": "Charset", "signature": "Charset getURLEncoding()", "full_signature": "public static Charset getURLEncoding()", "class_method_signature": "URL.getURLEncoding()", "testcase": false, "constructor": false}, {"identifier": "toJavaURL", "parameters": "()", "modifiers": "public", "return": "java.net.URL", "signature": "java.net.URL toJavaURL()", "full_signature": "public java.net.URL toJavaURL()", "class_method_signature": "URL.toJavaURL()", "testcase": false, "constructor": false}, {"identifier": "getProblems", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"EmptyIfStmt\") public", "return": "Problems", "signature": "Problems getProblems()", "full_signature": "@Override @SuppressWarnings(\"EmptyIfStmt\") public Problems getProblems()", "class_method_signature": "URL.getProblems()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(URL o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(URL o)", "full_signature": "@Override public int compareTo(URL o)", "class_method_signature": "URL.compareTo(URL o)", "testcase": false, "constructor": false}], "file": "url/src/main/java/com/mastfrog/url/URL.java"}, "focal_method": {"identifier": "parse", "parameters": "(String url)", "modifiers": "public static", "return": "URL", "body": "public static URL parse (String url) {\n        Checks.notNull(\"url\", url);\n        return new URLParser(url).getURL();\n    }", "signature": "URL parse(String url)", "full_signature": "public static URL parse(String url)", "class_method_signature": "URL.parse(String url)", "testcase": false, "constructor": false, "invocations": ["notNull", "getURL"]}, "repository": {"repo_id": 9283641, "url": "https://github.com/timboudreau/acteur", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 64, "size": 2283, "license": "licensed"}}