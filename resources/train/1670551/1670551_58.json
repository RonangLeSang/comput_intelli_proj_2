{"test_class": {"identifier": "TestTwigQuery", "superclass": "extends SirenTestCase", "interfaces": "", "fields": [], "file": "siren-core/src/test/java/org/sindice/siren/search/node/TestTwigQuery.java"}, "test_case": {"identifier": "testSetAncestorPointer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetAncestorPointer() {\n    final NodeTermQuery term = new NodeTermQuery(new Term(\"field\", \"value\"));\n    final TwigQuery tq1 = new TwigQuery();\n    tq1.addDescendant(2, term, Occur.MUST);\n    // ancestor of term query must be the root of the twig\n    assertSame(tq1.getRoot(), term.ancestor);\n    // ancestor of the twig must be null\n    assertNull(tq1.ancestor);\n\n    final TwigQuery tq2 = new TwigQuery();\n    tq2.addChild(tq1, Occur.MUST);\n    // ancestor of tq1 and of its root must have been updated\n    assertSame(tq2.getRoot(), tq1.ancestor);\n    assertSame(tq2.getRoot(), tq1.getRoot().ancestor);\n    // ancestor of tq1's descendant must have not changed\n    assertEquals(4, tq1.clauses().get(0).getQuery().getLevelConstraint());\n\n    final TwigQuery tq3 = new TwigQuery(3);\n    tq3.addRoot(tq2);\n    // ancestor of tq2 and of its root must be the ancestor of tq3\n    assertSame(tq3.ancestor, tq2.ancestor);\n    assertSame(tq2.ancestor, tq2.getRoot().ancestor);\n  }", "signature": "void testSetAncestorPointer()", "full_signature": "@Test public void testSetAncestorPointer()", "class_method_signature": "TestTwigQuery.testSetAncestorPointer()", "testcase": true, "constructor": false, "invocations": ["addDescendant", "assertSame", "getRoot", "assertNull", "addChild", "assertSame", "getRoot", "assertSame", "getRoot", "getRoot", "assertEquals", "getLevelConstraint", "getQuery", "get", "clauses", "addRoot", "assertSame", "assertSame", "getRoot"]}, "focal_class": {"identifier": "TwigQuery", "superclass": "extends NodeQuery", "interfaces": "", "fields": [{"original_string": "private NodeQuery root;", "modifier": "private", "type": "NodeQuery", "declarator": "root", "var_name": "root"}, {"original_string": "private static int maxClauseCount = 1024;", "modifier": "private static", "type": "int", "declarator": "maxClauseCount = 1024", "var_name": "maxClauseCount"}, {"original_string": "protected ArrayList<NodeBooleanClause> clauses = new ArrayList<NodeBooleanClause>();", "modifier": "protected", "type": "ArrayList<NodeBooleanClause>", "declarator": "clauses = new ArrayList<NodeBooleanClause>()", "var_name": "clauses"}], "methods": [{"identifier": "getMaxClauseCount", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getMaxClauseCount()", "full_signature": "public static int getMaxClauseCount()", "class_method_signature": "TwigQuery.getMaxClauseCount()", "testcase": false, "constructor": false}, {"identifier": "setMaxClauseCount", "parameters": "(final int maxClauseCount)", "modifiers": "public static", "return": "void", "signature": "void setMaxClauseCount(final int maxClauseCount)", "full_signature": "public static void setMaxClauseCount(final int maxClauseCount)", "class_method_signature": "TwigQuery.setMaxClauseCount(final int maxClauseCount)", "testcase": false, "constructor": false}, {"identifier": "TwigQuery", "parameters": "(final int rootLevel)", "modifiers": "public", "return": "", "signature": " TwigQuery(final int rootLevel)", "full_signature": "public  TwigQuery(final int rootLevel)", "class_method_signature": "TwigQuery.TwigQuery(final int rootLevel)", "testcase": false, "constructor": true}, {"identifier": "TwigQuery", "parameters": "()", "modifiers": "public", "return": "", "signature": " TwigQuery()", "full_signature": "public  TwigQuery()", "class_method_signature": "TwigQuery.TwigQuery()", "testcase": false, "constructor": true}, {"identifier": "addRoot", "parameters": "(final NodeQuery root)", "modifiers": "public", "return": "void", "signature": "void addRoot(final NodeQuery root)", "full_signature": "public void addRoot(final NodeQuery root)", "class_method_signature": "TwigQuery.addRoot(final NodeQuery root)", "testcase": false, "constructor": false}, {"identifier": "addClause", "parameters": "(final NodeBooleanClause clause)", "modifiers": "protected", "return": "void", "signature": "void addClause(final NodeBooleanClause clause)", "full_signature": "protected void addClause(final NodeBooleanClause clause)", "class_method_signature": "TwigQuery.addClause(final NodeBooleanClause clause)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(final NodeQuery query, final NodeBooleanClause.Occur occur)", "modifiers": "public", "return": "void", "signature": "void addChild(final NodeQuery query, final NodeBooleanClause.Occur occur)", "full_signature": "public void addChild(final NodeQuery query, final NodeBooleanClause.Occur occur)", "class_method_signature": "TwigQuery.addChild(final NodeQuery query, final NodeBooleanClause.Occur occur)", "testcase": false, "constructor": false}, {"identifier": "addDescendant", "parameters": "(final int nodeLevel, final NodeQuery query,\n                            final NodeBooleanClause.Occur occur)", "modifiers": "public", "return": "void", "signature": "void addDescendant(final int nodeLevel, final NodeQuery query,\n                            final NodeBooleanClause.Occur occur)", "full_signature": "public void addDescendant(final int nodeLevel, final NodeQuery query,\n                            final NodeBooleanClause.Occur occur)", "class_method_signature": "TwigQuery.addDescendant(final int nodeLevel, final NodeQuery query,\n                            final NodeBooleanClause.Occur occur)", "testcase": false, "constructor": false}, {"identifier": "setAncestorPointer", "parameters": "(final NodeQuery ancestor)", "modifiers": "@Override protected", "return": "void", "signature": "void setAncestorPointer(final NodeQuery ancestor)", "full_signature": "@Override protected void setAncestorPointer(final NodeQuery ancestor)", "class_method_signature": "TwigQuery.setAncestorPointer(final NodeQuery ancestor)", "testcase": false, "constructor": false}, {"identifier": "setNodeConstraint", "parameters": "(final int lowerBound, final int upperBound)", "modifiers": "@Override public", "return": "void", "signature": "void setNodeConstraint(final int lowerBound, final int upperBound)", "full_signature": "@Override public void setNodeConstraint(final int lowerBound, final int upperBound)", "class_method_signature": "TwigQuery.setNodeConstraint(final int lowerBound, final int upperBound)", "testcase": false, "constructor": false}, {"identifier": "setLevelConstraint", "parameters": "(final int levelConstraint)", "modifiers": "@Override public", "return": "void", "signature": "void setLevelConstraint(final int levelConstraint)", "full_signature": "@Override public void setLevelConstraint(final int levelConstraint)", "class_method_signature": "TwigQuery.setLevelConstraint(final int levelConstraint)", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "NodeQuery", "signature": "NodeQuery getRoot()", "full_signature": "public NodeQuery getRoot()", "class_method_signature": "TwigQuery.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getClauses", "parameters": "()", "modifiers": "public", "return": "NodeBooleanClause[]", "signature": "NodeBooleanClause[] getClauses()", "full_signature": "public NodeBooleanClause[] getClauses()", "class_method_signature": "TwigQuery.getClauses()", "testcase": false, "constructor": false}, {"identifier": "clauses", "parameters": "()", "modifiers": "public", "return": "List<NodeBooleanClause>", "signature": "List<NodeBooleanClause> clauses()", "full_signature": "public List<NodeBooleanClause> clauses()", "class_method_signature": "TwigQuery.clauses()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public final", "return": "Iterator<NodeBooleanClause>", "signature": "Iterator<NodeBooleanClause> iterator()", "full_signature": "public final Iterator<NodeBooleanClause> iterator()", "class_method_signature": "TwigQuery.iterator()", "testcase": false, "constructor": false}, {"identifier": "createWeight", "parameters": "(final IndexSearcher searcher)", "modifiers": "@Override public", "return": "Weight", "signature": "Weight createWeight(final IndexSearcher searcher)", "full_signature": "@Override public Weight createWeight(final IndexSearcher searcher)", "class_method_signature": "TwigQuery.createWeight(final IndexSearcher searcher)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(final IndexReader reader)", "modifiers": "@Override public", "return": "Query", "signature": "Query rewrite(final IndexReader reader)", "full_signature": "@Override public Query rewrite(final IndexReader reader)", "class_method_signature": "TwigQuery.rewrite(final IndexReader reader)", "testcase": false, "constructor": false}, {"identifier": "rewriteRoot", "parameters": "(TwigQuery clone, final IndexReader reader)", "modifiers": "private", "return": "TwigQuery", "signature": "TwigQuery rewriteRoot(TwigQuery clone, final IndexReader reader)", "full_signature": "private TwigQuery rewriteRoot(TwigQuery clone, final IndexReader reader)", "class_method_signature": "TwigQuery.rewriteRoot(TwigQuery clone, final IndexReader reader)", "testcase": false, "constructor": false}, {"identifier": "rewriteClauses", "parameters": "(TwigQuery clone, final IndexReader reader)", "modifiers": "private", "return": "TwigQuery", "signature": "TwigQuery rewriteClauses(TwigQuery clone, final IndexReader reader)", "full_signature": "private TwigQuery rewriteClauses(TwigQuery clone, final IndexReader reader)", "class_method_signature": "TwigQuery.rewriteClauses(TwigQuery clone, final IndexReader reader)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "Query", "signature": "Query clone()", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public Query clone()", "class_method_signature": "TwigQuery.clone()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final String field)", "modifiers": "@Override public", "return": "String", "signature": "String toString(final String field)", "full_signature": "@Override public String toString(final String field)", "class_method_signature": "TwigQuery.toString(final String field)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "TwigQuery.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TwigQuery.hashCode()", "testcase": false, "constructor": false}], "file": "siren-core/src/main/java/org/sindice/siren/search/node/TwigQuery.java"}, "focal_method": {"identifier": "setAncestorPointer", "parameters": "(final NodeQuery ancestor)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void setAncestorPointer(final NodeQuery ancestor) {\n    super.setAncestorPointer(ancestor);\n    // keep root query synchronised with twig query\n    root.setAncestorPointer(ancestor);\n  }", "signature": "void setAncestorPointer(final NodeQuery ancestor)", "full_signature": "@Override protected void setAncestorPointer(final NodeQuery ancestor)", "class_method_signature": "TwigQuery.setAncestorPointer(final NodeQuery ancestor)", "testcase": false, "constructor": false, "invocations": ["setAncestorPointer", "setAncestorPointer"]}, "repository": {"repo_id": 1670551, "url": "https://github.com/rdelbru/SIREn", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 106, "size": 46386, "license": "licensed"}}