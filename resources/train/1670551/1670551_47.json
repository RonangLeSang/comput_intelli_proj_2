{"test_class": {"identifier": "TestNodeReqExclScorer", "superclass": "extends AbstractTestSirenScorer", "interfaces": "", "fields": [], "file": "siren-core/src/test/java/org/sindice/siren/search/node/TestNodeReqExclScorer.java"}, "test_case": {"identifier": "testNextCandidateDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNextCandidateDocument() throws Exception {\n    this.addDocuments(\n      \"\\\"aaa bbb\\\" \\\"aaa ccc\\\" . \\\"aaa bbb ccc\\\" \\\"bbb ccc\\\" . \",\n      \"\\\"aaa\\\" \\\"aaa bbb\\\" . \"\n    );\n\n    final NodeScorer scorer = this.getScorer(\n      nbq(must(\"aaa\"), not(\"bbb\"))\n    );\n\n    assertTrue(scorer.nextCandidateDocument());\n    assertEquals(0, scorer.doc());\n    assertEquals(node(-1), scorer.node());\n    assertTrue(scorer.nextNode());\n    assertEquals(node(0,1), scorer.node());\n    assertFalse(scorer.nextNode());\n    assertEquals(DocsAndNodesIterator.NO_MORE_NOD, scorer.node());\n\n    assertTrue(scorer.nextCandidateDocument());\n    assertEquals(1, scorer.doc());\n    assertEquals(node(-1), scorer.node());\n    assertTrue(scorer.nextNode());\n    assertEquals(node(0,0), scorer.node());\n    assertFalse(scorer.nextNode());\n    assertEquals(DocsAndNodesIterator.NO_MORE_NOD, scorer.node());\n\n    assertEndOfStream(scorer);\n  }", "signature": "void testNextCandidateDocument()", "full_signature": "@Test public void testNextCandidateDocument()", "class_method_signature": "TestNodeReqExclScorer.testNextCandidateDocument()", "testcase": true, "constructor": false, "invocations": ["addDocuments", "getScorer", "nbq", "must", "not", "assertTrue", "nextCandidateDocument", "assertEquals", "doc", "assertEquals", "node", "node", "assertTrue", "nextNode", "assertEquals", "node", "node", "assertFalse", "nextNode", "assertEquals", "node", "assertTrue", "nextCandidateDocument", "assertEquals", "doc", "assertEquals", "node", "node", "assertTrue", "nextNode", "assertEquals", "node", "node", "assertFalse", "nextNode", "assertEquals", "node", "assertEndOfStream"]}, "focal_class": {"identifier": "NodeReqExclScorer", "superclass": "extends NodeScorer", "interfaces": "", "fields": [{"original_string": "private final NodeScorer reqScorer;", "modifier": "private final", "type": "NodeScorer", "declarator": "reqScorer", "var_name": "reqScorer"}, {"original_string": "private NodeScorer exclScorer;", "modifier": "private", "type": "NodeScorer", "declarator": "exclScorer", "var_name": "exclScorer"}], "methods": [{"identifier": "NodeReqExclScorer", "parameters": "(final NodeScorer reqScorer,\n                           final NodeScorer exclScorer)", "modifiers": "public", "return": "", "signature": " NodeReqExclScorer(final NodeScorer reqScorer,\n                           final NodeScorer exclScorer)", "full_signature": "public  NodeReqExclScorer(final NodeScorer reqScorer,\n                           final NodeScorer exclScorer)", "class_method_signature": "NodeReqExclScorer.NodeReqExclScorer(final NodeScorer reqScorer,\n                           final NodeScorer exclScorer)", "testcase": false, "constructor": true}, {"identifier": "nextCandidateDocument", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nextCandidateDocument()", "full_signature": "@Override public boolean nextCandidateDocument()", "class_method_signature": "NodeReqExclScorer.nextCandidateDocument()", "testcase": false, "constructor": false}, {"identifier": "toNonExcludedCandidateDocument", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean toNonExcludedCandidateDocument()", "full_signature": "private boolean toNonExcludedCandidateDocument()", "class_method_signature": "NodeReqExclScorer.toNonExcludedCandidateDocument()", "testcase": false, "constructor": false}, {"identifier": "nextNode", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nextNode()", "full_signature": "@Override public boolean nextNode()", "class_method_signature": "NodeReqExclScorer.nextNode()", "testcase": false, "constructor": false}, {"identifier": "toNonExcludedNode", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean toNonExcludedNode()", "full_signature": "private boolean toNonExcludedNode()", "class_method_signature": "NodeReqExclScorer.toNonExcludedNode()", "testcase": false, "constructor": false}, {"identifier": "doc", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int doc()", "full_signature": "@Override public int doc()", "class_method_signature": "NodeReqExclScorer.doc()", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "()", "modifiers": "@Override public", "return": "IntsRef", "signature": "IntsRef node()", "full_signature": "@Override public IntsRef node()", "class_method_signature": "NodeReqExclScorer.node()", "testcase": false, "constructor": false}, {"identifier": "freqInNode", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float freqInNode()", "full_signature": "@Override public float freqInNode()", "class_method_signature": "NodeReqExclScorer.freqInNode()", "testcase": false, "constructor": false}, {"identifier": "scoreInNode", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float scoreInNode()", "full_signature": "@Override public float scoreInNode()", "class_method_signature": "NodeReqExclScorer.scoreInNode()", "testcase": false, "constructor": false}, {"identifier": "skipToCandidate", "parameters": "(final int target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean skipToCandidate(final int target)", "full_signature": "@Override public boolean skipToCandidate(final int target)", "class_method_signature": "NodeReqExclScorer.skipToCandidate(final int target)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NodeReqExclScorer.toString()", "testcase": false, "constructor": false}], "file": "siren-core/src/main/java/org/sindice/siren/search/node/NodeReqExclScorer.java"}, "focal_method": {"identifier": "nextCandidateDocument", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean nextCandidateDocument() throws IOException {\n    if (!reqScorer.nextCandidateDocument()) {\n      return false;\n    }\n\n    if (exclScorer == null) {\n      return true; // reqScorer.nextCandidateDocument() already returned true\n    }\n\n    return this.toNonExcludedCandidateDocument();\n  }", "signature": "boolean nextCandidateDocument()", "full_signature": "@Override public boolean nextCandidateDocument()", "class_method_signature": "NodeReqExclScorer.nextCandidateDocument()", "testcase": false, "constructor": false, "invocations": ["nextCandidateDocument", "toNonExcludedCandidateDocument"]}, "repository": {"repo_id": 1670551, "url": "https://github.com/rdelbru/SIREn", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 106, "size": 46386, "license": "licensed"}}