{"test_class": {"identifier": "TestXSDPrimitiveTypeParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String goodIntStrings[] = {\n                                       \"1\",\n                                       \"0\",\n                                       \"-0\",\n                                       \"+0\",\n                                       \"00\",\n                                       \"00\",\n                                       \"-00\",\n                                       \"+00\",\n                                       \"0000000000\",\n                                       \"-0000000000\",\n                                       \"+0000000000\",\n                                       \"1\",\n                                       \"2\",\n                                       \"1234\",\n                                       \"-1234\",\n                                       \"+1234\",\n                                       \"2147483647\",   // Integer.MAX_VALUE\n                                       \"-2147483648\",  // Integer.MIN_VALUE\n  };", "modifier": "static", "type": "String", "declarator": "goodIntStrings[] = {\n                                       \"1\",\n                                       \"0\",\n                                       \"-0\",\n                                       \"+0\",\n                                       \"00\",\n                                       \"00\",\n                                       \"-00\",\n                                       \"+00\",\n                                       \"0000000000\",\n                                       \"-0000000000\",\n                                       \"+0000000000\",\n                                       \"1\",\n                                       \"2\",\n                                       \"1234\",\n                                       \"-1234\",\n                                       \"+1234\",\n                                       \"2147483647\",   // Integer.MAX_VALUE\n                                       \"-2147483648\",  // Integer.MIN_VALUE\n  }", "var_name": "goodIntStrings"}, {"original_string": "static String specialDoubleStrings[] = {\n                                       \"NaN\",\n                                       \"INF\",\n                                       \"+INF\",\n                                       \"-INF\"\n        };", "modifier": "static", "type": "String", "declarator": "specialDoubleStrings[] = {\n                                       \"NaN\",\n                                       \"INF\",\n                                       \"+INF\",\n                                       \"-INF\"\n        }", "var_name": "specialDoubleStrings"}, {"original_string": "static String goodDoubleStrings[] = {\n                                 \"1.1e-23\",\n                                 \".1e-23\",\n                                 \"1e-23\",\n                                 \"1\",\n                                 \"0\",\n                                 \"-0\",\n                                 \"+0\",\n                                 \"00\",\n                                 \"00\",\n                                 \"-00\",\n                                 \"+00\",\n                                 \"0000000000\",\n                                 \"-0000000000\",\n                                 \"+0000000000\",\n                                 \"1\",\n                                 \"2\",\n                                 \"1234\",\n                                 \"-1234\",\n                                 \"+1234\",\n                                 \"2147483647\",   // Integer.MAX_VALUE\n                                 \"2147483648\",\n                                 \"-2147483648\",  // Integer.MIN_VALUE\n                                 \"-2147483649\",\n\n                                 \"16777215\",\n                                 \"16777216\",     // 2^24\n                                 \"16777217\",\n\n                                 \"-16777215\",\n                                 \"-16777216\",    // -2^24\n                                 \"-16777217\",\n\n                                 \"9007199254740991\",\n                                 \"9007199254740992\",     // 2^53\n                                 \"9007199254740993\",\n\n                                 \"-9007199254740991\",\n                                 \"-9007199254740992\",    // -2^53\n                                 \"-9007199254740993\",\n\n                                 \"9223372036854775807\",  // Long.MAX_VALUE\n\n                                 \"-9223372036854775808\", // Long.MIN_VALUE\n\n                                 // Culled from JCK test lex03591m1\n                                 \"54.07140\",\n                                 // TODO: This test does not pass due to\n                                 // precision error of Math.pow\n//                                 \"7.01e-324\",\n                                 \"2147483647.01\",\n                                 \"1.2147483647\",\n                                 \"000000000000000000000000001.\",\n                                 \"1.00000000000000000000000000e-2\",\n\n                                 // Culled from JCK test lex03592m2\n                                 \"2.\",\n                                 \".0909\",\n                                 \"122112217090.0\",\n                                 \"7090e-5\",\n                                 \"2.E-20\",\n                                 \".0909e42\",\n                                 \"122112217090.0E+100\",\n                                 \"7090\",\n\n                                 // Culled from JCK test lex03595m1\n                                 \"0.0E-10\",\n                                 \"1E10\",\n\n                                 // Culled from JCK test lex03691m1\n                                 \"0.\",\n                                 \"1\",\n                                 \"0.\",\n                                 \"1\",\n                                 \"0.12\",\n                                 \"1e-0\",\n                                 \"12.e+1\",\n                                 \"0e-0\",\n                                 \"12.e+01\",\n                                 \"1e-01\",\n  };", "modifier": "static", "type": "String", "declarator": "goodDoubleStrings[] = {\n                                 \"1.1e-23\",\n                                 \".1e-23\",\n                                 \"1e-23\",\n                                 \"1\",\n                                 \"0\",\n                                 \"-0\",\n                                 \"+0\",\n                                 \"00\",\n                                 \"00\",\n                                 \"-00\",\n                                 \"+00\",\n                                 \"0000000000\",\n                                 \"-0000000000\",\n                                 \"+0000000000\",\n                                 \"1\",\n                                 \"2\",\n                                 \"1234\",\n                                 \"-1234\",\n                                 \"+1234\",\n                                 \"2147483647\",   // Integer.MAX_VALUE\n                                 \"2147483648\",\n                                 \"-2147483648\",  // Integer.MIN_VALUE\n                                 \"-2147483649\",\n\n                                 \"16777215\",\n                                 \"16777216\",     // 2^24\n                                 \"16777217\",\n\n                                 \"-16777215\",\n                                 \"-16777216\",    // -2^24\n                                 \"-16777217\",\n\n                                 \"9007199254740991\",\n                                 \"9007199254740992\",     // 2^53\n                                 \"9007199254740993\",\n\n                                 \"-9007199254740991\",\n                                 \"-9007199254740992\",    // -2^53\n                                 \"-9007199254740993\",\n\n                                 \"9223372036854775807\",  // Long.MAX_VALUE\n\n                                 \"-9223372036854775808\", // Long.MIN_VALUE\n\n                                 // Culled from JCK test lex03591m1\n                                 \"54.07140\",\n                                 // TODO: This test does not pass due to\n                                 // precision error of Math.pow\n//                                 \"7.01e-324\",\n                                 \"2147483647.01\",\n                                 \"1.2147483647\",\n                                 \"000000000000000000000000001.\",\n                                 \"1.00000000000000000000000000e-2\",\n\n                                 // Culled from JCK test lex03592m2\n                                 \"2.\",\n                                 \".0909\",\n                                 \"122112217090.0\",\n                                 \"7090e-5\",\n                                 \"2.E-20\",\n                                 \".0909e42\",\n                                 \"122112217090.0E+100\",\n                                 \"7090\",\n\n                                 // Culled from JCK test lex03595m1\n                                 \"0.0E-10\",\n                                 \"1E10\",\n\n                                 // Culled from JCK test lex03691m1\n                                 \"0.\",\n                                 \"1\",\n                                 \"0.\",\n                                 \"1\",\n                                 \"0.12\",\n                                 \"1e-0\",\n                                 \"12.e+1\",\n                                 \"0e-0\",\n                                 \"12.e+01\",\n                                 \"1e-01\",\n  }", "var_name": "goodDoubleStrings"}], "file": "siren-core/src/test/java/org/sindice/siren/util/TestXSDPrimitiveTypeParser.java"}, "test_case": {"identifier": "testInvalidInt", "parameters": "()", "modifiers": "@Test(expected=NumberFormatException.class) public", "return": "void", "body": "@Test(expected=NumberFormatException.class)\n  public void testInvalidInt() throws IOException {\n    XSDPrimitiveTypeParser.parseInt(new StringReader(\"fdaslk\"));\n  }", "signature": "void testInvalidInt()", "full_signature": "@Test(expected=NumberFormatException.class) public void testInvalidInt()", "class_method_signature": "TestXSDPrimitiveTypeParser.testInvalidInt()", "testcase": true, "constructor": false, "invocations": ["parseInt"]}, "focal_class": {"identifier": "XSDPrimitiveTypeParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseShort", "parameters": "(final Reader reader)", "modifiers": "public static", "return": "short", "signature": "short parseShort(final Reader reader)", "full_signature": "public static short parseShort(final Reader reader)", "class_method_signature": "XSDPrimitiveTypeParser.parseShort(final Reader reader)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(final Reader reader)", "modifiers": "public static", "return": "int", "signature": "int parseInt(final Reader reader)", "full_signature": "public static int parseInt(final Reader reader)", "class_method_signature": "XSDPrimitiveTypeParser.parseInt(final Reader reader)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(final Reader reader)", "modifiers": "public static", "return": "long", "signature": "long parseLong(final Reader reader)", "full_signature": "public static long parseLong(final Reader reader)", "class_method_signature": "XSDPrimitiveTypeParser.parseLong(final Reader reader)", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "(final Reader reader)", "modifiers": "public static", "return": "float", "signature": "float parseFloat(final Reader reader)", "full_signature": "public static float parseFloat(final Reader reader)", "class_method_signature": "XSDPrimitiveTypeParser.parseFloat(final Reader reader)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(final Reader reader)", "modifiers": "public static", "return": "double", "signature": "double parseDouble(final Reader reader)", "full_signature": "public static double parseDouble(final Reader reader)", "class_method_signature": "XSDPrimitiveTypeParser.parseDouble(final Reader reader)", "testcase": false, "constructor": false}, {"identifier": "parseNaN", "parameters": "(final Reader reader)", "modifiers": "private static", "return": "double", "signature": "double parseNaN(final Reader reader)", "full_signature": "private static double parseNaN(final Reader reader)", "class_method_signature": "XSDPrimitiveTypeParser.parseNaN(final Reader reader)", "testcase": false, "constructor": false}, {"identifier": "parseINF", "parameters": "(final Reader reader, final boolean isNegative)", "modifiers": "private static", "return": "double", "signature": "double parseINF(final Reader reader, final boolean isNegative)", "full_signature": "private static double parseINF(final Reader reader, final boolean isNegative)", "class_method_signature": "XSDPrimitiveTypeParser.parseINF(final Reader reader, final boolean isNegative)", "testcase": false, "constructor": false}, {"identifier": "isSign", "parameters": "(final int c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSign(final int c)", "full_signature": "private static boolean isSign(final int c)", "class_method_signature": "XSDPrimitiveTypeParser.isSign(final int c)", "testcase": false, "constructor": false}, {"identifier": "accumulateIntegerDecimal", "parameters": "(final int c, final int decimal)", "modifiers": "private static", "return": "int", "signature": "int accumulateIntegerDecimal(final int c, final int decimal)", "full_signature": "private static int accumulateIntegerDecimal(final int c, final int decimal)", "class_method_signature": "XSDPrimitiveTypeParser.accumulateIntegerDecimal(final int c, final int decimal)", "testcase": false, "constructor": false}, {"identifier": "accumulateLongDecimal", "parameters": "(final int c, final long decimal)", "modifiers": "private static", "return": "long", "signature": "long accumulateLongDecimal(final int c, final long decimal)", "full_signature": "private static long accumulateLongDecimal(final int c, final long decimal)", "class_method_signature": "XSDPrimitiveTypeParser.accumulateLongDecimal(final int c, final long decimal)", "testcase": false, "constructor": false}, {"identifier": "accumulateDoubleFraction", "parameters": "(final int c, final double fraction, final double base)", "modifiers": "private static", "return": "double", "signature": "double accumulateDoubleFraction(final int c, final double fraction, final double base)", "full_signature": "private static double accumulateDoubleFraction(final int c, final double fraction, final double base)", "class_method_signature": "XSDPrimitiveTypeParser.accumulateDoubleFraction(final int c, final double fraction, final double base)", "testcase": false, "constructor": false}], "file": "siren-core/src/main/java/org/sindice/siren/util/XSDPrimitiveTypeParser.java"}, "focal_method": {"identifier": "parseInt", "parameters": "(final Reader reader)", "modifiers": "public static", "return": "int", "body": "public static int parseInt(final Reader reader) throws IOException {\n        boolean isNegative = false;\n        int result = 0;\n\n        // Check for sign\n        int c = reader.read();\n        if (isSign(c)) {\n          isNegative = (c == '-') ? true : false;\n          c = reader.read();\n        }\n\n        while (c != -1) {\n          result = accumulateIntegerDecimal(c, result);\n          c = reader.read();\n        }\n\n        // Check MAX_VALUE overflow\n        if ((result == Integer.MIN_VALUE) && !isNegative) {\n          throw new NumberFormatException(\"Integer overflow\");\n        }\n\n        // Decimal has been accumulated negatively. We must switch sign if\n        // the number is non-negative.\n        return isNegative ? result : -result;\n    }", "signature": "int parseInt(final Reader reader)", "full_signature": "public static int parseInt(final Reader reader)", "class_method_signature": "XSDPrimitiveTypeParser.parseInt(final Reader reader)", "testcase": false, "constructor": false, "invocations": ["read", "isSign", "read", "accumulateIntegerDecimal", "read"]}, "repository": {"repo_id": 1670551, "url": "https://github.com/rdelbru/SIREn", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 106, "size": 46386, "license": "licensed"}}