{"test_class": {"identifier": "ScheduledTaskConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ScheduledTaskConfiguration configuration;", "modifier": "@Autowired\n    private", "type": "ScheduledTaskConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Mock\n    private ScheduledTaskRegistrar registrar;", "modifier": "@Mock\n    private", "type": "ScheduledTaskRegistrar", "declarator": "registrar", "var_name": "registrar"}, {"original_string": "@Autowired\n    private ScheduledTaskBeanLocator beanLocator;", "modifier": "@Autowired\n    private", "type": "ScheduledTaskBeanLocator", "declarator": "beanLocator", "var_name": "beanLocator"}, {"original_string": "@MockBean\n    private ApplicationContext context;", "modifier": "@MockBean\n    private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}], "file": "bugsnag-spring/src/test/java/com/bugsnag/ScheduledTaskConfigurationTest.java"}, "test_case": {"identifier": "findSchedulerByType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findSchedulerByType() throws NoSuchFieldException, IllegalAccessException {\n        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();\n        when(context.getBean(TaskScheduler.class)).thenReturn(scheduler);\n\n        configuration.configureTasks(registrar);\n        assertNull(registrar.getScheduler());\n        Object errorHandler = accessField(scheduler, \"errorHandler\");\n        assertTrue(errorHandler instanceof BugsnagScheduledTaskExceptionHandler);\n    }", "signature": "void findSchedulerByType()", "full_signature": "@Test public void findSchedulerByType()", "class_method_signature": "ScheduledTaskConfigurationTest.findSchedulerByType()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getBean", "configureTasks", "assertNull", "getScheduler", "accessField", "assertTrue"]}, "focal_class": {"identifier": "ScheduledTaskConfiguration", "superclass": "", "interfaces": "implements SchedulingConfigurer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ScheduledTaskConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ScheduledTaskConfiguration.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private Bugsnag bugsnag;", "modifier": "@Autowired\n    private", "type": "Bugsnag", "declarator": "bugsnag", "var_name": "bugsnag"}, {"original_string": "@Autowired\n    private ScheduledTaskBeanLocator beanLocator;", "modifier": "@Autowired\n    private", "type": "ScheduledTaskBeanLocator", "declarator": "beanLocator", "var_name": "beanLocator"}], "methods": [{"identifier": "configureTasks", "parameters": "(ScheduledTaskRegistrar taskRegistrar)", "modifiers": "@Override public", "return": "void", "signature": "void configureTasks(ScheduledTaskRegistrar taskRegistrar)", "full_signature": "@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar)", "class_method_signature": "ScheduledTaskConfiguration.configureTasks(ScheduledTaskRegistrar taskRegistrar)", "testcase": false, "constructor": false}, {"identifier": "createNewTaskScheduler", "parameters": "(\n            ScheduledExecutorService executorService,\n            BugsnagScheduledTaskExceptionHandler errorHandler)", "modifiers": "private", "return": "TaskScheduler", "signature": "TaskScheduler createNewTaskScheduler(\n            ScheduledExecutorService executorService,\n            BugsnagScheduledTaskExceptionHandler errorHandler)", "full_signature": "private TaskScheduler createNewTaskScheduler(\n            ScheduledExecutorService executorService,\n            BugsnagScheduledTaskExceptionHandler errorHandler)", "class_method_signature": "ScheduledTaskConfiguration.createNewTaskScheduler(\n            ScheduledExecutorService executorService,\n            BugsnagScheduledTaskExceptionHandler errorHandler)", "testcase": false, "constructor": false}, {"identifier": "configureExistingTaskScheduler", "parameters": "(TaskScheduler taskScheduler,\n                                                BugsnagScheduledTaskExceptionHandler errorHandler)", "modifiers": "private", "return": "void", "signature": "void configureExistingTaskScheduler(TaskScheduler taskScheduler,\n                                                BugsnagScheduledTaskExceptionHandler errorHandler)", "full_signature": "private void configureExistingTaskScheduler(TaskScheduler taskScheduler,\n                                                BugsnagScheduledTaskExceptionHandler errorHandler)", "class_method_signature": "ScheduledTaskConfiguration.configureExistingTaskScheduler(TaskScheduler taskScheduler,\n                                                BugsnagScheduledTaskExceptionHandler errorHandler)", "testcase": false, "constructor": false}], "file": "bugsnag-spring/src/main/java/com/bugsnag/ScheduledTaskConfiguration.java"}, "focal_method": {"identifier": "configureTasks", "parameters": "(ScheduledTaskRegistrar taskRegistrar)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n        BugsnagScheduledTaskExceptionHandler bugsnagErrorHandler =\n                new BugsnagScheduledTaskExceptionHandler(bugsnag);\n\n        // Decision process for finding a TaskScheduler, in order of preference:\n        //\n        // 1. use the scheduler from the task registrar\n        // 2. search for a TaskScheduler bean, by type, then by name\n        // 3. search for a ScheduledExecutorService bean by type, then by name,\n        //    and wrap it in a TaskScheduler\n        // 4. create our own TaskScheduler\n\n        TaskScheduler registrarScheduler = taskRegistrar.getScheduler();\n        TaskScheduler taskScheduler = registrarScheduler != null\n                ? registrarScheduler : beanLocator.resolveTaskScheduler();\n\n        if (taskScheduler != null) {\n            configureExistingTaskScheduler(taskScheduler, bugsnagErrorHandler);\n        } else {\n            ScheduledExecutorService executorService\n                    = beanLocator.resolveScheduledExecutorService();\n            taskScheduler = createNewTaskScheduler(executorService, bugsnagErrorHandler);\n            taskRegistrar.setScheduler(taskScheduler);\n        }\n    }", "signature": "void configureTasks(ScheduledTaskRegistrar taskRegistrar)", "full_signature": "@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar)", "class_method_signature": "ScheduledTaskConfiguration.configureTasks(ScheduledTaskRegistrar taskRegistrar)", "testcase": false, "constructor": false, "invocations": ["getScheduler", "resolveTaskScheduler", "configureExistingTaskScheduler", "resolveScheduledExecutorService", "createNewTaskScheduler", "setScheduler"]}, "repository": {"repo_id": 8467178, "url": "https://github.com/bugsnag/bugsnag-java", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 45, "size": 1102, "license": "licensed"}}