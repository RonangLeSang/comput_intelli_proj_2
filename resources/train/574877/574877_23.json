{"test_class": {"identifier": "CompositeAcceptorTest", "superclass": "", "interfaces": "", "fields": [], "file": "aws-java-sdk-core/src/test/java/com/amazonaws/waiters/CompositeAcceptorTest.java"}, "test_case": {"identifier": "exceptionNotMatchExpected", "parameters": "()", "modifiers": "@Test (expected = AmazonServiceException.class) public", "return": "void", "body": "@Test (expected = AmazonServiceException.class)\n    public void exceptionNotMatchExpected() throws Exception {\n        List<WaiterAcceptor> waiterAcceptorsList = new ArrayList<WaiterAcceptor>();\n        waiterAcceptorsList.add(new TestResultAcceptor());\n        CompositeAcceptor compositeAcceptor = new CompositeAcceptor(waiterAcceptorsList);\n        Assert.assertEquals(\"Exception thrown doesn't match expected exception.\", WaiterState.RETRY, compositeAcceptor.accepts(new AmazonServiceException(\"\")));\n    }", "signature": "void exceptionNotMatchExpected()", "full_signature": "@Test (expected = AmazonServiceException.class) public void exceptionNotMatchExpected()", "class_method_signature": "CompositeAcceptorTest.exceptionNotMatchExpected()", "testcase": true, "constructor": false, "invocations": ["add", "assertEquals", "accepts"]}, "focal_class": {"identifier": "CompositeAcceptor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<WaiterAcceptor<Output>> acceptors = new ArrayList<WaiterAcceptor<Output>>();", "modifier": "private", "type": "List<WaiterAcceptor<Output>>", "declarator": "acceptors = new ArrayList<WaiterAcceptor<Output>>()", "var_name": "acceptors"}], "methods": [{"identifier": "CompositeAcceptor", "parameters": "(List<WaiterAcceptor<Output>> acceptors)", "modifiers": "public", "return": "", "signature": " CompositeAcceptor(List<WaiterAcceptor<Output>> acceptors)", "full_signature": "public  CompositeAcceptor(List<WaiterAcceptor<Output>> acceptors)", "class_method_signature": "CompositeAcceptor.CompositeAcceptor(List<WaiterAcceptor<Output>> acceptors)", "testcase": false, "constructor": true}, {"identifier": "getAcceptors", "parameters": "()", "modifiers": "public", "return": "List<WaiterAcceptor<Output>>", "signature": "List<WaiterAcceptor<Output>> getAcceptors()", "full_signature": "public List<WaiterAcceptor<Output>> getAcceptors()", "class_method_signature": "CompositeAcceptor.getAcceptors()", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Output response)", "modifiers": "public", "return": "WaiterState", "signature": "WaiterState accepts(Output response)", "full_signature": "public WaiterState accepts(Output response)", "class_method_signature": "CompositeAcceptor.accepts(Output response)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(AmazonServiceException exception)", "modifiers": "public", "return": "WaiterState", "signature": "WaiterState accepts(AmazonServiceException exception)", "full_signature": "public WaiterState accepts(AmazonServiceException exception)", "class_method_signature": "CompositeAcceptor.accepts(AmazonServiceException exception)", "testcase": false, "constructor": false}], "file": "aws-java-sdk-core/src/main/java/com/amazonaws/waiters/CompositeAcceptor.java"}, "focal_method": {"identifier": "accepts", "parameters": "(Output response)", "modifiers": "public", "return": "WaiterState", "body": "public WaiterState accepts(Output response) {\n        for (WaiterAcceptor<Output> acceptor : acceptors) {\n            if (acceptor.matches(response)) {\n                return acceptor.getState();\n            }\n        }\n        return WaiterState.RETRY;\n\n    }", "signature": "WaiterState accepts(Output response)", "full_signature": "public WaiterState accepts(Output response)", "class_method_signature": "CompositeAcceptor.accepts(Output response)", "testcase": false, "constructor": false, "invocations": ["matches", "getState"]}, "repository": {"repo_id": 574877, "url": "https://github.com/aws/aws-sdk-java", "stars": 3141, "created": "3/22/2010 11:34:58 PM +00:00", "updates": "2020-01-25T22:06:42+00:00", "fork": "False", "license": "licensed"}}