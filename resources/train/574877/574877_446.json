{"test_class": {"identifier": "RegionMetadataParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "aws-java-sdk-core/src/test/java/com/amazonaws/regions/RegionMetadataParserTest.java"}, "test_case": {"identifier": "testExternalSchema", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExternalSchema() throws IOException {\n        TestHttpServer server = new TestHttpServer(\"secret\");\n        try {\n            String xml = String.format(\n                    \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n                            + \"<!DOCTYPE oops SYSTEM \\\"%s\\\">\\n\"\n                            + \"<oops></oops>\",\n                    server.url());\n\n            parse(xml);\n        } catch (IOException e) {\n            // okay\n        } finally {\n            server.stop();\n        }\n\n        if (server.accepted()) {\n            fail(\"Oops! The server has been reached!\");\n        }\n    }", "signature": "void testExternalSchema()", "full_signature": "@Test public void testExternalSchema()", "class_method_signature": "RegionMetadataParserTest.testExternalSchema()", "testcase": true, "constructor": false, "invocations": ["format", "url", "parse", "stop", "accepted", "fail"]}, "focal_class": {"identifier": "RegionMetadataParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log log = LogFactory.getLog(RegionMetadataParser.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(RegionMetadataParser.class)", "var_name": "log"}, {"original_string": "private static final String REGION_TAG = \"Region\";", "modifier": "private static final", "type": "String", "declarator": "REGION_TAG = \"Region\"", "var_name": "REGION_TAG"}, {"original_string": "private static final String REGION_ID_TAG = \"Name\";", "modifier": "private static final", "type": "String", "declarator": "REGION_ID_TAG = \"Name\"", "var_name": "REGION_ID_TAG"}, {"original_string": "private static final String DOMAIN_TAG = \"Domain\";", "modifier": "private static final", "type": "String", "declarator": "DOMAIN_TAG = \"Domain\"", "var_name": "DOMAIN_TAG"}, {"original_string": "private static final String ENDPOINT_TAG = \"Endpoint\";", "modifier": "private static final", "type": "String", "declarator": "ENDPOINT_TAG = \"Endpoint\"", "var_name": "ENDPOINT_TAG"}, {"original_string": "private static final String SERVICE_TAG = \"ServiceName\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_TAG = \"ServiceName\"", "var_name": "SERVICE_TAG"}, {"original_string": "private static final String HTTP_TAG = \"Http\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_TAG = \"Http\"", "var_name": "HTTP_TAG"}, {"original_string": "private static final String HTTPS_TAG = \"Https\";", "modifier": "private static final", "type": "String", "declarator": "HTTPS_TAG = \"Https\"", "var_name": "HTTPS_TAG"}, {"original_string": "private static final String HOSTNAME_TAG = \"Hostname\";", "modifier": "private static final", "type": "String", "declarator": "HOSTNAME_TAG = \"Hostname\"", "var_name": "HOSTNAME_TAG"}], "methods": [{"identifier": "parse", "parameters": "(final InputStream input)", "modifiers": "public static", "return": "RegionMetadata", "signature": "RegionMetadata parse(final InputStream input)", "full_signature": "public static RegionMetadata parse(final InputStream input)", "class_method_signature": "RegionMetadataParser.parse(final InputStream input)", "testcase": false, "constructor": false}, {"identifier": "RegionMetadataParser", "parameters": "()", "modifiers": "@Deprecated public", "return": "", "signature": " RegionMetadataParser()", "full_signature": "@Deprecated public  RegionMetadataParser()", "class_method_signature": "RegionMetadataParser.RegionMetadataParser()", "testcase": false, "constructor": true}, {"identifier": "parseRegionMetadata", "parameters": "(InputStream input)", "modifiers": "@Deprecated public", "return": "List<Region>", "signature": "List<Region> parseRegionMetadata(InputStream input)", "full_signature": "@Deprecated public List<Region> parseRegionMetadata(InputStream input)", "class_method_signature": "RegionMetadataParser.parseRegionMetadata(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "parseRegionMetadata", "parameters": "(final InputStream input,\n                                            final boolean endpointVerification)", "modifiers": "@Deprecated public", "return": "List<Region>", "signature": "List<Region> parseRegionMetadata(final InputStream input,\n                                            final boolean endpointVerification)", "full_signature": "@Deprecated public List<Region> parseRegionMetadata(final InputStream input,\n                                            final boolean endpointVerification)", "class_method_signature": "RegionMetadataParser.parseRegionMetadata(final InputStream input,\n                                            final boolean endpointVerification)", "testcase": false, "constructor": false}, {"identifier": "internalParse", "parameters": "(\n            final InputStream input,\n            final boolean endpointVerification)", "modifiers": "private static", "return": "List<Region>", "signature": "List<Region> internalParse(\n            final InputStream input,\n            final boolean endpointVerification)", "full_signature": "private static List<Region> internalParse(\n            final InputStream input,\n            final boolean endpointVerification)", "class_method_signature": "RegionMetadataParser.internalParse(\n            final InputStream input,\n            final boolean endpointVerification)", "testcase": false, "constructor": false}, {"identifier": "parseRegionElement", "parameters": "(\n            final Element regionElement,\n            final boolean endpointVerification)", "modifiers": "private static", "return": "Region", "signature": "Region parseRegionElement(\n            final Element regionElement,\n            final boolean endpointVerification)", "full_signature": "private static Region parseRegionElement(\n            final Element regionElement,\n            final boolean endpointVerification)", "class_method_signature": "RegionMetadataParser.parseRegionElement(\n            final Element regionElement,\n            final boolean endpointVerification)", "testcase": false, "constructor": false}, {"identifier": "addRegionEndpoint", "parameters": "(\n            final InMemoryRegionImpl region,\n            final Element endpointElement,\n            final boolean endpointVerification)", "modifiers": "private static", "return": "void", "signature": "void addRegionEndpoint(\n            final InMemoryRegionImpl region,\n            final Element endpointElement,\n            final boolean endpointVerification)", "full_signature": "private static void addRegionEndpoint(\n            final InMemoryRegionImpl region,\n            final Element endpointElement,\n            final boolean endpointVerification)", "class_method_signature": "RegionMetadataParser.addRegionEndpoint(\n            final InMemoryRegionImpl region,\n            final Element endpointElement,\n            final boolean endpointVerification)", "testcase": false, "constructor": false}, {"identifier": "getChildElementValue", "parameters": "(\n            final String tagName,\n            final Element element)", "modifiers": "private static", "return": "String", "signature": "String getChildElementValue(\n            final String tagName,\n            final Element element)", "full_signature": "private static String getChildElementValue(\n            final String tagName,\n            final Element element)", "class_method_signature": "RegionMetadataParser.getChildElementValue(\n            final String tagName,\n            final Element element)", "testcase": false, "constructor": false}, {"identifier": "verifyLegacyEndpoint", "parameters": "(String endpoint)", "modifiers": "private static", "return": "boolean", "signature": "boolean verifyLegacyEndpoint(String endpoint)", "full_signature": "private static boolean verifyLegacyEndpoint(String endpoint)", "class_method_signature": "RegionMetadataParser.verifyLegacyEndpoint(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "isXerces", "parameters": "(DocumentBuilderFactory factory)", "modifiers": "private static", "return": "boolean", "signature": "boolean isXerces(DocumentBuilderFactory factory)", "full_signature": "private static boolean isXerces(DocumentBuilderFactory factory)", "class_method_signature": "RegionMetadataParser.isXerces(DocumentBuilderFactory factory)", "testcase": false, "constructor": false}, {"identifier": "configureDocumentBuilderFactory", "parameters": "(DocumentBuilderFactory factory)", "modifiers": "private static", "return": "void", "signature": "void configureDocumentBuilderFactory(DocumentBuilderFactory factory)", "full_signature": "private static void configureDocumentBuilderFactory(DocumentBuilderFactory factory)", "class_method_signature": "RegionMetadataParser.configureDocumentBuilderFactory(DocumentBuilderFactory factory)", "testcase": false, "constructor": false}], "file": "aws-java-sdk-core/src/main/java/com/amazonaws/regions/RegionMetadataParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final InputStream input)", "modifiers": "public static", "return": "RegionMetadata", "body": "public static RegionMetadata parse(final InputStream input)\n            throws IOException {\n\n        return new RegionMetadata(internalParse(input, false));\n    }", "signature": "RegionMetadata parse(final InputStream input)", "full_signature": "public static RegionMetadata parse(final InputStream input)", "class_method_signature": "RegionMetadataParser.parse(final InputStream input)", "testcase": false, "constructor": false, "invocations": ["internalParse"]}, "repository": {"repo_id": 574877, "url": "https://github.com/aws/aws-sdk-java", "stars": 3141, "created": "3/22/2010 11:34:58 PM +00:00", "updates": "2020-01-25T22:06:42+00:00", "fork": "False", "license": "licensed"}}