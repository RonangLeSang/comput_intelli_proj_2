{"test_class": {"identifier": "JsonErrorResponseHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SERVICE_NAME = \"someService\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_NAME = \"someService\"", "var_name": "SERVICE_NAME"}, {"original_string": "private static final String ERROR_CODE = \"someErrorCode\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_CODE = \"someErrorCode\"", "var_name": "ERROR_CODE"}, {"original_string": "private JsonErrorResponseHandler responseHandler;", "modifier": "private", "type": "JsonErrorResponseHandler", "declarator": "responseHandler", "var_name": "responseHandler"}, {"original_string": "private HttpResponse httpResponse;", "modifier": "private", "type": "HttpResponse", "declarator": "httpResponse", "var_name": "httpResponse"}, {"original_string": "@Mock\n    private JsonErrorUnmarshaller unmarshaller;", "modifier": "@Mock\n    private", "type": "JsonErrorUnmarshaller", "declarator": "unmarshaller", "var_name": "unmarshaller"}, {"original_string": "@Mock\n    private EnhancedJsonErrorUnmarshaller enhancedUnmarshaller;", "modifier": "@Mock\n    private", "type": "EnhancedJsonErrorUnmarshaller", "declarator": "enhancedUnmarshaller", "var_name": "enhancedUnmarshaller"}, {"original_string": "@Mock\n    private JsonErrorCodeParser errorCodeParser;", "modifier": "@Mock\n    private", "type": "JsonErrorCodeParser", "declarator": "errorCodeParser", "var_name": "errorCodeParser"}, {"original_string": "@Mock\n    private Map<Class<?>, Unmarshaller<?, JsonUnmarshallerContext>> simpleTypeUnmarshallers;", "modifier": "@Mock\n    private", "type": "Map<Class<?>, Unmarshaller<?, JsonUnmarshallerContext>>", "declarator": "simpleTypeUnmarshallers", "var_name": "simpleTypeUnmarshallers"}, {"original_string": "@Mock\n    private Map<JsonUnmarshallerContext.UnmarshallerType, Unmarshaller<?, JsonUnmarshallerContext>> customTypeUnmarshallers;", "modifier": "@Mock\n    private", "type": "Map<JsonUnmarshallerContext.UnmarshallerType, Unmarshaller<?, JsonUnmarshallerContext>>", "declarator": "customTypeUnmarshallers", "var_name": "customTypeUnmarshallers"}], "file": "aws-java-sdk-core/src/test/java/com/amazonaws/http/JsonErrorResponseHandlerTest.java"}, "test_case": {"identifier": "handle_UnmarshallerReturnsException_WithRequestId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handle_UnmarshallerReturnsException_WithRequestId() throws Exception {\n        httpResponse.setStatusCode(500);\n        httpResponse.addHeader(HttpResponseHandler.X_AMZN_REQUEST_ID_HEADER, \"1234\");\n        expectUnmarshallerMatches();\n        when(unmarshaller.unmarshall(any(JsonNode.class)))\n                .thenReturn(new CustomException(\"error\"));\n\n        AmazonServiceException ase = responseHandler.handle(httpResponse);\n\n        assertEquals(\"1234\", ase.getRequestId());\n    }", "signature": "void handle_UnmarshallerReturnsException_WithRequestId()", "full_signature": "@Test public void handle_UnmarshallerReturnsException_WithRequestId()", "class_method_signature": "JsonErrorResponseHandlerTest.handle_UnmarshallerReturnsException_WithRequestId()", "testcase": true, "constructor": false, "invocations": ["setStatusCode", "addHeader", "expectUnmarshallerMatches", "thenReturn", "when", "unmarshall", "any", "handle", "assertEquals", "getRequestId"]}, "focal_class": {"identifier": "JsonErrorResponseHandler", "superclass": "", "interfaces": "implements HttpResponseHandler<AmazonServiceException>", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(JsonErrorResponseHandler.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(JsonErrorResponseHandler.class)", "var_name": "LOG"}, {"original_string": "private final List<JsonErrorUnmarshaller> unmarshallers;", "modifier": "private final", "type": "List<JsonErrorUnmarshaller>", "declarator": "unmarshallers", "var_name": "unmarshallers"}, {"original_string": "private final ErrorCodeParser errorCodeParser;", "modifier": "private final", "type": "ErrorCodeParser", "declarator": "errorCodeParser", "var_name": "errorCodeParser"}, {"original_string": "private final JsonErrorMessageParser errorMessageParser;", "modifier": "private final", "type": "JsonErrorMessageParser", "declarator": "errorMessageParser", "var_name": "errorMessageParser"}, {"original_string": "private final JsonFactory jsonFactory;", "modifier": "private final", "type": "JsonFactory", "declarator": "jsonFactory", "var_name": "jsonFactory"}, {"original_string": "private final Map<Class<?>, Unmarshaller<?, JsonUnmarshallerContext>> simpleTypeUnmarshallers;", "modifier": "private final", "type": "Map<Class<?>, Unmarshaller<?, JsonUnmarshallerContext>>", "declarator": "simpleTypeUnmarshallers", "var_name": "simpleTypeUnmarshallers"}, {"original_string": "private final Map<JsonUnmarshallerContext.UnmarshallerType, Unmarshaller<?, JsonUnmarshallerContext>> customTypeUnmarshallers;", "modifier": "private final", "type": "Map<JsonUnmarshallerContext.UnmarshallerType, Unmarshaller<?, JsonUnmarshallerContext>>", "declarator": "customTypeUnmarshallers", "var_name": "customTypeUnmarshallers"}], "methods": [{"identifier": "JsonErrorResponseHandler", "parameters": "(\n            List<JsonErrorUnmarshaller> errorUnmarshallers,\n            ErrorCodeParser errorCodeParser,\n            JsonErrorMessageParser errorMessageParser,\n            JsonFactory jsonFactory)", "modifiers": "public", "return": "", "signature": " JsonErrorResponseHandler(\n            List<JsonErrorUnmarshaller> errorUnmarshallers,\n            ErrorCodeParser errorCodeParser,\n            JsonErrorMessageParser errorMessageParser,\n            JsonFactory jsonFactory)", "full_signature": "public  JsonErrorResponseHandler(\n            List<JsonErrorUnmarshaller> errorUnmarshallers,\n            ErrorCodeParser errorCodeParser,\n            JsonErrorMessageParser errorMessageParser,\n            JsonFactory jsonFactory)", "class_method_signature": "JsonErrorResponseHandler.JsonErrorResponseHandler(\n            List<JsonErrorUnmarshaller> errorUnmarshallers,\n            ErrorCodeParser errorCodeParser,\n            JsonErrorMessageParser errorMessageParser,\n            JsonFactory jsonFactory)", "testcase": false, "constructor": true}, {"identifier": "JsonErrorResponseHandler", "parameters": "(\n            List<JsonErrorUnmarshaller> errorUnmarshallers,\n            Map<Class<?>, Unmarshaller<?, JsonUnmarshallerContext>> simpleTypeUnmarshallers,\n            Map<JsonUnmarshallerContext.UnmarshallerType, Unmarshaller<?, JsonUnmarshallerContext>> customTypeUnmarshallers,\n            ErrorCodeParser errorCodeParser,\n            JsonErrorMessageParser errorMessageParser,\n            JsonFactory jsonFactory)", "modifiers": "public", "return": "", "signature": " JsonErrorResponseHandler(\n            List<JsonErrorUnmarshaller> errorUnmarshallers,\n            Map<Class<?>, Unmarshaller<?, JsonUnmarshallerContext>> simpleTypeUnmarshallers,\n            Map<JsonUnmarshallerContext.UnmarshallerType, Unmarshaller<?, JsonUnmarshallerContext>> customTypeUnmarshallers,\n            ErrorCodeParser errorCodeParser,\n            JsonErrorMessageParser errorMessageParser,\n            JsonFactory jsonFactory)", "full_signature": "public  JsonErrorResponseHandler(\n            List<JsonErrorUnmarshaller> errorUnmarshallers,\n            Map<Class<?>, Unmarshaller<?, JsonUnmarshallerContext>> simpleTypeUnmarshallers,\n            Map<JsonUnmarshallerContext.UnmarshallerType, Unmarshaller<?, JsonUnmarshallerContext>> customTypeUnmarshallers,\n            ErrorCodeParser errorCodeParser,\n            JsonErrorMessageParser errorMessageParser,\n            JsonFactory jsonFactory)", "class_method_signature": "JsonErrorResponseHandler.JsonErrorResponseHandler(\n            List<JsonErrorUnmarshaller> errorUnmarshallers,\n            Map<Class<?>, Unmarshaller<?, JsonUnmarshallerContext>> simpleTypeUnmarshallers,\n            Map<JsonUnmarshallerContext.UnmarshallerType, Unmarshaller<?, JsonUnmarshallerContext>> customTypeUnmarshallers,\n            ErrorCodeParser errorCodeParser,\n            JsonErrorMessageParser errorMessageParser,\n            JsonFactory jsonFactory)", "testcase": false, "constructor": true}, {"identifier": "needsConnectionLeftOpen", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean needsConnectionLeftOpen()", "full_signature": "@Override public boolean needsConnectionLeftOpen()", "class_method_signature": "JsonErrorResponseHandler.needsConnectionLeftOpen()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(HttpResponse response)", "modifiers": "@Override public", "return": "AmazonServiceException", "signature": "AmazonServiceException handle(HttpResponse response)", "full_signature": "@Override public AmazonServiceException handle(HttpResponse response)", "class_method_signature": "JsonErrorResponseHandler.handle(HttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "createException", "parameters": "(String errorCode, HttpResponse response, JsonNode jsonNode, byte[] rawContent)", "modifiers": "private", "return": "AmazonServiceException", "signature": "AmazonServiceException createException(String errorCode, HttpResponse response, JsonNode jsonNode, byte[] rawContent)", "full_signature": "private AmazonServiceException createException(String errorCode, HttpResponse response, JsonNode jsonNode, byte[] rawContent)", "class_method_signature": "JsonErrorResponseHandler.createException(String errorCode, HttpResponse response, JsonNode jsonNode, byte[] rawContent)", "testcase": false, "constructor": false}, {"identifier": "unmarshallException", "parameters": "(String errorCode, HttpResponse response, JsonNode jsonNode, byte[] rawContent)", "modifiers": "private", "return": "AmazonServiceException", "signature": "AmazonServiceException unmarshallException(String errorCode, HttpResponse response, JsonNode jsonNode, byte[] rawContent)", "full_signature": "private AmazonServiceException unmarshallException(String errorCode, HttpResponse response, JsonNode jsonNode, byte[] rawContent)", "class_method_signature": "JsonErrorResponseHandler.unmarshallException(String errorCode, HttpResponse response, JsonNode jsonNode, byte[] rawContent)", "testcase": false, "constructor": false}, {"identifier": "doEnhancedUnmarshall", "parameters": "(EnhancedJsonErrorUnmarshaller unmarshaller,\n                                                        String errorCode,\n                                                        HttpResponse response,\n                                                        byte[] rawContent)", "modifiers": "private", "return": "AmazonServiceException", "signature": "AmazonServiceException doEnhancedUnmarshall(EnhancedJsonErrorUnmarshaller unmarshaller,\n                                                        String errorCode,\n                                                        HttpResponse response,\n                                                        byte[] rawContent)", "full_signature": "private AmazonServiceException doEnhancedUnmarshall(EnhancedJsonErrorUnmarshaller unmarshaller,\n                                                        String errorCode,\n                                                        HttpResponse response,\n                                                        byte[] rawContent)", "class_method_signature": "JsonErrorResponseHandler.doEnhancedUnmarshall(EnhancedJsonErrorUnmarshaller unmarshaller,\n                                                        String errorCode,\n                                                        HttpResponse response,\n                                                        byte[] rawContent)", "testcase": false, "constructor": false}, {"identifier": "doLegacyUnmarshall", "parameters": "(JsonErrorUnmarshaller unmarshaller, JsonNode jsonNode)", "modifiers": "private", "return": "AmazonServiceException", "signature": "AmazonServiceException doLegacyUnmarshall(JsonErrorUnmarshaller unmarshaller, JsonNode jsonNode)", "full_signature": "private AmazonServiceException doLegacyUnmarshall(JsonErrorUnmarshaller unmarshaller, JsonNode jsonNode)", "class_method_signature": "JsonErrorResponseHandler.doLegacyUnmarshall(JsonErrorUnmarshaller unmarshaller, JsonNode jsonNode)", "testcase": false, "constructor": false}, {"identifier": "getErrorTypeFromStatusCode", "parameters": "(int statusCode)", "modifiers": "private", "return": "ErrorType", "signature": "ErrorType getErrorTypeFromStatusCode(int statusCode)", "full_signature": "private ErrorType getErrorTypeFromStatusCode(int statusCode)", "class_method_signature": "JsonErrorResponseHandler.getErrorTypeFromStatusCode(int statusCode)", "testcase": false, "constructor": false}, {"identifier": "getRequestIdFromHeaders", "parameters": "(Map<String, String> headers)", "modifiers": "private", "return": "String", "signature": "String getRequestIdFromHeaders(Map<String, String> headers)", "full_signature": "private String getRequestIdFromHeaders(Map<String, String> headers)", "class_method_signature": "JsonErrorResponseHandler.getRequestIdFromHeaders(Map<String, String> headers)", "testcase": false, "constructor": false}], "file": "aws-java-sdk-core/src/main/java/com/amazonaws/http/JsonErrorResponseHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(HttpResponse response)", "modifiers": "@Override public", "return": "AmazonServiceException", "body": "@Override\n    public AmazonServiceException handle(HttpResponse response) throws Exception {\n        JsonContent jsonContent = JsonContent.createJsonContent(response, jsonFactory);\n\n        byte[] rawContent = jsonContent.getRawContent();\n\n        String errorCode = errorCodeParser.parseErrorCode(response, jsonContent);\n        AmazonServiceException ase = createException(errorCode, response, jsonContent.getJsonNode(), rawContent);\n\n        // The marshallers instantiate the exception without providing a\n        // message. If the Exception included a message member find it and\n        // add it here.\n        if (ase.getErrorMessage() == null) {\n            ase.setErrorMessage(errorMessageParser.parseErrorMessage(response, jsonContent.getJsonNode()));\n        }\n\n        ase.setErrorCode(errorCode);\n        ase.setServiceName(response.getRequest().getServiceName());\n        ase.setStatusCode(response.getStatusCode());\n        ase.setErrorType(getErrorTypeFromStatusCode(response.getStatusCode()));\n        ase.setRawResponse(rawContent);\n        String requestId = getRequestIdFromHeaders(response.getHeaders());\n        if (requestId != null) {\n            ase.setRequestId(requestId);\n        }\n        ase.setHttpHeaders(response.getHeaders());\n        return ase;\n    }", "signature": "AmazonServiceException handle(HttpResponse response)", "full_signature": "@Override public AmazonServiceException handle(HttpResponse response)", "class_method_signature": "JsonErrorResponseHandler.handle(HttpResponse response)", "testcase": false, "constructor": false, "invocations": ["createJsonContent", "getRawContent", "parseErrorCode", "createException", "getJsonNode", "getErrorMessage", "setErrorMessage", "parseErrorMessage", "getJsonNode", "setErrorCode", "setServiceName", "getServiceName", "getRequest", "setStatusCode", "getStatusCode", "setErrorType", "getErrorTypeFromStatusCode", "getStatusCode", "setRawResponse", "getRequestIdFromHeaders", "getHeaders", "setRequestId", "setHttpHeaders", "getHeaders"]}, "repository": {"repo_id": 574877, "url": "https://github.com/aws/aws-sdk-java", "stars": 3141, "created": "3/22/2010 11:34:58 PM +00:00", "updates": "2020-01-25T22:06:42+00:00", "fork": "False", "license": "licensed"}}