{"test_class": {"identifier": "TestUsageTimestampTool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TestUsageTimestampTool.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TestUsageTimestampTool.class)", "var_name": "LOG"}, {"original_string": "private static final String TIMESTAMP_FILE_NAME = \".kiji-last-used\";", "modifier": "private static final", "type": "String", "declarator": "TIMESTAMP_FILE_NAME = \".kiji-last-used\"", "var_name": "TIMESTAMP_FILE_NAME"}, {"original_string": "private UsageTimestampTool mTool;", "modifier": "private", "type": "UsageTimestampTool", "declarator": "mTool", "var_name": "mTool"}, {"original_string": "@Rule\n  public TemporaryFolder mTempDir = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mTempDir = new TemporaryFolder()", "var_name": "mTempDir"}], "file": "bento-checkin/src/test/java/org/kiji/bento/box/tools/TestUsageTimestampTool.java"}, "test_case": {"identifier": "testGenerateAndWriteTimestamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGenerateAndWriteTimestamp() throws IOException {\n    Long startTime = System.currentTimeMillis();\n    LOG.info(\"Writing the first timestamp.\");\n    assertTrue(mTool.generateAndWriteTimestamp(mTempDir.getRoot()));\n    LOG.info(\"Reading first written timestamp.\");\n    Long firstTimestampWritten = readTimestampFile();\n    assertTrue(\"Timestamp written was earlier than expected.\",\n        firstTimestampWritten >= startTime);\n    LOG.info(\"Writing the second timestamp.\");\n    assertTrue(mTool.generateAndWriteTimestamp(mTempDir.getRoot()));\n    LOG.info(\"Reading second written timestamp.\");\n    Long secondTimestampWritten = readTimestampFile();\n    assertTrue(\"Timestamp written was earlier than expected.\",\n        secondTimestampWritten >= firstTimestampWritten);\n  }", "signature": "void testGenerateAndWriteTimestamp()", "full_signature": "@Test public void testGenerateAndWriteTimestamp()", "class_method_signature": "TestUsageTimestampTool.testGenerateAndWriteTimestamp()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "info", "assertTrue", "generateAndWriteTimestamp", "getRoot", "info", "readTimestampFile", "assertTrue", "info", "assertTrue", "generateAndWriteTimestamp", "getRoot", "info", "readTimestampFile", "assertTrue"]}, "focal_class": {"identifier": "UsageTimestampTool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(UsageTimestampTool.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(UsageTimestampTool.class)", "var_name": "LOG"}, {"original_string": "private static final String TIMESTAMP_FILE_NAME = \".kiji-last-used\";", "modifier": "private static final", "type": "String", "declarator": "TIMESTAMP_FILE_NAME = \".kiji-last-used\"", "var_name": "TIMESTAMP_FILE_NAME"}], "methods": [{"identifier": "writeTimestamp", "parameters": "(File directory, Long timestamp)", "modifiers": "", "return": "void", "signature": "void writeTimestamp(File directory, Long timestamp)", "full_signature": " void writeTimestamp(File directory, Long timestamp)", "class_method_signature": "UsageTimestampTool.writeTimestamp(File directory, Long timestamp)", "testcase": false, "constructor": false}, {"identifier": "generateAndWriteTimestamp", "parameters": "(File directory)", "modifiers": "", "return": "boolean", "signature": "boolean generateAndWriteTimestamp(File directory)", "full_signature": " boolean generateAndWriteTimestamp(File directory)", "class_method_signature": "UsageTimestampTool.generateAndWriteTimestamp(File directory)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int run()", "full_signature": "public int run()", "class_method_signature": "UsageTimestampTool.run()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "UsageTimestampTool.main(String[] args)", "testcase": false, "constructor": false}], "file": "bento-checkin/src/main/java/org/kiji/bento/box/tools/UsageTimestampTool.java"}, "focal_method": {"identifier": "generateAndWriteTimestamp", "parameters": "(File directory)", "modifiers": "", "return": "boolean", "body": "boolean generateAndWriteTimestamp(File directory) {\n    try {\n      Long timestamp = System.currentTimeMillis();\n      writeTimestamp(directory, timestamp);\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"The following exception was encountered while trying to write the timestamp \"\n          + \"usage file.\", e);\n      return false;\n    }\n  }", "signature": "boolean generateAndWriteTimestamp(File directory)", "full_signature": " boolean generateAndWriteTimestamp(File directory)", "class_method_signature": "UsageTimestampTool.generateAndWriteTimestamp(File directory)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "writeTimestamp", "error"]}, "repository": {"repo_id": 6682435, "url": "https://github.com/kijiproject/kiji-bento", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 26, "size": 1717, "license": "licensed"}}