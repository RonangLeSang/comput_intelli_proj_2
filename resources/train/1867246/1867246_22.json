{"test_class": {"identifier": "WebSSOProfileImplTest", "superclass": "extends SAMLTestBase", "interfaces": "", "fields": [{"original_string": "ApplicationContext context;", "modifier": "", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "WebSSOProfile profile;", "modifier": "", "type": "WebSSOProfile", "declarator": "profile", "var_name": "profile"}, {"original_string": "SAMLMessageStorage storage;", "modifier": "", "type": "SAMLMessageStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "WebSSOProfileOptions options;", "modifier": "", "type": "WebSSOProfileOptions", "declarator": "options", "var_name": "options"}, {"original_string": "SAMLContextProvider contextProvider;", "modifier": "", "type": "SAMLContextProvider", "declarator": "contextProvider", "var_name": "contextProvider"}, {"original_string": "HttpServletRequest request;", "modifier": "", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "HttpServletResponse response;", "modifier": "", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "ServletOutputStream output;", "modifier": "", "type": "ServletOutputStream", "declarator": "output", "var_name": "output"}, {"original_string": "SAMLMessageContext samlContext;", "modifier": "", "type": "SAMLMessageContext", "declarator": "samlContext", "var_name": "samlContext"}], "file": "spring-security-saml/saml2-core/src/test/java/org/springframework/security/saml/websso/WebSSOProfileImplTest.java"}, "test_case": {"identifier": "testPOSTSigned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPOSTSigned() throws Exception {\n        options.setIdp(null);\n        options.setBinding(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\");\n        storage.storeMessage((String) notNull(), (XMLObject) notNull());\n        replyMock();\n        profile.sendAuthenticationRequest(samlContext, options, storage);\n        AuthnRequest authnRequest = (AuthnRequest) samlContext.getOutboundSAMLMessage();\n        verifyMock();\n        assertTrue(authnRequest.isSigned());\n        assertNotNull(authnRequest.getSignature());\n    }", "signature": "void testPOSTSigned()", "full_signature": "@Test public void testPOSTSigned()", "class_method_signature": "WebSSOProfileImplTest.testPOSTSigned()", "testcase": true, "constructor": false, "invocations": ["setIdp", "setBinding", "storeMessage", "notNull", "notNull", "replyMock", "sendAuthenticationRequest", "getOutboundSAMLMessage", "verifyMock", "assertTrue", "isSigned", "assertNotNull", "getSignature"]}, "focal_class": {"identifier": "WebSSOProfileImpl", "superclass": "extends AbstractProfileBase", "interfaces": "implements WebSSOProfile", "fields": [], "methods": [{"identifier": "WebSSOProfileImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " WebSSOProfileImpl()", "full_signature": "public  WebSSOProfileImpl()", "class_method_signature": "WebSSOProfileImpl.WebSSOProfileImpl()", "testcase": false, "constructor": true}, {"identifier": "WebSSOProfileImpl", "parameters": "(SAMLProcessor processor, MetadataManager manager)", "modifiers": "public", "return": "", "signature": " WebSSOProfileImpl(SAMLProcessor processor, MetadataManager manager)", "full_signature": "public  WebSSOProfileImpl(SAMLProcessor processor, MetadataManager manager)", "class_method_signature": "WebSSOProfileImpl.WebSSOProfileImpl(SAMLProcessor processor, MetadataManager manager)", "testcase": false, "constructor": true}, {"identifier": "sendAuthenticationRequest", "parameters": "(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage)", "modifiers": "public", "return": "void", "signature": "void sendAuthenticationRequest(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage)", "full_signature": "public void sendAuthenticationRequest(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage)", "class_method_signature": "WebSSOProfileImpl.sendAuthenticationRequest(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage)", "testcase": false, "constructor": false}, {"identifier": "getSingleSignOnService", "parameters": "(IDPSSODescriptor idpssoDescriptor, SPSSODescriptor spDescriptor, WebSSOProfileOptions options)", "modifiers": "protected", "return": "SingleSignOnService", "signature": "SingleSignOnService getSingleSignOnService(IDPSSODescriptor idpssoDescriptor, SPSSODescriptor spDescriptor, WebSSOProfileOptions options)", "full_signature": "protected SingleSignOnService getSingleSignOnService(IDPSSODescriptor idpssoDescriptor, SPSSODescriptor spDescriptor, WebSSOProfileOptions options)", "class_method_signature": "WebSSOProfileImpl.getSingleSignOnService(IDPSSODescriptor idpssoDescriptor, SPSSODescriptor spDescriptor, WebSSOProfileOptions options)", "testcase": false, "constructor": false}, {"identifier": "getAssertionConsumerService", "parameters": "(IDPSSODescriptor idpssoDescriptor, SPSSODescriptor spDescriptor, WebSSOProfileOptions options, String binding)", "modifiers": "protected", "return": "AssertionConsumerService", "signature": "AssertionConsumerService getAssertionConsumerService(IDPSSODescriptor idpssoDescriptor, SPSSODescriptor spDescriptor, WebSSOProfileOptions options, String binding)", "full_signature": "protected AssertionConsumerService getAssertionConsumerService(IDPSSODescriptor idpssoDescriptor, SPSSODescriptor spDescriptor, WebSSOProfileOptions options, String binding)", "class_method_signature": "WebSSOProfileImpl.getAssertionConsumerService(IDPSSODescriptor idpssoDescriptor, SPSSODescriptor spDescriptor, WebSSOProfileOptions options, String binding)", "testcase": false, "constructor": false}, {"identifier": "getAuthnRequest", "parameters": "(SAMLMessageContext context, WebSSOProfileOptions options,\n                                           AssertionConsumerService assertionConsumer,\n                                           SingleSignOnService bindingService)", "modifiers": "protected", "return": "AuthnRequest", "signature": "AuthnRequest getAuthnRequest(SAMLMessageContext context, WebSSOProfileOptions options,\n                                           AssertionConsumerService assertionConsumer,\n                                           SingleSignOnService bindingService)", "full_signature": "protected AuthnRequest getAuthnRequest(SAMLMessageContext context, WebSSOProfileOptions options,\n                                           AssertionConsumerService assertionConsumer,\n                                           SingleSignOnService bindingService)", "class_method_signature": "WebSSOProfileImpl.getAuthnRequest(SAMLMessageContext context, WebSSOProfileOptions options,\n                                           AssertionConsumerService assertionConsumer,\n                                           SingleSignOnService bindingService)", "testcase": false, "constructor": false}, {"identifier": "builNameIDPolicy", "parameters": "(AuthnRequest request, WebSSOProfileOptions options)", "modifiers": "protected", "return": "void", "signature": "void builNameIDPolicy(AuthnRequest request, WebSSOProfileOptions options)", "full_signature": "protected void builNameIDPolicy(AuthnRequest request, WebSSOProfileOptions options)", "class_method_signature": "WebSSOProfileImpl.builNameIDPolicy(AuthnRequest request, WebSSOProfileOptions options)", "testcase": false, "constructor": false}, {"identifier": "getSPNameQualifier", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getSPNameQualifier()", "full_signature": "protected String getSPNameQualifier()", "class_method_signature": "WebSSOProfileImpl.getSPNameQualifier()", "testcase": false, "constructor": false}, {"identifier": "buildAuthnContext", "parameters": "(AuthnRequest request, WebSSOProfileOptions options)", "modifiers": "protected", "return": "void", "signature": "void buildAuthnContext(AuthnRequest request, WebSSOProfileOptions options)", "full_signature": "protected void buildAuthnContext(AuthnRequest request, WebSSOProfileOptions options)", "class_method_signature": "WebSSOProfileImpl.buildAuthnContext(AuthnRequest request, WebSSOProfileOptions options)", "testcase": false, "constructor": false}, {"identifier": "buildReturnAddress", "parameters": "(AuthnRequest request, AssertionConsumerService service)", "modifiers": "protected", "return": "void", "signature": "void buildReturnAddress(AuthnRequest request, AssertionConsumerService service)", "full_signature": "protected void buildReturnAddress(AuthnRequest request, AssertionConsumerService service)", "class_method_signature": "WebSSOProfileImpl.buildReturnAddress(AuthnRequest request, AssertionConsumerService service)", "testcase": false, "constructor": false}, {"identifier": "buildScoping", "parameters": "(AuthnRequest request, SingleSignOnService serviceURI, WebSSOProfileOptions options)", "modifiers": "protected", "return": "void", "signature": "void buildScoping(AuthnRequest request, SingleSignOnService serviceURI, WebSSOProfileOptions options)", "full_signature": "protected void buildScoping(AuthnRequest request, SingleSignOnService serviceURI, WebSSOProfileOptions options)", "class_method_signature": "WebSSOProfileImpl.buildScoping(AuthnRequest request, SingleSignOnService serviceURI, WebSSOProfileOptions options)", "testcase": false, "constructor": false}, {"identifier": "buildIDPList", "parameters": "(Set<String> idpEntityNames, SingleSignOnService serviceURI)", "modifiers": "protected", "return": "IDPList", "signature": "IDPList buildIDPList(Set<String> idpEntityNames, SingleSignOnService serviceURI)", "full_signature": "protected IDPList buildIDPList(Set<String> idpEntityNames, SingleSignOnService serviceURI)", "class_method_signature": "WebSSOProfileImpl.buildIDPList(Set<String> idpEntityNames, SingleSignOnService serviceURI)", "testcase": false, "constructor": false}], "file": "spring-security-saml/saml2-core/src/main/java/org/springframework/security/saml/websso/WebSSOProfileImpl.java"}, "focal_method": {"identifier": "sendAuthenticationRequest", "parameters": "(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage)", "modifiers": "public", "return": "void", "body": "public void sendAuthenticationRequest(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage) throws SAMLException, MetadataProviderException, MessageEncodingException {\n\n        // Verify we deal with a local SP\n        if (!SPSSODescriptor.DEFAULT_ELEMENT_NAME.equals(context.getLocalEntityRole())) {\n            throw new SAMLException(\"WebSSO can only be initialized for local SP, but localEntityRole is: \" + context.getLocalEntityRole());\n        }\n\n        // Initialize IDP based on options or use default\n        String idpId = options.getIdp();\n        if (idpId == null) {\n            idpId = metadata.getDefaultIDP();\n        }\n\n        // Load the entities\n        SPSSODescriptor spDescriptor = (SPSSODescriptor) context.getLocalEntityRoleMetadata();\n        IDPSSODescriptor idpssoDescriptor = getIDPDescriptor(idpId);\n        ExtendedMetadata idpExtendedMetadata = metadata.getExtendedMetadata(idpId);\n        SingleSignOnService ssoService = getSingleSignOnService(idpssoDescriptor, spDescriptor, options);\n        AssertionConsumerService consumerService = getAssertionConsumerService(idpssoDescriptor, spDescriptor, options, null);\n        AuthnRequest authRequest = getAuthnRequest(context, options, consumerService, ssoService);\n\n        // TODO optionally implement support for conditions, subject\n\n        context.setCommunicationProfileId(ssoService.getBinding());\n        context.setOutboundMessage(authRequest);\n        context.setOutboundSAMLMessage(authRequest);\n        context.setPeerEntityEndpoint(ssoService);\n        context.setPeerEntityId(idpssoDescriptor.getID());\n        context.setPeerEntityRoleMetadata(idpssoDescriptor);\n        context.setPeerExtendedMetadata(idpExtendedMetadata);\n\n        boolean sign = spDescriptor.isAuthnRequestsSigned() || idpssoDescriptor.getWantAuthnRequestsSigned();\n        sendMessage(context, sign);\n        messageStorage.storeMessage(authRequest.getID(), authRequest);\n\n    }", "signature": "void sendAuthenticationRequest(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage)", "full_signature": "public void sendAuthenticationRequest(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage)", "class_method_signature": "WebSSOProfileImpl.sendAuthenticationRequest(SAMLMessageContext context, WebSSOProfileOptions options, SAMLMessageStorage messageStorage)", "testcase": false, "constructor": false, "invocations": ["equals", "getLocalEntityRole", "getLocalEntityRole", "getIdp", "getDefaultIDP", "getLocalEntityRoleMetadata", "getIDPDescriptor", "getExtendedMetadata", "getSingleSignOnService", "getAssertionConsumerService", "getAuthnRequest", "setCommunicationProfileId", "getBinding", "setOutboundMessage", "setOutboundSAMLMessage", "setPeerEntityEndpoint", "setPeerEntityId", "getID", "setPeerEntityRoleMetadata", "setPeerExtendedMetadata", "isAuthnRequestsSigned", "getWantAuthnRequestsSigned", "sendMessage", "storeMessage", "getID"]}, "repository": {"repo_id": 1867246, "url": "https://github.com/grantcermak/Spring-Security-Kerberos-with-ActiveDirectory", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 1407, "license": "licensed"}}