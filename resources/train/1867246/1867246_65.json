{"test_class": {"identifier": "SpnegoAuthenticationProcessingFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpnegoAuthenticationProcessingFilter filter;", "modifier": "private", "type": "SpnegoAuthenticationProcessingFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private AuthenticationManager authenticationManager;", "modifier": "private", "type": "AuthenticationManager", "declarator": "authenticationManager", "var_name": "authenticationManager"}, {"original_string": "private HttpServletRequest request;", "modifier": "private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private HttpServletResponse response;", "modifier": "private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private FilterChain chain;", "modifier": "private", "type": "FilterChain", "declarator": "chain", "var_name": "chain"}, {"original_string": "private AuthenticationSuccessHandler successHandler;", "modifier": "private", "type": "AuthenticationSuccessHandler", "declarator": "successHandler", "var_name": "successHandler"}, {"original_string": "private AuthenticationFailureHandler failureHandler;", "modifier": "private", "type": "AuthenticationFailureHandler", "declarator": "failureHandler", "var_name": "failureHandler"}, {"original_string": "private static final byte[] TEST_TOKEN = \"TestToken\".getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_TOKEN = \"TestToken\".getBytes()", "var_name": "TEST_TOKEN"}, {"original_string": "private static final String TEST_TOKEN_BASE64 = \"VGVzdFRva2Vu\";", "modifier": "private static final", "type": "String", "declarator": "TEST_TOKEN_BASE64 = \"VGVzdFRva2Vu\"", "var_name": "TEST_TOKEN_BASE64"}, {"original_string": "private static final Authentication AUTHENTICATION = new KerberosServiceRequestToken(\"test\",\n            AuthorityUtils.createAuthorityList(\"ROLE_ADMIN\"), TEST_TOKEN);", "modifier": "private static final", "type": "Authentication", "declarator": "AUTHENTICATION = new KerberosServiceRequestToken(\"test\",\n            AuthorityUtils.createAuthorityList(\"ROLE_ADMIN\"), TEST_TOKEN)", "var_name": "AUTHENTICATION"}, {"original_string": "private static final String HEADER = \"Authorization\";", "modifier": "private static final", "type": "String", "declarator": "HEADER = \"Authorization\"", "var_name": "HEADER"}, {"original_string": "private static final String TOKEN_PREFIX = \"Negotiate \";", "modifier": "private static final", "type": "String", "declarator": "TOKEN_PREFIX = \"Negotiate \"", "var_name": "TOKEN_PREFIX"}, {"original_string": "private static final BadCredentialsException BCE = new BadCredentialsException(\"\");", "modifier": "private static final", "type": "BadCredentialsException", "declarator": "BCE = new BadCredentialsException(\"\")", "var_name": "BCE"}], "file": "spring-security-kerberos/spring-security-kerberos-core/src/test/java/org/springframework/security/extensions/kerberos/web/SpnegoAuthenticationProcessingFilterTest.java"}, "test_case": {"identifier": "testNoHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoHeader() throws Exception {\n        filter.doFilter(request, response, chain);\n        // If the header is not present, the filter is not allowed to call\n        // authenticate()\n        verify(authenticationManager, never()).authenticate(any(Authentication.class));\n        // chain should go on\n        verify(chain).doFilter(request, response);\n        assertEquals(null, SecurityContextHolder.getContext().getAuthentication());\n    }", "signature": "void testNoHeader()", "full_signature": "@Test public void testNoHeader()", "class_method_signature": "SpnegoAuthenticationProcessingFilterTest.testNoHeader()", "testcase": true, "constructor": false, "invocations": ["doFilter", "authenticate", "verify", "never", "any", "doFilter", "verify", "assertEquals", "getAuthentication", "getContext"]}, "focal_class": {"identifier": "SpnegoAuthenticationProcessingFilter", "superclass": "extends GenericFilterBean", "interfaces": "", "fields": [{"original_string": "private AuthenticationManager authenticationManager;", "modifier": "private", "type": "AuthenticationManager", "declarator": "authenticationManager", "var_name": "authenticationManager"}, {"original_string": "private AuthenticationSuccessHandler successHandler;", "modifier": "private", "type": "AuthenticationSuccessHandler", "declarator": "successHandler", "var_name": "successHandler"}, {"original_string": "private AuthenticationFailureHandler failureHandler;", "modifier": "private", "type": "AuthenticationFailureHandler", "declarator": "failureHandler", "var_name": "failureHandler"}, {"original_string": "private boolean skipIfAlreadyAuthenticated = true;", "modifier": "private", "type": "boolean", "declarator": "skipIfAlreadyAuthenticated = true", "var_name": "skipIfAlreadyAuthenticated"}], "methods": [{"identifier": "doFilter", "parameters": "(ServletRequest req, ServletResponse res, FilterChain chain)", "modifiers": "public", "return": "void", "signature": "void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)", "full_signature": "public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)", "class_method_signature": "SpnegoAuthenticationProcessingFilter.doFilter(ServletRequest req, ServletResponse res, FilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "setAuthenticationManager", "parameters": "(AuthenticationManager authenticationManager)", "modifiers": "public", "return": "void", "signature": "void setAuthenticationManager(AuthenticationManager authenticationManager)", "full_signature": "public void setAuthenticationManager(AuthenticationManager authenticationManager)", "class_method_signature": "SpnegoAuthenticationProcessingFilter.setAuthenticationManager(AuthenticationManager authenticationManager)", "testcase": false, "constructor": false}, {"identifier": "setSuccessHandler", "parameters": "(AuthenticationSuccessHandler successHandler)", "modifiers": "public", "return": "void", "signature": "void setSuccessHandler(AuthenticationSuccessHandler successHandler)", "full_signature": "public void setSuccessHandler(AuthenticationSuccessHandler successHandler)", "class_method_signature": "SpnegoAuthenticationProcessingFilter.setSuccessHandler(AuthenticationSuccessHandler successHandler)", "testcase": false, "constructor": false}, {"identifier": "setFailureHandler", "parameters": "(AuthenticationFailureHandler failureHandler)", "modifiers": "public", "return": "void", "signature": "void setFailureHandler(AuthenticationFailureHandler failureHandler)", "full_signature": "public void setFailureHandler(AuthenticationFailureHandler failureHandler)", "class_method_signature": "SpnegoAuthenticationProcessingFilter.setFailureHandler(AuthenticationFailureHandler failureHandler)", "testcase": false, "constructor": false}, {"identifier": "setSkipIfAlreadyAuthenticated", "parameters": "(boolean skipIfAlreadyAuthenticated)", "modifiers": "public", "return": "void", "signature": "void setSkipIfAlreadyAuthenticated(boolean skipIfAlreadyAuthenticated)", "full_signature": "public void setSkipIfAlreadyAuthenticated(boolean skipIfAlreadyAuthenticated)", "class_method_signature": "SpnegoAuthenticationProcessingFilter.setSkipIfAlreadyAuthenticated(boolean skipIfAlreadyAuthenticated)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "SpnegoAuthenticationProcessingFilter.afterPropertiesSet()", "testcase": false, "constructor": false}], "file": "spring-security-kerberos/spring-security-kerberos-core/src/main/java/org/springframework/security/extensions/kerberos/web/SpnegoAuthenticationProcessingFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(ServletRequest req, ServletResponse res, FilterChain chain)", "modifiers": "public", "return": "void", "body": "public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) req;\n        HttpServletResponse response = (HttpServletResponse) res;\n\n        if (skipIfAlreadyAuthenticated) {\n            Authentication existingAuth = SecurityContextHolder.getContext().getAuthentication();\n\n            if (existingAuth != null && existingAuth.isAuthenticated()\n                    && (existingAuth instanceof AnonymousAuthenticationToken) == false) {\n                chain.doFilter(request, response);\n                return;\n            }\n        }\n\n        String header = request.getHeader(\"Authorization\");\n\n        if ((header != null) && header.startsWith(\"Negotiate \")) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Received Negotiate Header for request \" + request.getRequestURL() + \": \" + header);\n            }\n            byte[] base64Token = header.substring(10).getBytes(\"UTF-8\");\n            byte[] kerberosTicket = Base64.decode(base64Token);\n            KerberosServiceRequestToken authenticationRequest = new KerberosServiceRequestToken(kerberosTicket);\n            Authentication authentication;\n            try {\n                authentication = authenticationManager.authenticate(authenticationRequest);\n            } catch (AuthenticationException e) {\n                // That shouldn't happen, as it is most likely a wrong\n                // configuration on the server side\n                logger.warn(\"Negotiate Header was invalid: \" + header, e);\n                SecurityContextHolder.clearContext();\n                if (failureHandler != null) {\n                    failureHandler.onAuthenticationFailure(request, response, e);\n                } else {\n                    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n                    response.flushBuffer();\n                }\n                return;\n            }\n            if (successHandler != null) {\n                successHandler.onAuthenticationSuccess(request, response, authentication);\n            }\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n        }\n\n        chain.doFilter(request, response);\n\n    }", "signature": "void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)", "full_signature": "public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)", "class_method_signature": "SpnegoAuthenticationProcessingFilter.doFilter(ServletRequest req, ServletResponse res, FilterChain chain)", "testcase": false, "constructor": false, "invocations": ["getAuthentication", "getContext", "isAuthenticated", "doFilter", "getHeader", "startsWith", "isDebugEnabled", "debug", "getRequestURL", "getBytes", "substring", "decode", "authenticate", "warn", "clearContext", "onAuthenticationFailure", "setStatus", "flushBuffer", "onAuthenticationSuccess", "setAuthentication", "getContext", "doFilter"]}, "repository": {"repo_id": 1867246, "url": "https://github.com/grantcermak/Spring-Security-Kerberos-with-ActiveDirectory", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 1407, "license": "licensed"}}