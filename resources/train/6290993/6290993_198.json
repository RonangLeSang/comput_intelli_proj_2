{"test_class": {"identifier": "DotfileWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DotfileWriter dotfileWriter;", "modifier": "private", "type": "DotfileWriter", "declarator": "dotfileWriter", "var_name": "dotfileWriter"}], "file": "crunch-core/src/test/java/org/apache/crunch/impl/mr/plan/DotfileWriterTest.java"}, "test_case": {"identifier": "testFormatPGroupedTableImplDeclarationManual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFormatPGroupedTableImplDeclarationManual() {\n    PGroupedTableImpl<?,?> inputCollection = mock(PGroupedTableImpl.class, Mockito.RETURNS_DEEP_STUBS);\n    JobPrototype jobPrototype = mock(JobPrototype.class);\n    when(inputCollection.getName()).thenReturn(\"collection\");\n    when(inputCollection.getSize()).thenReturn(1024L * 1024L * 1729L);\n    when(inputCollection.getNumReduceTasks()).thenReturn(50);\n    when(inputCollection.isNumReduceTasksSetByUser()).thenReturn(true);\n\n    String expected = \"\\\"collection@\" + inputCollection.hashCode() + \"@\" + jobPrototype.hashCode() + \"\\\" [label=\\\"collection \" +\n      \"1,729 Mb (50 Manual reducers)\\\" shape=box];\";\n\n    assertEquals(expected, dotfileWriter.formatPCollectionNodeDeclaration(inputCollection, jobPrototype));\n  }", "signature": "void testFormatPGroupedTableImplDeclarationManual()", "full_signature": "@Test public void testFormatPGroupedTableImplDeclarationManual()", "class_method_signature": "DotfileWriterTest.testFormatPGroupedTableImplDeclarationManual()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getName", "thenReturn", "when", "getSize", "thenReturn", "when", "getNumReduceTasks", "thenReturn", "when", "isNumReduceTasksSetByUser", "hashCode", "hashCode", "assertEquals", "formatPCollectionNodeDeclaration"]}, "focal_class": {"identifier": "DotfileWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int MAX_NODE_NAME_LENGTH = 300;", "modifier": "static final", "type": "int", "declarator": "MAX_NODE_NAME_LENGTH = 300", "var_name": "MAX_NODE_NAME_LENGTH"}, {"original_string": "private Set<JobPrototype> jobPrototypes = Sets.newHashSet();", "modifier": "private", "type": "Set<JobPrototype>", "declarator": "jobPrototypes = Sets.newHashSet()", "var_name": "jobPrototypes"}, {"original_string": "private HashMultimap<Pair<JobPrototype, MRTaskType>, String> jobNodeDeclarations = HashMultimap.create();", "modifier": "private", "type": "HashMultimap<Pair<JobPrototype, MRTaskType>, String>", "declarator": "jobNodeDeclarations = HashMultimap.create()", "var_name": "jobNodeDeclarations"}, {"original_string": "private Set<String> globalNodeDeclarations = Sets.newHashSet();", "modifier": "private", "type": "Set<String>", "declarator": "globalNodeDeclarations = Sets.newHashSet()", "var_name": "globalNodeDeclarations"}, {"original_string": "private Set<String> nodePathChains = Sets.newHashSet();", "modifier": "private", "type": "Set<String>", "declarator": "nodePathChains = Sets.newHashSet()", "var_name": "nodePathChains"}], "methods": [{"identifier": "formatPCollectionNodeDeclaration", "parameters": "(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "modifiers": "", "return": "String", "signature": "String formatPCollectionNodeDeclaration(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "full_signature": " String formatPCollectionNodeDeclaration(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "class_method_signature": "DotfileWriter.formatPCollectionNodeDeclaration(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "testcase": false, "constructor": false}, {"identifier": "formatTargetNodeDeclaration", "parameters": "(Target target)", "modifiers": "", "return": "String", "signature": "String formatTargetNodeDeclaration(Target target)", "full_signature": " String formatTargetNodeDeclaration(Target target)", "class_method_signature": "DotfileWriter.formatTargetNodeDeclaration(Target target)", "testcase": false, "constructor": false}, {"identifier": "formatPCollection", "parameters": "(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "modifiers": "", "return": "String", "signature": "String formatPCollection(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "full_signature": " String formatPCollection(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "class_method_signature": "DotfileWriter.formatPCollection(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "testcase": false, "constructor": false}, {"identifier": "formatNodeCollection", "parameters": "(List<String> nodeCollection)", "modifiers": "", "return": "String", "signature": "String formatNodeCollection(List<String> nodeCollection)", "full_signature": " String formatNodeCollection(List<String> nodeCollection)", "class_method_signature": "DotfileWriter.formatNodeCollection(List<String> nodeCollection)", "testcase": false, "constructor": false}, {"identifier": "limitNodeNameLength", "parameters": "(String nodeName)", "modifiers": "static", "return": "String", "signature": "String limitNodeNameLength(String nodeName)", "full_signature": "static String limitNodeNameLength(String nodeName)", "class_method_signature": "DotfileWriter.limitNodeNameLength(String nodeName)", "testcase": false, "constructor": false}, {"identifier": "formatNodeCollection", "parameters": "(List<String> nodeCollection, Map<String,String> edgeAttributes)", "modifiers": "", "return": "String", "signature": "String formatNodeCollection(List<String> nodeCollection, Map<String,String> edgeAttributes)", "full_signature": " String formatNodeCollection(List<String> nodeCollection, Map<String,String> edgeAttributes)", "class_method_signature": "DotfileWriter.formatNodeCollection(List<String> nodeCollection, Map<String,String> edgeAttributes)", "testcase": false, "constructor": false}, {"identifier": "formatNodePath", "parameters": "(NodePath nodePath, JobPrototype jobPrototype)", "modifiers": "", "return": "List<String>", "signature": "List<String> formatNodePath(NodePath nodePath, JobPrototype jobPrototype)", "full_signature": " List<String> formatNodePath(NodePath nodePath, JobPrototype jobPrototype)", "class_method_signature": "DotfileWriter.formatNodePath(NodePath nodePath, JobPrototype jobPrototype)", "testcase": false, "constructor": false}, {"identifier": "addNodePathDeclarations", "parameters": "(JobPrototype jobPrototype, NodePath nodePath)", "modifiers": "", "return": "void", "signature": "void addNodePathDeclarations(JobPrototype jobPrototype, NodePath nodePath)", "full_signature": " void addNodePathDeclarations(JobPrototype jobPrototype, NodePath nodePath)", "class_method_signature": "DotfileWriter.addNodePathDeclarations(JobPrototype jobPrototype, NodePath nodePath)", "testcase": false, "constructor": false}, {"identifier": "addNodePathChain", "parameters": "(NodePath nodePath, JobPrototype jobPrototype)", "modifiers": "", "return": "void", "signature": "void addNodePathChain(NodePath nodePath, JobPrototype jobPrototype)", "full_signature": " void addNodePathChain(NodePath nodePath, JobPrototype jobPrototype)", "class_method_signature": "DotfileWriter.addNodePathChain(NodePath nodePath, JobPrototype jobPrototype)", "testcase": false, "constructor": false}, {"identifier": "getTaskGraphAttributes", "parameters": "(MRTaskType taskType)", "modifiers": "", "return": "String", "signature": "String getTaskGraphAttributes(MRTaskType taskType)", "full_signature": " String getTaskGraphAttributes(MRTaskType taskType)", "class_method_signature": "DotfileWriter.getTaskGraphAttributes(MRTaskType taskType)", "testcase": false, "constructor": false}, {"identifier": "processNodePaths", "parameters": "(JobPrototype jobPrototype, HashMultimap<Target, NodePath> nodePaths)", "modifiers": "private", "return": "void", "signature": "void processNodePaths(JobPrototype jobPrototype, HashMultimap<Target, NodePath> nodePaths)", "full_signature": "private void processNodePaths(JobPrototype jobPrototype, HashMultimap<Target, NodePath> nodePaths)", "class_method_signature": "DotfileWriter.processNodePaths(JobPrototype jobPrototype, HashMultimap<Target, NodePath> nodePaths)", "testcase": false, "constructor": false}, {"identifier": "addJobPrototype", "parameters": "(JobPrototype jobPrototype)", "modifiers": "public", "return": "void", "signature": "void addJobPrototype(JobPrototype jobPrototype)", "full_signature": "public void addJobPrototype(JobPrototype jobPrototype)", "class_method_signature": "DotfileWriter.addJobPrototype(JobPrototype jobPrototype)", "testcase": false, "constructor": false}, {"identifier": "buildDotfile", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String buildDotfile()", "full_signature": "public String buildDotfile()", "class_method_signature": "DotfileWriter.buildDotfile()", "testcase": false, "constructor": false}], "file": "crunch-core/src/main/java/org/apache/crunch/impl/mr/plan/DotfileWriter.java"}, "focal_method": {"identifier": "formatPCollectionNodeDeclaration", "parameters": "(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "modifiers": "", "return": "String", "body": "String formatPCollectionNodeDeclaration(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype) {\n    String shape = \"box\";\n    if (pcollectionImpl instanceof InputCollection) {\n      shape = \"folder\";\n    }\n\n    String size = \"\";\n    try {\n      DecimalFormatSymbols formatSymbols = new DecimalFormatSymbols(Locale.ENGLISH);\n      DecimalFormat formatter = new DecimalFormat(\"#,###.##\", formatSymbols);\n      size = \" \" + formatter.format(pcollectionImpl.getSize()/1024.0/1024.0) + \" Mb\";\n    } catch (Exception e) {\n      // Just skip those that don't have a size\n    }\n\n    if (pcollectionImpl instanceof PGroupedTableImpl) {\n      int numReduceTasks = ((PGroupedTableImpl) pcollectionImpl).getNumReduceTasks();\n      if (numReduceTasks > 0) {\n        PGroupedTableImpl pGroupedTable = (PGroupedTableImpl) pcollectionImpl;\n        String setByUser = pGroupedTable.isNumReduceTasksSetByUser() ? \"Manual\" : \"Automatic\";\n        size += \" (\" + pGroupedTable.getNumReduceTasks() + \" \" + setByUser + \" reducers)\";\n      }\n    }\n\n    return String.format(\"%s [label=\\\"%s%s\\\" shape=%s];\",\n        formatPCollection(pcollectionImpl, jobPrototype),\n        limitNodeNameLength(pcollectionImpl.getName()),\n        size,\n        shape);\n  }", "signature": "String formatPCollectionNodeDeclaration(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "full_signature": " String formatPCollectionNodeDeclaration(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "class_method_signature": "DotfileWriter.formatPCollectionNodeDeclaration(PCollectionImpl<?> pcollectionImpl, JobPrototype jobPrototype)", "testcase": false, "constructor": false, "invocations": ["format", "getSize", "getNumReduceTasks", "isNumReduceTasksSetByUser", "getNumReduceTasks", "format", "formatPCollection", "limitNodeNameLength", "getName"]}, "repository": {"repo_id": 6290993, "url": "https://github.com/apache/crunch", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 99, "size": 7604, "license": "licensed"}}