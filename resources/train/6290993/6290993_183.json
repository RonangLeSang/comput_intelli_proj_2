{"test_class": {"identifier": "WritablesTest", "superclass": "", "interfaces": "", "fields": [], "file": "crunch-core/src/test/java/org/apache/crunch/types/writable/WritablesTest.java"}, "test_case": {"identifier": "testRegisterComparable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRegisterComparable() throws Exception {\n    Writables.registerComparable(TestWritable.class);\n    assertNotNull(Writables.WRITABLE_CODES.inverse().get(TestWritable.class));\n\n    // Also try serializing/deserializing from a configuration, just to make sure this works\n    Configuration conf = new Configuration();\n    Writables.serializeWritableComparableCodes(conf);\n    Writables.WRITABLE_CODES.clear();\n    Writables.reloadWritableComparableCodes(conf);\n    assertNotNull(Writables.WRITABLE_CODES.inverse().get(TestWritable.class));\n  }", "signature": "void testRegisterComparable()", "full_signature": "@Test public void testRegisterComparable()", "class_method_signature": "WritablesTest.testRegisterComparable()", "testcase": true, "constructor": false, "invocations": ["registerComparable", "assertNotNull", "get", "inverse", "serializeWritableComparableCodes", "clear", "reloadWritableComparableCodes", "assertNotNull", "get", "inverse"]}, "focal_class": {"identifier": "Writables", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Writables.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Writables.class)", "var_name": "LOG"}, {"original_string": "static BiMap<Integer, Class<? extends Writable>> WRITABLE_CODES = HashBiMap.create(ImmutableBiMap.<Integer, Class<? extends Writable>>builder()\n          .put(1, BytesWritable.class)\n          .put(2, Text.class)\n          .put(3, IntWritable.class)\n          .put(4, LongWritable.class)\n          .put(5, FloatWritable.class)\n          .put(6, DoubleWritable.class)\n          .put(7, BooleanWritable.class)\n          .put(8, TupleWritable.class)\n          .put(9, TextMapWritable.class)\n          .put(10, UnionWritable.class)\n          .build());", "modifier": "static", "type": "BiMap<Integer, Class<? extends Writable>>", "declarator": "WRITABLE_CODES = HashBiMap.create(ImmutableBiMap.<Integer, Class<? extends Writable>>builder()\n          .put(1, BytesWritable.class)\n          .put(2, Text.class)\n          .put(3, IntWritable.class)\n          .put(4, LongWritable.class)\n          .put(5, FloatWritable.class)\n          .put(6, DoubleWritable.class)\n          .put(7, BooleanWritable.class)\n          .put(8, TupleWritable.class)\n          .put(9, TextMapWritable.class)\n          .put(10, UnionWritable.class)\n          .build())", "var_name": "WRITABLE_CODES"}, {"original_string": "private static final String WRITABLE_COMPARABLE_CODES = \"crunch.writable.comparable.codes\";", "modifier": "private static final", "type": "String", "declarator": "WRITABLE_COMPARABLE_CODES = \"crunch.writable.comparable.codes\"", "var_name": "WRITABLE_COMPARABLE_CODES"}, {"original_string": "private static int WRITABLE_CODES_LOADED = 0;", "modifier": "private static", "type": "int", "declarator": "WRITABLE_CODES_LOADED = 0", "var_name": "WRITABLE_CODES_LOADED"}, {"original_string": "private static final MapFn<NullWritable, Void> NULL_WRITABLE_TO_VOID = new MapFn<NullWritable, Void>() {\n    @Override\n    public Void map(NullWritable input) {\n      return null;\n    }\n  };", "modifier": "private static final", "type": "MapFn<NullWritable, Void>", "declarator": "NULL_WRITABLE_TO_VOID = new MapFn<NullWritable, Void>() {\n    @Override\n    public Void map(NullWritable input) {\n      return null;\n    }\n  }", "var_name": "NULL_WRITABLE_TO_VOID"}, {"original_string": "private static final MapFn<Void, NullWritable> VOID_TO_NULL_WRITABLE = new MapFn<Void, NullWritable>() {\n    @Override\n    public NullWritable map(Void input) {\n      return NullWritable.get();\n    }\n  };", "modifier": "private static final", "type": "MapFn<Void, NullWritable>", "declarator": "VOID_TO_NULL_WRITABLE = new MapFn<Void, NullWritable>() {\n    @Override\n    public NullWritable map(Void input) {\n      return NullWritable.get();\n    }\n  }", "var_name": "VOID_TO_NULL_WRITABLE"}, {"original_string": "private static final MapFn<Text, String> TEXT_TO_STRING = new MapFn<Text, String>() {\n    @Override\n    public String map(Text input) {\n      return input.toString();\n    }\n  };", "modifier": "private static final", "type": "MapFn<Text, String>", "declarator": "TEXT_TO_STRING = new MapFn<Text, String>() {\n    @Override\n    public String map(Text input) {\n      return input.toString();\n    }\n  }", "var_name": "TEXT_TO_STRING"}, {"original_string": "private static final MapFn<String, Text> STRING_TO_TEXT = new MapFn<String, Text>() {\n    @Override\n    public Text map(String input) {\n      return new Text(input);\n    }\n  };", "modifier": "private static final", "type": "MapFn<String, Text>", "declarator": "STRING_TO_TEXT = new MapFn<String, Text>() {\n    @Override\n    public Text map(String input) {\n      return new Text(input);\n    }\n  }", "var_name": "STRING_TO_TEXT"}, {"original_string": "private static final MapFn<IntWritable, Integer> IW_TO_INT = new MapFn<IntWritable, Integer>() {\n    @Override\n    public Integer map(IntWritable input) {\n      return input.get();\n    }\n  };", "modifier": "private static final", "type": "MapFn<IntWritable, Integer>", "declarator": "IW_TO_INT = new MapFn<IntWritable, Integer>() {\n    @Override\n    public Integer map(IntWritable input) {\n      return input.get();\n    }\n  }", "var_name": "IW_TO_INT"}, {"original_string": "private static final MapFn<Integer, IntWritable> INT_TO_IW = new MapFn<Integer, IntWritable>() {\n    @Override\n    public IntWritable map(Integer input) {\n      return new IntWritable(input);\n    }\n  };", "modifier": "private static final", "type": "MapFn<Integer, IntWritable>", "declarator": "INT_TO_IW = new MapFn<Integer, IntWritable>() {\n    @Override\n    public IntWritable map(Integer input) {\n      return new IntWritable(input);\n    }\n  }", "var_name": "INT_TO_IW"}, {"original_string": "private static final MapFn<LongWritable, Long> LW_TO_LONG = new MapFn<LongWritable, Long>() {\n    @Override\n    public Long map(LongWritable input) {\n      return input.get();\n    }\n  };", "modifier": "private static final", "type": "MapFn<LongWritable, Long>", "declarator": "LW_TO_LONG = new MapFn<LongWritable, Long>() {\n    @Override\n    public Long map(LongWritable input) {\n      return input.get();\n    }\n  }", "var_name": "LW_TO_LONG"}, {"original_string": "private static final MapFn<Long, LongWritable> LONG_TO_LW = new MapFn<Long, LongWritable>() {\n    @Override\n    public LongWritable map(Long input) {\n      return new LongWritable(input);\n    }\n  };", "modifier": "private static final", "type": "MapFn<Long, LongWritable>", "declarator": "LONG_TO_LW = new MapFn<Long, LongWritable>() {\n    @Override\n    public LongWritable map(Long input) {\n      return new LongWritable(input);\n    }\n  }", "var_name": "LONG_TO_LW"}, {"original_string": "private static final MapFn<FloatWritable, Float> FW_TO_FLOAT = new MapFn<FloatWritable, Float>() {\n    @Override\n    public Float map(FloatWritable input) {\n      return input.get();\n    }\n  };", "modifier": "private static final", "type": "MapFn<FloatWritable, Float>", "declarator": "FW_TO_FLOAT = new MapFn<FloatWritable, Float>() {\n    @Override\n    public Float map(FloatWritable input) {\n      return input.get();\n    }\n  }", "var_name": "FW_TO_FLOAT"}, {"original_string": "private static final MapFn<Float, FloatWritable> FLOAT_TO_FW = new MapFn<Float, FloatWritable>() {\n    @Override\n    public FloatWritable map(Float input) {\n      return new FloatWritable(input);\n    }\n  };", "modifier": "private static final", "type": "MapFn<Float, FloatWritable>", "declarator": "FLOAT_TO_FW = new MapFn<Float, FloatWritable>() {\n    @Override\n    public FloatWritable map(Float input) {\n      return new FloatWritable(input);\n    }\n  }", "var_name": "FLOAT_TO_FW"}, {"original_string": "private static final MapFn<DoubleWritable, Double> DW_TO_DOUBLE = new MapFn<DoubleWritable, Double>() {\n    @Override\n    public Double map(DoubleWritable input) {\n      return input.get();\n    }\n  };", "modifier": "private static final", "type": "MapFn<DoubleWritable, Double>", "declarator": "DW_TO_DOUBLE = new MapFn<DoubleWritable, Double>() {\n    @Override\n    public Double map(DoubleWritable input) {\n      return input.get();\n    }\n  }", "var_name": "DW_TO_DOUBLE"}, {"original_string": "private static final MapFn<Double, DoubleWritable> DOUBLE_TO_DW = new MapFn<Double, DoubleWritable>() {\n    @Override\n    public DoubleWritable map(Double input) {\n      return new DoubleWritable(input);\n    }\n  };", "modifier": "private static final", "type": "MapFn<Double, DoubleWritable>", "declarator": "DOUBLE_TO_DW = new MapFn<Double, DoubleWritable>() {\n    @Override\n    public DoubleWritable map(Double input) {\n      return new DoubleWritable(input);\n    }\n  }", "var_name": "DOUBLE_TO_DW"}, {"original_string": "private static final MapFn<BooleanWritable, Boolean> BW_TO_BOOLEAN = new MapFn<BooleanWritable, Boolean>() {\n    @Override\n    public Boolean map(BooleanWritable input) {\n      return input.get();\n    }\n  };", "modifier": "private static final", "type": "MapFn<BooleanWritable, Boolean>", "declarator": "BW_TO_BOOLEAN = new MapFn<BooleanWritable, Boolean>() {\n    @Override\n    public Boolean map(BooleanWritable input) {\n      return input.get();\n    }\n  }", "var_name": "BW_TO_BOOLEAN"}, {"original_string": "private static final BooleanWritable TRUE = new BooleanWritable(true);", "modifier": "private static final", "type": "BooleanWritable", "declarator": "TRUE = new BooleanWritable(true)", "var_name": "TRUE"}, {"original_string": "private static final BooleanWritable FALSE = new BooleanWritable(false);", "modifier": "private static final", "type": "BooleanWritable", "declarator": "FALSE = new BooleanWritable(false)", "var_name": "FALSE"}, {"original_string": "private static final MapFn<Boolean, BooleanWritable> BOOLEAN_TO_BW = new MapFn<Boolean, BooleanWritable>() {\n    @Override\n    public BooleanWritable map(Boolean input) {\n      return input ? TRUE : FALSE;\n    }\n  };", "modifier": "private static final", "type": "MapFn<Boolean, BooleanWritable>", "declarator": "BOOLEAN_TO_BW = new MapFn<Boolean, BooleanWritable>() {\n    @Override\n    public BooleanWritable map(Boolean input) {\n      return input ? TRUE : FALSE;\n    }\n  }", "var_name": "BOOLEAN_TO_BW"}, {"original_string": "private static final MapFn<BytesWritable, ByteBuffer> BW_TO_BB = new MapFn<BytesWritable, ByteBuffer>() {\n    @Override\n    public ByteBuffer map(BytesWritable input) {\n      return ByteBuffer.wrap(input.getBytes(), 0, input.getLength());\n    }\n  };", "modifier": "private static final", "type": "MapFn<BytesWritable, ByteBuffer>", "declarator": "BW_TO_BB = new MapFn<BytesWritable, ByteBuffer>() {\n    @Override\n    public ByteBuffer map(BytesWritable input) {\n      return ByteBuffer.wrap(input.getBytes(), 0, input.getLength());\n    }\n  }", "var_name": "BW_TO_BB"}, {"original_string": "private static final MapFn<ByteBuffer, BytesWritable> BB_TO_BW = new MapFn<ByteBuffer, BytesWritable>() {\n    @Override\n    public BytesWritable map(ByteBuffer input) {\n      BytesWritable bw = new BytesWritable();\n      bw.set(input.array(), input.arrayOffset(), input.limit());\n      return bw;\n    }\n  };", "modifier": "private static final", "type": "MapFn<ByteBuffer, BytesWritable>", "declarator": "BB_TO_BW = new MapFn<ByteBuffer, BytesWritable>() {\n    @Override\n    public BytesWritable map(ByteBuffer input) {\n      BytesWritable bw = new BytesWritable();\n      bw.set(input.array(), input.arrayOffset(), input.limit());\n      return bw;\n    }\n  }", "var_name": "BB_TO_BW"}, {"original_string": "private static final WritableType<Void, NullWritable> nulls = WritableType.immutableType(\n      Void.class, NullWritable.class, NULL_WRITABLE_TO_VOID, VOID_TO_NULL_WRITABLE);", "modifier": "private static final", "type": "WritableType<Void, NullWritable>", "declarator": "nulls = WritableType.immutableType(\n      Void.class, NullWritable.class, NULL_WRITABLE_TO_VOID, VOID_TO_NULL_WRITABLE)", "var_name": "nulls"}, {"original_string": "private static final WritableType<String, Text> strings = WritableType.immutableType(\n      String.class, Text.class, TEXT_TO_STRING, STRING_TO_TEXT);", "modifier": "private static final", "type": "WritableType<String, Text>", "declarator": "strings = WritableType.immutableType(\n      String.class, Text.class, TEXT_TO_STRING, STRING_TO_TEXT)", "var_name": "strings"}, {"original_string": "private static final WritableType<Long, LongWritable> longs = WritableType.immutableType(\n      Long.class, LongWritable.class, LW_TO_LONG, LONG_TO_LW);", "modifier": "private static final", "type": "WritableType<Long, LongWritable>", "declarator": "longs = WritableType.immutableType(\n      Long.class, LongWritable.class, LW_TO_LONG, LONG_TO_LW)", "var_name": "longs"}, {"original_string": "private static final WritableType<Integer, IntWritable> ints = WritableType.immutableType(\n      Integer.class, IntWritable.class, IW_TO_INT, INT_TO_IW);", "modifier": "private static final", "type": "WritableType<Integer, IntWritable>", "declarator": "ints = WritableType.immutableType(\n      Integer.class, IntWritable.class, IW_TO_INT, INT_TO_IW)", "var_name": "ints"}, {"original_string": "private static final WritableType<Float, FloatWritable> floats = WritableType.immutableType(\n      Float.class, FloatWritable.class, FW_TO_FLOAT, FLOAT_TO_FW);", "modifier": "private static final", "type": "WritableType<Float, FloatWritable>", "declarator": "floats = WritableType.immutableType(\n      Float.class, FloatWritable.class, FW_TO_FLOAT, FLOAT_TO_FW)", "var_name": "floats"}, {"original_string": "private static final WritableType<Double, DoubleWritable> doubles = WritableType.immutableType(\n      Double.class, DoubleWritable.class, DW_TO_DOUBLE, DOUBLE_TO_DW);", "modifier": "private static final", "type": "WritableType<Double, DoubleWritable>", "declarator": "doubles = WritableType.immutableType(\n      Double.class, DoubleWritable.class, DW_TO_DOUBLE, DOUBLE_TO_DW)", "var_name": "doubles"}, {"original_string": "private static final WritableType<Boolean, BooleanWritable> booleans = WritableType.immutableType(\n      Boolean.class, BooleanWritable.class, BW_TO_BOOLEAN, BOOLEAN_TO_BW);", "modifier": "private static final", "type": "WritableType<Boolean, BooleanWritable>", "declarator": "booleans = WritableType.immutableType(\n      Boolean.class, BooleanWritable.class, BW_TO_BOOLEAN, BOOLEAN_TO_BW)", "var_name": "booleans"}, {"original_string": "private static final WritableType<ByteBuffer, BytesWritable> bytes = new WritableType(\n      ByteBuffer.class, BytesWritable.class, BW_TO_BB, BB_TO_BW);", "modifier": "private static final", "type": "WritableType<ByteBuffer, BytesWritable>", "declarator": "bytes = new WritableType(\n      ByteBuffer.class, BytesWritable.class, BW_TO_BB, BB_TO_BW)", "var_name": "bytes"}, {"original_string": "private static final Map<Class<?>, PType<?>> PRIMITIVES = ImmutableMap.<Class<?>, PType<?>> builder()\n      .put(String.class, strings).put(Long.class, longs).put(Integer.class, ints).put(Float.class, floats)\n      .put(Double.class, doubles).put(Boolean.class, booleans).put(ByteBuffer.class, bytes).build();", "modifier": "private static final", "type": "Map<Class<?>, PType<?>>", "declarator": "PRIMITIVES = ImmutableMap.<Class<?>, PType<?>> builder()\n      .put(String.class, strings).put(Long.class, longs).put(Integer.class, ints).put(Float.class, floats)\n      .put(Double.class, doubles).put(Boolean.class, booleans).put(ByteBuffer.class, bytes).build()", "var_name": "PRIMITIVES"}, {"original_string": "private static final Map<Class<?>, WritableType<?, ?>> EXTENSIONS = Maps.newHashMap();", "modifier": "private static final", "type": "Map<Class<?>, WritableType<?, ?>>", "declarator": "EXTENSIONS = Maps.newHashMap()", "var_name": "EXTENSIONS"}], "methods": [{"identifier": "registerComparable", "parameters": "(Class<? extends WritableComparable> clazz)", "modifiers": "public static", "return": "void", "signature": "void registerComparable(Class<? extends WritableComparable> clazz)", "full_signature": "public static void registerComparable(Class<? extends WritableComparable> clazz)", "class_method_signature": "Writables.registerComparable(Class<? extends WritableComparable> clazz)", "testcase": false, "constructor": false}, {"identifier": "registerComparable", "parameters": "(Class<? extends WritableComparable> clazz, int code)", "modifiers": "public static", "return": "void", "signature": "void registerComparable(Class<? extends WritableComparable> clazz, int code)", "full_signature": "public static void registerComparable(Class<? extends WritableComparable> clazz, int code)", "class_method_signature": "Writables.registerComparable(Class<? extends WritableComparable> clazz, int code)", "testcase": false, "constructor": false}, {"identifier": "serializeWritableComparableCodes", "parameters": "(Configuration conf)", "modifiers": "static", "return": "void", "signature": "void serializeWritableComparableCodes(Configuration conf)", "full_signature": "static void serializeWritableComparableCodes(Configuration conf)", "class_method_signature": "Writables.serializeWritableComparableCodes(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "reloadWritableComparableCodes", "parameters": "(Configuration conf)", "modifiers": "static", "return": "void", "signature": "void reloadWritableComparableCodes(Configuration conf)", "full_signature": "static void reloadWritableComparableCodes(Configuration conf)", "class_method_signature": "Writables.reloadWritableComparableCodes(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveType", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "PType<T>", "signature": "PType<T> getPrimitiveType(Class<T> clazz)", "full_signature": "public static PType<T> getPrimitiveType(Class<T> clazz)", "class_method_signature": "Writables.getPrimitiveType(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Class<T> clazz, WritableType<T, ? extends Writable> ptype)", "modifiers": "public static", "return": "void", "signature": "void register(Class<T> clazz, WritableType<T, ? extends Writable> ptype)", "full_signature": "public static void register(Class<T> clazz, WritableType<T, ? extends Writable> ptype)", "class_method_signature": "Writables.register(Class<T> clazz, WritableType<T, ? extends Writable> ptype)", "testcase": false, "constructor": false}, {"identifier": "nulls", "parameters": "()", "modifiers": "public static final", "return": "WritableType<Void, NullWritable>", "signature": "WritableType<Void, NullWritable> nulls()", "full_signature": "public static final WritableType<Void, NullWritable> nulls()", "class_method_signature": "Writables.nulls()", "testcase": false, "constructor": false}, {"identifier": "strings", "parameters": "()", "modifiers": "public static final", "return": "WritableType<String, Text>", "signature": "WritableType<String, Text> strings()", "full_signature": "public static final WritableType<String, Text> strings()", "class_method_signature": "Writables.strings()", "testcase": false, "constructor": false}, {"identifier": "longs", "parameters": "()", "modifiers": "public static final", "return": "WritableType<Long, LongWritable>", "signature": "WritableType<Long, LongWritable> longs()", "full_signature": "public static final WritableType<Long, LongWritable> longs()", "class_method_signature": "Writables.longs()", "testcase": false, "constructor": false}, {"identifier": "ints", "parameters": "()", "modifiers": "public static final", "return": "WritableType<Integer, IntWritable>", "signature": "WritableType<Integer, IntWritable> ints()", "full_signature": "public static final WritableType<Integer, IntWritable> ints()", "class_method_signature": "Writables.ints()", "testcase": false, "constructor": false}, {"identifier": "floats", "parameters": "()", "modifiers": "public static final", "return": "WritableType<Float, FloatWritable>", "signature": "WritableType<Float, FloatWritable> floats()", "full_signature": "public static final WritableType<Float, FloatWritable> floats()", "class_method_signature": "Writables.floats()", "testcase": false, "constructor": false}, {"identifier": "doubles", "parameters": "()", "modifiers": "public static final", "return": "WritableType<Double, DoubleWritable>", "signature": "WritableType<Double, DoubleWritable> doubles()", "full_signature": "public static final WritableType<Double, DoubleWritable> doubles()", "class_method_signature": "Writables.doubles()", "testcase": false, "constructor": false}, {"identifier": "booleans", "parameters": "()", "modifiers": "public static final", "return": "WritableType<Boolean, BooleanWritable>", "signature": "WritableType<Boolean, BooleanWritable> booleans()", "full_signature": "public static final WritableType<Boolean, BooleanWritable> booleans()", "class_method_signature": "Writables.booleans()", "testcase": false, "constructor": false}, {"identifier": "bytes", "parameters": "()", "modifiers": "public static final", "return": "WritableType<ByteBuffer, BytesWritable>", "signature": "WritableType<ByteBuffer, BytesWritable> bytes()", "full_signature": "public static final WritableType<ByteBuffer, BytesWritable> bytes()", "class_method_signature": "Writables.bytes()", "testcase": false, "constructor": false}, {"identifier": "records", "parameters": "(Class<T> clazz)", "modifiers": "public static final", "return": "WritableType<T, W>", "signature": "WritableType<T, W> records(Class<T> clazz)", "full_signature": "public static final WritableType<T, W> records(Class<T> clazz)", "class_method_signature": "Writables.records(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "writables", "parameters": "(Class<W> clazz)", "modifiers": "public static", "return": "WritableType<W, W>", "signature": "WritableType<W, W> writables(Class<W> clazz)", "full_signature": "public static WritableType<W, W> writables(Class<W> clazz)", "class_method_signature": "Writables.writables(Class<W> clazz)", "testcase": false, "constructor": false}, {"identifier": "tableOf", "parameters": "(PType<K> key, PType<V> value)", "modifiers": "public static", "return": "WritableTableType<K, V>", "signature": "WritableTableType<K, V> tableOf(PType<K> key, PType<V> value)", "full_signature": "public static WritableTableType<K, V> tableOf(PType<K> key, PType<V> value)", "class_method_signature": "Writables.tableOf(PType<K> key, PType<V> value)", "testcase": false, "constructor": false}, {"identifier": "asBytesWritable", "parameters": "(Writable w)", "modifiers": "private static", "return": "BytesWritable", "signature": "BytesWritable asBytesWritable(Writable w)", "full_signature": "private static BytesWritable asBytesWritable(Writable w)", "class_method_signature": "Writables.asBytesWritable(Writable w)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Class<W> clazz, Writable writable)", "modifiers": "private static", "return": "W", "signature": "W create(Class<W> clazz, Writable writable)", "full_signature": "private static W create(Class<W> clazz, Writable writable)", "class_method_signature": "Writables.create(Class<W> clazz, Writable writable)", "testcase": false, "constructor": false}, {"identifier": "pairs", "parameters": "(PType<V1> p1, PType<V2> p2)", "modifiers": "public static", "return": "WritableType<Pair<V1, V2>, TupleWritable>", "signature": "WritableType<Pair<V1, V2>, TupleWritable> pairs(PType<V1> p1, PType<V2> p2)", "full_signature": "public static WritableType<Pair<V1, V2>, TupleWritable> pairs(PType<V1> p1, PType<V2> p2)", "class_method_signature": "Writables.pairs(PType<V1> p1, PType<V2> p2)", "testcase": false, "constructor": false}, {"identifier": "triples", "parameters": "(PType<V1> p1, PType<V2> p2,\n      PType<V3> p3)", "modifiers": "public static", "return": "WritableType<Tuple3<V1, V2, V3>, TupleWritable>", "signature": "WritableType<Tuple3<V1, V2, V3>, TupleWritable> triples(PType<V1> p1, PType<V2> p2,\n      PType<V3> p3)", "full_signature": "public static WritableType<Tuple3<V1, V2, V3>, TupleWritable> triples(PType<V1> p1, PType<V2> p2,\n      PType<V3> p3)", "class_method_signature": "Writables.triples(PType<V1> p1, PType<V2> p2,\n      PType<V3> p3)", "testcase": false, "constructor": false}, {"identifier": "quads", "parameters": "(PType<V1> p1, PType<V2> p2,\n      PType<V3> p3, PType<V4> p4)", "modifiers": "public static", "return": "WritableType<Tuple4<V1, V2, V3, V4>, TupleWritable>", "signature": "WritableType<Tuple4<V1, V2, V3, V4>, TupleWritable> quads(PType<V1> p1, PType<V2> p2,\n      PType<V3> p3, PType<V4> p4)", "full_signature": "public static WritableType<Tuple4<V1, V2, V3, V4>, TupleWritable> quads(PType<V1> p1, PType<V2> p2,\n      PType<V3> p3, PType<V4> p4)", "class_method_signature": "Writables.quads(PType<V1> p1, PType<V2> p2,\n      PType<V3> p3, PType<V4> p4)", "testcase": false, "constructor": false}, {"identifier": "tuples", "parameters": "(PType... ptypes)", "modifiers": "public static", "return": "WritableType<TupleN, TupleWritable>", "signature": "WritableType<TupleN, TupleWritable> tuples(PType... ptypes)", "full_signature": "public static WritableType<TupleN, TupleWritable> tuples(PType... ptypes)", "class_method_signature": "Writables.tuples(PType... ptypes)", "testcase": false, "constructor": false}, {"identifier": "tuples", "parameters": "(Class<T> clazz, PType... ptypes)", "modifiers": "public static", "return": "PType<T>", "signature": "PType<T> tuples(Class<T> clazz, PType... ptypes)", "full_signature": "public static PType<T> tuples(Class<T> clazz, PType... ptypes)", "class_method_signature": "Writables.tuples(Class<T> clazz, PType... ptypes)", "testcase": false, "constructor": false}, {"identifier": "unionOf", "parameters": "(PType<?>... ptypes)", "modifiers": "public static", "return": "PType<Union>", "signature": "PType<Union> unionOf(PType<?>... ptypes)", "full_signature": "public static PType<Union> unionOf(PType<?>... ptypes)", "class_method_signature": "Writables.unionOf(PType<?>... ptypes)", "testcase": false, "constructor": false}, {"identifier": "derived", "parameters": "(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn, PType<S> base)", "modifiers": "public static", "return": "PType<T>", "signature": "PType<T> derived(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn, PType<S> base)", "full_signature": "public static PType<T> derived(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn, PType<S> base)", "class_method_signature": "Writables.derived(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn, PType<S> base)", "testcase": false, "constructor": false}, {"identifier": "derivedImmutable", "parameters": "(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn, PType<S> base)", "modifiers": "public static", "return": "PType<T>", "signature": "PType<T> derivedImmutable(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn, PType<S> base)", "full_signature": "public static PType<T> derivedImmutable(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn, PType<S> base)", "class_method_signature": "Writables.derivedImmutable(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn, PType<S> base)", "testcase": false, "constructor": false}, {"identifier": "collections", "parameters": "(PType<T> ptype)", "modifiers": "public static", "return": "WritableType<Collection<T>, GenericArrayWritable>", "signature": "WritableType<Collection<T>, GenericArrayWritable> collections(PType<T> ptype)", "full_signature": "public static WritableType<Collection<T>, GenericArrayWritable> collections(PType<T> ptype)", "class_method_signature": "Writables.collections(PType<T> ptype)", "testcase": false, "constructor": false}, {"identifier": "maps", "parameters": "(PType<T> ptype)", "modifiers": "public static", "return": "WritableType<Map<String, T>, MapWritable>", "signature": "WritableType<Map<String, T>, MapWritable> maps(PType<T> ptype)", "full_signature": "public static WritableType<Map<String, T>, MapWritable> maps(PType<T> ptype)", "class_method_signature": "Writables.maps(PType<T> ptype)", "testcase": false, "constructor": false}, {"identifier": "jsons", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "PType<T>", "signature": "PType<T> jsons(Class<T> clazz)", "full_signature": "public static PType<T> jsons(Class<T> clazz)", "class_method_signature": "Writables.jsons(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "Writables", "parameters": "()", "modifiers": "private", "return": "", "signature": " Writables()", "full_signature": "private  Writables()", "class_method_signature": "Writables.Writables()", "testcase": false, "constructor": true}], "file": "crunch-core/src/main/java/org/apache/crunch/types/writable/Writables.java"}, "focal_method": {"identifier": "registerComparable", "parameters": "(Class<? extends WritableComparable> clazz)", "modifiers": "public static", "return": "void", "body": "public static void registerComparable(Class<? extends WritableComparable> clazz) {\n    int code = clazz.hashCode();\n    if (code < 0) {\n      code = -code;\n    }\n    if (code < WRITABLE_CODES.size()) {\n      code += WRITABLE_CODES.size();\n    }\n    registerComparable(clazz, code);\n  }", "signature": "void registerComparable(Class<? extends WritableComparable> clazz)", "full_signature": "public static void registerComparable(Class<? extends WritableComparable> clazz)", "class_method_signature": "Writables.registerComparable(Class<? extends WritableComparable> clazz)", "testcase": false, "constructor": false, "invocations": ["hashCode", "size", "size", "registerComparable"]}, "repository": {"repo_id": 6290993, "url": "https://github.com/apache/crunch", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 99, "size": 7604, "license": "licensed"}}