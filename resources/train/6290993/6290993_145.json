{"test_class": {"identifier": "AvrosTest", "superclass": "", "interfaces": "", "fields": [], "file": "crunch-core/src/test/java/org/apache/crunch/types/avro/AvrosTest.java"}, "test_case": {"identifier": "testFloats", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFloats() throws Exception {\n    float j = Float.MIN_VALUE;\n    testInputOutputFn(Avros.floats(), j, j);\n  }", "signature": "void testFloats()", "full_signature": "@Test public void testFloats()", "class_method_signature": "AvrosTest.testFloats()", "testcase": true, "constructor": false, "invocations": ["testInputOutputFn", "floats"]}, "focal_class": {"identifier": "Avros", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final boolean CAN_COMBINE_SPECIFIC_AND_REFLECT_SCHEMAS;", "modifier": "public static final", "type": "boolean", "declarator": "CAN_COMBINE_SPECIFIC_AND_REFLECT_SCHEMAS", "var_name": "CAN_COMBINE_SPECIFIC_AND_REFLECT_SCHEMAS"}, {"original_string": "public static ReflectDataFactory REFLECT_DATA_FACTORY = new ReflectDataFactory();", "modifier": "public static", "type": "ReflectDataFactory", "declarator": "REFLECT_DATA_FACTORY = new ReflectDataFactory()", "var_name": "REFLECT_DATA_FACTORY"}, {"original_string": "public static final String REFLECT_DATA_FACTORY_CLASS = \"crunch.reflectdatafactory\";", "modifier": "public static final", "type": "String", "declarator": "REFLECT_DATA_FACTORY_CLASS = \"crunch.reflectdatafactory\"", "var_name": "REFLECT_DATA_FACTORY_CLASS"}, {"original_string": "public static MapFn<CharSequence, String> UTF8_TO_STRING = new MapFn<CharSequence, String>() {\n    @Override\n    public String map(CharSequence input) {\n      if (input == null) {\n        return null;\n      }\n      return input.toString();\n    }\n  };", "modifier": "public static", "type": "MapFn<CharSequence, String>", "declarator": "UTF8_TO_STRING = new MapFn<CharSequence, String>() {\n    @Override\n    public String map(CharSequence input) {\n      if (input == null) {\n        return null;\n      }\n      return input.toString();\n    }\n  }", "var_name": "UTF8_TO_STRING"}, {"original_string": "public static MapFn<String, Utf8> STRING_TO_UTF8 = new MapFn<String, Utf8>() {\n    @Override\n    public Utf8 map(String input) {\n      if (input == null) {\n        return null;\n      }\n      return new Utf8(input);\n    }\n  };", "modifier": "public static", "type": "MapFn<String, Utf8>", "declarator": "STRING_TO_UTF8 = new MapFn<String, Utf8>() {\n    @Override\n    public Utf8 map(String input) {\n      if (input == null) {\n        return null;\n      }\n      return new Utf8(input);\n    }\n  }", "var_name": "STRING_TO_UTF8"}, {"original_string": "public static MapFn<Object, ByteBuffer> BYTES_IN = new MapFn<Object, ByteBuffer>() {\n    @Override\n    public ByteBuffer map(Object input) {\n      if (input == null) {\n        return null;\n      }\n      if (input instanceof ByteBuffer) {\n        return (ByteBuffer) input;\n      }\n      return ByteBuffer.wrap((byte[]) input);\n    }\n  };", "modifier": "public static", "type": "MapFn<Object, ByteBuffer>", "declarator": "BYTES_IN = new MapFn<Object, ByteBuffer>() {\n    @Override\n    public ByteBuffer map(Object input) {\n      if (input == null) {\n        return null;\n      }\n      if (input instanceof ByteBuffer) {\n        return (ByteBuffer) input;\n      }\n      return ByteBuffer.wrap((byte[]) input);\n    }\n  }", "var_name": "BYTES_IN"}, {"original_string": "private static final AvroType<String> strings = new AvroType<String>(String.class, Schema.create(Schema.Type.STRING),\n      UTF8_TO_STRING, STRING_TO_UTF8, NoOpDeepCopier.<String>create(), AvroType.AvroRecordType.GENERIC);", "modifier": "private static final", "type": "AvroType<String>", "declarator": "strings = new AvroType<String>(String.class, Schema.create(Schema.Type.STRING),\n      UTF8_TO_STRING, STRING_TO_UTF8, NoOpDeepCopier.<String>create(), AvroType.AvroRecordType.GENERIC)", "var_name": "strings"}, {"original_string": "private static final AvroType<Void> nulls = create(Void.class, Schema.Type.NULL);", "modifier": "private static final", "type": "AvroType<Void>", "declarator": "nulls = create(Void.class, Schema.Type.NULL)", "var_name": "nulls"}, {"original_string": "private static final AvroType<Long> longs = create(Long.class, Schema.Type.LONG);", "modifier": "private static final", "type": "AvroType<Long>", "declarator": "longs = create(Long.class, Schema.Type.LONG)", "var_name": "longs"}, {"original_string": "private static final AvroType<Integer> ints = create(Integer.class, Schema.Type.INT);", "modifier": "private static final", "type": "AvroType<Integer>", "declarator": "ints = create(Integer.class, Schema.Type.INT)", "var_name": "ints"}, {"original_string": "private static final AvroType<Float> floats = create(Float.class, Schema.Type.FLOAT);", "modifier": "private static final", "type": "AvroType<Float>", "declarator": "floats = create(Float.class, Schema.Type.FLOAT)", "var_name": "floats"}, {"original_string": "private static final AvroType<Double> doubles = create(Double.class, Schema.Type.DOUBLE);", "modifier": "private static final", "type": "AvroType<Double>", "declarator": "doubles = create(Double.class, Schema.Type.DOUBLE)", "var_name": "doubles"}, {"original_string": "private static final AvroType<Boolean> booleans = create(Boolean.class, Schema.Type.BOOLEAN);", "modifier": "private static final", "type": "AvroType<Boolean>", "declarator": "booleans = create(Boolean.class, Schema.Type.BOOLEAN)", "var_name": "booleans"}, {"original_string": "private static final AvroType<ByteBuffer> bytes = new AvroType<ByteBuffer>(ByteBuffer.class,\n      Schema.create(Schema.Type.BYTES), BYTES_IN, IdentityFn.getInstance(),\n      AvroDeepCopier.AvroByteBufferDeepCopier.INSTANCE, AvroType.AvroRecordType.GENERIC);", "modifier": "private static final", "type": "AvroType<ByteBuffer>", "declarator": "bytes = new AvroType<ByteBuffer>(ByteBuffer.class,\n      Schema.create(Schema.Type.BYTES), BYTES_IN, IdentityFn.getInstance(),\n      AvroDeepCopier.AvroByteBufferDeepCopier.INSTANCE, AvroType.AvroRecordType.GENERIC)", "var_name": "bytes"}, {"original_string": "private static final Map<Class<?>, PType<?>> PRIMITIVES = ImmutableMap.<Class<?>, PType<?>> builder()\n      .put(String.class, strings).put(Long.class, longs).put(Integer.class, ints).put(Float.class, floats)\n      .put(Double.class, doubles).put(Boolean.class, booleans).put(ByteBuffer.class, bytes).build();", "modifier": "private static final", "type": "Map<Class<?>, PType<?>>", "declarator": "PRIMITIVES = ImmutableMap.<Class<?>, PType<?>> builder()\n      .put(String.class, strings).put(Long.class, longs).put(Integer.class, ints).put(Float.class, floats)\n      .put(Double.class, doubles).put(Boolean.class, booleans).put(ByteBuffer.class, bytes).build()", "var_name": "PRIMITIVES"}, {"original_string": "private static final Map<Class<?>, AvroType<?>> EXTENSIONS = Maps.newHashMap();", "modifier": "private static final", "type": "Map<Class<?>, AvroType<?>>", "declarator": "EXTENSIONS = Maps.newHashMap()", "var_name": "EXTENSIONS"}, {"original_string": "private static final Schema NULL_SCHEMA = Schema.create(Type.NULL);", "modifier": "private static final", "type": "Schema", "declarator": "NULL_SCHEMA = Schema.create(Type.NULL)", "var_name": "NULL_SCHEMA"}], "methods": [{"identifier": "configureReflectDataFactory", "parameters": "(Configuration conf)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void configureReflectDataFactory(Configuration conf)", "full_signature": "@Deprecated public static void configureReflectDataFactory(Configuration conf)", "class_method_signature": "Avros.configureReflectDataFactory(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getReflectDataFactory", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "ReflectDataFactory", "signature": "ReflectDataFactory getReflectDataFactory(Configuration conf)", "full_signature": "public static ReflectDataFactory getReflectDataFactory(Configuration conf)", "class_method_signature": "Avros.getReflectDataFactory(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "checkCombiningSpecificAndReflectionSchemas", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void checkCombiningSpecificAndReflectionSchemas()", "full_signature": "public static void checkCombiningSpecificAndReflectionSchemas()", "class_method_signature": "Avros.checkCombiningSpecificAndReflectionSchemas()", "testcase": false, "constructor": false}, {"identifier": "newReader", "parameters": "(Schema schema)", "modifiers": "public static", "return": "DatumReader<T>", "signature": "DatumReader<T> newReader(Schema schema)", "full_signature": "public static DatumReader<T> newReader(Schema schema)", "class_method_signature": "Avros.newReader(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "newReader", "parameters": "(AvroType<T> type)", "modifiers": "public static", "return": "DatumReader<T>", "signature": "DatumReader<T> newReader(AvroType<T> type)", "full_signature": "public static DatumReader<T> newReader(AvroType<T> type)", "class_method_signature": "Avros.newReader(AvroType<T> type)", "testcase": false, "constructor": false}, {"identifier": "newWriter", "parameters": "(Schema schema)", "modifiers": "public static", "return": "DatumWriter<T>", "signature": "DatumWriter<T> newWriter(Schema schema)", "full_signature": "public static DatumWriter<T> newWriter(Schema schema)", "class_method_signature": "Avros.newWriter(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "newWriter", "parameters": "(AvroType<T> type)", "modifiers": "public static", "return": "DatumWriter<T>", "signature": "DatumWriter<T> newWriter(AvroType<T> type)", "full_signature": "public static DatumWriter<T> newWriter(AvroType<T> type)", "class_method_signature": "Avros.newWriter(AvroType<T> type)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Class<T> clazz, AvroType<T> ptype)", "modifiers": "public static", "return": "void", "signature": "void register(Class<T> clazz, AvroType<T> ptype)", "full_signature": "public static void register(Class<T> clazz, AvroType<T> ptype)", "class_method_signature": "Avros.register(Class<T> clazz, AvroType<T> ptype)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveType", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "PType<T>", "signature": "PType<T> getPrimitiveType(Class<T> clazz)", "full_signature": "public static PType<T> getPrimitiveType(Class<T> clazz)", "class_method_signature": "Avros.getPrimitiveType(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(AvroType<T> avroType)", "modifiers": "static", "return": "boolean", "signature": "boolean isPrimitive(AvroType<T> avroType)", "full_signature": "static boolean isPrimitive(AvroType<T> avroType)", "class_method_signature": "Avros.isPrimitive(AvroType<T> avroType)", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(Class<T> typeClass)", "modifiers": "static", "return": "boolean", "signature": "boolean isPrimitive(Class<T> typeClass)", "full_signature": "static boolean isPrimitive(Class<T> typeClass)", "class_method_signature": "Avros.isPrimitive(Class<T> typeClass)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Class<T> clazz, Schema.Type schemaType)", "modifiers": "private static", "return": "AvroType<T>", "signature": "AvroType<T> create(Class<T> clazz, Schema.Type schemaType)", "full_signature": "private static AvroType<T> create(Class<T> clazz, Schema.Type schemaType)", "class_method_signature": "Avros.create(Class<T> clazz, Schema.Type schemaType)", "testcase": false, "constructor": false}, {"identifier": "nulls", "parameters": "()", "modifiers": "public static final", "return": "AvroType<Void>", "signature": "AvroType<Void> nulls()", "full_signature": "public static final AvroType<Void> nulls()", "class_method_signature": "Avros.nulls()", "testcase": false, "constructor": false}, {"identifier": "strings", "parameters": "()", "modifiers": "public static final", "return": "AvroType<String>", "signature": "AvroType<String> strings()", "full_signature": "public static final AvroType<String> strings()", "class_method_signature": "Avros.strings()", "testcase": false, "constructor": false}, {"identifier": "longs", "parameters": "()", "modifiers": "public static final", "return": "AvroType<Long>", "signature": "AvroType<Long> longs()", "full_signature": "public static final AvroType<Long> longs()", "class_method_signature": "Avros.longs()", "testcase": false, "constructor": false}, {"identifier": "ints", "parameters": "()", "modifiers": "public static final", "return": "AvroType<Integer>", "signature": "AvroType<Integer> ints()", "full_signature": "public static final AvroType<Integer> ints()", "class_method_signature": "Avros.ints()", "testcase": false, "constructor": false}, {"identifier": "floats", "parameters": "()", "modifiers": "public static final", "return": "AvroType<Float>", "signature": "AvroType<Float> floats()", "full_signature": "public static final AvroType<Float> floats()", "class_method_signature": "Avros.floats()", "testcase": false, "constructor": false}, {"identifier": "doubles", "parameters": "()", "modifiers": "public static final", "return": "AvroType<Double>", "signature": "AvroType<Double> doubles()", "full_signature": "public static final AvroType<Double> doubles()", "class_method_signature": "Avros.doubles()", "testcase": false, "constructor": false}, {"identifier": "booleans", "parameters": "()", "modifiers": "public static final", "return": "AvroType<Boolean>", "signature": "AvroType<Boolean> booleans()", "full_signature": "public static final AvroType<Boolean> booleans()", "class_method_signature": "Avros.booleans()", "testcase": false, "constructor": false}, {"identifier": "bytes", "parameters": "()", "modifiers": "public static final", "return": "AvroType<ByteBuffer>", "signature": "AvroType<ByteBuffer> bytes()", "full_signature": "public static final AvroType<ByteBuffer> bytes()", "class_method_signature": "Avros.bytes()", "testcase": false, "constructor": false}, {"identifier": "records", "parameters": "(Class<T> clazz)", "modifiers": "public static final", "return": "AvroType<T>", "signature": "AvroType<T> records(Class<T> clazz)", "full_signature": "public static final AvroType<T> records(Class<T> clazz)", "class_method_signature": "Avros.records(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "generics", "parameters": "(Schema schema)", "modifiers": "public static final", "return": "AvroType<GenericData.Record>", "signature": "AvroType<GenericData.Record> generics(Schema schema)", "full_signature": "public static final AvroType<GenericData.Record> generics(Schema schema)", "class_method_signature": "Avros.generics(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "containers", "parameters": "(Class<T> clazz)", "modifiers": "public static final", "return": "AvroType<T>", "signature": "AvroType<T> containers(Class<T> clazz)", "full_signature": "public static final AvroType<T> containers(Class<T> clazz)", "class_method_signature": "Avros.containers(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "specifics", "parameters": "(Class<T> clazz)", "modifiers": "public static final", "return": "AvroType<T>", "signature": "AvroType<T> specifics(Class<T> clazz)", "full_signature": "public static final AvroType<T> specifics(Class<T> clazz)", "class_method_signature": "Avros.specifics(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "reflects", "parameters": "(Class<T> clazz)", "modifiers": "public static final", "return": "AvroType<T>", "signature": "AvroType<T> reflects(Class<T> clazz)", "full_signature": "public static final AvroType<T> reflects(Class<T> clazz)", "class_method_signature": "Avros.reflects(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "reflects", "parameters": "(Class<T> clazz, Schema schema)", "modifiers": "public static final", "return": "AvroType<T>", "signature": "AvroType<T> reflects(Class<T> clazz, Schema schema)", "full_signature": "public static final AvroType<T> reflects(Class<T> clazz, Schema schema)", "class_method_signature": "Avros.reflects(Class<T> clazz, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "writables", "parameters": "(Class<T> clazz)", "modifiers": "public static final", "return": "AvroType<T>", "signature": "AvroType<T> writables(Class<T> clazz)", "full_signature": "public static final AvroType<T> writables(Class<T> clazz)", "class_method_signature": "Avros.writables(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "collections", "parameters": "(PType<T> ptype)", "modifiers": "public static final", "return": "AvroType<Collection<T>>", "signature": "AvroType<Collection<T>> collections(PType<T> ptype)", "full_signature": "public static final AvroType<Collection<T>> collections(PType<T> ptype)", "class_method_signature": "Avros.collections(PType<T> ptype)", "testcase": false, "constructor": false}, {"identifier": "maps", "parameters": "(PType<T> ptype)", "modifiers": "public static final", "return": "AvroType<Map<String, T>>", "signature": "AvroType<Map<String, T>> maps(PType<T> ptype)", "full_signature": "public static final AvroType<Map<String, T>> maps(PType<T> ptype)", "class_method_signature": "Avros.maps(PType<T> ptype)", "testcase": false, "constructor": false}, {"identifier": "pairs", "parameters": "(PType<V1> p1, PType<V2> p2)", "modifiers": "public static final", "return": "AvroType<Pair<V1, V2>>", "signature": "AvroType<Pair<V1, V2>> pairs(PType<V1> p1, PType<V2> p2)", "full_signature": "public static final AvroType<Pair<V1, V2>> pairs(PType<V1> p1, PType<V2> p2)", "class_method_signature": "Avros.pairs(PType<V1> p1, PType<V2> p2)", "testcase": false, "constructor": false}, {"identifier": "triples", "parameters": "(PType<V1> p1, PType<V2> p2, PType<V3> p3)", "modifiers": "public static final", "return": "AvroType<Tuple3<V1, V2, V3>>", "signature": "AvroType<Tuple3<V1, V2, V3>> triples(PType<V1> p1, PType<V2> p2, PType<V3> p3)", "full_signature": "public static final AvroType<Tuple3<V1, V2, V3>> triples(PType<V1> p1, PType<V2> p2, PType<V3> p3)", "class_method_signature": "Avros.triples(PType<V1> p1, PType<V2> p2, PType<V3> p3)", "testcase": false, "constructor": false}, {"identifier": "quads", "parameters": "(PType<V1> p1, PType<V2> p2, PType<V3> p3,\n      PType<V4> p4)", "modifiers": "public static final", "return": "AvroType<Tuple4<V1, V2, V3, V4>>", "signature": "AvroType<Tuple4<V1, V2, V3, V4>> quads(PType<V1> p1, PType<V2> p2, PType<V3> p3,\n      PType<V4> p4)", "full_signature": "public static final AvroType<Tuple4<V1, V2, V3, V4>> quads(PType<V1> p1, PType<V2> p2, PType<V3> p3,\n      PType<V4> p4)", "class_method_signature": "Avros.quads(PType<V1> p1, PType<V2> p2, PType<V3> p3,\n      PType<V4> p4)", "testcase": false, "constructor": false}, {"identifier": "tuples", "parameters": "(PType... ptypes)", "modifiers": "public static final", "return": "AvroType<TupleN>", "signature": "AvroType<TupleN> tuples(PType... ptypes)", "full_signature": "public static final AvroType<TupleN> tuples(PType... ptypes)", "class_method_signature": "Avros.tuples(PType... ptypes)", "testcase": false, "constructor": false}, {"identifier": "namedTuples", "parameters": "(String tupleName, String[] fieldNames, PType[] ptypes)", "modifiers": "public static final", "return": "AvroType<TupleN>", "signature": "AvroType<TupleN> namedTuples(String tupleName, String[] fieldNames, PType[] ptypes)", "full_signature": "public static final AvroType<TupleN> namedTuples(String tupleName, String[] fieldNames, PType[] ptypes)", "class_method_signature": "Avros.namedTuples(String tupleName, String[] fieldNames, PType[] ptypes)", "testcase": false, "constructor": false}, {"identifier": "tuples", "parameters": "(Class<T> clazz, PType... ptypes)", "modifiers": "public static", "return": "AvroType<T>", "signature": "AvroType<T> tuples(Class<T> clazz, PType... ptypes)", "full_signature": "public static AvroType<T> tuples(Class<T> clazz, PType... ptypes)", "class_method_signature": "Avros.tuples(Class<T> clazz, PType... ptypes)", "testcase": false, "constructor": false}, {"identifier": "unionOf", "parameters": "(PType<?>... ptypes)", "modifiers": "public static", "return": "PType<Union>", "signature": "PType<Union> unionOf(PType<?>... ptypes)", "full_signature": "public static PType<Union> unionOf(PType<?>... ptypes)", "class_method_signature": "Avros.unionOf(PType<?>... ptypes)", "testcase": false, "constructor": false}, {"identifier": "fieldNames", "parameters": "(int len)", "modifiers": "private static", "return": "String[]", "signature": "String[] fieldNames(int len)", "full_signature": "private static String[] fieldNames(int len)", "class_method_signature": "Avros.fieldNames(int len)", "testcase": false, "constructor": false}, {"identifier": "createTupleSchema", "parameters": "(PType<?>... ptypes)", "modifiers": "private static", "return": "Schema", "signature": "Schema createTupleSchema(PType<?>... ptypes)", "full_signature": "private static Schema createTupleSchema(PType<?>... ptypes)", "class_method_signature": "Avros.createTupleSchema(PType<?>... ptypes)", "testcase": false, "constructor": false}, {"identifier": "createTupleSchema", "parameters": "(String tupleName, String[] fieldNames, PType<?>[] ptypes)", "modifiers": "private static", "return": "Schema", "signature": "Schema createTupleSchema(String tupleName, String[] fieldNames, PType<?>[] ptypes)", "full_signature": "private static Schema createTupleSchema(String tupleName, String[] fieldNames, PType<?>[] ptypes)", "class_method_signature": "Avros.createTupleSchema(String tupleName, String[] fieldNames, PType<?>[] ptypes)", "testcase": false, "constructor": false}, {"identifier": "derived", "parameters": "(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn,\n      PType<S> base)", "modifiers": "public static final", "return": "AvroType<T>", "signature": "AvroType<T> derived(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn,\n      PType<S> base)", "full_signature": "public static final AvroType<T> derived(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn,\n      PType<S> base)", "class_method_signature": "Avros.derived(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn,\n      PType<S> base)", "testcase": false, "constructor": false}, {"identifier": "derivedImmutable", "parameters": "(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn,\n                                                 PType<S> base)", "modifiers": "public static final", "return": "AvroType<T>", "signature": "AvroType<T> derivedImmutable(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn,\n                                                 PType<S> base)", "full_signature": "public static final AvroType<T> derivedImmutable(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn,\n                                                 PType<S> base)", "class_method_signature": "Avros.derivedImmutable(Class<T> clazz, MapFn<S, T> inputFn, MapFn<T, S> outputFn,\n                                                 PType<S> base)", "testcase": false, "constructor": false}, {"identifier": "jsons", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "PType<T>", "signature": "PType<T> jsons(Class<T> clazz)", "full_signature": "public static PType<T> jsons(Class<T> clazz)", "class_method_signature": "Avros.jsons(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "tableOf", "parameters": "(PType<K> key, PType<V> value)", "modifiers": "public static final", "return": "AvroTableType<K, V>", "signature": "AvroTableType<K, V> tableOf(PType<K> key, PType<V> value)", "full_signature": "public static final AvroTableType<K, V> tableOf(PType<K> key, PType<V> value)", "class_method_signature": "Avros.tableOf(PType<K> key, PType<V> value)", "testcase": false, "constructor": false}, {"identifier": "keyValueTableOf", "parameters": "(PType<K> key, PType<V> value)", "modifiers": "public static final", "return": "AvroKeyValueTableType<K, V>", "signature": "AvroKeyValueTableType<K, V> keyValueTableOf(PType<K> key, PType<V> value)", "full_signature": "public static final AvroKeyValueTableType<K, V> keyValueTableOf(PType<K> key, PType<V> value)", "class_method_signature": "Avros.keyValueTableOf(PType<K> key, PType<V> value)", "testcase": false, "constructor": false}, {"identifier": "allowNulls", "parameters": "(Schema base)", "modifiers": "static", "return": "Schema", "signature": "Schema allowNulls(Schema base)", "full_signature": "static Schema allowNulls(Schema base)", "class_method_signature": "Avros.allowNulls(Schema base)", "testcase": false, "constructor": false}, {"identifier": "reflectAwareHashCode", "parameters": "(Object o, Schema s, AvroMode mode)", "modifiers": "private static", "return": "int", "signature": "int reflectAwareHashCode(Object o, Schema s, AvroMode mode)", "full_signature": "private static int reflectAwareHashCode(Object o, Schema s, AvroMode mode)", "class_method_signature": "Avros.reflectAwareHashCode(Object o, Schema s, AvroMode mode)", "testcase": false, "constructor": false}, {"identifier": "hashCodeAdd", "parameters": "(int hashCode, Object o, Schema s, AvroMode mode)", "modifiers": "private static", "return": "int", "signature": "int hashCodeAdd(int hashCode, Object o, Schema s, AvroMode mode)", "full_signature": "private static int hashCodeAdd(int hashCode, Object o, Schema s, AvroMode mode)", "class_method_signature": "Avros.hashCodeAdd(int hashCode, Object o, Schema s, AvroMode mode)", "testcase": false, "constructor": false}, {"identifier": "Avros", "parameters": "()", "modifiers": "private", "return": "", "signature": " Avros()", "full_signature": "private  Avros()", "class_method_signature": "Avros.Avros()", "testcase": false, "constructor": true}], "file": "crunch-core/src/main/java/org/apache/crunch/types/avro/Avros.java"}, "focal_method": {"identifier": "floats", "parameters": "()", "modifiers": "public static final", "return": "AvroType<Float>", "body": "public static final AvroType<Float> floats() {\n    return floats;\n  }", "signature": "AvroType<Float> floats()", "full_signature": "public static final AvroType<Float> floats()", "class_method_signature": "Avros.floats()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6290993, "url": "https://github.com/apache/crunch", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 99, "size": 7604, "license": "licensed"}}