{"test_class": {"identifier": "RepositoryTodoServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SEARCH_TERM = \"Foo\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TERM = \"Foo\"", "var_name": "SEARCH_TERM"}, {"original_string": "private RepositoryTodoService service;", "modifier": "private", "type": "RepositoryTodoService", "declarator": "service", "var_name": "service"}, {"original_string": "private TodoRepository repositoryMock;", "modifier": "private", "type": "TodoRepository", "declarator": "repositoryMock", "var_name": "repositoryMock"}, {"original_string": "private TodoIndexService indexServiceMock;", "modifier": "private", "type": "TodoIndexService", "declarator": "indexServiceMock", "var_name": "indexServiceMock"}], "file": "query-methods/src/test/java/net/petrikainulainen/spring/datasolr/todo/service/RepositoryTodoServiceTest.java"}, "test_case": {"identifier": "update_ToDoIsNotFound_ShouldThrowException", "parameters": "()", "modifiers": "@Test(expected = TodoNotFoundException.class) public", "return": "void", "body": "@Test(expected = TodoNotFoundException.class)\n    public void update_ToDoIsNotFound_ShouldThrowException() throws TodoNotFoundException {\n        TodoDTO dto = TodoTestUtil.createDTO(TodoTestUtil.ID, TodoTestUtil.DESCRIPTION_UPDATED, TodoTestUtil.TITLE_UPDATED);\n        when(repositoryMock.findOne(dto.getId())).thenReturn(null);\n\n        service.update(dto);\n\n        verify(repositoryMock, times(1)).findOne(dto.getId());\n        verifyNoMoreInteractions(repositoryMock);\n        verifyZeroInteractions(indexServiceMock);\n    }", "signature": "void update_ToDoIsNotFound_ShouldThrowException()", "full_signature": "@Test(expected = TodoNotFoundException.class) public void update_ToDoIsNotFound_ShouldThrowException()", "class_method_signature": "RepositoryTodoServiceTest.update_ToDoIsNotFound_ShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["createDTO", "thenReturn", "when", "findOne", "getId", "update", "findOne", "verify", "times", "getId", "verifyNoMoreInteractions", "verifyZeroInteractions"]}, "focal_class": {"identifier": "RepositoryTodoService", "superclass": "", "interfaces": "implements TodoService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryTodoService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RepositoryTodoService.class)", "var_name": "LOGGER"}, {"original_string": "@Resource\n    private TodoIndexService indexService;", "modifier": "@Resource\n    private", "type": "TodoIndexService", "declarator": "indexService", "var_name": "indexService"}, {"original_string": "@Resource\n    private TodoRepository repository;", "modifier": "@Resource\n    private", "type": "TodoRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "add", "parameters": "(TodoDTO added)", "modifiers": "@PreAuthorize(\"hasPermission('Todo', 'add')\") @Transactional @Override public", "return": "Todo", "signature": "Todo add(TodoDTO added)", "full_signature": "@PreAuthorize(\"hasPermission('Todo', 'add')\") @Transactional @Override public Todo add(TodoDTO added)", "class_method_signature": "RepositoryTodoService.add(TodoDTO added)", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(Long id)", "modifiers": "@PreAuthorize(\"hasPermission('Todo', 'delete')\") @Transactional(rollbackFor = {TodoNotFoundException.class}) @Override public", "return": "Todo", "signature": "Todo deleteById(Long id)", "full_signature": "@PreAuthorize(\"hasPermission('Todo', 'delete')\") @Transactional(rollbackFor = {TodoNotFoundException.class}) @Override public Todo deleteById(Long id)", "class_method_signature": "RepositoryTodoService.deleteById(Long id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "@PreAuthorize(\"hasPermission('Todo', 'list')\") @Transactional(readOnly = true) @Override public", "return": "List<Todo>", "signature": "List<Todo> findAll()", "full_signature": "@PreAuthorize(\"hasPermission('Todo', 'list')\") @Transactional(readOnly = true) @Override public List<Todo> findAll()", "class_method_signature": "RepositoryTodoService.findAll()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(Long id)", "modifiers": "@PreAuthorize(\"hasPermission('Todo', 'find')\") @Transactional(readOnly = true, rollbackFor = {TodoNotFoundException.class}) @Override public", "return": "Todo", "signature": "Todo findById(Long id)", "full_signature": "@PreAuthorize(\"hasPermission('Todo', 'find')\") @Transactional(readOnly = true, rollbackFor = {TodoNotFoundException.class}) @Override public Todo findById(Long id)", "class_method_signature": "RepositoryTodoService.findById(Long id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(TodoDTO updated)", "modifiers": "@PreAuthorize(\"hasPermission('Todo', 'update')\") @Transactional(rollbackFor = {TodoNotFoundException.class}) @Override public", "return": "Todo", "signature": "Todo update(TodoDTO updated)", "full_signature": "@PreAuthorize(\"hasPermission('Todo', 'update')\") @Transactional(rollbackFor = {TodoNotFoundException.class}) @Override public Todo update(TodoDTO updated)", "class_method_signature": "RepositoryTodoService.update(TodoDTO updated)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String searchTerm)", "modifiers": "@PreAuthorize(\"hasPermission('Todo', 'search')\") @Override public", "return": "List<TodoDocument>", "signature": "List<TodoDocument> search(String searchTerm)", "full_signature": "@PreAuthorize(\"hasPermission('Todo', 'search')\") @Override public List<TodoDocument> search(String searchTerm)", "class_method_signature": "RepositoryTodoService.search(String searchTerm)", "testcase": false, "constructor": false}], "file": "query-methods/src/main/java/net/petrikainulainen/spring/datasolr/todo/service/RepositoryTodoService.java"}, "focal_method": {"identifier": "update", "parameters": "(TodoDTO updated)", "modifiers": "@PreAuthorize(\"hasPermission('Todo', 'update')\") @Transactional(rollbackFor = {TodoNotFoundException.class}) @Override public", "return": "Todo", "body": "@PreAuthorize(\"hasPermission('Todo', 'update')\")\n    @Transactional(rollbackFor = {TodoNotFoundException.class})\n    @Override\n    public Todo update(TodoDTO updated) throws TodoNotFoundException {\n        LOGGER.debug(\"Updating todo entry with information: {}\", updated);\n\n        Todo model = findById(updated.getId());\n        LOGGER.debug(\"Found a to-do entry: {}\", model);\n\n        model.update(updated.getDescription(), updated.getTitle());\n\n        indexService.update(model);\n\n        return model;\n    }", "signature": "Todo update(TodoDTO updated)", "full_signature": "@PreAuthorize(\"hasPermission('Todo', 'update')\") @Transactional(rollbackFor = {TodoNotFoundException.class}) @Override public Todo update(TodoDTO updated)", "class_method_signature": "RepositoryTodoService.update(TodoDTO updated)", "testcase": false, "constructor": false, "invocations": ["debug", "findById", "getId", "debug", "update", "getDescription", "getTitle", "update"]}, "repository": {"repo_id": 7589324, "url": "https://github.com/pkainulainen/spring-data-solr-examples", "language": "Java", "is_fork": false, "fork_count": 88, "stargazer_count": 57, "size": 606, "license": "licensed"}}