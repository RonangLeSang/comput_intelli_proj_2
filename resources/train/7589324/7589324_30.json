{"test_class": {"identifier": "TodoControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ERROR_MESSAGE_CODE_EMPTY_TITLE = \"NotEmpty.title\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE_CODE_EMPTY_TITLE = \"NotEmpty.title\"", "var_name": "ERROR_MESSAGE_CODE_EMPTY_TITLE"}, {"original_string": "private static final String ERROR_MESSAGE_CODE_EMPTY_TODO_TITLE = \"NotEmpty.todo.title\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE_CODE_EMPTY_TODO_TITLE = \"NotEmpty.todo.title\"", "var_name": "ERROR_MESSAGE_CODE_EMPTY_TODO_TITLE"}, {"original_string": "private static final String ERROR_MESSAGE_CODE_TOO_LONG_DESCRIPTION = \"Length.todo.description\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE_CODE_TOO_LONG_DESCRIPTION = \"Length.todo.description\"", "var_name": "ERROR_MESSAGE_CODE_TOO_LONG_DESCRIPTION"}, {"original_string": "private static final String ERROR_MESSAGE_EMPTY_TODO_TITLE = \"Title cannot be empty.\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE_EMPTY_TODO_TITLE = \"Title cannot be empty.\"", "var_name": "ERROR_MESSAGE_EMPTY_TODO_TITLE"}, {"original_string": "private static final String ERROR_MESSAGE_TOO_LONG_DESCRIPTION = \"The maximum length of the description is 500 characters.\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE_TOO_LONG_DESCRIPTION = \"The maximum length of the description is 500 characters.\"", "var_name": "ERROR_MESSAGE_TOO_LONG_DESCRIPTION"}, {"original_string": "private static final String FIELD_DESCRIPTION = \"description\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_DESCRIPTION = \"description\"", "var_name": "FIELD_DESCRIPTION"}, {"original_string": "private static final String FIELD_TITLE = \"title\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_TITLE = \"title\"", "var_name": "FIELD_TITLE"}, {"original_string": "private static final String OBJECT_NAME = \"todo\";", "modifier": "private static final", "type": "String", "declarator": "OBJECT_NAME = \"todo\"", "var_name": "OBJECT_NAME"}, {"original_string": "private static final long RESULT_COUNT = 2L;", "modifier": "private static final", "type": "long", "declarator": "RESULT_COUNT = 2L", "var_name": "RESULT_COUNT"}, {"original_string": "private static final String SEARCH_TERM = \"Foo\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TERM = \"Foo\"", "var_name": "SEARCH_TERM"}, {"original_string": "private TodoController controller;", "modifier": "private", "type": "TodoController", "declarator": "controller", "var_name": "controller"}, {"original_string": "private LocaleContextHolderWrapper localeHolderWrapperMock;", "modifier": "private", "type": "LocaleContextHolderWrapper", "declarator": "localeHolderWrapperMock", "var_name": "localeHolderWrapperMock"}, {"original_string": "private MessageSource messageSourceMock;", "modifier": "private", "type": "MessageSource", "declarator": "messageSourceMock", "var_name": "messageSourceMock"}, {"original_string": "private TodoService serviceMock;", "modifier": "private", "type": "TodoService", "declarator": "serviceMock", "var_name": "serviceMock"}, {"original_string": "@Resource\n    private Validator validator;", "modifier": "@Resource\n    private", "type": "Validator", "declarator": "validator", "var_name": "validator"}], "file": "criteria-pagination/src/test/java/net/petrikainulainen/spring/datasolr/todo/controller/TodoControllerTest.java"}, "test_case": {"identifier": "countSearchResults_ShouldReturnSearchResultCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void countSearchResults_ShouldReturnSearchResultCount() {\n        when(serviceMock.countSearchResults(SEARCH_TERM)).thenReturn(RESULT_COUNT);\n\n        long actual = controller.countSearchResults(SEARCH_TERM);\n\n        verify(serviceMock, times(1)).countSearchResults(SEARCH_TERM);\n        verifyNoMoreInteractions(serviceMock);\n        verifyZeroInteractions(localeHolderWrapperMock, messageSourceMock);\n\n        assertEquals(RESULT_COUNT, actual);\n    }", "signature": "void countSearchResults_ShouldReturnSearchResultCount()", "full_signature": "@Test public void countSearchResults_ShouldReturnSearchResultCount()", "class_method_signature": "TodoControllerTest.countSearchResults_ShouldReturnSearchResultCount()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "countSearchResults", "countSearchResults", "countSearchResults", "verify", "times", "verifyNoMoreInteractions", "verifyZeroInteractions", "assertEquals"]}, "focal_class": {"identifier": "TodoController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TodoController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TodoController.class)", "var_name": "LOGGER"}, {"original_string": "protected static final String OBJECT_NAME_TODO = \"todo\";", "modifier": "protected static final", "type": "String", "declarator": "OBJECT_NAME_TODO = \"todo\"", "var_name": "OBJECT_NAME_TODO"}, {"original_string": "@Resource\n    private TodoService service;", "modifier": "@Resource\n    private", "type": "TodoService", "declarator": "service", "var_name": "service"}, {"original_string": "@Resource\n    private LocaleContextHolderWrapper localeHolderWrapper;", "modifier": "@Resource\n    private", "type": "LocaleContextHolderWrapper", "declarator": "localeHolderWrapper", "var_name": "localeHolderWrapper"}, {"original_string": "@Resource\n    private MessageSource messageSource;", "modifier": "@Resource\n    private", "type": "MessageSource", "declarator": "messageSource", "var_name": "messageSource"}, {"original_string": "@Resource\n    private Validator validator;", "modifier": "@Resource\n    private", "type": "Validator", "declarator": "validator", "var_name": "validator"}], "methods": [{"identifier": "add", "parameters": "(@RequestBody TodoDTO dto)", "modifiers": "@RequestMapping(value = \"/api/todo\", method = RequestMethod.POST) @ResponseBody public", "return": "TodoDTO", "signature": "TodoDTO add(@RequestBody TodoDTO dto)", "full_signature": "@RequestMapping(value = \"/api/todo\", method = RequestMethod.POST) @ResponseBody public TodoDTO add(@RequestBody TodoDTO dto)", "class_method_signature": "TodoController.add(@RequestBody TodoDTO dto)", "testcase": false, "constructor": false}, {"identifier": "countSearchResults", "parameters": "(@PathVariable(\"searchTerm\") String searchTerm)", "modifiers": "@RequestMapping(value = \"/api/todo/search/count/{searchTerm}\", method = RequestMethod.GET) @ResponseBody public", "return": "long", "signature": "long countSearchResults(@PathVariable(\"searchTerm\") String searchTerm)", "full_signature": "@RequestMapping(value = \"/api/todo/search/count/{searchTerm}\", method = RequestMethod.GET) @ResponseBody public long countSearchResults(@PathVariable(\"searchTerm\") String searchTerm)", "class_method_signature": "TodoController.countSearchResults(@PathVariable(\"searchTerm\") String searchTerm)", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(@PathVariable(\"id\") Long id)", "modifiers": "@RequestMapping(value = \"/api/todo/{id}\", method = RequestMethod.DELETE) @ResponseBody public", "return": "TodoDTO", "signature": "TodoDTO deleteById(@PathVariable(\"id\") Long id)", "full_signature": "@RequestMapping(value = \"/api/todo/{id}\", method = RequestMethod.DELETE) @ResponseBody public TodoDTO deleteById(@PathVariable(\"id\") Long id)", "class_method_signature": "TodoController.deleteById(@PathVariable(\"id\") Long id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "@RequestMapping(value = \"/api/todo\", method = RequestMethod.GET) @ResponseBody public", "return": "List<TodoDTO>", "signature": "List<TodoDTO> findAll()", "full_signature": "@RequestMapping(value = \"/api/todo\", method = RequestMethod.GET) @ResponseBody public List<TodoDTO> findAll()", "class_method_signature": "TodoController.findAll()", "testcase": false, "constructor": false}, {"identifier": "createDTOs", "parameters": "(List<Todo> models)", "modifiers": "private", "return": "List<TodoDTO>", "signature": "List<TodoDTO> createDTOs(List<Todo> models)", "full_signature": "private List<TodoDTO> createDTOs(List<Todo> models)", "class_method_signature": "TodoController.createDTOs(List<Todo> models)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(@PathVariable(\"id\") Long id)", "modifiers": "@RequestMapping(value = \"/api/todo/{id}\", method = RequestMethod.GET) @ResponseBody public", "return": "TodoDTO", "signature": "TodoDTO findById(@PathVariable(\"id\") Long id)", "full_signature": "@RequestMapping(value = \"/api/todo/{id}\", method = RequestMethod.GET) @ResponseBody public TodoDTO findById(@PathVariable(\"id\") Long id)", "class_method_signature": "TodoController.findById(@PathVariable(\"id\") Long id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@RequestBody TodoDTO dto, @PathVariable(\"id\") Long todoId)", "modifiers": "@RequestMapping(value = \"/api/todo/{id}\", method = RequestMethod.PUT) @ResponseBody public", "return": "TodoDTO", "signature": "TodoDTO update(@RequestBody TodoDTO dto, @PathVariable(\"id\") Long todoId)", "full_signature": "@RequestMapping(value = \"/api/todo/{id}\", method = RequestMethod.PUT) @ResponseBody public TodoDTO update(@RequestBody TodoDTO dto, @PathVariable(\"id\") Long todoId)", "class_method_signature": "TodoController.update(@RequestBody TodoDTO dto, @PathVariable(\"id\") Long todoId)", "testcase": false, "constructor": false}, {"identifier": "createDTO", "parameters": "(Todo model)", "modifiers": "private", "return": "TodoDTO", "signature": "TodoDTO createDTO(Todo model)", "full_signature": "private TodoDTO createDTO(Todo model)", "class_method_signature": "TodoController.createDTO(Todo model)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String objectName, Object validated)", "modifiers": "private", "return": "void", "signature": "void validate(String objectName, Object validated)", "full_signature": "private void validate(String objectName, Object validated)", "class_method_signature": "TodoController.validate(String objectName, Object validated)", "testcase": false, "constructor": false}, {"identifier": "handleFormValidationError", "parameters": "(FormValidationError validationError)", "modifiers": "@ExceptionHandler(FormValidationError.class) @ResponseBody @ResponseStatus(HttpStatus.BAD_REQUEST) public", "return": "FormValidationErrorDTO", "signature": "FormValidationErrorDTO handleFormValidationError(FormValidationError validationError)", "full_signature": "@ExceptionHandler(FormValidationError.class) @ResponseBody @ResponseStatus(HttpStatus.BAD_REQUEST) public FormValidationErrorDTO handleFormValidationError(FormValidationError validationError)", "class_method_signature": "TodoController.handleFormValidationError(FormValidationError validationError)", "testcase": false, "constructor": false}, {"identifier": "isLastFieldErrorCode", "parameters": "(int index, String[] fieldErrorCodes)", "modifiers": "private", "return": "boolean", "signature": "boolean isLastFieldErrorCode(int index, String[] fieldErrorCodes)", "full_signature": "private boolean isLastFieldErrorCode(int index, String[] fieldErrorCodes)", "class_method_signature": "TodoController.isLastFieldErrorCode(int index, String[] fieldErrorCodes)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(@PathVariable(\"searchTerm\") String searchTerm, Pageable page)", "modifiers": "@RequestMapping(value = \"/api/todo/search/{searchTerm}\", method = RequestMethod.GET) @ResponseBody public", "return": "List<TodoDTO>", "signature": "List<TodoDTO> search(@PathVariable(\"searchTerm\") String searchTerm, Pageable page)", "full_signature": "@RequestMapping(value = \"/api/todo/search/{searchTerm}\", method = RequestMethod.GET) @ResponseBody public List<TodoDTO> search(@PathVariable(\"searchTerm\") String searchTerm, Pageable page)", "class_method_signature": "TodoController.search(@PathVariable(\"searchTerm\") String searchTerm, Pageable page)", "testcase": false, "constructor": false}, {"identifier": "createSearchResultDTOs", "parameters": "(List<TodoDocument> todoEntries)", "modifiers": "private", "return": "List<TodoDTO>", "signature": "List<TodoDTO> createSearchResultDTOs(List<TodoDocument> todoEntries)", "full_signature": "private List<TodoDTO> createSearchResultDTOs(List<TodoDocument> todoEntries)", "class_method_signature": "TodoController.createSearchResultDTOs(List<TodoDocument> todoEntries)", "testcase": false, "constructor": false}, {"identifier": "handleTodoNotFoundException", "parameters": "(TodoNotFoundException ex)", "modifiers": "@ExceptionHandler(TodoNotFoundException.class) @ResponseStatus(HttpStatus.NOT_FOUND) public", "return": "void", "signature": "void handleTodoNotFoundException(TodoNotFoundException ex)", "full_signature": "@ExceptionHandler(TodoNotFoundException.class) @ResponseStatus(HttpStatus.NOT_FOUND) public void handleTodoNotFoundException(TodoNotFoundException ex)", "class_method_signature": "TodoController.handleTodoNotFoundException(TodoNotFoundException ex)", "testcase": false, "constructor": false}], "file": "criteria-pagination/src/main/java/net/petrikainulainen/spring/datasolr/todo/controller/TodoController.java"}, "focal_method": {"identifier": "countSearchResults", "parameters": "(@PathVariable(\"searchTerm\") String searchTerm)", "modifiers": "@RequestMapping(value = \"/api/todo/search/count/{searchTerm}\", method = RequestMethod.GET) @ResponseBody public", "return": "long", "body": "@RequestMapping(value = \"/api/todo/search/count/{searchTerm}\", method = RequestMethod.GET)\n    @ResponseBody\n    public long countSearchResults(@PathVariable(\"searchTerm\") String searchTerm) {\n        LOGGER.debug(\"Finding search result count for search term: {}\", searchTerm);\n        return service.countSearchResults(searchTerm);\n    }", "signature": "long countSearchResults(@PathVariable(\"searchTerm\") String searchTerm)", "full_signature": "@RequestMapping(value = \"/api/todo/search/count/{searchTerm}\", method = RequestMethod.GET) @ResponseBody public long countSearchResults(@PathVariable(\"searchTerm\") String searchTerm)", "class_method_signature": "TodoController.countSearchResults(@PathVariable(\"searchTerm\") String searchTerm)", "testcase": false, "constructor": false, "invocations": ["debug", "countSearchResults"]}, "repository": {"repo_id": 7589324, "url": "https://github.com/pkainulainen/spring-data-solr-examples", "language": "Java", "is_fork": false, "fork_count": 88, "stargazer_count": 57, "size": 606, "license": "licensed"}}