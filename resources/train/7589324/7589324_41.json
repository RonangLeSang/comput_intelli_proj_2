{"test_class": {"identifier": "TodoDocumentRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long RESULT_COUNT = 2;", "modifier": "private static final", "type": "long", "declarator": "RESULT_COUNT = 2", "var_name": "RESULT_COUNT"}, {"original_string": "private static final String SEARCH_TERM_TWO_WORDS = \"foo bar\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TERM_TWO_WORDS = \"foo bar\"", "var_name": "SEARCH_TERM_TWO_WORDS"}, {"original_string": "private static final String SEARCH_TERM_SINGLE_WORD = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TERM_SINGLE_WORD = \"foo\"", "var_name": "SEARCH_TERM_SINGLE_WORD"}, {"original_string": "private static final String WORD_ONE = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "WORD_ONE = \"foo\"", "var_name": "WORD_ONE"}, {"original_string": "private static final String WORD_TWO = \"bar\";", "modifier": "private static final", "type": "String", "declarator": "WORD_TWO = \"bar\"", "var_name": "WORD_TWO"}, {"original_string": "private TodoDocumentRepositoryImpl repository;", "modifier": "private", "type": "TodoDocumentRepositoryImpl", "declarator": "repository", "var_name": "repository"}, {"original_string": "private SolrTemplate solrTemplateMock;", "modifier": "private", "type": "SolrTemplate", "declarator": "solrTemplateMock", "var_name": "solrTemplateMock"}], "file": "criteria-pagination/src/test/java/net/petrikainulainen/spring/datasolr/todo/repository/solr/TodoDocumentRepositoryImplTest.java"}, "test_case": {"identifier": "update_ExistingDocument_ShouldDoPartialUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void update_ExistingDocument_ShouldDoPartialUpdate() {\n        Todo todoEntry = TodoTestUtil.createModel(TodoTestUtil.ID, TodoTestUtil.DESCRIPTION, TodoTestUtil.TITLE);\n\n        repository.update(todoEntry);\n\n        ArgumentCaptor<PartialUpdate> partialUpdateArgument = ArgumentCaptor.forClass(PartialUpdate.class);\n        verify(solrTemplateMock, times(1)).saveBean(partialUpdateArgument.capture());\n\n        PartialUpdate update = partialUpdateArgument.getValue();\n\n        assertEquals(todoEntry.getId().toString(), update.getIdField().getValue());\n\n        List<UpdateField> updatedFields = update.getUpdates();\n        assertEquals(2, updatedFields.size());\n\n        for (UpdateField updatedField: updatedFields) {\n            String fieldName = updatedField.getName();\n            if (fieldName.equals(TodoDocument.FIELD_DESCRIPTION)) {\n                assertEquals(todoEntry.getDescription(), updatedField.getValue());\n            }\n            else if (fieldName.equals(TodoDocument.FIELD_TITLE)) {\n                assertEquals(todoEntry.getTitle(), updatedField.getValue());\n            }\n            else {\n                fail(\"Unknown field: \" + fieldName);\n            }\n        }\n    }", "signature": "void update_ExistingDocument_ShouldDoPartialUpdate()", "full_signature": "@Test public void update_ExistingDocument_ShouldDoPartialUpdate()", "class_method_signature": "TodoDocumentRepositoryImplTest.update_ExistingDocument_ShouldDoPartialUpdate()", "testcase": true, "constructor": false, "invocations": ["createModel", "update", "forClass", "saveBean", "verify", "times", "capture", "getValue", "assertEquals", "toString", "getId", "getValue", "getIdField", "getUpdates", "assertEquals", "size", "getName", "equals", "assertEquals", "getDescription", "getValue", "equals", "assertEquals", "getTitle", "getValue", "fail"]}, "focal_class": {"identifier": "TodoDocumentRepositoryImpl", "superclass": "", "interfaces": "implements CustomTodoDocumentRepository", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TodoDocumentRepositoryImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TodoDocumentRepositoryImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Resource\n    private SolrTemplate solrTemplate;", "modifier": "@Resource\n    private", "type": "SolrTemplate", "declarator": "solrTemplate", "var_name": "solrTemplate"}], "methods": [{"identifier": "count", "parameters": "(String searchTerm)", "modifiers": "@Override public", "return": "long", "signature": "long count(String searchTerm)", "full_signature": "@Override public long count(String searchTerm)", "class_method_signature": "TodoDocumentRepositoryImpl.count(String searchTerm)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String searchTerm, Pageable page)", "modifiers": "@Override public", "return": "List<TodoDocument>", "signature": "List<TodoDocument> search(String searchTerm, Pageable page)", "full_signature": "@Override public List<TodoDocument> search(String searchTerm, Pageable page)", "class_method_signature": "TodoDocumentRepositoryImpl.search(String searchTerm, Pageable page)", "testcase": false, "constructor": false}, {"identifier": "createSearchConditions", "parameters": "(String[] words)", "modifiers": "private", "return": "Criteria", "signature": "Criteria createSearchConditions(String[] words)", "full_signature": "private Criteria createSearchConditions(String[] words)", "class_method_signature": "TodoDocumentRepositoryImpl.createSearchConditions(String[] words)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Todo todoEntry)", "modifiers": "@Override public", "return": "void", "signature": "void update(Todo todoEntry)", "full_signature": "@Override public void update(Todo todoEntry)", "class_method_signature": "TodoDocumentRepositoryImpl.update(Todo todoEntry)", "testcase": false, "constructor": false}], "file": "criteria-pagination/src/main/java/net/petrikainulainen/spring/datasolr/todo/repository/solr/TodoDocumentRepositoryImpl.java"}, "focal_method": {"identifier": "update", "parameters": "(Todo todoEntry)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void update(Todo todoEntry) {\n        LOGGER.debug(\"Performing partial update for todo entry: {}\", todoEntry);\n\n        PartialUpdate update = new PartialUpdate(TodoDocument.FIELD_ID, todoEntry.getId().toString());\n\n        update.add(TodoDocument.FIELD_DESCRIPTION, todoEntry.getDescription());\n        update.add(TodoDocument.FIELD_TITLE, todoEntry.getTitle());\n\n        solrTemplate.saveBean(update);\n        solrTemplate.commit();\n    }", "signature": "void update(Todo todoEntry)", "full_signature": "@Override public void update(Todo todoEntry)", "class_method_signature": "TodoDocumentRepositoryImpl.update(Todo todoEntry)", "testcase": false, "constructor": false, "invocations": ["debug", "toString", "getId", "add", "getDescription", "add", "getTitle", "saveBean", "commit"]}, "repository": {"repo_id": 7589324, "url": "https://github.com/pkainulainen/spring-data-solr-examples", "language": "Java", "is_fork": false, "fork_count": 88, "stargazer_count": 57, "size": 606, "license": "licensed"}}