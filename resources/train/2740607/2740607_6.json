{"test_class": {"identifier": "IvyBuildInfoAgentListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IvyBuildInfoAgentListener listener;", "modifier": "private", "type": "IvyBuildInfoAgentListener", "declarator": "listener", "var_name": "listener"}], "file": "agent/src/test/java/org/jfrog/teamcity/agent/ivy/IvyBuildInfoAgentListenerTest.java"}, "test_case": {"identifier": "testBeforeRunnerStartButNoServerUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBeforeRunnerStartButNoServerUrl() throws Exception {\n        BuildRunnerContext runner = EasyMock.createMock(BuildRunnerContext.class);\n\n        HashMap<String, String> runnerParameters = Maps.newHashMap();\n        runnerParameters.put(RunnerParameterKeys.IVY_INTEGRATION, Boolean.TRUE.toString());\n        runnerParameters.put(ConstantValues.PROP_SKIP_LOG_MESSAGE, \"skipMessage\");\n        EasyMock.expect(runner.getRunnerParameters()).andReturn(runnerParameters);\n        EasyMock.expect(runner.getRunType()).andReturn(RunTypeUtils.ANT_RUNNER);\n\n        BuildProgressLogger buildProgressLogger = EasyMock.createMock(BuildProgressLogger.class);\n        buildProgressLogger.warning(\"skipMessage\");\n        EasyMock.expectLastCall();\n        AgentRunningBuild agentRunningBuild = EasyMock.createMock(AgentRunningBuild.class);\n        EasyMock.expect(agentRunningBuild.getBuildLogger()).andReturn(buildProgressLogger);\n\n        EasyMock.expect(runner.getBuild()).andReturn(agentRunningBuild);\n\n        EasyMock.replay(runner, buildProgressLogger, agentRunningBuild);\n        listener.beforeRunnerStart(runner);\n        EasyMock.verify(runner, buildProgressLogger, agentRunningBuild);\n    }", "signature": "void testBeforeRunnerStartButNoServerUrl()", "full_signature": "@Test public void testBeforeRunnerStartButNoServerUrl()", "class_method_signature": "IvyBuildInfoAgentListenerTest.testBeforeRunnerStartButNoServerUrl()", "testcase": true, "constructor": false, "invocations": ["createMock", "newHashMap", "put", "toString", "put", "andReturn", "expect", "getRunnerParameters", "andReturn", "expect", "getRunType", "createMock", "warning", "expectLastCall", "createMock", "andReturn", "expect", "getBuildLogger", "andReturn", "expect", "getBuild", "replay", "beforeRunnerStart", "verify"]}, "focal_class": {"identifier": "IvyBuildInfoAgentListener", "superclass": "extends ArtifactoryAgentLifeCycleAdapter", "interfaces": "", "fields": [], "methods": [{"identifier": "IvyBuildInfoAgentListener", "parameters": "(@NotNull EventDispatcher<AgentLifeCycleListener> dispatcher)", "modifiers": "public", "return": "", "signature": " IvyBuildInfoAgentListener(@NotNull EventDispatcher<AgentLifeCycleListener> dispatcher)", "full_signature": "public  IvyBuildInfoAgentListener(@NotNull EventDispatcher<AgentLifeCycleListener> dispatcher)", "class_method_signature": "IvyBuildInfoAgentListener.IvyBuildInfoAgentListener(@NotNull EventDispatcher<AgentLifeCycleListener> dispatcher)", "testcase": false, "constructor": true}, {"identifier": "beforeRunnerStart", "parameters": "(@NotNull BuildRunnerContext runner)", "modifiers": "@Override public", "return": "void", "signature": "void beforeRunnerStart(@NotNull BuildRunnerContext runner)", "full_signature": "@Override public void beforeRunnerStart(@NotNull BuildRunnerContext runner)", "class_method_signature": "IvyBuildInfoAgentListener.beforeRunnerStart(@NotNull BuildRunnerContext runner)", "testcase": false, "constructor": false}], "file": "agent/src/main/java/org/jfrog/teamcity/agent/ivy/IvyBuildInfoAgentListener.java"}, "focal_method": {"identifier": "beforeRunnerStart", "parameters": "(@NotNull BuildRunnerContext runner)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void beforeRunnerStart(@NotNull BuildRunnerContext runner) {\n        super.beforeRunnerStart(runner);\n\n        String runType = runner.getRunType();\n        Map<String, String> runnerParameters = runner.getRunnerParameters();\n        if (RunTypeUtils.isAntWithExtractorActivated(runType, runnerParameters)) {\n\n            String selectedServerUrl = runnerParameters.get(URL);\n            boolean validServerUrl = StringUtils.isNotBlank(selectedServerUrl);\n\n            //Don't run if no server was configured\n            if (!validServerUrl) {\n                String skipLogMessage = runnerParameters.get(PROP_SKIP_LOG_MESSAGE);\n                if (StringUtils.isNotBlank(skipLogMessage)) {\n                    runner.getBuild().getBuildLogger().warning(skipLogMessage);\n                }\n                return;\n            }\n\n            File pluginsDirectory = runner.getBuild().getAgentConfiguration().getAgentPluginsDirectory();\n            File pluginLibDir = new File(pluginsDirectory, ConstantValues.NAME + File.separator + \"lib\");\n            try {\n                runner.addSystemProperty(\"teamcity.ant.classpath\", pluginLibDir.getCanonicalPath());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Could not get the canonical path of the Build Info dependency directory\",\n                        e);\n            }\n            StringBuilder builder = new StringBuilder();\n            if (runnerParameters.containsKey(\"runnerArgs\")) {\n                builder.append(runnerParameters.get(\"runnerArgs\"));\n            }\n            builder.append(\" -listener org.jfrog.build.extractor.listener.ArtifactoryBuildListener\");\n            runner.addRunnerParameter(\"runnerArgs\", builder.toString());\n            runner.addRunnerParameter(RunnerParameterKeys.PUBLISH_BUILD_INFO, Boolean.TRUE.toString());\n            ArtifactoryClientConfiguration clientConf = ArtifactoryClientConfigurationBuilder.create(runner);\n            try {\n                File tempPropFile = File.createTempFile(\"buildInfo\", \"properties\");\n                clientConf.setPropertiesFile(tempPropFile.getCanonicalPath());\n                clientConf.persistToPropertiesFile();\n                runner.addSystemProperty(BuildInfoConfigProperties.PROP_PROPS_FILE, tempPropFile.getCanonicalPath());\n            } catch (IOException ioe) {\n                throw new RuntimeException(\"Could not write Build Info properties file.\", ioe);\n            }\n        }\n    }", "signature": "void beforeRunnerStart(@NotNull BuildRunnerContext runner)", "full_signature": "@Override public void beforeRunnerStart(@NotNull BuildRunnerContext runner)", "class_method_signature": "IvyBuildInfoAgentListener.beforeRunnerStart(@NotNull BuildRunnerContext runner)", "testcase": false, "constructor": false, "invocations": ["beforeRunnerStart", "getRunType", "getRunnerParameters", "isAntWithExtractorActivated", "get", "isNotBlank", "get", "isNotBlank", "warning", "getBuildLogger", "getBuild", "getAgentPluginsDirectory", "getAgentConfiguration", "getBuild", "addSystemProperty", "getCanonicalPath", "containsKey", "append", "get", "append", "addRunnerParameter", "toString", "addRunnerParameter", "toString", "create", "createTempFile", "setPropertiesFile", "getCanonicalPath", "persistToPropertiesFile", "addSystemProperty", "getCanonicalPath"]}, "repository": {"repo_id": 2740607, "url": "https://github.com/jfrog/teamcity-artifactory-plugin", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 30, "size": 869, "license": "licensed"}}