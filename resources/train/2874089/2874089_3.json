{"test_class": {"identifier": "DataHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataHelperTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataHelperTest.class)", "var_name": "LOG"}], "file": "c3po-core/src/test/java/com/petpet/c3po/utils/DataHelperTest.java"}, "test_case": {"identifier": "shouldTestTypedValueRetrievalForInteger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldTestTypedValueRetrievalForInteger() throws Exception {\n    Element test = new Element(\"test\", \"me\");\n    Object res = DataHelper.getTypedValue(PropertyType.INTEGER.name(), \"42\");\n    Assert.assertNotNull(res);\n    Assert.assertTrue(res instanceof Long);\n\n    res = DataHelper.getTypedValue(PropertyType.INTEGER.name(), Integer.MAX_VALUE + \"\");\n    Assert.assertNotNull(res);\n    Assert.assertTrue(res instanceof Long);\n\n    res = DataHelper.getTypedValue(PropertyType.INTEGER.name(), Integer.MIN_VALUE + \"\");\n    Assert.assertNotNull(res);\n    Assert.assertTrue(res instanceof Long);\n\n    res = DataHelper.getTypedValue(PropertyType.INTEGER.name(), Long.MAX_VALUE + \"\");\n    Assert.assertNotNull(res);\n    Assert.assertTrue(res instanceof Long);\n\n    res = DataHelper.getTypedValue(PropertyType.INTEGER.name(), \"abc\");\n    Assert.assertNotNull(res);\n    Assert.assertTrue(res instanceof String);\n\n  }", "signature": "void shouldTestTypedValueRetrievalForInteger()", "full_signature": "@Test public void shouldTestTypedValueRetrievalForInteger()", "class_method_signature": "DataHelperTest.shouldTestTypedValueRetrievalForInteger()", "testcase": true, "constructor": false, "invocations": ["getTypedValue", "name", "assertNotNull", "assertTrue", "getTypedValue", "name", "assertNotNull", "assertTrue", "getTypedValue", "name", "assertNotNull", "assertTrue", "getTypedValue", "name", "assertNotNull", "assertTrue", "getTypedValue", "name", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "DataHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger( DataHelper.class );", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger( DataHelper.class )", "var_name": "LOG"}, {"original_string": "private static Properties TYPES;", "modifier": "private static", "type": "Properties", "declarator": "TYPES", "var_name": "TYPES"}, {"original_string": "private static final String[] PATTERNS = { \"yyyy:MM:dd HH:mm:ss\", \"MM/dd/yyyy HH:mm:ss\", \"dd MMM yyyy HH:mm\",\n      \"EEE dd MMM yyyy HH:mm\", \"EEE, MMM dd, yyyy hh:mm:ss a\", \"EEE, MMM dd, yyyy hh:mm a\", \"EEE dd MMM yyyy HH.mm\",\n      \"HH:mm MM/dd/yyyy\", \"yyyyMMddHHmmss\", \"yyyy-MM-dd'T'HH:mm:ss\" };", "modifier": "private static final", "type": "String[]", "declarator": "PATTERNS = { \"yyyy:MM:dd HH:mm:ss\", \"MM/dd/yyyy HH:mm:ss\", \"dd MMM yyyy HH:mm\",\n      \"EEE dd MMM yyyy HH:mm\", \"EEE, MMM dd, yyyy hh:mm:ss a\", \"EEE, MMM dd, yyyy hh:mm a\", \"EEE dd MMM yyyy HH.mm\",\n      \"HH:mm MM/dd/yyyy\", \"yyyyMMddHHmmss\", \"yyyy-MM-dd'T'HH:mm:ss\" }", "var_name": "PATTERNS"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void init()", "full_signature": "public static void init()", "class_method_signature": "DataHelper.init()", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "( String key )", "modifiers": "public static", "return": "String", "signature": "String getPropertyType( String key )", "full_signature": "public static String getPropertyType( String key )", "class_method_signature": "DataHelper.getPropertyType( String key )", "testcase": false, "constructor": false}, {"identifier": "removeTrailingZero", "parameters": "( final String str )", "modifiers": "public static", "return": "String", "signature": "String removeTrailingZero( final String str )", "full_signature": "public static String removeTrailingZero( final String str )", "class_method_signature": "DataHelper.removeTrailingZero( final String str )", "testcase": false, "constructor": false}, {"identifier": "mergeMetadataRecord", "parameters": "( Element e, MetadataRecord mr )", "modifiers": "public static", "return": "void", "signature": "void mergeMetadataRecord( Element e, MetadataRecord mr )", "full_signature": "public static void mergeMetadataRecord( Element e, MetadataRecord mr )", "class_method_signature": "DataHelper.mergeMetadataRecord( Element e, MetadataRecord mr )", "testcase": false, "constructor": false}, {"identifier": "getTypedValue", "parameters": "( String t, String value )", "modifiers": "public static", "return": "Object", "signature": "Object getTypedValue( String t, String value )", "full_signature": "public static Object getTypedValue( String t, String value )", "class_method_signature": "DataHelper.getTypedValue( String t, String value )", "testcase": false, "constructor": false}, {"identifier": "getDateValue", "parameters": "( String value )", "modifiers": "private static", "return": "Date", "signature": "Date getDateValue( String value )", "full_signature": "private static Date getDateValue( String value )", "class_method_signature": "DataHelper.getDateValue( String value )", "testcase": false, "constructor": false}, {"identifier": "getDoubleValue", "parameters": "( String value )", "modifiers": "private static", "return": "Double", "signature": "Double getDoubleValue( String value )", "full_signature": "private static Double getDoubleValue( String value )", "class_method_signature": "DataHelper.getDoubleValue( String value )", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "( String value )", "modifiers": "private static", "return": "Long", "signature": "Long getIntegerValue( String value )", "full_signature": "private static Long getIntegerValue( String value )", "class_method_signature": "DataHelper.getIntegerValue( String value )", "testcase": false, "constructor": false}, {"identifier": "getBooleanValue", "parameters": "( String value )", "modifiers": "private static", "return": "Boolean", "signature": "Boolean getBooleanValue( String value )", "full_signature": "private static Boolean getBooleanValue( String value )", "class_method_signature": "DataHelper.getBooleanValue( String value )", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "( DateFormat fmt, String d )", "modifiers": "private static", "return": "Date", "signature": "Date parseDate( DateFormat fmt, String d )", "full_signature": "private static Date parseDate( DateFormat fmt, String d )", "class_method_signature": "DataHelper.parseDate( DateFormat fmt, String d )", "testcase": false, "constructor": false}, {"identifier": "DataHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " DataHelper()", "full_signature": "private  DataHelper()", "class_method_signature": "DataHelper.DataHelper()", "testcase": false, "constructor": true}], "file": "c3po-core/src/main/java/com/petpet/c3po/utils/DataHelper.java"}, "focal_method": {"identifier": "getTypedValue", "parameters": "( String t, String value )", "modifiers": "public static", "return": "Object", "body": "public static Object getTypedValue( String t, String value ) {\n\n    if ( value == null ) {\n      return \"\";\n    }\n\n    PropertyType type = PropertyType.valueOf( t );\n    Object result = null;\n    switch ( type ) {\n      case STRING:\n        result = value;\n        break;\n      case BOOL:\n        result = getBooleanValue( value );\n        break;\n      case INTEGER:\n        result = getIntegerValue( value );\n        break;\n      case FLOAT:\n        result = getDoubleValue( value );\n        break;\n      case DATE:\n        result = getDateValue( value );\n        break;\n      case ARRAY:\n        break;\n    }\n\n    return (result == null) ? value : result;\n\n  }", "signature": "Object getTypedValue( String t, String value )", "full_signature": "public static Object getTypedValue( String t, String value )", "class_method_signature": "DataHelper.getTypedValue( String t, String value )", "testcase": false, "constructor": false, "invocations": ["valueOf", "getBooleanValue", "getIntegerValue", "getDoubleValue", "getDateValue"]}, "repository": {"repo_id": 2874089, "url": "https://github.com/peshkira/c3po", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 17, "size": 5042, "license": "licensed"}}