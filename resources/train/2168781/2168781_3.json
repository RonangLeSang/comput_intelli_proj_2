{"test_class": {"identifier": "ConnectMessageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CLEAN_SESSION_MASK = 0x02;", "modifier": "private static final", "type": "int", "declarator": "CLEAN_SESSION_MASK = 0x02", "var_name": "CLEAN_SESSION_MASK"}, {"original_string": "private static final int WILL_MASK = 0x04;", "modifier": "private static final", "type": "int", "declarator": "WILL_MASK = 0x04", "var_name": "WILL_MASK"}, {"original_string": "private static final int WILL_QoS_MASK = 0x18;", "modifier": "private static final", "type": "int", "declarator": "WILL_QoS_MASK = 0x18", "var_name": "WILL_QoS_MASK"}, {"original_string": "private static final int WILL_RETAIN_MASK = 0x20;", "modifier": "private static final", "type": "int", "declarator": "WILL_RETAIN_MASK = 0x20", "var_name": "WILL_RETAIN_MASK"}, {"original_string": "private static final int PASSWORD_MASK = 0x40;", "modifier": "private static final", "type": "int", "declarator": "PASSWORD_MASK = 0x40", "var_name": "PASSWORD_MASK"}, {"original_string": "private static final int USERNAME_MASK = 0x80;", "modifier": "private static final", "type": "int", "declarator": "USERNAME_MASK = 0x80", "var_name": "USERNAME_MASK"}], "file": "mqtt-library/src/test/java/org/meqantt/message/ConnectMessageTest.java"}, "test_case": {"identifier": "willTopisIsNullButWillNot", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void willTopisIsNullButWillNot() {\n\t\tConnectMessage msg = new ConnectMessage(\"test\", true, 10000);\n\t\tmsg.setWill(null, \"1111\");\n\t}", "signature": "void willTopisIsNullButWillNot()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void willTopisIsNullButWillNot()", "class_method_signature": "ConnectMessageTest.willTopisIsNullButWillNot()", "testcase": true, "constructor": false, "invocations": ["setWill"]}, "focal_class": {"identifier": "ConnectMessage", "superclass": "extends Message", "interfaces": "", "fields": [{"original_string": "private static int CONNECT_HEADER_SIZE = 12;", "modifier": "private static", "type": "int", "declarator": "CONNECT_HEADER_SIZE = 12", "var_name": "CONNECT_HEADER_SIZE"}, {"original_string": "private String protocolId = \"MQIsdp\";", "modifier": "private", "type": "String", "declarator": "protocolId = \"MQIsdp\"", "var_name": "protocolId"}, {"original_string": "private byte protocolVersion = 3;", "modifier": "private", "type": "byte", "declarator": "protocolVersion = 3", "var_name": "protocolVersion"}, {"original_string": "private String clientId;", "modifier": "private", "type": "String", "declarator": "clientId", "var_name": "clientId"}, {"original_string": "private int keepAlive;", "modifier": "private", "type": "int", "declarator": "keepAlive", "var_name": "keepAlive"}, {"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private boolean cleanSession;", "modifier": "private", "type": "boolean", "declarator": "cleanSession", "var_name": "cleanSession"}, {"original_string": "private String willTopic;", "modifier": "private", "type": "String", "declarator": "willTopic", "var_name": "willTopic"}, {"original_string": "private String will;", "modifier": "private", "type": "String", "declarator": "will", "var_name": "will"}, {"original_string": "private QoS willQoS;", "modifier": "private", "type": "QoS", "declarator": "willQoS", "var_name": "willQoS"}, {"original_string": "private boolean retainWill;", "modifier": "private", "type": "boolean", "declarator": "retainWill", "var_name": "retainWill"}, {"original_string": "private boolean hasUsername;", "modifier": "private", "type": "boolean", "declarator": "hasUsername", "var_name": "hasUsername"}, {"original_string": "private boolean hasPassword;", "modifier": "private", "type": "boolean", "declarator": "hasPassword", "var_name": "hasPassword"}, {"original_string": "private boolean hasWill;", "modifier": "private", "type": "boolean", "declarator": "hasWill", "var_name": "hasWill"}], "methods": [{"identifier": "ConnectMessage", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConnectMessage()", "full_signature": "public  ConnectMessage()", "class_method_signature": "ConnectMessage.ConnectMessage()", "testcase": false, "constructor": true}, {"identifier": "ConnectMessage", "parameters": "(Header header)", "modifiers": "public", "return": "", "signature": " ConnectMessage(Header header)", "full_signature": "public  ConnectMessage(Header header)", "class_method_signature": "ConnectMessage.ConnectMessage(Header header)", "testcase": false, "constructor": true}, {"identifier": "ConnectMessage", "parameters": "(String clientId, boolean cleanSession, int keepAlive)", "modifiers": "public", "return": "", "signature": " ConnectMessage(String clientId, boolean cleanSession, int keepAlive)", "full_signature": "public  ConnectMessage(String clientId, boolean cleanSession, int keepAlive)", "class_method_signature": "ConnectMessage.ConnectMessage(String clientId, boolean cleanSession, int keepAlive)", "testcase": false, "constructor": true}, {"identifier": "messageLength", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int messageLength()", "full_signature": "@Override protected int messageLength()", "class_method_signature": "ConnectMessage.messageLength()", "testcase": false, "constructor": false}, {"identifier": "readMessage", "parameters": "(InputStream in, int msgLength)", "modifiers": "@Override protected", "return": "void", "signature": "void readMessage(InputStream in, int msgLength)", "full_signature": "@Override protected void readMessage(InputStream in, int msgLength)", "class_method_signature": "ConnectMessage.readMessage(InputStream in, int msgLength)", "testcase": false, "constructor": false}, {"identifier": "writeMessage", "parameters": "(OutputStream out)", "modifiers": "@Override protected", "return": "void", "signature": "void writeMessage(OutputStream out)", "full_signature": "@Override protected void writeMessage(OutputStream out)", "class_method_signature": "ConnectMessage.writeMessage(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "setCredentials", "parameters": "(String username)", "modifiers": "public", "return": "void", "signature": "void setCredentials(String username)", "full_signature": "public void setCredentials(String username)", "class_method_signature": "ConnectMessage.setCredentials(String username)", "testcase": false, "constructor": false}, {"identifier": "setCredentials", "parameters": "(String username, String password)", "modifiers": "public", "return": "void", "signature": "void setCredentials(String username, String password)", "full_signature": "public void setCredentials(String username, String password)", "class_method_signature": "ConnectMessage.setCredentials(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "setWill", "parameters": "(String willTopic, String will)", "modifiers": "public", "return": "void", "signature": "void setWill(String willTopic, String will)", "full_signature": "public void setWill(String willTopic, String will)", "class_method_signature": "ConnectMessage.setWill(String willTopic, String will)", "testcase": false, "constructor": false}, {"identifier": "setWill", "parameters": "(String willTopic, String will, QoS willQoS,\n\t\t\tboolean retainWill)", "modifiers": "public", "return": "void", "signature": "void setWill(String willTopic, String will, QoS willQoS,\n\t\t\tboolean retainWill)", "full_signature": "public void setWill(String willTopic, String will, QoS willQoS,\n\t\t\tboolean retainWill)", "class_method_signature": "ConnectMessage.setWill(String willTopic, String will, QoS willQoS,\n\t\t\tboolean retainWill)", "testcase": false, "constructor": false}, {"identifier": "setDup", "parameters": "(boolean dup)", "modifiers": "@Override public", "return": "void", "signature": "void setDup(boolean dup)", "full_signature": "@Override public void setDup(boolean dup)", "class_method_signature": "ConnectMessage.setDup(boolean dup)", "testcase": false, "constructor": false}, {"identifier": "setRetained", "parameters": "(boolean retain)", "modifiers": "@Override public", "return": "void", "signature": "void setRetained(boolean retain)", "full_signature": "@Override public void setRetained(boolean retain)", "class_method_signature": "ConnectMessage.setRetained(boolean retain)", "testcase": false, "constructor": false}, {"identifier": "setQos", "parameters": "(QoS qos)", "modifiers": "@Override public", "return": "void", "signature": "void setQos(QoS qos)", "full_signature": "@Override public void setQos(QoS qos)", "class_method_signature": "ConnectMessage.setQos(QoS qos)", "testcase": false, "constructor": false}, {"identifier": "getProtocolId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProtocolId()", "full_signature": "public String getProtocolId()", "class_method_signature": "ConnectMessage.getProtocolId()", "testcase": false, "constructor": false}, {"identifier": "getProtocolVersion", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getProtocolVersion()", "full_signature": "public byte getProtocolVersion()", "class_method_signature": "ConnectMessage.getProtocolVersion()", "testcase": false, "constructor": false}, {"identifier": "getClientId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClientId()", "full_signature": "public String getClientId()", "class_method_signature": "ConnectMessage.getClientId()", "testcase": false, "constructor": false}, {"identifier": "getKeepAlive", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeepAlive()", "full_signature": "public int getKeepAlive()", "class_method_signature": "ConnectMessage.getKeepAlive()", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsername()", "full_signature": "public String getUsername()", "class_method_signature": "ConnectMessage.getUsername()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "ConnectMessage.getPassword()", "testcase": false, "constructor": false}, {"identifier": "isCleanSession", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCleanSession()", "full_signature": "public boolean isCleanSession()", "class_method_signature": "ConnectMessage.isCleanSession()", "testcase": false, "constructor": false}, {"identifier": "getWillTopic", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWillTopic()", "full_signature": "public String getWillTopic()", "class_method_signature": "ConnectMessage.getWillTopic()", "testcase": false, "constructor": false}, {"identifier": "getWill", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWill()", "full_signature": "public String getWill()", "class_method_signature": "ConnectMessage.getWill()", "testcase": false, "constructor": false}, {"identifier": "getWillQoS", "parameters": "()", "modifiers": "public", "return": "QoS", "signature": "QoS getWillQoS()", "full_signature": "public QoS getWillQoS()", "class_method_signature": "ConnectMessage.getWillQoS()", "testcase": false, "constructor": false}, {"identifier": "isWillRetained", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWillRetained()", "full_signature": "public boolean isWillRetained()", "class_method_signature": "ConnectMessage.isWillRetained()", "testcase": false, "constructor": false}, {"identifier": "hasUsername", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasUsername()", "full_signature": "public boolean hasUsername()", "class_method_signature": "ConnectMessage.hasUsername()", "testcase": false, "constructor": false}, {"identifier": "hasPassword", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasPassword()", "full_signature": "public boolean hasPassword()", "class_method_signature": "ConnectMessage.hasPassword()", "testcase": false, "constructor": false}, {"identifier": "hasWill", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasWill()", "full_signature": "public boolean hasWill()", "class_method_signature": "ConnectMessage.hasWill()", "testcase": false, "constructor": false}], "file": "mqtt-library/src/main/java/org/meqantt/message/ConnectMessage.java"}, "focal_method": {"identifier": "setWill", "parameters": "(String willTopic, String will)", "modifiers": "public", "return": "void", "body": "public void setWill(String willTopic, String will) {\n\t\tsetWill(willTopic, will, QoS.AT_MOST_ONCE, false);\n\t}", "signature": "void setWill(String willTopic, String will)", "full_signature": "public void setWill(String willTopic, String will)", "class_method_signature": "ConnectMessage.setWill(String willTopic, String will)", "testcase": false, "constructor": false, "invocations": ["setWill"]}, "repository": {"repo_id": 2168781, "url": "https://github.com/AlbinTheander/MeQanTT", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 61, "size": 227, "license": "licensed"}}