{"test_class": {"identifier": "ObjectQueueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "@Burst QueueFactory factory;", "modifier": "@Burst", "type": "QueueFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "ObjectQueue<String> queue;", "modifier": "", "type": "ObjectQueue<String>", "declarator": "queue", "var_name": "queue"}], "file": "tape/src/test/java/com/squareup/tape2/ObjectQueueTest.java"}, "test_case": {"identifier": "testIteratorDisallowsConcurrentModificationWithClear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testIteratorDisallowsConcurrentModificationWithClear() throws IOException {\n    Iterator<String> iterator = queue.iterator();\n    iterator.next();\n    queue.clear();\n\n    try {\n      iterator.hasNext();\n      fail();\n    } catch (ConcurrentModificationException ignored) {\n    }\n  }", "signature": "void testIteratorDisallowsConcurrentModificationWithClear()", "full_signature": "@Test public void testIteratorDisallowsConcurrentModificationWithClear()", "class_method_signature": "ObjectQueueTest.testIteratorDisallowsConcurrentModificationWithClear()", "testcase": true, "constructor": false, "invocations": ["iterator", "next", "clear", "hasNext", "fail"]}, "focal_class": {"identifier": "ObjectQueue", "superclass": "", "interfaces": "implements Iterable<T>, Closeable", "fields": [], "methods": [{"identifier": "create", "parameters": "(QueueFile qf, Converter<T> converter)", "modifiers": "public static", "return": "ObjectQueue<T>", "signature": "ObjectQueue<T> create(QueueFile qf, Converter<T> converter)", "full_signature": "public static ObjectQueue<T> create(QueueFile qf, Converter<T> converter)", "class_method_signature": "ObjectQueue.create(QueueFile qf, Converter<T> converter)", "testcase": false, "constructor": false}, {"identifier": "createInMemory", "parameters": "()", "modifiers": "public static", "return": "ObjectQueue<T>", "signature": "ObjectQueue<T> createInMemory()", "full_signature": "public static ObjectQueue<T> createInMemory()", "class_method_signature": "ObjectQueue.createInMemory()", "testcase": false, "constructor": false}, {"identifier": "file", "parameters": "()", "modifiers": "public abstract @Nullable", "return": "QueueFile", "signature": "QueueFile file()", "full_signature": "public abstract @Nullable QueueFile file()", "class_method_signature": "ObjectQueue.file()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int size()", "full_signature": "public abstract int size()", "class_method_signature": "ObjectQueue.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "ObjectQueue.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(T entry)", "modifiers": "public abstract", "return": "void", "signature": "void add(T entry)", "full_signature": "public abstract void add(T entry)", "class_method_signature": "ObjectQueue.add(T entry)", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "public abstract @Nullable", "return": "T", "signature": "T peek()", "full_signature": "public abstract @Nullable T peek()", "class_method_signature": "ObjectQueue.peek()", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "(int max)", "modifiers": "public", "return": "List<T>", "signature": "List<T> peek(int max)", "full_signature": "public List<T> peek(int max)", "class_method_signature": "ObjectQueue.peek(int max)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> asList()", "full_signature": "public List<T> asList()", "class_method_signature": "ObjectQueue.asList()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void remove()", "full_signature": "public void remove()", "class_method_signature": "ObjectQueue.remove()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int n)", "modifiers": "public abstract", "return": "void", "signature": "void remove(int n)", "full_signature": "public abstract void remove(int n)", "class_method_signature": "ObjectQueue.remove(int n)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ObjectQueue.clear()", "testcase": false, "constructor": false}], "file": "tape/src/main/java/com/squareup/tape2/ObjectQueue.java"}, "focal_method": {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void clear() throws IOException {\n    remove(size());\n  }", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ObjectQueue.clear()", "testcase": false, "constructor": false, "invocations": ["remove", "size"]}, "repository": {"repo_id": 5745625, "url": "https://github.com/square/tape", "language": "Java", "is_fork": false, "fork_count": 289, "stargazer_count": 2365, "size": 777, "license": "licensed"}}