{"test_class": {"identifier": "InvestmentAmountParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InvestmentAmountParser parser;", "modifier": "private", "type": "InvestmentAmountParser", "declarator": "parser", "var_name": "parser"}], "file": "investment-decision-making/src/test/java/org/codeqinvest/investment/InvestmentAmountParserTest.java"}, "test_case": {"identifier": "emptyStringShouldBeParsedToZeroMinutes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void emptyStringShouldBeParsedToZeroMinutes() throws InvestmentParsingException {\n    assertThat(parser.parseMinutes(\"\")).isEqualTo(0);\n  }", "signature": "void emptyStringShouldBeParsedToZeroMinutes()", "full_signature": "@Test public void emptyStringShouldBeParsedToZeroMinutes()", "class_method_signature": "InvestmentAmountParserTest.emptyStringShouldBeParsedToZeroMinutes()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "parseMinutes"]}, "focal_class": {"identifier": "InvestmentAmountParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseMinutes", "parameters": "(String formattedInvestmentAmount)", "modifiers": "public", "return": "int", "signature": "int parseMinutes(String formattedInvestmentAmount)", "full_signature": "public int parseMinutes(String formattedInvestmentAmount)", "class_method_signature": "InvestmentAmountParser.parseMinutes(String formattedInvestmentAmount)", "testcase": false, "constructor": false}, {"identifier": "getMinutesFor", "parameters": "(String timeValue)", "modifiers": "private", "return": "int", "signature": "int getMinutesFor(String timeValue)", "full_signature": "private int getMinutesFor(String timeValue)", "class_method_signature": "InvestmentAmountParser.getMinutesFor(String timeValue)", "testcase": false, "constructor": false}], "file": "investment-decision-making/src/main/java/org/codeqinvest/investment/InvestmentAmountParser.java"}, "focal_method": {"identifier": "parseMinutes", "parameters": "(String formattedInvestmentAmount)", "modifiers": "public", "return": "int", "body": "public int parseMinutes(String formattedInvestmentAmount) throws InvestmentParsingException {\n    if (formattedInvestmentAmount.isEmpty()) {\n      return 0;\n    }\n\n    Pattern pattern = Pattern.compile(\"(\\\\d*h)?\\\\s?(\\\\d*m)?\");\n    Matcher matcher = pattern.matcher(formattedInvestmentAmount);\n\n    int minutes = 0;\n    if (!matcher.find()) {\n      throw new InvestmentParsingException();\n    }\n\n    String[] timeValues = matcher.group().split(\"\\\\s\");\n    minutes += getMinutesFor(timeValues[0]);\n    if (timeValues.length > 1) {\n      minutes += getMinutesFor(timeValues[1]);\n    }\n    return minutes;\n  }", "signature": "int parseMinutes(String formattedInvestmentAmount)", "full_signature": "public int parseMinutes(String formattedInvestmentAmount)", "class_method_signature": "InvestmentAmountParser.parseMinutes(String formattedInvestmentAmount)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "compile", "matcher", "find", "split", "group", "getMinutesFor", "getMinutesFor"]}, "repository": {"repo_id": 9755019, "url": "https://github.com/CodeQInvest/codeq-invest", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 25, "size": 1829, "license": "licensed"}}