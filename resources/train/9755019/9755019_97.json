{"test_class": {"identifier": "InvestmentOpportunitiesJsonGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InvestmentOpportunitiesJsonGenerator generator;", "modifier": "private", "type": "InvestmentOpportunitiesJsonGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "private WeightedProfitCalculator weightedProfitCalculator;", "modifier": "private", "type": "WeightedProfitCalculator", "declarator": "weightedProfitCalculator", "var_name": "weightedProfitCalculator"}, {"original_string": "private Project project;", "modifier": "private", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "private ObjectMapper mapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "web-ui/src/test/java/org/codeqinvest/web/project/InvestmentOpportunitiesJsonGeneratorTest.java"}, "test_case": {"identifier": "emptyAnalysis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void emptyAnalysis() throws IOException {\n    QualityAnalysis analysis = QualityAnalysis.success(project, Collections.<QualityViolation>emptyList());\n    String expectedJson = \"{ \\\"name\\\": \\\"Dummy Project\\\", \\\"allChildren\\\": [], \\\"children\\\": []}\";\n    assertThat(generate(analysis).toString()).isEqualTo(mapper.readTree(expectedJson).toString());\n  }", "signature": "void emptyAnalysis()", "full_signature": "@Test public void emptyAnalysis()", "class_method_signature": "InvestmentOpportunitiesJsonGeneratorTest.emptyAnalysis()", "testcase": true, "constructor": false, "invocations": ["success", "emptyList", "isEqualTo", "assertThat", "toString", "generate", "toString", "readTree"]}, "focal_class": {"identifier": "InvestmentOpportunitiesJsonGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}, {"original_string": "private static final Splitter PACKAGE_SPLITTER = Splitter.on('.');", "modifier": "private static final", "type": "Splitter", "declarator": "PACKAGE_SPLITTER = Splitter.on('.')", "var_name": "PACKAGE_SPLITTER"}, {"original_string": "private final WeightedProfitCalculator weightedProfitCalculator;", "modifier": "private final", "type": "WeightedProfitCalculator", "declarator": "weightedProfitCalculator", "var_name": "weightedProfitCalculator"}], "methods": [{"identifier": "InvestmentOpportunitiesJsonGenerator", "parameters": "(WeightedProfitCalculator weightedProfitCalculator)", "modifiers": "@Autowired", "return": "", "signature": " InvestmentOpportunitiesJsonGenerator(WeightedProfitCalculator weightedProfitCalculator)", "full_signature": "@Autowired  InvestmentOpportunitiesJsonGenerator(WeightedProfitCalculator weightedProfitCalculator)", "class_method_signature": "InvestmentOpportunitiesJsonGenerator.InvestmentOpportunitiesJsonGenerator(WeightedProfitCalculator weightedProfitCalculator)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(QualityAnalysis analysis)", "modifiers": "public", "return": "String", "signature": "String generate(QualityAnalysis analysis)", "full_signature": "public String generate(QualityAnalysis analysis)", "class_method_signature": "InvestmentOpportunitiesJsonGenerator.generate(QualityAnalysis analysis)", "testcase": false, "constructor": false}, {"identifier": "addArtefact", "parameters": "(QualityViolation violation, RootNode root, Set<String> alreadyAddedArtefacts, Map<String, PackageNode> nodeLookupTable)", "modifiers": "private", "return": "void", "signature": "void addArtefact(QualityViolation violation, RootNode root, Set<String> alreadyAddedArtefacts, Map<String, PackageNode> nodeLookupTable)", "full_signature": "private void addArtefact(QualityViolation violation, RootNode root, Set<String> alreadyAddedArtefacts, Map<String, PackageNode> nodeLookupTable)", "class_method_signature": "InvestmentOpportunitiesJsonGenerator.addArtefact(QualityViolation violation, RootNode root, Set<String> alreadyAddedArtefacts, Map<String, PackageNode> nodeLookupTable)", "testcase": false, "constructor": false}, {"identifier": "getLastPackageName", "parameters": "(String packageName)", "modifiers": "private", "return": "String", "signature": "String getLastPackageName(String packageName)", "full_signature": "private String getLastPackageName(String packageName)", "class_method_signature": "InvestmentOpportunitiesJsonGenerator.getLastPackageName(String packageName)", "testcase": false, "constructor": false}, {"identifier": "getAllPackageNamesReversed", "parameters": "(Artefact artefact)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getAllPackageNamesReversed(Artefact artefact)", "full_signature": "private List<String> getAllPackageNamesReversed(Artefact artefact)", "class_method_signature": "InvestmentOpportunitiesJsonGenerator.getAllPackageNamesReversed(Artefact artefact)", "testcase": false, "constructor": false}], "file": "web-ui/src/main/java/org/codeqinvest/web/project/InvestmentOpportunitiesJsonGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(QualityAnalysis analysis)", "modifiers": "public", "return": "String", "body": "public String generate(QualityAnalysis analysis) throws JsonProcessingException {\n    Set<String> alreadyAddedArtefacts = Sets.newHashSet();\n    Map<String, PackageNode> nodeLookupTable = Maps.newHashMap();\n    RootNode rootNode = new RootNode(analysis.getProject().getName());\n\n    for (QualityViolation violation : analysis.getViolations()) {\n      addArtefact(violation, rootNode, alreadyAddedArtefacts, nodeLookupTable);\n    }\n\n    rootNode.filterProfitableChildren();\n    rootNode.updateChangeProbabilityOfProfitableChildren();\n    rootNode.updateAutomaticChangeProbabilityAndEstimateOfAllChildren();\n    return MAPPER.writeValueAsString(rootNode);\n  }", "signature": "String generate(QualityAnalysis analysis)", "full_signature": "public String generate(QualityAnalysis analysis)", "class_method_signature": "InvestmentOpportunitiesJsonGenerator.generate(QualityAnalysis analysis)", "testcase": false, "constructor": false, "invocations": ["newHashSet", "newHashMap", "getName", "getProject", "getViolations", "addArtefact", "filterProfitableChildren", "updateChangeProbabilityOfProfitableChildren", "updateAutomaticChangeProbabilityAndEstimateOfAllChildren", "writeValueAsString"]}, "repository": {"repo_id": 9755019, "url": "https://github.com/CodeQInvest/codeq-invest", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 25, "size": 1829, "license": "licensed"}}