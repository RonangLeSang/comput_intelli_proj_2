{"test_class": {"identifier": "DefaultQualityAnalyzerServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QualityProfile profile;", "modifier": "private", "type": "QualityProfile", "declarator": "profile", "var_name": "profile"}, {"original_string": "private QualityRequirement firstRequirement;", "modifier": "private", "type": "QualityRequirement", "declarator": "firstRequirement", "var_name": "firstRequirement"}, {"original_string": "private QualityRequirement secondRequirement;", "modifier": "private", "type": "QualityRequirement", "declarator": "secondRequirement", "var_name": "secondRequirement"}, {"original_string": "private Project project;", "modifier": "private", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "private ScmAvailabilityCheckerServiceFactory scmAvailabilityCheckerServiceFactory;", "modifier": "private", "type": "ScmAvailabilityCheckerServiceFactory", "declarator": "scmAvailabilityCheckerServiceFactory", "var_name": "scmAvailabilityCheckerServiceFactory"}, {"original_string": "private SecureChangeProbabilityCalculator secureChangeProbabilityCalculator;", "modifier": "private", "type": "SecureChangeProbabilityCalculator", "declarator": "secureChangeProbabilityCalculator", "var_name": "secureChangeProbabilityCalculator"}, {"original_string": "private QualityViolationCostsCalculator costsCalculator;", "modifier": "private", "type": "QualityViolationCostsCalculator", "declarator": "costsCalculator", "var_name": "costsCalculator"}, {"original_string": "private QualityAnalysisRepository qualityAnalysisRepository;", "modifier": "private", "type": "QualityAnalysisRepository", "declarator": "qualityAnalysisRepository", "var_name": "qualityAnalysisRepository"}], "file": "quality-assessment/src/test/java/org/codeqinvest/quality/analysis/DefaultQualityAnalyzerServiceTest.java"}, "test_case": {"identifier": "takeCostsFromSuppliedCostCalculator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void takeCostsFromSuppliedCostCalculator() throws CodeChurnCalculationException, ScmConnectionEncodingException, ResourceNotFoundException {\n    ViolationOccurence violation = new ViolationOccurence(firstRequirement, new Artefact(\"A\", \"A\"), 0);\n\n    ViolationsCalculatorService violationsCalculatorService = mock(ViolationsCalculatorService.class);\n    when(violationsCalculatorService.calculateAllViolation(any(Project.class)))\n        .thenReturn(ViolationsAnalysisResult.createSuccessfulAnalysis(Arrays.asList(violation)));\n\n    CodeChangeProbabilityCalculator codeChangeProbabilityCalculator = mock(CodeChangeProbabilityCalculator.class);\n    when(codeChangeProbabilityCalculator.calculateCodeChangeProbability(any(ScmConnectionSettings.class), anyString())).thenReturn(1.0);\n    CodeChangeProbabilityCalculatorFactory codeChangeProbabilityCalculatorFactory = createMockedCodeChangeProbabilityCalculatorFactory();\n    when(codeChangeProbabilityCalculatorFactory.create(any(CodeChangeSettings.class))).thenReturn(codeChangeProbabilityCalculator);\n\n    QualityAnalyzerService qualityAnalyzerService = new DefaultQualityAnalyzerService(violationsCalculatorService,\n        scmAvailabilityCheckerServiceFactory, codeChangeProbabilityCalculatorFactory, secureChangeProbabilityCalculator, costsCalculator, qualityAnalysisRepository);\n    qualityAnalyzerService.analyzeProject(project);\n    verify(costsCalculator).calculateRemediationCosts(project.getSonarConnectionSettings(), violation);\n    verify(costsCalculator).calculateNonRemediationCosts(project.getSonarConnectionSettings(), violation);\n  }", "signature": "void takeCostsFromSuppliedCostCalculator()", "full_signature": "@Test public void takeCostsFromSuppliedCostCalculator()", "class_method_signature": "DefaultQualityAnalyzerServiceTest.takeCostsFromSuppliedCostCalculator()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "calculateAllViolation", "any", "createSuccessfulAnalysis", "asList", "mock", "thenReturn", "when", "calculateCodeChangeProbability", "any", "anyString", "createMockedCodeChangeProbabilityCalculatorFactory", "thenReturn", "when", "create", "any", "analyzeProject", "calculateRemediationCosts", "verify", "getSonarConnectionSettings", "calculateNonRemediationCosts", "verify", "getSonarConnectionSettings"]}, "focal_class": {"identifier": "DefaultQualityAnalyzerService", "superclass": "", "interfaces": "implements QualityAnalyzerService", "fields": [{"original_string": "private final ViolationsCalculatorService violationsCalculatorService;", "modifier": "private final", "type": "ViolationsCalculatorService", "declarator": "violationsCalculatorService", "var_name": "violationsCalculatorService"}, {"original_string": "private final ScmAvailabilityCheckerServiceFactory scmAvailabilityCheckerServiceFactory;", "modifier": "private final", "type": "ScmAvailabilityCheckerServiceFactory", "declarator": "scmAvailabilityCheckerServiceFactory", "var_name": "scmAvailabilityCheckerServiceFactory"}, {"original_string": "private final CodeChangeProbabilityCalculatorFactory codeChangeProbabilityCalculatorFactory;", "modifier": "private final", "type": "CodeChangeProbabilityCalculatorFactory", "declarator": "codeChangeProbabilityCalculatorFactory", "var_name": "codeChangeProbabilityCalculatorFactory"}, {"original_string": "private final SecureChangeProbabilityCalculator secureChangeProbabilityCalculator;", "modifier": "private final", "type": "SecureChangeProbabilityCalculator", "declarator": "secureChangeProbabilityCalculator", "var_name": "secureChangeProbabilityCalculator"}, {"original_string": "private final QualityViolationCostsCalculator costsCalculator;", "modifier": "private final", "type": "QualityViolationCostsCalculator", "declarator": "costsCalculator", "var_name": "costsCalculator"}, {"original_string": "private final QualityAnalysisRepository qualityAnalysisRepository;", "modifier": "private final", "type": "QualityAnalysisRepository", "declarator": "qualityAnalysisRepository", "var_name": "qualityAnalysisRepository"}], "methods": [{"identifier": "DefaultQualityAnalyzerService", "parameters": "(ViolationsCalculatorService violationsCalculatorService,\n                                       ScmAvailabilityCheckerServiceFactory scmAvailabilityCheckerServiceFactory,\n                                       CodeChangeProbabilityCalculatorFactory codeChangeProbabilityCalculatorFactory,\n                                       SecureChangeProbabilityCalculator secureChangeProbabilityCalculator,\n                                       QualityViolationCostsCalculator costsCalculator,\n                                       QualityAnalysisRepository qualityAnalysisRepository)", "modifiers": "@Autowired public", "return": "", "signature": " DefaultQualityAnalyzerService(ViolationsCalculatorService violationsCalculatorService,\n                                       ScmAvailabilityCheckerServiceFactory scmAvailabilityCheckerServiceFactory,\n                                       CodeChangeProbabilityCalculatorFactory codeChangeProbabilityCalculatorFactory,\n                                       SecureChangeProbabilityCalculator secureChangeProbabilityCalculator,\n                                       QualityViolationCostsCalculator costsCalculator,\n                                       QualityAnalysisRepository qualityAnalysisRepository)", "full_signature": "@Autowired public  DefaultQualityAnalyzerService(ViolationsCalculatorService violationsCalculatorService,\n                                       ScmAvailabilityCheckerServiceFactory scmAvailabilityCheckerServiceFactory,\n                                       CodeChangeProbabilityCalculatorFactory codeChangeProbabilityCalculatorFactory,\n                                       SecureChangeProbabilityCalculator secureChangeProbabilityCalculator,\n                                       QualityViolationCostsCalculator costsCalculator,\n                                       QualityAnalysisRepository qualityAnalysisRepository)", "class_method_signature": "DefaultQualityAnalyzerService.DefaultQualityAnalyzerService(ViolationsCalculatorService violationsCalculatorService,\n                                       ScmAvailabilityCheckerServiceFactory scmAvailabilityCheckerServiceFactory,\n                                       CodeChangeProbabilityCalculatorFactory codeChangeProbabilityCalculatorFactory,\n                                       SecureChangeProbabilityCalculator secureChangeProbabilityCalculator,\n                                       QualityViolationCostsCalculator costsCalculator,\n                                       QualityAnalysisRepository qualityAnalysisRepository)", "testcase": false, "constructor": true}, {"identifier": "analyzeProject", "parameters": "(Project project)", "modifiers": "@Override public", "return": "QualityAnalysis", "signature": "QualityAnalysis analyzeProject(Project project)", "full_signature": "@Override public QualityAnalysis analyzeProject(Project project)", "class_method_signature": "DefaultQualityAnalyzerService.analyzeProject(Project project)", "testcase": false, "constructor": false}, {"identifier": "addChangeProbabilityToEachArtifact", "parameters": "(Project project, ViolationsAnalysisResult violationsAnalysisResult)", "modifiers": "private", "return": "QualityAnalysis", "signature": "QualityAnalysis addChangeProbabilityToEachArtifact(Project project, ViolationsAnalysisResult violationsAnalysisResult)", "full_signature": "private QualityAnalysis addChangeProbabilityToEachArtifact(Project project, ViolationsAnalysisResult violationsAnalysisResult)", "class_method_signature": "DefaultQualityAnalyzerService.addChangeProbabilityToEachArtifact(Project project, ViolationsAnalysisResult violationsAnalysisResult)", "testcase": false, "constructor": false}, {"identifier": "addSecureChangeProbabilityToEachArtifact", "parameters": "(Project project, QualityAnalysis qualityAnalysis)", "modifiers": "private", "return": "QualityAnalysis", "signature": "QualityAnalysis addSecureChangeProbabilityToEachArtifact(Project project, QualityAnalysis qualityAnalysis)", "full_signature": "private QualityAnalysis addSecureChangeProbabilityToEachArtifact(Project project, QualityAnalysis qualityAnalysis)", "class_method_signature": "DefaultQualityAnalyzerService.addSecureChangeProbabilityToEachArtifact(Project project, QualityAnalysis qualityAnalysis)", "testcase": false, "constructor": false}, {"identifier": "logFailedAnalysis", "parameters": "(Project project, Exception e)", "modifiers": "private", "return": "void", "signature": "void logFailedAnalysis(Project project, Exception e)", "full_signature": "private void logFailedAnalysis(Project project, Exception e)", "class_method_signature": "DefaultQualityAnalyzerService.logFailedAnalysis(Project project, Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculateCostsForEachViolation", "parameters": "(SonarConnectionSettings sonarConnectionSettings, ViolationsAnalysisResult violationsAnalysisResult)", "modifiers": "private", "return": "List<QualityViolation>", "signature": "List<QualityViolation> calculateCostsForEachViolation(SonarConnectionSettings sonarConnectionSettings, ViolationsAnalysisResult violationsAnalysisResult)", "full_signature": "private List<QualityViolation> calculateCostsForEachViolation(SonarConnectionSettings sonarConnectionSettings, ViolationsAnalysisResult violationsAnalysisResult)", "class_method_signature": "DefaultQualityAnalyzerService.calculateCostsForEachViolation(SonarConnectionSettings sonarConnectionSettings, ViolationsAnalysisResult violationsAnalysisResult)", "testcase": false, "constructor": false}, {"identifier": "zeroCostsForEachViolation", "parameters": "(ViolationsAnalysisResult violationsAnalysisResult)", "modifiers": "private", "return": "List<QualityViolation>", "signature": "List<QualityViolation> zeroCostsForEachViolation(ViolationsAnalysisResult violationsAnalysisResult)", "full_signature": "private List<QualityViolation> zeroCostsForEachViolation(ViolationsAnalysisResult violationsAnalysisResult)", "class_method_signature": "DefaultQualityAnalyzerService.zeroCostsForEachViolation(ViolationsAnalysisResult violationsAnalysisResult)", "testcase": false, "constructor": false}], "file": "quality-assessment/src/main/java/org/codeqinvest/quality/analysis/DefaultQualityAnalyzerService.java"}, "focal_method": {"identifier": "analyzeProject", "parameters": "(Project project)", "modifiers": "@Override public", "return": "QualityAnalysis", "body": "@Override\n  public QualityAnalysis analyzeProject(Project project) {\n    try {\n      ViolationsAnalysisResult violationsAnalysisResult = violationsCalculatorService.calculateAllViolation(project);\n      if (!violationsAnalysisResult.isSuccessful()) {\n        log.error(\"Quality analysis for project {} failed due '{}'\", project.getName(), violationsAnalysisResult.getFailureReason().get());\n        return qualityAnalysisRepository.save(QualityAnalysis.failed(project,\n            zeroCostsForEachViolation(violationsAnalysisResult),\n            violationsAnalysisResult.getFailureReason().get()));\n      }\n\n      log.info(\"Checking the availability of the SCM system {} for project {}\", project.getScmSettings(), project.getName());\n      if (!scmAvailabilityCheckerServiceFactory.create(project.getScmSettings()).isAvailable(project.getScmSettings())) {\n        return qualityAnalysisRepository.save(QualityAnalysis.failed(project,\n            zeroCostsForEachViolation(violationsAnalysisResult), \"The scm system is not available.\"));\n      }\n\n      QualityAnalysis qualityAnalysis = addChangeProbabilityToEachArtifact(project, violationsAnalysisResult);\n      if (!qualityAnalysis.isSuccessful()) {\n        return qualityAnalysisRepository.save(qualityAnalysis);\n      }\n\n      qualityAnalysis = addSecureChangeProbabilityToEachArtifact(project, qualityAnalysis);\n      log.info(\"Quality analysis succeeded for project {} with {} violations.\", project.getName(), violationsAnalysisResult.getViolations().size());\n      return qualityAnalysisRepository.save(qualityAnalysis);\n    } catch (Exception e) {\n      String errorMessage = \"Unexpected error occured during quality analysis!\";\n      log.error(errorMessage, e);\n      return QualityAnalysis.failed(project, new ArrayList<QualityViolation>(), errorMessage);\n    }\n  }", "signature": "QualityAnalysis analyzeProject(Project project)", "full_signature": "@Override public QualityAnalysis analyzeProject(Project project)", "class_method_signature": "DefaultQualityAnalyzerService.analyzeProject(Project project)", "testcase": false, "constructor": false, "invocations": ["calculateAllViolation", "isSuccessful", "error", "getName", "get", "getFailureReason", "save", "failed", "zeroCostsForEachViolation", "get", "getFailureReason", "info", "getScmSettings", "getName", "isAvailable", "create", "getScmSettings", "getScmSettings", "save", "failed", "zeroCostsForEachViolation", "addChangeProbabilityToEachArtifact", "isSuccessful", "save", "addSecureChangeProbabilityToEachArtifact", "info", "getName", "size", "getViolations", "save", "error", "failed"]}, "repository": {"repo_id": 9755019, "url": "https://github.com/CodeQInvest/codeq-invest", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 25, "size": 1829, "license": "licensed"}}