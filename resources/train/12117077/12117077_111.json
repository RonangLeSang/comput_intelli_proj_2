{"test_class": {"identifier": "BoundsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/io/jeo/geom/BoundsTest.java"}, "test_case": {"identifier": "testTile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTile() {\n        Envelope e = new Envelope(-180,180,-90,90);\n        Iterator<Envelope> t = Bounds.tile(e, 0.5, 0.5, null).iterator();\n\n        assertTrue(t.hasNext()); assertEquals(new Envelope(-180,0,-90,0), t.next());\n        assertTrue(t.hasNext()); assertEquals(new Envelope(0,180,-90,0), t.next());\n        assertTrue(t.hasNext()); assertEquals(new Envelope(-180,0,0,90), t.next());\n        assertTrue(t.hasNext()); assertEquals(new Envelope(0,180,0,90), t.next());\n        assertFalse(t.hasNext());\n    }", "signature": "void testTile()", "full_signature": "@Test public void testTile()", "class_method_signature": "BoundsTest.testTile()", "testcase": true, "constructor": false, "invocations": ["iterator", "tile", "assertTrue", "hasNext", "assertEquals", "next", "assertTrue", "hasNext", "assertEquals", "next", "assertTrue", "hasNext", "assertEquals", "next", "assertTrue", "hasNext", "assertEquals", "next", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "Bounds", "superclass": "extends Envelope", "interfaces": "", "fields": [{"original_string": "public static final Bounds WORLD_BOUNDS_4326 = new Bounds(-180,180,-90,90);", "modifier": "public static final", "type": "Bounds", "declarator": "WORLD_BOUNDS_4326 = new Bounds(-180,180,-90,90)", "var_name": "WORLD_BOUNDS_4326"}], "methods": [{"identifier": "scale", "parameters": "(Envelope env, double scale)", "modifiers": "public static", "return": "Bounds", "signature": "Bounds scale(Envelope env, double scale)", "full_signature": "public static Bounds scale(Envelope env, double scale)", "class_method_signature": "Bounds.scale(Envelope env, double scale)", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(Envelope env, double scale, Coordinate focus)", "modifiers": "public static", "return": "Bounds", "signature": "Bounds scale(Envelope env, double scale, Coordinate focus)", "full_signature": "public static Bounds scale(Envelope env, double scale, Coordinate focus)", "class_method_signature": "Bounds.scale(Envelope env, double scale, Coordinate focus)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(Envelope env, double x, double y)", "modifiers": "public static", "return": "Bounds", "signature": "Bounds expand(Envelope env, double x, double y)", "full_signature": "public static Bounds expand(Envelope env, double x, double y)", "class_method_signature": "Bounds.expand(Envelope env, double x, double y)", "testcase": false, "constructor": false}, {"identifier": "square", "parameters": "(Envelope env)", "modifiers": "public static", "return": "Bounds", "signature": "Bounds square(Envelope env)", "full_signature": "public static Bounds square(Envelope env)", "class_method_signature": "Bounds.square(Envelope env)", "testcase": false, "constructor": false}, {"identifier": "corners", "parameters": "(Envelope env)", "modifiers": "public static", "return": "List<Coordinate>", "signature": "List<Coordinate> corners(Envelope env)", "full_signature": "public static List<Coordinate> corners(Envelope env)", "class_method_signature": "Bounds.corners(Envelope env)", "testcase": false, "constructor": false}, {"identifier": "tile", "parameters": "(final T env, double resx, double resy, final T reuse)", "modifiers": "public static", "return": "Iterable<T>", "signature": "Iterable<T> tile(final T env, double resx, double resy, final T reuse)", "full_signature": "public static Iterable<T> tile(final T env, double resx, double resy, final T reuse)", "class_method_signature": "Bounds.tile(final T env, double resx, double resy, final T reuse)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Envelope env, double dx, double dy)", "modifiers": "public static", "return": "Bounds", "signature": "Bounds translate(Envelope env, double dx, double dy)", "full_signature": "public static Bounds translate(Envelope env, double dx, double dy)", "class_method_signature": "Bounds.translate(Envelope env, double dx, double dy)", "testcase": false, "constructor": false}, {"identifier": "toPolygon", "parameters": "(Envelope e)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon toPolygon(Envelope e)", "full_signature": "public static Polygon toPolygon(Envelope e)", "class_method_signature": "Bounds.toPolygon(Envelope e)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(Envelope e)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNull(Envelope e)", "full_signature": "public static boolean isNull(Envelope e)", "class_method_signature": "Bounds.isNull(Envelope e)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Envelope e)", "modifiers": "public static", "return": "String", "signature": "String toString(Envelope e)", "full_signature": "public static String toString(Envelope e)", "class_method_signature": "Bounds.toString(Envelope e)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Envelope e, String delim, boolean alt)", "modifiers": "public static", "return": "String", "signature": "String toString(Envelope e, String delim, boolean alt)", "full_signature": "public static String toString(Envelope e, String delim, boolean alt)", "class_method_signature": "Bounds.toString(Envelope e, String delim, boolean alt)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String str)", "modifiers": "public static", "return": "Bounds", "signature": "Bounds parse(String str)", "full_signature": "public static Bounds parse(String str)", "class_method_signature": "Bounds.parse(String str)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String str, boolean alt)", "modifiers": "public static", "return": "Bounds", "signature": "Bounds parse(String str, boolean alt)", "full_signature": "public static Bounds parse(String str, boolean alt)", "class_method_signature": "Bounds.parse(String str, boolean alt)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String str, boolean alt, String delim)", "modifiers": "public static", "return": "Bounds", "signature": "Bounds parse(String str, boolean alt, String delim)", "full_signature": "public static Bounds parse(String str, boolean alt, String delim)", "class_method_signature": "Bounds.parse(String str, boolean alt, String delim)", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "(Envelope e)", "modifiers": "public static", "return": "Envelope", "signature": "Envelope flip(Envelope e)", "full_signature": "public static Envelope flip(Envelope e)", "class_method_signature": "Bounds.flip(Envelope e)", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(Envelope bbox, float res)", "modifiers": "public static", "return": "Envelope", "signature": "Envelope random(Envelope bbox, float res)", "full_signature": "public static Envelope random(Envelope bbox, float res)", "class_method_signature": "Bounds.random(Envelope bbox, float res)", "testcase": false, "constructor": false}, {"identifier": "randoms", "parameters": "(Envelope bbox, float minRes, float maxRes, int n)", "modifiers": "public static", "return": "List<Envelope>", "signature": "List<Envelope> randoms(Envelope bbox, float minRes, float maxRes, int n)", "full_signature": "public static List<Envelope> randoms(Envelope bbox, float minRes, float maxRes, int n)", "class_method_signature": "Bounds.randoms(Envelope bbox, float minRes, float maxRes, int n)", "testcase": false, "constructor": false}, {"identifier": "checkContains", "parameters": "(Envelope e, Coordinate c)", "modifiers": "static", "return": "void", "signature": "void checkContains(Envelope e, Coordinate c)", "full_signature": "static void checkContains(Envelope e, Coordinate c)", "class_method_signature": "Bounds.checkContains(Envelope e, Coordinate c)", "testcase": false, "constructor": false}, {"identifier": "checkPositive", "parameters": "(double scale)", "modifiers": "static", "return": "void", "signature": "void checkPositive(double scale)", "full_signature": "static void checkPositive(double scale)", "class_method_signature": "Bounds.checkPositive(double scale)", "testcase": false, "constructor": false}, {"identifier": "Bounds", "parameters": "()", "modifiers": "public", "return": "", "signature": " Bounds()", "full_signature": "public  Bounds()", "class_method_signature": "Bounds.Bounds()", "testcase": false, "constructor": true}, {"identifier": "Bounds", "parameters": "(Envelope env)", "modifiers": "public", "return": "", "signature": " Bounds(Envelope env)", "full_signature": "public  Bounds(Envelope env)", "class_method_signature": "Bounds.Bounds(Envelope env)", "testcase": false, "constructor": true}, {"identifier": "Bounds", "parameters": "(double west, double east, double south, double north)", "modifiers": "public", "return": "", "signature": " Bounds(double west, double east, double south, double north)", "full_signature": "public  Bounds(double west, double east, double south, double north)", "class_method_signature": "Bounds.Bounds(double west, double east, double south, double north)", "testcase": false, "constructor": true}, {"identifier": "west", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double west()", "full_signature": "public double west()", "class_method_signature": "Bounds.west()", "testcase": false, "constructor": false}, {"identifier": "south", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double south()", "full_signature": "public double south()", "class_method_signature": "Bounds.south()", "testcase": false, "constructor": false}, {"identifier": "east", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double east()", "full_signature": "public double east()", "class_method_signature": "Bounds.east()", "testcase": false, "constructor": false}, {"identifier": "north", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double north()", "full_signature": "public double north()", "class_method_signature": "Bounds.north()", "testcase": false, "constructor": false}, {"identifier": "width", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double width()", "full_signature": "public double width()", "class_method_signature": "Bounds.width()", "testcase": false, "constructor": false}, {"identifier": "height", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double height()", "full_signature": "public double height()", "class_method_signature": "Bounds.height()", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(double factor)", "modifiers": "public", "return": "Bounds", "signature": "Bounds scale(double factor)", "full_signature": "public Bounds scale(double factor)", "class_method_signature": "Bounds.scale(double factor)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(double amt)", "modifiers": "public", "return": "Bounds", "signature": "Bounds expand(double amt)", "full_signature": "public Bounds expand(double amt)", "class_method_signature": "Bounds.expand(double amt)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(double x, double y)", "modifiers": "public", "return": "Bounds", "signature": "Bounds expand(double x, double y)", "full_signature": "public Bounds expand(double x, double y)", "class_method_signature": "Bounds.expand(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "square", "parameters": "()", "modifiers": "public", "return": "Bounds", "signature": "Bounds square()", "full_signature": "public Bounds square()", "class_method_signature": "Bounds.square()", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "(double dx, double dy)", "modifiers": "public", "return": "Bounds", "signature": "Bounds shift(double dx, double dy)", "full_signature": "public Bounds shift(double dx, double dy)", "class_method_signature": "Bounds.shift(double dx, double dy)", "testcase": false, "constructor": false}, {"identifier": "corners", "parameters": "()", "modifiers": "public", "return": "List<Coordinate>", "signature": "List<Coordinate> corners()", "full_signature": "public List<Coordinate> corners()", "class_method_signature": "Bounds.corners()", "testcase": false, "constructor": false}, {"identifier": "tile", "parameters": "(double resx, double resy)", "modifiers": "public", "return": "Iterable<Bounds>", "signature": "Iterable<Bounds> tile(double resx, double resy)", "full_signature": "public Iterable<Bounds> tile(double resx, double resy)", "class_method_signature": "Bounds.tile(double resx, double resy)", "testcase": false, "constructor": false}, {"identifier": "polygon", "parameters": "()", "modifiers": "public", "return": "Polygon", "signature": "Polygon polygon()", "full_signature": "public Polygon polygon()", "class_method_signature": "Bounds.polygon()", "testcase": false, "constructor": false}, {"identifier": "intersection", "parameters": "(Envelope env)", "modifiers": "@Override public", "return": "Bounds", "signature": "Bounds intersection(Envelope env)", "full_signature": "@Override public Bounds intersection(Envelope env)", "class_method_signature": "Bounds.intersection(Envelope env)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Bounds.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/io/jeo/geom/Bounds.java"}, "focal_method": {"identifier": "tile", "parameters": "(final T env, double resx, double resy, final T reuse)", "modifiers": "public static", "return": "Iterable<T>", "body": "public static <T extends Envelope> Iterable<T> tile(final T env, double resx, double resy, final T reuse) {\n        final double dx = env.getWidth() * resx;\n        final double dy = env.getHeight() * resy;\n\n        return new Iterable<T>() {\n            @Override\n            public Iterator<T> iterator() {\n                return new Iterator<T>() {\n                    double x = env.getMinX();\n                    double y = env.getMinY();\n\n                    @Override\n                    public boolean hasNext() {\n                        return x < env.getMaxX() && y < env.getMaxY();\n                    }\n\n                    @Override\n                    public T next() {\n                        T b = reuse != null ? reuse : (T) new Bounds();\n                        b.init(x, Math.min(x+dx, env.getMaxX()), y, Math.min(y+dy, env.getMaxY()));\n\n                        x += dx;\n                        if (x >= env.getMaxX()) {\n                            x = env.getMinX();\n                            y += dy;\n                        }\n\n                        return b;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        };\n    }", "signature": "Iterable<T> tile(final T env, double resx, double resy, final T reuse)", "full_signature": "public static Iterable<T> tile(final T env, double resx, double resy, final T reuse)", "class_method_signature": "Bounds.tile(final T env, double resx, double resy, final T reuse)", "testcase": false, "constructor": false, "invocations": ["getWidth", "getHeight", "getMinX", "getMinY", "getMaxX", "getMaxY", "init", "min", "getMaxX", "min", "getMaxY", "getMaxX", "getMinX"]}, "repository": {"repo_id": 12117077, "url": "https://github.com/jeo/jeo", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 15, "size": 6497, "license": "licensed"}}