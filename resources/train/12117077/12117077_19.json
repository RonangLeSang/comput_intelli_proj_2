{"test_class": {"identifier": "GDALTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "File data;", "modifier": "", "type": "File", "declarator": "data", "var_name": "data"}], "file": "format/gdal/src/test/java/io/jeo/gdal/GDALTest.java"}, "test_case": {"identifier": "testOpen", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOpen() throws Exception {\n        GDAL drv = new GDAL();\n        assertTrue(drv.canOpen(data, null, null));\n\n        GDALDataset ds = drv.open(data, null);\n        assertNotNull(ds);\n    }", "signature": "void testOpen()", "full_signature": "@Test public void testOpen()", "class_method_signature": "GDALTest.testOpen()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "canOpen", "open", "assertNotNull"]}, "focal_class": {"identifier": "GDAL", "superclass": "extends FileDriver<GDALDataset>", "interfaces": "implements RasterDriver<GDALDataset>", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(GDAL.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GDAL.class)", "var_name": "LOG"}, {"original_string": "static boolean INITIALIZED = false;", "modifier": "static", "type": "boolean", "declarator": "INITIALIZED = false", "var_name": "INITIALIZED"}, {"original_string": "Driver gdalDrv;", "modifier": "", "type": "Driver", "declarator": "gdalDrv", "var_name": "gdalDrv"}, {"original_string": "static final Set<Capability> CAPABILITIES = set(REPROJECT, RESAMPLE);", "modifier": "static final", "type": "Set<Capability>", "declarator": "CAPABILITIES = set(REPROJECT, RESAMPLE)", "var_name": "CAPABILITIES"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void init()", "full_signature": "public static void init()", "class_method_signature": "GDAL.init()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(File file)", "modifiers": "public static", "return": "GDALDataset", "signature": "GDALDataset open(File file)", "full_signature": "public static GDALDataset open(File file)", "class_method_signature": "GDAL.open(File file)", "testcase": false, "constructor": false}, {"identifier": "GDAL", "parameters": "()", "modifiers": "public", "return": "", "signature": " GDAL()", "full_signature": "public  GDAL()", "class_method_signature": "GDAL.GDAL()", "testcase": false, "constructor": true}, {"identifier": "isEnabled", "parameters": "(Messages messages)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnabled(Messages messages)", "full_signature": "@Override public boolean isEnabled(Messages messages)", "class_method_signature": "GDAL.isEnabled(Messages messages)", "testcase": false, "constructor": false}, {"identifier": "getGDALDriverName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGDALDriverName()", "full_signature": "public String getGDALDriverName()", "class_method_signature": "GDAL.getGDALDriverName()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "GDAL.name()", "testcase": false, "constructor": false}, {"identifier": "aliases", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> aliases()", "full_signature": "@Override public List<String> aliases()", "class_method_signature": "GDAL.aliases()", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "@Override public", "return": "Class<GDALDataset>", "signature": "Class<GDALDataset> type()", "full_signature": "@Override public Class<GDALDataset> type()", "class_method_signature": "GDAL.type()", "testcase": false, "constructor": false}, {"identifier": "family", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String family()", "full_signature": "@Override public String family()", "class_method_signature": "GDAL.family()", "testcase": false, "constructor": false}, {"identifier": "canOpen", "parameters": "(Map<?, Object> opts, Messages msgs)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canOpen(Map<?, Object> opts, Messages msgs)", "full_signature": "@Override public boolean canOpen(Map<?, Object> opts, Messages msgs)", "class_method_signature": "GDAL.canOpen(Map<?, Object> opts, Messages msgs)", "testcase": false, "constructor": false}, {"identifier": "canOpen", "parameters": "(File file, Map<?, Object> opts, Messages msgs)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canOpen(File file, Map<?, Object> opts, Messages msgs)", "full_signature": "@Override protected boolean canOpen(File file, Map<?, Object> opts, Messages msgs)", "class_method_signature": "GDAL.canOpen(File file, Map<?, Object> opts, Messages msgs)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(File file, Map<?, Object> opts)", "modifiers": "@Override protected", "return": "GDALDataset", "signature": "GDALDataset open(File file, Map<?, Object> opts)", "full_signature": "@Override protected GDALDataset open(File file, Map<?, Object> opts)", "class_method_signature": "GDAL.open(File file, Map<?, Object> opts)", "testcase": false, "constructor": false}, {"identifier": "capabilities", "parameters": "()", "modifiers": "@Override public", "return": "Set<Capability>", "signature": "Set<Capability> capabilities()", "full_signature": "@Override public Set<Capability> capabilities()", "class_method_signature": "GDAL.capabilities()", "testcase": false, "constructor": false}], "file": "format/gdal/src/main/java/io/jeo/gdal/GDAL.java"}, "focal_method": {"identifier": "open", "parameters": "(File file)", "modifiers": "public static", "return": "GDALDataset", "body": "public static GDALDataset open(File file) throws IOException {\n        return new GDAL().open(file, null);\n    }", "signature": "GDALDataset open(File file)", "full_signature": "public static GDALDataset open(File file)", "class_method_signature": "GDAL.open(File file)", "testcase": false, "constructor": false, "invocations": ["open"]}, "repository": {"repo_id": 12117077, "url": "https://github.com/jeo/jeo", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 15, "size": 6497, "license": "licensed"}}