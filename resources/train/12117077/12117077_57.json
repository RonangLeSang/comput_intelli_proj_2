{"test_class": {"identifier": "DirectoryRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DirectoryRepository repo;", "modifier": "", "type": "DirectoryRepository", "declarator": "repo", "var_name": "repo"}], "file": "contrib/repo/src/test/java/io/jeo/data/DirectoryRepositoryTest.java"}, "test_case": {"identifier": "testMetaFileWithOtherFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMetaFileWithOtherFile() throws Exception {\n        File root = clearRepo();\n\n        Files.touch(new File(root, \"baz.abc\"));\n        Files.touch(new File(root, \"baz.json\"));\n\n        JSONObject meta = new JSONObject();\n        meta.put(\"driver\", \"geojson\");\n\n        JSONObject opts = new JSONObject();\n        opts.put(\"file\", \"baz.json\");\n        meta.put(\"options\", opts);\n\n        writeMetaFile(meta, \"baz.jeo\");\n\n        final AtomicBoolean hit = new AtomicBoolean(false);\n        final Driver<?> d = new GeoJSON() {\n            @Override\n            public GeoJSONDataset open(File file, Map<?, Object> opts) throws IOException {\n                hit.set(true);\n                assertEquals(\"json\", Util.extension(file.getName()));\n                return super.open(file, opts);\n            }\n        };\n\n        DirectoryRepository repo2 = new DirectoryRepository(root, new DriverRegistry() {\n            @Override\n            public Iterator<Driver<?>> list() {\n                return (Iterator) Iterators.singletonIterator(d);\n            }\n        });\n\n        repo2.get(\"baz\", Object.class);\n        assertTrue(hit.get());\n    }", "signature": "void testMetaFileWithOtherFile()", "full_signature": "@Test public void testMetaFileWithOtherFile()", "class_method_signature": "DirectoryRepositoryTest.testMetaFileWithOtherFile()", "testcase": true, "constructor": false, "invocations": ["clearRepo", "touch", "touch", "put", "put", "put", "writeMetaFile", "set", "assertEquals", "extension", "getName", "open", "singletonIterator", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "DirectoryRepository", "superclass": "", "interfaces": "implements DataRepository", "fields": [{"original_string": "static Logger LOG = LoggerFactory.getLogger(DirectoryRepository.class);", "modifier": "static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DirectoryRepository.class)", "var_name": "LOG"}, {"original_string": "File baseDir;", "modifier": "", "type": "File", "declarator": "baseDir", "var_name": "baseDir"}, {"original_string": "DriverRegistry drivers;", "modifier": "", "type": "DriverRegistry", "declarator": "drivers", "var_name": "drivers"}, {"original_string": "List<String> exts;", "modifier": "", "type": "List<String>", "declarator": "exts", "var_name": "exts"}], "methods": [{"identifier": "DirectoryRepository", "parameters": "(File baseDir, String... exts)", "modifiers": "public", "return": "", "signature": " DirectoryRepository(File baseDir, String... exts)", "full_signature": "public  DirectoryRepository(File baseDir, String... exts)", "class_method_signature": "DirectoryRepository.DirectoryRepository(File baseDir, String... exts)", "testcase": false, "constructor": true}, {"identifier": "DirectoryRepository", "parameters": "(File baseDir, DriverRegistry drivers, String... exts)", "modifiers": "public", "return": "", "signature": " DirectoryRepository(File baseDir, DriverRegistry drivers, String... exts)", "full_signature": "public  DirectoryRepository(File baseDir, DriverRegistry drivers, String... exts)", "class_method_signature": "DirectoryRepository.DirectoryRepository(File baseDir, DriverRegistry drivers, String... exts)", "testcase": false, "constructor": true}, {"identifier": "getDirectory", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getDirectory()", "full_signature": "public File getDirectory()", "class_method_signature": "DirectoryRepository.getDirectory()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(Filter<? super Handle<?>> filter)", "modifiers": "@Override public", "return": "Iterable<Handle<?>>", "signature": "Iterable<Handle<?>> query(Filter<? super Handle<?>> filter)", "full_signature": "@Override public Iterable<Handle<?>> query(Filter<? super Handle<?>> filter)", "class_method_signature": "DirectoryRepository.query(Filter<? super Handle<?>> filter)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String key, Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T get(final String key, Class<T> type)", "full_signature": "@Override public T get(final String key, Class<T> type)", "class_method_signature": "DirectoryRepository.get(final String key, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DirectoryRepository.close()", "testcase": false, "constructor": false}, {"identifier": "readMetaFile", "parameters": "(FileGroup grp)", "modifiers": "", "return": "Pair<Driver<?>,Map<String,Object>>", "signature": "Pair<Driver<?>,Map<String,Object>> readMetaFile(FileGroup grp)", "full_signature": " Pair<Driver<?>,Map<String,Object>> readMetaFile(FileGroup grp)", "class_method_signature": "DirectoryRepository.readMetaFile(FileGroup grp)", "testcase": false, "constructor": false}, {"identifier": "objOrNull", "parameters": "(FileGroup grp, Class<T> type)", "modifiers": "", "return": "T", "signature": "T objOrNull(FileGroup grp, Class<T> type)", "full_signature": " T objOrNull(FileGroup grp, Class<T> type)", "class_method_signature": "DirectoryRepository.objOrNull(FileGroup grp, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "objOrNull", "parameters": "(Object obj, FileGroup grp, Class<T> type)", "modifiers": "", "return": "T", "signature": "T objOrNull(Object obj, FileGroup grp, Class<T> type)", "full_signature": " T objOrNull(Object obj, FileGroup grp, Class<T> type)", "class_method_signature": "DirectoryRepository.objOrNull(Object obj, FileGroup grp, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "handleType", "parameters": "(Driver<?> drv)", "modifiers": "", "return": "Class<?>", "signature": "Class<?> handleType(Driver<?> drv)", "full_signature": " Class<?> handleType(Driver<?> drv)", "class_method_signature": "DirectoryRepository.handleType(Driver<?> drv)", "testcase": false, "constructor": false}, {"identifier": "listFiles", "parameters": "(FilenameFilter filter)", "modifiers": "", "return": "Map<String,FileGroup>", "signature": "Map<String,FileGroup> listFiles(FilenameFilter filter)", "full_signature": " Map<String,FileGroup> listFiles(FilenameFilter filter)", "class_method_signature": "DirectoryRepository.listFiles(FilenameFilter filter)", "testcase": false, "constructor": false}], "file": "contrib/repo/src/main/java/io/jeo/data/DirectoryRepository.java"}, "focal_method": {"identifier": "get", "parameters": "(final String key, Class<T> type)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T get(final String key, Class<T> type) throws IOException {\n        CompositeFilenameFilter fileFilter = new CompositeFilenameFilter(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n                String base = Util.base(name);\n                return base.equalsIgnoreCase(key);\n            }\n        });\n        if (exts != null) {\n            fileFilter.and(new ExtensionFilter(exts));\n        }\n\n        Map<String,FileGroup> files = listFiles(fileFilter);\n        if (!files.isEmpty()) {\n            FileGroup grp = files.values().iterator().next();\n            return objOrNull(grp, type);\n        }\n\n        return null;\n    }", "signature": "T get(final String key, Class<T> type)", "full_signature": "@Override public T get(final String key, Class<T> type)", "class_method_signature": "DirectoryRepository.get(final String key, Class<T> type)", "testcase": false, "constructor": false, "invocations": ["base", "equalsIgnoreCase", "and", "listFiles", "isEmpty", "next", "iterator", "values", "objOrNull"]}, "repository": {"repo_id": 12117077, "url": "https://github.com/jeo/jeo", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 15, "size": 6497, "license": "licensed"}}