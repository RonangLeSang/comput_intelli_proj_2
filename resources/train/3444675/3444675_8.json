{"test_class": {"identifier": "FlattrAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "flattr4j-core/src/test/java/org/shredzone/flattr4j/oauth/FlattrAuthenticatorTest.java"}, "test_case": {"identifier": "testAuthenticate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthenticate() throws FlattrException {\n        ConsumerKey ck = new ConsumerKey(\"ck-abc\", \"ck-123\");\n        FlattrAuthenticator auth = new FlattrAuthenticator(ck);\n        auth.getScope().add(Scope.FLATTR);\n        auth.getScope().add(Scope.THING);\n\n        String url = auth.authenticate();\n        assertThat(url, is(\"https://flattr.com/oauth/authorize?response_type=code&client_id=ck-abc&scope=flattr+thing\"));\n    }", "signature": "void testAuthenticate()", "full_signature": "@Test public void testAuthenticate()", "class_method_signature": "FlattrAuthenticatorTest.testAuthenticate()", "testcase": true, "constructor": false, "invocations": ["add", "getScope", "add", "getScope", "authenticate", "assertThat", "is"]}, "focal_class": {"identifier": "FlattrAuthenticator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ENCODING = \"utf-8\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING = \"utf-8\"", "var_name": "ENCODING"}, {"original_string": "private final ConsumerKey consumerKey;", "modifier": "private final", "type": "ConsumerKey", "declarator": "consumerKey", "var_name": "consumerKey"}, {"original_string": "private String requestTokenUrl = \"https://flattr.com/oauth/authorize\";", "modifier": "private", "type": "String", "declarator": "requestTokenUrl = \"https://flattr.com/oauth/authorize\"", "var_name": "requestTokenUrl"}, {"original_string": "private String accessTokenUrl = \"https://flattr.com/oauth/token\";", "modifier": "private", "type": "String", "declarator": "accessTokenUrl = \"https://flattr.com/oauth/token\"", "var_name": "accessTokenUrl"}, {"original_string": "private String responseType = \"code\";", "modifier": "private", "type": "String", "declarator": "responseType = \"code\"", "var_name": "responseType"}, {"original_string": "private String callbackUrl = null;", "modifier": "private", "type": "String", "declarator": "callbackUrl = null", "var_name": "callbackUrl"}, {"original_string": "private EnumSet<Scope> scope = EnumSet.noneOf(Scope.class);", "modifier": "private", "type": "EnumSet<Scope>", "declarator": "scope = EnumSet.noneOf(Scope.class)", "var_name": "scope"}], "methods": [{"identifier": "getRequestTokenUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestTokenUrl()", "full_signature": "public String getRequestTokenUrl()", "class_method_signature": "FlattrAuthenticator.getRequestTokenUrl()", "testcase": false, "constructor": false}, {"identifier": "setRequestTokenUrl", "parameters": "(String requestTokenUrl)", "modifiers": "public", "return": "void", "signature": "void setRequestTokenUrl(String requestTokenUrl)", "full_signature": "public void setRequestTokenUrl(String requestTokenUrl)", "class_method_signature": "FlattrAuthenticator.setRequestTokenUrl(String requestTokenUrl)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAccessTokenUrl()", "full_signature": "public String getAccessTokenUrl()", "class_method_signature": "FlattrAuthenticator.getAccessTokenUrl()", "testcase": false, "constructor": false}, {"identifier": "setAccessTokenUrl", "parameters": "(String accessTokenUrl)", "modifiers": "public", "return": "void", "signature": "void setAccessTokenUrl(String accessTokenUrl)", "full_signature": "public void setAccessTokenUrl(String accessTokenUrl)", "class_method_signature": "FlattrAuthenticator.setAccessTokenUrl(String accessTokenUrl)", "testcase": false, "constructor": false}, {"identifier": "getCallbackUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCallbackUrl()", "full_signature": "public String getCallbackUrl()", "class_method_signature": "FlattrAuthenticator.getCallbackUrl()", "testcase": false, "constructor": false}, {"identifier": "setCallbackUrl", "parameters": "(String callbackUrl)", "modifiers": "public", "return": "void", "signature": "void setCallbackUrl(String callbackUrl)", "full_signature": "public void setCallbackUrl(String callbackUrl)", "class_method_signature": "FlattrAuthenticator.setCallbackUrl(String callbackUrl)", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "public", "return": "EnumSet<Scope>", "signature": "EnumSet<Scope> getScope()", "full_signature": "public EnumSet<Scope> getScope()", "class_method_signature": "FlattrAuthenticator.getScope()", "testcase": false, "constructor": false}, {"identifier": "setScope", "parameters": "(EnumSet<Scope> scope)", "modifiers": "public", "return": "void", "signature": "void setScope(EnumSet<Scope> scope)", "full_signature": "public void setScope(EnumSet<Scope> scope)", "class_method_signature": "FlattrAuthenticator.setScope(EnumSet<Scope> scope)", "testcase": false, "constructor": false}, {"identifier": "setResponseType", "parameters": "(String responseType)", "modifiers": "public", "return": "void", "signature": "void setResponseType(String responseType)", "full_signature": "public void setResponseType(String responseType)", "class_method_signature": "FlattrAuthenticator.setResponseType(String responseType)", "testcase": false, "constructor": false}, {"identifier": "getResponseType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResponseType()", "full_signature": "public String getResponseType()", "class_method_signature": "FlattrAuthenticator.getResponseType()", "testcase": false, "constructor": false}, {"identifier": "FlattrAuthenticator", "parameters": "(ConsumerKey consumerKey)", "modifiers": "public", "return": "", "signature": " FlattrAuthenticator(ConsumerKey consumerKey)", "full_signature": "public  FlattrAuthenticator(ConsumerKey consumerKey)", "class_method_signature": "FlattrAuthenticator.FlattrAuthenticator(ConsumerKey consumerKey)", "testcase": false, "constructor": true}, {"identifier": "FlattrAuthenticator", "parameters": "(String key, String secret)", "modifiers": "public", "return": "", "signature": " FlattrAuthenticator(String key, String secret)", "full_signature": "public  FlattrAuthenticator(String key, String secret)", "class_method_signature": "FlattrAuthenticator.FlattrAuthenticator(String key, String secret)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String authenticate()", "full_signature": "public String authenticate()", "class_method_signature": "FlattrAuthenticator.authenticate()", "testcase": false, "constructor": false}, {"identifier": "fetchAccessToken", "parameters": "(String code)", "modifiers": "public", "return": "AccessToken", "signature": "AccessToken fetchAccessToken(String code)", "full_signature": "public AccessToken fetchAccessToken(String code)", "class_method_signature": "FlattrAuthenticator.fetchAccessToken(String code)", "testcase": false, "constructor": false}, {"identifier": "createConnector", "parameters": "()", "modifiers": "protected", "return": "Connector", "signature": "Connector createConnector()", "full_signature": "protected Connector createConnector()", "class_method_signature": "FlattrAuthenticator.createConnector()", "testcase": false, "constructor": false}, {"identifier": "buildScopeString", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String buildScopeString()", "full_signature": "protected String buildScopeString()", "class_method_signature": "FlattrAuthenticator.buildScopeString()", "testcase": false, "constructor": false}], "file": "flattr4j-core/src/main/java/org/shredzone/flattr4j/oauth/FlattrAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String authenticate() throws FlattrException {\n        try {\n            StringBuilder url = new StringBuilder();\n            url.append(requestTokenUrl);\n            url.append(\"?response_type=\").append(URLEncoder.encode(responseType, ENCODING));\n            url.append(\"&client_id=\").append(URLEncoder.encode(consumerKey.getKey(), ENCODING));\n\n            if (callbackUrl != null) {\n                url.append(\"&redirect_uri=\").append(URLEncoder.encode(callbackUrl, ENCODING));\n            }\n\n            if (!scope.isEmpty()) {\n                url.append(\"&scope=\").append(URLEncoder.encode(buildScopeString(), ENCODING));\n            }\n\n            return url.toString();\n        } catch (UnsupportedEncodingException ex) {\n            // should never be thrown, as \"utf-8\" encoding is available on any VM\n            throw new IllegalStateException(ex);\n        }\n    }", "signature": "String authenticate()", "full_signature": "public String authenticate()", "class_method_signature": "FlattrAuthenticator.authenticate()", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "encode", "append", "append", "encode", "getKey", "append", "append", "encode", "isEmpty", "append", "append", "encode", "buildScopeString", "toString"]}, "repository": {"repo_id": 3444675, "url": "https://github.com/shred/flattr4j", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 10, "size": 774, "license": "licensed"}}