{"test_class": {"identifier": "HBaseClient2Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String COLUMN_FAMILY = \"cf\";", "modifier": "private final static", "type": "String", "declarator": "COLUMN_FAMILY = \"cf\"", "var_name": "COLUMN_FAMILY"}, {"original_string": "private static HBaseTestingUtility testingUtil;", "modifier": "private static", "type": "HBaseTestingUtility", "declarator": "testingUtil", "var_name": "testingUtil"}, {"original_string": "private HBaseClient2 client;", "modifier": "private", "type": "HBaseClient2", "declarator": "client", "var_name": "client"}, {"original_string": "private Table table = null;", "modifier": "private", "type": "Table", "declarator": "table = null", "var_name": "table"}, {"original_string": "private String tableName;", "modifier": "private", "type": "String", "declarator": "tableName", "var_name": "tableName"}], "file": "hbase2/src/test/java/site/ycsb/db/hbase2/HBaseClient2Test.java"}, "test_case": {"identifier": "testReadMissingRow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReadMissingRow() throws Exception {\n    final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();\n    final Status status = client.read(tableName, \"Missing row\", null, result);\n    assertEquals(Status.NOT_FOUND, status);\n    assertEquals(0, result.size());\n  }", "signature": "void testReadMissingRow()", "full_signature": "@Test public void testReadMissingRow()", "class_method_signature": "HBaseClient2Test.testReadMissingRow()", "testcase": true, "constructor": false, "invocations": ["read", "assertEquals", "assertEquals", "size"]}, "focal_class": {"identifier": "HBaseClient2", "superclass": "extends site.ycsb.DB", "interfaces": "", "fields": [{"original_string": "private static final AtomicInteger THREAD_COUNT = new AtomicInteger(0);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "THREAD_COUNT = new AtomicInteger(0)", "var_name": "THREAD_COUNT"}, {"original_string": "private Configuration config = HBaseConfiguration.create();", "modifier": "private", "type": "Configuration", "declarator": "config = HBaseConfiguration.create()", "var_name": "config"}, {"original_string": "private boolean debug = false;", "modifier": "private", "type": "boolean", "declarator": "debug = false", "var_name": "debug"}, {"original_string": "private String tableName = \"\";", "modifier": "private", "type": "String", "declarator": "tableName = \"\"", "var_name": "tableName"}, {"original_string": "private static Connection connection = null;", "modifier": "private static", "type": "Connection", "declarator": "connection = null", "var_name": "connection"}, {"original_string": "private Table currentTable = null;", "modifier": "private", "type": "Table", "declarator": "currentTable = null", "var_name": "currentTable"}, {"original_string": "private BufferedMutator bufferedMutator = null;", "modifier": "private", "type": "BufferedMutator", "declarator": "bufferedMutator = null", "var_name": "bufferedMutator"}, {"original_string": "private String columnFamily = \"\";", "modifier": "private", "type": "String", "declarator": "columnFamily = \"\"", "var_name": "columnFamily"}, {"original_string": "private byte[] columnFamilyBytes;", "modifier": "private", "type": "byte[]", "declarator": "columnFamilyBytes", "var_name": "columnFamilyBytes"}, {"original_string": "private Durability durability = Durability.USE_DEFAULT;", "modifier": "private", "type": "Durability", "declarator": "durability = Durability.USE_DEFAULT", "var_name": "durability"}, {"original_string": "private boolean usePageFilter = true;", "modifier": "private", "type": "boolean", "declarator": "usePageFilter = true", "var_name": "usePageFilter"}, {"original_string": "private boolean clientSideBuffering = false;", "modifier": "private", "type": "boolean", "declarator": "clientSideBuffering = false", "var_name": "clientSideBuffering"}, {"original_string": "private long writeBufferSize = 1024 * 1024 * 12;", "modifier": "private", "type": "long", "declarator": "writeBufferSize = 1024 * 1024 * 12", "var_name": "writeBufferSize"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "HBaseClient2.init()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "HBaseClient2.cleanup()", "testcase": false, "constructor": false}, {"identifier": "getHTable", "parameters": "(String table)", "modifiers": "public", "return": "void", "signature": "void getHTable(String table)", "full_signature": "public void getHTable(String table)", "class_method_signature": "HBaseClient2.getHTable(String table)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "modifiers": "public", "return": "Status", "signature": "Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "full_signature": "public Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "class_method_signature": "HBaseClient2.read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "(String table, String startkey, int recordcount,\n      Set<String> fields, Vector<HashMap<String, ByteIterator>> result)", "modifiers": "@Override public", "return": "Status", "signature": "Status scan(String table, String startkey, int recordcount,\n      Set<String> fields, Vector<HashMap<String, ByteIterator>> result)", "full_signature": "@Override public Status scan(String table, String startkey, int recordcount,\n      Set<String> fields, Vector<HashMap<String, ByteIterator>> result)", "class_method_signature": "HBaseClient2.scan(String table, String startkey, int recordcount,\n      Set<String> fields, Vector<HashMap<String, ByteIterator>> result)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String table, String key,\n      Map<String, ByteIterator> values)", "modifiers": "@Override public", "return": "Status", "signature": "Status update(String table, String key,\n      Map<String, ByteIterator> values)", "full_signature": "@Override public Status update(String table, String key,\n      Map<String, ByteIterator> values)", "class_method_signature": "HBaseClient2.update(String table, String key,\n      Map<String, ByteIterator> values)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(String table, String key,\n                       Map<String, ByteIterator> values)", "modifiers": "@Override public", "return": "Status", "signature": "Status insert(String table, String key,\n                       Map<String, ByteIterator> values)", "full_signature": "@Override public Status insert(String table, String key,\n                       Map<String, ByteIterator> values)", "class_method_signature": "HBaseClient2.insert(String table, String key,\n                       Map<String, ByteIterator> values)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String table, String key)", "modifiers": "@Override public", "return": "Status", "signature": "Status delete(String table, String key)", "full_signature": "@Override public Status delete(String table, String key)", "class_method_signature": "HBaseClient2.delete(String table, String key)", "testcase": false, "constructor": false}, {"identifier": "setConfiguration", "parameters": "(final Configuration newConfig)", "modifiers": "", "return": "void", "signature": "void setConfiguration(final Configuration newConfig)", "full_signature": " void setConfiguration(final Configuration newConfig)", "class_method_signature": "HBaseClient2.setConfiguration(final Configuration newConfig)", "testcase": false, "constructor": false}], "file": "hbase2/src/main/java/site/ycsb/db/hbase2/HBaseClient2.java"}, "focal_method": {"identifier": "read", "parameters": "(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "modifiers": "public", "return": "Status", "body": "public Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result) {\n    // if this is a \"new\" table, init HTable object. Else, use existing one\n    if (!tableName.equals(table)) {\n      currentTable = null;\n      try {\n        getHTable(table);\n        tableName = table;\n      } catch (IOException e) {\n        System.err.println(\"Error accessing HBase table: \" + e);\n        return Status.ERROR;\n      }\n    }\n\n    Result r = null;\n    try {\n      if (debug) {\n        System.out\n            .println(\"Doing read from HBase columnfamily \" + columnFamily);\n        System.out.println(\"Doing read for key: \" + key);\n      }\n      Get g = new Get(Bytes.toBytes(key));\n      if (fields == null) {\n        g.addFamily(columnFamilyBytes);\n      } else {\n        for (String field : fields) {\n          g.addColumn(columnFamilyBytes, Bytes.toBytes(field));\n        }\n      }\n      r = currentTable.get(g);\n    } catch (IOException e) {\n      if (debug) {\n        System.err.println(\"Error doing get: \" + e);\n      }\n      return Status.ERROR;\n    } catch (ConcurrentModificationException e) {\n      // do nothing for now...need to understand HBase concurrency model better\n      return Status.ERROR;\n    }\n\n    if (r.isEmpty()) {\n      return Status.NOT_FOUND;\n    }\n\n    while (r.advance()) {\n      final Cell c = r.current();\n      result.put(Bytes.toString(CellUtil.cloneQualifier(c)),\n          new ByteArrayByteIterator(CellUtil.cloneValue(c)));\n      if (debug) {\n        System.out.println(\n            \"Result for field: \" + Bytes.toString(CellUtil.cloneQualifier(c))\n                + \" is: \" + Bytes.toString(CellUtil.cloneValue(c)));\n      }\n    }\n    return Status.OK;\n  }", "signature": "Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "full_signature": "public Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "class_method_signature": "HBaseClient2.read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "testcase": false, "constructor": false, "invocations": ["equals", "getHTable", "println", "println", "println", "toBytes", "addFamily", "addColumn", "toBytes", "get", "println", "isEmpty", "advance", "current", "put", "toString", "cloneQualifier", "cloneValue", "println", "toString", "cloneQualifier", "toString", "cloneValue"]}, "repository": {"repo_id": 618492, "url": "https://github.com/brianfrankcooper/YCSB", "stars": 2890, "created": "4/19/2010 8:52:11 PM +00:00", "updates": "2020-01-27T04:05:30+00:00", "fork": "False", "license": "licensed"}}