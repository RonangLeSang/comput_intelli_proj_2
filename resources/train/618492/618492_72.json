{"test_class": {"identifier": "CassandraCQLClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static long timeout = 120000L;", "modifier": "private final static", "type": "long", "declarator": "timeout = 120000L", "var_name": "timeout"}, {"original_string": "private final static String TABLE = \"usertable\";", "modifier": "private final static", "type": "String", "declarator": "TABLE = \"usertable\"", "var_name": "TABLE"}, {"original_string": "private final static String HOST = \"localhost\";", "modifier": "private final static", "type": "String", "declarator": "HOST = \"localhost\"", "var_name": "HOST"}, {"original_string": "private final static int PORT = 9142;", "modifier": "private final static", "type": "int", "declarator": "PORT = 9142", "var_name": "PORT"}, {"original_string": "private final static String DEFAULT_ROW_KEY = \"user1\";", "modifier": "private final static", "type": "String", "declarator": "DEFAULT_ROW_KEY = \"user1\"", "var_name": "DEFAULT_ROW_KEY"}, {"original_string": "private CassandraCQLClient client;", "modifier": "private", "type": "CassandraCQLClient", "declarator": "client", "var_name": "client"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "@ClassRule\n  public static CassandraCQLUnit cassandraUnit = new CassandraCQLUnit(\n    new ClassPathCQLDataSet(\"ycsb.cql\", \"ycsb\"), null, timeout);", "modifier": "@ClassRule\n  public static", "type": "CassandraCQLUnit", "declarator": "cassandraUnit = new CassandraCQLUnit(\n    new ClassPathCQLDataSet(\"ycsb.cql\", \"ycsb\"), null, timeout)", "var_name": "cassandraUnit"}], "file": "cassandra/src/test/java/site/ycsb/db/CassandraCQLClientTest.java"}, "test_case": {"identifier": "testRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRead() throws Exception {\n    insertRow();\n\n    final HashMap<String, ByteIterator> result = new HashMap<String, ByteIterator>();\n    final Status status = client.read(TABLE, DEFAULT_ROW_KEY, null, result);\n    assertThat(status, is(Status.OK));\n    assertThat(result.entrySet(), hasSize(11));\n    assertThat(result, hasEntry(\"field2\", null));\n\n    final HashMap<String, String> strResult = new HashMap<String, String>();\n    for (final Map.Entry<String, ByteIterator> e : result.entrySet()) {\n      if (e.getValue() != null) {\n        strResult.put(e.getKey(), e.getValue().toString());\n      }\n    }\n    assertThat(strResult, hasEntry(CassandraCQLClient.YCSB_KEY, DEFAULT_ROW_KEY));\n    assertThat(strResult, hasEntry(\"field0\", \"value1\"));\n    assertThat(strResult, hasEntry(\"field1\", \"value2\"));\n  }", "signature": "void testRead()", "full_signature": "@Test public void testRead()", "class_method_signature": "CassandraCQLClientTest.testRead()", "testcase": true, "constructor": false, "invocations": ["insertRow", "read", "assertThat", "is", "assertThat", "entrySet", "hasSize", "assertThat", "hasEntry", "entrySet", "getValue", "put", "getKey", "toString", "getValue", "assertThat", "hasEntry", "assertThat", "hasEntry", "assertThat", "hasEntry"]}, "focal_class": {"identifier": "CassandraCQLClient", "superclass": "extends DB", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(CassandraCQLClient.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CassandraCQLClient.class)", "var_name": "logger"}, {"original_string": "private static Cluster cluster = null;", "modifier": "private static", "type": "Cluster", "declarator": "cluster = null", "var_name": "cluster"}, {"original_string": "private static Session session = null;", "modifier": "private static", "type": "Session", "declarator": "session = null", "var_name": "session"}, {"original_string": "private static ConcurrentMap<Set<String>, PreparedStatement> readStmts =\n      new ConcurrentHashMap<Set<String>, PreparedStatement>();", "modifier": "private static", "type": "ConcurrentMap<Set<String>, PreparedStatement>", "declarator": "readStmts =\n      new ConcurrentHashMap<Set<String>, PreparedStatement>()", "var_name": "readStmts"}, {"original_string": "private static ConcurrentMap<Set<String>, PreparedStatement> scanStmts =\n      new ConcurrentHashMap<Set<String>, PreparedStatement>();", "modifier": "private static", "type": "ConcurrentMap<Set<String>, PreparedStatement>", "declarator": "scanStmts =\n      new ConcurrentHashMap<Set<String>, PreparedStatement>()", "var_name": "scanStmts"}, {"original_string": "private static ConcurrentMap<Set<String>, PreparedStatement> insertStmts =\n      new ConcurrentHashMap<Set<String>, PreparedStatement>();", "modifier": "private static", "type": "ConcurrentMap<Set<String>, PreparedStatement>", "declarator": "insertStmts =\n      new ConcurrentHashMap<Set<String>, PreparedStatement>()", "var_name": "insertStmts"}, {"original_string": "private static ConcurrentMap<Set<String>, PreparedStatement> updateStmts =\n      new ConcurrentHashMap<Set<String>, PreparedStatement>();", "modifier": "private static", "type": "ConcurrentMap<Set<String>, PreparedStatement>", "declarator": "updateStmts =\n      new ConcurrentHashMap<Set<String>, PreparedStatement>()", "var_name": "updateStmts"}, {"original_string": "private static AtomicReference<PreparedStatement> readAllStmt =\n      new AtomicReference<PreparedStatement>();", "modifier": "private static", "type": "AtomicReference<PreparedStatement>", "declarator": "readAllStmt =\n      new AtomicReference<PreparedStatement>()", "var_name": "readAllStmt"}, {"original_string": "private static AtomicReference<PreparedStatement> scanAllStmt =\n      new AtomicReference<PreparedStatement>();", "modifier": "private static", "type": "AtomicReference<PreparedStatement>", "declarator": "scanAllStmt =\n      new AtomicReference<PreparedStatement>()", "var_name": "scanAllStmt"}, {"original_string": "private static AtomicReference<PreparedStatement> deleteStmt =\n      new AtomicReference<PreparedStatement>();", "modifier": "private static", "type": "AtomicReference<PreparedStatement>", "declarator": "deleteStmt =\n      new AtomicReference<PreparedStatement>()", "var_name": "deleteStmt"}, {"original_string": "private static ConsistencyLevel readConsistencyLevel = ConsistencyLevel.ONE;", "modifier": "private static", "type": "ConsistencyLevel", "declarator": "readConsistencyLevel = ConsistencyLevel.ONE", "var_name": "readConsistencyLevel"}, {"original_string": "private static ConsistencyLevel writeConsistencyLevel = ConsistencyLevel.ONE;", "modifier": "private static", "type": "ConsistencyLevel", "declarator": "writeConsistencyLevel = ConsistencyLevel.ONE", "var_name": "writeConsistencyLevel"}, {"original_string": "public static final String YCSB_KEY = \"y_id\";", "modifier": "public static final", "type": "String", "declarator": "YCSB_KEY = \"y_id\"", "var_name": "YCSB_KEY"}, {"original_string": "public static final String KEYSPACE_PROPERTY = \"cassandra.keyspace\";", "modifier": "public static final", "type": "String", "declarator": "KEYSPACE_PROPERTY = \"cassandra.keyspace\"", "var_name": "KEYSPACE_PROPERTY"}, {"original_string": "public static final String KEYSPACE_PROPERTY_DEFAULT = \"ycsb\";", "modifier": "public static final", "type": "String", "declarator": "KEYSPACE_PROPERTY_DEFAULT = \"ycsb\"", "var_name": "KEYSPACE_PROPERTY_DEFAULT"}, {"original_string": "public static final String USERNAME_PROPERTY = \"cassandra.username\";", "modifier": "public static final", "type": "String", "declarator": "USERNAME_PROPERTY = \"cassandra.username\"", "var_name": "USERNAME_PROPERTY"}, {"original_string": "public static final String PASSWORD_PROPERTY = \"cassandra.password\";", "modifier": "public static final", "type": "String", "declarator": "PASSWORD_PROPERTY = \"cassandra.password\"", "var_name": "PASSWORD_PROPERTY"}, {"original_string": "public static final String HOSTS_PROPERTY = \"hosts\";", "modifier": "public static final", "type": "String", "declarator": "HOSTS_PROPERTY = \"hosts\"", "var_name": "HOSTS_PROPERTY"}, {"original_string": "public static final String PORT_PROPERTY = \"port\";", "modifier": "public static final", "type": "String", "declarator": "PORT_PROPERTY = \"port\"", "var_name": "PORT_PROPERTY"}, {"original_string": "public static final String PORT_PROPERTY_DEFAULT = \"9042\";", "modifier": "public static final", "type": "String", "declarator": "PORT_PROPERTY_DEFAULT = \"9042\"", "var_name": "PORT_PROPERTY_DEFAULT"}, {"original_string": "public static final String READ_CONSISTENCY_LEVEL_PROPERTY =\n      \"cassandra.readconsistencylevel\";", "modifier": "public static final", "type": "String", "declarator": "READ_CONSISTENCY_LEVEL_PROPERTY =\n      \"cassandra.readconsistencylevel\"", "var_name": "READ_CONSISTENCY_LEVEL_PROPERTY"}, {"original_string": "public static final String READ_CONSISTENCY_LEVEL_PROPERTY_DEFAULT = \"ONE\";", "modifier": "public static final", "type": "String", "declarator": "READ_CONSISTENCY_LEVEL_PROPERTY_DEFAULT = \"ONE\"", "var_name": "READ_CONSISTENCY_LEVEL_PROPERTY_DEFAULT"}, {"original_string": "public static final String WRITE_CONSISTENCY_LEVEL_PROPERTY =\n      \"cassandra.writeconsistencylevel\";", "modifier": "public static final", "type": "String", "declarator": "WRITE_CONSISTENCY_LEVEL_PROPERTY =\n      \"cassandra.writeconsistencylevel\"", "var_name": "WRITE_CONSISTENCY_LEVEL_PROPERTY"}, {"original_string": "public static final String WRITE_CONSISTENCY_LEVEL_PROPERTY_DEFAULT = \"ONE\";", "modifier": "public static final", "type": "String", "declarator": "WRITE_CONSISTENCY_LEVEL_PROPERTY_DEFAULT = \"ONE\"", "var_name": "WRITE_CONSISTENCY_LEVEL_PROPERTY_DEFAULT"}, {"original_string": "public static final String MAX_CONNECTIONS_PROPERTY =\n      \"cassandra.maxconnections\";", "modifier": "public static final", "type": "String", "declarator": "MAX_CONNECTIONS_PROPERTY =\n      \"cassandra.maxconnections\"", "var_name": "MAX_CONNECTIONS_PROPERTY"}, {"original_string": "public static final String CORE_CONNECTIONS_PROPERTY =\n      \"cassandra.coreconnections\";", "modifier": "public static final", "type": "String", "declarator": "CORE_CONNECTIONS_PROPERTY =\n      \"cassandra.coreconnections\"", "var_name": "CORE_CONNECTIONS_PROPERTY"}, {"original_string": "public static final String CONNECT_TIMEOUT_MILLIS_PROPERTY =\n      \"cassandra.connecttimeoutmillis\";", "modifier": "public static final", "type": "String", "declarator": "CONNECT_TIMEOUT_MILLIS_PROPERTY =\n      \"cassandra.connecttimeoutmillis\"", "var_name": "CONNECT_TIMEOUT_MILLIS_PROPERTY"}, {"original_string": "public static final String READ_TIMEOUT_MILLIS_PROPERTY =\n      \"cassandra.readtimeoutmillis\";", "modifier": "public static final", "type": "String", "declarator": "READ_TIMEOUT_MILLIS_PROPERTY =\n      \"cassandra.readtimeoutmillis\"", "var_name": "READ_TIMEOUT_MILLIS_PROPERTY"}, {"original_string": "public static final String TRACING_PROPERTY = \"cassandra.tracing\";", "modifier": "public static final", "type": "String", "declarator": "TRACING_PROPERTY = \"cassandra.tracing\"", "var_name": "TRACING_PROPERTY"}, {"original_string": "public static final String TRACING_PROPERTY_DEFAULT = \"false\";", "modifier": "public static final", "type": "String", "declarator": "TRACING_PROPERTY_DEFAULT = \"false\"", "var_name": "TRACING_PROPERTY_DEFAULT"}, {"original_string": "public static final String USE_SSL_CONNECTION = \"cassandra.useSSL\";", "modifier": "public static final", "type": "String", "declarator": "USE_SSL_CONNECTION = \"cassandra.useSSL\"", "var_name": "USE_SSL_CONNECTION"}, {"original_string": "private static final String DEFAULT_USE_SSL_CONNECTION = \"false\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_USE_SSL_CONNECTION = \"false\"", "var_name": "DEFAULT_USE_SSL_CONNECTION"}, {"original_string": "private static final AtomicInteger INIT_COUNT = new AtomicInteger(0);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "INIT_COUNT = new AtomicInteger(0)", "var_name": "INIT_COUNT"}, {"original_string": "private static boolean debug = false;", "modifier": "private static", "type": "boolean", "declarator": "debug = false", "var_name": "debug"}, {"original_string": "private static boolean trace = false;", "modifier": "private static", "type": "boolean", "declarator": "trace = false", "var_name": "trace"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "CassandraCQLClient.init()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "CassandraCQLClient.cleanup()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "modifiers": "@Override public", "return": "Status", "signature": "Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "full_signature": "@Override public Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "class_method_signature": "CassandraCQLClient.read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "(String table, String startkey, int recordcount,\n      Set<String> fields, Vector<HashMap<String, ByteIterator>> result)", "modifiers": "@Override public", "return": "Status", "signature": "Status scan(String table, String startkey, int recordcount,\n      Set<String> fields, Vector<HashMap<String, ByteIterator>> result)", "full_signature": "@Override public Status scan(String table, String startkey, int recordcount,\n      Set<String> fields, Vector<HashMap<String, ByteIterator>> result)", "class_method_signature": "CassandraCQLClient.scan(String table, String startkey, int recordcount,\n      Set<String> fields, Vector<HashMap<String, ByteIterator>> result)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String table, String key, Map<String, ByteIterator> values)", "modifiers": "@Override public", "return": "Status", "signature": "Status update(String table, String key, Map<String, ByteIterator> values)", "full_signature": "@Override public Status update(String table, String key, Map<String, ByteIterator> values)", "class_method_signature": "CassandraCQLClient.update(String table, String key, Map<String, ByteIterator> values)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(String table, String key, Map<String, ByteIterator> values)", "modifiers": "@Override public", "return": "Status", "signature": "Status insert(String table, String key, Map<String, ByteIterator> values)", "full_signature": "@Override public Status insert(String table, String key, Map<String, ByteIterator> values)", "class_method_signature": "CassandraCQLClient.insert(String table, String key, Map<String, ByteIterator> values)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String table, String key)", "modifiers": "@Override public", "return": "Status", "signature": "Status delete(String table, String key)", "full_signature": "@Override public Status delete(String table, String key)", "class_method_signature": "CassandraCQLClient.delete(String table, String key)", "testcase": false, "constructor": false}], "file": "cassandra/src/main/java/site/ycsb/db/CassandraCQLClient.java"}, "focal_method": {"identifier": "read", "parameters": "(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "modifiers": "@Override public", "return": "Status", "body": "@Override\n  public Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result) {\n    try {\n      PreparedStatement stmt = (fields == null) ? readAllStmt.get() : readStmts.get(fields);\n\n      // Prepare statement on demand\n      if (stmt == null) {\n        Select.Builder selectBuilder;\n\n        if (fields == null) {\n          selectBuilder = QueryBuilder.select().all();\n        } else {\n          selectBuilder = QueryBuilder.select();\n          for (String col : fields) {\n            ((Select.Selection) selectBuilder).column(col);\n          }\n        }\n\n        stmt = session.prepare(selectBuilder.from(table)\n                               .where(QueryBuilder.eq(YCSB_KEY, QueryBuilder.bindMarker()))\n                               .limit(1));\n        stmt.setConsistencyLevel(readConsistencyLevel);\n        if (trace) {\n          stmt.enableTracing();\n        }\n\n        PreparedStatement prevStmt = (fields == null) ?\n                                     readAllStmt.getAndSet(stmt) :\n                                     readStmts.putIfAbsent(new HashSet(fields), stmt);\n        if (prevStmt != null) {\n          stmt = prevStmt;\n        }\n      }\n\n      logger.debug(stmt.getQueryString());\n      logger.debug(\"key = {}\", key);\n\n      ResultSet rs = session.execute(stmt.bind(key));\n\n      if (rs.isExhausted()) {\n        return Status.NOT_FOUND;\n      }\n\n      // Should be only 1 row\n      Row row = rs.one();\n      ColumnDefinitions cd = row.getColumnDefinitions();\n\n      for (ColumnDefinitions.Definition def : cd) {\n        ByteBuffer val = row.getBytesUnsafe(def.getName());\n        if (val != null) {\n          result.put(def.getName(), new ByteArrayByteIterator(val.array()));\n        } else {\n          result.put(def.getName(), null);\n        }\n      }\n\n      return Status.OK;\n\n    } catch (Exception e) {\n      logger.error(MessageFormatter.format(\"Error reading key: {}\", key).getMessage(), e);\n      return Status.ERROR;\n    }\n\n  }", "signature": "Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "full_signature": "@Override public Status read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "class_method_signature": "CassandraCQLClient.read(String table, String key, Set<String> fields,\n      Map<String, ByteIterator> result)", "testcase": false, "constructor": false, "invocations": ["get", "get", "all", "select", "select", "column", "prepare", "limit", "where", "from", "eq", "bindMarker", "setConsistencyLevel", "enableTracing", "getAndSet", "putIfAbsent", "debug", "getQueryString", "debug", "execute", "bind", "isExhausted", "one", "getColumnDefinitions", "getBytesUnsafe", "getName", "put", "getName", "array", "put", "getName", "error", "getMessage", "format"]}, "repository": {"repo_id": 618492, "url": "https://github.com/brianfrankcooper/YCSB", "stars": 2890, "created": "4/19/2010 8:52:11 PM +00:00", "updates": "2020-01-27T04:05:30+00:00", "fork": "False", "license": "licensed"}}