{"test_class": {"identifier": "DatePartitionerTest", "superclass": "", "interfaces": "", "fields": [], "file": "V1/src/test/java/com/neverwinterdp/scribengin/partitioner/DatePartitionerTest.java"}, "test_case": {"identifier": "testDatePartitionerGetPartition2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDatePartitionerGetPartition2(){\n    DatePartitioner d = new DatePartitioner(\"yyyy/MM/dd/HH/mm/ss\");\n    \n    String year = Integer.toString(Calendar.getInstance().get(Calendar.YEAR));\n    \n    //For whatever reason, months in the Calendar class start at @#$%ing zero\n    String month = Integer.toString(Calendar.getInstance().get(Calendar.MONTH)+1);\n    \n    String day = Integer.toString(Calendar.getInstance().get(Calendar.DAY_OF_MONTH));\n    if(day.length() == 1){\n      day = \"0\"+day;\n    }\n    \n    String hour = Integer.toString(Calendar.getInstance().get(Calendar.HOUR_OF_DAY));\n    if(hour.length() == 1){\n      hour = \"0\"+hour;\n    }\n    \n    String min = Integer.toString(Calendar.getInstance().get(Calendar.MINUTE));\n    if(min.length() == 1){\n      min = \"0\"+min;\n    }\n    \n    //Hopefully this gets completed within a second for the assertion to work\n    String sec = Integer.toString(Calendar.getInstance().get(Calendar.SECOND));\n    if(sec.length() == 1){\n      sec = \"0\"+sec;\n    }\n    \n    assertEquals(year+\"/\"+month+\"/\"+day+\"/\"+hour+\"/\"+min+\"/\"+sec,d.getPartition());\n  }", "signature": "void testDatePartitionerGetPartition2()", "full_signature": "@Test public void testDatePartitionerGetPartition2()", "class_method_signature": "DatePartitionerTest.testDatePartitionerGetPartition2()", "testcase": true, "constructor": false, "invocations": ["toString", "get", "getInstance", "toString", "get", "getInstance", "toString", "get", "getInstance", "length", "toString", "get", "getInstance", "length", "toString", "get", "getInstance", "length", "toString", "get", "getInstance", "length", "assertEquals", "getPartition"]}, "focal_class": {"identifier": "DatePartitioner", "superclass": "extends AbstractPartitioner", "interfaces": "", "fields": [{"original_string": "SimpleDateFormat f;", "modifier": "", "type": "SimpleDateFormat", "declarator": "f", "var_name": "f"}, {"original_string": "String frmtString;", "modifier": "", "type": "String", "declarator": "frmtString", "var_name": "frmtString"}], "methods": [{"identifier": "DatePartitioner", "parameters": "(String format)", "modifiers": "public", "return": "", "signature": " DatePartitioner(String format)", "full_signature": "public  DatePartitioner(String format)", "class_method_signature": "DatePartitioner.DatePartitioner(String format)", "testcase": false, "constructor": true}, {"identifier": "getPartition", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPartition()", "full_signature": "@Override public String getPartition()", "class_method_signature": "DatePartitioner.getPartition()", "testcase": false, "constructor": false}, {"identifier": "getRefresh", "parameters": "()", "modifiers": "@Override public", "return": "Date", "signature": "Date getRefresh()", "full_signature": "@Override public Date getRefresh()", "class_method_signature": "DatePartitioner.getRefresh()", "testcase": false, "constructor": false}], "file": "V1/src/main/java/com/neverwinterdp/scribengin/partitioner/DatePartitioner.java"}, "focal_method": {"identifier": "getPartition", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String getPartition() {\n    return f.format(new Date());\n  }", "signature": "String getPartition()", "full_signature": "@Override public String getPartition()", "class_method_signature": "DatePartitioner.getPartition()", "testcase": false, "constructor": false, "invocations": ["format"]}, "repository": {"repo_id": 14290433, "url": "https://github.com/DemandCube/Scribengin", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 11, "size": 55062, "license": "licensed"}}