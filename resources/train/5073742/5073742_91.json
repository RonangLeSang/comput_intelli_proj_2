{"test_class": {"identifier": "HierarchyTest", "superclass": "extends ValueObjectTestSupport", "interfaces": "", "fields": [{"original_string": "private HierarchyNode root;", "modifier": "private", "type": "HierarchyNode", "declarator": "root", "var_name": "root"}, {"original_string": "private HierarchyNode left;", "modifier": "private", "type": "HierarchyNode", "declarator": "left", "var_name": "left"}, {"original_string": "private HierarchyNode right;", "modifier": "private", "type": "HierarchyNode", "declarator": "right", "var_name": "right"}, {"original_string": "private HierarchyNode rightDep;", "modifier": "private", "type": "HierarchyNode", "declarator": "rightDep", "var_name": "rightDep"}, {"original_string": "private Collection<HierarchyNode> collection;", "modifier": "private", "type": "Collection<HierarchyNode>", "declarator": "collection", "var_name": "collection"}, {"original_string": "private Hierarchy hierarchy;", "modifier": "private", "type": "Hierarchy", "declarator": "hierarchy", "var_name": "hierarchy"}], "file": "vhdllab-common/src/test/java/hr/fer/zemris/vhdllab/service/hierarchy/HierarchyTest.java"}, "test_case": {"identifier": "fileHasDependency2", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void fileHasDependency2() {\n        hierarchy.fileHasDependency(left.getFile(), null);\n    }", "signature": "void fileHasDependency2()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void fileHasDependency2()", "class_method_signature": "HierarchyTest.fileHasDependency2()", "testcase": true, "constructor": false, "invocations": ["fileHasDependency", "getFile"]}, "focal_class": {"identifier": "Hierarchy", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 6608251150623300335L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6608251150623300335L", "var_name": "serialVersionUID"}, {"original_string": "private final Project project;", "modifier": "private final", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "private final Map<File, HierarchyNode> nodes;", "modifier": "private final", "type": "Map<File, HierarchyNode>", "declarator": "nodes", "var_name": "nodes"}, {"original_string": "private transient Set<HierarchyNode> topLevelNodes;", "modifier": "private transient", "type": "Set<HierarchyNode>", "declarator": "topLevelNodes", "var_name": "topLevelNodes"}, {"original_string": "private transient Set<HierarchyNode> bottomLevelNodes;", "modifier": "private transient", "type": "Set<HierarchyNode>", "declarator": "bottomLevelNodes", "var_name": "bottomLevelNodes"}], "methods": [{"identifier": "Hierarchy", "parameters": "(Project project, Collection<HierarchyNode> collection)", "modifiers": "public", "return": "", "signature": " Hierarchy(Project project, Collection<HierarchyNode> collection)", "full_signature": "public  Hierarchy(Project project, Collection<HierarchyNode> collection)", "class_method_signature": "Hierarchy.Hierarchy(Project project, Collection<HierarchyNode> collection)", "testcase": false, "constructor": true}, {"identifier": "getProject", "parameters": "()", "modifiers": "public", "return": "Project", "signature": "Project getProject()", "full_signature": "public Project getProject()", "class_method_signature": "Hierarchy.getProject()", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(File file)", "modifiers": "public", "return": "HierarchyNode", "signature": "HierarchyNode getNode(File file)", "full_signature": "public HierarchyNode getNode(File file)", "class_method_signature": "Hierarchy.getNode(File file)", "testcase": false, "constructor": false}, {"identifier": "getFileCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFileCount()", "full_signature": "public int getFileCount()", "class_method_signature": "Hierarchy.getFileCount()", "testcase": false, "constructor": false}, {"identifier": "fileHasDependency", "parameters": "(File file, File dependency)", "modifiers": "public", "return": "boolean", "signature": "boolean fileHasDependency(File file, File dependency)", "full_signature": "public boolean fileHasDependency(File file, File dependency)", "class_method_signature": "Hierarchy.fileHasDependency(File file, File dependency)", "testcase": false, "constructor": false}, {"identifier": "getAllNodes", "parameters": "()", "modifiers": "public", "return": "Collection<HierarchyNode>", "signature": "Collection<HierarchyNode> getAllNodes()", "full_signature": "public Collection<HierarchyNode> getAllNodes()", "class_method_signature": "Hierarchy.getAllNodes()", "testcase": false, "constructor": false}, {"identifier": "getTopLevelNodes", "parameters": "()", "modifiers": "public", "return": "Set<HierarchyNode>", "signature": "Set<HierarchyNode> getTopLevelNodes()", "full_signature": "public Set<HierarchyNode> getTopLevelNodes()", "class_method_signature": "Hierarchy.getTopLevelNodes()", "testcase": false, "constructor": false}, {"identifier": "getBottomLevelNodes", "parameters": "()", "modifiers": "public", "return": "Set<HierarchyNode>", "signature": "Set<HierarchyNode> getBottomLevelNodes()", "full_signature": "public Set<HierarchyNode> getBottomLevelNodes()", "class_method_signature": "Hierarchy.getBottomLevelNodes()", "testcase": false, "constructor": false}, {"identifier": "getDependenciesFor", "parameters": "(HierarchyNode node)", "modifiers": "public", "return": "Set<HierarchyNode>", "signature": "Set<HierarchyNode> getDependenciesFor(HierarchyNode node)", "full_signature": "public Set<HierarchyNode> getDependenciesFor(HierarchyNode node)", "class_method_signature": "Hierarchy.getDependenciesFor(HierarchyNode node)", "testcase": false, "constructor": false}, {"identifier": "getParentsFor", "parameters": "(HierarchyNode node)", "modifiers": "public", "return": "Set<HierarchyNode>", "signature": "Set<HierarchyNode> getParentsFor(HierarchyNode node)", "full_signature": "public Set<HierarchyNode> getParentsFor(HierarchyNode node)", "class_method_signature": "Hierarchy.getParentsFor(HierarchyNode node)", "testcase": false, "constructor": false}, {"identifier": "iteratorFlatHierarchy", "parameters": "()", "modifiers": "public", "return": "Iterator<HierarchyNode>", "signature": "Iterator<HierarchyNode> iteratorFlatHierarchy()", "full_signature": "public Iterator<HierarchyNode> iteratorFlatHierarchy()", "class_method_signature": "Hierarchy.iteratorFlatHierarchy()", "testcase": false, "constructor": false}, {"identifier": "iteratorXUsesYHierarchy", "parameters": "(HierarchyNode node)", "modifiers": "public", "return": "Iterator<HierarchyNode>", "signature": "Iterator<HierarchyNode> iteratorXUsesYHierarchy(HierarchyNode node)", "full_signature": "public Iterator<HierarchyNode> iteratorXUsesYHierarchy(HierarchyNode node)", "class_method_signature": "Hierarchy.iteratorXUsesYHierarchy(HierarchyNode node)", "testcase": false, "constructor": false}, {"identifier": "iteratorXUsedByYHierarchy", "parameters": "(HierarchyNode node)", "modifiers": "public", "return": "Iterator<HierarchyNode>", "signature": "Iterator<HierarchyNode> iteratorXUsedByYHierarchy(HierarchyNode node)", "full_signature": "public Iterator<HierarchyNode> iteratorXUsedByYHierarchy(HierarchyNode node)", "class_method_signature": "Hierarchy.iteratorXUsedByYHierarchy(HierarchyNode node)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Hierarchy.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Hierarchy.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Hierarchy.toString()", "testcase": false, "constructor": false}, {"identifier": "initNodes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initNodes()", "full_signature": "private void initNodes()", "class_method_signature": "Hierarchy.initNodes()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(java.io.ObjectInputStream in)", "modifiers": "private", "return": "void", "signature": "void readObject(java.io.ObjectInputStream in)", "full_signature": "private void readObject(java.io.ObjectInputStream in)", "class_method_signature": "Hierarchy.readObject(java.io.ObjectInputStream in)", "testcase": false, "constructor": false}], "file": "vhdllab-common/src/main/java/hr/fer/zemris/vhdllab/service/hierarchy/Hierarchy.java"}, "focal_method": {"identifier": "fileHasDependency", "parameters": "(File file, File dependency)", "modifiers": "public", "return": "boolean", "body": "public boolean fileHasDependency(File file, File dependency) {\n        Validate.notNull(file, \"File can't be null\");\n        Validate.notNull(dependency, \"Dependency can't be null\");\n        HierarchyNode fileNode = getNode(file);\n        Validate.notNull(fileNode, \"File isn't in hierarchy: \" + file);\n        return fileNode.containsDependency(dependency);\n    }", "signature": "boolean fileHasDependency(File file, File dependency)", "full_signature": "public boolean fileHasDependency(File file, File dependency)", "class_method_signature": "Hierarchy.fileHasDependency(File file, File dependency)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "getNode", "notNull", "containsDependency"]}, "repository": {"repo_id": 5073742, "url": "https://github.com/mbezjak/vhdllab", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 47526, "license": "licensed"}}