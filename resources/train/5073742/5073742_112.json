{"test_class": {"identifier": "HierarchyNodeTest", "superclass": "extends ValueObjectTestSupport", "interfaces": "", "fields": [{"original_string": "private HierarchyNode root;", "modifier": "private", "type": "HierarchyNode", "declarator": "root", "var_name": "root"}], "file": "vhdllab-common/src/test/java/hr/fer/zemris/vhdllab/service/hierarchy/HierarchyNodeTest.java"}, "test_case": {"identifier": "hashCodeAndEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hashCodeAndEquals() throws Exception {\n        basicEqualsTest(root);\n\n        HierarchyNode newRoot = new HierarchyNode(new File(), null);\n        HierarchyNode another = new HierarchyNode(root.getFile(), newRoot);\n        assertEqualsAndHashCode(root, another);\n\n        another = new HierarchyNode(new File(\"another_file\", null, null),\n                newRoot);\n        assertNotEqualsAndHashCode(root, another);\n    }", "signature": "void hashCodeAndEquals()", "full_signature": "@Test public void hashCodeAndEquals()", "class_method_signature": "HierarchyNodeTest.hashCodeAndEquals()", "testcase": true, "constructor": false, "invocations": ["basicEqualsTest", "getFile", "assertEqualsAndHashCode", "assertNotEqualsAndHashCode"]}, "focal_class": {"identifier": "HierarchyNode", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -2215053203067361627L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2215053203067361627L", "var_name": "serialVersionUID"}, {"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private final Set<File> dependencies;", "modifier": "private final", "type": "Set<File>", "declarator": "dependencies", "var_name": "dependencies"}, {"original_string": "private final transient Set<String> missingDependencies;", "modifier": "private final transient", "type": "Set<String>", "declarator": "missingDependencies", "var_name": "missingDependencies"}, {"original_string": "private transient HierarchyNode parent;", "modifier": "private transient", "type": "HierarchyNode", "declarator": "parent", "var_name": "parent"}], "methods": [{"identifier": "HierarchyNode", "parameters": "(File file, HierarchyNode parent)", "modifiers": "public", "return": "", "signature": " HierarchyNode(File file, HierarchyNode parent)", "full_signature": "public  HierarchyNode(File file, HierarchyNode parent)", "class_method_signature": "HierarchyNode.HierarchyNode(File file, HierarchyNode parent)", "testcase": false, "constructor": true}, {"identifier": "addDependency", "parameters": "(HierarchyNode node)", "modifiers": "public", "return": "void", "signature": "void addDependency(HierarchyNode node)", "full_signature": "public void addDependency(HierarchyNode node)", "class_method_signature": "HierarchyNode.addDependency(HierarchyNode node)", "testcase": false, "constructor": false}, {"identifier": "addMissingDependency", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void addMissingDependency(String name)", "full_signature": "public void addMissingDependency(String name)", "class_method_signature": "HierarchyNode.addMissingDependency(String name)", "testcase": false, "constructor": false}, {"identifier": "canFormCyclicDependency", "parameters": "(HierarchyNode node,\n            HierarchyNode depNode)", "modifiers": "private static", "return": "boolean", "signature": "boolean canFormCyclicDependency(HierarchyNode node,\n            HierarchyNode depNode)", "full_signature": "private static boolean canFormCyclicDependency(HierarchyNode node,\n            HierarchyNode depNode)", "class_method_signature": "HierarchyNode.canFormCyclicDependency(HierarchyNode node,\n            HierarchyNode depNode)", "testcase": false, "constructor": false}, {"identifier": "hasDependencies", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasDependencies()", "full_signature": "public boolean hasDependencies()", "class_method_signature": "HierarchyNode.hasDependencies()", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getFile()", "full_signature": "public File getFile()", "class_method_signature": "HierarchyNode.getFile()", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "public", "return": "Set<File>", "signature": "Set<File> getDependencies()", "full_signature": "public Set<File> getDependencies()", "class_method_signature": "HierarchyNode.getDependencies()", "testcase": false, "constructor": false}, {"identifier": "getMissingDependencies", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getMissingDependencies()", "full_signature": "public Set<String> getMissingDependencies()", "class_method_signature": "HierarchyNode.getMissingDependencies()", "testcase": false, "constructor": false}, {"identifier": "containsDependency", "parameters": "(File dependency)", "modifiers": "public", "return": "boolean", "signature": "boolean containsDependency(File dependency)", "full_signature": "public boolean containsDependency(File dependency)", "class_method_signature": "HierarchyNode.containsDependency(File dependency)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "", "return": "HierarchyNode", "signature": "HierarchyNode getParent()", "full_signature": " HierarchyNode getParent()", "class_method_signature": "HierarchyNode.getParent()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HierarchyNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "HierarchyNode.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HierarchyNode.toString()", "testcase": false, "constructor": false}], "file": "vhdllab-common/src/main/java/hr/fer/zemris/vhdllab/service/hierarchy/HierarchyNode.java"}, "focal_method": {"identifier": "getFile", "parameters": "()", "modifiers": "public", "return": "File", "body": "public File getFile() {\n        return file;\n    }", "signature": "File getFile()", "full_signature": "public File getFile()", "class_method_signature": "HierarchyNode.getFile()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5073742, "url": "https://github.com/mbezjak/vhdllab", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 47526, "license": "licensed"}}