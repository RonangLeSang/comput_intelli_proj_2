{"test_class": {"identifier": "HBaseMetadataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Generator<TableSchema> TABLE_SCHEMA_GEN = new TableSchemaGenerator();", "modifier": "private static final", "type": "Generator<TableSchema>", "declarator": "TABLE_SCHEMA_GEN = new TableSchemaGenerator()", "var_name": "TABLE_SCHEMA_GEN"}, {"original_string": "private static final Generator<Long> LONG_GEN = PrimitiveGenerators.longs();", "modifier": "private static final", "type": "Generator<Long>", "declarator": "LONG_GEN = PrimitiveGenerators.longs()", "var_name": "LONG_GEN"}, {"original_string": "private static final String TABLE_NAME = \"hbase/foo\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_NAME = \"hbase/foo\"", "var_name": "TABLE_NAME"}, {"original_string": "private static final String COLUMN_NAME = \"columnA\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_NAME = \"columnA\"", "var_name": "COLUMN_NAME"}, {"original_string": "private static final String INDEX_NAME = \"indexA\";", "modifier": "private static final", "type": "String", "declarator": "INDEX_NAME = \"indexA\"", "var_name": "INDEX_NAME"}, {"original_string": "private static final long INVALID_TABLE_ID = -1;", "modifier": "private static final", "type": "long", "declarator": "INVALID_TABLE_ID = -1", "var_name": "INVALID_TABLE_ID"}, {"original_string": "private static final List<ColumnSchema> COLUMN_SCHEMAS =\n            ImmutableList.of(ColumnSchema.builder(COLUMN_NAME, ColumnType.LONG).build());", "modifier": "private static final", "type": "List<ColumnSchema>", "declarator": "COLUMN_SCHEMAS =\n            ImmutableList.of(ColumnSchema.builder(COLUMN_NAME, ColumnType.LONG).build())", "var_name": "COLUMN_SCHEMAS"}, {"original_string": "@Mock\n    private HTableProvider provider;", "modifier": "@Mock\n    private", "type": "HTableProvider", "declarator": "provider", "var_name": "provider"}, {"original_string": "private MockHTable table;", "modifier": "private", "type": "MockHTable", "declarator": "table", "var_name": "table"}, {"original_string": "private HBaseMetadata hbaseMetadata;", "modifier": "private", "type": "HBaseMetadata", "declarator": "hbaseMetadata", "var_name": "hbaseMetadata"}, {"original_string": "private Predicate<IndexSchema> indexPredicate = new Predicate<IndexSchema>() {\n        @Override\n        public boolean apply(IndexSchema input) {\n            return input.getIndexName().equals(INDEX_NAME);\n        }\n    };", "modifier": "private", "type": "Predicate<IndexSchema>", "declarator": "indexPredicate = new Predicate<IndexSchema>() {\n        @Override\n        public boolean apply(IndexSchema input) {\n            return input.getIndexName().equals(INDEX_NAME);\n        }\n    }", "var_name": "indexPredicate"}], "file": "storage-engine-backends/hbase/src/test/java/com/nearinfinity/honeycomb/hbase/HBaseMetadataTest.java"}, "test_case": {"identifier": "testCreateIndexInvalidTableId", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testCreateIndexInvalidTableId() {\n        final long invalidTableId = -1;\n        hbaseMetadata.createTableIndex(invalidTableId, getIndexEmpty(\"ignore\"));\n    }", "signature": "void testCreateIndexInvalidTableId()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testCreateIndexInvalidTableId()", "class_method_signature": "HBaseMetadataTest.testCreateIndexInvalidTableId()", "testcase": true, "constructor": false, "invocations": ["createTableIndex", "getIndexEmpty"]}, "focal_class": {"identifier": "HBaseMetadata", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Provider<HTableInterface> provider;", "modifier": "private final", "type": "Provider<HTableInterface>", "declarator": "provider", "var_name": "provider"}, {"original_string": "private byte[] columnFamily;", "modifier": "private", "type": "byte[]", "declarator": "columnFamily", "var_name": "columnFamily"}], "methods": [{"identifier": "HBaseMetadata", "parameters": "(final Provider<HTableInterface> provider)", "modifiers": "@Inject public", "return": "", "signature": " HBaseMetadata(final Provider<HTableInterface> provider)", "full_signature": "@Inject public  HBaseMetadata(final Provider<HTableInterface> provider)", "class_method_signature": "HBaseMetadata.HBaseMetadata(final Provider<HTableInterface> provider)", "testcase": false, "constructor": true}, {"identifier": "setColumnFamily", "parameters": "(final @Named(ConfigConstants.COLUMN_FAMILY) String columnFamily)", "modifiers": "@Inject public", "return": "void", "signature": "void setColumnFamily(final @Named(ConfigConstants.COLUMN_FAMILY) String columnFamily)", "full_signature": "@Inject public void setColumnFamily(final @Named(ConfigConstants.COLUMN_FAMILY) String columnFamily)", "class_method_signature": "HBaseMetadata.setColumnFamily(final @Named(ConfigConstants.COLUMN_FAMILY) String columnFamily)", "testcase": false, "constructor": false}, {"identifier": "getTableId", "parameters": "(final String tableName)", "modifiers": "public", "return": "long", "signature": "long getTableId(final String tableName)", "full_signature": "public long getTableId(final String tableName)", "class_method_signature": "HBaseMetadata.getTableId(final String tableName)", "testcase": false, "constructor": false}, {"identifier": "getIndexIds", "parameters": "(final long tableId)", "modifiers": "public", "return": "Map<String, Long>", "signature": "Map<String, Long> getIndexIds(final long tableId)", "full_signature": "public Map<String, Long> getIndexIds(final long tableId)", "class_method_signature": "HBaseMetadata.getIndexIds(final long tableId)", "testcase": false, "constructor": false}, {"identifier": "getColumnIds", "parameters": "(final long tableId)", "modifiers": "public", "return": "BiMap<String, Long>", "signature": "BiMap<String, Long> getColumnIds(final long tableId)", "full_signature": "public BiMap<String, Long> getColumnIds(final long tableId)", "class_method_signature": "HBaseMetadata.getColumnIds(final long tableId)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(final long tableId)", "modifiers": "public", "return": "TableSchema", "signature": "TableSchema getSchema(final long tableId)", "full_signature": "public TableSchema getSchema(final long tableId)", "class_method_signature": "HBaseMetadata.getSchema(final long tableId)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "(final String tableName, final TableSchema schema)", "modifiers": "public", "return": "void", "signature": "void createTable(final String tableName, final TableSchema schema)", "full_signature": "public void createTable(final String tableName, final TableSchema schema)", "class_method_signature": "HBaseMetadata.createTable(final String tableName, final TableSchema schema)", "testcase": false, "constructor": false}, {"identifier": "createTableIndex", "parameters": "(final long tableId,\n                                 final IndexSchema indexSchema)", "modifiers": "public", "return": "void", "signature": "void createTableIndex(final long tableId,\n                                 final IndexSchema indexSchema)", "full_signature": "public void createTableIndex(final long tableId,\n                                 final IndexSchema indexSchema)", "class_method_signature": "HBaseMetadata.createTableIndex(final long tableId,\n                                 final IndexSchema indexSchema)", "testcase": false, "constructor": false}, {"identifier": "deleteTableIndex", "parameters": "(final long tableId, final String indexName)", "modifiers": "public", "return": "void", "signature": "void deleteTableIndex(final long tableId, final String indexName)", "full_signature": "public void deleteTableIndex(final long tableId, final String indexName)", "class_method_signature": "HBaseMetadata.deleteTableIndex(final long tableId, final String indexName)", "testcase": false, "constructor": false}, {"identifier": "deleteTable", "parameters": "(String tableName)", "modifiers": "public", "return": "void", "signature": "void deleteTable(String tableName)", "full_signature": "public void deleteTable(String tableName)", "class_method_signature": "HBaseMetadata.deleteTable(String tableName)", "testcase": false, "constructor": false}, {"identifier": "renameExistingTable", "parameters": "(final String oldTableName, final String newTableName)", "modifiers": "public", "return": "void", "signature": "void renameExistingTable(final String oldTableName, final String newTableName)", "full_signature": "public void renameExistingTable(final String oldTableName, final String newTableName)", "class_method_signature": "HBaseMetadata.renameExistingTable(final String oldTableName, final String newTableName)", "testcase": false, "constructor": false}, {"identifier": "getAutoInc", "parameters": "(long tableId)", "modifiers": "public", "return": "long", "signature": "long getAutoInc(long tableId)", "full_signature": "public long getAutoInc(long tableId)", "class_method_signature": "HBaseMetadata.getAutoInc(long tableId)", "testcase": false, "constructor": false}, {"identifier": "incrementAutoInc", "parameters": "(long tableId, long amount)", "modifiers": "public", "return": "long", "signature": "long incrementAutoInc(long tableId, long amount)", "full_signature": "public long incrementAutoInc(long tableId, long amount)", "class_method_signature": "HBaseMetadata.incrementAutoInc(long tableId, long amount)", "testcase": false, "constructor": false}, {"identifier": "setAutoInc", "parameters": "(long tableId, long value)", "modifiers": "public", "return": "void", "signature": "void setAutoInc(long tableId, long value)", "full_signature": "public void setAutoInc(long tableId, long value)", "class_method_signature": "HBaseMetadata.setAutoInc(long tableId, long value)", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "(long tableId)", "modifiers": "public", "return": "long", "signature": "long getRowCount(long tableId)", "full_signature": "public long getRowCount(long tableId)", "class_method_signature": "HBaseMetadata.getRowCount(long tableId)", "testcase": false, "constructor": false}, {"identifier": "incrementRowCount", "parameters": "(long tableId, long amount)", "modifiers": "public", "return": "long", "signature": "long incrementRowCount(long tableId, long amount)", "full_signature": "public long incrementRowCount(long tableId, long amount)", "class_method_signature": "HBaseMetadata.incrementRowCount(long tableId, long amount)", "testcase": false, "constructor": false}, {"identifier": "truncateRowCount", "parameters": "(long tableId)", "modifiers": "public", "return": "void", "signature": "void truncateRowCount(long tableId)", "full_signature": "public void truncateRowCount(long tableId)", "class_method_signature": "HBaseMetadata.truncateRowCount(long tableId)", "testcase": false, "constructor": false}, {"identifier": "getNameToIdMap", "parameters": "(long tableId, byte[] encodedRow)", "modifiers": "private", "return": "Map<String, Long>", "signature": "Map<String, Long> getNameToIdMap(long tableId, byte[] encodedRow)", "full_signature": "private Map<String, Long> getNameToIdMap(long tableId, byte[] encodedRow)", "class_method_signature": "HBaseMetadata.getNameToIdMap(long tableId, byte[] encodedRow)", "testcase": false, "constructor": false}, {"identifier": "getCounter", "parameters": "(byte[] row, byte[] identifier)", "modifiers": "private", "return": "long", "signature": "long getCounter(byte[] row, byte[] identifier)", "full_signature": "private long getCounter(byte[] row, byte[] identifier)", "class_method_signature": "HBaseMetadata.getCounter(byte[] row, byte[] identifier)", "testcase": false, "constructor": false}, {"identifier": "incrementCounter", "parameters": "(final byte[] row, final byte[] identifier, final long amount)", "modifiers": "private", "return": "long", "signature": "long incrementCounter(final byte[] row, final byte[] identifier, final long amount)", "full_signature": "private long incrementCounter(final byte[] row, final byte[] identifier, final long amount)", "class_method_signature": "HBaseMetadata.incrementCounter(final byte[] row, final byte[] identifier, final long amount)", "testcase": false, "constructor": false}, {"identifier": "getNextTableId", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getNextTableId()", "full_signature": "private long getNextTableId()", "class_method_signature": "HBaseMetadata.getNextTableId()", "testcase": false, "constructor": false}, {"identifier": "getNextIndexId", "parameters": "(final long tableId, final int n)", "modifiers": "private", "return": "long", "signature": "long getNextIndexId(final long tableId, final int n)", "full_signature": "private long getNextIndexId(final long tableId, final int n)", "class_method_signature": "HBaseMetadata.getNextIndexId(final long tableId, final int n)", "testcase": false, "constructor": false}, {"identifier": "getNextColumnId", "parameters": "(final long tableId, final int n)", "modifiers": "private", "return": "long", "signature": "long getNextColumnId(final long tableId, final int n)", "full_signature": "private long getNextColumnId(final long tableId, final int n)", "class_method_signature": "HBaseMetadata.getNextColumnId(final long tableId, final int n)", "testcase": false, "constructor": false}, {"identifier": "deleteTableId", "parameters": "(String tableName)", "modifiers": "private", "return": "Delete", "signature": "Delete deleteTableId(String tableName)", "full_signature": "private Delete deleteTableId(String tableName)", "class_method_signature": "HBaseMetadata.deleteTableId(String tableName)", "testcase": false, "constructor": false}, {"identifier": "deleteAutoIncCounter", "parameters": "(long tableId)", "modifiers": "private", "return": "Delete", "signature": "Delete deleteAutoIncCounter(long tableId)", "full_signature": "private Delete deleteAutoIncCounter(long tableId)", "class_method_signature": "HBaseMetadata.deleteAutoIncCounter(long tableId)", "testcase": false, "constructor": false}, {"identifier": "deleteRowsCounter", "parameters": "(long tableId)", "modifiers": "private", "return": "Delete", "signature": "Delete deleteRowsCounter(long tableId)", "full_signature": "private Delete deleteRowsCounter(long tableId)", "class_method_signature": "HBaseMetadata.deleteRowsCounter(long tableId)", "testcase": false, "constructor": false}, {"identifier": "putTableSchema", "parameters": "(long tableId, TableSchema schema)", "modifiers": "private", "return": "Put", "signature": "Put putTableSchema(long tableId, TableSchema schema)", "full_signature": "private Put putTableSchema(long tableId, TableSchema schema)", "class_method_signature": "HBaseMetadata.putTableSchema(long tableId, TableSchema schema)", "testcase": false, "constructor": false}, {"identifier": "deleteTableSchema", "parameters": "(long tableId)", "modifiers": "private", "return": "Delete", "signature": "Delete deleteTableSchema(long tableId)", "full_signature": "private Delete deleteTableSchema(long tableId)", "class_method_signature": "HBaseMetadata.deleteTableSchema(long tableId)", "testcase": false, "constructor": false}, {"identifier": "generateIndexDelete", "parameters": "(final long tableId, final String indexName)", "modifiers": "private", "return": "Delete", "signature": "Delete generateIndexDelete(final long tableId, final String indexName)", "full_signature": "private Delete generateIndexDelete(final long tableId, final String indexName)", "class_method_signature": "HBaseMetadata.generateIndexDelete(final long tableId, final String indexName)", "testcase": false, "constructor": false}, {"identifier": "putColumnIds", "parameters": "(long tableId, Collection<ColumnSchema> columns)", "modifiers": "private", "return": "Put", "signature": "Put putColumnIds(long tableId, Collection<ColumnSchema> columns)", "full_signature": "private Put putColumnIds(long tableId, Collection<ColumnSchema> columns)", "class_method_signature": "HBaseMetadata.putColumnIds(long tableId, Collection<ColumnSchema> columns)", "testcase": false, "constructor": false}, {"identifier": "putIndices", "parameters": "(long tableId, Collection<IndexSchema> indices)", "modifiers": "private", "return": "Put", "signature": "Put putIndices(long tableId, Collection<IndexSchema> indices)", "full_signature": "private Put putIndices(long tableId, Collection<IndexSchema> indices)", "class_method_signature": "HBaseMetadata.putIndices(long tableId, Collection<IndexSchema> indices)", "testcase": false, "constructor": false}, {"identifier": "putTableId", "parameters": "(String tableName, long tableId)", "modifiers": "private", "return": "Put", "signature": "Put putTableId(String tableName, long tableId)", "full_signature": "private Put putTableId(String tableName, long tableId)", "class_method_signature": "HBaseMetadata.putTableId(String tableName, long tableId)", "testcase": false, "constructor": false}, {"identifier": "serializeName", "parameters": "(String name)", "modifiers": "private", "return": "byte[]", "signature": "byte[] serializeName(String name)", "full_signature": "private byte[] serializeName(String name)", "class_method_signature": "HBaseMetadata.serializeName(String name)", "testcase": false, "constructor": false}, {"identifier": "deserializeName", "parameters": "(byte[] serializedName)", "modifiers": "private", "return": "String", "signature": "String deserializeName(byte[] serializedName)", "full_signature": "private String deserializeName(byte[] serializedName)", "class_method_signature": "HBaseMetadata.deserializeName(byte[] serializedName)", "testcase": false, "constructor": false}, {"identifier": "serializeId", "parameters": "(long id)", "modifiers": "private", "return": "byte[]", "signature": "byte[] serializeId(long id)", "full_signature": "private byte[] serializeId(long id)", "class_method_signature": "HBaseMetadata.serializeId(long id)", "testcase": false, "constructor": false}, {"identifier": "deserializeId", "parameters": "(byte[] id)", "modifiers": "private", "return": "long", "signature": "long deserializeId(byte[] id)", "full_signature": "private long deserializeId(byte[] id)", "class_method_signature": "HBaseMetadata.deserializeId(byte[] id)", "testcase": false, "constructor": false}, {"identifier": "performMutations", "parameters": "(final List<Delete> deletes, final List<Put> puts)", "modifiers": "private", "return": "void", "signature": "void performMutations(final List<Delete> deletes, final List<Put> puts)", "full_signature": "private void performMutations(final List<Delete> deletes, final List<Put> puts)", "class_method_signature": "HBaseMetadata.performMutations(final List<Delete> deletes, final List<Put> puts)", "testcase": false, "constructor": false}, {"identifier": "getHTable", "parameters": "()", "modifiers": "private", "return": "HTableInterface", "signature": "HTableInterface getHTable()", "full_signature": "private HTableInterface getHTable()", "class_method_signature": "HBaseMetadata.getHTable()", "testcase": false, "constructor": false}], "file": "storage-engine-backends/hbase/src/main/java/com/nearinfinity/honeycomb/hbase/HBaseMetadata.java"}, "focal_method": {"identifier": "createTableIndex", "parameters": "(final long tableId,\n                                 final IndexSchema indexSchema)", "modifiers": "public", "return": "void", "body": "public void createTableIndex(final long tableId,\n                                 final IndexSchema indexSchema) {\n        Verify.isValidId(tableId);\n        checkNotNull(indexSchema, \"The index schema is invalid\");\n\n        final List<Put> puts = Lists.newArrayList();\n\n        final List<IndexSchema> indexDetailMap = ImmutableList.of(indexSchema);\n\n        // Update the table schema to store the new index schema details\n        final TableSchema existingSchema = getSchema(tableId);\n        final TableSchema updatedSchema = existingSchema.schemaCopy();\n        updatedSchema.addIndices(indexDetailMap);\n\n        // Write the updated table schema and created index\n        puts.add(putTableSchema(tableId, updatedSchema));\n        puts.add(putIndices(tableId, indexDetailMap));\n\n        performMutations(ImmutableList.<Delete>of(), puts);\n    }", "signature": "void createTableIndex(final long tableId,\n                                 final IndexSchema indexSchema)", "full_signature": "public void createTableIndex(final long tableId,\n                                 final IndexSchema indexSchema)", "class_method_signature": "HBaseMetadata.createTableIndex(final long tableId,\n                                 final IndexSchema indexSchema)", "testcase": false, "constructor": false, "invocations": ["isValidId", "checkNotNull", "newArrayList", "of", "getSchema", "schemaCopy", "addIndices", "add", "putTableSchema", "add", "putIndices", "performMutations", "of"]}, "repository": {"repo_id": 5171172, "url": "https://github.com/altamiracorp/honeycomb", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 74, "size": 164956, "license": "licensed"}}