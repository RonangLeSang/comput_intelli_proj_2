{"test_class": {"identifier": "SemanticServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final SemanticServiceImpl subject =\n            new SemanticServiceImpl(new MockLookupService());", "modifier": "private static final", "type": "SemanticServiceImpl", "declarator": "subject =\n            new SemanticServiceImpl(new MockLookupService())", "var_name": "subject"}, {"original_string": "private static final Random random = new Random();", "modifier": "private static final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "file": "org.openbel.framework.core/src/test/java/org/openbel/framework/core/compiler/SemanticServiceImplTest.java"}, "test_case": {"identifier": "testFunctionOnlyArguments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFunctionOnlyArguments() {\n        err.println(\"testFunctionOnlyArguments\");\n        FunctionEnum funcEnum = FunctionEnum.REACTION;\n        List<BELObject> args = new ArrayList<BELObject>();\n        args.add(new Term(FunctionEnum.REACTANTS));\n        args.add(new Term(FunctionEnum.PRODUCTS));\n        Term t = new Term(funcEnum, args);\n\n        try {\n            subject.checkTerm(t);\n        } catch (SemanticWarning se) {\n            fail(\"unexpected semantic failure: \" + se.getUserFacingMessage());\n        }\n    }", "signature": "void testFunctionOnlyArguments()", "full_signature": "@Test public void testFunctionOnlyArguments()", "class_method_signature": "SemanticServiceImplTest.testFunctionOnlyArguments()", "testcase": true, "constructor": false, "invocations": ["println", "add", "add", "checkTerm", "fail", "getUserFacingMessage"]}, "focal_class": {"identifier": "SemanticServiceImpl", "superclass": "", "interfaces": "implements SemanticService", "fields": [{"original_string": "private final NamespaceService nsService;", "modifier": "private final", "type": "NamespaceService", "declarator": "nsService", "var_name": "nsService"}], "methods": [{"identifier": "SemanticServiceImpl", "parameters": "(final NamespaceService nsService)", "modifiers": "public", "return": "", "signature": " SemanticServiceImpl(final NamespaceService nsService)", "full_signature": "public  SemanticServiceImpl(final NamespaceService nsService)", "class_method_signature": "SemanticServiceImpl.SemanticServiceImpl(final NamespaceService nsService)", "testcase": false, "constructor": true}, {"identifier": "checkParameterizedTerm", "parameters": "(final Term term)", "modifiers": "@Override public", "return": "void", "signature": "void checkParameterizedTerm(final Term term)", "full_signature": "@Override public void checkParameterizedTerm(final Term term)", "class_method_signature": "SemanticServiceImpl.checkParameterizedTerm(final Term term)", "testcase": false, "constructor": false}, {"identifier": "checkTerm", "parameters": "(final Term term)", "modifiers": "@Override public", "return": "void", "signature": "void checkTerm(final Term term)", "full_signature": "@Override public void checkTerm(final Term term)", "class_method_signature": "SemanticServiceImpl.checkTerm(final Term term)", "testcase": false, "constructor": false}, {"identifier": "checkRelationship", "parameters": "(final Statement statement)", "modifiers": "@Override public", "return": "void", "signature": "void checkRelationship(final Statement statement)", "full_signature": "@Override public void checkRelationship(final Statement statement)", "class_method_signature": "SemanticServiceImpl.checkRelationship(final Statement statement)", "testcase": false, "constructor": false}, {"identifier": "checkListUsage", "parameters": "(final Statement statement,\n            final Document document)", "modifiers": "@Override public", "return": "void", "signature": "void checkListUsage(final Statement statement,\n            final Document document)", "full_signature": "@Override public void checkListUsage(final Statement statement,\n            final Document document)", "class_method_signature": "SemanticServiceImpl.checkListUsage(final Statement statement,\n            final Document document)", "testcase": false, "constructor": false}, {"identifier": "checkNested", "parameters": "(final Statement statement)", "modifiers": "@Override public", "return": "void", "signature": "void checkNested(final Statement statement)", "full_signature": "@Override public void checkNested(final Statement statement)", "class_method_signature": "SemanticServiceImpl.checkNested(final Statement statement)", "testcase": false, "constructor": false}, {"identifier": "checkMultiNested", "parameters": "(final Statement stmt, final Document doc)", "modifiers": "@Override public", "return": "void", "signature": "void checkMultiNested(final Statement stmt, final Document doc)", "full_signature": "@Override public void checkMultiNested(final Statement stmt, final Document doc)", "class_method_signature": "SemanticServiceImpl.checkMultiNested(final Statement stmt, final Document doc)", "testcase": false, "constructor": false}, {"identifier": "pruneStatement", "parameters": "(final Statement stmt, final Document doc)", "modifiers": "private", "return": "void", "signature": "void pruneStatement(final Statement stmt, final Document doc)", "full_signature": "private void pruneStatement(final Statement stmt, final Document doc)", "class_method_signature": "SemanticServiceImpl.pruneStatement(final Statement stmt, final Document doc)", "testcase": false, "constructor": false}, {"identifier": "checkAbundanceSubsets", "parameters": "(final Term term)", "modifiers": "@Override public", "return": "List<SemanticWarning>", "signature": "List<SemanticWarning> checkAbundanceSubsets(final Term term)", "full_signature": "@Override public List<SemanticWarning> checkAbundanceSubsets(final Term term)", "class_method_signature": "SemanticServiceImpl.checkAbundanceSubsets(final Term term)", "testcase": false, "constructor": false}, {"identifier": "checkAbundanceSubset", "parameters": "(final Term term)", "modifiers": "private", "return": "List<SemanticWarning>", "signature": "List<SemanticWarning> checkAbundanceSubset(final Term term)", "full_signature": "private List<SemanticWarning> checkAbundanceSubset(final Term term)", "class_method_signature": "SemanticServiceImpl.checkAbundanceSubset(final Term term)", "testcase": false, "constructor": false}, {"identifier": "checkPModification", "parameters": "(final Term term)", "modifiers": "private", "return": "List<SemanticWarning>", "signature": "List<SemanticWarning> checkPModification(final Term term)", "full_signature": "private List<SemanticWarning> checkPModification(final Term term)", "class_method_signature": "SemanticServiceImpl.checkPModification(final Term term)", "testcase": false, "constructor": false}, {"identifier": "checkPSubstitution", "parameters": "(final Term term)", "modifiers": "private", "return": "List<SemanticWarning>", "signature": "List<SemanticWarning> checkPSubstitution(final Term term)", "full_signature": "private List<SemanticWarning> checkPSubstitution(final Term term)", "class_method_signature": "SemanticServiceImpl.checkPSubstitution(final Term term)", "testcase": false, "constructor": false}, {"identifier": "checkPTruncation", "parameters": "(final Term term)", "modifiers": "private", "return": "List<SemanticWarning>", "signature": "List<SemanticWarning> checkPTruncation(final Term term)", "full_signature": "private List<SemanticWarning> checkPTruncation(final Term term)", "class_method_signature": "SemanticServiceImpl.checkPTruncation(final Term term)", "testcase": false, "constructor": false}, {"identifier": "checkPFusion", "parameters": "(final Term term)", "modifiers": "private", "return": "List<SemanticWarning>", "signature": "List<SemanticWarning> checkPFusion(final Term term)", "full_signature": "private List<SemanticWarning> checkPFusion(final Term term)", "class_method_signature": "SemanticServiceImpl.checkPFusion(final Term term)", "testcase": false, "constructor": false}, {"identifier": "validPType", "parameters": "(String pval)", "modifiers": "private", "return": "boolean", "signature": "boolean validPType(String pval)", "full_signature": "private boolean validPType(String pval)", "class_method_signature": "SemanticServiceImpl.validPType(String pval)", "testcase": false, "constructor": false}, {"identifier": "validAcid", "parameters": "(String pval)", "modifiers": "private", "return": "boolean", "signature": "boolean validAcid(String pval)", "full_signature": "private boolean validAcid(String pval)", "class_method_signature": "SemanticServiceImpl.validAcid(String pval)", "testcase": false, "constructor": false}, {"identifier": "validPosition", "parameters": "(String pval)", "modifiers": "private", "return": "boolean", "signature": "boolean validPosition(String pval)", "full_signature": "private boolean validPosition(String pval)", "class_method_signature": "SemanticServiceImpl.validPosition(String pval)", "testcase": false, "constructor": false}, {"identifier": "processParameter", "parameters": "(final Parameter p)", "modifiers": "private", "return": "String", "signature": "String processParameter(final Parameter p)", "full_signature": "private String processParameter(final Parameter p)", "class_method_signature": "SemanticServiceImpl.processParameter(final Parameter p)", "testcase": false, "constructor": false}, {"identifier": "processTerm", "parameters": "(final Term t)", "modifiers": "private", "return": "String", "signature": "String processTerm(final Term t)", "full_signature": "private String processTerm(final Term t)", "class_method_signature": "SemanticServiceImpl.processTerm(final Term t)", "testcase": false, "constructor": false}], "file": "org.openbel.framework.core/src/main/java/org/openbel/framework/core/compiler/SemanticServiceImpl.java"}, "focal_method": {"identifier": "checkTerm", "parameters": "(final Term term)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void checkTerm(final Term term) throws SemanticWarning {\n        final FunctionEnum funcEnum = term.getFunctionEnum();\n\n        // Construct the signature\n        final StringBuilder bldr = new StringBuilder();\n        bldr.append(funcEnum.getDisplayValue());\n        bldr.append(\"(\");\n\n        List<BELObject> functionArguments = term.getFunctionArguments();\n        if (hasItems(functionArguments)) {\n            for (int i = 0; i < functionArguments.size(); i++) {\n                final BELObject bo = functionArguments.get(i);\n\n                String arg = null;\n                if (bo instanceof Term) {\n                    arg = processTerm((Term) bo);\n                    if (arg == null) continue;\n                } else {\n                    String type = bo.getClass().getName();\n                    final String err = \"unhandled function argument \" + type;\n                    throw new UnsupportedOperationException(err);\n                }\n                if (i != 0) bldr.append(\",\");\n                bldr.append(arg);\n            }\n        }\n        bldr.append(\")\");\n        bldr.append(funcEnum.getReturnType().getDisplayValue());\n\n        Signature sig = null;\n        try {\n            sig = new Signature(bldr.toString());\n        } catch (InvalidArgument e) {\n            final String lf = term.toBELLongForm();\n            final String err = e.getMessage();\n            throw new SemanticWarning(lf, err);\n        }\n\n        final Function function = funcEnum.getFunction();\n\n        if (!function.validSignature(sig)) {\n            final Map<Signature, SemanticStatus> map = function.getStatus(sig);\n            final String lf = term.toBELLongForm();\n            final String err = format(SEMANTIC_TERM_FAILURE, lf);\n            throw new SemanticWarning(null, err, sig, map);\n        }\n    }", "signature": "void checkTerm(final Term term)", "full_signature": "@Override public void checkTerm(final Term term)", "class_method_signature": "SemanticServiceImpl.checkTerm(final Term term)", "testcase": false, "constructor": false, "invocations": ["getFunctionEnum", "append", "getDisplayValue", "append", "getFunctionArguments", "hasItems", "size", "get", "processTerm", "getName", "getClass", "append", "append", "append", "append", "getDisplayValue", "getReturnType", "toString", "toBELLongForm", "getMessage", "getFunction", "validSignature", "getStatus", "toBELLongForm", "format"]}, "repository": {"repo_id": 4368907, "url": "https://github.com/OpenBEL/openbel-framework", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 20, "size": 56994, "license": "licensed"}}