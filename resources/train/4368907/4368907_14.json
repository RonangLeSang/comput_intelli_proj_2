{"test_class": {"identifier": "ParserUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.openbel.framework.common/src/test/java/org/openbel/framework/common/bel/parser/ParserUtilTest.java"}, "test_case": {"identifier": "testUnicodeFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnicodeFields() {\n        String csv = \"{\\\"\u00b5\u00bd\u00e6\u01ba\u0251\u0263\u0298\\\", \\\"\u02ac\u0297\u026e\u0246\\\"}\";\n        String[] tokens = ParserUtil.parseListRecord(csv);\n        assertThat(tokens, notNullValue());\n        assertThat(tokens.length, is(2));\n        assertThat(tokens[0], is(\"\u00b5\u00bd\u00e6\u01ba\u0251\u0263\u0298\"));\n        assertThat(tokens[1], is(\"\u02ac\u0297\u026e\u0246\"));\n\n        csv = \"{\\\"\\u039A\\u03A0\\\", \\\"\\u03BA\\u03BF\\\"}\";\n        tokens = ParserUtil.parseListRecord(csv);\n        assertThat(tokens, notNullValue());\n        assertThat(tokens.length, is(2));\n        assertThat(tokens[0], is(\"\u039a\u03a0\"));\n        assertThat(tokens[1], is(\"\u03ba\u03bf\"));\n    }", "signature": "void testUnicodeFields()", "full_signature": "@Test public void testUnicodeFields()", "class_method_signature": "ParserUtilTest.testUnicodeFields()", "testcase": true, "constructor": false, "invocations": ["parseListRecord", "assertThat", "notNullValue", "assertThat", "is", "assertThat", "is", "assertThat", "is", "parseListRecord", "assertThat", "notNullValue", "assertThat", "is", "assertThat", "is", "assertThat", "is"]}, "focal_class": {"identifier": "ParserUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char VALUE_DELIMITER = '|';", "modifier": "private static final", "type": "char", "declarator": "VALUE_DELIMITER = '|'", "var_name": "VALUE_DELIMITER"}, {"original_string": "private static final char FIELD_SEPARATOR = ',';", "modifier": "private static final", "type": "char", "declarator": "FIELD_SEPARATOR = ','", "var_name": "FIELD_SEPARATOR"}, {"original_string": "private static final char FIELD_BOUNDARY = '\"';", "modifier": "private static final", "type": "char", "declarator": "FIELD_BOUNDARY = '\"'", "var_name": "FIELD_BOUNDARY"}, {"original_string": "private static final char ESCAPE = '\\\\';", "modifier": "private static final", "type": "char", "declarator": "ESCAPE = '\\\\'", "var_name": "ESCAPE"}], "methods": [{"identifier": "parseListRecord", "parameters": "(String line)", "modifiers": "public static", "return": "String[]", "signature": "String[] parseListRecord(String line)", "full_signature": "public static String[] parseListRecord(String line)", "class_method_signature": "ParserUtil.parseListRecord(String line)", "testcase": false, "constructor": false}, {"identifier": "parseValueSeparated", "parameters": "(String value)", "modifiers": "public static", "return": "String[]", "signature": "String[] parseValueSeparated(String value)", "full_signature": "public static String[] parseValueSeparated(String value)", "class_method_signature": "ParserUtil.parseValueSeparated(String value)", "testcase": false, "constructor": false}, {"identifier": "ParserUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ParserUtil()", "full_signature": "private  ParserUtil()", "class_method_signature": "ParserUtil.ParserUtil()", "testcase": false, "constructor": true}], "file": "org.openbel.framework.common/src/main/java/org/openbel/framework/common/bel/parser/ParserUtil.java"}, "focal_method": {"identifier": "parseListRecord", "parameters": "(String line)", "modifiers": "public static", "return": "String[]", "body": "public static String[] parseListRecord(String line) {\n        // return null if line is blank\n        if (noLength(line)) {\n            return null;\n        }\n\n        // trim away leading / trailing whitespace from list record\n        line = line.trim();\n\n        // remove list boundaries\n        if (line.startsWith(\"{\")) {\n            line = line.substring(1);\n        }\n        if (line.endsWith(\"}\")) {\n            line = line.substring(0, line.length() - 1);\n        }\n\n        // return no fields if list record is empty\n        if (line.trim().length() == 0) {\n            return new String[0];\n        }\n\n        // split fields\n        final CharacterIterator chit = new StringCharacterIterator(line);\n        final List<String> fields = new ArrayList<String>();\n        final StringBuilder fb = new StringBuilder();\n        boolean inField = false;\n        for (char c = chit.first(); c != CharacterIterator.DONE; c = chit\n                .next()) {\n            if (!inField && c == FIELD_BOUNDARY) {\n                inField = true;\n                fb.setLength(0);\n            } else if (inField && c == FIELD_BOUNDARY) {\n                int mark = chit.getIndex();\n                char previousChar = chit.previous();\n                if (previousChar == ESCAPE) {\n                    fb.deleteCharAt(fb.length() - 1);\n                    fb.append(c);\n                } else {\n                    inField = false;\n                }\n                chit.setIndex(mark);\n            } else if (!inField && c == FIELD_SEPARATOR) {\n                fields.add(fb.toString());\n            } else if (inField) {\n                fb.append(c);\n            }\n        }\n\n        if (!line.endsWith(\",\")) {\n            fields.add(fb.toString());\n        }\n\n        return fields.toArray(new String[fields.size()]);\n    }", "signature": "String[] parseListRecord(String line)", "full_signature": "public static String[] parseListRecord(String line)", "class_method_signature": "ParserUtil.parseListRecord(String line)", "testcase": false, "constructor": false, "invocations": ["noLength", "trim", "startsWith", "substring", "endsWith", "substring", "length", "length", "trim", "first", "next", "setLength", "getIndex", "previous", "deleteCharAt", "length", "append", "setIndex", "add", "toString", "append", "endsWith", "add", "toString", "toArray", "size"]}, "repository": {"repo_id": 4368907, "url": "https://github.com/OpenBEL/openbel-framework", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 20, "size": 56994, "license": "licensed"}}