{"test_class": {"identifier": "BasicPathFinderTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.openbel.framework.api/src/test/java/org/openbel/framework/api/BasicPathFinderTest.java"}, "test_case": {"identifier": "testFindPathDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindPathDefault() {\n        final Kam kam = createTestKAM();\n        final PathFinder pathFinder = new BasicPathFinder(kam);\n\n        SimplePath[] pathsFound = pathFinder.findPaths(kam.findNode(1),\n                kam.findNode(5));\n\n        assertNotNull(pathsFound);\n        assertEquals(1, pathsFound.length);\n\n        final List<KamEdge> edges = pathsFound[0].getEdges();\n        assertEquals(3, edges.size());\n        final KamEdge[] edgeArray = edges.toArray(new KamEdge[edges.size()]);\n        assertEquals(TRANSCRIBED_TO, edgeArray[0].getRelationshipType());\n        assertEquals(TRANSLATED_TO, edgeArray[1].getRelationshipType());\n        assertEquals(ACTS_IN, edgeArray[2].getRelationshipType());\n    }", "signature": "void testFindPathDefault()", "full_signature": "@Test public void testFindPathDefault()", "class_method_signature": "BasicPathFinderTest.testFindPathDefault()", "testcase": true, "constructor": false, "invocations": ["createTestKAM", "findPaths", "findNode", "findNode", "assertNotNull", "assertEquals", "getEdges", "assertEquals", "size", "toArray", "size", "assertEquals", "getRelationshipType", "assertEquals", "getRelationshipType", "assertEquals", "getRelationshipType"]}, "focal_class": {"identifier": "BasicPathFinder", "superclass": "", "interfaces": "implements PathFinder", "fields": [{"original_string": "public final static int DEFAULT_MAX_SEARCH_DEPTH = 4;", "modifier": "public final static", "type": "int", "declarator": "DEFAULT_MAX_SEARCH_DEPTH = 4", "var_name": "DEFAULT_MAX_SEARCH_DEPTH"}, {"original_string": "private final Kam kam;", "modifier": "private final", "type": "Kam", "declarator": "kam", "var_name": "kam"}, {"original_string": "private final int maxSearchDepth;", "modifier": "private final", "type": "int", "declarator": "maxSearchDepth", "var_name": "maxSearchDepth"}], "methods": [{"identifier": "BasicPathFinder", "parameters": "(final Kam kam)", "modifiers": "public", "return": "", "signature": " BasicPathFinder(final Kam kam)", "full_signature": "public  BasicPathFinder(final Kam kam)", "class_method_signature": "BasicPathFinder.BasicPathFinder(final Kam kam)", "testcase": false, "constructor": true}, {"identifier": "BasicPathFinder", "parameters": "(final Kam kam, final int maxSearchDepth)", "modifiers": "public", "return": "", "signature": " BasicPathFinder(final Kam kam, final int maxSearchDepth)", "full_signature": "public  BasicPathFinder(final Kam kam, final int maxSearchDepth)", "class_method_signature": "BasicPathFinder.BasicPathFinder(final Kam kam, final int maxSearchDepth)", "testcase": false, "constructor": true}, {"identifier": "findPaths", "parameters": "(KamNode source, KamNode target)", "modifiers": "@Override public", "return": "SimplePath[]", "signature": "SimplePath[] findPaths(KamNode source, KamNode target)", "full_signature": "@Override public SimplePath[] findPaths(KamNode source, KamNode target)", "class_method_signature": "BasicPathFinder.findPaths(KamNode source, KamNode target)", "testcase": false, "constructor": false}, {"identifier": "findPaths", "parameters": "(KamNode[] sources, KamNode[] targets)", "modifiers": "@Override public", "return": "SimplePath[]", "signature": "SimplePath[] findPaths(KamNode[] sources, KamNode[] targets)", "full_signature": "@Override public SimplePath[] findPaths(KamNode[] sources, KamNode[] targets)", "class_method_signature": "BasicPathFinder.findPaths(KamNode[] sources, KamNode[] targets)", "testcase": false, "constructor": false}, {"identifier": "interconnect", "parameters": "(KamNode[] sources)", "modifiers": "@Override public", "return": "SimplePath[]", "signature": "SimplePath[] interconnect(KamNode[] sources)", "full_signature": "@Override public SimplePath[] interconnect(KamNode[] sources)", "class_method_signature": "BasicPathFinder.interconnect(KamNode[] sources)", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "(KamNode source)", "modifiers": "@Override public", "return": "SimplePath[]", "signature": "SimplePath[] scan(KamNode source)", "full_signature": "@Override public SimplePath[] scan(KamNode source)", "class_method_signature": "BasicPathFinder.scan(KamNode source)", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "(KamNode[] sources)", "modifiers": "@Override public", "return": "SimplePath[]", "signature": "SimplePath[] scan(KamNode[] sources)", "full_signature": "@Override public SimplePath[] scan(KamNode[] sources)", "class_method_signature": "BasicPathFinder.scan(KamNode[] sources)", "testcase": false, "constructor": false}, {"identifier": "runDepthFirstSearch", "parameters": "(final Kam kam,\n            final KamNode source,\n            final Set<KamNode> targets)", "modifiers": "private", "return": "List<SimplePath>", "signature": "List<SimplePath> runDepthFirstSearch(final Kam kam,\n            final KamNode source,\n            final Set<KamNode> targets)", "full_signature": "private List<SimplePath> runDepthFirstSearch(final Kam kam,\n            final KamNode source,\n            final Set<KamNode> targets)", "class_method_signature": "BasicPathFinder.runDepthFirstSearch(final Kam kam,\n            final KamNode source,\n            final Set<KamNode> targets)", "testcase": false, "constructor": false}, {"identifier": "runDepthFirstScan", "parameters": "(final Kam kam,\n            final KamNode source)", "modifiers": "private", "return": "List<SimplePath>", "signature": "List<SimplePath> runDepthFirstScan(final Kam kam,\n            final KamNode source)", "full_signature": "private List<SimplePath> runDepthFirstScan(final Kam kam,\n            final KamNode source)", "class_method_signature": "BasicPathFinder.runDepthFirstScan(final Kam kam,\n            final KamNode source)", "testcase": false, "constructor": false}, {"identifier": "runDepthFirstSearch", "parameters": "(final Kam kam,\n            final KamNode cnode,\n            final KamNode source,\n            final Set<KamNode> targets,\n            int depth,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack,\n            final List<SimplePath> pathResults)", "modifiers": "private", "return": "void", "signature": "void runDepthFirstSearch(final Kam kam,\n            final KamNode cnode,\n            final KamNode source,\n            final Set<KamNode> targets,\n            int depth,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack,\n            final List<SimplePath> pathResults)", "full_signature": "private void runDepthFirstSearch(final Kam kam,\n            final KamNode cnode,\n            final KamNode source,\n            final Set<KamNode> targets,\n            int depth,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack,\n            final List<SimplePath> pathResults)", "class_method_signature": "BasicPathFinder.runDepthFirstSearch(final Kam kam,\n            final KamNode cnode,\n            final KamNode source,\n            final Set<KamNode> targets,\n            int depth,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack,\n            final List<SimplePath> pathResults)", "testcase": false, "constructor": false}, {"identifier": "runDepthFirstScan", "parameters": "(final Kam kam,\n            final KamNode cnode,\n            final KamNode source,\n            int depth,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack,\n            final List<SimplePath> pathResults)", "modifiers": "private", "return": "void", "signature": "void runDepthFirstScan(final Kam kam,\n            final KamNode cnode,\n            final KamNode source,\n            int depth,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack,\n            final List<SimplePath> pathResults)", "full_signature": "private void runDepthFirstScan(final Kam kam,\n            final KamNode cnode,\n            final KamNode source,\n            int depth,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack,\n            final List<SimplePath> pathResults)", "class_method_signature": "BasicPathFinder.runDepthFirstScan(final Kam kam,\n            final KamNode cnode,\n            final KamNode source,\n            int depth,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack,\n            final List<SimplePath> pathResults)", "testcase": false, "constructor": false}, {"identifier": "endOfBranch", "parameters": "(final SetStack<KamEdge> edgeStack,\n            KamEdge edge,\n            int edgeCount)", "modifiers": "private", "return": "boolean", "signature": "boolean endOfBranch(final SetStack<KamEdge> edgeStack,\n            KamEdge edge,\n            int edgeCount)", "full_signature": "private boolean endOfBranch(final SetStack<KamEdge> edgeStack,\n            KamEdge edge,\n            int edgeCount)", "class_method_signature": "BasicPathFinder.endOfBranch(final SetStack<KamEdge> edgeStack,\n            KamEdge edge,\n            int edgeCount)", "testcase": false, "constructor": false}, {"identifier": "pushEdge", "parameters": "(final KamEdge edge,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack)", "modifiers": "private", "return": "boolean", "signature": "boolean pushEdge(final KamEdge edge,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack)", "full_signature": "private boolean pushEdge(final KamEdge edge,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack)", "class_method_signature": "BasicPathFinder.pushEdge(final KamEdge edge,\n            final SetStack<KamNode> nodeStack,\n            final SetStack<KamEdge> edgeStack)", "testcase": false, "constructor": false}], "file": "org.openbel.framework.api/src/main/java/org/openbel/framework/api/BasicPathFinder.java"}, "focal_method": {"identifier": "findPaths", "parameters": "(KamNode source, KamNode target)", "modifiers": "@Override public", "return": "SimplePath[]", "body": "@Override\n    public SimplePath[] findPaths(KamNode source, KamNode target) {\n        if (source == null) {\n            throw new InvalidArgument(\"Source kam node cannot be null.\");\n        }\n\n        if (target == null) {\n            throw new InvalidArgument(\"Target kam node cannot be null.\");\n        }\n\n        if (!kam.contains(source)) {\n            throw new InvalidArgument(\"Source does not exist in KAM.\");\n        }\n\n        if (!kam.contains(target)) {\n            throw new InvalidArgument(\"Target does not exist in KAM.\");\n        }\n\n        final Set<KamNode> targets = sizedHashSet(1);\n        targets.add(target);\n\n        List<SimplePath> pathsFound = runDepthFirstSearch(kam, source, targets);\n        return pathsFound.toArray(new SimplePath[pathsFound.size()]);\n    }", "signature": "SimplePath[] findPaths(KamNode source, KamNode target)", "full_signature": "@Override public SimplePath[] findPaths(KamNode source, KamNode target)", "class_method_signature": "BasicPathFinder.findPaths(KamNode source, KamNode target)", "testcase": false, "constructor": false, "invocations": ["contains", "contains", "sizedHashSet", "add", "runDepthFirstSearch", "toArray", "size"]}, "repository": {"repo_id": 4368907, "url": "https://github.com/OpenBEL/openbel-framework", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 20, "size": 56994, "license": "licensed"}}