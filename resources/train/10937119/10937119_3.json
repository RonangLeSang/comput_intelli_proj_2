{"test_class": {"identifier": "IdResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String AGENT = \"test-agent\";", "modifier": "private final", "type": "String", "declarator": "AGENT = \"test-agent\"", "var_name": "AGENT"}, {"original_string": "private final SnowizardError AGENT_ERROR = new SnowizardError(400,\n            \"Invalid User-Agent header\");", "modifier": "private final", "type": "SnowizardError", "declarator": "AGENT_ERROR = new SnowizardError(400,\n            \"Invalid User-Agent header\")", "var_name": "AGENT_ERROR"}, {"original_string": "private final IdWorker worker = mock(IdWorker.class);", "modifier": "private final", "type": "IdWorker", "declarator": "worker = mock(IdWorker.class)", "var_name": "worker"}, {"original_string": "@Rule\n    public final ResourceTestRule resources = ResourceTestRule.builder()\n            .addProvider(new SnowizardExceptionMapper())\n    .addProvider(new ProtocolBufferMessageBodyProvider())\n    .addResource(new IdResource(worker)).build();", "modifier": "@Rule\n    public final", "type": "ResourceTestRule", "declarator": "resources = ResourceTestRule.builder()\n            .addProvider(new SnowizardExceptionMapper())\n    .addProvider(new ProtocolBufferMessageBodyProvider())\n    .addResource(new IdResource(worker)).build()", "var_name": "resources"}], "file": "snowizard-application/src/test/java/com/ge/snowizard/application/resources/IdResourceTest.java"}, "test_case": {"identifier": "testGetIdAsJSON", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetIdAsJSON() throws Exception {\n        final long id = 100L;\n        when(worker.getId(AGENT)).thenReturn(id);\n\n        final Id actual = resources.client().target(\"/\")\n                .request(MediaType.APPLICATION_JSON)\n                .header(HttpHeaders.USER_AGENT, AGENT).get(Id.class);\n\n        final Id expected = new Id(id);\n\n        assertThat(actual).isEqualTo(expected);\n        verify(worker).getId(AGENT);\n    }", "signature": "void testGetIdAsJSON()", "full_signature": "@Test public void testGetIdAsJSON()", "class_method_signature": "IdResourceTest.testGetIdAsJSON()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getId", "get", "header", "request", "target", "client", "isEqualTo", "assertThat", "getId", "verify"]}, "focal_class": {"identifier": "IdResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n            .getLogger(IdResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n            .getLogger(IdResource.class)", "var_name": "LOGGER"}, {"original_string": "private final IdWorker worker;", "modifier": "private final", "type": "IdWorker", "declarator": "worker", "var_name": "worker"}], "methods": [{"identifier": "IdResource", "parameters": "(final IdWorker worker)", "modifiers": "public", "return": "", "signature": " IdResource(final IdWorker worker)", "full_signature": "public  IdResource(final IdWorker worker)", "class_method_signature": "IdResource.IdResource(final IdWorker worker)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "(final String agent)", "modifiers": "public", "return": "long", "signature": "long getId(final String agent)", "full_signature": "public long getId(final String agent)", "class_method_signature": "IdResource.getId(final String agent)", "testcase": false, "constructor": false}, {"identifier": "getIdAsString", "parameters": "(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "modifiers": "@GET @Timed @Produces(MediaType.TEXT_PLAIN) @CacheControl(mustRevalidate = true, noCache = true, noStore = true) public", "return": "String", "signature": "String getIdAsString(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "full_signature": "@GET @Timed @Produces(MediaType.TEXT_PLAIN) @CacheControl(mustRevalidate = true, noCache = true, noStore = true) public String getIdAsString(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "class_method_signature": "IdResource.getIdAsString(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "testcase": false, "constructor": false}, {"identifier": "getIdAsJSON", "parameters": "(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "modifiers": "@GET @Timed @JSONP(callback = \"callback\", queryParam = \"callback\") @Produces({ MediaType.APPLICATION_JSON, MediaTypeAdditional.APPLICATION_JAVASCRIPT }) @CacheControl(mustRevalidate = true, noCache = true, noStore = true) public", "return": "Id", "signature": "Id getIdAsJSON(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "full_signature": "@GET @Timed @JSONP(callback = \"callback\", queryParam = \"callback\") @Produces({ MediaType.APPLICATION_JSON, MediaTypeAdditional.APPLICATION_JAVASCRIPT }) @CacheControl(mustRevalidate = true, noCache = true, noStore = true) public Id getIdAsJSON(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "class_method_signature": "IdResource.getIdAsJSON(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "testcase": false, "constructor": false}, {"identifier": "getIdAsProtobuf", "parameters": "(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent,\n            @QueryParam(\"count\") final Optional<IntParam> count)", "modifiers": "@GET @Timed @Produces(ProtocolBufferMediaType.APPLICATION_PROTOBUF) @CacheControl(mustRevalidate = true, noCache = true, noStore = true) public", "return": "SnowizardResponse", "signature": "SnowizardResponse getIdAsProtobuf(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent,\n            @QueryParam(\"count\") final Optional<IntParam> count)", "full_signature": "@GET @Timed @Produces(ProtocolBufferMediaType.APPLICATION_PROTOBUF) @CacheControl(mustRevalidate = true, noCache = true, noStore = true) public SnowizardResponse getIdAsProtobuf(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent,\n            @QueryParam(\"count\") final Optional<IntParam> count)", "class_method_signature": "IdResource.getIdAsProtobuf(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent,\n            @QueryParam(\"count\") final Optional<IntParam> count)", "testcase": false, "constructor": false}], "file": "snowizard-application/src/main/java/com/ge/snowizard/application/resources/IdResource.java"}, "focal_method": {"identifier": "getIdAsJSON", "parameters": "(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "modifiers": "@GET @Timed @JSONP(callback = \"callback\", queryParam = \"callback\") @Produces({ MediaType.APPLICATION_JSON, MediaTypeAdditional.APPLICATION_JAVASCRIPT }) @CacheControl(mustRevalidate = true, noCache = true, noStore = true) public", "return": "Id", "body": "@GET\n    @Timed\n    @JSONP(callback = \"callback\", queryParam = \"callback\")\n    @Produces({ MediaType.APPLICATION_JSON,\n        MediaTypeAdditional.APPLICATION_JAVASCRIPT })\n    @CacheControl(mustRevalidate = true, noCache = true, noStore = true)\n    public Id getIdAsJSON(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent) {\n        return new Id(getId(agent));\n    }", "signature": "Id getIdAsJSON(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "full_signature": "@GET @Timed @JSONP(callback = \"callback\", queryParam = \"callback\") @Produces({ MediaType.APPLICATION_JSON, MediaTypeAdditional.APPLICATION_JAVASCRIPT }) @CacheControl(mustRevalidate = true, noCache = true, noStore = true) public Id getIdAsJSON(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "class_method_signature": "IdResource.getIdAsJSON(\n            @HeaderParam(HttpHeaders.USER_AGENT) final String agent)", "testcase": false, "constructor": false, "invocations": ["getId"]}, "repository": {"repo_id": 10937119, "url": "https://github.com/GeneralElectric/snowizard", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 61, "size": 1890, "license": "licensed"}}