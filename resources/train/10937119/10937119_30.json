{"test_class": {"identifier": "IdWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long WORKER_MASK = 0x000000000001F000L;", "modifier": "private static final", "type": "long", "declarator": "WORKER_MASK = 0x000000000001F000L", "var_name": "WORKER_MASK"}, {"original_string": "private static final long DATACENTER_MASK = 0x00000000003E0000L;", "modifier": "private static final", "type": "long", "declarator": "DATACENTER_MASK = 0x00000000003E0000L", "var_name": "DATACENTER_MASK"}, {"original_string": "private static final long TIMESTAMP_MASK = 0xFFFFFFFFFFC00000L;", "modifier": "private static final", "type": "long", "declarator": "TIMESTAMP_MASK = 0xFFFFFFFFFFC00000L", "var_name": "TIMESTAMP_MASK"}], "file": "snowizard-core/src/test/java/com/ge/snowizard/core/IdWorkerTest.java"}, "test_case": {"identifier": "testGetId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetId() throws Exception {\n        final IdWorker worker = new IdWorker(1, 1);\n        final long id = worker.getId(\"infra-dm\");\n        assertThat(id).isGreaterThan(0L);\n    }", "signature": "void testGetId()", "full_signature": "@Test public void testGetId()", "class_method_signature": "IdWorkerTest.testGetId()", "testcase": true, "constructor": false, "invocations": ["getId", "isGreaterThan", "assertThat"]}, "focal_class": {"identifier": "IdWorker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n            .getLogger(IdWorker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n            .getLogger(IdWorker.class)", "var_name": "LOGGER"}, {"original_string": "private static final Pattern AGENT_PATTERN = Pattern\n            .compile(\"([a-zA-Z][a-zA-Z0-9\\\\-]*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "AGENT_PATTERN = Pattern\n            .compile(\"([a-zA-Z][a-zA-Z0-9\\\\-]*)\")", "var_name": "AGENT_PATTERN"}, {"original_string": "public static final long TWEPOCH = 1288834974657L;", "modifier": "public static final", "type": "long", "declarator": "TWEPOCH = 1288834974657L", "var_name": "TWEPOCH"}, {"original_string": "private static final long WORKER_ID_BITS = 5L;", "modifier": "private static final", "type": "long", "declarator": "WORKER_ID_BITS = 5L", "var_name": "WORKER_ID_BITS"}, {"original_string": "private static final long DATACENTER_ID_BITS = 5L;", "modifier": "private static final", "type": "long", "declarator": "DATACENTER_ID_BITS = 5L", "var_name": "DATACENTER_ID_BITS"}, {"original_string": "private static final long MAX_WORKER_ID = -1L ^ (-1L << WORKER_ID_BITS);", "modifier": "private static final", "type": "long", "declarator": "MAX_WORKER_ID = -1L ^ (-1L << WORKER_ID_BITS)", "var_name": "MAX_WORKER_ID"}, {"original_string": "private static final long MAX_DATACENTER_ID = -1L\n            ^ (-1L << DATACENTER_ID_BITS);", "modifier": "private static final", "type": "long", "declarator": "MAX_DATACENTER_ID = -1L\n            ^ (-1L << DATACENTER_ID_BITS)", "var_name": "MAX_DATACENTER_ID"}, {"original_string": "private static final long SEQUENCE_BITS = 12L;", "modifier": "private static final", "type": "long", "declarator": "SEQUENCE_BITS = 12L", "var_name": "SEQUENCE_BITS"}, {"original_string": "private static final long WORKER_ID_SHIFT = SEQUENCE_BITS;", "modifier": "private static final", "type": "long", "declarator": "WORKER_ID_SHIFT = SEQUENCE_BITS", "var_name": "WORKER_ID_SHIFT"}, {"original_string": "private static final long DATACENTER_ID_SHIFT = SEQUENCE_BITS\n            + WORKER_ID_BITS;", "modifier": "private static final", "type": "long", "declarator": "DATACENTER_ID_SHIFT = SEQUENCE_BITS\n            + WORKER_ID_BITS", "var_name": "DATACENTER_ID_SHIFT"}, {"original_string": "private static final long TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS\n            + WORKER_ID_BITS + DATACENTER_ID_BITS;", "modifier": "private static final", "type": "long", "declarator": "TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS\n            + WORKER_ID_BITS + DATACENTER_ID_BITS", "var_name": "TIMESTAMP_LEFT_SHIFT"}, {"original_string": "private static final long SEQUENCE_MASK = -1L ^ (-1L << SEQUENCE_BITS);", "modifier": "private static final", "type": "long", "declarator": "SEQUENCE_MASK = -1L ^ (-1L << SEQUENCE_BITS)", "var_name": "SEQUENCE_MASK"}, {"original_string": "private final MetricRegistry registry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final Counter idsCounter;", "modifier": "private final", "type": "Counter", "declarator": "idsCounter", "var_name": "idsCounter"}, {"original_string": "private final Counter exceptionsCounter;", "modifier": "private final", "type": "Counter", "declarator": "exceptionsCounter", "var_name": "exceptionsCounter"}, {"original_string": "private final Map<String, Counter> agentCounters = new ConcurrentHashMap<String, Counter>();", "modifier": "private final", "type": "Map<String, Counter>", "declarator": "agentCounters = new ConcurrentHashMap<String, Counter>()", "var_name": "agentCounters"}, {"original_string": "private final int workerId;", "modifier": "private final", "type": "int", "declarator": "workerId", "var_name": "workerId"}, {"original_string": "private final int datacenterId;", "modifier": "private final", "type": "int", "declarator": "datacenterId", "var_name": "datacenterId"}, {"original_string": "private final boolean validateUserAgent;", "modifier": "private final", "type": "boolean", "declarator": "validateUserAgent", "var_name": "validateUserAgent"}, {"original_string": "private final AtomicLong lastTimestamp = new AtomicLong(-1L);", "modifier": "private final", "type": "AtomicLong", "declarator": "lastTimestamp = new AtomicLong(-1L)", "var_name": "lastTimestamp"}, {"original_string": "private final AtomicLong sequence;", "modifier": "private final", "type": "AtomicLong", "declarator": "sequence", "var_name": "sequence"}], "methods": [{"identifier": "IdWorker", "parameters": "(final int workerId, final int datacenterId)", "modifiers": "public", "return": "", "signature": " IdWorker(final int workerId, final int datacenterId)", "full_signature": "public  IdWorker(final int workerId, final int datacenterId)", "class_method_signature": "IdWorker.IdWorker(final int workerId, final int datacenterId)", "testcase": false, "constructor": true}, {"identifier": "IdWorker", "parameters": "(final int workerId, final int datacenterId,\n            final long startSequence)", "modifiers": "public", "return": "", "signature": " IdWorker(final int workerId, final int datacenterId,\n            final long startSequence)", "full_signature": "public  IdWorker(final int workerId, final int datacenterId,\n            final long startSequence)", "class_method_signature": "IdWorker.IdWorker(final int workerId, final int datacenterId,\n            final long startSequence)", "testcase": false, "constructor": true}, {"identifier": "IdWorker", "parameters": "(final int workerId, final int datacenterId,\n            final boolean validateUserAgent)", "modifiers": "public", "return": "", "signature": " IdWorker(final int workerId, final int datacenterId,\n            final boolean validateUserAgent)", "full_signature": "public  IdWorker(final int workerId, final int datacenterId,\n            final boolean validateUserAgent)", "class_method_signature": "IdWorker.IdWorker(final int workerId, final int datacenterId,\n            final boolean validateUserAgent)", "testcase": false, "constructor": true}, {"identifier": "IdWorker", "parameters": "(final int workerId, final int datacenterId,\n            final long startSequence, final boolean validateUserAgent)", "modifiers": "public", "return": "", "signature": " IdWorker(final int workerId, final int datacenterId,\n            final long startSequence, final boolean validateUserAgent)", "full_signature": "public  IdWorker(final int workerId, final int datacenterId,\n            final long startSequence, final boolean validateUserAgent)", "class_method_signature": "IdWorker.IdWorker(final int workerId, final int datacenterId,\n            final long startSequence, final boolean validateUserAgent)", "testcase": false, "constructor": true}, {"identifier": "IdWorker", "parameters": "(final int workerId, final int datacenterId,\n            final long startSequence, final boolean validateUserAgent,\n            final MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " IdWorker(final int workerId, final int datacenterId,\n            final long startSequence, final boolean validateUserAgent,\n            final MetricRegistry registry)", "full_signature": "public  IdWorker(final int workerId, final int datacenterId,\n            final long startSequence, final boolean validateUserAgent,\n            final MetricRegistry registry)", "class_method_signature": "IdWorker.IdWorker(final int workerId, final int datacenterId,\n            final long startSequence, final boolean validateUserAgent,\n            final MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "(final String agent)", "modifiers": "public", "return": "long", "signature": "long getId(final String agent)", "full_signature": "public long getId(final String agent)", "class_method_signature": "IdWorker.getId(final String agent)", "testcase": false, "constructor": false}, {"identifier": "getWorkerId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWorkerId()", "full_signature": "public int getWorkerId()", "class_method_signature": "IdWorker.getWorkerId()", "testcase": false, "constructor": false}, {"identifier": "getDatacenterId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDatacenterId()", "full_signature": "public int getDatacenterId()", "class_method_signature": "IdWorker.getDatacenterId()", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimestamp()", "full_signature": "public long getTimestamp()", "class_method_signature": "IdWorker.getTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getSequence", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSequence()", "full_signature": "public long getSequence()", "class_method_signature": "IdWorker.getSequence()", "testcase": false, "constructor": false}, {"identifier": "setSequence", "parameters": "(final long value)", "modifiers": "public", "return": "void", "signature": "void setSequence(final long value)", "full_signature": "public void setSequence(final long value)", "class_method_signature": "IdWorker.setSequence(final long value)", "testcase": false, "constructor": false}, {"identifier": "nextId", "parameters": "()", "modifiers": "public synchronized", "return": "long", "signature": "long nextId()", "full_signature": "public synchronized long nextId()", "class_method_signature": "IdWorker.nextId()", "testcase": false, "constructor": false}, {"identifier": "tilNextMillis", "parameters": "(final long lastTimestamp)", "modifiers": "protected", "return": "long", "signature": "long tilNextMillis(final long lastTimestamp)", "full_signature": "protected long tilNextMillis(final long lastTimestamp)", "class_method_signature": "IdWorker.tilNextMillis(final long lastTimestamp)", "testcase": false, "constructor": false}, {"identifier": "timeGen", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long timeGen()", "full_signature": "protected long timeGen()", "class_method_signature": "IdWorker.timeGen()", "testcase": false, "constructor": false}, {"identifier": "isValidUserAgent", "parameters": "(final String agent)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidUserAgent(final String agent)", "full_signature": "public boolean isValidUserAgent(final String agent)", "class_method_signature": "IdWorker.isValidUserAgent(final String agent)", "testcase": false, "constructor": false}, {"identifier": "genCounter", "parameters": "(final String agent)", "modifiers": "protected", "return": "void", "signature": "void genCounter(final String agent)", "full_signature": "protected void genCounter(final String agent)", "class_method_signature": "IdWorker.genCounter(final String agent)", "testcase": false, "constructor": false}], "file": "snowizard-core/src/main/java/com/ge/snowizard/core/IdWorker.java"}, "focal_method": {"identifier": "getId", "parameters": "(final String agent)", "modifiers": "public", "return": "long", "body": "public long getId(final String agent) throws InvalidUserAgentError,\n            InvalidSystemClock {\n        if (!isValidUserAgent(agent)) {\n            exceptionsCounter.inc();\n            throw new InvalidUserAgentError();\n        }\n\n        final long id = nextId();\n        genCounter(agent);\n\n        return id;\n    }", "signature": "long getId(final String agent)", "full_signature": "public long getId(final String agent)", "class_method_signature": "IdWorker.getId(final String agent)", "testcase": false, "constructor": false, "invocations": ["isValidUserAgent", "inc", "nextId", "genCounter"]}, "repository": {"repo_id": 10937119, "url": "https://github.com/GeneralElectric/snowizard", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 61, "size": 1890, "license": "licensed"}}