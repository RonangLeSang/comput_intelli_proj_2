{"test_class": {"identifier": "DiagnosisMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/org/openmrs/module/emrapi/encounter/DiagnosisMapperTest.java"}, "test_case": {"identifier": "shouldMapEmrapiDiagnosisToEncounterTransactionDiagnosis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMapEmrapiDiagnosisToEncounterTransactionDiagnosis() throws Exception {\n        DiagnosisMapper diagnosisMapper = new DiagnosisMapper();\n        Diagnosis diagnosis = new Diagnosis();\n        diagnosis.setCertainty(Diagnosis.Certainty.CONFIRMED);\n        diagnosis.setOrder(Diagnosis.Order.PRIMARY);\n        CodedOrFreeTextAnswer freeTextAnswer = new CodedOrFreeTextAnswer();\n        freeTextAnswer.setNonCodedAnswer(\"cold\");\n        diagnosis.setDiagnosis(freeTextAnswer);\n        Obs existingObs = new Obs();\n        existingObs.setEncounter(new Encounter());\n        existingObs.setComment(\"comment\");\n        diagnosis.setExistingObs(existingObs);\n\n        EncounterTransaction.Diagnosis etDiagnosis = diagnosisMapper.convert(diagnosis);\n\n        assertEquals(Diagnosis.Certainty.CONFIRMED.toString(), etDiagnosis.getCertainty());\n        assertEquals(Diagnosis.Order.PRIMARY.toString(), etDiagnosis.getOrder());\n        assertEquals(\"cold\", etDiagnosis.getFreeTextAnswer());\n        assertNull(etDiagnosis.getCodedAnswer());\n        assertEquals(\"comment\", etDiagnosis.getComments());\n    }", "signature": "void shouldMapEmrapiDiagnosisToEncounterTransactionDiagnosis()", "full_signature": "@Test public void shouldMapEmrapiDiagnosisToEncounterTransactionDiagnosis()", "class_method_signature": "DiagnosisMapperTest.shouldMapEmrapiDiagnosisToEncounterTransactionDiagnosis()", "testcase": true, "constructor": false, "invocations": ["setCertainty", "setOrder", "setNonCodedAnswer", "setDiagnosis", "setEncounter", "setComment", "setExistingObs", "convert", "assertEquals", "toString", "getCertainty", "assertEquals", "toString", "getOrder", "assertEquals", "getFreeTextAnswer", "assertNull", "getCodedAnswer", "assertEquals", "getComments"]}, "focal_class": {"identifier": "DiagnosisMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConceptMapper conceptMapper = new ConceptMapper();", "modifier": "private final", "type": "ConceptMapper", "declarator": "conceptMapper = new ConceptMapper()", "var_name": "conceptMapper"}, {"original_string": "private final EncounterProviderMapper encounterProviderMapper = new EncounterProviderMapper();", "modifier": "private final", "type": "EncounterProviderMapper", "declarator": "encounterProviderMapper = new EncounterProviderMapper()", "var_name": "encounterProviderMapper"}], "methods": [{"identifier": "map", "parameters": "(Obs obs, DiagnosisMetadata diagnosisMetadata)", "modifiers": "public", "return": "EncounterTransaction.Diagnosis", "signature": "EncounterTransaction.Diagnosis map(Obs obs, DiagnosisMetadata diagnosisMetadata)", "full_signature": "public EncounterTransaction.Diagnosis map(Obs obs, DiagnosisMetadata diagnosisMetadata)", "class_method_signature": "DiagnosisMapper.map(Obs obs, DiagnosisMetadata diagnosisMetadata)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(List<Diagnosis> pastDiagnoses)", "modifiers": "public", "return": "List<EncounterTransaction.Diagnosis>", "signature": "List<EncounterTransaction.Diagnosis> convert(List<Diagnosis> pastDiagnoses)", "full_signature": "public List<EncounterTransaction.Diagnosis> convert(List<Diagnosis> pastDiagnoses)", "class_method_signature": "DiagnosisMapper.convert(List<Diagnosis> pastDiagnoses)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Diagnosis diagnosis)", "modifiers": "public", "return": "EncounterTransaction.Diagnosis", "signature": "EncounterTransaction.Diagnosis convert(Diagnosis diagnosis)", "full_signature": "public EncounterTransaction.Diagnosis convert(Diagnosis diagnosis)", "class_method_signature": "DiagnosisMapper.convert(Diagnosis diagnosis)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/module/emrapi/encounter/DiagnosisMapper.java"}, "focal_method": {"identifier": "convert", "parameters": "(List<Diagnosis> pastDiagnoses)", "modifiers": "public", "return": "List<EncounterTransaction.Diagnosis>", "body": "public List<EncounterTransaction.Diagnosis> convert(List<Diagnosis> pastDiagnoses) {\n        List<EncounterTransaction.Diagnosis> pastEncounterDiagnoses = new ArrayList<EncounterTransaction.Diagnosis>();\n        for (Diagnosis diagnosis : pastDiagnoses) {\n            pastEncounterDiagnoses.add(convert(diagnosis));\n        }\n        return pastEncounterDiagnoses;\n    }", "signature": "List<EncounterTransaction.Diagnosis> convert(List<Diagnosis> pastDiagnoses)", "full_signature": "public List<EncounterTransaction.Diagnosis> convert(List<Diagnosis> pastDiagnoses)", "class_method_signature": "DiagnosisMapper.convert(List<Diagnosis> pastDiagnoses)", "testcase": false, "constructor": false, "invocations": ["add", "convert"]}, "repository": {"repo_id": 9158616, "url": "https://github.com/openmrs/openmrs-module-emrapi", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 12, "size": 2691, "license": "licensed"}}