{"test_class": {"identifier": "AwaitingAdmissionVisitQueryEvaluatorTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConceptService conceptService;", "modifier": "@Autowired\n    private", "type": "ConceptService", "declarator": "conceptService", "var_name": "conceptService"}, {"original_string": "@Autowired\n    private EmrConceptService emrConceptService;", "modifier": "@Autowired\n    private", "type": "EmrConceptService", "declarator": "emrConceptService", "var_name": "emrConceptService"}, {"original_string": "@Autowired\n    private DispositionService dispositionService;", "modifier": "@Autowired\n    private", "type": "DispositionService", "declarator": "dispositionService", "var_name": "dispositionService"}, {"original_string": "@Autowired\n    private VisitQueryService visitQueryService;", "modifier": "@Autowired\n    private", "type": "VisitQueryService", "declarator": "visitQueryService", "var_name": "visitQueryService"}, {"original_string": "@Autowired\n    private EmrApiProperties emrApiProperties;", "modifier": "@Autowired\n    private", "type": "EmrApiProperties", "declarator": "emrApiProperties", "var_name": "emrApiProperties"}, {"original_string": "@Autowired\n    TestDataManager testDataManager;", "modifier": "@Autowired", "type": "TestDataManager", "declarator": "testDataManager", "var_name": "testDataManager"}, {"original_string": "private DispositionDescriptor dispositionDescriptor;", "modifier": "private", "type": "DispositionDescriptor", "declarator": "dispositionDescriptor", "var_name": "dispositionDescriptor"}, {"original_string": "private AwaitingAdmissionVisitQuery query;", "modifier": "private", "type": "AwaitingAdmissionVisitQuery", "declarator": "query", "var_name": "query"}], "file": "api/src/test/java/org/openmrs/module/emrapi/adt/reporting/evaluator/AwaitingAdmissionVisitQueryEvaluatorTest.java"}, "test_case": {"identifier": "shouldNotFindVisitWithDispositionOfAdmitIfFollowedByAdmissionDenialObsFollowedByAnotherAdmissionDispositionFollowedByAnotherAdmissionDenial", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotFindVisitWithDispositionOfAdmitIfFollowedByAdmissionDenialObsFollowedByAnotherAdmissionDispositionFollowedByAnotherAdmissionDenial() throws Exception {\n\n        Patient patient = testDataManager.randomPatient().save();\n\n        // a visit with a dispo = ADMIT and DENY admit decision obs after it\n        Visit visit =\n                testDataManager.visit()\n                        .patient(patient)\n                        .visitType(emrApiProperties.getAtFacilityVisitType())\n                        .started(new Date())\n                        .encounter(testDataManager.encounter()\n                                .patient(patient)\n                                .encounterDatetime(new DateTime(2014,10,10,10,0,0).toDate())\n                                .encounterType(emrApiProperties.getVisitNoteEncounterType())\n                                .obs(testDataManager.obs()\n                                        .concept(dispositionDescriptor.getDispositionConcept())\n                                        .value(emrConceptService.getConcept(\"org.openmrs.module.emrapi:Admit to hospital\"))\n                                        .get())\n                                .get())\n                        .encounter(testDataManager.encounter()\n                                .patient(patient)\n                                .encounterDatetime(new DateTime(2014,10,11,10,0,0).toDate())\n                                .encounterType(emrApiProperties.getVisitNoteEncounterType())\n                                .obs(testDataManager.obs()\n                                        .concept(emrApiProperties.getAdmissionDecisionConcept())\n                                        .value(emrApiProperties.getDenyAdmissionConcept())\n                                        .get())\n                                .get())\n                        .encounter(testDataManager.encounter()\n                                .patient(patient)\n                                .encounterDatetime(new DateTime(2014,10,12,10,0,0).toDate())\n                                .encounterType(emrApiProperties.getVisitNoteEncounterType())\n                                .obs(testDataManager.obs()\n                                        .concept(dispositionDescriptor.getDispositionConcept())\n                                        .value(emrConceptService.getConcept(\"org.openmrs.module.emrapi:Admit to hospital\"))\n                                        .get())\n                                .get())\n                        .encounter(testDataManager.encounter()\n                                .patient(patient)\n                                .encounterDatetime(new DateTime(2014,10,13,10,0,0).toDate())\n                                .encounterType(emrApiProperties.getVisitNoteEncounterType())\n                                .obs(testDataManager.obs()\n                                        .concept(emrApiProperties.getAdmissionDecisionConcept())\n                                        .value(emrApiProperties.getDenyAdmissionConcept())\n                                        .get())\n                                .get())\n                        .save();\n\n        VisitQueryResult result = visitQueryService.evaluate(query, null);\n        assertThat(result.getMemberIds().size(), is(0));\n\n    }", "signature": "void shouldNotFindVisitWithDispositionOfAdmitIfFollowedByAdmissionDenialObsFollowedByAnotherAdmissionDispositionFollowedByAnotherAdmissionDenial()", "full_signature": "@Test public void shouldNotFindVisitWithDispositionOfAdmitIfFollowedByAdmissionDenialObsFollowedByAnotherAdmissionDispositionFollowedByAnotherAdmissionDenial()", "class_method_signature": "AwaitingAdmissionVisitQueryEvaluatorTest.shouldNotFindVisitWithDispositionOfAdmitIfFollowedByAdmissionDenialObsFollowedByAnotherAdmissionDispositionFollowedByAnotherAdmissionDenial()", "testcase": true, "constructor": false, "invocations": ["save", "randomPatient", "save", "encounter", "encounter", "encounter", "encounter", "started", "visitType", "patient", "visit", "getAtFacilityVisitType", "get", "obs", "encounterType", "encounterDatetime", "patient", "encounter", "toDate", "getVisitNoteEncounterType", "get", "value", "concept", "obs", "getDispositionConcept", "getConcept", "get", "obs", "encounterType", "encounterDatetime", "patient", "encounter", "toDate", "getVisitNoteEncounterType", "get", "value", "concept", "obs", "getAdmissionDecisionConcept", "getDenyAdmissionConcept", "get", "obs", "encounterType", "encounterDatetime", "patient", "encounter", "toDate", "getVisitNoteEncounterType", "get", "value", "concept", "obs", "getDispositionConcept", "getConcept", "get", "obs", "encounterType", "encounterDatetime", "patient", "encounter", "toDate", "getVisitNoteEncounterType", "get", "value", "concept", "obs", "getAdmissionDecisionConcept", "getDenyAdmissionConcept", "evaluate", "assertThat", "size", "getMemberIds", "is"]}, "focal_class": {"identifier": "AwaitingAdmissionVisitQueryEvaluator", "superclass": "", "interfaces": "implements VisitQueryEvaluator", "fields": [{"original_string": "@Autowired\n    AdtService adtService;", "modifier": "@Autowired", "type": "AdtService", "declarator": "adtService", "var_name": "adtService"}, {"original_string": "@Autowired\n    DispositionService dispositionService;", "modifier": "@Autowired", "type": "DispositionService", "declarator": "dispositionService", "var_name": "dispositionService"}, {"original_string": "@Autowired\n    EmrConceptService emrConceptService;", "modifier": "@Autowired", "type": "EmrConceptService", "declarator": "emrConceptService", "var_name": "emrConceptService"}, {"original_string": "@Autowired\n    EmrApiProperties emrApiProperties;", "modifier": "@Autowired", "type": "EmrApiProperties", "declarator": "emrApiProperties", "var_name": "emrApiProperties"}, {"original_string": "@Autowired\n    EvaluationService evaluationService;", "modifier": "@Autowired", "type": "EvaluationService", "declarator": "evaluationService", "var_name": "evaluationService"}], "methods": [{"identifier": "evaluate", "parameters": "(VisitQuery visitQuery, EvaluationContext evaluationContext)", "modifiers": "@Override public", "return": "VisitQueryResult", "signature": "VisitQueryResult evaluate(VisitQuery visitQuery, EvaluationContext evaluationContext)", "full_signature": "@Override public VisitQueryResult evaluate(VisitQuery visitQuery, EvaluationContext evaluationContext)", "class_method_signature": "AwaitingAdmissionVisitQueryEvaluator.evaluate(VisitQuery visitQuery, EvaluationContext evaluationContext)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/module/emrapi/adt/reporting/evaluator/AwaitingAdmissionVisitQueryEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(VisitQuery visitQuery, EvaluationContext evaluationContext)", "modifiers": "@Override public", "return": "VisitQueryResult", "body": "@Override\n    public VisitQueryResult evaluate(VisitQuery visitQuery, EvaluationContext evaluationContext) throws EvaluationException {\n\n        AwaitingAdmissionVisitQuery eq = (AwaitingAdmissionVisitQuery) visitQuery;\n        Location location = eq.getLocation();\n\n        Location visitLocation = null ;\n        if (location != null ) {\n            visitLocation = adtService.getLocationThatSupportsVisits(location);\n        }\n\n        HqlQueryBuilder query = new HqlQueryBuilder();\n\n        // distinct *active* visits with a disposition of type ADMIT (on any encounter from that visit)\n        // that is NOT followed by a admission decision obs with a value of \"DENY\" and with no Admission Encounters\n        query.select(\"distinct visit.visitId\").from(Visit.class, \"visit\")\n                .innerJoin(\"visit.encounters\", \"dispoEncounter\")\n                .innerJoin(\"dispoEncounter.obs\", \"dispo\")\n                .whereEqual(\"dispo.concept\", dispositionService.getDispositionDescriptor().getDispositionConcept())\n                .whereIn(\"dispo.valueCoded\", AdtUtil.getAdmissionDispositionsConcepts(emrConceptService, dispositionService))\n                .whereEqual(\"dispo.voided\", false)\n                .whereEqual(\"dispoEncounter.voided\", false)\n                .whereEqual(\"visit.voided\", false)\n                .whereEqual(\"visit.location\", visitLocation)\n                .whereEqual(\"visit.patient.dead\", false) // exclude dead patients\n                .whereNull(\"visit.stopDatetime\")   // stopDatetime = null means \"active visit\"\n                .where(\"(select count(*) from Encounter as admission \"    // count=0, ie no admission encounters\n                        + \"where admission.visit = visit \"\n                        + \"and admission.voided = false \"\n                        + \"and admission.encounterType = :admissionEncounterType\"\n                        + \") = 0\")\n                .where(\"(select count(*) from Obs as admitDecision inner join admitDecision.encounter as encounterInVisit \"   // count=0, ie no admission decision obs with value=deny\n                            + \"where encounterInVisit.visit = visit \"\n                            + \"and encounterInVisit.voided = false \"\n                            + \"and admitDecision.voided = false \"\n                            + \"and admitDecision.concept = :admissionDecisionConcept \"\n                            + \"and admitDecision.valueCoded = :denyAdmissionConcept \"\n                            + \"and encounterInVisit.encounterDatetime > dispoEncounter.encounterDatetime \"  // see https://issues.openmrs.org/browse/EA-31\n                            + \") = 0\")\n                // restrict by context\n                .whereVisitIn(\"visit\", evaluationContext)\n                // add parameters\n                .withValue(\"admissionEncounterType\", emrApiProperties.getAdmissionEncounterType())\n                .withValue(\"admissionDecisionConcept\", emrApiProperties.getAdmissionDecisionConcept())\n                .withValue(\"denyAdmissionConcept\", emrApiProperties.getDenyAdmissionConcept());\n\n        VisitQueryResult result = new VisitQueryResult(visitQuery, evaluationContext);\n\n        List<Integer> results= evaluationService.evaluateToList(query, Integer.class, evaluationContext);\n        result.add(results.toArray(new Integer[results.size()]));\n        return result;\n\n    }", "signature": "VisitQueryResult evaluate(VisitQuery visitQuery, EvaluationContext evaluationContext)", "full_signature": "@Override public VisitQueryResult evaluate(VisitQuery visitQuery, EvaluationContext evaluationContext)", "class_method_signature": "AwaitingAdmissionVisitQueryEvaluator.evaluate(VisitQuery visitQuery, EvaluationContext evaluationContext)", "testcase": false, "constructor": false, "invocations": ["getLocation", "getLocationThatSupportsVisits", "withValue", "withValue", "withValue", "whereVisitIn", "where", "where", "whereNull", "whereEqual", "whereEqual", "whereEqual", "whereEqual", "whereEqual", "whereIn", "whereEqual", "innerJoin", "innerJoin", "from", "select", "getDispositionConcept", "getDispositionDescriptor", "getAdmissionDispositionsConcepts", "getAdmissionEncounterType", "getAdmissionDecisionConcept", "getDenyAdmissionConcept", "evaluateToList", "add", "toArray", "size"]}, "repository": {"repo_id": 9158616, "url": "https://github.com/openmrs/openmrs-module-emrapi", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 12, "size": 2691, "license": "licensed"}}