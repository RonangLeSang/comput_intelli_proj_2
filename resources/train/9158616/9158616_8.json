{"test_class": {"identifier": "EmrOrderServiceImpl_1_12Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private EncounterService encounterService;", "modifier": "@Mock\n    private", "type": "EncounterService", "declarator": "encounterService", "var_name": "encounterService"}, {"original_string": "@Mock\n    private OpenMRSDrugOrderMapper openMRSDrugOrderMapper;", "modifier": "@Mock\n    private", "type": "OpenMRSDrugOrderMapper", "declarator": "openMRSDrugOrderMapper", "var_name": "openMRSDrugOrderMapper"}, {"original_string": "@Mock\n    private OpenMRSOrderMapper openMRSOrderMapper;", "modifier": "@Mock\n    private", "type": "OpenMRSOrderMapper", "declarator": "openMRSOrderMapper", "var_name": "openMRSOrderMapper"}, {"original_string": "@Mock\n    private OrderSetService orderSetService;", "modifier": "@Mock\n    private", "type": "OrderSetService", "declarator": "orderSetService", "var_name": "orderSetService"}, {"original_string": "@Mock\n    private OpenMRSOrderGroupMapper openMRSOrderGroupMapper;", "modifier": "@Mock\n    private", "type": "OpenMRSOrderGroupMapper", "declarator": "openMRSOrderGroupMapper", "var_name": "openMRSOrderGroupMapper"}], "file": "api-1.12/src/test/java/org/openmrs/module/emrapi/encounter/EmrOrderServiceImpl_1_12Test.java"}, "test_case": {"identifier": "shouldSaveOrders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSaveOrders() throws ParseException {\n        EmrOrderServiceImpl_1_12 emrOrderService = new EmrOrderServiceImpl_1_12(openMRSDrugOrderMapper, encounterService, openMRSOrderMapper, orderSetService, openMRSOrderGroupMapper);\n        EncounterTransaction.Order order1 = new OrderBuilder().withConceptUuid(\"concept-uuid1\").withComment(\"Comment\").build();\n        EncounterTransaction.Order order2 = new OrderBuilder().withConceptUuid(\"concept-uuid2\").withComment(\"Comment\").build();\n\n        Order mappedOrder1 = new Order();\n        Concept concept = new Concept();\n        concept.setUuid(\"concept-uuid1\");\n        mappedOrder1.setConcept(concept);\n        mappedOrder1.setCommentToFulfiller(\"Comment\");\n\n        Order mappedOrder2 = new Order();\n        concept = new Concept();\n        concept.setUuid(\"concept-uuid2\");\n        mappedOrder2.setConcept(concept);\n        mappedOrder2.setCommentToFulfiller(\"Comment\");\n\n        Encounter encounter = new Encounter();\n        when(openMRSOrderMapper.map(order1,encounter)).thenReturn(mappedOrder1);\n        when(openMRSOrderMapper.map(order2,encounter)).thenReturn(mappedOrder2);\n\n        emrOrderService.saveOrders(Arrays.asList(order1, order2), encounter);\n\n        ArgumentCaptor<Encounter> encounterArgumentCaptor = ArgumentCaptor.forClass(Encounter.class);\n        verify(encounterService).saveEncounter(encounterArgumentCaptor.capture());\n        Encounter savedEncounter = encounterArgumentCaptor.getValue();\n        ArrayList<Order> savedOrders = new ArrayList<Order>(savedEncounter.getOrders());\n        assertThat(savedOrders.size(), is(2));\n        assertTrue(existsInOrdersList(mappedOrder1, savedOrders));\n        assertTrue(existsInOrdersList(mappedOrder2, savedOrders));\n    }", "signature": "void shouldSaveOrders()", "full_signature": "@Test public void shouldSaveOrders()", "class_method_signature": "EmrOrderServiceImpl_1_12Test.shouldSaveOrders()", "testcase": true, "constructor": false, "invocations": ["build", "withComment", "withConceptUuid", "build", "withComment", "withConceptUuid", "setUuid", "setConcept", "setCommentToFulfiller", "setUuid", "setConcept", "setCommentToFulfiller", "thenReturn", "when", "map", "thenReturn", "when", "map", "saveOrders", "asList", "forClass", "saveEncounter", "verify", "capture", "getValue", "getOrders", "assertThat", "size", "is", "assertTrue", "existsInOrdersList", "assertTrue", "existsInOrdersList"]}, "focal_class": {"identifier": "EmrOrderServiceImpl_1_12", "superclass": "", "interfaces": "implements EmrOrderService", "fields": [{"original_string": "private final EncounterService encounterService;", "modifier": "private final", "type": "EncounterService", "declarator": "encounterService", "var_name": "encounterService"}, {"original_string": "private final OpenMRSDrugOrderMapper openMRSDrugOrderMapper;", "modifier": "private final", "type": "OpenMRSDrugOrderMapper", "declarator": "openMRSDrugOrderMapper", "var_name": "openMRSDrugOrderMapper"}, {"original_string": "private final OpenMRSOrderMapper openMRSOrderMapper;", "modifier": "private final", "type": "OpenMRSOrderMapper", "declarator": "openMRSOrderMapper", "var_name": "openMRSOrderMapper"}, {"original_string": "private final OrderSetService orderSetService;", "modifier": "private final", "type": "OrderSetService", "declarator": "orderSetService", "var_name": "orderSetService"}, {"original_string": "private final OpenMRSOrderGroupMapper openMRSOrderGroupMapper;", "modifier": "private final", "type": "OpenMRSOrderGroupMapper", "declarator": "openMRSOrderGroupMapper", "var_name": "openMRSOrderGroupMapper"}], "methods": [{"identifier": "EmrOrderServiceImpl_1_12", "parameters": "(OpenMRSDrugOrderMapper openMRSDrugOrderMapper, EncounterService encounterService,\n                                    OpenMRSOrderMapper openMRSOrderMapper, OrderSetService orderSetService,\n                                    OpenMRSOrderGroupMapper openMRSOrderGroupMapper)", "modifiers": "@Autowired public", "return": "", "signature": " EmrOrderServiceImpl_1_12(OpenMRSDrugOrderMapper openMRSDrugOrderMapper, EncounterService encounterService,\n                                    OpenMRSOrderMapper openMRSOrderMapper, OrderSetService orderSetService,\n                                    OpenMRSOrderGroupMapper openMRSOrderGroupMapper)", "full_signature": "@Autowired public  EmrOrderServiceImpl_1_12(OpenMRSDrugOrderMapper openMRSDrugOrderMapper, EncounterService encounterService,\n                                    OpenMRSOrderMapper openMRSOrderMapper, OrderSetService orderSetService,\n                                    OpenMRSOrderGroupMapper openMRSOrderGroupMapper)", "class_method_signature": "EmrOrderServiceImpl_1_12.EmrOrderServiceImpl_1_12(OpenMRSDrugOrderMapper openMRSDrugOrderMapper, EncounterService encounterService,\n                                    OpenMRSOrderMapper openMRSOrderMapper, OrderSetService orderSetService,\n                                    OpenMRSOrderGroupMapper openMRSOrderGroupMapper)", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(List<EncounterTransaction.DrugOrder> drugOrders, Encounter encounter)", "modifiers": "@Override public", "return": "void", "signature": "void save(List<EncounterTransaction.DrugOrder> drugOrders, Encounter encounter)", "full_signature": "@Override public void save(List<EncounterTransaction.DrugOrder> drugOrders, Encounter encounter)", "class_method_signature": "EmrOrderServiceImpl_1_12.save(List<EncounterTransaction.DrugOrder> drugOrders, Encounter encounter)", "testcase": false, "constructor": false}, {"identifier": "saveOrders", "parameters": "(List<EncounterTransaction.Order> orders, Encounter encounter)", "modifiers": "@Override public", "return": "void", "signature": "void saveOrders(List<EncounterTransaction.Order> orders, Encounter encounter)", "full_signature": "@Override public void saveOrders(List<EncounterTransaction.Order> orders, Encounter encounter)", "class_method_signature": "EmrOrderServiceImpl_1_12.saveOrders(List<EncounterTransaction.Order> orders, Encounter encounter)", "testcase": false, "constructor": false}, {"identifier": "mapToOpenMRSOrderGroup", "parameters": "(Set<OrderGroup> orderGroups, EncounterTransaction.OrderGroup newOrderGroup, Encounter encounter)", "modifiers": "private", "return": "OrderGroup", "signature": "OrderGroup mapToOpenMRSOrderGroup(Set<OrderGroup> orderGroups, EncounterTransaction.OrderGroup newOrderGroup, Encounter encounter)", "full_signature": "private OrderGroup mapToOpenMRSOrderGroup(Set<OrderGroup> orderGroups, EncounterTransaction.OrderGroup newOrderGroup, Encounter encounter)", "class_method_signature": "EmrOrderServiceImpl_1_12.mapToOpenMRSOrderGroup(Set<OrderGroup> orderGroups, EncounterTransaction.OrderGroup newOrderGroup, Encounter encounter)", "testcase": false, "constructor": false}], "file": "api-1.12/src/main/java/org/openmrs/module/emrapi/encounter/EmrOrderServiceImpl_1_12.java"}, "focal_method": {"identifier": "saveOrders", "parameters": "(List<EncounterTransaction.Order> orders, Encounter encounter)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void saveOrders(List<EncounterTransaction.Order> orders, Encounter encounter) {\n        Set<OrderGroup> orderGroups = new LinkedHashSet<OrderGroup>();\n\n        for (EncounterTransaction.Order order : orders) {\n            OrderGroup orderGroup = mapToOpenMRSOrderGroup(orderGroups, order.getOrderGroup(), encounter);\n\n            Order omrsOrder = openMRSOrderMapper.map(order, encounter);\n            omrsOrder.setOrderGroup(orderGroup);\n\n            encounter.addOrder(omrsOrder);\n        }\n        encounterService.saveEncounter(encounter);\n    }", "signature": "void saveOrders(List<EncounterTransaction.Order> orders, Encounter encounter)", "full_signature": "@Override public void saveOrders(List<EncounterTransaction.Order> orders, Encounter encounter)", "class_method_signature": "EmrOrderServiceImpl_1_12.saveOrders(List<EncounterTransaction.Order> orders, Encounter encounter)", "testcase": false, "constructor": false, "invocations": ["mapToOpenMRSOrderGroup", "getOrderGroup", "map", "setOrderGroup", "addOrder", "saveEncounter"]}, "repository": {"repo_id": 9158616, "url": "https://github.com/openmrs/openmrs-module-emrapi", "language": "Java", "is_fork": false, "fork_count": 117, "stargazer_count": 12, "size": 2691, "license": "licensed"}}