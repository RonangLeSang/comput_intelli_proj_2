{"test_class": {"identifier": "OrmliteImageRepositoryTest", "superclass": "extends OrmliteRepositoryBaseTest", "interfaces": "", "fields": [{"original_string": "private Dao<ImageRecord, String> imageDao;", "modifier": "private", "type": "Dao<ImageRecord, String>", "declarator": "imageDao", "var_name": "imageDao"}, {"original_string": "private Dao<IgnoreRecord, String> ignoreDao;", "modifier": "private", "type": "Dao<IgnoreRecord, String>", "declarator": "ignoreDao", "var_name": "ignoreDao"}, {"original_string": "private static final long HASH_EXISTING_RECORD = 1;", "modifier": "private static final", "type": "long", "declarator": "HASH_EXISTING_RECORD = 1", "var_name": "HASH_EXISTING_RECORD"}, {"original_string": "private static final long HASH_NEW_RECORD = 2;", "modifier": "private static final", "type": "long", "declarator": "HASH_NEW_RECORD = 2", "var_name": "HASH_NEW_RECORD"}, {"original_string": "private String pathExisting;", "modifier": "private", "type": "String", "declarator": "pathExisting", "var_name": "pathExisting"}, {"original_string": "private String pathNew;", "modifier": "private", "type": "String", "declarator": "pathNew", "var_name": "pathNew"}, {"original_string": "private ImageRecord imageExisting;", "modifier": "private", "type": "ImageRecord", "declarator": "imageExisting", "var_name": "imageExisting"}, {"original_string": "private ImageRecord imageNew;", "modifier": "private", "type": "ImageRecord", "declarator": "imageNew", "var_name": "imageNew"}, {"original_string": "private OrmliteImageRepository cut;", "modifier": "private", "type": "OrmliteImageRepository", "declarator": "cut", "var_name": "cut"}], "file": "core/src/test/java/com/github/dozedoff/similarImage/db/repository/ormlite/OrmliteImageRepositoryTest.java"}, "test_case": {"identifier": "testRemoveImageRecordCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRemoveImageRecordCollection() throws Exception {\n\t\timageDao.create(imageNew);\n\n\t\tList<ImageRecord> toRemove = new LinkedList<ImageRecord>();\n\t\ttoRemove.add(imageExisting);\n\t\ttoRemove.add(imageNew);\n\n\t\tassertThat(imageDao.queryForAll(), hasSize(2)); // guard assert\n\n\t\tcut.remove(toRemove);\n\n\t\tassertThat(imageDao.queryForMatching(imageExisting), hasSize(0));\n\t}", "signature": "void testRemoveImageRecordCollection()", "full_signature": "@Test public void testRemoveImageRecordCollection()", "class_method_signature": "OrmliteImageRepositoryTest.testRemoveImageRecordCollection()", "testcase": true, "constructor": false, "invocations": ["create", "add", "add", "assertThat", "queryForAll", "hasSize", "remove", "assertThat", "queryForMatching", "hasSize"]}, "focal_class": {"identifier": "OrmliteImageRepository", "superclass": "", "interfaces": "implements ImageRepository", "fields": [{"original_string": "private static final String STRING_QUERY_WILDCARD = \"%\";", "modifier": "private static final", "type": "String", "declarator": "STRING_QUERY_WILDCARD = \"%\"", "var_name": "STRING_QUERY_WILDCARD"}, {"original_string": "private final Dao<ImageRecord, String> imageDao;", "modifier": "private final", "type": "Dao<ImageRecord, String>", "declarator": "imageDao", "var_name": "imageDao"}, {"original_string": "private PreparedQuery<ImageRecord> queryStartsWithPath;", "modifier": "private", "type": "PreparedQuery<ImageRecord>", "declarator": "queryStartsWithPath", "var_name": "queryStartsWithPath"}, {"original_string": "private PreparedQuery<ImageRecord> queryNotIgnored;", "modifier": "private", "type": "PreparedQuery<ImageRecord>", "declarator": "queryNotIgnored", "var_name": "queryNotIgnored"}, {"original_string": "private PreparedQuery<ImageRecord> queryNotIgnoredWithPath;", "modifier": "private", "type": "PreparedQuery<ImageRecord>", "declarator": "queryNotIgnoredWithPath", "var_name": "queryNotIgnoredWithPath"}, {"original_string": "private SelectArg argStartsWithPath;", "modifier": "private", "type": "SelectArg", "declarator": "argStartsWithPath", "var_name": "argStartsWithPath"}], "methods": [{"identifier": "OrmliteImageRepository", "parameters": "(Dao<ImageRecord, String> imageDao, Dao<IgnoreRecord, String> ignoreDao)", "modifiers": "public", "return": "", "signature": " OrmliteImageRepository(Dao<ImageRecord, String> imageDao, Dao<IgnoreRecord, String> ignoreDao)", "full_signature": "public  OrmliteImageRepository(Dao<ImageRecord, String> imageDao, Dao<IgnoreRecord, String> ignoreDao)", "class_method_signature": "OrmliteImageRepository.OrmliteImageRepository(Dao<ImageRecord, String> imageDao, Dao<IgnoreRecord, String> ignoreDao)", "testcase": false, "constructor": true}, {"identifier": "store", "parameters": "(ImageRecord image)", "modifiers": "@Override public", "return": "void", "signature": "void store(ImageRecord image)", "full_signature": "@Override public void store(ImageRecord image)", "class_method_signature": "OrmliteImageRepository.store(ImageRecord image)", "testcase": false, "constructor": false}, {"identifier": "getByHash", "parameters": "(long hash)", "modifiers": "@Override public", "return": "List<ImageRecord>", "signature": "List<ImageRecord> getByHash(long hash)", "full_signature": "@Override public List<ImageRecord> getByHash(long hash)", "class_method_signature": "OrmliteImageRepository.getByHash(long hash)", "testcase": false, "constructor": false}, {"identifier": "getByPath", "parameters": "(Path path)", "modifiers": "@Override public", "return": "ImageRecord", "signature": "ImageRecord getByPath(Path path)", "full_signature": "@Override public ImageRecord getByPath(Path path)", "class_method_signature": "OrmliteImageRepository.getByPath(Path path)", "testcase": false, "constructor": false}, {"identifier": "startsWithPath", "parameters": "(Path directory)", "modifiers": "@Override public synchronized", "return": "List<ImageRecord>", "signature": "List<ImageRecord> startsWithPath(Path directory)", "full_signature": "@Override public synchronized List<ImageRecord> startsWithPath(Path directory)", "class_method_signature": "OrmliteImageRepository.startsWithPath(Path directory)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(ImageRecord image)", "modifiers": "@Override public", "return": "void", "signature": "void remove(ImageRecord image)", "full_signature": "@Override public void remove(ImageRecord image)", "class_method_signature": "OrmliteImageRepository.remove(ImageRecord image)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Collection<ImageRecord> images)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Collection<ImageRecord> images)", "full_signature": "@Override public void remove(Collection<ImageRecord> images)", "class_method_signature": "OrmliteImageRepository.remove(Collection<ImageRecord> images)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "@Override public", "return": "List<ImageRecord>", "signature": "List<ImageRecord> getAll()", "full_signature": "@Override public List<ImageRecord> getAll()", "class_method_signature": "OrmliteImageRepository.getAll()", "testcase": false, "constructor": false}, {"identifier": "getAllWithoutIgnored", "parameters": "()", "modifiers": "@Override public", "return": "List<ImageRecord>", "signature": "List<ImageRecord> getAllWithoutIgnored()", "full_signature": "@Override public List<ImageRecord> getAllWithoutIgnored()", "class_method_signature": "OrmliteImageRepository.getAllWithoutIgnored()", "testcase": false, "constructor": false}, {"identifier": "getAllWithoutIgnored", "parameters": "(Path directory)", "modifiers": "@Override public", "return": "List<ImageRecord>", "signature": "List<ImageRecord> getAllWithoutIgnored(Path directory)", "full_signature": "@Override public List<ImageRecord> getAllWithoutIgnored(Path directory)", "class_method_signature": "OrmliteImageRepository.getAllWithoutIgnored(Path directory)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/dozedoff/similarImage/db/repository/ormlite/OrmliteImageRepository.java"}, "focal_method": {"identifier": "remove", "parameters": "(ImageRecord image)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void remove(ImageRecord image) throws RepositoryException {\n\t\ttry {\n\t\t\timageDao.delete(image);\n\t\t} catch (SQLException e) {\n\t\t\tthrow new RepositoryException(\"Failed to remove image\", e);\n\t\t}\n\t}", "signature": "void remove(ImageRecord image)", "full_signature": "@Override public void remove(ImageRecord image)", "class_method_signature": "OrmliteImageRepository.remove(ImageRecord image)", "testcase": false, "constructor": false, "invocations": ["delete"]}, "repository": {"repo_id": 9713275, "url": "https://github.com/seeker/similarImage", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 15, "size": 3845, "license": "licensed"}}