{"test_class": {"identifier": "DuplicateOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GUARD_MSG = \"Guard condition failed\";", "modifier": "private static final", "type": "String", "declarator": "GUARD_MSG = \"Guard condition failed\"", "var_name": "GUARD_MSG"}, {"original_string": "private static final long TEST_HASH = 42L;", "modifier": "private static final", "type": "long", "declarator": "TEST_HASH = 42L", "var_name": "TEST_HASH"}, {"original_string": "private static final int RECORD_NUMBER = 15;", "modifier": "private static final", "type": "int", "declarator": "RECORD_NUMBER = 15", "var_name": "RECORD_NUMBER"}, {"original_string": "private static final Tag TAG_FOO = new Tag(\"foo\");", "modifier": "private static final", "type": "Tag", "declarator": "TAG_FOO = new Tag(\"foo\")", "var_name": "TAG_FOO"}, {"original_string": "private static final Tag TAG_BAR = new Tag(\"bar\");", "modifier": "private static final", "type": "Tag", "declarator": "TAG_BAR = new Tag(\"bar\")", "var_name": "TAG_BAR"}, {"original_string": "private static final Tag TAG_DNW = new Tag(\"DNW\");", "modifier": "private static final", "type": "Tag", "declarator": "TAG_DNW = new Tag(\"DNW\")", "var_name": "TAG_DNW"}, {"original_string": "private static final Tag TAG_ALL = new Tag(\"all\");", "modifier": "private static final", "type": "Tag", "declarator": "TAG_ALL = new Tag(\"all\")", "var_name": "TAG_ALL"}, {"original_string": "private static final String BASE_DIRECTORY = \"DuplicateOperationsTest\";", "modifier": "private static final", "type": "String", "declarator": "BASE_DIRECTORY = \"DuplicateOperationsTest\"", "var_name": "BASE_DIRECTORY"}, {"original_string": "@Mock\n\tprivate FilterRepository filterRepository;", "modifier": "@Mock\n\tprivate", "type": "FilterRepository", "declarator": "filterRepository", "var_name": "filterRepository"}, {"original_string": "@Mock\n\tprivate TagRepository tagRepository;", "modifier": "@Mock\n\tprivate", "type": "TagRepository", "declarator": "tagRepository", "var_name": "tagRepository"}, {"original_string": "@Mock\n\tprivate ImageRepository imageRepository;", "modifier": "@Mock\n\tprivate", "type": "ImageRepository", "declarator": "imageRepository", "var_name": "imageRepository"}, {"original_string": "@Mock\n\tprivate IgnoreRepository ignoreRepository;", "modifier": "@Mock\n\tprivate", "type": "IgnoreRepository", "declarator": "ignoreRepository", "var_name": "ignoreRepository"}, {"original_string": "@Mock\n\tprivate ResultGroup resultGroup;", "modifier": "@Mock\n\tprivate", "type": "ResultGroup", "declarator": "resultGroup", "var_name": "resultGroup"}, {"original_string": "private DuplicateOperations dupOp;", "modifier": "private", "type": "DuplicateOperations", "declarator": "dupOp", "var_name": "dupOp"}, {"original_string": "private Path tempDirectory = null;", "modifier": "private", "type": "Path", "declarator": "tempDirectory = null", "var_name": "tempDirectory"}, {"original_string": "private FilterRecord fooFilter;", "modifier": "private", "type": "FilterRecord", "declarator": "fooFilter", "var_name": "fooFilter"}, {"original_string": "private FileSystem fs;", "modifier": "private", "type": "FileSystem", "declarator": "fs", "var_name": "fs"}, {"original_string": "private Result result;", "modifier": "private", "type": "Result", "declarator": "result", "var_name": "result"}], "file": "core/src/test/java/com/github/dozedoff/similarImage/duplicate/DuplicateOperationsTest.java"}, "test_case": {"identifier": "testDeleteFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDeleteFile() throws Exception {\n\t\tList<Path> files = createTempTestFiles(1);\n\t\tPath file = files.get(0);\n\n\t\tassertThat(GUARD_MSG, Files.exists(file), is(true));\n\n\t\tdupOp.deleteFile(file);\n\n\t\tassertThat(Files.exists(file), is(false));\n\t\tverify(imageRepository).remove(new ImageRecord(file.toString(), 0));\n\t}", "signature": "void testDeleteFile()", "full_signature": "@Test public void testDeleteFile()", "class_method_signature": "DuplicateOperationsTest.testDeleteFile()", "testcase": true, "constructor": false, "invocations": ["createTempTestFiles", "get", "assertThat", "exists", "is", "deleteFile", "assertThat", "exists", "is", "remove", "verify", "toString"]}, "focal_class": {"identifier": "DuplicateOperations", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Tag TAG_DNW = new Tag(Tags.DNW.toString());", "modifier": "private static final", "type": "Tag", "declarator": "TAG_DNW = new Tag(Tags.DNW.toString())", "var_name": "TAG_DNW"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(DuplicateOperations.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DuplicateOperations.class)", "var_name": "logger"}, {"original_string": "private static final String FILTER_ADD_FAILED_MESSAGE = \"Add filter operation failed for {} - {}\";", "modifier": "private static final", "type": "String", "declarator": "FILTER_ADD_FAILED_MESSAGE = \"Add filter operation failed for {} - {}\"", "var_name": "FILTER_ADD_FAILED_MESSAGE"}, {"original_string": "private static final int THUMBNAIL_SIZE = Thumbnail.THUMBNAIL_SIZE;", "modifier": "private static final", "type": "int", "declarator": "THUMBNAIL_SIZE = Thumbnail.THUMBNAIL_SIZE", "var_name": "THUMBNAIL_SIZE"}, {"original_string": "private static final String MESSAGE_DIGEST_ALGORITHM = \"SHA-256\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE_DIGEST_ALGORITHM = \"SHA-256\"", "var_name": "MESSAGE_DIGEST_ALGORITHM"}, {"original_string": "private final FilterRepository filterRepository;", "modifier": "private final", "type": "FilterRepository", "declarator": "filterRepository", "var_name": "filterRepository"}, {"original_string": "private final TagRepository tagRepository;", "modifier": "private final", "type": "TagRepository", "declarator": "tagRepository", "var_name": "tagRepository"}, {"original_string": "private final ImageRepository imageRepository;", "modifier": "private final", "type": "ImageRepository", "declarator": "imageRepository", "var_name": "imageRepository"}, {"original_string": "private final IgnoreRepository ignoreRepository;", "modifier": "private final", "type": "IgnoreRepository", "declarator": "ignoreRepository", "var_name": "ignoreRepository"}, {"original_string": "private final FileSystem fileSystem;", "modifier": "private final", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}], "methods": [{"identifier": "DuplicateOperations", "parameters": "(FilterRepository filterRepository, TagRepository tagRepository,\n\t\t\tImageRepository imageRepository, IgnoreRepository ignoreRepository)", "modifiers": "@Inject public", "return": "", "signature": " DuplicateOperations(FilterRepository filterRepository, TagRepository tagRepository,\n\t\t\tImageRepository imageRepository, IgnoreRepository ignoreRepository)", "full_signature": "@Inject public  DuplicateOperations(FilterRepository filterRepository, TagRepository tagRepository,\n\t\t\tImageRepository imageRepository, IgnoreRepository ignoreRepository)", "class_method_signature": "DuplicateOperations.DuplicateOperations(FilterRepository filterRepository, TagRepository tagRepository,\n\t\t\tImageRepository imageRepository, IgnoreRepository ignoreRepository)", "testcase": false, "constructor": true}, {"identifier": "DuplicateOperations", "parameters": "(FileSystem fileSystem, FilterRepository filterRepository, TagRepository tagRepository,\n\t\t\tImageRepository imageRepository, IgnoreRepository ignoreRepository)", "modifiers": "public", "return": "", "signature": " DuplicateOperations(FileSystem fileSystem, FilterRepository filterRepository, TagRepository tagRepository,\n\t\t\tImageRepository imageRepository, IgnoreRepository ignoreRepository)", "full_signature": "public  DuplicateOperations(FileSystem fileSystem, FilterRepository filterRepository, TagRepository tagRepository,\n\t\t\tImageRepository imageRepository, IgnoreRepository ignoreRepository)", "class_method_signature": "DuplicateOperations.DuplicateOperations(FileSystem fileSystem, FilterRepository filterRepository, TagRepository tagRepository,\n\t\t\tImageRepository imageRepository, IgnoreRepository ignoreRepository)", "testcase": false, "constructor": true}, {"identifier": "moveToDnw", "parameters": "(Path path)", "modifiers": "public", "return": "void", "signature": "void moveToDnw(Path path)", "full_signature": "public void moveToDnw(Path path)", "class_method_signature": "DuplicateOperations.moveToDnw(Path path)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(Collection<Result> records)", "modifiers": "public", "return": "void", "signature": "void deleteAll(Collection<Result> records)", "full_signature": "public void deleteAll(Collection<Result> records)", "class_method_signature": "DuplicateOperations.deleteAll(Collection<Result> records)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Collection<ImageRecord> records)", "modifiers": "public", "return": "void", "signature": "void remove(Collection<ImageRecord> records)", "full_signature": "public void remove(Collection<ImageRecord> records)", "class_method_signature": "DuplicateOperations.remove(Collection<ImageRecord> records)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(Result result)", "modifiers": "public", "return": "void", "signature": "void deleteFile(Result result)", "full_signature": "public void deleteFile(Result result)", "class_method_signature": "DuplicateOperations.deleteFile(Result result)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(Path path)", "modifiers": "public", "return": "void", "signature": "void deleteFile(Path path)", "full_signature": "public void deleteFile(Path path)", "class_method_signature": "DuplicateOperations.deleteFile(Path path)", "testcase": false, "constructor": false}, {"identifier": "markAll", "parameters": "(Collection<Result> records, Tag tag)", "modifiers": "public", "return": "void", "signature": "void markAll(Collection<Result> records, Tag tag)", "full_signature": "public void markAll(Collection<Result> records, Tag tag)", "class_method_signature": "DuplicateOperations.markAll(Collection<Result> records, Tag tag)", "testcase": false, "constructor": false}, {"identifier": "markDnwAndDelete", "parameters": "(Collection<Result> records)", "modifiers": "public", "return": "void", "signature": "void markDnwAndDelete(Collection<Result> records)", "full_signature": "public void markDnwAndDelete(Collection<Result> records)", "class_method_signature": "DuplicateOperations.markDnwAndDelete(Collection<Result> records)", "testcase": false, "constructor": false}, {"identifier": "markAs", "parameters": "(Result result, Tag tag)", "modifiers": "public", "return": "void", "signature": "void markAs(Result result, Tag tag)", "full_signature": "public void markAs(Result result, Tag tag)", "class_method_signature": "DuplicateOperations.markAs(Result result, Tag tag)", "testcase": false, "constructor": false}, {"identifier": "markAs", "parameters": "(Path path, Tag tag)", "modifiers": "public", "return": "void", "signature": "void markAs(Path path, Tag tag)", "full_signature": "public void markAs(Path path, Tag tag)", "class_method_signature": "DuplicateOperations.markAs(Path path, Tag tag)", "testcase": false, "constructor": false}, {"identifier": "markAs", "parameters": "(ImageRecord image, Tag tag)", "modifiers": "public", "return": "void", "signature": "void markAs(ImageRecord image, Tag tag)", "full_signature": "public void markAs(ImageRecord image, Tag tag)", "class_method_signature": "DuplicateOperations.markAs(ImageRecord image, Tag tag)", "testcase": false, "constructor": false}, {"identifier": "createThumbnail", "parameters": "(Path path)", "modifiers": "private", "return": "Thumbnail", "signature": "Thumbnail createThumbnail(Path path)", "full_signature": "private Thumbnail createThumbnail(Path path)", "class_method_signature": "DuplicateOperations.createThumbnail(Path path)", "testcase": false, "constructor": false}, {"identifier": "markDirectoryAs", "parameters": "(Path directory, Tag tag)", "modifiers": "public", "return": "void", "signature": "void markDirectoryAs(Path directory, Tag tag)", "full_signature": "public void markDirectoryAs(Path directory, Tag tag)", "class_method_signature": "DuplicateOperations.markDirectoryAs(Path directory, Tag tag)", "testcase": false, "constructor": false}, {"identifier": "markDirectoryAndChildrenAs", "parameters": "(Path rootDirectory, Tag tag)", "modifiers": "public", "return": "void", "signature": "void markDirectoryAndChildrenAs(Path rootDirectory, Tag tag)", "full_signature": "public void markDirectoryAndChildrenAs(Path rootDirectory, Tag tag)", "class_method_signature": "DuplicateOperations.markDirectoryAndChildrenAs(Path rootDirectory, Tag tag)", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "(Path directory)", "modifiers": "private", "return": "boolean", "signature": "boolean isDirectory(Path directory)", "full_signature": "private boolean isDirectory(Path directory)", "class_method_signature": "DuplicateOperations.isDirectory(Path directory)", "testcase": false, "constructor": false}, {"identifier": "findMissingFiles", "parameters": "(Path directory)", "modifiers": "public", "return": "List<ImageRecord>", "signature": "List<ImageRecord> findMissingFiles(Path directory)", "full_signature": "public List<ImageRecord> findMissingFiles(Path directory)", "class_method_signature": "DuplicateOperations.findMissingFiles(Path directory)", "testcase": false, "constructor": false}, {"identifier": "ignore", "parameters": "(Result result)", "modifiers": "public", "return": "void", "signature": "void ignore(Result result)", "full_signature": "public void ignore(Result result)", "class_method_signature": "DuplicateOperations.ignore(Result result)", "testcase": false, "constructor": false}, {"identifier": "getFilterTags", "parameters": "()", "modifiers": "public", "return": "List<Tag>", "signature": "List<Tag> getFilterTags()", "full_signature": "public List<Tag> getFilterTags()", "class_method_signature": "DuplicateOperations.getFilterTags()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/dozedoff/similarImage/duplicate/DuplicateOperations.java"}, "focal_method": {"identifier": "deleteFile", "parameters": "(Result result)", "modifiers": "public", "return": "void", "body": "public void deleteFile(Result result) {\n\t\tdeleteFile(fileSystem.getPath(result.getImageRecord().getPath()));\n\t\tresult.remove();\n\t}", "signature": "void deleteFile(Result result)", "full_signature": "public void deleteFile(Result result)", "class_method_signature": "DuplicateOperations.deleteFile(Result result)", "testcase": false, "constructor": false, "invocations": ["deleteFile", "getPath", "getPath", "getImageRecord", "remove"]}, "repository": {"repo_id": 9713275, "url": "https://github.com/seeker/similarImage", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 15, "size": 3845, "license": "licensed"}}