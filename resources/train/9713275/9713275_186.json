{"test_class": {"identifier": "GroupByTagStageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Tag TAG = new Tag(\"foo\");", "modifier": "private static final", "type": "Tag", "declarator": "TAG = new Tag(\"foo\")", "var_name": "TAG"}, {"original_string": "private static final long HASH_A = 0;", "modifier": "private static final", "type": "long", "declarator": "HASH_A = 0", "var_name": "HASH_A"}, {"original_string": "private static final long HASH_B = 1;", "modifier": "private static final", "type": "long", "declarator": "HASH_B = 1", "var_name": "HASH_B"}, {"original_string": "private static final Multimap<Long, ImageRecord> EMPTY_MAP = ImmutableMultimap.of();", "modifier": "private static final", "type": "Multimap<Long, ImageRecord>", "declarator": "EMPTY_MAP = ImmutableMultimap.of()", "var_name": "EMPTY_MAP"}, {"original_string": "@Mock\n\tprivate FilterRepository filterRepository;", "modifier": "@Mock\n\tprivate", "type": "FilterRepository", "declarator": "filterRepository", "var_name": "filterRepository"}, {"original_string": "private GroupByTagStage cut;", "modifier": "private", "type": "GroupByTagStage", "declarator": "cut", "var_name": "cut"}, {"original_string": "private ImageRecord imageA;", "modifier": "private", "type": "ImageRecord", "declarator": "imageA", "var_name": "imageA"}, {"original_string": "private ImageRecord imageB;", "modifier": "private", "type": "ImageRecord", "declarator": "imageB", "var_name": "imageB"}, {"original_string": "private ImageRecord imageC;", "modifier": "private", "type": "ImageRecord", "declarator": "imageC", "var_name": "imageC"}, {"original_string": "private FilterRecord filterA;", "modifier": "private", "type": "FilterRecord", "declarator": "filterA", "var_name": "filterA"}, {"original_string": "private List<ImageRecord> images;", "modifier": "private", "type": "List<ImageRecord>", "declarator": "images", "var_name": "images"}], "file": "core/src/test/java/com/github/dozedoff/similarImage/thread/pipeline/GroupByTagStageTest.java"}, "test_case": {"identifier": "testGroupedByTag", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGroupedByTag() throws Exception {\n\t\tassertThat(cut.apply(images).get(HASH_A), containsInAnyOrder(imageA));\n\t}", "signature": "void testGroupedByTag()", "full_signature": "@Test public void testGroupedByTag()", "class_method_signature": "GroupByTagStageTest.testGroupedByTag()", "testcase": true, "constructor": false, "invocations": ["assertThat", "get", "apply", "containsInAnyOrder"]}, "focal_class": {"identifier": "GroupByTagStage", "superclass": "", "interfaces": "implements Function<Collection<ImageRecord>, Multimap<Long, ImageRecord>>", "fields": [{"original_string": "private final Tag tag;", "modifier": "private final", "type": "Tag", "declarator": "tag", "var_name": "tag"}, {"original_string": "private final int hammingDistance;", "modifier": "private final", "type": "int", "declarator": "hammingDistance", "var_name": "hammingDistance"}, {"original_string": "private final FilterRepository filterRepository;", "modifier": "private final", "type": "FilterRepository", "declarator": "filterRepository", "var_name": "filterRepository"}, {"original_string": "private final RecordSearch rs;", "modifier": "private final", "type": "RecordSearch", "declarator": "rs", "var_name": "rs"}], "methods": [{"identifier": "GroupByTagStage", "parameters": "(FilterRepository filterRepository, Tag tag, int hammingDistance)", "modifiers": "public", "return": "", "signature": " GroupByTagStage(FilterRepository filterRepository, Tag tag, int hammingDistance)", "full_signature": "public  GroupByTagStage(FilterRepository filterRepository, Tag tag, int hammingDistance)", "class_method_signature": "GroupByTagStage.GroupByTagStage(FilterRepository filterRepository, Tag tag, int hammingDistance)", "testcase": false, "constructor": true}, {"identifier": "GroupByTagStage", "parameters": "(FilterRepository filterRepository, Tag tag)", "modifiers": "public", "return": "", "signature": " GroupByTagStage(FilterRepository filterRepository, Tag tag)", "full_signature": "public  GroupByTagStage(FilterRepository filterRepository, Tag tag)", "class_method_signature": "GroupByTagStage.GroupByTagStage(FilterRepository filterRepository, Tag tag)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Collection<ImageRecord> t)", "modifiers": "@Override public", "return": "Multimap<Long, ImageRecord>", "signature": "Multimap<Long, ImageRecord> apply(Collection<ImageRecord> t)", "full_signature": "@Override public Multimap<Long, ImageRecord> apply(Collection<ImageRecord> t)", "class_method_signature": "GroupByTagStage.apply(Collection<ImageRecord> t)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/dozedoff/similarImage/thread/pipeline/GroupByTagStage.java"}, "focal_method": {"identifier": "apply", "parameters": "(Collection<ImageRecord> t)", "modifiers": "@Override public", "return": "Multimap<Long, ImageRecord>", "body": "@Override\n\tpublic Multimap<Long, ImageRecord> apply(Collection<ImageRecord> t) {\n\t\tMultimap<Long, ImageRecord> result = MultimapBuilder.hashKeys().hashSetValues().build();\n\t\t\n\t\trs.build(t);\n\t\t\n\t\tTagFilter tagFilter = new TagFilter(filterRepository);\n\t\tresult = tagFilter.getFilterMatches(rs, tag, hammingDistance);\n\n\t\treturn result;\n\t}", "signature": "Multimap<Long, ImageRecord> apply(Collection<ImageRecord> t)", "full_signature": "@Override public Multimap<Long, ImageRecord> apply(Collection<ImageRecord> t)", "class_method_signature": "GroupByTagStage.apply(Collection<ImageRecord> t)", "testcase": false, "constructor": false, "invocations": ["build", "hashSetValues", "hashKeys", "build", "getFilterMatches"]}, "repository": {"repo_id": 9713275, "url": "https://github.com/seeker/similarImage", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 15, "size": 3845, "license": "licensed"}}