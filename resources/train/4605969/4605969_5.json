{"test_class": {"identifier": "GraphLayoutTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GraphLayout layout_ = new GraphLayout();", "modifier": "private", "type": "GraphLayout", "declarator": "layout_ = new GraphLayout()", "var_name": "layout_"}], "file": "onebusaway-uk-network-rail-gtfs-realtime/src/test/java/org/onebusaway/uk/network_rail/gtfs_realtime/graph/GraphLayoutTest.java"}, "test_case": {"identifier": "testB", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testB() {\n    Location a = new Location();\n    a.x = 1;\n    a.y = 1;\n    Location b = new Location();\n    b.x = 9;\n    b.y = 5;\n    Map<Location, Integer> weights = new HashMap<Location, Integer>();\n    weights.put(a, 1);\n    weights.put(b, 3);\n\n    Location c = new Location();\n    c.x = 1.2;\n    c.y = 1.2;\n    layout_.updateLocation(weights, c, 0.001);\n\n    assertEquals(3.0, c.x, 0.01);\n    assertEquals(2.0, c.y, 0.01\n        );\n  }", "signature": "void testB()", "full_signature": "@Test public void testB()", "class_method_signature": "GraphLayoutTest.testB()", "testcase": true, "constructor": false, "invocations": ["put", "put", "updateLocation", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "GraphLayout", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger _log = LoggerFactory.getLogger(GraphLayout.class);", "modifier": "private static", "type": "Logger", "declarator": "_log = LoggerFactory.getLogger(GraphLayout.class)", "var_name": "_log"}, {"original_string": "private int _maxIterations = 10;", "modifier": "private", "type": "int", "declarator": "_maxIterations = 10", "var_name": "_maxIterations"}], "methods": [{"identifier": "updateLocation", "parameters": "(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon)", "modifiers": "public", "return": "void", "signature": "void updateLocation(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon)", "full_signature": "public void updateLocation(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon)", "class_method_signature": "GraphLayout.updateLocation(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon)", "testcase": false, "constructor": false}, {"identifier": "computeCentroid", "parameters": "(Set<Location> locations, Location location)", "modifiers": "public", "return": "void", "signature": "void computeCentroid(Set<Location> locations, Location location)", "full_signature": "public void computeCentroid(Set<Location> locations, Location location)", "class_method_signature": "GraphLayout.computeCentroid(Set<Location> locations, Location location)", "testcase": false, "constructor": false}], "file": "onebusaway-uk-network-rail-gtfs-realtime/src/main/java/org/onebusaway/uk/network_rail/gtfs_realtime/graph/GraphLayout.java"}, "focal_method": {"identifier": "updateLocation", "parameters": "(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon)", "modifiers": "public", "return": "void", "body": "public void updateLocation(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon) {\n    if (locationsAndWeights.size() <= 1) {\n      return;\n    }\n\n    computeCentroid(locationsAndWeights.keySet(), location);\n\n    Location maxLocation = null;\n    int maxWeight = 0;\n    for (Map.Entry<Location, Integer> entry : locationsAndWeights.entrySet()) {\n      int weight = entry.getValue();\n      if (weight > maxWeight) {\n        maxWeight = weight;\n        maxLocation = entry.getKey();\n      }\n    }\n\n    for (int i = 0; i < _maxIterations; ++i) {\n\n      Map<Location, Double> distancesByLocation = new HashMap<Location, Double>();\n      double maxDistance = 0;\n      for (Map.Entry<Location, Integer> entry : locationsAndWeights.entrySet()) {\n        Location otherLocation = entry.getKey();\n        double dx = otherLocation.x - location.x;\n        double dy = otherLocation.y - location.y;\n        double d = Math.sqrt(dx * dx + dy * dy);\n        distancesByLocation.put(otherLocation, d);\n        maxDistance = Math.max(d, maxDistance);\n      }\n      double referenceDistance = distancesByLocation.get(maxLocation);\n      double vx = 0;\n      double vy = 0;\n      for (Map.Entry<Location, Double> entry : distancesByLocation.entrySet()) {\n        Location otherLocation = entry.getKey();\n        double distance = distancesByLocation.get(otherLocation);\n        double ratio = (double) locationsAndWeights.get(otherLocation)\n            / maxWeight;\n        double delta = distance - ratio * referenceDistance;\n        double dx = (otherLocation.x - location.x) * delta / distance;\n        double dy = (otherLocation.y - location.y) * delta / distance;\n        vx += dx;\n        vy += dy;\n      }\n\n      vx /= 2;\n      vy /= 2;\n\n      double vDistance = Math.sqrt(vx * vx + vy * vy);\n      if (vDistance / maxDistance < epsilon / 2) {\n        return;\n      }\n\n      location.x += vx;\n      location.y += vy;\n\n    }\n    _log.warn(\"max number of iterations reached\");\n  }", "signature": "void updateLocation(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon)", "full_signature": "public void updateLocation(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon)", "class_method_signature": "GraphLayout.updateLocation(Map<Location, Integer> locationsAndWeights,\n      Location location, double epsilon)", "testcase": false, "constructor": false, "invocations": ["size", "computeCentroid", "keySet", "entrySet", "getValue", "getKey", "entrySet", "getKey", "sqrt", "put", "max", "get", "entrySet", "getKey", "get", "get", "sqrt", "warn"]}, "repository": {"repo_id": 4605969, "url": "https://github.com/OneBusAway/onebusaway-uk", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 10, "size": 626, "license": "licensed"}}