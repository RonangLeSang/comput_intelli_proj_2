{"test_class": {"identifier": "HighchartsHeatmapAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private MarkerGenesDao markerGenesDaoMock;", "modifier": "@Mock\n    private", "type": "MarkerGenesDao", "declarator": "markerGenesDaoMock", "var_name": "markerGenesDaoMock"}, {"original_string": "private HighchartsHeatmapAdapter subject;", "modifier": "private", "type": "HighchartsHeatmapAdapter", "declarator": "subject", "var_name": "subject"}], "file": "sc/src/test/java/uk/ac/ebi/atlas/markergenes/HighchartsHeatmapAdapterTest.java"}, "test_case": {"identifier": "markerGeneWithoutSymbolHasGeneIDAsName", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void markerGeneWithoutSymbolHasGeneIDAsName() {\n        String gene1 = generateRandomEnsemblGeneId();\n        String gene2 = generateRandomEnsemblGeneId();\n        String gene3 = generateRandomEnsemblGeneId();\n\n        String geneSymbol1 = generateRandomGeneSymbol();\n        String geneSymbol2 = generateRandomGeneSymbol();\n\n        List<String> randomGeneIds = Arrays.asList(gene1, gene2, gene3);\n\n        when(markerGenesDaoMock.getSymbolsForGeneIds(randomGeneIds)).thenReturn(ImmutableMap.of(\n                gene1, geneSymbol1,\n                gene2, geneSymbol2\n        ));\n\n        List<MarkerGene> markerGenes = Arrays.asList(\n                MarkerGene.create(gene1, 1, 1, 0.004, 1, 199, 185),\n                MarkerGene.create(gene2, 1, 3, 0.0006, 2, 12, 1.11),\n                MarkerGene.create(gene3, 1, 5, 0.001, 6, 1000, 10000));\n\n        List<Map<String, Object>> result = subject.getMarkerGeneHeatmapData(markerGenes);\n        assertThat(result).hasSize(3);\n\n        assertThat(result).element(0).extracting(\"name\").containsOnly(geneSymbol1);\n        assertThat(result).element(1).extracting(\"name\").containsOnly(geneSymbol2);\n        assertThat(result).element(2).extracting(\"name\").containsOnly(gene3);\n    }", "signature": "void markerGeneWithoutSymbolHasGeneIDAsName()", "full_signature": "@Test void markerGeneWithoutSymbolHasGeneIDAsName()", "class_method_signature": "HighchartsHeatmapAdapterTest.markerGeneWithoutSymbolHasGeneIDAsName()", "testcase": true, "constructor": false, "invocations": ["generateRandomEnsemblGeneId", "generateRandomEnsemblGeneId", "generateRandomEnsemblGeneId", "generateRandomGeneSymbol", "generateRandomGeneSymbol", "asList", "thenReturn", "when", "getSymbolsForGeneIds", "of", "asList", "create", "create", "create", "getMarkerGeneHeatmapData", "hasSize", "assertThat", "containsOnly", "extracting", "element", "assertThat", "containsOnly", "extracting", "element", "assertThat", "containsOnly", "extracting", "element", "assertThat"]}, "focal_class": {"identifier": "HighchartsHeatmapAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MarkerGenesDao markerGenesDao;", "modifier": "private", "type": "MarkerGenesDao", "declarator": "markerGenesDao", "var_name": "markerGenesDao"}], "methods": [{"identifier": "HighchartsHeatmapAdapter", "parameters": "(MarkerGenesDao markerGenesDao)", "modifiers": "@Inject public", "return": "", "signature": " HighchartsHeatmapAdapter(MarkerGenesDao markerGenesDao)", "full_signature": "@Inject public  HighchartsHeatmapAdapter(MarkerGenesDao markerGenesDao)", "class_method_signature": "HighchartsHeatmapAdapter.HighchartsHeatmapAdapter(MarkerGenesDao markerGenesDao)", "testcase": false, "constructor": true}, {"identifier": "getMarkerGeneHeatmapData", "parameters": "(List<MarkerGene> markerGenes)", "modifiers": "", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> getMarkerGeneHeatmapData(List<MarkerGene> markerGenes)", "full_signature": " List<Map<String, Object>> getMarkerGeneHeatmapData(List<MarkerGene> markerGenes)", "class_method_signature": "HighchartsHeatmapAdapter.getMarkerGeneHeatmapData(List<MarkerGene> markerGenes)", "testcase": false, "constructor": false}], "file": "sc/src/main/java/uk/ac/ebi/atlas/markergenes/HighchartsHeatmapAdapter.java"}, "focal_method": {"identifier": "getMarkerGeneHeatmapData", "parameters": "(List<MarkerGene> markerGenes)", "modifiers": "", "return": "List<Map<String, Object>>", "body": "List<Map<String, Object>> getMarkerGeneHeatmapData(List<MarkerGene> markerGenes) {\n        List<MarkerGene> sortedMarkerGenes = markerGenes.stream()\n                .parallel()\n                .sorted(Comparator.comparing(MarkerGene::clusterIdWhereMarker)\n                        .thenComparing(MarkerGene::pValue)\n                )\n                .collect(Collectors.toList());\n\n        List<String> uniqueGeneIds = sortedMarkerGenes\n                .stream()\n                .map(MarkerGene::geneId)\n                .distinct()\n                .collect(Collectors.toList());\n\n        Map<String, String> symbolsForGeneIds = markerGenesDao.getSymbolsForGeneIds(uniqueGeneIds);\n\n        Map<String, Integer> geneIdIndices = uniqueGeneIds\n                .stream()\n                .collect(Collectors.toMap(x -> x, uniqueGeneIds::indexOf));\n\n        return sortedMarkerGenes\n                .stream()\n                .map(markerGene -> {\n                    Map<String, Object> heatmapCell = new HashMap<>();\n                    heatmapCell.put(\"x\", markerGene.clusterId() - 1);\n                    heatmapCell.put(\"y\", geneIdIndices.get(markerGene.geneId()));\n                    heatmapCell.put(\"name\", symbolsForGeneIds.getOrDefault(markerGene.geneId(), markerGene.geneId()));\n                    heatmapCell.put(\"value\", markerGene.medianExpression());\n                    heatmapCell.put(\"clusterIdWhereMarker\", markerGene.clusterIdWhereMarker());\n                    heatmapCell.put(\"pValue\", markerGene.pValue());\n                    return heatmapCell;\n                })\n                .collect(Collectors.toList());\n    }", "signature": "List<Map<String, Object>> getMarkerGeneHeatmapData(List<MarkerGene> markerGenes)", "full_signature": " List<Map<String, Object>> getMarkerGeneHeatmapData(List<MarkerGene> markerGenes)", "class_method_signature": "HighchartsHeatmapAdapter.getMarkerGeneHeatmapData(List<MarkerGene> markerGenes)", "testcase": false, "constructor": false, "invocations": ["collect", "sorted", "parallel", "stream", "thenComparing", "comparing", "toList", "collect", "distinct", "map", "stream", "toList", "getSymbolsForGeneIds", "collect", "stream", "toMap", "collect", "map", "stream", "put", "clusterId", "put", "get", "geneId", "put", "getOrDefault", "geneId", "geneId", "put", "medianExpression", "put", "clusterIdWhereMarker", "put", "pValue", "toList"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}