{"test_class": {"identifier": "CollectionProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SolrClient solrClientMock;", "modifier": "@Mock\n    private", "type": "SolrClient", "declarator": "solrClientMock", "var_name": "solrClientMock"}, {"original_string": "private CollectionProxy subject;", "modifier": "private", "type": "CollectionProxy", "declarator": "subject", "var_name": "subject"}], "file": "base/src/test/java/uk/ac/ebi/atlas/solr/cloud/CollectionProxyTest.java"}, "test_case": {"identifier": "addAndCommitSolrServerExceptionIsWrapped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addAndCommitSolrServerExceptionIsWrapped() throws IOException, SolrServerException {\n        when(solrClientMock.request(any(UpdateRequest.class), eq(subject.nameOrAlias)))\n                .thenThrow(new SolrServerException(\"\"));\n\n        assertThatExceptionOfType(UncheckedIOException.class)\n                .isThrownBy(() -> subject.addAndCommit(ImmutableSet.of()));\n    }", "signature": "void addAndCommitSolrServerExceptionIsWrapped()", "full_signature": "@Test public void addAndCommitSolrServerExceptionIsWrapped()", "class_method_signature": "CollectionProxyTest.addAndCommitSolrServerExceptionIsWrapped()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "request", "any", "eq", "isThrownBy", "assertThatExceptionOfType", "addAndCommit", "of"]}, "focal_class": {"identifier": "CollectionProxy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CollectionProxy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CollectionProxy.class)", "var_name": "LOGGER"}, {"original_string": "public final SolrClient solrClient;", "modifier": "public final", "type": "SolrClient", "declarator": "solrClient", "var_name": "solrClient"}, {"original_string": "public final String nameOrAlias;", "modifier": "public final", "type": "String", "declarator": "nameOrAlias", "var_name": "nameOrAlias"}], "methods": [{"identifier": "CollectionProxy", "parameters": "(SolrClient solrClient, String nameOrAlias)", "modifiers": "protected", "return": "", "signature": " CollectionProxy(SolrClient solrClient, String nameOrAlias)", "full_signature": "protected  CollectionProxy(SolrClient solrClient, String nameOrAlias)", "class_method_signature": "CollectionProxy.CollectionProxy(SolrClient solrClient, String nameOrAlias)", "testcase": false, "constructor": true}, {"identifier": "rawQuery", "parameters": "(SolrQuery solrQuery)", "modifiers": "public", "return": "QueryResponse", "signature": "QueryResponse rawQuery(SolrQuery solrQuery)", "full_signature": "public QueryResponse rawQuery(SolrQuery solrQuery)", "class_method_signature": "CollectionProxy.rawQuery(SolrQuery solrQuery)", "testcase": false, "constructor": false}, {"identifier": "fieldStats", "parameters": "(String fieldName, SolrQuery solrQuery)", "modifiers": "protected", "return": "FieldStatsInfo", "signature": "FieldStatsInfo fieldStats(String fieldName, SolrQuery solrQuery)", "full_signature": "protected FieldStatsInfo fieldStats(String fieldName, SolrQuery solrQuery)", "class_method_signature": "CollectionProxy.fieldStats(String fieldName, SolrQuery solrQuery)", "testcase": false, "constructor": false}, {"identifier": "addAndCommit", "parameters": "(Collection<SolrInputDocument> docs)", "modifiers": "public", "return": "UpdateResponse", "signature": "UpdateResponse addAndCommit(Collection<SolrInputDocument> docs)", "full_signature": "public UpdateResponse addAndCommit(Collection<SolrInputDocument> docs)", "class_method_signature": "CollectionProxy.addAndCommit(Collection<SolrInputDocument> docs)", "testcase": false, "constructor": false}, {"identifier": "deleteAllAndCommit", "parameters": "()", "modifiers": "public", "return": "UpdateResponse", "signature": "UpdateResponse deleteAllAndCommit()", "full_signature": "public UpdateResponse deleteAllAndCommit()", "class_method_signature": "CollectionProxy.deleteAllAndCommit()", "testcase": false, "constructor": false}, {"identifier": "logException", "parameters": "(Exception e)", "modifiers": "private", "return": "void", "signature": "void logException(Exception e)", "full_signature": "private void logException(Exception e)", "class_method_signature": "CollectionProxy.logException(Exception e)", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/solr/cloud/CollectionProxy.java"}, "focal_method": {"identifier": "addAndCommit", "parameters": "(Collection<SolrInputDocument> docs)", "modifiers": "public", "return": "UpdateResponse", "body": "public UpdateResponse addAndCommit(Collection<SolrInputDocument> docs) {\n        try {\n            return new UpdateRequest().add(docs).commit(solrClient, nameOrAlias);\n        } catch (IOException e) {\n            logException(e);\n            throw new UncheckedIOException(e);\n        } catch (SolrServerException e) {\n            logException(e);\n            throw new UncheckedIOException(new IOException(e));\n        }\n    }", "signature": "UpdateResponse addAndCommit(Collection<SolrInputDocument> docs)", "full_signature": "public UpdateResponse addAndCommit(Collection<SolrInputDocument> docs)", "class_method_signature": "CollectionProxy.addAndCommit(Collection<SolrInputDocument> docs)", "testcase": false, "constructor": false, "invocations": ["commit", "add", "logException", "logException"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}