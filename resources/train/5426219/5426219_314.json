{"test_class": {"identifier": "ExperimentAttributesServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] BASELINE_EXPERIMENT_ATTRIBUTES = {\n            \"experimentAccession\", \"experimentDescription\", \"type\", \"pubMedIds\", \"dois\", \"disclaimer\",\n            \"pageKeywords\", \"pageDescription\", \"dataProviderURL\", \"dataProviderDescription\", \"alternativeViews\",\n            \"alternativeViewDescriptions\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "BASELINE_EXPERIMENT_ATTRIBUTES = {\n            \"experimentAccession\", \"experimentDescription\", \"type\", \"pubMedIds\", \"dois\", \"disclaimer\",\n            \"pageKeywords\", \"pageDescription\", \"dataProviderURL\", \"dataProviderDescription\", \"alternativeViews\",\n            \"alternativeViewDescriptions\"\n    }", "var_name": "BASELINE_EXPERIMENT_ATTRIBUTES"}, {"original_string": "private static final String[] DIFFERENTIAL_EXPERIMENT_ATTRIBUTES = {\"regulationValues\", \"contrasts\"};", "modifier": "private static final", "type": "String[]", "declarator": "DIFFERENTIAL_EXPERIMENT_ATTRIBUTES = {\"regulationValues\", \"contrasts\"}", "var_name": "DIFFERENTIAL_EXPERIMENT_ATTRIBUTES"}, {"original_string": "private static final String[] MICROARRAY_EXPERIMENT_ATTRIBUTES = {\"arrayDesignAccessions\", \"arrayDesignNames\"};", "modifier": "private static final", "type": "String[]", "declarator": "MICROARRAY_EXPERIMENT_ATTRIBUTES = {\"arrayDesignAccessions\", \"arrayDesignNames\"}", "var_name": "MICROARRAY_EXPERIMENT_ATTRIBUTES"}, {"original_string": "@Mock\n    private EuropePmcClient europePmcClientMock;", "modifier": "@Mock\n    private", "type": "EuropePmcClient", "declarator": "europePmcClientMock", "var_name": "europePmcClientMock"}, {"original_string": "@Mock\n    private IdfParser idfParser;", "modifier": "@Mock\n    private", "type": "IdfParser", "declarator": "idfParser", "var_name": "idfParser"}, {"original_string": "@InjectMocks\n    private ExperimentAttributesService subject;", "modifier": "@InjectMocks\n    private", "type": "ExperimentAttributesService", "declarator": "subject", "var_name": "subject"}], "file": "base/src/test/java/uk/ac/ebi/atlas/experimentpage/ExperimentAttributesServiceTest.java"}, "test_case": {"identifier": "getAttributesForBaselineExperimentWithNoPublications", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAttributesForBaselineExperimentWithNoPublications() {\n        when(europePmcClientMock.getPublicationByIdentifier(anyString())).thenReturn(Optional.empty());\n        when(idfParser.parse(any()))\n                .thenReturn(new IdfParserOutput(\"title\", \"12345\",\"description\", Lists.emptyList(), 0, Lists.emptyList()));\n\n        BaselineExperiment experiment = MockExperiment.createBaselineExperiment(\"FOOBAR\");\n        Map<String, Object> result = subject.getAttributes(experiment);\n\n        assertThat(result)\n                .containsKeys(BASELINE_EXPERIMENT_ATTRIBUTES)\n                .doesNotContainKeys(DIFFERENTIAL_EXPERIMENT_ATTRIBUTES)\n                .doesNotContainKeys(MICROARRAY_EXPERIMENT_ATTRIBUTES)\n                .extracting(\"experimentAccession\", \"type\", \"publications\")\n                .contains(\"FOOBAR\", ExperimentType.RNASEQ_MRNA_BASELINE.getHumanDescription(), Lists.emptyList());\n    }", "signature": "void getAttributesForBaselineExperimentWithNoPublications()", "full_signature": "@Test public void getAttributesForBaselineExperimentWithNoPublications()", "class_method_signature": "ExperimentAttributesServiceTest.getAttributesForBaselineExperimentWithNoPublications()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getPublicationByIdentifier", "anyString", "empty", "thenReturn", "when", "parse", "any", "emptyList", "emptyList", "createBaselineExperiment", "getAttributes", "contains", "extracting", "doesNotContainKeys", "doesNotContainKeys", "containsKeys", "assertThat", "getHumanDescription", "emptyList"]}, "focal_class": {"identifier": "ExperimentAttributesService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EuropePmcClient europePmcClient;", "modifier": "private", "type": "EuropePmcClient", "declarator": "europePmcClient", "var_name": "europePmcClient"}, {"original_string": "private IdfParser idfParser;", "modifier": "private", "type": "IdfParser", "declarator": "idfParser", "var_name": "idfParser"}], "methods": [{"identifier": "ExperimentAttributesService", "parameters": "(EuropePmcClient europePmcClient, IdfParser idfParser)", "modifiers": "public", "return": "", "signature": " ExperimentAttributesService(EuropePmcClient europePmcClient, IdfParser idfParser)", "full_signature": "public  ExperimentAttributesService(EuropePmcClient europePmcClient, IdfParser idfParser)", "class_method_signature": "ExperimentAttributesService.ExperimentAttributesService(EuropePmcClient europePmcClient, IdfParser idfParser)", "testcase": false, "constructor": true}, {"identifier": "getAttributes", "parameters": "(Experiment<?> experiment)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getAttributes(Experiment<?> experiment)", "full_signature": "public Map<String, Object> getAttributes(Experiment<?> experiment)", "class_method_signature": "ExperimentAttributesService.getAttributes(Experiment<?> experiment)", "testcase": false, "constructor": false}, {"identifier": "getPublications", "parameters": "(List<String> identifiers)", "modifiers": "private", "return": "List<Publication>", "signature": "List<Publication> getPublications(List<String> identifiers)", "full_signature": "private List<Publication> getPublications(List<String> identifiers)", "class_method_signature": "ExperimentAttributesService.getPublications(List<String> identifiers)", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/experimentpage/ExperimentAttributesService.java"}, "focal_method": {"identifier": "getAttributes", "parameters": "(Experiment<?> experiment)", "modifiers": "public", "return": "Map<String, Object>", "body": "public Map<String, Object> getAttributes(Experiment<?> experiment) {\n        Map<String, Object> result = new HashMap<>();\n        result.put(\"experimentAccession\", experiment.getAccession());\n        result.put(\"experimentDescription\", experiment.getDescription());\n        result.put(\"type\", experiment.getType().getHumanDescription());\n        result.putAll(experiment.getSpecies().getAttributes());\n        result.put(\"pubMedIds\", experiment.getPubMedIds());\n        result.put(\"dois\", experiment.getDois());\n        result.put(\"disclaimer\", experiment.getDisclaimer());\n        result.put(\"lastUpdated\", new SimpleDateFormat(\"dd-MM-yyyy\").format(experiment.getLastUpdate()));\n        result.put(\"numberOfAssays\", experiment.getAnalysedAssays().size());\n        result.put(\"factors\", experiment.getExperimentDesign().getFactorHeaders());\n\n        if (!experiment.getDois().isEmpty()) {\n            result.put(\"publications\", getPublications(experiment.getDois()));\n        } else if (!experiment.getPubMedIds().isEmpty()) {\n            result.put(\"publications\", getPublications(experiment.getPubMedIds()));\n        }\n\n        result.put(\"longDescription\", idfParser.parse(experiment.getAccession()).getExperimentDescription());\n        // Internet says keywords are not that useful for SEO any more. Remove if it causes you problems.\n        List<String> keywords = ImmutableList.<String>builder()\n                .add(\"experiment\")\n                .add(experiment.getAccession())\n                .addAll(experiment.getDataProviderDescription())\n                .addAll(Arrays.asList(experiment.getType().getDescription().split(\"_\")))\n                .addAll(experiment.getExperimentDesign().getAssayHeaders())\n                .build();\n        result.put(\"pageKeywords\", Joiner.on(',').join(keywords));\n\n        // We want this to show up in Google searches.\n        result.put(\"pageDescription\", experiment.getDescription());\n\n        // Extra information to show on experiment page (if they were provided in <expAcc>-factors.xml file)\n        result.put(\"dataProviderURL\", experiment.getDataProviderURL());\n        result.put(\"dataProviderDescription\", experiment.getDataProviderDescription());\n        result.put(\"alternativeViews\", experiment.getAlternativeViews());\n        result.put(\"alternativeViewDescriptions\", experiment.getAlternativeViewDescriptions());\n\n        // TODO This could probably be improved...\n        if (experiment instanceof MicroarrayExperiment) {\n            MicroarrayExperiment microarrayExperiment = (MicroarrayExperiment) experiment;\n\n            result.put(\"arrayDesignAccessions\", microarrayExperiment.getArrayDesignAccessions());\n            result.put(\"arrayDesignNames\", microarrayExperiment.getArrayDesignNames());\n        } else if (experiment instanceof DifferentialExperiment) {\n            result.put(\"regulationValues\", Regulation.values());\n            result.put(\"contrasts\", experiment.getDataColumnDescriptors());\n        }\n\n        return result;\n    }", "signature": "Map<String, Object> getAttributes(Experiment<?> experiment)", "full_signature": "public Map<String, Object> getAttributes(Experiment<?> experiment)", "class_method_signature": "ExperimentAttributesService.getAttributes(Experiment<?> experiment)", "testcase": false, "constructor": false, "invocations": ["put", "getAccession", "put", "getDescription", "put", "getHumanDescription", "getType", "putAll", "getAttributes", "getSpecies", "put", "getPubMedIds", "put", "getDois", "put", "getDisclaimer", "put", "format", "getLastUpdate", "put", "size", "getAnalysedAssays", "put", "getFactorHeaders", "getExperimentDesign", "isEmpty", "getDois", "put", "getPublications", "getDois", "isEmpty", "getPubMedIds", "put", "getPublications", "getPubMedIds", "put", "getExperimentDescription", "parse", "getAccession", "build", "addAll", "addAll", "addAll", "add", "add", "builder", "getAccession", "getDataProviderDescription", "asList", "split", "getDescription", "getType", "getAssayHeaders", "getExperimentDesign", "put", "join", "on", "put", "getDescription", "put", "getDataProviderURL", "put", "getDataProviderDescription", "put", "getAlternativeViews", "put", "getAlternativeViewDescriptions", "put", "getArrayDesignAccessions", "put", "getArrayDesignNames", "put", "values", "put", "getDataColumnDescriptors"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}