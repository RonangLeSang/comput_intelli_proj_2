{"test_class": {"identifier": "BaselineExperimentSearchResultProducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ExperimentTrader experimentTrader;", "modifier": "@Mock\n    private", "type": "ExperimentTrader", "declarator": "experimentTrader", "var_name": "experimentTrader"}, {"original_string": "private BaselineExperimentSearchResultProducer subject;", "modifier": "private", "type": "BaselineExperimentSearchResultProducer", "declarator": "subject", "var_name": "subject"}, {"original_string": "private String factorHeader = \"type1\";", "modifier": "private", "type": "String", "declarator": "factorHeader = \"type1\"", "var_name": "factorHeader"}, {"original_string": "private String factorType = Factor.normalize(factorHeader);", "modifier": "private", "type": "String", "declarator": "factorType = Factor.normalize(factorHeader)", "var_name": "factorType"}, {"original_string": "private String secondFactorHeader = \"type2\";", "modifier": "private", "type": "String", "declarator": "secondFactorHeader = \"type2\"", "var_name": "secondFactorHeader"}, {"original_string": "private String secondFactorType = Factor.normalize(secondFactorHeader);", "modifier": "private", "type": "String", "declarator": "secondFactorType = Factor.normalize(secondFactorHeader)", "var_name": "secondFactorType"}, {"original_string": "private BaselineExperiment singleFactorExperiment;", "modifier": "private", "type": "BaselineExperiment", "declarator": "singleFactorExperiment", "var_name": "singleFactorExperiment"}, {"original_string": "private BaselineExperiment twoFactorExperimentWithThreeDifferentValuesForEachFactor;", "modifier": "private", "type": "BaselineExperiment", "declarator": "twoFactorExperimentWithThreeDifferentValuesForEachFactor", "var_name": "twoFactorExperimentWithThreeDifferentValuesForEachFactor"}, {"original_string": "private BaselineExperiment twoFactorExperimentWithOverlappingFactors;", "modifier": "private", "type": "BaselineExperiment", "declarator": "twoFactorExperimentWithOverlappingFactors", "var_name": "twoFactorExperimentWithOverlappingFactors"}], "file": "base/src/test/java/uk/ac/ebi/atlas/search/baseline/BaselineExperimentSearchResultProducerTest.java"}, "test_case": {"identifier": "threeDataPointsGiveThreeConditions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void threeDataPointsGiveThreeConditions() {\n        Map<String, Map<String, Double>> dataInSolr =\n                ImmutableMap.of(\n                        singleFactorExperiment.getAccession(), ImmutableMap.of(\"g1\", 1.0, \"g2\", 2.0, \"g3\", 3.0));\n        Collection<BaselineExperimentProfile> result = subject.buildProfilesForExperiments(dataInSolr, factorType);\n        assertThat(result.size(), is(1));\n        assertThat(result.iterator().next().getSpecificity(), is(3L));\n    }", "signature": "void threeDataPointsGiveThreeConditions()", "full_signature": "@Test public void threeDataPointsGiveThreeConditions()", "class_method_signature": "BaselineExperimentSearchResultProducerTest.threeDataPointsGiveThreeConditions()", "testcase": true, "constructor": false, "invocations": ["of", "getAccession", "of", "buildProfilesForExperiments", "assertThat", "size", "is", "assertThat", "getSpecificity", "next", "iterator", "is"]}, "focal_class": {"identifier": "BaselineExperimentSearchResultProducer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ExperimentTrader experimentTrader;", "modifier": "private final", "type": "ExperimentTrader", "declarator": "experimentTrader", "var_name": "experimentTrader"}], "methods": [{"identifier": "BaselineExperimentSearchResultProducer", "parameters": "(ExperimentTrader experimentTrader)", "modifiers": "public", "return": "", "signature": " BaselineExperimentSearchResultProducer(ExperimentTrader experimentTrader)", "full_signature": "public  BaselineExperimentSearchResultProducer(ExperimentTrader experimentTrader)", "class_method_signature": "BaselineExperimentSearchResultProducer.BaselineExperimentSearchResultProducer(ExperimentTrader experimentTrader)", "testcase": false, "constructor": true}, {"identifier": "buildProfilesForExperiments", "parameters": "(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType)", "modifiers": "public", "return": "BaselineExperimentProfilesList", "signature": "BaselineExperimentProfilesList buildProfilesForExperiments(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType)", "full_signature": "public BaselineExperimentProfilesList buildProfilesForExperiments(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType)", "class_method_signature": "BaselineExperimentSearchResultProducer.buildProfilesForExperiments(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType)", "testcase": false, "constructor": false}, {"identifier": "trimAndSort", "parameters": "(Collection<BaselineExperimentProfile> profiles)", "modifiers": "private", "return": "BaselineExperimentProfilesList", "signature": "BaselineExperimentProfilesList trimAndSort(Collection<BaselineExperimentProfile> profiles)", "full_signature": "private BaselineExperimentProfilesList trimAndSort(Collection<BaselineExperimentProfile> profiles)", "class_method_signature": "BaselineExperimentSearchResultProducer.trimAndSort(Collection<BaselineExperimentProfile> profiles)", "testcase": false, "constructor": false}, {"identifier": "profilesForExpressions", "parameters": "(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, final String factorType)", "modifiers": "private", "return": "Collection<BaselineExperimentProfile>", "signature": "Collection<BaselineExperimentProfile> profilesForExpressions(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, final String factorType)", "full_signature": "private Collection<BaselineExperimentProfile> profilesForExpressions(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, final String factorType)", "class_method_signature": "BaselineExperimentSearchResultProducer.profilesForExpressions(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, final String factorType)", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/search/baseline/BaselineExperimentSearchResultProducer.java"}, "focal_method": {"identifier": "buildProfilesForExperiments", "parameters": "(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType)", "modifiers": "public", "return": "BaselineExperimentProfilesList", "body": "public BaselineExperimentProfilesList buildProfilesForExperiments(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType) {\n        return trimAndSort(profilesForExpressions(expressionsPerColumnPerExperiment, factorType));\n    }", "signature": "BaselineExperimentProfilesList buildProfilesForExperiments(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType)", "full_signature": "public BaselineExperimentProfilesList buildProfilesForExperiments(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType)", "class_method_signature": "BaselineExperimentSearchResultProducer.buildProfilesForExperiments(\n            Map<String, Map<String, Double>> expressionsPerColumnPerExperiment, String factorType)", "testcase": false, "constructor": false, "invocations": ["trimAndSort", "profilesForExpressions"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}