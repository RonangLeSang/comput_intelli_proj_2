{"test_class": {"identifier": "GeneIdSearchServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Species HUMAN =\n            new Species(\n                    \"Homo sapiens\",\n                    SpeciesProperties.create(\"Homo_sapiens\", \"ORGANISM_PART\", \"animals\", ImmutableList.of()));", "modifier": "private static final", "type": "Species", "declarator": "HUMAN =\n            new Species(\n                    \"Homo sapiens\",\n                    SpeciesProperties.create(\"Homo_sapiens\", \"ORGANISM_PART\", \"animals\", ImmutableList.of()))", "var_name": "HUMAN"}, {"original_string": "@Mock\n    private GeneIdSearchDao geneIdSearchDao;", "modifier": "@Mock\n    private", "type": "GeneIdSearchDao", "declarator": "geneIdSearchDao", "var_name": "geneIdSearchDao"}, {"original_string": "private InOrder inOrder;", "modifier": "private", "type": "InOrder", "declarator": "inOrder", "var_name": "inOrder"}, {"original_string": "private GeneIdSearchService subject;", "modifier": "private", "type": "GeneIdSearchService", "declarator": "subject", "var_name": "subject"}], "file": "sc/src/test/java/uk/ac/ebi/atlas/search/geneids/GeneIdSearchServiceTest.java"}, "test_case": {"identifier": "geneQueryWithoutCategoryIsSearchedInIdProperties", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void geneQueryWithoutCategoryIsSearchedInIdProperties() {\n        subject.search(GeneQuery.create(\"foobar\"));\n        subject.search(GeneQuery.create(\"foobar\", HUMAN));\n\n        ID_PROPERTY_NAMES.forEach(propertyName ->\n                inOrder.verify(geneIdSearchDao).searchGeneIds(\"foobar\", propertyName.name));\n\n        ID_PROPERTY_NAMES.forEach(propertyName ->\n                inOrder.verify(geneIdSearchDao).searchGeneIds(\"foobar\", propertyName.name, HUMAN.getEnsemblName()));\n    }", "signature": "void geneQueryWithoutCategoryIsSearchedInIdProperties()", "full_signature": "@Test void geneQueryWithoutCategoryIsSearchedInIdProperties()", "class_method_signature": "GeneIdSearchServiceTest.geneQueryWithoutCategoryIsSearchedInIdProperties()", "testcase": true, "constructor": false, "invocations": ["search", "create", "search", "create", "forEach", "searchGeneIds", "verify", "forEach", "searchGeneIds", "verify", "getEnsemblName"]}, "focal_class": {"identifier": "GeneIdSearchService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GeneIdSearchService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GeneIdSearchService.class)", "var_name": "LOGGER"}, {"original_string": "private final GeneIdSearchDao geneIdSearchDao;", "modifier": "private final", "type": "GeneIdSearchDao", "declarator": "geneIdSearchDao", "var_name": "geneIdSearchDao"}], "methods": [{"identifier": "GeneIdSearchService", "parameters": "(GeneIdSearchDao geneIdSearchDao)", "modifiers": "public", "return": "", "signature": " GeneIdSearchService(GeneIdSearchDao geneIdSearchDao)", "full_signature": "public  GeneIdSearchService(GeneIdSearchDao geneIdSearchDao)", "class_method_signature": "GeneIdSearchService.GeneIdSearchService(GeneIdSearchDao geneIdSearchDao)", "testcase": false, "constructor": true}, {"identifier": "search", "parameters": "(GeneQuery geneQuery)", "modifiers": "public", "return": "Optional<ImmutableSet<String>>", "signature": "Optional<ImmutableSet<String>> search(GeneQuery geneQuery)", "full_signature": "public Optional<ImmutableSet<String>> search(GeneQuery geneQuery)", "class_method_signature": "GeneIdSearchService.search(GeneQuery geneQuery)", "testcase": false, "constructor": false}, {"identifier": "searchIds", "parameters": "(Function<String, Optional<ImmutableSet<String>>> idSearcher)", "modifiers": "private", "return": "Optional<ImmutableSet<String>>", "signature": "Optional<ImmutableSet<String>> searchIds(Function<String, Optional<ImmutableSet<String>>> idSearcher)", "full_signature": "private Optional<ImmutableSet<String>> searchIds(Function<String, Optional<ImmutableSet<String>>> idSearcher)", "class_method_signature": "GeneIdSearchService.searchIds(Function<String, Optional<ImmutableSet<String>>> idSearcher)", "testcase": false, "constructor": false}], "file": "sc/src/main/java/uk/ac/ebi/atlas/search/geneids/GeneIdSearchService.java"}, "focal_method": {"identifier": "search", "parameters": "(GeneQuery geneQuery)", "modifiers": "public", "return": "Optional<ImmutableSet<String>>", "body": "public Optional<ImmutableSet<String>> search(GeneQuery geneQuery) {\n        if (geneQuery.category().isPresent()) {\n            if (geneQuery.species().isPresent() &&\n                !BioentitiesCollectionProxy.SPECIES_OVERRIDE_PROPERTY_NAMES.contains(geneQuery.category().get())) {\n                LOGGER.debug(\n                        \"Searching {}/{} in species {}\",\n                        geneQuery.queryTerm(),\n                        geneQuery.category().get(),\n                        geneQuery.species().get().getEnsemblName());\n\n                return geneIdSearchDao.searchGeneIds(\n                        geneQuery.queryTerm(),\n                        geneQuery.category().get().name,\n                        geneQuery.species().get().getEnsemblName());\n            }\n\n            LOGGER.debug(\n                    \"Searching {}/{} ignoring species {}\",\n                    geneQuery.queryTerm(),\n                    geneQuery.category().get(),\n                    geneQuery.species().map(Species::getEnsemblName).orElse(\"(none provided)\"));\n\n            return geneIdSearchDao.searchGeneIds(geneQuery.queryTerm(), geneQuery.category().get().name);\n        }\n\n        LOGGER.debug(\n                \"Searching {} (free text without category) in species {}\",\n                geneQuery.queryTerm(),\n                geneQuery.species().map(Species::getEnsemblName).orElse(\"(none provided)\"));\n\n        return geneQuery.species().isPresent() ?\n                searchIds(propertyName ->\n                        geneIdSearchDao.searchGeneIds(\n                                geneQuery.queryTerm(),\n                                propertyName,\n                                geneQuery.species().get().getEnsemblName())) :\n                searchIds(propertyName -> geneIdSearchDao.searchGeneIds(geneQuery.queryTerm(), propertyName));\n    }", "signature": "Optional<ImmutableSet<String>> search(GeneQuery geneQuery)", "full_signature": "public Optional<ImmutableSet<String>> search(GeneQuery geneQuery)", "class_method_signature": "GeneIdSearchService.search(GeneQuery geneQuery)", "testcase": false, "constructor": false, "invocations": ["isPresent", "category", "isPresent", "species", "contains", "get", "category", "debug", "queryTerm", "get", "category", "getEnsemblName", "get", "species", "searchGeneIds", "queryTerm", "get", "category", "getEnsemblName", "get", "species", "debug", "queryTerm", "get", "category", "orElse", "map", "species", "searchGeneIds", "queryTerm", "get", "category", "debug", "queryTerm", "orElse", "map", "species", "isPresent", "species", "searchIds", "searchGeneIds", "queryTerm", "getEnsemblName", "get", "species", "searchIds", "searchGeneIds", "queryTerm"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}