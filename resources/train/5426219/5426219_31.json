{"test_class": {"identifier": "MicroarrayExperimentFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ACCESSION = \"accession\";", "modifier": "private static final", "type": "String", "declarator": "ACCESSION = \"accession\"", "var_name": "ACCESSION"}, {"original_string": "private static final String ARRAYDESIGN_ID = \"arraydesignId\";", "modifier": "private static final", "type": "String", "declarator": "ARRAYDESIGN_ID = \"arraydesignId\"", "var_name": "ARRAYDESIGN_ID"}, {"original_string": "private static final String ARRAYDESIGN_NAME = \"arraydesignName\";", "modifier": "private static final", "type": "String", "declarator": "ARRAYDESIGN_NAME = \"arraydesignName\"", "var_name": "ARRAYDESIGN_NAME"}, {"original_string": "private static final String SPECIES_STRING = \"species\";", "modifier": "private static final", "type": "String", "declarator": "SPECIES_STRING = \"species\"", "var_name": "SPECIES_STRING"}, {"original_string": "private static final Species SPECIES = new Species(SPECIES_STRING, SpeciesProperties.UNKNOWN);", "modifier": "private static final", "type": "Species", "declarator": "SPECIES = new Species(SPECIES_STRING, SpeciesProperties.UNKNOWN)", "var_name": "SPECIES"}, {"original_string": "@Mock\n    private ConfigurationTrader configurationTraderMock;", "modifier": "@Mock\n    private", "type": "ConfigurationTrader", "declarator": "configurationTraderMock", "var_name": "configurationTraderMock"}, {"original_string": "@Mock\n    private SpeciesFactory speciesFactory;", "modifier": "@Mock\n    private", "type": "SpeciesFactory", "declarator": "speciesFactory", "var_name": "speciesFactory"}, {"original_string": "@Mock\n    private MicroarrayExperimentConfiguration experimentConfigurationMock;", "modifier": "@Mock\n    private", "type": "MicroarrayExperimentConfiguration", "declarator": "experimentConfigurationMock", "var_name": "experimentConfigurationMock"}, {"original_string": "@Mock\n    private ExperimentDTO experimentDTOMock;", "modifier": "@Mock\n    private", "type": "ExperimentDTO", "declarator": "experimentDTOMock", "var_name": "experimentDTOMock"}, {"original_string": "@Mock\n    private ExperimentDesign experimentDesignMock;", "modifier": "@Mock\n    private", "type": "ExperimentDesign", "declarator": "experimentDesignMock", "var_name": "experimentDesignMock"}, {"original_string": "@Mock\n    private IdfParserOutput idfParserOutputMock;", "modifier": "@Mock\n    private", "type": "IdfParserOutput", "declarator": "idfParserOutputMock", "var_name": "idfParserOutputMock"}, {"original_string": "@Mock\n    private ArrayDesignDao arrayDesignDAO;", "modifier": "@Mock\n    private", "type": "ArrayDesignDao", "declarator": "arrayDesignDAO", "var_name": "arrayDesignDAO"}, {"original_string": "private MicroarrayExperimentFactory subject;", "modifier": "private", "type": "MicroarrayExperimentFactory", "declarator": "subject", "var_name": "subject"}], "file": "gxa/src/test/java/uk/ac/ebi/atlas/trader/cache/loader/MicroarrayExperimentFactoryTest.java"}, "test_case": {"identifier": "idfTitleOverridesDatabaseTitleInExperimentDescription", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void idfTitleOverridesDatabaseTitleInExperimentDescription() {\n        when(idfParserOutputMock.getTitle()).thenReturn(\"IDF title\");\n        when(experimentDTOMock.getTitle()).thenReturn(\"DTO title\");\n        Assert.assertThat(\n                subject.create(experimentDTOMock, experimentDesignMock, idfParserOutputMock),\n                hasProperty(\"description\", Is.is(\"IDF title\")));\n    }", "signature": "void idfTitleOverridesDatabaseTitleInExperimentDescription()", "full_signature": "@Test public void idfTitleOverridesDatabaseTitleInExperimentDescription()", "class_method_signature": "MicroarrayExperimentFactoryTest.idfTitleOverridesDatabaseTitleInExperimentDescription()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getTitle", "thenReturn", "when", "getTitle", "assertThat", "create", "hasProperty", "is"]}, "focal_class": {"identifier": "MicroarrayExperimentFactory", "superclass": "", "interfaces": "implements ExperimentFactory<MicroarrayExperiment>", "fields": [{"original_string": "private final ConfigurationTrader configurationTrader;", "modifier": "private final", "type": "ConfigurationTrader", "declarator": "configurationTrader", "var_name": "configurationTrader"}, {"original_string": "private final SpeciesFactory speciesFactory;", "modifier": "private final", "type": "SpeciesFactory", "declarator": "speciesFactory", "var_name": "speciesFactory"}, {"original_string": "private final ArrayDesignDao arrayDesignDAO;", "modifier": "private final", "type": "ArrayDesignDao", "declarator": "arrayDesignDAO", "var_name": "arrayDesignDAO"}], "methods": [{"identifier": "MicroarrayExperimentFactory", "parameters": "(ConfigurationTrader configurationTrader,\n                                       SpeciesFactory speciesFactory,\n                                       ArrayDesignDao arrayDesignDAO)", "modifiers": "public", "return": "", "signature": " MicroarrayExperimentFactory(ConfigurationTrader configurationTrader,\n                                       SpeciesFactory speciesFactory,\n                                       ArrayDesignDao arrayDesignDAO)", "full_signature": "public  MicroarrayExperimentFactory(ConfigurationTrader configurationTrader,\n                                       SpeciesFactory speciesFactory,\n                                       ArrayDesignDao arrayDesignDAO)", "class_method_signature": "MicroarrayExperimentFactory.MicroarrayExperimentFactory(ConfigurationTrader configurationTrader,\n                                       SpeciesFactory speciesFactory,\n                                       ArrayDesignDao arrayDesignDAO)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput)", "modifiers": "@Override public", "return": "MicroarrayExperiment", "signature": "MicroarrayExperiment create(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput)", "full_signature": "@Override public MicroarrayExperiment create(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput)", "class_method_signature": "MicroarrayExperimentFactory.create(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput)", "testcase": false, "constructor": false}], "file": "gxa/src/main/java/uk/ac/ebi/atlas/trader/cache/loader/MicroarrayExperimentFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput)", "modifiers": "@Override public", "return": "MicroarrayExperiment", "body": "@Override\n    public MicroarrayExperiment create(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput) {\n\n        String experimentAccession = experimentDTO.getExperimentAccession();\n\n        MicroarrayExperimentConfiguration experimentConfiguration =\n                configurationTrader.getMicroarrayExperimentConfiguration(experimentAccession);\n\n        return new MicroarrayExperiment(\n                experimentDTO.getExperimentType(),\n                experimentAccession,\n                experimentDTO.getLastUpdate(),\n                experimentConfiguration.getContrastAndAnnotationPairs(),\n                idfParserOutput.getTitle(),\n                speciesFactory.create(experimentDTO.getSpecies()),\n                experimentDesign,\n                experimentDTO.getPubmedIds(),\n                experimentDTO.getDois(),\n                experimentConfiguration\n                        .getArrayDesignAccessions()\n                        .stream()\n                        .map(arrayDesignDAO::getArrayDesign)\n                        .collect(Collectors.toList())\n        );\n    }", "signature": "MicroarrayExperiment create(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput)", "full_signature": "@Override public MicroarrayExperiment create(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput)", "class_method_signature": "MicroarrayExperimentFactory.create(ExperimentDTO experimentDTO,\n                                       ExperimentDesign experimentDesign,\n                                       IdfParserOutput idfParserOutput)", "testcase": false, "constructor": false, "invocations": ["getExperimentAccession", "getMicroarrayExperimentConfiguration", "getExperimentType", "getLastUpdate", "getContrastAndAnnotationPairs", "getTitle", "create", "getSpecies", "getPubmedIds", "getDois", "collect", "map", "stream", "getArrayDesignAccessions", "toList"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}