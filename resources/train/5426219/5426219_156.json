{"test_class": {"identifier": "DifferentialProfileComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DifferentialProfileComparatorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DifferentialProfileComparatorTest.class)", "var_name": "LOGGER"}, {"original_string": "private List<Contrast> mockContrasts = ContrastTestUtils.get(3);", "modifier": "private", "type": "List<Contrast>", "declarator": "mockContrasts = ContrastTestUtils.get(3)", "var_name": "mockContrasts"}, {"original_string": "private Set<Contrast> allContrasts = ImmutableSet.copyOf(mockContrasts);", "modifier": "private", "type": "Set<Contrast>", "declarator": "allContrasts = ImmutableSet.copyOf(mockContrasts)", "var_name": "allContrasts"}, {"original_string": "private Set<Contrast> selectedContrasts = ImmutableSet.copyOf(mockContrasts.subList(0, 1));", "modifier": "private", "type": "Set<Contrast>", "declarator": "selectedContrasts = ImmutableSet.copyOf(mockContrasts.subList(0, 1))", "var_name": "selectedContrasts"}, {"original_string": "private Set<Contrast> nonSelectedContrasts = ImmutableSet.copyOf(mockContrasts.subList(1, 3));", "modifier": "private", "type": "Set<Contrast>", "declarator": "nonSelectedContrasts = ImmutableSet.copyOf(mockContrasts.subList(1, 3))", "var_name": "nonSelectedContrasts"}, {"original_string": "private DifferentialProfileComparator<DifferentialProfile> subject =\n            new DifferentialProfileComparator<>(true, selectedContrasts, allContrasts, Regulation.UP);", "modifier": "private", "type": "DifferentialProfileComparator<DifferentialProfile>", "declarator": "subject =\n            new DifferentialProfileComparator<>(true, selectedContrasts, allContrasts, Regulation.UP)", "var_name": "subject"}, {"original_string": "@Mock\n    private DifferentialProfile<DifferentialExpression, ?> profileMock1;", "modifier": "@Mock\n    private", "type": "DifferentialProfile<DifferentialExpression, ?>", "declarator": "profileMock1", "var_name": "profileMock1"}, {"original_string": "@Mock\n    private DifferentialProfile<DifferentialExpression, ?> profileMock2;", "modifier": "@Mock\n    private", "type": "DifferentialProfile<DifferentialExpression, ?>", "declarator": "profileMock2", "var_name": "profileMock2"}, {"original_string": "private static final String T_STAT_IGNORED = \"0\";", "modifier": "private static final", "type": "String", "declarator": "T_STAT_IGNORED = \"0\"", "var_name": "T_STAT_IGNORED"}, {"original_string": "private static final String P_VALUE_IGNORED = \"999\";", "modifier": "private static final", "type": "String", "declarator": "P_VALUE_IGNORED = \"999\"", "var_name": "P_VALUE_IGNORED"}, {"original_string": "private static final String FOLD_CHANGE_IGNORED = \"0\";", "modifier": "private static final", "type": "String", "declarator": "FOLD_CHANGE_IGNORED = \"0\"", "var_name": "FOLD_CHANGE_IGNORED"}, {"original_string": "private static final String FOLD_CHANGE_20 = \"20\";", "modifier": "private static final", "type": "String", "declarator": "FOLD_CHANGE_20 = \"20\"", "var_name": "FOLD_CHANGE_20"}, {"original_string": "private static final String FOLD_CHANGE_10 = \"10\";", "modifier": "private static final", "type": "String", "declarator": "FOLD_CHANGE_10 = \"10\"", "var_name": "FOLD_CHANGE_10"}, {"original_string": "private static final String FOLD_CHANGE_7 = \"7\";", "modifier": "private static final", "type": "String", "declarator": "FOLD_CHANGE_7 = \"7\"", "var_name": "FOLD_CHANGE_7"}, {"original_string": "private static final String FOLD_CHANGE_5 = \"5\";", "modifier": "private static final", "type": "String", "declarator": "FOLD_CHANGE_5 = \"5\"", "var_name": "FOLD_CHANGE_5"}, {"original_string": "private static final String FOLD_CHANGE_3 = \"3\";", "modifier": "private static final", "type": "String", "declarator": "FOLD_CHANGE_3 = \"3\"", "var_name": "FOLD_CHANGE_3"}, {"original_string": "private static final String FOLD_CHANGE_1 = \"0.1\";", "modifier": "private static final", "type": "String", "declarator": "FOLD_CHANGE_1 = \"0.1\"", "var_name": "FOLD_CHANGE_1"}, {"original_string": "private static final String P_VALUE_0_DOT_1 = \"0.1\";", "modifier": "private static final", "type": "String", "declarator": "P_VALUE_0_DOT_1 = \"0.1\"", "var_name": "P_VALUE_0_DOT_1"}, {"original_string": "private static final String P_VALUE_0_DOT_2 = \"0.2\";", "modifier": "private static final", "type": "String", "declarator": "P_VALUE_0_DOT_2 = \"0.2\"", "var_name": "P_VALUE_0_DOT_2"}, {"original_string": "private static final String GENE_1 = \"1\";", "modifier": "private static final", "type": "String", "declarator": "GENE_1 = \"1\"", "var_name": "GENE_1"}, {"original_string": "private static final String GENE_2 = \"2\";", "modifier": "private static final", "type": "String", "declarator": "GENE_2 = \"2\"", "var_name": "GENE_2"}, {"original_string": "private static final String GENE_3 = \"3\";", "modifier": "private static final", "type": "String", "declarator": "GENE_3 = \"3\"", "var_name": "GENE_3"}, {"original_string": "private static final String GENE_4 = \"4\";", "modifier": "private static final", "type": "String", "declarator": "GENE_4 = \"4\"", "var_name": "GENE_4"}, {"original_string": "private static final String GENE_5 = \"5\";", "modifier": "private static final", "type": "String", "declarator": "GENE_5 = \"5\"", "var_name": "GENE_5"}, {"original_string": "private static final String GENE_6 = \"6\";", "modifier": "private static final", "type": "String", "declarator": "GENE_6 = \"6\"", "var_name": "GENE_6"}, {"original_string": "private static final String DESIGN_ELEMENT = \"design_element\";", "modifier": "private static final", "type": "String", "declarator": "DESIGN_ELEMENT = \"design_element\"", "var_name": "DESIGN_ELEMENT"}, {"original_string": "private static final String HEADER =\n            Joiner.on(\"\\t\").join(new String[] {\n                    \"gene name\", \"gene id\", \"design element\",\n                    \"contrast_1.p-value\", \"contrast_1.t-stat\", \"contrast_1.fold-change\",\n                    \"contrast_2.p-value\", \"contrast_2.t-stat\", \"contrast_2.fold-change\"});", "modifier": "private static final", "type": "String", "declarator": "HEADER =\n            Joiner.on(\"\\t\").join(new String[] {\n                    \"gene name\", \"gene id\", \"design element\",\n                    \"contrast_1.p-value\", \"contrast_1.t-stat\", \"contrast_1.fold-change\",\n                    \"contrast_2.p-value\", \"contrast_2.t-stat\", \"contrast_2.fold-change\"})", "var_name": "HEADER"}, {"original_string": "private static final String SPECIFIC_ONE_CONTRAST =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_1, GENE_1, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_1,\n                    P_VALUE_IGNORED, T_STAT_IGNORED, FOLD_CHANGE_IGNORED});", "modifier": "private static final", "type": "String", "declarator": "SPECIFIC_ONE_CONTRAST =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_1, GENE_1, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_1,\n                    P_VALUE_IGNORED, T_STAT_IGNORED, FOLD_CHANGE_IGNORED})", "var_name": "SPECIFIC_ONE_CONTRAST"}, {"original_string": "private static final String TWO_CONTRAST_HIGH_FOLD_CHANGE =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_2, GENE_2, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_2, T_STAT_IGNORED, FOLD_CHANGE_20,\n                    P_VALUE_0_DOT_2, T_STAT_IGNORED, FOLD_CHANGE_10});", "modifier": "private static final", "type": "String", "declarator": "TWO_CONTRAST_HIGH_FOLD_CHANGE =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_2, GENE_2, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_2, T_STAT_IGNORED, FOLD_CHANGE_20,\n                    P_VALUE_0_DOT_2, T_STAT_IGNORED, FOLD_CHANGE_10})", "var_name": "TWO_CONTRAST_HIGH_FOLD_CHANGE"}, {"original_string": "private static final String TWO_CONTRAST_HIGH_FOLD_CHANGE_OTHER_CONTRAST =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_6, GENE_6, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_10,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_20});", "modifier": "private static final", "type": "String", "declarator": "TWO_CONTRAST_HIGH_FOLD_CHANGE_OTHER_CONTRAST =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_6, GENE_6, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_10,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_20})", "var_name": "TWO_CONTRAST_HIGH_FOLD_CHANGE_OTHER_CONTRAST"}, {"original_string": "private static final String TWO_CONTRAST_LOW_FOLD_CHANGE =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_3, GENE_3, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_10,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_10});", "modifier": "private static final", "type": "String", "declarator": "TWO_CONTRAST_LOW_FOLD_CHANGE =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_3, GENE_3, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_10,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_10})", "var_name": "TWO_CONTRAST_LOW_FOLD_CHANGE"}, {"original_string": "private static final String TWO_CONTRAST_SAME_FOLD_CHANGE_LOW_P_VALUE =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_4, GENE_4, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_5,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_5});", "modifier": "private static final", "type": "String", "declarator": "TWO_CONTRAST_SAME_FOLD_CHANGE_LOW_P_VALUE =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_4, GENE_4, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_5,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_5})", "var_name": "TWO_CONTRAST_SAME_FOLD_CHANGE_LOW_P_VALUE"}, {"original_string": "private static final String TWO_CONTRAST_SAME_FOLD_CHANGE_HIGH_P_VALUE =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_5, GENE_5, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_2, T_STAT_IGNORED, FOLD_CHANGE_5,\n                    P_VALUE_0_DOT_2, T_STAT_IGNORED, FOLD_CHANGE_5});", "modifier": "private static final", "type": "String", "declarator": "TWO_CONTRAST_SAME_FOLD_CHANGE_HIGH_P_VALUE =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_5, GENE_5, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_2, T_STAT_IGNORED, FOLD_CHANGE_5,\n                    P_VALUE_0_DOT_2, T_STAT_IGNORED, FOLD_CHANGE_5})", "var_name": "TWO_CONTRAST_SAME_FOLD_CHANGE_HIGH_P_VALUE"}, {"original_string": "private static final List<String> SEQUENCE_LINES =\n            ImmutableList.of(\n                    HEADER, SPECIFIC_ONE_CONTRAST, TWO_CONTRAST_HIGH_FOLD_CHANGE_OTHER_CONTRAST,\n                    TWO_CONTRAST_SAME_FOLD_CHANGE_HIGH_P_VALUE, TWO_CONTRAST_SAME_FOLD_CHANGE_LOW_P_VALUE,\n                    TWO_CONTRAST_LOW_FOLD_CHANGE, TWO_CONTRAST_HIGH_FOLD_CHANGE);", "modifier": "private static final", "type": "List<String>", "declarator": "SEQUENCE_LINES =\n            ImmutableList.of(\n                    HEADER, SPECIFIC_ONE_CONTRAST, TWO_CONTRAST_HIGH_FOLD_CHANGE_OTHER_CONTRAST,\n                    TWO_CONTRAST_SAME_FOLD_CHANGE_HIGH_P_VALUE, TWO_CONTRAST_SAME_FOLD_CHANGE_LOW_P_VALUE,\n                    TWO_CONTRAST_LOW_FOLD_CHANGE, TWO_CONTRAST_HIGH_FOLD_CHANGE)", "var_name": "SEQUENCE_LINES"}, {"original_string": "private static final List<Contrast> CONTRASTS = ContrastTestUtils.get(6);", "modifier": "private static final", "type": "List<Contrast>", "declarator": "CONTRASTS = ContrastTestUtils.get(6)", "var_name": "CONTRASTS"}, {"original_string": "private static final List<MicroarrayProfile> SEQUENCE_PROFILES =\n            MicroarrayProfileStreamFactoryTest.loadProfiles(CONTRASTS, SEQUENCE_LINES);", "modifier": "private static final", "type": "List<MicroarrayProfile>", "declarator": "SEQUENCE_PROFILES =\n            MicroarrayProfileStreamFactoryTest.loadProfiles(CONTRASTS, SEQUENCE_LINES)", "var_name": "SEQUENCE_PROFILES"}, {"original_string": "private static final String ONE_CONTRAST_HIGH =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_1, GENE_1, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_7,\n                    P_VALUE_IGNORED, T_STAT_IGNORED, FOLD_CHANGE_IGNORED});", "modifier": "private static final", "type": "String", "declarator": "ONE_CONTRAST_HIGH =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_1, GENE_1, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_7,\n                    P_VALUE_IGNORED, T_STAT_IGNORED, FOLD_CHANGE_IGNORED})", "var_name": "ONE_CONTRAST_HIGH"}, {"original_string": "private static final String TWO_CONTRAST_MID =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_2, GENE_2, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_3,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_3});", "modifier": "private static final", "type": "String", "declarator": "TWO_CONTRAST_MID =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_2, GENE_2, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_3,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_3})", "var_name": "TWO_CONTRAST_MID"}, {"original_string": "private static final String ONE_CONTRAST_LOW =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_3, GENE_3, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_5,\n                    P_VALUE_IGNORED, T_STAT_IGNORED, FOLD_CHANGE_IGNORED});", "modifier": "private static final", "type": "String", "declarator": "ONE_CONTRAST_LOW =\n            Joiner.on(\"\\t\").join(new String[] {\n                    GENE_3, GENE_3, DESIGN_ELEMENT,\n                    P_VALUE_0_DOT_1, T_STAT_IGNORED, FOLD_CHANGE_5,\n                    P_VALUE_IGNORED, T_STAT_IGNORED, FOLD_CHANGE_IGNORED})", "var_name": "ONE_CONTRAST_LOW"}, {"original_string": "private static final GeneProfilesList<MicroarrayProfile> SEQUENCE_PROFILES_2 =\n            MicroarrayProfileStreamFactoryTest.loadProfiles(\n                    CONTRASTS,  ImmutableList.of(HEADER, ONE_CONTRAST_HIGH, TWO_CONTRAST_MID, ONE_CONTRAST_LOW));", "modifier": "private static final", "type": "GeneProfilesList<MicroarrayProfile>", "declarator": "SEQUENCE_PROFILES_2 =\n            MicroarrayProfileStreamFactoryTest.loadProfiles(\n                    CONTRASTS,  ImmutableList.of(HEADER, ONE_CONTRAST_HIGH, TWO_CONTRAST_MID, ONE_CONTRAST_LOW))", "var_name": "SEQUENCE_PROFILES_2"}], "file": "base/src/test/java/uk/ac/ebi/atlas/model/experiment/differential/DifferentialProfileComparatorTest.java"}, "test_case": {"identifier": "testGetExpressionLevelFoldChangeOnWhenAllContrastsAreSelected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetExpressionLevelFoldChangeOnWhenAllContrastsAreSelected() {\n        subject = new DifferentialProfileComparator<>(true, selectedContrasts, allContrasts, Regulation.UP);\n\n        //when\n        when(profileMock1.getMaxExpressionLevelOn(nonSelectedContrasts)).thenReturn(0.05);\n        //when\n        when(profileMock1.getAverageExpressionLevelOn(selectedContrasts)).thenReturn(0.025);\n        //then\n        assertThat(subject.getExpressionLevelFoldChange(profileMock1), is(2D));\n    }", "signature": "void testGetExpressionLevelFoldChangeOnWhenAllContrastsAreSelected()", "full_signature": "@Test public void testGetExpressionLevelFoldChangeOnWhenAllContrastsAreSelected()", "class_method_signature": "DifferentialProfileComparatorTest.testGetExpressionLevelFoldChangeOnWhenAllContrastsAreSelected()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getMaxExpressionLevelOn", "thenReturn", "when", "getAverageExpressionLevelOn", "assertThat", "getExpressionLevelFoldChange", "is"]}, "focal_class": {"identifier": "DifferentialProfileComparator", "superclass": "", "interfaces": "implements Comparator<T>", "fields": [{"original_string": "private final boolean isSpecific;", "modifier": "private final", "type": "boolean", "declarator": "isSpecific", "var_name": "isSpecific"}, {"original_string": "private final Collection<Contrast> selectedQueryContrasts;", "modifier": "private final", "type": "Collection<Contrast>", "declarator": "selectedQueryContrasts", "var_name": "selectedQueryContrasts"}, {"original_string": "private final Collection<Contrast> nonSelectedQueryContrasts;", "modifier": "private final", "type": "Collection<Contrast>", "declarator": "nonSelectedQueryContrasts", "var_name": "nonSelectedQueryContrasts"}, {"original_string": "private final Regulation regulation;", "modifier": "private final", "type": "Regulation", "declarator": "regulation", "var_name": "regulation"}], "methods": [{"identifier": "DifferentialProfileComparator", "parameters": "(boolean isSpecific, Collection<Contrast> selectedQueryContrasts,\n                                         Collection<Contrast> allQueryContrasts, Regulation regulation)", "modifiers": "public", "return": "", "signature": " DifferentialProfileComparator(boolean isSpecific, Collection<Contrast> selectedQueryContrasts,\n                                         Collection<Contrast> allQueryContrasts, Regulation regulation)", "full_signature": "public  DifferentialProfileComparator(boolean isSpecific, Collection<Contrast> selectedQueryContrasts,\n                                         Collection<Contrast> allQueryContrasts, Regulation regulation)", "class_method_signature": "DifferentialProfileComparator.DifferentialProfileComparator(boolean isSpecific, Collection<Contrast> selectedQueryContrasts,\n                                         Collection<Contrast> allQueryContrasts, Regulation regulation)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(\n            DifferentialProfileStreamOptions options)", "modifiers": "public static", "return": "DifferentialProfileComparator<Prof>", "signature": "DifferentialProfileComparator<Prof> create(\n            DifferentialProfileStreamOptions options)", "full_signature": "public static DifferentialProfileComparator<Prof> create(\n            DifferentialProfileStreamOptions options)", "class_method_signature": "DifferentialProfileComparator.create(\n            DifferentialProfileStreamOptions options)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(T firstProfile, T otherProfile)", "modifiers": "@Override public", "return": "int", "signature": "int compare(T firstProfile, T otherProfile)", "full_signature": "@Override public int compare(T firstProfile, T otherProfile)", "class_method_signature": "DifferentialProfileComparator.compare(T firstProfile, T otherProfile)", "testcase": false, "constructor": false}, {"identifier": "compareOnAveragePValue", "parameters": "(DifferentialProfile<?, ?> firstProfile,\n                                       DifferentialProfile<?, ?> otherProfile,\n                                       Collection<Contrast> contrasts)", "modifiers": "private", "return": "int", "signature": "int compareOnAveragePValue(DifferentialProfile<?, ?> firstProfile,\n                                       DifferentialProfile<?, ?> otherProfile,\n                                       Collection<Contrast> contrasts)", "full_signature": "private int compareOnAveragePValue(DifferentialProfile<?, ?> firstProfile,\n                                       DifferentialProfile<?, ?> otherProfile,\n                                       Collection<Contrast> contrasts)", "class_method_signature": "DifferentialProfileComparator.compareOnAveragePValue(DifferentialProfile<?, ?> firstProfile,\n                                       DifferentialProfile<?, ?> otherProfile,\n                                       Collection<Contrast> contrasts)", "testcase": false, "constructor": false}, {"identifier": "compareOnAverageExpressionLevel", "parameters": "(DifferentialProfile<?, ?> firstProfile,\n                                                DifferentialProfile<?, ?> otherProfile,\n                                                Collection<Contrast> contrasts)", "modifiers": "private", "return": "int", "signature": "int compareOnAverageExpressionLevel(DifferentialProfile<?, ?> firstProfile,\n                                                DifferentialProfile<?, ?> otherProfile,\n                                                Collection<Contrast> contrasts)", "full_signature": "private int compareOnAverageExpressionLevel(DifferentialProfile<?, ?> firstProfile,\n                                                DifferentialProfile<?, ?> otherProfile,\n                                                Collection<Contrast> contrasts)", "class_method_signature": "DifferentialProfileComparator.compareOnAverageExpressionLevel(DifferentialProfile<?, ?> firstProfile,\n                                                DifferentialProfile<?, ?> otherProfile,\n                                                Collection<Contrast> contrasts)", "testcase": false, "constructor": false}, {"identifier": "getExpressionLevelFoldChange", "parameters": "(DifferentialProfile<?, ?> differentialProfile)", "modifiers": "public", "return": "double", "signature": "double getExpressionLevelFoldChange(DifferentialProfile<?, ?> differentialProfile)", "full_signature": "public double getExpressionLevelFoldChange(DifferentialProfile<?, ?> differentialProfile)", "class_method_signature": "DifferentialProfileComparator.getExpressionLevelFoldChange(DifferentialProfile<?, ?> differentialProfile)", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/model/experiment/differential/DifferentialProfileComparator.java"}, "focal_method": {"identifier": "getExpressionLevelFoldChange", "parameters": "(DifferentialProfile<?, ?> differentialProfile)", "modifiers": "public", "return": "double", "body": "public double getExpressionLevelFoldChange(DifferentialProfile<?, ?> differentialProfile) {\n\n        double minExpressionLevelOnNonSelectedQueryContrasts =\n                differentialProfile.getMaxExpressionLevelOn(nonSelectedQueryContrasts);\n\n        double averageExpressionLevelOnSelectedQueryContrasts =\n                differentialProfile.getAverageExpressionLevelOn(selectedQueryContrasts);\n\n        if (averageExpressionLevelOnSelectedQueryContrasts == 0) {\n            return minExpressionLevelOnNonSelectedQueryContrasts / Double.MIN_VALUE;\n        }\n\n        return minExpressionLevelOnNonSelectedQueryContrasts / averageExpressionLevelOnSelectedQueryContrasts;\n    }", "signature": "double getExpressionLevelFoldChange(DifferentialProfile<?, ?> differentialProfile)", "full_signature": "public double getExpressionLevelFoldChange(DifferentialProfile<?, ?> differentialProfile)", "class_method_signature": "DifferentialProfileComparator.getExpressionLevelFoldChange(DifferentialProfile<?, ?> differentialProfile)", "testcase": false, "constructor": false, "invocations": ["getMaxExpressionLevelOn", "getAverageExpressionLevelOn"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}