{"test_class": {"identifier": "ExperimentDesignParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXPERIMENT_ACCESSION = \"ACCESSION\";", "modifier": "private static final", "type": "String", "declarator": "EXPERIMENT_ACCESSION = \"ACCESSION\"", "var_name": "EXPERIMENT_ACCESSION"}, {"original_string": "private static final String ASSAY = \"Assay\";", "modifier": "private static final", "type": "String", "declarator": "ASSAY = \"Assay\"", "var_name": "ASSAY"}, {"original_string": "private static final String ARRAY = \"Array\";", "modifier": "private static final", "type": "String", "declarator": "ARRAY = \"Array\"", "var_name": "ARRAY"}, {"original_string": "private static final String ASSAY_ACCESSION_1 = \"C1\";", "modifier": "private static final", "type": "String", "declarator": "ASSAY_ACCESSION_1 = \"C1\"", "var_name": "ASSAY_ACCESSION_1"}, {"original_string": "private static final String A_AFFY_35 = \"A-AFFY-35\";", "modifier": "private static final", "type": "String", "declarator": "A_AFFY_35 = \"A-AFFY-35\"", "var_name": "A_AFFY_35"}, {"original_string": "private static final String RD_INSTAR_LARVA = \"3rd instar larva\";", "modifier": "private static final", "type": "String", "declarator": "RD_INSTAR_LARVA = \"3rd instar larva\"", "var_name": "RD_INSTAR_LARVA"}, {"original_string": "private static final String SPECIES_1 = \"Drosophila melanogaster\";", "modifier": "private static final", "type": "String", "declarator": "SPECIES_1 = \"Drosophila melanogaster\"", "var_name": "SPECIES_1"}, {"original_string": "private static final String CYC_C_MUTANT = \"cycC mutant\";", "modifier": "private static final", "type": "String", "declarator": "CYC_C_MUTANT = \"cycC mutant\"", "var_name": "CYC_C_MUTANT"}, {"original_string": "private static final String ASSAY_ACCESSION_2 = \"WT3\";", "modifier": "private static final", "type": "String", "declarator": "ASSAY_ACCESSION_2 = \"WT3\"", "var_name": "ASSAY_ACCESSION_2"}, {"original_string": "private static final String DUMMY = \"dummy\";", "modifier": "private static final", "type": "String", "declarator": "DUMMY = \"dummy\"", "var_name": "DUMMY"}, {"original_string": "private static final String SAMPLE_NAME_1 = \"DevelopmentalStage\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_NAME_1 = \"DevelopmentalStage\"", "var_name": "SAMPLE_NAME_1"}, {"original_string": "private static final String SAMPLE_NAME_2 = \"StrainOrLine\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_NAME_2 = \"StrainOrLine\"", "var_name": "SAMPLE_NAME_2"}, {"original_string": "private static final String GENOTYPE = \"GENOTYPE\";", "modifier": "private static final", "type": "String", "declarator": "GENOTYPE = \"GENOTYPE\"", "var_name": "GENOTYPE"}, {"original_string": "private static final String OREGON_R = \"Oregon R\";", "modifier": "private static final", "type": "String", "declarator": "OREGON_R = \"Oregon R\"", "var_name": "OREGON_R"}, {"original_string": "private static final String[] HEADER_LINE = new String[] {\n            ASSAY,\n            ARRAY,\n            \"Sample Characteristic[DevelopmentalStage]\",\n            \"Sample Characteristic[Genotype]\",\n            \"Sample Characteristic[Organism]\",\n            \"Sample Characteristic[StrainOrLine]\",\n            \"Factor Value[GENOTYPE]\" };", "modifier": "private static final", "type": "String[]", "declarator": "HEADER_LINE = new String[] {\n            ASSAY,\n            ARRAY,\n            \"Sample Characteristic[DevelopmentalStage]\",\n            \"Sample Characteristic[Genotype]\",\n            \"Sample Characteristic[Organism]\",\n            \"Sample Characteristic[StrainOrLine]\",\n            \"Factor Value[GENOTYPE]\" }", "var_name": "HEADER_LINE"}, {"original_string": "private static final String[] FIRST_LINE = new String[] {\n            ASSAY_ACCESSION_1,\n            A_AFFY_35,\n            RD_INSTAR_LARVA,\n            \"w1118; +; cycCY5\",\n            SPECIES_1,\n            \"\",\n            CYC_C_MUTANT };", "modifier": "private static final", "type": "String[]", "declarator": "FIRST_LINE = new String[] {\n            ASSAY_ACCESSION_1,\n            A_AFFY_35,\n            RD_INSTAR_LARVA,\n            \"w1118; +; cycCY5\",\n            SPECIES_1,\n            \"\",\n            CYC_C_MUTANT }", "var_name": "FIRST_LINE"}, {"original_string": "private static final String[] LAST_LINE = new String[] {\n            ASSAY_ACCESSION_2,\n            A_AFFY_35,\n            RD_INSTAR_LARVA,\n            \"wild_type\",\n            SPECIES_1,\n            OREGON_R,\n            \"wild_type\" };", "modifier": "private static final", "type": "String[]", "declarator": "LAST_LINE = new String[] {\n            ASSAY_ACCESSION_2,\n            A_AFFY_35,\n            RD_INSTAR_LARVA,\n            \"wild_type\",\n            SPECIES_1,\n            OREGON_R,\n            \"wild_type\" }", "var_name": "LAST_LINE"}, {"original_string": "private static final List<String[]> DATA = Lists.newArrayList(HEADER_LINE, FIRST_LINE, LAST_LINE);", "modifier": "private static final", "type": "List<String[]>", "declarator": "DATA = Lists.newArrayList(HEADER_LINE, FIRST_LINE, LAST_LINE)", "var_name": "DATA"}, {"original_string": "private static MockDataFileHub dataFileHub;", "modifier": "private static", "type": "MockDataFileHub", "declarator": "dataFileHub", "var_name": "dataFileHub"}, {"original_string": "@Mock\n    private SdrfParser mockSdrfParser;", "modifier": "@Mock\n    private", "type": "SdrfParser", "declarator": "mockSdrfParser", "var_name": "mockSdrfParser"}, {"original_string": "private ExperimentDesignParser subject;", "modifier": "private", "type": "ExperimentDesignParser", "declarator": "subject", "var_name": "subject"}], "file": "base/src/test/java/uk/ac/ebi/atlas/trader/ExperimentDesignParserTest.java"}, "test_case": {"identifier": "testAssays", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAssays() {\n        ExperimentDesign experimentDesign = subject.parse(EXPERIMENT_ACCESSION);\n        assertThat(experimentDesign.getArrayDesign(ASSAY_ACCESSION_1), is(A_AFFY_35));\n        assertThat(experimentDesign.getArrayDesign(ASSAY_ACCESSION_2), is(A_AFFY_35));\n    }", "signature": "void testAssays()", "full_signature": "@Test public void testAssays()", "class_method_signature": "ExperimentDesignParserTest.testAssays()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "getArrayDesign", "is", "assertThat", "getArrayDesign", "is"]}, "focal_class": {"identifier": "ExperimentDesignParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ONTOLOGY_TERM_DELIMITER = \" \";", "modifier": "private static final", "type": "String", "declarator": "ONTOLOGY_TERM_DELIMITER = \" \"", "var_name": "ONTOLOGY_TERM_DELIMITER"}, {"original_string": "static final Pattern SAMPLE_COLUMN_HEADER_PATTERN = Pattern.compile(\"\\\\s*Sample Characteristic\\\\[(.*?)\\\\]\\\\s*\");", "modifier": "static final", "type": "Pattern", "declarator": "SAMPLE_COLUMN_HEADER_PATTERN = Pattern.compile(\"\\\\s*Sample Characteristic\\\\[(.*?)\\\\]\\\\s*\")", "var_name": "SAMPLE_COLUMN_HEADER_PATTERN"}, {"original_string": "private static final Pattern SAMPLE_ONTOLOGY_TERM_COLUMN_HEADER_PATTERN =\n            Pattern.compile(\"\\\\s*Sample Characteristic Ontology Term\\\\[(.*?)\\\\]\\\\s*\");", "modifier": "private static final", "type": "Pattern", "declarator": "SAMPLE_ONTOLOGY_TERM_COLUMN_HEADER_PATTERN =\n            Pattern.compile(\"\\\\s*Sample Characteristic Ontology Term\\\\[(.*?)\\\\]\\\\s*\")", "var_name": "SAMPLE_ONTOLOGY_TERM_COLUMN_HEADER_PATTERN"}, {"original_string": "private static final Pattern FACTOR_COLUMN_HEADER_PATTERN = Pattern.compile(\"\\\\s*Factor Value\\\\[(.*?)\\\\]\\\\s*\");", "modifier": "private static final", "type": "Pattern", "declarator": "FACTOR_COLUMN_HEADER_PATTERN = Pattern.compile(\"\\\\s*Factor Value\\\\[(.*?)\\\\]\\\\s*\")", "var_name": "FACTOR_COLUMN_HEADER_PATTERN"}, {"original_string": "private static final Pattern FACTOR_VALUE_ONTOLOGY_TERM_COLUMN_HEADER_PATTERN =\n            Pattern.compile(\"\\\\s*Factor Value Ontology Term\\\\[(.*?)\\\\]\\\\s*\");", "modifier": "private static final", "type": "Pattern", "declarator": "FACTOR_VALUE_ONTOLOGY_TERM_COLUMN_HEADER_PATTERN =\n            Pattern.compile(\"\\\\s*Factor Value Ontology Term\\\\[(.*?)\\\\]\\\\s*\")", "var_name": "FACTOR_VALUE_ONTOLOGY_TERM_COLUMN_HEADER_PATTERN"}, {"original_string": "private final DataFileHub dataFileHub;", "modifier": "private final", "type": "DataFileHub", "declarator": "dataFileHub", "var_name": "dataFileHub"}, {"original_string": "private final SdrfParser sdrfParser;", "modifier": "private final", "type": "SdrfParser", "declarator": "sdrfParser", "var_name": "sdrfParser"}], "methods": [{"identifier": "ExperimentDesignParser", "parameters": "(DataFileHub dataFileHub, SdrfParser sdrfParser)", "modifiers": "@Inject", "return": "", "signature": " ExperimentDesignParser(DataFileHub dataFileHub, SdrfParser sdrfParser)", "full_signature": "@Inject  ExperimentDesignParser(DataFileHub dataFileHub, SdrfParser sdrfParser)", "class_method_signature": "ExperimentDesignParser.ExperimentDesignParser(DataFileHub dataFileHub, SdrfParser sdrfParser)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String experimentAccession)", "modifiers": "public", "return": "ExperimentDesign", "signature": "ExperimentDesign parse(String experimentAccession)", "full_signature": "public ExperimentDesign parse(String experimentAccession)", "class_method_signature": "ExperimentDesignParser.parse(String experimentAccession)", "testcase": false, "constructor": false}, {"identifier": "createOntologyTerms", "parameters": "(String[] line, Integer ontologyTermIndex)", "modifiers": "private", "return": "OntologyTerm[]", "signature": "OntologyTerm[] createOntologyTerms(String[] line, Integer ontologyTermIndex)", "full_signature": "private OntologyTerm[] createOntologyTerms(String[] line, Integer ontologyTermIndex)", "class_method_signature": "ExperimentDesignParser.createOntologyTerms(String[] line, Integer ontologyTermIndex)", "testcase": false, "constructor": false}, {"identifier": "extractHeaderIndexes", "parameters": "(String[] columnHeaders, Pattern columnHeaderPattern)", "modifiers": "private", "return": "Map<String, Integer>", "signature": "Map<String, Integer> extractHeaderIndexes(String[] columnHeaders, Pattern columnHeaderPattern)", "full_signature": "private Map<String, Integer> extractHeaderIndexes(String[] columnHeaders, Pattern columnHeaderPattern)", "class_method_signature": "ExperimentDesignParser.extractHeaderIndexes(String[] columnHeaders, Pattern columnHeaderPattern)", "testcase": false, "constructor": false}, {"identifier": "extractMatchingContent", "parameters": "(String string, Pattern pattern)", "modifiers": "static", "return": "String", "signature": "String extractMatchingContent(String string, Pattern pattern)", "full_signature": "static String extractMatchingContent(String string, Pattern pattern)", "class_method_signature": "ExperimentDesignParser.extractMatchingContent(String string, Pattern pattern)", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/trader/ExperimentDesignParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String experimentAccession)", "modifiers": "public", "return": "ExperimentDesign", "body": "public ExperimentDesign parse(String experimentAccession) {\n\n        AtlasResource<TsvStreamer> r = dataFileHub.getExperimentFiles(experimentAccession).experimentDesign;\n\n        if (!r.exists()) {\n            throw new UncheckedIOException(new FileNotFoundException(String.format(\"%s does not exist\", r)));\n        }\n\n        try (TsvStreamer tsvStreamer = r.get()) {\n            Iterator<String[]> lineIterator = tsvStreamer.get().iterator();\n\n            ExperimentDesign experimentDesign = new ExperimentDesign();\n\n            if (dataFileHub.getExperimentFiles(experimentAccession).sdrf.exists()) {\n                Map<String, Set<String>> headers = sdrfParser.parseHeader(experimentAccession);\n                experimentDesign.setOrderedSampleHeaders(headers.get(\"characteristics\"));\n                experimentDesign.setOrderedFactorHeaders(headers.get(\"factorvalue\"));\n            }\n\n            if (lineIterator.hasNext()) {\n                String[] headerLine = lineIterator.next();\n\n                Map<String, Integer> sampleHeaderIndexes =\n                        extractHeaderIndexes(headerLine, SAMPLE_COLUMN_HEADER_PATTERN);\n                Map<String, Integer> sampleValueOntologyTermHeaderIndexes =\n                        extractHeaderIndexes(headerLine, SAMPLE_ONTOLOGY_TERM_COLUMN_HEADER_PATTERN);\n\n                Map<String, Integer> factorHeaderIndexes =\n                        extractHeaderIndexes(headerLine, FACTOR_COLUMN_HEADER_PATTERN);\n                Map<String, Integer> factorValueOntologyTermHeaderIndexes =\n                        extractHeaderIndexes(headerLine, FACTOR_VALUE_ONTOLOGY_TERM_COLUMN_HEADER_PATTERN);\n\n                int headersStartIndex =\n                        headerLine.length - (sampleHeaderIndexes.size() + sampleValueOntologyTermHeaderIndexes.size() +\n                                factorHeaderIndexes.size() + factorValueOntologyTermHeaderIndexes.size());\n\n                for (String assayHeaderField : Arrays.copyOf(headerLine, headersStartIndex)) {\n                    experimentDesign.addAssayHeader(assayHeaderField);\n                }\n\n                while (lineIterator.hasNext()) {\n                    String[] line = lineIterator.next();\n\n                    String runOrAssay = line[0];\n                    if (headersStartIndex > 1) {\n                        experimentDesign.putArrayDesign(runOrAssay, line[1]);\n                    }\n\n                    for (String sampleHeader : sampleHeaderIndexes.keySet()) {\n                        String sampleValue = line[sampleHeaderIndexes.get(sampleHeader)];\n\n                        Integer sampleValueOntologyTermIndex =\n                                sampleValueOntologyTermHeaderIndexes.get(sampleHeader);\n                        OntologyTerm[] sampleValueOntologyTerms =\n                                createOntologyTerms(line, sampleValueOntologyTermIndex);\n                        SampleCharacteristic sampleCharacteristic =\n                                SampleCharacteristic.create(sampleHeader, sampleValue, sampleValueOntologyTerms);\n\n                        experimentDesign.putSampleCharacteristic(runOrAssay, sampleHeader, sampleCharacteristic);\n                    }\n\n                    for (String factorHeader : factorHeaderIndexes.keySet()) {\n                        String factorValue = line[factorHeaderIndexes.get(factorHeader)];\n\n                        Integer factorValueOntologyTermIndex =\n                                factorValueOntologyTermHeaderIndexes.get(factorHeader);\n                        OntologyTerm[] factorValueOntologyTerms =\n                                createOntologyTerms(line, factorValueOntologyTermIndex);\n\n                        experimentDesign.putFactor(runOrAssay, factorHeader, factorValue, factorValueOntologyTerms);\n                    }\n                }\n            }\n\n            return experimentDesign;\n        }\n    }", "signature": "ExperimentDesign parse(String experimentAccession)", "full_signature": "public ExperimentDesign parse(String experimentAccession)", "class_method_signature": "ExperimentDesignParser.parse(String experimentAccession)", "testcase": false, "constructor": false, "invocations": ["getExperimentFiles", "exists", "format", "get", "iterator", "get", "exists", "getExperimentFiles", "parseHeader", "setOrderedSampleHeaders", "get", "setOrderedFactorHeaders", "get", "hasNext", "next", "extractHeaderIndexes", "extractHeaderIndexes", "extractHeaderIndexes", "extractHeaderIndexes", "size", "size", "size", "size", "copyOf", "addAssayHeader", "hasNext", "next", "putArrayDesign", "keySet", "get", "get", "createOntologyTerms", "create", "putSampleCharacteristic", "keySet", "get", "get", "createOntologyTerms", "putFactor"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}