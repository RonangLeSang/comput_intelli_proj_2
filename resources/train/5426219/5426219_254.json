{"test_class": {"identifier": "BioentityPropertiesSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Path bioentityPropertiesDirectoryLocation;", "modifier": "private", "type": "Path", "declarator": "bioentityPropertiesDirectoryLocation", "var_name": "bioentityPropertiesDirectoryLocation"}, {"original_string": "private static final SpeciesProperties HUMAN =\n            SpeciesProperties.create(\"Homo_sapiens\", \"ORGANISM_PART\", \"animals\", ImmutableList.of());", "modifier": "private static final", "type": "SpeciesProperties", "declarator": "HUMAN =\n            SpeciesProperties.create(\"Homo_sapiens\", \"ORGANISM_PART\", \"animals\", ImmutableList.of())", "var_name": "HUMAN"}, {"original_string": "private BioentityPropertiesSource subject;", "modifier": "private", "type": "BioentityPropertiesSource", "declarator": "subject", "var_name": "subject"}], "file": "base/src/test/java/uk/ac/ebi/atlas/solr/bioentities/admin/BioentityPropertiesSourceTest.java"}, "test_case": {"identifier": "oddFilesSkipped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void oddFilesSkipped() throws Exception {\n        addTemporaryFile(\n                \"annotations\",\n                \"not-a-right-name.tsv\",\n                ImmutableList.of());\n\n        addTemporaryFile(\n                \"annotations\",\n                \"Homo_sapiens.ensprotein.tsv\",\n                ImmutableList.of());\n\n        addTemporaryFile(\n                \"annotations\",\n                \"Homo_sapiens.enstranscript.tsv\",\n                ImmutableList.of());\n\n        assertThat(subject.getAnnotationFiles().count(), is(0L));\n\n        addTemporaryFile(\n                \"annotations\",\n                \"Homo_sapiens.ensgene.tsv\",\n                ImmutableList.of());\n\n        assertThat(subject.getAnnotationFiles().count(), is(1L));\n\n        addTemporaryFile(\n                \"annotations\",\n                \"Sleazy_worm.wbpsgene.tsv\",\n                ImmutableList.of());\n\n        assertThat(subject.getAnnotationFiles().count(), is(2L));\n    }", "signature": "void oddFilesSkipped()", "full_signature": "@Test public void oddFilesSkipped()", "class_method_signature": "BioentityPropertiesSourceTest.oddFilesSkipped()", "testcase": true, "constructor": false, "invocations": ["addTemporaryFile", "of", "addTemporaryFile", "of", "addTemporaryFile", "of", "assertThat", "count", "getAnnotationFiles", "is", "addTemporaryFile", "of", "assertThat", "count", "getAnnotationFiles", "is", "addTemporaryFile", "of", "assertThat", "count", "getAnnotationFiles", "is"]}, "focal_class": {"identifier": "BioentityPropertiesSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern ANNOTATION_FILE_NAME_PATTERN =\n            Pattern.compile(\"\\\\w+\\\\.(\\\\w+gene|mature_mirna)\\\\.tsv\");", "modifier": "private static final", "type": "Pattern", "declarator": "ANNOTATION_FILE_NAME_PATTERN =\n            Pattern.compile(\"\\\\w+\\\\.(\\\\w+gene|mature_mirna)\\\\.tsv\")", "var_name": "ANNOTATION_FILE_NAME_PATTERN"}, {"original_string": "private static final Pattern ARRAY_DESIGN_FILE_NAME_PATTERN =\n            Pattern.compile(\"\\\\w+\\\\.A-\\\\w+-\\\\d+\\\\.tsv\");", "modifier": "private static final", "type": "Pattern", "declarator": "ARRAY_DESIGN_FILE_NAME_PATTERN =\n            Pattern.compile(\"\\\\w+\\\\.A-\\\\w+-\\\\d+\\\\.tsv\")", "var_name": "ARRAY_DESIGN_FILE_NAME_PATTERN"}, {"original_string": "private static final Pattern PATTERN =\n            Pattern.compile(\"\\\\w+\\\\.reactome\\\\.tsv\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN =\n            Pattern.compile(\"\\\\w+\\\\.reactome\\\\.tsv\")", "var_name": "PATTERN"}, {"original_string": "private final Path annotationsDirPath;", "modifier": "private final", "type": "Path", "declarator": "annotationsDirPath", "var_name": "annotationsDirPath"}, {"original_string": "private final Path arrayDesignsDirPath;", "modifier": "private final", "type": "Path", "declarator": "arrayDesignsDirPath", "var_name": "arrayDesignsDirPath"}, {"original_string": "private final Path reactomeDirPath;", "modifier": "private final", "type": "Path", "declarator": "reactomeDirPath", "var_name": "reactomeDirPath"}, {"original_string": "private final SpeciesFactory speciesFactory;", "modifier": "private final", "type": "SpeciesFactory", "declarator": "speciesFactory", "var_name": "speciesFactory"}], "methods": [{"identifier": "BioentityPropertiesSource", "parameters": "(Path annotationsDirPath,\n                                     Path arrayDesignsDirPath,\n                                     Path reactomeDirPath,\n                                     SpeciesFactory speciesFactory)", "modifiers": "public", "return": "", "signature": " BioentityPropertiesSource(Path annotationsDirPath,\n                                     Path arrayDesignsDirPath,\n                                     Path reactomeDirPath,\n                                     SpeciesFactory speciesFactory)", "full_signature": "public  BioentityPropertiesSource(Path annotationsDirPath,\n                                     Path arrayDesignsDirPath,\n                                     Path reactomeDirPath,\n                                     SpeciesFactory speciesFactory)", "class_method_signature": "BioentityPropertiesSource.BioentityPropertiesSource(Path annotationsDirPath,\n                                     Path arrayDesignsDirPath,\n                                     Path reactomeDirPath,\n                                     SpeciesFactory speciesFactory)", "testcase": false, "constructor": true}, {"identifier": "speciesFromFileName", "parameters": "(Path file)", "modifiers": "private", "return": "Species", "signature": "Species speciesFromFileName(Path file)", "full_signature": "private Species speciesFromFileName(Path file)", "class_method_signature": "BioentityPropertiesSource.speciesFromFileName(Path file)", "testcase": false, "constructor": false}, {"identifier": "getBioentityPropertyFiles", "parameters": "(Path directory,\n                                                                                 Pattern fileNamePattern,\n                                                                                 Function<Path, T> makeFromPath)", "modifiers": "private", "return": "Stream<T>", "signature": "Stream<T> getBioentityPropertyFiles(Path directory,\n                                                                                 Pattern fileNamePattern,\n                                                                                 Function<Path, T> makeFromPath)", "full_signature": "private Stream<T> getBioentityPropertyFiles(Path directory,\n                                                                                 Pattern fileNamePattern,\n                                                                                 Function<Path, T> makeFromPath)", "class_method_signature": "BioentityPropertiesSource.getBioentityPropertyFiles(Path directory,\n                                                                                 Pattern fileNamePattern,\n                                                                                 Function<Path, T> makeFromPath)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationFiles", "parameters": "()", "modifiers": "", "return": "Stream<AnnotationFile>", "signature": "Stream<AnnotationFile> getAnnotationFiles()", "full_signature": " Stream<AnnotationFile> getAnnotationFiles()", "class_method_signature": "BioentityPropertiesSource.getAnnotationFiles()", "testcase": false, "constructor": false}, {"identifier": "getArrayDesignMappingFiles", "parameters": "()", "modifiers": "", "return": "Stream<ArrayDesignMappingFile>", "signature": "Stream<ArrayDesignMappingFile> getArrayDesignMappingFiles()", "full_signature": " Stream<ArrayDesignMappingFile> getArrayDesignMappingFiles()", "class_method_signature": "BioentityPropertiesSource.getArrayDesignMappingFiles()", "testcase": false, "constructor": false}, {"identifier": "getReactomePropertyFiles", "parameters": "()", "modifiers": "", "return": "Stream<ReactomePropertyFile>", "signature": "Stream<ReactomePropertyFile> getReactomePropertyFiles()", "full_signature": " Stream<ReactomePropertyFile> getReactomePropertyFiles()", "class_method_signature": "BioentityPropertiesSource.getReactomePropertyFiles()", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/solr/bioentities/admin/BioentityPropertiesSource.java"}, "focal_method": {"identifier": "getAnnotationFiles", "parameters": "()", "modifiers": "", "return": "Stream<AnnotationFile>", "body": "Stream<AnnotationFile> getAnnotationFiles() {\n        return getBioentityPropertyFiles(annotationsDirPath, ANNOTATION_FILE_NAME_PATTERN, AnnotationFile::new);\n    }", "signature": "Stream<AnnotationFile> getAnnotationFiles()", "full_signature": " Stream<AnnotationFile> getAnnotationFiles()", "class_method_signature": "BioentityPropertiesSource.getAnnotationFiles()", "testcase": false, "constructor": false, "invocations": ["getBioentityPropertyFiles"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}