{"test_class": {"identifier": "DifferentialExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private  static final double P_VALUE = 0.0005;", "modifier": "private  static final", "type": "double", "declarator": "P_VALUE = 0.0005", "var_name": "P_VALUE"}, {"original_string": "private  static final double FOLD_CHANGE = 42.0;", "modifier": "private  static final", "type": "double", "declarator": "FOLD_CHANGE = 42.0", "var_name": "FOLD_CHANGE"}, {"original_string": "private  static final double SMALL_P_VALUE = 1.17501162847487E-242;", "modifier": "private  static final", "type": "double", "declarator": "SMALL_P_VALUE = 1.17501162847487E-242", "var_name": "SMALL_P_VALUE"}, {"original_string": "private DifferentialExpression subject;", "modifier": "private", "type": "DifferentialExpression", "declarator": "subject", "var_name": "subject"}], "file": "base/src/test/java/uk/ac/ebi/atlas/model/experiment/differential/DifferentialExpressionTest.java"}, "test_case": {"identifier": "testSmallPValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSmallPValue() {\n        DifferentialExpression expression = new DifferentialExpression(SMALL_P_VALUE, -1.0);\n\n        assertThat(expression.getPValue(), is(0D));\n    }", "signature": "void testSmallPValue()", "full_signature": "@Test public void testSmallPValue()", "class_method_signature": "DifferentialExpressionTest.testSmallPValue()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getPValue", "is"]}, "focal_class": {"identifier": "DifferentialExpression", "superclass": "", "interfaces": "implements Expression", "fields": [{"original_string": "private static final double SMALLEST_P_VALUE_ALLOWED = 1E-125;", "modifier": "private static final", "type": "double", "declarator": "SMALLEST_P_VALUE_ALLOWED = 1E-125", "var_name": "SMALLEST_P_VALUE_ALLOWED"}, {"original_string": "private double pValue;", "modifier": "private", "type": "double", "declarator": "pValue", "var_name": "pValue"}, {"original_string": "private double foldChange;", "modifier": "private", "type": "double", "declarator": "foldChange", "var_name": "foldChange"}], "methods": [{"identifier": "DifferentialExpression", "parameters": "(double pValue, double foldChange)", "modifiers": "public", "return": "", "signature": " DifferentialExpression(double pValue, double foldChange)", "full_signature": "public  DifferentialExpression(double pValue, double foldChange)", "class_method_signature": "DifferentialExpression.DifferentialExpression(double pValue, double foldChange)", "testcase": false, "constructor": true}, {"identifier": "getPValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPValue()", "full_signature": "public double getPValue()", "class_method_signature": "DifferentialExpression.getPValue()", "testcase": false, "constructor": false}, {"identifier": "getFoldChange", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getFoldChange()", "full_signature": "public double getFoldChange()", "class_method_signature": "DifferentialExpression.getFoldChange()", "testcase": false, "constructor": false}, {"identifier": "isRegulatedLike", "parameters": "(Regulation regulation)", "modifiers": "public", "return": "boolean", "signature": "boolean isRegulatedLike(Regulation regulation)", "full_signature": "public boolean isRegulatedLike(Regulation regulation)", "class_method_signature": "DifferentialExpression.isRegulatedLike(Regulation regulation)", "testcase": false, "constructor": false}, {"identifier": "isLikeUpRegulation", "parameters": "(Regulation regulation)", "modifiers": "private", "return": "boolean", "signature": "boolean isLikeUpRegulation(Regulation regulation)", "full_signature": "private boolean isLikeUpRegulation(Regulation regulation)", "class_method_signature": "DifferentialExpression.isLikeUpRegulation(Regulation regulation)", "testcase": false, "constructor": false}, {"identifier": "isLikeDownRegulation", "parameters": "(Regulation regulation)", "modifiers": "private", "return": "boolean", "signature": "boolean isLikeDownRegulation(Regulation regulation)", "full_signature": "private boolean isLikeDownRegulation(Regulation regulation)", "class_method_signature": "DifferentialExpression.isLikeDownRegulation(Regulation regulation)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object object)", "full_signature": "@Override public boolean equals(Object object)", "class_method_signature": "DifferentialExpression.equals(Object object)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DifferentialExpression.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getLevel", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLevel()", "full_signature": "@Override public double getLevel()", "class_method_signature": "DifferentialExpression.getLevel()", "testcase": false, "constructor": false}, {"identifier": "isOverExpressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOverExpressed()", "full_signature": "public boolean isOverExpressed()", "class_method_signature": "DifferentialExpression.isOverExpressed()", "testcase": false, "constructor": false}, {"identifier": "isUnderExpressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnderExpressed()", "full_signature": "public boolean isUnderExpressed()", "class_method_signature": "DifferentialExpression.isUnderExpressed()", "testcase": false, "constructor": false}, {"identifier": "getAbsoluteFoldChange", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAbsoluteFoldChange()", "full_signature": "public double getAbsoluteFoldChange()", "class_method_signature": "DifferentialExpression.getAbsoluteFoldChange()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson()", "full_signature": "@Override public JsonObject toJson()", "class_method_signature": "DifferentialExpression.toJson()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DifferentialExpression.toString()", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/model/experiment/differential/DifferentialExpression.java"}, "focal_method": {"identifier": "getPValue", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getPValue() {\n        return pValue;\n    }", "signature": "double getPValue()", "full_signature": "public double getPValue()", "class_method_signature": "DifferentialExpression.getPValue()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}