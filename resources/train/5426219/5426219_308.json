{"test_class": {"identifier": "LinkToGeneTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] ILLEGAL_CHARS = {\"%\", \"^\", \"|\", \"<\", \">\", \"`\", \"\\\"\", \"\\\\\", \"[\", \"]\", \"{\", \"}\"};", "modifier": "private static final", "type": "String[]", "declarator": "ILLEGAL_CHARS = {\"%\", \"^\", \"|\", \"<\", \">\", \"`\", \"\\\"\", \"\\\\\", \"[\", \"]\", \"{\", \"}\"}", "var_name": "ILLEGAL_CHARS"}, {"original_string": "private LinkToGene<DummyProfile> subject = new LinkToGene<>();", "modifier": "private", "type": "LinkToGene<DummyProfile>", "declarator": "subject = new LinkToGene<>()", "var_name": "subject"}], "file": "base/src/test/java/uk/ac/ebi/atlas/experimentpage/LinkToGeneTest.java"}, "test_case": {"identifier": "linksAtNoSpecificTab", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void linksAtNoSpecificTab() {\n        assertThat(subject.apply(new DummyProfile(\"geneId\", \"geneName\")).toString(), endsWith(\"geneId\"));\n    }", "signature": "void linksAtNoSpecificTab()", "full_signature": "@Test public void linksAtNoSpecificTab()", "class_method_signature": "LinkToGeneTest.linksAtNoSpecificTab()", "testcase": true, "constructor": false, "invocations": ["assertThat", "toString", "apply", "endsWith"]}, "focal_class": {"identifier": "LinkToGene", "superclass": "", "interfaces": "implements Function<P, URI>", "fields": [], "methods": [{"identifier": "apply", "parameters": "(P profile)", "modifiers": "@Override public", "return": "URI", "signature": "URI apply(P profile)", "full_signature": "@Override public URI apply(P profile)", "class_method_signature": "LinkToGene.apply(P profile)", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/experimentpage/LinkToGene.java"}, "focal_method": {"identifier": "apply", "parameters": "(P profile)", "modifiers": "@Override public", "return": "URI", "body": "@Override\n    public URI apply(P profile) {\n        try {\n            return new URI(\"genes/\" + profile.getId());\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "URI apply(P profile)", "full_signature": "@Override public URI apply(P profile)", "class_method_signature": "LinkToGene.apply(P profile)", "testcase": false, "constructor": false, "invocations": ["getId"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}