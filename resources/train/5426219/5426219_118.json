{"test_class": {"identifier": "GeneSetPropertyServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final OntologyTerm GO_TERM = OntologyTerm.create(\"GO:FOOBAR\", \"some GO term name\");", "modifier": "private static final", "type": "OntologyTerm", "declarator": "GO_TERM = OntologyTerm.create(\"GO:FOOBAR\", \"some GO term name\")", "var_name": "GO_TERM"}, {"original_string": "private static final OntologyTerm PO_TERM = OntologyTerm.create(\"PO:FOOBAR\", \"some PO term name\");", "modifier": "private static final", "type": "OntologyTerm", "declarator": "PO_TERM = OntologyTerm.create(\"PO:FOOBAR\", \"some PO term name\")", "var_name": "PO_TERM"}, {"original_string": "private static final OntologyTerm INTERPRO_TERM = OntologyTerm.create(\"IPR3117\", \"some InterPro term name\");", "modifier": "private static final", "type": "OntologyTerm", "declarator": "INTERPRO_TERM = OntologyTerm.create(\"IPR3117\", \"some InterPro term name\")", "var_name": "INTERPRO_TERM"}, {"original_string": "@Mock\n    private GoPoTrader goPoTermTraderMock;", "modifier": "@Mock\n    private", "type": "GoPoTrader", "declarator": "goPoTermTraderMock", "var_name": "goPoTermTraderMock"}, {"original_string": "@Mock\n    private InterProTrader interProTermTraderMock;", "modifier": "@Mock\n    private", "type": "InterProTrader", "declarator": "interProTermTraderMock", "var_name": "interProTermTraderMock"}, {"original_string": "@Mock\n    private ReactomeClient reactomeClientMock;", "modifier": "@Mock\n    private", "type": "ReactomeClient", "declarator": "reactomeClientMock", "var_name": "reactomeClientMock"}, {"original_string": "private GeneSetPropertyService subject;", "modifier": "private", "type": "GeneSetPropertyService", "declarator": "subject", "var_name": "subject"}], "file": "base/src/test/java/uk/ac/ebi/atlas/bioentity/geneset/GeneSetPropertyServiceTest.java"}, "test_case": {"identifier": "typeIsCaseInsensitive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void typeIsCaseInsensitive() {\n        assertThat(\n                subject.propertyValuesByType(\"r-hsa-0000000\", false),\n                hasEntry(is(BioentityPropertyName.PATHWAYID), isA(Set.class)));\n        assertThat(\n                subject.propertyValuesByType(\"go:0000000\", false),\n                hasEntry(is(BioentityPropertyName.GO), isA(Set.class)));\n        assertThat(\n                subject.propertyValuesByType(\"po:0000000\", false),\n                hasEntry(is(BioentityPropertyName.PO), isA(Set.class)));\n        assertThat(\n                subject.propertyValuesByType(\"ipr0000000\", false),\n                hasEntry(is(BioentityPropertyName.INTERPRO), isA(Set.class)));\n    }", "signature": "void typeIsCaseInsensitive()", "full_signature": "@Test public void typeIsCaseInsensitive()", "class_method_signature": "GeneSetPropertyServiceTest.typeIsCaseInsensitive()", "testcase": true, "constructor": false, "invocations": ["assertThat", "propertyValuesByType", "hasEntry", "is", "isA", "assertThat", "propertyValuesByType", "hasEntry", "is", "isA", "assertThat", "propertyValuesByType", "hasEntry", "is", "isA", "assertThat", "propertyValuesByType", "hasEntry", "is", "isA"]}, "focal_class": {"identifier": "GeneSetPropertyService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final GoPoTrader goPoTermTrader;", "modifier": "private final", "type": "GoPoTrader", "declarator": "goPoTermTrader", "var_name": "goPoTermTrader"}, {"original_string": "private final InterProTrader interProTermTrader;", "modifier": "private final", "type": "InterProTrader", "declarator": "interProTermTrader", "var_name": "interProTermTrader"}, {"original_string": "private final ReactomeClient reactomeClient;", "modifier": "private final", "type": "ReactomeClient", "declarator": "reactomeClient", "var_name": "reactomeClient"}, {"original_string": "public static final List<BioentityPropertyName> ALL =\n            ImmutableList.of(PATHWAYID, GO, PO, INTERPRO);", "modifier": "public static final", "type": "List<BioentityPropertyName>", "declarator": "ALL =\n            ImmutableList.of(PATHWAYID, GO, PO, INTERPRO)", "var_name": "ALL"}], "methods": [{"identifier": "GeneSetPropertyService", "parameters": "(GoPoTrader goPoTermTrader,\n                                  InterProTrader interProTermTrader,\n                                  ReactomeClient reactomeClient)", "modifiers": "@Inject public", "return": "", "signature": " GeneSetPropertyService(GoPoTrader goPoTermTrader,\n                                  InterProTrader interProTermTrader,\n                                  ReactomeClient reactomeClient)", "full_signature": "@Inject public  GeneSetPropertyService(GoPoTrader goPoTermTrader,\n                                  InterProTrader interProTermTrader,\n                                  ReactomeClient reactomeClient)", "class_method_signature": "GeneSetPropertyService.GeneSetPropertyService(GoPoTrader goPoTermTrader,\n                                  InterProTrader interProTermTrader,\n                                  ReactomeClient reactomeClient)", "testcase": false, "constructor": true}, {"identifier": "propertyValuesByType", "parameters": "(String identifier, boolean isPlant)", "modifiers": "public", "return": "Map<BioentityPropertyName, Set<String>>", "signature": "Map<BioentityPropertyName, Set<String>> propertyValuesByType(String identifier, boolean isPlant)", "full_signature": "public Map<BioentityPropertyName, Set<String>> propertyValuesByType(String identifier, boolean isPlant)", "class_method_signature": "GeneSetPropertyService.propertyValuesByType(String identifier, boolean isPlant)", "testcase": false, "constructor": false}, {"identifier": "propertyValuesByType", "parameters": "(BioentityPropertyName which,\n                                                                         String identifier, String value)", "modifiers": "private", "return": "Map<BioentityPropertyName, Set<String>>", "signature": "Map<BioentityPropertyName, Set<String>> propertyValuesByType(BioentityPropertyName which,\n                                                                         String identifier, String value)", "full_signature": "private Map<BioentityPropertyName, Set<String>> propertyValuesByType(BioentityPropertyName which,\n                                                                         String identifier, String value)", "class_method_signature": "GeneSetPropertyService.propertyValuesByType(BioentityPropertyName which,\n                                                                         String identifier, String value)", "testcase": false, "constructor": false}], "file": "base/src/main/java/uk/ac/ebi/atlas/bioentity/geneset/GeneSetPropertyService.java"}, "focal_method": {"identifier": "propertyValuesByType", "parameters": "(String identifier, boolean isPlant)", "modifiers": "public", "return": "Map<BioentityPropertyName, Set<String>>", "body": "public Map<BioentityPropertyName, Set<String>> propertyValuesByType(String identifier, boolean isPlant) {\n        identifier = identifier.toUpperCase();\n\n        if (GeneSetUtil.matchesReactomeID(identifier)) {\n            if (isPlant) {\n                return propertyValuesByType(\n                        PATHWAYID, identifier, reactomeClient.getPlantPathwayName(identifier).orElse(\"\"));\n            } else {\n                return propertyValuesByType(\n                        PATHWAYID, identifier, reactomeClient.getPathwayName(identifier).orElse(\"\"));\n            }\n        } else if (GeneSetUtil.matchesGeneOntologyAccession(identifier)) {\n            return propertyValuesByType(\n                    GO, identifier, goPoTermTrader.get(identifier).map(OntologyTerm::name).orElse(\"\"));\n        } else if (GeneSetUtil.matchesPlantOntologyAccession(identifier)) {\n            return propertyValuesByType(\n                    PO, identifier, goPoTermTrader.get(identifier).map(OntologyTerm::name).orElse(\"\"));\n        } else if (GeneSetUtil.matchesInterProAccession(identifier)) {\n            return propertyValuesByType(\n                    INTERPRO, identifier, interProTermTrader.get(identifier).map(OntologyTerm::name).orElse(\"\"));\n        } else {\n            return ImmutableMap.of();\n        }\n    }", "signature": "Map<BioentityPropertyName, Set<String>> propertyValuesByType(String identifier, boolean isPlant)", "full_signature": "public Map<BioentityPropertyName, Set<String>> propertyValuesByType(String identifier, boolean isPlant)", "class_method_signature": "GeneSetPropertyService.propertyValuesByType(String identifier, boolean isPlant)", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "matchesReactomeID", "propertyValuesByType", "orElse", "getPlantPathwayName", "propertyValuesByType", "orElse", "getPathwayName", "matchesGeneOntologyAccession", "propertyValuesByType", "orElse", "map", "get", "matchesPlantOntologyAccession", "propertyValuesByType", "orElse", "map", "get", "matchesInterProAccession", "propertyValuesByType", "orElse", "map", "get", "of"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}