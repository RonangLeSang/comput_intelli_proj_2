{"test_class": {"identifier": "ScxaExperimentDtoResultSetExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ResultSet mockResultSet;", "modifier": "@Mock\n    private", "type": "ResultSet", "declarator": "mockResultSet", "var_name": "mockResultSet"}, {"original_string": "private Timestamp currentTime;", "modifier": "private", "type": "Timestamp", "declarator": "currentTime", "var_name": "currentTime"}, {"original_string": "private ScxaExperimentDtoResultSetExtractor subject;", "modifier": "private", "type": "ScxaExperimentDtoResultSetExtractor", "declarator": "subject", "var_name": "subject"}], "file": "sc/src/test/java/uk/ac/ebi/atlas/experimentimport/ScxaExperimentDtoResultSetExtractorTest.java"}, "test_case": {"identifier": "createsExperimentDTOWithNullFields", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void createsExperimentDTOWithNullFields() throws SQLException {\n        String experimentAccession = RandomDataTestUtils.generateRandomExperimentAccession();\n        createMockResultSet(ExperimentType.SINGLE_CELL_RNASEQ_MRNA_BASELINE,\n                \"Homo sapiens\",\n                \"\",\n                false,\n                currentTime,\n                \"\",\n                null,\n                null);\n\n        ExperimentDTO result = subject.createExperimentDTO(mockResultSet, experimentAccession);\n\n        assertThat(result.getPubmedIds()).isEmpty();\n        assertThat(result.getDois()).isEmpty();\n    }", "signature": "void createsExperimentDTOWithNullFields()", "full_signature": "@Test void createsExperimentDTOWithNullFields()", "class_method_signature": "ScxaExperimentDtoResultSetExtractorTest.createsExperimentDTOWithNullFields()", "testcase": true, "constructor": false, "invocations": ["generateRandomExperimentAccession", "createMockResultSet", "createExperimentDTO", "isEmpty", "assertThat", "getPubmedIds", "isEmpty", "assertThat", "getDois"]}, "focal_class": {"identifier": "ScxaExperimentDtoResultSetExtractor", "superclass": "extends ExperimentDTOResultSetExtractor", "interfaces": "", "fields": [], "methods": [{"identifier": "createExperimentDTO", "parameters": "(ResultSet resultSet, String experimentAccession)", "modifiers": "@Override protected", "return": "ExperimentDTO", "signature": "ExperimentDTO createExperimentDTO(ResultSet resultSet, String experimentAccession)", "full_signature": "@Override protected ExperimentDTO createExperimentDTO(ResultSet resultSet, String experimentAccession)", "class_method_signature": "ScxaExperimentDtoResultSetExtractor.createExperimentDTO(ResultSet resultSet, String experimentAccession)", "testcase": false, "constructor": false}], "file": "sc/src/main/java/uk/ac/ebi/atlas/experimentimport/ScxaExperimentDtoResultSetExtractor.java"}, "focal_method": {"identifier": "createExperimentDTO", "parameters": "(ResultSet resultSet, String experimentAccession)", "modifiers": "@Override protected", "return": "ExperimentDTO", "body": "@Override\n    protected ExperimentDTO createExperimentDTO(ResultSet resultSet, String experimentAccession) throws SQLException {\n        ExperimentType experimentType = ExperimentType.valueOf(resultSet.getString(\"type\"));\n        String species = resultSet.getString(\"species\");\n        Date lastUpdate = resultSet.getTimestamp(\"last_update\");\n        boolean isPrivate = resultSet.getBoolean(\"private\");\n        String accessKeyUUID = resultSet.getString(\"access_key\");\n        String title = StringUtils.isEmpty(resultSet.getString(\"title\")) ? \"\" : resultSet.getString(\"title\");\n\n        String pubMedIdsString = resultSet.getString(\"pubmed_ids\");\n\n        Set<String> pubMedIds = resultSet.wasNull() || StringUtils.isBlank(pubMedIdsString)?\n                new HashSet<>() :\n                Sets.newHashSet(Splitter.on(\", \").split(pubMedIdsString));\n\n        String doisString = resultSet.getString(\"dois\");\n\n        Set<String> dois = resultSet.wasNull() || StringUtils.isBlank(doisString) ?\n                new HashSet<>() :\n                Sets.newHashSet(Splitter.on(\", \").split(doisString));\n\n        return new ExperimentDTO(\n                experimentAccession,\n                experimentType,\n                species,\n                pubMedIds,\n                dois,\n                title,\n                lastUpdate,\n                isPrivate,\n                accessKeyUUID);\n    }", "signature": "ExperimentDTO createExperimentDTO(ResultSet resultSet, String experimentAccession)", "full_signature": "@Override protected ExperimentDTO createExperimentDTO(ResultSet resultSet, String experimentAccession)", "class_method_signature": "ScxaExperimentDtoResultSetExtractor.createExperimentDTO(ResultSet resultSet, String experimentAccession)", "testcase": false, "constructor": false, "invocations": ["valueOf", "getString", "getString", "getTimestamp", "getBoolean", "getString", "isEmpty", "getString", "getString", "getString", "wasNull", "isBlank", "newHashSet", "split", "on", "getString", "wasNull", "isBlank", "newHashSet", "split", "on"]}, "repository": {"repo_id": 5426219, "url": "https://github.com/ebi-gene-expression-group/atlas", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 24, "size": 877296, "license": "licensed"}}