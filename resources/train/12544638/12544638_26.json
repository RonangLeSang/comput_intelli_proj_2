{"test_class": {"identifier": "ResourceCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameterized.Parameter\n    public String extension;", "modifier": "@Parameterized.Parameter\n    public", "type": "String", "declarator": "extension", "var_name": "extension"}, {"original_string": "@Rule public TemporaryFolder _folder = new TemporaryFolder();", "modifier": "@Rule public", "type": "TemporaryFolder", "declarator": "_folder = new TemporaryFolder()", "var_name": "_folder"}, {"original_string": "private File _fileToCache;", "modifier": "private", "type": "File", "declarator": "_fileToCache", "var_name": "_fileToCache"}, {"original_string": "private ResourceCache _cache;", "modifier": "private", "type": "ResourceCache", "declarator": "_cache", "var_name": "_cache"}, {"original_string": "private static final long YESTERDAY = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1);", "modifier": "private static final", "type": "long", "declarator": "YESTERDAY = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1)", "var_name": "YESTERDAY"}], "file": "core/src/test/java/com/threerings/getdown/cache/ResourceCacheTest.java"}, "test_case": {"identifier": "shouldRememberWhenFileWasRequested", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldRememberWhenFileWasRequested () throws Exception\n    {\n        File cachedFile = cacheFile();\n        String name = cachedFile.getName() + ResourceCache.LAST_ACCESSED_FILE_SUFFIX;\n        File lastAccessedFile = new File(cachedFile.getParentFile(), name);\n        lastAccessedFile.setLastModified(YESTERDAY);\n        long lastAccessed = lastAccessedFile.lastModified();\n        // caching it another time\n        cacheFile();\n        assertTrue(lastAccessedFile.lastModified() > lastAccessed);\n    }", "signature": "void shouldRememberWhenFileWasRequested()", "full_signature": "@Test public void shouldRememberWhenFileWasRequested()", "class_method_signature": "ResourceCacheTest.shouldRememberWhenFileWasRequested()", "testcase": true, "constructor": false, "invocations": ["cacheFile", "getName", "getParentFile", "setLastModified", "lastModified", "cacheFile", "assertTrue", "lastModified"]}, "focal_class": {"identifier": "ResourceCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File _cacheDir;", "modifier": "private final", "type": "File", "declarator": "_cacheDir", "var_name": "_cacheDir"}, {"original_string": "static final String LAST_ACCESSED_FILE_SUFFIX = \".lastAccessed\";", "modifier": "static final", "type": "String", "declarator": "LAST_ACCESSED_FILE_SUFFIX = \".lastAccessed\"", "var_name": "LAST_ACCESSED_FILE_SUFFIX"}], "methods": [{"identifier": "ResourceCache", "parameters": "(File _cacheDir)", "modifiers": "public", "return": "", "signature": " ResourceCache(File _cacheDir)", "full_signature": "public  ResourceCache(File _cacheDir)", "class_method_signature": "ResourceCache.ResourceCache(File _cacheDir)", "testcase": false, "constructor": true}, {"identifier": "createDirectoryIfNecessary", "parameters": "(File dir)", "modifiers": "private", "return": "void", "signature": "void createDirectoryIfNecessary(File dir)", "full_signature": "private void createDirectoryIfNecessary(File dir)", "class_method_signature": "ResourceCache.createDirectoryIfNecessary(File dir)", "testcase": false, "constructor": false}, {"identifier": "cacheFile", "parameters": "(File fileToCache, String cacheSubdir, String digest)", "modifiers": "public", "return": "File", "signature": "File cacheFile(File fileToCache, String cacheSubdir, String digest)", "full_signature": "public File cacheFile(File fileToCache, String cacheSubdir, String digest)", "class_method_signature": "ResourceCache.cacheFile(File fileToCache, String cacheSubdir, String digest)", "testcase": false, "constructor": false}, {"identifier": "createNewFile", "parameters": "(File fileToCreate)", "modifiers": "private", "return": "void", "signature": "void createNewFile(File fileToCreate)", "full_signature": "private void createNewFile(File fileToCreate)", "class_method_signature": "ResourceCache.createNewFile(File fileToCreate)", "testcase": false, "constructor": false}, {"identifier": "getFileSuffix", "parameters": "(File fileToCache)", "modifiers": "private", "return": "String", "signature": "String getFileSuffix(File fileToCache)", "full_signature": "private String getFileSuffix(File fileToCache)", "class_method_signature": "ResourceCache.getFileSuffix(File fileToCache)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/threerings/getdown/cache/ResourceCache.java"}, "focal_method": {"identifier": "cacheFile", "parameters": "(File fileToCache, String cacheSubdir, String digest)", "modifiers": "public", "return": "File", "body": "public File cacheFile (File fileToCache, String cacheSubdir, String digest) throws IOException\n    {\n        File cacheLocation = new File(_cacheDir, cacheSubdir);\n        createDirectoryIfNecessary(cacheLocation);\n\n        File cachedFile = new File(cacheLocation, digest + getFileSuffix(fileToCache));\n        File lastAccessedFile = new File(\n                cacheLocation, cachedFile.getName() + LAST_ACCESSED_FILE_SUFFIX);\n\n        if (!cachedFile.exists()) {\n            createNewFile(cachedFile);\n            FileUtil.copy(fileToCache, cachedFile);\n        }\n\n        if (lastAccessedFile.exists()) {\n            lastAccessedFile.setLastModified(System.currentTimeMillis());\n        } else {\n            createNewFile(lastAccessedFile);\n        }\n\n        return cachedFile;\n    }", "signature": "File cacheFile(File fileToCache, String cacheSubdir, String digest)", "full_signature": "public File cacheFile(File fileToCache, String cacheSubdir, String digest)", "class_method_signature": "ResourceCache.cacheFile(File fileToCache, String cacheSubdir, String digest)", "testcase": false, "constructor": false, "invocations": ["createDirectoryIfNecessary", "getFileSuffix", "getName", "exists", "createNewFile", "copy", "exists", "setLastModified", "currentTimeMillis", "createNewFile"]}, "repository": {"repo_id": 12544638, "url": "https://github.com/threerings/getdown", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 389, "size": 3100, "license": "licensed"}}