{"test_class": {"identifier": "EnvConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String CWD = System.getProperty(\"user.dir\");", "modifier": "static", "type": "String", "declarator": "CWD = System.getProperty(\"user.dir\")", "var_name": "CWD"}, {"original_string": "static String TESTID = \"testid\";", "modifier": "static", "type": "String", "declarator": "TESTID = \"testid\"", "var_name": "TESTID"}, {"original_string": "static String TESTBASE = \"https://test.com/test\";", "modifier": "static", "type": "String", "declarator": "TESTBASE = \"https://test.com/test\"", "var_name": "TESTBASE"}], "file": "core/src/test/java/com/threerings/getdown/data/EnvConfigTest.java"}, "test_case": {"identifier": "testArgvDirId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testArgvDirId () {\n        List<EnvConfig.Note> notes = new ArrayList<>();\n        String[] args = { CWD, TESTID };\n        EnvConfig cfg = EnvConfig.create(args, notes);\n        // debugNotes(notes);\n        checkNoNotes(notes);\n        checkDir(cfg);\n        checkAppId(cfg, TESTID);\n        checkNoAppBase(cfg);\n        checkNoAppArgs(cfg);\n    }", "signature": "void testArgvDirId()", "full_signature": "@Test public void testArgvDirId()", "class_method_signature": "EnvConfigTest.testArgvDirId()", "testcase": true, "constructor": false, "invocations": ["create", "checkNoNotes", "checkDir", "checkAppId", "checkNoAppBase", "checkNoAppArgs"]}, "focal_class": {"identifier": "EnvConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final File appDir;", "modifier": "public final", "type": "File", "declarator": "appDir", "var_name": "appDir"}, {"original_string": "public final String appId;", "modifier": "public final", "type": "String", "declarator": "appId", "var_name": "appId"}, {"original_string": "public final String appBase;", "modifier": "public final", "type": "String", "declarator": "appBase", "var_name": "appBase"}, {"original_string": "public final List<Certificate> certs;", "modifier": "public final", "type": "List<Certificate>", "declarator": "certs", "var_name": "certs"}, {"original_string": "public final List<String> appArgs;", "modifier": "public final", "type": "List<String>", "declarator": "appArgs", "var_name": "appArgs"}, {"original_string": "private static final String USER_HOME_KEY = \"${user.home}\";", "modifier": "private static final", "type": "String", "declarator": "USER_HOME_KEY = \"${user.home}\"", "var_name": "USER_HOME_KEY"}], "methods": [{"identifier": "create", "parameters": "(String[] argv, List<Note> notes)", "modifiers": "public static", "return": "EnvConfig", "signature": "EnvConfig create(String[] argv, List<Note> notes)", "full_signature": "public static EnvConfig create(String[] argv, List<Note> notes)", "class_method_signature": "EnvConfig.create(String[] argv, List<Note> notes)", "testcase": false, "constructor": false}, {"identifier": "EnvConfig", "parameters": "(File appDir)", "modifiers": "public", "return": "", "signature": " EnvConfig(File appDir)", "full_signature": "public  EnvConfig(File appDir)", "class_method_signature": "EnvConfig.EnvConfig(File appDir)", "testcase": false, "constructor": true}, {"identifier": "EnvConfig", "parameters": "(File appDir, String appId, String appBase, List<Certificate> certs,\n                       List<String> appArgs)", "modifiers": "private", "return": "", "signature": " EnvConfig(File appDir, String appId, String appBase, List<Certificate> certs,\n                       List<String> appArgs)", "full_signature": "private  EnvConfig(File appDir, String appId, String appBase, List<Certificate> certs,\n                       List<String> appArgs)", "class_method_signature": "EnvConfig.EnvConfig(File appDir, String appId, String appBase, List<Certificate> certs,\n                       List<String> appArgs)", "testcase": false, "constructor": true}], "file": "core/src/main/java/com/threerings/getdown/data/EnvConfig.java"}, "focal_method": {"identifier": "create", "parameters": "(String[] argv, List<Note> notes)", "modifiers": "public static", "return": "EnvConfig", "body": "public static EnvConfig create (String[] argv, List<Note> notes) {\n        String appDir = null, appDirProv = null;\n        String appId = null, appIdProv = null;\n        String appBase = null, appBaseProv = null;\n\n        // start with bootstrap.properties config, if avaialble\n        try {\n            ResourceBundle bundle = ResourceBundle.getBundle(\"bootstrap\");\n            if (bundle.containsKey(\"appdir\")) {\n                appDir = bundle.getString(\"appdir\");\n                appDir = appDir.replace(USER_HOME_KEY, System.getProperty(\"user.home\"));\n                appDirProv = \"bootstrap.properties\";\n            }\n            if (bundle.containsKey(\"appid\")) {\n                appId = bundle.getString(\"appid\");\n                appIdProv = \"bootstrap.properties\";\n            }\n            if (bundle.containsKey(\"appbase\")) {\n                appBase = bundle.getString(\"appbase\");\n                appBaseProv = \"bootstrap.properties\";\n            }\n            // if any system properties are specified (keys prefixed with sys.), set those up\n            for (String key : bundle.keySet()) {\n                if (key.startsWith(\"sys.\")) {\n                    String skey = key.substring(4);\n                    String svalue = bundle.getString(key);\n                    notes.add(Note.info(\"Setting system property from bundle: \" +\n                                        skey + \"='\" + svalue + \"'\"));\n                    System.setProperty(skey, svalue);\n                }\n            }\n\n        } catch (MissingResourceException e) {\n            // bootstrap.properties is optional; no need for a warning\n        }\n\n        // next seek config from system properties\n        String spropsAppDir = SysProps.appDir();\n        if (!StringUtil.isBlank(spropsAppDir)) {\n            if (appDir == null) {\n                appDir = spropsAppDir;\n                appDirProv = \"system property\";\n            } else {\n                notes.add(Note.warn(\"Ignoring 'appdir' system property, have appdir via '\" +\n                                    appDirProv + \"'\"));\n            }\n        }\n        String spropsAppId = SysProps.appId();\n        if (!StringUtil.isBlank(spropsAppId)) {\n            if (appId == null) {\n                appId = spropsAppId;\n                appIdProv = \"system property\";\n            } else {\n                notes.add(Note.warn(\"Ignoring 'appid' system property, have appid via '\" +\n                                    appIdProv + \"'\"));\n            }\n        }\n        String spropsAppBase = SysProps.appBase();\n        if (!StringUtil.isBlank(spropsAppBase)) {\n            if (appBase == null) {\n                appBase = spropsAppBase;\n                appBaseProv = \"system property\";\n            } else {\n                notes.add(Note.warn(\"Ignoring 'appbase' system property, have appbase via '\" +\n                                    appBaseProv + \"'\"));\n            }\n        }\n\n        // finally obtain config from command line arguments\n        String argvAppDir = argv.length > 0 ? argv[0] : null;\n        if (!StringUtil.isBlank(argvAppDir)) {\n            if (appDir == null) {\n                appDir = argvAppDir;\n                appDirProv = \"command line\";\n            } else {\n                notes.add(Note.warn(\"Ignoring 'appdir' command line arg, have appdir via '\" +\n                                    appDirProv + \"'\"));\n            }\n        }\n        String argvAppId = argv.length > 1 ? argv[1] : null;\n        if (!StringUtil.isBlank(argvAppId)) {\n            if (appId == null) {\n                appId = argvAppId;\n                appIdProv = \"command line\";\n            } else {\n                notes.add(Note.warn(\"Ignoring 'appid' command line arg, have appid via '\" +\n                                    appIdProv + \"'\"));\n            }\n        }\n\n        // if no appdir was provided, default to the current working directory\n        if (appDir == null) {\n            appDir = System.getProperty(\"user.dir\");\n            appDirProv = \"default (cwd)\";\n        }\n\n        notes.add(Note.info(\"Using appdir from \" + appDirProv + \": \" + appDir));\n        if (appId != null) notes.add(Note.info(\"Using appid from \" + appIdProv + \": \" + appId));\n        if (appBase != null) notes.add(\n            Note.info(\"Using appbase from \" + appBaseProv + \": \" + appBase));\n\n        // ensure that the appdir refers to a directory that exists\n        File appDirFile = new File(appDir);\n        if (!appDirFile.exists()) {\n            // if we have a bootstrap URL then we auto-create the app dir; this enables an\n            // installer to simply place a getdown.jar file somewhere and create an OS shortcut\n            // that runs getdown with an appdir and appbase specified, and have getdown create the\n            // appdir and download the app into it\n            if (!StringUtil.isBlank(appBase)) {\n                if (appDirFile.mkdirs()) {\n                    notes.add(Note.info(\"Auto-created app directory '\" + appDir + \"'\"));\n                } else {\n                    notes.add(Note.warn(\"Unable to auto-create app dir: '\" + appDir + \"'\"));\n                }\n            } else {\n                notes.add(Note.error(\"Invalid appdir '\" + appDir + \"': directory does not exist\"));\n                return null;\n            }\n        } else if (!appDirFile.isDirectory()) {\n            notes.add(Note.error(\"Invalid appdir '\" + appDir + \"': refers to non-directory\"));\n            return null;\n        }\n\n        // pass along anything after the first two args as extra app args\n        List<String> appArgs = argv.length > 2 ?\n            Arrays.asList(argv).subList(2, argv.length) :\n            Collections.<String>emptyList();\n\n        // load X.509 certificate if it exists\n        File crtFile = new File(appDirFile, Digest.digestFile(Digest.VERSION) + \".crt\");\n        List<Certificate> certs = new ArrayList<>();\n        if (crtFile.exists()) {\n            try (FileInputStream fis = new FileInputStream(crtFile)) {\n                X509Certificate certificate = (X509Certificate)\n                    CertificateFactory.getInstance(\"X.509\").generateCertificate(fis);\n                certs.add(certificate);\n            } catch (Exception e) {\n                notes.add(Note.error(\"Certificate error: \" + e.getMessage()));\n            }\n        }\n\n        return new EnvConfig(appDirFile, appId, appBase, certs, appArgs);\n    }", "signature": "EnvConfig create(String[] argv, List<Note> notes)", "full_signature": "public static EnvConfig create(String[] argv, List<Note> notes)", "class_method_signature": "EnvConfig.create(String[] argv, List<Note> notes)", "testcase": false, "constructor": false, "invocations": ["getBundle", "containsKey", "getString", "replace", "getProperty", "containsKey", "getString", "containsKey", "getString", "keySet", "startsWith", "substring", "getString", "add", "info", "setProperty", "appDir", "isBlank", "add", "warn", "appId", "isBlank", "add", "warn", "appBase", "isBlank", "add", "warn", "isBlank", "add", "warn", "isBlank", "add", "warn", "getProperty", "add", "info", "add", "info", "add", "info", "exists", "isBlank", "mkdirs", "add", "info", "add", "warn", "add", "error", "isDirectory", "add", "error", "subList", "asList", "emptyList", "digestFile", "exists", "generateCertificate", "getInstance", "add", "add", "error", "getMessage"]}, "repository": {"repo_id": 12544638, "url": "https://github.com/threerings/getdown", "language": "Java", "is_fork": false, "fork_count": 114, "stargazer_count": 389, "size": 3100, "license": "licensed"}}