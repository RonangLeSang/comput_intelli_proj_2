{"test_class": {"identifier": "UserNetworkProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "RandomDataCacheBuilder randomCacheBuilder;", "modifier": "", "type": "RandomDataCacheBuilder", "declarator": "randomCacheBuilder", "var_name": "randomCacheBuilder"}, {"original_string": "RandomDataCacheConfig config = RandomDataCacheConfig.getStandardConfig2();", "modifier": "", "type": "RandomDataCacheConfig", "declarator": "config = RandomDataCacheConfig.getStandardConfig2()", "var_name": "config"}], "file": "engine/src/test/java/org/genemania/engine/actions/support/UserNetworkProcessorTest.java"}, "test_case": {"identifier": "testConvertNetwork", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertNetwork() throws Exception {\n        System.out.println(\"convertNetwork\");\n        \n//        INetworkSymMatrixProvider provider = new CacheNetworkSymMatrixProvider(1, randomCacheBuilder.getCache());\n        UserNetworkProcessor instance = new UserNetworkProcessor(randomCacheBuilder.getCache(), randomCacheBuilder.getCacheDir());\n\n        // populate a request\n        UploadNetworkEngineRequestDto request = new UploadNetworkEngineRequestDto();\n        request.setLayout(DataLayout.PROFILE);\n        request.setMethod(NetworkProcessingMethod.PEARSON);\n        request.setNamespace(\"user1\");\n        request.setProgressReporter(NullProgressReporter.instance());\n        request.setOrganismId(1);\n        request.setNetworkId(-1);\n        request.setSparsification(50);\n        \n        String data = \"id\\tf1\\tf2\\tf3\\n10000\\t1.5\\t3.0\\t4.0\\n10001\\t2.0\\t2.2\\t2.1\\n\";\n        request.setData(new StringReader(data));\n\n        // process & validate\n        SymMatrix result = instance.convertNetwork(request);\n        assertNotNull(result);\n\n    }", "signature": "void testConvertNetwork()", "full_signature": "@Test public void testConvertNetwork()", "class_method_signature": "UserNetworkProcessorTest.testConvertNetwork()", "testcase": true, "constructor": false, "invocations": ["println", "getCache", "getCacheDir", "setLayout", "setMethod", "setNamespace", "setProgressReporter", "instance", "setOrganismId", "setNetworkId", "setSparsification", "setData", "convertNetwork", "assertNotNull"]}, "focal_class": {"identifier": "UserNetworkProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(UserNetworkProcessor.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(UserNetworkProcessor.class)", "var_name": "logger"}, {"original_string": "private DataCache cache;", "modifier": "private", "type": "DataCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private String tempDirname;", "modifier": "private", "type": "String", "declarator": "tempDirname", "var_name": "tempDirname"}], "methods": [{"identifier": "UserNetworkProcessor", "parameters": "(DataCache cache, String tempDirname)", "modifiers": "public", "return": "", "signature": " UserNetworkProcessor(DataCache cache, String tempDirname)", "full_signature": "public  UserNetworkProcessor(DataCache cache, String tempDirname)", "class_method_signature": "UserNetworkProcessor.UserNetworkProcessor(DataCache cache, String tempDirname)", "testcase": false, "constructor": true}, {"identifier": "checkRequest", "parameters": "(UploadNetworkEngineRequestDto request)", "modifiers": "private", "return": "void", "signature": "void checkRequest(UploadNetworkEngineRequestDto request)", "full_signature": "private void checkRequest(UploadNetworkEngineRequestDto request)", "class_method_signature": "UserNetworkProcessor.checkRequest(UploadNetworkEngineRequestDto request)", "testcase": false, "constructor": false}, {"identifier": "logRequestParams", "parameters": "(UploadNetworkEngineRequestDto request)", "modifiers": "private", "return": "void", "signature": "void logRequestParams(UploadNetworkEngineRequestDto request)", "full_signature": "private void logRequestParams(UploadNetworkEngineRequestDto request)", "class_method_signature": "UserNetworkProcessor.logRequestParams(UploadNetworkEngineRequestDto request)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(UploadNetworkEngineRequestDto request)", "modifiers": "public", "return": "UploadNetworkEngineResponseDto", "signature": "UploadNetworkEngineResponseDto process(UploadNetworkEngineRequestDto request)", "full_signature": "public UploadNetworkEngineResponseDto process(UploadNetworkEngineRequestDto request)", "class_method_signature": "UserNetworkProcessor.process(UploadNetworkEngineRequestDto request)", "testcase": false, "constructor": false}, {"identifier": "convertNetwork", "parameters": "(UploadNetworkEngineRequestDto request)", "modifiers": "", "return": "SymMatrix", "signature": "SymMatrix convertNetwork(UploadNetworkEngineRequestDto request)", "full_signature": " SymMatrix convertNetwork(UploadNetworkEngineRequestDto request)", "class_method_signature": "UserNetworkProcessor.convertNetwork(UploadNetworkEngineRequestDto request)", "testcase": false, "constructor": false}, {"identifier": "getTempFile", "parameters": "(String namespace, int organismId, int networkId)", "modifiers": "private", "return": "File", "signature": "File getTempFile(String namespace, int organismId, int networkId)", "full_signature": "private File getTempFile(String namespace, int organismId, int networkId)", "class_method_signature": "UserNetworkProcessor.getTempFile(String namespace, int organismId, int networkId)", "testcase": false, "constructor": false}, {"identifier": "getTempDirname", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getTempDirname()", "full_signature": "private String getTempDirname()", "class_method_signature": "UserNetworkProcessor.getTempDirname()", "testcase": false, "constructor": false}, {"identifier": "getUserTempDirname", "parameters": "(String namespace)", "modifiers": "private", "return": "String", "signature": "String getUserTempDirname(String namespace)", "full_signature": "private String getUserTempDirname(String namespace)", "class_method_signature": "UserNetworkProcessor.getUserTempDirname(String namespace)", "testcase": false, "constructor": false}, {"identifier": "convertToMatrixRepresentation", "parameters": "(long organismId, long networkId, String namespace, ProgressReporter progress, boolean isBinary)", "modifiers": "", "return": "SymMatrix", "signature": "SymMatrix convertToMatrixRepresentation(long organismId, long networkId, String namespace, ProgressReporter progress, boolean isBinary)", "full_signature": " SymMatrix convertToMatrixRepresentation(long organismId, long networkId, String namespace, ProgressReporter progress, boolean isBinary)", "class_method_signature": "UserNetworkProcessor.convertToMatrixRepresentation(long organismId, long networkId, String namespace, ProgressReporter progress, boolean isBinary)", "testcase": false, "constructor": false}, {"identifier": "saveNetwork", "parameters": "(UploadNetworkEngineRequestDto request, SymMatrix network)", "modifiers": "", "return": "void", "signature": "void saveNetwork(UploadNetworkEngineRequestDto request, SymMatrix network)", "full_signature": " void saveNetwork(UploadNetworkEngineRequestDto request, SymMatrix network)", "class_method_signature": "UserNetworkProcessor.saveNetwork(UploadNetworkEngineRequestDto request, SymMatrix network)", "testcase": false, "constructor": false}, {"identifier": "precompute", "parameters": "(UploadNetworkEngineRequestDto request, SymMatrix network, ProgressReporter progress)", "modifiers": "", "return": "void", "signature": "void precompute(UploadNetworkEngineRequestDto request, SymMatrix network, ProgressReporter progress)", "full_signature": " void precompute(UploadNetworkEngineRequestDto request, SymMatrix network, ProgressReporter progress)", "class_method_signature": "UserNetworkProcessor.precompute(UploadNetworkEngineRequestDto request, SymMatrix network, ProgressReporter progress)", "testcase": false, "constructor": false}, {"identifier": "computeStats", "parameters": "(SymMatrix network)", "modifiers": "static", "return": "UploadNetworkEngineResponseDto", "signature": "UploadNetworkEngineResponseDto computeStats(SymMatrix network)", "full_signature": "static UploadNetworkEngineResponseDto computeStats(SymMatrix network)", "class_method_signature": "UserNetworkProcessor.computeStats(SymMatrix network)", "testcase": false, "constructor": false}, {"identifier": "makeIdMapping", "parameters": "(long organismId)", "modifiers": "", "return": "Reader", "signature": "Reader makeIdMapping(long organismId)", "full_signature": " Reader makeIdMapping(long organismId)", "class_method_signature": "UserNetworkProcessor.makeIdMapping(long organismId)", "testcase": false, "constructor": false}], "file": "engine/src/main/java/org/genemania/engine/actions/support/UserNetworkProcessor.java"}, "focal_method": {"identifier": "convertNetwork", "parameters": "(UploadNetworkEngineRequestDto request)", "modifiers": "", "return": "SymMatrix", "body": "SymMatrix convertNetwork(UploadNetworkEngineRequestDto request) throws ApplicationException {\n\n        SymMatrix matrix = null;\n        // handle profile data with pearson correlation\n        if (request.getMethod() == NetworkProcessingMethod.PEARSON && request.getLayout() == DataLayout.PROFILE) {\n            ProfileToNetworkDriver p2n = new ProfileToNetworkDriver();\n\n            try {\n                File tempFile = getTempFile(request.getNamespace(), (int)request.getOrganismId(), (int)request.getNetworkId());\n                //tempFile.deleteOnExit();\n\n                logger.debug(\"writing temp output to \" + tempFile);\n                Writer result = new BufferedWriter(new FileWriter(tempFile));\n\n                try {\n                    p2n.setSynReader(makeIdMapping((int) request.getOrganismId()));\n                    p2n.setNoHeader(true);\n                    p2n.setK(request.getSparsification());\n                    p2n.setCorrelationType(CorrelationType.PEARSON);\n                    p2n.setProfileType(\"CONTINUOUS\");\n\n                    // better to use a child progressreporter here instead?\n                    p2n.setProgressReporter(request.getProgressReporter());\n\n                    p2n.process(request.getData(), result);\n\n                }\n                finally {\n                    result.close();\n                }\n\n                matrix = convertToMatrixRepresentation(request.getOrganismId(), request.getNetworkId(), request.getNamespace(), request.getProgressReporter(), false);\n                \n            }\n            // wrap ioexeption in application exception, other application exceptions\n            // pass on through\n            catch (IOException e) {\n                throw new ApplicationException(\"Failed to convert profile to network\", e);\n            }\n\n            // TODO: proper resource cleanup (close file in finally)\n            \n        }\n        // handle a direct weighted network load\n        else if (request.getMethod() == NetworkProcessingMethod.DIRECT && request.getLayout() == DataLayout.WEIGHTED_NETWORK) {\n\n            try {\n                File tempFile = getTempFile(request.getNamespace(), (int)request.getOrganismId(), (int)request.getNetworkId());\n                logger.debug(\"writing temp output to \" + tempFile);\n                Writer result = new BufferedWriter(new FileWriter(tempFile));\n\n                try {\n                    char[] buf = new char[1024];\n                    Reader data = request.getData();\n                    int n;\n                    while ((n = data.read(buf)) > 0) {\n                        result.write(buf, 0, n);\n                    }\n                }\n                finally {\n                    result.close();\n                }\n\n                matrix = convertToMatrixRepresentation(request.getOrganismId(), request.getNetworkId(), request.getNamespace(), request.getProgressReporter(), false);\n            }\n            catch (Exception e) {\n                throw new ApplicationException(\"Failed to load direct network\", e);\n            }\n        }\n        // direct binary network load\n        else if (request.getMethod() == NetworkProcessingMethod.DIRECT && request.getLayout() == DataLayout.BINARY_NETWORK) {\n\n            try {\n                File tempFile = getTempFile(request.getNamespace(), (int)request.getOrganismId(), (int)request.getNetworkId());\n                logger.debug(\"writing temp output to \" + tempFile);\n                Writer result = new BufferedWriter(new FileWriter(tempFile));\n\n                try {\n                    char[] buf = new char[1024];\n                    Reader data = request.getData();\n                    int n;\n                    while ((n = data.read(buf)) > 0) {\n                        result.write(buf, 0, n);\n                    }\n                }\n                finally {\n                    result.close();\n                }\n\n                matrix = convertToMatrixRepresentation(request.getOrganismId(), request.getNetworkId(), request.getNamespace(), request.getProgressReporter(), true);\n            }\n            catch (Exception e) {\n                throw new ApplicationException(\"Failed to load binary network\", e);\n            }\n        }\n        else if (request.getMethod() == NetworkProcessingMethod.LOG_FREQUENCY && request.getLayout() == DataLayout.SPARSE_PROFILE) {\n            ProfileToNetworkDriver p2n = new ProfileToNetworkDriver();\n\n            try {\n                File tempFile = getTempFile(request.getNamespace(), (int)request.getOrganismId(), (int)request.getNetworkId());\n                //tempFile.deleteOnExit();\n\n                logger.debug(\"writing temp output to \" + tempFile);\n                Writer result = new BufferedWriter(new FileWriter(tempFile));\n\n                try {\n                    p2n.setSynReader(makeIdMapping((int) request.getOrganismId()));\n                    p2n.setNoHeader(true);\n                    p2n.setK(request.getSparsification());\n                    p2n.setCorrelationType(CorrelationType.PEARSON_BIN_LOG_NO_NORM);\n                    p2n.setProfileType(\"BINARY\");\n                    p2n.setKeepAllTies(true);\n                    p2n.setLimitTies(true);\n\n                    // better to use a child progressreporter here instead?\n                    p2n.setProgressReporter(request.getProgressReporter());\n\n                    p2n.process(request.getData(), result);\n\n                }\n                finally {\n                    result.close();\n                }\n\n                matrix = convertToMatrixRepresentation(request.getOrganismId(), request.getNetworkId(), request.getNamespace(), request.getProgressReporter(), false);\n\n            }\n            // wrap ioexeption in application exception, other application exceptions\n            // pass on through\n            catch (IOException e) {\n                throw new ApplicationException(\"Failed to convert profile to network\", e);\n            }\n\n        }\n        else if (request.getMethod() == NetworkProcessingMethod.LOG_FREQUENCY && request.getLayout() == DataLayout.BINARY_NETWORK) {\n            ProfileToNetworkDriver p2n = new ProfileToNetworkDriver();\n\n            try {\n                File tempFile = getTempFile(request.getNamespace(), (int)request.getOrganismId(), (int)request.getNetworkId());\n                //tempFile.deleteOnExit();\n\n                logger.debug(\"writing temp output to \" + tempFile);\n                Writer result = new BufferedWriter(new FileWriter(tempFile));\n\n                try {\n                    p2n.setSynReader(makeIdMapping((int) request.getOrganismId()));\n                    p2n.setNoHeader(true);\n                    p2n.setK(request.getSparsification());\n                    p2n.setCorrelationType(CorrelationType.PEARSON_BIN_LOG_NO_NORM);\n                    p2n.setProfileType(\"NETWORK\");\n                    p2n.setKeepAllTies(true);\n                    p2n.setLimitTies(true);\n\n                    // better to use a child progressreporter here instead?\n                    p2n.setProgressReporter(request.getProgressReporter());\n\n                    p2n.process(request.getData(), result);\n\n                }\n                finally {\n                    result.close();\n                }\n\n                matrix = convertToMatrixRepresentation(request.getOrganismId(), request.getNetworkId(), request.getNamespace(), request.getProgressReporter(), false);\n\n            }\n            // wrap ioexeption in application exception, other application exceptions\n            // pass on through\n            catch (IOException e) {\n                throw new ApplicationException(\"Failed to convert profile to network\", e);\n            }\n            \n        }\n        else {\n            throw new ApplicationException(\"unsupported processing method/data layout combination\"); // shouldn't actually get here due to request checking\n        }\n        \n        return matrix;\n    }", "signature": "SymMatrix convertNetwork(UploadNetworkEngineRequestDto request)", "full_signature": " SymMatrix convertNetwork(UploadNetworkEngineRequestDto request)", "class_method_signature": "UserNetworkProcessor.convertNetwork(UploadNetworkEngineRequestDto request)", "testcase": false, "constructor": false, "invocations": ["getMethod", "getLayout", "getTempFile", "getNamespace", "getOrganismId", "getNetworkId", "debug", "setSynReader", "makeIdMapping", "getOrganismId", "setNoHeader", "setK", "getSparsification", "setCorrelationType", "setProfileType", "setProgressReporter", "getProgressReporter", "process", "getData", "close", "convertToMatrixRepresentation", "getOrganismId", "getNetworkId", "getNamespace", "getProgressReporter", "getMethod", "getLayout", "getTempFile", "getNamespace", "getOrganismId", "getNetworkId", "debug", "getData", "read", "write", "close", "convertToMatrixRepresentation", "getOrganismId", "getNetworkId", "getNamespace", "getProgressReporter", "getMethod", "getLayout", "getTempFile", "getNamespace", "getOrganismId", "getNetworkId", "debug", "getData", "read", "write", "close", "convertToMatrixRepresentation", "getOrganismId", "getNetworkId", "getNamespace", "getProgressReporter", "getMethod", "getLayout", "getTempFile", "getNamespace", "getOrganismId", "getNetworkId", "debug", "setSynReader", "makeIdMapping", "getOrganismId", "setNoHeader", "setK", "getSparsification", "setCorrelationType", "setProfileType", "setKeepAllTies", "setLimitTies", "setProgressReporter", "getProgressReporter", "process", "getData", "close", "convertToMatrixRepresentation", "getOrganismId", "getNetworkId", "getNamespace", "getProgressReporter", "getMethod", "getLayout", "getTempFile", "getNamespace", "getOrganismId", "getNetworkId", "debug", "setSynReader", "makeIdMapping", "getOrganismId", "setNoHeader", "setK", "getSparsification", "setCorrelationType", "setProfileType", "setKeepAllTies", "setLimitTies", "setProgressReporter", "getProgressReporter", "process", "getData", "close", "convertToMatrixRepresentation", "getOrganismId", "getNetworkId", "getNamespace", "getProgressReporter"]}, "repository": {"repo_id": 12473833, "url": "https://github.com/GeneMANIA/genemania", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 34, "size": 44902, "license": "licensed"}}