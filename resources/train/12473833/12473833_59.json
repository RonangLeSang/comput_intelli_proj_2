{"test_class": {"identifier": "MatrixUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final double TEST_VAL = 5.64385619d;", "modifier": "static final", "type": "double", "declarator": "TEST_VAL = 5.64385619d", "var_name": "TEST_VAL"}, {"original_string": "static final int TEST_DATA_LEN = 24;", "modifier": "static final", "type": "int", "declarator": "TEST_DATA_LEN = 24", "var_name": "TEST_DATA_LEN"}, {"original_string": "static final double STATS_TOL = 1e-14;", "modifier": "static final", "type": "double", "declarator": "STATS_TOL = 1e-14", "var_name": "STATS_TOL"}], "file": "engine/src/test/java/org/genemania/engine/core/MatrixUtilsTest.java"}, "test_case": {"identifier": "testColumnMeanIgnoreMissingData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testColumnMeanIgnoreMissingData() {\n        Matrix m = new DenseMatrix(new double[][] {{1,Double.NaN, 3},{Double.NaN,4, 6},{5,6, 9}});\n        Vector counts = MatrixUtils.columnCountsIgnoreMissingData(m);\n        Vector means = MatrixUtils.columnMeanIgnoreMissingData(m, counts);\n        assertNotNull(means);\n        assertEquals(m.numColumns(), means.size());\n\n        assertEquals(3d, means.get(0), 0d);\n        assertEquals(5d, means.get(1), 0d);\n        assertEquals(6d, means.get(2), 0d);\n    }", "signature": "void testColumnMeanIgnoreMissingData()", "full_signature": "@Test public void testColumnMeanIgnoreMissingData()", "class_method_signature": "MatrixUtilsTest.testColumnMeanIgnoreMissingData()", "testcase": true, "constructor": false, "invocations": ["columnCountsIgnoreMissingData", "columnMeanIgnoreMissingData", "assertNotNull", "assertEquals", "numColumns", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "MatrixUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(MatrixUtils.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(MatrixUtils.class)", "var_name": "logger"}, {"original_string": "private static double DELTA = Math.pow(2, -20);", "modifier": "private static", "type": "double", "declarator": "DELTA = Math.pow(2, -20)", "var_name": "DELTA"}], "methods": [{"identifier": "columnSums", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector columnSums(Matrix m)", "full_signature": "public static Vector columnSums(Matrix m)", "class_method_signature": "MatrixUtils.columnSums(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "columnSums", "parameters": "(Matrix m, double [] sums)", "modifiers": "public static", "return": "void", "signature": "void columnSums(Matrix m, double [] sums)", "full_signature": "public static void columnSums(Matrix m, double [] sums)", "class_method_signature": "MatrixUtils.columnSums(Matrix m, double [] sums)", "testcase": false, "constructor": false}, {"identifier": "columnSumsIgnoreMissingData", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector columnSumsIgnoreMissingData(Matrix m)", "full_signature": "public static Vector columnSumsIgnoreMissingData(Matrix m)", "class_method_signature": "MatrixUtils.columnSumsIgnoreMissingData(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "rowSumsIgnoreMissingData", "parameters": "(PearsonRow[] values)", "modifiers": "public static", "return": "Vector", "signature": "Vector rowSumsIgnoreMissingData(PearsonRow[] values)", "full_signature": "public static Vector rowSumsIgnoreMissingData(PearsonRow[] values)", "class_method_signature": "MatrixUtils.rowSumsIgnoreMissingData(PearsonRow[] values)", "testcase": false, "constructor": false}, {"identifier": "rowSums", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector rowSums(Matrix m)", "full_signature": "public static Vector rowSums(Matrix m)", "class_method_signature": "MatrixUtils.rowSums(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "rowSums", "parameters": "(Matrix m, double [] result)", "modifiers": "public static", "return": "void", "signature": "void rowSums(Matrix m, double [] result)", "full_signature": "public static void rowSums(Matrix m, double [] result)", "class_method_signature": "MatrixUtils.rowSums(Matrix m, double [] result)", "testcase": false, "constructor": false}, {"identifier": "rowSumsIgnoreMissingData", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector rowSumsIgnoreMissingData(Matrix m)", "full_signature": "public static Vector rowSumsIgnoreMissingData(Matrix m)", "class_method_signature": "MatrixUtils.rowSumsIgnoreMissingData(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "columnMean", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector columnMean(Matrix m)", "full_signature": "public static Vector columnMean(Matrix m)", "class_method_signature": "MatrixUtils.columnMean(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "columnCountsIgnoreMissingData", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector columnCountsIgnoreMissingData(Matrix m)", "full_signature": "public static Vector columnCountsIgnoreMissingData(Matrix m)", "class_method_signature": "MatrixUtils.columnCountsIgnoreMissingData(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "rowCountsIgnoreMissingData", "parameters": "(List<Vector> values)", "modifiers": "public static", "return": "Vector", "signature": "Vector rowCountsIgnoreMissingData(List<Vector> values)", "full_signature": "public static Vector rowCountsIgnoreMissingData(List<Vector> values)", "class_method_signature": "MatrixUtils.rowCountsIgnoreMissingData(List<Vector> values)", "testcase": false, "constructor": false}, {"identifier": "rowCountsIgnoreMissingData", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector rowCountsIgnoreMissingData(Matrix m)", "full_signature": "public static Vector rowCountsIgnoreMissingData(Matrix m)", "class_method_signature": "MatrixUtils.rowCountsIgnoreMissingData(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "columnMeanIgnoreMissingData", "parameters": "(Matrix m, Vector counts)", "modifiers": "public static", "return": "Vector", "signature": "Vector columnMeanIgnoreMissingData(Matrix m, Vector counts)", "full_signature": "public static Vector columnMeanIgnoreMissingData(Matrix m, Vector counts)", "class_method_signature": "MatrixUtils.columnMeanIgnoreMissingData(Matrix m, Vector counts)", "testcase": false, "constructor": false}, {"identifier": "simpleColumnMeanIgnoreMissingData", "parameters": "(Matrix m, Vector counts)", "modifiers": "public static", "return": "Vector", "signature": "Vector simpleColumnMeanIgnoreMissingData(Matrix m, Vector counts)", "full_signature": "public static Vector simpleColumnMeanIgnoreMissingData(Matrix m, Vector counts)", "class_method_signature": "MatrixUtils.simpleColumnMeanIgnoreMissingData(Matrix m, Vector counts)", "testcase": false, "constructor": false}, {"identifier": "rowMeanIgnoreMissingDataPearsonRow", "parameters": "(PearsonRow[] values, Vector counts)", "modifiers": "public static", "return": "Vector", "signature": "Vector rowMeanIgnoreMissingDataPearsonRow(PearsonRow[] values, Vector counts)", "full_signature": "public static Vector rowMeanIgnoreMissingDataPearsonRow(PearsonRow[] values, Vector counts)", "class_method_signature": "MatrixUtils.rowMeanIgnoreMissingDataPearsonRow(PearsonRow[] values, Vector counts)", "testcase": false, "constructor": false}, {"identifier": "rowMeanIgnoreMissingData", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector rowMeanIgnoreMissingData(Matrix m)", "full_signature": "public static Vector rowMeanIgnoreMissingData(Matrix m)", "class_method_signature": "MatrixUtils.rowMeanIgnoreMissingData(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "columnVariance", "parameters": "(Matrix m, Vector means)", "modifiers": "public static", "return": "Vector", "signature": "Vector columnVariance(Matrix m, Vector means)", "full_signature": "public static Vector columnVariance(Matrix m, Vector means)", "class_method_signature": "MatrixUtils.columnVariance(Matrix m, Vector means)", "testcase": false, "constructor": false}, {"identifier": "columnVarianceIgnoreMissingData", "parameters": "(Matrix m, Vector means)", "modifiers": "public static", "return": "Vector", "signature": "Vector columnVarianceIgnoreMissingData(Matrix m, Vector means)", "full_signature": "public static Vector columnVarianceIgnoreMissingData(Matrix m, Vector means)", "class_method_signature": "MatrixUtils.columnVarianceIgnoreMissingData(Matrix m, Vector means)", "testcase": false, "constructor": false}, {"identifier": "simpleColumnVarianceIgnoreMissingData", "parameters": "(Matrix m, Vector means)", "modifiers": "public static", "return": "Vector", "signature": "Vector simpleColumnVarianceIgnoreMissingData(Matrix m, Vector means)", "full_signature": "public static Vector simpleColumnVarianceIgnoreMissingData(Matrix m, Vector means)", "class_method_signature": "MatrixUtils.simpleColumnVarianceIgnoreMissingData(Matrix m, Vector means)", "testcase": false, "constructor": false}, {"identifier": "rowVarianceIgnoreMissingDataPearsonRow", "parameters": "(PearsonRow[] values, Vector means, Vector counts)", "modifiers": "public static", "return": "Vector", "signature": "Vector rowVarianceIgnoreMissingDataPearsonRow(PearsonRow[] values, Vector means, Vector counts)", "full_signature": "public static Vector rowVarianceIgnoreMissingDataPearsonRow(PearsonRow[] values, Vector means, Vector counts)", "class_method_signature": "MatrixUtils.rowVarianceIgnoreMissingDataPearsonRow(PearsonRow[] values, Vector means, Vector counts)", "testcase": false, "constructor": false}, {"identifier": "elementMult", "parameters": "(Vector x, Vector y)", "modifiers": "public static", "return": "Vector", "signature": "Vector elementMult(Vector x, Vector y)", "full_signature": "public static Vector elementMult(Vector x, Vector y)", "class_method_signature": "MatrixUtils.elementMult(Vector x, Vector y)", "testcase": false, "constructor": false}, {"identifier": "elementDiv", "parameters": "(Vector x, Vector y)", "modifiers": "public static", "return": "Vector", "signature": "Vector elementDiv(Vector x, Vector y)", "full_signature": "public static Vector elementDiv(Vector x, Vector y)", "class_method_signature": "MatrixUtils.elementDiv(Vector x, Vector y)", "testcase": false, "constructor": false}, {"identifier": "recip", "parameters": "(Vector x)", "modifiers": "public static", "return": "Vector", "signature": "Vector recip(Vector x)", "full_signature": "public static Vector recip(Vector x)", "class_method_signature": "MatrixUtils.recip(Vector x)", "testcase": false, "constructor": false}, {"identifier": "elementMult", "parameters": "(Matrix x, Matrix y)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix elementMult(Matrix x, Matrix y)", "full_signature": "public static Matrix elementMult(Matrix x, Matrix y)", "class_method_signature": "MatrixUtils.elementMult(Matrix x, Matrix y)", "testcase": false, "constructor": false}, {"identifier": "absRowSums", "parameters": "(Matrix m)", "modifiers": "public static", "return": "Vector", "signature": "Vector absRowSums(Matrix m)", "full_signature": "public static Vector absRowSums(Matrix m)", "class_method_signature": "MatrixUtils.absRowSums(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "countMatches", "parameters": "(Vector v, double x)", "modifiers": "public static", "return": "int", "signature": "int countMatches(Vector v, double x)", "full_signature": "public static int countMatches(Vector v, double x)", "class_method_signature": "MatrixUtils.countMatches(Vector v, double x)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(Matrix m)", "modifiers": "public static", "return": "double", "signature": "double sum(Matrix m)", "full_signature": "public static double sum(Matrix m)", "class_method_signature": "MatrixUtils.sum(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(Vector v)", "modifiers": "public static", "return": "double", "signature": "double sum(Vector v)", "full_signature": "public static double sum(Vector v)", "class_method_signature": "MatrixUtils.sum(Vector v)", "testcase": false, "constructor": false}, {"identifier": "setMatches", "parameters": "(Vector v, double from, double to)", "modifiers": "public static", "return": "void", "signature": "void setMatches(Vector v, double from, double to)", "full_signature": "public static void setMatches(Vector v, double from, double to)", "class_method_signature": "MatrixUtils.setMatches(Vector v, double from, double to)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Vector v, double x)", "modifiers": "public static", "return": "int[]", "signature": "int[] find(Vector v, double x)", "full_signature": "public static int[] find(Vector v, double x)", "class_method_signature": "MatrixUtils.find(Vector v, double x)", "testcase": false, "constructor": false}, {"identifier": "findGT", "parameters": "(Vector v, double x)", "modifiers": "public static", "return": "int[]", "signature": "int[] findGT(Vector v, double x)", "full_signature": "public static int[] findGT(Vector v, double x)", "class_method_signature": "MatrixUtils.findGT(Vector v, double x)", "testcase": false, "constructor": false}, {"identifier": "findGE", "parameters": "(Vector v, double x)", "modifiers": "public static", "return": "int[]", "signature": "int[] findGE(Vector v, double x)", "full_signature": "public static int[] findGE(Vector v, double x)", "class_method_signature": "MatrixUtils.findGE(Vector v, double x)", "testcase": false, "constructor": false}, {"identifier": "findLT", "parameters": "(Vector v, double x)", "modifiers": "public static", "return": "int[]", "signature": "int[] findLT(Vector v, double x)", "full_signature": "public static int[] findLT(Vector v, double x)", "class_method_signature": "MatrixUtils.findLT(Vector v, double x)", "testcase": false, "constructor": false}, {"identifier": "subArray", "parameters": "(int[] array, int[] indices)", "modifiers": "public static", "return": "int[]", "signature": "int[] subArray(int[] array, int[] indices)", "full_signature": "public static int[] subArray(int[] array, int[] indices)", "class_method_signature": "MatrixUtils.subArray(int[] array, int[] indices)", "testcase": false, "constructor": false}, {"identifier": "arrayJoin", "parameters": "(int[] a, int[] b)", "modifiers": "public static", "return": "int[]", "signature": "int[] arrayJoin(int[] a, int[] b)", "full_signature": "public static int[] arrayJoin(int[] a, int[] b)", "class_method_signature": "MatrixUtils.arrayJoin(int[] a, int[] b)", "testcase": false, "constructor": false}, {"identifier": "getSubMatrix", "parameters": "(Matrix network, int[] wantedRowIndices, int[] wantedColumnIndices)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix getSubMatrix(Matrix network, int[] wantedRowIndices, int[] wantedColumnIndices)", "full_signature": "public static Matrix getSubMatrix(Matrix network, int[] wantedRowIndices, int[] wantedColumnIndices)", "class_method_signature": "MatrixUtils.getSubMatrix(Matrix network, int[] wantedRowIndices, int[] wantedColumnIndices)", "testcase": false, "constructor": false}, {"identifier": "setDiagonalZero", "parameters": "(Matrix m)", "modifiers": "public static", "return": "void", "signature": "void setDiagonalZero(Matrix m)", "full_signature": "public static void setDiagonalZero(Matrix m)", "class_method_signature": "MatrixUtils.setDiagonalZero(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "elementMultiplySum", "parameters": "(Matrix a, Matrix b)", "modifiers": "public static", "return": "double", "signature": "double elementMultiplySum(Matrix a, Matrix b)", "full_signature": "public static double elementMultiplySum(Matrix a, Matrix b)", "class_method_signature": "MatrixUtils.elementMultiplySum(Matrix a, Matrix b)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(int[] a, int x)", "modifiers": "public static", "return": "int[]", "signature": "int[] filter(int[] a, int x)", "full_signature": "public static int[] filter(int[] a, int x)", "class_method_signature": "MatrixUtils.filter(int[] a, int x)", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "(Vector v)", "modifiers": "public static", "return": "void", "signature": "void sqrt(Vector v)", "full_signature": "public static void sqrt(Vector v)", "class_method_signature": "MatrixUtils.sqrt(Vector v)", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "(Matrix m)", "modifiers": "public static", "return": "void", "signature": "void sqrt(Matrix m)", "full_signature": "public static void sqrt(Matrix m)", "class_method_signature": "MatrixUtils.sqrt(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Matrix m)", "modifiers": "public static", "return": "void", "signature": "void log(Matrix m)", "full_signature": "public static void log(Matrix m)", "class_method_signature": "MatrixUtils.log(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Vector v)", "modifiers": "public static", "return": "void", "signature": "void log(Vector v)", "full_signature": "public static void log(Vector v)", "class_method_signature": "MatrixUtils.log(Vector v)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Vector v, final double x)", "modifiers": "public static", "return": "void", "signature": "void add(Vector v, final double x)", "full_signature": "public static void add(Vector v, final double x)", "class_method_signature": "MatrixUtils.add(Vector v, final double x)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Matrix m, final double x)", "modifiers": "public static", "return": "void", "signature": "void add(Matrix m, final double x)", "full_signature": "public static void add(Matrix m, final double x)", "class_method_signature": "MatrixUtils.add(Matrix m, final double x)", "testcase": false, "constructor": false}, {"identifier": "findAllNoneZero", "parameters": "(Vector v)", "modifiers": "public static", "return": "Vector", "signature": "Vector findAllNoneZero(Vector v)", "full_signature": "public static Vector findAllNoneZero(Vector v)", "class_method_signature": "MatrixUtils.findAllNoneZero(Vector v)", "testcase": false, "constructor": false}, {"identifier": "makeValueSortedMap", "parameters": "(Map<K, V> unsorted, final Comparator<V> comparator)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> makeValueSortedMap(Map<K, V> unsorted, final Comparator<V> comparator)", "full_signature": "public static Map<K, V> makeValueSortedMap(Map<K, V> unsorted, final Comparator<V> comparator)", "class_method_signature": "MatrixUtils.makeValueSortedMap(Map<K, V> unsorted, final Comparator<V> comparator)", "testcase": false, "constructor": false}, {"identifier": "getIndicesForTopScores", "parameters": "(Vector scores, List<Integer> indicesForPositiveNodes, int limitResults, double threshold)", "modifiers": "public static", "return": "int[]", "signature": "int[] getIndicesForTopScores(Vector scores, List<Integer> indicesForPositiveNodes, int limitResults, double threshold)", "full_signature": "public static int[] getIndicesForTopScores(Vector scores, List<Integer> indicesForPositiveNodes, int limitResults, double threshold)", "class_method_signature": "MatrixUtils.getIndicesForTopScores(Vector scores, List<Integer> indicesForPositiveNodes, int limitResults, double threshold)", "testcase": false, "constructor": false}, {"identifier": "getIndicesForSortedValues", "parameters": "(Vector v)", "modifiers": "public static", "return": "int[]", "signature": "int[] getIndicesForSortedValues(Vector v)", "full_signature": "public static int[] getIndicesForSortedValues(Vector v)", "class_method_signature": "MatrixUtils.getIndicesForSortedValues(Vector v)", "testcase": false, "constructor": false}, {"identifier": "extractColumnToVector", "parameters": "(Matrix m, int columnIndex)", "modifiers": "public static", "return": "Vector", "signature": "Vector extractColumnToVector(Matrix m, int columnIndex)", "full_signature": "public static Vector extractColumnToVector(Matrix m, int columnIndex)", "class_method_signature": "MatrixUtils.extractColumnToVector(Matrix m, int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "extractRowToVector", "parameters": "(Matrix m, int rowIndex)", "modifiers": "public static", "return": "Vector", "signature": "Vector extractRowToVector(Matrix m, int rowIndex)", "full_signature": "public static Vector extractRowToVector(Matrix m, int rowIndex)", "class_method_signature": "MatrixUtils.extractRowToVector(Matrix m, int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "setToMaxTranspose", "parameters": "(Matrix a)", "modifiers": "public static", "return": "void", "signature": "void setToMaxTranspose(Matrix a)", "full_signature": "public static void setToMaxTranspose(Matrix a)", "class_method_signature": "MatrixUtils.setToMaxTranspose(Matrix a)", "testcase": false, "constructor": false}, {"identifier": "computeMaxTranspose", "parameters": "(Matrix a)", "modifiers": "public static", "return": "FlexCompColMatrix", "signature": "FlexCompColMatrix computeMaxTranspose(Matrix a)", "full_signature": "public static FlexCompColMatrix computeMaxTranspose(Matrix a)", "class_method_signature": "MatrixUtils.computeMaxTranspose(Matrix a)", "testcase": false, "constructor": false}, {"identifier": "replaceMissingData", "parameters": "(Matrix m, double value)", "modifiers": "public static", "return": "void", "signature": "void replaceMissingData(Matrix m, double value)", "full_signature": "public static void replaceMissingData(Matrix m, double value)", "class_method_signature": "MatrixUtils.replaceMissingData(Matrix m, double value)", "testcase": false, "constructor": false}, {"identifier": "replaceMissingData", "parameters": "(List<Vector> m, double value)", "modifiers": "public static", "return": "void", "signature": "void replaceMissingData(List<Vector> m, double value)", "full_signature": "public static void replaceMissingData(List<Vector> m, double value)", "class_method_signature": "MatrixUtils.replaceMissingData(List<Vector> m, double value)", "testcase": false, "constructor": false}, {"identifier": "checkColumnsforMissingDataThreshold", "parameters": "(Matrix m, double thresholdPercentage)", "modifiers": "public static", "return": "boolean[]", "signature": "boolean[] checkColumnsforMissingDataThreshold(Matrix m, double thresholdPercentage)", "full_signature": "public static boolean[] checkColumnsforMissingDataThreshold(Matrix m, double thresholdPercentage)", "class_method_signature": "MatrixUtils.checkColumnsforMissingDataThreshold(Matrix m, double thresholdPercentage)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "(Vector v)", "modifiers": "public static", "return": "double", "signature": "double max(Vector v)", "full_signature": "public static double max(Vector v)", "class_method_signature": "MatrixUtils.max(Vector v)", "testcase": false, "constructor": false}, {"identifier": "setColumns", "parameters": "(Matrix m, int col, double value)", "modifiers": "public static", "return": "void", "signature": "void setColumns(Matrix m, int col, double value)", "full_signature": "public static void setColumns(Matrix m, int col, double value)", "class_method_signature": "MatrixUtils.setColumns(Matrix m, int col, double value)", "testcase": false, "constructor": false}, {"identifier": "setColumn", "parameters": "(Matrix m, int col, Vector values)", "modifiers": "public static", "return": "void", "signature": "void setColumn(Matrix m, int col, Vector values)", "full_signature": "public static void setColumn(Matrix m, int col, Vector values)", "class_method_signature": "MatrixUtils.setColumn(Matrix m, int col, Vector values)", "testcase": false, "constructor": false}, {"identifier": "setRow", "parameters": "(Matrix m, int row, Vector values)", "modifiers": "public static", "return": "void", "signature": "void setRow(Matrix m, int row, Vector values)", "full_signature": "public static void setRow(Matrix m, int row, Vector values)", "class_method_signature": "MatrixUtils.setRow(Matrix m, int row, Vector values)", "testcase": false, "constructor": false}, {"identifier": "setColumn", "parameters": "(Matrix m, int col, double[] values)", "modifiers": "public static", "return": "void", "signature": "void setColumn(Matrix m, int col, double[] values)", "full_signature": "public static void setColumn(Matrix m, int col, double[] values)", "class_method_signature": "MatrixUtils.setColumn(Matrix m, int col, double[] values)", "testcase": false, "constructor": false}, {"identifier": "setColumn", "parameters": "(Matrix m, int col, Matrix from, int fromCol)", "modifiers": "public static", "return": "void", "signature": "void setColumn(Matrix m, int col, Matrix from, int fromCol)", "full_signature": "public static void setColumn(Matrix m, int col, Matrix from, int fromCol)", "class_method_signature": "MatrixUtils.setColumn(Matrix m, int col, Matrix from, int fromCol)", "testcase": false, "constructor": false}, {"identifier": "maskFalseColumns", "parameters": "(Matrix m, boolean[] columnMasks, double value)", "modifiers": "public static", "return": "void", "signature": "void maskFalseColumns(Matrix m, boolean[] columnMasks, double value)", "full_signature": "public static void maskFalseColumns(Matrix m, boolean[] columnMasks, double value)", "class_method_signature": "MatrixUtils.maskFalseColumns(Matrix m, boolean[] columnMasks, double value)", "testcase": false, "constructor": false}, {"identifier": "pearson", "parameters": "(double[] xlist, double[] ylist)", "modifiers": "public static", "return": "double", "signature": "double pearson(double[] xlist, double[] ylist)", "full_signature": "public static double pearson(double[] xlist, double[] ylist)", "class_method_signature": "MatrixUtils.pearson(double[] xlist, double[] ylist)", "testcase": false, "constructor": false}, {"identifier": "pearsonCleanData", "parameters": "(double[] xlist, double[] ylist)", "modifiers": "public static", "return": "double", "signature": "double pearsonCleanData(double[] xlist, double[] ylist)", "full_signature": "public static double pearsonCleanData(double[] xlist, double[] ylist)", "class_method_signature": "MatrixUtils.pearsonCleanData(double[] xlist, double[] ylist)", "testcase": false, "constructor": false}, {"identifier": "dotprod", "parameters": "(double[] xlist, double[] ylist)", "modifiers": "public static", "return": "double", "signature": "double dotprod(double[] xlist, double[] ylist)", "full_signature": "public static double dotprod(double[] xlist, double[] ylist)", "class_method_signature": "MatrixUtils.dotprod(double[] xlist, double[] ylist)", "testcase": false, "constructor": false}, {"identifier": "permutation", "parameters": "(int n)", "modifiers": "public static", "return": "int[]", "signature": "int[] permutation(int n)", "full_signature": "public static int[] permutation(int n)", "class_method_signature": "MatrixUtils.permutation(int n)", "testcase": false, "constructor": false}, {"identifier": "permutation", "parameters": "(int n, Random random)", "modifiers": "public static", "return": "int[]", "signature": "int[] permutation(int n, Random random)", "full_signature": "public static int[] permutation(int n, Random random)", "class_method_signature": "MatrixUtils.permutation(int n, Random random)", "testcase": false, "constructor": false}, {"identifier": "tiedRank", "parameters": "(Vector vector)", "modifiers": "public static", "return": "void", "signature": "void tiedRank(Vector vector)", "full_signature": "public static void tiedRank(Vector vector)", "class_method_signature": "MatrixUtils.tiedRank(Vector vector)", "testcase": false, "constructor": false}, {"identifier": "tiedRank", "parameters": "(double[] values)", "modifiers": "public static", "return": "void", "signature": "void tiedRank(double[] values)", "full_signature": "public static void tiedRank(double[] values)", "class_method_signature": "MatrixUtils.tiedRank(double[] values)", "testcase": false, "constructor": false}, {"identifier": "mergeSort", "parameters": "(double[] a, int[] indices)", "modifiers": "public static", "return": "void", "signature": "void mergeSort(double[] a, int[] indices)", "full_signature": "public static void mergeSort(double[] a, int[] indices)", "class_method_signature": "MatrixUtils.mergeSort(double[] a, int[] indices)", "testcase": false, "constructor": false}, {"identifier": "mergeSort", "parameters": "(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int left, int right)", "modifiers": "private static", "return": "void", "signature": "void mergeSort(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int left, int right)", "full_signature": "private static void mergeSort(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int left, int right)", "class_method_signature": "MatrixUtils.mergeSort(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int left, int right)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int leftPos, int rightPos, int rightEnd)", "modifiers": "private static", "return": "void", "signature": "void merge(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int leftPos, int rightPos, int rightEnd)", "full_signature": "private static void merge(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int leftPos, int rightPos, int rightEnd)", "class_method_signature": "MatrixUtils.merge(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int leftPos, int rightPos, int rightEnd)", "testcase": false, "constructor": false}, {"identifier": "mergeSort", "parameters": "(double[] a, boolean[] classes)", "modifiers": "public static", "return": "void", "signature": "void mergeSort(double[] a, boolean[] classes)", "full_signature": "public static void mergeSort(double[] a, boolean[] classes)", "class_method_signature": "MatrixUtils.mergeSort(double[] a, boolean[] classes)", "testcase": false, "constructor": false}, {"identifier": "mergeSort", "parameters": "(double[] a, double[] tmpArray, boolean[] aIndices, boolean[] tmpClasses,\n            int left, int right)", "modifiers": "private static", "return": "void", "signature": "void mergeSort(double[] a, double[] tmpArray, boolean[] aIndices, boolean[] tmpClasses,\n            int left, int right)", "full_signature": "private static void mergeSort(double[] a, double[] tmpArray, boolean[] aIndices, boolean[] tmpClasses,\n            int left, int right)", "class_method_signature": "MatrixUtils.mergeSort(double[] a, double[] tmpArray, boolean[] aIndices, boolean[] tmpClasses,\n            int left, int right)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(double[] a, double[] tmpArray, boolean[] aClasses, boolean[] tmpClasses,\n            int leftPos, int rightPos, int rightEnd)", "modifiers": "private static", "return": "void", "signature": "void merge(double[] a, double[] tmpArray, boolean[] aClasses, boolean[] tmpClasses,\n            int leftPos, int rightPos, int rightEnd)", "full_signature": "private static void merge(double[] a, double[] tmpArray, boolean[] aClasses, boolean[] tmpClasses,\n            int leftPos, int rightPos, int rightEnd)", "class_method_signature": "MatrixUtils.merge(double[] a, double[] tmpArray, boolean[] aClasses, boolean[] tmpClasses,\n            int leftPos, int rightPos, int rightEnd)", "testcase": false, "constructor": false}, {"identifier": "rank", "parameters": "(Vector vector)", "modifiers": "public static", "return": "void", "signature": "void rank(Vector vector)", "full_signature": "public static void rank(Vector vector)", "class_method_signature": "MatrixUtils.rank(Vector vector)", "testcase": false, "constructor": false}, {"identifier": "rank", "parameters": "(double[] values)", "modifiers": "public static", "return": "void", "signature": "void rank(double[] values)", "full_signature": "public static void rank(double[] values)", "class_method_signature": "MatrixUtils.rank(double[] values)", "testcase": false, "constructor": false}, {"identifier": "coverage", "parameters": "(Matrix m)", "modifiers": "public static", "return": "int[]", "signature": "int[] coverage(Matrix m)", "full_signature": "public static int[] coverage(Matrix m)", "class_method_signature": "MatrixUtils.coverage(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "mergeSortIgnoreZero", "parameters": "(double[] a, int[] indices)", "modifiers": "public static", "return": "void", "signature": "void mergeSortIgnoreZero(double[] a, int[] indices)", "full_signature": "public static void mergeSortIgnoreZero(double[] a, int[] indices)", "class_method_signature": "MatrixUtils.mergeSortIgnoreZero(double[] a, int[] indices)", "testcase": false, "constructor": false}, {"identifier": "overlap", "parameters": "(Matrix m, int[] c)", "modifiers": "public static", "return": "boolean", "signature": "boolean overlap(Matrix m, int[] c)", "full_signature": "public static boolean overlap(Matrix m, int[] c)", "class_method_signature": "MatrixUtils.overlap(Matrix m, int[] c)", "testcase": false, "constructor": false}, {"identifier": "mergeSortIgnoreZero", "parameters": "(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int left, int right)", "modifiers": "private static", "return": "void", "signature": "void mergeSortIgnoreZero(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int left, int right)", "full_signature": "private static void mergeSortIgnoreZero(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int left, int right)", "class_method_signature": "MatrixUtils.mergeSortIgnoreZero(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int left, int right)", "testcase": false, "constructor": false}, {"identifier": "mergeIgnoreZero", "parameters": "(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int leftPos, int rightPos, int rightEnd)", "modifiers": "private static", "return": "void", "signature": "void mergeIgnoreZero(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int leftPos, int rightPos, int rightEnd)", "full_signature": "private static void mergeIgnoreZero(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int leftPos, int rightPos, int rightEnd)", "class_method_signature": "MatrixUtils.mergeIgnoreZero(double[] a, double[] tmpArray, int[] aIndices, int[] tmpIndices,\n            int leftPos, int rightPos, int rightEnd)", "testcase": false, "constructor": false}, {"identifier": "copyLarger", "parameters": "(Matrix m, int extraRows, int extraCols)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix copyLarger(Matrix m, int extraRows, int extraCols)", "full_signature": "public static DenseMatrix copyLarger(Matrix m, int extraRows, int extraCols)", "class_method_signature": "MatrixUtils.copyLarger(Matrix m, int extraRows, int extraCols)", "testcase": false, "constructor": false}, {"identifier": "rescale", "parameters": "(Vector score)", "modifiers": "public static", "return": "Vector", "signature": "Vector rescale(Vector score)", "full_signature": "public static Vector rescale(Vector score)", "class_method_signature": "MatrixUtils.rescale(Vector score)", "testcase": false, "constructor": false}, {"identifier": "normalizeNetwork", "parameters": "(Matrix m)", "modifiers": "public static", "return": "void", "signature": "void normalizeNetwork(Matrix m)", "full_signature": "public static void normalizeNetwork(Matrix m)", "class_method_signature": "MatrixUtils.normalizeNetwork(Matrix m)", "testcase": false, "constructor": false}], "file": "engine/src/main/java/org/genemania/engine/core/MatrixUtils.java"}, "focal_method": {"identifier": "columnMeanIgnoreMissingData", "parameters": "(Matrix m, Vector counts)", "modifiers": "public static", "return": "Vector", "body": "public static Vector columnMeanIgnoreMissingData(Matrix m, Vector counts) {\n\n        Vector means = columnSumsIgnoreMissingData(m);\n        means = elementDiv(means, counts);\n\n        // apply correction\n        Vector corrections = new DenseVector(m.numColumns());\n        for (MatrixEntry e: m) {\n            if (!Double.isNaN(e.get())) {\n                corrections.set(e.column(), corrections.get(e.column()) + e.get() - means.get(e.column()));\n            }\n        }\n\n        corrections = elementDiv(corrections, counts);\n        means = means.add(corrections);\n\n        return means;\n    }", "signature": "Vector columnMeanIgnoreMissingData(Matrix m, Vector counts)", "full_signature": "public static Vector columnMeanIgnoreMissingData(Matrix m, Vector counts)", "class_method_signature": "MatrixUtils.columnMeanIgnoreMissingData(Matrix m, Vector counts)", "testcase": false, "constructor": false, "invocations": ["columnSumsIgnoreMissingData", "elementDiv", "numColumns", "isNaN", "get", "set", "column", "get", "column", "get", "get", "column", "elementDiv", "add"]}, "repository": {"repo_id": 12473833, "url": "https://github.com/GeneMANIA/genemania", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 34, "size": 44902, "license": "licensed"}}