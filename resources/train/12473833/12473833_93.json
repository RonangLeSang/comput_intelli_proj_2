{"test_class": {"identifier": "ComputeEnrichmentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static RandomDataCacheBuilder cacheBuilder;", "modifier": "static", "type": "RandomDataCacheBuilder", "declarator": "cacheBuilder", "var_name": "cacheBuilder"}, {"original_string": "static int org1Id = 1;", "modifier": "static", "type": "int", "declarator": "org1Id = 1", "var_name": "org1Id"}, {"original_string": "static int org1numGenes = 20;", "modifier": "static", "type": "int", "declarator": "org1numGenes = 20", "var_name": "org1numGenes"}, {"original_string": "static int org1numNetworks = 10;", "modifier": "static", "type": "int", "declarator": "org1numNetworks = 10", "var_name": "org1numNetworks"}, {"original_string": "static double org1networkSparsity = .5;", "modifier": "static", "type": "double", "declarator": "org1networkSparsity = .5", "var_name": "org1networkSparsity"}, {"original_string": "static int numCategories = 50;", "modifier": "static", "type": "int", "declarator": "numCategories = 50", "var_name": "numCategories"}, {"original_string": "static double org1AnnotationSparsity = .5;", "modifier": "static", "type": "double", "declarator": "org1AnnotationSparsity = .5", "var_name": "org1AnnotationSparsity"}], "file": "engine/src/test/java/org/genemania/engine/actions/ComputeEnrichmentTest.java"}, "test_case": {"identifier": "testCumulHyperGeo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCumulHyperGeo() {\n        double N = 20;\n        double k = 6;\n        double n = 7;\n        double x = 4;\n\n        double p = ComputeEnrichment.computeCumulHyperGeo(x, N, n, k);\n        assertEquals(7.76573e-2, p, 1e-6);\n    }", "signature": "void testCumulHyperGeo()", "full_signature": "@Test public void testCumulHyperGeo()", "class_method_signature": "ComputeEnrichmentTest.testCumulHyperGeo()", "testcase": true, "constructor": false, "invocations": ["computeCumulHyperGeo", "assertEquals"]}, "focal_class": {"identifier": "ComputeEnrichment", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(ComputeEnrichment.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(ComputeEnrichment.class)", "var_name": "logger"}, {"original_string": "private DataCache cache;", "modifier": "private", "type": "DataCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private EnrichmentEngineRequestDto request;", "modifier": "private", "type": "EnrichmentEngineRequestDto", "declarator": "request", "var_name": "request"}, {"original_string": "private long requestStartTimeMillis;", "modifier": "private", "type": "long", "declarator": "requestStartTimeMillis", "var_name": "requestStartTimeMillis"}, {"original_string": "private long requestEndTimeMillis;", "modifier": "private", "type": "long", "declarator": "requestEndTimeMillis", "var_name": "requestEndTimeMillis"}], "methods": [{"identifier": "ComputeEnrichment", "parameters": "(DataCache cache, EnrichmentEngineRequestDto request)", "modifiers": "public", "return": "", "signature": " ComputeEnrichment(DataCache cache, EnrichmentEngineRequestDto request)", "full_signature": "public  ComputeEnrichment(DataCache cache, EnrichmentEngineRequestDto request)", "class_method_signature": "ComputeEnrichment.ComputeEnrichment(DataCache cache, EnrichmentEngineRequestDto request)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "()", "modifiers": "public", "return": "EnrichmentEngineResponseDto", "signature": "EnrichmentEngineResponseDto process()", "full_signature": "public EnrichmentEngineResponseDto process()", "class_method_signature": "ComputeEnrichment.process()", "testcase": false, "constructor": false}, {"identifier": "computeEnrichment", "parameters": "()", "modifiers": "", "return": "EnrichmentEngineResponseDto", "signature": "EnrichmentEngineResponseDto computeEnrichment()", "full_signature": " EnrichmentEngineResponseDto computeEnrichment()", "class_method_signature": "ComputeEnrichment.computeEnrichment()", "testcase": false, "constructor": false}, {"identifier": "selectCategoriesToReturn", "parameters": "(DenseVector qvals, double threshold, int minToReturn)", "modifiers": "protected static", "return": "boolean []", "signature": "boolean [] selectCategoriesToReturn(DenseVector qvals, double threshold, int minToReturn)", "full_signature": "protected static boolean [] selectCategoriesToReturn(DenseVector qvals, double threshold, int minToReturn)", "class_method_signature": "ComputeEnrichment.selectCategoriesToReturn(DenseVector qvals, double threshold, int minToReturn)", "testcase": false, "constructor": false}, {"identifier": "makeAnnotationsMap", "parameters": "(GoAnnotations goAnnos, GoIds goIds, NodeIds nodeIds,\n            Map<String, OntologyCategoryDto> categoryIdToVO)", "modifiers": "private", "return": "Map<Long, Collection<OntologyCategoryDto>>", "signature": "Map<Long, Collection<OntologyCategoryDto>> makeAnnotationsMap(GoAnnotations goAnnos, GoIds goIds, NodeIds nodeIds,\n            Map<String, OntologyCategoryDto> categoryIdToVO)", "full_signature": "private Map<Long, Collection<OntologyCategoryDto>> makeAnnotationsMap(GoAnnotations goAnnos, GoIds goIds, NodeIds nodeIds,\n            Map<String, OntologyCategoryDto> categoryIdToVO)", "class_method_signature": "ComputeEnrichment.makeAnnotationsMap(GoAnnotations goAnnos, GoIds goIds, NodeIds nodeIds,\n            Map<String, OntologyCategoryDto> categoryIdToVO)", "testcase": false, "constructor": false}, {"identifier": "computeHyperGeo", "parameters": "(double x, double N, double n, double k)", "modifiers": "public static", "return": "double", "signature": "double computeHyperGeo(double x, double N, double n, double k)", "full_signature": "public static double computeHyperGeo(double x, double N, double n, double k)", "class_method_signature": "ComputeEnrichment.computeHyperGeo(double x, double N, double n, double k)", "testcase": false, "constructor": false}, {"identifier": "computeCumulHyperGeo", "parameters": "(double x, double N, double n, double k)", "modifiers": "public static", "return": "double", "signature": "double computeCumulHyperGeo(double x, double N, double n, double k)", "full_signature": "public static double computeCumulHyperGeo(double x, double N, double n, double k)", "class_method_signature": "ComputeEnrichment.computeCumulHyperGeo(double x, double N, double n, double k)", "testcase": false, "constructor": false}, {"identifier": "computeFDRqval", "parameters": "(int N, DenseVector pvals)", "modifiers": "public static", "return": "DenseVector", "signature": "DenseVector computeFDRqval(int N, DenseVector pvals)", "full_signature": "public static DenseVector computeFDRqval(int N, DenseVector pvals)", "class_method_signature": "ComputeEnrichment.computeFDRqval(int N, DenseVector pvals)", "testcase": false, "constructor": false}, {"identifier": "setTo", "parameters": "(DenseVector v, double val)", "modifiers": "", "return": "void", "signature": "void setTo(DenseVector v, double val)", "full_signature": " void setTo(DenseVector v, double val)", "class_method_signature": "ComputeEnrichment.setTo(DenseVector v, double val)", "testcase": false, "constructor": false}, {"identifier": "makeGeneMaskVector", "parameters": "(NodeIds nodeIds, int numGenes)", "modifiers": "", "return": "DenseVector", "signature": "DenseVector makeGeneMaskVector(NodeIds nodeIds, int numGenes)", "full_signature": " DenseVector makeGeneMaskVector(NodeIds nodeIds, int numGenes)", "class_method_signature": "ComputeEnrichment.makeGeneMaskVector(NodeIds nodeIds, int numGenes)", "testcase": false, "constructor": false}, {"identifier": "makeGeneMaskVector", "parameters": "(double [] degree, int numGenes)", "modifiers": "", "return": "DenseVector", "signature": "DenseVector makeGeneMaskVector(double [] degree, int numGenes)", "full_signature": " DenseVector makeGeneMaskVector(double [] degree, int numGenes)", "class_method_signature": "ComputeEnrichment.makeGeneMaskVector(double [] degree, int numGenes)", "testcase": false, "constructor": false}, {"identifier": "dotMult", "parameters": "(DenseVector x, DenseVector y)", "modifiers": "", "return": "void", "signature": "void dotMult(DenseVector x, DenseVector y)", "full_signature": " void dotMult(DenseVector x, DenseVector y)", "class_method_signature": "ComputeEnrichment.dotMult(DenseVector x, DenseVector y)", "testcase": false, "constructor": false}, {"identifier": "logStart", "parameters": "()", "modifiers": "", "return": "void", "signature": "void logStart()", "full_signature": " void logStart()", "class_method_signature": "ComputeEnrichment.logStart()", "testcase": false, "constructor": false}, {"identifier": "logEnd", "parameters": "()", "modifiers": "", "return": "void", "signature": "void logEnd()", "full_signature": " void logEnd()", "class_method_signature": "ComputeEnrichment.logEnd()", "testcase": false, "constructor": false}, {"identifier": "logQuery", "parameters": "()", "modifiers": "", "return": "void", "signature": "void logQuery()", "full_signature": " void logQuery()", "class_method_signature": "ComputeEnrichment.logQuery()", "testcase": false, "constructor": false}, {"identifier": "checkQuery", "parameters": "()", "modifiers": "", "return": "void", "signature": "void checkQuery()", "full_signature": " void checkQuery()", "class_method_signature": "ComputeEnrichment.checkQuery()", "testcase": false, "constructor": false}], "file": "engine/src/main/java/org/genemania/engine/actions/ComputeEnrichment.java"}, "focal_method": {"identifier": "computeCumulHyperGeo", "parameters": "(double x, double N, double n, double k)", "modifiers": "public static", "return": "double", "body": "public static double computeCumulHyperGeo(double x, double N, double n, double k) {\n        double p = 0;\n        double upperBound = Math.min(n, k);\n        for (double i=x; i<=upperBound; i++) {\n            p += computeHyperGeo(i, N, n, k);\n        }\n\n        return p;\n    }", "signature": "double computeCumulHyperGeo(double x, double N, double n, double k)", "full_signature": "public static double computeCumulHyperGeo(double x, double N, double n, double k)", "class_method_signature": "ComputeEnrichment.computeCumulHyperGeo(double x, double N, double n, double k)", "testcase": false, "constructor": false, "invocations": ["min", "computeHyperGeo"]}, "repository": {"repo_id": 12473833, "url": "https://github.com/GeneMANIA/genemania", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 34, "size": 44902, "license": "licensed"}}