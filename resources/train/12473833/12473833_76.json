{"test_class": {"identifier": "ProfileToNetworkDriverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static double testTolerance = .00001d;", "modifier": "private static", "type": "double", "declarator": "testTolerance = .00001d", "var_name": "testTolerance"}, {"original_string": "private static String namingFile =  \n        \"gm:00000,GENE0\\n\" +\n        \"gm:00001,GENE1\\n\" +\n        \"gm:00002,GENE2\\n\" +\n        \"gm:00003,GENE3\\n\" +\n        \"gm:00004,GENE4\\n\" +\n        \"gm:00005,GENE5\\n\" +\n        \"gm:00006,GENE6\\n\" +\n        \"gm:00004,GENE4_syn1\\n\" +\n        \"gm:00004,GENE4_syn2\\n\";", "modifier": "private static", "type": "String", "declarator": "namingFile =  \n        \"gm:00000,GENE0\\n\" +\n        \"gm:00001,GENE1\\n\" +\n        \"gm:00002,GENE2\\n\" +\n        \"gm:00003,GENE3\\n\" +\n        \"gm:00004,GENE4\\n\" +\n        \"gm:00005,GENE5\\n\" +\n        \"gm:00006,GENE6\\n\" +\n        \"gm:00004,GENE4_syn1\\n\" +\n        \"gm:00004,GENE4_syn2\\n\"", "var_name": "namingFile"}], "file": "engine/src/test/java/org/genemania/engine/core/evaluation/ProfileToNetworkDriverTest.java"}, "test_case": {"identifier": "testLevelControl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLevelControl() throws Exception {\n        StringBuilder synonyms = new StringBuilder();\n        int totalUniqueNodes = 100;\n\n        for (int i = 0; i < totalUniqueNodes; i++) {\n            synonyms.append(String.format(\"gene%1$d,gene%1$d\", i));\n        }\n\n        ProfileToNetworkDriver loader = new ProfileToNetworkDriver();\n        int k = 50;\n        loader.setK(k);\n        loader.setKeepAllTies(true);\n        loader.setLimitTies(true);\n        loader.setSynIdColumn(0);\n        loader.setSynNameColumn(1);\n        loader.setSynSepChar(',');\n        loader.setSynReader(new StringReader(synonyms.toString()));\n\n        KHeap heap = new KHeap(k);\n        KHeap[] heaps = new KHeap[1];\n        heaps[0] = heap;\n\n        for (int i = 0; i < totalUniqueNodes; i++) {\n            heap.offer(i, i);\n        }\n\n        loader.levelControl(heaps);\n        assertEquals(k, heap.size());\n    }", "signature": "void testLevelControl()", "full_signature": "@Test public void testLevelControl()", "class_method_signature": "ProfileToNetworkDriverTest.testLevelControl()", "testcase": true, "constructor": false, "invocations": ["append", "format", "setK", "setKeepAllTies", "setLimitTies", "setSynIdColumn", "setSynNameColumn", "setSynSepChar", "setSynReader", "toString", "offer", "levelControl", "assertEquals", "size"]}, "focal_class": {"identifier": "ProfileToNetworkDriver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(ProfileToNetworkDriver.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(ProfileToNetworkDriver.class)", "var_name": "logger"}, {"original_string": "private static final int MIN_NUMBER_OF_GENES = 1000;", "modifier": "private static final", "type": "int", "declarator": "MIN_NUMBER_OF_GENES = 1000", "var_name": "MIN_NUMBER_OF_GENES"}, {"original_string": "private ProfileData profile;", "modifier": "private", "type": "ProfileData", "declarator": "profile", "var_name": "profile"}, {"original_string": "private Matrix network;", "modifier": "private", "type": "Matrix", "declarator": "network", "var_name": "network"}, {"original_string": "private ProgressReporter progress = NullProgressReporter.instance();", "modifier": "private", "type": "ProgressReporter", "declarator": "progress = NullProgressReporter.instance()", "var_name": "progress"}, {"original_string": "private Map<String, String> synonyms = new LinkedHashMap<String, String>();", "modifier": "private", "type": "Map<String, String>", "declarator": "synonyms = new LinkedHashMap<String, String>()", "var_name": "synonyms"}, {"original_string": "private Map<String, List<Integer>> identifiers = new HashMap<String, List<Integer>>();", "modifier": "private", "type": "Map<String, List<Integer>>", "declarator": "identifiers = new HashMap<String, List<Integer>>()", "var_name": "identifiers"}, {"original_string": "public static final String CONTINUOUS = \"cont\";", "modifier": "public static final", "type": "String", "declarator": "CONTINUOUS = \"cont\"", "var_name": "CONTINUOUS"}, {"original_string": "public static final String BINARY = \"bin\";", "modifier": "public static final", "type": "String", "declarator": "BINARY = \"bin\"", "var_name": "BINARY"}, {"original_string": "public static final String NETWORK = \"net\";", "modifier": "public static final", "type": "String", "declarator": "NETWORK = \"net\"", "var_name": "NETWORK"}, {"original_string": "@Option(name=\"-in\",usage=\"name of input file containing profile data\")\n    private String inFilename;", "modifier": "@Option(name=\"-in\",usage=\"name of input file containing profile data\")\n    private", "type": "String", "declarator": "inFilename", "var_name": "inFilename"}, {"original_string": "@Option(name=\"-out\",usage=\"name of output file to contain output network\")\n    private String outFilename;", "modifier": "@Option(name=\"-out\",usage=\"name of output file to contain output network\")\n    private", "type": "String", "declarator": "outFilename", "var_name": "outFilename"}, {"original_string": "@Option(name=\"-k\",usage=\"nearest k neighbours threshold\")\n    private int k = 50;", "modifier": "@Option(name=\"-k\",usage=\"nearest k neighbours threshold\")\n    private", "type": "int", "declarator": "k = 50", "var_name": "k"}, {"original_string": "@Option(name=\"-sep\",usage=\"separator character for input file\")\n    private char sepChar = '\\t';", "modifier": "@Option(name=\"-sep\",usage=\"separator character for input file\")\n    private", "type": "char", "declarator": "sepChar = '\\t'", "var_name": "sepChar"}, {"original_string": "@Option(name=\"-maxmissing\",usage=\"max % of feature values for a given gene that are allowed to be missing before the entire gene is discarded\")\n    private double maxMissingPercentage = 25.0;", "modifier": "@Option(name=\"-maxmissing\",usage=\"max % of feature values for a given gene that are allowed to be missing before the entire gene is discarded\")\n    private", "type": "double", "declarator": "maxMissingPercentage = 25.0", "var_name": "maxMissingPercentage"}, {"original_string": "@Option(name=\"-log\",usage=\"name of processing log file to create (will truncate old file)\")\n    private String logFilename;", "modifier": "@Option(name=\"-log\",usage=\"name of processing log file to create (will truncate old file)\")\n    private", "type": "String", "declarator": "logFilename", "var_name": "logFilename"}, {"original_string": "@Option(name=\"-cor\",usage=\"type of correlation to be computed\")\t\n    private CorrelationType correlationType = CorrelationType.PEARSON;", "modifier": "@Option(name=\"-cor\",usage=\"type of correlation to be computed\")\t\n    private", "type": "CorrelationType", "declarator": "correlationType = CorrelationType.PEARSON", "var_name": "correlationType"}, {"original_string": "@Option(name=\"-equalElementBin\",usage=\"Do the bins have equal number of elements\")\t\n    private boolean equalElementBin = false;", "modifier": "@Option(name=\"-equalElementBin\",usage=\"Do the bins have equal number of elements\")\t\n    private", "type": "boolean", "declarator": "equalElementBin = false", "var_name": "equalElementBin"}, {"original_string": "@Option(name=\"-binSize\",usage=\"upper bound, lower bounder, or average of the two bounds\")\t\n    private SizeType sizeType = SizeType.MEDIAN;", "modifier": "@Option(name=\"-binSize\",usage=\"upper bound, lower bounder, or average of the two bounds\")\t\n    private", "type": "SizeType", "declarator": "sizeType = SizeType.MEDIAN", "var_name": "sizeType"}, {"original_string": "@Option(name=\"-proftype\",usage=\"profile type: \" + BINARY + \"{ary}, \" + CONTINUOUS + \"{inuous} (default), \" + NETWORK + \"{work}\")\n    private String profileType = CONTINUOUS;", "modifier": "@Option(name=\"-proftype\",usage=\"profile type: \" + BINARY + \"{ary}, \" + CONTINUOUS + \"{inuous} (default), \" + NETWORK + \"{work}\")\n    private", "type": "String", "declarator": "profileType = CONTINUOUS", "var_name": "profileType"}, {"original_string": "@Option(name=\"-syn\",usage=\"name of identifier naming files\")\n    private String synFilename;", "modifier": "@Option(name=\"-syn\",usage=\"name of identifier naming files\")\n    private", "type": "String", "declarator": "synFilename", "var_name": "synFilename"}, {"original_string": "@Option(name=\"-synsep\",usage=\"separator character for synonuym file\")\t\n    private char synSepChar = '\\t';", "modifier": "@Option(name=\"-synsep\",usage=\"separator character for synonuym file\")\t\n    private", "type": "char", "declarator": "synSepChar = '\\t'", "var_name": "synSepChar"}, {"original_string": "@Option(name=\"-synuid\",usage=\"column # in synonym file for unique ids, 0-indexed\")\n    private int synIdColumn = 0;", "modifier": "@Option(name=\"-synuid\",usage=\"column # in synonym file for unique ids, 0-indexed\")\n    private", "type": "int", "declarator": "synIdColumn = 0", "var_name": "synIdColumn"}, {"original_string": "@Option(name=\"-synname\",usage=\"column # in synonym file for identifier names, 0-indexed\")\t\n    private int synNameColumn = 1;", "modifier": "@Option(name=\"-synname\",usage=\"column # in synonym file for identifier names, 0-indexed\")\t\n    private", "type": "int", "declarator": "synNameColumn = 1", "var_name": "synNameColumn"}, {"original_string": "@Option(name=\"-noHeader\",usage=\"file does not have a header (for binary file only)\")\t\n    private boolean noHeader = false;", "modifier": "@Option(name=\"-noHeader\",usage=\"file does not have a header (for binary file only)\")\t\n    private", "type": "boolean", "declarator": "noHeader = false", "var_name": "noHeader"}, {"original_string": "@Option(name=\"-keepAllTies\",usage=\"store more than top k if there are ties for the weakest interaction\")\n    private boolean keepAllTies = false;", "modifier": "@Option(name=\"-keepAllTies\",usage=\"store more than top k if there are ties for the weakest interaction\")\n    private", "type": "boolean", "declarator": "keepAllTies = false", "var_name": "keepAllTies"}, {"original_string": "public static final String THRESHOLD_AUTO = \"auto\";", "modifier": "public static final", "type": "String", "declarator": "THRESHOLD_AUTO = \"auto\"", "var_name": "THRESHOLD_AUTO"}, {"original_string": "public static final String THRESHOLD_OFF = \"off\";", "modifier": "public static final", "type": "String", "declarator": "THRESHOLD_OFF = \"off\"", "var_name": "THRESHOLD_OFF"}, {"original_string": "public static final String THRESHOLD_DEFAULT = THRESHOLD_AUTO;", "modifier": "public static final", "type": "String", "declarator": "THRESHOLD_DEFAULT = THRESHOLD_AUTO", "var_name": "THRESHOLD_DEFAULT"}, {"original_string": "@Option(name=\"-threshold\", usage=\"only report correlations satisfying threshold, values=\" \n        + THRESHOLD_AUTO + \" (method and possibly dataset dependent), \" \n        + THRESHOLD_OFF \n        + \", default is \" + THRESHOLD_DEFAULT)\n    private String threshold = THRESHOLD_DEFAULT;", "modifier": "@Option(name=\"-threshold\", usage=\"only report correlations satisfying threshold, values=\" \n        + THRESHOLD_AUTO + \" (method and possibly dataset dependent), \" \n        + THRESHOLD_OFF \n        + \", default is \" + THRESHOLD_DEFAULT)\n    private", "type": "String", "declarator": "threshold = THRESHOLD_DEFAULT", "var_name": "threshold"}, {"original_string": "@Option(name=\"-limitTies\") \n    private boolean limitTies = false;", "modifier": "@Option(name=\"-limitTies\") \n    private", "type": "boolean", "declarator": "limitTies = false", "var_name": "limitTies"}, {"original_string": "static final double MAX_PERCENTAGE = .02;", "modifier": "static final", "type": "double", "declarator": "MAX_PERCENTAGE = .02", "var_name": "MAX_PERCENTAGE"}, {"original_string": "static final int MAX_ALLOWED_INTERACTIONS_INCLUDING_LEVEL_MATCH = 600;", "modifier": "static final", "type": "int", "declarator": "MAX_ALLOWED_INTERACTIONS_INCLUDING_LEVEL_MATCH = 600", "var_name": "MAX_ALLOWED_INTERACTIONS_INCLUDING_LEVEL_MATCH"}], "methods": [{"identifier": "main", "parameters": "(String [] args)", "modifiers": "public static", "return": "void", "signature": "void main(String [] args)", "full_signature": "public static void main(String [] args)", "class_method_signature": "ProfileToNetworkDriver.main(String [] args)", "testcase": false, "constructor": false}, {"identifier": "processProfile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processProfile()", "full_signature": "private void processProfile()", "class_method_signature": "ProfileToNetworkDriver.processProfile()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Reader in, Writer out)", "modifiers": "public", "return": "void", "signature": "void process(Reader in, Writer out)", "full_signature": "public void process(Reader in, Writer out)", "class_method_signature": "ProfileToNetworkDriver.process(Reader in, Writer out)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Reader source, char delim)", "modifiers": "public", "return": "void", "signature": "void load(Reader source, char delim)", "full_signature": "public void load(Reader source, char delim)", "class_method_signature": "ProfileToNetworkDriver.load(Reader source, char delim)", "testcase": false, "constructor": false}, {"identifier": "loadSparse", "parameters": "(Reader source, char delim)", "modifiers": "public", "return": "void", "signature": "void loadSparse(Reader source, char delim)", "full_signature": "public void loadSparse(Reader source, char delim)", "class_method_signature": "ProfileToNetworkDriver.loadSparse(Reader source, char delim)", "testcase": false, "constructor": false}, {"identifier": "loadNetwork", "parameters": "(Reader source, char delim)", "modifiers": "public", "return": "void", "signature": "void loadNetwork(Reader source, char delim)", "full_signature": "public void loadNetwork(Reader source, char delim)", "class_method_signature": "ProfileToNetworkDriver.loadNetwork(Reader source, char delim)", "testcase": false, "constructor": false}, {"identifier": "convertProfileToNetwork", "parameters": "()", "modifiers": "private", "return": "Matrix", "signature": "Matrix convertProfileToNetwork()", "full_signature": "private Matrix convertProfileToNetwork()", "class_method_signature": "ProfileToNetworkDriver.convertProfileToNetwork()", "testcase": false, "constructor": false}, {"identifier": "levelControl", "parameters": "(KHeap[] topInteractions)", "modifiers": "", "return": "void", "signature": "void levelControl(KHeap[] topInteractions)", "full_signature": " void levelControl(KHeap[] topInteractions)", "class_method_signature": "ProfileToNetworkDriver.levelControl(KHeap[] topInteractions)", "testcase": false, "constructor": false}, {"identifier": "getNumGenes", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumGenes()", "full_signature": " int getNumGenes()", "class_method_signature": "ProfileToNetworkDriver.getNumGenes()", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(PrintWriter writer)", "modifiers": "public", "return": "int", "signature": "int dump(PrintWriter writer)", "full_signature": "public int dump(PrintWriter writer)", "class_method_signature": "ProfileToNetworkDriver.dump(PrintWriter writer)", "testcase": false, "constructor": false}, {"identifier": "getCommandLineArgs", "parameters": "(String [] args)", "modifiers": "private", "return": "boolean", "signature": "boolean getCommandLineArgs(String [] args)", "full_signature": "private boolean getCommandLineArgs(String [] args)", "class_method_signature": "ProfileToNetworkDriver.getCommandLineArgs(String [] args)", "testcase": false, "constructor": false}, {"identifier": "setupLogging", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupLogging()", "full_signature": "private void setupLogging()", "class_method_signature": "ProfileToNetworkDriver.setupLogging()", "testcase": false, "constructor": false}, {"identifier": "setK", "parameters": "(int k)", "modifiers": "public", "return": "void", "signature": "void setK(int k)", "full_signature": "public void setK(int k)", "class_method_signature": "ProfileToNetworkDriver.setK(int k)", "testcase": false, "constructor": false}, {"identifier": "setSepChar", "parameters": "(char sepChar)", "modifiers": "public", "return": "void", "signature": "void setSepChar(char sepChar)", "full_signature": "public void setSepChar(char sepChar)", "class_method_signature": "ProfileToNetworkDriver.setSepChar(char sepChar)", "testcase": false, "constructor": false}, {"identifier": "setCorrelationType", "parameters": "(CorrelationType corType)", "modifiers": "public", "return": "void", "signature": "void setCorrelationType(CorrelationType corType)", "full_signature": "public void setCorrelationType(CorrelationType corType)", "class_method_signature": "ProfileToNetworkDriver.setCorrelationType(CorrelationType corType)", "testcase": false, "constructor": false}, {"identifier": "setEqualElementBin", "parameters": "(boolean equalElementBin)", "modifiers": "public", "return": "void", "signature": "void setEqualElementBin(boolean equalElementBin)", "full_signature": "public void setEqualElementBin(boolean equalElementBin)", "class_method_signature": "ProfileToNetworkDriver.setEqualElementBin(boolean equalElementBin)", "testcase": false, "constructor": false}, {"identifier": "setSizeType", "parameters": "(SizeType sizeType)", "modifiers": "public", "return": "void", "signature": "void setSizeType(SizeType sizeType)", "full_signature": "public void setSizeType(SizeType sizeType)", "class_method_signature": "ProfileToNetworkDriver.setSizeType(SizeType sizeType)", "testcase": false, "constructor": false}, {"identifier": "setProfileType", "parameters": "(String profileType)", "modifiers": "public", "return": "void", "signature": "void setProfileType(String profileType)", "full_signature": "public void setProfileType(String profileType)", "class_method_signature": "ProfileToNetworkDriver.setProfileType(String profileType)", "testcase": false, "constructor": false}, {"identifier": "setMaxMissingPercentage", "parameters": "(double missingPercentage)", "modifiers": "public", "return": "void", "signature": "void setMaxMissingPercentage(double missingPercentage)", "full_signature": "public void setMaxMissingPercentage(double missingPercentage)", "class_method_signature": "ProfileToNetworkDriver.setMaxMissingPercentage(double missingPercentage)", "testcase": false, "constructor": false}, {"identifier": "setSynSepChar", "parameters": "( char synSepChar )", "modifiers": "public", "return": "void", "signature": "void setSynSepChar( char synSepChar )", "full_signature": "public void setSynSepChar( char synSepChar )", "class_method_signature": "ProfileToNetworkDriver.setSynSepChar( char synSepChar )", "testcase": false, "constructor": false}, {"identifier": "setSynIdColumn", "parameters": "( int col )", "modifiers": "public", "return": "void", "signature": "void setSynIdColumn( int col )", "full_signature": "public void setSynIdColumn( int col )", "class_method_signature": "ProfileToNetworkDriver.setSynIdColumn( int col )", "testcase": false, "constructor": false}, {"identifier": "setSynNameColumn", "parameters": "( int col )", "modifiers": "public", "return": "void", "signature": "void setSynNameColumn( int col )", "full_signature": "public void setSynNameColumn( int col )", "class_method_signature": "ProfileToNetworkDriver.setSynNameColumn( int col )", "testcase": false, "constructor": false}, {"identifier": "setSynReader", "parameters": "(Reader synReader)", "modifiers": "public", "return": "void", "signature": "void setSynReader(Reader synReader)", "full_signature": "public void setSynReader(Reader synReader)", "class_method_signature": "ProfileToNetworkDriver.setSynReader(Reader synReader)", "testcase": false, "constructor": false}, {"identifier": "isNoHeader", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNoHeader()", "full_signature": "public boolean isNoHeader()", "class_method_signature": "ProfileToNetworkDriver.isNoHeader()", "testcase": false, "constructor": false}, {"identifier": "setNoHeader", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setNoHeader(boolean val)", "full_signature": "public void setNoHeader(boolean val)", "class_method_signature": "ProfileToNetworkDriver.setNoHeader(boolean val)", "testcase": false, "constructor": false}, {"identifier": "setProgressReporter", "parameters": "(ProgressReporter progress)", "modifiers": "public", "return": "void", "signature": "void setProgressReporter(ProgressReporter progress)", "full_signature": "public void setProgressReporter(ProgressReporter progress)", "class_method_signature": "ProfileToNetworkDriver.setProgressReporter(ProgressReporter progress)", "testcase": false, "constructor": false}, {"identifier": "getProgressReporter", "parameters": "()", "modifiers": "public", "return": "ProgressReporter", "signature": "ProgressReporter getProgressReporter()", "full_signature": "public ProgressReporter getProgressReporter()", "class_method_signature": "ProfileToNetworkDriver.getProgressReporter()", "testcase": false, "constructor": false}, {"identifier": "getThreshold", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getThreshold()", "full_signature": "public String getThreshold()", "class_method_signature": "ProfileToNetworkDriver.getThreshold()", "testcase": false, "constructor": false}, {"identifier": "setThreshold", "parameters": "(String threshold)", "modifiers": "public", "return": "void", "signature": "void setThreshold(String threshold)", "full_signature": "public void setThreshold(String threshold)", "class_method_signature": "ProfileToNetworkDriver.setThreshold(String threshold)", "testcase": false, "constructor": false}, {"identifier": "isKeepAllTies", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isKeepAllTies()", "full_signature": "public boolean isKeepAllTies()", "class_method_signature": "ProfileToNetworkDriver.isKeepAllTies()", "testcase": false, "constructor": false}, {"identifier": "setKeepAllTies", "parameters": "(boolean keepAllTies)", "modifiers": "public", "return": "void", "signature": "void setKeepAllTies(boolean keepAllTies)", "full_signature": "public void setKeepAllTies(boolean keepAllTies)", "class_method_signature": "ProfileToNetworkDriver.setKeepAllTies(boolean keepAllTies)", "testcase": false, "constructor": false}, {"identifier": "isLimitTies", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLimitTies()", "full_signature": "public boolean isLimitTies()", "class_method_signature": "ProfileToNetworkDriver.isLimitTies()", "testcase": false, "constructor": false}, {"identifier": "setLimitTies", "parameters": "(boolean limitTies)", "modifiers": "public", "return": "void", "signature": "void setLimitTies(boolean limitTies)", "full_signature": "public void setLimitTies(boolean limitTies)", "class_method_signature": "ProfileToNetworkDriver.setLimitTies(boolean limitTies)", "testcase": false, "constructor": false}, {"identifier": "logLine", "parameters": "(String msg, String [] line)", "modifiers": "private", "return": "void", "signature": "void logLine(String msg, String [] line)", "full_signature": "private void logLine(String msg, String [] line)", "class_method_signature": "ProfileToNetworkDriver.logLine(String msg, String [] line)", "testcase": false, "constructor": false}], "file": "engine/src/main/java/org/genemania/engine/core/evaluation/ProfileToNetworkDriver.java"}, "focal_method": {"identifier": "levelControl", "parameters": "(KHeap[] topInteractions)", "modifiers": "", "return": "void", "body": "void levelControl(KHeap[] topInteractions) {\n        \n        int numGenes = getNumGenes();\n        int sizeLimit = Math.max(k, Math.min((int)(MAX_PERCENTAGE*numGenes), MAX_ALLOWED_INTERACTIONS_INCLUDING_LEVEL_MATCH));\n        logger.debug(\"level control at size limit of \" + sizeLimit);\n        for (KHeap heap: topInteractions) {\n            if (heap.size() > sizeLimit) {\n                double lastLevel = heap.getWeight(0);\n                int sizeBefore = heap.size();\n                heap.popLE(lastLevel);\n                logger.debug(\"trimmed heap from \" + sizeBefore + \" to \" + heap.size());\n            }            \n        }        \n    }", "signature": "void levelControl(KHeap[] topInteractions)", "full_signature": " void levelControl(KHeap[] topInteractions)", "class_method_signature": "ProfileToNetworkDriver.levelControl(KHeap[] topInteractions)", "testcase": false, "constructor": false, "invocations": ["getNumGenes", "max", "min", "debug", "size", "getWeight", "size", "popLE", "debug", "size"]}, "repository": {"repo_id": 12473833, "url": "https://github.com/GeneMANIA/genemania", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 34, "size": 44902, "license": "licensed"}}