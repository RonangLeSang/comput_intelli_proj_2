{"test_class": {"identifier": "VersionTest", "superclass": "", "interfaces": "", "fields": [], "file": "robocode.core/src/test/java/net/sf/robocode/version/VersionTest.java"}, "test_case": {"identifier": "greaterShortBeta3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void greaterShortBeta3() {\n\t\tAssert.assertTrue(Version.compare(\"1.4 Beta\", \"1.1\") > 0);\n\t}", "signature": "void greaterShortBeta3()", "full_signature": "@Test public void greaterShortBeta3()", "class_method_signature": "VersionTest.greaterShortBeta3()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "compare"]}, "focal_class": {"identifier": "Version", "superclass": "", "interfaces": "implements Comparable<Object>", "fields": [{"original_string": "private final String version;", "modifier": "private final", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "private final int major;", "modifier": "private final", "type": "int", "declarator": "major", "var_name": "major"}, {"original_string": "private final int minor;", "modifier": "private final", "type": "int", "declarator": "minor", "var_name": "minor"}, {"original_string": "private final int revision;", "modifier": "private final", "type": "int", "declarator": "revision", "var_name": "revision"}, {"original_string": "private final int build;", "modifier": "private final", "type": "int", "declarator": "build", "var_name": "build"}, {"original_string": "private final int maturity;", "modifier": "private final", "type": "int", "declarator": "maturity", "var_name": "maturity"}, {"original_string": "private final int maturity_version;", "modifier": "private final", "type": "int", "declarator": "maturity_version", "var_name": "maturity_version"}], "methods": [{"identifier": "Version", "parameters": "(String version)", "modifiers": "public", "return": "", "signature": " Version(String version)", "full_signature": "public  Version(String version)", "class_method_signature": "Version.Version(String version)", "testcase": false, "constructor": true}, {"identifier": "isAlpha", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAlpha()", "full_signature": "public boolean isAlpha()", "class_method_signature": "Version.isAlpha()", "testcase": false, "constructor": false}, {"identifier": "isBeta", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBeta()", "full_signature": "public boolean isBeta()", "class_method_signature": "Version.isBeta()", "testcase": false, "constructor": false}, {"identifier": "isFinal", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFinal()", "full_signature": "public boolean isFinal()", "class_method_signature": "Version.isFinal()", "testcase": false, "constructor": false}, {"identifier": "getMajor", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMajor()", "full_signature": "public int getMajor()", "class_method_signature": "Version.getMajor()", "testcase": false, "constructor": false}, {"identifier": "getMinor", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinor()", "full_signature": "public int getMinor()", "class_method_signature": "Version.getMinor()", "testcase": false, "constructor": false}, {"identifier": "getRevision", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRevision()", "full_signature": "public int getRevision()", "class_method_signature": "Version.getRevision()", "testcase": false, "constructor": false}, {"identifier": "getBuild", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBuild()", "full_signature": "public int getBuild()", "class_method_signature": "Version.getBuild()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Version.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object o)", "modifiers": "public", "return": "int", "signature": "int compareTo(Object o)", "full_signature": "public int compareTo(Object o)", "class_method_signature": "Version.compareTo(Object o)", "testcase": false, "constructor": false}, {"identifier": "getVersionLong", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getVersionLong()", "full_signature": "private long getVersionLong()", "class_method_signature": "Version.getVersionLong()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(String oneVersion, String anotherVersion)", "modifiers": "public static", "return": "int", "signature": "int compare(String oneVersion, String anotherVersion)", "full_signature": "public static int compare(String oneVersion, String anotherVersion)", "class_method_signature": "Version.compare(String oneVersion, String anotherVersion)", "testcase": false, "constructor": false}, {"identifier": "isBeta", "parameters": "(String version)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBeta(String version)", "full_signature": "public static boolean isBeta(String version)", "class_method_signature": "Version.isBeta(String version)", "testcase": false, "constructor": false}, {"identifier": "isFinal", "parameters": "(String version)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFinal(String version)", "full_signature": "public static boolean isFinal(String version)", "class_method_signature": "Version.isFinal(String version)", "testcase": false, "constructor": false}], "file": "robocode.core/src/main/java/net/sf/robocode/version/Version.java"}, "focal_method": {"identifier": "compare", "parameters": "(String oneVersion, String anotherVersion)", "modifiers": "public static", "return": "int", "body": "public static int compare(String oneVersion, String anotherVersion) {\n\t\treturn new Version(oneVersion).compareTo(new Version(anotherVersion));\n\t}", "signature": "int compare(String oneVersion, String anotherVersion)", "full_signature": "public static int compare(String oneVersion, String anotherVersion)", "class_method_signature": "Version.compare(String oneVersion, String anotherVersion)", "testcase": false, "constructor": false, "invocations": ["compareTo"]}, "repository": {"repo_id": 5487921, "url": "https://github.com/robo-code/robocode", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 458, "size": 66364, "license": "licensed"}}