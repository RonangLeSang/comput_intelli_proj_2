{"test_class": {"identifier": "DbImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double STRESS_FACTOR = Double.parseDouble(System.getProperty(\"STRESS_FACTOR\", \"1\"));", "modifier": "public static final", "type": "double", "declarator": "STRESS_FACTOR = Double.parseDouble(System.getProperty(\"STRESS_FACTOR\", \"1\"))", "var_name": "STRESS_FACTOR"}, {"original_string": "private static final String DOES_NOT_EXIST_FILENAME = \"/foo/bar/doowop/idontexist\";", "modifier": "private static final", "type": "String", "declarator": "DOES_NOT_EXIST_FILENAME = \"/foo/bar/doowop/idontexist\"", "var_name": "DOES_NOT_EXIST_FILENAME"}, {"original_string": "private static final String DOES_NOT_EXIST_FILENAME_PATTERN = \".foo.bar.doowop.idontexist\";", "modifier": "private static final", "type": "String", "declarator": "DOES_NOT_EXIST_FILENAME_PATTERN = \".foo.bar.doowop.idontexist\"", "var_name": "DOES_NOT_EXIST_FILENAME_PATTERN"}, {"original_string": "private File databaseDir;", "modifier": "private", "type": "File", "declarator": "databaseDir", "var_name": "databaseDir"}, {"original_string": "private final ArrayList<DbStringWrapper> opened = new ArrayList<>();", "modifier": "private final", "type": "ArrayList<DbStringWrapper>", "declarator": "opened = new ArrayList<>()", "var_name": "opened"}], "file": "leveldb/src/test/java/org/iq80/leveldb/impl/DbImplTest.java"}, "test_case": {"identifier": "testEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmpty()\n            throws Exception\n    {\n        Options options = new Options();\n        File databaseDir = this.databaseDir;\n        DbStringWrapper db = new DbStringWrapper(options, databaseDir);\n        assertNull(db.get(\"foo\"));\n    }", "signature": "void testEmpty()", "full_signature": "@Test public void testEmpty()", "class_method_signature": "DbImplTest.testEmpty()", "testcase": true, "constructor": false, "invocations": ["assertNull", "get"]}, "focal_class": {"identifier": "DbImpl", "superclass": "", "interfaces": "implements DB", "fields": [{"original_string": "private final Options options;", "modifier": "private final", "type": "Options", "declarator": "options", "var_name": "options"}, {"original_string": "private final File databaseDir;", "modifier": "private final", "type": "File", "declarator": "databaseDir", "var_name": "databaseDir"}, {"original_string": "private final TableCache tableCache;", "modifier": "private final", "type": "TableCache", "declarator": "tableCache", "var_name": "tableCache"}, {"original_string": "private final DbLock dbLock;", "modifier": "private final", "type": "DbLock", "declarator": "dbLock", "var_name": "dbLock"}, {"original_string": "private final VersionSet versions;", "modifier": "private final", "type": "VersionSet", "declarator": "versions", "var_name": "versions"}, {"original_string": "private final AtomicBoolean shuttingDown = new AtomicBoolean();", "modifier": "private final", "type": "AtomicBoolean", "declarator": "shuttingDown = new AtomicBoolean()", "var_name": "shuttingDown"}, {"original_string": "private final ReentrantLock mutex = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "mutex = new ReentrantLock()", "var_name": "mutex"}, {"original_string": "private final Condition backgroundCondition = mutex.newCondition();", "modifier": "private final", "type": "Condition", "declarator": "backgroundCondition = mutex.newCondition()", "var_name": "backgroundCondition"}, {"original_string": "private final List<Long> pendingOutputs = new ArrayList<>();", "modifier": "private final", "type": "List<Long>", "declarator": "pendingOutputs = new ArrayList<>()", "var_name": "pendingOutputs"}, {"original_string": "private LogWriter log;", "modifier": "private", "type": "LogWriter", "declarator": "log", "var_name": "log"}, {"original_string": "private MemTable memTable;", "modifier": "private", "type": "MemTable", "declarator": "memTable", "var_name": "memTable"}, {"original_string": "private MemTable immutableMemTable;", "modifier": "private", "type": "MemTable", "declarator": "immutableMemTable", "var_name": "immutableMemTable"}, {"original_string": "private final InternalKeyComparator internalKeyComparator;", "modifier": "private final", "type": "InternalKeyComparator", "declarator": "internalKeyComparator", "var_name": "internalKeyComparator"}, {"original_string": "private volatile Throwable backgroundException;", "modifier": "private volatile", "type": "Throwable", "declarator": "backgroundException", "var_name": "backgroundException"}, {"original_string": "private final ExecutorService compactionExecutor;", "modifier": "private final", "type": "ExecutorService", "declarator": "compactionExecutor", "var_name": "compactionExecutor"}, {"original_string": "private Future<?> backgroundCompaction;", "modifier": "private", "type": "Future<?>", "declarator": "backgroundCompaction", "var_name": "backgroundCompaction"}, {"original_string": "private ManualCompaction manualCompaction;", "modifier": "private", "type": "ManualCompaction", "declarator": "manualCompaction", "var_name": "manualCompaction"}, {"original_string": "private final Object suspensionMutex = new Object();", "modifier": "private final", "type": "Object", "declarator": "suspensionMutex = new Object()", "var_name": "suspensionMutex"}, {"original_string": "private int suspensionCounter;", "modifier": "private", "type": "int", "declarator": "suspensionCounter", "var_name": "suspensionCounter"}], "methods": [{"identifier": "DbImpl", "parameters": "(Options options, File databaseDir)", "modifiers": "public", "return": "", "signature": " DbImpl(Options options, File databaseDir)", "full_signature": "public  DbImpl(Options options, File databaseDir)", "class_method_signature": "DbImpl.DbImpl(Options options, File databaseDir)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DbImpl.close()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String getProperty(String name)", "full_signature": "@Override public String getProperty(String name)", "class_method_signature": "DbImpl.getProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "deleteObsoleteFiles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteObsoleteFiles()", "full_signature": "private void deleteObsoleteFiles()", "class_method_signature": "DbImpl.deleteObsoleteFiles()", "testcase": false, "constructor": false}, {"identifier": "flushMemTable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flushMemTable()", "full_signature": "public void flushMemTable()", "class_method_signature": "DbImpl.flushMemTable()", "testcase": false, "constructor": false}, {"identifier": "compactRange", "parameters": "(int level, Slice start, Slice end)", "modifiers": "public", "return": "void", "signature": "void compactRange(int level, Slice start, Slice end)", "full_signature": "public void compactRange(int level, Slice start, Slice end)", "class_method_signature": "DbImpl.compactRange(int level, Slice start, Slice end)", "testcase": false, "constructor": false}, {"identifier": "maybeScheduleCompaction", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeScheduleCompaction()", "full_signature": "private void maybeScheduleCompaction()", "class_method_signature": "DbImpl.maybeScheduleCompaction()", "testcase": false, "constructor": false}, {"identifier": "checkBackgroundException", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkBackgroundException()", "full_signature": "public void checkBackgroundException()", "class_method_signature": "DbImpl.checkBackgroundException()", "testcase": false, "constructor": false}, {"identifier": "backgroundCall", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void backgroundCall()", "full_signature": "private void backgroundCall()", "class_method_signature": "DbImpl.backgroundCall()", "testcase": false, "constructor": false}, {"identifier": "backgroundCompaction", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void backgroundCompaction()", "full_signature": "private void backgroundCompaction()", "class_method_signature": "DbImpl.backgroundCompaction()", "testcase": false, "constructor": false}, {"identifier": "cleanupCompaction", "parameters": "(CompactionState compactionState)", "modifiers": "private", "return": "void", "signature": "void cleanupCompaction(CompactionState compactionState)", "full_signature": "private void cleanupCompaction(CompactionState compactionState)", "class_method_signature": "DbImpl.cleanupCompaction(CompactionState compactionState)", "testcase": false, "constructor": false}, {"identifier": "recoverLogFile", "parameters": "(long fileNumber, VersionEdit edit)", "modifiers": "private", "return": "long", "signature": "long recoverLogFile(long fileNumber, VersionEdit edit)", "full_signature": "private long recoverLogFile(long fileNumber, VersionEdit edit)", "class_method_signature": "DbImpl.recoverLogFile(long fileNumber, VersionEdit edit)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] get(byte[] key)", "full_signature": "@Override public byte[] get(byte[] key)", "class_method_signature": "DbImpl.get(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(byte[] key, ReadOptions options)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] get(byte[] key, ReadOptions options)", "full_signature": "@Override public byte[] get(byte[] key, ReadOptions options)", "class_method_signature": "DbImpl.get(byte[] key, ReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(byte[] key, byte[] value)", "modifiers": "@Override public", "return": "void", "signature": "void put(byte[] key, byte[] value)", "full_signature": "@Override public void put(byte[] key, byte[] value)", "class_method_signature": "DbImpl.put(byte[] key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(byte[] key, byte[] value, WriteOptions options)", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot put(byte[] key, byte[] value, WriteOptions options)", "full_signature": "@Override public Snapshot put(byte[] key, byte[] value, WriteOptions options)", "class_method_signature": "DbImpl.put(byte[] key, byte[] value, WriteOptions options)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "void", "signature": "void delete(byte[] key)", "full_signature": "@Override public void delete(byte[] key)", "class_method_signature": "DbImpl.delete(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(byte[] key, WriteOptions options)", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot delete(byte[] key, WriteOptions options)", "full_signature": "@Override public Snapshot delete(byte[] key, WriteOptions options)", "class_method_signature": "DbImpl.delete(byte[] key, WriteOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(WriteBatch updates)", "modifiers": "@Override public", "return": "void", "signature": "void write(WriteBatch updates)", "full_signature": "@Override public void write(WriteBatch updates)", "class_method_signature": "DbImpl.write(WriteBatch updates)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(WriteBatch updates, WriteOptions options)", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot write(WriteBatch updates, WriteOptions options)", "full_signature": "@Override public Snapshot write(WriteBatch updates, WriteOptions options)", "class_method_signature": "DbImpl.write(WriteBatch updates, WriteOptions options)", "testcase": false, "constructor": false}, {"identifier": "writeInternal", "parameters": "(WriteBatchImpl updates, WriteOptions options)", "modifiers": "public", "return": "Snapshot", "signature": "Snapshot writeInternal(WriteBatchImpl updates, WriteOptions options)", "full_signature": "public Snapshot writeInternal(WriteBatchImpl updates, WriteOptions options)", "class_method_signature": "DbImpl.writeInternal(WriteBatchImpl updates, WriteOptions options)", "testcase": false, "constructor": false}, {"identifier": "createWriteBatch", "parameters": "()", "modifiers": "@Override public", "return": "WriteBatch", "signature": "WriteBatch createWriteBatch()", "full_signature": "@Override public WriteBatch createWriteBatch()", "class_method_signature": "DbImpl.createWriteBatch()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "SeekingIteratorAdapter", "signature": "SeekingIteratorAdapter iterator()", "full_signature": "@Override public SeekingIteratorAdapter iterator()", "class_method_signature": "DbImpl.iterator()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(ReadOptions options)", "modifiers": "@Override public", "return": "SeekingIteratorAdapter", "signature": "SeekingIteratorAdapter iterator(ReadOptions options)", "full_signature": "@Override public SeekingIteratorAdapter iterator(ReadOptions options)", "class_method_signature": "DbImpl.iterator(ReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "internalIterable", "parameters": "()", "modifiers": "", "return": "SeekingIterable<InternalKey, Slice>", "signature": "SeekingIterable<InternalKey, Slice> internalIterable()", "full_signature": " SeekingIterable<InternalKey, Slice> internalIterable()", "class_method_signature": "DbImpl.internalIterable()", "testcase": false, "constructor": false}, {"identifier": "internalIterator", "parameters": "()", "modifiers": "", "return": "DbIterator", "signature": "DbIterator internalIterator()", "full_signature": " DbIterator internalIterator()", "class_method_signature": "DbImpl.internalIterator()", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot getSnapshot()", "full_signature": "@Override public Snapshot getSnapshot()", "class_method_signature": "DbImpl.getSnapshot()", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "(ReadOptions options)", "modifiers": "private", "return": "SnapshotImpl", "signature": "SnapshotImpl getSnapshot(ReadOptions options)", "full_signature": "private SnapshotImpl getSnapshot(ReadOptions options)", "class_method_signature": "DbImpl.getSnapshot(ReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "makeRoomForWrite", "parameters": "(boolean force)", "modifiers": "private", "return": "void", "signature": "void makeRoomForWrite(boolean force)", "full_signature": "private void makeRoomForWrite(boolean force)", "class_method_signature": "DbImpl.makeRoomForWrite(boolean force)", "testcase": false, "constructor": false}, {"identifier": "compactMemTable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void compactMemTable()", "full_signature": "public void compactMemTable()", "class_method_signature": "DbImpl.compactMemTable()", "testcase": false, "constructor": false}, {"identifier": "compactMemTableInternal", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void compactMemTableInternal()", "full_signature": "private void compactMemTableInternal()", "class_method_signature": "DbImpl.compactMemTableInternal()", "testcase": false, "constructor": false}, {"identifier": "writeLevel0Table", "parameters": "(MemTable mem, VersionEdit edit, Version base)", "modifiers": "private", "return": "void", "signature": "void writeLevel0Table(MemTable mem, VersionEdit edit, Version base)", "full_signature": "private void writeLevel0Table(MemTable mem, VersionEdit edit, Version base)", "class_method_signature": "DbImpl.writeLevel0Table(MemTable mem, VersionEdit edit, Version base)", "testcase": false, "constructor": false}, {"identifier": "buildTable", "parameters": "(SeekingIterable<InternalKey, Slice> data, long fileNumber)", "modifiers": "private", "return": "FileMetaData", "signature": "FileMetaData buildTable(SeekingIterable<InternalKey, Slice> data, long fileNumber)", "full_signature": "private FileMetaData buildTable(SeekingIterable<InternalKey, Slice> data, long fileNumber)", "class_method_signature": "DbImpl.buildTable(SeekingIterable<InternalKey, Slice> data, long fileNumber)", "testcase": false, "constructor": false}, {"identifier": "doCompactionWork", "parameters": "(CompactionState compactionState)", "modifiers": "private", "return": "void", "signature": "void doCompactionWork(CompactionState compactionState)", "full_signature": "private void doCompactionWork(CompactionState compactionState)", "class_method_signature": "DbImpl.doCompactionWork(CompactionState compactionState)", "testcase": false, "constructor": false}, {"identifier": "openCompactionOutputFile", "parameters": "(CompactionState compactionState)", "modifiers": "private", "return": "void", "signature": "void openCompactionOutputFile(CompactionState compactionState)", "full_signature": "private void openCompactionOutputFile(CompactionState compactionState)", "class_method_signature": "DbImpl.openCompactionOutputFile(CompactionState compactionState)", "testcase": false, "constructor": false}, {"identifier": "finishCompactionOutputFile", "parameters": "(CompactionState compactionState)", "modifiers": "private", "return": "void", "signature": "void finishCompactionOutputFile(CompactionState compactionState)", "full_signature": "private void finishCompactionOutputFile(CompactionState compactionState)", "class_method_signature": "DbImpl.finishCompactionOutputFile(CompactionState compactionState)", "testcase": false, "constructor": false}, {"identifier": "installCompactionResults", "parameters": "(CompactionState compact)", "modifiers": "private", "return": "void", "signature": "void installCompactionResults(CompactionState compact)", "full_signature": "private void installCompactionResults(CompactionState compact)", "class_method_signature": "DbImpl.installCompactionResults(CompactionState compact)", "testcase": false, "constructor": false}, {"identifier": "numberOfFilesInLevel", "parameters": "(int level)", "modifiers": "", "return": "int", "signature": "int numberOfFilesInLevel(int level)", "full_signature": " int numberOfFilesInLevel(int level)", "class_method_signature": "DbImpl.numberOfFilesInLevel(int level)", "testcase": false, "constructor": false}, {"identifier": "getApproximateSizes", "parameters": "(Range... ranges)", "modifiers": "@Override public", "return": "long[]", "signature": "long[] getApproximateSizes(Range... ranges)", "full_signature": "@Override public long[] getApproximateSizes(Range... ranges)", "class_method_signature": "DbImpl.getApproximateSizes(Range... ranges)", "testcase": false, "constructor": false}, {"identifier": "getApproximateSizes", "parameters": "(Range range)", "modifiers": "public", "return": "long", "signature": "long getApproximateSizes(Range range)", "full_signature": "public long getApproximateSizes(Range range)", "class_method_signature": "DbImpl.getApproximateSizes(Range range)", "testcase": false, "constructor": false}, {"identifier": "getMaxNextLevelOverlappingBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxNextLevelOverlappingBytes()", "full_signature": "public long getMaxNextLevelOverlappingBytes()", "class_method_signature": "DbImpl.getMaxNextLevelOverlappingBytes()", "testcase": false, "constructor": false}, {"identifier": "readWriteBatch", "parameters": "(SliceInput record, int updateSize)", "modifiers": "private", "return": "WriteBatchImpl", "signature": "WriteBatchImpl readWriteBatch(SliceInput record, int updateSize)", "full_signature": "private WriteBatchImpl readWriteBatch(SliceInput record, int updateSize)", "class_method_signature": "DbImpl.readWriteBatch(SliceInput record, int updateSize)", "testcase": false, "constructor": false}, {"identifier": "writeWriteBatch", "parameters": "(WriteBatchImpl updates, long sequenceBegin)", "modifiers": "private", "return": "Slice", "signature": "Slice writeWriteBatch(WriteBatchImpl updates, long sequenceBegin)", "full_signature": "private Slice writeWriteBatch(WriteBatchImpl updates, long sequenceBegin)", "class_method_signature": "DbImpl.writeWriteBatch(WriteBatchImpl updates, long sequenceBegin)", "testcase": false, "constructor": false}, {"identifier": "suspendCompactions", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void suspendCompactions()", "full_signature": "@Override public void suspendCompactions()", "class_method_signature": "DbImpl.suspendCompactions()", "testcase": false, "constructor": false}, {"identifier": "resumeCompactions", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resumeCompactions()", "full_signature": "@Override public void resumeCompactions()", "class_method_signature": "DbImpl.resumeCompactions()", "testcase": false, "constructor": false}, {"identifier": "compactRange", "parameters": "(byte[] begin, byte[] end)", "modifiers": "@Override public", "return": "void", "signature": "void compactRange(byte[] begin, byte[] end)", "full_signature": "@Override public void compactRange(byte[] begin, byte[] end)", "class_method_signature": "DbImpl.compactRange(byte[] begin, byte[] end)", "testcase": false, "constructor": false}], "file": "leveldb/src/main/java/org/iq80/leveldb/impl/DbImpl.java"}, "focal_method": {"identifier": "get", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] get(byte[] key)\n            throws DBException\n    {\n        return get(key, new ReadOptions());\n    }", "signature": "byte[] get(byte[] key)", "full_signature": "@Override public byte[] get(byte[] key)", "class_method_signature": "DbImpl.get(byte[] key)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 2101910, "url": "https://github.com/dain/leveldb", "language": "Java", "is_fork": false, "fork_count": 319, "stargazer_count": 1202, "size": 651, "license": "licensed"}}