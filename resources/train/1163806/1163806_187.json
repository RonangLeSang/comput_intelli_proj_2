{"test_class": {"identifier": "CheckoutActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> EMPTY_CLOAKED_PATHS_LIST = Collections.emptyList();", "modifier": "private static final", "type": "List<String>", "declarator": "EMPTY_CLOAKED_PATHS_LIST = Collections.emptyList()", "var_name": "EMPTY_CLOAKED_PATHS_LIST"}, {"original_string": "private static final String MY_LABEL = \"MyLabel\";", "modifier": "private static final", "type": "String", "declarator": "MY_LABEL = \"MyLabel\"", "var_name": "MY_LABEL"}, {"original_string": "private FilePath hudsonWs;", "modifier": "private", "type": "FilePath", "declarator": "hudsonWs", "var_name": "hudsonWs"}, {"original_string": "private @Mock Server server;", "modifier": "private @Mock", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private @Mock Workspaces workspaces;", "modifier": "private @Mock", "type": "Workspaces", "declarator": "workspaces", "var_name": "workspaces"}, {"original_string": "private @Mock Workspace workspace;", "modifier": "private @Mock", "type": "Workspace", "declarator": "workspace", "var_name": "workspace"}, {"original_string": "private @Mock Project project;", "modifier": "private @Mock", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "private @Mock TaskListener taskListener;", "modifier": "private @Mock", "type": "TaskListener", "declarator": "taskListener", "var_name": "taskListener"}], "file": "tfs/src/test/java/hudson/plugins/tfs/actions/CheckoutActionTest.java"}, "test_case": {"identifier": "assertCheckoutBySingleVersionSpecDoesNotDeleteWorkspaceAtStartIfUsingUpdate", "parameters": "()", "modifiers": "@Bug(3882) @Test public", "return": "void", "body": "@Bug(3882)\n    @Test\n    public void assertCheckoutBySingleVersionSpecDoesNotDeleteWorkspaceAtStartIfUsingUpdate() throws Exception {\n        prepareCommonMocks();\n        when(workspaces.exists(\"workspace\")).thenReturn(true).thenReturn(true);\n        when(workspaces.getWorkspace(\"workspace\")).thenReturn(workspace);\n        \n        new CheckoutAction(\"workspace\", \"project\", EMPTY_CLOAKED_PATHS_LIST, \".\", true, false).checkoutBySingleVersionSpec(server, hudsonWs, MY_LABEL);\n        \n        verify(server).getWorkspaces();\n        verify(workspaces, times(2)).exists(\"workspace\");\n        verify(workspaces).getWorkspace(\"workspace\");\n        verify(workspaces).getWorkspaceMapping(anyString());\n        verifyNoMoreInteractions(workspaces);\n    }", "signature": "void assertCheckoutBySingleVersionSpecDoesNotDeleteWorkspaceAtStartIfUsingUpdate()", "full_signature": "@Bug(3882) @Test public void assertCheckoutBySingleVersionSpecDoesNotDeleteWorkspaceAtStartIfUsingUpdate()", "class_method_signature": "CheckoutActionTest.assertCheckoutBySingleVersionSpecDoesNotDeleteWorkspaceAtStartIfUsingUpdate()", "testcase": true, "constructor": false, "invocations": ["prepareCommonMocks", "thenReturn", "thenReturn", "when", "exists", "thenReturn", "when", "getWorkspace", "checkoutBySingleVersionSpec", "getWorkspaces", "verify", "exists", "verify", "times", "getWorkspace", "verify", "getWorkspaceMapping", "verify", "anyString", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "CheckoutAction", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String workspaceName;", "modifier": "private final", "type": "String", "declarator": "workspaceName", "var_name": "workspaceName"}, {"original_string": "private final String projectPath;", "modifier": "private final", "type": "String", "declarator": "projectPath", "var_name": "projectPath"}, {"original_string": "private final Collection<String> cloakedPaths;", "modifier": "private final", "type": "Collection<String>", "declarator": "cloakedPaths", "var_name": "cloakedPaths"}, {"original_string": "private final String localFolder;", "modifier": "private final", "type": "String", "declarator": "localFolder", "var_name": "localFolder"}, {"original_string": "private final boolean useUpdate;", "modifier": "private final", "type": "boolean", "declarator": "useUpdate", "var_name": "useUpdate"}, {"original_string": "private final boolean useOverwrite;", "modifier": "private final", "type": "boolean", "declarator": "useOverwrite", "var_name": "useOverwrite"}], "methods": [{"identifier": "CheckoutAction", "parameters": "(String workspaceName, String projectPath, Collection<String> cloakedPaths, String localFolder, boolean useUpdate, boolean useOverwrite)", "modifiers": "public", "return": "", "signature": " CheckoutAction(String workspaceName, String projectPath, Collection<String> cloakedPaths, String localFolder, boolean useUpdate, boolean useOverwrite)", "full_signature": "public  CheckoutAction(String workspaceName, String projectPath, Collection<String> cloakedPaths, String localFolder, boolean useUpdate, boolean useOverwrite)", "class_method_signature": "CheckoutAction.CheckoutAction(String workspaceName, String projectPath, Collection<String> cloakedPaths, String localFolder, boolean useUpdate, boolean useOverwrite)", "testcase": false, "constructor": true}, {"identifier": "checkout", "parameters": "(Server server, FilePath workspacePath, Calendar lastBuildTimestamp, Calendar currentBuildTimestamp)", "modifiers": "public", "return": "List<ChangeSet>", "signature": "List<ChangeSet> checkout(Server server, FilePath workspacePath, Calendar lastBuildTimestamp, Calendar currentBuildTimestamp)", "full_signature": "public List<ChangeSet> checkout(Server server, FilePath workspacePath, Calendar lastBuildTimestamp, Calendar currentBuildTimestamp)", "class_method_signature": "CheckoutAction.checkout(Server server, FilePath workspacePath, Calendar lastBuildTimestamp, Calendar currentBuildTimestamp)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(final Server server, final FilePath workspacePath, final VersionSpec lastBuildVersionSpec, final VersionSpec currentBuildVersionSpec)", "modifiers": "public", "return": "List<ChangeSet>", "signature": "List<ChangeSet> checkout(final Server server, final FilePath workspacePath, final VersionSpec lastBuildVersionSpec, final VersionSpec currentBuildVersionSpec)", "full_signature": "public List<ChangeSet> checkout(final Server server, final FilePath workspacePath, final VersionSpec lastBuildVersionSpec, final VersionSpec currentBuildVersionSpec)", "class_method_signature": "CheckoutAction.checkout(final Server server, final FilePath workspacePath, final VersionSpec lastBuildVersionSpec, final VersionSpec currentBuildVersionSpec)", "testcase": false, "constructor": false}, {"identifier": "checkoutBySingleVersionSpec", "parameters": "(Server server, FilePath workspacePath, String singleVersionSpec)", "modifiers": "public", "return": "List<ChangeSet>", "signature": "List<ChangeSet> checkoutBySingleVersionSpec(Server server, FilePath workspacePath, String singleVersionSpec)", "full_signature": "public List<ChangeSet> checkoutBySingleVersionSpec(Server server, FilePath workspacePath, String singleVersionSpec)", "class_method_signature": "CheckoutAction.checkoutBySingleVersionSpec(Server server, FilePath workspacePath, String singleVersionSpec)", "testcase": false, "constructor": false}, {"identifier": "determineCheckoutPath", "parameters": "(final FilePath workspacePath, final String localFolder)", "modifiers": "static", "return": "String", "signature": "String determineCheckoutPath(final FilePath workspacePath, final String localFolder)", "full_signature": "static String determineCheckoutPath(final FilePath workspacePath, final String localFolder)", "class_method_signature": "CheckoutAction.determineCheckoutPath(final FilePath workspacePath, final String localFolder)", "testcase": false, "constructor": false}, {"identifier": "getProject", "parameters": "(final Server server, final FilePath workspacePath)", "modifiers": "private", "return": "Project", "signature": "Project getProject(final Server server, final FilePath workspacePath)", "full_signature": "private Project getProject(final Server server, final FilePath workspacePath)", "class_method_signature": "CheckoutAction.getProject(final Server server, final FilePath workspacePath)", "testcase": false, "constructor": false}], "file": "tfs/src/main/java/hudson/plugins/tfs/actions/CheckoutAction.java"}, "focal_method": {"identifier": "checkoutBySingleVersionSpec", "parameters": "(Server server, FilePath workspacePath, String singleVersionSpec)", "modifiers": "public", "return": "List<ChangeSet>", "body": "public List<ChangeSet> checkoutBySingleVersionSpec(Server server, FilePath workspacePath, String singleVersionSpec) throws IOException, InterruptedException {\n        Project project = getProject(server, workspacePath);\n        final String normalizedFolder = determineCheckoutPath(workspacePath, localFolder);\n        project.getFiles(normalizedFolder, singleVersionSpec, useOverwrite);\n\n        return project.getDetailedHistory(singleVersionSpec);\n    }", "signature": "List<ChangeSet> checkoutBySingleVersionSpec(Server server, FilePath workspacePath, String singleVersionSpec)", "full_signature": "public List<ChangeSet> checkoutBySingleVersionSpec(Server server, FilePath workspacePath, String singleVersionSpec)", "class_method_signature": "CheckoutAction.checkoutBySingleVersionSpec(Server server, FilePath workspacePath, String singleVersionSpec)", "testcase": false, "constructor": false, "invocations": ["getProject", "determineCheckoutPath", "getFiles", "getDetailedHistory"]}, "repository": {"repo_id": 1163806, "url": "https://github.com/jenkinsci/tfs-plugin", "language": "Java", "is_fork": false, "fork_count": 165, "stargazer_count": 129, "size": 60608, "license": "licensed"}}