{"test_class": {"identifier": "HadoopDataSourceUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static final WindowsSupport WINDOWS_SUPPORT = new WindowsSupport();", "modifier": "@ClassRule\n    public static final", "type": "WindowsSupport", "declarator": "WINDOWS_SUPPORT = new WindowsSupport()", "var_name": "WINDOWS_SUPPORT"}, {"original_string": "@Rule\n    public final TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "core-project/asakusa-runtime/src/test/java/com/asakusafw/runtime/directio/hadoop/HadoopDataSourceUtilTest.java"}, "test_case": {"identifier": "search_direct_deep", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void search_direct_deep() throws Exception {\n        touch(\"a.csv\");\n        touch(\"a/a.csv\");\n        touch(\"a/a/a.csv\");\n        touch(\"a/a/a/a.csv\");\n        FileSystem fs = getTempFileSystem();\n        List<FileStatus> results = HadoopDataSourceUtil.search(fs, getBase(), FilePattern.compile(\"a/a/a.csv\"));\n        assertThat(normalize(results), is(path(\"a/a/a.csv\")));\n    }", "signature": "void search_direct_deep()", "full_signature": "@Test public void search_direct_deep()", "class_method_signature": "HadoopDataSourceUtilTest.search_direct_deep()", "testcase": true, "constructor": false, "invocations": ["touch", "touch", "touch", "touch", "getTempFileSystem", "search", "getBase", "compile", "assertThat", "normalize", "is", "path"]}, "focal_class": {"identifier": "HadoopDataSourceUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Log LOG = LogFactory.getLog(HadoopDataSourceUtil.class);", "modifier": "static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(HadoopDataSourceUtil.class)", "var_name": "LOG"}, {"original_string": "static final AtomicInteger THREAD_COUNTER = new AtomicInteger();", "modifier": "static final", "type": "AtomicInteger", "declarator": "THREAD_COUNTER = new AtomicInteger()", "var_name": "THREAD_COUNTER"}, {"original_string": "private static final ThreadFactory DAEMON_THREAD_FACTORY = new ThreadFactory() {\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            t.setName(String.format(\"DirectIO-MOVE-%d\", THREAD_COUNTER.incrementAndGet())); //$NON-NLS-1$\n            return t;\n        }\n    };", "modifier": "private static final", "type": "ThreadFactory", "declarator": "DAEMON_THREAD_FACTORY = new ThreadFactory() {\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            t.setName(String.format(\"DirectIO-MOVE-%d\", THREAD_COUNTER.incrementAndGet())); //$NON-NLS-1$\n            return t;\n        }\n    }", "var_name": "DAEMON_THREAD_FACTORY"}, {"original_string": "public static final String PREFIX = \"com.asakusafw.directio.\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX = \"com.asakusafw.directio.\"", "var_name": "PREFIX"}, {"original_string": "public static final String KEY_PATH = \"path\";", "modifier": "public static final", "type": "String", "declarator": "KEY_PATH = \"path\"", "var_name": "KEY_PATH"}, {"original_string": "private static final Pattern PREFIX_PATTERN = Pattern.compile('^' + Pattern.quote(PREFIX));", "modifier": "private static final", "type": "Pattern", "declarator": "PREFIX_PATTERN = Pattern.compile('^' + Pattern.quote(PREFIX))", "var_name": "PREFIX_PATTERN"}, {"original_string": "public static final String KEY_SYSTEM_DIR = \"com.asakusafw.output.system.dir\";", "modifier": "public static final", "type": "String", "declarator": "KEY_SYSTEM_DIR = \"com.asakusafw.output.system.dir\"", "var_name": "KEY_SYSTEM_DIR"}, {"original_string": "public static final String KEY_LOCAL_TEMPDIR = \"com.asakusafw.output.local.tempdir\";", "modifier": "public static final", "type": "String", "declarator": "KEY_LOCAL_TEMPDIR = \"com.asakusafw.output.local.tempdir\"", "var_name": "KEY_LOCAL_TEMPDIR"}, {"original_string": "private static final int PARALLEL_MOVE_MIN = 3;", "modifier": "private static final", "type": "int", "declarator": "PARALLEL_MOVE_MIN = 3", "var_name": "PARALLEL_MOVE_MIN"}, {"original_string": "public static final String PREFIX_BEGIN_MARK = \"tx-\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX_BEGIN_MARK = \"tx-\"", "var_name": "PREFIX_BEGIN_MARK"}, {"original_string": "public static final String PREFIX_COMMIT_MARK = \"commit-\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX_COMMIT_MARK = \"commit-\"", "var_name": "PREFIX_COMMIT_MARK"}, {"original_string": "public static final String DEFAULT_SYSTEM_DIR = \"_directio\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SYSTEM_DIR = \"_directio\"", "var_name": "DEFAULT_SYSTEM_DIR"}, {"original_string": "public static final String TRANSACTION_INFO_DIR = \"transactions\";", "modifier": "public static final", "type": "String", "declarator": "TRANSACTION_INFO_DIR = \"transactions\"", "var_name": "TRANSACTION_INFO_DIR"}, {"original_string": "public static final Charset COMMENT_CHARSET = StandardCharsets.UTF_8;", "modifier": "public static final", "type": "Charset", "declarator": "COMMENT_CHARSET = StandardCharsets.UTF_8", "var_name": "COMMENT_CHARSET"}], "methods": [{"identifier": "loadProfiles", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "List<DirectDataSourceProfile>", "signature": "List<DirectDataSourceProfile> loadProfiles(Configuration conf)", "full_signature": "public static List<DirectDataSourceProfile> loadProfiles(Configuration conf)", "class_method_signature": "HadoopDataSourceUtil.loadProfiles(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "normalizePath", "parameters": "(String path)", "modifiers": "private static", "return": "String", "signature": "String normalizePath(String path)", "full_signature": "private static String normalizePath(String path)", "class_method_signature": "HadoopDataSourceUtil.normalizePath(String path)", "testcase": false, "constructor": false}, {"identifier": "getConfigMap", "parameters": "(Configuration conf)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getConfigMap(Configuration conf)", "full_signature": "private static Map<String, String> getConfigMap(Configuration conf)", "class_method_signature": "HadoopDataSourceUtil.getConfigMap(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "createPrefixMap", "parameters": "(Map<?, ?> properties, String prefix)", "modifiers": "private static", "return": "NavigableMap<String, String>", "signature": "NavigableMap<String, String> createPrefixMap(Map<?, ?> properties, String prefix)", "full_signature": "private static NavigableMap<String, String> createPrefixMap(Map<?, ?> properties, String prefix)", "class_method_signature": "HadoopDataSourceUtil.createPrefixMap(Map<?, ?> properties, String prefix)", "testcase": false, "constructor": false}, {"identifier": "getChildKeys", "parameters": "(Map<String, String> properties, String delimitier)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> getChildKeys(Map<String, String> properties, String delimitier)", "full_signature": "private static Set<String> getChildKeys(Map<String, String> properties, String delimitier)", "class_method_signature": "HadoopDataSourceUtil.getChildKeys(Map<String, String> properties, String delimitier)", "testcase": false, "constructor": false}, {"identifier": "loadRepository", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "DirectDataSourceRepository", "signature": "DirectDataSourceRepository loadRepository(Configuration conf)", "full_signature": "public static DirectDataSourceRepository loadRepository(Configuration conf)", "class_method_signature": "HadoopDataSourceUtil.loadRepository(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "createRepository", "parameters": "(\n            Configuration conf,\n            List<DirectDataSourceProfile> profiles)", "modifiers": "static", "return": "DirectDataSourceRepository", "signature": "DirectDataSourceRepository createRepository(\n            Configuration conf,\n            List<DirectDataSourceProfile> profiles)", "full_signature": "static DirectDataSourceRepository createRepository(\n            Configuration conf,\n            List<DirectDataSourceProfile> profiles)", "class_method_signature": "HadoopDataSourceUtil.createRepository(\n            Configuration conf,\n            List<DirectDataSourceProfile> profiles)", "testcase": false, "constructor": false}, {"identifier": "createProvider", "parameters": "(Configuration conf, DirectDataSourceProfile profile)", "modifiers": "private static", "return": "DirectDataSourceProvider", "signature": "DirectDataSourceProvider createProvider(Configuration conf, DirectDataSourceProfile profile)", "full_signature": "private static DirectDataSourceProvider createProvider(Configuration conf, DirectDataSourceProfile profile)", "class_method_signature": "HadoopDataSourceUtil.createProvider(Configuration conf, DirectDataSourceProfile profile)", "testcase": false, "constructor": false}, {"identifier": "isLocalAttemptOutputDefined", "parameters": "(LocalFileSystem localFileSystem)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLocalAttemptOutputDefined(LocalFileSystem localFileSystem)", "full_signature": "public static boolean isLocalAttemptOutputDefined(LocalFileSystem localFileSystem)", "class_method_signature": "HadoopDataSourceUtil.isLocalAttemptOutputDefined(LocalFileSystem localFileSystem)", "testcase": false, "constructor": false}, {"identifier": "getLocalTemporaryDirectory", "parameters": "(LocalFileSystem localFileSystem)", "modifiers": "public static", "return": "Path", "signature": "Path getLocalTemporaryDirectory(LocalFileSystem localFileSystem)", "full_signature": "public static Path getLocalTemporaryDirectory(LocalFileSystem localFileSystem)", "class_method_signature": "HadoopDataSourceUtil.getLocalTemporaryDirectory(LocalFileSystem localFileSystem)", "testcase": false, "constructor": false}, {"identifier": "createContext", "parameters": "(String executionId, String datasourceId)", "modifiers": "public static", "return": "OutputTransactionContext", "signature": "OutputTransactionContext createContext(String executionId, String datasourceId)", "full_signature": "public static OutputTransactionContext createContext(String executionId, String datasourceId)", "class_method_signature": "HadoopDataSourceUtil.createContext(String executionId, String datasourceId)", "testcase": false, "constructor": false}, {"identifier": "createContext", "parameters": "(JobContext context, String datasourceId)", "modifiers": "@Deprecated public static", "return": "OutputTransactionContext", "signature": "OutputTransactionContext createContext(JobContext context, String datasourceId)", "full_signature": "@Deprecated public static OutputTransactionContext createContext(JobContext context, String datasourceId)", "class_method_signature": "HadoopDataSourceUtil.createContext(JobContext context, String datasourceId)", "testcase": false, "constructor": false}, {"identifier": "createContext", "parameters": "(TaskAttemptContext context, String datasourceId)", "modifiers": "@Deprecated public static", "return": "OutputAttemptContext", "signature": "OutputAttemptContext createContext(TaskAttemptContext context, String datasourceId)", "full_signature": "@Deprecated public static OutputAttemptContext createContext(TaskAttemptContext context, String datasourceId)", "class_method_signature": "HadoopDataSourceUtil.createContext(TaskAttemptContext context, String datasourceId)", "testcase": false, "constructor": false}, {"identifier": "getTransactionInfoExecutionId", "parameters": "(Path transactionInfoPath)", "modifiers": "public static", "return": "String", "signature": "String getTransactionInfoExecutionId(Path transactionInfoPath)", "full_signature": "public static String getTransactionInfoExecutionId(Path transactionInfoPath)", "class_method_signature": "HadoopDataSourceUtil.getTransactionInfoExecutionId(Path transactionInfoPath)", "testcase": false, "constructor": false}, {"identifier": "getMarkPath", "parameters": "(Path path, Pattern pattern)", "modifiers": "private static", "return": "String", "signature": "String getMarkPath(Path path, Pattern pattern)", "full_signature": "private static String getMarkPath(Path path, Pattern pattern)", "class_method_signature": "HadoopDataSourceUtil.getMarkPath(Path path, Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "getTransactionInfoPath", "parameters": "(Configuration conf, String executionId)", "modifiers": "public static", "return": "Path", "signature": "Path getTransactionInfoPath(Configuration conf, String executionId)", "full_signature": "public static Path getTransactionInfoPath(Configuration conf, String executionId)", "class_method_signature": "HadoopDataSourceUtil.getTransactionInfoPath(Configuration conf, String executionId)", "testcase": false, "constructor": false}, {"identifier": "getCommitMarkPath", "parameters": "(Configuration conf, String executionId)", "modifiers": "public static", "return": "Path", "signature": "Path getCommitMarkPath(Configuration conf, String executionId)", "full_signature": "public static Path getCommitMarkPath(Configuration conf, String executionId)", "class_method_signature": "HadoopDataSourceUtil.getCommitMarkPath(Configuration conf, String executionId)", "testcase": false, "constructor": false}, {"identifier": "findAllTransactionInfoFiles", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "Collection<FileStatus>", "signature": "Collection<FileStatus> findAllTransactionInfoFiles(Configuration conf)", "full_signature": "public static Collection<FileStatus> findAllTransactionInfoFiles(Configuration conf)", "class_method_signature": "HadoopDataSourceUtil.findAllTransactionInfoFiles(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getSystemDir", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "Path", "signature": "Path getSystemDir(Configuration conf)", "full_signature": "public static Path getSystemDir(Configuration conf)", "class_method_signature": "HadoopDataSourceUtil.getSystemDir(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getSystemDir", "parameters": "(Configuration conf, boolean resolve)", "modifiers": "public static", "return": "Path", "signature": "Path getSystemDir(Configuration conf, boolean resolve)", "full_signature": "public static Path getSystemDir(Configuration conf, boolean resolve)", "class_method_signature": "HadoopDataSourceUtil.getSystemDir(Configuration conf, boolean resolve)", "testcase": false, "constructor": false}, {"identifier": "getTransactionInfoDir", "parameters": "(Configuration conf)", "modifiers": "private static", "return": "Path", "signature": "Path getTransactionInfoDir(Configuration conf)", "full_signature": "private static Path getTransactionInfoDir(Configuration conf)", "class_method_signature": "HadoopDataSourceUtil.getTransactionInfoDir(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(FileSystem fs, Path base, FilePattern pattern)", "modifiers": "public static", "return": "List<FileStatus>", "signature": "List<FileStatus> search(FileSystem fs, Path base, FilePattern pattern)", "full_signature": "public static List<FileStatus> search(FileSystem fs, Path base, FilePattern pattern)", "class_method_signature": "HadoopDataSourceUtil.search(FileSystem fs, Path base, FilePattern pattern)", "testcase": false, "constructor": false}, {"identifier": "consumeStep", "parameters": "(LinkedList<Segment> segments)", "modifiers": "private static", "return": "List<Path>", "signature": "List<Path> consumeStep(LinkedList<Segment> segments)", "full_signature": "private static List<Path> consumeStep(LinkedList<Segment> segments)", "class_method_signature": "HadoopDataSourceUtil.consumeStep(LinkedList<Segment> segments)", "testcase": false, "constructor": false}, {"identifier": "isGlobRequired", "parameters": "(Segment segment)", "modifiers": "private static", "return": "boolean", "signature": "boolean isGlobRequired(Segment segment)", "full_signature": "private static boolean isGlobRequired(Segment segment)", "class_method_signature": "HadoopDataSourceUtil.isGlobRequired(Segment segment)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Segment segment)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> resolve(Segment segment)", "full_signature": "private static Set<String> resolve(Segment segment)", "class_method_signature": "HadoopDataSourceUtil.resolve(Segment segment)", "testcase": false, "constructor": false}, {"identifier": "stringCrossJoin", "parameters": "(List<Set<String>> candidates)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> stringCrossJoin(List<Set<String>> candidates)", "full_signature": "private static List<String> stringCrossJoin(List<Set<String>> candidates)", "class_method_signature": "HadoopDataSourceUtil.stringCrossJoin(List<Set<String>> candidates)", "testcase": false, "constructor": false}, {"identifier": "recursiveStep", "parameters": "(FileSystem fs, List<FileStatus> current)", "modifiers": "private static", "return": "List<FileStatus>", "signature": "List<FileStatus> recursiveStep(FileSystem fs, List<FileStatus> current)", "full_signature": "private static List<FileStatus> recursiveStep(FileSystem fs, List<FileStatus> current)", "class_method_signature": "HadoopDataSourceUtil.recursiveStep(FileSystem fs, List<FileStatus> current)", "testcase": false, "constructor": false}, {"identifier": "globStep", "parameters": "(\n            FileSystem fs,\n            List<FileStatus> current,\n            List<Path> expressions)", "modifiers": "private static", "return": "List<FileStatus>", "signature": "List<FileStatus> globStep(\n            FileSystem fs,\n            List<FileStatus> current,\n            List<Path> expressions)", "full_signature": "private static List<FileStatus> globStep(\n            FileSystem fs,\n            List<FileStatus> current,\n            List<Path> expressions)", "class_method_signature": "HadoopDataSourceUtil.globStep(\n            FileSystem fs,\n            List<FileStatus> current,\n            List<Path> expressions)", "testcase": false, "constructor": false}, {"identifier": "onlyMinimalCovered", "parameters": "(List<FileStatus> statList)", "modifiers": "public static", "return": "List<FileStatus>", "signature": "List<FileStatus> onlyMinimalCovered(List<FileStatus> statList)", "full_signature": "public static List<FileStatus> onlyMinimalCovered(List<FileStatus> statList)", "class_method_signature": "HadoopDataSourceUtil.onlyMinimalCovered(List<FileStatus> statList)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(FileStatus dir, FileStatus target)", "modifiers": "private static", "return": "boolean", "signature": "boolean contains(FileStatus dir, FileStatus target)", "full_signature": "private static boolean contains(FileStatus dir, FileStatus target)", "class_method_signature": "HadoopDataSourceUtil.contains(FileStatus dir, FileStatus target)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Path parent, Path child)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(Path parent, Path child)", "full_signature": "public static boolean contains(Path parent, Path child)", "class_method_signature": "HadoopDataSourceUtil.contains(Path parent, Path child)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(\n            Counter counter, FileSystem fs,\n            Path from, Path to)", "modifiers": "public static", "return": "void", "signature": "void move(\n            Counter counter, FileSystem fs,\n            Path from, Path to)", "full_signature": "public static void move(\n            Counter counter, FileSystem fs,\n            Path from, Path to)", "class_method_signature": "HadoopDataSourceUtil.move(\n            Counter counter, FileSystem fs,\n            Path from, Path to)", "testcase": false, "constructor": false}, {"identifier": "moveFromLocal", "parameters": "(\n            Counter counter,\n            LocalFileSystem localFs, FileSystem fs,\n            Path from, Path to)", "modifiers": "public static", "return": "void", "signature": "void moveFromLocal(\n            Counter counter,\n            LocalFileSystem localFs, FileSystem fs,\n            Path from, Path to)", "full_signature": "public static void moveFromLocal(\n            Counter counter,\n            LocalFileSystem localFs, FileSystem fs,\n            Path from, Path to)", "class_method_signature": "HadoopDataSourceUtil.moveFromLocal(\n            Counter counter,\n            LocalFileSystem localFs, FileSystem fs,\n            Path from, Path to)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(\n            Counter counter, FileSystem fs,\n            Path from, Path to, int threads)", "modifiers": "public static", "return": "void", "signature": "void move(\n            Counter counter, FileSystem fs,\n            Path from, Path to, int threads)", "full_signature": "public static void move(\n            Counter counter, FileSystem fs,\n            Path from, Path to, int threads)", "class_method_signature": "HadoopDataSourceUtil.move(\n            Counter counter, FileSystem fs,\n            Path from, Path to, int threads)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(\n            Counter counter,\n            FileSystem fromFs, Path from,\n            FileSystem toFs, Path to,\n            boolean fromLocal, int threads)", "modifiers": "private static", "return": "void", "signature": "void move(\n            Counter counter,\n            FileSystem fromFs, Path from,\n            FileSystem toFs, Path to,\n            boolean fromLocal, int threads)", "full_signature": "private static void move(\n            Counter counter,\n            FileSystem fromFs, Path from,\n            FileSystem toFs, Path to,\n            boolean fromLocal, int threads)", "class_method_signature": "HadoopDataSourceUtil.move(\n            Counter counter,\n            FileSystem fromFs, Path from,\n            FileSystem toFs, Path to,\n            boolean fromLocal, int threads)", "testcase": false, "constructor": false}, {"identifier": "moveSerial", "parameters": "(\n            Counter counter,\n            FileSystem fromFs, FileSystem toFs,\n            Path source, Path target,\n            List<Path> list, boolean fromLocal)", "modifiers": "private static", "return": "void", "signature": "void moveSerial(\n            Counter counter,\n            FileSystem fromFs, FileSystem toFs,\n            Path source, Path target,\n            List<Path> list, boolean fromLocal)", "full_signature": "private static void moveSerial(\n            Counter counter,\n            FileSystem fromFs, FileSystem toFs,\n            Path source, Path target,\n            List<Path> list, boolean fromLocal)", "class_method_signature": "HadoopDataSourceUtil.moveSerial(\n            Counter counter,\n            FileSystem fromFs, FileSystem toFs,\n            Path source, Path target,\n            List<Path> list, boolean fromLocal)", "testcase": false, "constructor": false}, {"identifier": "prepareTarget", "parameters": "(FileSystem fs, Path file, Set<Path> directoryCreated)", "modifiers": "private static", "return": "void", "signature": "void prepareTarget(FileSystem fs, Path file, Set<Path> directoryCreated)", "full_signature": "private static void prepareTarget(FileSystem fs, Path file, Set<Path> directoryCreated)", "class_method_signature": "HadoopDataSourceUtil.prepareTarget(FileSystem fs, Path file, Set<Path> directoryCreated)", "testcase": false, "constructor": false}, {"identifier": "moveFile", "parameters": "(FileSystem toFs, Path sourceFile, Path targetFile, boolean fromLocal)", "modifiers": "static", "return": "void", "signature": "void moveFile(FileSystem toFs, Path sourceFile, Path targetFile, boolean fromLocal)", "full_signature": "static void moveFile(FileSystem toFs, Path sourceFile, Path targetFile, boolean fromLocal)", "class_method_signature": "HadoopDataSourceUtil.moveFile(FileSystem toFs, Path sourceFile, Path targetFile, boolean fromLocal)", "testcase": false, "constructor": false}, {"identifier": "moveParallel", "parameters": "(\n            Counter counter,\n            FileSystem fromFs, FileSystem toFs,\n            Path source, Path target,\n            List<Path> list, boolean fromLocal,\n            ExecutorService executor)", "modifiers": "private static", "return": "void", "signature": "void moveParallel(\n            Counter counter,\n            FileSystem fromFs, FileSystem toFs,\n            Path source, Path target,\n            List<Path> list, boolean fromLocal,\n            ExecutorService executor)", "full_signature": "private static void moveParallel(\n            Counter counter,\n            FileSystem fromFs, FileSystem toFs,\n            Path source, Path target,\n            List<Path> list, boolean fromLocal,\n            ExecutorService executor)", "class_method_signature": "HadoopDataSourceUtil.moveParallel(\n            Counter counter,\n            FileSystem fromFs, FileSystem toFs,\n            Path source, Path target,\n            List<Path> list, boolean fromLocal,\n            ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "prepareParallel", "parameters": "(\n            Counter counter, FileSystem fs, Path base, List<Path> list,\n            ExecutorService executor)", "modifiers": "private static", "return": "void", "signature": "void prepareParallel(\n            Counter counter, FileSystem fs, Path base, List<Path> list,\n            ExecutorService executor)", "full_signature": "private static void prepareParallel(\n            Counter counter, FileSystem fs, Path base, List<Path> list,\n            ExecutorService executor)", "class_method_signature": "HadoopDataSourceUtil.prepareParallel(\n            Counter counter, FileSystem fs, Path base, List<Path> list,\n            ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(\n            ExecutorService executor,\n            Collection<? extends Callable<?>> tasks)", "modifiers": "private static", "return": "void", "signature": "void parallel(\n            ExecutorService executor,\n            Collection<? extends Callable<?>> tasks)", "full_signature": "private static void parallel(\n            ExecutorService executor,\n            Collection<? extends Callable<?>> tasks)", "class_method_signature": "HadoopDataSourceUtil.parallel(\n            ExecutorService executor,\n            Collection<? extends Callable<?>> tasks)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(List<? extends Future<?>> futures)", "modifiers": "private static", "return": "void", "signature": "void cancel(List<? extends Future<?>> futures)", "full_signature": "private static void cancel(List<? extends Future<?>> futures)", "class_method_signature": "HadoopDataSourceUtil.cancel(List<? extends Future<?>> futures)", "testcase": false, "constructor": false}, {"identifier": "isLocalPath", "parameters": "(Path path)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLocalPath(Path path)", "full_signature": "private static boolean isLocalPath(Path path)", "class_method_signature": "HadoopDataSourceUtil.isLocalPath(Path path)", "testcase": false, "constructor": false}, {"identifier": "createFileListRelative", "parameters": "(Counter counter, FileSystem fs, Path source)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "List<Path>", "signature": "List<Path> createFileListRelative(Counter counter, FileSystem fs, Path source)", "full_signature": "@SuppressWarnings(\"unchecked\") private static List<Path> createFileListRelative(Counter counter, FileSystem fs, Path source)", "class_method_signature": "HadoopDataSourceUtil.createFileListRelative(Counter counter, FileSystem fs, Path source)", "testcase": false, "constructor": false}, {"identifier": "toHadoopFileFormat", "parameters": "(\n            Configuration configuration, DataFormat<T> format)", "modifiers": "public static", "return": "HadoopFileFormat<T>", "signature": "HadoopFileFormat<T> toHadoopFileFormat(\n            Configuration configuration, DataFormat<T> format)", "full_signature": "public static HadoopFileFormat<T> toHadoopFileFormat(\n            Configuration configuration, DataFormat<T> format)", "class_method_signature": "HadoopDataSourceUtil.toHadoopFileFormat(\n            Configuration configuration, DataFormat<T> format)", "testcase": false, "constructor": false}, {"identifier": "validateBinaryStreamFormat", "parameters": "(DataFormat<T> format)", "modifiers": "private static", "return": "BinaryStreamFormat<T>", "signature": "BinaryStreamFormat<T> validateBinaryStreamFormat(DataFormat<T> format)", "full_signature": "private static BinaryStreamFormat<T> validateBinaryStreamFormat(DataFormat<T> format)", "class_method_signature": "HadoopDataSourceUtil.validateBinaryStreamFormat(DataFormat<T> format)", "testcase": false, "constructor": false}, {"identifier": "HadoopDataSourceUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " HadoopDataSourceUtil()", "full_signature": "private  HadoopDataSourceUtil()", "class_method_signature": "HadoopDataSourceUtil.HadoopDataSourceUtil()", "testcase": false, "constructor": true}], "file": "core-project/asakusa-runtime/src/main/java/com/asakusafw/runtime/directio/hadoop/HadoopDataSourceUtil.java"}, "focal_method": {"identifier": "search", "parameters": "(FileSystem fs, Path base, FilePattern pattern)", "modifiers": "public static", "return": "List<FileStatus>", "body": "public static List<FileStatus> search(FileSystem fs, Path base, FilePattern pattern) throws IOException {\n        if (fs == null) {\n            throw new IllegalArgumentException(\"fs must not be null\"); //$NON-NLS-1$\n        }\n        if (base == null) {\n            throw new IllegalArgumentException(\"base must not be null\"); //$NON-NLS-1$\n        }\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"pattern must not be null\"); //$NON-NLS-1$\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(MessageFormat.format(\n                    \"Start searching for files (path={0}, resourcePattern={1})\", //$NON-NLS-1$\n                    base,\n                    pattern));\n        }\n        List<FileStatus> current = new ArrayList<>(1);\n        try {\n            FileStatus stat = fs.getFileStatus(base);\n            current.add(stat);\n        } catch (FileNotFoundException e) {\n            return Collections.emptyList();\n        }\n        int steps = 0;\n        LinkedList<Segment> segments = new LinkedList<>(pattern.getSegments());\n        while (segments.isEmpty() == false) {\n            if (segments.getFirst().isTraverse()) {\n                segments.removeFirst();\n                current = recursiveStep(fs, current);\n            } else {\n                List<Path> step = consumeStep(segments);\n                current = globStep(fs, current, step);\n            }\n            steps++;\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(MessageFormat.format(\n                    \"Finish searching for files (path={0}, resourcePattern={1}, results={2}, steps={3})\", //$NON-NLS-1$\n                    base,\n                    pattern,\n                    current.size(),\n                    steps));\n        }\n        return current;\n    }", "signature": "List<FileStatus> search(FileSystem fs, Path base, FilePattern pattern)", "full_signature": "public static List<FileStatus> search(FileSystem fs, Path base, FilePattern pattern)", "class_method_signature": "HadoopDataSourceUtil.search(FileSystem fs, Path base, FilePattern pattern)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "format", "getFileStatus", "add", "emptyList", "getSegments", "isEmpty", "isTraverse", "getFirst", "removeFirst", "recursiveStep", "consumeStep", "globStep", "isDebugEnabled", "debug", "format", "size"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}