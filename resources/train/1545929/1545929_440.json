{"test_class": {"identifier": "YaessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "yaess-project/asakusa-yaess-bootstrap/src/test/java/com/asakusafw/yaess/bootstrap/YaessTest.java"}, "test_case": {"identifier": "config_phase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void config_phase() throws Exception {\n        ProfileBuilder builder = new ProfileBuilder(folder.getRoot());\n        File profile = builder.getProfile();\n        File script = builder.getScript();\n\n        List<String> arguments = new ArrayList<>();\n        Collections.addAll(arguments, \"-profile\", profile.getAbsolutePath());\n        Collections.addAll(arguments, \"-script\", script.getAbsolutePath());\n        Collections.addAll(arguments, \"-batch\", \"tbatch\");\n        Collections.addAll(arguments, \"-flow\", \"tflow\");\n        Collections.addAll(arguments, \"-execution\", \"texec\");\n        Collections.addAll(arguments, \"-phase\", ExecutionPhase.MAIN.getSymbol());\n\n        Configuration conf = Yaess.parseConfiguration(arguments.toArray(new String[arguments.size()]));\n        assertThat(conf.mode, is(Mode.PHASE));\n        assertThat(conf.batchId, is(\"tbatch\"));\n        assertThat(conf.flowId, is(\"tflow\"));\n        assertThat(conf.executionId, is(\"texec\"));\n        assertThat(conf.phase, is(ExecutionPhase.MAIN));\n        assertThat(conf.arguments.keySet(), hasSize(0));\n    }", "signature": "void config_phase()", "full_signature": "@Test public void config_phase()", "class_method_signature": "YaessTest.config_phase()", "testcase": true, "constructor": false, "invocations": ["getRoot", "getProfile", "getScript", "addAll", "getAbsolutePath", "addAll", "getAbsolutePath", "addAll", "addAll", "addAll", "addAll", "getSymbol", "parseConfiguration", "toArray", "size", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "keySet", "hasSize"]}, "focal_class": {"identifier": "Yaess", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final YaessLogger YSLOG = new YaessBootstrapLogger(Yaess.class);", "modifier": "static final", "type": "YaessLogger", "declarator": "YSLOG = new YaessBootstrapLogger(Yaess.class)", "var_name": "YSLOG"}, {"original_string": "static final Logger LOG = LoggerFactory.getLogger(Yaess.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Yaess.class)", "var_name": "LOG"}, {"original_string": "static final String KEY_CUSTOM_PROFILE = \"profile\";", "modifier": "static final", "type": "String", "declarator": "KEY_CUSTOM_PROFILE = \"profile\"", "var_name": "KEY_CUSTOM_PROFILE"}, {"original_string": "static final Option OPT_PROFILE;", "modifier": "static final", "type": "Option", "declarator": "OPT_PROFILE", "var_name": "OPT_PROFILE"}, {"original_string": "static final Option OPT_SCRIPT;", "modifier": "static final", "type": "Option", "declarator": "OPT_SCRIPT", "var_name": "OPT_SCRIPT"}, {"original_string": "static final Option OPT_BATCH_ID;", "modifier": "static final", "type": "Option", "declarator": "OPT_BATCH_ID", "var_name": "OPT_BATCH_ID"}, {"original_string": "static final Option OPT_FLOW_ID;", "modifier": "static final", "type": "Option", "declarator": "OPT_FLOW_ID", "var_name": "OPT_FLOW_ID"}, {"original_string": "static final Option OPT_EXECUTION_ID;", "modifier": "static final", "type": "Option", "declarator": "OPT_EXECUTION_ID", "var_name": "OPT_EXECUTION_ID"}, {"original_string": "static final Option OPT_PHASE_NAME;", "modifier": "static final", "type": "Option", "declarator": "OPT_PHASE_NAME", "var_name": "OPT_PHASE_NAME"}, {"original_string": "static final Option OPT_PLUGIN;", "modifier": "static final", "type": "Option", "declarator": "OPT_PLUGIN", "var_name": "OPT_PLUGIN"}, {"original_string": "static final Option OPT_ARGUMENT;", "modifier": "static final", "type": "Option", "declarator": "OPT_ARGUMENT", "var_name": "OPT_ARGUMENT"}, {"original_string": "static final Option OPT_DEFINITION;", "modifier": "static final", "type": "Option", "declarator": "OPT_DEFINITION", "var_name": "OPT_DEFINITION"}, {"original_string": "static final Option OPT_ENVIRONMENT_VARIABLE;", "modifier": "static final", "type": "Option", "declarator": "OPT_ENVIRONMENT_VARIABLE", "var_name": "OPT_ENVIRONMENT_VARIABLE"}, {"original_string": "private static final Options OPTIONS;", "modifier": "private static final", "type": "Options", "declarator": "OPTIONS", "var_name": "OPTIONS"}], "methods": [{"identifier": "Yaess", "parameters": "()", "modifiers": "private", "return": "", "signature": " Yaess()", "full_signature": "private  Yaess()", "class_method_signature": "Yaess.Yaess()", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String... args)", "modifiers": "public static", "return": "void", "signature": "void main(String... args)", "full_signature": "public static void main(String... args)", "class_method_signature": "Yaess.main(String... args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String[] args)", "modifiers": "static", "return": "int", "signature": "int execute(String[] args)", "full_signature": "static int execute(String[] args)", "class_method_signature": "Yaess.execute(String[] args)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(String[] args)", "modifiers": "static", "return": "Configuration", "signature": "Configuration parseConfiguration(String[] args)", "full_signature": "static Configuration parseConfiguration(String[] args)", "class_method_signature": "Yaess.parseConfiguration(String[] args)", "testcase": false, "constructor": false}, {"identifier": "findCustomProfile", "parameters": "(File file, String customProfileName)", "modifiers": "private static", "return": "File", "signature": "File findCustomProfile(File file, String customProfileName)", "full_signature": "private static File findCustomProfile(File file, String customProfileName)", "class_method_signature": "Yaess.findCustomProfile(File file, String customProfileName)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(Properties p)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> toMap(Properties p)", "full_signature": "private static Map<String, String> toMap(Properties p)", "class_method_signature": "Yaess.toMap(Properties p)", "testcase": false, "constructor": false}, {"identifier": "computeMode", "parameters": "(String flowId, String executionId, String phaseName)", "modifiers": "private static", "return": "Mode", "signature": "Mode computeMode(String flowId, String executionId, String phaseName)", "full_signature": "private static Mode computeMode(String flowId, String executionId, String phaseName)", "class_method_signature": "Yaess.computeMode(String flowId, String executionId, String phaseName)", "testcase": false, "constructor": false}], "file": "yaess-project/asakusa-yaess-bootstrap/src/main/java/com/asakusafw/yaess/bootstrap/Yaess.java"}, "focal_method": {"identifier": "parseConfiguration", "parameters": "(String[] args)", "modifiers": "static", "return": "Configuration", "body": "static Configuration parseConfiguration(String[] args) throws ParseException {\n        assert args != null;\n        LOG.debug(\"Analyzing YAESS bootstrap arguments: {}\", Arrays.toString(args));\n\n        ArgumentList argList = ArgumentList.parse(args);\n        LOG.debug(\"Argument List: {}\", argList);\n\n        CommandLineParser parser = new BasicParser();\n        CommandLine cmd = parser.parse(OPTIONS, argList.getStandardAsArray());\n\n        String profile = cmd.getOptionValue(OPT_PROFILE.getOpt());\n        LOG.debug(\"Profile: {}\", profile);\n        String script = cmd.getOptionValue(OPT_SCRIPT.getOpt());\n        LOG.debug(\"Script: {}\", script);\n        String batchId = cmd.getOptionValue(OPT_BATCH_ID.getOpt());\n        LOG.debug(\"Batch ID: {}\", batchId);\n        String flowId = cmd.getOptionValue(OPT_FLOW_ID.getOpt());\n        LOG.debug(\"Flow ID: {}\", flowId);\n        String executionId = cmd.getOptionValue(OPT_EXECUTION_ID.getOpt());\n        LOG.debug(\"Execution ID: {}\", executionId);\n        String phaseName = cmd.getOptionValue(OPT_PHASE_NAME.getOpt());\n        LOG.debug(\"Phase name: {}\", phaseName);\n        String plugins = cmd.getOptionValue(OPT_PLUGIN.getOpt());\n        LOG.debug(\"Plug-ins: {}\", plugins);\n        Properties arguments = cmd.getOptionProperties(OPT_ARGUMENT.getOpt());\n        LOG.debug(\"Execution arguments: {}\", arguments);\n        Properties variables = cmd.getOptionProperties(OPT_ENVIRONMENT_VARIABLE.getOpt());\n        LOG.debug(\"Environment variables: {}\", variables);\n        Properties definitions = cmd.getOptionProperties(OPT_DEFINITION.getOpt());\n        LOG.debug(\"YAESS feature definitions: {}\", definitions);\n\n        LOG.debug(\"Loading plugins: {}\", plugins);\n        List<File> pluginFiles = CommandLineUtil.parseFileList(plugins);\n        ClassLoader loader = CommandLineUtil.buildPluginLoader(Yaess.class.getClassLoader(), pluginFiles);\n\n        Configuration result = new Configuration();\n        result.mode = computeMode(flowId, executionId, phaseName);\n\n        LOG.debug(\"Loading profile: {}\", profile);\n        File file = new File(profile);\n        file = findCustomProfile(file, definitions.getProperty(KEY_CUSTOM_PROFILE));\n        try {\n            definitions.remove(KEY_CUSTOM_PROFILE);\n            Map<String, String> env = new HashMap<>();\n            env.putAll(System.getenv());\n            env.putAll(toMap(variables));\n            result.context = new ProfileContext(loader, new VariableResolver(env));\n            Properties properties = CommandLineUtil.loadProperties(file);\n            result.profile = YaessProfile.load(properties, result.context);\n        } catch (Exception e) {\n            YSLOG.error(e, \"E01001\", file.getPath());\n            throw new IllegalArgumentException(MessageFormat.format(\n                    \"Invalid profile \\\"{0}\\\".\",\n                    file), e);\n        }\n\n        LOG.debug(\"Loading script: {}\", script);\n        try {\n            Properties properties = CommandLineUtil.loadProperties(new File(script));\n            result.script = properties;\n        } catch (Exception e) {\n            YSLOG.error(e, \"E01002\", script);\n            throw new IllegalArgumentException(MessageFormat.format(\n                    \"Invalid script \\\"{0}\\\".\",\n                    script), e);\n        }\n\n        result.batchId = batchId;\n        result.flowId = flowId;\n        result.executionId = executionId;\n        if (phaseName != null) {\n            result.phase = ExecutionPhase.findFromSymbol(phaseName);\n            if (result.phase == null) {\n                throw new IllegalArgumentException(MessageFormat.format(\n                        \"Unknown phase name \\\"{0}\\\".\",\n                        phaseName));\n            }\n        }\n\n        result.arguments = toMap(arguments);\n        result.definitions = toMap(definitions);\n        result.extensions = CommandLineUtil.loadExtensions(loader, argList.getExtended());\n\n        LOG.debug(\"Analyzed YAESS bootstrap arguments\");\n        return result;\n    }", "signature": "Configuration parseConfiguration(String[] args)", "full_signature": "static Configuration parseConfiguration(String[] args)", "class_method_signature": "Yaess.parseConfiguration(String[] args)", "testcase": false, "constructor": false, "invocations": ["debug", "toString", "parse", "debug", "parse", "getStandardAsArray", "getOptionValue", "getOpt", "debug", "getOptionValue", "getOpt", "debug", "getOptionValue", "getOpt", "debug", "getOptionValue", "getOpt", "debug", "getOptionValue", "getOpt", "debug", "getOptionValue", "getOpt", "debug", "getOptionValue", "getOpt", "debug", "getOptionProperties", "getOpt", "debug", "getOptionProperties", "getOpt", "debug", "getOptionProperties", "getOpt", "debug", "debug", "parseFileList", "buildPluginLoader", "getClassLoader", "computeMode", "debug", "findCustomProfile", "getProperty", "remove", "putAll", "getenv", "putAll", "toMap", "loadProperties", "load", "error", "getPath", "format", "debug", "loadProperties", "error", "format", "findFromSymbol", "format", "toMap", "toMap", "loadExtensions", "getExtended", "debug"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}