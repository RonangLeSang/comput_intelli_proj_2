{"test_class": {"identifier": "BufferedFileInputTest", "superclass": "extends BufferedFileTestRoot", "interfaces": "", "fields": [], "file": "core-project/asakusa-runtime/src/test/java/com/asakusafw/runtime/io/util/BufferedFileInputTest.java"}, "test_case": {"identifier": "testReadUnsignedShort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadUnsignedShort() throws Exception {\n        RandomAccessFile file = file();\n        file.writeShort(100);\n        file.writeShort(40000);\n        file.seek(0);\n\n        BufferedFileInput buf = manage(new BufferedFileInput(file, 256));\n        assertThat(buf.readUnsignedShort(), is(100));\n        assertThat(buf.readUnsignedShort(), is(40000));\n        eof(buf);\n    }", "signature": "void testReadUnsignedShort()", "full_signature": "@Test public void testReadUnsignedShort()", "class_method_signature": "BufferedFileInputTest.testReadUnsignedShort()", "testcase": true, "constructor": false, "invocations": ["file", "writeShort", "writeShort", "seek", "manage", "assertThat", "readUnsignedShort", "is", "assertThat", "readUnsignedShort", "is", "eof"]}, "focal_class": {"identifier": "BufferedFileInput", "superclass": "", "interfaces": "implements RandomAccess, DataInput, Closeable", "fields": [{"original_string": "private final byte[] buffuer;", "modifier": "private final", "type": "byte[]", "declarator": "buffuer", "var_name": "buffuer"}, {"original_string": "private final RandomAccessFile file;", "modifier": "private final", "type": "RandomAccessFile", "declarator": "file", "var_name": "file"}, {"original_string": "private long physicalPointer = -1L;", "modifier": "private", "type": "long", "declarator": "physicalPointer = -1L", "var_name": "physicalPointer"}, {"original_string": "private long physicalSize = -1L;", "modifier": "private", "type": "long", "declarator": "physicalSize = -1L", "var_name": "physicalSize"}, {"original_string": "private int offset = 0;", "modifier": "private", "type": "int", "declarator": "offset = 0", "var_name": "offset"}, {"original_string": "private int limit = 0;", "modifier": "private", "type": "int", "declarator": "limit = 0", "var_name": "limit"}], "methods": [{"identifier": "BufferedFileInput", "parameters": "(RandomAccessFile file, int bufferSize)", "modifiers": "public", "return": "", "signature": " BufferedFileInput(RandomAccessFile file, int bufferSize)", "full_signature": "public  BufferedFileInput(RandomAccessFile file, int bufferSize)", "class_method_signature": "BufferedFileInput.BufferedFileInput(RandomAccessFile file, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "BufferedFileInput", "parameters": "(RandomAccessFile file, byte[] buffer)", "modifiers": "public", "return": "", "signature": " BufferedFileInput(RandomAccessFile file, byte[] buffer)", "full_signature": "public  BufferedFileInput(RandomAccessFile file, byte[] buffer)", "class_method_signature": "BufferedFileInput.BufferedFileInput(RandomAccessFile file, byte[] buffer)", "testcase": false, "constructor": true}, {"identifier": "sync", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sync()", "full_signature": "public void sync()", "class_method_signature": "BufferedFileInput.sync()", "testcase": false, "constructor": false}, {"identifier": "seek", "parameters": "(long position)", "modifiers": "public", "return": "void", "signature": "void seek(long position)", "full_signature": "public void seek(long position)", "class_method_signature": "BufferedFileInput.seek(long position)", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPosition()", "full_signature": "public long getPosition()", "class_method_signature": "BufferedFileInput.getPosition()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSize()", "full_signature": "public long getSize()", "class_method_signature": "BufferedFileInput.getSize()", "testcase": false, "constructor": false}, {"identifier": "readFully", "parameters": "(byte[] b)", "modifiers": "@Override public", "return": "void", "signature": "void readFully(byte[] b)", "full_signature": "@Override public void readFully(byte[] b)", "class_method_signature": "BufferedFileInput.readFully(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "readFully", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public", "return": "void", "signature": "void readFully(byte[] b, int off, int len)", "full_signature": "@Override public void readFully(byte[] b, int off, int len)", "class_method_signature": "BufferedFileInput.readFully(byte[] b, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "skipBytes", "parameters": "(int n)", "modifiers": "@Override public", "return": "int", "signature": "int skipBytes(int n)", "full_signature": "@Override public int skipBytes(int n)", "class_method_signature": "BufferedFileInput.skipBytes(int n)", "testcase": false, "constructor": false}, {"identifier": "readBoolean", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean readBoolean()", "full_signature": "@Override public boolean readBoolean()", "class_method_signature": "BufferedFileInput.readBoolean()", "testcase": false, "constructor": false}, {"identifier": "readShort", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short readShort()", "full_signature": "@Override public short readShort()", "class_method_signature": "BufferedFileInput.readShort()", "testcase": false, "constructor": false}, {"identifier": "readByte", "parameters": "()", "modifiers": "@Override public", "return": "byte", "signature": "byte readByte()", "full_signature": "@Override public byte readByte()", "class_method_signature": "BufferedFileInput.readByte()", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int readInt()", "full_signature": "@Override public int readInt()", "class_method_signature": "BufferedFileInput.readInt()", "testcase": false, "constructor": false}, {"identifier": "readLong", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long readLong()", "full_signature": "@Override public long readLong()", "class_method_signature": "BufferedFileInput.readLong()", "testcase": false, "constructor": false}, {"identifier": "readFloat", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float readFloat()", "full_signature": "@Override public float readFloat()", "class_method_signature": "BufferedFileInput.readFloat()", "testcase": false, "constructor": false}, {"identifier": "readDouble", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double readDouble()", "full_signature": "@Override public double readDouble()", "class_method_signature": "BufferedFileInput.readDouble()", "testcase": false, "constructor": false}, {"identifier": "readUnsignedByte", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int readUnsignedByte()", "full_signature": "@Override public int readUnsignedByte()", "class_method_signature": "BufferedFileInput.readUnsignedByte()", "testcase": false, "constructor": false}, {"identifier": "readUnsignedShort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int readUnsignedShort()", "full_signature": "@Override public int readUnsignedShort()", "class_method_signature": "BufferedFileInput.readUnsignedShort()", "testcase": false, "constructor": false}, {"identifier": "readChar", "parameters": "()", "modifiers": "@Override public", "return": "char", "signature": "char readChar()", "full_signature": "@Override public char readChar()", "class_method_signature": "BufferedFileInput.readChar()", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String readLine()", "full_signature": "@Override public String readLine()", "class_method_signature": "BufferedFileInput.readLine()", "testcase": false, "constructor": false}, {"identifier": "readUTF", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String readUTF()", "full_signature": "@Override public String readUTF()", "class_method_signature": "BufferedFileInput.readUTF()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "private", "return": "byte", "signature": "byte read()", "full_signature": "private byte read()", "class_method_signature": "BufferedFileInput.read()", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int prepare()", "full_signature": "private int prepare()", "class_method_signature": "BufferedFileInput.prepare()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "BufferedFileInput.close()", "testcase": false, "constructor": false}], "file": "core-project/asakusa-runtime/src/main/java/com/asakusafw/runtime/io/util/BufferedFileInput.java"}, "focal_method": {"identifier": "readUnsignedShort", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int readUnsignedShort() throws IOException {\n        return readShort() & 0xffff;\n    }", "signature": "int readUnsignedShort()", "full_signature": "@Override public int readUnsignedShort()", "class_method_signature": "BufferedFileInput.readUnsignedShort()", "testcase": false, "constructor": false, "invocations": ["readShort"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}