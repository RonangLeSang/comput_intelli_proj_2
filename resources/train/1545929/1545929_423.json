{"test_class": {"identifier": "VariableResolverTest", "superclass": "", "interfaces": "", "fields": [], "file": "yaess-project/asakusa-yaess-core/src/test/java/com/asakusafw/yaess/core/VariableResolverTest.java"}, "test_case": {"identifier": "with_default_missing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void with_default_missing() {\n        Map<String, String> map = new HashMap<>();\n        VariableResolver resolver = new VariableResolver(map);\n        assertThat(resolver.replace(\"${message-MISSING}\", true), is(\"MISSING\"));\n    }", "signature": "void with_default_missing()", "full_signature": "@Test public void with_default_missing()", "class_method_signature": "VariableResolverTest.with_default_missing()", "testcase": true, "constructor": false, "invocations": ["assertThat", "replace", "is"]}, "focal_class": {"identifier": "VariableResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(VariableResolver.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(VariableResolver.class)", "var_name": "LOG"}, {"original_string": "private static final Pattern VARIABLE = Pattern.compile(\"\\\\$\\\\{(.*?)\\\\}\");", "modifier": "private static final", "type": "Pattern", "declarator": "VARIABLE = Pattern.compile(\"\\\\$\\\\{(.*?)\\\\}\")", "var_name": "VARIABLE"}, {"original_string": "private static final char SEPARATOR_DEFAULT_VALUE = '-';", "modifier": "private static final", "type": "char", "declarator": "SEPARATOR_DEFAULT_VALUE = '-'", "var_name": "SEPARATOR_DEFAULT_VALUE"}, {"original_string": "private final Map<String, String> entries;", "modifier": "private final", "type": "Map<String, String>", "declarator": "entries", "var_name": "entries"}], "methods": [{"identifier": "VariableResolver", "parameters": "(Map<String, String> entries)", "modifiers": "public", "return": "", "signature": " VariableResolver(Map<String, String> entries)", "full_signature": "public  VariableResolver(Map<String, String> entries)", "class_method_signature": "VariableResolver.VariableResolver(Map<String, String> entries)", "testcase": false, "constructor": true}, {"identifier": "system", "parameters": "()", "modifiers": "public static", "return": "VariableResolver", "signature": "VariableResolver system()", "full_signature": "public static VariableResolver system()", "class_method_signature": "VariableResolver.system()", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String string, boolean strict)", "modifiers": "public", "return": "String", "signature": "String replace(String string, boolean strict)", "full_signature": "public String replace(String string, boolean strict)", "class_method_signature": "VariableResolver.replace(String string, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String placeholder)", "modifiers": "private", "return": "String", "signature": "String resolve(String placeholder)", "full_signature": "private String resolve(String placeholder)", "class_method_signature": "VariableResolver.resolve(String placeholder)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "VariableResolver.toString()", "testcase": false, "constructor": false}], "file": "yaess-project/asakusa-yaess-core/src/main/java/com/asakusafw/yaess/core/VariableResolver.java"}, "focal_method": {"identifier": "replace", "parameters": "(String string, boolean strict)", "modifiers": "public", "return": "String", "body": "public String replace(String string, boolean strict) {\n        if (string == null) {\n            throw new IllegalArgumentException(\"string must not be null\"); //$NON-NLS-1$\n        }\n        StringBuilder buf = new StringBuilder();\n        int start = 0;\n        Matcher matcher = VARIABLE.matcher(string);\n        while (matcher.find(start)) {\n            String placeholder = matcher.group(1);\n            String replacement = resolve(placeholder);\n            if (replacement == null) {\n                if (strict) {\n                    throw new IllegalArgumentException(MessageFormat.format(\n                            \"parameter \\\"{0}\\\" is not defined in the list: {1}\",\n                            placeholder,\n                            this));\n                } else {\n                    buf.append(string.substring(start, matcher.start() + 1));\n                }\n                start = matcher.start() + 1;\n            } else {\n                buf.append(string.substring(start, matcher.start()));\n                buf.append(replacement);\n                start = matcher.end();\n            }\n        }\n        buf.append(string.substring(start));\n        return buf.toString();\n    }", "signature": "String replace(String string, boolean strict)", "full_signature": "public String replace(String string, boolean strict)", "class_method_signature": "VariableResolver.replace(String string, boolean strict)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "group", "resolve", "format", "append", "substring", "start", "start", "append", "substring", "start", "append", "end", "append", "substring", "toString"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}