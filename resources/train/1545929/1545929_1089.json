{"test_class": {"identifier": "StringTemplateTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-project/asakusa-runtime/src/test/java/com/asakusafw/runtime/stage/directio/StringTemplateTest.java"}, "test_case": {"identifier": "placeholder_long", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void placeholder_long() throws Exception {\n        Mock mock = new Mock(spec(LONG, \"0000\"));\n        mock.setMock(new LongOption(1));\n        assertThat(mock.apply(), is(\"0001\"));\n    }", "signature": "void placeholder_long()", "full_signature": "@Test public void placeholder_long()", "class_method_signature": "StringTemplateTest.placeholder_long()", "testcase": true, "constructor": false, "invocations": ["spec", "setMock", "assertThat", "apply", "is"]}, "focal_class": {"identifier": "StringTemplate", "superclass": "", "interfaces": "implements WritableRawComparable", "fields": [{"original_string": "public static final StringTemplate EMPTY = new StringTemplate() {\n        @Override\n        public void set(Object object) {\n            return;\n        }\n    };", "modifier": "public static final", "type": "StringTemplate", "declarator": "EMPTY = new StringTemplate() {\n        @Override\n        public void set(Object object) {\n            return;\n        }\n    }", "var_name": "EMPTY"}, {"original_string": "private final PropertyFormatter[] formatters;", "modifier": "private final", "type": "PropertyFormatter[]", "declarator": "formatters", "var_name": "formatters"}, {"original_string": "private final Text nameBuffer = new Text();", "modifier": "private final", "type": "Text", "declarator": "nameBuffer = new Text()", "var_name": "nameBuffer"}], "methods": [{"identifier": "StringTemplate", "parameters": "(FormatSpec... specs)", "modifiers": "protected", "return": "", "signature": " StringTemplate(FormatSpec... specs)", "full_signature": "protected  StringTemplate(FormatSpec... specs)", "class_method_signature": "StringTemplate.StringTemplate(FormatSpec... specs)", "testcase": false, "constructor": true}, {"identifier": "set", "parameters": "(Object object)", "modifiers": "public abstract", "return": "void", "signature": "void set(Object object)", "full_signature": "public abstract void set(Object object)", "class_method_signature": "StringTemplate.set(Object object)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(int index, Object value)", "modifiers": "protected final", "return": "void", "signature": "void setProperty(int index, Object value)", "full_signature": "protected final void setProperty(int index, Object value)", "class_method_signature": "StringTemplate.setProperty(int index, Object value)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String apply()", "full_signature": "public final String apply()", "class_method_signature": "StringTemplate.apply()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public final", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public final void write(DataOutput out)", "class_method_signature": "StringTemplate.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public final", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public final void readFields(DataInput in)", "class_method_signature": "StringTemplate.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "getSizeInBytes", "parameters": "(byte[] buf, int offset)", "modifiers": "@Override public final", "return": "int", "signature": "int getSizeInBytes(byte[] buf, int offset)", "full_signature": "@Override public final int getSizeInBytes(byte[] buf, int offset)", "class_method_signature": "StringTemplate.getSizeInBytes(byte[] buf, int offset)", "testcase": false, "constructor": false}, {"identifier": "compareInBytes", "parameters": "(byte[] b1, int o1, byte[] b2, int o2)", "modifiers": "@Override public final", "return": "int", "signature": "int compareInBytes(byte[] b1, int o1, byte[] b2, int o2)", "full_signature": "@Override public final int compareInBytes(byte[] b1, int o1, byte[] b2, int o2)", "class_method_signature": "StringTemplate.compareInBytes(byte[] b1, int o1, byte[] b2, int o2)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(WritableRawComparable o)", "modifiers": "@Override public final", "return": "int", "signature": "int compareTo(WritableRawComparable o)", "full_signature": "@Override public final int compareTo(WritableRawComparable o)", "class_method_signature": "StringTemplate.compareTo(WritableRawComparable o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "StringTemplate.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public final boolean equals(Object obj)", "class_method_signature": "StringTemplate.equals(Object obj)", "testcase": false, "constructor": false}], "file": "core-project/asakusa-runtime/src/main/java/com/asakusafw/runtime/stage/directio/StringTemplate.java"}, "focal_method": {"identifier": "apply", "parameters": "()", "modifiers": "public final", "return": "String", "body": "public final String apply() {\n        nameBuffer.clear();\n        for (int i = 0; i < formatters.length; i++) {\n            Text text = formatters[i].representation;\n            nameBuffer.append(text.getBytes(), 0, text.getLength());\n        }\n        return nameBuffer.toString();\n    }", "signature": "String apply()", "full_signature": "public final String apply()", "class_method_signature": "StringTemplate.apply()", "testcase": false, "constructor": false, "invocations": ["clear", "append", "getBytes", "getLength", "toString"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}