{"test_class": {"identifier": "BasicDeleteTaskExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final TemporaryFolder temporary = new TemporaryFolder();", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "temporary = new TemporaryFolder()", "var_name": "temporary"}, {"original_string": "private final TaskExecutionContext context = new BasicTaskExecutionContext(\n            new BasicExecutionContext()\n                .withEnvironmentVariables(m -> m.putAll(System.getenv())),\n            \"b\", \"f\", \"e\",\n            Collections.singletonMap(\"testing\", \"OK\"));", "modifier": "private final", "type": "TaskExecutionContext", "declarator": "context = new BasicTaskExecutionContext(\n            new BasicExecutionContext()\n                .withEnvironmentVariables(m -> m.putAll(System.getenv())),\n            \"b\", \"f\", \"e\",\n            Collections.singletonMap(\"testing\", \"OK\"))", "var_name": "context"}], "file": "workflow/executor/src/test/java/com/asakusafw/workflow/executor/basic/BasicDeleteTaskExecutorTest.java"}, "test_case": {"identifier": "vars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void vars() throws Exception {\n        TaskExecutor executor = new BasicDeleteTaskExecutor();\n        File batch = temporary.newFile(context.getBatchId());\n        File flow = temporary.newFile(context.getFlowId());\n        File exec = temporary.newFile(context.getExecutionId());\n\n        assertThat(batch.isFile(), is(true));\n        assertThat(flow.isFile(), is(true));\n        assertThat(exec.isFile(), is(true));\n\n        executor.execute(context, new BasicDeleteTaskInfo(\n                \"testing\",\n                PathKind.LOCAL_FILE_SYSTEM,\n                new File(temporary.getRoot(), \"${batch_id}\").getAbsolutePath()));\n        assertThat(batch.isFile(), is(false));\n        assertThat(flow.isFile(), is(true));\n        assertThat(exec.isFile(), is(true));\n\n        executor.execute(context, new BasicDeleteTaskInfo(\n                \"testing\",\n                PathKind.LOCAL_FILE_SYSTEM,\n                new File(temporary.getRoot(), \"${flow_id}\").getAbsolutePath()));\n        assertThat(batch.isFile(), is(false));\n        assertThat(flow.isFile(), is(false));\n        assertThat(exec.isFile(), is(true));\n\n        executor.execute(context, new BasicDeleteTaskInfo(\n                \"testing\",\n                PathKind.LOCAL_FILE_SYSTEM,\n                new File(temporary.getRoot(), \"${execution_id}\").getAbsolutePath()));\n        assertThat(batch.isFile(), is(false));\n        assertThat(flow.isFile(), is(false));\n        assertThat(exec.isFile(), is(false));\n\n        executor.execute(context, new BasicDeleteTaskInfo(\n                \"testing\",\n                PathKind.LOCAL_FILE_SYSTEM,\n                new File(temporary.getRoot(), \"${user}\").getAbsolutePath()));\n    }", "signature": "void vars()", "full_signature": "@Test public void vars()", "class_method_signature": "BasicDeleteTaskExecutorTest.vars()", "testcase": true, "constructor": false, "invocations": ["newFile", "getBatchId", "newFile", "getFlowId", "newFile", "getExecutionId", "assertThat", "isFile", "is", "assertThat", "isFile", "is", "assertThat", "isFile", "is", "execute", "getAbsolutePath", "getRoot", "assertThat", "isFile", "is", "assertThat", "isFile", "is", "assertThat", "isFile", "is", "execute", "getAbsolutePath", "getRoot", "assertThat", "isFile", "is", "assertThat", "isFile", "is", "assertThat", "isFile", "is", "execute", "getAbsolutePath", "getRoot", "assertThat", "isFile", "is", "assertThat", "isFile", "is", "assertThat", "isFile", "is", "execute", "getAbsolutePath", "getRoot"]}, "focal_class": {"identifier": "BasicDeleteTaskExecutor", "superclass": "", "interfaces": "implements TaskExecutor", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(BasicDeleteTaskExecutor.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BasicDeleteTaskExecutor.class)", "var_name": "LOG"}], "methods": [{"identifier": "isSupported", "parameters": "(TaskExecutionContext context, TaskInfo task)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSupported(TaskExecutionContext context, TaskInfo task)", "full_signature": "@Override public boolean isSupported(TaskExecutionContext context, TaskInfo task)", "class_method_signature": "BasicDeleteTaskExecutor.isSupported(TaskExecutionContext context, TaskInfo task)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(TaskExecutionContext context, TaskInfo task)", "modifiers": "@Override public", "return": "void", "signature": "void execute(TaskExecutionContext context, TaskInfo task)", "full_signature": "@Override public void execute(TaskExecutionContext context, TaskInfo task)", "class_method_signature": "BasicDeleteTaskExecutor.execute(TaskExecutionContext context, TaskInfo task)", "testcase": false, "constructor": false}, {"identifier": "deleteOnLocalFileSystem", "parameters": "(\n            TaskExecutionContext context, String path)", "modifiers": "protected", "return": "void", "signature": "void deleteOnLocalFileSystem(\n            TaskExecutionContext context, String path)", "full_signature": "protected void deleteOnLocalFileSystem(\n            TaskExecutionContext context, String path)", "class_method_signature": "BasicDeleteTaskExecutor.deleteOnLocalFileSystem(\n            TaskExecutionContext context, String path)", "testcase": false, "constructor": false}, {"identifier": "deleteOnHadoopFileSystem", "parameters": "(\n            TaskExecutionContext context, String path)", "modifiers": "protected", "return": "void", "signature": "void deleteOnHadoopFileSystem(\n            TaskExecutionContext context, String path)", "full_signature": "protected void deleteOnHadoopFileSystem(\n            TaskExecutionContext context, String path)", "class_method_signature": "BasicDeleteTaskExecutor.deleteOnHadoopFileSystem(\n            TaskExecutionContext context, String path)", "testcase": false, "constructor": false}], "file": "workflow/executor/src/main/java/com/asakusafw/workflow/executor/basic/BasicDeleteTaskExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(TaskExecutionContext context, TaskInfo task)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(TaskExecutionContext context, TaskInfo task) throws IOException, InterruptedException {\n        DeleteTaskInfo delete = (DeleteTaskInfo) task;\n        String resolved = TaskExecutors.resolvePath(context, delete.getPath());\n        LOG.info(\"delete file: {} ({})\", resolved, delete.getPathKind());\n        switch (delete.getPathKind()) {\n        case LOCAL_FILE_SYSTEM:\n            deleteOnLocalFileSystem(context, resolved);\n            break;\n        case HADOOP_FILE_SYSTEM:\n            deleteOnHadoopFileSystem(context, resolved);\n            break;\n        default:\n            throw new AssertionError(delete.getPathKind());\n        }\n    }", "signature": "void execute(TaskExecutionContext context, TaskInfo task)", "full_signature": "@Override public void execute(TaskExecutionContext context, TaskInfo task)", "class_method_signature": "BasicDeleteTaskExecutor.execute(TaskExecutionContext context, TaskInfo task)", "testcase": false, "constructor": false, "invocations": ["resolvePath", "getPath", "info", "getPathKind", "getPathKind", "deleteOnLocalFileSystem", "deleteOnHadoopFileSystem", "getPathKind"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}