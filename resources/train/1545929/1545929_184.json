{"test_class": {"identifier": "JdbcResourceManipulatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public H2Resource h2 = new H2Resource(\"testing\") {\n        @Override\n        protected void before() throws Exception {\n            executeFile(\"pair.sql\");\n        }\n    };", "modifier": "@Rule\n    public", "type": "H2Resource", "declarator": "h2 = new H2Resource(\"testing\") {\n        @Override\n        protected void before() throws Exception {\n            executeFile(\"pair.sql\");\n        }\n    }", "var_name": "h2"}], "file": "windgate-project/asakusa-windgate-jdbc/src/test/java/com/asakusafw/windgate/jdbc/JdbcResourceManipulatorTest.java"}, "test_case": {"identifier": "cleanupSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cleanupSource() throws Exception {\n        Map<String, String> conf = new HashMap<>();\n        conf.put(JdbcProcess.TABLE.key(), \"PAIR\");\n        conf.put(JdbcProcess.COLUMNS.key(), \"KEY,VALUE\");\n        conf.put(JdbcProcess.JDBC_SUPPORT.key(), PairSupport.class.getName());\n\n        ProcessScript<Pair> process = process(new DriverScript(\"jdbc\", conf), dummy());\n\n        h2.execute(\"INSERT INTO PAIR (KEY, VALUE) VALUES (1, 'Hello1, world!')\");\n        h2.execute(\"INSERT INTO PAIR (KEY, VALUE) VALUES (2, 'Hello2, world!')\");\n        h2.execute(\"INSERT INTO PAIR (KEY, VALUE) VALUES (3, 'Hello3, world!')\");\n\n        JdbcResourceManipulator manipulator = new JdbcResourceManipulator(profile(), new ParameterList());\n\n        assertThat(h2.count(\"PAIR\"), is(3));\n        manipulator.cleanupSource(process);\n        assertThat(h2.count(\"PAIR\"), is(0));\n    }", "signature": "void cleanupSource()", "full_signature": "@Test public void cleanupSource()", "class_method_signature": "JdbcResourceManipulatorTest.cleanupSource()", "testcase": true, "constructor": false, "invocations": ["put", "key", "put", "key", "put", "key", "getName", "process", "dummy", "execute", "execute", "execute", "profile", "assertThat", "count", "is", "cleanupSource", "assertThat", "count", "is"]}, "focal_class": {"identifier": "JdbcResourceManipulator", "superclass": "extends ResourceManipulator", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(JdbcResourceManipulator.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JdbcResourceManipulator.class)", "var_name": "LOG"}, {"original_string": "private final JdbcProfile profile;", "modifier": "private final", "type": "JdbcProfile", "declarator": "profile", "var_name": "profile"}, {"original_string": "private final ParameterList arguments;", "modifier": "private final", "type": "ParameterList", "declarator": "arguments", "var_name": "arguments"}], "methods": [{"identifier": "JdbcResourceManipulator", "parameters": "(JdbcProfile profile, ParameterList arguments)", "modifiers": "public", "return": "", "signature": " JdbcResourceManipulator(JdbcProfile profile, ParameterList arguments)", "full_signature": "public  JdbcResourceManipulator(JdbcProfile profile, ParameterList arguments)", "class_method_signature": "JdbcResourceManipulator.JdbcResourceManipulator(JdbcProfile profile, ParameterList arguments)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JdbcResourceManipulator.getName()", "testcase": false, "constructor": false}, {"identifier": "cleanupSource", "parameters": "(ProcessScript<?> script)", "modifiers": "@Override public", "return": "void", "signature": "void cleanupSource(ProcessScript<?> script)", "full_signature": "@Override public void cleanupSource(ProcessScript<?> script)", "class_method_signature": "JdbcResourceManipulator.cleanupSource(ProcessScript<?> script)", "testcase": false, "constructor": false}, {"identifier": "cleanupDrain", "parameters": "(ProcessScript<?> script)", "modifiers": "@Override public", "return": "void", "signature": "void cleanupDrain(ProcessScript<?> script)", "full_signature": "@Override public void cleanupDrain(ProcessScript<?> script)", "class_method_signature": "JdbcResourceManipulator.cleanupDrain(ProcessScript<?> script)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(JdbcScript<?> jdbc)", "modifiers": "private", "return": "void", "signature": "void truncate(JdbcScript<?> jdbc)", "full_signature": "private void truncate(JdbcScript<?> jdbc)", "class_method_signature": "JdbcResourceManipulator.truncate(JdbcScript<?> jdbc)", "testcase": false, "constructor": false}, {"identifier": "createSourceForSource", "parameters": "(ProcessScript<T> script)", "modifiers": "@Override public", "return": "SourceDriver<T>", "signature": "SourceDriver<T> createSourceForSource(ProcessScript<T> script)", "full_signature": "@Override public SourceDriver<T> createSourceForSource(ProcessScript<T> script)", "class_method_signature": "JdbcResourceManipulator.createSourceForSource(ProcessScript<T> script)", "testcase": false, "constructor": false}, {"identifier": "createDrainForSource", "parameters": "(ProcessScript<T> script)", "modifiers": "@Override public", "return": "DrainDriver<T>", "signature": "DrainDriver<T> createDrainForSource(ProcessScript<T> script)", "full_signature": "@Override public DrainDriver<T> createDrainForSource(ProcessScript<T> script)", "class_method_signature": "JdbcResourceManipulator.createDrainForSource(ProcessScript<T> script)", "testcase": false, "constructor": false}, {"identifier": "createSourceForDrain", "parameters": "(ProcessScript<T> script)", "modifiers": "@Override public", "return": "SourceDriver<T>", "signature": "SourceDriver<T> createSourceForDrain(ProcessScript<T> script)", "full_signature": "@Override public SourceDriver<T> createSourceForDrain(ProcessScript<T> script)", "class_method_signature": "JdbcResourceManipulator.createSourceForDrain(ProcessScript<T> script)", "testcase": false, "constructor": false}, {"identifier": "createDrainForDrain", "parameters": "(ProcessScript<T> script)", "modifiers": "@Override public", "return": "DrainDriver<T>", "signature": "DrainDriver<T> createDrainForDrain(ProcessScript<T> script)", "full_signature": "@Override public DrainDriver<T> createDrainForDrain(ProcessScript<T> script)", "class_method_signature": "JdbcResourceManipulator.createDrainForDrain(ProcessScript<T> script)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Statement statement)", "modifiers": "private", "return": "void", "signature": "void close(Statement statement)", "full_signature": "private void close(Statement statement)", "class_method_signature": "JdbcResourceManipulator.close(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Connection conn)", "modifiers": "private", "return": "void", "signature": "void close(Connection conn)", "full_signature": "private void close(Connection conn)", "class_method_signature": "JdbcResourceManipulator.close(Connection conn)", "testcase": false, "constructor": false}, {"identifier": "createOppositeJdbcScript", "parameters": "(\n            ProcessScript<T> process,\n            DriverScript.Kind kind)", "modifiers": "private", "return": "JdbcScript<T>", "signature": "JdbcScript<T> createOppositeJdbcScript(\n            ProcessScript<T> process,\n            DriverScript.Kind kind)", "full_signature": "private JdbcScript<T> createOppositeJdbcScript(\n            ProcessScript<T> process,\n            DriverScript.Kind kind)", "class_method_signature": "JdbcResourceManipulator.createOppositeJdbcScript(\n            ProcessScript<T> process,\n            DriverScript.Kind kind)", "testcase": false, "constructor": false}, {"identifier": "createSourceProcessFromDrain", "parameters": "(ProcessScript<T> script)", "modifiers": "private", "return": "ProcessScript<T>", "signature": "ProcessScript<T> createSourceProcessFromDrain(ProcessScript<T> script)", "full_signature": "private ProcessScript<T> createSourceProcessFromDrain(ProcessScript<T> script)", "class_method_signature": "JdbcResourceManipulator.createSourceProcessFromDrain(ProcessScript<T> script)", "testcase": false, "constructor": false}, {"identifier": "createDrainProcessFromSource", "parameters": "(ProcessScript<T> script)", "modifiers": "private", "return": "ProcessScript<T>", "signature": "ProcessScript<T> createDrainProcessFromSource(ProcessScript<T> script)", "full_signature": "private ProcessScript<T> createDrainProcessFromSource(ProcessScript<T> script)", "class_method_signature": "JdbcResourceManipulator.createDrainProcessFromSource(ProcessScript<T> script)", "testcase": false, "constructor": false}], "file": "windgate-project/asakusa-windgate-jdbc/src/main/java/com/asakusafw/windgate/jdbc/JdbcResourceManipulator.java"}, "focal_method": {"identifier": "cleanupSource", "parameters": "(ProcessScript<?> script)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void cleanupSource(ProcessScript<?> script) throws IOException {\n        if (script == null) {\n            throw new IllegalArgumentException(\"script must not be null\"); //$NON-NLS-1$\n        }\n        JdbcScript<?> jdbc = createOppositeJdbcScript(script, DriverScript.Kind.SOURCE);\n        truncate(jdbc);\n    }", "signature": "void cleanupSource(ProcessScript<?> script)", "full_signature": "@Override public void cleanupSource(ProcessScript<?> script)", "class_method_signature": "JdbcResourceManipulator.cleanupSource(ProcessScript<?> script)", "testcase": false, "constructor": false, "invocations": ["createOppositeJdbcScript", "truncate"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}