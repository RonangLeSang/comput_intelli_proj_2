{"test_class": {"identifier": "DataModelDriverTest", "superclass": "", "interfaces": "", "fields": [], "file": "hive-project/core-stub/src/test/java/com/asakusafw/directio/hive/serde/DataModelDriverTest.java"}, "test_case": {"identifier": "mangled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mangled() {\n        DataModelDescriptor descriptor = FieldPropertyDescriptor.extract(MockSimple.class);\n        MockSimple obj = (MockSimple) descriptor.createDataModelObject();\n        obj.number.modify(12345);\n        obj.string.modify(\"Hello, world!\");\n\n        List<PropertyDescriptor> properties = new ArrayList<>();\n        for (PropertyDescriptor property : descriptor.getPropertyDescriptors()) {\n            properties.add(new PropertyDescriptor(String.format(\"_col%d\", properties.size()), property) {\n                @Override\n                public ValueOption<?> extract(Object dataModel) {\n                    return property.extract(dataModel);\n                }\n            });\n        }\n        DataModelDescriptor mangled = new DataModelDescriptor(descriptor.getDataModelClass(), properties);\n\n        DataModelMapping config = new DataModelMapping();\n        config.setFieldMappingStrategy(FieldMappingStrategy.NAME);\n        config.setOnMissingSource(ExceptionHandlingStrategy.FAIL);\n        config.setOnMissingTarget(ExceptionHandlingStrategy.IGNORE);\n        config.setOnIncompatibleType(ExceptionHandlingStrategy.IGNORE);\n        try {\n            DataModelDriver driver = new DataModelDriver(descriptor, new DataModelInspector(mangled), config);\n            MockSimple copy = new MockSimple();\n            driver.set(copy, obj);\n            throw new AssertionError();\n        } catch (IllegalArgumentException e) {\n            // ok.\n        }\n\n        config.setFieldMappingStrategy(FieldMappingStrategy.POSITION);\n        DataModelDriver driver = new DataModelDriver(descriptor, new DataModelInspector(mangled), config);\n        MockSimple copy = new MockSimple();\n        driver.set(copy, obj);\n\n        assertThat(copy.number, equalTo(obj.number));\n        assertThat(copy.string, equalTo(obj.string));\n    }", "signature": "void mangled()", "full_signature": "@Test public void mangled()", "class_method_signature": "DataModelDriverTest.mangled()", "testcase": true, "constructor": false, "invocations": ["extract", "createDataModelObject", "modify", "modify", "getPropertyDescriptors", "add", "format", "size", "extract", "getDataModelClass", "setFieldMappingStrategy", "setOnMissingSource", "setOnMissingTarget", "setOnIncompatibleType", "set", "setFieldMappingStrategy", "set", "assertThat", "equalTo", "assertThat", "equalTo"]}, "focal_class": {"identifier": "DataModelDriver", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Log LOG = LogFactory.getLog(DataModelDriver.class);", "modifier": "static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(DataModelDriver.class)", "var_name": "LOG"}, {"original_string": "private final StructObjectInspector sourceInspector;", "modifier": "private final", "type": "StructObjectInspector", "declarator": "sourceInspector", "var_name": "sourceInspector"}, {"original_string": "private final StructField[] sourceFields;", "modifier": "private final", "type": "StructField[]", "declarator": "sourceFields", "var_name": "sourceFields"}, {"original_string": "private final PropertyDescriptor[] targetProperties;", "modifier": "private final", "type": "PropertyDescriptor[]", "declarator": "targetProperties", "var_name": "targetProperties"}, {"original_string": "private final ValueDriver[] propertyDrivers;", "modifier": "private final", "type": "ValueDriver[]", "declarator": "propertyDrivers", "var_name": "propertyDrivers"}], "methods": [{"identifier": "DataModelDriver", "parameters": "(DataModelDescriptor descriptor, StructObjectInspector sourceInspector)", "modifiers": "public", "return": "", "signature": " DataModelDriver(DataModelDescriptor descriptor, StructObjectInspector sourceInspector)", "full_signature": "public  DataModelDriver(DataModelDescriptor descriptor, StructObjectInspector sourceInspector)", "class_method_signature": "DataModelDriver.DataModelDriver(DataModelDescriptor descriptor, StructObjectInspector sourceInspector)", "testcase": false, "constructor": true}, {"identifier": "DataModelDriver", "parameters": "(\n            DataModelDescriptor descriptor, StructObjectInspector sourceInspector, DataModelMapping configuration)", "modifiers": "public", "return": "", "signature": " DataModelDriver(\n            DataModelDescriptor descriptor, StructObjectInspector sourceInspector, DataModelMapping configuration)", "full_signature": "public  DataModelDriver(\n            DataModelDescriptor descriptor, StructObjectInspector sourceInspector, DataModelMapping configuration)", "class_method_signature": "DataModelDriver.DataModelDriver(\n            DataModelDescriptor descriptor, StructObjectInspector sourceInspector, DataModelMapping configuration)", "testcase": false, "constructor": true}, {"identifier": "computeMappingByName", "parameters": "(\n            DataModelDescriptor target, StructObjectInspector source)", "modifiers": "private static", "return": "List<Mapping>", "signature": "List<Mapping> computeMappingByName(\n            DataModelDescriptor target, StructObjectInspector source)", "full_signature": "private static List<Mapping> computeMappingByName(\n            DataModelDescriptor target, StructObjectInspector source)", "class_method_signature": "DataModelDriver.computeMappingByName(\n            DataModelDescriptor target, StructObjectInspector source)", "testcase": false, "constructor": false}, {"identifier": "computeMappingByPosition", "parameters": "(\n            DataModelDescriptor target, StructObjectInspector source)", "modifiers": "private static", "return": "List<Mapping>", "signature": "List<Mapping> computeMappingByPosition(\n            DataModelDescriptor target, StructObjectInspector source)", "full_signature": "private static List<Mapping> computeMappingByPosition(\n            DataModelDescriptor target, StructObjectInspector source)", "class_method_signature": "DataModelDriver.computeMappingByPosition(\n            DataModelDescriptor target, StructObjectInspector source)", "testcase": false, "constructor": false}, {"identifier": "checkMapping", "parameters": "(DataModelDescriptor descriptor, Mapping mapping, DataModelMapping configuration)", "modifiers": "private", "return": "boolean", "signature": "boolean checkMapping(DataModelDescriptor descriptor, Mapping mapping, DataModelMapping configuration)", "full_signature": "private boolean checkMapping(DataModelDescriptor descriptor, Mapping mapping, DataModelMapping configuration)", "class_method_signature": "DataModelDriver.checkMapping(DataModelDescriptor descriptor, Mapping mapping, DataModelMapping configuration)", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(StructField source, StructField target)", "modifiers": "private", "return": "boolean", "signature": "boolean isCompatible(StructField source, StructField target)", "full_signature": "private boolean isCompatible(StructField source, StructField target)", "class_method_signature": "DataModelDriver.isCompatible(StructField source, StructField target)", "testcase": false, "constructor": false}, {"identifier": "getCategory", "parameters": "(ObjectInspector inspector)", "modifiers": "private", "return": "PrimitiveCategory", "signature": "PrimitiveCategory getCategory(ObjectInspector inspector)", "full_signature": "private PrimitiveCategory getCategory(ObjectInspector inspector)", "class_method_signature": "DataModelDriver.getCategory(ObjectInspector inspector)", "testcase": false, "constructor": false}, {"identifier": "handleException", "parameters": "(ExceptionHandlingStrategy strategy, String message)", "modifiers": "private", "return": "void", "signature": "void handleException(ExceptionHandlingStrategy strategy, String message)", "full_signature": "private void handleException(ExceptionHandlingStrategy strategy, String message)", "class_method_signature": "DataModelDriver.handleException(ExceptionHandlingStrategy strategy, String message)", "testcase": false, "constructor": false}, {"identifier": "getSourceInspector", "parameters": "()", "modifiers": "public", "return": "StructObjectInspector", "signature": "StructObjectInspector getSourceInspector()", "full_signature": "public StructObjectInspector getSourceInspector()", "class_method_signature": "DataModelDriver.getSourceInspector()", "testcase": false, "constructor": false}, {"identifier": "getSourceFields", "parameters": "()", "modifiers": "public", "return": "List<StructField>", "signature": "List<StructField> getSourceFields()", "full_signature": "public List<StructField> getSourceFields()", "class_method_signature": "DataModelDriver.getSourceFields()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Object dataModel, Object source)", "modifiers": "public", "return": "void", "signature": "void set(Object dataModel, Object source)", "full_signature": "public void set(Object dataModel, Object source)", "class_method_signature": "DataModelDriver.set(Object dataModel, Object source)", "testcase": false, "constructor": false}], "file": "hive-project/core-stub/src/main/java/com/asakusafw/directio/hive/serde/DataModelDriver.java"}, "focal_method": {"identifier": "set", "parameters": "(Object dataModel, Object source)", "modifiers": "public", "return": "void", "body": "public void set(Object dataModel, Object source) {\n        StructObjectInspector inspector = this.sourceInspector;\n        StructField[] sources = this.sourceFields;\n        PropertyDescriptor[] targets = this.targetProperties;\n        ValueDriver[] drivers = propertyDrivers;\n        for (int i = 0; i < sources.length; i++) {\n            Object value = inspector.getStructFieldData(source, sources[i]);\n            ValueOption<?> option = targets[i].extract(dataModel);\n            drivers[i].set(option, value);\n        }\n    }", "signature": "void set(Object dataModel, Object source)", "full_signature": "public void set(Object dataModel, Object source)", "class_method_signature": "DataModelDriver.set(Object dataModel, Object source)", "testcase": false, "constructor": false, "invocations": ["getStructFieldData", "extract", "set"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}