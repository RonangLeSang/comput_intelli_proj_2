{"test_class": {"identifier": "SimpleNameImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils-project/java-dom/src/test/java/com/asakusafw/utils/java/internal/model/syntax/SimpleNameImplTest.java"}, "test_case": {"identifier": "singleChar", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void singleChar() {\n        SimpleNameImpl name = new SimpleNameImpl();\n        name.setToken(\"a\");\n    }", "signature": "void singleChar()", "full_signature": "@Test public void singleChar()", "class_method_signature": "SimpleNameImplTest.singleChar()", "testcase": true, "constructor": false, "invocations": ["setToken"]}, "focal_class": {"identifier": "SimpleNameImpl", "superclass": "extends ModelRoot", "interfaces": "implements SimpleName", "fields": [{"original_string": "private static final Set<String> RESERVED;", "modifier": "private static final", "type": "Set<String>", "declarator": "RESERVED", "var_name": "RESERVED"}, {"original_string": "private String token;", "modifier": "private", "type": "String", "declarator": "token", "var_name": "token"}], "methods": [{"identifier": "getToken", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getToken()", "full_signature": "@Override public String getToken()", "class_method_signature": "SimpleNameImpl.getToken()", "testcase": false, "constructor": false}, {"identifier": "setToken", "parameters": "(String token)", "modifiers": "public", "return": "void", "signature": "void setToken(String token)", "full_signature": "public void setToken(String token)", "class_method_signature": "SimpleNameImpl.setToken(String token)", "testcase": false, "constructor": false}, {"identifier": "getLastSegment", "parameters": "()", "modifiers": "@Override public", "return": "SimpleName", "signature": "SimpleName getLastSegment()", "full_signature": "@Override public SimpleName getLastSegment()", "class_method_signature": "SimpleNameImpl.getLastSegment()", "testcase": false, "constructor": false}, {"identifier": "toNameList", "parameters": "()", "modifiers": "@Override public", "return": "List<SimpleName>", "signature": "List<SimpleName> toNameList()", "full_signature": "@Override public List<SimpleName> toNameList()", "class_method_signature": "SimpleNameImpl.toNameList()", "testcase": false, "constructor": false}, {"identifier": "toNameString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toNameString()", "full_signature": "@Override public String toNameString()", "class_method_signature": "SimpleNameImpl.toNameString()", "testcase": false, "constructor": false}, {"identifier": "getModelKind", "parameters": "()", "modifiers": "@Override public", "return": "ModelKind", "signature": "ModelKind getModelKind()", "full_signature": "@Override public ModelKind getModelKind()", "class_method_signature": "SimpleNameImpl.getModelKind()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Visitor<R, C, E> visitor, C context)", "modifiers": "@Override public", "return": "R", "signature": "R accept(Visitor<R, C, E> visitor, C context)", "full_signature": "@Override public R accept(Visitor<R, C, E> visitor, C context)", "class_method_signature": "SimpleNameImpl.accept(Visitor<R, C, E> visitor, C context)", "testcase": false, "constructor": false}], "file": "utils-project/java-dom/src/main/java/com/asakusafw/utils/java/internal/model/syntax/SimpleNameImpl.java"}, "focal_method": {"identifier": "setToken", "parameters": "(String token)", "modifiers": "public", "return": "void", "body": "public void setToken(String token) {\n        Util.notNull(token, \"token\"); //$NON-NLS-1$\n        if (token.isEmpty()) {\n            throw new IllegalArgumentException(\"token must not be null\"); //$NON-NLS-1$\n        }\n        if (Character.isJavaIdentifierStart(token.charAt(0)) == false) {\n            throw new IllegalArgumentException(MessageFormat.format(\n                    \"string must be a valid Java identifier ({0} has invalid start)\",\n                    LiteralAnalyzer.stringLiteralOf(token)));\n        }\n        for (int i = 1, n = token.length(); i < n; i++) {\n            if (Character.isJavaIdentifierPart(token.charAt(i)) == false) {\n                throw new IllegalArgumentException(MessageFormat.format(\n                        \"string must be a valid Java identifier ({0} has invalid part)\",\n                        LiteralAnalyzer.stringLiteralOf(token)));\n            }\n        }\n        if (RESERVED.contains(token)) {\n            throw new IllegalArgumentException(MessageFormat.format(\n                    \"string must be a valid Java identifier ({0} is a reserved word)\",\n                    LiteralAnalyzer.stringLiteralOf(token)));\n        }\n        this.token = token;\n    }", "signature": "void setToken(String token)", "full_signature": "public void setToken(String token)", "class_method_signature": "SimpleNameImpl.setToken(String token)", "testcase": false, "constructor": false, "invocations": ["notNull", "isEmpty", "isJavaIdentifierStart", "charAt", "format", "stringLiteralOf", "length", "isJavaIdentifierPart", "charAt", "format", "stringLiteralOf", "contains", "format", "stringLiteralOf"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}