{"test_class": {"identifier": "PropertyReferenceDeclarationProcessorTest", "superclass": "extends DmdlTesterRoot", "interfaces": "", "fields": [], "file": "dmdl-project/asakusa-dmdl-core/src/test/java/com/asakusafw/dmdl/analyzer/PropertyReferenceDeclarationProcessorTest.java"}, "test_case": {"identifier": "inherit_description", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void inherit_description() {\n        DmdlSemantics env = resolve(new String[] {\n                \"projective p0 = {\",\n                \"  a : INT;\",\n                \"  'P0'\",\n                \"  r : {INT};\",\n                \"};\",\n                \"simple = p0 +  {\",\n                \"  r = {a};\",\n                \"};\",\n        });\n        ModelDeclaration model = env.findModelDeclaration(\"simple\");\n        PropertyReferenceDeclaration r = model.findPropertyReferenceDeclaration(\"r\");\n        assertThat(r.getDescription(), is(notNullValue()));\n        assertThat(r.getDescription().getText(), is(\"P0\"));\n    }", "signature": "void inherit_description()", "full_signature": "@Test public void inherit_description()", "class_method_signature": "PropertyReferenceDeclarationProcessorTest.inherit_description()", "testcase": true, "constructor": false, "invocations": ["resolve", "findModelDeclaration", "findPropertyReferenceDeclaration", "assertThat", "getDescription", "is", "notNullValue", "assertThat", "getText", "getDescription", "is"]}, "focal_class": {"identifier": "PropertyReferenceDeclarationProcessor", "superclass": "extends AbstractVisitor<ModelDeclaration, Void>", "interfaces": "", "fields": [{"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "PropertyReferenceDeclarationProcessor", "parameters": "(Context context)", "modifiers": "private", "return": "", "signature": " PropertyReferenceDeclarationProcessor(Context context)", "full_signature": "private  PropertyReferenceDeclarationProcessor(Context context)", "class_method_signature": "PropertyReferenceDeclarationProcessor.PropertyReferenceDeclarationProcessor(Context context)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(Context context, ModelDeclaration model, AstExpression<AstRecord> node)", "modifiers": "static", "return": "void", "signature": "void resolve(Context context, ModelDeclaration model, AstExpression<AstRecord> node)", "full_signature": "static void resolve(Context context, ModelDeclaration model, AstExpression<AstRecord> node)", "class_method_signature": "PropertyReferenceDeclarationProcessor.resolve(Context context, ModelDeclaration model, AstExpression<AstRecord> node)", "testcase": false, "constructor": false}, {"identifier": "visitUnionExpression", "parameters": "(ModelDeclaration model, AstUnionExpression<T> node)", "modifiers": "@Override public", "return": "Void", "signature": "Void visitUnionExpression(ModelDeclaration model, AstUnionExpression<T> node)", "full_signature": "@Override public Void visitUnionExpression(ModelDeclaration model, AstUnionExpression<T> node)", "class_method_signature": "PropertyReferenceDeclarationProcessor.visitUnionExpression(ModelDeclaration model, AstUnionExpression<T> node)", "testcase": false, "constructor": false}, {"identifier": "visitRecordDefinition", "parameters": "(ModelDeclaration model, AstRecordDefinition node)", "modifiers": "@Override public", "return": "Void", "signature": "Void visitRecordDefinition(ModelDeclaration model, AstRecordDefinition node)", "full_signature": "@Override public Void visitRecordDefinition(ModelDeclaration model, AstRecordDefinition node)", "class_method_signature": "PropertyReferenceDeclarationProcessor.visitRecordDefinition(ModelDeclaration model, AstRecordDefinition node)", "testcase": false, "constructor": false}, {"identifier": "visitModelReference", "parameters": "(ModelDeclaration model, AstModelReference node)", "modifiers": "@Override public", "return": "Void", "signature": "Void visitModelReference(ModelDeclaration model, AstModelReference node)", "full_signature": "@Override public Void visitModelReference(ModelDeclaration model, AstModelReference node)", "class_method_signature": "PropertyReferenceDeclarationProcessor.visitModelReference(ModelDeclaration model, AstModelReference node)", "testcase": false, "constructor": false}, {"identifier": "resolveTerms", "parameters": "(ModelDeclaration model, List<? extends AstRecord> terms)", "modifiers": "private", "return": "void", "signature": "void resolveTerms(ModelDeclaration model, List<? extends AstRecord> terms)", "full_signature": "private void resolveTerms(ModelDeclaration model, List<? extends AstRecord> terms)", "class_method_signature": "PropertyReferenceDeclarationProcessor.resolveTerms(ModelDeclaration model, List<? extends AstRecord> terms)", "testcase": false, "constructor": false}, {"identifier": "isEquivalent", "parameters": "(\n            PropertyReferenceDeclaration.ReferenceContainer<?> a,\n            PropertyReferenceDeclaration.ReferenceContainer<?> b)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEquivalent(\n            PropertyReferenceDeclaration.ReferenceContainer<?> a,\n            PropertyReferenceDeclaration.ReferenceContainer<?> b)", "full_signature": "private static boolean isEquivalent(\n            PropertyReferenceDeclaration.ReferenceContainer<?> a,\n            PropertyReferenceDeclaration.ReferenceContainer<?> b)", "class_method_signature": "PropertyReferenceDeclarationProcessor.isEquivalent(\n            PropertyReferenceDeclaration.ReferenceContainer<?> a,\n            PropertyReferenceDeclaration.ReferenceContainer<?> b)", "testcase": false, "constructor": false}, {"identifier": "isEquivalent", "parameters": "(List<PropertySymbol> a, List<PropertySymbol> b)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEquivalent(List<PropertySymbol> a, List<PropertySymbol> b)", "full_signature": "private static boolean isEquivalent(List<PropertySymbol> a, List<PropertySymbol> b)", "class_method_signature": "PropertyReferenceDeclarationProcessor.isEquivalent(List<PropertySymbol> a, List<PropertySymbol> b)", "testcase": false, "constructor": false}, {"identifier": "isEquivalent", "parameters": "(Map<String, PropertySymbol> a, Map<String, PropertySymbol> b)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEquivalent(Map<String, PropertySymbol> a, Map<String, PropertySymbol> b)", "full_signature": "private static boolean isEquivalent(Map<String, PropertySymbol> a, Map<String, PropertySymbol> b)", "class_method_signature": "PropertyReferenceDeclarationProcessor.isEquivalent(Map<String, PropertySymbol> a, Map<String, PropertySymbol> b)", "testcase": false, "constructor": false}, {"identifier": "inheritPropertyReference", "parameters": "(\n            ModelDeclaration model, PropertyReferenceDeclaration ref)", "modifiers": "private static", "return": "PropertyReferenceDeclaration", "signature": "PropertyReferenceDeclaration inheritPropertyReference(\n            ModelDeclaration model, PropertyReferenceDeclaration ref)", "full_signature": "private static PropertyReferenceDeclaration inheritPropertyReference(\n            ModelDeclaration model, PropertyReferenceDeclaration ref)", "class_method_signature": "PropertyReferenceDeclarationProcessor.inheritPropertyReference(\n            ModelDeclaration model, PropertyReferenceDeclaration ref)", "testcase": false, "constructor": false}, {"identifier": "resolvePropertyReferences", "parameters": "(\n            ModelDeclaration model, AstRecordDefinition node, Set<ModelSymbol> modelRefs)", "modifiers": "private", "return": "void", "signature": "void resolvePropertyReferences(\n            ModelDeclaration model, AstRecordDefinition node, Set<ModelSymbol> modelRefs)", "full_signature": "private void resolvePropertyReferences(\n            ModelDeclaration model, AstRecordDefinition node, Set<ModelSymbol> modelRefs)", "class_method_signature": "PropertyReferenceDeclarationProcessor.resolvePropertyReferences(\n            ModelDeclaration model, AstRecordDefinition node, Set<ModelSymbol> modelRefs)", "testcase": false, "constructor": false}, {"identifier": "definePropertyReference", "parameters": "(\n            ModelDeclaration model, AstPropertyDefinition node, Set<ModelSymbol> modelRefs)", "modifiers": "private", "return": "void", "signature": "void definePropertyReference(\n            ModelDeclaration model, AstPropertyDefinition node, Set<ModelSymbol> modelRefs)", "full_signature": "private void definePropertyReference(\n            ModelDeclaration model, AstPropertyDefinition node, Set<ModelSymbol> modelRefs)", "class_method_signature": "PropertyReferenceDeclarationProcessor.definePropertyReference(\n            ModelDeclaration model, AstPropertyDefinition node, Set<ModelSymbol> modelRefs)", "testcase": false, "constructor": false}, {"identifier": "findInheritedType", "parameters": "(Set<ModelSymbol> modelRefs, String name)", "modifiers": "private static", "return": "CollectionType", "signature": "CollectionType findInheritedType(Set<ModelSymbol> modelRefs, String name)", "full_signature": "private static CollectionType findInheritedType(Set<ModelSymbol> modelRefs, String name)", "class_method_signature": "PropertyReferenceDeclarationProcessor.findInheritedType(Set<ModelSymbol> modelRefs, String name)", "testcase": false, "constructor": false}, {"identifier": "findInheritedDescription", "parameters": "(Set<ModelSymbol> modelRefs, String name)", "modifiers": "static", "return": "AstDescription", "signature": "AstDescription findInheritedDescription(Set<ModelSymbol> modelRefs, String name)", "full_signature": "static AstDescription findInheritedDescription(Set<ModelSymbol> modelRefs, String name)", "class_method_signature": "PropertyReferenceDeclarationProcessor.findInheritedDescription(Set<ModelSymbol> modelRefs, String name)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(PropertyReferenceDeclaration decl)", "modifiers": "private static", "return": "CollectionType", "signature": "CollectionType getType(PropertyReferenceDeclaration decl)", "full_signature": "private static CollectionType getType(PropertyReferenceDeclaration decl)", "class_method_signature": "PropertyReferenceDeclarationProcessor.getType(PropertyReferenceDeclaration decl)", "testcase": false, "constructor": false}, {"identifier": "stubFor", "parameters": "(CollectionType.CollectionKind kind)", "modifiers": "private static", "return": "PropertyReferenceDeclaration.ReferenceContainer<?>", "signature": "PropertyReferenceDeclaration.ReferenceContainer<?> stubFor(CollectionType.CollectionKind kind)", "full_signature": "private static PropertyReferenceDeclaration.ReferenceContainer<?> stubFor(CollectionType.CollectionKind kind)", "class_method_signature": "PropertyReferenceDeclarationProcessor.stubFor(CollectionType.CollectionKind kind)", "testcase": false, "constructor": false}], "file": "dmdl-project/asakusa-dmdl-core/src/main/java/com/asakusafw/dmdl/analyzer/PropertyReferenceDeclarationProcessor.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Context context, ModelDeclaration model, AstExpression<AstRecord> node)", "modifiers": "static", "return": "void", "body": "static void resolve(Context context, ModelDeclaration model, AstExpression<AstRecord> node) {\n        PropertyReferenceDeclarationProcessor resolver = new PropertyReferenceDeclarationProcessor(context);\n        node.accept(model, resolver);\n    }", "signature": "void resolve(Context context, ModelDeclaration model, AstExpression<AstRecord> node)", "full_signature": "static void resolve(Context context, ModelDeclaration model, AstExpression<AstRecord> node)", "class_method_signature": "PropertyReferenceDeclarationProcessor.resolve(Context context, ModelDeclaration model, AstExpression<AstRecord> node)", "testcase": false, "constructor": false, "invocations": ["accept"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}