{"test_class": {"identifier": "JCommanderWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils-project/jcommander-wrapper/src/test/java/com/asakusafw/utils/jcommander/JCommanderWrapperTest.java"}, "test_case": {"identifier": "expand_escape", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void expand_escape() {\n        JCommanderWrapper<Supplier<String>> commander = new JCommanderWrapper<>(\"PG\", new Exp());\n        Optional<String> result = commander.parse(\"-a\", \"--\", \"-bc\").map(Supplier::get);\n        assertThat(result, is(Optional.of(\"a-bc\")));\n    }", "signature": "void expand_escape()", "full_signature": "@Test public void expand_escape()", "class_method_signature": "JCommanderWrapperTest.expand_escape()", "testcase": true, "constructor": false, "invocations": ["map", "parse", "assertThat", "is", "of"]}, "focal_class": {"identifier": "JCommanderWrapper", "superclass": "", "interfaces": "implements CommandBuilder<T>", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(JCommanderWrapper.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JCommanderWrapper.class)", "var_name": "LOG"}, {"original_string": "private final Builder<T> root;", "modifier": "private final", "type": "Builder<T>", "declarator": "root", "var_name": "root"}], "methods": [{"identifier": "JCommanderWrapper", "parameters": "(String programName, Object command)", "modifiers": "public", "return": "", "signature": " JCommanderWrapper(String programName, Object command)", "full_signature": "public  JCommanderWrapper(String programName, Object command)", "class_method_signature": "JCommanderWrapper.JCommanderWrapper(String programName, Object command)", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Consumer<? super CommandBuilder<T>> configurator)", "modifiers": "@Override public", "return": "JCommanderWrapper<T>", "signature": "JCommanderWrapper<T> configure(Consumer<? super CommandBuilder<T>> configurator)", "full_signature": "@Override public JCommanderWrapper<T> configure(Consumer<? super CommandBuilder<T>> configurator)", "class_method_signature": "JCommanderWrapper.configure(Consumer<? super CommandBuilder<T>> configurator)", "testcase": false, "constructor": false}, {"identifier": "addCommand", "parameters": "(T command)", "modifiers": "@Override public", "return": "JCommanderWrapper<T>", "signature": "JCommanderWrapper<T> addCommand(T command)", "full_signature": "@Override public JCommanderWrapper<T> addCommand(T command)", "class_method_signature": "JCommanderWrapper.addCommand(T command)", "testcase": false, "constructor": false}, {"identifier": "addCommand", "parameters": "(String name, T command)", "modifiers": "@Override public", "return": "JCommanderWrapper<T>", "signature": "JCommanderWrapper<T> addCommand(String name, T command)", "full_signature": "@Override public JCommanderWrapper<T> addCommand(String name, T command)", "class_method_signature": "JCommanderWrapper.addCommand(String name, T command)", "testcase": false, "constructor": false}, {"identifier": "addGroup", "parameters": "(T command, Consumer<? super CommandBuilder<T>> configurator)", "modifiers": "@Override public", "return": "JCommanderWrapper<T>", "signature": "JCommanderWrapper<T> addGroup(T command, Consumer<? super CommandBuilder<T>> configurator)", "full_signature": "@Override public JCommanderWrapper<T> addGroup(T command, Consumer<? super CommandBuilder<T>> configurator)", "class_method_signature": "JCommanderWrapper.addGroup(T command, Consumer<? super CommandBuilder<T>> configurator)", "testcase": false, "constructor": false}, {"identifier": "addGroup", "parameters": "(String name, T command, Consumer<? super CommandBuilder<T>> configurator)", "modifiers": "@Override public", "return": "JCommanderWrapper<T>", "signature": "JCommanderWrapper<T> addGroup(String name, T command, Consumer<? super CommandBuilder<T>> configurator)", "full_signature": "@Override public JCommanderWrapper<T> addGroup(String name, T command, Consumer<? super CommandBuilder<T>> configurator)", "class_method_signature": "JCommanderWrapper.addGroup(String name, T command, Consumer<? super CommandBuilder<T>> configurator)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String... args)", "modifiers": "public", "return": "Optional<T>", "signature": "Optional<T> parse(String... args)", "full_signature": "public Optional<T> parse(String... args)", "class_method_signature": "JCommanderWrapper.parse(String... args)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(JCommander commander, String[] args)", "modifiers": "private static", "return": "void", "signature": "void validate(JCommander commander, String[] args)", "full_signature": "private static void validate(JCommander commander, String[] args)", "class_method_signature": "JCommanderWrapper.validate(JCommander commander, String[] args)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(String[] args)", "modifiers": "private", "return": "String[]", "signature": "String[] expand(String[] args)", "full_signature": "private String[] expand(String[] args)", "class_method_signature": "JCommanderWrapper.expand(String[] args)", "testcase": false, "constructor": false}, {"identifier": "findCommander", "parameters": "()", "modifiers": "private", "return": "JCommander", "signature": "JCommander findCommander()", "full_signature": "private JCommander findCommander()", "class_method_signature": "JCommanderWrapper.findCommander()", "testcase": false, "constructor": false}, {"identifier": "findCommander", "parameters": "(String[] args)", "modifiers": "private", "return": "JCommander", "signature": "JCommander findCommander(String[] args)", "full_signature": "private JCommander findCommander(String[] args)", "class_method_signature": "JCommanderWrapper.findCommander(String[] args)", "testcase": false, "constructor": false}, {"identifier": "isShortNameOption", "parameters": "(String arg)", "modifiers": "private static", "return": "boolean", "signature": "boolean isShortNameOption(String arg)", "full_signature": "private static boolean isShortNameOption(String arg)", "class_method_signature": "JCommanderWrapper.isShortNameOption(String arg)", "testcase": false, "constructor": false}, {"identifier": "getActiveCommand", "parameters": "(JCommander commander)", "modifiers": "private static", "return": "Object", "signature": "Object getActiveCommand(JCommander commander)", "full_signature": "private static Object getActiveCommand(JCommander commander)", "class_method_signature": "JCommanderWrapper.getActiveCommand(JCommander commander)", "testcase": false, "constructor": false}, {"identifier": "isHelp", "parameters": "(Object object)", "modifiers": "private static", "return": "boolean", "signature": "boolean isHelp(Object object)", "full_signature": "private static boolean isHelp(Object object)", "class_method_signature": "JCommanderWrapper.isHelp(Object object)", "testcase": false, "constructor": false}, {"identifier": "inject", "parameters": "(Object object, JCommander commander)", "modifiers": "private static", "return": "void", "signature": "void inject(Object object, JCommander commander)", "full_signature": "private static void inject(Object object, JCommander commander)", "class_method_signature": "JCommanderWrapper.inject(Object object, JCommander commander)", "testcase": false, "constructor": false}, {"identifier": "collectParams", "parameters": "(JCommander commander)", "modifiers": "private static", "return": "Params", "signature": "Params collectParams(JCommander commander)", "full_signature": "private static Params collectParams(JCommander commander)", "class_method_signature": "JCommanderWrapper.collectParams(JCommander commander)", "testcase": false, "constructor": false}, {"identifier": "collectParams", "parameters": "(Params results, Object object)", "modifiers": "private static", "return": "void", "signature": "void collectParams(Params results, Object object)", "full_signature": "private static void collectParams(Params results, Object object)", "class_method_signature": "JCommanderWrapper.collectParams(Params results, Object object)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(ParameterException exception, Consumer<? super String> sink)", "modifiers": "public static", "return": "void", "signature": "void handle(ParameterException exception, Consumer<? super String> sink)", "full_signature": "public static void handle(ParameterException exception, Consumer<? super String> sink)", "class_method_signature": "JCommanderWrapper.handle(ParameterException exception, Consumer<? super String> sink)", "testcase": false, "constructor": false}], "file": "utils-project/jcommander-wrapper/src/main/java/com/asakusafw/utils/jcommander/JCommanderWrapper.java"}, "focal_method": {"identifier": "parse", "parameters": "(String... args)", "modifiers": "public", "return": "Optional<T>", "body": "public Optional<T> parse(String... args) {\n        String[] expandedArgs = expand(args);\n        try {\n            root.commander.parse(expandedArgs);\n        } catch (ParameterException e) {\n            Optional.ofNullable(findCommander()).ifPresent(e::setJCommander);\n            throw e;\n        }\n        JCommander commander = findCommander();\n        @SuppressWarnings(\"unchecked\")\n        T cmd = (T) getActiveCommand(commander);\n        if (cmd != null) {\n            validate(commander, expandedArgs);\n            return Optional.of(cmd);\n        }\n        return Optional.empty();\n    }", "signature": "Optional<T> parse(String... args)", "full_signature": "public Optional<T> parse(String... args)", "class_method_signature": "JCommanderWrapper.parse(String... args)", "testcase": false, "constructor": false, "invocations": ["expand", "parse", "ifPresent", "ofNullable", "findCommander", "findCommander", "getActiveCommand", "validate", "of", "empty"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}