{"test_class": {"identifier": "DriverRepositoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "windgate-project/asakusa-windgate-core/src/test/java/com/asakusafw/windgate/core/resource/DriverRepositoryTest.java"}, "test_case": {"identifier": "testCreateDrain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateDrain() throws Exception {\n        DriverRepository repo = new DriverRepository(Arrays.asList(new MockResourceMirror(\"test2\")));\n        ProcessScript<String> script = new ProcessScript<>(\n                \"testing\", \"simple\", String.class, driver(\"test1\"), driver(\"test2\"));\n\n        DrainDriver<String> source = repo.createDrain(script);\n        assertThat(source, is(instanceOf(MockDrainDriver.class)));\n\n        MockDrainDriver<String> mock = (MockDrainDriver<String>) source;\n        assertThat(mock.name, is(\"test2\"));\n    }", "signature": "void testCreateDrain()", "full_signature": "@Test public void testCreateDrain()", "class_method_signature": "DriverRepositoryTest.testCreateDrain()", "testcase": true, "constructor": false, "invocations": ["asList", "driver", "driver", "createDrain", "assertThat", "is", "instanceOf", "assertThat", "is"]}, "focal_class": {"identifier": "DriverRepository", "superclass": "", "interfaces": "implements DriverFactory", "fields": [{"original_string": "static final WindGateLogger WGLOG = new WindGateCoreLogger(GateProfile.class);", "modifier": "static final", "type": "WindGateLogger", "declarator": "WGLOG = new WindGateCoreLogger(GateProfile.class)", "var_name": "WGLOG"}, {"original_string": "private final Map<String, ResourceMirror> resources;", "modifier": "private final", "type": "Map<String, ResourceMirror>", "declarator": "resources", "var_name": "resources"}], "methods": [{"identifier": "DriverRepository", "parameters": "(Iterable<? extends ResourceMirror> resources)", "modifiers": "public", "return": "", "signature": " DriverRepository(Iterable<? extends ResourceMirror> resources)", "full_signature": "public  DriverRepository(Iterable<? extends ResourceMirror> resources)", "class_method_signature": "DriverRepository.DriverRepository(Iterable<? extends ResourceMirror> resources)", "testcase": false, "constructor": true}, {"identifier": "createSource", "parameters": "(ProcessScript<T> script)", "modifiers": "@Override public", "return": "SourceDriver<T>", "signature": "SourceDriver<T> createSource(ProcessScript<T> script)", "full_signature": "@Override public SourceDriver<T> createSource(ProcessScript<T> script)", "class_method_signature": "DriverRepository.createSource(ProcessScript<T> script)", "testcase": false, "constructor": false}, {"identifier": "createDrain", "parameters": "(ProcessScript<T> script)", "modifiers": "@Override public", "return": "DrainDriver<T>", "signature": "DrainDriver<T> createDrain(ProcessScript<T> script)", "full_signature": "@Override public DrainDriver<T> createDrain(ProcessScript<T> script)", "class_method_signature": "DriverRepository.createDrain(ProcessScript<T> script)", "testcase": false, "constructor": false}], "file": "windgate-project/asakusa-windgate-core/src/main/java/com/asakusafw/windgate/core/resource/DriverRepository.java"}, "focal_method": {"identifier": "createDrain", "parameters": "(ProcessScript<T> script)", "modifiers": "@Override public", "return": "DrainDriver<T>", "body": "@Override\n    public <T> DrainDriver<T> createDrain(ProcessScript<T> script) throws IOException {\n        if (script == null) {\n            throw new IllegalArgumentException(\"script must not be null\"); //$NON-NLS-1$\n        }\n        String name = script.getDrainScript().getResourceName();\n        ResourceMirror resource = resources.get(name);\n        if (resource == null) {\n            WGLOG.error(\"E04001\",\n                    script.getName(),\n                    name);\n            throw new IOException(MessageFormat.format(\n                    \"Resource \\\"{0}\\\" is not defined (drain of \\\"{1}\\\")\",\n                    name,\n                    script.getName()));\n        }\n        return resource.createDrain(script);\n    }", "signature": "DrainDriver<T> createDrain(ProcessScript<T> script)", "full_signature": "@Override public DrainDriver<T> createDrain(ProcessScript<T> script)", "class_method_signature": "DriverRepository.createDrain(ProcessScript<T> script)", "testcase": false, "constructor": false, "invocations": ["getResourceName", "getDrainScript", "get", "error", "getName", "format", "getName", "createDrain"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}