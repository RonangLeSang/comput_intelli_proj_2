{"test_class": {"identifier": "FlowPartAnalyzerTest", "superclass": "extends OperatorCompilerTestRoot", "interfaces": "", "fields": [], "file": "operator/core/src/test/java/com/asakusafw/operator/flowpart/FlowPartAnalyzerTest.java"}, "test_case": {"identifier": "violate_top_level", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void violate_top_level() {\n        error(\"com.example.ViolateTopLevel$Nested\");\n    }", "signature": "void violate_top_level()", "full_signature": "@Test public void violate_top_level()", "class_method_signature": "FlowPartAnalyzerTest.violate_top_level()", "testcase": true, "constructor": false, "invocations": ["error"]}, "focal_class": {"identifier": "FlowPartAnalyzer", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = Logger.get(FlowPartAnalyzer.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = Logger.get(FlowPartAnalyzer.class)", "var_name": "LOG"}, {"original_string": "private final CompileEnvironment environment;", "modifier": "private final", "type": "CompileEnvironment", "declarator": "environment", "var_name": "environment"}, {"original_string": "private final TypeElement annotationDecl;", "modifier": "private final", "type": "TypeElement", "declarator": "annotationDecl", "var_name": "annotationDecl"}, {"original_string": "private final Map<TypeElement, AnnotationMirror> flowpartClasses;", "modifier": "private final", "type": "Map<TypeElement, AnnotationMirror>", "declarator": "flowpartClasses", "var_name": "flowpartClasses"}], "methods": [{"identifier": "FlowPartAnalyzer", "parameters": "(CompileEnvironment environment)", "modifiers": "public", "return": "", "signature": " FlowPartAnalyzer(CompileEnvironment environment)", "full_signature": "public  FlowPartAnalyzer(CompileEnvironment environment)", "class_method_signature": "FlowPartAnalyzer.FlowPartAnalyzer(CompileEnvironment environment)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(TypeElement typeDecl)", "modifiers": "public", "return": "void", "signature": "void register(TypeElement typeDecl)", "full_signature": "public void register(TypeElement typeDecl)", "class_method_signature": "FlowPartAnalyzer.register(TypeElement typeDecl)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "()", "modifiers": "public", "return": "Collection<OperatorClass>", "signature": "Collection<OperatorClass> resolve()", "full_signature": "public Collection<OperatorClass> resolve()", "class_method_signature": "FlowPartAnalyzer.resolve()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(AnnotationMirror annotation, TypeElement classDecl)", "modifiers": "private", "return": "OperatorClass", "signature": "OperatorClass resolve(AnnotationMirror annotation, TypeElement classDecl)", "full_signature": "private OperatorClass resolve(AnnotationMirror annotation, TypeElement classDecl)", "class_method_signature": "FlowPartAnalyzer.resolve(AnnotationMirror annotation, TypeElement classDecl)", "testcase": false, "constructor": false}, {"identifier": "validateClass", "parameters": "(TypeElement type)", "modifiers": "private", "return": "boolean", "signature": "boolean validateClass(TypeElement type)", "full_signature": "private boolean validateClass(TypeElement type)", "class_method_signature": "FlowPartAnalyzer.validateClass(TypeElement type)", "testcase": false, "constructor": false}, {"identifier": "selectValidConstructors", "parameters": "(TypeElement type)", "modifiers": "private", "return": "List<ExecutableElement>", "signature": "List<ExecutableElement> selectValidConstructors(TypeElement type)", "full_signature": "private List<ExecutableElement> selectValidConstructors(TypeElement type)", "class_method_signature": "FlowPartAnalyzer.selectValidConstructors(TypeElement type)", "testcase": false, "constructor": false}, {"identifier": "validateConstructor", "parameters": "(ExecutableElement ctor)", "modifiers": "private", "return": "boolean", "signature": "boolean validateConstructor(ExecutableElement ctor)", "full_signature": "private boolean validateConstructor(ExecutableElement ctor)", "class_method_signature": "FlowPartAnalyzer.validateConstructor(ExecutableElement ctor)", "testcase": false, "constructor": false}, {"identifier": "validateImport", "parameters": "(VariableElement param, TypeMirror component, AnnotationMirror extern)", "modifiers": "private", "return": "boolean", "signature": "boolean validateImport(VariableElement param, TypeMirror component, AnnotationMirror extern)", "full_signature": "private boolean validateImport(VariableElement param, TypeMirror component, AnnotationMirror extern)", "class_method_signature": "FlowPartAnalyzer.validateImport(VariableElement param, TypeMirror component, AnnotationMirror extern)", "testcase": false, "constructor": false}, {"identifier": "validateExport", "parameters": "(VariableElement param, TypeMirror component, AnnotationMirror extern)", "modifiers": "private", "return": "boolean", "signature": "boolean validateExport(VariableElement param, TypeMirror component, AnnotationMirror extern)", "full_signature": "private boolean validateExport(VariableElement param, TypeMirror component, AnnotationMirror extern)", "class_method_signature": "FlowPartAnalyzer.validateExport(VariableElement param, TypeMirror component, AnnotationMirror extern)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "(AnnotationMirror annotation, ExecutableElement constructor)", "modifiers": "private", "return": "OperatorDescription", "signature": "OperatorDescription analyze(AnnotationMirror annotation, ExecutableElement constructor)", "full_signature": "private OperatorDescription analyze(AnnotationMirror annotation, ExecutableElement constructor)", "class_method_signature": "FlowPartAnalyzer.analyze(AnnotationMirror annotation, ExecutableElement constructor)", "testcase": false, "constructor": false}, {"identifier": "analyzeExtern", "parameters": "(VariableElement param, AnnotationMirror extern)", "modifiers": "private", "return": "ExternMirror", "signature": "ExternMirror analyzeExtern(VariableElement param, AnnotationMirror extern)", "full_signature": "private ExternMirror analyzeExtern(VariableElement param, AnnotationMirror extern)", "class_method_signature": "FlowPartAnalyzer.analyzeExtern(VariableElement param, AnnotationMirror extern)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(Element element, String pattern, Object... arguments)", "modifiers": "private", "return": "void", "signature": "void warn(Element element, String pattern, Object... arguments)", "full_signature": "private void warn(Element element, String pattern, Object... arguments)", "class_method_signature": "FlowPartAnalyzer.warn(Element element, String pattern, Object... arguments)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Element element, String pattern, Object... arguments)", "modifiers": "private", "return": "void", "signature": "void error(Element element, String pattern, Object... arguments)", "full_signature": "private void error(Element element, String pattern, Object... arguments)", "class_method_signature": "FlowPartAnalyzer.error(Element element, String pattern, Object... arguments)", "testcase": false, "constructor": false}, {"identifier": "message", "parameters": "(Diagnostic.Kind kind, Element element, String pattern, Object... arguments)", "modifiers": "private", "return": "void", "signature": "void message(Diagnostic.Kind kind, Element element, String pattern, Object... arguments)", "full_signature": "private void message(Diagnostic.Kind kind, Element element, String pattern, Object... arguments)", "class_method_signature": "FlowPartAnalyzer.message(Diagnostic.Kind kind, Element element, String pattern, Object... arguments)", "testcase": false, "constructor": false}], "file": "operator/core/src/main/java/com/asakusafw/operator/flowpart/FlowPartAnalyzer.java"}, "focal_method": {"identifier": "error", "parameters": "(Element element, String pattern, Object... arguments)", "modifiers": "private", "return": "void", "body": "private void error(Element element, String pattern, Object... arguments) {\n        message(Diagnostic.Kind.ERROR, element, pattern, arguments);\n    }", "signature": "void error(Element element, String pattern, Object... arguments)", "full_signature": "private void error(Element element, String pattern, Object... arguments)", "class_method_signature": "FlowPartAnalyzer.error(Element element, String pattern, Object... arguments)", "testcase": false, "constructor": false, "invocations": ["message"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}