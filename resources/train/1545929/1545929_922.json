{"test_class": {"identifier": "FloatOptionTest", "superclass": "extends ValueOptionTestRoot", "interfaces": "", "fields": [], "file": "core-project/asakusa-runtime/src/test/java/com/asakusafw/runtime/value/FloatOptionTest.java"}, "test_case": {"identifier": "writeNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeNull() {\n        FloatOption option = new FloatOption();\n        FloatOption restored = restore(option);\n        assertThat(restored.isNull(), is(true));\n    }", "signature": "void writeNull()", "full_signature": "@Test public void writeNull()", "class_method_signature": "FloatOptionTest.writeNull()", "testcase": true, "constructor": false, "invocations": ["restore", "assertThat", "isNull", "is"]}, "focal_class": {"identifier": "FloatOption", "superclass": "extends ValueOption<FloatOption>", "interfaces": "", "fields": [{"original_string": "private float value;", "modifier": "private", "type": "float", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "FloatOption", "parameters": "()", "modifiers": "public", "return": "", "signature": " FloatOption()", "full_signature": "public  FloatOption()", "class_method_signature": "FloatOption.FloatOption()", "testcase": false, "constructor": true}, {"identifier": "FloatOption", "parameters": "(float value)", "modifiers": "public", "return": "", "signature": " FloatOption(float value)", "full_signature": "public  FloatOption(float value)", "class_method_signature": "FloatOption.FloatOption(float value)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float get()", "full_signature": "public float get()", "class_method_signature": "FloatOption.get()", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(float alternate)", "modifiers": "public", "return": "float", "signature": "float or(float alternate)", "full_signature": "public float or(float alternate)", "class_method_signature": "FloatOption.or(float alternate)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(float delta)", "modifiers": "public", "return": "void", "signature": "void add(float delta)", "full_signature": "public void add(float delta)", "class_method_signature": "FloatOption.add(float delta)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(FloatOption other)", "modifiers": "public", "return": "void", "signature": "void add(FloatOption other)", "full_signature": "public void add(FloatOption other)", "class_method_signature": "FloatOption.add(FloatOption other)", "testcase": false, "constructor": false}, {"identifier": "modify", "parameters": "(float newValue)", "modifiers": "@Deprecated public", "return": "FloatOption", "signature": "FloatOption modify(float newValue)", "full_signature": "@Deprecated public FloatOption modify(float newValue)", "class_method_signature": "FloatOption.modify(float newValue)", "testcase": false, "constructor": false}, {"identifier": "copyFrom", "parameters": "(FloatOption optionOrNull)", "modifiers": "@Override @Deprecated public", "return": "void", "signature": "void copyFrom(FloatOption optionOrNull)", "full_signature": "@Override @Deprecated public void copyFrom(FloatOption optionOrNull)", "class_method_signature": "FloatOption.copyFrom(FloatOption optionOrNull)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FloatOption.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "FloatOption.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(float other)", "modifiers": "public", "return": "boolean", "signature": "boolean has(float other)", "full_signature": "public boolean has(float other)", "class_method_signature": "FloatOption.has(float other)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(WritableRawComparable o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(WritableRawComparable o)", "full_signature": "@Override public int compareTo(WritableRawComparable o)", "class_method_signature": "FloatOption.compareTo(WritableRawComparable o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FloatOption.toString()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "FloatOption.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@SuppressWarnings(\"deprecation\") @Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@SuppressWarnings(\"deprecation\") @Override public void readFields(DataInput in)", "class_method_signature": "FloatOption.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "restore", "parameters": "(byte[] bytes, int offset, int limit)", "modifiers": "@SuppressWarnings(\"deprecation\") @Override public", "return": "int", "signature": "int restore(byte[] bytes, int offset, int limit)", "full_signature": "@SuppressWarnings(\"deprecation\") @Override public int restore(byte[] bytes, int offset, int limit)", "class_method_signature": "FloatOption.restore(byte[] bytes, int offset, int limit)", "testcase": false, "constructor": false}, {"identifier": "getSizeInBytes", "parameters": "(byte[] buf, int offset)", "modifiers": "@Override public", "return": "int", "signature": "int getSizeInBytes(byte[] buf, int offset)", "full_signature": "@Override public int getSizeInBytes(byte[] buf, int offset)", "class_method_signature": "FloatOption.getSizeInBytes(byte[] buf, int offset)", "testcase": false, "constructor": false}, {"identifier": "compareInBytes", "parameters": "(byte[] b1, int o1, byte[] b2, int o2)", "modifiers": "@Override public", "return": "int", "signature": "int compareInBytes(byte[] b1, int o1, byte[] b2, int o2)", "full_signature": "@Override public int compareInBytes(byte[] b1, int o1, byte[] b2, int o2)", "class_method_signature": "FloatOption.compareInBytes(byte[] b1, int o1, byte[] b2, int o2)", "testcase": false, "constructor": false}, {"identifier": "getBytesLength", "parameters": "(byte[] bytes, int offset, int length)", "modifiers": "public static", "return": "int", "signature": "int getBytesLength(byte[] bytes, int offset, int length)", "full_signature": "public static int getBytesLength(byte[] bytes, int offset, int length)", "class_method_signature": "FloatOption.getBytesLength(byte[] bytes, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "compareBytes", "parameters": "(\n            byte[] b1, int s1, int l1,\n            byte[] b2, int s2, int l2)", "modifiers": "public static", "return": "int", "signature": "int compareBytes(\n            byte[] b1, int s1, int l1,\n            byte[] b2, int s2, int l2)", "full_signature": "public static int compareBytes(\n            byte[] b1, int s1, int l1,\n            byte[] b2, int s2, int l2)", "class_method_signature": "FloatOption.compareBytes(\n            byte[] b1, int s1, int l1,\n            byte[] b2, int s2, int l2)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(float decoded)", "modifiers": "private static", "return": "int", "signature": "int encode(float decoded)", "full_signature": "private static int encode(float decoded)", "class_method_signature": "FloatOption.encode(float decoded)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(int encoded)", "modifiers": "private static", "return": "float", "signature": "float decode(int encoded)", "full_signature": "private static float decode(int encoded)", "class_method_signature": "FloatOption.decode(int encoded)", "testcase": false, "constructor": false}], "file": "core-project/asakusa-runtime/src/main/java/com/asakusafw/runtime/value/FloatOption.java"}, "focal_method": {"identifier": "restore", "parameters": "(byte[] bytes, int offset, int limit)", "modifiers": "@SuppressWarnings(\"deprecation\") @Override public", "return": "int", "body": "@SuppressWarnings(\"deprecation\")\n    @Override\n    public int restore(byte[] bytes, int offset, int limit) throws IOException {\n        if (limit - offset == 0) {\n            throw new IOException(MessageFormat.format(\n                    \"Cannot restore a float field ({0})\",\n                    \"invalid length\"));\n        }\n        if (bytes[offset + 0] == 0) {\n            setNull();\n            return 1;\n        } else if (limit - offset >= 1 + 1) {\n            modify(decode(ByteArrayUtil.readInt(bytes, offset + 1)));\n            return 4 + 1;\n        } else {\n            throw new IOException(MessageFormat.format(\n                    \"Cannot restore a float field ({0})\",\n                    \"invalid length\"));\n        }\n    }", "signature": "int restore(byte[] bytes, int offset, int limit)", "full_signature": "@SuppressWarnings(\"deprecation\") @Override public int restore(byte[] bytes, int offset, int limit)", "class_method_signature": "FloatOption.restore(byte[] bytes, int offset, int limit)", "testcase": false, "constructor": false, "invocations": ["format", "setNull", "modify", "decode", "readInt", "format"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}