{"test_class": {"identifier": "HiveQlEmitterTest", "superclass": "", "interfaces": "", "fields": [], "file": "info/hive/src/test/java/com/asakusafw/info/hive/syntax/HiveQlEmitterTest.java"}, "test_case": {"identifier": "w_field_comment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void w_field_comment() throws Exception {\n        TableInfo table = new TableInfo.Builder(\"testing\")\n            .withColumn(new ColumnInfo(\n                    \"col1\",\n                    PlainType.of(TypeName.INT),\n                    \"field comment\"))\n            .build();\n        emit(new SimpleCreateTable(table));\n    }", "signature": "void w_field_comment()", "full_signature": "@Test public void w_field_comment()", "class_method_signature": "HiveQlEmitterTest.w_field_comment()", "testcase": true, "constructor": false, "invocations": ["build", "withColumn", "of", "emit"]}, "focal_class": {"identifier": "HiveQlEmitter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "HiveQlEmitter", "parameters": "()", "modifiers": "private", "return": "", "signature": " HiveQlEmitter()", "full_signature": "private  HiveQlEmitter()", "class_method_signature": "HiveQlEmitter.HiveQlEmitter()", "testcase": false, "constructor": true}, {"identifier": "emit", "parameters": "(HiveCreateTable statement, Appendable writer)", "modifiers": "public static", "return": "void", "signature": "void emit(HiveCreateTable statement, Appendable writer)", "full_signature": "public static void emit(HiveCreateTable statement, Appendable writer)", "class_method_signature": "HiveQlEmitter.emit(HiveCreateTable statement, Appendable writer)", "testcase": false, "constructor": false}, {"identifier": "emitRowFormat", "parameters": "(Context c, DelimitedRowFormatInfo info)", "modifiers": "private static", "return": "void", "signature": "void emitRowFormat(Context c, DelimitedRowFormatInfo info)", "full_signature": "private static void emitRowFormat(Context c, DelimitedRowFormatInfo info)", "class_method_signature": "HiveQlEmitter.emitRowFormat(Context c, DelimitedRowFormatInfo info)", "testcase": false, "constructor": false}, {"identifier": "emitRowFormat", "parameters": "(Context c, SerdeRowFormatInfo info)", "modifiers": "private static", "return": "void", "signature": "void emitRowFormat(Context c, SerdeRowFormatInfo info)", "full_signature": "private static void emitRowFormat(Context c, SerdeRowFormatInfo info)", "class_method_signature": "HiveQlEmitter.emitRowFormat(Context c, SerdeRowFormatInfo info)", "testcase": false, "constructor": false}, {"identifier": "emitStorageFormat", "parameters": "(Context c, BuiltinStorageFormatInfo info)", "modifiers": "private static", "return": "void", "signature": "void emitStorageFormat(Context c, BuiltinStorageFormatInfo info)", "full_signature": "private static void emitStorageFormat(Context c, BuiltinStorageFormatInfo info)", "class_method_signature": "HiveQlEmitter.emitStorageFormat(Context c, BuiltinStorageFormatInfo info)", "testcase": false, "constructor": false}, {"identifier": "emitStorageFormat", "parameters": "(Context c, CustomStorageFormatInfo info)", "modifiers": "private static", "return": "void", "signature": "void emitStorageFormat(Context c, CustomStorageFormatInfo info)", "full_signature": "private static void emitStorageFormat(Context c, CustomStorageFormatInfo info)", "class_method_signature": "HiveQlEmitter.emitStorageFormat(Context c, CustomStorageFormatInfo info)", "testcase": false, "constructor": false}, {"identifier": "emitCreateTableHead", "parameters": "(Context c, HiveCreateTable statement)", "modifiers": "private static", "return": "void", "signature": "void emitCreateTableHead(Context c, HiveCreateTable statement)", "full_signature": "private static void emitCreateTableHead(Context c, HiveCreateTable statement)", "class_method_signature": "HiveQlEmitter.emitCreateTableHead(Context c, HiveCreateTable statement)", "testcase": false, "constructor": false}, {"identifier": "emitProperties", "parameters": "(Context c, Map<String, String> properties)", "modifiers": "private static", "return": "void", "signature": "void emitProperties(Context c, Map<String, String> properties)", "full_signature": "private static void emitProperties(Context c, Map<String, String> properties)", "class_method_signature": "HiveQlEmitter.emitProperties(Context c, Map<String, String> properties)", "testcase": false, "constructor": false}], "file": "info/hive/src/main/java/com/asakusafw/info/hive/syntax/HiveQlEmitter.java"}, "focal_method": {"identifier": "emit", "parameters": "(HiveCreateTable statement, Appendable writer)", "modifiers": "public static", "return": "void", "body": "public static void emit(HiveCreateTable statement, Appendable writer) throws IOException {\n        TableInfo table = statement.getTableInfo();\n        Context c = new Context(writer);\n\n        emitCreateTableHead(c, statement);\n\n        // TODO PARTITIONED BY\n        // TODO CLUSTERED BY\n        // TODO SKEWED BY\n\n        RowFormatInfo rowFormat = table.getRowFormat();\n        if (rowFormat != null) {\n            c.tokens(\"ROW\", \"FORMAT\");\n            switch (rowFormat.getFormatKind()) {\n            case DELIMITED:\n                emitRowFormat(c, (DelimitedRowFormatInfo) rowFormat);\n                break;\n            case SERDE:\n                emitRowFormat(c, (SerdeRowFormatInfo) rowFormat);\n                break;\n            default:\n                throw new AssertionError(rowFormat.getFormatKind());\n            }\n            c.newLine();\n        }\n        StorageFormatInfo storageFormat = table.getStorageFormat();\n        if (storageFormat != null) {\n            c.tokens(\"STORED\", \"AS\"); //$NON-NLS-1$ //$NON-NLS-2$\n            switch (storageFormat.getFormatKind().getCategory()) {\n            case BUILTIN:\n                emitStorageFormat(c, (BuiltinStorageFormatInfo) storageFormat);\n                break;\n            case CUSTOM:\n                emitStorageFormat(c, (CustomStorageFormatInfo) storageFormat);\n                break;\n            default:\n                throw new AssertionError(storageFormat);\n            }\n            c.newLine();\n        }\n        // or TODO STORED BY\n\n        if (statement.getLocation() != null) {\n            c.token(\"LOCATION\"); //$NON-NLS-1$\n            c.string(statement.getLocation());\n            c.newLine();\n        }\n        if (table.getProperties().isEmpty() == false) {\n            c.token(\"TBLPROPERTIES\"); //$NON-NLS-1$\n            c.token(\"(\"); //$NON-NLS-1$\n            c.newLine();\n            c.indent(+1);\n            emitProperties(c, table.getProperties());\n            c.indent(-1);\n            c.token(\")\"); //$NON-NLS-1$\n            c.newLine();\n        }\n    }", "signature": "void emit(HiveCreateTable statement, Appendable writer)", "full_signature": "public static void emit(HiveCreateTable statement, Appendable writer)", "class_method_signature": "HiveQlEmitter.emit(HiveCreateTable statement, Appendable writer)", "testcase": false, "constructor": false, "invocations": ["getTableInfo", "emitCreateTableHead", "getRowFormat", "tokens", "getFormatKind", "emitRowFormat", "emitRowFormat", "getFormatKind", "newLine", "getStorageFormat", "tokens", "getCategory", "getFormatKind", "emitStorageFormat", "emitStorageFormat", "newLine", "getLocation", "token", "string", "getLocation", "newLine", "isEmpty", "getProperties", "token", "token", "newLine", "indent", "emitProperties", "getProperties", "indent", "token", "newLine"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}