{"test_class": {"identifier": "RetryableProcessProfileTest", "superclass": "", "interfaces": "", "fields": [], "file": "windgate-project/asakusa-windgate-retryable/src/test/java/com/asakusafw/windgate/retryable/RetryableProcessProfileTest.java"}, "test_case": {"identifier": "convert_interval_illeval", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convert_interval_illeval() throws Exception {\n        ProcessProfile profile = profile(\n                KEY_RETRY_INTERVAL, \"-1\",\n                KEY_COMPONENT, DummyProcess.class.getName());\n        try {\n            RetryableProcessProfile.convert(profile);\n            fail();\n        } catch (IllegalArgumentException e) {\n            // ok.\n        }\n    }", "signature": "void convert_interval_illeval()", "full_signature": "@Test public void convert_interval_illeval()", "class_method_signature": "RetryableProcessProfileTest.convert_interval_illeval()", "testcase": true, "constructor": false, "invocations": ["profile", "getName", "convert", "fail"]}, "focal_class": {"identifier": "RetryableProcessProfile", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final WindGateLogger WGLOG = new RetryableProcessLogger(RetryableProcessProfile.class);", "modifier": "static final", "type": "WindGateLogger", "declarator": "WGLOG = new RetryableProcessLogger(RetryableProcessProfile.class)", "var_name": "WGLOG"}, {"original_string": "private static final char SEPARATOR = '.';", "modifier": "private static final", "type": "char", "declarator": "SEPARATOR = '.'", "var_name": "SEPARATOR"}, {"original_string": "public static final String KEY_RETRY_COUNT = \"retryCount\";", "modifier": "public static final", "type": "String", "declarator": "KEY_RETRY_COUNT = \"retryCount\"", "var_name": "KEY_RETRY_COUNT"}, {"original_string": "public static final String KEY_RETRY_INTERVAL = \"retryInterval\";", "modifier": "public static final", "type": "String", "declarator": "KEY_RETRY_INTERVAL = \"retryInterval\"", "var_name": "KEY_RETRY_INTERVAL"}, {"original_string": "public static final long DEFAULT_RETRY_INTERVAL = 0L;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_RETRY_INTERVAL = 0L", "var_name": "DEFAULT_RETRY_INTERVAL"}, {"original_string": "public static final String KEY_COMPONENT = \"component\";", "modifier": "public static final", "type": "String", "declarator": "KEY_COMPONENT = \"component\"", "var_name": "KEY_COMPONENT"}, {"original_string": "public static final String PREFIX_COMPONENT = KEY_COMPONENT + SEPARATOR;", "modifier": "public static final", "type": "String", "declarator": "PREFIX_COMPONENT = KEY_COMPONENT + SEPARATOR", "var_name": "PREFIX_COMPONENT"}, {"original_string": "private final ProcessProvider component;", "modifier": "private final", "type": "ProcessProvider", "declarator": "component", "var_name": "component"}, {"original_string": "private final int retryCount;", "modifier": "private final", "type": "int", "declarator": "retryCount", "var_name": "retryCount"}, {"original_string": "private final long retryInterval;", "modifier": "private final", "type": "long", "declarator": "retryInterval", "var_name": "retryInterval"}], "methods": [{"identifier": "RetryableProcessProfile", "parameters": "(ProcessProvider component, int retryCount)", "modifiers": "public", "return": "", "signature": " RetryableProcessProfile(ProcessProvider component, int retryCount)", "full_signature": "public  RetryableProcessProfile(ProcessProvider component, int retryCount)", "class_method_signature": "RetryableProcessProfile.RetryableProcessProfile(ProcessProvider component, int retryCount)", "testcase": false, "constructor": true}, {"identifier": "RetryableProcessProfile", "parameters": "(ProcessProvider component, int retryCount, long retryInterval)", "modifiers": "public", "return": "", "signature": " RetryableProcessProfile(ProcessProvider component, int retryCount, long retryInterval)", "full_signature": "public  RetryableProcessProfile(ProcessProvider component, int retryCount, long retryInterval)", "class_method_signature": "RetryableProcessProfile.RetryableProcessProfile(ProcessProvider component, int retryCount, long retryInterval)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(ProcessProfile profile)", "modifiers": "public static", "return": "RetryableProcessProfile", "signature": "RetryableProcessProfile convert(ProcessProfile profile)", "full_signature": "public static RetryableProcessProfile convert(ProcessProfile profile)", "class_method_signature": "RetryableProcessProfile.convert(ProcessProfile profile)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(ProcessProfile profile, String configKey, boolean mandatory)", "modifiers": "private static", "return": "String", "signature": "String extract(ProcessProfile profile, String configKey, boolean mandatory)", "full_signature": "private static String extract(ProcessProfile profile, String configKey, boolean mandatory)", "class_method_signature": "RetryableProcessProfile.extract(ProcessProfile profile, String configKey, boolean mandatory)", "testcase": false, "constructor": false}, {"identifier": "extractInt", "parameters": "(ProcessProfile profile, String key, int minimumValue)", "modifiers": "private static", "return": "int", "signature": "int extractInt(ProcessProfile profile, String key, int minimumValue)", "full_signature": "private static int extractInt(ProcessProfile profile, String key, int minimumValue)", "class_method_signature": "RetryableProcessProfile.extractInt(ProcessProfile profile, String key, int minimumValue)", "testcase": false, "constructor": false}, {"identifier": "extractLong", "parameters": "(ProcessProfile profile, String key, long defaultValue)", "modifiers": "private static", "return": "long", "signature": "long extractLong(ProcessProfile profile, String key, long defaultValue)", "full_signature": "private static long extractLong(ProcessProfile profile, String key, long defaultValue)", "class_method_signature": "RetryableProcessProfile.extractLong(ProcessProfile profile, String key, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "()", "modifiers": "public", "return": "ProcessProvider", "signature": "ProcessProvider getComponent()", "full_signature": "public ProcessProvider getComponent()", "class_method_signature": "RetryableProcessProfile.getComponent()", "testcase": false, "constructor": false}, {"identifier": "getRetryCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRetryCount()", "full_signature": "public int getRetryCount()", "class_method_signature": "RetryableProcessProfile.getRetryCount()", "testcase": false, "constructor": false}, {"identifier": "getRetryInterval", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRetryInterval()", "full_signature": "public long getRetryInterval()", "class_method_signature": "RetryableProcessProfile.getRetryInterval()", "testcase": false, "constructor": false}], "file": "windgate-project/asakusa-windgate-retryable/src/main/java/com/asakusafw/windgate/retryable/RetryableProcessProfile.java"}, "focal_method": {"identifier": "convert", "parameters": "(ProcessProfile profile)", "modifiers": "public static", "return": "RetryableProcessProfile", "body": "public static RetryableProcessProfile convert(ProcessProfile profile) throws IOException {\n        if (profile == null) {\n            throw new IllegalArgumentException(\"profile must not be null\"); //$NON-NLS-1$\n        }\n        int retryCount = extractInt(profile, KEY_RETRY_COUNT, 1);\n        long retryInterval = extractLong(profile, KEY_RETRY_INTERVAL, DEFAULT_RETRY_INTERVAL);\n        String componentName = profile.getName() + '-' + KEY_COMPONENT;\n        String componentClassName = extract(profile, KEY_COMPONENT, false);\n        Class<? extends ProcessProvider> componentClass;\n        try {\n            Class<?> aClass = Class.forName(componentClassName, false, profile.getContext().getClassLoader());\n            componentClass = aClass.asSubclass(ProcessProvider.class);\n        } catch (Exception e) {\n            WGLOG.error(e, \"E00001\",\n                    profile.getName(),\n                    KEY_COMPONENT,\n                    componentClassName);\n            throw new IllegalArgumentException(MessageFormat.format(\n                    \"Failed to create component process provider for \\\"{0}\\\": {1}\",\n                    profile.getName(),\n                    componentClassName), e);\n        }\n        Map<String, String> conf = profile.getConfiguration();\n        Map<String, String> componentConf = PropertiesUtil.createPrefixMap(conf, PREFIX_COMPONENT);\n        ProcessProfile componentProfile = new ProcessProfile(\n                componentName,\n                componentClass,\n                profile.getContext(),\n                componentConf);\n        ProcessProvider component;\n        try {\n            component = componentProfile.createProvider();\n        } catch (IOException e) {\n            WGLOG.error(e, \"E00001\",\n                    profile.getName(),\n                    KEY_COMPONENT,\n                    componentClassName);\n            throw e;\n        }\n        return new RetryableProcessProfile(component, retryCount, retryInterval);\n    }", "signature": "RetryableProcessProfile convert(ProcessProfile profile)", "full_signature": "public static RetryableProcessProfile convert(ProcessProfile profile)", "class_method_signature": "RetryableProcessProfile.convert(ProcessProfile profile)", "testcase": false, "constructor": false, "invocations": ["extractInt", "extractLong", "getName", "extract", "forName", "getClassLoader", "getContext", "asSubclass", "error", "getName", "format", "getName", "getConfiguration", "createPrefixMap", "getContext", "createProvider", "error", "getName"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}