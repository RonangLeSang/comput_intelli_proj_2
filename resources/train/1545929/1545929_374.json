{"test_class": {"identifier": "HttpJobClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(HttpJobClientTest.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HttpJobClientTest.class)", "var_name": "LOG"}, {"original_string": "private LocalTestServer server;", "modifier": "private", "type": "LocalTestServer", "declarator": "server", "var_name": "server"}, {"original_string": "private String baseUrl;", "modifier": "private", "type": "String", "declarator": "baseUrl", "var_name": "baseUrl"}], "file": "yaess-project/asakusa-yaess-jobqueue/src/test/java/com/asakusafw/yaess/jobqueue/client/HttpJobClientTest.java"}, "test_case": {"identifier": "submit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void submit() throws Exception {\n        JsonObject result = new JsonObject();\n        result.addProperty(\"status\", \"waiting\");\n        result.addProperty(\"jrid\", \"testing\");\n        JsonHandler handler = new JsonHandler(result);\n        server.register(\"/jobs/testing/execute\", handler);\n\n        HttpJobClient client = new HttpJobClient(baseUrl);\n        client.submit(new JobId(\"testing\"));\n\n        assertThat(handler.requestElement, is(nullValue()));\n    }", "signature": "void submit()", "full_signature": "@Test public void submit()", "class_method_signature": "HttpJobClientTest.submit()", "testcase": true, "constructor": false, "invocations": ["addProperty", "addProperty", "register", "submit", "assertThat", "is", "nullValue"]}, "focal_class": {"identifier": "HttpJobClient", "superclass": "", "interfaces": "implements JobClient", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(HttpJobClient.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HttpJobClient.class)", "var_name": "LOG"}, {"original_string": "private static final Charset ENCODING = StandardCharsets.UTF_8;", "modifier": "private static final", "type": "Charset", "declarator": "ENCODING = StandardCharsets.UTF_8", "var_name": "ENCODING"}, {"original_string": "static final ContentType CONTENT_TYPE = ContentType.create(\"text/json\", ENCODING);", "modifier": "static final", "type": "ContentType", "declarator": "CONTENT_TYPE = ContentType.create(\"text/json\", ENCODING)", "var_name": "CONTENT_TYPE"}, {"original_string": "private static final GsonBuilder GSON_BUILDER;", "modifier": "private static final", "type": "GsonBuilder", "declarator": "GSON_BUILDER", "var_name": "GSON_BUILDER"}, {"original_string": "private final String baseUri;", "modifier": "private final", "type": "String", "declarator": "baseUri", "var_name": "baseUri"}, {"original_string": "private final String user;", "modifier": "private final", "type": "String", "declarator": "user", "var_name": "user"}, {"original_string": "private final HttpClient http;", "modifier": "private final", "type": "HttpClient", "declarator": "http", "var_name": "http"}], "methods": [{"identifier": "HttpJobClient", "parameters": "(String baseUri)", "modifiers": "public", "return": "", "signature": " HttpJobClient(String baseUri)", "full_signature": "public  HttpJobClient(String baseUri)", "class_method_signature": "HttpJobClient.HttpJobClient(String baseUri)", "testcase": false, "constructor": true}, {"identifier": "HttpJobClient", "parameters": "(String baseUri, String user, String password)", "modifiers": "public", "return": "", "signature": " HttpJobClient(String baseUri, String user, String password)", "full_signature": "public  HttpJobClient(String baseUri, String user, String password)", "class_method_signature": "HttpJobClient.HttpJobClient(String baseUri, String user, String password)", "testcase": false, "constructor": true}, {"identifier": "createClient", "parameters": "()", "modifiers": "private", "return": "DefaultHttpClient", "signature": "DefaultHttpClient createClient()", "full_signature": "private DefaultHttpClient createClient()", "class_method_signature": "HttpJobClient.createClient()", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(String url)", "modifiers": "private static", "return": "String", "signature": "String normalize(String url)", "full_signature": "private static String normalize(String url)", "class_method_signature": "HttpJobClient.normalize(String url)", "testcase": false, "constructor": false}, {"identifier": "getBaseUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBaseUri()", "full_signature": "public String getBaseUri()", "class_method_signature": "HttpJobClient.getBaseUri()", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUser()", "full_signature": "public String getUser()", "class_method_signature": "HttpJobClient.getUser()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(JobScript script)", "modifiers": "@Override public", "return": "JobId", "signature": "JobId register(JobScript script)", "full_signature": "@Override public JobId register(JobScript script)", "class_method_signature": "HttpJobClient.register(JobScript script)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(JobId id)", "modifiers": "@Override public", "return": "JobStatus", "signature": "JobStatus getStatus(JobId id)", "full_signature": "@Override public JobStatus getStatus(JobId id)", "class_method_signature": "HttpJobClient.getStatus(JobId id)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(JobId id)", "modifiers": "@Override public", "return": "void", "signature": "void submit(JobId id)", "full_signature": "@Override public void submit(JobId id)", "class_method_signature": "HttpJobClient.submit(JobId id)", "testcase": false, "constructor": false}, {"identifier": "createUri", "parameters": "(String path)", "modifiers": "private", "return": "URI", "signature": "URI createUri(String path)", "full_signature": "private URI createUri(String path)", "class_method_signature": "HttpJobClient.createUri(String path)", "testcase": false, "constructor": false}, {"identifier": "extractJobStatus", "parameters": "(HttpUriRequest request, HttpResponse response)", "modifiers": "private", "return": "JobStatus", "signature": "JobStatus extractJobStatus(HttpUriRequest request, HttpResponse response)", "full_signature": "private JobStatus extractJobStatus(HttpUriRequest request, HttpResponse response)", "class_method_signature": "HttpJobClient.extractJobStatus(HttpUriRequest request, HttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "extractContent", "parameters": "(Class<T> type, HttpUriRequest request, HttpResponse response)", "modifiers": "private", "return": "T", "signature": "T extractContent(Class<T> type, HttpUriRequest request, HttpResponse response)", "full_signature": "private T extractContent(Class<T> type, HttpUriRequest request, HttpResponse response)", "class_method_signature": "HttpJobClient.extractContent(Class<T> type, HttpUriRequest request, HttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "toException", "parameters": "(HttpUriRequest request, HttpResponse response, String message)", "modifiers": "private", "return": "IOException", "signature": "IOException toException(HttpUriRequest request, HttpResponse response, String message)", "full_signature": "private IOException toException(HttpUriRequest request, HttpResponse response, String message)", "class_method_signature": "HttpJobClient.toException(HttpUriRequest request, HttpResponse response, String message)", "testcase": false, "constructor": false}, {"identifier": "toException", "parameters": "(HttpUriRequest request, HttpResponse response, JobStatus status, String message)", "modifiers": "private", "return": "IOException", "signature": "IOException toException(HttpUriRequest request, HttpResponse response, JobStatus status, String message)", "full_signature": "private IOException toException(HttpUriRequest request, HttpResponse response, JobStatus status, String message)", "class_method_signature": "HttpJobClient.toException(HttpUriRequest request, HttpResponse response, JobStatus status, String message)", "testcase": false, "constructor": false}, {"identifier": "createEntity", "parameters": "(JobScript script)", "modifiers": "private", "return": "HttpEntity", "signature": "HttpEntity createEntity(JobScript script)", "full_signature": "private HttpEntity createEntity(JobScript script)", "class_method_signature": "HttpJobClient.createEntity(JobScript script)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HttpJobClient.toString()", "testcase": false, "constructor": false}], "file": "yaess-project/asakusa-yaess-jobqueue/src/main/java/com/asakusafw/yaess/jobqueue/client/HttpJobClient.java"}, "focal_method": {"identifier": "submit", "parameters": "(JobId id)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void submit(JobId id) throws IOException, InterruptedException {\n        if (id == null) {\n            throw new IllegalArgumentException(\"id must not be null\"); //$NON-NLS-1$\n        }\n        HttpPut request = new HttpPut();\n        URI uri = createUri(String.format(\"jobs/%s/execute\", id.getToken()));\n        request.setURI(uri);\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Submitting job: method=put, uri={}\", uri);\n        }\n        HttpResponse response = http.execute(request);\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n            JobStatus status = extractJobStatus(request, response);\n            if (status.getKind() == JobStatus.Kind.ERROR) {\n                throw toException(request, response, status, MessageFormat.format(\n                        \"Failed to submit job: {0} ({1})\",\n                        id.getToken(),\n                        request.getURI()));\n            }\n        } else {\n            throw toException(request, response, MessageFormat.format(\n                    \"Failed to submit job: {0} ({1})\",\n                    id.getToken(),\n                    request.getURI()));\n        }\n    }", "signature": "void submit(JobId id)", "full_signature": "@Override public void submit(JobId id)", "class_method_signature": "HttpJobClient.submit(JobId id)", "testcase": false, "constructor": false, "invocations": ["createUri", "format", "getToken", "setURI", "isDebugEnabled", "debug", "execute", "getStatusCode", "getStatusLine", "extractJobStatus", "getKind", "toException", "format", "getToken", "getURI", "toException", "format", "getToken", "getURI"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}