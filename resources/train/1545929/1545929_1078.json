{"test_class": {"identifier": "LauncherOptionsParserTest", "superclass": "extends LauncherTestRoot", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static final WindowsSupport WINDOWS_SUPPORT = new WindowsSupport();", "modifier": "@ClassRule\n    public static final", "type": "WindowsSupport", "declarator": "WINDOWS_SUPPORT = new WindowsSupport()", "var_name": "WINDOWS_SUPPORT"}, {"original_string": "private final Configuration conf = new ConfigurationProvider().newInstance();", "modifier": "private final", "type": "Configuration", "declarator": "conf = new ConfigurationProvider().newInstance()", "var_name": "conf"}, {"original_string": "private final List<LauncherOptions> optionsManager = new ArrayList<>();", "modifier": "private final", "type": "List<LauncherOptions>", "declarator": "optionsManager = new ArrayList<>()", "var_name": "optionsManager"}], "file": "core-project/asakusa-runtime/src/test/java/com/asakusafw/runtime/stage/launcher/LauncherOptionsParserTest.java"}, "test_case": {"identifier": "w_libjars_disabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void w_libjars_disabled() throws Exception {\n        File cacheRepo = folder.newFolder();\n        conf.set(LauncherOptionsParser.KEY_CACHE_REPOSITORY, cacheRepo.toURI().toString());\n        conf.setBoolean(LauncherOptionsParser.KEY_CACHE_ENABLED, false);\n        File lib = putFile(\"dummy.jar\");\n        LauncherOptions options = parse(new String[] {\n                MockTool.class.getName(),\n                LauncherOptionsParser.KEY_ARG_LIBRARIES,\n                lib.getPath(),\n        });\n        assertClasspath(options.getApplicationClassLoader().getURLs(), \"testing\");\n        assertThat(lib, is(inClasspath(options.getApplicationClassLoader().getURLs())));\n\n        assertClasspath(GenericOptionsParser.getLibJars(conf), \"testing\");\n        assertThat(lib, is(inClasspath(GenericOptionsParser.getLibJars(conf))));\n    }", "signature": "void w_libjars_disabled()", "full_signature": "@Test public void w_libjars_disabled()", "class_method_signature": "LauncherOptionsParserTest.w_libjars_disabled()", "testcase": true, "constructor": false, "invocations": ["newFolder", "set", "toString", "toURI", "setBoolean", "putFile", "parse", "getName", "getPath", "assertClasspath", "getURLs", "getApplicationClassLoader", "assertThat", "is", "inClasspath", "getURLs", "getApplicationClassLoader", "assertClasspath", "getLibJars", "assertThat", "is", "inClasspath", "getLibJars"]}, "focal_class": {"identifier": "LauncherOptionsParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Log LOG = LogFactory.getLog(LauncherOptionsParser.class);", "modifier": "static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(LauncherOptionsParser.class)", "var_name": "LOG"}, {"original_string": "private static final ThreadFactory DAEMON_THREAD_FACTORY = new ThreadFactory() {\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            return t;\n        }\n    };", "modifier": "private static final", "type": "ThreadFactory", "declarator": "DAEMON_THREAD_FACTORY = new ThreadFactory() {\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            return t;\n        }\n    }", "var_name": "DAEMON_THREAD_FACTORY"}, {"original_string": "private static final String SYSPROP_TMPDIR = \"java.io.tmpdir\";", "modifier": "private static final", "type": "String", "declarator": "SYSPROP_TMPDIR = \"java.io.tmpdir\"", "var_name": "SYSPROP_TMPDIR"}, {"original_string": "private static final String SYSPROP_USER_NAME = \"user.name\";", "modifier": "private static final", "type": "String", "declarator": "SYSPROP_USER_NAME = \"user.name\"", "var_name": "SYSPROP_USER_NAME"}, {"original_string": "private static final String PATTERN_TMPDIR_NAME = \"asakusa-launcher-cache-{0}\";", "modifier": "private static final", "type": "String", "declarator": "PATTERN_TMPDIR_NAME = \"asakusa-launcher-cache-{0}\"", "var_name": "PATTERN_TMPDIR_NAME"}, {"original_string": "static final String KEY_ARG_LIBRARIES = \"-libjars\";", "modifier": "static final", "type": "String", "declarator": "KEY_ARG_LIBRARIES = \"-libjars\"", "var_name": "KEY_ARG_LIBRARIES"}, {"original_string": "static final String KEY_CONF_LIBRARIES = \"tmpjars\";", "modifier": "static final", "type": "String", "declarator": "KEY_CONF_LIBRARIES = \"tmpjars\"", "var_name": "KEY_CONF_LIBRARIES"}, {"original_string": "static final String KEY_CONF_JAR = StageConstants.PROP_APPLICATION_JAR;", "modifier": "static final", "type": "String", "declarator": "KEY_CONF_JAR = StageConstants.PROP_APPLICATION_JAR", "var_name": "KEY_CONF_JAR"}, {"original_string": "public static final String KEY_CACHE_ENABLED = \"com.asakusafw.launcher.cache.enabled\";", "modifier": "public static final", "type": "String", "declarator": "KEY_CACHE_ENABLED = \"com.asakusafw.launcher.cache.enabled\"", "var_name": "KEY_CACHE_ENABLED"}, {"original_string": "public static final String KEY_CACHE_REPOSITORY = \"com.asakusafw.launcher.cache.path\";", "modifier": "public static final", "type": "String", "declarator": "KEY_CACHE_REPOSITORY = \"com.asakusafw.launcher.cache.path\"", "var_name": "KEY_CACHE_REPOSITORY"}, {"original_string": "public static final String KEY_CACHE_RETRY_COUNT = \"com.asakusafw.launcher.cache.retry.max\";", "modifier": "public static final", "type": "String", "declarator": "KEY_CACHE_RETRY_COUNT = \"com.asakusafw.launcher.cache.retry.max\"", "var_name": "KEY_CACHE_RETRY_COUNT"}, {"original_string": "public static final String KEY_CACHE_RETRY_INTERVAL = \"com.asakusafw.launcher.cache.retry.interval\";", "modifier": "public static final", "type": "String", "declarator": "KEY_CACHE_RETRY_INTERVAL = \"com.asakusafw.launcher.cache.retry.interval\"", "var_name": "KEY_CACHE_RETRY_INTERVAL"}, {"original_string": "public static final String KEY_CACHE_TEMPORARY = \"com.asakusafw.launcher.cache.local\";", "modifier": "public static final", "type": "String", "declarator": "KEY_CACHE_TEMPORARY = \"com.asakusafw.launcher.cache.local\"", "var_name": "KEY_CACHE_TEMPORARY"}, {"original_string": "public static final String KEY_MAX_THREADS = \"com.asakusafw.launcher.cache.threads\";", "modifier": "public static final", "type": "String", "declarator": "KEY_MAX_THREADS = \"com.asakusafw.launcher.cache.threads\"", "var_name": "KEY_MAX_THREADS"}, {"original_string": "public static final String KEY_CACHE_JOBJAR = \"com.asakusafw.launcher.cache.jobjar\";", "modifier": "public static final", "type": "String", "declarator": "KEY_CACHE_JOBJAR = \"com.asakusafw.launcher.cache.jobjar\"", "var_name": "KEY_CACHE_JOBJAR"}, {"original_string": "static final String PATH_LOCK_DIRECTORY = \"lock\";", "modifier": "static final", "type": "String", "declarator": "PATH_LOCK_DIRECTORY = \"lock\"", "var_name": "PATH_LOCK_DIRECTORY"}, {"original_string": "static final boolean DEFAULT_CACHE_ENABLED = true;", "modifier": "static final", "type": "boolean", "declarator": "DEFAULT_CACHE_ENABLED = true", "var_name": "DEFAULT_CACHE_ENABLED"}, {"original_string": "static final int DEFAULT_CACHE_RETRY_COUNT = 50;", "modifier": "static final", "type": "int", "declarator": "DEFAULT_CACHE_RETRY_COUNT = 50", "var_name": "DEFAULT_CACHE_RETRY_COUNT"}, {"original_string": "static final long DEFAULT_CACHE_RETRY_INTERVAL = 100;", "modifier": "static final", "type": "long", "declarator": "DEFAULT_CACHE_RETRY_INTERVAL = 100", "var_name": "DEFAULT_CACHE_RETRY_INTERVAL"}, {"original_string": "static final boolean DEFAULT_CACHE_JOBJAR = true;", "modifier": "static final", "type": "boolean", "declarator": "DEFAULT_CACHE_JOBJAR = true", "var_name": "DEFAULT_CACHE_JOBJAR"}, {"original_string": "static final int MINIMUM_MAX_THREADS = 1;", "modifier": "static final", "type": "int", "declarator": "MINIMUM_MAX_THREADS = 1", "var_name": "MINIMUM_MAX_THREADS"}, {"original_string": "static final int DEFAULT_MAX_THREADS = 4;", "modifier": "static final", "type": "int", "declarator": "DEFAULT_MAX_THREADS = 4", "var_name": "DEFAULT_MAX_THREADS"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final List<String> arguments;", "modifier": "private final", "type": "List<String>", "declarator": "arguments", "var_name": "arguments"}, {"original_string": "private final Set<Object> applicationResources = new HashSet<>();", "modifier": "private final", "type": "Set<Object>", "declarator": "applicationResources = new HashSet<>()", "var_name": "applicationResources"}, {"original_string": "private final Set<File> applicationCacheFiles = new HashSet<>();", "modifier": "private final", "type": "Set<File>", "declarator": "applicationCacheFiles = new HashSet<>()", "var_name": "applicationCacheFiles"}], "methods": [{"identifier": "LauncherOptionsParser", "parameters": "(Configuration configuration, String[] args)", "modifiers": "private", "return": "", "signature": " LauncherOptionsParser(Configuration configuration, String[] args)", "full_signature": "private  LauncherOptionsParser(Configuration configuration, String[] args)", "class_method_signature": "LauncherOptionsParser.LauncherOptionsParser(Configuration configuration, String[] args)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(\n            Configuration configuration,\n            String... args)", "modifiers": "public static", "return": "LauncherOptions", "signature": "LauncherOptions parse(\n            Configuration configuration,\n            String... args)", "full_signature": "public static LauncherOptions parse(\n            Configuration configuration,\n            String... args)", "class_method_signature": "LauncherOptionsParser.parse(\n            Configuration configuration,\n            String... args)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "()", "modifiers": "private", "return": "LauncherOptions", "signature": "LauncherOptions analyze()", "full_signature": "private LauncherOptions analyze()", "class_method_signature": "LauncherOptionsParser.analyze()", "testcase": false, "constructor": false}, {"identifier": "consumeApplicationClassName", "parameters": "(LinkedList<String> rest)", "modifiers": "private", "return": "String", "signature": "String consumeApplicationClassName(LinkedList<String> rest)", "full_signature": "private String consumeApplicationClassName(LinkedList<String> rest)", "class_method_signature": "LauncherOptionsParser.consumeApplicationClassName(LinkedList<String> rest)", "testcase": false, "constructor": false}, {"identifier": "consumeLibraryPaths", "parameters": "(LinkedList<String> rest)", "modifiers": "private", "return": "List<Path>", "signature": "List<Path> consumeLibraryPaths(LinkedList<String> rest)", "full_signature": "private List<Path> consumeLibraryPaths(LinkedList<String> rest)", "class_method_signature": "LauncherOptionsParser.consumeLibraryPaths(LinkedList<String> rest)", "testcase": false, "constructor": false}, {"identifier": "consumeLibraryNames", "parameters": "(LinkedList<String> rest)", "modifiers": "private", "return": "List<String>", "signature": "List<String> consumeLibraryNames(LinkedList<String> rest)", "full_signature": "private List<String> consumeLibraryNames(LinkedList<String> rest)", "class_method_signature": "LauncherOptionsParser.consumeLibraryNames(LinkedList<String> rest)", "testcase": false, "constructor": false}, {"identifier": "processGenericOptions", "parameters": "(LinkedList<String> rest)", "modifiers": "private", "return": "GenericOptionsParser", "signature": "GenericOptionsParser processGenericOptions(LinkedList<String> rest)", "full_signature": "private GenericOptionsParser processGenericOptions(LinkedList<String> rest)", "class_method_signature": "LauncherOptionsParser.processGenericOptions(LinkedList<String> rest)", "testcase": false, "constructor": false}, {"identifier": "buildApplicationClassLoader", "parameters": "(\n            List<Path> libraryPaths,\n            String applicationClassName)", "modifiers": "private", "return": "URLClassLoader", "signature": "URLClassLoader buildApplicationClassLoader(\n            List<Path> libraryPaths,\n            String applicationClassName)", "full_signature": "private URLClassLoader buildApplicationClassLoader(\n            List<Path> libraryPaths,\n            String applicationClassName)", "class_method_signature": "LauncherOptionsParser.buildApplicationClassLoader(\n            List<Path> libraryPaths,\n            String applicationClassName)", "testcase": false, "constructor": false}, {"identifier": "processLibraries", "parameters": "(\n            List<Path> libraryPaths,\n            String applicationClassName)", "modifiers": "private", "return": "List<URL>", "signature": "List<URL> processLibraries(\n            List<Path> libraryPaths,\n            String applicationClassName)", "full_signature": "private List<URL> processLibraries(\n            List<Path> libraryPaths,\n            String applicationClassName)", "class_method_signature": "LauncherOptionsParser.processLibraries(\n            List<Path> libraryPaths,\n            String applicationClassName)", "testcase": false, "constructor": false}, {"identifier": "configureJobJar", "parameters": "(List<Path> paths, String className, Map<Path, Path> cacheMap)", "modifiers": "private", "return": "void", "signature": "void configureJobJar(List<Path> paths, String className, Map<Path, Path> cacheMap)", "full_signature": "private void configureJobJar(List<Path> paths, String className, Map<Path, Path> cacheMap)", "class_method_signature": "LauncherOptionsParser.configureJobJar(List<Path> paths, String className, Map<Path, Path> cacheMap)", "testcase": false, "constructor": false}, {"identifier": "isInclude", "parameters": "(File file, String className)", "modifiers": "private", "return": "boolean", "signature": "boolean isInclude(File file, String className)", "full_signature": "private boolean isInclude(File file, String className)", "class_method_signature": "LauncherOptionsParser.isInclude(File file, String className)", "testcase": false, "constructor": false}, {"identifier": "buildLibjars", "parameters": "(List<Path> paths)", "modifiers": "private", "return": "String", "signature": "String buildLibjars(List<Path> paths)", "full_signature": "private String buildLibjars(List<Path> paths)", "class_method_signature": "LauncherOptionsParser.buildLibjars(List<Path> paths)", "testcase": false, "constructor": false}, {"identifier": "processLibraryCache", "parameters": "(List<Path> libraryPaths)", "modifiers": "private", "return": "Map<Path, Path>", "signature": "Map<Path, Path> processLibraryCache(List<Path> libraryPaths)", "full_signature": "private Map<Path, Path> processLibraryCache(List<Path> libraryPaths)", "class_method_signature": "LauncherOptionsParser.processLibraryCache(List<Path> libraryPaths)", "testcase": false, "constructor": false}, {"identifier": "computeEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean computeEnabled()", "full_signature": "private boolean computeEnabled()", "class_method_signature": "LauncherOptionsParser.computeEnabled()", "testcase": false, "constructor": false}, {"identifier": "computeRepositoryPath", "parameters": "()", "modifiers": "private", "return": "Path", "signature": "Path computeRepositoryPath()", "full_signature": "private Path computeRepositoryPath()", "class_method_signature": "LauncherOptionsParser.computeRepositoryPath()", "testcase": false, "constructor": false}, {"identifier": "computeTemporaryDirectory", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File computeTemporaryDirectory()", "full_signature": "private File computeTemporaryDirectory()", "class_method_signature": "LauncherOptionsParser.computeTemporaryDirectory()", "testcase": false, "constructor": false}, {"identifier": "buildApplicationClass", "parameters": "(String applicationClassName)", "modifiers": "private", "return": "Class<? extends Tool>", "signature": "Class<? extends Tool> buildApplicationClass(String applicationClassName)", "full_signature": "private Class<? extends Tool> buildApplicationClass(String applicationClassName)", "class_method_signature": "LauncherOptionsParser.buildApplicationClass(String applicationClassName)", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "(boolean success)", "modifiers": "private", "return": "void", "signature": "void cleanUp(boolean success)", "full_signature": "private void cleanUp(boolean success)", "class_method_signature": "LauncherOptionsParser.cleanUp(boolean success)", "testcase": false, "constructor": false}], "file": "core-project/asakusa-runtime/src/main/java/com/asakusafw/runtime/stage/launcher/LauncherOptionsParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(\n            Configuration configuration,\n            String... args)", "modifiers": "public static", "return": "LauncherOptions", "body": "public static LauncherOptions parse(\n            Configuration configuration,\n            String... args) throws IOException, InterruptedException {\n        LauncherOptionsParser parser = new LauncherOptionsParser(configuration, args);\n        boolean success = false;\n        try {\n            LauncherOptions result = parser.analyze();\n            success = true;\n            return result;\n        } finally {\n            parser.cleanUp(success);\n        }\n    }", "signature": "LauncherOptions parse(\n            Configuration configuration,\n            String... args)", "full_signature": "public static LauncherOptions parse(\n            Configuration configuration,\n            String... args)", "class_method_signature": "LauncherOptionsParser.parse(\n            Configuration configuration,\n            String... args)", "testcase": false, "constructor": false, "invocations": ["analyze", "cleanUp"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}