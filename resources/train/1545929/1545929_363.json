{"test_class": {"identifier": "JobClientProfileTest", "superclass": "", "interfaces": "", "fields": [], "file": "yaess-project/asakusa-yaess-jobqueue/src/test/java/com/asakusafw/yaess/jobqueue/JobClientProfileTest.java"}, "test_case": {"identifier": "convert_invalid_interval", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void convert_invalid_interval() throws Exception {\n        ServiceProfile<?> original = new ServiceProfile<HadoopScriptHandler>(\n                \"testing\",\n                QueueHadoopScriptHandler.class,\n                map(new String[] {\n                        JobClientProfile.KEY_POLLING_INTERVAL, \"-1\",\n                        \"1.url\", \"http://www.example.com/jobqueue/\",\n                }),\n                new ProfileContext(getClass().getClassLoader(), new VariableResolver(map(new String[] {\n                }))));\n        JobClientProfile.convert(original);\n    }", "signature": "void convert_invalid_interval()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void convert_invalid_interval()", "class_method_signature": "JobClientProfileTest.convert_invalid_interval()", "testcase": true, "constructor": false, "invocations": ["map", "getClassLoader", "getClass", "map", "convert"]}, "focal_class": {"identifier": "JobClientProfile", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(JobClientProfile.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JobClientProfile.class)", "var_name": "LOG"}, {"original_string": "static final String KEY_TIMEOUT = \"timeout\";", "modifier": "static final", "type": "String", "declarator": "KEY_TIMEOUT = \"timeout\"", "var_name": "KEY_TIMEOUT"}, {"original_string": "static final String KEY_POLLING_INTERVAL = \"pollingInterval\";", "modifier": "static final", "type": "String", "declarator": "KEY_POLLING_INTERVAL = \"pollingInterval\"", "var_name": "KEY_POLLING_INTERVAL"}, {"original_string": "static final Pattern PATTERN_COMPONENT = Pattern.compile(\"\\\\d+\");", "modifier": "static final", "type": "Pattern", "declarator": "PATTERN_COMPONENT = Pattern.compile(\"\\\\d+\")", "var_name": "PATTERN_COMPONENT"}, {"original_string": "static final String KEY_URL = \"url\";", "modifier": "static final", "type": "String", "declarator": "KEY_URL = \"url\"", "var_name": "KEY_URL"}, {"original_string": "static final String KEY_USER = \"user\";", "modifier": "static final", "type": "String", "declarator": "KEY_USER = \"user\"", "var_name": "KEY_USER"}, {"original_string": "static final String KEY_PASSWORD = \"password\";", "modifier": "static final", "type": "String", "declarator": "KEY_PASSWORD = \"password\"", "var_name": "KEY_PASSWORD"}, {"original_string": "static final long DEFAULT_TIMEOUT = 10000;", "modifier": "static final", "type": "long", "declarator": "DEFAULT_TIMEOUT = 10000", "var_name": "DEFAULT_TIMEOUT"}, {"original_string": "static final long DEFAULT_POLLING_INTERVAL = 1000;", "modifier": "static final", "type": "long", "declarator": "DEFAULT_POLLING_INTERVAL = 1000", "var_name": "DEFAULT_POLLING_INTERVAL"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final List<JobClient> clients;", "modifier": "private final", "type": "List<JobClient>", "declarator": "clients", "var_name": "clients"}, {"original_string": "private final long timeout;", "modifier": "private final", "type": "long", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "private final long pollingInterval;", "modifier": "private final", "type": "long", "declarator": "pollingInterval", "var_name": "pollingInterval"}], "methods": [{"identifier": "JobClientProfile", "parameters": "(String prefix, List<? extends JobClient> clients, long timeout, long pollingInterval)", "modifiers": "public", "return": "", "signature": " JobClientProfile(String prefix, List<? extends JobClient> clients, long timeout, long pollingInterval)", "full_signature": "public  JobClientProfile(String prefix, List<? extends JobClient> clients, long timeout, long pollingInterval)", "class_method_signature": "JobClientProfile.JobClientProfile(String prefix, List<? extends JobClient> clients, long timeout, long pollingInterval)", "testcase": false, "constructor": true}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrefix()", "full_signature": "public String getPrefix()", "class_method_signature": "JobClientProfile.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getClients", "parameters": "()", "modifiers": "public", "return": "List<JobClient>", "signature": "List<JobClient> getClients()", "full_signature": "public List<JobClient> getClients()", "class_method_signature": "JobClientProfile.getClients()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeout()", "full_signature": "public long getTimeout()", "class_method_signature": "JobClientProfile.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "getPollingInterval", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPollingInterval()", "full_signature": "public long getPollingInterval()", "class_method_signature": "JobClientProfile.getPollingInterval()", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(ServiceProfile<?> profile)", "modifiers": "public static", "return": "JobClientProfile", "signature": "JobClientProfile convert(ServiceProfile<?> profile)", "full_signature": "public static JobClientProfile convert(ServiceProfile<?> profile)", "class_method_signature": "JobClientProfile.convert(ServiceProfile<?> profile)", "testcase": false, "constructor": false}, {"identifier": "extractLong", "parameters": "(\n            ServiceProfile<?> profile,\n            Map<String, String> conf,\n            String key,\n            long defaultValue)", "modifiers": "private static", "return": "long", "signature": "long extractLong(\n            ServiceProfile<?> profile,\n            Map<String, String> conf,\n            String key,\n            long defaultValue)", "full_signature": "private static long extractLong(\n            ServiceProfile<?> profile,\n            Map<String, String> conf,\n            String key,\n            long defaultValue)", "class_method_signature": "JobClientProfile.extractLong(\n            ServiceProfile<?> profile,\n            Map<String, String> conf,\n            String key,\n            long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "extractClients", "parameters": "(\n            ServiceProfile<?> profile,\n            Map<String, String> conf)", "modifiers": "private static", "return": "List<JobClient>", "signature": "List<JobClient> extractClients(\n            ServiceProfile<?> profile,\n            Map<String, String> conf)", "full_signature": "private static List<JobClient> extractClients(\n            ServiceProfile<?> profile,\n            Map<String, String> conf)", "class_method_signature": "JobClientProfile.extractClients(\n            ServiceProfile<?> profile,\n            Map<String, String> conf)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(\n            ServiceProfile<?> profile,\n            Map<String, String> conf,\n            String prefix,\n            String key)", "modifiers": "private static", "return": "String", "signature": "String resolve(\n            ServiceProfile<?> profile,\n            Map<String, String> conf,\n            String prefix,\n            String key)", "full_signature": "private static String resolve(\n            ServiceProfile<?> profile,\n            Map<String, String> conf,\n            String prefix,\n            String key)", "class_method_signature": "JobClientProfile.resolve(\n            ServiceProfile<?> profile,\n            Map<String, String> conf,\n            String prefix,\n            String key)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(ServiceProfile<?> profile, String key, String value)", "modifiers": "private static", "return": "String", "signature": "String resolve(ServiceProfile<?> profile, String key, String value)", "full_signature": "private static String resolve(ServiceProfile<?> profile, String key, String value)", "class_method_signature": "JobClientProfile.resolve(ServiceProfile<?> profile, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "isClientPrefix", "parameters": "(String key)", "modifiers": "private static", "return": "boolean", "signature": "boolean isClientPrefix(String key)", "full_signature": "private static boolean isClientPrefix(String key)", "class_method_signature": "JobClientProfile.isClientPrefix(String key)", "testcase": false, "constructor": false}, {"identifier": "removeKeyPrefix", "parameters": "(Map<?, ?> properties, String prefix)", "modifiers": "private static", "return": "void", "signature": "void removeKeyPrefix(Map<?, ?> properties, String prefix)", "full_signature": "private static void removeKeyPrefix(Map<?, ?> properties, String prefix)", "class_method_signature": "JobClientProfile.removeKeyPrefix(Map<?, ?> properties, String prefix)", "testcase": false, "constructor": false}], "file": "yaess-project/asakusa-yaess-jobqueue/src/main/java/com/asakusafw/yaess/jobqueue/JobClientProfile.java"}, "focal_method": {"identifier": "convert", "parameters": "(ServiceProfile<?> profile)", "modifiers": "public static", "return": "JobClientProfile", "body": "public static JobClientProfile convert(ServiceProfile<?> profile) {\n        if (profile == null) {\n            throw new IllegalArgumentException(\"profile must not be null\"); //$NON-NLS-1$\n        }\n        Map<String, String> conf = new HashMap<>(profile.getConfiguration());\n        conf.remove(ExecutionScriptHandler.KEY_RESOURCE);\n        removeKeyPrefix(conf, ExecutionScriptHandler.KEY_PROP_PREFIX);\n        long timeout = extractLong(profile, conf, KEY_TIMEOUT, DEFAULT_TIMEOUT);\n        if (timeout <= 0) {\n            throw new IllegalArgumentException(MessageFormat.format(\n                    \"Request time out must be > 0 ({0}.{1}={2})\",\n                    profile.getPrefix(),\n                    KEY_TIMEOUT,\n                    timeout));\n        }\n        long pollingInterval = extractLong(profile, conf, KEY_POLLING_INTERVAL, DEFAULT_POLLING_INTERVAL);\n        if (pollingInterval <= 0) {\n            throw new IllegalArgumentException(MessageFormat.format(\n                    \"Status polling interval must be > 0 ({0}.{1}={2})\",\n                    profile.getPrefix(),\n                    KEY_TIMEOUT,\n                    pollingInterval));\n        }\n        List<JobClient> clients = extractClients(profile, conf);\n        if (clients.isEmpty()) {\n            throw new IllegalArgumentException(MessageFormat.format(\n                    \"There must be one or more job clients ({0}.<n>)\",\n                    profile.getPrefix()));\n        }\n        return new JobClientProfile(profile.getPrefix(), clients, timeout, pollingInterval);\n    }", "signature": "JobClientProfile convert(ServiceProfile<?> profile)", "full_signature": "public static JobClientProfile convert(ServiceProfile<?> profile)", "class_method_signature": "JobClientProfile.convert(ServiceProfile<?> profile)", "testcase": false, "constructor": false, "invocations": ["getConfiguration", "remove", "removeKeyPrefix", "extractLong", "format", "getPrefix", "extractLong", "format", "getPrefix", "extractClients", "isEmpty", "format", "getPrefix", "getPrefix"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}