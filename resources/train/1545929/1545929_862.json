{"test_class": {"identifier": "AbstractTextStreamFormatTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-project/text/src/test/java/com/asakusafw/runtime/io/text/directio/AbstractTextStreamFormatTest.java"}, "test_case": {"identifier": "output", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void output() throws Exception {\n        MockFormat format = format(1);\n        String[][] data = {\n                { \"Hello, world!\" }\n        };\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        try (ModelOutput<String[]> out = format.createOutput(String[].class, \"dummy\", output)) {\n            dump(out, data);\n        }\n        assertThat(deserialize(output.toByteArray()), is(data));\n    }", "signature": "void output()", "full_signature": "@Test public void output()", "class_method_signature": "AbstractTextStreamFormatTest.output()", "testcase": true, "constructor": false, "invocations": ["format", "createOutput", "dump", "assertThat", "deserialize", "toByteArray", "is"]}, "focal_class": {"identifier": "AbstractTextStreamFormat", "superclass": "extends ConfigurableBinaryStreamFormat<T>", "interfaces": "", "fields": [{"original_string": "private static final Set<InputOption> INPUT_OPTS_HEAD =\n            Collections.unmodifiableSet(EnumSet.of(InputOption.FROM_FILE_HEAD));", "modifier": "private static final", "type": "Set<InputOption>", "declarator": "INPUT_OPTS_HEAD =\n            Collections.unmodifiableSet(EnumSet.of(InputOption.FROM_FILE_HEAD))", "var_name": "INPUT_OPTS_HEAD"}, {"original_string": "private static final Set<InputOption> INPUT_OPTS_REST = Collections.emptySet();", "modifier": "private static final", "type": "Set<InputOption>", "declarator": "INPUT_OPTS_REST = Collections.emptySet()", "var_name": "INPUT_OPTS_REST"}, {"original_string": "private static final Set<OutputOption> OUTPUT_OPTS = Collections.emptySet();", "modifier": "private static final", "type": "Set<OutputOption>", "declarator": "OUTPUT_OPTS = Collections.emptySet()", "var_name": "OUTPUT_OPTS"}, {"original_string": "private final AtomicReference<TextFormat> textFormatCache = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<TextFormat>", "declarator": "textFormatCache = new AtomicReference<>()", "var_name": "textFormatCache"}, {"original_string": "private final AtomicReference<RecordDefinition<T>> recordDefinitionCache = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<RecordDefinition<T>>", "declarator": "recordDefinitionCache = new AtomicReference<>()", "var_name": "recordDefinitionCache"}], "methods": [{"identifier": "createTextFormat", "parameters": "()", "modifiers": "protected abstract", "return": "TextFormat", "signature": "TextFormat createTextFormat()", "full_signature": "protected abstract TextFormat createTextFormat()", "class_method_signature": "AbstractTextStreamFormat.createTextFormat()", "testcase": false, "constructor": false}, {"identifier": "createRecordDefinition", "parameters": "()", "modifiers": "protected abstract", "return": "RecordDefinition<T>", "signature": "RecordDefinition<T> createRecordDefinition()", "full_signature": "protected abstract RecordDefinition<T> createRecordDefinition()", "class_method_signature": "AbstractTextStreamFormat.createRecordDefinition()", "testcase": false, "constructor": false}, {"identifier": "getInputSplitter", "parameters": "()", "modifiers": "protected", "return": "InputSplitter", "signature": "InputSplitter getInputSplitter()", "full_signature": "protected InputSplitter getInputSplitter()", "class_method_signature": "AbstractTextStreamFormat.getInputSplitter()", "testcase": false, "constructor": false}, {"identifier": "getCompressionCodecClass", "parameters": "()", "modifiers": "protected", "return": "Class<? extends CompressionCodec>", "signature": "Class<? extends CompressionCodec> getCompressionCodecClass()", "full_signature": "protected Class<? extends CompressionCodec> getCompressionCodecClass()", "class_method_signature": "AbstractTextStreamFormat.getCompressionCodecClass()", "testcase": false, "constructor": false}, {"identifier": "afterInput", "parameters": "(T model, StringOption path, TextInput<T> input)", "modifiers": "protected", "return": "void", "signature": "void afterInput(T model, StringOption path, TextInput<T> input)", "full_signature": "protected void afterInput(T model, StringOption path, TextInput<T> input)", "class_method_signature": "AbstractTextStreamFormat.afterInput(T model, StringOption path, TextInput<T> input)", "testcase": false, "constructor": false}, {"identifier": "beforeOutput", "parameters": "(T model, StringOption path, TextOutput<T> output)", "modifiers": "protected", "return": "void", "signature": "void beforeOutput(T model, StringOption path, TextOutput<T> output)", "full_signature": "protected void beforeOutput(T model, StringOption path, TextOutput<T> output)", "class_method_signature": "AbstractTextStreamFormat.beforeOutput(T model, StringOption path, TextOutput<T> output)", "testcase": false, "constructor": false}, {"identifier": "getTextFormat", "parameters": "()", "modifiers": "public final", "return": "TextFormat", "signature": "TextFormat getTextFormat()", "full_signature": "public final TextFormat getTextFormat()", "class_method_signature": "AbstractTextStreamFormat.getTextFormat()", "testcase": false, "constructor": false}, {"identifier": "getRecordDefinition", "parameters": "()", "modifiers": "public final", "return": "RecordDefinition<T>", "signature": "RecordDefinition<T> getRecordDefinition()", "full_signature": "public final RecordDefinition<T> getRecordDefinition()", "class_method_signature": "AbstractTextStreamFormat.getRecordDefinition()", "testcase": false, "constructor": false}, {"identifier": "cached", "parameters": "(Supplier<U> factory, AtomicReference<U> cache)", "modifiers": "private static", "return": "U", "signature": "U cached(Supplier<U> factory, AtomicReference<U> cache)", "full_signature": "private static U cached(Supplier<U> factory, AtomicReference<U> cache)", "class_method_signature": "AbstractTextStreamFormat.cached(Supplier<U> factory, AtomicReference<U> cache)", "testcase": false, "constructor": false}, {"identifier": "getPreferredFragmentSize", "parameters": "()", "modifiers": "@Override public final", "return": "long", "signature": "long getPreferredFragmentSize()", "full_signature": "@Override public final long getPreferredFragmentSize()", "class_method_signature": "AbstractTextStreamFormat.getPreferredFragmentSize()", "testcase": false, "constructor": false}, {"identifier": "getMinimumFragmentSize", "parameters": "()", "modifiers": "@Override public final", "return": "long", "signature": "long getMinimumFragmentSize()", "full_signature": "@Override public final long getMinimumFragmentSize()", "class_method_signature": "AbstractTextStreamFormat.getMinimumFragmentSize()", "testcase": false, "constructor": false}, {"identifier": "createInput", "parameters": "(\n            Class<? extends T> dataType,\n            String path,\n            InputStream stream,\n            long offset, long fragmentSize)", "modifiers": "@Override public", "return": "ModelInput<T>", "signature": "ModelInput<T> createInput(\n            Class<? extends T> dataType,\n            String path,\n            InputStream stream,\n            long offset, long fragmentSize)", "full_signature": "@Override public ModelInput<T> createInput(\n            Class<? extends T> dataType,\n            String path,\n            InputStream stream,\n            long offset, long fragmentSize)", "class_method_signature": "AbstractTextStreamFormat.createInput(\n            Class<? extends T> dataType,\n            String path,\n            InputStream stream,\n            long offset, long fragmentSize)", "testcase": false, "constructor": false}, {"identifier": "createOutput", "parameters": "(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream)", "modifiers": "@Override public", "return": "ModelOutput<T>", "signature": "ModelOutput<T> createOutput(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream)", "full_signature": "@Override public ModelOutput<T> createOutput(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream)", "class_method_signature": "AbstractTextStreamFormat.createOutput(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "decorate", "parameters": "(InputStream stream, long offset, long splitSize)", "modifiers": "private", "return": "InputStream", "signature": "InputStream decorate(InputStream stream, long offset, long splitSize)", "full_signature": "private InputStream decorate(InputStream stream, long offset, long splitSize)", "class_method_signature": "AbstractTextStreamFormat.decorate(InputStream stream, long offset, long splitSize)", "testcase": false, "constructor": false}, {"identifier": "decorate", "parameters": "(OutputStream stream)", "modifiers": "private", "return": "OutputStream", "signature": "OutputStream decorate(OutputStream stream)", "full_signature": "private OutputStream decorate(OutputStream stream)", "class_method_signature": "AbstractTextStreamFormat.decorate(OutputStream stream)", "testcase": false, "constructor": false}], "file": "core-project/text/src/main/java/com/asakusafw/runtime/io/text/directio/AbstractTextStreamFormat.java"}, "focal_method": {"identifier": "createOutput", "parameters": "(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream)", "modifiers": "@Override public", "return": "ModelOutput<T>", "body": "@Override\n    public ModelOutput<T> createOutput(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream) throws IOException, InterruptedException {\n        TextFormat format = getTextFormat();\n        RecordDefinition<T> record = getRecordDefinition();\n        Set<OutputOption> options = OUTPUT_OPTS;\n        OutputStream destination = decorate(stream);\n        return new DecoratedOutput(record.newOutput(format.open(destination), path, options), new StringOption(path));\n    }", "signature": "ModelOutput<T> createOutput(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream)", "full_signature": "@Override public ModelOutput<T> createOutput(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream)", "class_method_signature": "AbstractTextStreamFormat.createOutput(\n            Class<? extends T> dataType,\n            String path,\n            OutputStream stream)", "testcase": false, "constructor": false, "invocations": ["getTextFormat", "getRecordDefinition", "decorate", "newOutput", "open"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}