{"test_class": {"identifier": "CsvTextFormatTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-project/text/src/test/java/com/asakusafw/runtime/io/text/csv/CsvTextFormatTest.java"}, "test_case": {"identifier": "output", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void output() {\n        CsvTextFormat format = CsvTextFormat.builder()\n                .build();\n        String[] results = write(format, new String[][] {\n            { \"Hello!\", },\n        });\n        assertThat(results, is(new String[] {\n                \"Hello!\",\n        }));\n    }", "signature": "void output()", "full_signature": "@Test public void output()", "class_method_signature": "CsvTextFormatTest.output()", "testcase": true, "constructor": false, "invocations": ["build", "builder", "write", "assertThat", "is"]}, "focal_class": {"identifier": "CsvTextFormat", "superclass": "", "interfaces": "implements TextFormat", "fields": [{"original_string": "public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;", "modifier": "public static final", "type": "Charset", "declarator": "DEFAULT_CHARSET = StandardCharsets.UTF_8", "var_name": "DEFAULT_CHARSET"}, {"original_string": "public static final LineSeparator DEFAULT_LINE_SEPARATOR = LineSeparator.WINDOWS;", "modifier": "public static final", "type": "LineSeparator", "declarator": "DEFAULT_LINE_SEPARATOR = LineSeparator.WINDOWS", "var_name": "DEFAULT_LINE_SEPARATOR"}, {"original_string": "public static final char DEFAULT_FIELD_SEPARATOR = ',';", "modifier": "public static final", "type": "char", "declarator": "DEFAULT_FIELD_SEPARATOR = ','", "var_name": "DEFAULT_FIELD_SEPARATOR"}, {"original_string": "public static final char DEFAULT_QUOTE_CHARACTER = '\"';", "modifier": "public static final", "type": "char", "declarator": "DEFAULT_QUOTE_CHARACTER = '\"'", "var_name": "DEFAULT_QUOTE_CHARACTER"}, {"original_string": "public static final boolean DEFAULT_ALLOW_LINE_FEED_IN_FIELD = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_ALLOW_LINE_FEED_IN_FIELD = false", "var_name": "DEFAULT_ALLOW_LINE_FEED_IN_FIELD"}, {"original_string": "public static final QuoteStyle DEFAULT_QUOTE_STYLE = QuoteStyle.NEEDED;", "modifier": "public static final", "type": "QuoteStyle", "declarator": "DEFAULT_QUOTE_STYLE = QuoteStyle.NEEDED", "var_name": "DEFAULT_QUOTE_STYLE"}, {"original_string": "private final Charset charset;", "modifier": "private final", "type": "Charset", "declarator": "charset", "var_name": "charset"}, {"original_string": "private final LineSeparator lineSeparator;", "modifier": "private final", "type": "LineSeparator", "declarator": "lineSeparator", "var_name": "lineSeparator"}, {"original_string": "private final char fieldSeparator;", "modifier": "private final", "type": "char", "declarator": "fieldSeparator", "var_name": "fieldSeparator"}, {"original_string": "private final char quoteCharacter;", "modifier": "private final", "type": "char", "declarator": "quoteCharacter", "var_name": "quoteCharacter"}, {"original_string": "private final boolean allowLineFeedInField;", "modifier": "private final", "type": "boolean", "declarator": "allowLineFeedInField", "var_name": "allowLineFeedInField"}, {"original_string": "private final QuoteStyle defaultQuoteStyle;", "modifier": "private final", "type": "QuoteStyle", "declarator": "defaultQuoteStyle", "var_name": "defaultQuoteStyle"}, {"original_string": "private final QuoteStyle headerQuoteStyle;", "modifier": "private final", "type": "QuoteStyle", "declarator": "headerQuoteStyle", "var_name": "headerQuoteStyle"}, {"original_string": "private final Supplier<? extends UnaryOperator<CharSequence>> inputTransformer;", "modifier": "private final", "type": "Supplier<? extends UnaryOperator<CharSequence>>", "declarator": "inputTransformer", "var_name": "inputTransformer"}, {"original_string": "private final Supplier<? extends UnaryOperator<CharSequence>> outputTransformer;", "modifier": "private final", "type": "Supplier<? extends UnaryOperator<CharSequence>>", "declarator": "outputTransformer", "var_name": "outputTransformer"}], "methods": [{"identifier": "CsvTextFormat", "parameters": "(\n            Charset charset,\n            LineSeparator lineSeparator, char fieldSeparator, char quoteCharacter,\n            boolean allowLineFeedInQuote,\n            QuoteStyle defaultQuoteStyle, QuoteStyle headerQuoteStyle,\n            Supplier<? extends UnaryOperator<CharSequence>> inputTransformer,\n            Supplier<? extends UnaryOperator<CharSequence>> outputTransformer)", "modifiers": "", "return": "", "signature": " CsvTextFormat(\n            Charset charset,\n            LineSeparator lineSeparator, char fieldSeparator, char quoteCharacter,\n            boolean allowLineFeedInQuote,\n            QuoteStyle defaultQuoteStyle, QuoteStyle headerQuoteStyle,\n            Supplier<? extends UnaryOperator<CharSequence>> inputTransformer,\n            Supplier<? extends UnaryOperator<CharSequence>> outputTransformer)", "full_signature": "  CsvTextFormat(\n            Charset charset,\n            LineSeparator lineSeparator, char fieldSeparator, char quoteCharacter,\n            boolean allowLineFeedInQuote,\n            QuoteStyle defaultQuoteStyle, QuoteStyle headerQuoteStyle,\n            Supplier<? extends UnaryOperator<CharSequence>> inputTransformer,\n            Supplier<? extends UnaryOperator<CharSequence>> outputTransformer)", "class_method_signature": "CsvTextFormat.CsvTextFormat(\n            Charset charset,\n            LineSeparator lineSeparator, char fieldSeparator, char quoteCharacter,\n            boolean allowLineFeedInQuote,\n            QuoteStyle defaultQuoteStyle, QuoteStyle headerQuoteStyle,\n            Supplier<? extends UnaryOperator<CharSequence>> inputTransformer,\n            Supplier<? extends UnaryOperator<CharSequence>> outputTransformer)", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "()", "modifiers": "public static final", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static final Builder builder()", "class_method_signature": "CsvTextFormat.builder()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "CsvFieldReader", "signature": "CsvFieldReader open(InputStream input)", "full_signature": "@Override public CsvFieldReader open(InputStream input)", "class_method_signature": "CsvTextFormat.open(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(OutputStream output)", "modifiers": "@Override public", "return": "CsvFieldWriter", "signature": "CsvFieldWriter open(OutputStream output)", "full_signature": "@Override public CsvFieldWriter open(OutputStream output)", "class_method_signature": "CsvTextFormat.open(OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Reader input)", "modifiers": "@Override public", "return": "CsvFieldReader", "signature": "CsvFieldReader open(Reader input)", "full_signature": "@Override public CsvFieldReader open(Reader input)", "class_method_signature": "CsvTextFormat.open(Reader input)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Writer output)", "modifiers": "@Override public", "return": "CsvFieldWriter", "signature": "CsvFieldWriter open(Writer output)", "full_signature": "@Override public CsvFieldWriter open(Writer output)", "class_method_signature": "CsvTextFormat.open(Writer output)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "()", "modifiers": "", "return": "Charset", "signature": "Charset getCharset()", "full_signature": " Charset getCharset()", "class_method_signature": "CsvTextFormat.getCharset()", "testcase": false, "constructor": false}, {"identifier": "getLineSeparator", "parameters": "()", "modifiers": "", "return": "LineSeparator", "signature": "LineSeparator getLineSeparator()", "full_signature": " LineSeparator getLineSeparator()", "class_method_signature": "CsvTextFormat.getLineSeparator()", "testcase": false, "constructor": false}], "file": "core-project/text/src/main/java/com/asakusafw/runtime/io/text/csv/CsvTextFormat.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "public static final", "return": "Builder", "body": "public static final Builder builder() {\n        return new Builder();\n    }", "signature": "Builder builder()", "full_signature": "public static final Builder builder()", "class_method_signature": "CsvTextFormat.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}