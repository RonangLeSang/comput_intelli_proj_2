{"test_class": {"identifier": "ParameterListTest", "superclass": "", "interfaces": "", "fields": [], "file": "windgate-project/asakusa-windgate-core/src/test/java/com/asakusafw/windgate/core/ParameterListTest.java"}, "test_case": {"identifier": "invalid_strict", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void invalid_strict() {\n        Map<String, String> map = new HashMap<>();\n        ParameterList resolver = new ParameterList(map);\n        resolver.replace(\"${MISSING}\", true);\n    }", "signature": "void invalid_strict()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void invalid_strict()", "class_method_signature": "ParameterListTest.invalid_strict()", "testcase": true, "constructor": false, "invocations": ["replace"]}, "focal_class": {"identifier": "ParameterList", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final WindGateLogger WGLOG = new WindGateCoreLogger(ParameterList.class);", "modifier": "static final", "type": "WindGateLogger", "declarator": "WGLOG = new WindGateCoreLogger(ParameterList.class)", "var_name": "WGLOG"}, {"original_string": "static final Logger LOG = LoggerFactory.getLogger(ParameterList.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ParameterList.class)", "var_name": "LOG"}, {"original_string": "private static final Pattern VARIABLE = Pattern.compile(\"\\\\$\\\\{(.*?)\\\\}\");", "modifier": "private static final", "type": "Pattern", "declarator": "VARIABLE = Pattern.compile(\"\\\\$\\\\{(.*?)\\\\}\")", "var_name": "VARIABLE"}, {"original_string": "private static final char SEPARATOR_DEFAULT_VALUE = '-';", "modifier": "private static final", "type": "char", "declarator": "SEPARATOR_DEFAULT_VALUE = '-'", "var_name": "SEPARATOR_DEFAULT_VALUE"}, {"original_string": "private final Map<String, String> parameters;", "modifier": "private final", "type": "Map<String, String>", "declarator": "parameters", "var_name": "parameters"}], "methods": [{"identifier": "ParameterList", "parameters": "()", "modifiers": "public", "return": "", "signature": " ParameterList()", "full_signature": "public  ParameterList()", "class_method_signature": "ParameterList.ParameterList()", "testcase": false, "constructor": true}, {"identifier": "ParameterList", "parameters": "(Map<String, String> parameters)", "modifiers": "public", "return": "", "signature": " ParameterList(Map<String, String> parameters)", "full_signature": "public  ParameterList(Map<String, String> parameters)", "class_method_signature": "ParameterList.ParameterList(Map<String, String> parameters)", "testcase": false, "constructor": true}, {"identifier": "getPairs", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getPairs()", "full_signature": "public Map<String, String> getPairs()", "class_method_signature": "ParameterList.getPairs()", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String string, boolean strict)", "modifiers": "public", "return": "String", "signature": "String replace(String string, boolean strict)", "full_signature": "public String replace(String string, boolean strict)", "class_method_signature": "ParameterList.replace(String string, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String placeholder)", "modifiers": "private", "return": "String", "signature": "String resolve(String placeholder)", "full_signature": "private String resolve(String placeholder)", "class_method_signature": "ParameterList.resolve(String placeholder)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ParameterList.toString()", "testcase": false, "constructor": false}], "file": "windgate-project/asakusa-windgate-core/src/main/java/com/asakusafw/windgate/core/ParameterList.java"}, "focal_method": {"identifier": "replace", "parameters": "(String string, boolean strict)", "modifiers": "public", "return": "String", "body": "public String replace(String string, boolean strict) {\n        if (string == null) {\n            throw new IllegalArgumentException(\"string must not be null\"); //$NON-NLS-1$\n        }\n        StringBuilder buf = new StringBuilder();\n        int start = 0;\n        Matcher matcher = VARIABLE.matcher(string);\n        while (matcher.find(start)) {\n            String name = matcher.group(1);\n            String replacement = resolve(name);\n            if (replacement == null) {\n                if (strict) {\n                    WGLOG.error(\"E99001\",\n                            name);\n                    throw new IllegalArgumentException(MessageFormat.format(\n                            \"parameter \\\"{0}\\\" is not defined in the list: {1}\",\n                            name,\n                            this));\n                } else {\n                    buf.append(string.substring(start, matcher.start() + 1));\n                }\n                start = matcher.start() + 1;\n            } else {\n                buf.append(string.substring(start, matcher.start()));\n                buf.append(replacement);\n                start = matcher.end();\n            }\n        }\n        buf.append(string.substring(start));\n        return buf.toString();\n    }", "signature": "String replace(String string, boolean strict)", "full_signature": "public String replace(String string, boolean strict)", "class_method_signature": "ParameterList.replace(String string, boolean strict)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "group", "resolve", "error", "format", "append", "substring", "start", "start", "append", "substring", "start", "append", "end", "append", "substring", "toString"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}