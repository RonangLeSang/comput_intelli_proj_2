{"test_class": {"identifier": "TextUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CP_BEER = new StringBuilder().appendCodePoint(0x1f37a).toString();", "modifier": "private static final", "type": "String", "declarator": "CP_BEER = new StringBuilder().appendCodePoint(0x1f37a).toString()", "var_name": "CP_BEER"}], "file": "core-project/text/src/test/java/com/asakusafw/runtime/io/text/TextUtilTest.java"}, "test_case": {"identifier": "quote_surrogate_pair", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void quote_surrogate_pair() {\n        assertThat(TextUtil.quote(CP_BEER), is('\"' + CP_BEER + '\"'));\n    }", "signature": "void quote_surrogate_pair()", "full_signature": "@Test public void quote_surrogate_pair()", "class_method_signature": "TextUtilTest.quote_surrogate_pair()", "testcase": true, "constructor": false, "invocations": ["assertThat", "quote", "is"]}, "focal_class": {"identifier": "TextUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThreadLocal<char[]> CHAR_ARRAY_BUFFERS = ThreadLocal.withInitial(() -> new char[512]);", "modifier": "private static final", "type": "ThreadLocal<char[]>", "declarator": "CHAR_ARRAY_BUFFERS = ThreadLocal.withInitial(() -> new char[512])", "var_name": "CHAR_ARRAY_BUFFERS"}, {"original_string": "private static final int CHAR_ARRAY_MARGIN = 16;", "modifier": "private static final", "type": "int", "declarator": "CHAR_ARRAY_MARGIN = 16", "var_name": "CHAR_ARRAY_MARGIN"}, {"original_string": "private static final char[] ASCII_SPECIAL_ESCAPE = new char[128];", "modifier": "private static final", "type": "char[]", "declarator": "ASCII_SPECIAL_ESCAPE = new char[128]", "var_name": "ASCII_SPECIAL_ESCAPE"}], "methods": [{"identifier": "TextUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " TextUtil()", "full_signature": "private  TextUtil()", "class_method_signature": "TextUtil.TextUtil()", "testcase": false, "constructor": true}, {"identifier": "quote", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "String", "signature": "String quote(CharSequence cs)", "full_signature": "public static String quote(CharSequence cs)", "class_method_signature": "TextUtil.quote(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "quoteTo", "parameters": "(CharSequence cs, StringBuilder target)", "modifiers": "public static", "return": "void", "signature": "void quoteTo(CharSequence cs, StringBuilder target)", "full_signature": "public static void quoteTo(CharSequence cs, StringBuilder target)", "class_method_signature": "TextUtil.quoteTo(CharSequence cs, StringBuilder target)", "testcase": false, "constructor": false}, {"identifier": "countLeadingWhitespaces", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "int", "signature": "int countLeadingWhitespaces(CharSequence cs, int offset, int length)", "full_signature": "public static int countLeadingWhitespaces(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.countLeadingWhitespaces(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "countTrailingWhitespaces", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "int", "signature": "int countTrailingWhitespaces(CharSequence cs, int offset, int length)", "full_signature": "public static int countTrailingWhitespaces(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.countTrailingWhitespaces(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseByte", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "byte", "signature": "byte parseByte(CharSequence cs, int offset, int length)", "full_signature": "public static byte parseByte(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.parseByte(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseShort", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "short", "signature": "short parseShort(CharSequence cs, int offset, int length)", "full_signature": "public static short parseShort(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.parseShort(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "int", "signature": "int parseInt(CharSequence cs, int offset, int length)", "full_signature": "public static int parseInt(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.parseInt(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "long", "signature": "long parseLong(CharSequence cs, int offset, int length)", "full_signature": "public static long parseLong(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.parseLong(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseDecimal", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal parseDecimal(CharSequence cs, int offset, int length)", "full_signature": "public static BigDecimal parseDecimal(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.parseDecimal(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "float", "signature": "float parseFloat(CharSequence cs, int offset, int length)", "full_signature": "public static float parseFloat(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.parseFloat(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "public static", "return": "double", "signature": "double parseDouble(CharSequence cs, int offset, int length)", "full_signature": "public static double parseDouble(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.parseDouble(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "private static", "return": "String", "signature": "String toString(CharSequence cs, int offset, int length)", "full_signature": "private static String toString(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.toString(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "invalidNumber", "parameters": "(CharSequence cs, int offset, int length)", "modifiers": "private static", "return": "NumberFormatException", "signature": "NumberFormatException invalidNumber(CharSequence cs, int offset, int length)", "full_signature": "private static NumberFormatException invalidNumber(CharSequence cs, int offset, int length)", "class_method_signature": "TextUtil.invalidNumber(CharSequence cs, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "borrowCharArrayBuf", "parameters": "(int length)", "modifiers": "private static", "return": "char[]", "signature": "char[] borrowCharArrayBuf(int length)", "full_signature": "private static char[] borrowCharArrayBuf(int length)", "class_method_signature": "TextUtil.borrowCharArrayBuf(int length)", "testcase": false, "constructor": false}], "file": "core-project/text/src/main/java/com/asakusafw/runtime/io/text/TextUtil.java"}, "focal_method": {"identifier": "quote", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "String", "body": "public static String quote(CharSequence cs) {\n        StringBuilder buf = new StringBuilder();\n        quoteTo(cs, buf);\n        return buf.toString();\n    }", "signature": "String quote(CharSequence cs)", "full_signature": "public static String quote(CharSequence cs)", "class_method_signature": "TextUtil.quote(CharSequence cs)", "testcase": false, "constructor": false, "invocations": ["quoteTo", "toString"]}, "repository": {"repo_id": 1545929, "url": "https://github.com/asakusafw/asakusafw", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 113, "size": 35236, "license": "licensed"}}