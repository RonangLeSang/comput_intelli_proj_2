{"test_class": {"identifier": "IframeTest", "superclass": "", "interfaces": "", "fields": [], "file": "netty-codec-sockjs/src/test/java/org/jboss/aerogear/io/netty/handler/codec/sockjs/handler/IframeTest.java"}, "test_case": {"identifier": "iframeUppercase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void iframeUppercase() throws Exception {\n        final SockJsConfig config = config();\n        final String path = config.prefix() + \"/IFRAME\";\n        final FullHttpResponse response = Iframe.response(config, createHttpRequest(path));\n        assertThat(response.getStatus().code(), is(HttpResponseStatus.NOT_FOUND.code()));\n        response.release();\n    }", "signature": "void iframeUppercase()", "full_signature": "@Test public void iframeUppercase()", "class_method_signature": "IframeTest.iframeUppercase()", "testcase": true, "constructor": false, "invocations": ["config", "prefix", "response", "createHttpRequest", "assertThat", "code", "getStatus", "is", "code", "release"]}, "focal_class": {"identifier": "Iframe", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern PATH_PATTERN = Pattern.compile(\".*/iframe[0-9-.a-z_]*.html\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATH_PATTERN = Pattern.compile(\".*/iframe[0-9-.a-z_]*.html\")", "var_name": "PATH_PATTERN"}, {"original_string": "private static final long ONE_YEAR = 31536000000L;", "modifier": "private static final", "type": "long", "declarator": "ONE_YEAR = 31536000000L", "var_name": "ONE_YEAR"}, {"original_string": "private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n        @Override\n        protected SimpleDateFormat initialValue() {\n            return new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n        }\n    };", "modifier": "private static final", "type": "ThreadLocal<SimpleDateFormat>", "declarator": "DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n        @Override\n        protected SimpleDateFormat initialValue() {\n            return new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n        }\n    }", "var_name": "DATE_FORMAT"}, {"original_string": "private static final ThreadLocal<MessageDigest> MESSAGE_DIGEST = new ThreadLocal<MessageDigest>() {\n        @Override\n        protected MessageDigest initialValue() {\n            try {\n                return MessageDigest.getInstance(\"MD5\");\n            } catch (final NoSuchAlgorithmException e) {\n                throw new IllegalStateException(\"Could not create a new MD5 instance\", e);\n            }\n        }\n    };", "modifier": "private static final", "type": "ThreadLocal<MessageDigest>", "declarator": "MESSAGE_DIGEST = new ThreadLocal<MessageDigest>() {\n        @Override\n        protected MessageDigest initialValue() {\n            try {\n                return MessageDigest.getInstance(\"MD5\");\n            } catch (final NoSuchAlgorithmException e) {\n                throw new IllegalStateException(\"Could not create a new MD5 instance\", e);\n            }\n        }\n    }", "var_name": "MESSAGE_DIGEST"}], "methods": [{"identifier": "Iframe", "parameters": "()", "modifiers": "private", "return": "", "signature": " Iframe()", "full_signature": "private  Iframe()", "class_method_signature": "Iframe.Iframe()", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(final String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean matches(final String path)", "full_signature": "public static boolean matches(final String path)", "class_method_signature": "Iframe.matches(final String path)", "testcase": false, "constructor": false}, {"identifier": "response", "parameters": "(final SockJsConfig config, final HttpRequest request)", "modifiers": "public static", "return": "FullHttpResponse", "signature": "FullHttpResponse response(final SockJsConfig config, final HttpRequest request)", "full_signature": "public static FullHttpResponse response(final SockJsConfig config, final HttpRequest request)", "class_method_signature": "Iframe.response(final SockJsConfig config, final HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "generateExpires", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String generateExpires()", "full_signature": "private static String generateExpires()", "class_method_signature": "Iframe.generateExpires()", "testcase": false, "constructor": false}, {"identifier": "createResponse", "parameters": "(final HttpRequest request, final HttpResponseStatus status)", "modifiers": "private static", "return": "FullHttpResponse", "signature": "FullHttpResponse createResponse(final HttpRequest request, final HttpResponseStatus status)", "full_signature": "private static FullHttpResponse createResponse(final HttpRequest request, final HttpResponseStatus status)", "class_method_signature": "Iframe.createResponse(final HttpRequest request, final HttpResponseStatus status)", "testcase": false, "constructor": false}, {"identifier": "createResponse", "parameters": "(final HttpRequest request, final HttpResponseStatus status,\n            final ByteBuf content)", "modifiers": "private static", "return": "FullHttpResponse", "signature": "FullHttpResponse createResponse(final HttpRequest request, final HttpResponseStatus status,\n            final ByteBuf content)", "full_signature": "private static FullHttpResponse createResponse(final HttpRequest request, final HttpResponseStatus status,\n            final ByteBuf content)", "class_method_signature": "Iframe.createResponse(final HttpRequest request, final HttpResponseStatus status,\n            final ByteBuf content)", "testcase": false, "constructor": false}, {"identifier": "createContent", "parameters": "(final String url)", "modifiers": "private static", "return": "String", "signature": "String createContent(final String url)", "full_signature": "private static String createContent(final String url)", "class_method_signature": "Iframe.createContent(final String url)", "testcase": false, "constructor": false}, {"identifier": "generateMd5", "parameters": "(final String value)", "modifiers": "private static", "return": "String", "signature": "String generateMd5(final String value)", "full_signature": "private static String generateMd5(final String value)", "class_method_signature": "Iframe.generateMd5(final String value)", "testcase": false, "constructor": false}], "file": "netty-codec-sockjs/src/main/java/org/jboss/aerogear/io/netty/handler/codec/sockjs/handler/Iframe.java"}, "focal_method": {"identifier": "response", "parameters": "(final SockJsConfig config, final HttpRequest request)", "modifiers": "public static", "return": "FullHttpResponse", "body": "public static FullHttpResponse response(final SockJsConfig config, final HttpRequest request) throws Exception {\n        final QueryStringDecoder qsd = new QueryStringDecoder(request.getUri());\n        final String path = qsd.path();\n\n        if (!PATH_PATTERN.matcher(path).matches()) {\n            return createResponse(request, NOT_FOUND, copiedBuffer(\"Not found\", UTF_8));\n        }\n\n        if (request.headers().contains(HttpHeaders.Names.IF_NONE_MATCH)) {\n            final FullHttpResponse response = createResponse(request, NOT_MODIFIED);\n            response.headers().set(HttpHeaders.Names.SET_COOKIE, \"JSESSIONID=dummy; path=/\");\n            return response;\n        } else {\n            final String content = createContent(config.sockJsUrl());\n            final FullHttpResponse response = createResponse(request, OK, copiedBuffer(content, UTF_8));\n            response.headers().set(HttpHeaders.Names.CONTENT_TYPE, \"text/html; charset=UTF-8\");\n            response.headers().set(HttpHeaders.Names.CACHE_CONTROL, \"max-age=31536000, public\");\n            response.headers().set(HttpHeaders.Names.EXPIRES, generateExpires());\n            final String etag = '\\\"' + generateMd5(content) + '\\\"';\n            response.headers().set(HttpHeaders.Names.ETAG, etag);\n            return response;\n        }\n    }", "signature": "FullHttpResponse response(final SockJsConfig config, final HttpRequest request)", "full_signature": "public static FullHttpResponse response(final SockJsConfig config, final HttpRequest request)", "class_method_signature": "Iframe.response(final SockJsConfig config, final HttpRequest request)", "testcase": false, "constructor": false, "invocations": ["getUri", "path", "matches", "matcher", "createResponse", "copiedBuffer", "contains", "headers", "createResponse", "set", "headers", "createContent", "sockJsUrl", "createResponse", "copiedBuffer", "set", "headers", "set", "headers", "set", "headers", "generateExpires", "generateMd5", "set", "headers"]}, "repository": {"repo_id": 10646587, "url": "https://github.com/aerogear-attic/aerogear-simplepush-server", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 31, "size": 2569, "license": "licensed"}}