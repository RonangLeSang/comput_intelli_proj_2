{"test_class": {"identifier": "GadgetOAuthCallbackGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MAKE_REQUEST_URL = \"http://renderinghost/gadgets/makeRequest\";", "modifier": "private static final", "type": "String", "declarator": "MAKE_REQUEST_URL = \"http://renderinghost/gadgets/makeRequest\"", "var_name": "MAKE_REQUEST_URL"}, {"original_string": "private static final Uri DEST_URL = Uri.parse(\"http://www.example.com/destination\");", "modifier": "private static final", "type": "Uri", "declarator": "DEST_URL = Uri.parse(\"http://www.example.com/destination\")", "var_name": "DEST_URL"}, {"original_string": "private IMocksControl control;", "modifier": "private", "type": "IMocksControl", "declarator": "control", "var_name": "control"}, {"original_string": "private Processor processor;", "modifier": "private", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private LockedDomainService lockedDomainService;", "modifier": "private", "type": "LockedDomainService", "declarator": "lockedDomainService", "var_name": "lockedDomainService"}, {"original_string": "private OAuthUriManager oauthUriManager;", "modifier": "private", "type": "OAuthUriManager", "declarator": "oauthUriManager", "var_name": "oauthUriManager"}, {"original_string": "private BlobCrypter stateCrypter;", "modifier": "private", "type": "BlobCrypter", "declarator": "stateCrypter", "var_name": "stateCrypter"}, {"original_string": "private SecurityToken securityToken;", "modifier": "private", "type": "SecurityToken", "declarator": "securityToken", "var_name": "securityToken"}, {"original_string": "private Gadget gadget;", "modifier": "private", "type": "Gadget", "declarator": "gadget", "var_name": "gadget"}, {"original_string": "private OAuthFetcherConfig fetcherConfig;", "modifier": "private", "type": "OAuthFetcherConfig", "declarator": "fetcherConfig", "var_name": "fetcherConfig"}, {"original_string": "private OAuthResponseParams responseParams;", "modifier": "private", "type": "OAuthResponseParams", "declarator": "responseParams", "var_name": "responseParams"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/oauth/GadgetOAuthCallbackGeneratorTest.java"}, "test_case": {"identifier": "testGenerateUrl_otherQueryParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGenerateUrl_otherQueryParams() throws Exception {\n    HttpRequest request = new HttpRequest(DEST_URL);\n    request.setSecurityToken(securityToken);\n    request.setOAuthArguments(new OAuthArguments());\n    expect(processor.process(eqContext(securityToken, request.getOAuthArguments())))\n        .andReturn(gadget);\n    expect(lockedDomainService.isGadgetValidForHost(\"renderinghost\", gadget, \"default\"))\n        .andReturn(true);\n    expect(oauthUriManager.makeOAuthCallbackUri(\"default\", \"renderinghost\"))\n        .andReturn(Uri.parse(\"https://renderinghost/final/callback\"));\n\n    control.replay();\n\n    String callback = getGenerator().generateCallback(fetcherConfig,\n        \"http://base/basecallback?foo=bar%20baz\", request, responseParams);\n    Uri callbackUri = Uri.parse(callback);\n    assertEquals(\"http\", callbackUri.getScheme());\n    assertEquals(\"base\", callbackUri.getAuthority());\n    assertEquals(\"/basecallback\", callbackUri.getPath());\n    assertEquals(\"bar baz\", callbackUri.getQueryParameter(\"foo\"));\n    OAuthCallbackState state = new OAuthCallbackState(stateCrypter,\n        callbackUri.getQueryParameter(\"cs\"));\n    assertEquals(\"https://renderinghost/final/callback\", state.getRealCallbackUrl());\n\n    control.verify();\n  }", "signature": "void testGenerateUrl_otherQueryParams()", "full_signature": "@Test public void testGenerateUrl_otherQueryParams()", "class_method_signature": "GadgetOAuthCallbackGeneratorTest.testGenerateUrl_otherQueryParams()", "testcase": true, "constructor": false, "invocations": ["setSecurityToken", "setOAuthArguments", "andReturn", "expect", "process", "eqContext", "getOAuthArguments", "andReturn", "expect", "isGadgetValidForHost", "andReturn", "expect", "makeOAuthCallbackUri", "parse", "replay", "generateCallback", "getGenerator", "parse", "assertEquals", "getScheme", "assertEquals", "getAuthority", "assertEquals", "getPath", "assertEquals", "getQueryParameter", "getQueryParameter", "assertEquals", "getRealCallbackUrl", "verify"]}, "focal_class": {"identifier": "GadgetOAuthCallbackGenerator", "superclass": "", "interfaces": "implements OAuthCallbackGenerator", "fields": [{"original_string": "private final Processor processor;", "modifier": "private final", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private final LockedDomainService lockedDomainService;", "modifier": "private final", "type": "LockedDomainService", "declarator": "lockedDomainService", "var_name": "lockedDomainService"}, {"original_string": "private final OAuthUriManager oauthUriManager;", "modifier": "private final", "type": "OAuthUriManager", "declarator": "oauthUriManager", "var_name": "oauthUriManager"}, {"original_string": "private final BlobCrypter stateCrypter;", "modifier": "private final", "type": "BlobCrypter", "declarator": "stateCrypter", "var_name": "stateCrypter"}], "methods": [{"identifier": "GadgetOAuthCallbackGenerator", "parameters": "(Processor processor, LockedDomainService lockedDomainService,\n      OAuthUriManager oauthUriManager, @Named(OAuthFetcherConfig.OAUTH_STATE_CRYPTER)\n      BlobCrypter stateCrypter)", "modifiers": "@Inject public", "return": "", "signature": " GadgetOAuthCallbackGenerator(Processor processor, LockedDomainService lockedDomainService,\n      OAuthUriManager oauthUriManager, @Named(OAuthFetcherConfig.OAUTH_STATE_CRYPTER)\n      BlobCrypter stateCrypter)", "full_signature": "@Inject public  GadgetOAuthCallbackGenerator(Processor processor, LockedDomainService lockedDomainService,\n      OAuthUriManager oauthUriManager, @Named(OAuthFetcherConfig.OAUTH_STATE_CRYPTER)\n      BlobCrypter stateCrypter)", "class_method_signature": "GadgetOAuthCallbackGenerator.GadgetOAuthCallbackGenerator(Processor processor, LockedDomainService lockedDomainService,\n      OAuthUriManager oauthUriManager, @Named(OAuthFetcherConfig.OAUTH_STATE_CRYPTER)\n      BlobCrypter stateCrypter)", "testcase": false, "constructor": true}, {"identifier": "generateCallback", "parameters": "(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams)", "modifiers": "public", "return": "String", "signature": "String generateCallback(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams)", "full_signature": "public String generateCallback(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams)", "class_method_signature": "GadgetOAuthCallbackGenerator.generateCallback(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams)", "testcase": false, "constructor": false}, {"identifier": "checkGadgetCanRender", "parameters": "(SecurityToken securityToken, OAuthArguments arguments,\n      OAuthResponseParams responseParams)", "modifiers": "private", "return": "Uri", "signature": "Uri checkGadgetCanRender(SecurityToken securityToken, OAuthArguments arguments,\n      OAuthResponseParams responseParams)", "full_signature": "private Uri checkGadgetCanRender(SecurityToken securityToken, OAuthArguments arguments,\n      OAuthResponseParams responseParams)", "class_method_signature": "GadgetOAuthCallbackGenerator.checkGadgetCanRender(SecurityToken securityToken, OAuthArguments arguments,\n      OAuthResponseParams responseParams)", "testcase": false, "constructor": false}, {"identifier": "getGadgetDomainCallback", "parameters": "(SecurityToken securityToken, Uri activeUrl)", "modifiers": "private", "return": "String", "signature": "String getGadgetDomainCallback(SecurityToken securityToken, Uri activeUrl)", "full_signature": "private String getGadgetDomainCallback(SecurityToken securityToken, Uri activeUrl)", "class_method_signature": "GadgetOAuthCallbackGenerator.getGadgetDomainCallback(SecurityToken securityToken, Uri activeUrl)", "testcase": false, "constructor": false}, {"identifier": "generateCallbackForProvider", "parameters": "(\n      OAuthResponseParams responseParams, String callbackForProvider, String gadgetDomainCallback)", "modifiers": "private", "return": "String", "signature": "String generateCallbackForProvider(\n      OAuthResponseParams responseParams, String callbackForProvider, String gadgetDomainCallback)", "full_signature": "private String generateCallbackForProvider(\n      OAuthResponseParams responseParams, String callbackForProvider, String gadgetDomainCallback)", "class_method_signature": "GadgetOAuthCallbackGenerator.generateCallbackForProvider(\n      OAuthResponseParams responseParams, String callbackForProvider, String gadgetDomainCallback)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/oauth/GadgetOAuthCallbackGenerator.java"}, "focal_method": {"identifier": "generateCallback", "parameters": "(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams)", "modifiers": "public", "return": "String", "body": "public String generateCallback(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams) throws OAuthRequestException {\n    Uri activeUrl = checkGadgetCanRender(request.getSecurityToken(),\n        request.getOAuthArguments(), responseParams);\n    String gadgetDomainCallback = getGadgetDomainCallback(request.getSecurityToken(), activeUrl);\n    if (gadgetDomainCallback == null) {\n      return null;\n    }\n    return generateCallbackForProvider(responseParams, baseCallback, gadgetDomainCallback);\n  }", "signature": "String generateCallback(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams)", "full_signature": "public String generateCallback(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams)", "class_method_signature": "GadgetOAuthCallbackGenerator.generateCallback(OAuthFetcherConfig fetcherConfig, String baseCallback,\n      HttpRequest request, OAuthResponseParams responseParams)", "testcase": false, "constructor": false, "invocations": ["checkGadgetCanRender", "getSecurityToken", "getOAuthArguments", "getGadgetDomainCallback", "getSecurityToken", "generateCallbackForProvider"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}