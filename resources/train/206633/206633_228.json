{"test_class": {"identifier": "StandardAuthenticationHandlerTest", "superclass": "extends MockUtils", "interfaces": "", "fields": [], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/oauth2/handler/StandardAuthenticationHandlerTest.java"}, "test_case": {"identifier": "testAddOAuth2Authentication_4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAddOAuth2Authentication_4() throws Exception {\n    final StandardAuthenticationHandler fixture = new StandardAuthenticationHandler();\n    final HttpRequest request = new HttpRequest(Uri.fromJavaUri(new URI(\"\")));\n    final OAuth2Accessor accessor = MockUtils.getOAuth2Accessor_StandardAuth();\n\n    final OAuth2HandlerError result = fixture.addOAuth2Authentication(request, accessor);\n\n    Assert.assertNull(result);\n    final String header1 = request.getHeader(OAuth2Message.CLIENT_ID);\n    Assert.assertNotNull(header1);\n    Assert.assertEquals(MockUtils.CLIENT_ID1, header1);\n\n    final String header2 = request.getHeader(OAuth2Message.CLIENT_SECRET);\n    Assert.assertNotNull(header2);\n    Assert.assertEquals(MockUtils.CLIENT_SECRET1, header2);\n\n    final String requestUri = request.getUri().toString();\n    Assert.assertNotNull(requestUri);\n    Assert.assertEquals(\"\", requestUri);\n\n    final String param1 = request.getParam(OAuth2Message.CLIENT_ID);\n    Assert.assertNotNull(param1);\n    Assert.assertEquals(MockUtils.CLIENT_ID1, param1);\n\n    final String param2 = request.getHeader(OAuth2Message.CLIENT_SECRET);\n    Assert.assertNotNull(param2);\n    Assert.assertEquals(MockUtils.CLIENT_SECRET1, param2);\n  }", "signature": "void testAddOAuth2Authentication_4()", "full_signature": "@Test public void testAddOAuth2Authentication_4()", "class_method_signature": "StandardAuthenticationHandlerTest.testAddOAuth2Authentication_4()", "testcase": true, "constructor": false, "invocations": ["fromJavaUri", "getOAuth2Accessor_StandardAuth", "addOAuth2Authentication", "assertNull", "getHeader", "assertNotNull", "assertEquals", "getHeader", "assertNotNull", "assertEquals", "toString", "getUri", "assertNotNull", "assertEquals", "getParam", "assertNotNull", "assertEquals", "getHeader", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "StandardAuthenticationHandler", "superclass": "", "interfaces": "implements ClientAuthenticationHandler", "fields": [{"original_string": "private static final OAuth2Error ERROR = OAuth2Error.AUTHENTICATION_PROBLEM;", "modifier": "private static final", "type": "OAuth2Error", "declarator": "ERROR = OAuth2Error.AUTHENTICATION_PROBLEM", "var_name": "ERROR"}], "methods": [{"identifier": "addOAuth2Authentication", "parameters": "(final HttpRequest request,\n          final OAuth2Accessor accessor)", "modifiers": "public", "return": "OAuth2HandlerError", "signature": "OAuth2HandlerError addOAuth2Authentication(final HttpRequest request,\n          final OAuth2Accessor accessor)", "full_signature": "public OAuth2HandlerError addOAuth2Authentication(final HttpRequest request,\n          final OAuth2Accessor accessor)", "class_method_signature": "StandardAuthenticationHandler.addOAuth2Authentication(final HttpRequest request,\n          final OAuth2Accessor accessor)", "testcase": false, "constructor": false}, {"identifier": "geClientAuthenticationType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String geClientAuthenticationType()", "full_signature": "public String geClientAuthenticationType()", "class_method_signature": "StandardAuthenticationHandler.geClientAuthenticationType()", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "(final String contextMessage)", "modifiers": "private static", "return": "OAuth2HandlerError", "signature": "OAuth2HandlerError getError(final String contextMessage)", "full_signature": "private static OAuth2HandlerError getError(final String contextMessage)", "class_method_signature": "StandardAuthenticationHandler.getError(final String contextMessage)", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "(final String contextMessage, final Exception e)", "modifiers": "private static", "return": "OAuth2HandlerError", "signature": "OAuth2HandlerError getError(final String contextMessage, final Exception e)", "full_signature": "private static OAuth2HandlerError getError(final String contextMessage, final Exception e)", "class_method_signature": "StandardAuthenticationHandler.getError(final String contextMessage, final Exception e)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/oauth2/handler/StandardAuthenticationHandler.java"}, "focal_method": {"identifier": "addOAuth2Authentication", "parameters": "(final HttpRequest request,\n          final OAuth2Accessor accessor)", "modifiers": "public", "return": "OAuth2HandlerError", "body": "public OAuth2HandlerError addOAuth2Authentication(final HttpRequest request,\n          final OAuth2Accessor accessor) {\n    try {\n      if (request == null) {\n        return StandardAuthenticationHandler.getError(\"request is null\");\n      }\n\n      if (accessor == null) {\n        return StandardAuthenticationHandler.getError(\"accessor is null\");\n      }\n\n      if (!accessor.isValid() || accessor.isErrorResponse()) {\n        return StandardAuthenticationHandler.getError(\"accessor is invalid\");\n      }\n\n      final String clientId = accessor.getClientId();\n\n      if (clientId == null) {\n        return StandardAuthenticationHandler.getError(\"client_id is null\");\n      }\n\n      final byte[] secretBytes = accessor.getClientSecret();\n\n      if (secretBytes == null) {\n        return StandardAuthenticationHandler.getError(\"client_secret is secret\");\n      }\n\n      final String secret = new String(secretBytes, \"UTF-8\");\n\n      request.setHeader(OAuth2Message.CLIENT_ID, clientId);\n      request.setParam(OAuth2Message.CLIENT_ID, clientId);\n      request.setHeader(OAuth2Message.CLIENT_SECRET, secret);\n      request.setParam(OAuth2Message.CLIENT_SECRET, secret);\n\n      return null;\n    } catch (final Exception e) {\n      return StandardAuthenticationHandler.getError(\"Exception adding standard auth headers\", e);\n    }\n  }", "signature": "OAuth2HandlerError addOAuth2Authentication(final HttpRequest request,\n          final OAuth2Accessor accessor)", "full_signature": "public OAuth2HandlerError addOAuth2Authentication(final HttpRequest request,\n          final OAuth2Accessor accessor)", "class_method_signature": "StandardAuthenticationHandler.addOAuth2Authentication(final HttpRequest request,\n          final OAuth2Accessor accessor)", "testcase": false, "constructor": false, "invocations": ["getError", "getError", "isValid", "isErrorResponse", "getError", "getClientId", "getError", "getClientSecret", "getError", "setHeader", "setParam", "setHeader", "setParam", "getError"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}