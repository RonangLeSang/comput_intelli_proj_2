{"test_class": {"identifier": "MakeRequestHandlerTest", "superclass": "extends ServletTestFixture", "interfaces": "", "fields": [{"original_string": "private static final Uri REQUEST_URL = Uri.parse(\"http://example.org/file\");", "modifier": "private static final", "type": "Uri", "declarator": "REQUEST_URL = Uri.parse(\"http://example.org/file\")", "var_name": "REQUEST_URL"}, {"original_string": "private static final String REQUEST_BODY = \"I+am+the+request+body!foo=baz%20la\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_BODY = \"I+am+the+request+body!foo=baz%20la\"", "var_name": "REQUEST_BODY"}, {"original_string": "private static final String RESPONSE_BODY = \"makeRequest response body\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_BODY = \"makeRequest response body\"", "var_name": "RESPONSE_BODY"}, {"original_string": "private static final FakeGadgetToken DUMMY_TOKEN = new FakeGadgetToken();", "modifier": "private static final", "type": "FakeGadgetToken", "declarator": "DUMMY_TOKEN = new FakeGadgetToken()", "var_name": "DUMMY_TOKEN"}, {"original_string": "private final GadgetAdminStore gadgetAdminStore = mock(GadgetAdminStore.class);", "modifier": "private final", "type": "GadgetAdminStore", "declarator": "gadgetAdminStore = mock(GadgetAdminStore.class)", "var_name": "gadgetAdminStore"}, {"original_string": "private ContainerConfig containerConfig;", "modifier": "private", "type": "ContainerConfig", "declarator": "containerConfig", "var_name": "containerConfig"}, {"original_string": "private LockedDomainService ldService;", "modifier": "private", "type": "LockedDomainService", "declarator": "ldService", "var_name": "ldService"}, {"original_string": "private MakeRequestHandler handler;", "modifier": "private", "type": "MakeRequestHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private Gadget gadget = mock(Gadget.class);", "modifier": "private", "type": "Gadget", "declarator": "gadget = mock(Gadget.class)", "var_name": "gadget"}, {"original_string": "private Capture<GadgetContext> context = new Capture<GadgetContext>();", "modifier": "private", "type": "Capture<GadgetContext>", "declarator": "context = new Capture<GadgetContext>()", "var_name": "context"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/MakeRequestHandlerTest.java"}, "test_case": {"identifier": "GetRequestWithNonWhitelistedGadget", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void GetRequestWithNonWhitelistedGadget() throws Exception {\n    reset(gadgetAdminStore);\n    expect(gadgetAdminStore.isWhitelisted(isA(String.class), isA(String.class))).andReturn(false);\n    replay();\n    boolean exceptionThrown = false;\n    try {\n      handler.fetch(request, recorder);\n    } catch (GadgetException e) {\n      exceptionThrown = true;\n      assertEquals(403, e.getHttpStatusCode());\n      assertEquals(GadgetException.Code.NON_WHITELISTED_GADGET, e.getCode());\n    }\n    assertTrue(exceptionThrown);\n    verify();\n  }", "signature": "void GetRequestWithNonWhitelistedGadget()", "full_signature": "@Test public void GetRequestWithNonWhitelistedGadget()", "class_method_signature": "MakeRequestHandlerTest.GetRequestWithNonWhitelistedGadget()", "testcase": true, "constructor": false, "invocations": ["reset", "andReturn", "expect", "isWhitelisted", "isA", "isA", "replay", "fetch", "assertEquals", "getHttpStatusCode", "assertEquals", "getCode", "assertTrue", "verify"]}, "focal_class": {"identifier": "MakeRequestHandler", "superclass": "", "interfaces": "implements ContainerConfig.ConfigObserver", "fields": [{"original_string": "public static final String ALIAS_PARAM = \"alias\";", "modifier": "public static final", "type": "String", "declarator": "ALIAS_PARAM = \"alias\"", "var_name": "ALIAS_PARAM"}, {"original_string": "public static final String POST_DATA_PARAM = \"postData\";", "modifier": "public static final", "type": "String", "declarator": "POST_DATA_PARAM = \"postData\"", "var_name": "POST_DATA_PARAM"}, {"original_string": "public static final String METHOD_PARAM = \"httpMethod\";", "modifier": "public static final", "type": "String", "declarator": "METHOD_PARAM = \"httpMethod\"", "var_name": "METHOD_PARAM"}, {"original_string": "public static final String HEADERS_PARAM = \"headers\";", "modifier": "public static final", "type": "String", "declarator": "HEADERS_PARAM = \"headers\"", "var_name": "HEADERS_PARAM"}, {"original_string": "public static final String CONTENT_TYPE_PARAM = \"contentType\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_TYPE_PARAM = \"contentType\"", "var_name": "CONTENT_TYPE_PARAM"}, {"original_string": "public static final String NUM_ENTRIES_PARAM = \"numEntries\";", "modifier": "public static final", "type": "String", "declarator": "NUM_ENTRIES_PARAM = \"numEntries\"", "var_name": "NUM_ENTRIES_PARAM"}, {"original_string": "public static final String DEFAULT_NUM_ENTRIES = \"3\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_NUM_ENTRIES = \"3\"", "var_name": "DEFAULT_NUM_ENTRIES"}, {"original_string": "public static final String GET_SUMMARIES_PARAM = \"getSummaries\";", "modifier": "public static final", "type": "String", "declarator": "GET_SUMMARIES_PARAM = \"getSummaries\"", "var_name": "GET_SUMMARIES_PARAM"}, {"original_string": "public static final String GET_FULL_HEADERS_PARAM = \"getFullHeaders\";", "modifier": "public static final", "type": "String", "declarator": "GET_FULL_HEADERS_PARAM = \"getFullHeaders\"", "var_name": "GET_FULL_HEADERS_PARAM"}, {"original_string": "public static final String AUTHZ_PARAM = \"authz\";", "modifier": "public static final", "type": "String", "declarator": "AUTHZ_PARAM = \"authz\"", "var_name": "AUTHZ_PARAM"}, {"original_string": "public static final String MAX_POST_SIZE_KEY = \"gadgets.jsonProxyUrl.maxPostSize\";", "modifier": "public static final", "type": "String", "declarator": "MAX_POST_SIZE_KEY = \"gadgets.jsonProxyUrl.maxPostSize\"", "var_name": "MAX_POST_SIZE_KEY"}, {"original_string": "public static final String MULTI_PART_FORM_POST = \"MPFP\";", "modifier": "public static final", "type": "String", "declarator": "MULTI_PART_FORM_POST = \"MPFP\"", "var_name": "MULTI_PART_FORM_POST"}, {"original_string": "public static final String MULTI_PART_FORM_POST_IFRAME = \"iframe\";", "modifier": "public static final", "type": "String", "declarator": "MULTI_PART_FORM_POST_IFRAME = \"iframe\"", "var_name": "MULTI_PART_FORM_POST_IFRAME"}, {"original_string": "public static final String GADGETS_FEATURES = \"gadgets.features\";", "modifier": "public static final", "type": "String", "declarator": "GADGETS_FEATURES = \"gadgets.features\"", "var_name": "GADGETS_FEATURES"}, {"original_string": "public static final String CORE_IO = \"core.io\";", "modifier": "public static final", "type": "String", "declarator": "CORE_IO = \"core.io\"", "var_name": "CORE_IO"}, {"original_string": "public static final String UNPARSEABLE_CRUFT = \"unparseableCruft\";", "modifier": "public static final", "type": "String", "declarator": "UNPARSEABLE_CRUFT = \"unparseableCruft\"", "var_name": "UNPARSEABLE_CRUFT"}, {"original_string": "public static final int MAX_POST_SIZE_DEFAULT = 5 * 1024 * 1024;", "modifier": "public static final", "type": "int", "declarator": "MAX_POST_SIZE_DEFAULT = 5 * 1024 * 1024", "var_name": "MAX_POST_SIZE_DEFAULT"}, {"original_string": "public static final String IFRAME_RESPONSE_PREFIX = \"<html><head></head><body><textarea></textarea><script type='text/javascript'>document.getElementsByTagName('TEXTAREA')[0].value='\";", "modifier": "public static final", "type": "String", "declarator": "IFRAME_RESPONSE_PREFIX = \"<html><head></head><body><textarea></textarea><script type='text/javascript'>document.getElementsByTagName('TEXTAREA')[0].value='\"", "var_name": "IFRAME_RESPONSE_PREFIX"}, {"original_string": "public static final String IFRAME_RESPONSE_SUFFIX = \"';</script></body></html>\";", "modifier": "public static final", "type": "String", "declarator": "IFRAME_RESPONSE_SUFFIX = \"';</script></body></html>\"", "var_name": "IFRAME_RESPONSE_SUFFIX"}, {"original_string": "private final Map<String, String> unparseableCruftMsgs;", "modifier": "private final", "type": "Map<String, String>", "declarator": "unparseableCruftMsgs", "var_name": "unparseableCruftMsgs"}, {"original_string": "private final RequestPipeline requestPipeline;", "modifier": "private final", "type": "RequestPipeline", "declarator": "requestPipeline", "var_name": "requestPipeline"}, {"original_string": "private final ResponseRewriterRegistry contentRewriterRegistry;", "modifier": "private final", "type": "ResponseRewriterRegistry", "declarator": "contentRewriterRegistry", "var_name": "contentRewriterRegistry"}, {"original_string": "private final Provider<FeedProcessor> feedProcessorProvider;", "modifier": "private final", "type": "Provider<FeedProcessor>", "declarator": "feedProcessorProvider", "var_name": "feedProcessorProvider"}, {"original_string": "private final GadgetAdminStore gadgetAdminStore;", "modifier": "private final", "type": "GadgetAdminStore", "declarator": "gadgetAdminStore", "var_name": "gadgetAdminStore"}, {"original_string": "private final Processor processor;", "modifier": "private final", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private final LockedDomainService lockedDomainService;", "modifier": "private final", "type": "LockedDomainService", "declarator": "lockedDomainService", "var_name": "lockedDomainService"}, {"original_string": "private final Map<String, Integer> maxPostSizes;", "modifier": "private final", "type": "Map<String, Integer>", "declarator": "maxPostSizes", "var_name": "maxPostSizes"}], "methods": [{"identifier": "MakeRequestHandler", "parameters": "(\n          ContainerConfig config,\n          RequestPipeline requestPipeline,\n          @RewriterRegistry(rewriteFlow = RewriteFlow.DEFAULT) ResponseRewriterRegistry contentRewriterRegistry,\n          Provider<FeedProcessor> feedProcessorProvider, GadgetAdminStore gadgetAdminStore,\n          Processor processor, LockedDomainService lockedDomainService)", "modifiers": "@Inject public", "return": "", "signature": " MakeRequestHandler(\n          ContainerConfig config,\n          RequestPipeline requestPipeline,\n          @RewriterRegistry(rewriteFlow = RewriteFlow.DEFAULT) ResponseRewriterRegistry contentRewriterRegistry,\n          Provider<FeedProcessor> feedProcessorProvider, GadgetAdminStore gadgetAdminStore,\n          Processor processor, LockedDomainService lockedDomainService)", "full_signature": "@Inject public  MakeRequestHandler(\n          ContainerConfig config,\n          RequestPipeline requestPipeline,\n          @RewriterRegistry(rewriteFlow = RewriteFlow.DEFAULT) ResponseRewriterRegistry contentRewriterRegistry,\n          Provider<FeedProcessor> feedProcessorProvider, GadgetAdminStore gadgetAdminStore,\n          Processor processor, LockedDomainService lockedDomainService)", "class_method_signature": "MakeRequestHandler.MakeRequestHandler(\n          ContainerConfig config,\n          RequestPipeline requestPipeline,\n          @RewriterRegistry(rewriteFlow = RewriteFlow.DEFAULT) ResponseRewriterRegistry contentRewriterRegistry,\n          Provider<FeedProcessor> feedProcessorProvider, GadgetAdminStore gadgetAdminStore,\n          Processor processor, LockedDomainService lockedDomainService)", "testcase": false, "constructor": true}, {"identifier": "fetch", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "public", "return": "void", "signature": "void fetch(HttpServletRequest request, HttpServletResponse response)", "full_signature": "public void fetch(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "MakeRequestHandler.fetch(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "buildHttpRequest", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "HttpRequest", "signature": "HttpRequest buildHttpRequest(HttpServletRequest request)", "full_signature": "protected HttpRequest buildHttpRequest(HttpServletRequest request)", "class_method_signature": "MakeRequestHandler.buildHttpRequest(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "setPostData", "parameters": "(String container, HttpServletRequest request, HttpRequest req)", "modifiers": "protected", "return": "void", "signature": "void setPostData(String container, HttpServletRequest request, HttpRequest req)", "full_signature": "protected void setPostData(String container, HttpServletRequest request, HttpRequest req)", "class_method_signature": "MakeRequestHandler.setPostData(String container, HttpServletRequest request, HttpRequest req)", "testcase": false, "constructor": false}, {"identifier": "convertResponseToJson", "parameters": "(SecurityToken authToken, HttpServletRequest request,\n          HttpResponse results)", "modifiers": "protected", "return": "String", "signature": "String convertResponseToJson(SecurityToken authToken, HttpServletRequest request,\n          HttpResponse results)", "full_signature": "protected String convertResponseToJson(SecurityToken authToken, HttpServletRequest request,\n          HttpResponse results)", "class_method_signature": "MakeRequestHandler.convertResponseToJson(SecurityToken authToken, HttpServletRequest request,\n          HttpResponse results)", "testcase": false, "constructor": false}, {"identifier": "getRequestPipeline", "parameters": "()", "modifiers": "protected", "return": "RequestPipeline", "signature": "RequestPipeline getRequestPipeline()", "full_signature": "protected RequestPipeline getRequestPipeline()", "class_method_signature": "MakeRequestHandler.getRequestPipeline()", "testcase": false, "constructor": false}, {"identifier": "extractAndValidateToken", "parameters": "(HttpServletRequest request)", "modifiers": "private", "return": "SecurityToken", "signature": "SecurityToken extractAndValidateToken(HttpServletRequest request)", "full_signature": "private SecurityToken extractAndValidateToken(HttpServletRequest request)", "class_method_signature": "MakeRequestHandler.extractAndValidateToken(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "processFeed", "parameters": "(String url, HttpServletRequest req, String xml)", "modifiers": "private", "return": "String", "signature": "String processFeed(String url, HttpServletRequest req, String xml)", "full_signature": "private String processFeed(String url, HttpServletRequest req, String xml)", "class_method_signature": "MakeRequestHandler.processFeed(String url, HttpServletRequest req, String xml)", "testcase": false, "constructor": false}, {"identifier": "getContainer", "parameters": "(HttpServletRequest request)", "modifiers": "@SuppressWarnings(\"deprecation\") protected static", "return": "String", "signature": "String getContainer(HttpServletRequest request)", "full_signature": "@SuppressWarnings(\"deprecation\") protected static String getContainer(HttpServletRequest request)", "class_method_signature": "MakeRequestHandler.getContainer(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(HttpServletRequest request, String key, String defaultValue)", "modifiers": "protected static", "return": "String", "signature": "String getParameter(HttpServletRequest request, String key, String defaultValue)", "full_signature": "protected static String getParameter(HttpServletRequest request, String key, String defaultValue)", "class_method_signature": "MakeRequestHandler.getParameter(HttpServletRequest request, String key, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "setResponseHeaders", "parameters": "(HttpServletRequest request,\n          HttpServletResponse response, HttpResponse results)", "modifiers": "@SuppressWarnings(\"boxing\") protected", "return": "void", "signature": "void setResponseHeaders(HttpServletRequest request,\n          HttpServletResponse response, HttpResponse results)", "full_signature": "@SuppressWarnings(\"boxing\") protected void setResponseHeaders(HttpServletRequest request,\n          HttpServletResponse response, HttpResponse results)", "class_method_signature": "MakeRequestHandler.setResponseHeaders(HttpServletRequest request,\n          HttpServletResponse response, HttpResponse results)", "testcase": false, "constructor": false}, {"identifier": "containersChanged", "parameters": "(ContainerConfig config, Collection<String> changed,\n      Collection<String> removed)", "modifiers": "public", "return": "void", "signature": "void containersChanged(ContainerConfig config, Collection<String> changed,\n      Collection<String> removed)", "full_signature": "public void containersChanged(ContainerConfig config, Collection<String> changed,\n      Collection<String> removed)", "class_method_signature": "MakeRequestHandler.containersChanged(ContainerConfig config, Collection<String> changed,\n      Collection<String> removed)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/MakeRequestHandler.java"}, "focal_method": {"identifier": "fetch", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "public", "return": "void", "body": "public void fetch(HttpServletRequest request, HttpServletResponse response)\n          throws GadgetException, IOException {\n\n    HttpRequest rcr = buildHttpRequest(request);\n    String container = rcr.getContainer();\n    final Uri gadgetUri = rcr.getGadget();\n    if (gadgetUri == null) {\n      throw new GadgetException(GadgetException.Code.MISSING_PARAMETER,\n              \"Unable to find gadget in request\", HttpResponse.SC_FORBIDDEN);\n    }\n\n    Gadget gadget;\n    GadgetContext context = new HttpGadgetContext(request) {\n      @Override\n      public Uri getUrl() {\n        return gadgetUri;\n      }\n      @Override\n      public boolean getIgnoreCache() {\n        return getParameter(\"bypassSpecCache\").equals(\"1\");\n      }\n    };\n    try {\n      gadget = processor.process(context);\n    } catch (ProcessingException e) {\n      throw new GadgetException(GadgetException.Code.INTERNAL_SERVER_ERROR,\n              \"Error processing gadget\", e, HttpResponse.SC_BAD_REQUEST);\n    }\n\n    // Validate gadget is correct for the host.\n    // Ensures that the gadget has not hand crafted this request to represent itself as\n    // another gadget in a locked domain environment.\n    if (!lockedDomainService.isGadgetValidForHost(context.getHost(), gadget, container)) {\n      throw new GadgetException(GadgetException.Code.GADGET_HOST_MISMATCH,\n              \"The gadget is incorrect for this request\", HttpResponse.SC_FORBIDDEN);\n    }\n\n    if (!gadgetAdminStore.isWhitelisted(container, gadgetUri.toString())) {\n      throw new GadgetException(GadgetException.Code.NON_WHITELISTED_GADGET,\n              \"The requested content is unavailable\", HttpResponse.SC_FORBIDDEN);\n    }\n\n    // Serialize the response\n    HttpResponse results = requestPipeline.execute(rcr);\n\n    // Rewrite the response\n    if (contentRewriterRegistry != null) {\n      try {\n        results = contentRewriterRegistry.rewriteHttpResponse(rcr, results, gadget);\n      } catch (RewritingException e) {\n        throw new GadgetException(GadgetException.Code.INTERNAL_SERVER_ERROR, e,\n                e.getHttpStatusCode());\n      }\n    }\n\n    // Serialize the response\n    String output = convertResponseToJson(rcr.getSecurityToken(), request, results);\n\n    // Find and set the refresh interval\n    setResponseHeaders(request, response, results);\n    response.setStatus(HttpServletResponse.SC_OK);\n    response.setCharacterEncoding(\"UTF-8\");\n\n    PrintWriter out = response.getWriter();\n    if (\"1\".equals(getParameter(request, MULTI_PART_FORM_POST_IFRAME, null))) {\n      response.setContentType(\"text/html\");\n      out.write(IFRAME_RESPONSE_PREFIX);\n      out.write(StringEscapeUtils.escapeEcmaScript(this.unparseableCruftMsgs.get(container)));\n      out.write(StringEscapeUtils.escapeEcmaScript(output));\n      out.write(IFRAME_RESPONSE_SUFFIX);\n    } else {\n      response.setContentType(\"application/json\");\n      out.write(this.unparseableCruftMsgs.get(container) + output);\n    }\n  }", "signature": "void fetch(HttpServletRequest request, HttpServletResponse response)", "full_signature": "public void fetch(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "MakeRequestHandler.fetch(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["buildHttpRequest", "getContainer", "getGadget", "equals", "getParameter", "process", "isGadgetValidForHost", "getHost", "isWhitelisted", "toString", "execute", "rewriteHttpResponse", "getHttpStatusCode", "convertResponseToJson", "getSecurityToken", "setResponseHeaders", "setStatus", "setCharacterEncoding", "getWriter", "equals", "getParameter", "setContentType", "write", "write", "escapeEcmaScript", "get", "write", "escapeEcmaScript", "write", "setContentType", "write", "get"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}