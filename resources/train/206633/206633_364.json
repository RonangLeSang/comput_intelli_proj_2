{"test_class": {"identifier": "DefaultJsUriManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONTAINER = \"container\";", "modifier": "private static final", "type": "String", "declarator": "CONTAINER = \"container\"", "var_name": "CONTAINER"}, {"original_string": "private static final String GADGET_URI = \"http://example.com/gadget.xml\";", "modifier": "private static final", "type": "String", "declarator": "GADGET_URI = \"http://example.com/gadget.xml\"", "var_name": "GADGET_URI"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultJsUriManagerTest.java"}, "test_case": {"identifier": "makeMissingHostConfig", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n  public void makeMissingHostConfig() {\n    ContainerConfig config = mockConfig(null, \"/gadgets/js\");\n    DefaultJsUriManager manager = makeManager(config, null);\n    JsUri ctx = mockGadgetContext(false, false, null);\n    manager.makeExternJsUri(ctx);\n  }", "signature": "void makeMissingHostConfig()", "full_signature": "@Test(expected = RuntimeException.class) public void makeMissingHostConfig()", "class_method_signature": "DefaultJsUriManagerTest.makeMissingHostConfig()", "testcase": true, "constructor": false, "invocations": ["mockConfig", "makeManager", "mockGadgetContext", "makeExternJsUri"]}, "focal_class": {"identifier": "DefaultJsUriManager", "superclass": "", "interfaces": "implements JsUriManager", "fields": [{"original_string": "static final String JS_HOST_PARAM = \"gadgets.uri.js.host\";", "modifier": "static final", "type": "String", "declarator": "JS_HOST_PARAM = \"gadgets.uri.js.host\"", "var_name": "JS_HOST_PARAM"}, {"original_string": "static final String JS_PATH_PARAM = \"gadgets.uri.js.path\";", "modifier": "static final", "type": "String", "declarator": "JS_PATH_PARAM = \"gadgets.uri.js.path\"", "var_name": "JS_PATH_PARAM"}, {"original_string": "static final JsUri INVALID_URI = new JsUri(UriStatus.BAD_URI);", "modifier": "static final", "type": "JsUri", "declarator": "INVALID_URI = new JsUri(UriStatus.BAD_URI)", "var_name": "INVALID_URI"}, {"original_string": "protected static final String JS_SUFFIX = \".js\";", "modifier": "protected static final", "type": "String", "declarator": "JS_SUFFIX = \".js\"", "var_name": "JS_SUFFIX"}, {"original_string": "protected static final String JS_DELIMITER = \":\";", "modifier": "protected static final", "type": "String", "declarator": "JS_DELIMITER = \":\"", "var_name": "JS_DELIMITER"}, {"original_string": "private static final Logger LOG = Logger.getLogger(DefaultJsUriManager.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DefaultJsUriManager.class.getName())", "var_name": "LOG"}, {"original_string": "private final ContainerConfig config;", "modifier": "private final", "type": "ContainerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final Versioner versioner;", "modifier": "private final", "type": "Versioner", "declarator": "versioner", "var_name": "versioner"}, {"original_string": "private Authority authority;", "modifier": "private", "type": "Authority", "declarator": "authority", "var_name": "authority"}], "methods": [{"identifier": "DefaultJsUriManager", "parameters": "(ContainerConfig config, Versioner versioner)", "modifiers": "@Inject public", "return": "", "signature": " DefaultJsUriManager(ContainerConfig config, Versioner versioner)", "full_signature": "@Inject public  DefaultJsUriManager(ContainerConfig config, Versioner versioner)", "class_method_signature": "DefaultJsUriManager.DefaultJsUriManager(ContainerConfig config, Versioner versioner)", "testcase": false, "constructor": true}, {"identifier": "setAuthority", "parameters": "(Authority authority)", "modifiers": "@Inject(optional = true) public", "return": "void", "signature": "void setAuthority(Authority authority)", "full_signature": "@Inject(optional = true) public void setAuthority(Authority authority)", "class_method_signature": "DefaultJsUriManager.setAuthority(Authority authority)", "testcase": false, "constructor": false}, {"identifier": "makeExternJsUri", "parameters": "(JsUri ctx)", "modifiers": "public", "return": "Uri", "signature": "Uri makeExternJsUri(JsUri ctx)", "full_signature": "public Uri makeExternJsUri(JsUri ctx)", "class_method_signature": "DefaultJsUriManager.makeExternJsUri(JsUri ctx)", "testcase": false, "constructor": false}, {"identifier": "processExternJsUri", "parameters": "(Uri uri)", "modifiers": "public", "return": "JsUri", "signature": "JsUri processExternJsUri(Uri uri)", "full_signature": "public JsUri processExternJsUri(Uri uri)", "class_method_signature": "DefaultJsUriManager.processExternJsUri(Uri uri)", "testcase": false, "constructor": false}, {"identifier": "addJsLibs", "parameters": "(Collection<String> extern)", "modifiers": "static", "return": "String", "signature": "String addJsLibs(Collection<String> extern)", "full_signature": "static String addJsLibs(Collection<String> extern)", "class_method_signature": "DefaultJsUriManager.addJsLibs(Collection<String> extern)", "testcase": false, "constructor": false}, {"identifier": "getJsLibs", "parameters": "(String path)", "modifiers": "static", "return": "Collection<String>", "signature": "Collection<String> getJsLibs(String path)", "full_signature": "static Collection<String> getJsLibs(String path)", "class_method_signature": "DefaultJsUriManager.getJsLibs(String path)", "testcase": false, "constructor": false}, {"identifier": "getReqConfig", "parameters": "(String container, String key)", "modifiers": "private", "return": "String", "signature": "String getReqConfig(String container, String key)", "full_signature": "private String getReqConfig(String container, String key)", "class_method_signature": "DefaultJsUriManager.getReqConfig(String container, String key)", "testcase": false, "constructor": false}, {"identifier": "issueUriFormatError", "parameters": "(String err)", "modifiers": "protected", "return": "void", "signature": "void issueUriFormatError(String err)", "full_signature": "protected void issueUriFormatError(String err)", "class_method_signature": "DefaultJsUriManager.issueUriFormatError(String err)", "testcase": false, "constructor": false}, {"identifier": "addGadgetUri", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean addGadgetUri()", "full_signature": "protected boolean addGadgetUri()", "class_method_signature": "DefaultJsUriManager.addGadgetUri()", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultJsUriManager.java"}, "focal_method": {"identifier": "makeExternJsUri", "parameters": "(JsUri ctx)", "modifiers": "public", "return": "Uri", "body": "public Uri makeExternJsUri(JsUri ctx) {\n    String container = ctx.getContainer();\n    String jsHost = getReqConfig(container, JS_HOST_PARAM);\n    String jsPathBase = getReqConfig(container, JS_PATH_PARAM);\n\n    // We somewhat cheat in that jsHost may contain protocol/scheme as well.\n    UriBuilder uri = new UriBuilder(Uri.parse(jsHost));\n\n    // Add JS info to path and set it in URI.\n    StringBuilder jsPath = new StringBuilder(jsPathBase);\n    if (!jsPathBase.endsWith(\"/\")) {\n      jsPath.append('/');\n    }\n    jsPath.append(addJsLibs(ctx.getLibs()));\n\n    // Add the list of already-loaded libs\n    if (!ctx.getLoadedLibs().isEmpty()) {\n      jsPath.append('!').append(addJsLibs(ctx.getLoadedLibs()));\n    }\n\n    jsPath.append(JS_SUFFIX);\n    uri.setPath(jsPath.toString());\n\n    // Standard container param, as JS may be container-specific.\n    uri.addQueryParameter(Param.CONTAINER.getKey(), container);\n\n    // Pass through nocache param for dev purposes.\n    uri.addQueryParameter(Param.NO_CACHE.getKey(),\n        ctx.isNoCache() ? \"1\" : \"0\");\n\n    // Pass through debug param for debugging use.\n    uri.addQueryParameter(Param.DEBUG.getKey(),\n        ctx.isDebug() ? \"1\" : \"0\");\n\n    uri.addQueryParameter(Param.CONTAINER_MODE.getKey(),\n        ctx.getContext().getParamValue());\n\n    // Pass through gadget Uri\n    if (addGadgetUri()) {\n      uri.addQueryParameter(Param.URL.getKey(), ctx.getGadget());\n    }\n\n    if (ctx.getOnload() != null) {\n      uri.addQueryParameter(Param.ONLOAD.getKey(), ctx.getOnload());\n    }\n\n    if (ctx.isJsload()) {\n      uri.addQueryParameter(Param.JSLOAD.getKey(), \"1\");\n    }\n\n    if (ctx.isNohint()) {\n      uri.addQueryParameter(Param.NO_HINT.getKey(), \"1\");\n    }\n\n    JsCompileMode mode = ctx.getCompileMode();\n    if (mode != null && mode != JsCompileMode.getDefault()) {\n      uri.addQueryParameter(Param.COMPILE_MODE.getKey(), mode.getParamValue());\n    }\n\n    if (ctx.cajoleContent()) {\n      uri.addQueryParameter(Param.CAJOLE.getKey(), \"1\");\n    }\n\n    if (ctx.getRepository() != null) {\n      uri.addQueryParameter(Param.REPOSITORY_ID.getKey(), ctx.getRepository());\n    }\n\n    // Finally, version it, but only if !nocache.\n    if (versioner != null && !ctx.isNoCache()) {\n      String version = versioner.version(ctx);\n      if (version != null && version.length() > 0) {\n        uri.addQueryParameter(Param.VERSION.getKey(), version);\n      }\n    }\n    if (ctx.getExtensionParams() != null) {\n      uri.addQueryParameters(ctx.getExtensionParams());\n    }\n\n    return uri.toUri();\n  }", "signature": "Uri makeExternJsUri(JsUri ctx)", "full_signature": "public Uri makeExternJsUri(JsUri ctx)", "class_method_signature": "DefaultJsUriManager.makeExternJsUri(JsUri ctx)", "testcase": false, "constructor": false, "invocations": ["getContainer", "getReqConfig", "getReqConfig", "parse", "endsWith", "append", "append", "addJsLibs", "getLibs", "isEmpty", "getLoadedLibs", "append", "append", "addJsLibs", "getLoadedLibs", "append", "setPath", "toString", "addQueryParameter", "getKey", "addQueryParameter", "getKey", "isNoCache", "addQueryParameter", "getKey", "isDebug", "addQueryParameter", "getKey", "getParamValue", "getContext", "addGadgetUri", "addQueryParameter", "getKey", "getGadget", "getOnload", "addQueryParameter", "getKey", "getOnload", "isJsload", "addQueryParameter", "getKey", "isNohint", "addQueryParameter", "getKey", "getCompileMode", "getDefault", "addQueryParameter", "getKey", "getParamValue", "cajoleContent", "addQueryParameter", "getKey", "getRepository", "addQueryParameter", "getKey", "getRepository", "isNoCache", "version", "length", "addQueryParameter", "getKey", "getExtensionParams", "addQueryParameters", "getExtensionParams", "toUri"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}