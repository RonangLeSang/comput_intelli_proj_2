{"test_class": {"identifier": "DefaultConcatUriManagerTest", "superclass": "extends UriManagerTestBase", "interfaces": "", "fields": [{"original_string": "private static final Uri RESOURCE_1 = Uri.parse(\"http://example.com/one.dat\");", "modifier": "private static final", "type": "Uri", "declarator": "RESOURCE_1 = Uri.parse(\"http://example.com/one.dat\")", "var_name": "RESOURCE_1"}, {"original_string": "private static final Uri RESOURCE_2 = Uri.parse(\"http://gadgets.com/two.dat\");", "modifier": "private static final", "type": "Uri", "declarator": "RESOURCE_2 = Uri.parse(\"http://gadgets.com/two.dat\")", "var_name": "RESOURCE_2"}, {"original_string": "private static final Uri RESOURCE_3_NOSCHEMA = Uri.parse(\"//foobar.com/three.dat\");", "modifier": "private static final", "type": "Uri", "declarator": "RESOURCE_3_NOSCHEMA = Uri.parse(\"//foobar.com/three.dat\")", "var_name": "RESOURCE_3_NOSCHEMA"}, {"original_string": "private static final Uri RESOURCE_3_HTTP = Uri.parse(\"http://foobar.com/three.dat\");", "modifier": "private static final", "type": "Uri", "declarator": "RESOURCE_3_HTTP = Uri.parse(\"http://foobar.com/three.dat\")", "var_name": "RESOURCE_3_HTTP"}, {"original_string": "private static final List<Uri> RESOURCES_ONE =\n      ImmutableList.of(RESOURCE_1, RESOURCE_2, RESOURCE_3_HTTP);", "modifier": "private static final", "type": "List<Uri>", "declarator": "RESOURCES_ONE =\n      ImmutableList.of(RESOURCE_1, RESOURCE_2, RESOURCE_3_HTTP)", "var_name": "RESOURCES_ONE"}, {"original_string": "private static final List<Uri> RESOURCES_TWO =\n      ImmutableList.of(RESOURCE_3_HTTP, RESOURCE_2, RESOURCE_1);", "modifier": "private static final", "type": "List<Uri>", "declarator": "RESOURCES_TWO =\n      ImmutableList.of(RESOURCE_3_HTTP, RESOURCE_2, RESOURCE_1)", "var_name": "RESOURCES_TWO"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/uri/DefaultConcatUriManagerTest.java"}, "test_case": {"identifier": "typeJsMissingPathConfig", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n  public void typeJsMissingPathConfig() throws Exception {\n    Gadget gadget = mockGadget(false, false);\n    DefaultConcatUriManager manager = makeManager(\"host.com\", null, \"token\", null);\n    List<List<Uri>> resourceUris = ImmutableList.<List<Uri>>of(ImmutableList.of(RESOURCE_1));\n    manager.make(fromList(gadget, resourceUris, ConcatUriManager.Type.JS), false);\n  }", "signature": "void typeJsMissingPathConfig()", "full_signature": "@Test(expected = RuntimeException.class) public void typeJsMissingPathConfig()", "class_method_signature": "DefaultConcatUriManagerTest.typeJsMissingPathConfig()", "testcase": true, "constructor": false, "invocations": ["mockGadget", "makeManager", "of", "of", "make", "fromList"]}, "focal_class": {"identifier": "DefaultConcatUriManager", "superclass": "", "interfaces": "implements ConcatUriManager", "fields": [{"original_string": "public static final String CONCAT_HOST_PARAM = \"gadgets.uri.concat.host\";", "modifier": "public static final", "type": "String", "declarator": "CONCAT_HOST_PARAM = \"gadgets.uri.concat.host\"", "var_name": "CONCAT_HOST_PARAM"}, {"original_string": "public static final String CONCAT_PATH_PARAM = \"gadgets.uri.concat.path\";", "modifier": "public static final", "type": "String", "declarator": "CONCAT_PATH_PARAM = \"gadgets.uri.concat.path\"", "var_name": "CONCAT_PATH_PARAM"}, {"original_string": "public static final String CONCAT_JS_SPLIT_PARAM = \"gadgets.uri.concat.js.splitToken\";", "modifier": "public static final", "type": "String", "declarator": "CONCAT_JS_SPLIT_PARAM = \"gadgets.uri.concat.js.splitToken\"", "var_name": "CONCAT_JS_SPLIT_PARAM"}, {"original_string": "public static final String CONCAT_JS_EVAL_TPL = \"eval(%s['%s']);\";", "modifier": "public static final", "type": "String", "declarator": "CONCAT_JS_EVAL_TPL = \"eval(%s['%s']);\"", "var_name": "CONCAT_JS_EVAL_TPL"}, {"original_string": "private static final ConcatUri BAD_URI =\n      new ConcatUri(UriStatus.BAD_URI, null, null, null, null);", "modifier": "private static final", "type": "ConcatUri", "declarator": "BAD_URI =\n      new ConcatUri(UriStatus.BAD_URI, null, null, null, null)", "var_name": "BAD_URI"}, {"original_string": "private static final Integer START_INDEX = 1;", "modifier": "private static final", "type": "Integer", "declarator": "START_INDEX = 1", "var_name": "START_INDEX"}, {"original_string": "private final ContainerConfig config;", "modifier": "private final", "type": "ContainerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final Versioner versioner;", "modifier": "private final", "type": "Versioner", "declarator": "versioner", "var_name": "versioner"}, {"original_string": "private boolean strictParsing;", "modifier": "private", "type": "boolean", "declarator": "strictParsing", "var_name": "strictParsing"}, {"original_string": "private Authority authority;", "modifier": "private", "type": "Authority", "declarator": "authority", "var_name": "authority"}, {"original_string": "private static int DEFAULT_URL_MAX_LENGTH = 2048;", "modifier": "private static", "type": "int", "declarator": "DEFAULT_URL_MAX_LENGTH = 2048", "var_name": "DEFAULT_URL_MAX_LENGTH"}, {"original_string": "private int urlMaxLength = DEFAULT_URL_MAX_LENGTH;", "modifier": "private", "type": "int", "declarator": "urlMaxLength = DEFAULT_URL_MAX_LENGTH", "var_name": "urlMaxLength"}, {"original_string": "private static final float URL_LENGTH_BUFFER_MARGIN = .8f;", "modifier": "private static final", "type": "float", "declarator": "URL_LENGTH_BUFFER_MARGIN = .8f", "var_name": "URL_LENGTH_BUFFER_MARGIN"}], "methods": [{"identifier": "DefaultConcatUriManager", "parameters": "(ContainerConfig config, @Nullable Versioner versioner)", "modifiers": "@Inject public", "return": "", "signature": " DefaultConcatUriManager(ContainerConfig config, @Nullable Versioner versioner)", "full_signature": "@Inject public  DefaultConcatUriManager(ContainerConfig config, @Nullable Versioner versioner)", "class_method_signature": "DefaultConcatUriManager.DefaultConcatUriManager(ContainerConfig config, @Nullable Versioner versioner)", "testcase": false, "constructor": true}, {"identifier": "setUseStrictParsing", "parameters": "(\n      @Named(\"shindig.uri.concat.use-strict-parsing\") boolean useStrict)", "modifiers": "@Inject(optional = true) public", "return": "void", "signature": "void setUseStrictParsing(\n      @Named(\"shindig.uri.concat.use-strict-parsing\") boolean useStrict)", "full_signature": "@Inject(optional = true) public void setUseStrictParsing(\n      @Named(\"shindig.uri.concat.use-strict-parsing\") boolean useStrict)", "class_method_signature": "DefaultConcatUriManager.setUseStrictParsing(\n      @Named(\"shindig.uri.concat.use-strict-parsing\") boolean useStrict)", "testcase": false, "constructor": false}, {"identifier": "setUrlMaxLength", "parameters": "(\n      @Named(\"org.apache.shindig.gadgets.uri.urlMaxLength\") int urlMaxLength)", "modifiers": "@Inject(optional = true) public", "return": "void", "signature": "void setUrlMaxLength(\n      @Named(\"org.apache.shindig.gadgets.uri.urlMaxLength\") int urlMaxLength)", "full_signature": "@Inject(optional = true) public void setUrlMaxLength(\n      @Named(\"org.apache.shindig.gadgets.uri.urlMaxLength\") int urlMaxLength)", "class_method_signature": "DefaultConcatUriManager.setUrlMaxLength(\n      @Named(\"org.apache.shindig.gadgets.uri.urlMaxLength\") int urlMaxLength)", "testcase": false, "constructor": false}, {"identifier": "setAuthority", "parameters": "(Authority authority)", "modifiers": "@Inject(optional = true) public", "return": "void", "signature": "void setAuthority(Authority authority)", "full_signature": "@Inject(optional = true) public void setAuthority(Authority authority)", "class_method_signature": "DefaultConcatUriManager.setAuthority(Authority authority)", "testcase": false, "constructor": false}, {"identifier": "getUrlMaxLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getUrlMaxLength()", "full_signature": "public int getUrlMaxLength()", "class_method_signature": "DefaultConcatUriManager.getUrlMaxLength()", "testcase": false, "constructor": false}, {"identifier": "make", "parameters": "(List<ConcatUri> resourceUris,\n      boolean isAdjacent)", "modifiers": "public", "return": "List<ConcatData>", "signature": "List<ConcatData> make(List<ConcatUri> resourceUris,\n      boolean isAdjacent)", "full_signature": "public List<ConcatData> make(List<ConcatUri> resourceUris,\n      boolean isAdjacent)", "class_method_signature": "DefaultConcatUriManager.make(List<ConcatUri> resourceUris,\n      boolean isAdjacent)", "testcase": false, "constructor": false}, {"identifier": "makeConcatUri", "parameters": "(ConcatUri ctx, boolean isAdjacent, String container)", "modifiers": "private", "return": "ConcatData", "signature": "ConcatData makeConcatUri(ConcatUri ctx, boolean isAdjacent, String container)", "full_signature": "private ConcatData makeConcatUri(ConcatUri ctx, boolean isAdjacent, String container)", "class_method_signature": "DefaultConcatUriManager.makeConcatUri(ConcatUri ctx, boolean isAdjacent, String container)", "testcase": false, "constructor": false}, {"identifier": "addVersionAndSplitParam", "parameters": "(UriBuilder uriBuilder, String splitParam, boolean doSplit,\n                                       List<Uri> batchUris, String container, Type type)", "modifiers": "private", "return": "void", "signature": "void addVersionAndSplitParam(UriBuilder uriBuilder, String splitParam, boolean doSplit,\n                                       List<Uri> batchUris, String container, Type type)", "full_signature": "private void addVersionAndSplitParam(UriBuilder uriBuilder, String splitParam, boolean doSplit,\n                                       List<Uri> batchUris, String container, Type type)", "class_method_signature": "DefaultConcatUriManager.addVersionAndSplitParam(UriBuilder uriBuilder, String splitParam, boolean doSplit,\n                                       List<Uri> batchUris, String container, Type type)", "testcase": false, "constructor": false}, {"identifier": "createSnippets", "parameters": "(List<Uri> uris)", "modifiers": "private", "return": "Map<Uri, String>", "signature": "Map<Uri, String> createSnippets(List<Uri> uris)", "full_signature": "private Map<Uri, String> createSnippets(List<Uri> uris)", "class_method_signature": "DefaultConcatUriManager.createSnippets(List<Uri> uris)", "testcase": false, "constructor": false}, {"identifier": "makeUriBuilder", "parameters": "(ConcatUri ctx, String authority, String path)", "modifiers": "private", "return": "UriBuilder", "signature": "UriBuilder makeUriBuilder(ConcatUri ctx, String authority, String path)", "full_signature": "private UriBuilder makeUriBuilder(ConcatUri ctx, String authority, String path)", "class_method_signature": "DefaultConcatUriManager.makeUriBuilder(ConcatUri ctx, String authority, String path)", "testcase": false, "constructor": false}, {"identifier": "getJsSnippet", "parameters": "(String splitParam, Uri resource)", "modifiers": "static", "return": "String", "signature": "String getJsSnippet(String splitParam, Uri resource)", "full_signature": "static String getJsSnippet(String splitParam, Uri resource)", "class_method_signature": "DefaultConcatUriManager.getJsSnippet(String splitParam, Uri resource)", "testcase": false, "constructor": false}, {"identifier": "getReqVal", "parameters": "(String container, String key)", "modifiers": "private", "return": "String", "signature": "String getReqVal(String container, String key)", "full_signature": "private String getReqVal(String container, String key)", "class_method_signature": "DefaultConcatUriManager.getReqVal(String container, String key)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Uri uri)", "modifiers": "public", "return": "ConcatUri", "signature": "ConcatUri process(Uri uri)", "full_signature": "public ConcatUri process(Uri uri)", "class_method_signature": "DefaultConcatUriManager.process(Uri uri)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/uri/DefaultConcatUriManager.java"}, "focal_method": {"identifier": "make", "parameters": "(List<ConcatUri> resourceUris,\n      boolean isAdjacent)", "modifiers": "public", "return": "List<ConcatData>", "body": "public List<ConcatData> make(List<ConcatUri> resourceUris,\n      boolean isAdjacent) {\n    List<ConcatData> concatUris = Lists.newArrayListWithCapacity(resourceUris.size());\n\n    if (resourceUris.isEmpty()) {\n      return concatUris;\n    }\n\n    ConcatUri exemplar = resourceUris.get(0);\n    String container = exemplar.getContainer();\n\n    for (ConcatUri ctx : resourceUris) {\n      concatUris.add(makeConcatUri(ctx, isAdjacent, container));\n    }\n    return concatUris;\n  }", "signature": "List<ConcatData> make(List<ConcatUri> resourceUris,\n      boolean isAdjacent)", "full_signature": "public List<ConcatData> make(List<ConcatUri> resourceUris,\n      boolean isAdjacent)", "class_method_signature": "DefaultConcatUriManager.make(List<ConcatUri> resourceUris,\n      boolean isAdjacent)", "testcase": false, "constructor": false, "invocations": ["newArrayListWithCapacity", "size", "isEmpty", "get", "getContainer", "add", "makeConcatUri"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}