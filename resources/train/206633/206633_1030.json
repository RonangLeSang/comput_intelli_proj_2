{"test_class": {"identifier": "DefaultHandlerRegistryTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private DefaultHandlerRegistry registry;", "modifier": "private", "type": "DefaultHandlerRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private BeanJsonConverter converter;", "modifier": "private", "type": "BeanJsonConverter", "declarator": "converter", "var_name": "converter"}], "file": "java/common/src/test/java/org/apache/shindig/protocol/DefaultHandlerRegistryTest.java"}, "test_case": {"identifier": "testSupportedRpcServices", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSupportedRpcServices() throws Exception {\n    assertEquals(registry.getSupportedRpcServices(),\n        Sets.newHashSet(\"test.create\", \"test.get\", \"test.overridden\", \"test.exception\",\n            \"test.futureException\", \"test.override.rpcname\", \"test.echo\", \"test.noArg\"));\n  }", "signature": "void testSupportedRpcServices()", "full_signature": "@Test public void testSupportedRpcServices()", "class_method_signature": "DefaultHandlerRegistryTest.testSupportedRpcServices()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getSupportedRpcServices", "newHashSet"]}, "focal_class": {"identifier": "DefaultHandlerRegistry", "superclass": "", "interfaces": "implements HandlerRegistry", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(DefaultHandlerRegistry.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DefaultHandlerRegistry.class.getName())", "var_name": "LOG"}, {"original_string": "private final Map<String, Map<String, SortedSet<RestPath>>> serviceMethodPathMap =\n      Maps.newHashMap();", "modifier": "private final", "type": "Map<String, Map<String, SortedSet<RestPath>>>", "declarator": "serviceMethodPathMap =\n      Maps.newHashMap()", "var_name": "serviceMethodPathMap"}, {"original_string": "private final Map<String, RpcInvocationHandler> rpcOperations = Maps.newHashMap();", "modifier": "private final", "type": "Map<String, RpcInvocationHandler>", "declarator": "rpcOperations = Maps.newHashMap()", "var_name": "rpcOperations"}, {"original_string": "private final Injector injector;", "modifier": "private final", "type": "Injector", "declarator": "injector", "var_name": "injector"}, {"original_string": "private final BeanJsonConverter beanJsonConverter;", "modifier": "private final", "type": "BeanJsonConverter", "declarator": "beanJsonConverter", "var_name": "beanJsonConverter"}, {"original_string": "private final HandlerExecutionListener executionListener;", "modifier": "private final", "type": "HandlerExecutionListener", "declarator": "executionListener", "var_name": "executionListener"}], "methods": [{"identifier": "DefaultHandlerRegistry", "parameters": "(Injector injector,\n                                BeanJsonConverter beanJsonConverter,\n                                HandlerExecutionListener executionListener)", "modifiers": "@Inject public", "return": "", "signature": " DefaultHandlerRegistry(Injector injector,\n                                BeanJsonConverter beanJsonConverter,\n                                HandlerExecutionListener executionListener)", "full_signature": "@Inject public  DefaultHandlerRegistry(Injector injector,\n                                BeanJsonConverter beanJsonConverter,\n                                HandlerExecutionListener executionListener)", "class_method_signature": "DefaultHandlerRegistry.DefaultHandlerRegistry(Injector injector,\n                                BeanJsonConverter beanJsonConverter,\n                                HandlerExecutionListener executionListener)", "testcase": false, "constructor": true}, {"identifier": "addHandlers", "parameters": "(Set<Object> handlers)", "modifiers": "public", "return": "void", "signature": "void addHandlers(Set<Object> handlers)", "full_signature": "public void addHandlers(Set<Object> handlers)", "class_method_signature": "DefaultHandlerRegistry.addHandlers(Set<Object> handlers)", "testcase": false, "constructor": false}, {"identifier": "getRpcHandler", "parameters": "(JSONObject rpc)", "modifiers": "public", "return": "RpcHandler", "signature": "RpcHandler getRpcHandler(JSONObject rpc)", "full_signature": "public RpcHandler getRpcHandler(JSONObject rpc)", "class_method_signature": "DefaultHandlerRegistry.getRpcHandler(JSONObject rpc)", "testcase": false, "constructor": false}, {"identifier": "getRestHandler", "parameters": "(String path, String method)", "modifiers": "public", "return": "RestHandler", "signature": "RestHandler getRestHandler(String path, String method)", "full_signature": "public RestHandler getRestHandler(String path, String method)", "class_method_signature": "DefaultHandlerRegistry.getRestHandler(String path, String method)", "testcase": false, "constructor": false}, {"identifier": "getSupportedRestServices", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getSupportedRestServices()", "full_signature": "public Set<String> getSupportedRestServices()", "class_method_signature": "DefaultHandlerRegistry.getSupportedRestServices()", "testcase": false, "constructor": false}, {"identifier": "getSupportedRpcServices", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getSupportedRpcServices()", "full_signature": "public Set<String> getSupportedRpcServices()", "class_method_signature": "DefaultHandlerRegistry.getSupportedRpcServices()", "testcase": false, "constructor": false}, {"identifier": "createRestHandler", "parameters": "(Provider<?> handlerProvider,\n      Service service, Operation op, Method m)", "modifiers": "private", "return": "void", "signature": "void createRestHandler(Provider<?> handlerProvider,\n      Service service, Operation op, Method m)", "full_signature": "private void createRestHandler(Provider<?> handlerProvider,\n      Service service, Operation op, Method m)", "class_method_signature": "DefaultHandlerRegistry.createRestHandler(Provider<?> handlerProvider,\n      Service service, Operation op, Method m)", "testcase": false, "constructor": false}, {"identifier": "createRpcHandler", "parameters": "(Provider<?> handlerProvider, Service service,\n      Operation op, Method m)", "modifiers": "private", "return": "void", "signature": "void createRpcHandler(Provider<?> handlerProvider, Service service,\n      Operation op, Method m)", "full_signature": "private void createRpcHandler(Provider<?> handlerProvider, Service service,\n      Operation op, Method m)", "class_method_signature": "DefaultHandlerRegistry.createRpcHandler(Provider<?> handlerProvider, Service service,\n      Operation op, Method m)", "testcase": false, "constructor": false}], "file": "java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java"}, "focal_method": {"identifier": "getSupportedRpcServices", "parameters": "()", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getSupportedRpcServices() {\n    return Collections.unmodifiableSet(rpcOperations.keySet());\n  }", "signature": "Set<String> getSupportedRpcServices()", "full_signature": "public Set<String> getSupportedRpcServices()", "class_method_signature": "DefaultHandlerRegistry.getSupportedRpcServices()", "testcase": false, "constructor": false, "invocations": ["unmodifiableSet", "keySet"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}