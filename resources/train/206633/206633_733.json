{"test_class": {"identifier": "StyleAdjacencyVisitorTest", "superclass": "extends DomWalkerTestBase", "interfaces": "", "fields": [], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/StyleAdjacencyVisitorTest.java"}, "test_case": {"identifier": "reshuffleMultipleStyleNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void reshuffleMultipleStyleNodes() throws Exception {\n    Node style1 = elem(\"style\");\n    Node style2 = elem(\"style\");\n    Node style3 = elem(\"style\");\n\n    // Some in head, some in body.\n    Node html = htmlDoc(new Node[] { elem(\"script\"), style1, elem(\"foo\") },\n        doc.createTextNode(\"text1\"), style2, doc.createComment(\"comment\"), elem(\"div\"),\n        style3);\n    assertTrue(revisit(style1, style2, style3));\n\n    // Document structure sanity tests.\n    assertEquals(2, html.getChildNodes().getLength());\n    Node head = html.getFirstChild();\n    assertEquals(\"head\", head.getNodeName());\n    Node body = html.getLastChild();\n    assertEquals(\"body\", body.getNodeName());\n\n    // Reshuffling validation.\n    assertEquals(5, head.getChildNodes().getLength());\n    assertSame(style1, head.getChildNodes().item(0));\n    assertSame(style2, head.getChildNodes().item(1));\n    assertSame(style3, head.getChildNodes().item(2));\n    assertEquals(3, body.getChildNodes().getLength());\n  }", "signature": "void reshuffleMultipleStyleNodes()", "full_signature": "@Test public void reshuffleMultipleStyleNodes()", "class_method_signature": "StyleAdjacencyVisitorTest.reshuffleMultipleStyleNodes()", "testcase": true, "constructor": false, "invocations": ["elem", "elem", "elem", "htmlDoc", "elem", "elem", "createTextNode", "createComment", "elem", "assertTrue", "revisit", "assertEquals", "getLength", "getChildNodes", "getFirstChild", "assertEquals", "getNodeName", "getLastChild", "assertEquals", "getNodeName", "assertEquals", "getLength", "getChildNodes", "assertSame", "item", "getChildNodes", "assertSame", "item", "getChildNodes", "assertSame", "item", "getChildNodes", "assertEquals", "getLength", "getChildNodes"]}, "focal_class": {"identifier": "StyleAdjacencyVisitor", "superclass": "", "interfaces": "implements Visitor", "fields": [], "methods": [{"identifier": "visit", "parameters": "(Gadget gadget, Node node)", "modifiers": "public", "return": "VisitStatus", "signature": "VisitStatus visit(Gadget gadget, Node node)", "full_signature": "public VisitStatus visit(Gadget gadget, Node node)", "class_method_signature": "StyleAdjacencyVisitor.visit(Gadget gadget, Node node)", "testcase": false, "constructor": false}, {"identifier": "revisit", "parameters": "(Gadget gadget, List<Node> nodes)", "modifiers": "public", "return": "boolean", "signature": "boolean revisit(Gadget gadget, List<Node> nodes)", "full_signature": "public boolean revisit(Gadget gadget, List<Node> nodes)", "class_method_signature": "StyleAdjacencyVisitor.revisit(Gadget gadget, List<Node> nodes)", "testcase": false, "constructor": false}, {"identifier": "getAttrib", "parameters": "(Node node, String key)", "modifiers": "private", "return": "String", "signature": "String getAttrib(Node node, String key)", "full_signature": "private String getAttrib(Node node, String key)", "class_method_signature": "StyleAdjacencyVisitor.getAttrib(Node node, String key)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/StyleAdjacencyVisitor.java"}, "focal_method": {"identifier": "revisit", "parameters": "(Gadget gadget, List<Node> nodes)", "modifiers": "public", "return": "boolean", "body": "public boolean revisit(Gadget gadget, List<Node> nodes)\n      throws RewritingException {\n    Node head = DomUtil.getFirstNamedChildNode(\n        nodes.get(0).getOwnerDocument().getDocumentElement(), \"head\");\n\n    if (head == null) {\n      // Should never occur; do for paranoia's sake.\n      return false;\n    }\n\n    // Detach nodes\n    for (Node n : nodes) {\n      n.getParentNode().removeChild(n);\n    }\n\n    // Add nodes back to DOM\n    if (head.getFirstChild() == null) {\n      // add each node to head\n      for (Node n : nodes) {\n        head.appendChild(n);\n      }\n    } else {\n      // existing nodes in head, inject all nodes before the first one\n      Node firstChild = head.getFirstChild();\n      for (Node n : nodes) {\n        head.insertBefore(n, firstChild);\n      }\n    }\n\n    return true;\n  }", "signature": "boolean revisit(Gadget gadget, List<Node> nodes)", "full_signature": "public boolean revisit(Gadget gadget, List<Node> nodes)", "class_method_signature": "StyleAdjacencyVisitor.revisit(Gadget gadget, List<Node> nodes)", "testcase": false, "constructor": false, "invocations": ["getFirstNamedChildNode", "getDocumentElement", "getOwnerDocument", "get", "removeChild", "getParentNode", "getFirstChild", "appendChild", "getFirstChild", "insertBefore"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}