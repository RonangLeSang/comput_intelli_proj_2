{"test_class": {"identifier": "JsRequestBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HOST_HEADER_KEY = \"Host\";", "modifier": "private static final", "type": "String", "declarator": "HOST_HEADER_KEY = \"Host\"", "var_name": "HOST_HEADER_KEY"}, {"original_string": "private static final String IMS_HEADER_KEY = \"If-Modified-Since\";", "modifier": "private static final", "type": "String", "declarator": "IMS_HEADER_KEY = \"If-Modified-Since\"", "var_name": "IMS_HEADER_KEY"}, {"original_string": "private static final String HOST = \"localhost\";", "modifier": "private static final", "type": "String", "declarator": "HOST = \"localhost\"", "var_name": "HOST"}, {"original_string": "private IMocksControl control;", "modifier": "private", "type": "IMocksControl", "declarator": "control", "var_name": "control"}, {"original_string": "private JsUriManager jsUriManager;", "modifier": "private", "type": "JsUriManager", "declarator": "jsUriManager", "var_name": "jsUriManager"}, {"original_string": "private JsUri jsUri;", "modifier": "private", "type": "JsUri", "declarator": "jsUri", "var_name": "jsUri"}, {"original_string": "private HttpServletRequest request;", "modifier": "private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private JsRequestBuilder builder;", "modifier": "private", "type": "JsRequestBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private FeatureRegistry registry;", "modifier": "private", "type": "FeatureRegistry", "declarator": "registry", "var_name": "registry"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/js/JsRequestBuilderTest.java"}, "test_case": {"identifier": "testCreateRequestNotInCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateRequestNotInCache() throws Exception {\n    EasyMock.expect(jsUriManager.processExternJsUri(EasyMock.isA(Uri.class))).andReturn(jsUri);\n    EasyMock.expect(request.getHeader(HOST_HEADER_KEY)).andReturn(HOST);\n    EasyMock.expect(request.getHeader(IMS_HEADER_KEY)).andReturn(null);\n    control.replay();\n    JsRequest jsRequest = builder.build(request);\n    control.verify();\n    assertSame(jsUri, jsRequest.getJsUri());\n    assertEquals(HOST, jsRequest.getHost());\n    assertFalse(jsRequest.isInCache());\n  }", "signature": "void testCreateRequestNotInCache()", "full_signature": "@Test public void testCreateRequestNotInCache()", "class_method_signature": "JsRequestBuilderTest.testCreateRequestNotInCache()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "processExternJsUri", "isA", "andReturn", "expect", "getHeader", "andReturn", "expect", "getHeader", "replay", "build", "verify", "assertSame", "getJsUri", "assertEquals", "getHost", "assertFalse", "isInCache"]}, "focal_class": {"identifier": "JsRequestBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JsUriManager jsUriManager;", "modifier": "private final", "type": "JsUriManager", "declarator": "jsUriManager", "var_name": "jsUriManager"}, {"original_string": "private final FeatureRegistry registry;", "modifier": "private final", "type": "FeatureRegistry", "declarator": "registry", "var_name": "registry"}], "methods": [{"identifier": "JsRequestBuilder", "parameters": "(JsUriManager jsUriManager,\n                          FeatureRegistry registry)", "modifiers": "@Inject public", "return": "", "signature": " JsRequestBuilder(JsUriManager jsUriManager,\n                          FeatureRegistry registry)", "full_signature": "@Inject public  JsRequestBuilder(JsUriManager jsUriManager,\n                          FeatureRegistry registry)", "class_method_signature": "JsRequestBuilder.JsRequestBuilder(JsUriManager jsUriManager,\n                          FeatureRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "JsRequest", "signature": "JsRequest build(HttpServletRequest request)", "full_signature": "public JsRequest build(HttpServletRequest request)", "class_method_signature": "JsRequestBuilder.build(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(JsUri jsUri, String host)", "modifiers": "public", "return": "JsRequest", "signature": "JsRequest build(JsUri jsUri, String host)", "full_signature": "public JsRequest build(JsUri jsUri, String host)", "class_method_signature": "JsRequestBuilder.build(JsUri jsUri, String host)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(JsUri jsUri, String host, boolean inCache)", "modifiers": "protected", "return": "JsRequest", "signature": "JsRequest build(JsUri jsUri, String host, boolean inCache)", "full_signature": "protected JsRequest build(JsUri jsUri, String host, boolean inCache)", "class_method_signature": "JsRequestBuilder.build(JsUri jsUri, String host, boolean inCache)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/js/JsRequestBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "JsRequest", "body": "public JsRequest build(HttpServletRequest request) throws GadgetException {\n    JsUri jsUri = jsUriManager.processExternJsUri(new UriBuilder(request).toUri());\n    String host = request.getHeader(\"Host\");\n    boolean inCache = request.getHeader(\"If-Modified-Since\") != null;\n    return build(jsUri, host, inCache);\n  }", "signature": "JsRequest build(HttpServletRequest request)", "full_signature": "public JsRequest build(HttpServletRequest request)", "class_method_signature": "JsRequestBuilder.build(HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["processExternJsUri", "toUri", "getHeader", "getHeader", "build"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}