{"test_class": {"identifier": "JsonUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "java/common/src/test/java/org/apache/shindig/common/JsonUtilTest.java"}, "test_case": {"identifier": "getPropertyOfJsonObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getPropertyOfJsonObject() throws Exception {\n    JSONObject json = new JSONObject(\"{a: 1, b: '2'}\");\n    assertEquals(1, JsonUtil.getProperty(json, \"a\"));\n    assertEquals(\"2\", JsonUtil.getProperty(json, \"b\"));\n    assertNull(JsonUtil.getProperty(json, \"c\"));\n  }", "signature": "void getPropertyOfJsonObject()", "full_signature": "@Test public void getPropertyOfJsonObject()", "class_method_signature": "JsonUtilTest.getPropertyOfJsonObject()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getProperty", "assertEquals", "getProperty", "assertNull", "getProperty"]}, "focal_class": {"identifier": "JsonUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> EXCLUDE_METHODS\n      = ImmutableSet.of(\"getClass\", \"getDeclaringClass\");", "modifier": "private static final", "type": "Set<String>", "declarator": "EXCLUDE_METHODS\n      = ImmutableSet.of(\"getClass\", \"getDeclaringClass\")", "var_name": "EXCLUDE_METHODS"}, {"original_string": "private static final LoadingCache<Class<?>, Map<String, Method>> GETTERS = CacheBuilder\n      .newBuilder()\n      .build(new CacheLoader<Class<?>, Map<String, Method>>() {\n        public Map<String, Method> load(Class<?> clazz) {\n          ImmutableMap.Builder<String,Method> methods = ImmutableMap.builder();\n\n          for (Method method : clazz.getMethods()) {\n            if (method.getParameterTypes().length == 0 && !method.isSynthetic()) {\n              String name = getPropertyName(method);\n              if (name != null) {\n                methods.put(name, method);\n              }\n            }\n          }\n          return methods.build();\n        }\n      });", "modifier": "private static final", "type": "LoadingCache<Class<?>, Map<String, Method>>", "declarator": "GETTERS = CacheBuilder\n      .newBuilder()\n      .build(new CacheLoader<Class<?>, Map<String, Method>>() {\n        public Map<String, Method> load(Class<?> clazz) {\n          ImmutableMap.Builder<String,Method> methods = ImmutableMap.builder();\n\n          for (Method method : clazz.getMethods()) {\n            if (method.getParameterTypes().length == 0 && !method.isSynthetic()) {\n              String name = getPropertyName(method);\n              if (name != null) {\n                methods.put(name, method);\n              }\n            }\n          }\n          return methods.build();\n        }\n      })", "var_name": "GETTERS"}], "methods": [{"identifier": "JsonUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonUtil()", "full_signature": "private  JsonUtil()", "class_method_signature": "JsonUtil.JsonUtil()", "testcase": false, "constructor": true}, {"identifier": "getProperty", "parameters": "(Object value, String propertyName)", "modifiers": "public static", "return": "Object", "signature": "Object getProperty(Object value, String propertyName)", "full_signature": "public static Object getProperty(Object value, String propertyName)", "class_method_signature": "JsonUtil.getProperty(Object value, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getGetters", "parameters": "(Object pojo)", "modifiers": "static", "return": "Map<String, Method>", "signature": "Map<String, Method> getGetters(Object pojo)", "full_signature": "static Map<String, Method> getGetters(Object pojo)", "class_method_signature": "JsonUtil.getGetters(Object pojo)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(Method method)", "modifiers": "private static", "return": "String", "signature": "String getPropertyName(Method method)", "full_signature": "private static String getPropertyName(Method method)", "class_method_signature": "JsonUtil.getPropertyName(Method method)", "testcase": false, "constructor": false}], "file": "java/common/src/main/java/org/apache/shindig/common/JsonUtil.java"}, "focal_method": {"identifier": "getProperty", "parameters": "(Object value, String propertyName)", "modifiers": "public static", "return": "Object", "body": "public static Object getProperty(Object value, String propertyName) {\n    Preconditions.checkNotNull(value);\n    Preconditions.checkNotNull(propertyName);\n\n    if (value instanceof JSONObject) {\n      return ((JSONObject) value).opt(propertyName);\n    } else if (value instanceof Map<?, ?>) {\n      return ((Map<?, ?>) value).get(propertyName);\n    } else {\n      // Try getter conversion\n      Method method = GETTERS.getUnchecked(value.getClass()).get(propertyName);\n      if (method != null) {\n        try {\n          return method.invoke(value);\n        } catch (IllegalArgumentException e) {\n          // Shouldn't be possible.\n          throw new RuntimeException(e);\n        } catch (IllegalAccessException e) {\n          // Bad class.\n          throw new RuntimeException(e);\n        } catch (InvocationTargetException e) {\n          // Bad class.\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    return null;\n  }", "signature": "Object getProperty(Object value, String propertyName)", "full_signature": "public static Object getProperty(Object value, String propertyName)", "class_method_signature": "JsonUtil.getProperty(Object value, String propertyName)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "opt", "get", "get", "getUnchecked", "getClass", "invoke"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}