{"test_class": {"identifier": "ActivityHandlerTest", "superclass": "extends EasyMockTestCase", "interfaces": "", "fields": [{"original_string": "private BeanJsonConverter converter;", "modifier": "private", "type": "BeanJsonConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private ActivityService activityService;", "modifier": "private", "type": "ActivityService", "declarator": "activityService", "var_name": "activityService"}, {"original_string": "private ActivityHandler handler;", "modifier": "private", "type": "ActivityHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private FakeGadgetToken token;", "modifier": "private", "type": "FakeGadgetToken", "declarator": "token", "var_name": "token"}, {"original_string": "private static final Set<UserId> JOHN_DOE =\n      ImmutableSet.of(new UserId(UserId.Type.userId, \"john.doe\"));", "modifier": "private static final", "type": "Set<UserId>", "declarator": "JOHN_DOE =\n      ImmutableSet.of(new UserId(UserId.Type.userId, \"john.doe\"))", "var_name": "JOHN_DOE"}, {"original_string": "protected HandlerRegistry registry;", "modifier": "protected", "type": "HandlerRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "protected ContainerConfig containerConfig;", "modifier": "protected", "type": "ContainerConfig", "declarator": "containerConfig", "var_name": "containerConfig"}], "file": "java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/ActivityHandlerTest.java"}, "test_case": {"identifier": "testHandleGetSuportedFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHandleGetSuportedFields() throws Exception {\n    String path = \"/activities/@supportedFields\";\n    RestHandler operation = registry.getRestHandler(path, \"GET\");\n\n    replay();\n    @SuppressWarnings(\"unchecked\")\n    List<Object> received = (List<Object>) operation.execute(Maps.<String, String[]>newHashMap(),\n        null, token, converter).get();\n    assertEquals(2, received.size());\n    assertEquals(\"id\", received.get(0).toString());\n    assertEquals(\"title\", received.get(1).toString());\n\n    verify();\n  }", "signature": "void testHandleGetSuportedFields()", "full_signature": "@Test public void testHandleGetSuportedFields()", "class_method_signature": "ActivityHandlerTest.testHandleGetSuportedFields()", "testcase": true, "constructor": false, "invocations": ["getRestHandler", "replay", "get", "execute", "newHashMap", "assertEquals", "size", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "verify"]}, "focal_class": {"identifier": "ActivityHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ActivityService service;", "modifier": "private final", "type": "ActivityService", "declarator": "service", "var_name": "service"}, {"original_string": "private final ContainerConfig config;", "modifier": "private final", "type": "ContainerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final CollectionOptionsFactory collectionOptionsFactory;", "modifier": "private final", "type": "CollectionOptionsFactory", "declarator": "collectionOptionsFactory", "var_name": "collectionOptionsFactory"}], "methods": [{"identifier": "ActivityHandler", "parameters": "(\n      ActivityService service, ContainerConfig config,\n      CollectionOptionsFactory collectionOptionsFactory)", "modifiers": "@Inject public", "return": "", "signature": " ActivityHandler(\n      ActivityService service, ContainerConfig config,\n      CollectionOptionsFactory collectionOptionsFactory)", "full_signature": "@Inject public  ActivityHandler(\n      ActivityService service, ContainerConfig config,\n      CollectionOptionsFactory collectionOptionsFactory)", "class_method_signature": "ActivityHandler.ActivityHandler(\n      ActivityService service, ContainerConfig config,\n      CollectionOptionsFactory collectionOptionsFactory)", "testcase": false, "constructor": true}, {"identifier": "delete", "parameters": "(SocialRequestItem request)", "modifiers": "@Operation(httpMethods=\"DELETE\") public", "return": "Future<?>", "signature": "Future<?> delete(SocialRequestItem request)", "full_signature": "@Operation(httpMethods=\"DELETE\") public Future<?> delete(SocialRequestItem request)", "class_method_signature": "ActivityHandler.delete(SocialRequestItem request)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(SocialRequestItem request)", "modifiers": "@Operation(httpMethods=\"PUT\", bodyParam = \"activity\") public", "return": "Future<?>", "signature": "Future<?> update(SocialRequestItem request)", "full_signature": "@Operation(httpMethods=\"PUT\", bodyParam = \"activity\") public Future<?> update(SocialRequestItem request)", "class_method_signature": "ActivityHandler.update(SocialRequestItem request)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(SocialRequestItem request)", "modifiers": "@Operation(httpMethods=\"POST\", bodyParam = \"activity\") public", "return": "Future<?>", "signature": "Future<?> create(SocialRequestItem request)", "full_signature": "@Operation(httpMethods=\"POST\", bodyParam = \"activity\") public Future<?> create(SocialRequestItem request)", "class_method_signature": "ActivityHandler.create(SocialRequestItem request)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(SocialRequestItem request)", "modifiers": "@Operation(httpMethods=\"GET\") public", "return": "Future<?>", "signature": "Future<?> get(SocialRequestItem request)", "full_signature": "@Operation(httpMethods=\"GET\") public Future<?> get(SocialRequestItem request)", "class_method_signature": "ActivityHandler.get(SocialRequestItem request)", "testcase": false, "constructor": false}, {"identifier": "supportedFields", "parameters": "(RequestItem request)", "modifiers": "@Operation(httpMethods = \"GET\", path=\"/@supportedFields\") public", "return": "List<Object>", "signature": "List<Object> supportedFields(RequestItem request)", "full_signature": "@Operation(httpMethods = \"GET\", path=\"/@supportedFields\") public List<Object> supportedFields(RequestItem request)", "class_method_signature": "ActivityHandler.supportedFields(RequestItem request)", "testcase": false, "constructor": false}], "file": "java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/ActivityHandler.java"}, "focal_method": {"identifier": "get", "parameters": "(SocialRequestItem request)", "modifiers": "@Operation(httpMethods=\"GET\") public", "return": "Future<?>", "body": "@Operation(httpMethods=\"GET\")\n  public Future<?> get(SocialRequestItem request)\n      throws ProtocolException {\n    Set<UserId> userIds = request.getUsers();\n    Set<String> optionalActivityIds = ImmutableSet.copyOf(request.getListParameter(\"activityId\"));\n\n    CollectionOptions options = collectionOptionsFactory.create(request);\n\n    // Preconditions\n    HandlerPreconditions.requireNotEmpty(userIds, \"No userId specified\");\n    if (userIds.size() > 1 && !optionalActivityIds.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot fetch same activityIds for multiple userIds\");\n    }\n\n    if (!optionalActivityIds.isEmpty()) {\n      if (optionalActivityIds.size() == 1) {\n        return service.getActivity(userIds.iterator().next(), request.getGroup(),\n            request.getAppId(), request.getFields(), optionalActivityIds.iterator().next(),\n            request.getToken());\n      } else {\n        return service.getActivities(userIds.iterator().next(), request.getGroup(),\n            request.getAppId(), request.getFields(), options, optionalActivityIds, request.getToken());\n      }\n    }\n\n    return service.getActivities(userIds, request.getGroup(),\n        request.getAppId(),\n        // TODO: add pagination and sorting support\n        // getSortBy(params), getFilterBy(params), getStartIndex(params), getCount(params),\n        request.getFields(), options, request.getToken());\n  }", "signature": "Future<?> get(SocialRequestItem request)", "full_signature": "@Operation(httpMethods=\"GET\") public Future<?> get(SocialRequestItem request)", "class_method_signature": "ActivityHandler.get(SocialRequestItem request)", "testcase": false, "constructor": false, "invocations": ["getUsers", "copyOf", "getListParameter", "create", "requireNotEmpty", "size", "isEmpty", "isEmpty", "size", "getActivity", "next", "iterator", "getGroup", "getAppId", "getFields", "next", "iterator", "getToken", "getActivities", "next", "iterator", "getGroup", "getAppId", "getFields", "getToken", "getActivities", "getGroup", "getAppId", "getFields", "getToken"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}