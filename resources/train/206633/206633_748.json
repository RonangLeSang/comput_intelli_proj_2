{"test_class": {"identifier": "ConcatVisitorTest", "superclass": "extends DomWalkerTestBase", "interfaces": "", "fields": [{"original_string": "private static final String JS1_URL_STR = \"http://one.com/foo.js?test=1&ui=2\";", "modifier": "private static final", "type": "String", "declarator": "JS1_URL_STR = \"http://one.com/foo.js?test=1&ui=2\"", "var_name": "JS1_URL_STR"}, {"original_string": "private Node js1;", "modifier": "private", "type": "Node", "declarator": "js1", "var_name": "js1"}, {"original_string": "private static final String JS2_URL_STR = \"http://two.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "JS2_URL_STR = \"http://two.com/foo.js\"", "var_name": "JS2_URL_STR"}, {"original_string": "private Node js2;", "modifier": "private", "type": "Node", "declarator": "js2", "var_name": "js2"}, {"original_string": "private static final String JS3_URL_STR = \"http://three.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "JS3_URL_STR = \"http://three.com/foo.js\"", "var_name": "JS3_URL_STR"}, {"original_string": "private Node js3;", "modifier": "private", "type": "Node", "declarator": "js3", "var_name": "js3"}, {"original_string": "private static final String JS4_URL_STR = \"http://four.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "JS4_URL_STR = \"http://four.com/foo.js\"", "var_name": "JS4_URL_STR"}, {"original_string": "private Node js4;", "modifier": "private", "type": "Node", "declarator": "js4", "var_name": "js4"}, {"original_string": "private static final String JS5_URL_STR = \"http://~^|BAD |^/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "JS5_URL_STR = \"http://~^|BAD |^/foo.js\"", "var_name": "JS5_URL_STR"}, {"original_string": "private Node js5;", "modifier": "private", "type": "Node", "declarator": "js5", "var_name": "js5"}, {"original_string": "private static final String JS6_URL_STR = \"http://six.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "JS6_URL_STR = \"http://six.com/foo.js\"", "var_name": "JS6_URL_STR"}, {"original_string": "private Node js6;", "modifier": "private", "type": "Node", "declarator": "js6", "var_name": "js6"}, {"original_string": "private static final String CSS1_URL_STR = \"http://one.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS1_URL_STR = \"http://one.com/foo.js\"", "var_name": "CSS1_URL_STR"}, {"original_string": "private Node css1;", "modifier": "private", "type": "Node", "declarator": "css1", "var_name": "css1"}, {"original_string": "private static final String CSS2_URL_STR = \"http://two.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS2_URL_STR = \"http://two.com/foo.js\"", "var_name": "CSS2_URL_STR"}, {"original_string": "private Node css2;", "modifier": "private", "type": "Node", "declarator": "css2", "var_name": "css2"}, {"original_string": "private static final String CSS3_URL_STR = \"http://three.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS3_URL_STR = \"http://three.com/foo.js\"", "var_name": "CSS3_URL_STR"}, {"original_string": "private Node css3;", "modifier": "private", "type": "Node", "declarator": "css3", "var_name": "css3"}, {"original_string": "private static final String CSS4_URL_STR = \"http://four.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS4_URL_STR = \"http://four.com/foo.js\"", "var_name": "CSS4_URL_STR"}, {"original_string": "private Node css4;", "modifier": "private", "type": "Node", "declarator": "css4", "var_name": "css4"}, {"original_string": "private static final String CSS5_URL_STR = \"http://five.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS5_URL_STR = \"http://five.com/foo.js\"", "var_name": "CSS5_URL_STR"}, {"original_string": "private Node css5;", "modifier": "private", "type": "Node", "declarator": "css5", "var_name": "css5"}, {"original_string": "private static final String CSS6_URL_STR = \"http://six.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS6_URL_STR = \"http://six.com/foo.js\"", "var_name": "CSS6_URL_STR"}, {"original_string": "private Node css6;", "modifier": "private", "type": "Node", "declarator": "css6", "var_name": "css6"}, {"original_string": "private static final String CSS7_URL_STR = \"http://seven.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS7_URL_STR = \"http://seven.com/foo.js\"", "var_name": "CSS7_URL_STR"}, {"original_string": "private Node css7;", "modifier": "private", "type": "Node", "declarator": "css7", "var_name": "css7"}, {"original_string": "private static final String CSS8_URL_STR = \"http://eight.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS8_URL_STR = \"http://eight.com/foo.js\"", "var_name": "CSS8_URL_STR"}, {"original_string": "private Node css8;", "modifier": "private", "type": "Node", "declarator": "css8", "var_name": "css8"}, {"original_string": "private static final String CSS9_URL_STR = \"http://nine.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS9_URL_STR = \"http://nine.com/foo.js\"", "var_name": "CSS9_URL_STR"}, {"original_string": "private Node css9;", "modifier": "private", "type": "Node", "declarator": "css9", "var_name": "css9"}, {"original_string": "private static final String CSS10_URL_STR = \"http://ten.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS10_URL_STR = \"http://ten.com/foo.js\"", "var_name": "CSS10_URL_STR"}, {"original_string": "private Node css10;", "modifier": "private", "type": "Node", "declarator": "css10", "var_name": "css10"}, {"original_string": "private static final String CSS11_URL_STR = \"http://eleven.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS11_URL_STR = \"http://eleven.com/foo.js\"", "var_name": "CSS11_URL_STR"}, {"original_string": "private Node css11;", "modifier": "private", "type": "Node", "declarator": "css11", "var_name": "css11"}, {"original_string": "private static final String CSS12_URL_STR = \"http://twelve.com/foo.js\";", "modifier": "private static final", "type": "String", "declarator": "CSS12_URL_STR = \"http://twelve.com/foo.js\"", "var_name": "CSS12_URL_STR"}, {"original_string": "private Node css12;", "modifier": "private", "type": "Node", "declarator": "css12", "var_name": "css12"}, {"original_string": "private static final Uri CONCAT_BASE_URI = Uri.parse(\"http://test.com/proxy\");", "modifier": "private static final", "type": "Uri", "declarator": "CONCAT_BASE_URI = Uri.parse(\"http://test.com/proxy\")", "var_name": "CONCAT_BASE_URI"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/rewrite/ConcatVisitorTest.java"}, "test_case": {"identifier": "concatSingleJs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void concatSingleJs() throws Exception {\n    List<Node> nodes = seqNodes(js1);\n    Node parent = js1.getParentNode();\n\n    // Sanity check.\n    assertEquals(1, parent.getChildNodes().getLength());\n\n    SimpleConcatUriManager mgr = simpleMgr();\n    ConcatVisitor.Js rewriter = new ConcatVisitor.Js(config(null, false, true), mgr);\n    assertTrue(rewriter.revisit(gadget(), nodes));\n\n    // There should be one JS node child which is rewritten.\n    assertEquals(1, parent.getChildNodes().getLength());\n    Element concatNode = (Element)parent.getChildNodes().item(0);\n    Uri concatUri = Uri.parse(concatNode.getAttribute(\"src\"));\n    assertEquals(CONCAT_BASE_URI.getScheme(), concatUri.getScheme());\n    assertEquals(CONCAT_BASE_URI.getAuthority(), concatUri.getAuthority());\n    assertEquals(CONCAT_BASE_URI.getPath(), concatUri.getPath());\n    assertEquals(JS1_URL_STR, concatUri.getQueryParameter(\"1\"));\n    assertNull(concatUri.getQueryParameter(\"2\"));\n  }", "signature": "void concatSingleJs()", "full_signature": "@Test public void concatSingleJs()", "class_method_signature": "ConcatVisitorTest.concatSingleJs()", "testcase": true, "constructor": false, "invocations": ["seqNodes", "getParentNode", "assertEquals", "getLength", "getChildNodes", "simpleMgr", "config", "assertTrue", "revisit", "gadget", "assertEquals", "getLength", "getChildNodes", "item", "getChildNodes", "parse", "getAttribute", "assertEquals", "getScheme", "getScheme", "assertEquals", "getAuthority", "getAuthority", "assertEquals", "getPath", "getPath", "assertEquals", "getQueryParameter", "assertNull", "getQueryParameter"]}, "focal_class": {"identifier": "ConcatVisitor", "superclass": "", "interfaces": "implements DomWalker.Visitor", "fields": [{"original_string": "private final ConcatUriManager uriManager;", "modifier": "private final", "type": "ConcatUriManager", "declarator": "uriManager", "var_name": "uriManager"}, {"original_string": "private final ConcatUriManager.Type type;", "modifier": "private final", "type": "ConcatUriManager.Type", "declarator": "type", "var_name": "type"}, {"original_string": "private final ContentRewriterFeature.Config config;", "modifier": "private final", "type": "ContentRewriterFeature.Config", "declarator": "config", "var_name": "config"}, {"original_string": "private final boolean split;", "modifier": "private final", "type": "boolean", "declarator": "split", "var_name": "split"}, {"original_string": "private final boolean singleResourceConcat;", "modifier": "private final", "type": "boolean", "declarator": "singleResourceConcat", "var_name": "singleResourceConcat"}], "methods": [{"identifier": "ConcatVisitor", "parameters": "(ContentRewriterFeature.Config config,\n      ConcatUriManager uriManager, ConcatUriManager.Type type)", "modifiers": "private", "return": "", "signature": " ConcatVisitor(ContentRewriterFeature.Config config,\n      ConcatUriManager uriManager, ConcatUriManager.Type type)", "full_signature": "private  ConcatVisitor(ContentRewriterFeature.Config config,\n      ConcatUriManager uriManager, ConcatUriManager.Type type)", "class_method_signature": "ConcatVisitor.ConcatVisitor(ContentRewriterFeature.Config config,\n      ConcatUriManager uriManager, ConcatUriManager.Type type)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(Gadget gadget, Node node)", "modifiers": "public", "return": "VisitStatus", "signature": "VisitStatus visit(Gadget gadget, Node node)", "full_signature": "public VisitStatus visit(Gadget gadget, Node node)", "class_method_signature": "ConcatVisitor.visit(Gadget gadget, Node node)", "testcase": false, "constructor": false}, {"identifier": "revisit", "parameters": "(Gadget gadget, List<Node> nodes)", "modifiers": "public", "return": "boolean", "signature": "boolean revisit(Gadget gadget, List<Node> nodes)", "full_signature": "public boolean revisit(Gadget gadget, List<Node> nodes)", "class_method_signature": "ConcatVisitor.revisit(Gadget gadget, List<Node> nodes)", "testcase": false, "constructor": false}, {"identifier": "splitBatchOnMedia", "parameters": "(List<Element> elements, List<List<Element>> output)", "modifiers": "private", "return": "void", "signature": "void splitBatchOnMedia(List<Element> elements, List<List<Element>> output)", "full_signature": "private void splitBatchOnMedia(List<Element> elements, List<List<Element>> output)", "class_method_signature": "ConcatVisitor.splitBatchOnMedia(List<Element> elements, List<List<Element>> output)", "testcase": false, "constructor": false}, {"identifier": "isRewritableExternData", "parameters": "(Element elem)", "modifiers": "private", "return": "boolean", "signature": "boolean isRewritableExternData(Element elem)", "full_signature": "private boolean isRewritableExternData(Element elem)", "class_method_signature": "ConcatVisitor.isRewritableExternData(Element elem)", "testcase": false, "constructor": false}, {"identifier": "getSibling", "parameters": "(Element root, boolean isPrev)", "modifiers": "private", "return": "Element", "signature": "Element getSibling(Element root, boolean isPrev)", "full_signature": "private Element getSibling(Element root, boolean isPrev)", "class_method_signature": "ConcatVisitor.getSibling(Element root, boolean isPrev)", "testcase": false, "constructor": false}, {"identifier": "getNext", "parameters": "(Node node, boolean isPrev)", "modifiers": "private", "return": "Node", "signature": "Node getNext(Node node, boolean isPrev)", "full_signature": "private Node getNext(Node node, boolean isPrev)", "class_method_signature": "ConcatVisitor.getNext(Node node, boolean isPrev)", "testcase": false, "constructor": false}, {"identifier": "getUris", "parameters": "(ConcatUriManager.Type type, List<Element> elems, List<Uri> uris)", "modifiers": "private", "return": "boolean", "signature": "boolean getUris(ConcatUriManager.Type type, List<Element> elems, List<Uri> uris)", "full_signature": "private boolean getUris(ConcatUriManager.Type type, List<Element> elems, List<Uri> uris)", "class_method_signature": "ConcatVisitor.getUris(ConcatUriManager.Type type, List<Element> elems, List<Uri> uris)", "testcase": false, "constructor": false}, {"identifier": "areLinkNodesBucketable", "parameters": "(Element current, Element next)", "modifiers": "private", "return": "boolean", "signature": "boolean areLinkNodesBucketable(Element current, Element next)", "full_signature": "private boolean areLinkNodesBucketable(Element current, Element next)", "class_method_signature": "ConcatVisitor.areLinkNodesBucketable(Element current, Element next)", "testcase": false, "constructor": false}, {"identifier": "isConditionalComment", "parameters": "(Node node)", "modifiers": "private", "return": "boolean", "signature": "boolean isConditionalComment(Node node)", "full_signature": "private boolean isConditionalComment(Node node)", "class_method_signature": "ConcatVisitor.isConditionalComment(Node node)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/rewrite/ConcatVisitor.java"}, "focal_method": {"identifier": "revisit", "parameters": "(Gadget gadget, List<Node> nodes)", "modifiers": "public", "return": "boolean", "body": "public boolean revisit(Gadget gadget, List<Node> nodes) throws RewritingException {\n    // Collate Elements into Buckets.\n    List<List<Element>> concatBuckets = Lists.newLinkedList();\n    List<Element> curBucket = Lists.newLinkedList();\n    Iterator<Node> nodeIter = nodes.iterator();\n    Element cur = (Element)nodeIter.next();\n    curBucket.add(cur);\n    while (nodeIter.hasNext()) {\n      Element next = (Element)nodeIter.next();\n      if ((!split && cur != getSibling(next, true)) ||\n          (type == ConcatUriManager.Type.CSS && !areLinkNodesBucketable(cur, next))) {\n        // Break off current bucket and add to list of all.\n        concatBuckets.add(curBucket);\n        curBucket = Lists.newLinkedList();\n      }\n      curBucket.add(next);\n      cur = next;\n    }\n\n    // Add leftovers.\n    concatBuckets.add(curBucket);\n\n    // Split the existing buckets based on media types into concat batches.\n    List<List<Element>> concatBatches = Lists.newLinkedList();\n    Iterator<List<Element>> batchesIter = concatBuckets.iterator();\n    while (batchesIter.hasNext()) {\n      splitBatchOnMedia(batchesIter.next(), concatBatches);\n    }\n\n    // Prepare batches of Uris to send to generate concat Uris\n    List<List<Uri>> uriBatches = Lists.newLinkedList();\n    batchesIter = concatBatches.iterator();\n    while (batchesIter.hasNext()) {\n      List<Element> batch = batchesIter.next();\n      List<Uri> uris = Lists.newLinkedList();\n      if (batch.isEmpty() || !getUris(type, batch, uris)) {\n        batchesIter.remove();\n        continue;\n      }\n      uriBatches.add(uris);\n    }\n\n    if (uriBatches.isEmpty()) {\n      return false;\n    }\n\n    // Generate the ConcatUris, then correlate with original elements.\n    List<ConcatUriManager.ConcatData> concatUris =\n        uriManager.make(\n          ConcatUriManager.ConcatUri.fromList(gadget, uriBatches, type), !split);\n\n    Iterator<List<Element>> elemBatchIt = concatBatches.iterator();\n    Iterator<List<Uri>> uriBatchIt = uriBatches.iterator();\n    for (ConcatUriManager.ConcatData concatUri : concatUris) {\n      List<Element> sourceBatch = elemBatchIt.next();\n      List<Uri> sourceUris = uriBatchIt.next();\n\n      // Regardless what happens, inject as many copies of the first node\n      // as needed, with new (concat) URI, immediately ahead of the first elem.\n      Element firstElem = sourceBatch.get(0);\n      for (Uri uri : concatUri.getUris()) {\n        Element elemConcat = (Element)firstElem.cloneNode(true);\n        elemConcat.setAttribute(type.getSrcAttrib(), uri.toString());\n        firstElem.getParentNode().insertBefore(elemConcat, firstElem);\n      }\n\n      // Now for all Elements, either A) remove them or B) replace each\n      // with a <script> node with snippet of code configuring/evaluating\n      // the resultant inserted code. This is useful for split-JS in particular,\n      // and might also be used in spriting later.\n      Iterator<Uri> uriIt = sourceUris.iterator();\n      for (Element elem : sourceBatch) {\n        Uri elemOrigUri = uriIt.next();\n        String snippet = concatUri.getSnippet(elemOrigUri);\n        if (!Strings.isNullOrEmpty(snippet)) {\n          Node scriptNode = elem.getOwnerDocument().createElement(\"script\");\n          scriptNode.setTextContent(snippet);\n          elem.getParentNode().insertBefore(scriptNode, elem);\n        }\n        elem.getParentNode().removeChild(elem);\n      }\n    }\n\n    return true;\n  }", "signature": "boolean revisit(Gadget gadget, List<Node> nodes)", "full_signature": "public boolean revisit(Gadget gadget, List<Node> nodes)", "class_method_signature": "ConcatVisitor.revisit(Gadget gadget, List<Node> nodes)", "testcase": false, "constructor": false, "invocations": ["newLinkedList", "newLinkedList", "iterator", "next", "add", "hasNext", "next", "getSibling", "areLinkNodesBucketable", "add", "newLinkedList", "add", "add", "newLinkedList", "iterator", "hasNext", "splitBatchOnMedia", "next", "newLinkedList", "iterator", "hasNext", "next", "newLinkedList", "isEmpty", "getUris", "remove", "add", "isEmpty", "make", "fromList", "iterator", "iterator", "next", "next", "get", "getUris", "cloneNode", "setAttribute", "getSrcAttrib", "toString", "insertBefore", "getParentNode", "iterator", "next", "getSnippet", "isNullOrEmpty", "createElement", "getOwnerDocument", "setTextContent", "insertBefore", "getParentNode", "removeChild", "getParentNode"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}