{"test_class": {"identifier": "ContentTypesTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "java/common/src/test/java/org/apache/shindig/protocol/ContentTypesTest.java"}, "test_case": {"identifier": "testAllowXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAllowXml() throws Exception {\n    ContentTypes.checkContentTypes(ContentTypes.ALLOWED_XML_CONTENT_TYPES,\n        ContentTypes.OUTPUT_XML_CONTENT_TYPE);\n  }", "signature": "void testAllowXml()", "full_signature": "@Test public void testAllowXml()", "class_method_signature": "ContentTypesTest.testAllowXml()", "testcase": true, "constructor": false, "invocations": ["checkContentTypes"]}, "focal_class": {"identifier": "ContentTypes", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Set<String> ALLOWED_JSON_CONTENT_TYPES =\n      ImmutableSet.of(\"application/json\", \"text/x-json\", \"application/javascript\",\n          \"application/x-javascript\", \"text/javascript\", \"text/ecmascript\",\n          \"application/json-rpc\", \"application/jsonrequest\");", "modifier": "public static final", "type": "Set<String>", "declarator": "ALLOWED_JSON_CONTENT_TYPES =\n      ImmutableSet.of(\"application/json\", \"text/x-json\", \"application/javascript\",\n          \"application/x-javascript\", \"text/javascript\", \"text/ecmascript\",\n          \"application/json-rpc\", \"application/jsonrequest\")", "var_name": "ALLOWED_JSON_CONTENT_TYPES"}, {"original_string": "public static final Set<String> ALLOWED_XML_CONTENT_TYPES =\n      ImmutableSet.of(\"text/xml\", \"application/xml\");", "modifier": "public static final", "type": "Set<String>", "declarator": "ALLOWED_XML_CONTENT_TYPES =\n      ImmutableSet.of(\"text/xml\", \"application/xml\")", "var_name": "ALLOWED_XML_CONTENT_TYPES"}, {"original_string": "public static final Set<String> ALLOWED_ATOM_CONTENT_TYPES =\n      ImmutableSet.of(\"application/atom+xml\");", "modifier": "public static final", "type": "Set<String>", "declarator": "ALLOWED_ATOM_CONTENT_TYPES =\n      ImmutableSet.of(\"application/atom+xml\")", "var_name": "ALLOWED_ATOM_CONTENT_TYPES"}, {"original_string": "public static final Set<String> FORBIDDEN_CONTENT_TYPES =\n      ImmutableSet.of(\n          \"application/x-www-form-urlencoded\" // Not allowed because of OAuth body signing issues\n      );", "modifier": "public static final", "type": "Set<String>", "declarator": "FORBIDDEN_CONTENT_TYPES =\n      ImmutableSet.of(\n          \"application/x-www-form-urlencoded\" // Not allowed because of OAuth body signing issues\n      )", "var_name": "FORBIDDEN_CONTENT_TYPES"}, {"original_string": "public static final String MULTIPART_FORM_CONTENT_TYPE = \"multipart/form-data\";", "modifier": "public static final", "type": "String", "declarator": "MULTIPART_FORM_CONTENT_TYPE = \"multipart/form-data\"", "var_name": "MULTIPART_FORM_CONTENT_TYPE"}, {"original_string": "public static final Set<String> ALLOWED_MULTIPART_CONTENT_TYPES =\n      ImmutableSet.of(MULTIPART_FORM_CONTENT_TYPE);", "modifier": "public static final", "type": "Set<String>", "declarator": "ALLOWED_MULTIPART_CONTENT_TYPES =\n      ImmutableSet.of(MULTIPART_FORM_CONTENT_TYPE)", "var_name": "ALLOWED_MULTIPART_CONTENT_TYPES"}, {"original_string": "public static final String OUTPUT_JSON_CONTENT_TYPE = \"application/json\";", "modifier": "public static final", "type": "String", "declarator": "OUTPUT_JSON_CONTENT_TYPE = \"application/json\"", "var_name": "OUTPUT_JSON_CONTENT_TYPE"}, {"original_string": "public static final String OUTPUT_XML_CONTENT_TYPE = \"application/xml\";", "modifier": "public static final", "type": "String", "declarator": "OUTPUT_XML_CONTENT_TYPE = \"application/xml\"", "var_name": "OUTPUT_XML_CONTENT_TYPE"}, {"original_string": "public static final String OUTPUT_ATOM_CONTENT_TYPE = \"application/atom+xml\";", "modifier": "public static final", "type": "String", "declarator": "OUTPUT_ATOM_CONTENT_TYPE = \"application/atom+xml\"", "var_name": "OUTPUT_ATOM_CONTENT_TYPE"}], "methods": [{"identifier": "ContentTypes", "parameters": "()", "modifiers": "private", "return": "", "signature": " ContentTypes()", "full_signature": "private  ContentTypes()", "class_method_signature": "ContentTypes.ContentTypes()", "testcase": false, "constructor": true}, {"identifier": "extractMimePart", "parameters": "(String contentType)", "modifiers": "public static", "return": "String", "signature": "String extractMimePart(String contentType)", "full_signature": "public static String extractMimePart(String contentType)", "class_method_signature": "ContentTypes.extractMimePart(String contentType)", "testcase": false, "constructor": false}, {"identifier": "checkContentTypes", "parameters": "(Set<String> allowedContentTypes,\n      String contentType)", "modifiers": "public static", "return": "void", "signature": "void checkContentTypes(Set<String> allowedContentTypes,\n      String contentType)", "full_signature": "public static void checkContentTypes(Set<String> allowedContentTypes,\n      String contentType)", "class_method_signature": "ContentTypes.checkContentTypes(Set<String> allowedContentTypes,\n      String contentType)", "testcase": false, "constructor": false}], "file": "java/common/src/main/java/org/apache/shindig/protocol/ContentTypes.java"}, "focal_method": {"identifier": "checkContentTypes", "parameters": "(Set<String> allowedContentTypes,\n      String contentType)", "modifiers": "public static", "return": "void", "body": "public static void checkContentTypes(Set<String> allowedContentTypes,\n      String contentType) throws InvalidContentTypeException {\n\n    if (Strings.isNullOrEmpty(contentType)) {\n      throw new InvalidContentTypeException(\n          \"No Content-Type specified. One of \"\n              + Joiner.on(\", \").join(allowedContentTypes) + \" is required\");\n    }\n\n    contentType = ContentTypes.extractMimePart(contentType);\n\n    if (ContentTypes.FORBIDDEN_CONTENT_TYPES.contains(contentType)) {\n      throw new InvalidContentTypeException(\n          \"Cannot use disallowed Content-Type \" + contentType);\n    }\n    if (allowedContentTypes.contains(contentType)) {\n      return;\n    }\n    throw new InvalidContentTypeException(\n        \"Unsupported Content-Type \"\n            + contentType\n            + \". One of \"\n            + Joiner.on(\", \").join(allowedContentTypes)\n            + \" is required\");\n  }", "signature": "void checkContentTypes(Set<String> allowedContentTypes,\n      String contentType)", "full_signature": "public static void checkContentTypes(Set<String> allowedContentTypes,\n      String contentType)", "class_method_signature": "ContentTypes.checkContentTypes(Set<String> allowedContentTypes,\n      String contentType)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "join", "on", "extractMimePart", "contains", "contains", "join", "on"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}