{"test_class": {"identifier": "DefaultMessageBundleFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Uri BUNDLE_URI = Uri.parse(\"http://example.org/messagex.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "BUNDLE_URI = Uri.parse(\"http://example.org/messagex.xml\")", "var_name": "BUNDLE_URI"}, {"original_string": "private static final Uri LANG_BUNDLE_URI = Uri.parse(\"http://example.org/messagex.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "LANG_BUNDLE_URI = Uri.parse(\"http://example.org/messagex.xml\")", "var_name": "LANG_BUNDLE_URI"}, {"original_string": "private static final Uri COUNTRY_BUNDLE_URI = Uri.parse(\"http://example.org/messagex.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "COUNTRY_BUNDLE_URI = Uri.parse(\"http://example.org/messagex.xml\")", "var_name": "COUNTRY_BUNDLE_URI"}, {"original_string": "private static final Uri ALL_BUNDLE_URI = Uri.parse(\"http://example.org/messagex.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "ALL_BUNDLE_URI = Uri.parse(\"http://example.org/messagex.xml\")", "var_name": "ALL_BUNDLE_URI"}, {"original_string": "private static final Uri SPEC_URI = Uri.parse(\"http://example.org/gadget.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "SPEC_URI = Uri.parse(\"http://example.org/gadget.xml\")", "var_name": "SPEC_URI"}, {"original_string": "private static final String MSG_0_NAME = \"messageZero\";", "modifier": "private static final", "type": "String", "declarator": "MSG_0_NAME = \"messageZero\"", "var_name": "MSG_0_NAME"}, {"original_string": "private static final String MSG_1_NAME = \"message1\";", "modifier": "private static final", "type": "String", "declarator": "MSG_1_NAME = \"message1\"", "var_name": "MSG_1_NAME"}, {"original_string": "private static final String MSG_2_NAME = \"message 2\";", "modifier": "private static final", "type": "String", "declarator": "MSG_2_NAME = \"message 2\"", "var_name": "MSG_2_NAME"}, {"original_string": "private static final String MSG_3_NAME = \"message 3\";", "modifier": "private static final", "type": "String", "declarator": "MSG_3_NAME = \"message 3\"", "var_name": "MSG_3_NAME"}, {"original_string": "private static final String MSG_0_VALUE = \"Message 0 VALUE\";", "modifier": "private static final", "type": "String", "declarator": "MSG_0_VALUE = \"Message 0 VALUE\"", "var_name": "MSG_0_VALUE"}, {"original_string": "private static final String MSG_0_LANG_VALUE = \"Message 0 language VALUE\";", "modifier": "private static final", "type": "String", "declarator": "MSG_0_LANG_VALUE = \"Message 0 language VALUE\"", "var_name": "MSG_0_LANG_VALUE"}, {"original_string": "private static final String MSG_0_COUNTRY_VALUE = \"Message 0 country VALUE\";", "modifier": "private static final", "type": "String", "declarator": "MSG_0_COUNTRY_VALUE = \"Message 0 country VALUE\"", "var_name": "MSG_0_COUNTRY_VALUE"}, {"original_string": "private static final String MSG_0_VIEW_VALUE = \"Message 0 view VALUE\";", "modifier": "private static final", "type": "String", "declarator": "MSG_0_VIEW_VALUE = \"Message 0 view VALUE\"", "var_name": "MSG_0_VIEW_VALUE"}, {"original_string": "private static final String MSG_0_ALL_VALUE = \"Message 0 a VALUE\";", "modifier": "private static final", "type": "String", "declarator": "MSG_0_ALL_VALUE = \"Message 0 a VALUE\"", "var_name": "MSG_0_ALL_VALUE"}, {"original_string": "private static final String MSG_1_VALUE = \"msg one val\";", "modifier": "private static final", "type": "String", "declarator": "MSG_1_VALUE = \"msg one val\"", "var_name": "MSG_1_VALUE"}, {"original_string": "private static final String MSG_2_VALUE = \"message two val.\";", "modifier": "private static final", "type": "String", "declarator": "MSG_2_VALUE = \"message two val.\"", "var_name": "MSG_2_VALUE"}, {"original_string": "private static final String MSG_2_VIEW_VALUE = \"message two view val.\";", "modifier": "private static final", "type": "String", "declarator": "MSG_2_VIEW_VALUE = \"message two view val.\"", "var_name": "MSG_2_VIEW_VALUE"}, {"original_string": "private static final String MSG_3_VALUE = \"message three value\";", "modifier": "private static final", "type": "String", "declarator": "MSG_3_VALUE = \"message three value\"", "var_name": "MSG_3_VALUE"}, {"original_string": "private static final Locale COUNTRY_LOCALE = new Locale(\"all\", \"US\");", "modifier": "private static final", "type": "Locale", "declarator": "COUNTRY_LOCALE = new Locale(\"all\", \"US\")", "var_name": "COUNTRY_LOCALE"}, {"original_string": "private static final Locale LANG_LOCALE = new Locale(\"en\", \"ALL\");", "modifier": "private static final", "type": "Locale", "declarator": "LANG_LOCALE = new Locale(\"en\", \"ALL\")", "var_name": "LANG_LOCALE"}, {"original_string": "private static final Locale LOCALE = new Locale(\"en\", \"US\");", "modifier": "private static final", "type": "Locale", "declarator": "LOCALE = new Locale(\"en\", \"US\")", "var_name": "LOCALE"}, {"original_string": "private static final String BASIC_BUNDLE\n      = \"<messagebundle>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_1_NAME + \"'>\" + MSG_1_VALUE + \"</msg>\" +\n        \"</messagebundle>\";", "modifier": "private static final", "type": "String", "declarator": "BASIC_BUNDLE\n      = \"<messagebundle>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_1_NAME + \"'>\" + MSG_1_VALUE + \"</msg>\" +\n        \"</messagebundle>\"", "var_name": "BASIC_BUNDLE"}, {"original_string": "private static final String LANG_BUNDLE\n      = \"<messagebundle>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_LANG_VALUE + \"</msg>\" +\n        \"  <msg name='lang'>true</msg>\" +\n        \"</messagebundle>\";", "modifier": "private static final", "type": "String", "declarator": "LANG_BUNDLE\n      = \"<messagebundle>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_LANG_VALUE + \"</msg>\" +\n        \"  <msg name='lang'>true</msg>\" +\n        \"</messagebundle>\"", "var_name": "LANG_BUNDLE"}, {"original_string": "private static final String COUNTRY_BUNDLE\n      = \"<messagebundle>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_COUNTRY_VALUE + \"</msg>\" +\n        \"  <msg name='country'>true</msg>\" +\n        \"</messagebundle>\";", "modifier": "private static final", "type": "String", "declarator": "COUNTRY_BUNDLE\n      = \"<messagebundle>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_COUNTRY_VALUE + \"</msg>\" +\n        \"  <msg name='country'>true</msg>\" +\n        \"</messagebundle>\"", "var_name": "COUNTRY_BUNDLE"}, {"original_string": "private static final String ALL_ALL_BUNDLE\n      = \"<messagebundle>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_ALL_VALUE + \"</msg>\" +\n        \"  <msg name='all'>true</msg>\" +\n        \"</messagebundle>\";", "modifier": "private static final", "type": "String", "declarator": "ALL_ALL_BUNDLE\n      = \"<messagebundle>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_ALL_VALUE + \"</msg>\" +\n        \"  <msg name='all'>true</msg>\" +\n        \"</messagebundle>\"", "var_name": "ALL_ALL_BUNDLE"}, {"original_string": "private static final String BASIC_SPEC\n      = \"<Module>\" +\n        \"<ModulePrefs title='foo'>\" +\n        \" <Locale>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_ALL_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale country='\" + LOCALE.getCountry() + \"'>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_COUNTRY_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_3_NAME + \"'>\" + MSG_3_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale country='\" + LOCALE.getCountry() + \"' views='view1,view2'>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_VIEW_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_3_NAME + \"'>\" + MSG_3_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale views='view1'>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_ALL_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_2_NAME + \"'>\" + MSG_2_VIEW_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale lang='\" + LOCALE.getLanguage() + \"'>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_LANG_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_1_NAME + \"'>\" + MSG_1_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_2_NAME + \"'>\" + MSG_2_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale lang='\" + LOCALE.getLanguage() + \"' country='\" + LOCALE.getCountry() + \"' \" +\n        \"  messages='\" + BUNDLE_URI + \"'/>\" +\n        \"</ModulePrefs>\" +\n        \"<Content type='html'/>\" +\n        \"</Module>\";", "modifier": "private static final", "type": "String", "declarator": "BASIC_SPEC\n      = \"<Module>\" +\n        \"<ModulePrefs title='foo'>\" +\n        \" <Locale>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_ALL_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale country='\" + LOCALE.getCountry() + \"'>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_COUNTRY_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_3_NAME + \"'>\" + MSG_3_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale country='\" + LOCALE.getCountry() + \"' views='view1,view2'>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_VIEW_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_3_NAME + \"'>\" + MSG_3_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale views='view1'>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_ALL_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_2_NAME + \"'>\" + MSG_2_VIEW_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale lang='\" + LOCALE.getLanguage() + \"'>\" +\n        \"  <msg name='\" + MSG_0_NAME + \"'>\" + MSG_0_LANG_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_1_NAME + \"'>\" + MSG_1_VALUE + \"</msg>\" +\n        \"  <msg name='\" + MSG_2_NAME + \"'>\" + MSG_2_VALUE + \"</msg>\" +\n        \" </Locale>\" +\n        \" <Locale lang='\" + LOCALE.getLanguage() + \"' country='\" + LOCALE.getCountry() + \"' \" +\n        \"  messages='\" + BUNDLE_URI + \"'/>\" +\n        \"</ModulePrefs>\" +\n        \"<Content type='html'/>\" +\n        \"</Module>\"", "var_name": "BASIC_SPEC"}, {"original_string": "private static final String ALL_EXTERNAL_SPEC\n      = \"<Module>\" +\n        \"<ModulePrefs title='foo'>\" +\n        \" <Locale messages='\" + BUNDLE_URI + \"'/>\" +\n        \" <Locale country='\" + LOCALE.getCountry() + '\\'' +\n        \"  messages='\" + COUNTRY_BUNDLE_URI + \"'/>\" +\n        \" <Locale lang='\" + LOCALE.getLanguage() + \"' messages='\" + LANG_BUNDLE_URI + \"'/>\" +\n        \" <Locale lang='\" + LOCALE.getLanguage() + \"' country='\" + LOCALE.getCountry() + \"' \" +\n        \"  messages='\" + ALL_BUNDLE_URI + \"'/>\" +\n        \"</ModulePrefs>\" +\n        \"<Content type='html'/>\" +\n        \"</Module>\";", "modifier": "private static final", "type": "String", "declarator": "ALL_EXTERNAL_SPEC\n      = \"<Module>\" +\n        \"<ModulePrefs title='foo'>\" +\n        \" <Locale messages='\" + BUNDLE_URI + \"'/>\" +\n        \" <Locale country='\" + LOCALE.getCountry() + '\\'' +\n        \"  messages='\" + COUNTRY_BUNDLE_URI + \"'/>\" +\n        \" <Locale lang='\" + LOCALE.getLanguage() + \"' messages='\" + LANG_BUNDLE_URI + \"'/>\" +\n        \" <Locale lang='\" + LOCALE.getLanguage() + \"' country='\" + LOCALE.getCountry() + \"' \" +\n        \"  messages='\" + ALL_BUNDLE_URI + \"'/>\" +\n        \"</ModulePrefs>\" +\n        \"<Content type='html'/>\" +\n        \"</Module>\"", "var_name": "ALL_EXTERNAL_SPEC"}, {"original_string": "private static final int MAX_AGE = 10000;", "modifier": "private static final", "type": "int", "declarator": "MAX_AGE = 10000", "var_name": "MAX_AGE"}, {"original_string": "private final RequestPipeline pipeline = EasyMock.createNiceMock(RequestPipeline.class);", "modifier": "private final", "type": "RequestPipeline", "declarator": "pipeline = EasyMock.createNiceMock(RequestPipeline.class)", "var_name": "pipeline"}, {"original_string": "private final CacheProvider cacheProvider = new LruCacheProvider(10);", "modifier": "private final", "type": "CacheProvider", "declarator": "cacheProvider = new LruCacheProvider(10)", "var_name": "cacheProvider"}, {"original_string": "private final Cache<String, MessageBundle> cache\n      = cacheProvider.createCache(DefaultMessageBundleFactory.CACHE_NAME);", "modifier": "private final", "type": "Cache<String, MessageBundle>", "declarator": "cache\n      = cacheProvider.createCache(DefaultMessageBundleFactory.CACHE_NAME)", "var_name": "cache"}, {"original_string": "private final DefaultMessageBundleFactory bundleFactory\n      = new DefaultMessageBundleFactory(new ImmediateExecutorService(), pipeline, cacheProvider, MAX_AGE);", "modifier": "private final", "type": "DefaultMessageBundleFactory", "declarator": "bundleFactory\n      = new DefaultMessageBundleFactory(new ImmediateExecutorService(), pipeline, cacheProvider, MAX_AGE)", "var_name": "bundleFactory"}, {"original_string": "private final GadgetSpec gadgetSpec;", "modifier": "private final", "type": "GadgetSpec", "declarator": "gadgetSpec", "var_name": "gadgetSpec"}, {"original_string": "private final GadgetSpec externalSpec;", "modifier": "private final", "type": "GadgetSpec", "declarator": "externalSpec", "var_name": "externalSpec"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/DefaultMessageBundleFactoryTest.java"}, "test_case": {"identifier": "getExactBundleAllExternal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getExactBundleAllExternal() throws Exception {\n    HttpResponse response = new HttpResponse(BASIC_BUNDLE);\n    expect(pipeline.execute(isA(HttpRequest.class))).andReturn(response);\n    HttpResponse langResponse = new HttpResponse(LANG_BUNDLE);\n    expect(pipeline.execute(isA(HttpRequest.class))).andReturn(langResponse);\n    HttpResponse countryResponse = new HttpResponse(COUNTRY_BUNDLE);\n    expect(pipeline.execute(isA(HttpRequest.class))).andReturn(countryResponse);\n    HttpResponse allAllResponse = new HttpResponse(ALL_ALL_BUNDLE);\n    expect(pipeline.execute(isA(HttpRequest.class))).andReturn(allAllResponse);\n\n    replay(pipeline);\n    MessageBundle bundle = bundleFactory.getBundle(externalSpec, LOCALE, true, ContainerConfig.DEFAULT_CONTAINER, null);\n    verify(pipeline);\n\n    assertEquals(\"true\", bundle.getMessages().get(\"lang\"));\n    assertEquals(\"true\", bundle.getMessages().get(\"country\"));\n    assertEquals(\"true\", bundle.getMessages().get(\"all\"));\n    assertEquals(MSG_0_VALUE, bundle.getMessages().get(MSG_0_NAME));\n  }", "signature": "void getExactBundleAllExternal()", "full_signature": "@Test public void getExactBundleAllExternal()", "class_method_signature": "DefaultMessageBundleFactoryTest.getExactBundleAllExternal()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "execute", "isA", "andReturn", "expect", "execute", "isA", "andReturn", "expect", "execute", "isA", "andReturn", "expect", "execute", "isA", "replay", "getBundle", "verify", "assertEquals", "get", "getMessages", "assertEquals", "get", "getMessages", "assertEquals", "get", "getMessages", "assertEquals", "get", "getMessages"]}, "focal_class": {"identifier": "DefaultMessageBundleFactory", "superclass": "extends AbstractSpecFactory<MessageBundle>", "interfaces": "implements MessageBundleFactory", "fields": [{"original_string": "private static final Locale ALL_ALL = new Locale(\"all\", \"ALL\");", "modifier": "private static final", "type": "Locale", "declarator": "ALL_ALL = new Locale(\"all\", \"ALL\")", "var_name": "ALL_ALL"}, {"original_string": "public static final String CACHE_NAME = \"messageBundles\";", "modifier": "public static final", "type": "String", "declarator": "CACHE_NAME = \"messageBundles\"", "var_name": "CACHE_NAME"}], "methods": [{"identifier": "DefaultMessageBundleFactory", "parameters": "(ExecutorService executor,\n                                     RequestPipeline pipeline,\n                                     CacheProvider cacheProvider,\n                                     @Named(\"shindig.cache.xml.refreshInterval\") long refresh)", "modifiers": "@Inject public", "return": "", "signature": " DefaultMessageBundleFactory(ExecutorService executor,\n                                     RequestPipeline pipeline,\n                                     CacheProvider cacheProvider,\n                                     @Named(\"shindig.cache.xml.refreshInterval\") long refresh)", "full_signature": "@Inject public  DefaultMessageBundleFactory(ExecutorService executor,\n                                     RequestPipeline pipeline,\n                                     CacheProvider cacheProvider,\n                                     @Named(\"shindig.cache.xml.refreshInterval\") long refresh)", "class_method_signature": "DefaultMessageBundleFactory.DefaultMessageBundleFactory(ExecutorService executor,\n                                     RequestPipeline pipeline,\n                                     CacheProvider cacheProvider,\n                                     @Named(\"shindig.cache.xml.refreshInterval\") long refresh)", "testcase": false, "constructor": true}, {"identifier": "makeCache", "parameters": "(CacheProvider cacheProvider)", "modifiers": "private static", "return": "Cache<String, Object>", "signature": "Cache<String, Object> makeCache(CacheProvider cacheProvider)", "full_signature": "private static Cache<String, Object> makeCache(CacheProvider cacheProvider)", "class_method_signature": "DefaultMessageBundleFactory.makeCache(CacheProvider cacheProvider)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String content, Query query)", "modifiers": "@Override protected", "return": "MessageBundle", "signature": "MessageBundle parse(String content, Query query)", "full_signature": "@Override protected MessageBundle parse(String content, Query query)", "class_method_signature": "DefaultMessageBundleFactory.parse(String content, Query query)", "testcase": false, "constructor": false}, {"identifier": "getBundle", "parameters": "(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "modifiers": "public", "return": "MessageBundle", "signature": "MessageBundle getBundle(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "full_signature": "public MessageBundle getBundle(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "class_method_signature": "DefaultMessageBundleFactory.getBundle(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "testcase": false, "constructor": false}, {"identifier": "getBundleFor", "parameters": "(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "modifiers": "private", "return": "MessageBundle", "signature": "MessageBundle getBundleFor(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "full_signature": "private MessageBundle getBundleFor(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "class_method_signature": "DefaultMessageBundleFactory.getBundleFor(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/DefaultMessageBundleFactory.java"}, "focal_method": {"identifier": "getBundle", "parameters": "(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "modifiers": "public", "return": "MessageBundle", "body": "public MessageBundle getBundle(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)\n      throws GadgetException {\n    MessageBundle exact = getBundleFor(spec, locale, ignoreCache, container, view);\n\n    // We don't want to fetch the same bundle multiple times, so we verify that the exact match\n    // has not already been fetched.\n    MessageBundle lang, country, all;\n\n    boolean isAllLanguage = locale.getLanguage().equalsIgnoreCase(\"all\");\n    boolean isAllCountry = locale.getCountry().equalsIgnoreCase(\"ALL\");\n\n    if (isAllCountry) {\n      lang = MessageBundle.EMPTY;\n    } else {\n      lang = getBundleFor(spec, new Locale(locale.getLanguage(), \"ALL\"), ignoreCache, container, view);\n    }\n\n    if (isAllLanguage) {\n      country = MessageBundle.EMPTY;\n    } else {\n      country = getBundleFor(spec, new Locale(\"all\", locale.getCountry()), ignoreCache, container, view);\n    }\n\n    if (isAllCountry || isAllLanguage) {\n      // If either of these is true, we already picked up both anyway.\n      all = MessageBundle.EMPTY;\n    } else {\n      all = getBundleFor(spec, ALL_ALL, ignoreCache, container, view);\n    }\n\n    return new MessageBundle(all, country, lang, exact);\n  }", "signature": "MessageBundle getBundle(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "full_signature": "public MessageBundle getBundle(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "class_method_signature": "DefaultMessageBundleFactory.getBundle(GadgetSpec spec, Locale locale, boolean ignoreCache, String container, String view)", "testcase": false, "constructor": false, "invocations": ["getBundleFor", "equalsIgnoreCase", "getLanguage", "equalsIgnoreCase", "getCountry", "getBundleFor", "getLanguage", "getBundleFor", "getCountry", "getBundleFor"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}