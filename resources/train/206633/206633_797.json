{"test_class": {"identifier": "OAuthRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OAuthFetcherConfig fetcherConfig;", "modifier": "private", "type": "OAuthFetcherConfig", "declarator": "fetcherConfig", "var_name": "fetcherConfig"}, {"original_string": "private FakeOAuthServiceProvider serviceProvider;", "modifier": "private", "type": "FakeOAuthServiceProvider", "declarator": "serviceProvider", "var_name": "serviceProvider"}, {"original_string": "private OAuthCallbackGenerator callbackGenerator;", "modifier": "private", "type": "OAuthCallbackGenerator", "declarator": "callbackGenerator", "var_name": "callbackGenerator"}, {"original_string": "private BasicOAuthStore base;", "modifier": "private", "type": "BasicOAuthStore", "declarator": "base", "var_name": "base"}, {"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "protected final List<LogRecord> logRecords = Lists.newArrayList();", "modifier": "protected final", "type": "List<LogRecord>", "declarator": "logRecords = Lists.newArrayList()", "var_name": "logRecords"}, {"original_string": "private final FakeTimeSource clock = new FakeTimeSource();", "modifier": "private final", "type": "FakeTimeSource", "declarator": "clock = new FakeTimeSource()", "var_name": "clock"}, {"original_string": "public static final String GADGET_URL = \"http://www.example.com/gadget.xml\";", "modifier": "public static final", "type": "String", "declarator": "GADGET_URL = \"http://www.example.com/gadget.xml\"", "var_name": "GADGET_URL"}, {"original_string": "public static final String GADGET_URL_NO_KEY = \"http://www.example.com/nokey.xml\";", "modifier": "public static final", "type": "String", "declarator": "GADGET_URL_NO_KEY = \"http://www.example.com/nokey.xml\"", "var_name": "GADGET_URL_NO_KEY"}, {"original_string": "public static final String GADGET_URL_HEADER = \"http://www.example.com/header.xml\";", "modifier": "public static final", "type": "String", "declarator": "GADGET_URL_HEADER = \"http://www.example.com/header.xml\"", "var_name": "GADGET_URL_HEADER"}, {"original_string": "public static final String GADGET_URL_BODY = \"http://www.example.com/body.xml\";", "modifier": "public static final", "type": "String", "declarator": "GADGET_URL_BODY = \"http://www.example.com/body.xml\"", "var_name": "GADGET_URL_BODY"}, {"original_string": "public static final String GADGET_URL_BAD_OAUTH_URL = \"http://www.example.com/badoauthurl.xml\";", "modifier": "public static final", "type": "String", "declarator": "GADGET_URL_BAD_OAUTH_URL = \"http://www.example.com/badoauthurl.xml\"", "var_name": "GADGET_URL_BAD_OAUTH_URL"}, {"original_string": "public static final String GADGET_URL_APPROVAL_PARAMS =\n      \"http://www.example.com/approvalparams.xml\";", "modifier": "public static final", "type": "String", "declarator": "GADGET_URL_APPROVAL_PARAMS =\n      \"http://www.example.com/approvalparams.xml\"", "var_name": "GADGET_URL_APPROVAL_PARAMS"}, {"original_string": "public static final String GADGET_MAKE_REQUEST_URL =\n      \"http://127.0.0.1/gadgets/makeRequest?params=foo\";", "modifier": "public static final", "type": "String", "declarator": "GADGET_MAKE_REQUEST_URL =\n      \"http://127.0.0.1/gadgets/makeRequest?params=foo\"", "var_name": "GADGET_MAKE_REQUEST_URL"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/oauth/OAuthRequestTest.java"}, "test_case": {"identifier": "testGetTamperedFormContent", "parameters": "()", "modifiers": "@Test(expected=RuntimeException.class) public", "return": "void", "body": "@Test(expected=RuntimeException.class)\n  public void testGetTamperedFormContent() throws Exception {\n    MakeRequestClient client = makeSignedFetchClient(\"o\", \"v\", \"http://www.example.com/app\");\n    // Tamper with the body before it hits the service provider\n    client.setNextFetcher(new HttpFetcher() {\n      public HttpResponse fetch(HttpRequest request) throws GadgetException {\n        request.setPostBody(\"foo=quux\".getBytes());\n        return serviceProvider.fetch(request);\n      }\n    });\n    client.sendGetWithBody(FakeOAuthServiceProvider.RESOURCE_URL,\n        OAuth.FORM_ENCODED, \"foo=bar\".getBytes());\n    fail(\"Should have thrown with oauth signature mismatch\");\n  }", "signature": "void testGetTamperedFormContent()", "full_signature": "@Test(expected=RuntimeException.class) public void testGetTamperedFormContent()", "class_method_signature": "OAuthRequestTest.testGetTamperedFormContent()", "testcase": true, "constructor": false, "invocations": ["makeSignedFetchClient", "setNextFetcher", "setPostBody", "getBytes", "fetch", "sendGetWithBody", "getBytes", "fail"]}, "focal_class": {"identifier": "OAuthRequest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String classname = OAuthRequest.class.getName();", "modifier": "private static final", "type": "String", "declarator": "classname = OAuthRequest.class.getName()", "var_name": "classname"}, {"original_string": "private static final int MAX_ATTEMPTS = 2;", "modifier": "private static final", "type": "int", "declarator": "MAX_ATTEMPTS = 2", "var_name": "MAX_ATTEMPTS"}, {"original_string": "public static final String XOAUTH_APP_URL = \"xoauth_app_url\";", "modifier": "public static final", "type": "String", "declarator": "XOAUTH_APP_URL = \"xoauth_app_url\"", "var_name": "XOAUTH_APP_URL"}, {"original_string": "protected static final String OPENSOCIAL_OWNERID = \"opensocial_owner_id\";", "modifier": "protected static final", "type": "String", "declarator": "OPENSOCIAL_OWNERID = \"opensocial_owner_id\"", "var_name": "OPENSOCIAL_OWNERID"}, {"original_string": "protected static final String OPENSOCIAL_VIEWERID = \"opensocial_viewer_id\";", "modifier": "protected static final", "type": "String", "declarator": "OPENSOCIAL_VIEWERID = \"opensocial_viewer_id\"", "var_name": "OPENSOCIAL_VIEWERID"}, {"original_string": "protected static final String OPENSOCIAL_APPID = \"opensocial_app_id\";", "modifier": "protected static final", "type": "String", "declarator": "OPENSOCIAL_APPID = \"opensocial_app_id\"", "var_name": "OPENSOCIAL_APPID"}, {"original_string": "protected static final String OPENSOCIAL_APPURL = \"opensocial_app_url\";", "modifier": "protected static final", "type": "String", "declarator": "OPENSOCIAL_APPURL = \"opensocial_app_url\"", "var_name": "OPENSOCIAL_APPURL"}, {"original_string": "protected static final String OPENSOCIAL_PROXIED_CONTENT = \"opensocial_proxied_content\";", "modifier": "protected static final", "type": "String", "declarator": "OPENSOCIAL_PROXIED_CONTENT = \"opensocial_proxied_content\"", "var_name": "OPENSOCIAL_PROXIED_CONTENT"}, {"original_string": "protected static final String XOAUTH_PUBLIC_KEY_OLD = \"xoauth_signature_publickey\";", "modifier": "protected static final", "type": "String", "declarator": "XOAUTH_PUBLIC_KEY_OLD = \"xoauth_signature_publickey\"", "var_name": "XOAUTH_PUBLIC_KEY_OLD"}, {"original_string": "protected static final String XOAUTH_PUBLIC_KEY_NEW = \"xoauth_public_key\";", "modifier": "protected static final", "type": "String", "declarator": "XOAUTH_PUBLIC_KEY_NEW = \"xoauth_public_key\"", "var_name": "XOAUTH_PUBLIC_KEY_NEW"}, {"original_string": "protected static final Pattern ALLOWED_PARAM_NAME = Pattern.compile(\"[-:\\\\w~!@$*()_\\\\[\\\\]:,./ ]+\");", "modifier": "protected static final", "type": "Pattern", "declarator": "ALLOWED_PARAM_NAME = Pattern.compile(\"[-:\\\\w~!@$*()_\\\\[\\\\]:,./ ]+\")", "var_name": "ALLOWED_PARAM_NAME"}, {"original_string": "private static final long ACCESS_TOKEN_EXPIRE_UNKNOWN = 0;", "modifier": "private static final", "type": "long", "declarator": "ACCESS_TOKEN_EXPIRE_UNKNOWN = 0", "var_name": "ACCESS_TOKEN_EXPIRE_UNKNOWN"}, {"original_string": "private static final long ACCESS_TOKEN_FORCE_EXPIRE = -1;", "modifier": "private static final", "type": "long", "declarator": "ACCESS_TOKEN_FORCE_EXPIRE = -1", "var_name": "ACCESS_TOKEN_FORCE_EXPIRE"}, {"original_string": "protected final OAuthFetcherConfig fetcherConfig;", "modifier": "protected final", "type": "OAuthFetcherConfig", "declarator": "fetcherConfig", "var_name": "fetcherConfig"}, {"original_string": "private final HttpFetcher fetcher;", "modifier": "private final", "type": "HttpFetcher", "declarator": "fetcher", "var_name": "fetcher"}, {"original_string": "private final List<Parameter> trustedParams;", "modifier": "private final", "type": "List<Parameter>", "declarator": "trustedParams", "var_name": "trustedParams"}, {"original_string": "protected OAuthClientState clientState;", "modifier": "protected", "type": "OAuthClientState", "declarator": "clientState", "var_name": "clientState"}, {"original_string": "protected OAuthResponseParams responseParams;", "modifier": "protected", "type": "OAuthResponseParams", "declarator": "responseParams", "var_name": "responseParams"}, {"original_string": "protected AccessorInfo accessorInfo;", "modifier": "protected", "type": "AccessorInfo", "declarator": "accessorInfo", "var_name": "accessorInfo"}, {"original_string": "protected HttpRequest realRequest;", "modifier": "protected", "type": "HttpRequest", "declarator": "realRequest", "var_name": "realRequest"}, {"original_string": "protected Map<String, String> accessTokenData;", "modifier": "protected", "type": "Map<String, String>", "declarator": "accessTokenData", "var_name": "accessTokenData"}], "methods": [{"identifier": "OAuthRequest", "parameters": "(OAuthFetcherConfig fetcherConfig, HttpFetcher fetcher)", "modifiers": "public", "return": "", "signature": " OAuthRequest(OAuthFetcherConfig fetcherConfig, HttpFetcher fetcher)", "full_signature": "public  OAuthRequest(OAuthFetcherConfig fetcherConfig, HttpFetcher fetcher)", "class_method_signature": "OAuthRequest.OAuthRequest(OAuthFetcherConfig fetcherConfig, HttpFetcher fetcher)", "testcase": false, "constructor": true}, {"identifier": "OAuthRequest", "parameters": "(OAuthFetcherConfig fetcherConfig, HttpFetcher fetcher,\n      List<Parameter> trustedParams)", "modifiers": "public", "return": "", "signature": " OAuthRequest(OAuthFetcherConfig fetcherConfig, HttpFetcher fetcher,\n      List<Parameter> trustedParams)", "full_signature": "public  OAuthRequest(OAuthFetcherConfig fetcherConfig, HttpFetcher fetcher,\n      List<Parameter> trustedParams)", "class_method_signature": "OAuthRequest.OAuthRequest(OAuthFetcherConfig fetcherConfig, HttpFetcher fetcher,\n      List<Parameter> trustedParams)", "testcase": false, "constructor": true}, {"identifier": "fetch", "parameters": "(HttpRequest request)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse fetch(HttpRequest request)", "full_signature": "public HttpResponse fetch(HttpRequest request)", "class_method_signature": "OAuthRequest.fetch(HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "fetchNoThrow", "parameters": "()", "modifiers": "private", "return": "HttpResponse", "signature": "HttpResponse fetchNoThrow()", "full_signature": "private HttpResponse fetchNoThrow()", "class_method_signature": "OAuthRequest.fetchNoThrow()", "testcase": false, "constructor": false}, {"identifier": "fetchWithRetry", "parameters": "()", "modifiers": "private", "return": "HttpResponseBuilder", "signature": "HttpResponseBuilder fetchWithRetry()", "full_signature": "private HttpResponseBuilder fetchWithRetry()", "class_method_signature": "OAuthRequest.fetchWithRetry()", "testcase": false, "constructor": false}, {"identifier": "handleProtocolException", "parameters": "(OAuthProtocolException pe, int attempts)", "modifiers": "private", "return": "boolean", "signature": "boolean handleProtocolException(OAuthProtocolException pe, int attempts)", "full_signature": "private boolean handleProtocolException(OAuthProtocolException pe, int attempts)", "class_method_signature": "OAuthRequest.handleProtocolException(OAuthProtocolException pe, int attempts)", "testcase": false, "constructor": false}, {"identifier": "attemptFetch", "parameters": "()", "modifiers": "private", "return": "HttpResponseBuilder", "signature": "HttpResponseBuilder attemptFetch()", "full_signature": "private HttpResponseBuilder attemptFetch()", "class_method_signature": "OAuthRequest.attemptFetch()", "testcase": false, "constructor": false}, {"identifier": "needApproval", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean needApproval()", "full_signature": "private boolean needApproval()", "class_method_signature": "OAuthRequest.needApproval()", "testcase": false, "constructor": false}, {"identifier": "checkCanApprove", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkCanApprove()", "full_signature": "private void checkCanApprove()", "class_method_signature": "OAuthRequest.checkCanApprove()", "testcase": false, "constructor": false}, {"identifier": "fetchRequestToken", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fetchRequestToken()", "full_signature": "private void fetchRequestToken()", "class_method_signature": "OAuthRequest.fetchRequestToken()", "testcase": false, "constructor": false}, {"identifier": "createRequestTokenRequest", "parameters": "(OAuthAccessor accessor)", "modifiers": "private", "return": "HttpRequest", "signature": "HttpRequest createRequestTokenRequest(OAuthAccessor accessor)", "full_signature": "private HttpRequest createRequestTokenRequest(OAuthAccessor accessor)", "class_method_signature": "OAuthRequest.createRequestTokenRequest(OAuthAccessor accessor)", "testcase": false, "constructor": false}, {"identifier": "addCallback", "parameters": "(List<Parameter> requestTokenParams)", "modifiers": "private", "return": "void", "signature": "void addCallback(List<Parameter> requestTokenParams)", "full_signature": "private void addCallback(List<Parameter> requestTokenParams)", "class_method_signature": "OAuthRequest.addCallback(List<Parameter> requestTokenParams)", "testcase": false, "constructor": false}, {"identifier": "sanitize", "parameters": "(List<Parameter> params)", "modifiers": "private", "return": "List<Parameter>", "signature": "List<Parameter> sanitize(List<Parameter> params)", "full_signature": "private List<Parameter> sanitize(List<Parameter> params)", "class_method_signature": "OAuthRequest.sanitize(List<Parameter> params)", "testcase": false, "constructor": false}, {"identifier": "allowParam", "parameters": "(String paramName)", "modifiers": "protected", "return": "boolean", "signature": "boolean allowParam(String paramName)", "full_signature": "protected boolean allowParam(String paramName)", "class_method_signature": "OAuthRequest.allowParam(String paramName)", "testcase": false, "constructor": false}, {"identifier": "overrideParameters", "parameters": "(List<Parameter> authParams)", "modifiers": "private", "return": "void", "signature": "void overrideParameters(List<Parameter> authParams)", "full_signature": "private void overrideParameters(List<Parameter> authParams)", "class_method_signature": "OAuthRequest.overrideParameters(List<Parameter> authParams)", "testcase": false, "constructor": false}, {"identifier": "addIdentityParams", "parameters": "(List<Parameter> params)", "modifiers": "private", "return": "void", "signature": "void addIdentityParams(List<Parameter> params)", "full_signature": "private void addIdentityParams(List<Parameter> params)", "class_method_signature": "OAuthRequest.addIdentityParams(List<Parameter> params)", "testcase": false, "constructor": false}, {"identifier": "addSignatureParams", "parameters": "(List<Parameter> params)", "modifiers": "private", "return": "void", "signature": "void addSignatureParams(List<Parameter> params)", "full_signature": "private void addSignatureParams(List<Parameter> params)", "class_method_signature": "OAuthRequest.addSignatureParams(List<Parameter> params)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizationHeader", "parameters": "(List<Map.Entry<String, String>> oauthParams)", "modifiers": "static", "return": "String", "signature": "String getAuthorizationHeader(List<Map.Entry<String, String>> oauthParams)", "full_signature": "static String getAuthorizationHeader(List<Map.Entry<String, String>> oauthParams)", "class_method_signature": "OAuthRequest.getAuthorizationHeader(List<Map.Entry<String, String>> oauthParams)", "testcase": false, "constructor": false}, {"identifier": "sanitizeAndSign", "parameters": "(HttpRequest base, List<Parameter> params,\n      boolean tokenEndpoint, boolean addBodyHash)", "modifiers": "public", "return": "HttpRequest", "signature": "HttpRequest sanitizeAndSign(HttpRequest base, List<Parameter> params,\n      boolean tokenEndpoint, boolean addBodyHash)", "full_signature": "public HttpRequest sanitizeAndSign(HttpRequest base, List<Parameter> params,\n      boolean tokenEndpoint, boolean addBodyHash)", "class_method_signature": "OAuthRequest.sanitizeAndSign(HttpRequest base, List<Parameter> params,\n      boolean tokenEndpoint, boolean addBodyHash)", "testcase": false, "constructor": false}, {"identifier": "createHttpRequest", "parameters": "(HttpRequest base,\n      List<Map.Entry<String, String>> oauthParams)", "modifiers": "private", "return": "HttpRequest", "signature": "HttpRequest createHttpRequest(HttpRequest base,\n      List<Map.Entry<String, String>> oauthParams)", "full_signature": "private HttpRequest createHttpRequest(HttpRequest base,\n      List<Map.Entry<String, String>> oauthParams)", "class_method_signature": "OAuthRequest.createHttpRequest(HttpRequest base,\n      List<Map.Entry<String, String>> oauthParams)", "testcase": false, "constructor": false}, {"identifier": "sendOAuthMessage", "parameters": "(HttpRequest request)", "modifiers": "private", "return": "OAuthMessage", "signature": "OAuthMessage sendOAuthMessage(HttpRequest request)", "full_signature": "private OAuthMessage sendOAuthMessage(HttpRequest request)", "class_method_signature": "OAuthRequest.sendOAuthMessage(HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "parseAuthHeader", "parameters": "(OAuthMessage msg, HttpResponse resp)", "modifiers": "private", "return": "OAuthMessage", "signature": "OAuthMessage parseAuthHeader(OAuthMessage msg, HttpResponse resp)", "full_signature": "private OAuthMessage parseAuthHeader(OAuthMessage msg, HttpResponse resp)", "class_method_signature": "OAuthRequest.parseAuthHeader(OAuthMessage msg, HttpResponse resp)", "testcase": false, "constructor": false}, {"identifier": "buildClientApprovalState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildClientApprovalState()", "full_signature": "private void buildClientApprovalState()", "class_method_signature": "OAuthRequest.buildClientApprovalState()", "testcase": false, "constructor": false}, {"identifier": "buildAznUrl", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildAznUrl()", "full_signature": "private void buildAznUrl()", "class_method_signature": "OAuthRequest.buildAznUrl()", "testcase": false, "constructor": false}, {"identifier": "needAccessToken", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean needAccessToken()", "full_signature": "private boolean needAccessToken()", "class_method_signature": "OAuthRequest.needAccessToken()", "testcase": false, "constructor": false}, {"identifier": "accessTokenExpired", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean accessTokenExpired()", "full_signature": "private boolean accessTokenExpired()", "class_method_signature": "OAuthRequest.accessTokenExpired()", "testcase": false, "constructor": false}, {"identifier": "exchangeRequestToken", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void exchangeRequestToken()", "full_signature": "private void exchangeRequestToken()", "class_method_signature": "OAuthRequest.exchangeRequestToken()", "testcase": false, "constructor": false}, {"identifier": "saveAccessToken", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void saveAccessToken()", "full_signature": "private void saveAccessToken()", "class_method_signature": "OAuthRequest.saveAccessToken()", "testcase": false, "constructor": false}, {"identifier": "buildClientAccessState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildClientAccessState()", "full_signature": "private void buildClientAccessState()", "class_method_signature": "OAuthRequest.buildClientAccessState()", "testcase": false, "constructor": false}, {"identifier": "fetchData", "parameters": "()", "modifiers": "private", "return": "HttpResponseBuilder", "signature": "HttpResponseBuilder fetchData()", "full_signature": "private HttpResponseBuilder fetchData()", "class_method_signature": "OAuthRequest.fetchData()", "testcase": false, "constructor": false}, {"identifier": "fetchFromServer", "parameters": "(HttpRequest request)", "modifiers": "private", "return": "HttpResponse", "signature": "HttpResponse fetchFromServer(HttpRequest request)", "full_signature": "private HttpResponse fetchFromServer(HttpRequest request)", "class_method_signature": "OAuthRequest.fetchFromServer(HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "formatAccessTokenData", "parameters": "()", "modifiers": "private", "return": "HttpResponseBuilder", "signature": "HttpResponseBuilder formatAccessTokenData()", "full_signature": "private HttpResponseBuilder formatAccessTokenData()", "class_method_signature": "OAuthRequest.formatAccessTokenData()", "testcase": false, "constructor": false}, {"identifier": "checkForProtocolProblem", "parameters": "(HttpResponse response)", "modifiers": "private", "return": "void", "signature": "void checkForProtocolProblem(HttpResponse response)", "full_signature": "private void checkForProtocolProblem(HttpResponse response)", "class_method_signature": "OAuthRequest.checkForProtocolProblem(HttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "couldBeFullOAuthError", "parameters": "(HttpResponse response)", "modifiers": "private", "return": "boolean", "signature": "boolean couldBeFullOAuthError(HttpResponse response)", "full_signature": "private boolean couldBeFullOAuthError(HttpResponse response)", "class_method_signature": "OAuthRequest.couldBeFullOAuthError(HttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "selectOAuthParams", "parameters": "(OAuthMessage message)", "modifiers": "static", "return": "List<Map.Entry<String, String>>", "signature": "List<Map.Entry<String, String>> selectOAuthParams(OAuthMessage message)", "full_signature": "static List<Map.Entry<String, String>> selectOAuthParams(OAuthMessage message)", "class_method_signature": "OAuthRequest.selectOAuthParams(OAuthMessage message)", "testcase": false, "constructor": false}, {"identifier": "isContainerInjectedParameter", "parameters": "(String key)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isContainerInjectedParameter(String key)", "full_signature": "protected static boolean isContainerInjectedParameter(String key)", "class_method_signature": "OAuthRequest.isContainerInjectedParameter(String key)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/oauth/OAuthRequest.java"}, "focal_method": {"identifier": "fetch", "parameters": "(HttpRequest request)", "modifiers": "public", "return": "HttpResponse", "body": "public HttpResponse fetch(HttpRequest request) {\n    realRequest = request;\n    clientState = new OAuthClientState(\n        fetcherConfig.getStateCrypter(),\n        request.getOAuthArguments().getOrigClientState());\n    responseParams = new OAuthResponseParams(request.getSecurityToken(), request,\n        fetcherConfig.getStateCrypter());\n    try {\n      return fetchNoThrow();\n    } catch (RuntimeException e) {\n      // We log here to record the request/response pairs that created the failure.\n      responseParams.logDetailedWarning(classname,\"fetch\",MessageKeys.OAUTH_FETCH_UNEXPECTED_ERROR, e);\n      throw e;\n    }\n  }", "signature": "HttpResponse fetch(HttpRequest request)", "full_signature": "public HttpResponse fetch(HttpRequest request)", "class_method_signature": "OAuthRequest.fetch(HttpRequest request)", "testcase": false, "constructor": false, "invocations": ["getStateCrypter", "getOrigClientState", "getOAuthArguments", "getSecurityToken", "getStateCrypter", "fetchNoThrow", "logDetailedWarning"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}