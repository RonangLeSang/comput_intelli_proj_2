{"test_class": {"identifier": "HttpResponseTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private static final byte[] UTF8_DATA = {\n    (byte)0xEF, (byte)0xBB, (byte)0xBF, 'h', 'e', 'l', 'l', 'o'\n  };", "modifier": "private static final", "type": "byte[]", "declarator": "UTF8_DATA = {\n    (byte)0xEF, (byte)0xBB, (byte)0xBF, 'h', 'e', 'l', 'l', 'o'\n  }", "var_name": "UTF8_DATA"}, {"original_string": "private static final String UTF8_STRING = \"hello\";", "modifier": "private static final", "type": "String", "declarator": "UTF8_STRING = \"hello\"", "var_name": "UTF8_STRING"}, {"original_string": "private static final byte[] LATIN1_DATA = {\n    'G', 'a', 'm', 'e', 's', ',', ' ', 'H', 'Q', ',', ' ', 'M', 'a', 'n', 'g', (byte)0xE1, ',', ' ',\n    'A', 'n', 'i', 'm', 'e', ' ', 'e', ' ', 't', 'u', 'd', 'o', ' ', 'q', 'u', 'e', ' ', 'u', 'm',\n    ' ', 'b', 'o', 'm', ' ', 'n', 'e', 'r', 'd', ' ', 'a', 'm', 'a'\n  };", "modifier": "private static final", "type": "byte[]", "declarator": "LATIN1_DATA = {\n    'G', 'a', 'm', 'e', 's', ',', ' ', 'H', 'Q', ',', ' ', 'M', 'a', 'n', 'g', (byte)0xE1, ',', ' ',\n    'A', 'n', 'i', 'm', 'e', ' ', 'e', ' ', 't', 'u', 'd', 'o', ' ', 'q', 'u', 'e', ' ', 'u', 'm',\n    ' ', 'b', 'o', 'm', ' ', 'n', 'e', 'r', 'd', ' ', 'a', 'm', 'a'\n  }", "var_name": "LATIN1_DATA"}, {"original_string": "private static final String LATIN1_STRING\n      = \"Games, HQ, Mang\\u00E1, Anime e tudo que um bom nerd ama\";", "modifier": "private static final", "type": "String", "declarator": "LATIN1_STRING\n      = \"Games, HQ, Mang\\u00E1, Anime e tudo que um bom nerd ama\"", "var_name": "LATIN1_STRING"}, {"original_string": "private static final byte[] BIG5_DATA = {\n    (byte)0xa7, (byte)0x41, (byte)0xa6, (byte)0x6e\n  };", "modifier": "private static final", "type": "byte[]", "declarator": "BIG5_DATA = {\n    (byte)0xa7, (byte)0x41, (byte)0xa6, (byte)0x6e\n  }", "var_name": "BIG5_DATA"}, {"original_string": "private static final String BIG5_STRING = \"\\u4F60\\u597D\";", "modifier": "private static final", "type": "String", "declarator": "BIG5_STRING = \"\\u4F60\\u597D\"", "var_name": "BIG5_STRING"}, {"original_string": "public static FakeTimeSource timeSource = new FakeTimeSource(System.currentTimeMillis());", "modifier": "public static", "type": "FakeTimeSource", "declarator": "timeSource = new FakeTimeSource(System.currentTimeMillis())", "var_name": "timeSource"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/http/HttpResponseTest.java"}, "test_case": {"identifier": "testExpiresZeroValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExpiresZeroValue() throws Exception {\n    HttpResponse response = new HttpResponseBuilder().addHeader(\"Expires\", \"0\").create();\n    assertEquals(0, roundToSeconds(response.getCacheExpiration()));\n  }", "signature": "void testExpiresZeroValue()", "full_signature": "@Test public void testExpiresZeroValue()", "class_method_signature": "HttpResponseTest.testExpiresZeroValue()", "testcase": true, "constructor": false, "invocations": ["create", "addHeader", "assertEquals", "roundToSeconds", "getCacheExpiration"]}, "focal_class": {"identifier": "HttpResponse", "superclass": "", "interfaces": "implements Externalizable", "fields": [{"original_string": "private static final long serialVersionUID = 7526471155622776147L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7526471155622776147L", "var_name": "serialVersionUID"}, {"original_string": "public static final int SC_CONTINUE = 100;", "modifier": "public static final", "type": "int", "declarator": "SC_CONTINUE = 100", "var_name": "SC_CONTINUE"}, {"original_string": "public static final int SC_SWITCHING_PROTOCOLS = 101;", "modifier": "public static final", "type": "int", "declarator": "SC_SWITCHING_PROTOCOLS = 101", "var_name": "SC_SWITCHING_PROTOCOLS"}, {"original_string": "public static final int SC_OK = 200;", "modifier": "public static final", "type": "int", "declarator": "SC_OK = 200", "var_name": "SC_OK"}, {"original_string": "public static final int SC_CREATED = 201;", "modifier": "public static final", "type": "int", "declarator": "SC_CREATED = 201", "var_name": "SC_CREATED"}, {"original_string": "public static final int SC_ACCEPTED = 202;", "modifier": "public static final", "type": "int", "declarator": "SC_ACCEPTED = 202", "var_name": "SC_ACCEPTED"}, {"original_string": "public static final int SC_NON_AUTHORITATIVE_INFORMATION = 203;", "modifier": "public static final", "type": "int", "declarator": "SC_NON_AUTHORITATIVE_INFORMATION = 203", "var_name": "SC_NON_AUTHORITATIVE_INFORMATION"}, {"original_string": "public static final int SC_NO_CONTENT = 204;", "modifier": "public static final", "type": "int", "declarator": "SC_NO_CONTENT = 204", "var_name": "SC_NO_CONTENT"}, {"original_string": "public static final int SC_RESET_CONTENT = 205;", "modifier": "public static final", "type": "int", "declarator": "SC_RESET_CONTENT = 205", "var_name": "SC_RESET_CONTENT"}, {"original_string": "public static final int SC_PARTIAL_CONTENT = 206;", "modifier": "public static final", "type": "int", "declarator": "SC_PARTIAL_CONTENT = 206", "var_name": "SC_PARTIAL_CONTENT"}, {"original_string": "public static final int SC_MULTIPLE_CHOICES = 300;", "modifier": "public static final", "type": "int", "declarator": "SC_MULTIPLE_CHOICES = 300", "var_name": "SC_MULTIPLE_CHOICES"}, {"original_string": "public static final int SC_MOVED_PERMANENTLY = 301;", "modifier": "public static final", "type": "int", "declarator": "SC_MOVED_PERMANENTLY = 301", "var_name": "SC_MOVED_PERMANENTLY"}, {"original_string": "public static final int SC_FOUND = 302;", "modifier": "public static final", "type": "int", "declarator": "SC_FOUND = 302", "var_name": "SC_FOUND"}, {"original_string": "public static final int SC_SEE_OTHER = 303;", "modifier": "public static final", "type": "int", "declarator": "SC_SEE_OTHER = 303", "var_name": "SC_SEE_OTHER"}, {"original_string": "public static final int SC_NOT_MODIFIED = 304;", "modifier": "public static final", "type": "int", "declarator": "SC_NOT_MODIFIED = 304", "var_name": "SC_NOT_MODIFIED"}, {"original_string": "public static final int SC_USE_PROXY = 305;", "modifier": "public static final", "type": "int", "declarator": "SC_USE_PROXY = 305", "var_name": "SC_USE_PROXY"}, {"original_string": "public static final int SC_TEMPORARY_REDIRECT = 307;", "modifier": "public static final", "type": "int", "declarator": "SC_TEMPORARY_REDIRECT = 307", "var_name": "SC_TEMPORARY_REDIRECT"}, {"original_string": "public static final int SC_BAD_REQUEST = 400;", "modifier": "public static final", "type": "int", "declarator": "SC_BAD_REQUEST = 400", "var_name": "SC_BAD_REQUEST"}, {"original_string": "public static final int SC_UNAUTHORIZED = 401;", "modifier": "public static final", "type": "int", "declarator": "SC_UNAUTHORIZED = 401", "var_name": "SC_UNAUTHORIZED"}, {"original_string": "public static final int SC_PAYMENT_REQUIRED = 402;", "modifier": "public static final", "type": "int", "declarator": "SC_PAYMENT_REQUIRED = 402", "var_name": "SC_PAYMENT_REQUIRED"}, {"original_string": "public static final int SC_FORBIDDEN = 403;", "modifier": "public static final", "type": "int", "declarator": "SC_FORBIDDEN = 403", "var_name": "SC_FORBIDDEN"}, {"original_string": "public static final int SC_NOT_FOUND = 404;", "modifier": "public static final", "type": "int", "declarator": "SC_NOT_FOUND = 404", "var_name": "SC_NOT_FOUND"}, {"original_string": "public static final int SC_METHOD_NOT_ALLOWED = 405;", "modifier": "public static final", "type": "int", "declarator": "SC_METHOD_NOT_ALLOWED = 405", "var_name": "SC_METHOD_NOT_ALLOWED"}, {"original_string": "public static final int SC_NOT_ACCEPTABLE = 406;", "modifier": "public static final", "type": "int", "declarator": "SC_NOT_ACCEPTABLE = 406", "var_name": "SC_NOT_ACCEPTABLE"}, {"original_string": "public static final int SC_PROXY_AUTHENTICATION_REQUIRED = 407;", "modifier": "public static final", "type": "int", "declarator": "SC_PROXY_AUTHENTICATION_REQUIRED = 407", "var_name": "SC_PROXY_AUTHENTICATION_REQUIRED"}, {"original_string": "public static final int SC_REQUEST_TIMEOUT = 408;", "modifier": "public static final", "type": "int", "declarator": "SC_REQUEST_TIMEOUT = 408", "var_name": "SC_REQUEST_TIMEOUT"}, {"original_string": "public static final int SC_CONFLICT = 409;", "modifier": "public static final", "type": "int", "declarator": "SC_CONFLICT = 409", "var_name": "SC_CONFLICT"}, {"original_string": "public static final int SC_GONE = 410;", "modifier": "public static final", "type": "int", "declarator": "SC_GONE = 410", "var_name": "SC_GONE"}, {"original_string": "public static final int SC_LENGTH_REQUIRED = 411;", "modifier": "public static final", "type": "int", "declarator": "SC_LENGTH_REQUIRED = 411", "var_name": "SC_LENGTH_REQUIRED"}, {"original_string": "public static final int SC_PRECONDITION_FAILED = 412;", "modifier": "public static final", "type": "int", "declarator": "SC_PRECONDITION_FAILED = 412", "var_name": "SC_PRECONDITION_FAILED"}, {"original_string": "public static final int SC_REQUEST_ENTITY_TOO_LARGE = 413;", "modifier": "public static final", "type": "int", "declarator": "SC_REQUEST_ENTITY_TOO_LARGE = 413", "var_name": "SC_REQUEST_ENTITY_TOO_LARGE"}, {"original_string": "public static final int SC_REQUEST_URI_TOO_LONG = 414;", "modifier": "public static final", "type": "int", "declarator": "SC_REQUEST_URI_TOO_LONG = 414", "var_name": "SC_REQUEST_URI_TOO_LONG"}, {"original_string": "public static final int SC_UNSUPPORTED_MEDIA_TYPE = 415;", "modifier": "public static final", "type": "int", "declarator": "SC_UNSUPPORTED_MEDIA_TYPE = 415", "var_name": "SC_UNSUPPORTED_MEDIA_TYPE"}, {"original_string": "public static final int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;", "modifier": "public static final", "type": "int", "declarator": "SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416", "var_name": "SC_REQUESTED_RANGE_NOT_SATISFIABLE"}, {"original_string": "public static final int SC_EXPECTATION_FAILED = 417;", "modifier": "public static final", "type": "int", "declarator": "SC_EXPECTATION_FAILED = 417", "var_name": "SC_EXPECTATION_FAILED"}, {"original_string": "public static final int SC_INTERNAL_SERVER_ERROR = 500;", "modifier": "public static final", "type": "int", "declarator": "SC_INTERNAL_SERVER_ERROR = 500", "var_name": "SC_INTERNAL_SERVER_ERROR"}, {"original_string": "public static final int SC_NOT_IMPLEMENTED = 501;", "modifier": "public static final", "type": "int", "declarator": "SC_NOT_IMPLEMENTED = 501", "var_name": "SC_NOT_IMPLEMENTED"}, {"original_string": "public static final int SC_BAD_GATEWAY = 502;", "modifier": "public static final", "type": "int", "declarator": "SC_BAD_GATEWAY = 502", "var_name": "SC_BAD_GATEWAY"}, {"original_string": "public static final int SC_SERVICE_UNAVAILABLE = 503;", "modifier": "public static final", "type": "int", "declarator": "SC_SERVICE_UNAVAILABLE = 503", "var_name": "SC_SERVICE_UNAVAILABLE"}, {"original_string": "public static final int SC_GATEWAY_TIMEOUT = 504;", "modifier": "public static final", "type": "int", "declarator": "SC_GATEWAY_TIMEOUT = 504", "var_name": "SC_GATEWAY_TIMEOUT"}, {"original_string": "public static final int SC_HTTP_VERSION_NOT_SUPPORTED = 505;", "modifier": "public static final", "type": "int", "declarator": "SC_HTTP_VERSION_NOT_SUPPORTED = 505", "var_name": "SC_HTTP_VERSION_NOT_SUPPORTED"}, {"original_string": "private static final Set<String> BINARY_CONTENT_TYPES = ImmutableSet.of(\n      \"image/jpeg\", \"image/png\", \"image/gif\", \"image/jpg\", \"application/x-shockwave-flash\",\n      \"application/octet-stream\", \"application/ogg\", \"application/zip\", \"audio/mpeg\",\n      \"audio/x-ms-wma\", \"audio/vnd.rn-realaudio\", \"audio/x-wav\", \"video/mpeg\", \"video/mp4\",\n      \"video/quicktime\", \"video/x-ms-wmv\", \"video/x-flv\", \"video/flv\",\n      \"video/x-ms-asf\", \"application/pdf\", \"image/x-icon\"\n  );", "modifier": "private static final", "type": "Set<String>", "declarator": "BINARY_CONTENT_TYPES = ImmutableSet.of(\n      \"image/jpeg\", \"image/png\", \"image/gif\", \"image/jpg\", \"application/x-shockwave-flash\",\n      \"application/octet-stream\", \"application/ogg\", \"application/zip\", \"audio/mpeg\",\n      \"audio/x-ms-wma\", \"audio/vnd.rn-realaudio\", \"audio/x-wav\", \"video/mpeg\", \"video/mp4\",\n      \"video/quicktime\", \"video/x-ms-wmv\", \"video/x-flv\", \"video/flv\",\n      \"video/x-ms-asf\", \"application/pdf\", \"image/x-icon\"\n  )", "var_name": "BINARY_CONTENT_TYPES"}, {"original_string": "private static final Set<Integer> NEGATIVE_CACHING_EXEMPT_STATUS\n      = ImmutableSet.of(SC_UNAUTHORIZED, SC_FORBIDDEN);", "modifier": "private static final", "type": "Set<Integer>", "declarator": "NEGATIVE_CACHING_EXEMPT_STATUS\n      = ImmutableSet.of(SC_UNAUTHORIZED, SC_FORBIDDEN)", "var_name": "NEGATIVE_CACHING_EXEMPT_STATUS"}, {"original_string": "static final long DEFAULT_NEGATIVE_CACHE_TTL = 30 * 1000;", "modifier": "static final", "type": "long", "declarator": "DEFAULT_NEGATIVE_CACHE_TTL = 30 * 1000", "var_name": "DEFAULT_NEGATIVE_CACHE_TTL"}, {"original_string": "static final long DEFAULT_TTL = 5L * 60L * 1000L;", "modifier": "static final", "type": "long", "declarator": "DEFAULT_TTL = 5L * 60L * 1000L", "var_name": "DEFAULT_TTL"}, {"original_string": "static final Charset DEFAULT_ENCODING = Charsets.UTF_8;", "modifier": "static final", "type": "Charset", "declarator": "DEFAULT_ENCODING = Charsets.UTF_8", "var_name": "DEFAULT_ENCODING"}, {"original_string": "@Inject(optional = true) @Named(\"shindig.cache.http.negativeCacheTtl\")\n  private static long negativeCacheTtl = DEFAULT_NEGATIVE_CACHE_TTL;", "modifier": "@Inject(optional = true) @Named(\"shindig.cache.http.negativeCacheTtl\")\n  private static", "type": "long", "declarator": "negativeCacheTtl = DEFAULT_NEGATIVE_CACHE_TTL", "var_name": "negativeCacheTtl"}, {"original_string": "@Inject(optional = true) @Named(\"shindig.cache.http.defaultTtl\")\n  public static long defaultTtl = DEFAULT_TTL;", "modifier": "@Inject(optional = true) @Named(\"shindig.cache.http.defaultTtl\")\n  public static", "type": "long", "declarator": "defaultTtl = DEFAULT_TTL", "var_name": "defaultTtl"}, {"original_string": "@Inject(optional = true) @Named(\"shindig.http.fast-encoding-detection\")\n  private static boolean fastEncodingDetection = true;", "modifier": "@Inject(optional = true) @Named(\"shindig.http.fast-encoding-detection\")\n  private static", "type": "boolean", "declarator": "fastEncodingDetection = true", "var_name": "fastEncodingDetection"}, {"original_string": "@Inject(optional = true)\n  private static EncodingDetector.FallbackEncodingDetector customEncodingDetector =\n      new EncodingDetector.FallbackEncodingDetector();", "modifier": "@Inject(optional = true)\n  private static", "type": "EncodingDetector.FallbackEncodingDetector", "declarator": "customEncodingDetector =\n      new EncodingDetector.FallbackEncodingDetector()", "var_name": "customEncodingDetector"}, {"original_string": "private static final LoadingCache<String, Charset> encodingToCharset = CacheBuilder\n    .newBuilder()\n    .build(new CacheLoader<String, Charset>() {\n      public Charset load(String encoding) throws ExecutionException {\n        try {\n          return Charset.forName(encoding);\n        } catch (UnsupportedCharsetException e) {\n          throw new ExecutionException(e);\n        } catch (IllegalCharsetNameException e) {\n          throw new ExecutionException(e);\n        }\n      }\n    });", "modifier": "private static final", "type": "LoadingCache<String, Charset>", "declarator": "encodingToCharset = CacheBuilder\n    .newBuilder()\n    .build(new CacheLoader<String, Charset>() {\n      public Charset load(String encoding) throws ExecutionException {\n        try {\n          return Charset.forName(encoding);\n        } catch (UnsupportedCharsetException e) {\n          throw new ExecutionException(e);\n        } catch (IllegalCharsetNameException e) {\n          throw new ExecutionException(e);\n        }\n      }\n    })", "var_name": "encodingToCharset"}, {"original_string": "private String responseString;", "modifier": "private", "type": "String", "declarator": "responseString", "var_name": "responseString"}, {"original_string": "private long date;", "modifier": "private", "type": "long", "declarator": "date", "var_name": "date"}, {"original_string": "private Charset encoding;", "modifier": "private", "type": "Charset", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "private Map<String, String> metadata;", "modifier": "private", "type": "Map<String, String>", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private int httpStatusCode;", "modifier": "private", "type": "int", "declarator": "httpStatusCode", "var_name": "httpStatusCode"}, {"original_string": "private Multimap<String, String> headers;", "modifier": "private", "type": "Multimap<String, String>", "declarator": "headers", "var_name": "headers"}, {"original_string": "private byte[] responseBytes;", "modifier": "private", "type": "byte[]", "declarator": "responseBytes", "var_name": "responseBytes"}, {"original_string": "private long refetchStrictNoCacheAfterMs;", "modifier": "private", "type": "long", "declarator": "refetchStrictNoCacheAfterMs", "var_name": "refetchStrictNoCacheAfterMs"}, {"original_string": "private static final Supplier<Collection<String>> HEADER_COLLECTION_SUPPLIER = new HeaderCollectionSupplier();", "modifier": "private static final", "type": "Supplier<Collection<String>>", "declarator": "HEADER_COLLECTION_SUPPLIER = new HeaderCollectionSupplier()", "var_name": "HEADER_COLLECTION_SUPPLIER"}], "methods": [{"identifier": "setTimeSource", "parameters": "(TimeSource timeSource)", "modifiers": "public static", "return": "void", "signature": "void setTimeSource(TimeSource timeSource)", "full_signature": "public static void setTimeSource(TimeSource timeSource)", "class_method_signature": "HttpResponse.setTimeSource(TimeSource timeSource)", "testcase": false, "constructor": false}, {"identifier": "getTimeSource", "parameters": "()", "modifiers": "public static", "return": "TimeSource", "signature": "TimeSource getTimeSource()", "full_signature": "public static TimeSource getTimeSource()", "class_method_signature": "HttpResponse.getTimeSource()", "testcase": false, "constructor": false}, {"identifier": "HttpResponse", "parameters": "()", "modifiers": "public", "return": "", "signature": " HttpResponse()", "full_signature": "public  HttpResponse()", "class_method_signature": "HttpResponse.HttpResponse()", "testcase": false, "constructor": true}, {"identifier": "HttpResponse", "parameters": "(HttpResponseBuilder builder)", "modifiers": "", "return": "", "signature": " HttpResponse(HttpResponseBuilder builder)", "full_signature": "  HttpResponse(HttpResponseBuilder builder)", "class_method_signature": "HttpResponse.HttpResponse(HttpResponseBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "HttpResponse", "parameters": "(int httpStatusCode, String body)", "modifiers": "private", "return": "", "signature": " HttpResponse(int httpStatusCode, String body)", "full_signature": "private  HttpResponse(int httpStatusCode, String body)", "class_method_signature": "HttpResponse.HttpResponse(int httpStatusCode, String body)", "testcase": false, "constructor": true}, {"identifier": "HttpResponse", "parameters": "(String body)", "modifiers": "public", "return": "", "signature": " HttpResponse(String body)", "full_signature": "public  HttpResponse(String body)", "class_method_signature": "HttpResponse.HttpResponse(String body)", "testcase": false, "constructor": true}, {"identifier": "error", "parameters": "()", "modifiers": "public static", "return": "HttpResponse", "signature": "HttpResponse error()", "full_signature": "public static HttpResponse error()", "class_method_signature": "HttpResponse.error()", "testcase": false, "constructor": false}, {"identifier": "badrequest", "parameters": "(String msg)", "modifiers": "public static", "return": "HttpResponse", "signature": "HttpResponse badrequest(String msg)", "full_signature": "public static HttpResponse badrequest(String msg)", "class_method_signature": "HttpResponse.badrequest(String msg)", "testcase": false, "constructor": false}, {"identifier": "timeout", "parameters": "()", "modifiers": "public static", "return": "HttpResponse", "signature": "HttpResponse timeout()", "full_signature": "public static HttpResponse timeout()", "class_method_signature": "HttpResponse.timeout()", "testcase": false, "constructor": false}, {"identifier": "notFound", "parameters": "()", "modifiers": "public static", "return": "HttpResponse", "signature": "HttpResponse notFound()", "full_signature": "public static HttpResponse notFound()", "class_method_signature": "HttpResponse.notFound()", "testcase": false, "constructor": false}, {"identifier": "getHttpStatusCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHttpStatusCode()", "full_signature": "public int getHttpStatusCode()", "class_method_signature": "HttpResponse.getHttpStatusCode()", "testcase": false, "constructor": false}, {"identifier": "isError", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isError()", "full_signature": "public boolean isError()", "class_method_signature": "HttpResponse.isError()", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncoding()", "full_signature": "public String getEncoding()", "class_method_signature": "HttpResponse.getEncoding()", "testcase": false, "constructor": false}, {"identifier": "getEncodingCharset", "parameters": "()", "modifiers": "public", "return": "Charset", "signature": "Charset getEncodingCharset()", "full_signature": "public Charset getEncodingCharset()", "class_method_signature": "HttpResponse.getEncodingCharset()", "testcase": false, "constructor": false}, {"identifier": "getContentLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getContentLength()", "full_signature": "public int getContentLength()", "class_method_signature": "HttpResponse.getContentLength()", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream getResponse()", "full_signature": "public InputStream getResponse()", "class_method_signature": "HttpResponse.getResponse()", "testcase": false, "constructor": false}, {"identifier": "getResponseAsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResponseAsString()", "full_signature": "public String getResponseAsString()", "class_method_signature": "HttpResponse.getResponseAsString()", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "()", "modifiers": "public", "return": "Multimap<String, String>", "signature": "Multimap<String, String> getHeaders()", "full_signature": "public Multimap<String, String> getHeaders()", "class_method_signature": "HttpResponse.getHeaders()", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "(String name)", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getHeaders(String name)", "full_signature": "public Collection<String> getHeaders(String name)", "class_method_signature": "HttpResponse.getHeaders(String name)", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getHeader(String name)", "full_signature": "public String getHeader(String name)", "class_method_signature": "HttpResponse.getHeader(String name)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getMetadata()", "full_signature": "public Map<String, String> getMetadata()", "class_method_signature": "HttpResponse.getMetadata()", "testcase": false, "constructor": false}, {"identifier": "getCacheExpiration", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCacheExpiration()", "full_signature": "public long getCacheExpiration()", "class_method_signature": "HttpResponse.getCacheExpiration()", "testcase": false, "constructor": false}, {"identifier": "getRefetchStrictNoCacheAfterMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRefetchStrictNoCacheAfterMs()", "full_signature": "public long getRefetchStrictNoCacheAfterMs()", "class_method_signature": "HttpResponse.getRefetchStrictNoCacheAfterMs()", "testcase": false, "constructor": false}, {"identifier": "shouldRefetch", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean shouldRefetch()", "full_signature": "public boolean shouldRefetch()", "class_method_signature": "HttpResponse.shouldRefetch()", "testcase": false, "constructor": false}, {"identifier": "getCacheTtl", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCacheTtl()", "full_signature": "public long getCacheTtl()", "class_method_signature": "HttpResponse.getCacheTtl()", "testcase": false, "constructor": false}, {"identifier": "isStale", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStale()", "full_signature": "public boolean isStale()", "class_method_signature": "HttpResponse.isStale()", "testcase": false, "constructor": false}, {"identifier": "isStrictNoCache", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStrictNoCache()", "full_signature": "public boolean isStrictNoCache()", "class_method_signature": "HttpResponse.isStrictNoCache()", "testcase": false, "constructor": false}, {"identifier": "getExpiresTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getExpiresTime()", "full_signature": "public long getExpiresTime()", "class_method_signature": "HttpResponse.getExpiresTime()", "testcase": false, "constructor": false}, {"identifier": "getCacheControlMaxAge", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCacheControlMaxAge()", "full_signature": "public long getCacheControlMaxAge()", "class_method_signature": "HttpResponse.getCacheControlMaxAge()", "testcase": false, "constructor": false}, {"identifier": "getAndUpdateDate", "parameters": "(Multimap<String, String> headers)", "modifiers": "private static", "return": "long", "signature": "long getAndUpdateDate(Multimap<String, String> headers)", "full_signature": "private static long getAndUpdateDate(Multimap<String, String> headers)", "class_method_signature": "HttpResponse.getAndUpdateDate(Multimap<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTtl", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getDefaultTtl()", "full_signature": "public long getDefaultTtl()", "class_method_signature": "HttpResponse.getDefaultTtl()", "testcase": false, "constructor": false}, {"identifier": "getNegativeTtl", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "long", "signature": "long getNegativeTtl()", "full_signature": "@VisibleForTesting long getNegativeTtl()", "class_method_signature": "HttpResponse.getNegativeTtl()", "testcase": false, "constructor": false}, {"identifier": "getAndUpdateEncoding", "parameters": "(Multimap<String, String> headers, byte[] body)", "modifiers": "private static", "return": "Charset", "signature": "Charset getAndUpdateEncoding(Multimap<String, String> headers, byte[] body)", "full_signature": "private static Charset getAndUpdateEncoding(Multimap<String, String> headers, byte[] body)", "class_method_signature": "HttpResponse.getAndUpdateEncoding(Multimap<String, String> headers, byte[] body)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HttpResponse.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "HttpResponse.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HttpResponse.toString()", "testcase": false, "constructor": false}, {"identifier": "getResponseAsBytes", "parameters": "()", "modifiers": "", "return": "byte[]", "signature": "byte[] getResponseAsBytes()", "full_signature": " byte[] getResponseAsBytes()", "class_method_signature": "HttpResponse.getResponseAsBytes()", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@SuppressWarnings(\"unchecked\") public void readExternal(ObjectInput in)", "class_method_signature": "HttpResponse.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "public void writeExternal(ObjectOutput out)", "class_method_signature": "HttpResponse.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "newHeaderMultimap", "parameters": "()", "modifiers": "public static", "return": "Multimap<String,String>", "signature": "Multimap<String,String> newHeaderMultimap()", "full_signature": "public static Multimap<String,String> newHeaderMultimap()", "class_method_signature": "HttpResponse.newHeaderMultimap()", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java"}, "focal_method": {"identifier": "getCacheExpiration", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getCacheExpiration() {\n    if (isError() && !NEGATIVE_CACHING_EXEMPT_STATUS.contains(httpStatusCode)) {\n      // If the server provides a Retry-After header use that as the cacheTtl\n      String retryAfter = this.getHeader(\"Retry-After\");\n      if (retryAfter != null) {\n        if (StringUtils.isNumeric(retryAfter)) {\n          return date + Integer.valueOf(retryAfter) * 1000L;\n        } else {\n          Date expiresDate = DateUtil.parseRfc1123Date(retryAfter);\n          if (expiresDate != null)\n            return expiresDate.getTime();\n        }\n      }\n      // default value\n      return date + negativeCacheTtl;\n    }\n\n    if (isStrictNoCache()) {\n      return -1;\n    }\n    long maxAge = getCacheControlMaxAge();\n    if (maxAge != -1) {\n      return date + maxAge;\n    }\n    long expiration = getExpiresTime();\n    if (expiration != -1) {\n      return expiration;\n    }\n\n    if (isError()) {\n      return date + negativeCacheTtl;\n    }\n\n    return date + defaultTtl;\n  }", "signature": "long getCacheExpiration()", "full_signature": "public long getCacheExpiration()", "class_method_signature": "HttpResponse.getCacheExpiration()", "testcase": false, "constructor": false, "invocations": ["isError", "contains", "getHeader", "isNumeric", "valueOf", "parseRfc1123Date", "getTime", "isStrictNoCache", "getCacheControlMaxAge", "getExpiresTime", "isError"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}