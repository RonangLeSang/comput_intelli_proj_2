{"test_class": {"identifier": "CajaContentRewriterTest", "superclass": "extends RewriterTestBase", "interfaces": "", "fields": [{"original_string": "private List<GadgetHtmlParser> parsers;", "modifier": "private", "type": "List<GadgetHtmlParser>", "declarator": "parsers", "var_name": "parsers"}, {"original_string": "private CajaContentRewriter rewriter;", "modifier": "private", "type": "CajaContentRewriter", "declarator": "rewriter", "var_name": "rewriter"}, {"original_string": "private ProxyUriManager proxyUriManager;", "modifier": "private", "type": "ProxyUriManager", "declarator": "proxyUriManager", "var_name": "proxyUriManager"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/CajaContentRewriterTest.java"}, "test_case": {"identifier": "testRewrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRewrite() throws Exception {\n    String markup = \"<script>window['a']=0;</script>\";\n    String expected =\n        \"caja___.start\";\n\n    List<String> messages = ImmutableList.of();\n    testMarkup(markup, expected, messages);\n  }", "signature": "void testRewrite()", "full_signature": "@Test public void testRewrite()", "class_method_signature": "CajaContentRewriterTest.testRewrite()", "testcase": true, "constructor": false, "invocations": ["of", "testMarkup"]}, "focal_class": {"identifier": "CajaContentRewriter", "superclass": "", "interfaces": "implements GadgetRewriter", "fields": [{"original_string": "public static final String CAJOLED_MODULES = \"cajoledModules\";", "modifier": "public static final", "type": "String", "declarator": "CAJOLED_MODULES = \"cajoledModules\"", "var_name": "CAJOLED_MODULES"}, {"original_string": "private static final String CLASS_NAME = CajaContentRewriter.class.getName();", "modifier": "private static final", "type": "String", "declarator": "CLASS_NAME = CajaContentRewriter.class.getName()", "var_name": "CLASS_NAME"}, {"original_string": "private static final Logger LOG = Logger.getLogger(CLASS_NAME, MessageKeys.MESSAGES);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(CLASS_NAME, MessageKeys.MESSAGES)", "var_name": "LOG"}, {"original_string": "private final Cache<ModuleCacheKey, ImmutableList<Job>> moduleCache;", "modifier": "private final", "type": "Cache<ModuleCacheKey, ImmutableList<Job>>", "declarator": "moduleCache", "var_name": "moduleCache"}, {"original_string": "private final RequestPipeline requestPipeline;", "modifier": "private final", "type": "RequestPipeline", "declarator": "requestPipeline", "var_name": "requestPipeline"}, {"original_string": "private final HtmlSerializer htmlSerializer;", "modifier": "private final", "type": "HtmlSerializer", "declarator": "htmlSerializer", "var_name": "htmlSerializer"}, {"original_string": "private final ProxyUriManager proxyUriManager;", "modifier": "private final", "type": "ProxyUriManager", "declarator": "proxyUriManager", "var_name": "proxyUriManager"}], "methods": [{"identifier": "CajaContentRewriter", "parameters": "(CacheProvider cacheProvider, RequestPipeline requestPipeline,\n                             HtmlSerializer htmlSerializer, ProxyUriManager proxyUriManager)", "modifiers": "@Inject public", "return": "", "signature": " CajaContentRewriter(CacheProvider cacheProvider, RequestPipeline requestPipeline,\n                             HtmlSerializer htmlSerializer, ProxyUriManager proxyUriManager)", "full_signature": "@Inject public  CajaContentRewriter(CacheProvider cacheProvider, RequestPipeline requestPipeline,\n                             HtmlSerializer htmlSerializer, ProxyUriManager proxyUriManager)", "class_method_signature": "CajaContentRewriter.CajaContentRewriter(CacheProvider cacheProvider, RequestPipeline requestPipeline,\n                             HtmlSerializer htmlSerializer, ProxyUriManager proxyUriManager)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(InputSource is, CharProducer cp, String mime, MessageQueue mq)", "modifiers": "@VisibleForTesting static", "return": "ParseTreeNode", "signature": "ParseTreeNode parse(InputSource is, CharProducer cp, String mime, MessageQueue mq)", "full_signature": "@VisibleForTesting static ParseTreeNode parse(InputSource is, CharProducer cp, String mime, MessageQueue mq)", "class_method_signature": "CajaContentRewriter.parse(InputSource is, CharProducer cp, String mime, MessageQueue mq)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(Uri uri, String container, String mime,\n      boolean es53, boolean debug)", "modifiers": "public", "return": "CajoledResult", "signature": "CajoledResult rewrite(Uri uri, String container, String mime,\n      boolean es53, boolean debug)", "full_signature": "public CajoledResult rewrite(Uri uri, String container, String mime,\n      boolean es53, boolean debug)", "class_method_signature": "CajaContentRewriter.rewrite(Uri uri, String container, String mime,\n      boolean es53, boolean debug)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(Uri gadgetUri, String container,\n      ParseTreeNode root, boolean es53, boolean debug)", "modifiers": "public", "return": "CajoledResult", "signature": "CajoledResult rewrite(Uri gadgetUri, String container,\n      ParseTreeNode root, boolean es53, boolean debug)", "full_signature": "public CajoledResult rewrite(Uri gadgetUri, String container,\n      ParseTreeNode root, boolean es53, boolean debug)", "class_method_signature": "CajaContentRewriter.rewrite(Uri gadgetUri, String container,\n      ParseTreeNode root, boolean es53, boolean debug)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent mc)", "modifiers": "public", "return": "void", "signature": "void rewrite(Gadget gadget, MutableContent mc)", "full_signature": "public void rewrite(Gadget gadget, MutableContent mc)", "class_method_signature": "CajaContentRewriter.rewrite(Gadget gadget, MutableContent mc)", "testcase": false, "constructor": false}, {"identifier": "makeFetcher", "parameters": "(final Uri gadgetUri, final String container)", "modifiers": "", "return": "UriFetcher", "signature": "UriFetcher makeFetcher(final Uri gadgetUri, final String container)", "full_signature": " UriFetcher makeFetcher(final Uri gadgetUri, final String container)", "class_method_signature": "CajaContentRewriter.makeFetcher(final Uri gadgetUri, final String container)", "testcase": false, "constructor": false}, {"identifier": "makePolicy", "parameters": "(final Uri gadgetUri)", "modifiers": "protected", "return": "UriPolicy", "signature": "UriPolicy makePolicy(final Uri gadgetUri)", "full_signature": "protected UriPolicy makePolicy(final Uri gadgetUri)", "class_method_signature": "CajaContentRewriter.makePolicy(final Uri gadgetUri)", "testcase": false, "constructor": false}, {"identifier": "createContainerFor", "parameters": "(Document doc, Node el)", "modifiers": "private", "return": "void", "signature": "void createContainerFor(Document doc, Node el)", "full_signature": "private void createContainerFor(Document doc, Node el)", "class_method_signature": "CajaContentRewriter.createContainerFor(Document doc, Node el)", "testcase": false, "constructor": false}, {"identifier": "formatErrors", "parameters": "(Document doc, InputSource is,\n      CharSequence orig, List<Message> messages, boolean visible)", "modifiers": "private", "return": "Element", "signature": "Element formatErrors(Document doc, InputSource is,\n      CharSequence orig, List<Message> messages, boolean visible)", "full_signature": "private Element formatErrors(Document doc, InputSource is,\n      CharSequence orig, List<Message> messages, boolean visible)", "class_method_signature": "CajaContentRewriter.formatErrors(Document doc, InputSource is,\n      CharSequence orig, List<Message> messages, boolean visible)", "testcase": false, "constructor": false}, {"identifier": "html", "parameters": "(CharSequence s)", "modifiers": "private static", "return": "String", "signature": "String html(CharSequence s)", "full_signature": "private static String html(CharSequence s)", "class_method_signature": "CajaContentRewriter.html(CharSequence s)", "testcase": false, "constructor": false}, {"identifier": "renderJs", "parameters": "(CajoledModule cajoled, boolean debug)", "modifiers": "private", "return": "String", "signature": "String renderJs(CajoledModule cajoled, boolean debug)", "full_signature": "private String renderJs(CajoledModule cajoled, boolean debug)", "class_method_signature": "CajaContentRewriter.renderJs(CajoledModule cajoled, boolean debug)", "testcase": false, "constructor": false}, {"identifier": "cajaStart", "parameters": "(Document doc, String cajoledJs, boolean debug)", "modifiers": "private", "return": "Element", "signature": "Element cajaStart(Document doc, String cajoledJs, boolean debug)", "full_signature": "private Element cajaStart(Document doc, String cajoledJs, boolean debug)", "class_method_signature": "CajaContentRewriter.cajaStart(Document doc, String cajoledJs, boolean debug)", "testcase": false, "constructor": false}, {"identifier": "logException", "parameters": "(String methodname, List<Message> messages)", "modifiers": "private", "return": "void", "signature": "void logException(String methodname, List<Message> messages)", "full_signature": "private void logException(String methodname, List<Message> messages)", "class_method_signature": "CajaContentRewriter.logException(String methodname, List<Message> messages)", "testcase": false, "constructor": false}, {"identifier": "makePluginCompiler", "parameters": "(\n      PluginMeta meta, MessageQueue mq)", "modifiers": "protected", "return": "PluginCompiler", "signature": "PluginCompiler makePluginCompiler(\n      PluginMeta meta, MessageQueue mq)", "full_signature": "protected PluginCompiler makePluginCompiler(\n      PluginMeta meta, MessageQueue mq)", "class_method_signature": "CajaContentRewriter.makePluginCompiler(\n      PluginMeta meta, MessageQueue mq)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/CajaContentRewriter.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(Uri uri, String container, String mime,\n      boolean es53, boolean debug)", "modifiers": "public", "return": "CajoledResult", "body": "public CajoledResult rewrite(Uri uri, String container, String mime,\n      boolean es53, boolean debug) {\n    URI javaUri = uri.toJavaUri();\n    InputSource is = new InputSource(javaUri);\n    MessageQueue mq = new SimpleMessageQueue();\n    try {\n      UriFetcher fetcher = makeFetcher(uri, container);\n      ExternalReference extRef = new ExternalReference(javaUri,\n          FilePosition.instance(is, /*lineNo*/ 1, /*charInFile*/ 1, /*charInLine*/ 1));\n      // If the fetch fails, a UriFetchException is thrown and serialized as part of the\n      // message queue.\n      CharProducer cp = fetcher.fetch(extRef, mime).getTextualContent();\n      ParseTreeNode ptn = parse(is, cp, mime, mq);\n      return rewrite(uri, container, ptn, es53, debug);\n    } catch (UnsupportedEncodingException e) {\n      LOG.severe(\"Unexpected inability to recognize mime type: \" + mime);\n      mq.addMessage(ServiceMessageType.UNEXPECTED_INPUT_MIME_TYPE,\n          MessagePart.Factory.valueOf(mime));\n    } catch (UriFetchException e) {\n      LOG.info(\"Failed to retrieve: \" + e.toString());\n    } catch (ParseException e) {\n      mq.addMessage(MessageType.PARSE_ERROR, FilePosition.UNKNOWN);\n    }\n    return new CajoledResult(null, null, mq.getMessages(), /* hasErrors */ true);\n  }", "signature": "CajoledResult rewrite(Uri uri, String container, String mime,\n      boolean es53, boolean debug)", "full_signature": "public CajoledResult rewrite(Uri uri, String container, String mime,\n      boolean es53, boolean debug)", "class_method_signature": "CajaContentRewriter.rewrite(Uri uri, String container, String mime,\n      boolean es53, boolean debug)", "testcase": false, "constructor": false, "invocations": ["toJavaUri", "makeFetcher", "instance", "getTextualContent", "fetch", "parse", "rewrite", "severe", "addMessage", "valueOf", "info", "toString", "addMessage", "getMessages"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}