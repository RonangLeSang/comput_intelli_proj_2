{"test_class": {"identifier": "ProxyServletTest", "superclass": "extends ServletTestFixture", "interfaces": "", "fields": [{"original_string": "private static final Uri REQUEST_URL = Uri.parse(\"http://example.org/file\");", "modifier": "private static final", "type": "Uri", "declarator": "REQUEST_URL = Uri.parse(\"http://example.org/file\")", "var_name": "REQUEST_URL"}, {"original_string": "private static final String BASIC_SYNTAX_URL = \"http://opensocial.org/proxy?foo=bar&url=\"\n          + REQUEST_URL;", "modifier": "private static final", "type": "String", "declarator": "BASIC_SYNTAX_URL = \"http://opensocial.org/proxy?foo=bar&url=\"\n          + REQUEST_URL", "var_name": "BASIC_SYNTAX_URL"}, {"original_string": "private static final String RESPONSE_BODY = \"Hello, world!\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_BODY = \"Hello, world!\"", "var_name": "RESPONSE_BODY"}, {"original_string": "private static final String ERROR_MESSAGE = \"Broken!\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE = \"Broken!\"", "var_name": "ERROR_MESSAGE"}, {"original_string": "private static final String POST_CONTENT = \"my post stuff\";", "modifier": "private static final", "type": "String", "declarator": "POST_CONTENT = \"my post stuff\"", "var_name": "POST_CONTENT"}, {"original_string": "private static final String POST_METHOD = \"POST\";", "modifier": "private static final", "type": "String", "declarator": "POST_METHOD = \"POST\"", "var_name": "POST_METHOD"}, {"original_string": "private ServletInputStream postContentStream = new ServletInputStream() {\n    InputStream is = new ByteArrayInputStream(POST_CONTENT.getBytes());\n    @Override\n    public int read() throws IOException {\n      return is.read();\n    }\n\n    @Override\n    public void close() throws IOException {\n      is.close();\n    }\n\n  };", "modifier": "private", "type": "ServletInputStream", "declarator": "postContentStream = new ServletInputStream() {\n    InputStream is = new ByteArrayInputStream(POST_CONTENT.getBytes());\n    @Override\n    public int read() throws IOException {\n      return is.read();\n    }\n\n    @Override\n    public void close() throws IOException {\n      is.close();\n    }\n\n  }", "var_name": "postContentStream"}, {"original_string": "private final ProxyUriManager proxyUriManager = mock(ProxyUriManager.class);", "modifier": "private final", "type": "ProxyUriManager", "declarator": "proxyUriManager = mock(ProxyUriManager.class)", "var_name": "proxyUriManager"}, {"original_string": "private final LockedDomainService lockedDomainService = mock(LockedDomainService.class);", "modifier": "private final", "type": "LockedDomainService", "declarator": "lockedDomainService = mock(LockedDomainService.class)", "var_name": "lockedDomainService"}, {"original_string": "private final ProxyHandler proxyHandler = mock(ProxyHandler.class);", "modifier": "private final", "type": "ProxyHandler", "declarator": "proxyHandler = mock(ProxyHandler.class)", "var_name": "proxyHandler"}, {"original_string": "private final ProxyServlet servlet = new ProxyServlet();", "modifier": "private final", "type": "ProxyServlet", "declarator": "servlet = new ProxyServlet()", "var_name": "servlet"}, {"original_string": "private final ProxyUriManager.ProxyUri proxyUri = mock(ProxyUriManager.ProxyUri.class);", "modifier": "private final", "type": "ProxyUriManager.ProxyUri", "declarator": "proxyUri = mock(ProxyUriManager.ProxyUri.class)", "var_name": "proxyUri"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/servlet/ProxyServletTest.java"}, "test_case": {"identifier": "testDoPostNormalWithLockedDomainUnsafe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDoPostNormalWithLockedDomainUnsafe() throws Exception {\n    setupRequest(BASIC_SYNTAX_URL, false);\n\n    replay();\n    servlet.doGet(request, recorder);\n    verify();\n\n    assertEquals(HttpServletResponse.SC_BAD_REQUEST, recorder.getHttpStatusCode());\n    assertContains(\"wrong domain\", recorder.getResponseAsString());\n  }", "signature": "void testDoPostNormalWithLockedDomainUnsafe()", "full_signature": "@Test public void testDoPostNormalWithLockedDomainUnsafe()", "class_method_signature": "ProxyServletTest.testDoPostNormalWithLockedDomainUnsafe()", "testcase": true, "constructor": false, "invocations": ["setupRequest", "replay", "doGet", "verify", "assertEquals", "getHttpStatusCode", "assertContains", "getResponseAsString"]}, "focal_class": {"identifier": "ProxyServlet", "superclass": "extends InjectedServlet", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 9085050443492307723L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 9085050443492307723L", "var_name": "serialVersionUID"}, {"original_string": "private static final String classname = ProxyServlet.class.getName();", "modifier": "private static final", "type": "String", "declarator": "classname = ProxyServlet.class.getName()", "var_name": "classname"}, {"original_string": "private static final Logger LOG = Logger.getLogger(classname, MessageKeys.MESSAGES);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(classname, MessageKeys.MESSAGES)", "var_name": "LOG"}, {"original_string": "private transient ProxyUriManager proxyUriManager;", "modifier": "private transient", "type": "ProxyUriManager", "declarator": "proxyUriManager", "var_name": "proxyUriManager"}, {"original_string": "private transient LockedDomainService lockedDomainService;", "modifier": "private transient", "type": "LockedDomainService", "declarator": "lockedDomainService", "var_name": "lockedDomainService"}, {"original_string": "private transient ProxyHandler proxyHandler;", "modifier": "private transient", "type": "ProxyHandler", "declarator": "proxyHandler", "var_name": "proxyHandler"}], "methods": [{"identifier": "setProxyHandler", "parameters": "(ProxyHandler proxyHandler)", "modifiers": "@Inject public", "return": "void", "signature": "void setProxyHandler(ProxyHandler proxyHandler)", "full_signature": "@Inject public void setProxyHandler(ProxyHandler proxyHandler)", "class_method_signature": "ProxyServlet.setProxyHandler(ProxyHandler proxyHandler)", "testcase": false, "constructor": false}, {"identifier": "setProxyUriManager", "parameters": "(ProxyUriManager proxyUriManager)", "modifiers": "@Inject public", "return": "void", "signature": "void setProxyUriManager(ProxyUriManager proxyUriManager)", "full_signature": "@Inject public void setProxyUriManager(ProxyUriManager proxyUriManager)", "class_method_signature": "ProxyServlet.setProxyUriManager(ProxyUriManager proxyUriManager)", "testcase": false, "constructor": false}, {"identifier": "setLockedDomainService", "parameters": "(LockedDomainService lockedDomainService)", "modifiers": "@Inject public", "return": "void", "signature": "void setLockedDomainService(LockedDomainService lockedDomainService)", "full_signature": "@Inject public void setLockedDomainService(LockedDomainService lockedDomainService)", "class_method_signature": "ProxyServlet.setLockedDomainService(LockedDomainService lockedDomainService)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest request, HttpServletResponse servletResponse)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest request, HttpServletResponse servletResponse)", "full_signature": "@Override protected void doGet(HttpServletRequest request, HttpServletResponse servletResponse)", "class_method_signature": "ProxyServlet.doGet(HttpServletRequest request, HttpServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(HttpServletRequest request, HttpServletResponse servletResponse)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(HttpServletRequest request, HttpServletResponse servletResponse)", "full_signature": "@Override protected void doPost(HttpServletRequest request, HttpServletResponse servletResponse)", "class_method_signature": "ProxyServlet.doPost(HttpServletRequest request, HttpServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "processRequest", "parameters": "(HttpServletRequest request, HttpServletResponse servletResponse)", "modifiers": "private", "return": "void", "signature": "void processRequest(HttpServletRequest request, HttpServletResponse servletResponse)", "full_signature": "private void processRequest(HttpServletRequest request, HttpServletResponse servletResponse)", "class_method_signature": "ProxyServlet.processRequest(HttpServletRequest request, HttpServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "getPOSTContent", "parameters": "(HttpServletRequest request)", "modifiers": "private", "return": "StringBuffer", "signature": "StringBuffer getPOSTContent(HttpServletRequest request)", "full_signature": "private StringBuffer getPOSTContent(HttpServletRequest request)", "class_method_signature": "ProxyServlet.getPOSTContent(HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/servlet/ProxyServlet.java"}, "focal_method": {"identifier": "doGet", "parameters": "(HttpServletRequest request, HttpServletResponse servletResponse)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void doGet(HttpServletRequest request, HttpServletResponse servletResponse)\n      throws IOException {\n    processRequest(request, servletResponse);\n  }", "signature": "void doGet(HttpServletRequest request, HttpServletResponse servletResponse)", "full_signature": "@Override protected void doGet(HttpServletRequest request, HttpServletResponse servletResponse)", "class_method_signature": "ProxyServlet.doGet(HttpServletRequest request, HttpServletResponse servletResponse)", "testcase": false, "constructor": false, "invocations": ["processRequest"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}