{"test_class": {"identifier": "MessageELResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static private final String MESSAGE_BUNDLE =\n    \"<messagebundle>\" +\n      \"<msg name='hello'>world</msg>\" +\n      \"<msg name='number'>${1+1}</msg>\" +\n      \"<msg name='concat'>${Msg.hello} ${Msg.number}</msg>\" +\n      \"<msg name='multiLevel'>${Msg.concat} ${Msg.concat}</msg>\" +\n      // Self-recursive EL, should fail\n      \"<msg name='recurse'>${Msg.recurse}</msg>\" +\n      // Mutually recursive EL, should fail\n      \"<msg name='mutual1'>${Msg.mutual2}</msg>\" +\n      \"<msg name='mutual2'>${Msg.mutual1}</msg>\" +\n    \"</messagebundle>\";", "modifier": "static private final", "type": "String", "declarator": "MESSAGE_BUNDLE =\n    \"<messagebundle>\" +\n      \"<msg name='hello'>world</msg>\" +\n      \"<msg name='number'>${1+1}</msg>\" +\n      \"<msg name='concat'>${Msg.hello} ${Msg.number}</msg>\" +\n      \"<msg name='multiLevel'>${Msg.concat} ${Msg.concat}</msg>\" +\n      // Self-recursive EL, should fail\n      \"<msg name='recurse'>${Msg.recurse}</msg>\" +\n      // Mutually recursive EL, should fail\n      \"<msg name='mutual1'>${Msg.mutual2}</msg>\" +\n      \"<msg name='mutual2'>${Msg.mutual1}</msg>\" +\n    \"</messagebundle>\"", "var_name": "MESSAGE_BUNDLE"}, {"original_string": "private MessageBundle messageBundle;", "modifier": "private", "type": "MessageBundle", "declarator": "messageBundle", "var_name": "messageBundle"}, {"original_string": "private Expressions expressions;", "modifier": "private", "type": "Expressions", "declarator": "expressions", "var_name": "expressions"}, {"original_string": "private ELContext context;", "modifier": "private", "type": "ELContext", "declarator": "context", "var_name": "context"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/templates/MessageELResolverTest.java"}, "test_case": {"identifier": "innerEvaluation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void innerEvaluation() {\n    assertEquals(2, expressions.parse(\"${Msg.number}\", Integer.class).getValue(context));\n  }", "signature": "void innerEvaluation()", "full_signature": "@Test public void innerEvaluation()", "class_method_signature": "MessageELResolverTest.innerEvaluation()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getValue", "parse"]}, "focal_class": {"identifier": "MessageELResolver", "superclass": "extends ELResolver", "interfaces": "", "fields": [{"original_string": "public static final String PROPERTY_MSG = \"Msg\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_MSG = \"Msg\"", "var_name": "PROPERTY_MSG"}, {"original_string": "private final MessageBundle bundle;", "modifier": "private final", "type": "MessageBundle", "declarator": "bundle", "var_name": "bundle"}, {"original_string": "private final Expressions expressions;", "modifier": "private final", "type": "Expressions", "declarator": "expressions", "var_name": "expressions"}], "methods": [{"identifier": "MessageELResolver", "parameters": "(Expressions expressions, MessageBundle bundle)", "modifiers": "public", "return": "", "signature": " MessageELResolver(Expressions expressions, MessageBundle bundle)", "full_signature": "public  MessageELResolver(Expressions expressions, MessageBundle bundle)", "class_method_signature": "MessageELResolver.MessageELResolver(Expressions expressions, MessageBundle bundle)", "testcase": false, "constructor": true}, {"identifier": "getCommonPropertyType", "parameters": "(ELContext context, Object base)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getCommonPropertyType(ELContext context, Object base)", "full_signature": "@Override public Class<?> getCommonPropertyType(ELContext context, Object base)", "class_method_signature": "MessageELResolver.getCommonPropertyType(ELContext context, Object base)", "testcase": false, "constructor": false}, {"identifier": "getFeatureDescriptors", "parameters": "(ELContext context,\n      Object base)", "modifiers": "@Override public", "return": "Iterator<FeatureDescriptor>", "signature": "Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n      Object base)", "full_signature": "@Override public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n      Object base)", "class_method_signature": "MessageELResolver.getFeatureDescriptors(ELContext context,\n      Object base)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getType(ELContext context, Object base, Object property)", "full_signature": "@Override public Class<?> getType(ELContext context, Object base, Object property)", "class_method_signature": "MessageELResolver.getType(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(ELContext context, Object base, Object property)", "full_signature": "@Override public Object getValue(ELContext context, Object base, Object property)", "class_method_signature": "MessageELResolver.getValue(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "pushCurrentProperty", "parameters": "(ELContext context, Object property)", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> pushCurrentProperty(ELContext context, Object property)", "full_signature": "private List<Object> pushCurrentProperty(ELContext context, Object property)", "class_method_signature": "MessageELResolver.pushCurrentProperty(ELContext context, Object property)", "testcase": false, "constructor": false}, {"identifier": "popProperty", "parameters": "(List<Object> properties)", "modifiers": "private", "return": "void", "signature": "void popProperty(List<Object> properties)", "full_signature": "private void popProperty(List<Object> properties)", "class_method_signature": "MessageELResolver.popProperty(List<Object> properties)", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly(ELContext context, Object base, Object property)", "full_signature": "@Override public boolean isReadOnly(ELContext context, Object base, Object property)", "class_method_signature": "MessageELResolver.isReadOnly(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(ELContext context, Object base, Object property, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(ELContext context, Object base, Object property, Object value)", "full_signature": "@Override public void setValue(ELContext context, Object base, Object property, Object value)", "class_method_signature": "MessageELResolver.setValue(ELContext context, Object base, Object property, Object value)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/templates/MessageELResolver.java"}, "focal_method": {"identifier": "getValue", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object getValue(ELContext context, Object base, Object property) {\n    if ((base == null) && PROPERTY_MSG.equals(property)) {\n      context.setPropertyResolved(true);\n      return bundle;\n    } else if (base instanceof MessageBundle) {\n      String text = bundle.getMessages().get(property.toString());\n      if (text == null) {\n        context.setPropertyResolved(true);\n        return null;\n      }\n\n      List<Object> properties = null;\n      try {\n        properties = pushCurrentProperty(context, property);\n        context.setPropertyResolved(false);\n        return expressions.parse(text, Object.class).getValue(context);\n      } finally {\n        popProperty(properties);\n        context.setPropertyResolved(true);\n      }\n    }\n\n    return null;\n  }", "signature": "Object getValue(ELContext context, Object base, Object property)", "full_signature": "@Override public Object getValue(ELContext context, Object base, Object property)", "class_method_signature": "MessageELResolver.getValue(ELContext context, Object base, Object property)", "testcase": false, "constructor": false, "invocations": ["equals", "setPropertyResolved", "get", "getMessages", "toString", "setPropertyResolved", "pushCurrentProperty", "setPropertyResolved", "getValue", "parse", "popProperty", "setPropertyResolved"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}