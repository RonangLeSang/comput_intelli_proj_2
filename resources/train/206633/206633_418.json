{"test_class": {"identifier": "RenderingGadgetRewriterTest", "superclass": "extends EasyMockTestCase", "interfaces": "", "fields": [{"original_string": "private static final Uri SPEC_URL = Uri.parse(\"http://example.org/gadget.xml\");", "modifier": "private static final", "type": "Uri", "declarator": "SPEC_URL = Uri.parse(\"http://example.org/gadget.xml\")", "var_name": "SPEC_URL"}, {"original_string": "private static final String BODY_CONTENT = \"Some body content\";", "modifier": "private static final", "type": "String", "declarator": "BODY_CONTENT = \"Some body content\"", "var_name": "BODY_CONTENT"}, {"original_string": "static final Pattern DOCUMENT_SPLIT_PATTERN = Pattern.compile(\n      \"(.*)<head>(.*?)<\\\\/head>(?:.*)<body(.*?)>(.*?)<\\\\/body>(?:.*)\", Pattern.DOTALL |\n      Pattern.CASE_INSENSITIVE);", "modifier": "static final", "type": "Pattern", "declarator": "DOCUMENT_SPLIT_PATTERN = Pattern.compile(\n      \"(.*)<head>(.*?)<\\\\/head>(?:.*)<body(.*?)>(.*?)<\\\\/body>(?:.*)\", Pattern.DOTALL |\n      Pattern.CASE_INSENSITIVE)", "var_name": "DOCUMENT_SPLIT_PATTERN"}, {"original_string": "private static final String CUSTOM_DOCTYPE = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_DOCTYPE = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\"", "var_name": "CUSTOM_DOCTYPE"}, {"original_string": "private static final String CUSTOM_DOCTYPE_QNAME = \"html\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_DOCTYPE_QNAME = \"html\"", "var_name": "CUSTOM_DOCTYPE_QNAME"}, {"original_string": "private static final String CUSTOM_DOCTYPE_PUBID = \"-//W3C//DTD HTML 4.01 Transitional//EN\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_DOCTYPE_PUBID = \"-//W3C//DTD HTML 4.01 Transitional//EN\"", "var_name": "CUSTOM_DOCTYPE_PUBID"}, {"original_string": "private static final String CUSTOM_DOCTYPE_SYSID = \"http://www.w3.org/TR/html4/loose.dtd\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_DOCTYPE_SYSID = \"http://www.w3.org/TR/html4/loose.dtd\"", "var_name": "CUSTOM_DOCTYPE_SYSID"}, {"original_string": "static final int BEFORE_HEAD_GROUP = 1;", "modifier": "static final", "type": "int", "declarator": "BEFORE_HEAD_GROUP = 1", "var_name": "BEFORE_HEAD_GROUP"}, {"original_string": "static final int HEAD_GROUP = 2;", "modifier": "static final", "type": "int", "declarator": "HEAD_GROUP = 2", "var_name": "HEAD_GROUP"}, {"original_string": "static final int BODY_ATTRIBUTES_GROUP = 3;", "modifier": "static final", "type": "int", "declarator": "BODY_ATTRIBUTES_GROUP = 3", "var_name": "BODY_ATTRIBUTES_GROUP"}, {"original_string": "static final int BODY_GROUP = 4;", "modifier": "static final", "type": "int", "declarator": "BODY_GROUP = 4", "var_name": "BODY_GROUP"}, {"original_string": "private final FakeMessageBundleFactory messageBundleFactory = new FakeMessageBundleFactory();", "modifier": "private final", "type": "FakeMessageBundleFactory", "declarator": "messageBundleFactory = new FakeMessageBundleFactory()", "var_name": "messageBundleFactory"}, {"original_string": "private final FakeContainerConfig config = new FakeContainerConfig();", "modifier": "private final", "type": "FakeContainerConfig", "declarator": "config = new FakeContainerConfig()", "var_name": "config"}, {"original_string": "private final JsUriManager jsUriManager = new FakeJsUriManager();", "modifier": "private final", "type": "JsUriManager", "declarator": "jsUriManager = new FakeJsUriManager()", "var_name": "jsUriManager"}, {"original_string": "private final MapGadgetContext context = new MapGadgetContext();", "modifier": "private final", "type": "MapGadgetContext", "declarator": "context = new MapGadgetContext()", "var_name": "context"}, {"original_string": "private final GadgetAdminStore gadgetAdminStore = mock(GadgetAdminStore.class);", "modifier": "private final", "type": "GadgetAdminStore", "declarator": "gadgetAdminStore = mock(GadgetAdminStore.class)", "var_name": "gadgetAdminStore"}, {"original_string": "private FeatureRegistry featureRegistry;", "modifier": "private", "type": "FeatureRegistry", "declarator": "featureRegistry", "var_name": "featureRegistry"}, {"original_string": "private JsServingPipeline jsServingPipeline;", "modifier": "private", "type": "JsServingPipeline", "declarator": "jsServingPipeline", "var_name": "jsServingPipeline"}, {"original_string": "private RenderingGadgetRewriter rewriter;", "modifier": "private", "type": "RenderingGadgetRewriter", "declarator": "rewriter", "var_name": "rewriter"}, {"original_string": "private GadgetHtmlParser parser;", "modifier": "private", "type": "GadgetHtmlParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private Expressions expressions;", "modifier": "private", "type": "Expressions", "declarator": "expressions", "var_name": "expressions"}], "file": "java/gadgets/src/test/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriterTest.java"}, "test_case": {"identifier": "completeDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void completeDocument() throws Exception {\n    String docType = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\";\n    String head = \"<script src=\\\"foo.js\\\"></script><style type=\\\"text/css\\\">body{color:red;}</style>\";\n    String bodyAttr = \" onload=\\\"foo();\\\"\";\n    String body = \"hello, world.\";\n    String doc = new StringBuilder()\n        .append(docType)\n        .append(\"<html><head>\")\n        .append(head)\n        .append(\"</head><body\").append(bodyAttr).append('>')\n        .append(body)\n        .append(\"</body></html>\")\n        .toString();\n\n    GadgetContext context = new GadgetContext() {\n      @Override\n      public String getParameter(String name) {\n        if (name.equals(\"libs\")) {\n          return \"foo\";\n        }\n        return null;\n      }\n    };\n\n    Gadget gadget = makeDefaultGadget()\n        .setContext(context);\n\n    expectFeatureCalls(gadget,\n        ImmutableList.<FeatureResource>of(),\n        ImmutableSet.of(\"foo\"),\n        ImmutableList.of(inline(\"blah\", \"n/a\")));\n\n    String rewritten = rewrite(gadget, doc);\n\n    Matcher matcher = DOCUMENT_SPLIT_PATTERN.matcher(rewritten);\n    assertTrue(\"Output is not valid HTML.\", matcher.matches());\n    assertTrue(\"DOCTYPE not preserved\", matcher.group(BEFORE_HEAD_GROUP).contains(docType));\n    assertTrue(\"Missing opening html tag\", matcher.group(BEFORE_HEAD_GROUP).contains(\"<html\"));\n    // TODO: reinstate test when non-tag-reordering parser is used.\n    // assertTrue(\"Custom head content is missing.\", matcher.group(HEAD_GROUP).contains(head));\n    assertTrue(\"IsGadget beacon not included.\",\n        matcher.group(HEAD_GROUP).contains(\"<script>\" + IS_GADGET_BEACON + \"</script>\"));\n    assertTrue(\"Forced javascript not included.\",\n        matcher.group(HEAD_GROUP).contains(\"<script src=\\\"/js/foo?jsload=0\\\">\"));\n    assertFalse(\"Default styling was injected when a doctype was specified.\",\n        matcher.group(HEAD_GROUP).contains(DEFAULT_CSS));\n    assertTrue(\"Custom body attributes missing.\",\n        matcher.group(BODY_ATTRIBUTES_GROUP).contains(bodyAttr));\n    assertTrue(\"Original document not preserved.\",\n        matcher.group(BODY_GROUP).contains(body));\n    assertTrue(\"gadgets.util.runOnLoadHandlers not invoked.\",\n        matcher.group(BODY_GROUP).contains(\"gadgets.util.runOnLoadHandlers();\"));\n\n    // Skipping other tests; code path should be the same for the rest.\n  }", "signature": "void completeDocument()", "full_signature": "@Test public void completeDocument()", "class_method_signature": "RenderingGadgetRewriterTest.completeDocument()", "testcase": true, "constructor": false, "invocations": ["toString", "append", "append", "append", "append", "append", "append", "append", "append", "equals", "setContext", "makeDefaultGadget", "expectFeatureCalls", "of", "of", "of", "inline", "rewrite", "matcher", "assertTrue", "matches", "assertTrue", "contains", "group", "assertTrue", "contains", "group", "assertTrue", "contains", "group", "assertTrue", "contains", "group", "assertFalse", "contains", "group", "assertTrue", "contains", "group", "assertTrue", "contains", "group", "assertTrue", "contains", "group"]}, "focal_class": {"identifier": "RenderingGadgetRewriter", "superclass": "", "interfaces": "implements GadgetRewriter", "fields": [{"original_string": "private static final String classname = RenderingGadgetRewriter.class.getName();", "modifier": "private static final", "type": "String", "declarator": "classname = RenderingGadgetRewriter.class.getName()", "var_name": "classname"}, {"original_string": "private static final Logger LOG = Logger.getLogger(classname,MessageKeys.MESSAGES);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(classname,MessageKeys.MESSAGES)", "var_name": "LOG"}, {"original_string": "protected static final String DEFAULT_CSS =\n      \"body,td,div,span,p{font-family:arial,sans-serif;}\" +\n      \"a {color:#0000cc;}a:visited {color:#551a8b;}\" +\n      \"a:active {color:#ff0000;}\" +\n      \"body{margin: 0px;padding: 0px;background-color:white;}\";", "modifier": "protected static final", "type": "String", "declarator": "DEFAULT_CSS =\n      \"body,td,div,span,p{font-family:arial,sans-serif;}\" +\n      \"a {color:#0000cc;}a:visited {color:#551a8b;}\" +\n      \"a:active {color:#ff0000;}\" +\n      \"body{margin: 0px;padding: 0px;background-color:white;}\"", "var_name": "DEFAULT_CSS"}, {"original_string": "protected static final String SCROLLING_CSS =\n      \"html,body{height:100%;width:100%;overflow:auto;}\";", "modifier": "protected static final", "type": "String", "declarator": "SCROLLING_CSS =\n      \"html,body{height:100%;width:100%;overflow:auto;}\"", "var_name": "SCROLLING_CSS"}, {"original_string": "static final String IS_GADGET_BEACON = \"window['__isgadget']=true;\";", "modifier": "static final", "type": "String", "declarator": "IS_GADGET_BEACON = \"window['__isgadget']=true;\"", "var_name": "IS_GADGET_BEACON"}, {"original_string": "static final String INSERT_BASE_ELEMENT_KEY = \"gadgets.insertBaseElement\";", "modifier": "static final", "type": "String", "declarator": "INSERT_BASE_ELEMENT_KEY = \"gadgets.insertBaseElement\"", "var_name": "INSERT_BASE_ELEMENT_KEY"}, {"original_string": "static final String REWRITE_DOCTYPE_QNAME = \"gadgets.doctype_qname\";", "modifier": "static final", "type": "String", "declarator": "REWRITE_DOCTYPE_QNAME = \"gadgets.doctype_qname\"", "var_name": "REWRITE_DOCTYPE_QNAME"}, {"original_string": "static final String REWRITE_DOCTYPE_PUBID = \"gadgets.doctype_pubid\";", "modifier": "static final", "type": "String", "declarator": "REWRITE_DOCTYPE_PUBID = \"gadgets.doctype_pubid\"", "var_name": "REWRITE_DOCTYPE_PUBID"}, {"original_string": "static final String REWRITE_DOCTYPE_SYSID = \"gadgets.doctype_sysid\";", "modifier": "static final", "type": "String", "declarator": "REWRITE_DOCTYPE_SYSID = \"gadgets.doctype_sysid\"", "var_name": "REWRITE_DOCTYPE_SYSID"}, {"original_string": "static final String FEATURES_KEY = \"gadgets.features\";", "modifier": "static final", "type": "String", "declarator": "FEATURES_KEY = \"gadgets.features\"", "var_name": "FEATURES_KEY"}, {"original_string": "protected final MessageBundleFactory messageBundleFactory;", "modifier": "protected final", "type": "MessageBundleFactory", "declarator": "messageBundleFactory", "var_name": "messageBundleFactory"}, {"original_string": "protected final ContainerConfig containerConfig;", "modifier": "protected final", "type": "ContainerConfig", "declarator": "containerConfig", "var_name": "containerConfig"}, {"original_string": "protected final FeatureRegistryProvider featureRegistryProvider;", "modifier": "protected final", "type": "FeatureRegistryProvider", "declarator": "featureRegistryProvider", "var_name": "featureRegistryProvider"}, {"original_string": "protected final JsServingPipeline jsServingPipeline;", "modifier": "protected final", "type": "JsServingPipeline", "declarator": "jsServingPipeline", "var_name": "jsServingPipeline"}, {"original_string": "protected final JsUriManager jsUriManager;", "modifier": "protected final", "type": "JsUriManager", "declarator": "jsUriManager", "var_name": "jsUriManager"}, {"original_string": "protected final ConfigProcessor configProcessor;", "modifier": "protected final", "type": "ConfigProcessor", "declarator": "configProcessor", "var_name": "configProcessor"}, {"original_string": "protected final GadgetAdminStore gadgetAdminStore;", "modifier": "protected final", "type": "GadgetAdminStore", "declarator": "gadgetAdminStore", "var_name": "gadgetAdminStore"}, {"original_string": "protected Set<String> defaultExternLibs = ImmutableSet.of();", "modifier": "protected", "type": "Set<String>", "declarator": "defaultExternLibs = ImmutableSet.of()", "var_name": "defaultExternLibs"}, {"original_string": "protected Boolean externalizeFeatures = false;", "modifier": "protected", "type": "Boolean", "declarator": "externalizeFeatures = false", "var_name": "externalizeFeatures"}, {"original_string": "private String defaultDoctypeQName = \"html\";", "modifier": "private", "type": "String", "declarator": "defaultDoctypeQName = \"html\"", "var_name": "defaultDoctypeQName"}, {"original_string": "private String defaultDoctypePubId = null;", "modifier": "private", "type": "String", "declarator": "defaultDoctypePubId = null", "var_name": "defaultDoctypePubId"}, {"original_string": "private String defaultDoctypeSysId = null;", "modifier": "private", "type": "String", "declarator": "defaultDoctypeSysId = null", "var_name": "defaultDoctypeSysId"}, {"original_string": "private final Expressions expressions;", "modifier": "private final", "type": "Expressions", "declarator": "expressions", "var_name": "expressions"}, {"original_string": "private ELContext elContext;", "modifier": "private", "type": "ELContext", "declarator": "elContext", "var_name": "elContext"}], "methods": [{"identifier": "RenderingGadgetRewriter", "parameters": "(MessageBundleFactory messageBundleFactory,\n                                 Expressions expressions,\n                                 ContainerConfig containerConfig,\n                                 FeatureRegistryProvider featureRegistryProvider,\n                                 JsServingPipeline jsServingPipeline,\n                                 JsUriManager jsUriManager,\n                                 ConfigProcessor configProcessor,\n                                 GadgetAdminStore gadgetAdminStore)", "modifiers": "@Inject public", "return": "", "signature": " RenderingGadgetRewriter(MessageBundleFactory messageBundleFactory,\n                                 Expressions expressions,\n                                 ContainerConfig containerConfig,\n                                 FeatureRegistryProvider featureRegistryProvider,\n                                 JsServingPipeline jsServingPipeline,\n                                 JsUriManager jsUriManager,\n                                 ConfigProcessor configProcessor,\n                                 GadgetAdminStore gadgetAdminStore)", "full_signature": "@Inject public  RenderingGadgetRewriter(MessageBundleFactory messageBundleFactory,\n                                 Expressions expressions,\n                                 ContainerConfig containerConfig,\n                                 FeatureRegistryProvider featureRegistryProvider,\n                                 JsServingPipeline jsServingPipeline,\n                                 JsUriManager jsUriManager,\n                                 ConfigProcessor configProcessor,\n                                 GadgetAdminStore gadgetAdminStore)", "class_method_signature": "RenderingGadgetRewriter.RenderingGadgetRewriter(MessageBundleFactory messageBundleFactory,\n                                 Expressions expressions,\n                                 ContainerConfig containerConfig,\n                                 FeatureRegistryProvider featureRegistryProvider,\n                                 JsServingPipeline jsServingPipeline,\n                                 JsUriManager jsUriManager,\n                                 ConfigProcessor configProcessor,\n                                 GadgetAdminStore gadgetAdminStore)", "testcase": false, "constructor": true}, {"identifier": "setDefaultDoctypeQName", "parameters": "(String qname)", "modifiers": "public", "return": "void", "signature": "void setDefaultDoctypeQName(String qname)", "full_signature": "public void setDefaultDoctypeQName(String qname)", "class_method_signature": "RenderingGadgetRewriter.setDefaultDoctypeQName(String qname)", "testcase": false, "constructor": false}, {"identifier": "setDefaultDoctypePubId", "parameters": "( String pubid)", "modifiers": "public", "return": "void", "signature": "void setDefaultDoctypePubId( String pubid)", "full_signature": "public void setDefaultDoctypePubId( String pubid)", "class_method_signature": "RenderingGadgetRewriter.setDefaultDoctypePubId( String pubid)", "testcase": false, "constructor": false}, {"identifier": "setDefaultDoctypeSysId", "parameters": "( String sysid)", "modifiers": "public", "return": "void", "signature": "void setDefaultDoctypeSysId( String sysid)", "full_signature": "public void setDefaultDoctypeSysId( String sysid)", "class_method_signature": "RenderingGadgetRewriter.setDefaultDoctypeSysId( String sysid)", "testcase": false, "constructor": false}, {"identifier": "setDefaultForcedLibs", "parameters": "(@Named(\"shindig.gadget-rewrite.default-forced-libs\")String forcedLibs)", "modifiers": "@Inject public", "return": "void", "signature": "void setDefaultForcedLibs(@Named(\"shindig.gadget-rewrite.default-forced-libs\")String forcedLibs)", "full_signature": "@Inject public void setDefaultForcedLibs(@Named(\"shindig.gadget-rewrite.default-forced-libs\")String forcedLibs)", "class_method_signature": "RenderingGadgetRewriter.setDefaultForcedLibs(@Named(\"shindig.gadget-rewrite.default-forced-libs\")String forcedLibs)", "testcase": false, "constructor": false}, {"identifier": "setExternalizeFeatureLibs", "parameters": "(@Named(\"shindig.gadget-rewrite.externalize-feature-libs\")Boolean externalizeFeatures)", "modifiers": "@Inject(optional = true) public", "return": "void", "signature": "void setExternalizeFeatureLibs(@Named(\"shindig.gadget-rewrite.externalize-feature-libs\")Boolean externalizeFeatures)", "full_signature": "@Inject(optional = true) public void setExternalizeFeatureLibs(@Named(\"shindig.gadget-rewrite.externalize-feature-libs\")Boolean externalizeFeatures)", "class_method_signature": "RenderingGadgetRewriter.setExternalizeFeatureLibs(@Named(\"shindig.gadget-rewrite.externalize-feature-libs\")Boolean externalizeFeatures)", "testcase": false, "constructor": false}, {"identifier": "processChildNodes", "parameters": "(Node source)", "modifiers": "public", "return": "void", "signature": "void processChildNodes(Node source)", "full_signature": "public void processChildNodes(Node source)", "class_method_signature": "RenderingGadgetRewriter.processChildNodes(Node source)", "testcase": false, "constructor": false}, {"identifier": "processNode", "parameters": "(Node source)", "modifiers": "private", "return": "void", "signature": "void processNode(Node source)", "full_signature": "private void processNode(Node source)", "class_method_signature": "RenderingGadgetRewriter.processNode(Node source)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent mutableContent)", "modifiers": "public", "return": "void", "signature": "void rewrite(Gadget gadget, MutableContent mutableContent)", "full_signature": "public void rewrite(Gadget gadget, MutableContent mutableContent)", "class_method_signature": "RenderingGadgetRewriter.rewrite(Gadget gadget, MutableContent mutableContent)", "testcase": false, "constructor": false}, {"identifier": "injectDefaultScrolling", "parameters": "(Element injectedStyle)", "modifiers": "protected", "return": "void", "signature": "void injectDefaultScrolling(Element injectedStyle)", "full_signature": "protected void injectDefaultScrolling(Element injectedStyle)", "class_method_signature": "RenderingGadgetRewriter.injectDefaultScrolling(Element injectedStyle)", "testcase": false, "constructor": false}, {"identifier": "injectBaseTag", "parameters": "(Gadget gadget, Node headTag)", "modifiers": "protected", "return": "void", "signature": "void injectBaseTag(Gadget gadget, Node headTag)", "full_signature": "protected void injectBaseTag(Gadget gadget, Node headTag)", "class_method_signature": "RenderingGadgetRewriter.injectBaseTag(Gadget gadget, Node headTag)", "testcase": false, "constructor": false}, {"identifier": "injectOnLoadHandlers", "parameters": "(Node bodyTag)", "modifiers": "protected", "return": "void", "signature": "void injectOnLoadHandlers(Node bodyTag)", "full_signature": "protected void injectOnLoadHandlers(Node bodyTag)", "class_method_signature": "RenderingGadgetRewriter.injectOnLoadHandlers(Node bodyTag)", "testcase": false, "constructor": false}, {"identifier": "injectGadgetBeacon", "parameters": "(Gadget gadget, Node headTag, Node firstHeadChild)", "modifiers": "protected", "return": "void", "signature": "void injectGadgetBeacon(Gadget gadget, Node headTag, Node firstHeadChild)", "full_signature": "protected void injectGadgetBeacon(Gadget gadget, Node headTag, Node firstHeadChild)", "class_method_signature": "RenderingGadgetRewriter.injectGadgetBeacon(Gadget gadget, Node headTag, Node firstHeadChild)", "testcase": false, "constructor": false}, {"identifier": "getFeatureRepositoryId", "parameters": "(Gadget gadget)", "modifiers": "protected", "return": "String", "signature": "String getFeatureRepositoryId(Gadget gadget)", "full_signature": "protected String getFeatureRepositoryId(Gadget gadget)", "class_method_signature": "RenderingGadgetRewriter.getFeatureRepositoryId(Gadget gadget)", "testcase": false, "constructor": false}, {"identifier": "injectFeatureLibraries", "parameters": "(Gadget gadget, Node headTag, Node firstHeadChild)", "modifiers": "protected", "return": "void", "signature": "void injectFeatureLibraries(Gadget gadget, Node headTag, Node firstHeadChild)", "full_signature": "protected void injectFeatureLibraries(Gadget gadget, Node headTag, Node firstHeadChild)", "class_method_signature": "RenderingGadgetRewriter.injectFeatureLibraries(Gadget gadget, Node headTag, Node firstHeadChild)", "testcase": false, "constructor": false}, {"identifier": "checkRequiredFeatures", "parameters": "(Gadget gadget, FeatureRegistry featureRegistry)", "modifiers": "protected", "return": "void", "signature": "void checkRequiredFeatures(Gadget gadget, FeatureRegistry featureRegistry)", "full_signature": "protected void checkRequiredFeatures(Gadget gadget, FeatureRegistry featureRegistry)", "class_method_signature": "RenderingGadgetRewriter.checkRequiredFeatures(Gadget gadget, FeatureRegistry featureRegistry)", "testcase": false, "constructor": false}, {"identifier": "getFeaturesContent", "parameters": "(JsUri jsUri)", "modifiers": "protected", "return": "String", "signature": "String getFeaturesContent(JsUri jsUri)", "full_signature": "protected String getFeaturesContent(JsUri jsUri)", "class_method_signature": "RenderingGadgetRewriter.getFeaturesContent(JsUri jsUri)", "testcase": false, "constructor": false}, {"identifier": "injectScript", "parameters": "(Collection<String> libs, Collection<String> loaded, boolean inline,\n      Gadget gadget, Node headTag, Node firstHeadChild, String extraContent)", "modifiers": "protected", "return": "void", "signature": "void injectScript(Collection<String> libs, Collection<String> loaded, boolean inline,\n      Gadget gadget, Node headTag, Node firstHeadChild, String extraContent)", "full_signature": "protected void injectScript(Collection<String> libs, Collection<String> loaded, boolean inline,\n      Gadget gadget, Node headTag, Node firstHeadChild, String extraContent)", "class_method_signature": "RenderingGadgetRewriter.injectScript(Collection<String> libs, Collection<String> loaded, boolean inline,\n      Gadget gadget, Node headTag, Node firstHeadChild, String extraContent)", "testcase": false, "constructor": false}, {"identifier": "getLibraryConfig", "parameters": "(Gadget gadget, List<String> reqs)", "modifiers": "protected", "return": "String", "signature": "String getLibraryConfig(Gadget gadget, List<String> reqs)", "full_signature": "protected String getLibraryConfig(Gadget gadget, List<String> reqs)", "class_method_signature": "RenderingGadgetRewriter.getLibraryConfig(Gadget gadget, List<String> reqs)", "testcase": false, "constructor": false}, {"identifier": "injectMessageBundles", "parameters": "(MessageBundle bundle, Node scriptTag)", "modifiers": "protected", "return": "void", "signature": "void injectMessageBundles(MessageBundle bundle, Node scriptTag)", "full_signature": "protected void injectMessageBundles(MessageBundle bundle, Node scriptTag)", "class_method_signature": "RenderingGadgetRewriter.injectMessageBundles(MessageBundle bundle, Node scriptTag)", "testcase": false, "constructor": false}, {"identifier": "injectDefaultPrefs", "parameters": "(Gadget gadget, Node scriptTag)", "modifiers": "protected", "return": "void", "signature": "void injectDefaultPrefs(Gadget gadget, Node scriptTag)", "full_signature": "protected void injectDefaultPrefs(Gadget gadget, Node scriptTag)", "class_method_signature": "RenderingGadgetRewriter.injectDefaultPrefs(Gadget gadget, Node scriptTag)", "testcase": false, "constructor": false}, {"identifier": "injectPreloads", "parameters": "(Gadget gadget, Node scriptTag)", "modifiers": "protected", "return": "void", "signature": "void injectPreloads(Gadget gadget, Node scriptTag)", "full_signature": "protected void injectPreloads(Gadget gadget, Node scriptTag)", "class_method_signature": "RenderingGadgetRewriter.injectPreloads(Gadget gadget, Node scriptTag)", "testcase": false, "constructor": false}], "file": "java/gadgets/src/main/java/org/apache/shindig/gadgets/render/RenderingGadgetRewriter.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(Gadget gadget, MutableContent mutableContent)", "modifiers": "public", "return": "void", "body": "public void rewrite(Gadget gadget, MutableContent mutableContent) throws RewritingException {\n    // Don't touch sanitized gadgets.\n    if (gadget.sanitizeOutput()) {\n      return;\n    }\n\n    try {\n      GadgetContext context = gadget.getContext();\n      MessageBundle bundle = messageBundleFactory.getBundle(gadget.getSpec(), context.getLocale(),\n              context.getIgnoreCache(), context.getContainer(), context.getView());\n\n      MessageELResolver messageELResolver = new MessageELResolver(expressions, bundle);\n\n      this.elContext = expressions.newELContext(messageELResolver,\n              new GadgetELResolver(gadget.getContext()));\n      this.elContext.putContext(GadgetContext.class, elContext);\n      Document document = mutableContent.getDocument();\n      processChildNodes(document);\n      Element head = (Element) DomUtil.getFirstNamedChildNode(document.getDocumentElement(), \"head\");\n\n      Element title = document.createElement(\"title\");\n      ModulePrefs mps = gadget.getSpec().getModulePrefs();\n      String titleValue = \"default title\";\n      if (mps != null && mps.getTitle() != null && !mps.getTitle().isEmpty()){\n        titleValue = mps.getTitle();\n      }\n      title.appendChild(title.getOwnerDocument().createTextNode(titleValue));\n\n      // Insert new content before any of the existing children of the head element\n      Node firstHeadChild = head.getFirstChild();\n\n      head.insertBefore(title, firstHeadChild);\n\n      Element injectedStyle = document.createElement(\"style\");\n      injectedStyle.setAttribute(\"type\", \"text/css\");\n      head.insertBefore(injectedStyle, firstHeadChild);\n\n      // Inject default scrolling to the body\n      this.injectDefaultScrolling(injectedStyle);\n\n      // Only inject default styles if no doctype was specified.\n      if (document.getDoctype() == null) {\n        injectedStyle.appendChild(injectedStyle.getOwnerDocument().\n            createTextNode(DEFAULT_CSS));\n      }\n      // Override & insert DocType if Gadget is written for OpenSocial 2.0 or greater,\n      // if quirksmode is not set\n      if(gadget.getSpecificationVersion().isEqualOrGreaterThan(\"2.0.0\")\n          && !gadget.useQuirksMode()){\n        String container = gadget.getContext().getContainer();\n        String doctype_qname = defaultDoctypeQName;\n        String doctype_sysid = defaultDoctypeSysId;\n        String doctype_pubid = defaultDoctypePubId;\n        String value = containerConfig.getString(container, REWRITE_DOCTYPE_QNAME);\n        if(value != null){\n          doctype_qname = value;\n        }\n        value = containerConfig.getString(container, REWRITE_DOCTYPE_SYSID);\n        if(value != null){\n          doctype_sysid = value;\n        }\n        value = containerConfig.getString(container, REWRITE_DOCTYPE_PUBID);\n        if(value != null){\n          doctype_pubid = value;\n        }\n        //Don't inject DOCTYPE if QName is null\n        if(doctype_qname != null){\n          DocumentType docTypeNode = document.getImplementation()\n              .createDocumentType(doctype_qname, doctype_pubid, doctype_sysid);\n          if(document.getDoctype() != null){\n            document.removeChild(document.getDoctype());\n          }\n          document.insertBefore(docTypeNode, document.getFirstChild());\n        }\n      }\n\n      Element html= (Element)document.getElementsByTagName(\"html\").item(0);\n      if(html != null){\n        Locale locale = gadget.getContext().getLocale();\n        if (locale != null) {\n          String locStr = locale.toString();\n          String locValue = locStr.replace(\"_\", \"-\");\n          html.setAttribute(\"lang\", locValue);\n          html.setAttribute(\"xml:lang\", locValue);\n        }\n      }\n\n      injectBaseTag(gadget, head);\n      injectGadgetBeacon(gadget, head, firstHeadChild);\n      injectFeatureLibraries(gadget, head, firstHeadChild);\n\n      // This can be one script block.\n      Element mainScriptTag = document.createElement(\"script\");\n      injectMessageBundles(bundle, mainScriptTag);\n      injectDefaultPrefs(gadget, mainScriptTag);\n      injectPreloads(gadget, mainScriptTag);\n\n      // We need to inject our script before any developer scripts.\n      head.insertBefore(mainScriptTag, firstHeadChild);\n\n      Element body = (Element)DomUtil.getFirstNamedChildNode(document.getDocumentElement(), \"body\");\n\n      body.setAttribute(\"dir\", bundle.getLanguageDirection());\n\n      // With Caja enabled, onloads are triggered by features/caja/taming.js\n      if (!gadget.requiresCaja()) {\n        injectOnLoadHandlers(body);\n      }\n\n      mutableContent.documentChanged();\n    } catch (GadgetException e) {\n      throw new RewritingException(e.getLocalizedMessage(), e, e.getHttpStatusCode());\n    }\n  }", "signature": "void rewrite(Gadget gadget, MutableContent mutableContent)", "full_signature": "public void rewrite(Gadget gadget, MutableContent mutableContent)", "class_method_signature": "RenderingGadgetRewriter.rewrite(Gadget gadget, MutableContent mutableContent)", "testcase": false, "constructor": false, "invocations": ["sanitizeOutput", "getContext", "getBundle", "getSpec", "getLocale", "getIgnoreCache", "getContainer", "getView", "newELContext", "getContext", "putContext", "getDocument", "processChildNodes", "getFirstNamedChildNode", "getDocumentElement", "createElement", "getModulePrefs", "getSpec", "getTitle", "isEmpty", "getTitle", "getTitle", "appendChild", "createTextNode", "getOwnerDocument", "getFirstChild", "insertBefore", "createElement", "setAttribute", "insertBefore", "injectDefaultScrolling", "getDoctype", "appendChild", "createTextNode", "getOwnerDocument", "isEqualOrGreaterThan", "getSpecificationVersion", "useQuirksMode", "getContainer", "getContext", "getString", "getString", "getString", "createDocumentType", "getImplementation", "getDoctype", "removeChild", "getDoctype", "insertBefore", "getFirstChild", "item", "getElementsByTagName", "getLocale", "getContext", "toString", "replace", "setAttribute", "setAttribute", "injectBaseTag", "injectGadgetBeacon", "injectFeatureLibraries", "createElement", "injectMessageBundles", "injectDefaultPrefs", "injectPreloads", "insertBefore", "getFirstNamedChildNode", "getDocumentElement", "setAttribute", "getLanguageDirection", "requiresCaja", "injectOnLoadHandlers", "documentChanged", "getLocalizedMessage", "getHttpStatusCode"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}