{"test_class": {"identifier": "DomUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String XML =\n      \"<root>\" +\n      \"  <other>whatever</other>\" +\n      \"  <element>zero</element>\" +\n      \"  <ElEmEnT>one</ElEmEnT>\" +\n      \"  <element>two</element>\" +\n      \"  <other>not real</other>\" +\n      \"</root>\";", "modifier": "private static final", "type": "String", "declarator": "XML =\n      \"<root>\" +\n      \"  <other>whatever</other>\" +\n      \"  <element>zero</element>\" +\n      \"  <ElEmEnT>one</ElEmEnT>\" +\n      \"  <element>two</element>\" +\n      \"  <other>not real</other>\" +\n      \"</root>\"", "var_name": "XML"}], "file": "java/common/src/test/java/org/apache/shindig/common/xml/DomUtilTest.java"}, "test_case": {"identifier": "getElementsByTagNameCaseInsensitive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getElementsByTagNameCaseInsensitive() throws Exception {\n    Element root = XmlUtil.parse(XML);\n    Document doc = root.getOwnerDocument();\n    List<Element> elements\n        = DomUtil.getElementsByTagNameCaseInsensitive(doc, ImmutableSet.of(\"element\"));\n    assertEquals(\"zero\", elements.get(0).getTextContent());\n    assertEquals(\"one\", elements.get(1).getTextContent());\n    assertEquals(\"two\", elements.get(2).getTextContent());\n  }", "signature": "void getElementsByTagNameCaseInsensitive()", "full_signature": "@Test public void getElementsByTagNameCaseInsensitive()", "class_method_signature": "DomUtilTest.getElementsByTagNameCaseInsensitive()", "testcase": true, "constructor": false, "invocations": ["parse", "getOwnerDocument", "getElementsByTagNameCaseInsensitive", "of", "assertEquals", "getTextContent", "get", "assertEquals", "getTextContent", "get", "assertEquals", "getTextContent", "get"]}, "focal_class": {"identifier": "DomUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "DomUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " DomUtil()", "full_signature": "private  DomUtil()", "class_method_signature": "DomUtil.DomUtil()", "testcase": false, "constructor": true}, {"identifier": "getFirstNamedChildNode", "parameters": "(Node root, String nodeName)", "modifiers": "public static", "return": "Node", "signature": "Node getFirstNamedChildNode(Node root, String nodeName)", "full_signature": "public static Node getFirstNamedChildNode(Node root, String nodeName)", "class_method_signature": "DomUtil.getFirstNamedChildNode(Node root, String nodeName)", "testcase": false, "constructor": false}, {"identifier": "getLastNamedChildNode", "parameters": "(Node root, String nodeName)", "modifiers": "public static", "return": "Node", "signature": "Node getLastNamedChildNode(Node root, String nodeName)", "full_signature": "public static Node getLastNamedChildNode(Node root, String nodeName)", "class_method_signature": "DomUtil.getLastNamedChildNode(Node root, String nodeName)", "testcase": false, "constructor": false}, {"identifier": "getElementsByTagNameCaseInsensitive", "parameters": "(Document doc,\n      final Set<String> lowerCaseNames)", "modifiers": "public static", "return": "List<Element>", "signature": "List<Element> getElementsByTagNameCaseInsensitive(Document doc,\n      final Set<String> lowerCaseNames)", "full_signature": "public static List<Element> getElementsByTagNameCaseInsensitive(Document doc,\n      final Set<String> lowerCaseNames)", "class_method_signature": "DomUtil.getElementsByTagNameCaseInsensitive(Document doc,\n      final Set<String> lowerCaseNames)", "testcase": false, "constructor": false}], "file": "java/common/src/main/java/org/apache/shindig/common/xml/DomUtil.java"}, "focal_method": {"identifier": "getElementsByTagNameCaseInsensitive", "parameters": "(Document doc,\n      final Set<String> lowerCaseNames)", "modifiers": "public static", "return": "List<Element>", "body": "public static List<Element> getElementsByTagNameCaseInsensitive(Document doc,\n      final Set<String> lowerCaseNames) {\n    final List<Element> result = Lists.newArrayList();\n    NodeIterator nodeIterator = ((DocumentTraversal) doc)\n        .createNodeIterator(doc, NodeFilter.SHOW_ELEMENT,\n            new NodeFilter() {\n              public short acceptNode(Node n) {\n                if (lowerCaseNames.contains(n.getNodeName().toLowerCase())) {\n                  return NodeFilter.FILTER_ACCEPT;\n                }\n                return NodeFilter.FILTER_REJECT;\n              }\n            }, false);\n    for (Node n = nodeIterator.nextNode(); n != null ; n = nodeIterator.nextNode()) {\n      result.add((Element)n);\n    }\n    return result;\n  }", "signature": "List<Element> getElementsByTagNameCaseInsensitive(Document doc,\n      final Set<String> lowerCaseNames)", "full_signature": "public static List<Element> getElementsByTagNameCaseInsensitive(Document doc,\n      final Set<String> lowerCaseNames)", "class_method_signature": "DomUtil.getElementsByTagNameCaseInsensitive(Document doc,\n      final Set<String> lowerCaseNames)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "createNodeIterator", "contains", "toLowerCase", "getNodeName", "nextNode", "nextNode", "add"]}, "repository": {"repo_id": 206633, "url": "https://github.com/apache/shindig", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 65, "size": 18767, "license": "licensed"}}