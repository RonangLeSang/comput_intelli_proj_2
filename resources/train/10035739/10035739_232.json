{"test_class": {"identifier": "MainTest", "superclass": "", "interfaces": "", "fields": [], "file": "android-liquibase/android-liquibase-core/src/test/java/liquibase/integration/commandline/MainTest.java"}, "test_case": {"identifier": "parameterWithoutDash", "parameters": "()", "modifiers": "@Test(expected = CommandLineParsingException.class) public", "return": "void", "body": "@Test(expected = CommandLineParsingException.class)\n    public void parameterWithoutDash() throws Exception {\n        String[] args = new String[]{\n                \"promptForNonLocalDatabase=true\",\n                \"update\",\n        };\n\n        Main cli = new Main();\n        cli.parseOptions(args);\n    }", "signature": "void parameterWithoutDash()", "full_signature": "@Test(expected = CommandLineParsingException.class) public void parameterWithoutDash()", "class_method_signature": "MainTest.parameterWithoutDash()", "testcase": true, "constructor": false, "invocations": ["parseOptions"]}, "focal_class": {"identifier": "Main", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected ClassLoader classLoader;", "modifier": "protected", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "protected String driver;", "modifier": "protected", "type": "String", "declarator": "driver", "var_name": "driver"}, {"original_string": "protected String username;", "modifier": "protected", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "protected String password;", "modifier": "protected", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "protected String url;", "modifier": "protected", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "protected String databaseClass;", "modifier": "protected", "type": "String", "declarator": "databaseClass", "var_name": "databaseClass"}, {"original_string": "protected String defaultSchemaName;", "modifier": "protected", "type": "String", "declarator": "defaultSchemaName", "var_name": "defaultSchemaName"}, {"original_string": "protected String changeLogFile;", "modifier": "protected", "type": "String", "declarator": "changeLogFile", "var_name": "changeLogFile"}, {"original_string": "protected String classpath;", "modifier": "protected", "type": "String", "declarator": "classpath", "var_name": "classpath"}, {"original_string": "protected String contexts;", "modifier": "protected", "type": "String", "declarator": "contexts", "var_name": "contexts"}, {"original_string": "protected String driverPropertiesFile;", "modifier": "protected", "type": "String", "declarator": "driverPropertiesFile", "var_name": "driverPropertiesFile"}, {"original_string": "protected Boolean promptForNonLocalDatabase = null;", "modifier": "protected", "type": "Boolean", "declarator": "promptForNonLocalDatabase = null", "var_name": "promptForNonLocalDatabase"}, {"original_string": "protected Boolean includeSystemClasspath;", "modifier": "protected", "type": "Boolean", "declarator": "includeSystemClasspath", "var_name": "includeSystemClasspath"}, {"original_string": "protected String defaultsFile = \"liquibase.properties\";", "modifier": "protected", "type": "String", "declarator": "defaultsFile = \"liquibase.properties\"", "var_name": "defaultsFile"}, {"original_string": "protected String diffTypes;", "modifier": "protected", "type": "String", "declarator": "diffTypes", "var_name": "diffTypes"}, {"original_string": "protected String changeSetAuthor;", "modifier": "protected", "type": "String", "declarator": "changeSetAuthor", "var_name": "changeSetAuthor"}, {"original_string": "protected String changeSetContext;", "modifier": "protected", "type": "String", "declarator": "changeSetContext", "var_name": "changeSetContext"}, {"original_string": "protected String dataOutputDirectory;", "modifier": "protected", "type": "String", "declarator": "dataOutputDirectory", "var_name": "dataOutputDirectory"}, {"original_string": "protected String referenceDriver;", "modifier": "protected", "type": "String", "declarator": "referenceDriver", "var_name": "referenceDriver"}, {"original_string": "protected String referenceUrl;", "modifier": "protected", "type": "String", "declarator": "referenceUrl", "var_name": "referenceUrl"}, {"original_string": "protected String referenceUsername;", "modifier": "protected", "type": "String", "declarator": "referenceUsername", "var_name": "referenceUsername"}, {"original_string": "protected String referencePassword;", "modifier": "protected", "type": "String", "declarator": "referencePassword", "var_name": "referencePassword"}, {"original_string": "protected String currentDateTimeFunction;", "modifier": "protected", "type": "String", "declarator": "currentDateTimeFunction", "var_name": "currentDateTimeFunction"}, {"original_string": "protected String command;", "modifier": "protected", "type": "String", "declarator": "command", "var_name": "command"}, {"original_string": "protected Set<String> commandParams = new LinkedHashSet<String>();", "modifier": "protected", "type": "Set<String>", "declarator": "commandParams = new LinkedHashSet<String>()", "var_name": "commandParams"}, {"original_string": "protected String logLevel;", "modifier": "protected", "type": "String", "declarator": "logLevel", "var_name": "logLevel"}, {"original_string": "protected String logFile;", "modifier": "protected", "type": "String", "declarator": "logFile", "var_name": "logFile"}, {"original_string": "protected Map<String, Object> changeLogParameters = new HashMap<String, Object>();", "modifier": "protected", "type": "Map<String, Object>", "declarator": "changeLogParameters = new HashMap<String, Object>()", "var_name": "changeLogParameters"}], "methods": [{"identifier": "main", "parameters": "(String args[])", "modifiers": "public static", "return": "void", "signature": "void main(String args[])", "full_signature": "public static void main(String args[])", "class_method_signature": "Main.main(String args[])", "testcase": false, "constructor": false}, {"identifier": "generateLogLevelWarningMessage", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String generateLogLevelWarningMessage()", "full_signature": "private static String generateLogLevelWarningMessage()", "class_method_signature": "Main.generateLogLevelWarningMessage()", "testcase": false, "constructor": false}, {"identifier": "fixupArgs", "parameters": "(String[] args)", "modifiers": "protected", "return": "String[]", "signature": "String[] fixupArgs(String[] args)", "full_signature": "protected String[] fixupArgs(String[] args)", "class_method_signature": "Main.fixupArgs(String[] args)", "testcase": false, "constructor": false}, {"identifier": "checkSetup", "parameters": "()", "modifiers": "protected", "return": "List<String>", "signature": "List<String> checkSetup()", "full_signature": "protected List<String> checkSetup()", "class_method_signature": "Main.checkSetup()", "testcase": false, "constructor": false}, {"identifier": "checkForUnexpectedCommandParameter", "parameters": "(List<String> messages)", "modifiers": "private", "return": "void", "signature": "void checkForUnexpectedCommandParameter(List<String> messages)", "full_signature": "private void checkForUnexpectedCommandParameter(List<String> messages)", "class_method_signature": "Main.checkForUnexpectedCommandParameter(List<String> messages)", "testcase": false, "constructor": false}, {"identifier": "validateCommandParameters", "parameters": "(final List<String> messages)", "modifiers": "private", "return": "void", "signature": "void validateCommandParameters(final List<String> messages)", "full_signature": "private void validateCommandParameters(final List<String> messages)", "class_method_signature": "Main.validateCommandParameters(final List<String> messages)", "testcase": false, "constructor": false}, {"identifier": "checkForMissingCommandParameters", "parameters": "(final List<String> messages)", "modifiers": "private", "return": "void", "signature": "void checkForMissingCommandParameters(final List<String> messages)", "full_signature": "private void checkForMissingCommandParameters(final List<String> messages)", "class_method_signature": "Main.checkForMissingCommandParameters(final List<String> messages)", "testcase": false, "constructor": false}, {"identifier": "checkForMalformedCommandParameters", "parameters": "(final List<String> messages)", "modifiers": "private", "return": "void", "signature": "void checkForMalformedCommandParameters(final List<String> messages)", "full_signature": "private void checkForMalformedCommandParameters(final List<String> messages)", "class_method_signature": "Main.checkForMalformedCommandParameters(final List<String> messages)", "testcase": false, "constructor": false}, {"identifier": "isChangeLogRequired", "parameters": "(String command)", "modifiers": "private", "return": "boolean", "signature": "boolean isChangeLogRequired(String command)", "full_signature": "private boolean isChangeLogRequired(String command)", "class_method_signature": "Main.isChangeLogRequired(String command)", "testcase": false, "constructor": false}, {"identifier": "isCommand", "parameters": "(String arg)", "modifiers": "private", "return": "boolean", "signature": "boolean isCommand(String arg)", "full_signature": "private boolean isCommand(String arg)", "class_method_signature": "Main.isCommand(String arg)", "testcase": false, "constructor": false}, {"identifier": "isNoArgCommand", "parameters": "(String arg)", "modifiers": "private", "return": "boolean", "signature": "boolean isNoArgCommand(String arg)", "full_signature": "private boolean isNoArgCommand(String arg)", "class_method_signature": "Main.isNoArgCommand(String arg)", "testcase": false, "constructor": false}, {"identifier": "parsePropertiesFile", "parameters": "(InputStream propertiesInputStream)", "modifiers": "protected", "return": "void", "signature": "void parsePropertiesFile(InputStream propertiesInputStream)", "full_signature": "protected void parsePropertiesFile(InputStream propertiesInputStream)", "class_method_signature": "Main.parsePropertiesFile(InputStream propertiesInputStream)", "testcase": false, "constructor": false}, {"identifier": "printHelp", "parameters": "(List<String> errorMessages, PrintStream stream)", "modifiers": "protected", "return": "void", "signature": "void printHelp(List<String> errorMessages, PrintStream stream)", "full_signature": "protected void printHelp(List<String> errorMessages, PrintStream stream)", "class_method_signature": "Main.printHelp(List<String> errorMessages, PrintStream stream)", "testcase": false, "constructor": false}, {"identifier": "printWarning", "parameters": "(List<String> warningMessages, PrintStream stream)", "modifiers": "protected", "return": "void", "signature": "void printWarning(List<String> warningMessages, PrintStream stream)", "full_signature": "protected void printWarning(List<String> warningMessages, PrintStream stream)", "class_method_signature": "Main.printWarning(List<String> warningMessages, PrintStream stream)", "testcase": false, "constructor": false}, {"identifier": "printHelp", "parameters": "(PrintStream stream)", "modifiers": "protected", "return": "void", "signature": "void printHelp(PrintStream stream)", "full_signature": "protected void printHelp(PrintStream stream)", "class_method_signature": "Main.printHelp(PrintStream stream)", "testcase": false, "constructor": false}, {"identifier": "Main", "parameters": "()", "modifiers": "public", "return": "", "signature": " Main()", "full_signature": "public  Main()", "class_method_signature": "Main.Main()", "testcase": false, "constructor": true}, {"identifier": "parseOptions", "parameters": "(String[] args)", "modifiers": "protected", "return": "void", "signature": "void parseOptions(String[] args)", "full_signature": "protected void parseOptions(String[] args)", "class_method_signature": "Main.parseOptions(String[] args)", "testcase": false, "constructor": false}, {"identifier": "splitArg", "parameters": "(String arg)", "modifiers": "private", "return": "String[]", "signature": "String[] splitArg(String arg)", "full_signature": "private String[] splitArg(String arg)", "class_method_signature": "Main.splitArg(String arg)", "testcase": false, "constructor": false}, {"identifier": "applyDefaults", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void applyDefaults()", "full_signature": "protected void applyDefaults()", "class_method_signature": "Main.applyDefaults()", "testcase": false, "constructor": false}, {"identifier": "configureClassLoader", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void configureClassLoader()", "full_signature": "protected void configureClassLoader()", "class_method_signature": "Main.configureClassLoader()", "testcase": false, "constructor": false}, {"identifier": "addWarFileClasspathEntries", "parameters": "(File classPathFile, List<URL> urls)", "modifiers": "private", "return": "void", "signature": "void addWarFileClasspathEntries(File classPathFile, List<URL> urls)", "full_signature": "private void addWarFileClasspathEntries(File classPathFile, List<URL> urls)", "class_method_signature": "Main.addWarFileClasspathEntries(File classPathFile, List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(JarFile jar, JarEntry entry)", "modifiers": "private", "return": "File", "signature": "File extract(JarFile jar, JarEntry entry)", "full_signature": "private File extract(JarFile jar, JarEntry entry)", "class_method_signature": "Main.extract(JarFile jar, JarEntry entry)", "testcase": false, "constructor": false}, {"identifier": "doMigration", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void doMigration()", "full_signature": "protected void doMigration()", "class_method_signature": "Main.doMigration()", "testcase": false, "constructor": false}, {"identifier": "getCommandParam", "parameters": "(String paramName)", "modifiers": "private", "return": "String", "signature": "String getCommandParam(String paramName)", "full_signature": "private String getCommandParam(String paramName)", "class_method_signature": "Main.getCommandParam(String paramName)", "testcase": false, "constructor": false}, {"identifier": "createReferenceDatabaseFromCommandParams", "parameters": "(Set<String> commandParams)", "modifiers": "private", "return": "Database", "signature": "Database createReferenceDatabaseFromCommandParams(Set<String> commandParams)", "full_signature": "private Database createReferenceDatabaseFromCommandParams(Set<String> commandParams)", "class_method_signature": "Main.createReferenceDatabaseFromCommandParams(Set<String> commandParams)", "testcase": false, "constructor": false}, {"identifier": "getOutputWriter", "parameters": "()", "modifiers": "private", "return": "Writer", "signature": "Writer getOutputWriter()", "full_signature": "private Writer getOutputWriter()", "class_method_signature": "Main.getOutputWriter()", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "public boolean isWindows()", "class_method_signature": "Main.isWindows()", "testcase": false, "constructor": false}], "file": "android-liquibase/android-liquibase-core/src/main/java/liquibase/integration/commandline/Main.java"}, "focal_method": {"identifier": "parseOptions", "parameters": "(String[] args)", "modifiers": "protected", "return": "void", "body": "protected void parseOptions(String[] args) throws CommandLineParsingException {\n        args = fixupArgs(args);\n\n        boolean seenCommand = false;\n        for (String arg : args) {\n            if (isCommand(arg)) {\n                this.command = arg;\n                if (this.command.equalsIgnoreCase(\"migrate\")) {\n                    this.command = \"update\";\n                } else if (this.command.equalsIgnoreCase(\"migrateSQL\")) {\n                    this.command = \"updateSQL\";\n                }\n                seenCommand = true;\n            } else if (seenCommand) {\n                if (arg.startsWith(\"-D\")) {\n                    String[] splitArg = splitArg(arg);\n\n                    String attributeName = splitArg[0].replaceFirst(\"^-D\", \"\");\n                    String value = splitArg[1];\n\n                    changeLogParameters.put(attributeName, value);\n                } else {\n                    commandParams.add(arg);\n                }\n            } else if (arg.startsWith(\"--\")) {\n                String[] splitArg = splitArg(arg);\n\n                String attributeName = splitArg[0];\n                String value = splitArg[1];\n\n                try {\n                    Field field = getClass().getDeclaredField(attributeName);\n                    if (field.getType().equals(Boolean.class)) {\n                        field.set(this, Boolean.valueOf(value));\n                    } else {\n                        field.set(this, value);\n                    }\n                } catch (Exception e) {\n                    throw new CommandLineParsingException(\"Unknown parameter: '\" + attributeName + \"'\");\n                }\n//            } else if(arg.equals(\"-p\")) {\n//            \t//Prompt for password\n//            \tpassword = new String(System.console().readPassword(\"DB Password:\"));\n//            } else if(arg.equals(\"-rp\")) {\n//            \t//Prompt for reference password\n//            \treferencePassword = new String(System.console().readPassword(\"Reference DB Password:\"));\n            } else {\n                throw new CommandLineParsingException(\"Unexpected value \" + arg + \": parameters must start with a '--'\");\n            }\n        }\n\n    }", "signature": "void parseOptions(String[] args)", "full_signature": "protected void parseOptions(String[] args)", "class_method_signature": "Main.parseOptions(String[] args)", "testcase": false, "constructor": false, "invocations": ["fixupArgs", "isCommand", "equalsIgnoreCase", "equalsIgnoreCase", "startsWith", "splitArg", "replaceFirst", "put", "add", "startsWith", "splitArg", "getDeclaredField", "getClass", "equals", "getType", "set", "valueOf", "set"]}, "repository": {"repo_id": 10035739, "url": "https://github.com/openforis/android-ports", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 12, "size": 2775, "license": "licensed"}}