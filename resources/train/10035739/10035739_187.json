{"test_class": {"identifier": "CreateTableGeneratorTest", "superclass": "extends AbstractSqlGeneratorTest<CreateTableStatement>", "interfaces": "", "fields": [{"original_string": "protected static final String TABLE_NAME = \"TABLE_NAME\";", "modifier": "protected static final", "type": "String", "declarator": "TABLE_NAME = \"TABLE_NAME\"", "var_name": "TABLE_NAME"}, {"original_string": "protected static final String SCHEMA_NAME = \"SCHEMA_NAME\";", "modifier": "protected static final", "type": "String", "declarator": "SCHEMA_NAME = \"SCHEMA_NAME\"", "var_name": "SCHEMA_NAME"}, {"original_string": "protected static final String COLUMN_NAME1 = \"COLUMN1_NAME\";", "modifier": "protected static final", "type": "String", "declarator": "COLUMN_NAME1 = \"COLUMN1_NAME\"", "var_name": "COLUMN_NAME1"}], "file": "android-liquibase/android-liquibase-core/src/test/java/liquibase/sqlgenerator/core/CreateTableGeneratorTest.java"}, "test_case": {"identifier": "testWithColumnWithDefaultValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithColumnWithDefaultValue() {\n        for (Database database : TestContext.getInstance().getAllDatabases()) {\n            if (database instanceof OracleDatabase) {\n                CreateTableStatement statement = new CreateTableStatement(SCHEMA_NAME, TABLE_NAME);\n                statement.addColumn(COLUMN_NAME1, TypeConverterFactory.getInstance().findTypeConverter(database).getDataType(\"java.sql.Types.TIMESTAMP\", false), new ColumnConfig().setDefaultValue(\"null\").getDefaultValueObject());\n                if (shouldBeImplementation(database)) {\n                    assertEquals(\"CREATE TABLE SCHEMA_NAME.TABLE_NAME (COLUMN1_NAME TIMESTAMP DEFAULT null)\", this.generatorUnderTest.generateSql(statement, database, null)[0].toSql());\n                }\n            }\n        }\n    }", "signature": "void testWithColumnWithDefaultValue()", "full_signature": "@Test public void testWithColumnWithDefaultValue()", "class_method_signature": "CreateTableGeneratorTest.testWithColumnWithDefaultValue()", "testcase": true, "constructor": false, "invocations": ["getAllDatabases", "getInstance", "addColumn", "getDataType", "findTypeConverter", "getInstance", "getDefaultValueObject", "setDefaultValue", "shouldBeImplementation", "assertEquals", "toSql", "generateSql"]}, "focal_class": {"identifier": "CreateTableGenerator", "superclass": "extends AbstractSqlGenerator<CreateTableStatement>", "interfaces": "", "fields": [], "methods": [{"identifier": "validate", "parameters": "(CreateTableStatement createTableStatement, Database database, SqlGeneratorChain sqlGeneratorChain)", "modifiers": "public", "return": "ValidationErrors", "signature": "ValidationErrors validate(CreateTableStatement createTableStatement, Database database, SqlGeneratorChain sqlGeneratorChain)", "full_signature": "public ValidationErrors validate(CreateTableStatement createTableStatement, Database database, SqlGeneratorChain sqlGeneratorChain)", "class_method_signature": "CreateTableGenerator.validate(CreateTableStatement createTableStatement, Database database, SqlGeneratorChain sqlGeneratorChain)", "testcase": false, "constructor": false}, {"identifier": "generateSql", "parameters": "(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain)", "modifiers": "public", "return": "Sql[]", "signature": "Sql[] generateSql(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain)", "full_signature": "public Sql[] generateSql(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain)", "class_method_signature": "CreateTableGenerator.generateSql(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain)", "testcase": false, "constructor": false}, {"identifier": "constraintNameAfterUnique", "parameters": "(Database database)", "modifiers": "private", "return": "boolean", "signature": "boolean constraintNameAfterUnique(Database database)", "full_signature": "private boolean constraintNameAfterUnique(Database database)", "class_method_signature": "CreateTableGenerator.constraintNameAfterUnique(Database database)", "testcase": false, "constructor": false}], "file": "android-liquibase/android-liquibase-core/src/main/java/liquibase/sqlgenerator/core/CreateTableGenerator.java"}, "focal_method": {"identifier": "generateSql", "parameters": "(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain)", "modifiers": "public", "return": "Sql[]", "body": "public Sql[] generateSql(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain) {\n            StringBuffer buffer = new StringBuffer();\n        buffer.append(\"CREATE TABLE \").append(database.escapeTableName(statement.getSchemaName(), statement.getTableName())).append(\" \");\n        buffer.append(\"(\");\n        \n        boolean isSinglePrimaryKeyColumn = statement.getPrimaryKeyConstraint() != null\n            && statement.getPrimaryKeyConstraint().getColumns().size() == 1;\n        \n        boolean isPrimaryKeyAutoIncrement = false;\n        \n        Iterator<String> columnIterator = statement.getColumns().iterator();\n        while (columnIterator.hasNext()) {\n            String column = columnIterator.next();\n            \n            buffer.append(database.escapeColumnName(statement.getSchemaName(), statement.getTableName(), column));\n            buffer.append(\" \").append(statement.getColumnTypes().get(column));\n            \n            AutoIncrementConstraint autoIncrementConstraint = null;\n            \n            for (AutoIncrementConstraint currentAutoIncrementConstraint : statement.getAutoIncrementConstraints()) {\n            \tif (column.equals(currentAutoIncrementConstraint.getColumnName())) {\n            \t\tautoIncrementConstraint = currentAutoIncrementConstraint;\n            \t\tbreak;\n            \t}\n            }\n\n            boolean isAutoIncrementColumn = autoIncrementConstraint != null;            \n            boolean isPrimaryKeyColumn = statement.getPrimaryKeyConstraint() != null\n            \t\t&& statement.getPrimaryKeyConstraint().getColumns().contains(column);\n            isPrimaryKeyAutoIncrement = isPrimaryKeyAutoIncrement\n            \t\t|| isPrimaryKeyColumn && isAutoIncrementColumn;\n            \n            if ((database instanceof SQLiteDatabase) &&\n\t\t\t\t\tisSinglePrimaryKeyColumn &&\n\t\t\t\t\tisPrimaryKeyColumn &&\n\t\t\t\t\tisAutoIncrementColumn) {\n            \tString pkName = StringUtils.trimToNull(statement.getPrimaryKeyConstraint().getConstraintName());\n\t            if (pkName == null) {\n\t                pkName = database.generatePrimaryKeyName(statement.getTableName());\n\t            }\n                if (pkName != null) {\n                    buffer.append(\" CONSTRAINT \");\n                    buffer.append(database.escapeConstraintName(pkName));\n                }\n                buffer.append(\" PRIMARY KEY AUTOINCREMENT\");\n\t\t\t}\n\n            if (statement.getDefaultValue(column) != null) {\n                Object defaultValue = statement.getDefaultValue(column);\n                if (database instanceof MSSQLDatabase) {\n                    buffer.append(\" CONSTRAINT \").append(((MSSQLDatabase) database).generateDefaultConstraintName(statement.getTableName(), column));\n                }\n                buffer.append(\" DEFAULT \");\n                buffer.append(statement.getColumnTypes().get(column).convertObjectToString(defaultValue, database));\n            }\n\n            if (isAutoIncrementColumn && ! (database instanceof SQLiteDatabase)) {\n            \t// TODO: check if database supports auto increment on non primary key column\n                if (database.supportsAutoIncrement()) {\n                \tString autoIncrementClause = database.getAutoIncrementClause(autoIncrementConstraint.getStartWith(), autoIncrementConstraint.getIncrementBy());\n                \n                \tif (!\"\".equals(autoIncrementClause)) {\n                \t\tbuffer.append(\" \").append(autoIncrementClause);\n                \t}\n                } else {\n                    LogFactory.getLogger().warning(database.getTypeName()+\" does not support autoincrement columns as request for \"+(database.escapeTableName(statement.getSchemaName(), statement.getTableName())));\n                }\n            }\n\n            if (statement.getNotNullColumns().contains(column)) {\n                buffer.append(\" NOT NULL\");\n            } else {\n                if (database instanceof SybaseDatabase || database instanceof SybaseASADatabase || database instanceof MySQLDatabase) {\n                    if (database instanceof MySQLDatabase && statement.getColumnTypes().get(column).getDataTypeName().equalsIgnoreCase(\"timestamp\")) {\n                        //don't append null\n                    } else {\n                        buffer.append(\" NULL\");\n                    }\n\n                }\n            }\n\n            if (database instanceof InformixDatabase && isSinglePrimaryKeyColumn) {\n            \tbuffer.append(\" PRIMARY KEY\");\n            }\n\n            if (columnIterator.hasNext()) {\n                buffer.append(\", \");\n            }\n        }\n\n        buffer.append(\",\");\n\n        // TODO informixdb\n        if (!( (database instanceof SQLiteDatabase) &&\n\t\t\t\tisSinglePrimaryKeyColumn &&\n\t\t\t\tisPrimaryKeyAutoIncrement) &&\n\n\t\t\t\t!((database instanceof InformixDatabase) &&\n\t\t\t\tisSinglePrimaryKeyColumn\n\t\t\t\t)) {\n        \t// ...skip this code block for sqlite if a single column primary key\n        \t// with an autoincrement constraint exists.\n        \t// This constraint is added after the column type.\n\n\t        if (statement.getPrimaryKeyConstraint() != null && statement.getPrimaryKeyConstraint().getColumns().size() > 0) {\n\t        \tif (!(database instanceof InformixDatabase)) {\n\t\t            String pkName = StringUtils.trimToNull(statement.getPrimaryKeyConstraint().getConstraintName());\n\t\t            if (pkName == null) {\n\t\t                // TODO ORA-00972: identifier is too long\n\t\t\t            // If tableName lenght is more then 28 symbols\n\t\t\t            // then generated pkName will be incorrect\n\t\t\t            pkName = database.generatePrimaryKeyName(statement.getTableName());\n\t\t            }\n                    if (pkName != null) {\n                        buffer.append(\" CONSTRAINT \");\n                        buffer.append(database.escapeConstraintName(pkName));\n                    }\n                }\n\t            buffer.append(\" PRIMARY KEY (\");\n\t            buffer.append(database.escapeColumnNameList(StringUtils.join(statement.getPrimaryKeyConstraint().getColumns(), \", \")));\n\t            buffer.append(\")\");\n\t\t        // Setting up table space for PK's index if it exist\n\t\t        if (database instanceof OracleDatabase &&\n\t\t            statement.getPrimaryKeyConstraint().getTablespace() != null) {\n\t\t\t        buffer.append(\" USING INDEX TABLESPACE \");\n\t\t\t        buffer.append(statement.getPrimaryKeyConstraint().getTablespace());\n\t\t        }\n\t            buffer.append(\",\");\n\t        }\n        }\n\n        for (ForeignKeyConstraint fkConstraint : statement.getForeignKeyConstraints()) {\n        \tif (!(database instanceof InformixDatabase)) {\n        \t\tbuffer.append(\" CONSTRAINT \");\n                buffer.append(database.escapeConstraintName(fkConstraint.getForeignKeyName()));\n        \t}\n            String referencesString = fkConstraint.getReferences();\n            if (!referencesString.contains(\".\") && database.getDefaultSchemaName() != null) {\n                referencesString = database.getDefaultSchemaName()+\".\"+referencesString;\n            }\n            buffer.append(\" FOREIGN KEY (\")\n                    .append(database.escapeColumnName(statement.getSchemaName(), statement.getTableName(), fkConstraint.getColumn()))\n                    .append(\") REFERENCES \")\n                    .append(referencesString);\n\n            if (fkConstraint.isDeleteCascade()) {\n                buffer.append(\" ON DELETE CASCADE\");\n            }\n\n            if ((database instanceof InformixDatabase)) {\n            \tbuffer.append(\" CONSTRAINT \");\n            \tbuffer.append(database.escapeConstraintName(fkConstraint.getForeignKeyName()));\n            }\n\n            if (fkConstraint.isInitiallyDeferred()) {\n                buffer.append(\" INITIALLY DEFERRED\");\n            }\n            if (fkConstraint.isDeferrable()) {\n                buffer.append(\" DEFERRABLE\");\n            }\n            buffer.append(\",\");\n        }\n\n        for (UniqueConstraint uniqueConstraint : statement.getUniqueConstraints()) {\n            if (uniqueConstraint.getConstraintName() != null && !constraintNameAfterUnique(database)) {\n                buffer.append(\" CONSTRAINT \");\n                buffer.append(database.escapeConstraintName(uniqueConstraint.getConstraintName()));\n            }\n            buffer.append(\" UNIQUE (\");\n            buffer.append(database.escapeColumnNameList(StringUtils.join(uniqueConstraint.getColumns(), \", \")));\n            buffer.append(\")\");\n            if (uniqueConstraint.getConstraintName() != null && constraintNameAfterUnique(database)) {\n                buffer.append(\" CONSTRAINT \");\n                buffer.append(database.escapeConstraintName(uniqueConstraint.getConstraintName()));\n            }\n            buffer.append(\",\");\n        }\n\n//        if (constraints != null && constraints.getCheck() != null) {\n//            buffer.append(constraints.getCheck()).append(\" \");\n//        }\n//    }\n\n        String sql = buffer.toString().replaceFirst(\",\\\\s*$\", \"\") + \")\";\n\n//        if (StringUtils.trimToNull(tablespace) != null && database.supportsTablespaces()) {\n//            if (database instanceof MSSQLDatabase) {\n//                buffer.append(\" ON \").append(tablespace);\n//            } else if (database instanceof DB2Database) {\n//                buffer.append(\" IN \").append(tablespace);\n//            } else {\n//                buffer.append(\" TABLESPACE \").append(tablespace);\n//            }\n//        }\n\n        if (statement.getTablespace() != null && database.supportsTablespaces()) {\n            if (database instanceof MSSQLDatabase || database instanceof SybaseASADatabase) {\n                sql += \" ON \" + statement.getTablespace();\n            } else if (database instanceof DB2Database || database instanceof InformixDatabase) {\n                sql += \" IN \" + statement.getTablespace();\n            } else {\n                sql += \" TABLESPACE \" + statement.getTablespace();\n            }\n        }\n\n        return new Sql[] {\n                new UnparsedSql(sql)\n        };\n    }", "signature": "Sql[] generateSql(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain)", "full_signature": "public Sql[] generateSql(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain)", "class_method_signature": "CreateTableGenerator.generateSql(CreateTableStatement statement, Database database, SqlGeneratorChain sqlGeneratorChain)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "escapeTableName", "getSchemaName", "getTableName", "append", "getPrimaryKeyConstraint", "size", "getColumns", "getPrimaryKeyConstraint", "iterator", "getColumns", "hasNext", "next", "append", "escapeColumnName", "getSchemaName", "getTableName", "append", "append", "get", "getColumnTypes", "getAutoIncrementConstraints", "equals", "getColumnName", "getPrimaryKeyConstraint", "contains", "getColumns", "getPrimaryKeyConstraint", "trimToNull", "getConstraintName", "getPrimaryKeyConstraint", "generatePrimaryKeyName", "getTableName", "append", "append", "escapeConstraintName", "append", "getDefaultValue", "getDefaultValue", "append", "append", "generateDefaultConstraintName", "getTableName", "append", "append", "convertObjectToString", "get", "getColumnTypes", "supportsAutoIncrement", "getAutoIncrementClause", "getStartWith", "getIncrementBy", "equals", "append", "append", "warning", "getLogger", "getTypeName", "escapeTableName", "getSchemaName", "getTableName", "contains", "getNotNullColumns", "append", "equalsIgnoreCase", "getDataTypeName", "get", "getColumnTypes", "append", "append", "hasNext", "append", "append", "getPrimaryKeyConstraint", "size", "getColumns", "getPrimaryKeyConstraint", "trimToNull", "getConstraintName", "getPrimaryKeyConstraint", "generatePrimaryKeyName", "getTableName", "append", "append", "escapeConstraintName", "append", "append", "escapeColumnNameList", "join", "getColumns", "getPrimaryKeyConstraint", "append", "getTablespace", "getPrimaryKeyConstraint", "append", "append", "getTablespace", "getPrimaryKeyConstraint", "append", "getForeignKeyConstraints", "append", "append", "escapeConstraintName", "getForeignKeyName", "getReferences", "contains", "getDefaultSchemaName", "getDefaultSchemaName", "append", "append", "append", "append", "escapeColumnName", "getSchemaName", "getTableName", "getColumn", "isDeleteCascade", "append", "append", "append", "escapeConstraintName", "getForeignKeyName", "isInitiallyDeferred", "append", "isDeferrable", "append", "append", "getUniqueConstraints", "getConstraintName", "constraintNameAfterUnique", "append", "append", "escapeConstraintName", "getConstraintName", "append", "append", "escapeColumnNameList", "join", "getColumns", "append", "getConstraintName", "constraintNameAfterUnique", "append", "append", "escapeConstraintName", "getConstraintName", "append", "replaceFirst", "toString", "getTablespace", "supportsTablespaces", "getTablespace", "getTablespace", "getTablespace"]}, "repository": {"repo_id": 10035739, "url": "https://github.com/openforis/android-ports", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 12, "size": 2775, "license": "licensed"}}