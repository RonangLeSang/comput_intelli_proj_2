{"test_class": {"identifier": "PostgresTypeConverterTest", "superclass": "extends DefaultTypeConverterTest", "interfaces": "", "fields": [], "file": "android-liquibase/android-liquibase-core/src/test/java/liquibase/database/typeconversion/core/PostgresTypeConverterTest.java"}, "test_case": {"identifier": "getColumnType_Text", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getColumnType_Text() {\n        assertEquals(\"TEXT\", new PostgresTypeConverter().getDataType(\"TEXT\", false).toString());\n    }", "signature": "void getColumnType_Text()", "full_signature": "@Test public void getColumnType_Text()", "class_method_signature": "PostgresTypeConverterTest.getColumnType_Text()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "getDataType"]}, "focal_class": {"identifier": "PostgresTypeConverter", "superclass": "extends AbstractTypeConverter", "interfaces": "", "fields": [], "methods": [{"identifier": "getPriority", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPriority()", "full_signature": "public int getPriority()", "class_method_signature": "PostgresTypeConverter.getPriority()", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(Database database)", "modifiers": "public", "return": "boolean", "signature": "boolean supports(Database database)", "full_signature": "public boolean supports(Database database)", "class_method_signature": "PostgresTypeConverter.supports(Database database)", "testcase": false, "constructor": false}, {"identifier": "convertDatabaseValueToObject", "parameters": "(Object defaultValue, int dataType, int columnSize, int decimalDigits, Database database)", "modifiers": "@Override public", "return": "Object", "signature": "Object convertDatabaseValueToObject(Object defaultValue, int dataType, int columnSize, int decimalDigits, Database database)", "full_signature": "@Override public Object convertDatabaseValueToObject(Object defaultValue, int dataType, int columnSize, int decimalDigits, Database database)", "class_method_signature": "PostgresTypeConverter.convertDatabaseValueToObject(Object defaultValue, int dataType, int columnSize, int decimalDigits, Database database)", "testcase": false, "constructor": false}, {"identifier": "getDataType", "parameters": "(String columnTypeString, Boolean autoIncrement)", "modifiers": "@Override public", "return": "DataType", "signature": "DataType getDataType(String columnTypeString, Boolean autoIncrement)", "full_signature": "@Override public DataType getDataType(String columnTypeString, Boolean autoIncrement)", "class_method_signature": "PostgresTypeConverter.getDataType(String columnTypeString, Boolean autoIncrement)", "testcase": false, "constructor": false}, {"identifier": "convertToCorrectObjectType", "parameters": "(String value, int dataType, int columnSize, int decimalDigits, Database database)", "modifiers": "@Override protected", "return": "Object", "signature": "Object convertToCorrectObjectType(String value, int dataType, int columnSize, int decimalDigits, Database database)", "full_signature": "@Override protected Object convertToCorrectObjectType(String value, int dataType, int columnSize, int decimalDigits, Database database)", "class_method_signature": "PostgresTypeConverter.convertToCorrectObjectType(String value, int dataType, int columnSize, int decimalDigits, Database database)", "testcase": false, "constructor": false}, {"identifier": "getClobType", "parameters": "()", "modifiers": "@Override public", "return": "ClobType", "signature": "ClobType getClobType()", "full_signature": "@Override public ClobType getClobType()", "class_method_signature": "PostgresTypeConverter.getClobType()", "testcase": false, "constructor": false}, {"identifier": "getBlobType", "parameters": "()", "modifiers": "@Override public", "return": "BlobType", "signature": "BlobType getBlobType()", "full_signature": "@Override public BlobType getBlobType()", "class_method_signature": "PostgresTypeConverter.getBlobType()", "testcase": false, "constructor": false}, {"identifier": "getDateTimeType", "parameters": "()", "modifiers": "@Override public", "return": "DateTimeType", "signature": "DateTimeType getDateTimeType()", "full_signature": "@Override public DateTimeType getDateTimeType()", "class_method_signature": "PostgresTypeConverter.getDateTimeType()", "testcase": false, "constructor": false}, {"identifier": "getNumberType", "parameters": "()", "modifiers": "@Override public", "return": "NumberType", "signature": "NumberType getNumberType()", "full_signature": "@Override public NumberType getNumberType()", "class_method_signature": "PostgresTypeConverter.getNumberType()", "testcase": false, "constructor": false}, {"identifier": "getTinyIntType", "parameters": "()", "modifiers": "@Override public", "return": "TinyIntType", "signature": "TinyIntType getTinyIntType()", "full_signature": "@Override public TinyIntType getTinyIntType()", "class_method_signature": "PostgresTypeConverter.getTinyIntType()", "testcase": false, "constructor": false}, {"identifier": "getDoubleType", "parameters": "()", "modifiers": "@Override public", "return": "DoubleType", "signature": "DoubleType getDoubleType()", "full_signature": "@Override public DoubleType getDoubleType()", "class_method_signature": "PostgresTypeConverter.getDoubleType()", "testcase": false, "constructor": false}], "file": "android-liquibase/android-liquibase-core/src/main/java/liquibase/database/typeconversion/core/PostgresTypeConverter.java"}, "focal_method": {"identifier": "getDataType", "parameters": "(String columnTypeString, Boolean autoIncrement)", "modifiers": "@Override public", "return": "DataType", "body": "@Override\n    public DataType getDataType(String columnTypeString, Boolean autoIncrement) {\n        DataType type = super.getDataType(columnTypeString, autoIncrement);\n\n        if (type.getDataTypeName().toLowerCase().contains(\"text\")) {\n            type = getClobType();\n        } else if (type.getDataTypeName().toLowerCase().contains(\"blob\")) {\n            type = getBlobType();\n        } else if (type.getDataTypeName().toLowerCase().startsWith(\"float8\")) {\n            type.setDataTypeName(\"FLOAT8\");\n        } else if (type.getDataTypeName().toLowerCase().startsWith(\"float4\")) {\n            type.setDataTypeName(\"FLOAT4\");\n        }\n\n\n        if (autoIncrement != null && autoIncrement) {\n            if (\"integer\".equals(type.getDataTypeName().toLowerCase())) {\n                type.setDataTypeName(\"serial\");\n            } else if (\"bigint\".equals(type.getDataTypeName().toLowerCase()) || \"bigserial\".equals(type.getDataTypeName().toLowerCase())) {\n                type.setDataTypeName(\"bigserial\");\n            } else {\n                // Unknown integer type, default to \"serial\"\n                type.setDataTypeName(\"serial\");\n            }\n        }\n\n        return type;\n    }", "signature": "DataType getDataType(String columnTypeString, Boolean autoIncrement)", "full_signature": "@Override public DataType getDataType(String columnTypeString, Boolean autoIncrement)", "class_method_signature": "PostgresTypeConverter.getDataType(String columnTypeString, Boolean autoIncrement)", "testcase": false, "constructor": false, "invocations": ["getDataType", "contains", "toLowerCase", "getDataTypeName", "getClobType", "contains", "toLowerCase", "getDataTypeName", "getBlobType", "startsWith", "toLowerCase", "getDataTypeName", "setDataTypeName", "startsWith", "toLowerCase", "getDataTypeName", "setDataTypeName", "equals", "toLowerCase", "getDataTypeName", "setDataTypeName", "equals", "toLowerCase", "getDataTypeName", "equals", "toLowerCase", "getDataTypeName", "setDataTypeName", "setDataTypeName"]}, "repository": {"repo_id": 10035739, "url": "https://github.com/openforis/android-ports", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 12, "size": 2775, "license": "licensed"}}