{"test_class": {"identifier": "SqlGeneratorFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "android-liquibase/android-liquibase-core/src/test/java/liquibase/sqlgenerator/SqlGeneratorFactoryTest.java"}, "test_case": {"identifier": "getInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getInstance() {\n        assertNotNull(SqlGeneratorFactory.getInstance());\n        \n        assertTrue(SqlGeneratorFactory.getInstance() == SqlGeneratorFactory.getInstance());\n    }", "signature": "void getInstance()", "full_signature": "@Test public void getInstance()", "class_method_signature": "SqlGeneratorFactoryTest.getInstance()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getInstance", "assertTrue", "getInstance", "getInstance"]}, "focal_class": {"identifier": "SqlGeneratorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SqlGeneratorFactory instance;", "modifier": "private static", "type": "SqlGeneratorFactory", "declarator": "instance", "var_name": "instance"}, {"original_string": "private List<SqlGenerator> generators = new ArrayList<SqlGenerator>();", "modifier": "private", "type": "List<SqlGenerator>", "declarator": "generators = new ArrayList<SqlGenerator>()", "var_name": "generators"}], "methods": [{"identifier": "SqlGeneratorFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " SqlGeneratorFactory()", "full_signature": "private  SqlGeneratorFactory()", "class_method_signature": "SqlGeneratorFactory.SqlGeneratorFactory()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "SqlGeneratorFactory", "signature": "SqlGeneratorFactory getInstance()", "full_signature": "public static SqlGeneratorFactory getInstance()", "class_method_signature": "SqlGeneratorFactory.getInstance()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "SqlGeneratorFactory.reset()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(SqlGenerator generator)", "modifiers": "public", "return": "void", "signature": "void register(SqlGenerator generator)", "full_signature": "public void register(SqlGenerator generator)", "class_method_signature": "SqlGeneratorFactory.register(SqlGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(SqlGenerator generator)", "modifiers": "public", "return": "void", "signature": "void unregister(SqlGenerator generator)", "full_signature": "public void unregister(SqlGenerator generator)", "class_method_signature": "SqlGeneratorFactory.unregister(SqlGenerator generator)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(Class generatorClass)", "modifiers": "public", "return": "void", "signature": "void unregister(Class generatorClass)", "full_signature": "public void unregister(Class generatorClass)", "class_method_signature": "SqlGeneratorFactory.unregister(Class generatorClass)", "testcase": false, "constructor": false}, {"identifier": "getGenerators", "parameters": "()", "modifiers": "protected", "return": "Collection<SqlGenerator>", "signature": "Collection<SqlGenerator> getGenerators()", "full_signature": "protected Collection<SqlGenerator> getGenerators()", "class_method_signature": "SqlGeneratorFactory.getGenerators()", "testcase": false, "constructor": false}, {"identifier": "getGenerators", "parameters": "(SqlStatement statement, Database database)", "modifiers": "protected", "return": "SortedSet<SqlGenerator>", "signature": "SortedSet<SqlGenerator> getGenerators(SqlStatement statement, Database database)", "full_signature": "protected SortedSet<SqlGenerator> getGenerators(SqlStatement statement, Database database)", "class_method_signature": "SqlGeneratorFactory.getGenerators(SqlStatement statement, Database database)", "testcase": false, "constructor": false}, {"identifier": "checkType", "parameters": "(Type type, SqlStatement statement, SqlGenerator generator, Database database, SortedSet<SqlGenerator> validGenerators)", "modifiers": "private", "return": "void", "signature": "void checkType(Type type, SqlStatement statement, SqlGenerator generator, Database database, SortedSet<SqlGenerator> validGenerators)", "full_signature": "private void checkType(Type type, SqlStatement statement, SqlGenerator generator, Database database, SortedSet<SqlGenerator> validGenerators)", "class_method_signature": "SqlGeneratorFactory.checkType(Type type, SqlStatement statement, SqlGenerator generator, Database database, SortedSet<SqlGenerator> validGenerators)", "testcase": false, "constructor": false}, {"identifier": "createGeneratorChain", "parameters": "(SqlStatement statement, Database database)", "modifiers": "private", "return": "SqlGeneratorChain", "signature": "SqlGeneratorChain createGeneratorChain(SqlStatement statement, Database database)", "full_signature": "private SqlGeneratorChain createGeneratorChain(SqlStatement statement, Database database)", "class_method_signature": "SqlGeneratorFactory.createGeneratorChain(SqlStatement statement, Database database)", "testcase": false, "constructor": false}, {"identifier": "generateSql", "parameters": "(SqlStatement statement, Database database)", "modifiers": "public", "return": "Sql[]", "signature": "Sql[] generateSql(SqlStatement statement, Database database)", "full_signature": "public Sql[] generateSql(SqlStatement statement, Database database)", "class_method_signature": "SqlGeneratorFactory.generateSql(SqlStatement statement, Database database)", "testcase": false, "constructor": false}, {"identifier": "requiresCurrentDatabaseMetadata", "parameters": "(SqlStatement statement, Database database)", "modifiers": "public", "return": "boolean", "signature": "boolean requiresCurrentDatabaseMetadata(SqlStatement statement, Database database)", "full_signature": "public boolean requiresCurrentDatabaseMetadata(SqlStatement statement, Database database)", "class_method_signature": "SqlGeneratorFactory.requiresCurrentDatabaseMetadata(SqlStatement statement, Database database)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(SqlStatement statement, Database database)", "modifiers": "public", "return": "boolean", "signature": "boolean supports(SqlStatement statement, Database database)", "full_signature": "public boolean supports(SqlStatement statement, Database database)", "class_method_signature": "SqlGeneratorFactory.supports(SqlStatement statement, Database database)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(SqlStatement statement, Database database)", "modifiers": "public", "return": "ValidationErrors", "signature": "ValidationErrors validate(SqlStatement statement, Database database)", "full_signature": "public ValidationErrors validate(SqlStatement statement, Database database)", "class_method_signature": "SqlGeneratorFactory.validate(SqlStatement statement, Database database)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(SqlStatement statement, Database database)", "modifiers": "public", "return": "Warnings", "signature": "Warnings warn(SqlStatement statement, Database database)", "full_signature": "public Warnings warn(SqlStatement statement, Database database)", "class_method_signature": "SqlGeneratorFactory.warn(SqlStatement statement, Database database)", "testcase": false, "constructor": false}, {"identifier": "getAffectedDatabaseObjects", "parameters": "(SqlStatement statement, Database database)", "modifiers": "public", "return": "Set<DatabaseObject>", "signature": "Set<DatabaseObject> getAffectedDatabaseObjects(SqlStatement statement, Database database)", "full_signature": "public Set<DatabaseObject> getAffectedDatabaseObjects(SqlStatement statement, Database database)", "class_method_signature": "SqlGeneratorFactory.getAffectedDatabaseObjects(SqlStatement statement, Database database)", "testcase": false, "constructor": false}], "file": "android-liquibase/android-liquibase-core/src/main/java/liquibase/sqlgenerator/SqlGeneratorFactory.java"}, "focal_method": {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "SqlGeneratorFactory", "body": "public static SqlGeneratorFactory getInstance() {\n        if (instance == null) {\n            instance = new SqlGeneratorFactory();\n        }\n        return instance;\n    }", "signature": "SqlGeneratorFactory getInstance()", "full_signature": "public static SqlGeneratorFactory getInstance()", "class_method_signature": "SqlGeneratorFactory.getInstance()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10035739, "url": "https://github.com/openforis/android-ports", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 12, "size": 2775, "license": "licensed"}}