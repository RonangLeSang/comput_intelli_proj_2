{"test_class": {"identifier": "BaseLanguageModuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "pmd-core/src/test/java/net/sourceforge/pmd/lang/BaseLanguageModuleTest.java"}, "test_case": {"identifier": "testCompareTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompareTo() {\n        Language l1 = new DummyLanguageModule();\n        Language l2 = new Dummy2LanguageModule();\n\n        Assert.assertTrue(l1.compareTo(l2) < 0);\n    }", "signature": "void testCompareTo()", "full_signature": "@Test public void testCompareTo()", "class_method_signature": "BaseLanguageModuleTest.testCompareTo()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "compareTo"]}, "focal_class": {"identifier": "BaseLanguageModule", "superclass": "", "interfaces": "implements Language", "fields": [{"original_string": "protected String name;", "modifier": "protected", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "protected String shortName;", "modifier": "protected", "type": "String", "declarator": "shortName", "var_name": "shortName"}, {"original_string": "protected String terseName;", "modifier": "protected", "type": "String", "declarator": "terseName", "var_name": "terseName"}, {"original_string": "protected Class<?> ruleChainVisitorClass;", "modifier": "protected", "type": "Class<?>", "declarator": "ruleChainVisitorClass", "var_name": "ruleChainVisitorClass"}, {"original_string": "protected List<String> extensions;", "modifier": "protected", "type": "List<String>", "declarator": "extensions", "var_name": "extensions"}, {"original_string": "private final List<LanguageVersion> distinctVersions = new ArrayList<>();", "modifier": "private final", "type": "List<LanguageVersion>", "declarator": "distinctVersions = new ArrayList<>()", "var_name": "distinctVersions"}, {"original_string": "protected Map<String, LanguageVersion> versions;", "modifier": "protected", "type": "Map<String, LanguageVersion>", "declarator": "versions", "var_name": "versions"}, {"original_string": "protected LanguageVersion defaultVersion;", "modifier": "protected", "type": "LanguageVersion", "declarator": "defaultVersion", "var_name": "defaultVersion"}], "methods": [{"identifier": "BaseLanguageModule", "parameters": "(String name, String shortName, String terseName, Class<?> ruleChainVisitorClass,\n            String... extensions)", "modifiers": "@Deprecated public", "return": "", "signature": " BaseLanguageModule(String name, String shortName, String terseName, Class<?> ruleChainVisitorClass,\n            String... extensions)", "full_signature": "@Deprecated public  BaseLanguageModule(String name, String shortName, String terseName, Class<?> ruleChainVisitorClass,\n            String... extensions)", "class_method_signature": "BaseLanguageModule.BaseLanguageModule(String name, String shortName, String terseName, Class<?> ruleChainVisitorClass,\n            String... extensions)", "testcase": false, "constructor": true}, {"identifier": "BaseLanguageModule", "parameters": "(String name,\n                              String shortName,\n                              String terseName,\n                              String firstExtension,\n                              String... otherExtensions)", "modifiers": "public", "return": "", "signature": " BaseLanguageModule(String name,\n                              String shortName,\n                              String terseName,\n                              String firstExtension,\n                              String... otherExtensions)", "full_signature": "public  BaseLanguageModule(String name,\n                              String shortName,\n                              String terseName,\n                              String firstExtension,\n                              String... otherExtensions)", "class_method_signature": "BaseLanguageModule.BaseLanguageModule(String name,\n                              String shortName,\n                              String terseName,\n                              String firstExtension,\n                              String... otherExtensions)", "testcase": false, "constructor": true}, {"identifier": "addVersion", "parameters": "(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault, String... versionAliases)", "modifiers": "private", "return": "void", "signature": "void addVersion(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault, String... versionAliases)", "full_signature": "private void addVersion(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault, String... versionAliases)", "class_method_signature": "BaseLanguageModule.addVersion(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault, String... versionAliases)", "testcase": false, "constructor": false}, {"identifier": "checkNotPresent", "parameters": "(String alias)", "modifiers": "private", "return": "void", "signature": "void checkNotPresent(String alias)", "full_signature": "private void checkNotPresent(String alias)", "class_method_signature": "BaseLanguageModule.checkNotPresent(String alias)", "testcase": false, "constructor": false}, {"identifier": "addVersion", "parameters": "(String version, LanguageVersionHandler languageVersionHandler, String... versionAliases)", "modifiers": "protected", "return": "void", "signature": "void addVersion(String version, LanguageVersionHandler languageVersionHandler, String... versionAliases)", "full_signature": "protected void addVersion(String version, LanguageVersionHandler languageVersionHandler, String... versionAliases)", "class_method_signature": "BaseLanguageModule.addVersion(String version, LanguageVersionHandler languageVersionHandler, String... versionAliases)", "testcase": false, "constructor": false}, {"identifier": "addDefaultVersion", "parameters": "(String version, LanguageVersionHandler languageVersionHandler, String... versionAliases)", "modifiers": "protected", "return": "void", "signature": "void addDefaultVersion(String version, LanguageVersionHandler languageVersionHandler, String... versionAliases)", "full_signature": "protected void addDefaultVersion(String version, LanguageVersionHandler languageVersionHandler, String... versionAliases)", "class_method_signature": "BaseLanguageModule.addDefaultVersion(String version, LanguageVersionHandler languageVersionHandler, String... versionAliases)", "testcase": false, "constructor": false}, {"identifier": "addVersion", "parameters": "(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault)", "modifiers": "@Deprecated protected", "return": "void", "signature": "void addVersion(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault)", "full_signature": "@Deprecated protected void addVersion(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault)", "class_method_signature": "BaseLanguageModule.addVersion(String version, LanguageVersionHandler languageVersionHandler, boolean isDefault)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "BaseLanguageModule.getName()", "testcase": false, "constructor": false}, {"identifier": "getShortName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getShortName()", "full_signature": "@Override public String getShortName()", "class_method_signature": "BaseLanguageModule.getShortName()", "testcase": false, "constructor": false}, {"identifier": "getTerseName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTerseName()", "full_signature": "@Override public String getTerseName()", "class_method_signature": "BaseLanguageModule.getTerseName()", "testcase": false, "constructor": false}, {"identifier": "getRuleChainVisitorClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getRuleChainVisitorClass()", "full_signature": "@Override public Class<?> getRuleChainVisitorClass()", "class_method_signature": "BaseLanguageModule.getRuleChainVisitorClass()", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getExtensions()", "full_signature": "@Override public List<String> getExtensions()", "class_method_signature": "BaseLanguageModule.getExtensions()", "testcase": false, "constructor": false}, {"identifier": "hasExtension", "parameters": "(String extension)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasExtension(String extension)", "full_signature": "@Override public boolean hasExtension(String extension)", "class_method_signature": "BaseLanguageModule.hasExtension(String extension)", "testcase": false, "constructor": false}, {"identifier": "getVersions", "parameters": "()", "modifiers": "@Override public", "return": "List<LanguageVersion>", "signature": "List<LanguageVersion> getVersions()", "full_signature": "@Override public List<LanguageVersion> getVersions()", "class_method_signature": "BaseLanguageModule.getVersions()", "testcase": false, "constructor": false}, {"identifier": "hasVersion", "parameters": "(String version)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasVersion(String version)", "full_signature": "@Override public boolean hasVersion(String version)", "class_method_signature": "BaseLanguageModule.hasVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(String versionName)", "modifiers": "@Override public", "return": "LanguageVersion", "signature": "LanguageVersion getVersion(String versionName)", "full_signature": "@Override public LanguageVersion getVersion(String versionName)", "class_method_signature": "BaseLanguageModule.getVersion(String versionName)", "testcase": false, "constructor": false}, {"identifier": "getDefaultVersion", "parameters": "()", "modifiers": "@Override public", "return": "LanguageVersion", "signature": "LanguageVersion getDefaultVersion()", "full_signature": "@Override public LanguageVersion getDefaultVersion()", "class_method_signature": "BaseLanguageModule.getDefaultVersion()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BaseLanguageModule.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BaseLanguageModule.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "BaseLanguageModule.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Language o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Language o)", "full_signature": "@Override public int compareTo(Language o)", "class_method_signature": "BaseLanguageModule.compareTo(Language o)", "testcase": false, "constructor": false}], "file": "pmd-core/src/main/java/net/sourceforge/pmd/lang/BaseLanguageModule.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(Language o)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compareTo(Language o) {\n        return getName().compareTo(o.getName());\n    }", "signature": "int compareTo(Language o)", "full_signature": "@Override public int compareTo(Language o)", "class_method_signature": "BaseLanguageModule.compareTo(Language o)", "testcase": false, "constructor": false, "invocations": ["compareTo", "getName", "getName"]}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}