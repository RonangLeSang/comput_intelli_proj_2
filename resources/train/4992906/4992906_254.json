{"test_class": {"identifier": "FileDataSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tempFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tempFolder = new TemporaryFolder()", "var_name": "tempFolder"}, {"original_string": "private static final String SOMEFILE_DIR = \"path/\";", "modifier": "private static final", "type": "String", "declarator": "SOMEFILE_DIR = \"path/\"", "var_name": "SOMEFILE_DIR"}, {"original_string": "private static final String SOMEFILE_TXT = \"somefile.txt\";", "modifier": "private static final", "type": "String", "declarator": "SOMEFILE_TXT = \"somefile.txt\"", "var_name": "SOMEFILE_TXT"}, {"original_string": "private static final String SOMEFILE_TXT_FULL_PATH = SOMEFILE_DIR + SOMEFILE_TXT;", "modifier": "private static final", "type": "String", "declarator": "SOMEFILE_TXT_FULL_PATH = SOMEFILE_DIR + SOMEFILE_TXT", "var_name": "SOMEFILE_TXT_FULL_PATH"}, {"original_string": "private FileDataSource ds;", "modifier": "private", "type": "FileDataSource", "declarator": "ds", "var_name": "ds"}, {"original_string": "private File someFile;", "modifier": "private", "type": "File", "declarator": "someFile", "var_name": "someFile"}, {"original_string": "private File someFolder;", "modifier": "private", "type": "File", "declarator": "someFolder", "var_name": "someFolder"}], "file": "pmd-core/src/test/java/net/sourceforge/pmd/util/datasource/FileDataSourceTest.java"}, "test_case": {"identifier": "testLongNamesSingleFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLongNamesSingleFile() throws IOException {\n        assertEquals(someFile.getCanonicalFile().getAbsolutePath(), ds.getNiceFileName(false, someFile.getAbsolutePath()));\n    }", "signature": "void testLongNamesSingleFile()", "full_signature": "@Test public void testLongNamesSingleFile()", "class_method_signature": "FileDataSourceTest.testLongNamesSingleFile()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getAbsolutePath", "getCanonicalFile", "getNiceFileName", "getAbsolutePath"]}, "focal_class": {"identifier": "FileDataSource", "superclass": "extends AbstractDataSource", "interfaces": "", "fields": [{"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "FileDataSource", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " FileDataSource(File file)", "full_signature": "public  FileDataSource(File file)", "class_method_signature": "FileDataSource.FileDataSource(File file)", "testcase": false, "constructor": true}, {"identifier": "getInputStream", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream()", "full_signature": "@Override public InputStream getInputStream()", "class_method_signature": "FileDataSource.getInputStream()", "testcase": false, "constructor": false}, {"identifier": "getNiceFileName", "parameters": "(boolean shortNames, String inputPaths)", "modifiers": "@Override public", "return": "String", "signature": "String getNiceFileName(boolean shortNames, String inputPaths)", "full_signature": "@Override public String getNiceFileName(boolean shortNames, String inputPaths)", "class_method_signature": "FileDataSource.getNiceFileName(boolean shortNames, String inputPaths)", "testcase": false, "constructor": false}, {"identifier": "glomName", "parameters": "(boolean shortNames, String inputPaths, File file)", "modifiers": "private", "return": "String", "signature": "String glomName(boolean shortNames, String inputPaths, File file)", "full_signature": "private String glomName(boolean shortNames, String inputPaths, File file)", "class_method_signature": "FileDataSource.glomName(boolean shortNames, String inputPaths, File file)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FileDataSource.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FileDataSource.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "FileDataSource.equals(Object obj)", "testcase": false, "constructor": false}], "file": "pmd-core/src/main/java/net/sourceforge/pmd/util/datasource/FileDataSource.java"}, "focal_method": {"identifier": "getNiceFileName", "parameters": "(boolean shortNames, String inputPaths)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getNiceFileName(boolean shortNames, String inputPaths) {\n        return glomName(shortNames, inputPaths, file);\n    }", "signature": "String getNiceFileName(boolean shortNames, String inputPaths)", "full_signature": "@Override public String getNiceFileName(boolean shortNames, String inputPaths)", "class_method_signature": "FileDataSource.getNiceFileName(boolean shortNames, String inputPaths)", "testcase": false, "constructor": false, "invocations": ["glomName"]}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}