{"test_class": {"identifier": "RuleSetFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@org.junit.Rule\n    public ExpectedException ex = ExpectedException.none();", "modifier": "@org.junit.Rule\n    public", "type": "ExpectedException", "declarator": "ex = ExpectedException.none()", "var_name": "ex"}, {"original_string": "@org.junit.Rule\n    public LocaleRule localeRule = LocaleRule.en();", "modifier": "@org.junit.Rule\n    public", "type": "LocaleRule", "declarator": "localeRule = LocaleRule.en()", "var_name": "localeRule"}, {"original_string": "@org.junit.Rule\n    public JavaUtilLoggingRule logging = new JavaUtilLoggingRule(RuleSetFactory.class.getName());", "modifier": "@org.junit.Rule\n    public", "type": "JavaUtilLoggingRule", "declarator": "logging = new JavaUtilLoggingRule(RuleSetFactory.class.getName())", "var_name": "logging"}, {"original_string": "private static final String REF_OVERRIDE_ORIGINAL_NAME = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule \\n\"\n        + \"\\n\"\n        + \"  ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\\\" message=\\\"TestMessageOverride\\\"> \\n\"\n        + \"\\n\"\n        + \" </rule>\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_OVERRIDE_ORIGINAL_NAME = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule \\n\"\n        + \"\\n\"\n        + \"  ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\\\" message=\\\"TestMessageOverride\\\"> \\n\"\n        + \"\\n\"\n        + \" </rule>\\n\"\n        + \"</ruleset>\"", "var_name": "REF_OVERRIDE_ORIGINAL_NAME"}, {"original_string": "private static final String REF_MISSPELLED_XREF = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule \\n\"\n        + \"  ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/FooMockRule1\\\"> \\n\"\n        + \" </rule>\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_MISSPELLED_XREF = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule \\n\"\n        + \"  ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/FooMockRule1\\\"> \\n\"\n        + \" </rule>\\n\"\n        + \"</ruleset>\"", "var_name": "REF_MISSPELLED_XREF"}, {"original_string": "private static final String REF_OVERRIDE_ORIGINAL_NAME_ONE_ELEM = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\\\" message=\\\"TestMessageOverride\\\"/> \\n\"\n        + \"\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_OVERRIDE_ORIGINAL_NAME_ONE_ELEM = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\\\" message=\\\"TestMessageOverride\\\"/> \\n\"\n        + \"\\n\"\n        + \"</ruleset>\"", "var_name": "REF_OVERRIDE_ORIGINAL_NAME_ONE_ELEM"}, {"original_string": "private static final String REF_OVERRIDE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule \\n\"\n        + \"  ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule4\\\" \\n\"\n        + \"  name=\\\"TestNameOverride\\\" \\n\"\n        + \"\\n\"\n        + \"  message=\\\"Test message override\\\"> \\n\"\n        + \"  <description>Test description override</description>\\n\"\n        + \"  <example>Test example override</example>\\n\"\n        + \"  <priority>3</priority>\\n\"\n        + \"  <properties>\\n\"\n        + \"   <property name=\\\"test2\\\" description=\\\"test2\\\" type=\\\"String\\\" value=\\\"override2\\\"/>\\n\"\n        + \"   <property name=\\\"test3\\\" type=\\\"String\\\" description=\\\"test3\\\"><value>override3</value></property>\\n\"\n        + \"\\n\"\n        + \"  </properties>\\n\"\n        + \" </rule>\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_OVERRIDE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule \\n\"\n        + \"  ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule4\\\" \\n\"\n        + \"  name=\\\"TestNameOverride\\\" \\n\"\n        + \"\\n\"\n        + \"  message=\\\"Test message override\\\"> \\n\"\n        + \"  <description>Test description override</description>\\n\"\n        + \"  <example>Test example override</example>\\n\"\n        + \"  <priority>3</priority>\\n\"\n        + \"  <properties>\\n\"\n        + \"   <property name=\\\"test2\\\" description=\\\"test2\\\" type=\\\"String\\\" value=\\\"override2\\\"/>\\n\"\n        + \"   <property name=\\\"test3\\\" type=\\\"String\\\" description=\\\"test3\\\"><value>override3</value></property>\\n\"\n        + \"\\n\"\n        + \"  </properties>\\n\"\n        + \" </rule>\\n\"\n        + \"</ruleset>\"", "var_name": "REF_OVERRIDE"}, {"original_string": "private static final String REF_OVERRIDE_NONEXISTENT = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule \\n\"\n        + \"  ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule4\\\" \\n\"\n        + \"  name=\\\"TestNameOverride\\\" \\n\"\n        + \"\\n\"\n        + \"  message=\\\"Test message override\\\"> \\n\"\n        + \"  <description>Test description override</description>\\n\"\n        + \"  <example>Test example override</example>\\n\"\n        + \"  <priority>3</priority>\\n\"\n        + \"  <properties>\\n\"\n        + \"   <property name=\\\"test4\\\" description=\\\"test4\\\" type=\\\"String\\\" value=\\\"new property\\\"/>\\n\"\n        + \"  </properties>\\n\"\n        + \" </rule>\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_OVERRIDE_NONEXISTENT = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \" <rule \\n\"\n        + \"  ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule4\\\" \\n\"\n        + \"  name=\\\"TestNameOverride\\\" \\n\"\n        + \"\\n\"\n        + \"  message=\\\"Test message override\\\"> \\n\"\n        + \"  <description>Test description override</description>\\n\"\n        + \"  <example>Test example override</example>\\n\"\n        + \"  <priority>3</priority>\\n\"\n        + \"  <properties>\\n\"\n        + \"   <property name=\\\"test4\\\" description=\\\"test4\\\" type=\\\"String\\\" value=\\\"new property\\\"/>\\n\"\n        + \"  </properties>\\n\"\n        + \" </rule>\\n\"\n        + \"</ruleset>\"", "var_name": "REF_OVERRIDE_NONEXISTENT"}, {"original_string": "private static final String REF_INTERNAL_TO_INTERNAL = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"\\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"</rule>\\n\"\n        + \" <rule ref=\\\"MockRuleName\\\" name=\\\"MockRuleNameRef\\\"/> \\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_INTERNAL_TO_INTERNAL = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"\\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"</rule>\\n\"\n        + \" <rule ref=\\\"MockRuleName\\\" name=\\\"MockRuleNameRef\\\"/> \\n\"\n        + \"</ruleset>\"", "var_name": "REF_INTERNAL_TO_INTERNAL"}, {"original_string": "private static final String REF_INTERNAL_TO_INTERNAL_CHAIN = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"\\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"</rule>\\n\"\n        + \" <rule ref=\\\"MockRuleName\\\" name=\\\"MockRuleNameRef\\\"><priority>2</priority></rule> \\n\"\n        + \" <rule ref=\\\"MockRuleNameRef\\\" name=\\\"MockRuleNameRefRef\\\"><priority>1</priority></rule> \\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_INTERNAL_TO_INTERNAL_CHAIN = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"\\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"</rule>\\n\"\n        + \" <rule ref=\\\"MockRuleName\\\" name=\\\"MockRuleNameRef\\\"><priority>2</priority></rule> \\n\"\n        + \" <rule ref=\\\"MockRuleNameRef\\\" name=\\\"MockRuleNameRefRef\\\"><priority>1</priority></rule> \\n\"\n        + \"</ruleset>\"", "var_name": "REF_INTERNAL_TO_INTERNAL_CHAIN"}, {"original_string": "private static final String REF_INTERNAL_TO_EXTERNAL = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"\\n\"\n        + \"name=\\\"ExternalRefRuleName\\\" \\n\"\n        + \"ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\\\"/>\\n\"\n        + \" <rule ref=\\\"ExternalRefRuleName\\\" name=\\\"ExternalRefRuleNameRef\\\"/> \\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_INTERNAL_TO_EXTERNAL = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"\\n\"\n        + \"name=\\\"ExternalRefRuleName\\\" \\n\"\n        + \"ref=\\\"net/sourceforge/pmd/TestRuleset1.xml/MockRule1\\\"/>\\n\"\n        + \" <rule ref=\\\"ExternalRefRuleName\\\" name=\\\"ExternalRefRuleNameRef\\\"/> \\n\"\n        + \"</ruleset>\"", "var_name": "REF_INTERNAL_TO_EXTERNAL"}, {"original_string": "private static final String REF_INTERNAL_TO_EXTERNAL_CHAIN = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"\\n\"\n        + \"name=\\\"ExternalRefRuleName\\\" \\n\"\n        + \"ref=\\\"net/sourceforge/pmd/TestRuleset2.xml/TestRule\\\"/>\\n\"\n        + \" <rule ref=\\\"ExternalRefRuleName\\\" name=\\\"ExternalRefRuleNameRef\\\"><priority>2</priority></rule> \\n\"\n        + \"\\n\"\n        + \" <rule ref=\\\"ExternalRefRuleNameRef\\\" name=\\\"ExternalRefRuleNameRefRef\\\"><priority>1</priority></rule> \\n\"\n        + \"\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REF_INTERNAL_TO_EXTERNAL_CHAIN = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \" <description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"\\n\"\n        + \"name=\\\"ExternalRefRuleName\\\" \\n\"\n        + \"ref=\\\"net/sourceforge/pmd/TestRuleset2.xml/TestRule\\\"/>\\n\"\n        + \" <rule ref=\\\"ExternalRefRuleName\\\" name=\\\"ExternalRefRuleNameRef\\\"><priority>2</priority></rule> \\n\"\n        + \"\\n\"\n        + \" <rule ref=\\\"ExternalRefRuleNameRef\\\" name=\\\"ExternalRefRuleNameRefRef\\\"><priority>1</priority></rule> \\n\"\n        + \"\\n\"\n        + \"</ruleset>\"", "var_name": "REF_INTERNAL_TO_EXTERNAL_CHAIN"}, {"original_string": "private static final String EMPTY_RULESET = \"<?xml version=\\\"1.0\\\"?>\\n<ruleset name=\\\"test\\\">\\n<description>testdesc</description>\\n</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_RULESET = \"<?xml version=\\\"1.0\\\"?>\\n<ruleset name=\\\"test\\\">\\n<description>testdesc</description>\\n</ruleset>\"", "var_name": "EMPTY_RULESET"}, {"original_string": "private static final String SINGLE_RULE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"<priority>3</priority>\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "SINGLE_RULE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"<priority>3</priority>\\n\"\n        + \"</rule></ruleset>\"", "var_name": "SINGLE_RULE"}, {"original_string": "private static final String MULTIPLE_RULES = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule name=\\\"MockRuleName1\\\" \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"\\n\"\n        + \"</rule>\\n\"\n        + \"<rule name=\\\"MockRuleName2\\\" \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "MULTIPLE_RULES = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule name=\\\"MockRuleName1\\\" \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"\\n\"\n        + \"</rule>\\n\"\n        + \"<rule name=\\\"MockRuleName2\\\" \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"\\n\"\n        + \"</rule></ruleset>\"", "var_name": "MULTIPLE_RULES"}, {"original_string": "private static final String PROPERTIES = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule name=\\\"MockRuleName\\\" \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"\\n\"\n        + \"<description>testdesc2</description>\\n\"\n        + \"<properties>\\n\"\n        + \"<property name=\\\"fooBoolean\\\" description=\\\"test\\\" type=\\\"Boolean\\\" value=\\\"true\\\" />\\n\"\n        + \"<property name=\\\"fooChar\\\" description=\\\"test\\\" type=\\\"Character\\\" value=\\\"B\\\" />\\n\"\n        + \"<property name=\\\"fooInt\\\" description=\\\"test\\\" type=\\\"Integer\\\" min=\\\"1\\\" max=\\\"10\\\" value=\\\"3\\\" />\\n\"\n        + \"\\n\"\n        + \"<property name=\\\"fooFloat\\\" description=\\\"test\\\" type=\\\"Float\\\" min=\\\"1.0\\\" max=\\\"1.0\\\" value=\\\"1.0\\\"  />\\n\"\n        + \"\\n\"\n        + \"<property name=\\\"fooDouble\\\" description=\\\"test\\\" type=\\\"Double\\\" min=\\\"1.0\\\" max=\\\"9.0\\\" value=\\\"3.0\\\"  />\\n\"\n        + \"\\n\"\n        + \"<property name=\\\"fooString\\\" description=\\\"test\\\" type=\\\"String\\\" value=\\\"bar\\\" />\\n\"\n        + \"</properties>\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTIES = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule name=\\\"MockRuleName\\\" \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"\\n\"\n        + \"<description>testdesc2</description>\\n\"\n        + \"<properties>\\n\"\n        + \"<property name=\\\"fooBoolean\\\" description=\\\"test\\\" type=\\\"Boolean\\\" value=\\\"true\\\" />\\n\"\n        + \"<property name=\\\"fooChar\\\" description=\\\"test\\\" type=\\\"Character\\\" value=\\\"B\\\" />\\n\"\n        + \"<property name=\\\"fooInt\\\" description=\\\"test\\\" type=\\\"Integer\\\" min=\\\"1\\\" max=\\\"10\\\" value=\\\"3\\\" />\\n\"\n        + \"\\n\"\n        + \"<property name=\\\"fooFloat\\\" description=\\\"test\\\" type=\\\"Float\\\" min=\\\"1.0\\\" max=\\\"1.0\\\" value=\\\"1.0\\\"  />\\n\"\n        + \"\\n\"\n        + \"<property name=\\\"fooDouble\\\" description=\\\"test\\\" type=\\\"Double\\\" min=\\\"1.0\\\" max=\\\"9.0\\\" value=\\\"3.0\\\"  />\\n\"\n        + \"\\n\"\n        + \"<property name=\\\"fooString\\\" description=\\\"test\\\" type=\\\"String\\\" value=\\\"bar\\\" />\\n\"\n        + \"</properties>\\n\"\n        + \"</rule></ruleset>\"", "var_name": "PROPERTIES"}, {"original_string": "private static final String XPATH = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule name=\\\"MockRuleName\\\" \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"<priority>3</priority>\\n\"\n        + \"\\n\"\n        + \"<description>testdesc2</description>\\n\"\n        + \"<properties>\\n\"\n        + \"<property name=\\\"xpath\\\" description=\\\"test\\\" type=\\\"String\\\">\\n\"\n        + \"<value>\\n\"\n        + \"<![CDATA[ //Block ]]>\\n\"\n        + \"</value>\\n\"\n        + \"</property>\\n\"\n        + \"</properties>\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "XPATH = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule name=\\\"MockRuleName\\\" \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"<priority>3</priority>\\n\"\n        + \"\\n\"\n        + \"<description>testdesc2</description>\\n\"\n        + \"<properties>\\n\"\n        + \"<property name=\\\"xpath\\\" description=\\\"test\\\" type=\\\"String\\\">\\n\"\n        + \"<value>\\n\"\n        + \"<![CDATA[ //Block ]]>\\n\"\n        + \"</value>\\n\"\n        + \"</property>\\n\"\n        + \"</properties>\\n\"\n        + \"</rule></ruleset>\"", "var_name": "XPATH"}, {"original_string": "private static final String PRIORITY = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"<priority>3</priority>\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "PRIORITY = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\">\\n\"\n        + \"<priority>3</priority>\\n\"\n        + \"</rule></ruleset>\"", "var_name": "PRIORITY"}, {"original_string": "private static final String LANGUAGE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\" \"\n        + \"language=\\\"dummy\\\">\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "LANGUAGE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\" \"\n        + \"language=\\\"dummy\\\">\\n\"\n        + \"</rule></ruleset>\"", "var_name": "LANGUAGE"}, {"original_string": "private static final String INCORRECT_LANGUAGE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"\\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"bogus\\\">\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "INCORRECT_LANGUAGE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"\\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"bogus\\\">\\n\"\n        + \"</rule></ruleset>\"", "var_name": "INCORRECT_LANGUAGE"}, {"original_string": "private static final String MINIMUM_LANGUAGE_VERSION = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"dummy\\\"\\n\"\n        + \" minimumLanguageVersion=\\\"1.4\\\">\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "MINIMUM_LANGUAGE_VERSION = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"dummy\\\"\\n\"\n        + \" minimumLanguageVersion=\\\"1.4\\\">\\n\"\n        + \"</rule></ruleset>\"", "var_name": "MINIMUM_LANGUAGE_VERSION"}, {"original_string": "private static final String INCORRECT_MINIMUM_LANGUAGE_VERSION = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"dummy\\\"\\n\"\n        + \" minimumLanguageVersion=\\\"bogus\\\">\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "INCORRECT_MINIMUM_LANGUAGE_VERSION = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"dummy\\\"\\n\"\n        + \" minimumLanguageVersion=\\\"bogus\\\">\\n\"\n        + \"</rule></ruleset>\"", "var_name": "INCORRECT_MINIMUM_LANGUAGE_VERSION"}, {"original_string": "private static final String MAXIMUM_LANGUAGE_VERSION = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"dummy\\\"\\n\"\n        + \" maximumLanguageVersion=\\\"1.7\\\">\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "MAXIMUM_LANGUAGE_VERSION = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"dummy\\\"\\n\"\n        + \" maximumLanguageVersion=\\\"1.7\\\">\\n\"\n        + \"</rule></ruleset>\"", "var_name": "MAXIMUM_LANGUAGE_VERSION"}, {"original_string": "private static final String INCORRECT_MAXIMUM_LANGUAGE_VERSION = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"dummy\\\"\\n\"\n        + \" maximumLanguageVersion=\\\"bogus\\\">\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "INCORRECT_MAXIMUM_LANGUAGE_VERSION = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"\\n\"\n        + \" language=\\\"dummy\\\"\\n\"\n        + \" maximumLanguageVersion=\\\"bogus\\\">\\n\"\n        + \"</rule></ruleset>\"", "var_name": "INCORRECT_MAXIMUM_LANGUAGE_VERSION"}, {"original_string": "private static final String INVERTED_MINIMUM_MAXIMUM_LANGUAGE_VERSIONS = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\" \\n\"\n        + \"language=\\\"dummy\\\"\\n\"\n        + \" minimumLanguageVersion=\\\"1.7\\\"\\n\"\n        + \"maximumLanguageVersion=\\\"1.4\\\">\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "INVERTED_MINIMUM_MAXIMUM_LANGUAGE_VERSIONS = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\" \\n\"\n        + \"language=\\\"dummy\\\"\\n\"\n        + \" minimumLanguageVersion=\\\"1.7\\\"\\n\"\n        + \"maximumLanguageVersion=\\\"1.4\\\">\\n\"\n        + \"</rule></ruleset>\"", "var_name": "INVERTED_MINIMUM_MAXIMUM_LANGUAGE_VERSIONS"}, {"original_string": "private static final String DIRECT_DEPRECATED_RULE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\" deprecated=\\\"true\\\">\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "DIRECT_DEPRECATED_RULE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\" deprecated=\\\"true\\\">\\n\"\n        + \"</rule></ruleset>\"", "var_name": "DIRECT_DEPRECATED_RULE"}, {"original_string": "private static final String DEPRECATED_RULE_RULESET_NAME = \"net/sourceforge/pmd/TestRuleset1.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEPRECATED_RULE_RULESET_NAME = \"net/sourceforge/pmd/TestRuleset1.xml\"", "var_name": "DEPRECATED_RULE_RULESET_NAME"}, {"original_string": "private static final String DEPRECATED_RULE_NAME = \"MockRule3\";", "modifier": "private static final", "type": "String", "declarator": "DEPRECATED_RULE_NAME = \"MockRule3\"", "var_name": "DEPRECATED_RULE_NAME"}, {"original_string": "private static final String REFERENCE_TO_DEPRECATED_RULE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \" + \"ref=\\\"\" + DEPRECATED_RULE_RULESET_NAME + \"/\" + DEPRECATED_RULE_NAME + \"\\\" />\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REFERENCE_TO_DEPRECATED_RULE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \" + \"ref=\\\"\" + DEPRECATED_RULE_RULESET_NAME + \"/\" + DEPRECATED_RULE_NAME + \"\\\" />\\n\"\n        + \"</ruleset>\"", "var_name": "REFERENCE_TO_DEPRECATED_RULE"}, {"original_string": "private static final String REFERENCE_TO_RULESET_WITH_DEPRECATED_RULE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \" + \"ref=\\\"\" + DEPRECATED_RULE_RULESET_NAME + \"\\\" />\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "REFERENCE_TO_RULESET_WITH_DEPRECATED_RULE = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \" + \"ref=\\\"\" + DEPRECATED_RULE_RULESET_NAME + \"\\\" />\\n\"\n        + \"</ruleset>\"", "var_name": "REFERENCE_TO_RULESET_WITH_DEPRECATED_RULE"}, {"original_string": "private static final String DFA = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"dfa=\\\"true\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"><priority>3</priority>\\n\"\n        + \"</rule></ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "DFA = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule \\n\"\n        + \"language=\\\"dummy\\\" \\n\"\n        + \"name=\\\"MockRuleName\\\" \\n\"\n        + \"message=\\\"avoid the mock rule\\\" \\n\"\n        + \"dfa=\\\"true\\\" \\n\"\n        + \"class=\\\"net.sourceforge.pmd.lang.rule.MockRule\\\"><priority>3</priority>\\n\"\n        + \"</rule></ruleset>\"", "var_name": "DFA"}, {"original_string": "private static final String INCLUDE_EXCLUDE_RULESET = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<include-pattern>include1</include-pattern>\\n\"\n        + \"<include-pattern>include2</include-pattern>\\n\"\n        + \"\\n\"\n        + \"<exclude-pattern>exclude1</exclude-pattern>\\n\"\n        + \"<exclude-pattern>exclude2</exclude-pattern>\\n\"\n        + \"<exclude-pattern>exclude3</exclude-pattern>\\n\"\n        + \"\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "INCLUDE_EXCLUDE_RULESET = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<include-pattern>include1</include-pattern>\\n\"\n        + \"<include-pattern>include2</include-pattern>\\n\"\n        + \"\\n\"\n        + \"<exclude-pattern>exclude1</exclude-pattern>\\n\"\n        + \"<exclude-pattern>exclude2</exclude-pattern>\\n\"\n        + \"<exclude-pattern>exclude3</exclude-pattern>\\n\"\n        + \"\\n\"\n        + \"</ruleset>\"", "var_name": "INCLUDE_EXCLUDE_RULESET"}, {"original_string": "private static final String EXTERNAL_REFERENCE_RULE_SET = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule ref=\\\"net/sourceforge/pmd/external-reference-ruleset.xml/MockRule\\\"/>\\n\"\n        + \"</ruleset>\";", "modifier": "private static final", "type": "String", "declarator": "EXTERNAL_REFERENCE_RULE_SET = \"<?xml version=\\\"1.0\\\"?>\\n\"\n        + \"<ruleset name=\\\"test\\\">\\n\"\n        + \"<description>testdesc</description>\\n\"\n        + \"<rule ref=\\\"net/sourceforge/pmd/external-reference-ruleset.xml/MockRule\\\"/>\\n\"\n        + \"</ruleset>\"", "var_name": "EXTERNAL_REFERENCE_RULE_SET"}], "file": "pmd-core/src/test/java/net/sourceforge/pmd/RuleSetFactoryTest.java"}, "test_case": {"identifier": "testRefs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRefs() throws Exception {\n        RuleSetFactory rsf = RulesetsFactoryUtils.defaultFactory();\n        RuleSet rs = rsf.createRuleSet(\"net/sourceforge/pmd/TestRuleset1.xml\");\n        assertNotNull(rs.getRuleByName(\"TestRuleRef\"));\n    }", "signature": "void testRefs()", "full_signature": "@Test public void testRefs()", "class_method_signature": "RuleSetFactoryTest.testRefs()", "testcase": true, "constructor": false, "invocations": ["defaultFactory", "createRuleSet", "assertNotNull", "getRuleByName"]}, "focal_class": {"identifier": "RuleSetFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(RuleSetFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(RuleSetFactory.class.getName())", "var_name": "LOG"}, {"original_string": "private static final String DESCRIPTION = \"description\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"description\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final String UNEXPECTED_ELEMENT = \"Unexpected element <\";", "modifier": "private static final", "type": "String", "declarator": "UNEXPECTED_ELEMENT = \"Unexpected element <\"", "var_name": "UNEXPECTED_ELEMENT"}, {"original_string": "private static final String PRIORITY = \"priority\";", "modifier": "private static final", "type": "String", "declarator": "PRIORITY = \"priority\"", "var_name": "PRIORITY"}, {"original_string": "private final ResourceLoader resourceLoader;", "modifier": "private final", "type": "ResourceLoader", "declarator": "resourceLoader", "var_name": "resourceLoader"}, {"original_string": "private final RulePriority minimumPriority;", "modifier": "private final", "type": "RulePriority", "declarator": "minimumPriority", "var_name": "minimumPriority"}, {"original_string": "private final boolean warnDeprecated;", "modifier": "private final", "type": "boolean", "declarator": "warnDeprecated", "var_name": "warnDeprecated"}, {"original_string": "private final RuleSetFactoryCompatibility compatibilityFilter;", "modifier": "private final", "type": "RuleSetFactoryCompatibility", "declarator": "compatibilityFilter", "var_name": "compatibilityFilter"}, {"original_string": "private final Map<RuleSetReferenceId, RuleSet> parsedRulesets = new HashMap<>();", "modifier": "private final", "type": "Map<RuleSetReferenceId, RuleSet>", "declarator": "parsedRulesets = new HashMap<>()", "var_name": "parsedRulesets"}], "methods": [{"identifier": "RuleSetFactory", "parameters": "()", "modifiers": "@Deprecated // to be removed with PMD 7.0.0. public", "return": "", "signature": " RuleSetFactory()", "full_signature": "@Deprecated // to be removed with PMD 7.0.0. public  RuleSetFactory()", "class_method_signature": "RuleSetFactory.RuleSetFactory()", "testcase": false, "constructor": true}, {"identifier": "RuleSetFactory", "parameters": "(final ClassLoader classLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility)", "modifiers": "@Deprecated // to be removed with PMD 7.0.0. public", "return": "", "signature": " RuleSetFactory(final ClassLoader classLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility)", "full_signature": "@Deprecated // to be removed with PMD 7.0.0. public  RuleSetFactory(final ClassLoader classLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility)", "class_method_signature": "RuleSetFactory.RuleSetFactory(final ClassLoader classLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility)", "testcase": false, "constructor": true}, {"identifier": "RuleSetFactory", "parameters": "(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility)", "modifiers": "@Deprecated // to be hidden with PMD 7.0.0. public", "return": "", "signature": " RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility)", "full_signature": "@Deprecated // to be hidden with PMD 7.0.0. public  RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility)", "class_method_signature": "RuleSetFactory.RuleSetFactory(final ResourceLoader resourceLoader, final RulePriority minimumPriority,\n                          final boolean warnDeprecated, final boolean enableCompatibility)", "testcase": false, "constructor": true}, {"identifier": "RuleSetFactory", "parameters": "(final RuleSetFactory factory, final boolean warnDeprecated)", "modifiers": "public", "return": "", "signature": " RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated)", "full_signature": "public  RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated)", "class_method_signature": "RuleSetFactory.RuleSetFactory(final RuleSetFactory factory, final boolean warnDeprecated)", "testcase": false, "constructor": true}, {"identifier": "getCompatibilityFilter", "parameters": "()", "modifiers": "", "return": "RuleSetFactoryCompatibility", "signature": "RuleSetFactoryCompatibility getCompatibilityFilter()", "full_signature": " RuleSetFactoryCompatibility getCompatibilityFilter()", "class_method_signature": "RuleSetFactory.getCompatibilityFilter()", "testcase": false, "constructor": false}, {"identifier": "getRegisteredRuleSets", "parameters": "()", "modifiers": "public", "return": "Iterator<RuleSet>", "signature": "Iterator<RuleSet> getRegisteredRuleSets()", "full_signature": "public Iterator<RuleSet> getRegisteredRuleSets()", "class_method_signature": "RuleSetFactory.getRegisteredRuleSets()", "testcase": false, "constructor": false}, {"identifier": "createRuleSets", "parameters": "(String referenceString)", "modifiers": "public", "return": "RuleSets", "signature": "RuleSets createRuleSets(String referenceString)", "full_signature": "public RuleSets createRuleSets(String referenceString)", "class_method_signature": "RuleSetFactory.createRuleSets(String referenceString)", "testcase": false, "constructor": false}, {"identifier": "createRuleSets", "parameters": "(List<RuleSetReferenceId> ruleSetReferenceIds)", "modifiers": "public", "return": "RuleSets", "signature": "RuleSets createRuleSets(List<RuleSetReferenceId> ruleSetReferenceIds)", "full_signature": "public RuleSets createRuleSets(List<RuleSetReferenceId> ruleSetReferenceIds)", "class_method_signature": "RuleSetFactory.createRuleSets(List<RuleSetReferenceId> ruleSetReferenceIds)", "testcase": false, "constructor": false}, {"identifier": "createRuleSet", "parameters": "(String referenceString)", "modifiers": "public", "return": "RuleSet", "signature": "RuleSet createRuleSet(String referenceString)", "full_signature": "public RuleSet createRuleSet(String referenceString)", "class_method_signature": "RuleSetFactory.createRuleSet(String referenceString)", "testcase": false, "constructor": false}, {"identifier": "createRuleSet", "parameters": "(RuleSetReferenceId ruleSetReferenceId)", "modifiers": "public", "return": "RuleSet", "signature": "RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId)", "full_signature": "public RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId)", "class_method_signature": "RuleSetFactory.createRuleSet(RuleSetReferenceId ruleSetReferenceId)", "testcase": false, "constructor": false}, {"identifier": "createRuleSet", "parameters": "(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "modifiers": "private", "return": "RuleSet", "signature": "RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "full_signature": "private RuleSet createRuleSet(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "class_method_signature": "RuleSetFactory.createRuleSet(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "testcase": false, "constructor": false}, {"identifier": "createRuleSetCopy", "parameters": "(RuleSet original)", "modifiers": "public", "return": "RuleSet", "signature": "RuleSet createRuleSetCopy(RuleSet original)", "full_signature": "public RuleSet createRuleSetCopy(RuleSet original)", "class_method_signature": "RuleSetFactory.createRuleSetCopy(RuleSet original)", "testcase": false, "constructor": false}, {"identifier": "createNewRuleSet", "parameters": "(String name,\n                                    String description,\n                                    String fileName,\n                                    Collection<String> excludePatterns,\n                                    Collection<String> includePatterns,\n                                    Collection<Rule> rules)", "modifiers": "public", "return": "RuleSet", "signature": "RuleSet createNewRuleSet(String name,\n                                    String description,\n                                    String fileName,\n                                    Collection<String> excludePatterns,\n                                    Collection<String> includePatterns,\n                                    Collection<Rule> rules)", "full_signature": "public RuleSet createNewRuleSet(String name,\n                                    String description,\n                                    String fileName,\n                                    Collection<String> excludePatterns,\n                                    Collection<String> includePatterns,\n                                    Collection<Rule> rules)", "class_method_signature": "RuleSetFactory.createNewRuleSet(String name,\n                                    String description,\n                                    String fileName,\n                                    Collection<String> excludePatterns,\n                                    Collection<String> includePatterns,\n                                    Collection<Rule> rules)", "testcase": false, "constructor": false}, {"identifier": "toPatterns", "parameters": "(Collection<String> sources)", "modifiers": "private", "return": "Collection<Pattern>", "signature": "Collection<Pattern> toPatterns(Collection<String> sources)", "full_signature": "private Collection<Pattern> toPatterns(Collection<String> sources)", "class_method_signature": "RuleSetFactory.toPatterns(Collection<String> sources)", "testcase": false, "constructor": false}, {"identifier": "createSingleRuleRuleSet", "parameters": "(final Rule rule)", "modifiers": "public", "return": "RuleSet", "signature": "RuleSet createSingleRuleRuleSet(final Rule rule)", "full_signature": "public RuleSet createSingleRuleRuleSet(final Rule rule)", "class_method_signature": "RuleSetFactory.createSingleRuleRuleSet(final Rule rule)", "testcase": false, "constructor": false}, {"identifier": "createRule", "parameters": "(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "modifiers": "private", "return": "Rule", "signature": "Rule createRule(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "full_signature": "private Rule createRule(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "class_method_signature": "RuleSetFactory.createRule(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "testcase": false, "constructor": false}, {"identifier": "parseRuleSetNode", "parameters": "(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "modifiers": "private", "return": "RuleSet", "signature": "RuleSet parseRuleSetNode(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "full_signature": "private RuleSet parseRuleSetNode(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "class_method_signature": "RuleSetFactory.parseRuleSetNode(RuleSetReferenceId ruleSetReferenceId, boolean withDeprecatedRuleReferences)", "testcase": false, "constructor": false}, {"identifier": "parseRegex", "parameters": "(String text)", "modifiers": "private", "return": "Pattern", "signature": "Pattern parseRegex(String text)", "full_signature": "private Pattern parseRegex(String text)", "class_method_signature": "RuleSetFactory.parseRegex(String text)", "testcase": false, "constructor": false}, {"identifier": "createDocumentBuilder", "parameters": "()", "modifiers": "private", "return": "DocumentBuilder", "signature": "DocumentBuilder createDocumentBuilder()", "full_signature": "private DocumentBuilder createDocumentBuilder()", "class_method_signature": "RuleSetFactory.createDocumentBuilder()", "testcase": false, "constructor": false}, {"identifier": "parseRuleNode", "parameters": "(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode,\n            boolean withDeprecatedRuleReferences, Set<String> rulesetReferences)", "modifiers": "private", "return": "void", "signature": "void parseRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode,\n            boolean withDeprecatedRuleReferences, Set<String> rulesetReferences)", "full_signature": "private void parseRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode,\n            boolean withDeprecatedRuleReferences, Set<String> rulesetReferences)", "class_method_signature": "RuleSetFactory.parseRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder, Node ruleNode,\n            boolean withDeprecatedRuleReferences, Set<String> rulesetReferences)", "testcase": false, "constructor": false}, {"identifier": "parseRuleSetReferenceNode", "parameters": "(RuleSetBuilder ruleSetBuilder, Element ruleElement, String ref, Set<String> rulesetReferences)", "modifiers": "private", "return": "void", "signature": "void parseRuleSetReferenceNode(RuleSetBuilder ruleSetBuilder, Element ruleElement, String ref, Set<String> rulesetReferences)", "full_signature": "private void parseRuleSetReferenceNode(RuleSetBuilder ruleSetBuilder, Element ruleElement, String ref, Set<String> rulesetReferences)", "class_method_signature": "RuleSetFactory.parseRuleSetReferenceNode(RuleSetBuilder ruleSetBuilder, Element ruleElement, String ref, Set<String> rulesetReferences)", "testcase": false, "constructor": false}, {"identifier": "parseSingleRuleNode", "parameters": "(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode)", "modifiers": "private", "return": "void", "signature": "void parseSingleRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode)", "full_signature": "private void parseSingleRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode)", "class_method_signature": "RuleSetFactory.parseSingleRuleNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode)", "testcase": false, "constructor": false}, {"identifier": "parseRuleReferenceNode", "parameters": "(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode, String ref, boolean withDeprecatedRuleReferences)", "modifiers": "private", "return": "void", "signature": "void parseRuleReferenceNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode, String ref, boolean withDeprecatedRuleReferences)", "full_signature": "private void parseRuleReferenceNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode, String ref, boolean withDeprecatedRuleReferences)", "class_method_signature": "RuleSetFactory.parseRuleReferenceNode(RuleSetReferenceId ruleSetReferenceId, RuleSetBuilder ruleSetBuilder,\n            Node ruleNode, String ref, boolean withDeprecatedRuleReferences)", "testcase": false, "constructor": false}, {"identifier": "containsRule", "parameters": "(RuleSetReferenceId ruleSetReferenceId, String ruleName)", "modifiers": "private", "return": "boolean", "signature": "boolean containsRule(RuleSetReferenceId ruleSetReferenceId, String ruleName)", "full_signature": "private boolean containsRule(RuleSetReferenceId ruleSetReferenceId, String ruleName)", "class_method_signature": "RuleSetFactory.containsRule(RuleSetReferenceId ruleSetReferenceId, String ruleName)", "testcase": false, "constructor": false}, {"identifier": "isElementNode", "parameters": "(Node node, String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean isElementNode(Node node, String name)", "full_signature": "private static boolean isElementNode(Node node, String name)", "class_method_signature": "RuleSetFactory.isElementNode(Node node, String name)", "testcase": false, "constructor": false}, {"identifier": "parseTextNode", "parameters": "(Node node)", "modifiers": "private static", "return": "String", "signature": "String parseTextNode(Node node)", "full_signature": "private static String parseTextNode(Node node)", "class_method_signature": "RuleSetFactory.parseTextNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "isRuleName", "parameters": "(Element ruleElement, String ruleName)", "modifiers": "private", "return": "boolean", "signature": "boolean isRuleName(Element ruleElement, String ruleName)", "full_signature": "private boolean isRuleName(Element ruleElement, String ruleName)", "class_method_signature": "RuleSetFactory.isRuleName(Element ruleElement, String ruleName)", "testcase": false, "constructor": false}], "file": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetFactory.java"}, "focal_method": {"identifier": "createRuleSet", "parameters": "(String referenceString)", "modifiers": "public", "return": "RuleSet", "body": "public RuleSet createRuleSet(String referenceString) throws RuleSetNotFoundException {\n        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(referenceString);\n        if (references.isEmpty()) {\n            throw new RuleSetNotFoundException(\n                    \"No RuleSetReferenceId can be parsed from the string: <\" + referenceString + '>');\n        }\n        return createRuleSet(references.get(0));\n    }", "signature": "RuleSet createRuleSet(String referenceString)", "full_signature": "public RuleSet createRuleSet(String referenceString)", "class_method_signature": "RuleSetFactory.createRuleSet(String referenceString)", "testcase": false, "constructor": false, "invocations": ["parse", "isEmpty", "createRuleSet", "get"]}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}