{"test_class": {"identifier": "DocumentFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_PATH = \"psvm.java\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PATH = \"psvm.java\"", "var_name": "FILE_PATH"}, {"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private File temporaryFile;", "modifier": "private", "type": "File", "declarator": "temporaryFile", "var_name": "temporaryFile"}], "file": "pmd-core/src/test/java/net/sourceforge/pmd/document/DocumentFileTest.java"}, "test_case": {"identifier": "lineToOffsetMappingWithLineFeedShouldSucceed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void lineToOffsetMappingWithLineFeedShouldSucceed() throws IOException {\n        final String code = \"public static int main(String[] args) {\" + '\\n'\n                + \"int var;\" + '\\n'\n                + \"}\";\n        writeContentToTemporaryFile(code);\n\n        final List<Integer> expectedLineToOffset = new ArrayList<>();\n        expectedLineToOffset.add(0);\n        expectedLineToOffset.add(40);\n        expectedLineToOffset.add(49);\n\n        try (DocumentFile documentFile = new DocumentFile(temporaryFile, StandardCharsets.UTF_8)) {\n            assertEquals(expectedLineToOffset, documentFile.getLineToOffset());\n        }\n    }", "signature": "void lineToOffsetMappingWithLineFeedShouldSucceed()", "full_signature": "@Test public void lineToOffsetMappingWithLineFeedShouldSucceed()", "class_method_signature": "DocumentFileTest.lineToOffsetMappingWithLineFeedShouldSucceed()", "testcase": true, "constructor": false, "invocations": ["writeContentToTemporaryFile", "add", "add", "add", "assertEquals", "getLineToOffset"]}, "focal_class": {"identifier": "DocumentFile", "superclass": "", "interfaces": "implements Document, Closeable", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(DocumentFile.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DocumentFile.class.getName())", "var_name": "LOG"}, {"original_string": "private List<Integer> lineToOffset = new ArrayList<>();", "modifier": "private", "type": "List<Integer>", "declarator": "lineToOffset = new ArrayList<>()", "var_name": "lineToOffset"}, {"original_string": "private final Path filePath;", "modifier": "private final", "type": "Path", "declarator": "filePath", "var_name": "filePath"}, {"original_string": "private final BufferedReader reader;", "modifier": "private final", "type": "BufferedReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private int currentPosition = 0;", "modifier": "private", "type": "int", "declarator": "currentPosition = 0", "var_name": "currentPosition"}, {"original_string": "private final Path temporaryPath = Files.createTempFile(\"pmd-\", \".tmp\");", "modifier": "private final", "type": "Path", "declarator": "temporaryPath = Files.createTempFile(\"pmd-\", \".tmp\")", "var_name": "temporaryPath"}, {"original_string": "private final Writer writer;", "modifier": "private final", "type": "Writer", "declarator": "writer", "var_name": "writer"}], "methods": [{"identifier": "DocumentFile", "parameters": "(final File file, final Charset charset)", "modifiers": "public", "return": "", "signature": " DocumentFile(final File file, final Charset charset)", "full_signature": "public  DocumentFile(final File file, final Charset charset)", "class_method_signature": "DocumentFile.DocumentFile(final File file, final Charset charset)", "testcase": false, "constructor": true}, {"identifier": "mapLinesToOffsets", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void mapLinesToOffsets()", "full_signature": "private void mapLinesToOffsets()", "class_method_signature": "DocumentFile.mapLinesToOffsets()", "testcase": false, "constructor": false}, {"identifier": "getLineLengthWithLineSeparator", "parameters": "(final Scanner scanner)", "modifiers": "private", "return": "int", "signature": "int getLineLengthWithLineSeparator(final Scanner scanner)", "full_signature": "private int getLineLengthWithLineSeparator(final Scanner scanner)", "class_method_signature": "DocumentFile.getLineLengthWithLineSeparator(final Scanner scanner)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(int beginLine, int beginColumn, final String textToInsert)", "modifiers": "@Override public", "return": "void", "signature": "void insert(int beginLine, int beginColumn, final String textToInsert)", "full_signature": "@Override public void insert(int beginLine, int beginColumn, final String textToInsert)", "class_method_signature": "DocumentFile.insert(int beginLine, int beginColumn, final String textToInsert)", "testcase": false, "constructor": false}, {"identifier": "tryToInsertIntoFile", "parameters": "(int beginLine, int beginColumn, final String textToInsert)", "modifiers": "private", "return": "void", "signature": "void tryToInsertIntoFile(int beginLine, int beginColumn, final String textToInsert)", "full_signature": "private void tryToInsertIntoFile(int beginLine, int beginColumn, final String textToInsert)", "class_method_signature": "DocumentFile.tryToInsertIntoFile(int beginLine, int beginColumn, final String textToInsert)", "testcase": false, "constructor": false}, {"identifier": "mapToOffset", "parameters": "(final int line, final int column)", "modifiers": "private", "return": "int", "signature": "int mapToOffset(final int line, final int column)", "full_signature": "private int mapToOffset(final int line, final int column)", "class_method_signature": "DocumentFile.mapToOffset(final int line, final int column)", "testcase": false, "constructor": false}, {"identifier": "writeUntilOffsetReached", "parameters": "(final int nextOffsetToRead)", "modifiers": "private", "return": "void", "signature": "void writeUntilOffsetReached(final int nextOffsetToRead)", "full_signature": "private void writeUntilOffsetReached(final int nextOffsetToRead)", "class_method_signature": "DocumentFile.writeUntilOffsetReached(final int nextOffsetToRead)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(final RegionByLine regionByLine, final String textToReplace)", "modifiers": "@Override public", "return": "void", "signature": "void replace(final RegionByLine regionByLine, final String textToReplace)", "full_signature": "@Override public void replace(final RegionByLine regionByLine, final String textToReplace)", "class_method_signature": "DocumentFile.replace(final RegionByLine regionByLine, final String textToReplace)", "testcase": false, "constructor": false}, {"identifier": "mapToRegionByOffset", "parameters": "(final RegionByLine regionByLine)", "modifiers": "private", "return": "RegionByOffset", "signature": "RegionByOffset mapToRegionByOffset(final RegionByLine regionByLine)", "full_signature": "private RegionByOffset mapToRegionByOffset(final RegionByLine regionByLine)", "class_method_signature": "DocumentFile.mapToRegionByOffset(final RegionByLine regionByLine)", "testcase": false, "constructor": false}, {"identifier": "tryToReplaceInFile", "parameters": "(final RegionByOffset regionByOffset, final String textToReplace)", "modifiers": "private", "return": "void", "signature": "void tryToReplaceInFile(final RegionByOffset regionByOffset, final String textToReplace)", "full_signature": "private void tryToReplaceInFile(final RegionByOffset regionByOffset, final String textToReplace)", "class_method_signature": "DocumentFile.tryToReplaceInFile(final RegionByOffset regionByOffset, final String textToReplace)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final RegionByLine regionByOffset)", "modifiers": "@Override public", "return": "void", "signature": "void delete(final RegionByLine regionByOffset)", "full_signature": "@Override public void delete(final RegionByLine regionByOffset)", "class_method_signature": "DocumentFile.delete(final RegionByLine regionByOffset)", "testcase": false, "constructor": false}, {"identifier": "tryToDeleteFromFile", "parameters": "(final RegionByOffset regionByOffset)", "modifiers": "private", "return": "void", "signature": "void tryToDeleteFromFile(final RegionByOffset regionByOffset)", "full_signature": "private void tryToDeleteFromFile(final RegionByOffset regionByOffset)", "class_method_signature": "DocumentFile.tryToDeleteFromFile(final RegionByOffset regionByOffset)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DocumentFile.close()", "testcase": false, "constructor": false}, {"identifier": "writeUntilEOF", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeUntilEOF()", "full_signature": "private void writeUntilEOF()", "class_method_signature": "DocumentFile.writeUntilEOF()", "testcase": false, "constructor": false}, {"identifier": "getLineToOffset", "parameters": "()", "modifiers": "", "return": "List<Integer>", "signature": "List<Integer> getLineToOffset()", "full_signature": " List<Integer> getLineToOffset()", "class_method_signature": "DocumentFile.getLineToOffset()", "testcase": false, "constructor": false}], "file": "pmd-core/src/main/java/net/sourceforge/pmd/document/DocumentFile.java"}, "focal_method": {"identifier": "getLineToOffset", "parameters": "()", "modifiers": "", "return": "List<Integer>", "body": "List<Integer> getLineToOffset() {\n        return lineToOffset;\n    }", "signature": "List<Integer> getLineToOffset()", "full_signature": " List<Integer> getLineToOffset()", "class_method_signature": "DocumentFile.getLineToOffset()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}