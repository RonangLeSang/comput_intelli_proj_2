{"test_class": {"identifier": "RuleSetReferenceIdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@org.junit.Rule\n    public WireMockRule wireMockRule = new WireMockRule(0);", "modifier": "@org.junit.Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(0)", "var_name": "wireMockRule"}], "file": "pmd-core/src/test/java/net/sourceforge/pmd/RuleSetReferenceIdTest.java"}, "test_case": {"identifier": "testOneReleaseRuleSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOneReleaseRuleSet() {\n        List<RuleSetReferenceId> references = RuleSetReferenceId.parse(\"50\");\n        assertEquals(1, references.size());\n        assertRuleSetReferenceId(true, \"rulesets/releases/50.xml\", true, null, \"rulesets/releases/50.xml\",\n                references.get(0));\n    }", "signature": "void testOneReleaseRuleSet()", "full_signature": "@Test public void testOneReleaseRuleSet()", "class_method_signature": "RuleSetReferenceIdTest.testOneReleaseRuleSet()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "size", "assertRuleSetReferenceId", "get"]}, "focal_class": {"identifier": "RuleSetReferenceId", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final boolean external;", "modifier": "private final", "type": "boolean", "declarator": "external", "var_name": "external"}, {"original_string": "private final String ruleSetFileName;", "modifier": "private final", "type": "String", "declarator": "ruleSetFileName", "var_name": "ruleSetFileName"}, {"original_string": "private final boolean allRules;", "modifier": "private final", "type": "boolean", "declarator": "allRules", "var_name": "allRules"}, {"original_string": "private final String ruleName;", "modifier": "private final", "type": "String", "declarator": "ruleName", "var_name": "ruleName"}, {"original_string": "private final RuleSetReferenceId externalRuleSetReferenceId;", "modifier": "private final", "type": "RuleSetReferenceId", "declarator": "externalRuleSetReferenceId", "var_name": "externalRuleSetReferenceId"}], "methods": [{"identifier": "RuleSetReferenceId", "parameters": "(final String id)", "modifiers": "public", "return": "", "signature": " RuleSetReferenceId(final String id)", "full_signature": "public  RuleSetReferenceId(final String id)", "class_method_signature": "RuleSetReferenceId.RuleSetReferenceId(final String id)", "testcase": false, "constructor": true}, {"identifier": "RuleSetReferenceId", "parameters": "(final String id, final RuleSetReferenceId externalRuleSetReferenceId)", "modifiers": "public", "return": "", "signature": " RuleSetReferenceId(final String id, final RuleSetReferenceId externalRuleSetReferenceId)", "full_signature": "public  RuleSetReferenceId(final String id, final RuleSetReferenceId externalRuleSetReferenceId)", "class_method_signature": "RuleSetReferenceId.RuleSetReferenceId(final String id, final RuleSetReferenceId externalRuleSetReferenceId)", "testcase": false, "constructor": true}, {"identifier": "checkRulesetExists", "parameters": "(final String name)", "modifiers": "private", "return": "boolean", "signature": "boolean checkRulesetExists(final String name)", "full_signature": "private boolean checkRulesetExists(final String name)", "class_method_signature": "RuleSetReferenceId.checkRulesetExists(final String name)", "testcase": false, "constructor": false}, {"identifier": "resolveBuiltInRuleset", "parameters": "(final String name)", "modifiers": "private", "return": "String", "signature": "String resolveBuiltInRuleset(final String name)", "full_signature": "private String resolveBuiltInRuleset(final String name)", "class_method_signature": "RuleSetReferenceId.resolveBuiltInRuleset(final String name)", "testcase": false, "constructor": false}, {"identifier": "getRuleName", "parameters": "(final String rulesetName)", "modifiers": "private", "return": "String", "signature": "String getRuleName(final String rulesetName)", "full_signature": "private String getRuleName(final String rulesetName)", "class_method_signature": "RuleSetReferenceId.getRuleName(final String rulesetName)", "testcase": false, "constructor": false}, {"identifier": "isHttpUrl", "parameters": "(String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean isHttpUrl(String name)", "full_signature": "private static boolean isHttpUrl(String name)", "class_method_signature": "RuleSetReferenceId.isHttpUrl(String name)", "testcase": false, "constructor": false}, {"identifier": "isValidUrl", "parameters": "(String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidUrl(String name)", "full_signature": "private static boolean isValidUrl(String name)", "class_method_signature": "RuleSetReferenceId.isValidUrl(String name)", "testcase": false, "constructor": false}, {"identifier": "isFullRuleSetName", "parameters": "(String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean isFullRuleSetName(String name)", "full_signature": "private static boolean isFullRuleSetName(String name)", "class_method_signature": "RuleSetReferenceId.isFullRuleSetName(String name)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String referenceString)", "modifiers": "public static", "return": "List<RuleSetReferenceId>", "signature": "List<RuleSetReferenceId> parse(String referenceString)", "full_signature": "public static List<RuleSetReferenceId> parse(String referenceString)", "class_method_signature": "RuleSetReferenceId.parse(String referenceString)", "testcase": false, "constructor": false}, {"identifier": "isExternal", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExternal()", "full_signature": "public boolean isExternal()", "class_method_signature": "RuleSetReferenceId.isExternal()", "testcase": false, "constructor": false}, {"identifier": "isAllRules", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllRules()", "full_signature": "public boolean isAllRules()", "class_method_signature": "RuleSetReferenceId.isAllRules()", "testcase": false, "constructor": false}, {"identifier": "getRuleSetFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRuleSetFileName()", "full_signature": "public String getRuleSetFileName()", "class_method_signature": "RuleSetReferenceId.getRuleSetFileName()", "testcase": false, "constructor": false}, {"identifier": "getRuleName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRuleName()", "full_signature": "public String getRuleName()", "class_method_signature": "RuleSetReferenceId.getRuleName()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final ResourceLoader rl)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getInputStream(final ResourceLoader rl)", "full_signature": "public InputStream getInputStream(final ResourceLoader rl)", "class_method_signature": "RuleSetReferenceId.getInputStream(final ResourceLoader rl)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RuleSetReferenceId.toString()", "testcase": false, "constructor": false}], "file": "pmd-core/src/main/java/net/sourceforge/pmd/RuleSetReferenceId.java"}, "focal_method": {"identifier": "parse", "parameters": "(String referenceString)", "modifiers": "public static", "return": "List<RuleSetReferenceId>", "body": "public static List<RuleSetReferenceId> parse(String referenceString) {\n        List<RuleSetReferenceId> references = new ArrayList<>();\n        if (referenceString != null && referenceString.trim().length() > 0) {\n\n            if (referenceString.indexOf(',') == -1) {\n                references.add(new RuleSetReferenceId(referenceString));\n            } else {\n                for (String name : referenceString.split(\",\")) {\n                    references.add(new RuleSetReferenceId(name.trim()));\n                }\n            }\n        }\n        return references;\n    }", "signature": "List<RuleSetReferenceId> parse(String referenceString)", "full_signature": "public static List<RuleSetReferenceId> parse(String referenceString)", "class_method_signature": "RuleSetReferenceId.parse(String referenceString)", "testcase": false, "constructor": false, "invocations": ["length", "trim", "indexOf", "add", "split", "add", "trim"]}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}