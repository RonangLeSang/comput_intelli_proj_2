{"test_class": {"identifier": "ASTClassOrInterfaceDeclarationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LOCAL_CLASS_IN_METHOD\n            = \"class Foo { void bar() { class Local {}}}\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_CLASS_IN_METHOD\n            = \"class Foo { void bar() { class Local {}}}\"", "var_name": "LOCAL_CLASS_IN_METHOD"}, {"original_string": "private static final String NESTED_CLASS_IS_NOT_LOCAL\n            = \"class Foo { class Nested {} void bar() {}}\";", "modifier": "private static final", "type": "String", "declarator": "NESTED_CLASS_IS_NOT_LOCAL\n            = \"class Foo { class Nested {} void bar() {}}\"", "var_name": "NESTED_CLASS_IS_NOT_LOCAL"}, {"original_string": "private static final String LOCAL_CLASS_IN_INITIALIZER\n            = \"class Foo { { class Local {} } }\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_CLASS_IN_INITIALIZER\n            = \"class Foo { { class Local {} } }\"", "var_name": "LOCAL_CLASS_IN_INITIALIZER"}, {"original_string": "private static final String LOCAL_CLASS_WITH_MODIFIERS\n            = \"class Foo { { abstract class Local {} } }\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_CLASS_WITH_MODIFIERS\n            = \"class Foo { { abstract class Local {} } }\"", "var_name": "LOCAL_CLASS_WITH_MODIFIERS"}, {"original_string": "private static final String LOCAL_CLASS_WITH_MIXED_MODIFIER_ANNOTATIONS\n            = \"class Foo { { final @F class Local {} } }\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_CLASS_WITH_MIXED_MODIFIER_ANNOTATIONS\n            = \"class Foo { { final @F class Local {} } }\"", "var_name": "LOCAL_CLASS_WITH_MIXED_MODIFIER_ANNOTATIONS"}, {"original_string": "private static final String LOCAL_CHILDREN_ARE_NOT_ALWAYS_LOCAL\n            = \"class Foo { { class Local { class Nested {} void bar() {class Local2 {}}}}}\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_CHILDREN_ARE_NOT_ALWAYS_LOCAL\n            = \"class Foo { { class Local { class Nested {} void bar() {class Local2 {}}}}}\"", "var_name": "LOCAL_CHILDREN_ARE_NOT_ALWAYS_LOCAL"}], "file": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/ast/ASTClassOrInterfaceDeclarationTest.java"}, "test_case": {"identifier": "testLocalChildrenAreNotAlwaysLocal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLocalChildrenAreNotAlwaysLocal() {\n        List<ASTClassOrInterfaceDeclaration> classes = getClassDecls(LOCAL_CHILDREN_ARE_NOT_ALWAYS_LOCAL);\n        assertTrue(classes.size() == 4);\n\n        assertFalse(\"Local class false-positive\", classes.get(0).isLocal()); // class Foo\n        assertTrue(\"Local class false-negative\", classes.get(1).isLocal());  // class Local\n        assertFalse(\"Local class false-positive\", classes.get(2).isLocal()); // class Nested\n        assertTrue(\"Local class false-negative\", classes.get(3).isLocal());  // class Local2\n    }", "signature": "void testLocalChildrenAreNotAlwaysLocal()", "full_signature": "@Test public void testLocalChildrenAreNotAlwaysLocal()", "class_method_signature": "ASTClassOrInterfaceDeclarationTest.testLocalChildrenAreNotAlwaysLocal()", "testcase": true, "constructor": false, "invocations": ["getClassDecls", "assertTrue", "size", "assertFalse", "isLocal", "get", "assertTrue", "isLocal", "get", "assertFalse", "isLocal", "get", "assertTrue", "isLocal", "get"]}, "focal_class": {"identifier": "ASTClassOrInterfaceDeclaration", "superclass": "extends AbstractAnyTypeDeclaration", "interfaces": "", "fields": [{"original_string": "private boolean isLocal;", "modifier": "private", "type": "boolean", "declarator": "isLocal", "var_name": "isLocal"}, {"original_string": "private boolean isLocalComputed;", "modifier": "private", "type": "boolean", "declarator": "isLocalComputed", "var_name": "isLocalComputed"}, {"original_string": "private boolean isInterface;", "modifier": "private", "type": "boolean", "declarator": "isInterface", "var_name": "isInterface"}], "methods": [{"identifier": "ASTClassOrInterfaceDeclaration", "parameters": "(int id)", "modifiers": "@InternalApi @Deprecated public", "return": "", "signature": " ASTClassOrInterfaceDeclaration(int id)", "full_signature": "@InternalApi @Deprecated public  ASTClassOrInterfaceDeclaration(int id)", "class_method_signature": "ASTClassOrInterfaceDeclaration.ASTClassOrInterfaceDeclaration(int id)", "testcase": false, "constructor": true}, {"identifier": "ASTClassOrInterfaceDeclaration", "parameters": "(JavaParser p, int id)", "modifiers": "@InternalApi @Deprecated public", "return": "", "signature": " ASTClassOrInterfaceDeclaration(JavaParser p, int id)", "full_signature": "@InternalApi @Deprecated public  ASTClassOrInterfaceDeclaration(JavaParser p, int id)", "class_method_signature": "ASTClassOrInterfaceDeclaration.ASTClassOrInterfaceDeclaration(JavaParser p, int id)", "testcase": false, "constructor": true}, {"identifier": "isFindBoundary", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFindBoundary()", "full_signature": "@Override public boolean isFindBoundary()", "class_method_signature": "ASTClassOrInterfaceDeclaration.isFindBoundary()", "testcase": false, "constructor": false}, {"identifier": "jjtAccept", "parameters": "(JavaParserVisitor visitor, Object data)", "modifiers": "@Override public", "return": "Object", "signature": "Object jjtAccept(JavaParserVisitor visitor, Object data)", "full_signature": "@Override public Object jjtAccept(JavaParserVisitor visitor, Object data)", "class_method_signature": "ASTClassOrInterfaceDeclaration.jjtAccept(JavaParserVisitor visitor, Object data)", "testcase": false, "constructor": false}, {"identifier": "isPackagePrivate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPackagePrivate()", "full_signature": "@Override public boolean isPackagePrivate()", "class_method_signature": "ASTClassOrInterfaceDeclaration.isPackagePrivate()", "testcase": false, "constructor": false}, {"identifier": "isLocal", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLocal()", "full_signature": "@Override public boolean isLocal()", "class_method_signature": "ASTClassOrInterfaceDeclaration.isLocal()", "testcase": false, "constructor": false}, {"identifier": "isInterface", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInterface()", "full_signature": "public boolean isInterface()", "class_method_signature": "ASTClassOrInterfaceDeclaration.isInterface()", "testcase": false, "constructor": false}, {"identifier": "setInterface", "parameters": "()", "modifiers": "@InternalApi @Deprecated public", "return": "void", "signature": "void setInterface()", "full_signature": "@InternalApi @Deprecated public void setInterface()", "class_method_signature": "ASTClassOrInterfaceDeclaration.setInterface()", "testcase": false, "constructor": false}, {"identifier": "getTypeKind", "parameters": "()", "modifiers": "@Override public", "return": "TypeKind", "signature": "TypeKind getTypeKind()", "full_signature": "@Override public TypeKind getTypeKind()", "class_method_signature": "ASTClassOrInterfaceDeclaration.getTypeKind()", "testcase": false, "constructor": false}, {"identifier": "getDeclarations", "parameters": "()", "modifiers": "@Override public", "return": "List<ASTAnyTypeBodyDeclaration>", "signature": "List<ASTAnyTypeBodyDeclaration> getDeclarations()", "full_signature": "@Override public List<ASTAnyTypeBodyDeclaration> getDeclarations()", "class_method_signature": "ASTClassOrInterfaceDeclaration.getDeclarations()", "testcase": false, "constructor": false}, {"identifier": "getSuperClassTypeNode", "parameters": "()", "modifiers": "public", "return": "ASTClassOrInterfaceType", "signature": "ASTClassOrInterfaceType getSuperClassTypeNode()", "full_signature": "public ASTClassOrInterfaceType getSuperClassTypeNode()", "class_method_signature": "ASTClassOrInterfaceDeclaration.getSuperClassTypeNode()", "testcase": false, "constructor": false}, {"identifier": "getSuperInterfacesTypeNodes", "parameters": "()", "modifiers": "public", "return": "List<ASTClassOrInterfaceType>", "signature": "List<ASTClassOrInterfaceType> getSuperInterfacesTypeNodes()", "full_signature": "public List<ASTClassOrInterfaceType> getSuperInterfacesTypeNodes()", "class_method_signature": "ASTClassOrInterfaceDeclaration.getSuperInterfacesTypeNodes()", "testcase": false, "constructor": false}, {"identifier": "getPermittedSubclasses", "parameters": "()", "modifiers": "@Experimental public", "return": "List<ASTClassOrInterfaceType>", "signature": "List<ASTClassOrInterfaceType> getPermittedSubclasses()", "full_signature": "@Experimental public List<ASTClassOrInterfaceType> getPermittedSubclasses()", "class_method_signature": "ASTClassOrInterfaceDeclaration.getPermittedSubclasses()", "testcase": false, "constructor": false}, {"identifier": "isSealed", "parameters": "()", "modifiers": "@Experimental public", "return": "boolean", "signature": "boolean isSealed()", "full_signature": "@Experimental public boolean isSealed()", "class_method_signature": "ASTClassOrInterfaceDeclaration.isSealed()", "testcase": false, "constructor": false}, {"identifier": "isNonSealed", "parameters": "()", "modifiers": "@Experimental public", "return": "boolean", "signature": "boolean isNonSealed()", "full_signature": "@Experimental public boolean isNonSealed()", "class_method_signature": "ASTClassOrInterfaceDeclaration.isNonSealed()", "testcase": false, "constructor": false}], "file": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTClassOrInterfaceDeclaration.java"}, "focal_method": {"identifier": "isLocal", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isLocal() {\n        if (!isLocalComputed) {\n            Node current = getParent();\n            while (current != null) {\n                if (current instanceof ASTAnyTypeDeclaration) {\n                    isLocal = false;\n                    break;\n                } else if (current instanceof ASTMethodOrConstructorDeclaration\n                    || current instanceof ASTInitializer) {\n                    isLocal = true;\n                    break;\n                }\n                current = current.getParent();\n            }\n            if (current == null) {\n                isLocal = false;\n            }\n            isLocalComputed = true;\n        }\n        return isLocal;\n    }", "signature": "boolean isLocal()", "full_signature": "@Override public boolean isLocal()", "class_method_signature": "ASTClassOrInterfaceDeclaration.isLocal()", "testcase": false, "constructor": false, "invocations": ["getParent", "getParent"]}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}