{"test_class": {"identifier": "VariableNameDeclarationTest", "superclass": "extends BaseNonParserTest", "interfaces": "", "fields": [{"original_string": "private static final String EXCEPTION_PARAMETER = \"public class Test { { try {} catch(Exception ie) {} } }\";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_PARAMETER = \"public class Test { { try {} catch(Exception ie) {} } }\"", "var_name": "EXCEPTION_PARAMETER"}, {"original_string": "public static final String TEST1 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL + \"  int bar = 42;\"\n            + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST1 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL + \"  int bar = 42;\"\n            + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "TEST1"}, {"original_string": "public static final String TEST2 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL\n            + \"  try {} catch(Exception e) {}\" + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST2 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL\n            + \"  try {} catch(Exception e) {}\" + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "TEST2"}, {"original_string": "public static final String TEST3 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL + \"  int[] x;\"\n            + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST3 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL + \"  int[] x;\"\n            + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "TEST3"}, {"original_string": "public static final String TEST4 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL + \"  String x;\"\n            + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST4 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL + \"  String x;\"\n            + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "TEST4"}, {"original_string": "public static final String TEST5 = \"public class Foo {\" + PMD.EOL + \" void foo(String x) {}\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST5 = \"public class Foo {\" + PMD.EOL + \" void foo(String x) {}\" + PMD.EOL + \"}\"", "var_name": "TEST5"}, {"original_string": "public static final String TEST6 = \"import java.util.ArrayList; public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL\n            + \"  var bar = new ArrayList<String>(\\\"param\\\");\" + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST6 = \"import java.util.ArrayList; public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL\n            + \"  var bar = new ArrayList<String>(\\\"param\\\");\" + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "TEST6"}, {"original_string": "public static final String TEST7 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL + \"  var bar = 42L;\"\n            + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST7 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL + \"  var bar = 42L;\"\n            + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "TEST7"}, {"original_string": "public static final String TEST8 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL\n            + \"  var bar = \\\"test\\\";\" + PMD.EOL + \"  var foo = bar;\" + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST8 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL\n            + \"  var bar = \\\"test\\\";\" + PMD.EOL + \"  var foo = bar;\" + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "TEST8"}, {"original_string": "public static final String TEST9 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL\n            + \"  Map<String, Object> bar = new HashMap<>();\" + PMD.EOL + \"  bar.forEach((key, value) -> {\" + PMD.EOL\n            + \"   if (value instanceof String) {\" + PMD.EOL + \"    var foo = 42L;\" + PMD.EOL\n            + \"    System.out.println(value);\" + PMD.EOL + \"   }\" + PMD.EOL + \"  });\" + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST9 = \"public class Foo {\" + PMD.EOL + \" void foo() {\" + PMD.EOL\n            + \"  Map<String, Object> bar = new HashMap<>();\" + PMD.EOL + \"  bar.forEach((key, value) -> {\" + PMD.EOL\n            + \"   if (value instanceof String) {\" + PMD.EOL + \"    var foo = 42L;\" + PMD.EOL\n            + \"    System.out.println(value);\" + PMD.EOL + \"   }\" + PMD.EOL + \"  });\" + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "TEST9"}], "file": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/symboltable/VariableNameDeclarationTest.java"}, "test_case": {"identifier": "testIsArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsArray() {\n        ASTCompilationUnit acu = parseCode(TEST3);\n        VariableNameDeclaration decl = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0).getScope()\n                .getDeclarations(VariableNameDeclaration.class).keySet().iterator().next();\n        assertTrue(decl.isArray());\n    }", "signature": "void testIsArray()", "full_signature": "@Test public void testIsArray()", "class_method_signature": "VariableNameDeclarationTest.testIsArray()", "testcase": true, "constructor": false, "invocations": ["parseCode", "next", "iterator", "keySet", "getDeclarations", "getScope", "get", "findDescendantsOfType", "assertTrue", "isArray"]}, "focal_class": {"identifier": "VariableNameDeclaration", "superclass": "extends AbstractNameDeclaration", "interfaces": "implements TypedNameDeclaration", "fields": [], "methods": [{"identifier": "VariableNameDeclaration", "parameters": "(ASTVariableDeclaratorId node)", "modifiers": "public", "return": "", "signature": " VariableNameDeclaration(ASTVariableDeclaratorId node)", "full_signature": "public  VariableNameDeclaration(ASTVariableDeclaratorId node)", "class_method_signature": "VariableNameDeclaration.VariableNameDeclaration(ASTVariableDeclaratorId node)", "testcase": false, "constructor": true}, {"identifier": "getScope", "parameters": "()", "modifiers": "@Override public", "return": "Scope", "signature": "Scope getScope()", "full_signature": "@Override public Scope getScope()", "class_method_signature": "VariableNameDeclaration.getScope()", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isArray()", "full_signature": "public boolean isArray()", "class_method_signature": "VariableNameDeclaration.isArray()", "testcase": false, "constructor": false}, {"identifier": "getArrayDepth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getArrayDepth()", "full_signature": "public int getArrayDepth()", "class_method_signature": "VariableNameDeclaration.getArrayDepth()", "testcase": false, "constructor": false}, {"identifier": "isVarargs", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isVarargs()", "full_signature": "public boolean isVarargs()", "class_method_signature": "VariableNameDeclaration.isVarargs()", "testcase": false, "constructor": false}, {"identifier": "isExceptionBlockParameter", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExceptionBlockParameter()", "full_signature": "public boolean isExceptionBlockParameter()", "class_method_signature": "VariableNameDeclaration.isExceptionBlockParameter()", "testcase": false, "constructor": false}, {"identifier": "isLambdaTypelessParameter", "parameters": "()", "modifiers": "@Deprecated public", "return": "boolean", "signature": "boolean isLambdaTypelessParameter()", "full_signature": "@Deprecated public boolean isLambdaTypelessParameter()", "class_method_signature": "VariableNameDeclaration.isLambdaTypelessParameter()", "testcase": false, "constructor": false}, {"identifier": "isTypeInferred", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTypeInferred()", "full_signature": "public boolean isTypeInferred()", "class_method_signature": "VariableNameDeclaration.isTypeInferred()", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPrimitiveType()", "full_signature": "public boolean isPrimitiveType()", "class_method_signature": "VariableNameDeclaration.isPrimitiveType()", "testcase": false, "constructor": false}, {"identifier": "getTypeImage", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTypeImage()", "full_signature": "@Override public String getTypeImage()", "class_method_signature": "VariableNameDeclaration.getTypeImage()", "testcase": false, "constructor": false}, {"identifier": "isReferenceType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReferenceType()", "full_signature": "public boolean isReferenceType()", "class_method_signature": "VariableNameDeclaration.isReferenceType()", "testcase": false, "constructor": false}, {"identifier": "isRecordComponent", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isRecordComponent()", "full_signature": "private boolean isRecordComponent()", "class_method_signature": "VariableNameDeclaration.isRecordComponent()", "testcase": false, "constructor": false}, {"identifier": "getAccessNodeParent", "parameters": "()", "modifiers": "public", "return": "AccessNode", "signature": "AccessNode getAccessNodeParent()", "full_signature": "public AccessNode getAccessNodeParent()", "class_method_signature": "VariableNameDeclaration.getAccessNodeParent()", "testcase": false, "constructor": false}, {"identifier": "getDeclaratorId", "parameters": "()", "modifiers": "public", "return": "ASTVariableDeclaratorId", "signature": "ASTVariableDeclaratorId getDeclaratorId()", "full_signature": "public ASTVariableDeclaratorId getDeclaratorId()", "class_method_signature": "VariableNameDeclaration.getDeclaratorId()", "testcase": false, "constructor": false}, {"identifier": "getTypeNode", "parameters": "()", "modifiers": "@Override public", "return": "TypeNode", "signature": "TypeNode getTypeNode()", "full_signature": "@Override public TypeNode getTypeNode()", "class_method_signature": "VariableNameDeclaration.getTypeNode()", "testcase": false, "constructor": false}, {"identifier": "getExplicitTypeNode", "parameters": "()", "modifiers": "private", "return": "TypeNode", "signature": "TypeNode getExplicitTypeNode()", "full_signature": "private TypeNode getExplicitTypeNode()", "class_method_signature": "VariableNameDeclaration.getExplicitTypeNode()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "@Override public Class<?> getType()", "class_method_signature": "VariableNameDeclaration.getType()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "VariableNameDeclaration.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "VariableNameDeclaration.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "VariableNameDeclaration.toString()", "testcase": false, "constructor": false}], "file": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/VariableNameDeclaration.java"}, "focal_method": {"identifier": "isArray", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isArray() {\n        ASTVariableDeclaratorId astVariableDeclaratorId = (ASTVariableDeclaratorId) node;\n        ASTType typeNode = astVariableDeclaratorId.getTypeNode();\n        if (typeNode != null) {\n            return ((Dimensionable) typeNode.getParent()).isArray();\n        } else {\n            return false;\n        }\n    }", "signature": "boolean isArray()", "full_signature": "public boolean isArray()", "class_method_signature": "VariableNameDeclaration.isArray()", "testcase": false, "constructor": false, "invocations": ["getTypeNode", "isArray", "getParent"]}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}