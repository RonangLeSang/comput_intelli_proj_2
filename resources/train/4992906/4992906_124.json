{"test_class": {"identifier": "ClassScopeTest", "superclass": "extends BaseNonParserTest", "interfaces": "", "fields": [{"original_string": "private static final String NESTED_CLASS_FIELD_AND_PARAM = \"public class Foo {\" + PMD.EOL + \" class Test {\"\n            + PMD.EOL + \"   public String field;\" + PMD.EOL + \"   public Test t;\" + PMD.EOL + \" }\" + PMD.EOL\n            + \" public void foo(String field) {\" + PMD.EOL + \"   Test t = new Test();\" + PMD.EOL + \"   t.field = field;\"\n            + PMD.EOL + \"   t.t.field = field;\" + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "NESTED_CLASS_FIELD_AND_PARAM = \"public class Foo {\" + PMD.EOL + \" class Test {\"\n            + PMD.EOL + \"   public String field;\" + PMD.EOL + \"   public Test t;\" + PMD.EOL + \" }\" + PMD.EOL\n            + \" public void foo(String field) {\" + PMD.EOL + \"   Test t = new Test();\" + PMD.EOL + \"   t.field = field;\"\n            + PMD.EOL + \"   t.t.field = field;\" + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "NESTED_CLASS_FIELD_AND_PARAM"}, {"original_string": "private static final String METHOD_USAGE_SEEN2 = \"public class Foo {\" + PMD.EOL + \" public void baz() {\" + PMD.EOL\n            + \"  baz(x, y);\" + PMD.EOL + \" }\" + PMD.EOL + \" private void baz(int x, int y) {}\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "METHOD_USAGE_SEEN2 = \"public class Foo {\" + PMD.EOL + \" public void baz() {\" + PMD.EOL\n            + \"  baz(x, y);\" + PMD.EOL + \" }\" + PMD.EOL + \" private void baz(int x, int y) {}\" + PMD.EOL + \"}\"", "var_name": "METHOD_USAGE_SEEN2"}, {"original_string": "private static final String METHOD_USAGE_SEEN = \"public class Foo {\" + PMD.EOL + \" private void bar() {}\" + PMD.EOL\n            + \" public void buz() {\" + PMD.EOL + \"  bar();\" + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "METHOD_USAGE_SEEN = \"public class Foo {\" + PMD.EOL + \" private void bar() {}\" + PMD.EOL\n            + \" public void buz() {\" + PMD.EOL + \"  bar();\" + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "METHOD_USAGE_SEEN"}, {"original_string": "private static final String METHOD_USAGE_SEEN_WITH_THIS = \"public class Foo {\" + PMD.EOL + \" private void bar() {}\"\n            + PMD.EOL + \" public void buz() {\" + PMD.EOL + \"  this.bar();\" + PMD.EOL + \" }\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "METHOD_USAGE_SEEN_WITH_THIS = \"public class Foo {\" + PMD.EOL + \" private void bar() {}\"\n            + PMD.EOL + \" public void buz() {\" + PMD.EOL + \"  this.bar();\" + PMD.EOL + \" }\" + PMD.EOL + \"}\"", "var_name": "METHOD_USAGE_SEEN_WITH_THIS"}, {"original_string": "private static final String METH = \"public class Test {\" + PMD.EOL + \"  static { \" + PMD.EOL + \"   int y; \"\n            + PMD.EOL + \"  } \" + PMD.EOL + \"  void bar(int x) {} \" + PMD.EOL + \"  void baz(int x) {} \" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "METH = \"public class Test {\" + PMD.EOL + \"  static { \" + PMD.EOL + \"   int y; \"\n            + PMD.EOL + \"  } \" + PMD.EOL + \"  void bar(int x) {} \" + PMD.EOL + \"  void baz(int x) {} \" + PMD.EOL + \"}\"", "var_name": "METH"}, {"original_string": "private static final String NESTED_CLASS_FOUND = \"public class Test {\" + PMD.EOL + \"  private class Buz {} \"\n            + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "NESTED_CLASS_FOUND = \"public class Test {\" + PMD.EOL + \"  private class Buz {} \"\n            + PMD.EOL + \"}\"", "var_name": "NESTED_CLASS_FOUND"}, {"original_string": "private static final String ONE_PARAM = \"public class Test {\" + PMD.EOL + \"  void bar(String x) {\" + PMD.EOL + \"  }\"\n            + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "ONE_PARAM = \"public class Test {\" + PMD.EOL + \"  void bar(String x) {\" + PMD.EOL + \"  }\"\n            + PMD.EOL + \"}\"", "var_name": "ONE_PARAM"}, {"original_string": "private static final String TWO_PARAMS = \"public class Test {\" + PMD.EOL + \"  void bar(String x, int y) {\" + PMD.EOL\n            + \"  }\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "TWO_PARAMS = \"public class Test {\" + PMD.EOL + \"  void bar(String x, int y) {\" + PMD.EOL\n            + \"  }\" + PMD.EOL + \"}\"", "var_name": "TWO_PARAMS"}, {"original_string": "private static final String NO_PARAMS = \"public class Test {\" + PMD.EOL + \"  void bar() {\" + PMD.EOL + \"  }\"\n            + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "NO_PARAMS = \"public class Test {\" + PMD.EOL + \"  void bar() {\" + PMD.EOL + \"  }\"\n            + PMD.EOL + \"}\"", "var_name": "NO_PARAMS"}, {"original_string": "private static final String ONE_PARAM_VARARG = \"public class Test {\" + PMD.EOL + \"  void bar(String... s) {\"\n            + PMD.EOL + \"  }\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "ONE_PARAM_VARARG = \"public class Test {\" + PMD.EOL + \"  void bar(String... s) {\"\n            + PMD.EOL + \"  }\" + PMD.EOL + \"}\"", "var_name": "ONE_PARAM_VARARG"}, {"original_string": "private static final String TWO_PARAMS_VARARG = \"public class Test {\" + PMD.EOL\n            + \"  void bar(String s1, String... s2) {\" + PMD.EOL + \"  }\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "TWO_PARAMS_VARARG = \"public class Test {\" + PMD.EOL\n            + \"  void bar(String s1, String... s2) {\" + PMD.EOL + \"  }\" + PMD.EOL + \"}\"", "var_name": "TWO_PARAMS_VARARG"}, {"original_string": "private static final String CLASS_NAME = \"public class Foo {}\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_NAME = \"public class Foo {}\"", "var_name": "CLASS_NAME"}, {"original_string": "private static final String METHOD_DECLARATIONS_RECORDED = \"public class Foo {\" + PMD.EOL + \" private void bar() {}\"\n            + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "METHOD_DECLARATIONS_RECORDED = \"public class Foo {\" + PMD.EOL + \" private void bar() {}\"\n            + PMD.EOL + \"}\"", "var_name": "METHOD_DECLARATIONS_RECORDED"}, {"original_string": "private static final String METHODS_WITH_DIFF_ARG = \"public class Foo {\" + PMD.EOL\n            + \" private void bar(String x) {}\" + PMD.EOL + \" private void bar() {}\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "METHODS_WITH_DIFF_ARG = \"public class Foo {\" + PMD.EOL\n            + \" private void bar(String x) {}\" + PMD.EOL + \" private void bar() {}\" + PMD.EOL + \"}\"", "var_name": "METHODS_WITH_DIFF_ARG"}, {"original_string": "private static final String ENUM_SCOPE = \"public enum Foo {\" + PMD.EOL + \" HEAP(\\\"foo\\\");\" + PMD.EOL\n            + \" private final String fuz;\" + PMD.EOL + \" public String getFuz() {\" + PMD.EOL + \"  return fuz;\" + PMD.EOL\n            + \" }\" + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "ENUM_SCOPE = \"public enum Foo {\" + PMD.EOL + \" HEAP(\\\"foo\\\");\" + PMD.EOL\n            + \" private final String fuz;\" + PMD.EOL + \" public String getFuz() {\" + PMD.EOL + \"  return fuz;\" + PMD.EOL\n            + \" }\" + PMD.EOL + \"}\"", "var_name": "ENUM_SCOPE"}, {"original_string": "public static final String TEST_NULL_TYPE = \"public abstract class NullTypeTest {\" + PMD.EOL\n            + \"   protected Comparator<TreeNode> nodesComparator = (o1, o2) -> StringHelper.saveCompare(getFilterableString(o1), getFilterableString(o2));\"\n            + PMD.EOL + \"   public abstract String getFilterableString(TreeNode node);\" + PMD.EOL + \"}\";", "modifier": "public static final", "type": "String", "declarator": "TEST_NULL_TYPE = \"public abstract class NullTypeTest {\" + PMD.EOL\n            + \"   protected Comparator<TreeNode> nodesComparator = (o1, o2) -> StringHelper.saveCompare(getFilterableString(o1), getFilterableString(o2));\"\n            + PMD.EOL + \"   public abstract String getFilterableString(TreeNode node);\" + PMD.EOL + \"}\"", "var_name": "TEST_NULL_TYPE"}, {"original_string": "private static final String ENUM_TYPE_PARAMETER = \"public enum Foo {\" + PMD.EOL\n            + \"   BAR(isCustomer(BazEnum.FOO_BAR));\" + PMD.EOL + \"   Foo(boolean isCustomer) { }\" + PMD.EOL\n            + \"   private static boolean isCustomer(BazEnum baz) {\" + PMD.EOL + \"      return false;\" + PMD.EOL + \"   }\"\n            + PMD.EOL + \"}\";", "modifier": "private static final", "type": "String", "declarator": "ENUM_TYPE_PARAMETER = \"public enum Foo {\" + PMD.EOL\n            + \"   BAR(isCustomer(BazEnum.FOO_BAR));\" + PMD.EOL + \"   Foo(boolean isCustomer) { }\" + PMD.EOL\n            + \"   private static boolean isCustomer(BazEnum baz) {\" + PMD.EOL + \"      return false;\" + PMD.EOL + \"   }\"\n            + PMD.EOL + \"}\"", "var_name": "ENUM_TYPE_PARAMETER"}, {"original_string": "private static final String IMPORT_NESTED_CLASSES =\n            \"import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.TheInnerClass.EnumTest;\" + PMD.EOL\n            + \"public class Foo {\" + PMD.EOL\n            + \" public EnumTest e;\" + PMD.EOL\n            + \"}\" + PMD.EOL;", "modifier": "private static final", "type": "String", "declarator": "IMPORT_NESTED_CLASSES =\n            \"import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.TheInnerClass.EnumTest;\" + PMD.EOL\n            + \"public class Foo {\" + PMD.EOL\n            + \" public EnumTest e;\" + PMD.EOL\n            + \"}\" + PMD.EOL", "var_name": "IMPORT_NESTED_CLASSES"}, {"original_string": "private static final String NESTED_CLASSES_OF_IMPORT =\n            \"import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.TheInnerClass;\" + PMD.EOL\n            + \"public class Foo {\" + PMD.EOL\n            + \" public TheInnerClass.EnumTest e;\" + PMD.EOL\n            + \"}\" + PMD.EOL;", "modifier": "private static final", "type": "String", "declarator": "NESTED_CLASSES_OF_IMPORT =\n            \"import net.sourceforge.pmd.lang.java.symboltable.testdata.InnerClass.TheInnerClass;\" + PMD.EOL\n            + \"public class Foo {\" + PMD.EOL\n            + \" public TheInnerClass.EnumTest e;\" + PMD.EOL\n            + \"}\" + PMD.EOL", "var_name": "NESTED_CLASSES_OF_IMPORT"}], "file": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/symboltable/ClassScopeTest.java"}, "test_case": {"identifier": "testImportNestedClassesResolution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testImportNestedClassesResolution() {\n        ASTCompilationUnit acu = parseCode(IMPORT_NESTED_CLASSES);\n        final ASTClassOrInterfaceDeclaration n = acu.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class).get(0);\n        final ClassScope c = (ClassScope) n.getScope();\n        assertEquals(EnumTest.class, c.resolveType(\"EnumTest\"));\n    }", "signature": "void testImportNestedClassesResolution()", "full_signature": "@Test public void testImportNestedClassesResolution()", "class_method_signature": "ClassScopeTest.testImportNestedClassesResolution()", "testcase": true, "constructor": false, "invocations": ["parseCode", "get", "findDescendantsOfType", "getScope", "assertEquals", "resolveType"]}, "focal_class": {"identifier": "ClassScope", "superclass": "extends AbstractJavaScope", "interfaces": "", "fields": [{"original_string": "private static final Set<String> PRIMITIVE_TYPES;", "modifier": "private static final", "type": "Set<String>", "declarator": "PRIMITIVE_TYPES", "var_name": "PRIMITIVE_TYPES"}, {"original_string": "private static ThreadLocal<Integer> anonymousInnerClassCounter = new ThreadLocal<Integer>() {\n        @Override\n        protected Integer initialValue() {\n            return Integer.valueOf(1);\n        }\n    };", "modifier": "private static", "type": "ThreadLocal<Integer>", "declarator": "anonymousInnerClassCounter = new ThreadLocal<Integer>() {\n        @Override\n        protected Integer initialValue() {\n            return Integer.valueOf(1);\n        }\n    }", "var_name": "anonymousInnerClassCounter"}, {"original_string": "private final String className;", "modifier": "private final", "type": "String", "declarator": "className", "var_name": "className"}, {"original_string": "private boolean isEnum;", "modifier": "private", "type": "boolean", "declarator": "isEnum", "var_name": "isEnum"}, {"original_string": "private final ClassNameDeclaration classDeclaration;", "modifier": "private final", "type": "ClassNameDeclaration", "declarator": "classDeclaration", "var_name": "classDeclaration"}], "methods": [{"identifier": "ClassScope", "parameters": "(final String className, final ClassNameDeclaration classNameDeclaration)", "modifiers": "public", "return": "", "signature": " ClassScope(final String className, final ClassNameDeclaration classNameDeclaration)", "full_signature": "public  ClassScope(final String className, final ClassNameDeclaration classNameDeclaration)", "class_method_signature": "ClassScope.ClassScope(final String className, final ClassNameDeclaration classNameDeclaration)", "testcase": false, "constructor": true}, {"identifier": "ClassScope", "parameters": "(final ClassNameDeclaration classNameDeclaration)", "modifiers": "public", "return": "", "signature": " ClassScope(final ClassNameDeclaration classNameDeclaration)", "full_signature": "public  ClassScope(final ClassNameDeclaration classNameDeclaration)", "class_method_signature": "ClassScope.ClassScope(final ClassNameDeclaration classNameDeclaration)", "testcase": false, "constructor": true}, {"identifier": "getClassDeclaration", "parameters": "()", "modifiers": "public", "return": "ClassNameDeclaration", "signature": "ClassNameDeclaration getClassDeclaration()", "full_signature": "public ClassNameDeclaration getClassDeclaration()", "class_method_signature": "ClassScope.getClassDeclaration()", "testcase": false, "constructor": false}, {"identifier": "setIsEnum", "parameters": "(boolean isEnum)", "modifiers": "public", "return": "void", "signature": "void setIsEnum(boolean isEnum)", "full_signature": "public void setIsEnum(boolean isEnum)", "class_method_signature": "ClassScope.setIsEnum(boolean isEnum)", "testcase": false, "constructor": false}, {"identifier": "getClassDeclarations", "parameters": "()", "modifiers": "public", "return": "Map<ClassNameDeclaration, List<NameOccurrence>>", "signature": "Map<ClassNameDeclaration, List<NameOccurrence>> getClassDeclarations()", "full_signature": "public Map<ClassNameDeclaration, List<NameOccurrence>> getClassDeclarations()", "class_method_signature": "ClassScope.getClassDeclarations()", "testcase": false, "constructor": false}, {"identifier": "getMethodDeclarations", "parameters": "()", "modifiers": "public", "return": "Map<MethodNameDeclaration, List<NameOccurrence>>", "signature": "Map<MethodNameDeclaration, List<NameOccurrence>> getMethodDeclarations()", "full_signature": "public Map<MethodNameDeclaration, List<NameOccurrence>> getMethodDeclarations()", "class_method_signature": "ClassScope.getMethodDeclarations()", "testcase": false, "constructor": false}, {"identifier": "getVariableDeclarations", "parameters": "()", "modifiers": "public", "return": "Map<VariableNameDeclaration, List<NameOccurrence>>", "signature": "Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations()", "full_signature": "public Map<VariableNameDeclaration, List<NameOccurrence>> getVariableDeclarations()", "class_method_signature": "ClassScope.getVariableDeclarations()", "testcase": false, "constructor": false}, {"identifier": "addNameOccurrence", "parameters": "(NameOccurrence occurrence)", "modifiers": "@Override public", "return": "Set<NameDeclaration>", "signature": "Set<NameDeclaration> addNameOccurrence(NameOccurrence occurrence)", "full_signature": "@Override public Set<NameDeclaration> addNameOccurrence(NameOccurrence occurrence)", "class_method_signature": "ClassScope.addNameOccurrence(NameOccurrence occurrence)", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClassName()", "full_signature": "public String getClassName()", "class_method_signature": "ClassScope.getClassName()", "testcase": false, "constructor": false}, {"identifier": "findVariableHere", "parameters": "(JavaNameOccurrence occurrence)", "modifiers": "@Override protected", "return": "Set<NameDeclaration>", "signature": "Set<NameDeclaration> findVariableHere(JavaNameOccurrence occurrence)", "full_signature": "@Override protected Set<NameDeclaration> findVariableHere(JavaNameOccurrence occurrence)", "class_method_signature": "ClassScope.findVariableHere(JavaNameOccurrence occurrence)", "testcase": false, "constructor": false}, {"identifier": "matchMethodDeclaration", "parameters": "(JavaNameOccurrence occurrence,\n            Set<MethodNameDeclaration> methodDeclarations, final boolean hasAuxclasspath,\n            Set<NameDeclaration> result)", "modifiers": "private", "return": "void", "signature": "void matchMethodDeclaration(JavaNameOccurrence occurrence,\n            Set<MethodNameDeclaration> methodDeclarations, final boolean hasAuxclasspath,\n            Set<NameDeclaration> result)", "full_signature": "private void matchMethodDeclaration(JavaNameOccurrence occurrence,\n            Set<MethodNameDeclaration> methodDeclarations, final boolean hasAuxclasspath,\n            Set<NameDeclaration> result)", "class_method_signature": "ClassScope.matchMethodDeclaration(JavaNameOccurrence occurrence,\n            Set<MethodNameDeclaration> methodDeclarations, final boolean hasAuxclasspath,\n            Set<NameDeclaration> result)", "testcase": false, "constructor": false}, {"identifier": "createBuiltInMethodDeclaration", "parameters": "(final String methodName,\n            final String... parameterTypes)", "modifiers": "private", "return": "MethodNameDeclaration", "signature": "MethodNameDeclaration createBuiltInMethodDeclaration(final String methodName,\n            final String... parameterTypes)", "full_signature": "private MethodNameDeclaration createBuiltInMethodDeclaration(final String methodName,\n            final String... parameterTypes)", "class_method_signature": "ClassScope.createBuiltInMethodDeclaration(final String methodName,\n            final String... parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "determineParameterTypes", "parameters": "(MethodNameDeclaration mnd)", "modifiers": "private", "return": "List<TypedNameDeclaration>", "signature": "List<TypedNameDeclaration> determineParameterTypes(MethodNameDeclaration mnd)", "full_signature": "private List<TypedNameDeclaration> determineParameterTypes(MethodNameDeclaration mnd)", "class_method_signature": "ClassScope.determineParameterTypes(MethodNameDeclaration mnd)", "testcase": false, "constructor": false}, {"identifier": "qualifyTypeName", "parameters": "(String typeImage)", "modifiers": "private", "return": "String", "signature": "String qualifyTypeName(String typeImage)", "full_signature": "private String qualifyTypeName(String typeImage)", "class_method_signature": "ClassScope.qualifyTypeName(String typeImage)", "testcase": false, "constructor": false}, {"identifier": "findQualifiedName", "parameters": "(String typeImage, Set<String> candidates)", "modifiers": "private", "return": "String", "signature": "String findQualifiedName(String typeImage, Set<String> candidates)", "full_signature": "private String findQualifiedName(String typeImage, Set<String> candidates)", "class_method_signature": "ClassScope.findQualifiedName(String typeImage, Set<String> candidates)", "testcase": false, "constructor": false}, {"identifier": "determineArgumentTypes", "parameters": "(JavaNameOccurrence occurrence,\n            List<TypedNameDeclaration> parameterTypes)", "modifiers": "private", "return": "List<TypedNameDeclaration>", "signature": "List<TypedNameDeclaration> determineArgumentTypes(JavaNameOccurrence occurrence,\n            List<TypedNameDeclaration> parameterTypes)", "full_signature": "private List<TypedNameDeclaration> determineArgumentTypes(JavaNameOccurrence occurrence,\n            List<TypedNameDeclaration> parameterTypes)", "class_method_signature": "ClassScope.determineArgumentTypes(JavaNameOccurrence occurrence,\n            List<TypedNameDeclaration> parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "determineSuper", "parameters": "(Node declaringNode)", "modifiers": "private", "return": "SimpleTypedNameDeclaration", "signature": "SimpleTypedNameDeclaration determineSuper(Node declaringNode)", "full_signature": "private SimpleTypedNameDeclaration determineSuper(Node declaringNode)", "class_method_signature": "ClassScope.determineSuper(Node declaringNode)", "testcase": false, "constructor": false}, {"identifier": "convertToSimpleType", "parameters": "(List<ASTClassOrInterfaceType> types)", "modifiers": "private", "return": "SimpleTypedNameDeclaration", "signature": "SimpleTypedNameDeclaration convertToSimpleType(List<ASTClassOrInterfaceType> types)", "full_signature": "private SimpleTypedNameDeclaration convertToSimpleType(List<ASTClassOrInterfaceType> types)", "class_method_signature": "ClassScope.convertToSimpleType(List<ASTClassOrInterfaceType> types)", "testcase": false, "constructor": false}, {"identifier": "convertToSimpleType", "parameters": "(ASTClassOrInterfaceType t)", "modifiers": "private", "return": "SimpleTypedNameDeclaration", "signature": "SimpleTypedNameDeclaration convertToSimpleType(ASTClassOrInterfaceType t)", "full_signature": "private SimpleTypedNameDeclaration convertToSimpleType(ASTClassOrInterfaceType t)", "class_method_signature": "ClassScope.convertToSimpleType(ASTClassOrInterfaceType t)", "testcase": false, "constructor": false}, {"identifier": "resolveType", "parameters": "(final String name)", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> resolveType(final String name)", "full_signature": "public Class<?> resolveType(final String name)", "class_method_signature": "ClassScope.resolveType(final String name)", "testcase": false, "constructor": false}, {"identifier": "resolveGenericType", "parameters": "(Node argument, String typeImage)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> resolveGenericType(Node argument, String typeImage)", "full_signature": "private Class<?> resolveGenericType(Node argument, String typeImage)", "class_method_signature": "ClassScope.resolveGenericType(Node argument, String typeImage)", "testcase": false, "constructor": false}, {"identifier": "resolveGenericType", "parameters": "(String typeImage, List<ASTTypeParameter> types)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> resolveGenericType(String typeImage, List<ASTTypeParameter> types)", "full_signature": "private Class<?> resolveGenericType(String typeImage, List<ASTTypeParameter> types)", "class_method_signature": "ClassScope.resolveGenericType(String typeImage, List<ASTTypeParameter> types)", "testcase": false, "constructor": false}, {"identifier": "getNextSibling", "parameters": "(Node current)", "modifiers": "private", "return": "Node", "signature": "Node getNextSibling(Node current)", "full_signature": "private Node getNextSibling(Node current)", "class_method_signature": "ClassScope.getNextSibling(Node current)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ClassScope.toString()", "testcase": false, "constructor": false}, {"identifier": "clipClassName", "parameters": "(String s)", "modifiers": "private", "return": "String", "signature": "String clipClassName(String s)", "full_signature": "private String clipClassName(String s)", "class_method_signature": "ClassScope.clipClassName(String s)", "testcase": false, "constructor": false}], "file": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/ClassScope.java"}, "focal_method": {"identifier": "resolveType", "parameters": "(final String name)", "modifiers": "public", "return": "Class<?>", "body": "public Class<?> resolveType(final String name) {\n        return this.getEnclosingScope(SourceFileScope.class).resolveType(qualifyTypeName(name));\n    }", "signature": "Class<?> resolveType(final String name)", "full_signature": "public Class<?> resolveType(final String name)", "class_method_signature": "ClassScope.resolveType(final String name)", "testcase": false, "constructor": false, "invocations": ["resolveType", "getEnclosingScope", "qualifyTypeName"]}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}