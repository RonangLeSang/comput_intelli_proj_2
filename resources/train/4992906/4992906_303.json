{"test_class": {"identifier": "CPDConfigurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "pmd-core/src/test/java/net/sourceforge/pmd/cpd/CPDConfigurationTest.java"}, "test_case": {"identifier": "testRenderers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRenderers() {\n        Map<String, Class<? extends CPDRenderer>> renderersToTest = new HashMap<>();\n        renderersToTest.put(\"csv\", CSVRenderer.class);\n        renderersToTest.put(\"xml\", XMLRenderer.class);\n        renderersToTest.put(\"csv_with_linecount_per_file\", CSVWithLinecountPerFileRenderer.class);\n        renderersToTest.put(\"vs\", VSRenderer.class);\n        renderersToTest.put(\"text\", SimpleRenderer.class);\n\n        for (Map.Entry<String, Class<? extends CPDRenderer>> entry : renderersToTest.entrySet()) {\n            Renderer r = CPDConfiguration.getRendererFromString(entry.getKey(), \"UTF-8\");\n            Assert.assertNotNull(r);\n            Assert.assertSame(entry.getValue(), r.getClass());\n        }\n    }", "signature": "void testRenderers()", "full_signature": "@Test public void testRenderers()", "class_method_signature": "CPDConfigurationTest.testRenderers()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "entrySet", "getRendererFromString", "getKey", "assertNotNull", "assertSame", "getValue", "getClass"]}, "focal_class": {"identifier": "CPDConfiguration", "superclass": "extends AbstractConfiguration", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_LANGUAGE = \"java\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_LANGUAGE = \"java\"", "var_name": "DEFAULT_LANGUAGE"}, {"original_string": "public static final String DEFAULT_RENDERER = \"text\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_RENDERER = \"text\"", "var_name": "DEFAULT_RENDERER"}, {"original_string": "private static final Map<String, Class<? extends CPDRenderer>> RENDERERS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, Class<? extends CPDRenderer>>", "declarator": "RENDERERS = new HashMap<>()", "var_name": "RENDERERS"}, {"original_string": "@Parameter(names = \"--language\", description = \"Sources code language. Default value is \" + DEFAULT_LANGUAGE,\n            required = false, converter = LanguageConverter.class)\n    private Language language;", "modifier": "@Parameter(names = \"--language\", description = \"Sources code language. Default value is \" + DEFAULT_LANGUAGE,\n            required = false, converter = LanguageConverter.class)\n    private", "type": "Language", "declarator": "language", "var_name": "language"}, {"original_string": "@Parameter(names = \"--minimum-tokens\",\n            description = \"The minimum token length which should be reported as a duplicate.\", required = true)\n    private int minimumTileSize;", "modifier": "@Parameter(names = \"--minimum-tokens\",\n            description = \"The minimum token length which should be reported as a duplicate.\", required = true)\n    private", "type": "int", "declarator": "minimumTileSize", "var_name": "minimumTileSize"}, {"original_string": "@Parameter(names = \"--skip-duplicate-files\",\n            description = \"Ignore multiple copies of files of the same name and length in comparison\", required = false)\n    private boolean skipDuplicates;", "modifier": "@Parameter(names = \"--skip-duplicate-files\",\n            description = \"Ignore multiple copies of files of the same name and length in comparison\", required = false)\n    private", "type": "boolean", "declarator": "skipDuplicates", "var_name": "skipDuplicates"}, {"original_string": "@Parameter(names = \"--format\", description = \"Report format. Default value is \" + DEFAULT_RENDERER,\n            required = false)\n    private String rendererName;", "modifier": "@Parameter(names = \"--format\", description = \"Report format. Default value is \" + DEFAULT_RENDERER,\n            required = false)\n    private", "type": "String", "declarator": "rendererName", "var_name": "rendererName"}, {"original_string": "@Deprecated\n    private Renderer renderer;", "modifier": "@Deprecated\n    private", "type": "Renderer", "declarator": "renderer", "var_name": "renderer"}, {"original_string": "private CPDRenderer cpdRenderer;", "modifier": "private", "type": "CPDRenderer", "declarator": "cpdRenderer", "var_name": "cpdRenderer"}, {"original_string": "private String encoding;", "modifier": "private", "type": "String", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "@Parameter(names = \"--ignore-literals\",\n            description = \"Ignore number values and string contents when comparing text\", required = false)\n    private boolean ignoreLiterals;", "modifier": "@Parameter(names = \"--ignore-literals\",\n            description = \"Ignore number values and string contents when comparing text\", required = false)\n    private", "type": "boolean", "declarator": "ignoreLiterals", "var_name": "ignoreLiterals"}, {"original_string": "@Parameter(names = \"--ignore-identifiers\", description = \"Ignore constant and variable names when comparing text\",\n            required = false)\n    private boolean ignoreIdentifiers;", "modifier": "@Parameter(names = \"--ignore-identifiers\", description = \"Ignore constant and variable names when comparing text\",\n            required = false)\n    private", "type": "boolean", "declarator": "ignoreIdentifiers", "var_name": "ignoreIdentifiers"}, {"original_string": "@Parameter(names = \"--ignore-annotations\", description = \"Ignore language annotations when comparing text\",\n            required = false)\n    private boolean ignoreAnnotations;", "modifier": "@Parameter(names = \"--ignore-annotations\", description = \"Ignore language annotations when comparing text\",\n            required = false)\n    private", "type": "boolean", "declarator": "ignoreAnnotations", "var_name": "ignoreAnnotations"}, {"original_string": "@Parameter(names = \"--ignore-usings\", description = \"Ignore using directives in C#\", required = false)\n    private boolean ignoreUsings;", "modifier": "@Parameter(names = \"--ignore-usings\", description = \"Ignore using directives in C#\", required = false)\n    private", "type": "boolean", "declarator": "ignoreUsings", "var_name": "ignoreUsings"}, {"original_string": "@Parameter(names = \"--skip-lexical-errors\",\n            description = \"Skip files which can't be tokenized due to invalid characters instead of aborting CPD\",\n            required = false)\n    private boolean skipLexicalErrors = false;", "modifier": "@Parameter(names = \"--skip-lexical-errors\",\n            description = \"Skip files which can't be tokenized due to invalid characters instead of aborting CPD\",\n            required = false)\n    private", "type": "boolean", "declarator": "skipLexicalErrors = false", "var_name": "skipLexicalErrors"}, {"original_string": "@Parameter(names = \"--no-skip-blocks\",\n            description = \"Do not skip code blocks marked with --skip-blocks-pattern (e.g. #if 0 until #endif)\",\n            required = false)\n    private boolean noSkipBlocks = false;", "modifier": "@Parameter(names = \"--no-skip-blocks\",\n            description = \"Do not skip code blocks marked with --skip-blocks-pattern (e.g. #if 0 until #endif)\",\n            required = false)\n    private", "type": "boolean", "declarator": "noSkipBlocks = false", "var_name": "noSkipBlocks"}, {"original_string": "@Parameter(names = \"--skip-blocks-pattern\",\n            description = \"Pattern to find the blocks to skip. Start and End pattern separated by |. \" + \"Default is \\\"\"\n                    + Tokenizer.DEFAULT_SKIP_BLOCKS_PATTERN + \"\\\".\",\n            required = false)\n    private String skipBlocksPattern = Tokenizer.DEFAULT_SKIP_BLOCKS_PATTERN;", "modifier": "@Parameter(names = \"--skip-blocks-pattern\",\n            description = \"Pattern to find the blocks to skip. Start and End pattern separated by |. \" + \"Default is \\\"\"\n                    + Tokenizer.DEFAULT_SKIP_BLOCKS_PATTERN + \"\\\".\",\n            required = false)\n    private", "type": "String", "declarator": "skipBlocksPattern = Tokenizer.DEFAULT_SKIP_BLOCKS_PATTERN", "var_name": "skipBlocksPattern"}, {"original_string": "@Parameter(names = \"--files\", variableArity = true, description = \"List of files and directories to process\",\n            required = false, converter = FileConverter.class)\n    private List<File> files;", "modifier": "@Parameter(names = \"--files\", variableArity = true, description = \"List of files and directories to process\",\n            required = false, converter = FileConverter.class)\n    private", "type": "List<File>", "declarator": "files", "var_name": "files"}, {"original_string": "@Parameter(names = \"--filelist\", description = \"Path to a file containing a list of files to analyze.\",\n            required = false)\n    private String fileListPath;", "modifier": "@Parameter(names = \"--filelist\", description = \"Path to a file containing a list of files to analyze.\",\n            required = false)\n    private", "type": "String", "declarator": "fileListPath", "var_name": "fileListPath"}, {"original_string": "@Parameter(names = \"--exclude\", variableArity = true, description = \"Files to be excluded from CPD check\",\n            required = false, converter = FileConverter.class)\n    private List<File> excludes;", "modifier": "@Parameter(names = \"--exclude\", variableArity = true, description = \"Files to be excluded from CPD check\",\n            required = false, converter = FileConverter.class)\n    private", "type": "List<File>", "declarator": "excludes", "var_name": "excludes"}, {"original_string": "@Parameter(names = \"--non-recursive\", description = \"Don't scan subdirectiories\", required = false)\n    private boolean nonRecursive;", "modifier": "@Parameter(names = \"--non-recursive\", description = \"Don't scan subdirectiories\", required = false)\n    private", "type": "boolean", "declarator": "nonRecursive", "var_name": "nonRecursive"}, {"original_string": "@Parameter(names = \"--uri\", description = \"URI to process\", required = false)\n    private String uri;", "modifier": "@Parameter(names = \"--uri\", description = \"URI to process\", required = false)\n    private", "type": "String", "declarator": "uri", "var_name": "uri"}, {"original_string": "@Parameter(names = { \"--help\", \"-h\" }, description = \"Print help text\", required = false, help = true)\n    private boolean help;", "modifier": "@Parameter(names = { \"--help\", \"-h\" }, description = \"Print help text\", required = false, help = true)\n    private", "type": "boolean", "declarator": "help", "var_name": "help"}, {"original_string": "@Parameter(names = { \"--failOnViolation\", \"-failOnViolation\" }, arity = 1,\n            description = \"By default CPD exits with status 4 if code duplications are found. Disable this option with '-failOnViolation false' to exit with 0 instead and just write the report.\")\n    private boolean failOnViolation = true;", "modifier": "@Parameter(names = { \"--failOnViolation\", \"-failOnViolation\" }, arity = 1,\n            description = \"By default CPD exits with status 4 if code duplications are found. Disable this option with '-failOnViolation false' to exit with 0 instead and just write the report.\")\n    private", "type": "boolean", "declarator": "failOnViolation = true", "var_name": "failOnViolation"}], "methods": [{"identifier": "setEncoding", "parameters": "(String encoding)", "modifiers": "@Parameter(names = \"--encoding\", description = \"Character encoding to use when processing files\", required = false) public", "return": "void", "signature": "void setEncoding(String encoding)", "full_signature": "@Parameter(names = \"--encoding\", description = \"Character encoding to use when processing files\", required = false) public void setEncoding(String encoding)", "class_method_signature": "CPDConfiguration.setEncoding(String encoding)", "testcase": false, "constructor": false}, {"identifier": "sourceCodeFor", "parameters": "(File file)", "modifiers": "public", "return": "SourceCode", "signature": "SourceCode sourceCodeFor(File file)", "full_signature": "public SourceCode sourceCodeFor(File file)", "class_method_signature": "CPDConfiguration.sourceCodeFor(File file)", "testcase": false, "constructor": false}, {"identifier": "sourceCodeFor", "parameters": "(Reader reader, String sourceCodeName)", "modifiers": "public", "return": "SourceCode", "signature": "SourceCode sourceCodeFor(Reader reader, String sourceCodeName)", "full_signature": "public SourceCode sourceCodeFor(Reader reader, String sourceCodeName)", "class_method_signature": "CPDConfiguration.sourceCodeFor(Reader reader, String sourceCodeName)", "testcase": false, "constructor": false}, {"identifier": "postContruct", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void postContruct()", "full_signature": "public void postContruct()", "class_method_signature": "CPDConfiguration.postContruct()", "testcase": false, "constructor": false}, {"identifier": "getRendererFromString", "parameters": "(String name, String encoding)", "modifiers": "@Deprecated public static", "return": "Renderer", "signature": "Renderer getRendererFromString(String name, String encoding)", "full_signature": "@Deprecated public static Renderer getRendererFromString(String name, String encoding)", "class_method_signature": "CPDConfiguration.getRendererFromString(String name, String encoding)", "testcase": false, "constructor": false}, {"identifier": "getCPDRendererFromString", "parameters": "(String name, String encoding)", "modifiers": "public static", "return": "CPDRenderer", "signature": "CPDRenderer getCPDRendererFromString(String name, String encoding)", "full_signature": "public static CPDRenderer getCPDRendererFromString(String name, String encoding)", "class_method_signature": "CPDConfiguration.getCPDRendererFromString(String name, String encoding)", "testcase": false, "constructor": false}, {"identifier": "setRendererEncoding", "parameters": "(Object renderer, String encoding)", "modifiers": "private static", "return": "void", "signature": "void setRendererEncoding(Object renderer, String encoding)", "full_signature": "private static void setRendererEncoding(Object renderer, String encoding)", "class_method_signature": "CPDConfiguration.setRendererEncoding(Object renderer, String encoding)", "testcase": false, "constructor": false}, {"identifier": "getRenderers", "parameters": "()", "modifiers": "public static", "return": "String[]", "signature": "String[] getRenderers()", "full_signature": "public static String[] getRenderers()", "class_method_signature": "CPDConfiguration.getRenderers()", "testcase": false, "constructor": false}, {"identifier": "getLanguageFromString", "parameters": "(String languageString)", "modifiers": "public static", "return": "Language", "signature": "Language getLanguageFromString(String languageString)", "full_signature": "public static Language getLanguageFromString(String languageString)", "class_method_signature": "CPDConfiguration.getLanguageFromString(String languageString)", "testcase": false, "constructor": false}, {"identifier": "setSystemProperties", "parameters": "(CPDConfiguration configuration)", "modifiers": "public static", "return": "void", "signature": "void setSystemProperties(CPDConfiguration configuration)", "full_signature": "public static void setSystemProperties(CPDConfiguration configuration)", "class_method_signature": "CPDConfiguration.setSystemProperties(CPDConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "getLanguage", "parameters": "()", "modifiers": "public", "return": "Language", "signature": "Language getLanguage()", "full_signature": "public Language getLanguage()", "class_method_signature": "CPDConfiguration.getLanguage()", "testcase": false, "constructor": false}, {"identifier": "setLanguage", "parameters": "(Language language)", "modifiers": "public", "return": "void", "signature": "void setLanguage(Language language)", "full_signature": "public void setLanguage(Language language)", "class_method_signature": "CPDConfiguration.setLanguage(Language language)", "testcase": false, "constructor": false}, {"identifier": "getMinimumTileSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinimumTileSize()", "full_signature": "public int getMinimumTileSize()", "class_method_signature": "CPDConfiguration.getMinimumTileSize()", "testcase": false, "constructor": false}, {"identifier": "setMinimumTileSize", "parameters": "(int minimumTileSize)", "modifiers": "public", "return": "void", "signature": "void setMinimumTileSize(int minimumTileSize)", "full_signature": "public void setMinimumTileSize(int minimumTileSize)", "class_method_signature": "CPDConfiguration.setMinimumTileSize(int minimumTileSize)", "testcase": false, "constructor": false}, {"identifier": "isSkipDuplicates", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSkipDuplicates()", "full_signature": "public boolean isSkipDuplicates()", "class_method_signature": "CPDConfiguration.isSkipDuplicates()", "testcase": false, "constructor": false}, {"identifier": "setSkipDuplicates", "parameters": "(boolean skipDuplicates)", "modifiers": "public", "return": "void", "signature": "void setSkipDuplicates(boolean skipDuplicates)", "full_signature": "public void setSkipDuplicates(boolean skipDuplicates)", "class_method_signature": "CPDConfiguration.setSkipDuplicates(boolean skipDuplicates)", "testcase": false, "constructor": false}, {"identifier": "getRendererName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRendererName()", "full_signature": "public String getRendererName()", "class_method_signature": "CPDConfiguration.getRendererName()", "testcase": false, "constructor": false}, {"identifier": "setRendererName", "parameters": "(String rendererName)", "modifiers": "public", "return": "void", "signature": "void setRendererName(String rendererName)", "full_signature": "public void setRendererName(String rendererName)", "class_method_signature": "CPDConfiguration.setRendererName(String rendererName)", "testcase": false, "constructor": false}, {"identifier": "getRenderer", "parameters": "()", "modifiers": "@Deprecated public", "return": "Renderer", "signature": "Renderer getRenderer()", "full_signature": "@Deprecated public Renderer getRenderer()", "class_method_signature": "CPDConfiguration.getRenderer()", "testcase": false, "constructor": false}, {"identifier": "getCPDRenderer", "parameters": "()", "modifiers": "public", "return": "CPDRenderer", "signature": "CPDRenderer getCPDRenderer()", "full_signature": "public CPDRenderer getCPDRenderer()", "class_method_signature": "CPDConfiguration.getCPDRenderer()", "testcase": false, "constructor": false}, {"identifier": "tokenizer", "parameters": "()", "modifiers": "public", "return": "Tokenizer", "signature": "Tokenizer tokenizer()", "full_signature": "public Tokenizer tokenizer()", "class_method_signature": "CPDConfiguration.tokenizer()", "testcase": false, "constructor": false}, {"identifier": "filenameFilter", "parameters": "()", "modifiers": "public", "return": "FilenameFilter", "signature": "FilenameFilter filenameFilter()", "full_signature": "public FilenameFilter filenameFilter()", "class_method_signature": "CPDConfiguration.filenameFilter()", "testcase": false, "constructor": false}, {"identifier": "setRenderer", "parameters": "(Renderer renderer)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setRenderer(Renderer renderer)", "full_signature": "@Deprecated public void setRenderer(Renderer renderer)", "class_method_signature": "CPDConfiguration.setRenderer(Renderer renderer)", "testcase": false, "constructor": false}, {"identifier": "setCPDRenderer", "parameters": "(CPDRenderer renderer)", "modifiers": "public", "return": "void", "signature": "void setCPDRenderer(CPDRenderer renderer)", "full_signature": "public void setCPDRenderer(CPDRenderer renderer)", "class_method_signature": "CPDConfiguration.setCPDRenderer(CPDRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "isIgnoreLiterals", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreLiterals()", "full_signature": "public boolean isIgnoreLiterals()", "class_method_signature": "CPDConfiguration.isIgnoreLiterals()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreLiterals", "parameters": "(boolean ignoreLiterals)", "modifiers": "public", "return": "void", "signature": "void setIgnoreLiterals(boolean ignoreLiterals)", "full_signature": "public void setIgnoreLiterals(boolean ignoreLiterals)", "class_method_signature": "CPDConfiguration.setIgnoreLiterals(boolean ignoreLiterals)", "testcase": false, "constructor": false}, {"identifier": "isIgnoreIdentifiers", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreIdentifiers()", "full_signature": "public boolean isIgnoreIdentifiers()", "class_method_signature": "CPDConfiguration.isIgnoreIdentifiers()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreIdentifiers", "parameters": "(boolean ignoreIdentifiers)", "modifiers": "public", "return": "void", "signature": "void setIgnoreIdentifiers(boolean ignoreIdentifiers)", "full_signature": "public void setIgnoreIdentifiers(boolean ignoreIdentifiers)", "class_method_signature": "CPDConfiguration.setIgnoreIdentifiers(boolean ignoreIdentifiers)", "testcase": false, "constructor": false}, {"identifier": "isIgnoreAnnotations", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreAnnotations()", "full_signature": "public boolean isIgnoreAnnotations()", "class_method_signature": "CPDConfiguration.isIgnoreAnnotations()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreAnnotations", "parameters": "(boolean ignoreAnnotations)", "modifiers": "public", "return": "void", "signature": "void setIgnoreAnnotations(boolean ignoreAnnotations)", "full_signature": "public void setIgnoreAnnotations(boolean ignoreAnnotations)", "class_method_signature": "CPDConfiguration.setIgnoreAnnotations(boolean ignoreAnnotations)", "testcase": false, "constructor": false}, {"identifier": "isIgnoreUsings", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreUsings()", "full_signature": "public boolean isIgnoreUsings()", "class_method_signature": "CPDConfiguration.isIgnoreUsings()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreUsings", "parameters": "(boolean ignoreUsings)", "modifiers": "public", "return": "void", "signature": "void setIgnoreUsings(boolean ignoreUsings)", "full_signature": "public void setIgnoreUsings(boolean ignoreUsings)", "class_method_signature": "CPDConfiguration.setIgnoreUsings(boolean ignoreUsings)", "testcase": false, "constructor": false}, {"identifier": "isSkipLexicalErrors", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSkipLexicalErrors()", "full_signature": "public boolean isSkipLexicalErrors()", "class_method_signature": "CPDConfiguration.isSkipLexicalErrors()", "testcase": false, "constructor": false}, {"identifier": "setSkipLexicalErrors", "parameters": "(boolean skipLexicalErrors)", "modifiers": "public", "return": "void", "signature": "void setSkipLexicalErrors(boolean skipLexicalErrors)", "full_signature": "public void setSkipLexicalErrors(boolean skipLexicalErrors)", "class_method_signature": "CPDConfiguration.setSkipLexicalErrors(boolean skipLexicalErrors)", "testcase": false, "constructor": false}, {"identifier": "getFiles", "parameters": "()", "modifiers": "public", "return": "List<File>", "signature": "List<File> getFiles()", "full_signature": "public List<File> getFiles()", "class_method_signature": "CPDConfiguration.getFiles()", "testcase": false, "constructor": false}, {"identifier": "setFiles", "parameters": "(List<File> files)", "modifiers": "public", "return": "void", "signature": "void setFiles(List<File> files)", "full_signature": "public void setFiles(List<File> files)", "class_method_signature": "CPDConfiguration.setFiles(List<File> files)", "testcase": false, "constructor": false}, {"identifier": "getFileListPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileListPath()", "full_signature": "public String getFileListPath()", "class_method_signature": "CPDConfiguration.getFileListPath()", "testcase": false, "constructor": false}, {"identifier": "setFileListPath", "parameters": "(String fileListPath)", "modifiers": "public", "return": "void", "signature": "void setFileListPath(String fileListPath)", "full_signature": "public void setFileListPath(String fileListPath)", "class_method_signature": "CPDConfiguration.setFileListPath(String fileListPath)", "testcase": false, "constructor": false}, {"identifier": "getURI", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getURI()", "full_signature": "public String getURI()", "class_method_signature": "CPDConfiguration.getURI()", "testcase": false, "constructor": false}, {"identifier": "setURI", "parameters": "(String uri)", "modifiers": "public", "return": "void", "signature": "void setURI(String uri)", "full_signature": "public void setURI(String uri)", "class_method_signature": "CPDConfiguration.setURI(String uri)", "testcase": false, "constructor": false}, {"identifier": "getExcludes", "parameters": "()", "modifiers": "public", "return": "List<File>", "signature": "List<File> getExcludes()", "full_signature": "public List<File> getExcludes()", "class_method_signature": "CPDConfiguration.getExcludes()", "testcase": false, "constructor": false}, {"identifier": "setExcludes", "parameters": "(List<File> excludes)", "modifiers": "public", "return": "void", "signature": "void setExcludes(List<File> excludes)", "full_signature": "public void setExcludes(List<File> excludes)", "class_method_signature": "CPDConfiguration.setExcludes(List<File> excludes)", "testcase": false, "constructor": false}, {"identifier": "isNonRecursive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNonRecursive()", "full_signature": "public boolean isNonRecursive()", "class_method_signature": "CPDConfiguration.isNonRecursive()", "testcase": false, "constructor": false}, {"identifier": "setNonRecursive", "parameters": "(boolean nonRecursive)", "modifiers": "public", "return": "void", "signature": "void setNonRecursive(boolean nonRecursive)", "full_signature": "public void setNonRecursive(boolean nonRecursive)", "class_method_signature": "CPDConfiguration.setNonRecursive(boolean nonRecursive)", "testcase": false, "constructor": false}, {"identifier": "isHelp", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHelp()", "full_signature": "public boolean isHelp()", "class_method_signature": "CPDConfiguration.isHelp()", "testcase": false, "constructor": false}, {"identifier": "setHelp", "parameters": "(boolean help)", "modifiers": "public", "return": "void", "signature": "void setHelp(boolean help)", "full_signature": "public void setHelp(boolean help)", "class_method_signature": "CPDConfiguration.setHelp(boolean help)", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncoding()", "full_signature": "public String getEncoding()", "class_method_signature": "CPDConfiguration.getEncoding()", "testcase": false, "constructor": false}, {"identifier": "isNoSkipBlocks", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNoSkipBlocks()", "full_signature": "public boolean isNoSkipBlocks()", "class_method_signature": "CPDConfiguration.isNoSkipBlocks()", "testcase": false, "constructor": false}, {"identifier": "setNoSkipBlocks", "parameters": "(boolean noSkipBlocks)", "modifiers": "public", "return": "void", "signature": "void setNoSkipBlocks(boolean noSkipBlocks)", "full_signature": "public void setNoSkipBlocks(boolean noSkipBlocks)", "class_method_signature": "CPDConfiguration.setNoSkipBlocks(boolean noSkipBlocks)", "testcase": false, "constructor": false}, {"identifier": "getSkipBlocksPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSkipBlocksPattern()", "full_signature": "public String getSkipBlocksPattern()", "class_method_signature": "CPDConfiguration.getSkipBlocksPattern()", "testcase": false, "constructor": false}, {"identifier": "setSkipBlocksPattern", "parameters": "(String skipBlocksPattern)", "modifiers": "public", "return": "void", "signature": "void setSkipBlocksPattern(String skipBlocksPattern)", "full_signature": "public void setSkipBlocksPattern(String skipBlocksPattern)", "class_method_signature": "CPDConfiguration.setSkipBlocksPattern(String skipBlocksPattern)", "testcase": false, "constructor": false}, {"identifier": "isFailOnViolation", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFailOnViolation()", "full_signature": "public boolean isFailOnViolation()", "class_method_signature": "CPDConfiguration.isFailOnViolation()", "testcase": false, "constructor": false}, {"identifier": "setFailOnViolation", "parameters": "(boolean failOnViolation)", "modifiers": "public", "return": "void", "signature": "void setFailOnViolation(boolean failOnViolation)", "full_signature": "public void setFailOnViolation(boolean failOnViolation)", "class_method_signature": "CPDConfiguration.setFailOnViolation(boolean failOnViolation)", "testcase": false, "constructor": false}], "file": "pmd-core/src/main/java/net/sourceforge/pmd/cpd/CPDConfiguration.java"}, "focal_method": {"identifier": "getRendererFromString", "parameters": "(String name, String encoding)", "modifiers": "@Deprecated public static", "return": "Renderer", "body": "@Deprecated\n    public static Renderer getRendererFromString(String name, String encoding) {\n        String clazzname = name;\n        if (clazzname == null || \"\".equals(clazzname)) {\n            clazzname = DEFAULT_RENDERER;\n        }\n        @SuppressWarnings(\"unchecked\") // Safe, all standard implementations implement both interfaces\n        Class<? extends Renderer> clazz = (Class<? extends Renderer>) RENDERERS.get(clazzname.toLowerCase(Locale.ROOT));\n        if (clazz == null) {\n            try {\n                clazz = Class.forName(clazzname).asSubclass(Renderer.class);\n            } catch (ClassNotFoundException e) {\n                System.err.println(\"Can't find class '\" + name + \"', defaulting to SimpleRenderer.\");\n                clazz = SimpleRenderer.class;\n            }\n        }\n        try {\n            Renderer renderer = clazz.getDeclaredConstructor().newInstance();\n            setRendererEncoding(renderer, encoding);\n            return renderer;\n        } catch (Exception e) {\n            System.err.println(\"Couldn't instantiate renderer, defaulting to SimpleRenderer: \" + e);\n            return new SimpleRenderer();\n        }\n    }", "signature": "Renderer getRendererFromString(String name, String encoding)", "full_signature": "@Deprecated public static Renderer getRendererFromString(String name, String encoding)", "class_method_signature": "CPDConfiguration.getRendererFromString(String name, String encoding)", "testcase": false, "constructor": false, "invocations": ["equals", "get", "toLowerCase", "asSubclass", "forName", "println", "newInstance", "getDeclaredConstructor", "setRendererEncoding", "println"]}, "repository": {"repo_id": 4992906, "url": "https://github.com/pmd/pmd", "stars": 2677, "created": "7/11/2012 6:03:00 PM +00:00", "updates": "2020-01-27T18:49:43+00:00", "fork": "False", "license": "licensed"}}