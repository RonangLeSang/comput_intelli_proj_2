{"test_class": {"identifier": "JsonGrammarTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ActionParser<Tree> parser = new ActionParser<>(\n      StandardCharsets.UTF_8,\n      JsonLexer.createGrammarBuilder(),\n      org.sonar.sslr.examples.grammars.typed.JsonGrammar.class,\n      new TreeFactory(),\n      new JsonNodeBuilder(),\n      JsonLexer.JSON);", "modifier": "private static", "type": "ActionParser<Tree>", "declarator": "parser = new ActionParser<>(\n      StandardCharsets.UTF_8,\n      JsonLexer.createGrammarBuilder(),\n      org.sonar.sslr.examples.grammars.typed.JsonGrammar.class,\n      new TreeFactory(),\n      new JsonNodeBuilder(),\n      JsonLexer.JSON)", "var_name": "parser"}], "file": "sslr-examples/src/test/java/org/sonar/sslr/examples/grammars/typed/JsonGrammarTest.java"}, "test_case": {"identifier": "number", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void number() throws Exception {\n    assertLiteral(\"1234567890\");\n    assertLiteral(\"-1234567890\");\n    assertLiteral(\"0\");\n    assertLiteral(\"0.0123456789\");\n    assertLiteral(\"1E2\");\n    assertLiteral(\"1e2\");\n    assertLiteral(\"1E+2\");\n    assertLiteral(\"1E-2\");\n  }", "signature": "void number()", "full_signature": "@Test public void number()", "class_method_signature": "JsonGrammarTest.number()", "testcase": true, "constructor": false, "invocations": ["assertLiteral", "assertLiteral", "assertLiteral", "assertLiteral", "assertLiteral", "assertLiteral", "assertLiteral", "assertLiteral"]}, "focal_class": {"identifier": "JsonGrammar", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final GrammarBuilder<InternalSyntaxToken> b;", "modifier": "private final", "type": "GrammarBuilder<InternalSyntaxToken>", "declarator": "b", "var_name": "b"}, {"original_string": "private final TreeFactory f;", "modifier": "private final", "type": "TreeFactory", "declarator": "f", "var_name": "f"}], "methods": [{"identifier": "JsonGrammar", "parameters": "(GrammarBuilder<InternalSyntaxToken> b, TreeFactory f)", "modifiers": "public", "return": "", "signature": " JsonGrammar(GrammarBuilder<InternalSyntaxToken> b, TreeFactory f)", "full_signature": "public  JsonGrammar(GrammarBuilder<InternalSyntaxToken> b, TreeFactory f)", "class_method_signature": "JsonGrammar.JsonGrammar(GrammarBuilder<InternalSyntaxToken> b, TreeFactory f)", "testcase": false, "constructor": true}, {"identifier": "JSON", "parameters": "()", "modifiers": "public", "return": "JsonTree", "signature": "JsonTree JSON()", "full_signature": "public JsonTree JSON()", "class_method_signature": "JsonGrammar.JSON()", "testcase": false, "constructor": false}, {"identifier": "OBJECT", "parameters": "()", "modifiers": "public", "return": "ObjectTree", "signature": "ObjectTree OBJECT()", "full_signature": "public ObjectTree OBJECT()", "class_method_signature": "JsonGrammar.OBJECT()", "testcase": false, "constructor": false}, {"identifier": "PAIR_LIST", "parameters": "()", "modifiers": "public", "return": "SyntaxList<PairTree>", "signature": "SyntaxList<PairTree> PAIR_LIST()", "full_signature": "public SyntaxList<PairTree> PAIR_LIST()", "class_method_signature": "JsonGrammar.PAIR_LIST()", "testcase": false, "constructor": false}, {"identifier": "PAIR", "parameters": "()", "modifiers": "public", "return": "PairTree", "signature": "PairTree PAIR()", "full_signature": "public PairTree PAIR()", "class_method_signature": "JsonGrammar.PAIR()", "testcase": false, "constructor": false}, {"identifier": "ARRAY", "parameters": "()", "modifiers": "public", "return": "ArrayTree", "signature": "ArrayTree ARRAY()", "full_signature": "public ArrayTree ARRAY()", "class_method_signature": "JsonGrammar.ARRAY()", "testcase": false, "constructor": false}, {"identifier": "VALUE_LIST", "parameters": "()", "modifiers": "public", "return": "SyntaxList<ValueTree>", "signature": "SyntaxList<ValueTree> VALUE_LIST()", "full_signature": "public SyntaxList<ValueTree> VALUE_LIST()", "class_method_signature": "JsonGrammar.VALUE_LIST()", "testcase": false, "constructor": false}, {"identifier": "VALUE", "parameters": "()", "modifiers": "public", "return": "ValueTree", "signature": "ValueTree VALUE()", "full_signature": "public ValueTree VALUE()", "class_method_signature": "JsonGrammar.VALUE()", "testcase": false, "constructor": false}, {"identifier": "STRING", "parameters": "()", "modifiers": "public", "return": "LiteralTree", "signature": "LiteralTree STRING()", "full_signature": "public LiteralTree STRING()", "class_method_signature": "JsonGrammar.STRING()", "testcase": false, "constructor": false}, {"identifier": "NUMBER", "parameters": "()", "modifiers": "public", "return": "LiteralTree", "signature": "LiteralTree NUMBER()", "full_signature": "public LiteralTree NUMBER()", "class_method_signature": "JsonGrammar.NUMBER()", "testcase": false, "constructor": false}, {"identifier": "BUILT_IN_VALUE", "parameters": "()", "modifiers": "public", "return": "BuiltInValueTree", "signature": "BuiltInValueTree BUILT_IN_VALUE()", "full_signature": "public BuiltInValueTree BUILT_IN_VALUE()", "class_method_signature": "JsonGrammar.BUILT_IN_VALUE()", "testcase": false, "constructor": false}], "file": "sslr-examples/src/main/java/org/sonar/sslr/examples/grammars/typed/JsonGrammar.java"}, "focal_method": {"identifier": "NUMBER", "parameters": "()", "modifiers": "public", "return": "LiteralTree", "body": "public LiteralTree NUMBER() {\n    return b.<LiteralTree>nonterminal().is(\n      f.number(b.token(JsonLexer.NUMBER)));\n  }", "signature": "LiteralTree NUMBER()", "full_signature": "public LiteralTree NUMBER()", "class_method_signature": "JsonGrammar.NUMBER()", "testcase": false, "constructor": false, "invocations": ["is", "nonterminal", "number", "token"]}, "repository": {"repo_id": 4159017, "url": "https://github.com/SonarSource/sslr", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 51, "size": 5875, "license": "licensed"}}