{"test_class": {"identifier": "TokensBridgeExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private TokenType fromType = mock(TokenType.class);", "modifier": "private", "type": "TokenType", "declarator": "fromType = mock(TokenType.class)", "var_name": "fromType"}, {"original_string": "private TokenType toType = mock(TokenType.class);", "modifier": "private", "type": "TokenType", "declarator": "toType = mock(TokenType.class)", "var_name": "toType"}, {"original_string": "private TokenType anotherType = mock(TokenType.class);", "modifier": "private", "type": "TokenType", "declarator": "anotherType = mock(TokenType.class)", "var_name": "anotherType"}, {"original_string": "private TokensBridgeExpression expression = new TokensBridgeExpression(fromType, toType);", "modifier": "private", "type": "TokensBridgeExpression", "declarator": "expression = new TokensBridgeExpression(fromType, toType)", "var_name": "expression"}, {"original_string": "private Machine machine = mock(Machine.class);", "modifier": "private", "type": "Machine", "declarator": "machine = mock(Machine.class)", "var_name": "machine"}], "file": "sslr-core/src/test/java/org/sonar/sslr/internal/vm/lexerful/TokensBridgeExpressionTest.java"}, "test_case": {"identifier": "should_backtrack3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void should_backtrack3() {\n    when(machine.length()).thenReturn(2);\n    Token token1 = token(fromType);\n    Token token2 = token(fromType);\n    when(machine.tokenAt(0)).thenReturn(token1);\n    when(machine.tokenAt(1)).thenReturn(token2);\n    expression.execute(machine);\n    InOrder inOrder = Mockito.inOrder(machine);\n    inOrder.verify(machine).length();\n    inOrder.verify(machine).tokenAt(0);\n    inOrder.verify(machine).tokenAt(1);\n    inOrder.verify(machine).backtrack();\n    verifyNoMoreInteractions(machine);\n  }", "signature": "void should_backtrack3()", "full_signature": "@Test public void should_backtrack3()", "class_method_signature": "TokensBridgeExpressionTest.should_backtrack3()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "length", "token", "token", "thenReturn", "when", "tokenAt", "thenReturn", "when", "tokenAt", "execute", "inOrder", "length", "verify", "tokenAt", "verify", "tokenAt", "verify", "backtrack", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "TokensBridgeExpression", "superclass": "extends NativeExpression", "interfaces": "implements Matcher", "fields": [{"original_string": "private final TokenType from;", "modifier": "private final", "type": "TokenType", "declarator": "from", "var_name": "from"}, {"original_string": "private final TokenType to;", "modifier": "private final", "type": "TokenType", "declarator": "to", "var_name": "to"}], "methods": [{"identifier": "TokensBridgeExpression", "parameters": "(TokenType from, TokenType to)", "modifiers": "public", "return": "", "signature": " TokensBridgeExpression(TokenType from, TokenType to)", "full_signature": "public  TokensBridgeExpression(TokenType from, TokenType to)", "class_method_signature": "TokensBridgeExpression.TokensBridgeExpression(TokenType from, TokenType to)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Machine machine)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Machine machine)", "full_signature": "@Override public void execute(Machine machine)", "class_method_signature": "TokensBridgeExpression.execute(Machine machine)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TokensBridgeExpression.toString()", "testcase": false, "constructor": false}], "file": "sslr-core/src/main/java/org/sonar/sslr/internal/vm/lexerful/TokensBridgeExpression.java"}, "focal_method": {"identifier": "execute", "parameters": "(Machine machine)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute(Machine machine) {\n    int length = machine.length();\n    if (length < 2 || machine.tokenAt(0).getType() != from) {\n      machine.backtrack();\n      return;\n    }\n    int offset = 0;\n    int bridgeLevel = 1;\n    Token token;\n    do {\n      offset++;\n      if (offset >= length) {\n        machine.backtrack();\n        return;\n      }\n      token = machine.tokenAt(offset);\n      if (token.getType() == from) {\n        bridgeLevel++;\n      } else if (token.getType() == to) {\n        bridgeLevel--;\n      } else {\n        // nop\n      }\n    } while (bridgeLevel != 0);\n    for (int i = 0; i <= offset; i++) {\n      machine.createLeafNode(this, 1);\n    }\n    machine.jump(1);\n  }", "signature": "void execute(Machine machine)", "full_signature": "@Override public void execute(Machine machine)", "class_method_signature": "TokensBridgeExpression.execute(Machine machine)", "testcase": false, "constructor": false, "invocations": ["length", "getType", "tokenAt", "backtrack", "backtrack", "tokenAt", "getType", "getType", "createLeafNode", "jump"]}, "repository": {"repo_id": 4159017, "url": "https://github.com/SonarSource/sslr", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 51, "size": 5875, "license": "licensed"}}