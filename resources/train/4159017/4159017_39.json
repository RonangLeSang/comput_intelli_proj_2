{"test_class": {"identifier": "TokenValueExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private TokenValueExpression expression = new TokenValueExpression(\"foo\");", "modifier": "private", "type": "TokenValueExpression", "declarator": "expression = new TokenValueExpression(\"foo\")", "var_name": "expression"}, {"original_string": "private Machine machine = mock(Machine.class);", "modifier": "private", "type": "Machine", "declarator": "machine = mock(Machine.class)", "var_name": "machine"}], "file": "sslr-core/src/test/java/org/sonar/sslr/internal/vm/lexerful/TokenValueExpressionTest.java"}, "test_case": {"identifier": "should_backtrack2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void should_backtrack2() {\n    Token token = mock(Token.class);\n    when(token.getValue()).thenReturn(\"bar\");\n    when(machine.length()).thenReturn(1);\n    when(machine.tokenAt(0)).thenReturn(token);\n    expression.execute(machine);\n    InOrder inOrder = Mockito.inOrder(machine);\n    inOrder.verify(machine).length();\n    inOrder.verify(machine).tokenAt(0);\n    inOrder.verify(machine).backtrack();\n    verifyNoMoreInteractions(machine);\n  }", "signature": "void should_backtrack2()", "full_signature": "@Test public void should_backtrack2()", "class_method_signature": "TokenValueExpressionTest.should_backtrack2()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getValue", "thenReturn", "when", "length", "thenReturn", "when", "tokenAt", "execute", "inOrder", "length", "verify", "tokenAt", "verify", "backtrack", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "TokenValueExpression", "superclass": "extends NativeExpression", "interfaces": "implements Matcher", "fields": [{"original_string": "private final String value;", "modifier": "private final", "type": "String", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "TokenValueExpression", "parameters": "(String value)", "modifiers": "public", "return": "", "signature": " TokenValueExpression(String value)", "full_signature": "public  TokenValueExpression(String value)", "class_method_signature": "TokenValueExpression.TokenValueExpression(String value)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Machine machine)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Machine machine)", "full_signature": "@Override public void execute(Machine machine)", "class_method_signature": "TokenValueExpression.execute(Machine machine)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TokenValueExpression.toString()", "testcase": false, "constructor": false}], "file": "sslr-core/src/main/java/org/sonar/sslr/internal/vm/lexerful/TokenValueExpression.java"}, "focal_method": {"identifier": "execute", "parameters": "(Machine machine)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute(Machine machine) {\n    if (machine.length() == 0) {\n      machine.backtrack();\n      return;\n    }\n    Token token = machine.tokenAt(0);\n    if (value.hashCode() == token.getValue().hashCode() && value.equals(token.getValue())) {\n      machine.createLeafNode(this, 1);\n      machine.jump(1);\n    } else {\n      machine.backtrack();\n    }\n  }", "signature": "void execute(Machine machine)", "full_signature": "@Override public void execute(Machine machine)", "class_method_signature": "TokenValueExpression.execute(Machine machine)", "testcase": false, "constructor": false, "invocations": ["length", "backtrack", "tokenAt", "hashCode", "hashCode", "getValue", "equals", "getValue", "createLeafNode", "jump", "backtrack"]}, "repository": {"repo_id": 4159017, "url": "https://github.com/SonarSource/sslr", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 51, "size": 5875, "license": "licensed"}}