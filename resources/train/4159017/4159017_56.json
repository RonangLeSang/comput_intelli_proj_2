{"test_class": {"identifier": "InstructionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private Machine machine = mock(Machine.class);", "modifier": "private", "type": "Machine", "declarator": "machine = mock(Machine.class)", "var_name": "machine"}], "file": "sslr-core/src/test/java/org/sonar/sslr/internal/vm/InstructionTest.java"}, "test_case": {"identifier": "choice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void choice() {\n    Instruction instruction = Instruction.choice(42);\n    assertThat(instruction).isInstanceOf(ChoiceInstruction.class);\n    assertThat(instruction.toString()).isEqualTo(\"Choice 42\");\n    assertThat(instruction.equals(Instruction.choice(42))).isTrue();\n    assertThat(instruction.equals(Instruction.choice(13))).isFalse();\n    assertThat(instruction.equals(new Object())).isFalse();\n    assertThat(instruction.hashCode()).isEqualTo(42);\n\n    instruction.execute(machine);\n    InOrder inOrder = Mockito.inOrder(machine);\n    inOrder.verify(machine).pushBacktrack(42);\n    inOrder.verify(machine).jump(1);\n    verifyNoMoreInteractions(machine);\n  }", "signature": "void choice()", "full_signature": "@Test public void choice()", "class_method_signature": "InstructionTest.choice()", "testcase": true, "constructor": false, "invocations": ["choice", "isInstanceOf", "assertThat", "isEqualTo", "assertThat", "toString", "isTrue", "assertThat", "equals", "choice", "isFalse", "assertThat", "equals", "choice", "isFalse", "assertThat", "equals", "isEqualTo", "assertThat", "hashCode", "execute", "inOrder", "pushBacktrack", "verify", "jump", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "Instruction", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Instruction RET = new RetInstruction();", "modifier": "private static final", "type": "Instruction", "declarator": "RET = new RetInstruction()", "var_name": "RET"}, {"original_string": "private static final Instruction BACKTRACK = new BacktrackInstruction();", "modifier": "private static final", "type": "Instruction", "declarator": "BACKTRACK = new BacktrackInstruction()", "var_name": "BACKTRACK"}, {"original_string": "private static final Instruction END = new EndInstruction();", "modifier": "private static final", "type": "Instruction", "declarator": "END = new EndInstruction()", "var_name": "END"}, {"original_string": "private static final Instruction FAIL_TWICE = new FailTwiceInstruction();", "modifier": "private static final", "type": "Instruction", "declarator": "FAIL_TWICE = new FailTwiceInstruction()", "var_name": "FAIL_TWICE"}, {"original_string": "private static final Instruction IGNORE_ERRORS = new IgnoreErrorsInstruction();", "modifier": "private static final", "type": "Instruction", "declarator": "IGNORE_ERRORS = new IgnoreErrorsInstruction()", "var_name": "IGNORE_ERRORS"}], "methods": [{"identifier": "addAll", "parameters": "(List<Instruction> list, Instruction[] array)", "modifiers": "public static", "return": "void", "signature": "void addAll(List<Instruction> list, Instruction[] array)", "full_signature": "public static void addAll(List<Instruction> list, Instruction[] array)", "class_method_signature": "Instruction.addAll(List<Instruction> list, Instruction[] array)", "testcase": false, "constructor": false}, {"identifier": "jump", "parameters": "(int offset)", "modifiers": "public static", "return": "Instruction", "signature": "Instruction jump(int offset)", "full_signature": "public static Instruction jump(int offset)", "class_method_signature": "Instruction.jump(int offset)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(int offset, Matcher matcher)", "modifiers": "public static", "return": "Instruction", "signature": "Instruction call(int offset, Matcher matcher)", "full_signature": "public static Instruction call(int offset, Matcher matcher)", "class_method_signature": "Instruction.call(int offset, Matcher matcher)", "testcase": false, "constructor": false}, {"identifier": "ret", "parameters": "()", "modifiers": "public static", "return": "Instruction", "signature": "Instruction ret()", "full_signature": "public static Instruction ret()", "class_method_signature": "Instruction.ret()", "testcase": false, "constructor": false}, {"identifier": "backtrack", "parameters": "()", "modifiers": "public static", "return": "Instruction", "signature": "Instruction backtrack()", "full_signature": "public static Instruction backtrack()", "class_method_signature": "Instruction.backtrack()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "public static", "return": "Instruction", "signature": "Instruction end()", "full_signature": "public static Instruction end()", "class_method_signature": "Instruction.end()", "testcase": false, "constructor": false}, {"identifier": "choice", "parameters": "(int offset)", "modifiers": "public static", "return": "Instruction", "signature": "Instruction choice(int offset)", "full_signature": "public static Instruction choice(int offset)", "class_method_signature": "Instruction.choice(int offset)", "testcase": false, "constructor": false}, {"identifier": "predicateChoice", "parameters": "(int offset)", "modifiers": "public static", "return": "Instruction", "signature": "Instruction predicateChoice(int offset)", "full_signature": "public static Instruction predicateChoice(int offset)", "class_method_signature": "Instruction.predicateChoice(int offset)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(int offset)", "modifiers": "public static", "return": "Instruction", "signature": "Instruction commit(int offset)", "full_signature": "public static Instruction commit(int offset)", "class_method_signature": "Instruction.commit(int offset)", "testcase": false, "constructor": false}, {"identifier": "commitVerify", "parameters": "(int offset)", "modifiers": "public static", "return": "Instruction", "signature": "Instruction commitVerify(int offset)", "full_signature": "public static Instruction commitVerify(int offset)", "class_method_signature": "Instruction.commitVerify(int offset)", "testcase": false, "constructor": false}, {"identifier": "failTwice", "parameters": "()", "modifiers": "public static", "return": "Instruction", "signature": "Instruction failTwice()", "full_signature": "public static Instruction failTwice()", "class_method_signature": "Instruction.failTwice()", "testcase": false, "constructor": false}, {"identifier": "backCommit", "parameters": "(int offset)", "modifiers": "public static", "return": "Instruction", "signature": "Instruction backCommit(int offset)", "full_signature": "public static Instruction backCommit(int offset)", "class_method_signature": "Instruction.backCommit(int offset)", "testcase": false, "constructor": false}, {"identifier": "ignoreErrors", "parameters": "()", "modifiers": "public static", "return": "Instruction", "signature": "Instruction ignoreErrors()", "full_signature": "public static Instruction ignoreErrors()", "class_method_signature": "Instruction.ignoreErrors()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Machine machine)", "modifiers": "public abstract", "return": "void", "signature": "void execute(Machine machine)", "full_signature": "public abstract void execute(Machine machine)", "class_method_signature": "Instruction.execute(Machine machine)", "testcase": false, "constructor": false}], "file": "sslr-core/src/main/java/org/sonar/sslr/internal/vm/Instruction.java"}, "focal_method": {"identifier": "choice", "parameters": "(int offset)", "modifiers": "public static", "return": "Instruction", "body": "public static Instruction choice(int offset) {\n    return new ChoiceInstruction(offset);\n  }", "signature": "Instruction choice(int offset)", "full_signature": "public static Instruction choice(int offset)", "class_method_signature": "Instruction.choice(int offset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4159017, "url": "https://github.com/SonarSource/sslr", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 51, "size": 5875, "license": "licensed"}}