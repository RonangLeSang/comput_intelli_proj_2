{"test_class": {"identifier": "PaddingFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private PaddingFunction leftPaddingFunction;", "modifier": "private", "type": "PaddingFunction", "declarator": "leftPaddingFunction", "var_name": "leftPaddingFunction"}, {"original_string": "private PaddingFunction rightPaddingFunction;", "modifier": "private", "type": "PaddingFunction", "declarator": "rightPaddingFunction", "var_name": "rightPaddingFunction"}], "file": "generators-core/src/test/java/io/generators/core/PaddingFunctionTest.java"}, "test_case": {"identifier": "shouldFailWhenNullIsPassedIn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldFailWhenNullIsPassedIn() {\n        expectedException.expect(NullPointerException.class);\n        expectedException.expectMessage(\"Can't pad null\");\n        rightPaddingFunction.apply(null);\n    }", "signature": "void shouldFailWhenNullIsPassedIn()", "full_signature": "@Test public void shouldFailWhenNullIsPassedIn()", "class_method_signature": "PaddingFunctionTest.shouldFailWhenNullIsPassedIn()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "apply"]}, "focal_class": {"identifier": "PaddingFunction", "superclass": "", "interfaces": "implements Function<Object, String>", "fields": [{"original_string": "private final PaddingType paddingType;", "modifier": "private final", "type": "PaddingType", "declarator": "paddingType", "var_name": "paddingType"}, {"original_string": "private final int minimumLength;", "modifier": "private final", "type": "int", "declarator": "minimumLength", "var_name": "minimumLength"}, {"original_string": "private final char padChar;", "modifier": "private final", "type": "char", "declarator": "padChar", "var_name": "padChar"}], "methods": [{"identifier": "padStart", "parameters": "(int minimumLength, char padChar)", "modifiers": "public static", "return": "PaddingFunction", "signature": "PaddingFunction padStart(int minimumLength, char padChar)", "full_signature": "public static PaddingFunction padStart(int minimumLength, char padChar)", "class_method_signature": "PaddingFunction.padStart(int minimumLength, char padChar)", "testcase": false, "constructor": false}, {"identifier": "padEnd", "parameters": "(int minimumLength, char padChar)", "modifiers": "public static", "return": "PaddingFunction", "signature": "PaddingFunction padEnd(int minimumLength, char padChar)", "full_signature": "public static PaddingFunction padEnd(int minimumLength, char padChar)", "class_method_signature": "PaddingFunction.padEnd(int minimumLength, char padChar)", "testcase": false, "constructor": false}, {"identifier": "PaddingFunction", "parameters": "(@Nonnull PaddingType paddingType, int minimumLength, char padChar)", "modifiers": "private", "return": "", "signature": " PaddingFunction(@Nonnull PaddingType paddingType, int minimumLength, char padChar)", "full_signature": "private  PaddingFunction(@Nonnull PaddingType paddingType, int minimumLength, char padChar)", "class_method_signature": "PaddingFunction.PaddingFunction(@Nonnull PaddingType paddingType, int minimumLength, char padChar)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Object toPad)", "modifiers": "@Override public", "return": "String", "signature": "String apply(Object toPad)", "full_signature": "@Override public String apply(Object toPad)", "class_method_signature": "PaddingFunction.apply(Object toPad)", "testcase": false, "constructor": false}], "file": "generators-core/src/main/java/io/generators/core/PaddingFunction.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object toPad)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String apply(Object toPad) {\n        checkNotNull(toPad, \"Can't pad null\");\n        return paddingType.pad(toPad, minimumLength, padChar);\n    }", "signature": "String apply(Object toPad)", "full_signature": "@Override public String apply(Object toPad)", "class_method_signature": "PaddingFunction.apply(Object toPad)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "pad"]}, "repository": {"repo_id": 13873695, "url": "https://github.com/generators-io-projects/generators", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 213, "license": "licensed"}}