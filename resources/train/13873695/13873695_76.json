{"test_class": {"identifier": "MemoizingGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "generators-core/src/test/java/io/generators/core/MemoizingGeneratorTest.java"}, "test_case": {"identifier": "shouldReturnForMultipleThreads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnForMultipleThreads() throws InterruptedException, ExecutionException {\n        //Given\n        final Generator<Integer> memoizingGenerator = new MemoizingGenerator<>(Generators.positiveInts);\n        ExecutorService executorService = newFixedThreadPool(50);\n        Collection<Callable<Integer>> generatorTasks = newArrayList();\n        generatorTasks.add(new Callable<Integer>() {\n            @Override\n            public Integer call() throws Exception {\n                return memoizingGenerator.next();\n            }\n        });\n\n        try {\n            Set<Integer> singletonSet = newHashSet();\n            for (Future<Integer> future : executorService.invokeAll(generatorTasks,10, TimeUnit.SECONDS)) {\n                singletonSet.add(future.get());\n            }\n            assertThat(singletonSet, hasSize(1));\n        } finally {\n            executorService.shutdown();\n        }\n    }", "signature": "void shouldReturnForMultipleThreads()", "full_signature": "@Test public void shouldReturnForMultipleThreads()", "class_method_signature": "MemoizingGeneratorTest.shouldReturnForMultipleThreads()", "testcase": true, "constructor": false, "invocations": ["newFixedThreadPool", "newArrayList", "add", "next", "newHashSet", "invokeAll", "add", "get", "assertThat", "hasSize", "shutdown"]}, "focal_class": {"identifier": "MemoizingGenerator", "superclass": "", "interfaces": "implements Generator<T>", "fields": [{"original_string": "private final ReentrantLock lock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private final Generator<T> delegate;", "modifier": "private final", "type": "Generator<T>", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private T value;", "modifier": "private", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "private boolean initialized;", "modifier": "private", "type": "boolean", "declarator": "initialized", "var_name": "initialized"}], "methods": [{"identifier": "MemoizingGenerator", "parameters": "(@Nonnull Generator<T> delegate)", "modifiers": "public", "return": "", "signature": " MemoizingGenerator(@Nonnull Generator<T> delegate)", "full_signature": "public  MemoizingGenerator(@Nonnull Generator<T> delegate)", "class_method_signature": "MemoizingGenerator.MemoizingGenerator(@Nonnull Generator<T> delegate)", "testcase": false, "constructor": true}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "MemoizingGenerator.next()", "testcase": false, "constructor": false}], "file": "generators-core/src/main/java/io/generators/core/MemoizingGenerator.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T next() {\n        lock.lock();\n        try {\n            if (!initialized) {\n                value = delegate.next();\n                initialized = true;\n            }\n        } finally {\n            lock.unlock();\n        }\n        return value;\n    }", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "MemoizingGenerator.next()", "testcase": false, "constructor": false, "invocations": ["lock", "next", "unlock"]}, "repository": {"repo_id": 13873695, "url": "https://github.com/generators-io-projects/generators", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 213, "license": "licensed"}}