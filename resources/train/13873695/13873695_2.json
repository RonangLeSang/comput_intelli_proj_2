{"test_class": {"identifier": "GeneratorsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String UPPERCASE = \"ABC\";", "modifier": "public static final", "type": "String", "declarator": "UPPERCASE = \"ABC\"", "var_name": "UPPERCASE"}, {"original_string": "public static final String LOWERCASE = \"abc\";", "modifier": "public static final", "type": "String", "declarator": "LOWERCASE = \"abc\"", "var_name": "LOWERCASE"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "generators-core/src/test/java/io/generators/core/GeneratorsTest.java"}, "test_case": {"identifier": "shouldReturnRandomAlphabeticStringGeneratorWithSpecifiedLength", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnRandomAlphabeticStringGeneratorWithSpecifiedLength() {\n        String stringOf5Characters = Generators.alphabetic(5).next();\n        assertThat(stringOf5Characters.length(), is(5));\n    }", "signature": "void shouldReturnRandomAlphabeticStringGeneratorWithSpecifiedLength()", "full_signature": "@Test public void shouldReturnRandomAlphabeticStringGeneratorWithSpecifiedLength()", "class_method_signature": "GeneratorsTest.shouldReturnRandomAlphabeticStringGeneratorWithSpecifiedLength()", "testcase": true, "constructor": false, "invocations": ["next", "alphabetic", "assertThat", "length", "is"]}, "focal_class": {"identifier": "Generators", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Generator<Integer> positiveInts = new RandomPositiveIntegerGenerator();", "modifier": "public static final", "type": "Generator<Integer>", "declarator": "positiveInts = new RandomPositiveIntegerGenerator()", "var_name": "positiveInts"}, {"original_string": "public static final Generator<Long> positiveLongs = new RandomPositiveLongGenerator();", "modifier": "public static final", "type": "Generator<Long>", "declarator": "positiveLongs = new RandomPositiveLongGenerator()", "var_name": "positiveLongs"}, {"original_string": "public static final Generator<String> alphabetic10 = new RandomAlphabeticStringGenerator(10);", "modifier": "public static final", "type": "Generator<String>", "declarator": "alphabetic10 = new RandomAlphabeticStringGenerator(10)", "var_name": "alphabetic10"}], "methods": [{"identifier": "Generators", "parameters": "()", "modifiers": "private", "return": "", "signature": " Generators()", "full_signature": "private  Generators()", "class_method_signature": "Generators.Generators()", "testcase": false, "constructor": true}, {"identifier": "positiveInts", "parameters": "(int from, int to)", "modifiers": "public static", "return": "Generator<Integer>", "signature": "Generator<Integer> positiveInts(int from, int to)", "full_signature": "public static Generator<Integer> positiveInts(int from, int to)", "class_method_signature": "Generators.positiveInts(int from, int to)", "testcase": false, "constructor": false}, {"identifier": "positiveLongs", "parameters": "(long from, long to)", "modifiers": "public static", "return": "Generator<Long>", "signature": "Generator<Long> positiveLongs(long from, long to)", "full_signature": "public static Generator<Long> positiveLongs(long from, long to)", "class_method_signature": "Generators.positiveLongs(long from, long to)", "testcase": false, "constructor": false}, {"identifier": "broadcasting", "parameters": "(Generator<T> delegate, List<Consumer<T>> consumers)", "modifiers": "public static", "return": "Generator<T>", "signature": "Generator<T> broadcasting(Generator<T> delegate, List<Consumer<T>> consumers)", "full_signature": "public static Generator<T> broadcasting(Generator<T> delegate, List<Consumer<T>> consumers)", "class_method_signature": "Generators.broadcasting(Generator<T> delegate, List<Consumer<T>> consumers)", "testcase": false, "constructor": false}, {"identifier": "alphabetic", "parameters": "(int length)", "modifiers": "public static", "return": "Generator<String>", "signature": "Generator<String> alphabetic(int length)", "full_signature": "public static Generator<String> alphabetic(int length)", "class_method_signature": "Generators.alphabetic(int length)", "testcase": false, "constructor": false}, {"identifier": "ofInstance", "parameters": "(T instance)", "modifiers": "public static", "return": "Generator<T>", "signature": "Generator<T> ofInstance(T instance)", "full_signature": "public static Generator<T> ofInstance(T instance)", "class_method_signature": "Generators.ofInstance(T instance)", "testcase": false, "constructor": false}, {"identifier": "ofType", "parameters": "(Class<T> type, Generator<V> valueGenerator)", "modifiers": "public static", "return": "Generator<T>", "signature": "Generator<T> ofType(Class<T> type, Generator<V> valueGenerator)", "full_signature": "public static Generator<T> ofType(Class<T> type, Generator<V> valueGenerator)", "class_method_signature": "Generators.ofType(Class<T> type, Generator<V> valueGenerator)", "testcase": false, "constructor": false}, {"identifier": "iterable", "parameters": "(int limit, Generator<T> generator)", "modifiers": "public static", "return": "Iterable<T>", "signature": "Iterable<T> iterable(int limit, Generator<T> generator)", "full_signature": "public static Iterable<T> iterable(int limit, Generator<T> generator)", "class_method_signature": "Generators.iterable(int limit, Generator<T> generator)", "testcase": false, "constructor": false}, {"identifier": "biased", "parameters": "(int percentageBiasTowardsFirst, Generator<T> firstGenerator, Generator<T> secondGenerator)", "modifiers": "public static", "return": "Generator<T>", "signature": "Generator<T> biased(int percentageBiasTowardsFirst, Generator<T> firstGenerator, Generator<T> secondGenerator)", "full_signature": "public static Generator<T> biased(int percentageBiasTowardsFirst, Generator<T> firstGenerator, Generator<T> secondGenerator)", "class_method_signature": "Generators.biased(int percentageBiasTowardsFirst, Generator<T> firstGenerator, Generator<T> secondGenerator)", "testcase": false, "constructor": false}, {"identifier": "listFrom", "parameters": "(int limit, Generator<T> generator)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> listFrom(int limit, Generator<T> generator)", "full_signature": "public static List<T> listFrom(int limit, Generator<T> generator)", "class_method_signature": "Generators.listFrom(int limit, Generator<T> generator)", "testcase": false, "constructor": false}, {"identifier": "setFrom", "parameters": "(int limit, Generator<T> generator)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> setFrom(int limit, Generator<T> generator)", "full_signature": "public static Set<T> setFrom(int limit, Generator<T> generator)", "class_method_signature": "Generators.setFrom(int limit, Generator<T> generator)", "testcase": false, "constructor": false}, {"identifier": "randomEnum", "parameters": "(Class<T> enumClass)", "modifiers": "public static", "return": "Generator<T>", "signature": "Generator<T> randomEnum(Class<T> enumClass)", "full_signature": "public static Generator<T> randomEnum(Class<T> enumClass)", "class_method_signature": "Generators.randomEnum(Class<T> enumClass)", "testcase": false, "constructor": false}, {"identifier": "cardNumber", "parameters": "(Generator<Long> partialAccountNumberGenerator)", "modifiers": "public static", "return": "Generator<Long>", "signature": "Generator<Long> cardNumber(Generator<Long> partialAccountNumberGenerator)", "full_signature": "public static Generator<Long> cardNumber(Generator<Long> partialAccountNumberGenerator)", "class_method_signature": "Generators.cardNumber(Generator<Long> partialAccountNumberGenerator)", "testcase": false, "constructor": false}, {"identifier": "nDigitPositiveInteger", "parameters": "(int digits)", "modifiers": "public static", "return": "Generator<Integer>", "signature": "Generator<Integer> nDigitPositiveInteger(int digits)", "full_signature": "public static Generator<Integer> nDigitPositiveInteger(int digits)", "class_method_signature": "Generators.nDigitPositiveInteger(int digits)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Generator<F> delegate, Function<F, T> transformation)", "modifiers": "public static", "return": "Generator<T>", "signature": "Generator<T> transform(Generator<F> delegate, Function<F, T> transformation)", "full_signature": "public static Generator<T> transform(Generator<F> delegate, Function<F, T> transformation)", "class_method_signature": "Generators.transform(Generator<F> delegate, Function<F, T> transformation)", "testcase": false, "constructor": false}, {"identifier": "upperCase", "parameters": "(GeneratorOfInstance<String> delegate, Locale locale)", "modifiers": "public static", "return": "Generator<String>", "signature": "Generator<String> upperCase(GeneratorOfInstance<String> delegate, Locale locale)", "full_signature": "public static Generator<String> upperCase(GeneratorOfInstance<String> delegate, Locale locale)", "class_method_signature": "Generators.upperCase(GeneratorOfInstance<String> delegate, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "upperCase", "parameters": "(GeneratorOfInstance<String> delegate)", "modifiers": "public static", "return": "Generator<String>", "signature": "Generator<String> upperCase(GeneratorOfInstance<String> delegate)", "full_signature": "public static Generator<String> upperCase(GeneratorOfInstance<String> delegate)", "class_method_signature": "Generators.upperCase(GeneratorOfInstance<String> delegate)", "testcase": false, "constructor": false}, {"identifier": "lowerCase", "parameters": "(GeneratorOfInstance<String> delegate)", "modifiers": "public static", "return": "Generator<String>", "signature": "Generator<String> lowerCase(GeneratorOfInstance<String> delegate)", "full_signature": "public static Generator<String> lowerCase(GeneratorOfInstance<String> delegate)", "class_method_signature": "Generators.lowerCase(GeneratorOfInstance<String> delegate)", "testcase": false, "constructor": false}, {"identifier": "lowerCase", "parameters": "(Generator<String> delegate, Locale locale)", "modifiers": "public static", "return": "Generator<String>", "signature": "Generator<String> lowerCase(Generator<String> delegate, Locale locale)", "full_signature": "public static Generator<String> lowerCase(Generator<String> delegate, Locale locale)", "class_method_signature": "Generators.lowerCase(Generator<String> delegate, Locale locale)", "testcase": false, "constructor": false}], "file": "generators-core/src/main/java/io/generators/core/Generators.java"}, "focal_method": {"identifier": "alphabetic", "parameters": "(int length)", "modifiers": "public static", "return": "Generator<String>", "body": "public static Generator<String> alphabetic(int length) {\n        return new RandomAlphabeticStringGenerator(length);\n    }", "signature": "Generator<String> alphabetic(int length)", "full_signature": "public static Generator<String> alphabetic(int length)", "class_method_signature": "Generators.alphabetic(int length)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 13873695, "url": "https://github.com/generators-io-projects/generators", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 213, "license": "licensed"}}