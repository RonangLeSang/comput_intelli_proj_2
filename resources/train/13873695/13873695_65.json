{"test_class": {"identifier": "RandomFromCollectionGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "generators-core/src/test/java/io/generators/core/RandomFromCollectionGeneratorTest.java"}, "test_case": {"identifier": "shouldNotFailGenerationIfCollectionIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotFailGenerationIfCollectionIsEmpty() {\n        //Given\n        Generator<String> someGenerator = new RandomFromCollectionGenerator<>(Collections.<String>emptyList());\n\n        for (int i = 0; i < 3; i++) {\n            //When\n            String nullValue = someGenerator.next();\n            //Then\n            assertThat(nullValue, nullValue());\n        }\n    }", "signature": "void shouldNotFailGenerationIfCollectionIsEmpty()", "full_signature": "@Test public void shouldNotFailGenerationIfCollectionIsEmpty()", "class_method_signature": "RandomFromCollectionGeneratorTest.shouldNotFailGenerationIfCollectionIsEmpty()", "testcase": true, "constructor": false, "invocations": ["emptyList", "next", "assertThat", "nullValue"]}, "focal_class": {"identifier": "RandomFromCollectionGenerator", "superclass": "", "interfaces": "implements Generator<T>", "fields": [{"original_string": "private final List<T> items;", "modifier": "private final", "type": "List<T>", "declarator": "items", "var_name": "items"}, {"original_string": "private final Random random = new Random();", "modifier": "private final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private int exclusiveIndex;", "modifier": "private", "type": "int", "declarator": "exclusiveIndex", "var_name": "exclusiveIndex"}], "methods": [{"identifier": "RandomFromCollectionGenerator", "parameters": "(@Nonnull Collection<T> items)", "modifiers": "public", "return": "", "signature": " RandomFromCollectionGenerator(@Nonnull Collection<T> items)", "full_signature": "public  RandomFromCollectionGenerator(@Nonnull Collection<T> items)", "class_method_signature": "RandomFromCollectionGenerator.RandomFromCollectionGenerator(@Nonnull Collection<T> items)", "testcase": false, "constructor": true}, {"identifier": "RandomFromCollectionGenerator", "parameters": "(T... items)", "modifiers": "@SafeVarargs public", "return": "", "signature": " RandomFromCollectionGenerator(T... items)", "full_signature": "@SafeVarargs public  RandomFromCollectionGenerator(T... items)", "class_method_signature": "RandomFromCollectionGenerator.RandomFromCollectionGenerator(T... items)", "testcase": false, "constructor": true}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "RandomFromCollectionGenerator.next()", "testcase": false, "constructor": false}], "file": "generators-core/src/main/java/io/generators/core/RandomFromCollectionGenerator.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T next() {\n        return exclusiveIndex > 0 ? items.get(random.nextInt(exclusiveIndex)) : null;\n    }", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "RandomFromCollectionGenerator.next()", "testcase": false, "constructor": false, "invocations": ["get", "nextInt"]}, "repository": {"repo_id": 13873695, "url": "https://github.com/generators-io-projects/generators", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 213, "license": "licensed"}}