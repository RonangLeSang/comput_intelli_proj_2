{"test_class": {"identifier": "AlleleMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String fastaPath;", "modifier": "static", "type": "String", "declarator": "fastaPath", "var_name": "fastaPath"}, {"original_string": "static VariantNormalizer normalizer;", "modifier": "static", "type": "VariantNormalizer", "declarator": "normalizer", "var_name": "normalizer"}, {"original_string": "static String vcfSingle;", "modifier": "static", "type": "String", "declarator": "vcfSingle", "var_name": "vcfSingle"}, {"original_string": "static String vcfMultiple;", "modifier": "static", "type": "String", "declarator": "vcfMultiple", "var_name": "vcfMultiple"}, {"original_string": "static VariantContext vcSingle;", "modifier": "static", "type": "VariantContext", "declarator": "vcSingle", "var_name": "vcSingle"}, {"original_string": "static VariantContext vcMultiple;", "modifier": "static", "type": "VariantContext", "declarator": "vcMultiple", "var_name": "vcMultiple"}], "file": "jannovar-vardbs/src/test/java/de/charite/compbio/jannovar/vardbs/base/AlleleMatcherTest.java"}, "test_case": {"identifier": "testMatchMultipleToSingle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMatchMultipleToSingle() throws JannovarVarDBException {\n\t\tAlleleMatcher matcher = new AlleleMatcher(fastaPath);\n\t\tCollection<GenotypeMatch> matches = matcher.matchGenotypes(vcMultiple, vcSingle);\n\n\t\tassertEquals(1, matches.size());\n\t\tGenotypeMatch first = (GenotypeMatch) matches.toArray()[0];\n\t\tAssert.assertSame(vcMultiple, first.getObsVC());\n\t\tAssert.assertSame(vcSingle, first.getDBVC());\n\t\tAssert.assertEquals(2, first.getObservedAllele());\n\t\tAssert.assertEquals(1, first.getDbAllele());\n\t}", "signature": "void testMatchMultipleToSingle()", "full_signature": "@Test public void testMatchMultipleToSingle()", "class_method_signature": "AlleleMatcherTest.testMatchMultipleToSingle()", "testcase": true, "constructor": false, "invocations": ["matchGenotypes", "assertEquals", "size", "toArray", "assertSame", "getObsVC", "assertSame", "getDBVC", "assertEquals", "getObservedAllele", "assertEquals", "getDbAllele"]}, "focal_class": {"identifier": "AlleleMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final VariantNormalizer normalizer;", "modifier": "private final", "type": "VariantNormalizer", "declarator": "normalizer", "var_name": "normalizer"}], "methods": [{"identifier": "AlleleMatcher", "parameters": "(String pathFasta)", "modifiers": "public", "return": "", "signature": " AlleleMatcher(String pathFasta)", "full_signature": "public  AlleleMatcher(String pathFasta)", "class_method_signature": "AlleleMatcher.AlleleMatcher(String pathFasta)", "testcase": false, "constructor": true}, {"identifier": "matchGenotypes", "parameters": "(VariantContext obsVC, VariantContext dbVC)", "modifiers": "public", "return": "Collection<GenotypeMatch>", "signature": "Collection<GenotypeMatch> matchGenotypes(VariantContext obsVC, VariantContext dbVC)", "full_signature": "public Collection<GenotypeMatch> matchGenotypes(VariantContext obsVC, VariantContext dbVC)", "class_method_signature": "AlleleMatcher.matchGenotypes(VariantContext obsVC, VariantContext dbVC)", "testcase": false, "constructor": false}, {"identifier": "positionOverlaps", "parameters": "(VariantContext obsVC, VariantContext dbVC)", "modifiers": "public", "return": "Collection<GenotypeMatch>", "signature": "Collection<GenotypeMatch> positionOverlaps(VariantContext obsVC, VariantContext dbVC)", "full_signature": "public Collection<GenotypeMatch> positionOverlaps(VariantContext obsVC, VariantContext dbVC)", "class_method_signature": "AlleleMatcher.positionOverlaps(VariantContext obsVC, VariantContext dbVC)", "testcase": false, "constructor": false}, {"identifier": "ctxToVariants", "parameters": "(VariantContext vc)", "modifiers": "private", "return": "Collection<VariantDescription>", "signature": "Collection<VariantDescription> ctxToVariants(VariantContext vc)", "full_signature": "private Collection<VariantDescription> ctxToVariants(VariantContext vc)", "class_method_signature": "AlleleMatcher.ctxToVariants(VariantContext vc)", "testcase": false, "constructor": false}], "file": "jannovar-vardbs/src/main/java/de/charite/compbio/jannovar/vardbs/base/AlleleMatcher.java"}, "focal_method": {"identifier": "matchGenotypes", "parameters": "(VariantContext obsVC, VariantContext dbVC)", "modifiers": "public", "return": "Collection<GenotypeMatch>", "body": "public Collection<GenotypeMatch> matchGenotypes(VariantContext obsVC, VariantContext dbVC) {\n\t\tList<GenotypeMatch> result = new ArrayList<>();\n\n\t\t// Get normalized description of all alternative observed and database alleles\n\t\tCollection<VariantDescription> obsVars = ctxToVariants(obsVC);\n\t\tCollection<VariantDescription> dbVars = ctxToVariants(dbVC);\n\n\t\tint i = 1; // excludes reference allele\n\t\tfor (VariantDescription obsVar : obsVars) {\n\t\t\tint j = 1; // excludes reference allele\n\t\t\tfor (VariantDescription dbVar : dbVars) {\n\t\t\t\tif (dbVar.equals(obsVar))\n\t\t\t\t\tresult.add(new GenotypeMatch(i, j, obsVC, dbVC, true));\n\t\t\t\tj += 1;\n\t\t\t}\n\n\t\t\ti += 1;\n\t\t}\n\n\t\treturn result;\n\t}", "signature": "Collection<GenotypeMatch> matchGenotypes(VariantContext obsVC, VariantContext dbVC)", "full_signature": "public Collection<GenotypeMatch> matchGenotypes(VariantContext obsVC, VariantContext dbVC)", "class_method_signature": "AlleleMatcher.matchGenotypes(VariantContext obsVC, VariantContext dbVC)", "testcase": false, "constructor": false, "invocations": ["ctxToVariants", "ctxToVariants", "equals", "add"]}, "repository": {"repo_id": 11233417, "url": "https://github.com/charite/jannovar", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 35, "size": 23934, "license": "licensed"}}