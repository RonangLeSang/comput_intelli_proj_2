{"test_class": {"identifier": "TranscriptProjectionDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final ReferenceDictionary refDict = HG19RefDictBuilder.build();", "modifier": "static final", "type": "ReferenceDictionary", "declarator": "refDict = HG19RefDictBuilder.build()", "var_name": "refDict"}, {"original_string": "TranscriptModelBuilder builderForward;", "modifier": "", "type": "TranscriptModelBuilder", "declarator": "builderForward", "var_name": "builderForward"}, {"original_string": "TranscriptModelBuilder builderReverse;", "modifier": "", "type": "TranscriptModelBuilder", "declarator": "builderReverse", "var_name": "builderReverse"}, {"original_string": "TranscriptModel infoForward;", "modifier": "", "type": "TranscriptModel", "declarator": "infoForward", "var_name": "infoForward"}, {"original_string": "TranscriptModel infoReverse;", "modifier": "", "type": "TranscriptModel", "declarator": "infoReverse", "var_name": "infoReverse"}], "file": "jannovar-core/src/test/java/de/charite/compbio/jannovar/reference/TranscriptProjectionDecoratorTest.java"}, "test_case": {"identifier": "testExonIDInReferenceOrderReverse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExonIDInReferenceOrderReverse() {\n\t\tTranscriptProjectionDecorator projector = new TranscriptProjectionDecorator(infoReverse);\n\n\t\tfor (int i = 0; i < 4; ++i)\n\t\t\tAssert.assertEquals(3 - i, projector.exonIDInReferenceOrder(i));\n\t}", "signature": "void testExonIDInReferenceOrderReverse()", "full_signature": "@Test public void testExonIDInReferenceOrderReverse()", "class_method_signature": "TranscriptProjectionDecoratorTest.testExonIDInReferenceOrderReverse()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "exonIDInReferenceOrder"]}, "focal_class": {"identifier": "TranscriptProjectionDecorator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int INVALID_EXON_ID = -1;", "modifier": "public static final", "type": "int", "declarator": "INVALID_EXON_ID = -1", "var_name": "INVALID_EXON_ID"}, {"original_string": "public static final int INVALID_INTRON_ID = -1;", "modifier": "public static final", "type": "int", "declarator": "INVALID_INTRON_ID = -1", "var_name": "INVALID_INTRON_ID"}, {"original_string": "private final TranscriptModel transcript;", "modifier": "private final", "type": "TranscriptModel", "declarator": "transcript", "var_name": "transcript"}], "methods": [{"identifier": "TranscriptProjectionDecorator", "parameters": "(TranscriptModel transcript)", "modifiers": "public", "return": "", "signature": " TranscriptProjectionDecorator(TranscriptModel transcript)", "full_signature": "public  TranscriptProjectionDecorator(TranscriptModel transcript)", "class_method_signature": "TranscriptProjectionDecorator.TranscriptProjectionDecorator(TranscriptModel transcript)", "testcase": false, "constructor": true}, {"identifier": "getTranscript", "parameters": "()", "modifiers": "public", "return": "TranscriptModel", "signature": "TranscriptModel getTranscript()", "full_signature": "public TranscriptModel getTranscript()", "class_method_signature": "TranscriptProjectionDecorator.getTranscript()", "testcase": false, "constructor": false}, {"identifier": "getCDSTranscript", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCDSTranscript()", "full_signature": "public String getCDSTranscript()", "class_method_signature": "TranscriptProjectionDecorator.getCDSTranscript()", "testcase": false, "constructor": false}, {"identifier": "getTranscriptStartingAtCDS", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTranscriptStartingAtCDS()", "full_signature": "public String getTranscriptStartingAtCDS()", "class_method_signature": "TranscriptProjectionDecorator.getTranscriptStartingAtCDS()", "testcase": false, "constructor": false}, {"identifier": "genomeToTranscriptPos", "parameters": "(GenomePosition pos)", "modifiers": "public", "return": "TranscriptPosition", "signature": "TranscriptPosition genomeToTranscriptPos(GenomePosition pos)", "full_signature": "public TranscriptPosition genomeToTranscriptPos(GenomePosition pos)", "class_method_signature": "TranscriptProjectionDecorator.genomeToTranscriptPos(GenomePosition pos)", "testcase": false, "constructor": false}, {"identifier": "genomeToCDSPos", "parameters": "(GenomePosition pos)", "modifiers": "public", "return": "CDSPosition", "signature": "CDSPosition genomeToCDSPos(GenomePosition pos)", "full_signature": "public CDSPosition genomeToCDSPos(GenomePosition pos)", "class_method_signature": "TranscriptProjectionDecorator.genomeToCDSPos(GenomePosition pos)", "testcase": false, "constructor": false}, {"identifier": "cdsToTranscriptPos", "parameters": "(CDSPosition pos)", "modifiers": "public", "return": "TranscriptPosition", "signature": "TranscriptPosition cdsToTranscriptPos(CDSPosition pos)", "full_signature": "public TranscriptPosition cdsToTranscriptPos(CDSPosition pos)", "class_method_signature": "TranscriptProjectionDecorator.cdsToTranscriptPos(CDSPosition pos)", "testcase": false, "constructor": false}, {"identifier": "cdsToGenomePos", "parameters": "(CDSPosition pos)", "modifiers": "public", "return": "GenomePosition", "signature": "GenomePosition cdsToGenomePos(CDSPosition pos)", "full_signature": "public GenomePosition cdsToGenomePos(CDSPosition pos)", "class_method_signature": "TranscriptProjectionDecorator.cdsToGenomePos(CDSPosition pos)", "testcase": false, "constructor": false}, {"identifier": "transcriptToGenomePos", "parameters": "(TranscriptPosition pos)", "modifiers": "public", "return": "GenomePosition", "signature": "GenomePosition transcriptToGenomePos(TranscriptPosition pos)", "full_signature": "public GenomePosition transcriptToGenomePos(TranscriptPosition pos)", "class_method_signature": "TranscriptProjectionDecorator.transcriptToGenomePos(TranscriptPosition pos)", "testcase": false, "constructor": false}, {"identifier": "exonIDInReferenceOrder", "parameters": "(int exonID)", "modifiers": "public", "return": "int", "signature": "int exonIDInReferenceOrder(int exonID)", "full_signature": "public int exonIDInReferenceOrder(int exonID)", "class_method_signature": "TranscriptProjectionDecorator.exonIDInReferenceOrder(int exonID)", "testcase": false, "constructor": false}, {"identifier": "locateIntron", "parameters": "(GenomePosition pos)", "modifiers": "public", "return": "int", "signature": "int locateIntron(GenomePosition pos)", "full_signature": "public int locateIntron(GenomePosition pos)", "class_method_signature": "TranscriptProjectionDecorator.locateIntron(GenomePosition pos)", "testcase": false, "constructor": false}, {"identifier": "locateExon", "parameters": "(GenomePosition pos)", "modifiers": "public", "return": "int", "signature": "int locateExon(GenomePosition pos)", "full_signature": "public int locateExon(GenomePosition pos)", "class_method_signature": "TranscriptProjectionDecorator.locateExon(GenomePosition pos)", "testcase": false, "constructor": false}, {"identifier": "locateExon", "parameters": "(TranscriptPosition pos)", "modifiers": "public", "return": "int", "signature": "int locateExon(TranscriptPosition pos)", "full_signature": "public int locateExon(TranscriptPosition pos)", "class_method_signature": "TranscriptProjectionDecorator.locateExon(TranscriptPosition pos)", "testcase": false, "constructor": false}, {"identifier": "projectGenomeToCDSPosition", "parameters": "(GenomePosition pos)", "modifiers": "public", "return": "CDSPosition", "signature": "CDSPosition projectGenomeToCDSPosition(GenomePosition pos)", "full_signature": "public CDSPosition projectGenomeToCDSPosition(GenomePosition pos)", "class_method_signature": "TranscriptProjectionDecorator.projectGenomeToCDSPosition(GenomePosition pos)", "testcase": false, "constructor": false}, {"identifier": "projectGenomeToCDSInterval", "parameters": "(GenomeInterval interval)", "modifiers": "public", "return": "CDSInterval", "signature": "CDSInterval projectGenomeToCDSInterval(GenomeInterval interval)", "full_signature": "public CDSInterval projectGenomeToCDSInterval(GenomeInterval interval)", "class_method_signature": "TranscriptProjectionDecorator.projectGenomeToCDSInterval(GenomeInterval interval)", "testcase": false, "constructor": false}, {"identifier": "projectGenomeToTXPosition", "parameters": "(GenomePosition pos)", "modifiers": "public", "return": "TranscriptPosition", "signature": "TranscriptPosition projectGenomeToTXPosition(GenomePosition pos)", "full_signature": "public TranscriptPosition projectGenomeToTXPosition(GenomePosition pos)", "class_method_signature": "TranscriptProjectionDecorator.projectGenomeToTXPosition(GenomePosition pos)", "testcase": false, "constructor": false}, {"identifier": "projectGenomeToTXInterval", "parameters": "(GenomeInterval interval)", "modifiers": "public", "return": "TranscriptInterval", "signature": "TranscriptInterval projectGenomeToTXInterval(GenomeInterval interval)", "full_signature": "public TranscriptInterval projectGenomeToTXInterval(GenomeInterval interval)", "class_method_signature": "TranscriptProjectionDecorator.projectGenomeToTXInterval(GenomeInterval interval)", "testcase": false, "constructor": false}], "file": "jannovar-core/src/main/java/de/charite/compbio/jannovar/reference/TranscriptProjectionDecorator.java"}, "focal_method": {"identifier": "exonIDInReferenceOrder", "parameters": "(int exonID)", "modifiers": "public", "return": "int", "body": "public int exonIDInReferenceOrder(int exonID) {\n\t\tif (transcript.getStrand().isForward())\n\t\t\treturn exonID;\n\t\telse\n\t\t\treturn transcript.getExonRegions().size() - exonID - 1;\n\t}", "signature": "int exonIDInReferenceOrder(int exonID)", "full_signature": "public int exonIDInReferenceOrder(int exonID)", "class_method_signature": "TranscriptProjectionDecorator.exonIDInReferenceOrder(int exonID)", "testcase": false, "constructor": false, "invocations": ["isForward", "getStrand", "size", "getExonRegions"]}, "repository": {"repo_id": 11233417, "url": "https://github.com/charite/jannovar", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 35, "size": 23934, "license": "licensed"}}