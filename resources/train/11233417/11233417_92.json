{"test_class": {"identifier": "SVCopyNumberVariantAnnotationBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String dbPath;", "modifier": "static", "type": "String", "declarator": "dbPath", "var_name": "dbPath"}, {"original_string": "static JannovarData jvData;", "modifier": "static", "type": "JannovarData", "declarator": "jvData", "var_name": "jvData"}, {"original_string": "static TranscriptModel oma1;", "modifier": "static", "type": "TranscriptModel", "declarator": "oma1", "var_name": "oma1"}], "file": "jannovar-core/src/test/java/de/charite/compbio/jannovar/annotation/builders/SVCopyNumberVariantAnnotationBuilderTest.java"}, "test_case": {"identifier": "testExonDuplicationOma1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExonDuplicationOma1() {\n\t\tfinal SVCopyNumberVariant svCNV = new SVCopyNumberVariant(\n\t\t\tnew GenomePosition(jvData.getRefDict(), Strand.FWD, oma1.getChr(), 58968128),\n\t\t\tnew GenomePosition(jvData.getRefDict(), Strand.FWD, oma1.getChr(), 58994820),\n\t\t\t0, 0, 0, 0\n\t\t);\n\t\tfinal SVAnnotation anno = new SVCopyNumberVariantAnnotationBuilder(oma1, svCNV).build();\n\n\t\tAssert.assertEquals(anno.getTranscript().toString(), \"NM_145243.3(1:g.58946391_59012446)\");\n\t\tAssert.assertEquals(\n\t\t\t\"SVCopyNumberVariant{genomePos=1:g.58968129, genomePos2=1:g.58994821, posCILowerBound=0, \" +\n\t\t\t\t\"posCIUpperBound=0, pos2CILowerBound=0, pos2CIUpperBound=0}\",\n\t\t\tanno.getVariant().toString()\n\t\t);\n\t\tAssert.assertEquals(\n\t\t\t\"[COPY_NUMBER_CHANGE, STRUCTURAL_VARIANT, CODING_TRANSCRIPT_VARIANT]\",\n\t\t\tanno.getEffects().toString()\n\t\t);\n\t}", "signature": "void testExonDuplicationOma1()", "full_signature": "@Test public void testExonDuplicationOma1()", "class_method_signature": "SVCopyNumberVariantAnnotationBuilderTest.testExonDuplicationOma1()", "testcase": true, "constructor": false, "invocations": ["getRefDict", "getChr", "getRefDict", "getChr", "build", "assertEquals", "toString", "getTranscript", "assertEquals", "toString", "getVariant", "assertEquals", "toString", "getEffects"]}, "focal_class": {"identifier": "SVCopyNumberVariantAnnotationBuilder", "superclass": "extends SVAnnotationBuilder", "interfaces": "", "fields": [{"original_string": "private final SVCopyNumberVariant svCNV;", "modifier": "private final", "type": "SVCopyNumberVariant", "declarator": "svCNV", "var_name": "svCNV"}], "methods": [{"identifier": "SVCopyNumberVariantAnnotationBuilder", "parameters": "(TranscriptModel transcript, SVCopyNumberVariant svCNV)", "modifiers": "public", "return": "", "signature": " SVCopyNumberVariantAnnotationBuilder(TranscriptModel transcript, SVCopyNumberVariant svCNV)", "full_signature": "public  SVCopyNumberVariantAnnotationBuilder(TranscriptModel transcript, SVCopyNumberVariant svCNV)", "class_method_signature": "SVCopyNumberVariantAnnotationBuilder.SVCopyNumberVariantAnnotationBuilder(TranscriptModel transcript, SVCopyNumberVariant svCNV)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "SVAnnotation", "signature": "SVAnnotation build()", "full_signature": "@Override public SVAnnotation build()", "class_method_signature": "SVCopyNumberVariantAnnotationBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "buildEffectSet", "parameters": "(Collection<VariantEffect> effects)", "modifiers": "private", "return": "ImmutableSet<VariantEffect>", "signature": "ImmutableSet<VariantEffect> buildEffectSet(Collection<VariantEffect> effects)", "full_signature": "private ImmutableSet<VariantEffect> buildEffectSet(Collection<VariantEffect> effects)", "class_method_signature": "SVCopyNumberVariantAnnotationBuilder.buildEffectSet(Collection<VariantEffect> effects)", "testcase": false, "constructor": false}], "file": "jannovar-core/src/main/java/de/charite/compbio/jannovar/annotation/builders/SVCopyNumberVariantAnnotationBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "SVAnnotation", "body": "@Override\n\tpublic SVAnnotation build() {\n\t\tfinal GenomeInterval changeInterval = svCNV.getGenomeInterval();\n\n\t\t// Go over the different cases from most to least pathogenic step and return most pathogenic one.\n\n\t\tif (changeInterval.overlapsWith(transcript.getTXRegion())) {\n\t\t\treturn new SVAnnotation(svCNV, transcript, buildEffectSet(Sets.immutableEnumSet(\n\t\t\t\tVariantEffect.COPY_NUMBER_CHANGE, VariantEffect.STRUCTURAL_VARIANT\n\t\t\t)));\n\t\t} else if (so.overlapsWithUpstreamRegion(changeInterval)) {\n\t\t\treturn new SVAnnotation(svCNV, transcript, buildEffectSet(Sets.immutableEnumSet(\n\t\t\t\tVariantEffect.STRUCTURAL_VARIANT, VariantEffect.UPSTREAM_GENE_VARIANT\n\t\t\t)));\n\t\t} else if (so.overlapsWithDownstreamRegion(changeInterval)) {\n\t\t\treturn new SVAnnotation(svCNV, transcript, buildEffectSet(Sets.immutableEnumSet(\n\t\t\t\tVariantEffect.STRUCTURAL_VARIANT, VariantEffect.DOWNSTREAM_GENE_VARIANT\n\t\t\t)));\n\t\t} else {\n\t\t\treturn new SVAnnotation(svCNV, transcript, buildEffectSet(Sets.immutableEnumSet(\n\t\t\t\tVariantEffect.STRUCTURAL_VARIANT, VariantEffect.INTERGENIC_VARIANT\n\t\t\t)));\n\t\t}\n\t}", "signature": "SVAnnotation build()", "full_signature": "@Override public SVAnnotation build()", "class_method_signature": "SVCopyNumberVariantAnnotationBuilder.build()", "testcase": false, "constructor": false, "invocations": ["getGenomeInterval", "overlapsWith", "getTXRegion", "buildEffectSet", "immutableEnumSet", "overlapsWithUpstreamRegion", "buildEffectSet", "immutableEnumSet", "overlapsWithDownstreamRegion", "buildEffectSet", "immutableEnumSet", "buildEffectSet", "immutableEnumSet"]}, "repository": {"repo_id": 11233417, "url": "https://github.com/charite/jannovar", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 35, "size": 23934, "license": "licensed"}}