{"test_class": {"identifier": "GnomadVCFHeaderExtenderTest", "superclass": "", "interfaces": "", "fields": [], "file": "jannovar-vardbs/src/test/java/de/charite/compbio/jannovar/vardbs/gnomad/GnomadVCFHeaderExtenderTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() throws JannovarVarDBException {\n\t\tVCFHeader header = new VCFHeader();\n\n\t\t// Check header before extension\n\t\tAssert.assertEquals(0, header.getFilterLines().size());\n\t\tAssert.assertEquals(0, header.getInfoHeaderLines().size());\n\t\tAssert.assertEquals(0, header.getFormatHeaderLines().size());\n\t\tAssert.assertEquals(0, header.getIDHeaderLines().size());\n\t\tAssert.assertEquals(0, header.getOtherHeaderLines().size());\n\n\t\tDBAnnotationOptions options = DBAnnotationOptions.createDefaults();\n\t\toptions.setReportOverlapping(true);\n\t\toptions.setReportOverlappingAsMatching(false);\n\t\toptions.setIdentifierPrefix(\"GNOMAD_\");\n\n\t\tnew GnomadVCFHeaderExtender(options).addHeaders(header);\n\n\t\t// Check header after extension\n\t\tAssert.assertEquals(0, header.getFilterLines().size());\n\t\tAssert.assertEquals(122, header.getInfoHeaderLines().size());\n\t\tAssert.assertEquals(0, header.getFormatHeaderLines().size());\n\t\tAssert.assertEquals(122, header.getIDHeaderLines().size());\n\t\tAssert.assertEquals(0, header.getOtherHeaderLines().size());\n\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AC_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AF_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AC_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AF_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AC_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AF_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AC_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AF_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AC_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AF_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AC_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AF_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_SAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AC_ALL\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AF_ALL\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_ALL\"));\n\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HET_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HOM_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HEMI_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HET_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HOM_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HEMI_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HET_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HOM_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HEMI_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HET_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HOM_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HEMI_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HET_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HOM_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HEMI_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HET_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HOM_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HEMI_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HET_SAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HOM_SAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HEMI_SAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HET_ALL\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HOM_ALL\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_HEMI_ALL\"));\n\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_POPMAX\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AC_POPMAX\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AN_POPMAX\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_AF_POPMAX\"));\n\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AC_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AF_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AC_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AF_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AC_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AF_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AC_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AF_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AC_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AF_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AC_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AF_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_SAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AC_ALL\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AF_ALL\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_ALL\"));\n\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HET_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HOM_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HEMI_AFR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HET_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HOM_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HEMI_AMR\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HET_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HOM_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HEMI_EAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HET_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HOM_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HEMI_FIN\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HET_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HOM_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HEMI_NFE\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HET_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HOM_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HEMI_OTH\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HOM_SAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HEMI_SAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HET_SAS\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HOM_ALL\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HEMI_ALL\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_HET_ALL\"));\n\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_POPMAX\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AC_POPMAX\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AN_POPMAX\"));\n\t\tAssert.assertNotNull(header.getInfoHeaderLine(\"GNOMAD_OVL_AF_POPMAX\"));\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "GnomadVCFHeaderExtenderTest.test()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "getFilterLines", "assertEquals", "size", "getInfoHeaderLines", "assertEquals", "size", "getFormatHeaderLines", "assertEquals", "size", "getIDHeaderLines", "assertEquals", "size", "getOtherHeaderLines", "createDefaults", "setReportOverlapping", "setReportOverlappingAsMatching", "setIdentifierPrefix", "addHeaders", "assertEquals", "size", "getFilterLines", "assertEquals", "size", "getInfoHeaderLines", "assertEquals", "size", "getFormatHeaderLines", "assertEquals", "size", "getIDHeaderLines", "assertEquals", "size", "getOtherHeaderLines", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine", "assertNotNull", "getInfoHeaderLine"]}, "focal_class": {"identifier": "GnomadVCFHeaderExtender", "superclass": "extends VCFHeaderExtender", "interfaces": "", "fields": [], "methods": [{"identifier": "GnomadVCFHeaderExtender", "parameters": "(DBAnnotationOptions options)", "modifiers": "public", "return": "", "signature": " GnomadVCFHeaderExtender(DBAnnotationOptions options)", "full_signature": "public  GnomadVCFHeaderExtender(DBAnnotationOptions options)", "class_method_signature": "GnomadVCFHeaderExtender.GnomadVCFHeaderExtender(DBAnnotationOptions options)", "testcase": false, "constructor": true}, {"identifier": "getDefaultPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDefaultPrefix()", "full_signature": "@Override public String getDefaultPrefix()", "class_method_signature": "GnomadVCFHeaderExtender.getDefaultPrefix()", "testcase": false, "constructor": false}, {"identifier": "addHeaders", "parameters": "(VCFHeader header, String prefix)", "modifiers": "@Override public", "return": "void", "signature": "void addHeaders(VCFHeader header, String prefix)", "full_signature": "@Override public void addHeaders(VCFHeader header, String prefix)", "class_method_signature": "GnomadVCFHeaderExtender.addHeaders(VCFHeader header, String prefix)", "testcase": false, "constructor": false}, {"identifier": "addAFHeader", "parameters": "(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "modifiers": "private", "return": "void", "signature": "void addAFHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "full_signature": "private void addAFHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "class_method_signature": "GnomadVCFHeaderExtender.addAFHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "testcase": false, "constructor": false}, {"identifier": "addANHeader", "parameters": "(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "modifiers": "private", "return": "void", "signature": "void addANHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "full_signature": "private void addANHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "class_method_signature": "GnomadVCFHeaderExtender.addANHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "testcase": false, "constructor": false}, {"identifier": "addACHeader", "parameters": "(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "modifiers": "private", "return": "void", "signature": "void addACHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "full_signature": "private void addACHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "class_method_signature": "GnomadVCFHeaderExtender.addACHeader(VCFHeader header, String prefix, String idInfix, String noteInfix, GnomadPopulation pop)", "testcase": false, "constructor": false}, {"identifier": "addACHetHeader", "parameters": "(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\tGnomadPopulation pop)", "modifiers": "private", "return": "void", "signature": "void addACHetHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\tGnomadPopulation pop)", "full_signature": "private void addACHetHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\tGnomadPopulation pop)", "class_method_signature": "GnomadVCFHeaderExtender.addACHetHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\tGnomadPopulation pop)", "testcase": false, "constructor": false}, {"identifier": "addACHomHeader", "parameters": "(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\tGnomadPopulation pop)", "modifiers": "private", "return": "void", "signature": "void addACHomHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\tGnomadPopulation pop)", "full_signature": "private void addACHomHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\tGnomadPopulation pop)", "class_method_signature": "GnomadVCFHeaderExtender.addACHomHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\tGnomadPopulation pop)", "testcase": false, "constructor": false}, {"identifier": "addACHemiHeader", "parameters": "(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\t GnomadPopulation pop)", "modifiers": "private", "return": "void", "signature": "void addACHemiHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\t GnomadPopulation pop)", "full_signature": "private void addACHemiHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\t GnomadPopulation pop)", "class_method_signature": "GnomadVCFHeaderExtender.addACHemiHeader(VCFHeader header, String prefix, String idInfix, String noteInfix,\n\t\t\t\t\t\t\t\t GnomadPopulation pop)", "testcase": false, "constructor": false}, {"identifier": "addPopmaxHeader", "parameters": "(VCFHeader header, String prefix, String idInfix, String noteInfix)", "modifiers": "private", "return": "void", "signature": "void addPopmaxHeader(VCFHeader header, String prefix, String idInfix, String noteInfix)", "full_signature": "private void addPopmaxHeader(VCFHeader header, String prefix, String idInfix, String noteInfix)", "class_method_signature": "GnomadVCFHeaderExtender.addPopmaxHeader(VCFHeader header, String prefix, String idInfix, String noteInfix)", "testcase": false, "constructor": false}], "file": "jannovar-vardbs/src/main/java/de/charite/compbio/jannovar/vardbs/gnomad/GnomadVCFHeaderExtender.java"}, "focal_method": {"identifier": "addHeaders", "parameters": "(VCFHeader header, String prefix)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void addHeaders(VCFHeader header, String prefix) {\n\t\t// Add headers for exactly matching variants\n\t\tfor (GnomadPopulation pop : GnomadPopulation.values()) {\n\t\t\taddACHeader(header, prefix, \"\", \"\", pop);\n\t\t\taddANHeader(header, prefix, \"\", \"\", pop);\n\t\t\taddAFHeader(header, prefix, \"\", \"\", pop);\n\t\t\taddACHetHeader(header, prefix, \"\", \"\", pop);\n\t\t\taddACHomHeader(header, prefix, \"\", \"\", pop);\n\t\t\taddACHemiHeader(header, prefix, \"\", \"\", pop);\n\t\t}\n\t\taddPopmaxHeader(header, prefix, \"\", \"\");\n\n\t\tif (options.isReportOverlapping() && !options.isReportOverlappingAsMatching()) {\n\t\t\t// Add headers for overlapping variants\n\t\t\tfinal String note = \" (requiring no genotype match, only position overlap)\";\n\t\t\tfor (GnomadPopulation pop : GnomadPopulation.values()) {\n\t\t\t\taddACHeader(header, prefix, \"OVL_\", note, pop);\n\t\t\t\taddANHeader(header, prefix, \"OVL_\", note, pop);\n\t\t\t\taddAFHeader(header, prefix, \"OVL_\", note, pop);\n\t\t\t\taddACHetHeader(header, prefix, \"OVL_\", note, pop);\n\t\t\t\taddACHomHeader(header, prefix, \"OVL_\", note, pop);\n\t\t\t\taddACHemiHeader(header, prefix, \"OVL_\", note, pop);\n\t\t\t}\n\t\t\taddPopmaxHeader(header, prefix, \"OVL_\", note);\n\t\t}\n\t}", "signature": "void addHeaders(VCFHeader header, String prefix)", "full_signature": "@Override public void addHeaders(VCFHeader header, String prefix)", "class_method_signature": "GnomadVCFHeaderExtender.addHeaders(VCFHeader header, String prefix)", "testcase": false, "constructor": false, "invocations": ["values", "addACHeader", "addANHeader", "addAFHeader", "addACHetHeader", "addACHomHeader", "addACHemiHeader", "addPopmaxHeader", "isReportOverlapping", "isReportOverlappingAsMatching", "values", "addACHeader", "addANHeader", "addAFHeader", "addACHetHeader", "addACHomHeader", "addACHemiHeader", "addPopmaxHeader"]}, "repository": {"repo_id": 11233417, "url": "https://github.com/charite/jannovar", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 35, "size": 23934, "license": "licensed"}}