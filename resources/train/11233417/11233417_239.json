{"test_class": {"identifier": "GenomePositionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final ReferenceDictionary refDict = HG19RefDictBuilder.build();", "modifier": "static final", "type": "ReferenceDictionary", "declarator": "refDict = HG19RefDictBuilder.build()", "var_name": "refDict"}], "file": "jannovar-core/src/test/java/de/charite/compbio/jannovar/reference/GenomePositionTest.java"}, "test_case": {"identifier": "testEq", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEq() {\n\t\tGenomePosition posL = new GenomePosition(refDict, Strand.FWD, 1, 100, PositionType.ONE_BASED);\n\t\tGenomePosition posR = new GenomePosition(refDict, Strand.FWD, 1, 101, PositionType.ONE_BASED);\n\n\t\tAssert.assertFalse(posL.isEq(posR));\n\t\tAssert.assertTrue(posL.isEq(posL));\n\t\tAssert.assertFalse(posR.isEq(posL));\n\t}", "signature": "void testEq()", "full_signature": "@Test public void testEq()", "class_method_signature": "GenomePositionTest.testEq()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isEq", "assertTrue", "isEq", "assertFalse", "isEq"]}, "focal_class": {"identifier": "GenomePosition", "superclass": "", "interfaces": "implements Serializable, Comparable<GenomePosition>", "fields": [{"original_string": "private static final long serialVersionUID = 2L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2L", "var_name": "serialVersionUID"}, {"original_string": "private final ReferenceDictionary refDict;", "modifier": "private final", "type": "ReferenceDictionary", "declarator": "refDict", "var_name": "refDict"}, {"original_string": "private final Strand strand;", "modifier": "private final", "type": "Strand", "declarator": "strand", "var_name": "strand"}, {"original_string": "private final int chr;", "modifier": "private final", "type": "int", "declarator": "chr", "var_name": "chr"}, {"original_string": "private final int pos;", "modifier": "private final", "type": "int", "declarator": "pos", "var_name": "pos"}], "methods": [{"identifier": "GenomePosition", "parameters": "(ReferenceDictionary refDict, Strand strand, int chr, int pos)", "modifiers": "public", "return": "", "signature": " GenomePosition(ReferenceDictionary refDict, Strand strand, int chr, int pos)", "full_signature": "public  GenomePosition(ReferenceDictionary refDict, Strand strand, int chr, int pos)", "class_method_signature": "GenomePosition.GenomePosition(ReferenceDictionary refDict, Strand strand, int chr, int pos)", "testcase": false, "constructor": true}, {"identifier": "GenomePosition", "parameters": "(ReferenceDictionary refDict, Strand strand, int chr, int pos, PositionType positionType)", "modifiers": "public", "return": "", "signature": " GenomePosition(ReferenceDictionary refDict, Strand strand, int chr, int pos, PositionType positionType)", "full_signature": "public  GenomePosition(ReferenceDictionary refDict, Strand strand, int chr, int pos, PositionType positionType)", "class_method_signature": "GenomePosition.GenomePosition(ReferenceDictionary refDict, Strand strand, int chr, int pos, PositionType positionType)", "testcase": false, "constructor": true}, {"identifier": "GenomePosition", "parameters": "(GenomePosition other)", "modifiers": "public", "return": "", "signature": " GenomePosition(GenomePosition other)", "full_signature": "public  GenomePosition(GenomePosition other)", "class_method_signature": "GenomePosition.GenomePosition(GenomePosition other)", "testcase": false, "constructor": true}, {"identifier": "GenomePosition", "parameters": "(GenomePosition other, Strand strand)", "modifiers": "public", "return": "", "signature": " GenomePosition(GenomePosition other, Strand strand)", "full_signature": "public  GenomePosition(GenomePosition other, Strand strand)", "class_method_signature": "GenomePosition.GenomePosition(GenomePosition other, Strand strand)", "testcase": false, "constructor": true}, {"identifier": "getRefDict", "parameters": "()", "modifiers": "public", "return": "ReferenceDictionary", "signature": "ReferenceDictionary getRefDict()", "full_signature": "public ReferenceDictionary getRefDict()", "class_method_signature": "GenomePosition.getRefDict()", "testcase": false, "constructor": false}, {"identifier": "getStrand", "parameters": "()", "modifiers": "public", "return": "Strand", "signature": "Strand getStrand()", "full_signature": "public Strand getStrand()", "class_method_signature": "GenomePosition.getStrand()", "testcase": false, "constructor": false}, {"identifier": "getChr", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getChr()", "full_signature": "public int getChr()", "class_method_signature": "GenomePosition.getChr()", "testcase": false, "constructor": false}, {"identifier": "getPos", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPos()", "full_signature": "public int getPos()", "class_method_signature": "GenomePosition.getPos()", "testcase": false, "constructor": false}, {"identifier": "withStrand", "parameters": "(Strand strand)", "modifiers": "public", "return": "GenomePosition", "signature": "GenomePosition withStrand(Strand strand)", "full_signature": "public GenomePosition withStrand(Strand strand)", "class_method_signature": "GenomePosition.withStrand(Strand strand)", "testcase": false, "constructor": false}, {"identifier": "isLt", "parameters": "(GenomePosition other)", "modifiers": "public", "return": "boolean", "signature": "boolean isLt(GenomePosition other)", "full_signature": "public boolean isLt(GenomePosition other)", "class_method_signature": "GenomePosition.isLt(GenomePosition other)", "testcase": false, "constructor": false}, {"identifier": "isLeq", "parameters": "(GenomePosition other)", "modifiers": "public", "return": "boolean", "signature": "boolean isLeq(GenomePosition other)", "full_signature": "public boolean isLeq(GenomePosition other)", "class_method_signature": "GenomePosition.isLeq(GenomePosition other)", "testcase": false, "constructor": false}, {"identifier": "isGt", "parameters": "(GenomePosition other)", "modifiers": "public", "return": "boolean", "signature": "boolean isGt(GenomePosition other)", "full_signature": "public boolean isGt(GenomePosition other)", "class_method_signature": "GenomePosition.isGt(GenomePosition other)", "testcase": false, "constructor": false}, {"identifier": "isGeq", "parameters": "(GenomePosition other)", "modifiers": "public", "return": "boolean", "signature": "boolean isGeq(GenomePosition other)", "full_signature": "public boolean isGeq(GenomePosition other)", "class_method_signature": "GenomePosition.isGeq(GenomePosition other)", "testcase": false, "constructor": false}, {"identifier": "isEq", "parameters": "(GenomePosition other)", "modifiers": "public", "return": "boolean", "signature": "boolean isEq(GenomePosition other)", "full_signature": "public boolean isEq(GenomePosition other)", "class_method_signature": "GenomePosition.isEq(GenomePosition other)", "testcase": false, "constructor": false}, {"identifier": "differenceTo", "parameters": "(GenomePosition pos)", "modifiers": "public", "return": "int", "signature": "int differenceTo(GenomePosition pos)", "full_signature": "public int differenceTo(GenomePosition pos)", "class_method_signature": "GenomePosition.differenceTo(GenomePosition pos)", "testcase": false, "constructor": false}, {"identifier": "differenceTo", "parameters": "(GenomeInterval itv)", "modifiers": "public", "return": "int", "signature": "int differenceTo(GenomeInterval itv)", "full_signature": "public int differenceTo(GenomeInterval itv)", "class_method_signature": "GenomePosition.differenceTo(GenomeInterval itv)", "testcase": false, "constructor": false}, {"identifier": "shifted", "parameters": "(int delta)", "modifiers": "public", "return": "GenomePosition", "signature": "GenomePosition shifted(int delta)", "full_signature": "public GenomePosition shifted(int delta)", "class_method_signature": "GenomePosition.shifted(int delta)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GenomePosition.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GenomePosition.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "GenomePosition.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(GenomePosition other)", "modifiers": "public", "return": "int", "signature": "int compareTo(GenomePosition other)", "full_signature": "public int compareTo(GenomePosition other)", "class_method_signature": "GenomePosition.compareTo(GenomePosition other)", "testcase": false, "constructor": false}], "file": "jannovar-core/src/main/java/de/charite/compbio/jannovar/reference/GenomePosition.java"}, "focal_method": {"identifier": "isEq", "parameters": "(GenomePosition other)", "modifiers": "public", "return": "boolean", "body": "public boolean isEq(GenomePosition other) {\n\t\tif (other.chr != chr)\n\t\t\treturn false;\n\t\tif (other.strand != strand)\n\t\t\tother = other.withStrand(strand);\n\t\treturn (pos == other.pos);\n\t}", "signature": "boolean isEq(GenomePosition other)", "full_signature": "public boolean isEq(GenomePosition other)", "class_method_signature": "GenomePosition.isEq(GenomePosition other)", "testcase": false, "constructor": false, "invocations": ["withStrand"]}, "repository": {"repo_id": 11233417, "url": "https://github.com/charite/jannovar", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 35, "size": 23934, "license": "licensed"}}