{"test_class": {"identifier": "LoginControllerTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private HttpServletRequest request = new MockHttpServletRequest();", "modifier": "private", "type": "HttpServletRequest", "declarator": "request = new MockHttpServletRequest()", "var_name": "request"}, {"original_string": "private HttpServletResponse response = new MockHttpServletResponse();", "modifier": "private", "type": "HttpServletResponse", "declarator": "response = new MockHttpServletResponse()", "var_name": "response"}, {"original_string": "private XmlWebApplicationContext context;", "modifier": "private", "type": "XmlWebApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "private MockServletContext msc;", "modifier": "private", "type": "MockServletContext", "declarator": "msc", "var_name": "msc"}, {"original_string": "private LoginController loginController;", "modifier": "private", "type": "LoginController", "declarator": "loginController", "var_name": "loginController"}], "file": "web-nutsNbolts/src/test/java/org/intalio/tempo/web/controller/LoginControllerTest.java"}, "test_case": {"identifier": "testLogout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogout() throws Exception {\n        LoginCommand loginCom = new LoginCommand();\n        loginCom.setUsername(\"test1\");\n        loginCom.setPassword(\"yes\");\n        loginController = (LoginController) context.getBean(\"loginController\");\n        loginController.logIn(request, response, loginCom, new BindException(loginCom, \"test\"));\n        ModelAndView mav = loginController.logOut(request, response, loginCom, new BindException(loginCom, \"test\"));\n        Assert.assertEquals(mav.getViewName(), Constants.LOGIN_VIEW);\n    }", "signature": "void testLogout()", "full_signature": "@Test public void testLogout()", "class_method_signature": "LoginControllerTest.testLogout()", "testcase": true, "constructor": false, "invocations": ["setUsername", "setPassword", "getBean", "logIn", "logOut", "assertEquals", "getViewName"]}, "focal_class": {"identifier": "LoginController", "superclass": "extends UIController", "interfaces": "", "fields": [{"original_string": "private static final BpmsDescriptorParser BPMS_DESCRIPTOR_PARSER = new BpmsDescriptorParser();", "modifier": "private static final", "type": "BpmsDescriptorParser", "declarator": "BPMS_DESCRIPTOR_PARSER = new BpmsDescriptorParser()", "var_name": "BPMS_DESCRIPTOR_PARSER"}, {"original_string": "public static final String AUTO_LOGIN_ID = \"autoLogin\";", "modifier": "public static final", "type": "String", "declarator": "AUTO_LOGIN_ID = \"autoLogin\"", "var_name": "AUTO_LOGIN_ID"}, {"original_string": "public static final String SINGLE_LOGIN_ID = \"singleLogin\";", "modifier": "public static final", "type": "String", "declarator": "SINGLE_LOGIN_ID = \"singleLogin\"", "var_name": "SINGLE_LOGIN_ID"}, {"original_string": "public static final String REDIRECT_AFTER_LOGIN = \"redirectAfterLogin\";", "modifier": "public static final", "type": "String", "declarator": "REDIRECT_AFTER_LOGIN = \"redirectAfterLogin\"", "var_name": "REDIRECT_AFTER_LOGIN"}, {"original_string": "public static final String SECURE_RANDOM = \"SECURE_RANDOM\";", "modifier": "public static final", "type": "String", "declarator": "SECURE_RANDOM = \"SECURE_RANDOM\"", "var_name": "SECURE_RANDOM"}, {"original_string": "public static final String JSESSION = \"JSESSIONID\";", "modifier": "public static final", "type": "String", "declarator": "JSESSION = \"JSESSIONID\"", "var_name": "JSESSION"}, {"original_string": "public static final String UI_FW = \"/ui-fw/\";", "modifier": "public static final", "type": "String", "declarator": "UI_FW = \"/ui-fw/\"", "var_name": "UI_FW"}, {"original_string": "public static final String MONITORING = \"/monitoring/\";", "modifier": "public static final", "type": "String", "declarator": "MONITORING = \"/monitoring/\"", "var_name": "MONITORING"}, {"original_string": "public static final String BPMS_CONSOLE = \"/bpms-console/\";", "modifier": "public static final", "type": "String", "declarator": "BPMS_CONSOLE = \"/bpms-console/\"", "var_name": "BPMS_CONSOLE"}, {"original_string": "private static final Logger LOG = LogManager.getLogger(LoginController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger(LoginController.class)", "var_name": "LOG"}, {"original_string": "protected final TokenService _tokenService;", "modifier": "protected final", "type": "TokenService", "declarator": "_tokenService", "var_name": "_tokenService"}, {"original_string": "private List<String> _grantedRoles = new ArrayList<String>();", "modifier": "private", "type": "List<String>", "declarator": "_grantedRoles = new ArrayList<String>()", "var_name": "_grantedRoles"}, {"original_string": "private String _defaultRedirectAfterLogin;", "modifier": "private", "type": "String", "declarator": "_defaultRedirectAfterLogin", "var_name": "_defaultRedirectAfterLogin"}, {"original_string": "private String _loginPageURL;", "modifier": "private", "type": "String", "declarator": "_loginPageURL", "var_name": "_loginPageURL"}, {"original_string": "private static SecureRandom _random;", "modifier": "private static", "type": "SecureRandom", "declarator": "_random", "var_name": "_random"}], "methods": [{"identifier": "LoginController", "parameters": "(TokenService tokenService, String redirectSuccessfulLogin)", "modifiers": "public", "return": "", "signature": " LoginController(TokenService tokenService, String redirectSuccessfulLogin)", "full_signature": "public  LoginController(TokenService tokenService, String redirectSuccessfulLogin)", "class_method_signature": "LoginController.LoginController(TokenService tokenService, String redirectSuccessfulLogin)", "testcase": false, "constructor": true}, {"identifier": "getLoginPageURL", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLoginPageURL()", "full_signature": "public String getLoginPageURL()", "class_method_signature": "LoginController.getLoginPageURL()", "testcase": false, "constructor": false}, {"identifier": "setLoginPageURL", "parameters": "(String url)", "modifiers": "public", "return": "void", "signature": "void setLoginPageURL(String url)", "full_signature": "public void setLoginPageURL(String url)", "class_method_signature": "LoginController.setLoginPageURL(String url)", "testcase": false, "constructor": false}, {"identifier": "redirect", "parameters": "(String url)", "modifiers": "public static", "return": "ModelAndView", "signature": "ModelAndView redirect(String url)", "full_signature": "public static ModelAndView redirect(String url)", "class_method_signature": "LoginController.redirect(String url)", "testcase": false, "constructor": false}, {"identifier": "redirectAfterLogin", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "public", "return": "ModelAndView", "signature": "ModelAndView redirectAfterLogin(HttpServletRequest request, HttpServletResponse response)", "full_signature": "public ModelAndView redirectAfterLogin(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "LoginController.redirectAfterLogin(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "clearAutoLogin", "parameters": "(HttpServletResponse response)", "modifiers": "public static", "return": "void", "signature": "void clearAutoLogin(HttpServletResponse response)", "full_signature": "public static void clearAutoLogin(HttpServletResponse response)", "class_method_signature": "LoginController.clearAutoLogin(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "clearSingleLogin", "parameters": "(HttpServletResponse response)", "modifiers": "public static", "return": "void", "signature": "void clearSingleLogin(HttpServletResponse response)", "full_signature": "public static void clearSingleLogin(HttpServletResponse response)", "class_method_signature": "LoginController.clearSingleLogin(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "clearSecureRandom", "parameters": "(HttpServletResponse response)", "modifiers": "public static", "return": "void", "signature": "void clearSecureRandom(HttpServletResponse response)", "full_signature": "public static void clearSecureRandom(HttpServletResponse response)", "class_method_signature": "LoginController.clearSecureRandom(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "clearRootCookie", "parameters": "(HttpServletResponse response)", "modifiers": "public static", "return": "void", "signature": "void clearRootCookie(HttpServletResponse response)", "full_signature": "public static void clearRootCookie(HttpServletResponse response)", "class_method_signature": "LoginController.clearRootCookie(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getSecureRandomCookie", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String getSecureRandomCookie(HttpServletRequest request)", "full_signature": "public static String getSecureRandomCookie(HttpServletRequest request)", "class_method_signature": "LoginController.getSecureRandomCookie(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getSecureRandomSession", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String getSecureRandomSession(HttpServletRequest request)", "full_signature": "public static String getSecureRandomSession(HttpServletRequest request)", "class_method_signature": "LoginController.getSecureRandomSession(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "setSecureRandomSession", "parameters": "(HttpServletRequest request, String secureRandom)", "modifiers": "public static", "return": "void", "signature": "void setSecureRandomSession(HttpServletRequest request, String secureRandom)", "full_signature": "public static void setSecureRandomSession(HttpServletRequest request, String secureRandom)", "class_method_signature": "LoginController.setSecureRandomSession(HttpServletRequest request, String secureRandom)", "testcase": false, "constructor": false}, {"identifier": "generateSecureRandom", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "public static", "return": "void", "signature": "void generateSecureRandom(HttpServletRequest request, HttpServletResponse response)", "full_signature": "public static void generateSecureRandom(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "LoginController.generateSecureRandom(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "generateSecureRandom", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String generateSecureRandom()", "full_signature": "public static String generateSecureRandom()", "class_method_signature": "LoginController.generateSecureRandom()", "testcase": false, "constructor": false}, {"identifier": "bytesToHex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String bytesToHex(byte[] bytes)", "full_signature": "public static String bytesToHex(byte[] bytes)", "class_method_signature": "LoginController.bytesToHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "clearCookie", "parameters": "(String cookieName, HttpServletResponse response)", "modifiers": "public static", "return": "void", "signature": "void clearCookie(String cookieName, HttpServletResponse response)", "full_signature": "public static void clearCookie(String cookieName, HttpServletResponse response)", "class_method_signature": "LoginController.clearCookie(String cookieName, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "clearOtherCookie", "parameters": "(HttpServletResponse response,String cookieName,String path)", "modifiers": "public static", "return": "void", "signature": "void clearOtherCookie(HttpServletResponse response,String cookieName,String path)", "full_signature": "public static void clearOtherCookie(HttpServletResponse response,String cookieName,String path)", "class_method_signature": "LoginController.clearOtherCookie(HttpServletResponse response,String cookieName,String path)", "testcase": false, "constructor": false}, {"identifier": "extractProperty", "parameters": "(String propName, Property[] props)", "modifiers": "private static", "return": "String", "signature": "String extractProperty(String propName, Property[] props)", "full_signature": "private static String extractProperty(String propName, Property[] props)", "class_method_signature": "LoginController.extractProperty(String propName, Property[] props)", "testcase": false, "constructor": false}, {"identifier": "extractUser", "parameters": "(Property[] props)", "modifiers": "public static", "return": "String", "signature": "String extractUser(Property[] props)", "full_signature": "public static String extractUser(Property[] props)", "class_method_signature": "LoginController.extractUser(Property[] props)", "testcase": false, "constructor": false}, {"identifier": "extractRoles", "parameters": "(Property[] props)", "modifiers": "public static", "return": "String[]", "signature": "String[] extractRoles(Property[] props)", "full_signature": "public static String[] extractRoles(Property[] props)", "class_method_signature": "LoginController.extractRoles(Property[] props)", "testcase": false, "constructor": false}, {"identifier": "getCurrentUser", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "User", "signature": "User getCurrentUser(HttpServletRequest request)", "full_signature": "public User getCurrentUser(HttpServletRequest request)", "class_method_signature": "LoginController.getCurrentUser(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "checkAutoLogin", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "User", "signature": "User checkAutoLogin(HttpServletRequest request)", "full_signature": "protected User checkAutoLogin(HttpServletRequest request)", "class_method_signature": "LoginController.checkAutoLogin(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "checkSingleLogin", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "User", "signature": "User checkSingleLogin(HttpServletRequest request)", "full_signature": "protected User checkSingleLogin(HttpServletRequest request)", "class_method_signature": "LoginController.checkSingleLogin(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getCookie", "parameters": "(HttpServletRequest request, String cookieName)", "modifiers": "protected static", "return": "Cookie", "signature": "Cookie getCookie(HttpServletRequest request, String cookieName)", "full_signature": "protected static Cookie getCookie(HttpServletRequest request, String cookieName)", "class_method_signature": "LoginController.getCookie(HttpServletRequest request, String cookieName)", "testcase": false, "constructor": false}, {"identifier": "checkToken", "parameters": "(HttpServletRequest request, String cookieName)", "modifiers": "protected", "return": "User", "signature": "User checkToken(HttpServletRequest request, String cookieName)", "full_signature": "protected User checkToken(HttpServletRequest request, String cookieName)", "class_method_signature": "LoginController.checkToken(HttpServletRequest request, String cookieName)", "testcase": false, "constructor": false}, {"identifier": "setRedirectAfterLoginCookie", "parameters": "(HttpServletResponse response)", "modifiers": "public", "return": "void", "signature": "void setRedirectAfterLoginCookie(HttpServletResponse response)", "full_signature": "public void setRedirectAfterLoginCookie(HttpServletResponse response)", "class_method_signature": "LoginController.setRedirectAfterLoginCookie(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "setRedirectAfterLoginCookie", "parameters": "(HttpServletResponse response, String url)", "modifiers": "public static", "return": "void", "signature": "void setRedirectAfterLoginCookie(HttpServletResponse response, String url)", "full_signature": "public static void setRedirectAfterLoginCookie(HttpServletResponse response, String url)", "class_method_signature": "LoginController.setRedirectAfterLoginCookie(HttpServletResponse response, String url)", "testcase": false, "constructor": false}, {"identifier": "setAutoLoginCookie", "parameters": "(HttpServletResponse response, String token)", "modifiers": "public static", "return": "void", "signature": "void setAutoLoginCookie(HttpServletResponse response, String token)", "full_signature": "public static void setAutoLoginCookie(HttpServletResponse response, String token)", "class_method_signature": "LoginController.setAutoLoginCookie(HttpServletResponse response, String token)", "testcase": false, "constructor": false}, {"identifier": "setSingleLoginCookie", "parameters": "(HttpServletResponse response, String token)", "modifiers": "public static", "return": "void", "signature": "void setSingleLoginCookie(HttpServletResponse response, String token)", "full_signature": "public static void setSingleLoginCookie(HttpServletResponse response, String token)", "class_method_signature": "LoginController.setSingleLoginCookie(HttpServletResponse response, String token)", "testcase": false, "constructor": false}, {"identifier": "getGrantedRoles", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getGrantedRoles()", "full_signature": "public List<String> getGrantedRoles()", "class_method_signature": "LoginController.getGrantedRoles()", "testcase": false, "constructor": false}, {"identifier": "setGrantedRoles", "parameters": "(List<String> roles)", "modifiers": "public", "return": "void", "signature": "void setGrantedRoles(List<String> roles)", "full_signature": "public void setGrantedRoles(List<String> roles)", "class_method_signature": "LoginController.setGrantedRoles(List<String> roles)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String username, String password, String[] grantedRoles)", "modifiers": "protected", "return": "User", "signature": "User authenticate(String username, String password, String[] grantedRoles)", "full_signature": "protected User authenticate(String username, String password, String[] grantedRoles)", "class_method_signature": "LoginController.authenticate(String username, String password, String[] grantedRoles)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String token, String[] grantedRoles)", "modifiers": "protected", "return": "User", "signature": "User authenticate(String token, String[] grantedRoles)", "full_signature": "protected User authenticate(String token, String[] grantedRoles)", "class_method_signature": "LoginController.authenticate(String token, String[] grantedRoles)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String username, String password, Errors errors)", "modifiers": "protected", "return": "User", "signature": "User authenticate(String username, String password, Errors errors)", "full_signature": "protected User authenticate(String username, String password, Errors errors)", "class_method_signature": "LoginController.authenticate(String username, String password, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "arrayToString", "parameters": "(String[] stringArray, String delimiter)", "modifiers": "public", "return": "String", "signature": "String arrayToString(String[] stringArray, String delimiter)", "full_signature": "public String arrayToString(String[] stringArray, String delimiter)", "class_method_signature": "LoginController.arrayToString(String[] stringArray, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "executePost", "parameters": "(PostMethod post)", "modifiers": "public", "return": "void", "signature": "void executePost(PostMethod post)", "full_signature": "public void executePost(PostMethod post)", "class_method_signature": "LoginController.executePost(PostMethod post)", "testcase": false, "constructor": false}, {"identifier": "logIn", "parameters": "(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "ModelAndView", "signature": "ModelAndView logIn(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "full_signature": "@SuppressWarnings(\"unchecked\") public ModelAndView logIn(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "class_method_signature": "LoginController.logIn(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "testcase": false, "constructor": false}, {"identifier": "logOut", "parameters": "(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "modifiers": "public", "return": "ModelAndView", "signature": "ModelAndView logOut(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "full_signature": "public ModelAndView logOut(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "class_method_signature": "LoginController.logOut(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "testcase": false, "constructor": false}, {"identifier": "showForm", "parameters": "(HttpServletRequest request, HttpServletResponse response, BindException errors)", "modifiers": "@Override protected", "return": "ModelAndView", "signature": "ModelAndView showForm(HttpServletRequest request, HttpServletResponse response, BindException errors)", "full_signature": "@Override protected ModelAndView showForm(HttpServletRequest request, HttpServletResponse response, BindException errors)", "class_method_signature": "LoginController.showForm(HttpServletRequest request, HttpServletResponse response, BindException errors)", "testcase": false, "constructor": false}], "file": "web-nutsNbolts/src/main/java/org/intalio/tempo/web/controller/LoginController.java"}, "focal_method": {"identifier": "logOut", "parameters": "(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "modifiers": "public", "return": "ModelAndView", "body": "public ModelAndView logOut(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors) throws Exception {\n        ApplicationState state = getApplicationState(request);\n        if (state != null) {\n            if (state.getCurrentUser() != null){\n                String userName = state.getCurrentUser().getName();\n                LOG.debug(\"Logout: user=\" + userName);\n            }\n            state.setCurrentUser(null);\n            state.setPreviousAction(null);\n            clearAutoLogin(response);\n            clearSingleLogin(response);\n            clearSecureRandom(response);\n            clearRootCookie(response);\n            clearOtherCookie(response,JSESSION,UI_FW);\n            clearOtherCookie(response,JSESSION,MONITORING);\n            clearOtherCookie(response,JSESSION,BPMS_CONSOLE);\n        }\n        Map model = new HashMap();\n        model.put(\"login\", new LoginCommand());\n        BPMS_DESCRIPTOR_PARSER.addBpmsBuildVersionsPropertiesToMap(model);\n\n        return new ModelAndView(Constants.LOGIN_VIEW, model);\n    }", "signature": "ModelAndView logOut(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "full_signature": "public ModelAndView logOut(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "class_method_signature": "LoginController.logOut(HttpServletRequest request, HttpServletResponse response, LoginCommand login,\n            BindException errors)", "testcase": false, "constructor": false, "invocations": ["getApplicationState", "getCurrentUser", "getName", "getCurrentUser", "debug", "setCurrentUser", "setPreviousAction", "clearAutoLogin", "clearSingleLogin", "clearSecureRandom", "clearRootCookie", "clearOtherCookie", "clearOtherCookie", "clearOtherCookie", "put", "addBpmsBuildVersionsPropertiesToMap"]}, "repository": {"repo_id": 135867, "url": "https://github.com/Everteam-Software/security", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 17, "size": 2342, "license": "licensed"}}