{"test_class": {"identifier": "SimulatorOracleTest", "superclass": "", "interfaces": "", "fields": [], "file": "oracles/membership-oracles/src/test/java/de/learnlib/oracle/membership/SimulatorOracleTest.java"}, "test_case": {"identifier": "testDFASimulatorOracle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDFASimulatorOracle() {\n\n        DFA<?, Symbol> dfa = ExamplePaulAndMary.constructMachine();\n\n        SimulatorOracle<Symbol, Boolean> oracle = new SimulatorOracle<>(dfa);\n\n        List<DefaultQuery<Symbol, Boolean>> queries = new ArrayList<>();\n\n        DefaultQuery<Symbol, Boolean> q1 = new DefaultQuery<>(Word.fromSymbols(ExamplePaulAndMary.IN_PAUL,\n                                                                               ExamplePaulAndMary.IN_LOVES,\n                                                                               ExamplePaulAndMary.IN_MARY));\n        DefaultQuery<Symbol, Boolean> q2 = new DefaultQuery<>(Word.fromSymbols(ExamplePaulAndMary.IN_MARY,\n                                                                               ExamplePaulAndMary.IN_LOVES,\n                                                                               ExamplePaulAndMary.IN_PAUL));\n        queries.add(q1);\n        queries.add(q2);\n\n        Assert.assertEquals(queries.get(0).getInput().size(), 3);\n        Assert.assertEquals(queries.get(1).getInput().size(), 3);\n\n        oracle.processQueries(queries);\n\n        // Paul loves Mary...\n        Assert.assertEquals(queries.get(0).getOutput(), Boolean.TRUE);\n\n        // ... but Mary does not love Paul :-(\n        Assert.assertEquals(queries.get(1).getOutput(), Boolean.FALSE);\n\n    }", "signature": "void testDFASimulatorOracle()", "full_signature": "@Test public void testDFASimulatorOracle()", "class_method_signature": "SimulatorOracleTest.testDFASimulatorOracle()", "testcase": true, "constructor": false, "invocations": ["constructMachine", "fromSymbols", "fromSymbols", "add", "add", "assertEquals", "size", "getInput", "get", "assertEquals", "size", "getInput", "get", "processQueries", "assertEquals", "getOutput", "get", "assertEquals", "getOutput", "get"]}, "focal_class": {"identifier": "SimulatorOracle", "superclass": "", "interfaces": "implements SingleQueryOracle<I, D>", "fields": [{"original_string": "private final SuffixOutput<I, D> automaton;", "modifier": "private final", "type": "SuffixOutput<I, D>", "declarator": "automaton", "var_name": "automaton"}], "methods": [{"identifier": "SimulatorOracle", "parameters": "(SuffixOutput<I, D> automaton)", "modifiers": "public", "return": "", "signature": " SimulatorOracle(SuffixOutput<I, D> automaton)", "full_signature": "public  SimulatorOracle(SuffixOutput<I, D> automaton)", "class_method_signature": "SimulatorOracle.SimulatorOracle(SuffixOutput<I, D> automaton)", "testcase": false, "constructor": true}, {"identifier": "answerQuery", "parameters": "(Word<I> prefix, Word<I> suffix)", "modifiers": "@Override public", "return": "D", "signature": "D answerQuery(Word<I> prefix, Word<I> suffix)", "full_signature": "@Override public D answerQuery(Word<I> prefix, Word<I> suffix)", "class_method_signature": "SimulatorOracle.answerQuery(Word<I> prefix, Word<I> suffix)", "testcase": false, "constructor": false}, {"identifier": "processQueries", "parameters": "(Collection<? extends Query<I, D>> queries)", "modifiers": "@Override public", "return": "void", "signature": "void processQueries(Collection<? extends Query<I, D>> queries)", "full_signature": "@Override public void processQueries(Collection<? extends Query<I, D>> queries)", "class_method_signature": "SimulatorOracle.processQueries(Collection<? extends Query<I, D>> queries)", "testcase": false, "constructor": false}], "file": "oracles/membership-oracles/src/main/java/de/learnlib/oracle/membership/SimulatorOracle.java"}, "focal_method": {"identifier": "processQueries", "parameters": "(Collection<? extends Query<I, D>> queries)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processQueries(Collection<? extends Query<I, D>> queries) {\n        MQUtil.answerQueries(this, queries);\n    }", "signature": "void processQueries(Collection<? extends Query<I, D>> queries)", "full_signature": "@Override public void processQueries(Collection<? extends Query<I, D>> queries)", "class_method_signature": "SimulatorOracle.processQueries(Collection<? extends Query<I, D>> queries)", "testcase": false, "constructor": false, "invocations": ["answerQueries"]}, "repository": {"repo_id": 10172073, "url": "https://github.com/LearnLib/learnlib", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 113, "size": 24271, "license": "licensed"}}