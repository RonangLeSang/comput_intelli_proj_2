{"test_class": {"identifier": "RandomWalkEQOracleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "MAX_LENGTH", "var_name": "MAX_LENGTH"}, {"original_string": "private static final Alphabet<Character> ALPHABET;", "modifier": "private static final", "type": "Alphabet<Character>", "declarator": "ALPHABET", "var_name": "ALPHABET"}], "file": "oracles/equivalence-oracles/src/test/java/de/learnlib/oracle/equivalence/mealy/RandomWalkEQOracleTest.java"}, "test_case": {"identifier": "testOracle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOracle() {\n\n        final DummySUL dummySUL = new DummySUL();\n\n        final MealyEquivalenceOracle<Character, Character> mOracle =\n                new RandomWalkEQOracle<>(dummySUL, 0.01, MAX_LENGTH, new Random(42));\n\n        final DefaultQuery<Character, Word<Character>> ce =\n                mOracle.findCounterExample(new DummyMealy(ALPHABET), ALPHABET);\n\n        Assert.assertNull(ce);\n        Assert.assertTrue(dummySUL.isCalledPost());\n    }", "signature": "void testOracle()", "full_signature": "@Test public void testOracle()", "class_method_signature": "RandomWalkEQOracleTest.testOracle()", "testcase": true, "constructor": false, "invocations": ["findCounterExample", "assertNull", "assertTrue", "isCalledPost"]}, "focal_class": {"identifier": "RandomWalkEQOracle", "superclass": "", "interfaces": "implements MealyEquivalenceOracle<I, O>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RandomWalkEQOracle.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RandomWalkEQOracle.class)", "var_name": "LOGGER"}, {"original_string": "private final double restartProbability;", "modifier": "private final", "type": "double", "declarator": "restartProbability", "var_name": "restartProbability"}, {"original_string": "private final long maxSteps;", "modifier": "private final", "type": "long", "declarator": "maxSteps", "var_name": "maxSteps"}, {"original_string": "private final Random random;", "modifier": "private final", "type": "Random", "declarator": "random", "var_name": "random"}, {"original_string": "private final SUL<I, O> sul;", "modifier": "private final", "type": "SUL<I, O>", "declarator": "sul", "var_name": "sul"}, {"original_string": "private long steps;", "modifier": "private", "type": "long", "declarator": "steps", "var_name": "steps"}, {"original_string": "private boolean resetStepCount;", "modifier": "private", "type": "boolean", "declarator": "resetStepCount", "var_name": "resetStepCount"}], "methods": [{"identifier": "RandomWalkEQOracle", "parameters": "(SUL<I, O> sul,\n                              double restartProbability,\n                              long maxSteps,\n                              boolean resetStepCount,\n                              Random random)", "modifiers": "public", "return": "", "signature": " RandomWalkEQOracle(SUL<I, O> sul,\n                              double restartProbability,\n                              long maxSteps,\n                              boolean resetStepCount,\n                              Random random)", "full_signature": "public  RandomWalkEQOracle(SUL<I, O> sul,\n                              double restartProbability,\n                              long maxSteps,\n                              boolean resetStepCount,\n                              Random random)", "class_method_signature": "RandomWalkEQOracle.RandomWalkEQOracle(SUL<I, O> sul,\n                              double restartProbability,\n                              long maxSteps,\n                              boolean resetStepCount,\n                              Random random)", "testcase": false, "constructor": true}, {"identifier": "RandomWalkEQOracle", "parameters": "(SUL<I, O> sul, double restartProbability, long maxSteps, Random random)", "modifiers": "public", "return": "", "signature": " RandomWalkEQOracle(SUL<I, O> sul, double restartProbability, long maxSteps, Random random)", "full_signature": "public  RandomWalkEQOracle(SUL<I, O> sul, double restartProbability, long maxSteps, Random random)", "class_method_signature": "RandomWalkEQOracle.RandomWalkEQOracle(SUL<I, O> sul, double restartProbability, long maxSteps, Random random)", "testcase": false, "constructor": true}, {"identifier": "findCounterExample", "parameters": "(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs)", "modifiers": "@Override public @Nullable", "return": "DefaultQuery<I, Word<O>>", "signature": "DefaultQuery<I, Word<O>> findCounterExample(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs)", "full_signature": "@Override public @Nullable DefaultQuery<I, Word<O>> findCounterExample(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs)", "class_method_signature": "RandomWalkEQOracle.findCounterExample(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs)", "testcase": false, "constructor": false}, {"identifier": "doFindCounterExample", "parameters": "(MealyMachine<S, I, T, O> hypothesis,\n                                                                           Collection<? extends I> inputs)", "modifiers": "private", "return": "DefaultQuery<I, Word<O>>", "signature": "DefaultQuery<I, Word<O>> doFindCounterExample(MealyMachine<S, I, T, O> hypothesis,\n                                                                           Collection<? extends I> inputs)", "full_signature": "private DefaultQuery<I, Word<O>> doFindCounterExample(MealyMachine<S, I, T, O> hypothesis,\n                                                                           Collection<? extends I> inputs)", "class_method_signature": "RandomWalkEQOracle.doFindCounterExample(MealyMachine<S, I, T, O> hypothesis,\n                                                                           Collection<? extends I> inputs)", "testcase": false, "constructor": false}], "file": "oracles/equivalence-oracles/src/main/java/de/learnlib/oracle/equivalence/mealy/RandomWalkEQOracle.java"}, "focal_method": {"identifier": "findCounterExample", "parameters": "(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs)", "modifiers": "@Override public @Nullable", "return": "DefaultQuery<I, Word<O>>", "body": "@Override\n    public @Nullable DefaultQuery<I, Word<O>> findCounterExample(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs) {\n        return doFindCounterExample(hypothesis, inputs);\n    }", "signature": "DefaultQuery<I, Word<O>> findCounterExample(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs)", "full_signature": "@Override public @Nullable DefaultQuery<I, Word<O>> findCounterExample(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs)", "class_method_signature": "RandomWalkEQOracle.findCounterExample(MealyMachine<?, I, ?, O> hypothesis,\n                                                                 Collection<? extends I> inputs)", "testcase": false, "constructor": false, "invocations": ["doFindCounterExample"]}, "repository": {"repo_id": 10172073, "url": "https://github.com/LearnLib/learnlib", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 113, "size": 24271, "license": "licensed"}}