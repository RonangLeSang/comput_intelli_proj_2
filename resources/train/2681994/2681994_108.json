{"test_class": {"identifier": "TestMITREidDataService_1_0", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate OAuth2ClientRepository clientRepository;", "modifier": "@Mock\n\tprivate", "type": "OAuth2ClientRepository", "declarator": "clientRepository", "var_name": "clientRepository"}, {"original_string": "@Mock\n\tprivate ApprovedSiteRepository approvedSiteRepository;", "modifier": "@Mock\n\tprivate", "type": "ApprovedSiteRepository", "declarator": "approvedSiteRepository", "var_name": "approvedSiteRepository"}, {"original_string": "@Mock\n\tprivate WhitelistedSiteRepository wlSiteRepository;", "modifier": "@Mock\n\tprivate", "type": "WhitelistedSiteRepository", "declarator": "wlSiteRepository", "var_name": "wlSiteRepository"}, {"original_string": "@Mock\n\tprivate BlacklistedSiteRepository blSiteRepository;", "modifier": "@Mock\n\tprivate", "type": "BlacklistedSiteRepository", "declarator": "blSiteRepository", "var_name": "blSiteRepository"}, {"original_string": "@Mock\n\tprivate AuthenticationHolderRepository authHolderRepository;", "modifier": "@Mock\n\tprivate", "type": "AuthenticationHolderRepository", "declarator": "authHolderRepository", "var_name": "authHolderRepository"}, {"original_string": "@Mock\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Mock\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Mock\n\tprivate SystemScopeRepository sysScopeRepository;", "modifier": "@Mock\n\tprivate", "type": "SystemScopeRepository", "declarator": "sysScopeRepository", "var_name": "sysScopeRepository"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<OAuth2RefreshTokenEntity> capturedRefreshTokens;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<OAuth2RefreshTokenEntity>", "declarator": "capturedRefreshTokens", "var_name": "capturedRefreshTokens"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<OAuth2AccessTokenEntity> capturedAccessTokens;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<OAuth2AccessTokenEntity>", "declarator": "capturedAccessTokens", "var_name": "capturedAccessTokens"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<ClientDetailsEntity> capturedClients;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<ClientDetailsEntity>", "declarator": "capturedClients", "var_name": "capturedClients"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<BlacklistedSite> capturedBlacklistedSites;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<BlacklistedSite>", "declarator": "capturedBlacklistedSites", "var_name": "capturedBlacklistedSites"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<WhitelistedSite> capturedWhitelistedSites;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<WhitelistedSite>", "declarator": "capturedWhitelistedSites", "var_name": "capturedWhitelistedSites"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<ApprovedSite> capturedApprovedSites;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<ApprovedSite>", "declarator": "capturedApprovedSites", "var_name": "capturedApprovedSites"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<AuthenticationHolderEntity> capturedAuthHolders;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<AuthenticationHolderEntity>", "declarator": "capturedAuthHolders", "var_name": "capturedAuthHolders"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<SystemScope> capturedScope;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<SystemScope>", "declarator": "capturedScope", "var_name": "capturedScope"}, {"original_string": "@InjectMocks\n\tprivate MITREidDataService_1_0 dataService;", "modifier": "@InjectMocks\n\tprivate", "type": "MITREidDataService_1_0", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "private DateFormatter formatter;", "modifier": "private", "type": "DateFormatter", "declarator": "formatter", "var_name": "formatter"}], "file": "openid-connect-server/src/test/java/org/mitre/openid/connect/service/impl/TestMITREidDataService_1_0.java"}, "test_case": {"identifier": "testFixRefreshTokenAuthHolderReferencesOnImport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFixRefreshTokenAuthHolderReferencesOnImport() throws IOException, ParseException {\n\t\tString expiration1 = \"2014-09-10T22:49:44.090+0000\";\n\t\tDate expirationDate1 = formatter.parse(expiration1, Locale.ENGLISH);\n\n\t\tClientDetailsEntity mockedClient1 = mock(ClientDetailsEntity.class);\n\t\twhen(mockedClient1.getClientId()).thenReturn(\"mocked_client_1\");\n\n\t\tOAuth2Request req1 = new OAuth2Request(new HashMap<String, String>(), \"client1\", new ArrayList<GrantedAuthority>(),\n\t\t\t\ttrue, new HashSet<String>(), new HashSet<String>(), \"http://foo.com\",\n\t\t\t\tnew HashSet<String>(), null);\n\t\tAuthentication mockAuth1 = mock(Authentication.class, withSettings().serializable());\n\t\tOAuth2Authentication auth1 = new OAuth2Authentication(req1, mockAuth1);\n\n\t\tAuthenticationHolderEntity holder1 = new AuthenticationHolderEntity();\n\t\tholder1.setId(1L);\n\t\tholder1.setAuthentication(auth1);\n\n\t\tOAuth2RefreshTokenEntity token1 = new OAuth2RefreshTokenEntity();\n\t\ttoken1.setId(1L);\n\t\ttoken1.setClient(mockedClient1);\n\t\ttoken1.setExpiration(expirationDate1);\n\t\ttoken1.setJwt(JWTParser.parse(\"eyJhbGciOiJub25lIn0.eyJqdGkiOiJmOTg4OWQyOS0xMTk1LTQ4ODEtODgwZC1lZjVlYzAwY2Y4NDIifQ.\"));\n\t\ttoken1.setAuthenticationHolder(holder1);\n\n\t\tString expiration2 = \"2015-01-07T18:31:50.079+0000\";\n\t\tDate expirationDate2 = formatter.parse(expiration2, Locale.ENGLISH);\n\n\t\tClientDetailsEntity mockedClient2 = mock(ClientDetailsEntity.class);\n\t\twhen(mockedClient2.getClientId()).thenReturn(\"mocked_client_2\");\n\n\t\tOAuth2Request req2 = new OAuth2Request(new HashMap<String, String>(), \"client2\", new ArrayList<GrantedAuthority>(),\n\t\t\t\ttrue, new HashSet<String>(), new HashSet<String>(), \"http://bar.com\",\n\t\t\t\tnew HashSet<String>(), null);\n\t\tAuthentication mockAuth2 = mock(Authentication.class, withSettings().serializable());\n\t\tOAuth2Authentication auth2 = new OAuth2Authentication(req2, mockAuth2);\n\n\t\tAuthenticationHolderEntity holder2 = new AuthenticationHolderEntity();\n\t\tholder2.setId(2L);\n\t\tholder2.setAuthentication(auth2);\n\n\t\tOAuth2RefreshTokenEntity token2 = new OAuth2RefreshTokenEntity();\n\t\ttoken2.setId(2L);\n\t\ttoken2.setClient(mockedClient2);\n\t\ttoken2.setExpiration(expirationDate2);\n\t\ttoken2.setJwt(JWTParser.parse(\"eyJhbGciOiJub25lIn0.eyJqdGkiOiJlYmEyYjc3My0xNjAzLTRmNDAtOWQ3MS1hMGIxZDg1OWE2MDAifQ.\"));\n\t\ttoken2.setAuthenticationHolder(holder2);\n\n\t\tString configJson = \"{\" +\n\t\t\t\t\"\\\"\" + MITREidDataService.SYSTEMSCOPES + \"\\\": [], \" +\n\t\t\t\t\"\\\"\" + MITREidDataService.ACCESSTOKENS + \"\\\": [], \" +\n\t\t\t\t\"\\\"\" + MITREidDataService.CLIENTS + \"\\\": [], \" +\n\t\t\t\t\"\\\"\" + MITREidDataService.GRANTS + \"\\\": [], \" +\n\t\t\t\t\"\\\"\" + MITREidDataService.WHITELISTEDSITES + \"\\\": [], \" +\n\t\t\t\t\"\\\"\" + MITREidDataService.BLACKLISTEDSITES + \"\\\": [], \" +\n\t\t\t\t\"\\\"\" + MITREidDataService.AUTHENTICATIONHOLDERS + \"\\\": [\" +\n\n\t\t\t\t\"{\\\"id\\\":1,\\\"authentication\\\":{\\\"clientAuthorization\\\":{\\\"clientId\\\":\\\"client1\\\",\\\"redirectUri\\\":\\\"http://foo.com\\\"},\"\n\t\t\t\t+ \"\\\"userAuthentication\\\":null}},\" +\n\t\t\t\t\"{\\\"id\\\":2,\\\"authentication\\\":{\\\"clientAuthorization\\\":{\\\"clientId\\\":\\\"client2\\\",\\\"redirectUri\\\":\\\"http://bar.com\\\"},\"\n\t\t\t\t+ \"\\\"userAuthentication\\\":null}}\" +\n\t\t\t\t\"  ],\" +\n\t\t\t\t\"\\\"\" + MITREidDataService.REFRESHTOKENS + \"\\\": [\" +\n\n\t\t\t\t\"{\\\"id\\\":1,\\\"clientId\\\":\\\"mocked_client_1\\\",\\\"expiration\\\":\\\"2014-09-10T22:49:44.090+0000\\\",\"\n\t\t\t\t+ \"\\\"authenticationHolderId\\\":1,\\\"value\\\":\\\"eyJhbGciOiJub25lIn0.eyJqdGkiOiJmOTg4OWQyOS0xMTk1LTQ4ODEtODgwZC1lZjVlYzAwY2Y4NDIifQ.\\\"},\" +\n\t\t\t\t\"{\\\"id\\\":2,\\\"clientId\\\":\\\"mocked_client_2\\\",\\\"expiration\\\":\\\"2015-01-07T18:31:50.079+0000\\\",\"\n\t\t\t\t+ \"\\\"authenticationHolderId\\\":2,\\\"value\\\":\\\"eyJhbGciOiJub25lIn0.eyJqdGkiOiJlYmEyYjc3My0xNjAzLTRmNDAtOWQ3MS1hMGIxZDg1OWE2MDAifQ.\\\"}\" +\n\n\t\t\t\t\"  ]\" +\n\t\t\t\t\"}\";\n\t\tSystem.err.println(configJson);\n\n\t\tJsonReader reader = new JsonReader(new StringReader(configJson));\n\t\tfinal Map<Long, OAuth2RefreshTokenEntity> fakeRefreshTokenTable = new HashMap<>();\n\t\tfinal Map<Long, AuthenticationHolderEntity> fakeAuthHolderTable = new HashMap<>();\n\t\twhen(tokenRepository.saveRefreshToken(isA(OAuth2RefreshTokenEntity.class))).thenAnswer(new Answer<OAuth2RefreshTokenEntity>() {\n\t\t\tLong id = 343L;\n\t\t\t@Override\n\t\t\tpublic OAuth2RefreshTokenEntity answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tOAuth2RefreshTokenEntity _token = (OAuth2RefreshTokenEntity) invocation.getArguments()[0];\n\t\t\t\tif(_token.getId() == null) {\n\t\t\t\t\t_token.setId(id++);\n\t\t\t\t}\n\t\t\t\tfakeRefreshTokenTable.put(_token.getId(), _token);\n\t\t\t\treturn _token;\n\t\t\t}\n\t\t});\n\t\twhen(tokenRepository.getRefreshTokenById(anyLong())).thenAnswer(new Answer<OAuth2RefreshTokenEntity>() {\n\t\t\t@Override\n\t\t\tpublic OAuth2RefreshTokenEntity answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tLong _id = (Long) invocation.getArguments()[0];\n\t\t\t\treturn fakeRefreshTokenTable.get(_id);\n\t\t\t}\n\t\t});\n\t\twhen(clientRepository.getClientByClientId(anyString())).thenAnswer(new Answer<ClientDetailsEntity>() {\n\t\t\t@Override\n\t\t\tpublic ClientDetailsEntity answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tString _clientId = (String) invocation.getArguments()[0];\n\t\t\t\tClientDetailsEntity _client = mock(ClientDetailsEntity.class);\n\t\t\t\twhen(_client.getClientId()).thenReturn(_clientId);\n\t\t\t\treturn _client;\n\t\t\t}\n\t\t});\n\t\twhen(authHolderRepository.save(isA(AuthenticationHolderEntity.class))).thenAnswer(new Answer<AuthenticationHolderEntity>() {\n\t\t\tLong id = 356L;\n\t\t\t@Override\n\t\t\tpublic AuthenticationHolderEntity answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tAuthenticationHolderEntity _holder = (AuthenticationHolderEntity) invocation.getArguments()[0];\n\t\t\t\tif(_holder.getId() == null) {\n\t\t\t\t\t_holder.setId(id++);\n\t\t\t\t}\n\t\t\t\tfakeAuthHolderTable.put(_holder.getId(), _holder);\n\t\t\t\treturn _holder;\n\t\t\t}\n\t\t});\n\t\twhen(authHolderRepository.getById(anyLong())).thenAnswer(new Answer<AuthenticationHolderEntity>() {\n\t\t\t@Override\n\t\t\tpublic AuthenticationHolderEntity answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tLong _id = (Long) invocation.getArguments()[0];\n\t\t\t\treturn fakeAuthHolderTable.get(_id);\n\t\t\t}\n\t\t});\n\t\tdataService.importData(reader);\n\n\t\tList<OAuth2RefreshTokenEntity> savedRefreshTokens = new ArrayList(fakeRefreshTokenTable.values()); //capturedRefreshTokens.getAllValues();\n\t\tCollections.sort(savedRefreshTokens, new refreshTokenIdComparator());\n\n\t\tassertThat(savedRefreshTokens.get(0).getAuthenticationHolder().getId(), equalTo(356L));\n\t\tassertThat(savedRefreshTokens.get(1).getAuthenticationHolder().getId(), equalTo(357L));\n\t}", "signature": "void testFixRefreshTokenAuthHolderReferencesOnImport()", "full_signature": "@Test public void testFixRefreshTokenAuthHolderReferencesOnImport()", "class_method_signature": "TestMITREidDataService_1_0.testFixRefreshTokenAuthHolderReferencesOnImport()", "testcase": true, "constructor": false, "invocations": ["parse", "mock", "thenReturn", "when", "getClientId", "mock", "serializable", "withSettings", "setId", "setAuthentication", "setId", "setClient", "setExpiration", "setJwt", "parse", "setAuthenticationHolder", "parse", "mock", "thenReturn", "when", "getClientId", "mock", "serializable", "withSettings", "setId", "setAuthentication", "setId", "setClient", "setExpiration", "setJwt", "parse", "setAuthenticationHolder", "println", "thenAnswer", "when", "saveRefreshToken", "isA", "getArguments", "getId", "setId", "put", "getId", "thenAnswer", "when", "getRefreshTokenById", "anyLong", "getArguments", "get", "thenAnswer", "when", "getClientByClientId", "anyString", "getArguments", "mock", "thenReturn", "when", "getClientId", "thenAnswer", "when", "save", "isA", "getArguments", "getId", "setId", "put", "getId", "thenAnswer", "when", "getById", "anyLong", "getArguments", "get", "importData", "values", "sort", "assertThat", "getId", "getAuthenticationHolder", "get", "equalTo", "assertThat", "getId", "getAuthenticationHolder", "get", "equalTo"]}, "focal_class": {"identifier": "MITREidDataService_1_0", "superclass": "extends MITREidDataServiceSupport", "interfaces": "implements MITREidDataService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MITREidDataService_1_0.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MITREidDataService_1_0.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate OAuth2ClientRepository clientRepository;", "modifier": "@Autowired\n\tprivate", "type": "OAuth2ClientRepository", "declarator": "clientRepository", "var_name": "clientRepository"}, {"original_string": "@Autowired\n\tprivate ApprovedSiteRepository approvedSiteRepository;", "modifier": "@Autowired\n\tprivate", "type": "ApprovedSiteRepository", "declarator": "approvedSiteRepository", "var_name": "approvedSiteRepository"}, {"original_string": "@Autowired\n\tprivate WhitelistedSiteRepository wlSiteRepository;", "modifier": "@Autowired\n\tprivate", "type": "WhitelistedSiteRepository", "declarator": "wlSiteRepository", "var_name": "wlSiteRepository"}, {"original_string": "@Autowired\n\tprivate BlacklistedSiteRepository blSiteRepository;", "modifier": "@Autowired\n\tprivate", "type": "BlacklistedSiteRepository", "declarator": "blSiteRepository", "var_name": "blSiteRepository"}, {"original_string": "@Autowired\n\tprivate AuthenticationHolderRepository authHolderRepository;", "modifier": "@Autowired\n\tprivate", "type": "AuthenticationHolderRepository", "declarator": "authHolderRepository", "var_name": "authHolderRepository"}, {"original_string": "@Autowired\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Autowired\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Autowired\n\tprivate SystemScopeRepository sysScopeRepository;", "modifier": "@Autowired\n\tprivate", "type": "SystemScopeRepository", "declarator": "sysScopeRepository", "var_name": "sysScopeRepository"}, {"original_string": "@Autowired(required = false)\n\tprivate List<MITREidDataServiceExtension> extensions = Collections.emptyList();", "modifier": "@Autowired(required = false)\n\tprivate", "type": "List<MITREidDataServiceExtension>", "declarator": "extensions = Collections.emptyList()", "var_name": "extensions"}, {"original_string": "private MITREidDataServiceMaps maps = new MITREidDataServiceMaps();", "modifier": "private", "type": "MITREidDataServiceMaps", "declarator": "maps = new MITREidDataServiceMaps()", "var_name": "maps"}, {"original_string": "private static final String THIS_VERSION = MITREID_CONNECT_1_0;", "modifier": "private static final", "type": "String", "declarator": "THIS_VERSION = MITREID_CONNECT_1_0", "var_name": "THIS_VERSION"}], "methods": [{"identifier": "supportsVersion", "parameters": "(String version)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsVersion(String version)", "full_signature": "@Override public boolean supportsVersion(String version)", "class_method_signature": "MITREidDataService_1_0.supportsVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "exportData", "parameters": "(JsonWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void exportData(JsonWriter writer)", "full_signature": "@Override public void exportData(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_0.exportData(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "importData", "parameters": "(JsonReader reader)", "modifiers": "@Override public", "return": "void", "signature": "void importData(JsonReader reader)", "full_signature": "@Override public void importData(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.importData(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readRefreshTokens", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readRefreshTokens(JsonReader reader)", "full_signature": "private void readRefreshTokens(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readRefreshTokens(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readAccessTokens", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readAccessTokens(JsonReader reader)", "full_signature": "private void readAccessTokens(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readAccessTokens(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readAuthenticationHolders", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readAuthenticationHolders(JsonReader reader)", "full_signature": "private void readAuthenticationHolders(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readAuthenticationHolders(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readAuthorizationRequest", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "OAuth2Request", "signature": "OAuth2Request readAuthorizationRequest(JsonReader reader)", "full_signature": "private OAuth2Request readAuthorizationRequest(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readAuthorizationRequest(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readSavedUserAuthentication", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "SavedUserAuthentication", "signature": "SavedUserAuthentication readSavedUserAuthentication(JsonReader reader)", "full_signature": "private SavedUserAuthentication readSavedUserAuthentication(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readSavedUserAuthentication(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readGrants", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readGrants(JsonReader reader)", "full_signature": "private void readGrants(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readGrants(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readWhitelistedSites", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readWhitelistedSites(JsonReader reader)", "full_signature": "private void readWhitelistedSites(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readWhitelistedSites(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readBlacklistedSites", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readBlacklistedSites(JsonReader reader)", "full_signature": "private void readBlacklistedSites(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readBlacklistedSites(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readClients", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readClients(JsonReader reader)", "full_signature": "private void readClients(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readClients(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readSystemScopes", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readSystemScopes(JsonReader reader)", "full_signature": "private void readSystemScopes(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.readSystemScopes(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "fixObjectReferences", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fixObjectReferences()", "full_signature": "private void fixObjectReferences()", "class_method_signature": "MITREidDataService_1_0.fixObjectReferences()", "testcase": false, "constructor": false}], "file": "openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/MITREidDataService_1_0.java"}, "focal_method": {"identifier": "importData", "parameters": "(JsonReader reader)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void importData(JsonReader reader) throws IOException {\n\n\t\tlogger.info(\"Reading configuration for 1.0\");\n\n\t\t// this *HAS* to start as an object\n\t\treader.beginObject();\n\n\t\twhile (reader.hasNext()) {\n\t\t\tJsonToken tok = reader.peek();\n\t\t\tswitch (tok) {\n\t\t\t\tcase NAME:\n\t\t\t\t\tString name = reader.nextName();\n\t\t\t\t\t// find out which member it is\n\t\t\t\t\tif (name.equals(CLIENTS)) {\n\t\t\t\t\t\treadClients(reader);\n\t\t\t\t\t} else if (name.equals(GRANTS)) {\n\t\t\t\t\t\treadGrants(reader);\n\t\t\t\t\t} else if (name.equals(WHITELISTEDSITES)) {\n\t\t\t\t\t\treadWhitelistedSites(reader);\n\t\t\t\t\t} else if (name.equals(BLACKLISTEDSITES)) {\n\t\t\t\t\t\treadBlacklistedSites(reader);\n\t\t\t\t\t} else if (name.equals(AUTHENTICATIONHOLDERS)) {\n\t\t\t\t\t\treadAuthenticationHolders(reader);\n\t\t\t\t\t} else if (name.equals(ACCESSTOKENS)) {\n\t\t\t\t\t\treadAccessTokens(reader);\n\t\t\t\t\t} else if (name.equals(REFRESHTOKENS)) {\n\t\t\t\t\t\treadRefreshTokens(reader);\n\t\t\t\t\t} else if (name.equals(SYSTEMSCOPES)) {\n\t\t\t\t\t\treadSystemScopes(reader);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (MITREidDataServiceExtension extension : extensions) {\n\t\t\t\t\t\t\tif (extension.supportsVersion(THIS_VERSION)) {\n\t\t\t\t\t\t\t\tif (extension.supportsVersion(THIS_VERSION)) {\n\t\t\t\t\t\t\t\t\textension.importExtensionData(name, reader);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// unknown token, skip it\n\t\t\t\t\t\treader.skipValue();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase END_OBJECT:\n\t\t\t\t\t// the object ended, we're done here\n\t\t\t\t\treader.endObject();\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tlogger.debug(\"Found unexpected entry\");\n\t\t\t\t\treader.skipValue();\n\t\t\t\t\tcontinue;\t\t\t}\n\t\t}\n\t\tfixObjectReferences();\n\t\tfor (MITREidDataServiceExtension extension : extensions) {\n\t\t\tif (extension.supportsVersion(THIS_VERSION)) {\n\t\t\t\textension.fixExtensionObjectReferences(maps);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tmaps.clearAll();\n\t}", "signature": "void importData(JsonReader reader)", "full_signature": "@Override public void importData(JsonReader reader)", "class_method_signature": "MITREidDataService_1_0.importData(JsonReader reader)", "testcase": false, "constructor": false, "invocations": ["info", "beginObject", "hasNext", "peek", "nextName", "equals", "readClients", "equals", "readGrants", "equals", "readWhitelistedSites", "equals", "readBlacklistedSites", "equals", "readAuthenticationHolders", "equals", "readAccessTokens", "equals", "readRefreshTokens", "equals", "readSystemScopes", "supportsVersion", "supportsVersion", "importExtensionData", "skipValue", "endObject", "debug", "skipValue", "fixObjectReferences", "supportsVersion", "fixExtensionObjectReferences", "clearAll"]}, "repository": {"repo_id": 2681994, "url": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server", "language": "Java", "is_fork": false, "fork_count": 709, "stargazer_count": 1206, "size": 15055, "license": "licensed"}}