{"test_class": {"identifier": "TestDefaultOAuth2ClientDetailsEntityService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate OAuth2ClientRepository clientRepository;", "modifier": "@Mock\n\tprivate", "type": "OAuth2ClientRepository", "declarator": "clientRepository", "var_name": "clientRepository"}, {"original_string": "@Mock\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Mock\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Mock\n\tprivate ApprovedSiteService approvedSiteService;", "modifier": "@Mock\n\tprivate", "type": "ApprovedSiteService", "declarator": "approvedSiteService", "var_name": "approvedSiteService"}, {"original_string": "@Mock\n\tprivate WhitelistedSiteService whitelistedSiteService;", "modifier": "@Mock\n\tprivate", "type": "WhitelistedSiteService", "declarator": "whitelistedSiteService", "var_name": "whitelistedSiteService"}, {"original_string": "@Mock\n\tprivate BlacklistedSiteService blacklistedSiteService;", "modifier": "@Mock\n\tprivate", "type": "BlacklistedSiteService", "declarator": "blacklistedSiteService", "var_name": "blacklistedSiteService"}, {"original_string": "@Mock\n\tprivate SystemScopeService scopeService;", "modifier": "@Mock\n\tprivate", "type": "SystemScopeService", "declarator": "scopeService", "var_name": "scopeService"}, {"original_string": "@Mock\n\tprivate ResourceSetService resourceSetService;", "modifier": "@Mock\n\tprivate", "type": "ResourceSetService", "declarator": "resourceSetService", "var_name": "resourceSetService"}, {"original_string": "@Mock\n\tprivate StatsService statsService;", "modifier": "@Mock\n\tprivate", "type": "StatsService", "declarator": "statsService", "var_name": "statsService"}, {"original_string": "@Mock\n\tprivate ConfigurationPropertiesBean config;", "modifier": "@Mock\n\tprivate", "type": "ConfigurationPropertiesBean", "declarator": "config", "var_name": "config"}, {"original_string": "@InjectMocks\n\tprivate DefaultOAuth2ClientDetailsEntityService service;", "modifier": "@InjectMocks\n\tprivate", "type": "DefaultOAuth2ClientDetailsEntityService", "declarator": "service", "var_name": "service"}], "file": "openid-connect-server/src/test/java/org/mitre/oauth2/service/impl/TestDefaultOAuth2ClientDetailsEntityService.java"}, "test_case": {"identifier": "updateClient_noOfflineAccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void updateClient_noOfflineAccess() {\n\n\t\tClientDetailsEntity oldClient = new ClientDetailsEntity();\n\n\t\toldClient.getScope().add(SystemScopeService.OFFLINE_ACCESS);\n\n\t\tClientDetailsEntity client = new ClientDetailsEntity();\n\n\t\tclient = service.updateClient(oldClient, client);\n\n\t\tMockito.verify(scopeService, Mockito.atLeastOnce()).removeReservedScopes(Matchers.anySet());\n\n\t\tassertThat(client.getScope().contains(SystemScopeService.OFFLINE_ACCESS), is(equalTo(false)));\n\t}", "signature": "void updateClient_noOfflineAccess()", "full_signature": "@Test public void updateClient_noOfflineAccess()", "class_method_signature": "TestDefaultOAuth2ClientDetailsEntityService.updateClient_noOfflineAccess()", "testcase": true, "constructor": false, "invocations": ["add", "getScope", "updateClient", "removeReservedScopes", "verify", "atLeastOnce", "anySet", "assertThat", "contains", "getScope", "is", "equalTo"]}, "focal_class": {"identifier": "DefaultOAuth2ClientDetailsEntityService", "superclass": "", "interfaces": "implements ClientDetailsEntityService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultOAuth2ClientDetailsEntityService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultOAuth2ClientDetailsEntityService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate OAuth2ClientRepository clientRepository;", "modifier": "@Autowired\n\tprivate", "type": "OAuth2ClientRepository", "declarator": "clientRepository", "var_name": "clientRepository"}, {"original_string": "@Autowired\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Autowired\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Autowired\n\tprivate ApprovedSiteService approvedSiteService;", "modifier": "@Autowired\n\tprivate", "type": "ApprovedSiteService", "declarator": "approvedSiteService", "var_name": "approvedSiteService"}, {"original_string": "@Autowired\n\tprivate WhitelistedSiteService whitelistedSiteService;", "modifier": "@Autowired\n\tprivate", "type": "WhitelistedSiteService", "declarator": "whitelistedSiteService", "var_name": "whitelistedSiteService"}, {"original_string": "@Autowired\n\tprivate BlacklistedSiteService blacklistedSiteService;", "modifier": "@Autowired\n\tprivate", "type": "BlacklistedSiteService", "declarator": "blacklistedSiteService", "var_name": "blacklistedSiteService"}, {"original_string": "@Autowired\n\tprivate SystemScopeService scopeService;", "modifier": "@Autowired\n\tprivate", "type": "SystemScopeService", "declarator": "scopeService", "var_name": "scopeService"}, {"original_string": "@Autowired\n\tprivate StatsService statsService;", "modifier": "@Autowired\n\tprivate", "type": "StatsService", "declarator": "statsService", "var_name": "statsService"}, {"original_string": "@Autowired\n\tprivate ResourceSetService resourceSetService;", "modifier": "@Autowired\n\tprivate", "type": "ResourceSetService", "declarator": "resourceSetService", "var_name": "resourceSetService"}, {"original_string": "@Autowired\n\tprivate ConfigurationPropertiesBean config;", "modifier": "@Autowired\n\tprivate", "type": "ConfigurationPropertiesBean", "declarator": "config", "var_name": "config"}, {"original_string": "private LoadingCache<String, List<String>> sectorRedirects = CacheBuilder.newBuilder()\n\t\t\t.expireAfterAccess(1, TimeUnit.HOURS)\n\t\t\t.maximumSize(100)\n\t\t\t.build(new SectorIdentifierLoader(HttpClientBuilder.create().useSystemProperties().build()));", "modifier": "private", "type": "LoadingCache<String, List<String>>", "declarator": "sectorRedirects = CacheBuilder.newBuilder()\n\t\t\t.expireAfterAccess(1, TimeUnit.HOURS)\n\t\t\t.maximumSize(100)\n\t\t\t.build(new SectorIdentifierLoader(HttpClientBuilder.create().useSystemProperties().build()))", "var_name": "sectorRedirects"}], "methods": [{"identifier": "saveNewClient", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "ClientDetailsEntity", "signature": "ClientDetailsEntity saveNewClient(ClientDetailsEntity client)", "full_signature": "@Override public ClientDetailsEntity saveNewClient(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.saveNewClient(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "ensureKeyConsistency", "parameters": "(ClientDetailsEntity client)", "modifiers": "private", "return": "void", "signature": "void ensureKeyConsistency(ClientDetailsEntity client)", "full_signature": "private void ensureKeyConsistency(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.ensureKeyConsistency(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "ensureNoReservedScopes", "parameters": "(ClientDetailsEntity client)", "modifiers": "private", "return": "void", "signature": "void ensureNoReservedScopes(ClientDetailsEntity client)", "full_signature": "private void ensureNoReservedScopes(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.ensureNoReservedScopes(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "checkSectorIdentifierUri", "parameters": "(ClientDetailsEntity client)", "modifiers": "private", "return": "void", "signature": "void checkSectorIdentifierUri(ClientDetailsEntity client)", "full_signature": "private void checkSectorIdentifierUri(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.checkSectorIdentifierUri(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "ensureRefreshTokenConsistency", "parameters": "(ClientDetailsEntity client)", "modifiers": "private", "return": "void", "signature": "void ensureRefreshTokenConsistency(ClientDetailsEntity client)", "full_signature": "private void ensureRefreshTokenConsistency(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.ensureRefreshTokenConsistency(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "checkHeartMode", "parameters": "(ClientDetailsEntity client)", "modifiers": "private", "return": "void", "signature": "void checkHeartMode(ClientDetailsEntity client)", "full_signature": "private void checkHeartMode(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.checkHeartMode(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "getClientById", "parameters": "(Long id)", "modifiers": "@Override public", "return": "ClientDetailsEntity", "signature": "ClientDetailsEntity getClientById(Long id)", "full_signature": "@Override public ClientDetailsEntity getClientById(Long id)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.getClientById(Long id)", "testcase": false, "constructor": false}, {"identifier": "loadClientByClientId", "parameters": "(String clientId)", "modifiers": "@Override public", "return": "ClientDetailsEntity", "signature": "ClientDetailsEntity loadClientByClientId(String clientId)", "full_signature": "@Override public ClientDetailsEntity loadClientByClientId(String clientId)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.loadClientByClientId(String clientId)", "testcase": false, "constructor": false}, {"identifier": "deleteClient", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "void", "signature": "void deleteClient(ClientDetailsEntity client)", "full_signature": "@Override public void deleteClient(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.deleteClient(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "updateClient", "parameters": "(ClientDetailsEntity oldClient, ClientDetailsEntity newClient)", "modifiers": "@Override public", "return": "ClientDetailsEntity", "signature": "ClientDetailsEntity updateClient(ClientDetailsEntity oldClient, ClientDetailsEntity newClient)", "full_signature": "@Override public ClientDetailsEntity updateClient(ClientDetailsEntity oldClient, ClientDetailsEntity newClient)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.updateClient(ClientDetailsEntity oldClient, ClientDetailsEntity newClient)", "testcase": false, "constructor": false}, {"identifier": "getAllClients", "parameters": "()", "modifiers": "@Override public", "return": "Collection<ClientDetailsEntity>", "signature": "Collection<ClientDetailsEntity> getAllClients()", "full_signature": "@Override public Collection<ClientDetailsEntity> getAllClients()", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.getAllClients()", "testcase": false, "constructor": false}, {"identifier": "generateClientId", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "ClientDetailsEntity", "signature": "ClientDetailsEntity generateClientId(ClientDetailsEntity client)", "full_signature": "@Override public ClientDetailsEntity generateClientId(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.generateClientId(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "generateClientSecret", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "ClientDetailsEntity", "signature": "ClientDetailsEntity generateClientSecret(ClientDetailsEntity client)", "full_signature": "@Override public ClientDetailsEntity generateClientSecret(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.generateClientSecret(ClientDetailsEntity client)", "testcase": false, "constructor": false}], "file": "openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ClientDetailsEntityService.java"}, "focal_method": {"identifier": "updateClient", "parameters": "(ClientDetailsEntity oldClient, ClientDetailsEntity newClient)", "modifiers": "@Override public", "return": "ClientDetailsEntity", "body": "@Override\n\tpublic ClientDetailsEntity updateClient(ClientDetailsEntity oldClient, ClientDetailsEntity newClient) throws IllegalArgumentException {\n\t\tif (oldClient != null && newClient != null) {\n\n\t\t\tfor (String uri : newClient.getRegisteredRedirectUri()) {\n\t\t\t\tif (blacklistedSiteService.isBlacklisted(uri)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Client URI is blacklisted: \" + uri);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if the client is flagged to allow for refresh tokens, make sure it's got the right scope\n\t\t\tensureRefreshTokenConsistency(newClient);\n\n\t\t\t// make sure we don't have both a JWKS and a JWKS URI\n\t\t\tensureKeyConsistency(newClient);\n\n\t\t\t// check consistency when using HEART mode\n\t\t\tcheckHeartMode(newClient);\n\n\t\t\t// check the sector URI\n\t\t\tcheckSectorIdentifierUri(newClient);\n\n\t\t\t// make sure a client doesn't get any special system scopes\n\t\t\tensureNoReservedScopes(newClient);\n\n\t\t\treturn clientRepository.updateClient(oldClient.getId(), newClient);\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Neither old client or new client can be null!\");\n\t}", "signature": "ClientDetailsEntity updateClient(ClientDetailsEntity oldClient, ClientDetailsEntity newClient)", "full_signature": "@Override public ClientDetailsEntity updateClient(ClientDetailsEntity oldClient, ClientDetailsEntity newClient)", "class_method_signature": "DefaultOAuth2ClientDetailsEntityService.updateClient(ClientDetailsEntity oldClient, ClientDetailsEntity newClient)", "testcase": false, "constructor": false, "invocations": ["getRegisteredRedirectUri", "isBlacklisted", "ensureRefreshTokenConsistency", "ensureKeyConsistency", "checkHeartMode", "checkSectorIdentifierUri", "ensureNoReservedScopes", "updateClient", "getId"]}, "repository": {"repo_id": 2681994, "url": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server", "language": "Java", "is_fork": false, "fork_count": 709, "stargazer_count": 1206, "size": 15055, "license": "licensed"}}