{"test_class": {"identifier": "ConfigurationPropertiesBeanTest", "superclass": "", "interfaces": "", "fields": [], "file": "openid-connect-common/src/test/java/org/mitre/openid/connect/config/ConfigurationPropertiesBeanTest.java"}, "test_case": {"identifier": "testConfigurationPropertiesBean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConfigurationPropertiesBean() {\n\n\t\t// make sure the values that go in come back out unchanged\n\t\tConfigurationPropertiesBean bean = new ConfigurationPropertiesBean();\n\n\t\tString iss = \"http://localhost:8080/openid-connect-server/\";\n\t\tString title = \"OpenID Connect Server\";\n\t\tString logoUrl = \"/images/logo.png\";\n\n\t\tbean.setIssuer(iss);\n\t\tbean.setTopbarTitle(title);\n\t\tbean.setLogoImageUrl(logoUrl);\n\t\tbean.setForceHttps(true);\n\n\t\tassertEquals(iss, bean.getIssuer());\n\t\tassertEquals(title, bean.getTopbarTitle());\n\t\tassertEquals(logoUrl, bean.getLogoImageUrl());\n\t\tassertEquals(true, bean.isForceHttps());\n\t}", "signature": "void testConfigurationPropertiesBean()", "full_signature": "@Test public void testConfigurationPropertiesBean()", "class_method_signature": "ConfigurationPropertiesBeanTest.testConfigurationPropertiesBean()", "testcase": true, "constructor": false, "invocations": ["setIssuer", "setTopbarTitle", "setLogoImageUrl", "setForceHttps", "assertEquals", "getIssuer", "assertEquals", "getTopbarTitle", "assertEquals", "getLogoImageUrl", "assertEquals", "isForceHttps"]}, "focal_class": {"identifier": "ConfigurationPropertiesBean", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConfigurationPropertiesBean.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConfigurationPropertiesBean.class)", "var_name": "logger"}, {"original_string": "private String issuer;", "modifier": "private", "type": "String", "declarator": "issuer", "var_name": "issuer"}, {"original_string": "private String topbarTitle;", "modifier": "private", "type": "String", "declarator": "topbarTitle", "var_name": "topbarTitle"}, {"original_string": "private String shortTopbarTitle;", "modifier": "private", "type": "String", "declarator": "shortTopbarTitle", "var_name": "shortTopbarTitle"}, {"original_string": "private String logoImageUrl;", "modifier": "private", "type": "String", "declarator": "logoImageUrl", "var_name": "logoImageUrl"}, {"original_string": "private Long regTokenLifeTime;", "modifier": "private", "type": "Long", "declarator": "regTokenLifeTime", "var_name": "regTokenLifeTime"}, {"original_string": "private Long rqpTokenLifeTime;", "modifier": "private", "type": "Long", "declarator": "rqpTokenLifeTime", "var_name": "rqpTokenLifeTime"}, {"original_string": "private boolean forceHttps = false;", "modifier": "private", "type": "boolean", "declarator": "forceHttps = false", "var_name": "forceHttps"}, {"original_string": "private Locale locale = Locale.ENGLISH;", "modifier": "private", "type": "Locale", "declarator": "locale = Locale.ENGLISH", "var_name": "locale"}, {"original_string": "private List<String> languageNamespaces = Lists.newArrayList(\"messages\");", "modifier": "private", "type": "List<String>", "declarator": "languageNamespaces = Lists.newArrayList(\"messages\")", "var_name": "languageNamespaces"}, {"original_string": "private boolean dualClient = false;", "modifier": "private", "type": "boolean", "declarator": "dualClient = false", "var_name": "dualClient"}, {"original_string": "private boolean heartMode = false;", "modifier": "private", "type": "boolean", "declarator": "heartMode = false", "var_name": "heartMode"}, {"original_string": "private boolean allowCompleteDeviceCodeUri = false;", "modifier": "private", "type": "boolean", "declarator": "allowCompleteDeviceCodeUri = false", "var_name": "allowCompleteDeviceCodeUri"}], "methods": [{"identifier": "ConfigurationPropertiesBean", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConfigurationPropertiesBean()", "full_signature": "public  ConfigurationPropertiesBean()", "class_method_signature": "ConfigurationPropertiesBean.ConfigurationPropertiesBean()", "testcase": false, "constructor": true}, {"identifier": "checkConfigConsistency", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void checkConfigConsistency()", "full_signature": "@PostConstruct public void checkConfigConsistency()", "class_method_signature": "ConfigurationPropertiesBean.checkConfigConsistency()", "testcase": false, "constructor": false}, {"identifier": "getIssuer", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIssuer()", "full_signature": "public String getIssuer()", "class_method_signature": "ConfigurationPropertiesBean.getIssuer()", "testcase": false, "constructor": false}, {"identifier": "setIssuer", "parameters": "(String iss)", "modifiers": "public", "return": "void", "signature": "void setIssuer(String iss)", "full_signature": "public void setIssuer(String iss)", "class_method_signature": "ConfigurationPropertiesBean.setIssuer(String iss)", "testcase": false, "constructor": false}, {"identifier": "getTopbarTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTopbarTitle()", "full_signature": "public String getTopbarTitle()", "class_method_signature": "ConfigurationPropertiesBean.getTopbarTitle()", "testcase": false, "constructor": false}, {"identifier": "setTopbarTitle", "parameters": "(String topbarTitle)", "modifiers": "public", "return": "void", "signature": "void setTopbarTitle(String topbarTitle)", "full_signature": "public void setTopbarTitle(String topbarTitle)", "class_method_signature": "ConfigurationPropertiesBean.setTopbarTitle(String topbarTitle)", "testcase": false, "constructor": false}, {"identifier": "getShortTopbarTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getShortTopbarTitle()", "full_signature": "public String getShortTopbarTitle()", "class_method_signature": "ConfigurationPropertiesBean.getShortTopbarTitle()", "testcase": false, "constructor": false}, {"identifier": "setShortTopbarTitle", "parameters": "(String shortTopbarTitle)", "modifiers": "public", "return": "void", "signature": "void setShortTopbarTitle(String shortTopbarTitle)", "full_signature": "public void setShortTopbarTitle(String shortTopbarTitle)", "class_method_signature": "ConfigurationPropertiesBean.setShortTopbarTitle(String shortTopbarTitle)", "testcase": false, "constructor": false}, {"identifier": "getLogoImageUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLogoImageUrl()", "full_signature": "public String getLogoImageUrl()", "class_method_signature": "ConfigurationPropertiesBean.getLogoImageUrl()", "testcase": false, "constructor": false}, {"identifier": "setLogoImageUrl", "parameters": "(String logoImageUrl)", "modifiers": "public", "return": "void", "signature": "void setLogoImageUrl(String logoImageUrl)", "full_signature": "public void setLogoImageUrl(String logoImageUrl)", "class_method_signature": "ConfigurationPropertiesBean.setLogoImageUrl(String logoImageUrl)", "testcase": false, "constructor": false}, {"identifier": "getRegTokenLifeTime", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getRegTokenLifeTime()", "full_signature": "public Long getRegTokenLifeTime()", "class_method_signature": "ConfigurationPropertiesBean.getRegTokenLifeTime()", "testcase": false, "constructor": false}, {"identifier": "setRegTokenLifeTime", "parameters": "(Long regTokenLifeTime)", "modifiers": "public", "return": "void", "signature": "void setRegTokenLifeTime(Long regTokenLifeTime)", "full_signature": "public void setRegTokenLifeTime(Long regTokenLifeTime)", "class_method_signature": "ConfigurationPropertiesBean.setRegTokenLifeTime(Long regTokenLifeTime)", "testcase": false, "constructor": false}, {"identifier": "getRqpTokenLifeTime", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getRqpTokenLifeTime()", "full_signature": "public Long getRqpTokenLifeTime()", "class_method_signature": "ConfigurationPropertiesBean.getRqpTokenLifeTime()", "testcase": false, "constructor": false}, {"identifier": "setRqpTokenLifeTime", "parameters": "(Long rqpTokenLifeTime)", "modifiers": "public", "return": "void", "signature": "void setRqpTokenLifeTime(Long rqpTokenLifeTime)", "full_signature": "public void setRqpTokenLifeTime(Long rqpTokenLifeTime)", "class_method_signature": "ConfigurationPropertiesBean.setRqpTokenLifeTime(Long rqpTokenLifeTime)", "testcase": false, "constructor": false}, {"identifier": "isForceHttps", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isForceHttps()", "full_signature": "public boolean isForceHttps()", "class_method_signature": "ConfigurationPropertiesBean.isForceHttps()", "testcase": false, "constructor": false}, {"identifier": "setForceHttps", "parameters": "(boolean forceHttps)", "modifiers": "public", "return": "void", "signature": "void setForceHttps(boolean forceHttps)", "full_signature": "public void setForceHttps(boolean forceHttps)", "class_method_signature": "ConfigurationPropertiesBean.setForceHttps(boolean forceHttps)", "testcase": false, "constructor": false}, {"identifier": "getLocale", "parameters": "()", "modifiers": "public", "return": "Locale", "signature": "Locale getLocale()", "full_signature": "public Locale getLocale()", "class_method_signature": "ConfigurationPropertiesBean.getLocale()", "testcase": false, "constructor": false}, {"identifier": "setLocale", "parameters": "(Locale locale)", "modifiers": "public", "return": "void", "signature": "void setLocale(Locale locale)", "full_signature": "public void setLocale(Locale locale)", "class_method_signature": "ConfigurationPropertiesBean.setLocale(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getLanguageNamespaces", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getLanguageNamespaces()", "full_signature": "public List<String> getLanguageNamespaces()", "class_method_signature": "ConfigurationPropertiesBean.getLanguageNamespaces()", "testcase": false, "constructor": false}, {"identifier": "setLanguageNamespaces", "parameters": "(List<String> languageNamespaces)", "modifiers": "public", "return": "void", "signature": "void setLanguageNamespaces(List<String> languageNamespaces)", "full_signature": "public void setLanguageNamespaces(List<String> languageNamespaces)", "class_method_signature": "ConfigurationPropertiesBean.setLanguageNamespaces(List<String> languageNamespaces)", "testcase": false, "constructor": false}, {"identifier": "isDualClient", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDualClient()", "full_signature": "public boolean isDualClient()", "class_method_signature": "ConfigurationPropertiesBean.isDualClient()", "testcase": false, "constructor": false}, {"identifier": "setDualClient", "parameters": "(boolean dualClient)", "modifiers": "public", "return": "void", "signature": "void setDualClient(boolean dualClient)", "full_signature": "public void setDualClient(boolean dualClient)", "class_method_signature": "ConfigurationPropertiesBean.setDualClient(boolean dualClient)", "testcase": false, "constructor": false}, {"identifier": "getLanguageNamespacesString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLanguageNamespacesString()", "full_signature": "public String getLanguageNamespacesString()", "class_method_signature": "ConfigurationPropertiesBean.getLanguageNamespacesString()", "testcase": false, "constructor": false}, {"identifier": "getDefaultLanguageNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultLanguageNamespace()", "full_signature": "public String getDefaultLanguageNamespace()", "class_method_signature": "ConfigurationPropertiesBean.getDefaultLanguageNamespace()", "testcase": false, "constructor": false}, {"identifier": "isHeartMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHeartMode()", "full_signature": "public boolean isHeartMode()", "class_method_signature": "ConfigurationPropertiesBean.isHeartMode()", "testcase": false, "constructor": false}, {"identifier": "setHeartMode", "parameters": "(boolean heartMode)", "modifiers": "public", "return": "void", "signature": "void setHeartMode(boolean heartMode)", "full_signature": "public void setHeartMode(boolean heartMode)", "class_method_signature": "ConfigurationPropertiesBean.setHeartMode(boolean heartMode)", "testcase": false, "constructor": false}, {"identifier": "isAllowCompleteDeviceCodeUri", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowCompleteDeviceCodeUri()", "full_signature": "public boolean isAllowCompleteDeviceCodeUri()", "class_method_signature": "ConfigurationPropertiesBean.isAllowCompleteDeviceCodeUri()", "testcase": false, "constructor": false}, {"identifier": "setAllowCompleteDeviceCodeUri", "parameters": "(boolean allowCompleteDeviceCodeUri)", "modifiers": "public", "return": "void", "signature": "void setAllowCompleteDeviceCodeUri(boolean allowCompleteDeviceCodeUri)", "full_signature": "public void setAllowCompleteDeviceCodeUri(boolean allowCompleteDeviceCodeUri)", "class_method_signature": "ConfigurationPropertiesBean.setAllowCompleteDeviceCodeUri(boolean allowCompleteDeviceCodeUri)", "testcase": false, "constructor": false}], "file": "openid-connect-common/src/main/java/org/mitre/openid/connect/config/ConfigurationPropertiesBean.java"}, "focal_method": {"identifier": "ConfigurationPropertiesBean", "parameters": "()", "modifiers": "public", "return": "", "body": "public ConfigurationPropertiesBean() {\n\n\t}", "signature": " ConfigurationPropertiesBean()", "full_signature": "public  ConfigurationPropertiesBean()", "class_method_signature": "ConfigurationPropertiesBean.ConfigurationPropertiesBean()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 2681994, "url": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server", "language": "Java", "is_fork": false, "fork_count": 709, "stargazer_count": 1206, "size": 15055, "license": "licensed"}}