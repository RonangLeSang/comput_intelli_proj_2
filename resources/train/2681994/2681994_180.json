{"test_class": {"identifier": "TestHybridServerConfigurationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate StaticServerConfigurationService mockStaticService;", "modifier": "@Mock\n\tprivate", "type": "StaticServerConfigurationService", "declarator": "mockStaticService", "var_name": "mockStaticService"}, {"original_string": "@Mock\n\tprivate DynamicServerConfigurationService mockDynamicService;", "modifier": "@Mock\n\tprivate", "type": "DynamicServerConfigurationService", "declarator": "mockDynamicService", "var_name": "mockDynamicService"}, {"original_string": "@InjectMocks\n\tprivate HybridServerConfigurationService hybridService;", "modifier": "@InjectMocks\n\tprivate", "type": "HybridServerConfigurationService", "declarator": "hybridService", "var_name": "hybridService"}, {"original_string": "@Mock\n\tprivate ServerConfiguration mockServerConfig;", "modifier": "@Mock\n\tprivate", "type": "ServerConfiguration", "declarator": "mockServerConfig", "var_name": "mockServerConfig"}, {"original_string": "private String issuer = \"https://www.example.com/\";", "modifier": "private", "type": "String", "declarator": "issuer = \"https://www.example.com/\"", "var_name": "issuer"}], "file": "openid-connect-client/src/test/java/org/mitre/openid/connect/client/service/impl/TestHybridServerConfigurationService.java"}, "test_case": {"identifier": "getServerConfiguration_noIssuer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getServerConfiguration_noIssuer() {\n\n\t\tMockito.when(mockStaticService.getServerConfiguration(issuer)).thenReturn(mockServerConfig);\n\t\tMockito.when(mockDynamicService.getServerConfiguration(issuer)).thenReturn(mockServerConfig);\n\n\t\tString badIssuer = \"www.badexample.com\";\n\n\t\tServerConfiguration result = hybridService.getServerConfiguration(badIssuer);\n\n\t\tMockito.verify(mockStaticService).getServerConfiguration(badIssuer);\n\t\tMockito.verify(mockDynamicService).getServerConfiguration(badIssuer);\n\t\tassertThat(result, is(nullValue()));\n\t}", "signature": "void getServerConfiguration_noIssuer()", "full_signature": "@Test public void getServerConfiguration_noIssuer()", "class_method_signature": "TestHybridServerConfigurationService.getServerConfiguration_noIssuer()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getServerConfiguration", "thenReturn", "when", "getServerConfiguration", "getServerConfiguration", "getServerConfiguration", "verify", "getServerConfiguration", "verify", "assertThat", "is", "nullValue"]}, "focal_class": {"identifier": "HybridServerConfigurationService", "superclass": "", "interfaces": "implements ServerConfigurationService", "fields": [{"original_string": "private StaticServerConfigurationService staticServerService = new StaticServerConfigurationService();", "modifier": "private", "type": "StaticServerConfigurationService", "declarator": "staticServerService = new StaticServerConfigurationService()", "var_name": "staticServerService"}, {"original_string": "private DynamicServerConfigurationService dynamicServerService = new DynamicServerConfigurationService();", "modifier": "private", "type": "DynamicServerConfigurationService", "declarator": "dynamicServerService = new DynamicServerConfigurationService()", "var_name": "dynamicServerService"}], "methods": [{"identifier": "getServerConfiguration", "parameters": "(String issuer)", "modifiers": "@Override public", "return": "ServerConfiguration", "signature": "ServerConfiguration getServerConfiguration(String issuer)", "full_signature": "@Override public ServerConfiguration getServerConfiguration(String issuer)", "class_method_signature": "HybridServerConfigurationService.getServerConfiguration(String issuer)", "testcase": false, "constructor": false}, {"identifier": "getServers", "parameters": "()", "modifiers": "public", "return": "Map<String, ServerConfiguration>", "signature": "Map<String, ServerConfiguration> getServers()", "full_signature": "public Map<String, ServerConfiguration> getServers()", "class_method_signature": "HybridServerConfigurationService.getServers()", "testcase": false, "constructor": false}, {"identifier": "setServers", "parameters": "(Map<String, ServerConfiguration> servers)", "modifiers": "public", "return": "void", "signature": "void setServers(Map<String, ServerConfiguration> servers)", "full_signature": "public void setServers(Map<String, ServerConfiguration> servers)", "class_method_signature": "HybridServerConfigurationService.setServers(Map<String, ServerConfiguration> servers)", "testcase": false, "constructor": false}, {"identifier": "getWhitelist", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getWhitelist()", "full_signature": "public Set<String> getWhitelist()", "class_method_signature": "HybridServerConfigurationService.getWhitelist()", "testcase": false, "constructor": false}, {"identifier": "setWhitelist", "parameters": "(Set<String> whitelist)", "modifiers": "public", "return": "void", "signature": "void setWhitelist(Set<String> whitelist)", "full_signature": "public void setWhitelist(Set<String> whitelist)", "class_method_signature": "HybridServerConfigurationService.setWhitelist(Set<String> whitelist)", "testcase": false, "constructor": false}, {"identifier": "getBlacklist", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getBlacklist()", "full_signature": "public Set<String> getBlacklist()", "class_method_signature": "HybridServerConfigurationService.getBlacklist()", "testcase": false, "constructor": false}, {"identifier": "setBlacklist", "parameters": "(Set<String> blacklist)", "modifiers": "public", "return": "void", "signature": "void setBlacklist(Set<String> blacklist)", "full_signature": "public void setBlacklist(Set<String> blacklist)", "class_method_signature": "HybridServerConfigurationService.setBlacklist(Set<String> blacklist)", "testcase": false, "constructor": false}], "file": "openid-connect-client/src/main/java/org/mitre/openid/connect/client/service/impl/HybridServerConfigurationService.java"}, "focal_method": {"identifier": "getServerConfiguration", "parameters": "(String issuer)", "modifiers": "@Override public", "return": "ServerConfiguration", "body": "@Override\n\tpublic ServerConfiguration getServerConfiguration(String issuer) {\n\t\tServerConfiguration server = staticServerService.getServerConfiguration(issuer);\n\t\tif (server != null) {\n\t\t\treturn server;\n\t\t} else {\n\t\t\treturn dynamicServerService.getServerConfiguration(issuer);\n\t\t}\n\t}", "signature": "ServerConfiguration getServerConfiguration(String issuer)", "full_signature": "@Override public ServerConfiguration getServerConfiguration(String issuer)", "class_method_signature": "HybridServerConfigurationService.getServerConfiguration(String issuer)", "testcase": false, "constructor": false, "invocations": ["getServerConfiguration", "getServerConfiguration"]}, "repository": {"repo_id": 2681994, "url": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server", "language": "Java", "is_fork": false, "fork_count": 709, "stargazer_count": 1206, "size": 15055, "license": "licensed"}}