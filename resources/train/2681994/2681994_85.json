{"test_class": {"identifier": "TestDefaultOAuth2ProviderTokenService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long DELTA = 100L;", "modifier": "private static final", "type": "long", "declarator": "DELTA = 100L", "var_name": "DELTA"}, {"original_string": "private OAuth2Authentication authentication;", "modifier": "private", "type": "OAuth2Authentication", "declarator": "authentication", "var_name": "authentication"}, {"original_string": "private ClientDetailsEntity client;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "client", "var_name": "client"}, {"original_string": "private ClientDetailsEntity badClient;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "badClient", "var_name": "badClient"}, {"original_string": "private String clientId = \"test_client\";", "modifier": "private", "type": "String", "declarator": "clientId = \"test_client\"", "var_name": "clientId"}, {"original_string": "private String badClientId = \"bad_client\";", "modifier": "private", "type": "String", "declarator": "badClientId = \"bad_client\"", "var_name": "badClientId"}, {"original_string": "private Set<String> scope = newHashSet(\"openid\", \"profile\", \"email\", \"offline_access\");", "modifier": "private", "type": "Set<String>", "declarator": "scope = newHashSet(\"openid\", \"profile\", \"email\", \"offline_access\")", "var_name": "scope"}, {"original_string": "private OAuth2RefreshTokenEntity refreshToken;", "modifier": "private", "type": "OAuth2RefreshTokenEntity", "declarator": "refreshToken", "var_name": "refreshToken"}, {"original_string": "private OAuth2AccessTokenEntity accessToken;", "modifier": "private", "type": "OAuth2AccessTokenEntity", "declarator": "accessToken", "var_name": "accessToken"}, {"original_string": "private String refreshTokenValue = \"refresh_token_value\";", "modifier": "private", "type": "String", "declarator": "refreshTokenValue = \"refresh_token_value\"", "var_name": "refreshTokenValue"}, {"original_string": "private String userName = \"6a50ac11786d402a9591d3e592ac770f\";", "modifier": "private", "type": "String", "declarator": "userName = \"6a50ac11786d402a9591d3e592ac770f\"", "var_name": "userName"}, {"original_string": "private TokenRequest tokenRequest;", "modifier": "private", "type": "TokenRequest", "declarator": "tokenRequest", "var_name": "tokenRequest"}, {"original_string": "private OAuth2Request storedAuthRequest;", "modifier": "private", "type": "OAuth2Request", "declarator": "storedAuthRequest", "var_name": "storedAuthRequest"}, {"original_string": "private OAuth2Authentication storedAuthentication;", "modifier": "private", "type": "OAuth2Authentication", "declarator": "storedAuthentication", "var_name": "storedAuthentication"}, {"original_string": "private AuthenticationHolderEntity storedAuthHolder;", "modifier": "private", "type": "AuthenticationHolderEntity", "declarator": "storedAuthHolder", "var_name": "storedAuthHolder"}, {"original_string": "private Set<String> storedScope;", "modifier": "private", "type": "Set<String>", "declarator": "storedScope", "var_name": "storedScope"}, {"original_string": "@Mock\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Mock\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Mock\n\tprivate AuthenticationHolderRepository authenticationHolderRepository;", "modifier": "@Mock\n\tprivate", "type": "AuthenticationHolderRepository", "declarator": "authenticationHolderRepository", "var_name": "authenticationHolderRepository"}, {"original_string": "@Mock\n\tprivate ClientDetailsEntityService clientDetailsService;", "modifier": "@Mock\n\tprivate", "type": "ClientDetailsEntityService", "declarator": "clientDetailsService", "var_name": "clientDetailsService"}, {"original_string": "@Mock\n\tprivate TokenEnhancer tokenEnhancer;", "modifier": "@Mock\n\tprivate", "type": "TokenEnhancer", "declarator": "tokenEnhancer", "var_name": "tokenEnhancer"}, {"original_string": "@Mock\n\tprivate SystemScopeService scopeService;", "modifier": "@Mock\n\tprivate", "type": "SystemScopeService", "declarator": "scopeService", "var_name": "scopeService"}, {"original_string": "@InjectMocks\n\tprivate DefaultOAuth2ProviderTokenService service;", "modifier": "@InjectMocks\n\tprivate", "type": "DefaultOAuth2ProviderTokenService", "declarator": "service", "var_name": "service"}], "file": "openid-connect-server/src/test/java/org/mitre/oauth2/service/impl/TestDefaultOAuth2ProviderTokenService.java"}, "test_case": {"identifier": "refreshAccessToken_expiration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void refreshAccessToken_expiration() {\n\t\tInteger accessTokenValiditySeconds = 3600;\n\n\t\twhen(client.getAccessTokenValiditySeconds()).thenReturn(accessTokenValiditySeconds);\n\n\t\tlong start = System.currentTimeMillis();\n\t\tOAuth2AccessTokenEntity token = service.refreshAccessToken(refreshTokenValue, tokenRequest);\n\t\tlong end = System.currentTimeMillis();\n\n\t\t// Accounting for some delta for time skew on either side.\n\t\tDate lowerBoundAccessTokens = new Date(start + (accessTokenValiditySeconds * 1000L) - DELTA);\n\t\tDate upperBoundAccessTokens = new Date(end + (accessTokenValiditySeconds * 1000L) + DELTA);\n\n\t\tverify(scopeService, atLeastOnce()).removeReservedScopes(anySet());\n\n\t\tassertTrue(token.getExpiration().after(lowerBoundAccessTokens) && token.getExpiration().before(upperBoundAccessTokens));\n\t}", "signature": "void refreshAccessToken_expiration()", "full_signature": "@Test public void refreshAccessToken_expiration()", "class_method_signature": "TestDefaultOAuth2ProviderTokenService.refreshAccessToken_expiration()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAccessTokenValiditySeconds", "currentTimeMillis", "refreshAccessToken", "currentTimeMillis", "removeReservedScopes", "verify", "atLeastOnce", "anySet", "assertTrue", "after", "getExpiration", "before", "getExpiration"]}, "focal_class": {"identifier": "DefaultOAuth2ProviderTokenService", "superclass": "", "interfaces": "implements OAuth2TokenEntityService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultOAuth2ProviderTokenService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultOAuth2ProviderTokenService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Autowired\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Autowired\n\tprivate AuthenticationHolderRepository authenticationHolderRepository;", "modifier": "@Autowired\n\tprivate", "type": "AuthenticationHolderRepository", "declarator": "authenticationHolderRepository", "var_name": "authenticationHolderRepository"}, {"original_string": "@Autowired\n\tprivate ClientDetailsEntityService clientDetailsService;", "modifier": "@Autowired\n\tprivate", "type": "ClientDetailsEntityService", "declarator": "clientDetailsService", "var_name": "clientDetailsService"}, {"original_string": "@Autowired\n\tprivate TokenEnhancer tokenEnhancer;", "modifier": "@Autowired\n\tprivate", "type": "TokenEnhancer", "declarator": "tokenEnhancer", "var_name": "tokenEnhancer"}, {"original_string": "@Autowired\n\tprivate SystemScopeService scopeService;", "modifier": "@Autowired\n\tprivate", "type": "SystemScopeService", "declarator": "scopeService", "var_name": "scopeService"}, {"original_string": "@Autowired\n\tprivate ApprovedSiteService approvedSiteService;", "modifier": "@Autowired\n\tprivate", "type": "ApprovedSiteService", "declarator": "approvedSiteService", "var_name": "approvedSiteService"}], "methods": [{"identifier": "getAllAccessTokensForUser", "parameters": "(String userName)", "modifiers": "@Override public", "return": "Set<OAuth2AccessTokenEntity>", "signature": "Set<OAuth2AccessTokenEntity> getAllAccessTokensForUser(String userName)", "full_signature": "@Override public Set<OAuth2AccessTokenEntity> getAllAccessTokensForUser(String userName)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAllAccessTokensForUser(String userName)", "testcase": false, "constructor": false}, {"identifier": "getAllRefreshTokensForUser", "parameters": "(String userName)", "modifiers": "@Override public", "return": "Set<OAuth2RefreshTokenEntity>", "signature": "Set<OAuth2RefreshTokenEntity> getAllRefreshTokensForUser(String userName)", "full_signature": "@Override public Set<OAuth2RefreshTokenEntity> getAllRefreshTokensForUser(String userName)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAllRefreshTokensForUser(String userName)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenById", "parameters": "(Long id)", "modifiers": "@Override public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity getAccessTokenById(Long id)", "full_signature": "@Override public OAuth2AccessTokenEntity getAccessTokenById(Long id)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAccessTokenById(Long id)", "testcase": false, "constructor": false}, {"identifier": "getRefreshTokenById", "parameters": "(Long id)", "modifiers": "@Override public", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity getRefreshTokenById(Long id)", "full_signature": "@Override public OAuth2RefreshTokenEntity getRefreshTokenById(Long id)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getRefreshTokenById(Long id)", "testcase": false, "constructor": false}, {"identifier": "clearExpiredAccessToken", "parameters": "(OAuth2AccessTokenEntity token)", "modifiers": "private", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity clearExpiredAccessToken(OAuth2AccessTokenEntity token)", "full_signature": "private OAuth2AccessTokenEntity clearExpiredAccessToken(OAuth2AccessTokenEntity token)", "class_method_signature": "DefaultOAuth2ProviderTokenService.clearExpiredAccessToken(OAuth2AccessTokenEntity token)", "testcase": false, "constructor": false}, {"identifier": "clearExpiredRefreshToken", "parameters": "(OAuth2RefreshTokenEntity token)", "modifiers": "private", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity clearExpiredRefreshToken(OAuth2RefreshTokenEntity token)", "full_signature": "private OAuth2RefreshTokenEntity clearExpiredRefreshToken(OAuth2RefreshTokenEntity token)", "class_method_signature": "DefaultOAuth2ProviderTokenService.clearExpiredRefreshToken(OAuth2RefreshTokenEntity token)", "testcase": false, "constructor": false}, {"identifier": "createAccessToken", "parameters": "(OAuth2Authentication authentication)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity createAccessToken(OAuth2Authentication authentication)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2AccessTokenEntity createAccessToken(OAuth2Authentication authentication)", "class_method_signature": "DefaultOAuth2ProviderTokenService.createAccessToken(OAuth2Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "createRefreshToken", "parameters": "(ClientDetailsEntity client, AuthenticationHolderEntity authHolder)", "modifiers": "private", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity createRefreshToken(ClientDetailsEntity client, AuthenticationHolderEntity authHolder)", "full_signature": "private OAuth2RefreshTokenEntity createRefreshToken(ClientDetailsEntity client, AuthenticationHolderEntity authHolder)", "class_method_signature": "DefaultOAuth2ProviderTokenService.createRefreshToken(ClientDetailsEntity client, AuthenticationHolderEntity authHolder)", "testcase": false, "constructor": false}, {"identifier": "refreshAccessToken", "parameters": "(String refreshTokenValue, TokenRequest authRequest)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2AccessTokenEntity refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "class_method_signature": "DefaultOAuth2ProviderTokenService.refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "testcase": false, "constructor": false}, {"identifier": "loadAuthentication", "parameters": "(String accessTokenValue)", "modifiers": "@Override public", "return": "OAuth2Authentication", "signature": "OAuth2Authentication loadAuthentication(String accessTokenValue)", "full_signature": "@Override public OAuth2Authentication loadAuthentication(String accessTokenValue)", "class_method_signature": "DefaultOAuth2ProviderTokenService.loadAuthentication(String accessTokenValue)", "testcase": false, "constructor": false}, {"identifier": "readAccessToken", "parameters": "(String accessTokenValue)", "modifiers": "@Override public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity readAccessToken(String accessTokenValue)", "full_signature": "@Override public OAuth2AccessTokenEntity readAccessToken(String accessTokenValue)", "class_method_signature": "DefaultOAuth2ProviderTokenService.readAccessToken(String accessTokenValue)", "testcase": false, "constructor": false}, {"identifier": "getAccessToken", "parameters": "(OAuth2Authentication authentication)", "modifiers": "@Override public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity getAccessToken(OAuth2Authentication authentication)", "full_signature": "@Override public OAuth2AccessTokenEntity getAccessToken(OAuth2Authentication authentication)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAccessToken(OAuth2Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "getRefreshToken", "parameters": "(String refreshTokenValue)", "modifiers": "@Override public", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity getRefreshToken(String refreshTokenValue)", "full_signature": "@Override public OAuth2RefreshTokenEntity getRefreshToken(String refreshTokenValue)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getRefreshToken(String refreshTokenValue)", "testcase": false, "constructor": false}, {"identifier": "revokeRefreshToken", "parameters": "(OAuth2RefreshTokenEntity refreshToken)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "void", "signature": "void revokeRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public void revokeRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "class_method_signature": "DefaultOAuth2ProviderTokenService.revokeRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "testcase": false, "constructor": false}, {"identifier": "revokeAccessToken", "parameters": "(OAuth2AccessTokenEntity accessToken)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "void", "signature": "void revokeAccessToken(OAuth2AccessTokenEntity accessToken)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public void revokeAccessToken(OAuth2AccessTokenEntity accessToken)", "class_method_signature": "DefaultOAuth2ProviderTokenService.revokeAccessToken(OAuth2AccessTokenEntity accessToken)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokensForClient", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "List<OAuth2AccessTokenEntity>", "signature": "List<OAuth2AccessTokenEntity> getAccessTokensForClient(ClientDetailsEntity client)", "full_signature": "@Override public List<OAuth2AccessTokenEntity> getAccessTokensForClient(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAccessTokensForClient(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "getRefreshTokensForClient", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "List<OAuth2RefreshTokenEntity>", "signature": "List<OAuth2RefreshTokenEntity> getRefreshTokensForClient(ClientDetailsEntity client)", "full_signature": "@Override public List<OAuth2RefreshTokenEntity> getRefreshTokensForClient(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getRefreshTokensForClient(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "clearExpiredTokens", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearExpiredTokens()", "full_signature": "@Override public void clearExpiredTokens()", "class_method_signature": "DefaultOAuth2ProviderTokenService.clearExpiredTokens()", "testcase": false, "constructor": false}, {"identifier": "saveAccessToken", "parameters": "(OAuth2AccessTokenEntity accessToken)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity saveAccessToken(OAuth2AccessTokenEntity accessToken)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2AccessTokenEntity saveAccessToken(OAuth2AccessTokenEntity accessToken)", "class_method_signature": "DefaultOAuth2ProviderTokenService.saveAccessToken(OAuth2AccessTokenEntity accessToken)", "testcase": false, "constructor": false}, {"identifier": "saveRefreshToken", "parameters": "(OAuth2RefreshTokenEntity refreshToken)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity saveRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2RefreshTokenEntity saveRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "class_method_signature": "DefaultOAuth2ProviderTokenService.saveRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "testcase": false, "constructor": false}, {"identifier": "getTokenEnhancer", "parameters": "()", "modifiers": "public", "return": "TokenEnhancer", "signature": "TokenEnhancer getTokenEnhancer()", "full_signature": "public TokenEnhancer getTokenEnhancer()", "class_method_signature": "DefaultOAuth2ProviderTokenService.getTokenEnhancer()", "testcase": false, "constructor": false}, {"identifier": "setTokenEnhancer", "parameters": "(TokenEnhancer tokenEnhancer)", "modifiers": "public", "return": "void", "signature": "void setTokenEnhancer(TokenEnhancer tokenEnhancer)", "full_signature": "public void setTokenEnhancer(TokenEnhancer tokenEnhancer)", "class_method_signature": "DefaultOAuth2ProviderTokenService.setTokenEnhancer(TokenEnhancer tokenEnhancer)", "testcase": false, "constructor": false}, {"identifier": "getRegistrationAccessTokenForClient", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity getRegistrationAccessTokenForClient(ClientDetailsEntity client)", "full_signature": "@Override public OAuth2AccessTokenEntity getRegistrationAccessTokenForClient(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getRegistrationAccessTokenForClient(ClientDetailsEntity client)", "testcase": false, "constructor": false}], "file": "openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java"}, "focal_method": {"identifier": "refreshAccessToken", "parameters": "(String refreshTokenValue, TokenRequest authRequest)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2AccessTokenEntity", "body": "@Override\n\t@Transactional(value=\"defaultTransactionManager\")\n\tpublic OAuth2AccessTokenEntity refreshAccessToken(String refreshTokenValue, TokenRequest authRequest) throws AuthenticationException {\n\t\t\n\t\tif (Strings.isNullOrEmpty(refreshTokenValue)) {\n\t\t\t// throw an invalid token exception if there's no refresh token value at all\n\t\t\tthrow new InvalidTokenException(\"Invalid refresh token: \" + refreshTokenValue);\n\t\t}\n\n\t\tOAuth2RefreshTokenEntity refreshToken = clearExpiredRefreshToken(tokenRepository.getRefreshTokenByValue(refreshTokenValue));\n\n\t\tif (refreshToken == null) {\n\t\t\t// throw an invalid token exception if we couldn't find the token\n\t\t\tthrow new InvalidTokenException(\"Invalid refresh token: \" + refreshTokenValue);\n\t\t}\n\n\t\tClientDetailsEntity client = refreshToken.getClient();\n\n\t\tAuthenticationHolderEntity authHolder = refreshToken.getAuthenticationHolder();\n\n\t\t// make sure that the client requesting the token is the one who owns the refresh token\n\t\tClientDetailsEntity requestingClient = clientDetailsService.loadClientByClientId(authRequest.getClientId());\n\t\tif (!client.getClientId().equals(requestingClient.getClientId())) {\n\t\t\ttokenRepository.removeRefreshToken(refreshToken);\n\t\t\tthrow new InvalidClientException(\"Client does not own the presented refresh token\");\n\t\t}\n\n\t\t//Make sure this client allows access token refreshing\n\t\tif (!client.isAllowRefresh()) {\n\t\t\tthrow new InvalidClientException(\"Client does not allow refreshing access token!\");\n\t\t}\n\n\t\t// clear out any access tokens\n\t\tif (client.isClearAccessTokensOnRefresh()) {\n\t\t\ttokenRepository.clearAccessTokensForRefreshToken(refreshToken);\n\t\t}\n\n\t\tif (refreshToken.isExpired()) {\n\t\t\ttokenRepository.removeRefreshToken(refreshToken);\n\t\t\tthrow new InvalidTokenException(\"Expired refresh token: \" + refreshTokenValue);\n\t\t}\n\n\t\tOAuth2AccessTokenEntity token = new OAuth2AccessTokenEntity();\n\n\t\t// get the stored scopes from the authentication holder's authorization request; these are the scopes associated with the refresh token\n\t\tSet<String> refreshScopesRequested = new HashSet<>(refreshToken.getAuthenticationHolder().getAuthentication().getOAuth2Request().getScope());\n\t\tSet<SystemScope> refreshScopes = scopeService.fromStrings(refreshScopesRequested);\n\t\t// remove any of the special system scopes\n\t\trefreshScopes = scopeService.removeReservedScopes(refreshScopes);\n\n\t\tSet<String> scopeRequested = authRequest.getScope() == null ? new HashSet<String>() : new HashSet<>(authRequest.getScope());\n\t\tSet<SystemScope> scope = scopeService.fromStrings(scopeRequested);\n\n\t\t// remove any of the special system scopes\n\t\tscope = scopeService.removeReservedScopes(scope);\n\n\t\tif (scope != null && !scope.isEmpty()) {\n\t\t\t// ensure a proper subset of scopes\n\t\t\tif (refreshScopes != null && refreshScopes.containsAll(scope)) {\n\t\t\t\t// set the scope of the new access token if requested\n\t\t\t\ttoken.setScope(scopeService.toStrings(scope));\n\t\t\t} else {\n\t\t\t\tString errorMsg = \"Up-scoping is not allowed.\";\n\t\t\t\tlogger.error(errorMsg);\n\t\t\t\tthrow new InvalidScopeException(errorMsg);\n\t\t\t}\n\t\t} else {\n\t\t\t// otherwise inherit the scope of the refresh token (if it's there -- this can return a null scope set)\n\t\t\ttoken.setScope(scopeService.toStrings(refreshScopes));\n\t\t}\n\n\t\ttoken.setClient(client);\n\n\t\tif (client.getAccessTokenValiditySeconds() != null) {\n\t\t\tDate expiration = new Date(System.currentTimeMillis() + (client.getAccessTokenValiditySeconds() * 1000L));\n\t\t\ttoken.setExpiration(expiration);\n\t\t}\n\n\t\tif (client.isReuseRefreshToken()) {\n\t\t\t// if the client re-uses refresh tokens, do that\n\t\t\ttoken.setRefreshToken(refreshToken);\n\t\t} else {\n\t\t\t// otherwise, make a new refresh token\n\t\t\tOAuth2RefreshTokenEntity newRefresh = createRefreshToken(client, authHolder);\n\t\t\ttoken.setRefreshToken(newRefresh);\n\n\t\t\t// clean up the old refresh token\n\t\t\ttokenRepository.removeRefreshToken(refreshToken);\n\t\t}\n\n\t\ttoken.setAuthenticationHolder(authHolder);\n\n\t\ttokenEnhancer.enhance(token, authHolder.getAuthentication());\n\n\t\ttokenRepository.saveAccessToken(token);\n\n\t\treturn token;\n\t}", "signature": "OAuth2AccessTokenEntity refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2AccessTokenEntity refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "class_method_signature": "DefaultOAuth2ProviderTokenService.refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "clearExpiredRefreshToken", "getRefreshTokenByValue", "getClient", "getAuthenticationHolder", "loadClientByClientId", "getClientId", "equals", "getClientId", "getClientId", "removeRefreshToken", "isAllowRefresh", "isClearAccessTokensOnRefresh", "clearAccessTokensForRefreshToken", "isExpired", "removeRefreshToken", "getScope", "getOAuth2Request", "getAuthentication", "getAuthenticationHolder", "fromStrings", "removeReservedScopes", "getScope", "getScope", "fromStrings", "removeReservedScopes", "isEmpty", "containsAll", "setScope", "toStrings", "error", "setScope", "toStrings", "setClient", "getAccessTokenValiditySeconds", "currentTimeMillis", "getAccessTokenValiditySeconds", "setExpiration", "isReuseRefreshToken", "setRefreshToken", "createRefreshToken", "setRefreshToken", "removeRefreshToken", "setAuthenticationHolder", "enhance", "getAuthentication", "saveAccessToken"]}, "repository": {"repo_id": 2681994, "url": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server", "language": "Java", "is_fork": false, "fork_count": 709, "stargazer_count": 1206, "size": 15055, "license": "licensed"}}