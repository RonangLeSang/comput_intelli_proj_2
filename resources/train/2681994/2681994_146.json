{"test_class": {"identifier": "TestUUIDPairwiseIdentiferService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate PairwiseIdentifierRepository pairwiseIdentifierRepository;", "modifier": "@Mock\n\tprivate", "type": "PairwiseIdentifierRepository", "declarator": "pairwiseIdentifierRepository", "var_name": "pairwiseIdentifierRepository"}, {"original_string": "@InjectMocks\n\tprivate UUIDPairwiseIdentiferService service;", "modifier": "@InjectMocks\n\tprivate", "type": "UUIDPairwiseIdentiferService", "declarator": "service", "var_name": "service"}, {"original_string": "private UserInfo userInfoRegular;", "modifier": "private", "type": "UserInfo", "declarator": "userInfoRegular", "var_name": "userInfoRegular"}, {"original_string": "private ClientDetailsEntity pairwiseClient1;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "pairwiseClient1", "var_name": "pairwiseClient1"}, {"original_string": "private ClientDetailsEntity pairwiseClient2;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "pairwiseClient2", "var_name": "pairwiseClient2"}, {"original_string": "private ClientDetailsEntity pairwiseClient3;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "pairwiseClient3", "var_name": "pairwiseClient3"}, {"original_string": "private ClientDetailsEntity pairwiseClient4;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "pairwiseClient4", "var_name": "pairwiseClient4"}, {"original_string": "private ClientDetailsEntity pairwiseClient5;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "pairwiseClient5", "var_name": "pairwiseClient5"}, {"original_string": "private String regularUsername = \"regular\";", "modifier": "private", "type": "String", "declarator": "regularUsername = \"regular\"", "var_name": "regularUsername"}, {"original_string": "private String regularSub = \"regularSub652ha23b\";", "modifier": "private", "type": "String", "declarator": "regularSub = \"regularSub652ha23b\"", "var_name": "regularSub"}, {"original_string": "private String pairwiseSub = \"pairwise-12-regular-user\";", "modifier": "private", "type": "String", "declarator": "pairwiseSub = \"pairwise-12-regular-user\"", "var_name": "pairwiseSub"}, {"original_string": "private String pairwiseClientId1 = \"pairwiseClient-1-2312\";", "modifier": "private", "type": "String", "declarator": "pairwiseClientId1 = \"pairwiseClient-1-2312\"", "var_name": "pairwiseClientId1"}, {"original_string": "private String pairwiseClientId2 = \"pairwiseClient-2-324416\";", "modifier": "private", "type": "String", "declarator": "pairwiseClientId2 = \"pairwiseClient-2-324416\"", "var_name": "pairwiseClientId2"}, {"original_string": "private String pairwiseClientId3 = \"pairwiseClient-3-154157\";", "modifier": "private", "type": "String", "declarator": "pairwiseClientId3 = \"pairwiseClient-3-154157\"", "var_name": "pairwiseClientId3"}, {"original_string": "private String pairwiseClientId4 = \"pairwiseClient-4-4589723\";", "modifier": "private", "type": "String", "declarator": "pairwiseClientId4 = \"pairwiseClient-4-4589723\"", "var_name": "pairwiseClientId4"}, {"original_string": "private String pairwiseClientId5 = \"pairwiseClient-5-34908713\";", "modifier": "private", "type": "String", "declarator": "pairwiseClientId5 = \"pairwiseClient-5-34908713\"", "var_name": "pairwiseClientId5"}, {"original_string": "private String sectorHost12 = \"sector-identifier-12\";", "modifier": "private", "type": "String", "declarator": "sectorHost12 = \"sector-identifier-12\"", "var_name": "sectorHost12"}, {"original_string": "private String sectorHost3 = \"sector-identifier-3\";", "modifier": "private", "type": "String", "declarator": "sectorHost3 = \"sector-identifier-3\"", "var_name": "sectorHost3"}, {"original_string": "private String clientHost4 = \"client-redirect-4\";", "modifier": "private", "type": "String", "declarator": "clientHost4 = \"client-redirect-4\"", "var_name": "clientHost4"}, {"original_string": "private String clientHost5 = \"client-redirect-5\";", "modifier": "private", "type": "String", "declarator": "clientHost5 = \"client-redirect-5\"", "var_name": "clientHost5"}, {"original_string": "private String sectorIdentifier1 = \"https://\" + sectorHost12 + \"/url\";", "modifier": "private", "type": "String", "declarator": "sectorIdentifier1 = \"https://\" + sectorHost12 + \"/url\"", "var_name": "sectorIdentifier1"}, {"original_string": "private String sectorIdentifier2 = \"https://\" + sectorHost12 + \"/url2\";", "modifier": "private", "type": "String", "declarator": "sectorIdentifier2 = \"https://\" + sectorHost12 + \"/url2\"", "var_name": "sectorIdentifier2"}, {"original_string": "private String sectorIdentifier3 = \"https://\" + sectorHost3 + \"/url\";", "modifier": "private", "type": "String", "declarator": "sectorIdentifier3 = \"https://\" + sectorHost3 + \"/url\"", "var_name": "sectorIdentifier3"}, {"original_string": "private Set<String> pairwiseClient3RedirectUris = ImmutableSet.of(\"https://\" + sectorHost3 + \"/oauth\", \"https://\" + sectorHost3 + \"/other\");", "modifier": "private", "type": "Set<String>", "declarator": "pairwiseClient3RedirectUris = ImmutableSet.of(\"https://\" + sectorHost3 + \"/oauth\", \"https://\" + sectorHost3 + \"/other\")", "var_name": "pairwiseClient3RedirectUris"}, {"original_string": "private Set<String> pairwiseClient4RedirectUris = ImmutableSet.of(\"https://\" + clientHost4 + \"/oauth\");", "modifier": "private", "type": "Set<String>", "declarator": "pairwiseClient4RedirectUris = ImmutableSet.of(\"https://\" + clientHost4 + \"/oauth\")", "var_name": "pairwiseClient4RedirectUris"}, {"original_string": "private Set<String> pairwiseClient5RedirectUris = ImmutableSet.of(\"https://\" + clientHost5 + \"/oauth\", \"https://\" + clientHost5 + \"/other\");", "modifier": "private", "type": "Set<String>", "declarator": "pairwiseClient5RedirectUris = ImmutableSet.of(\"https://\" + clientHost5 + \"/oauth\", \"https://\" + clientHost5 + \"/other\")", "var_name": "pairwiseClient5RedirectUris"}, {"original_string": "private PairwiseIdentifier savedPairwiseIdentifier;", "modifier": "private", "type": "PairwiseIdentifier", "declarator": "savedPairwiseIdentifier", "var_name": "savedPairwiseIdentifier"}], "file": "openid-connect-server/src/test/java/org/mitre/openid/connect/service/impl/TestUUIDPairwiseIdentiferService.java"}, "test_case": {"identifier": "testGetIdentifer_unique", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetIdentifer_unique() {\n\t\tString pairwise1 = service.getIdentifier(userInfoRegular, pairwiseClient1);\n\t\tString pairwise3 = service.getIdentifier(userInfoRegular, pairwiseClient3);\n\t\tString pairwise4 = service.getIdentifier(userInfoRegular, pairwiseClient4);\n\n\t\t// make sure nothing's equal\n\t\tassertNotSame(pairwise1, pairwise3);\n\t\tassertNotSame(pairwise1, pairwise4);\n\t\tassertNotSame(pairwise3, pairwise4);\n\n\t\t// see if the pairwise id's are actual UUIDs\n\t\tUUID uudi1 = UUID.fromString(pairwise1);\n\t\tUUID uudi3 = UUID.fromString(pairwise3);\n\t\tUUID uudi4 = UUID.fromString(pairwise4);\n\n\t}", "signature": "void testGetIdentifer_unique()", "full_signature": "@Test public void testGetIdentifer_unique()", "class_method_signature": "TestUUIDPairwiseIdentiferService.testGetIdentifer_unique()", "testcase": true, "constructor": false, "invocations": ["getIdentifier", "getIdentifier", "getIdentifier", "assertNotSame", "assertNotSame", "assertNotSame", "fromString", "fromString", "fromString"]}, "focal_class": {"identifier": "UUIDPairwiseIdentiferService", "superclass": "", "interfaces": "implements PairwiseIdentiferService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(UUIDPairwiseIdentiferService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(UUIDPairwiseIdentiferService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate PairwiseIdentifierRepository pairwiseIdentifierRepository;", "modifier": "@Autowired\n\tprivate", "type": "PairwiseIdentifierRepository", "declarator": "pairwiseIdentifierRepository", "var_name": "pairwiseIdentifierRepository"}], "methods": [{"identifier": "getIdentifier", "parameters": "(UserInfo userInfo, ClientDetailsEntity client)", "modifiers": "@Override public", "return": "String", "signature": "String getIdentifier(UserInfo userInfo, ClientDetailsEntity client)", "full_signature": "@Override public String getIdentifier(UserInfo userInfo, ClientDetailsEntity client)", "class_method_signature": "UUIDPairwiseIdentiferService.getIdentifier(UserInfo userInfo, ClientDetailsEntity client)", "testcase": false, "constructor": false}], "file": "openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/UUIDPairwiseIdentiferService.java"}, "focal_method": {"identifier": "getIdentifier", "parameters": "(UserInfo userInfo, ClientDetailsEntity client)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getIdentifier(UserInfo userInfo, ClientDetailsEntity client) {\n\n\t\tString sectorIdentifier = null;\n\n\t\tif (!Strings.isNullOrEmpty(client.getSectorIdentifierUri())) {\n\t\t\tUriComponents uri = UriComponentsBuilder.fromUriString(client.getSectorIdentifierUri()).build();\n\t\t\tsectorIdentifier = uri.getHost(); // calculate based on the host component only\n\t\t} else {\n\t\t\tSet<String> redirectUris = client.getRedirectUris();\n\t\t\tUriComponents uri = UriComponentsBuilder.fromUriString(Iterables.getOnlyElement(redirectUris)).build();\n\t\t\tsectorIdentifier = uri.getHost(); // calculate based on the host of the only redirect URI\n\t\t}\n\n\t\tif (sectorIdentifier != null) {\n\t\t\t// if there's a sector identifier, use that for the lookup\n\t\t\tPairwiseIdentifier pairwise = pairwiseIdentifierRepository.getBySectorIdentifier(userInfo.getSub(), sectorIdentifier);\n\n\t\t\tif (pairwise == null) {\n\t\t\t\t// we don't have an identifier, need to make and save one\n\n\t\t\t\tpairwise = new PairwiseIdentifier();\n\t\t\t\tpairwise.setIdentifier(UUID.randomUUID().toString());\n\t\t\t\tpairwise.setUserSub(userInfo.getSub());\n\t\t\t\tpairwise.setSectorIdentifier(sectorIdentifier);\n\n\t\t\t\tpairwiseIdentifierRepository.save(pairwise);\n\t\t\t}\n\n\t\t\treturn pairwise.getIdentifier();\n\t\t} else {\n\n\t\t\treturn null;\n\t\t}\n\t}", "signature": "String getIdentifier(UserInfo userInfo, ClientDetailsEntity client)", "full_signature": "@Override public String getIdentifier(UserInfo userInfo, ClientDetailsEntity client)", "class_method_signature": "UUIDPairwiseIdentiferService.getIdentifier(UserInfo userInfo, ClientDetailsEntity client)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "getSectorIdentifierUri", "build", "fromUriString", "getSectorIdentifierUri", "getHost", "getRedirectUris", "build", "fromUriString", "getOnlyElement", "getHost", "getBySectorIdentifier", "getSub", "setIdentifier", "toString", "randomUUID", "setUserSub", "getSub", "setSectorIdentifier", "save", "getIdentifier"]}, "repository": {"repo_id": 2681994, "url": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server", "language": "Java", "is_fork": false, "fork_count": 709, "stargazer_count": 1206, "size": 15055, "license": "licensed"}}