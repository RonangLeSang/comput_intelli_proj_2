{"test_class": {"identifier": "TestMITREidDataService_1_3", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(TestMITREidDataService_1_3.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TestMITREidDataService_1_3.class)", "var_name": "logger"}, {"original_string": "@Mock\n\tprivate OAuth2ClientRepository clientRepository;", "modifier": "@Mock\n\tprivate", "type": "OAuth2ClientRepository", "declarator": "clientRepository", "var_name": "clientRepository"}, {"original_string": "@Mock\n\tprivate ApprovedSiteRepository approvedSiteRepository;", "modifier": "@Mock\n\tprivate", "type": "ApprovedSiteRepository", "declarator": "approvedSiteRepository", "var_name": "approvedSiteRepository"}, {"original_string": "@Mock\n\tprivate WhitelistedSiteRepository wlSiteRepository;", "modifier": "@Mock\n\tprivate", "type": "WhitelistedSiteRepository", "declarator": "wlSiteRepository", "var_name": "wlSiteRepository"}, {"original_string": "@Mock\n\tprivate BlacklistedSiteRepository blSiteRepository;", "modifier": "@Mock\n\tprivate", "type": "BlacklistedSiteRepository", "declarator": "blSiteRepository", "var_name": "blSiteRepository"}, {"original_string": "@Mock\n\tprivate AuthenticationHolderRepository authHolderRepository;", "modifier": "@Mock\n\tprivate", "type": "AuthenticationHolderRepository", "declarator": "authHolderRepository", "var_name": "authHolderRepository"}, {"original_string": "@Mock\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Mock\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Mock\n\tprivate SystemScopeRepository sysScopeRepository;", "modifier": "@Mock\n\tprivate", "type": "SystemScopeRepository", "declarator": "sysScopeRepository", "var_name": "sysScopeRepository"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<OAuth2RefreshTokenEntity> capturedRefreshTokens;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<OAuth2RefreshTokenEntity>", "declarator": "capturedRefreshTokens", "var_name": "capturedRefreshTokens"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<OAuth2AccessTokenEntity> capturedAccessTokens;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<OAuth2AccessTokenEntity>", "declarator": "capturedAccessTokens", "var_name": "capturedAccessTokens"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<ClientDetailsEntity> capturedClients;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<ClientDetailsEntity>", "declarator": "capturedClients", "var_name": "capturedClients"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<BlacklistedSite> capturedBlacklistedSites;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<BlacklistedSite>", "declarator": "capturedBlacklistedSites", "var_name": "capturedBlacklistedSites"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<WhitelistedSite> capturedWhitelistedSites;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<WhitelistedSite>", "declarator": "capturedWhitelistedSites", "var_name": "capturedWhitelistedSites"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<ApprovedSite> capturedApprovedSites;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<ApprovedSite>", "declarator": "capturedApprovedSites", "var_name": "capturedApprovedSites"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<AuthenticationHolderEntity> capturedAuthHolders;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<AuthenticationHolderEntity>", "declarator": "capturedAuthHolders", "var_name": "capturedAuthHolders"}, {"original_string": "@Captor\n\tprivate ArgumentCaptor<SystemScope> capturedScope;", "modifier": "@Captor\n\tprivate", "type": "ArgumentCaptor<SystemScope>", "declarator": "capturedScope", "var_name": "capturedScope"}, {"original_string": "@InjectMocks\n\tprivate MITREidDataService_1_3 dataService;", "modifier": "@InjectMocks\n\tprivate", "type": "MITREidDataService_1_3", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "private DateFormatter formatter;", "modifier": "private", "type": "DateFormatter", "declarator": "formatter", "var_name": "formatter"}], "file": "openid-connect-server/src/test/java/org/mitre/openid/connect/service/impl/TestMITREidDataService_1_3.java"}, "test_case": {"identifier": "testExportRefreshTokens", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExportRefreshTokens() throws IOException, ParseException {\n\t\tString expiration1 = \"2014-09-10T22:49:44.090+0000\";\n\t\tDate expirationDate1 = formatter.parse(expiration1, Locale.ENGLISH);\n\n\t\tClientDetailsEntity mockedClient1 = mock(ClientDetailsEntity.class);\n\t\twhen(mockedClient1.getClientId()).thenReturn(\"mocked_client_1\");\n\n\t\tAuthenticationHolderEntity mockedAuthHolder1 = mock(AuthenticationHolderEntity.class);\n\t\twhen(mockedAuthHolder1.getId()).thenReturn(1L);\n\n\t\tOAuth2RefreshTokenEntity token1 = new OAuth2RefreshTokenEntity();\n\t\ttoken1.setId(1L);\n\t\ttoken1.setClient(mockedClient1);\n\t\ttoken1.setExpiration(expirationDate1);\n\t\ttoken1.setJwt(JWTParser.parse(\"eyJhbGciOiJub25lIn0.eyJqdGkiOiJmOTg4OWQyOS0xMTk1LTQ4ODEtODgwZC1lZjVlYzAwY2Y4NDIifQ.\"));\n\t\ttoken1.setAuthenticationHolder(mockedAuthHolder1);\n\n\t\tString expiration2 = \"2015-01-07T18:31:50.079+0000\";\n\t\tDate expirationDate2 = formatter.parse(expiration2, Locale.ENGLISH);\n\n\t\tClientDetailsEntity mockedClient2 = mock(ClientDetailsEntity.class);\n\t\twhen(mockedClient2.getClientId()).thenReturn(\"mocked_client_2\");\n\n\t\tAuthenticationHolderEntity mockedAuthHolder2 = mock(AuthenticationHolderEntity.class);\n\t\twhen(mockedAuthHolder2.getId()).thenReturn(2L);\n\n\t\tOAuth2RefreshTokenEntity token2 = new OAuth2RefreshTokenEntity();\n\t\ttoken2.setId(2L);\n\t\ttoken2.setClient(mockedClient2);\n\t\ttoken2.setExpiration(expirationDate2);\n\t\ttoken2.setJwt(JWTParser.parse(\"eyJhbGciOiJub25lIn0.eyJqdGkiOiJlYmEyYjc3My0xNjAzLTRmNDAtOWQ3MS1hMGIxZDg1OWE2MDAifQ.\"));\n\t\ttoken2.setAuthenticationHolder(mockedAuthHolder2);\n\n\t\tSet<OAuth2RefreshTokenEntity> allRefreshTokens = ImmutableSet.of(token1, token2);\n\n\t\tMockito.when(clientRepository.getAllClients()).thenReturn(new HashSet<ClientDetailsEntity>());\n\t\tMockito.when(approvedSiteRepository.getAll()).thenReturn(new HashSet<ApprovedSite>());\n\t\tMockito.when(wlSiteRepository.getAll()).thenReturn(new HashSet<WhitelistedSite>());\n\t\tMockito.when(blSiteRepository.getAll()).thenReturn(new HashSet<BlacklistedSite>());\n\t\tMockito.when(authHolderRepository.getAll()).thenReturn(new ArrayList<AuthenticationHolderEntity>());\n\t\tMockito.when(tokenRepository.getAllAccessTokens()).thenReturn(new HashSet<OAuth2AccessTokenEntity>());\n\t\tMockito.when(tokenRepository.getAllRefreshTokens()).thenReturn(allRefreshTokens);\n\t\tMockito.when(sysScopeRepository.getAll()).thenReturn(new HashSet<SystemScope>());\n\n\t\t// do the data export\n\t\tStringWriter stringWriter = new StringWriter();\n\t\tJsonWriter writer = new JsonWriter(stringWriter);\n\t\twriter.beginObject();\n\t\tdataService.exportData(writer);\n\t\twriter.endObject();\n\t\twriter.close();\n\n\t\t// parse the output as a JSON object for testing\n\t\tJsonElement elem = new JsonParser().parse(stringWriter.toString());\n\t\tJsonObject root = elem.getAsJsonObject();\n\n\t\t// make sure the root is there\n\t\tassertThat(root.has(MITREidDataService.MITREID_CONNECT_1_3), is(true));\n\n\t\tJsonObject config = root.get(MITREidDataService.MITREID_CONNECT_1_3).getAsJsonObject();\n\n\t\t// make sure all the root elements are there\n\t\tassertThat(config.has(MITREidDataService.CLIENTS), is(true));\n\t\tassertThat(config.has(MITREidDataService.GRANTS), is(true));\n\t\tassertThat(config.has(MITREidDataService.WHITELISTEDSITES), is(true));\n\t\tassertThat(config.has(MITREidDataService.BLACKLISTEDSITES), is(true));\n\t\tassertThat(config.has(MITREidDataService.REFRESHTOKENS), is(true));\n\t\tassertThat(config.has(MITREidDataService.ACCESSTOKENS), is(true));\n\t\tassertThat(config.has(MITREidDataService.SYSTEMSCOPES), is(true));\n\t\tassertThat(config.has(MITREidDataService.AUTHENTICATIONHOLDERS), is(true));\n\n\t\t// make sure the root elements are all arrays\n\t\tassertThat(config.get(MITREidDataService.CLIENTS).isJsonArray(), is(true));\n\t\tassertThat(config.get(MITREidDataService.GRANTS).isJsonArray(), is(true));\n\t\tassertThat(config.get(MITREidDataService.WHITELISTEDSITES).isJsonArray(), is(true));\n\t\tassertThat(config.get(MITREidDataService.BLACKLISTEDSITES).isJsonArray(), is(true));\n\t\tassertThat(config.get(MITREidDataService.REFRESHTOKENS).isJsonArray(), is(true));\n\t\tassertThat(config.get(MITREidDataService.ACCESSTOKENS).isJsonArray(), is(true));\n\t\tassertThat(config.get(MITREidDataService.SYSTEMSCOPES).isJsonArray(), is(true));\n\t\tassertThat(config.get(MITREidDataService.AUTHENTICATIONHOLDERS).isJsonArray(), is(true));\n\n\n\t\t// check our refresh token list (this test)\n\t\tJsonArray refreshTokens = config.get(MITREidDataService.REFRESHTOKENS).getAsJsonArray();\n\n\t\tassertThat(refreshTokens.size(), is(2));\n\t\t// check for both of our refresh tokens in turn\n\t\tSet<OAuth2RefreshTokenEntity> checked = new HashSet<>();\n\t\tfor (JsonElement e : refreshTokens) {\n\t\t\tassertThat(e.isJsonObject(), is(true));\n\t\t\tJsonObject token = e.getAsJsonObject();\n\n\t\t\tOAuth2RefreshTokenEntity compare = null;\n\t\t\tif (token.get(\"id\").getAsLong() == token1.getId()) {\n\t\t\t\tcompare = token1;\n\t\t\t} else if (token.get(\"id\").getAsLong() == token2.getId()) {\n\t\t\t\tcompare = token2;\n\t\t\t}\n\n\t\t\tif (compare == null) {\n\t\t\t\tfail(\"Could not find matching id: \" + token.get(\"id\").getAsString());\n\t\t\t} else {\n\t\t\t\tassertThat(token.get(\"id\").getAsLong(), equalTo(compare.getId()));\n\t\t\t\tassertThat(token.get(\"clientId\").getAsString(), equalTo(compare.getClient().getClientId()));\n\t\t\t\tassertThat(token.get(\"expiration\").getAsString(), equalTo(formatter.print(compare.getExpiration(), Locale.ENGLISH)));\n\t\t\t\tassertThat(token.get(\"value\").getAsString(), equalTo(compare.getValue()));\n\t\t\t\tassertThat(token.get(\"authenticationHolderId\").getAsLong(), equalTo(compare.getAuthenticationHolder().getId()));\n\t\t\t\tchecked.add(compare);\n\t\t\t}\n\t\t}\n\t\t// make sure all of our refresh tokens were found\n\t\tassertThat(checked.containsAll(allRefreshTokens), is(true));\n\t}", "signature": "void testExportRefreshTokens()", "full_signature": "@Test public void testExportRefreshTokens()", "class_method_signature": "TestMITREidDataService_1_3.testExportRefreshTokens()", "testcase": true, "constructor": false, "invocations": ["parse", "mock", "thenReturn", "when", "getClientId", "mock", "thenReturn", "when", "getId", "setId", "setClient", "setExpiration", "setJwt", "parse", "setAuthenticationHolder", "parse", "mock", "thenReturn", "when", "getClientId", "mock", "thenReturn", "when", "getId", "setId", "setClient", "setExpiration", "setJwt", "parse", "setAuthenticationHolder", "of", "thenReturn", "when", "getAllClients", "thenReturn", "when", "getAll", "thenReturn", "when", "getAll", "thenReturn", "when", "getAll", "thenReturn", "when", "getAll", "thenReturn", "when", "getAllAccessTokens", "thenReturn", "when", "getAllRefreshTokens", "thenReturn", "when", "getAll", "beginObject", "exportData", "endObject", "close", "parse", "toString", "getAsJsonObject", "assertThat", "has", "is", "getAsJsonObject", "get", "assertThat", "has", "is", "assertThat", "has", "is", "assertThat", "has", "is", "assertThat", "has", "is", "assertThat", "has", "is", "assertThat", "has", "is", "assertThat", "has", "is", "assertThat", "has", "is", "assertThat", "isJsonArray", "get", "is", "assertThat", "isJsonArray", "get", "is", "assertThat", "isJsonArray", "get", "is", "assertThat", "isJsonArray", "get", "is", "assertThat", "isJsonArray", "get", "is", "assertThat", "isJsonArray", "get", "is", "assertThat", "isJsonArray", "get", "is", "assertThat", "isJsonArray", "get", "is", "getAsJsonArray", "get", "assertThat", "size", "is", "assertThat", "isJsonObject", "is", "getAsJsonObject", "getAsLong", "get", "getId", "getAsLong", "get", "getId", "fail", "getAsString", "get", "assertThat", "getAsLong", "get", "equalTo", "getId", "assertThat", "getAsString", "get", "equalTo", "getClientId", "getClient", "assertThat", "getAsString", "get", "equalTo", "print", "getExpiration", "assertThat", "getAsString", "get", "equalTo", "getValue", "assertThat", "getAsLong", "get", "equalTo", "getId", "getAuthenticationHolder", "add", "assertThat", "containsAll", "is"]}, "focal_class": {"identifier": "MITREidDataService_1_3", "superclass": "extends MITREidDataServiceSupport", "interfaces": "implements MITREidDataService", "fields": [{"original_string": "private static final String DEFAULT_SCOPE = \"defaultScope\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SCOPE = \"defaultScope\"", "var_name": "DEFAULT_SCOPE"}, {"original_string": "private static final String RESTRICTED = \"restricted\";", "modifier": "private static final", "type": "String", "declarator": "RESTRICTED = \"restricted\"", "var_name": "RESTRICTED"}, {"original_string": "private static final String ICON = \"icon\";", "modifier": "private static final", "type": "String", "declarator": "ICON = \"icon\"", "var_name": "ICON"}, {"original_string": "private static final String DYNAMICALLY_REGISTERED = \"dynamicallyRegistered\";", "modifier": "private static final", "type": "String", "declarator": "DYNAMICALLY_REGISTERED = \"dynamicallyRegistered\"", "var_name": "DYNAMICALLY_REGISTERED"}, {"original_string": "private static final String CLEAR_ACCESS_TOKENS_ON_REFRESH = \"clearAccessTokensOnRefresh\";", "modifier": "private static final", "type": "String", "declarator": "CLEAR_ACCESS_TOKENS_ON_REFRESH = \"clearAccessTokensOnRefresh\"", "var_name": "CLEAR_ACCESS_TOKENS_ON_REFRESH"}, {"original_string": "private static final String REUSE_REFRESH_TOKEN = \"reuseRefreshToken\";", "modifier": "private static final", "type": "String", "declarator": "REUSE_REFRESH_TOKEN = \"reuseRefreshToken\"", "var_name": "REUSE_REFRESH_TOKEN"}, {"original_string": "private static final String ALLOW_INTROSPECTION = \"allowIntrospection\";", "modifier": "private static final", "type": "String", "declarator": "ALLOW_INTROSPECTION = \"allowIntrospection\"", "var_name": "ALLOW_INTROSPECTION"}, {"original_string": "private static final String DESCRIPTION = \"description\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"description\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final String REQUEST_URIS = \"requestUris\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_URIS = \"requestUris\"", "var_name": "REQUEST_URIS"}, {"original_string": "private static final String POST_LOGOUT_REDIRECT_URI = \"postLogoutRedirectUri\";", "modifier": "private static final", "type": "String", "declarator": "POST_LOGOUT_REDIRECT_URI = \"postLogoutRedirectUri\"", "var_name": "POST_LOGOUT_REDIRECT_URI"}, {"original_string": "private static final String INTITATE_LOGIN_URI = \"intitateLoginUri\";", "modifier": "private static final", "type": "String", "declarator": "INTITATE_LOGIN_URI = \"intitateLoginUri\"", "var_name": "INTITATE_LOGIN_URI"}, {"original_string": "private static final String DEFAULT_ACR_VALUES = \"defaultACRValues\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ACR_VALUES = \"defaultACRValues\"", "var_name": "DEFAULT_ACR_VALUES"}, {"original_string": "private static final String REQUIRE_AUTH_TIME = \"requireAuthTime\";", "modifier": "private static final", "type": "String", "declarator": "REQUIRE_AUTH_TIME = \"requireAuthTime\"", "var_name": "REQUIRE_AUTH_TIME"}, {"original_string": "private static final String DEFAULT_MAX_AGE = \"defaultMaxAge\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_MAX_AGE = \"defaultMaxAge\"", "var_name": "DEFAULT_MAX_AGE"}, {"original_string": "private static final String TOKEN_ENDPOINT_AUTH_SIGNING_ALG = \"tokenEndpointAuthSigningAlg\";", "modifier": "private static final", "type": "String", "declarator": "TOKEN_ENDPOINT_AUTH_SIGNING_ALG = \"tokenEndpointAuthSigningAlg\"", "var_name": "TOKEN_ENDPOINT_AUTH_SIGNING_ALG"}, {"original_string": "private static final String USER_INFO_ENCRYPTED_RESPONSE_ENC = \"userInfoEncryptedResponseEnc\";", "modifier": "private static final", "type": "String", "declarator": "USER_INFO_ENCRYPTED_RESPONSE_ENC = \"userInfoEncryptedResponseEnc\"", "var_name": "USER_INFO_ENCRYPTED_RESPONSE_ENC"}, {"original_string": "private static final String USER_INFO_ENCRYPTED_RESPONSE_ALG = \"userInfoEncryptedResponseAlg\";", "modifier": "private static final", "type": "String", "declarator": "USER_INFO_ENCRYPTED_RESPONSE_ALG = \"userInfoEncryptedResponseAlg\"", "var_name": "USER_INFO_ENCRYPTED_RESPONSE_ALG"}, {"original_string": "private static final String USER_INFO_SIGNED_RESPONSE_ALG = \"userInfoSignedResponseAlg\";", "modifier": "private static final", "type": "String", "declarator": "USER_INFO_SIGNED_RESPONSE_ALG = \"userInfoSignedResponseAlg\"", "var_name": "USER_INFO_SIGNED_RESPONSE_ALG"}, {"original_string": "private static final String ID_TOKEN_ENCRYPTED_RESPONSE_ENC = \"idTokenEncryptedResponseEnc\";", "modifier": "private static final", "type": "String", "declarator": "ID_TOKEN_ENCRYPTED_RESPONSE_ENC = \"idTokenEncryptedResponseEnc\"", "var_name": "ID_TOKEN_ENCRYPTED_RESPONSE_ENC"}, {"original_string": "private static final String ID_TOKEN_ENCRYPTED_RESPONSE_ALG = \"idTokenEncryptedResponseAlg\";", "modifier": "private static final", "type": "String", "declarator": "ID_TOKEN_ENCRYPTED_RESPONSE_ALG = \"idTokenEncryptedResponseAlg\"", "var_name": "ID_TOKEN_ENCRYPTED_RESPONSE_ALG"}, {"original_string": "private static final String ID_TOKEN_SIGNED_RESPONSE_ALG = \"idTokenSignedResponseAlg\";", "modifier": "private static final", "type": "String", "declarator": "ID_TOKEN_SIGNED_RESPONSE_ALG = \"idTokenSignedResponseAlg\"", "var_name": "ID_TOKEN_SIGNED_RESPONSE_ALG"}, {"original_string": "private static final String REQUEST_OBJECT_SIGNING_ALG = \"requestObjectSigningAlg\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_OBJECT_SIGNING_ALG = \"requestObjectSigningAlg\"", "var_name": "REQUEST_OBJECT_SIGNING_ALG"}, {"original_string": "private static final String SUBJECT_TYPE = \"subjectType\";", "modifier": "private static final", "type": "String", "declarator": "SUBJECT_TYPE = \"subjectType\"", "var_name": "SUBJECT_TYPE"}, {"original_string": "private static final String SECTOR_IDENTIFIER_URI = \"sectorIdentifierUri\";", "modifier": "private static final", "type": "String", "declarator": "SECTOR_IDENTIFIER_URI = \"sectorIdentifierUri\"", "var_name": "SECTOR_IDENTIFIER_URI"}, {"original_string": "private static final String APPLICATION_TYPE = \"applicationType\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_TYPE = \"applicationType\"", "var_name": "APPLICATION_TYPE"}, {"original_string": "private static final String JWKS = \"jwks\";", "modifier": "private static final", "type": "String", "declarator": "JWKS = \"jwks\"", "var_name": "JWKS"}, {"original_string": "private static final String JWKS_URI = \"jwksUri\";", "modifier": "private static final", "type": "String", "declarator": "JWKS_URI = \"jwksUri\"", "var_name": "JWKS_URI"}, {"original_string": "private static final String POLICY_URI = \"policyUri\";", "modifier": "private static final", "type": "String", "declarator": "POLICY_URI = \"policyUri\"", "var_name": "POLICY_URI"}, {"original_string": "private static final String GRANT_TYPES = \"grantTypes\";", "modifier": "private static final", "type": "String", "declarator": "GRANT_TYPES = \"grantTypes\"", "var_name": "GRANT_TYPES"}, {"original_string": "private static final String TOKEN_ENDPOINT_AUTH_METHOD = \"tokenEndpointAuthMethod\";", "modifier": "private static final", "type": "String", "declarator": "TOKEN_ENDPOINT_AUTH_METHOD = \"tokenEndpointAuthMethod\"", "var_name": "TOKEN_ENDPOINT_AUTH_METHOD"}, {"original_string": "private static final String TOS_URI = \"tosUri\";", "modifier": "private static final", "type": "String", "declarator": "TOS_URI = \"tosUri\"", "var_name": "TOS_URI"}, {"original_string": "private static final String CONTACTS = \"contacts\";", "modifier": "private static final", "type": "String", "declarator": "CONTACTS = \"contacts\"", "var_name": "CONTACTS"}, {"original_string": "private static final String LOGO_URI = \"logoUri\";", "modifier": "private static final", "type": "String", "declarator": "LOGO_URI = \"logoUri\"", "var_name": "LOGO_URI"}, {"original_string": "private static final String REDIRECT_URIS = \"redirectUris\";", "modifier": "private static final", "type": "String", "declarator": "REDIRECT_URIS = \"redirectUris\"", "var_name": "REDIRECT_URIS"}, {"original_string": "private static final String REFRESH_TOKEN_VALIDITY_SECONDS = \"refreshTokenValiditySeconds\";", "modifier": "private static final", "type": "String", "declarator": "REFRESH_TOKEN_VALIDITY_SECONDS = \"refreshTokenValiditySeconds\"", "var_name": "REFRESH_TOKEN_VALIDITY_SECONDS"}, {"original_string": "private static final String ACCESS_TOKEN_VALIDITY_SECONDS = \"accessTokenValiditySeconds\";", "modifier": "private static final", "type": "String", "declarator": "ACCESS_TOKEN_VALIDITY_SECONDS = \"accessTokenValiditySeconds\"", "var_name": "ACCESS_TOKEN_VALIDITY_SECONDS"}, {"original_string": "private static final String ID_TOKEN_VALIDITY_SECONDS = \"idTokenValiditySeconds\";", "modifier": "private static final", "type": "String", "declarator": "ID_TOKEN_VALIDITY_SECONDS = \"idTokenValiditySeconds\"", "var_name": "ID_TOKEN_VALIDITY_SECONDS"}, {"original_string": "private static final String DEVICE_CODE_VALIDITY_SECONDS = \"deviceCodeValiditySeconds\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_CODE_VALIDITY_SECONDS = \"deviceCodeValiditySeconds\"", "var_name": "DEVICE_CODE_VALIDITY_SECONDS"}, {"original_string": "private static final String SECRET = \"secret\";", "modifier": "private static final", "type": "String", "declarator": "SECRET = \"secret\"", "var_name": "SECRET"}, {"original_string": "private static final String URI = \"uri\";", "modifier": "private static final", "type": "String", "declarator": "URI = \"uri\"", "var_name": "URI"}, {"original_string": "private static final String CREATOR_USER_ID = \"creatorUserId\";", "modifier": "private static final", "type": "String", "declarator": "CREATOR_USER_ID = \"creatorUserId\"", "var_name": "CREATOR_USER_ID"}, {"original_string": "private static final String APPROVED_ACCESS_TOKENS = \"approvedAccessTokens\";", "modifier": "private static final", "type": "String", "declarator": "APPROVED_ACCESS_TOKENS = \"approvedAccessTokens\"", "var_name": "APPROVED_ACCESS_TOKENS"}, {"original_string": "private static final String ALLOWED_SCOPES = \"allowedScopes\";", "modifier": "private static final", "type": "String", "declarator": "ALLOWED_SCOPES = \"allowedScopes\"", "var_name": "ALLOWED_SCOPES"}, {"original_string": "private static final String USER_ID = \"userId\";", "modifier": "private static final", "type": "String", "declarator": "USER_ID = \"userId\"", "var_name": "USER_ID"}, {"original_string": "private static final String TIMEOUT_DATE = \"timeoutDate\";", "modifier": "private static final", "type": "String", "declarator": "TIMEOUT_DATE = \"timeoutDate\"", "var_name": "TIMEOUT_DATE"}, {"original_string": "private static final String CREATION_DATE = \"creationDate\";", "modifier": "private static final", "type": "String", "declarator": "CREATION_DATE = \"creationDate\"", "var_name": "CREATION_DATE"}, {"original_string": "private static final String ACCESS_DATE = \"accessDate\";", "modifier": "private static final", "type": "String", "declarator": "ACCESS_DATE = \"accessDate\"", "var_name": "ACCESS_DATE"}, {"original_string": "private static final String AUTHENTICATED = \"authenticated\";", "modifier": "private static final", "type": "String", "declarator": "AUTHENTICATED = \"authenticated\"", "var_name": "AUTHENTICATED"}, {"original_string": "private static final String SOURCE_CLASS = \"sourceClass\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_CLASS = \"sourceClass\"", "var_name": "SOURCE_CLASS"}, {"original_string": "private static final String NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"name\"", "var_name": "NAME"}, {"original_string": "private static final String SAVED_USER_AUTHENTICATION = \"savedUserAuthentication\";", "modifier": "private static final", "type": "String", "declarator": "SAVED_USER_AUTHENTICATION = \"savedUserAuthentication\"", "var_name": "SAVED_USER_AUTHENTICATION"}, {"original_string": "private static final String EXTENSIONS = \"extensions\";", "modifier": "private static final", "type": "String", "declarator": "EXTENSIONS = \"extensions\"", "var_name": "EXTENSIONS"}, {"original_string": "private static final String RESPONSE_TYPES = \"responseTypes\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_TYPES = \"responseTypes\"", "var_name": "RESPONSE_TYPES"}, {"original_string": "private static final String REDIRECT_URI = \"redirectUri\";", "modifier": "private static final", "type": "String", "declarator": "REDIRECT_URI = \"redirectUri\"", "var_name": "REDIRECT_URI"}, {"original_string": "private static final String APPROVED = \"approved\";", "modifier": "private static final", "type": "String", "declarator": "APPROVED = \"approved\"", "var_name": "APPROVED"}, {"original_string": "private static final String AUTHORITIES = \"authorities\";", "modifier": "private static final", "type": "String", "declarator": "AUTHORITIES = \"authorities\"", "var_name": "AUTHORITIES"}, {"original_string": "private static final String RESOURCE_IDS = \"resourceIds\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_IDS = \"resourceIds\"", "var_name": "RESOURCE_IDS"}, {"original_string": "private static final String REQUEST_PARAMETERS = \"requestParameters\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_PARAMETERS = \"requestParameters\"", "var_name": "REQUEST_PARAMETERS"}, {"original_string": "private static final String TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}, {"original_string": "private static final String SCOPE = \"scope\";", "modifier": "private static final", "type": "String", "declarator": "SCOPE = \"scope\"", "var_name": "SCOPE"}, {"original_string": "private static final String REFRESH_TOKEN_ID = \"refreshTokenId\";", "modifier": "private static final", "type": "String", "declarator": "REFRESH_TOKEN_ID = \"refreshTokenId\"", "var_name": "REFRESH_TOKEN_ID"}, {"original_string": "private static final String VALUE = \"value\";", "modifier": "private static final", "type": "String", "declarator": "VALUE = \"value\"", "var_name": "VALUE"}, {"original_string": "private static final String AUTHENTICATION_HOLDER_ID = \"authenticationHolderId\";", "modifier": "private static final", "type": "String", "declarator": "AUTHENTICATION_HOLDER_ID = \"authenticationHolderId\"", "var_name": "AUTHENTICATION_HOLDER_ID"}, {"original_string": "private static final String CLIENT_ID = \"clientId\";", "modifier": "private static final", "type": "String", "declarator": "CLIENT_ID = \"clientId\"", "var_name": "CLIENT_ID"}, {"original_string": "private static final String EXPIRATION = \"expiration\";", "modifier": "private static final", "type": "String", "declarator": "EXPIRATION = \"expiration\"", "var_name": "EXPIRATION"}, {"original_string": "private static final String CLAIMS_REDIRECT_URIS = \"claimsRedirectUris\";", "modifier": "private static final", "type": "String", "declarator": "CLAIMS_REDIRECT_URIS = \"claimsRedirectUris\"", "var_name": "CLAIMS_REDIRECT_URIS"}, {"original_string": "private static final String ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"id\"", "var_name": "ID"}, {"original_string": "private static final String CODE_CHALLENGE_METHOD = \"codeChallengeMethod\";", "modifier": "private static final", "type": "String", "declarator": "CODE_CHALLENGE_METHOD = \"codeChallengeMethod\"", "var_name": "CODE_CHALLENGE_METHOD"}, {"original_string": "private static final String SOFTWARE_STATEMENT = \"softwareStatement\";", "modifier": "private static final", "type": "String", "declarator": "SOFTWARE_STATEMENT = \"softwareStatement\"", "var_name": "SOFTWARE_STATEMENT"}, {"original_string": "private static final String SOFTWARE_VERSION = \"softwareVersion\";", "modifier": "private static final", "type": "String", "declarator": "SOFTWARE_VERSION = \"softwareVersion\"", "var_name": "SOFTWARE_VERSION"}, {"original_string": "private static final String SOFTWARE_ID = \"softwareId\";", "modifier": "private static final", "type": "String", "declarator": "SOFTWARE_ID = \"softwareId\"", "var_name": "SOFTWARE_ID"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(MITREidDataService_1_3.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MITREidDataService_1_3.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate OAuth2ClientRepository clientRepository;", "modifier": "@Autowired\n\tprivate", "type": "OAuth2ClientRepository", "declarator": "clientRepository", "var_name": "clientRepository"}, {"original_string": "@Autowired\n\tprivate ApprovedSiteRepository approvedSiteRepository;", "modifier": "@Autowired\n\tprivate", "type": "ApprovedSiteRepository", "declarator": "approvedSiteRepository", "var_name": "approvedSiteRepository"}, {"original_string": "@Autowired\n\tprivate WhitelistedSiteRepository wlSiteRepository;", "modifier": "@Autowired\n\tprivate", "type": "WhitelistedSiteRepository", "declarator": "wlSiteRepository", "var_name": "wlSiteRepository"}, {"original_string": "@Autowired\n\tprivate BlacklistedSiteRepository blSiteRepository;", "modifier": "@Autowired\n\tprivate", "type": "BlacklistedSiteRepository", "declarator": "blSiteRepository", "var_name": "blSiteRepository"}, {"original_string": "@Autowired\n\tprivate AuthenticationHolderRepository authHolderRepository;", "modifier": "@Autowired\n\tprivate", "type": "AuthenticationHolderRepository", "declarator": "authHolderRepository", "var_name": "authHolderRepository"}, {"original_string": "@Autowired\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Autowired\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Autowired\n\tprivate SystemScopeRepository sysScopeRepository;", "modifier": "@Autowired\n\tprivate", "type": "SystemScopeRepository", "declarator": "sysScopeRepository", "var_name": "sysScopeRepository"}, {"original_string": "@Autowired(required = false)\n\tprivate List<MITREidDataServiceExtension> extensions = Collections.emptyList();", "modifier": "@Autowired(required = false)\n\tprivate", "type": "List<MITREidDataServiceExtension>", "declarator": "extensions = Collections.emptyList()", "var_name": "extensions"}, {"original_string": "private static final String THIS_VERSION = MITREID_CONNECT_1_3;", "modifier": "private static final", "type": "String", "declarator": "THIS_VERSION = MITREID_CONNECT_1_3", "var_name": "THIS_VERSION"}, {"original_string": "private MITREidDataServiceMaps maps = new MITREidDataServiceMaps();", "modifier": "private", "type": "MITREidDataServiceMaps", "declarator": "maps = new MITREidDataServiceMaps()", "var_name": "maps"}], "methods": [{"identifier": "supportsVersion", "parameters": "(String version)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsVersion(String version)", "full_signature": "@Override public boolean supportsVersion(String version)", "class_method_signature": "MITREidDataService_1_3.supportsVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "exportData", "parameters": "(JsonWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void exportData(JsonWriter writer)", "full_signature": "@Override public void exportData(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.exportData(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeRefreshTokens", "parameters": "(JsonWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeRefreshTokens(JsonWriter writer)", "full_signature": "private void writeRefreshTokens(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.writeRefreshTokens(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeAccessTokens", "parameters": "(JsonWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeAccessTokens(JsonWriter writer)", "full_signature": "private void writeAccessTokens(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.writeAccessTokens(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeAuthenticationHolders", "parameters": "(JsonWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeAuthenticationHolders(JsonWriter writer)", "full_signature": "private void writeAuthenticationHolders(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.writeAuthenticationHolders(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeGrants", "parameters": "(JsonWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeGrants(JsonWriter writer)", "full_signature": "private void writeGrants(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.writeGrants(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeWhitelistedSites", "parameters": "(JsonWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeWhitelistedSites(JsonWriter writer)", "full_signature": "private void writeWhitelistedSites(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.writeWhitelistedSites(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeBlacklistedSites", "parameters": "(JsonWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeBlacklistedSites(JsonWriter writer)", "full_signature": "private void writeBlacklistedSites(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.writeBlacklistedSites(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeClients", "parameters": "(JsonWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeClients(JsonWriter writer)", "full_signature": "private void writeClients(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.writeClients(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeSystemScopes", "parameters": "(JsonWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeSystemScopes(JsonWriter writer)", "full_signature": "private void writeSystemScopes(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.writeSystemScopes(JsonWriter writer)", "testcase": false, "constructor": false}, {"identifier": "importData", "parameters": "(JsonReader reader)", "modifiers": "@Override public", "return": "void", "signature": "void importData(JsonReader reader)", "full_signature": "@Override public void importData(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.importData(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readRefreshTokens", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readRefreshTokens(JsonReader reader)", "full_signature": "private void readRefreshTokens(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readRefreshTokens(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readAccessTokens", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readAccessTokens(JsonReader reader)", "full_signature": "private void readAccessTokens(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readAccessTokens(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readAuthenticationHolders", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readAuthenticationHolders(JsonReader reader)", "full_signature": "private void readAuthenticationHolders(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readAuthenticationHolders(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readSavedUserAuthentication", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "SavedUserAuthentication", "signature": "SavedUserAuthentication readSavedUserAuthentication(JsonReader reader)", "full_signature": "private SavedUserAuthentication readSavedUserAuthentication(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readSavedUserAuthentication(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readGrants", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readGrants(JsonReader reader)", "full_signature": "private void readGrants(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readGrants(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readWhitelistedSites", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readWhitelistedSites(JsonReader reader)", "full_signature": "private void readWhitelistedSites(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readWhitelistedSites(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readBlacklistedSites", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readBlacklistedSites(JsonReader reader)", "full_signature": "private void readBlacklistedSites(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readBlacklistedSites(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readClients", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readClients(JsonReader reader)", "full_signature": "private void readClients(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readClients(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "readSystemScopes", "parameters": "(JsonReader reader)", "modifiers": "private", "return": "void", "signature": "void readSystemScopes(JsonReader reader)", "full_signature": "private void readSystemScopes(JsonReader reader)", "class_method_signature": "MITREidDataService_1_3.readSystemScopes(JsonReader reader)", "testcase": false, "constructor": false}, {"identifier": "fixObjectReferences", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fixObjectReferences()", "full_signature": "private void fixObjectReferences()", "class_method_signature": "MITREidDataService_1_3.fixObjectReferences()", "testcase": false, "constructor": false}], "file": "openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/MITREidDataService_1_3.java"}, "focal_method": {"identifier": "exportData", "parameters": "(JsonWriter writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void exportData(JsonWriter writer) throws IOException {\n\n\t\t// version tag at the root\n\t\twriter.name(THIS_VERSION);\n\n\t\twriter.beginObject();\n\n\t\t// clients list\n\t\twriter.name(CLIENTS);\n\t\twriter.beginArray();\n\t\twriteClients(writer);\n\t\twriter.endArray();\n\n\t\twriter.name(GRANTS);\n\t\twriter.beginArray();\n\t\twriteGrants(writer);\n\t\twriter.endArray();\n\n\t\twriter.name(WHITELISTEDSITES);\n\t\twriter.beginArray();\n\t\twriteWhitelistedSites(writer);\n\t\twriter.endArray();\n\n\t\twriter.name(BLACKLISTEDSITES);\n\t\twriter.beginArray();\n\t\twriteBlacklistedSites(writer);\n\t\twriter.endArray();\n\n\t\twriter.name(AUTHENTICATIONHOLDERS);\n\t\twriter.beginArray();\n\t\twriteAuthenticationHolders(writer);\n\t\twriter.endArray();\n\n\t\twriter.name(ACCESSTOKENS);\n\t\twriter.beginArray();\n\t\twriteAccessTokens(writer);\n\t\twriter.endArray();\n\n\t\twriter.name(REFRESHTOKENS);\n\t\twriter.beginArray();\n\t\twriteRefreshTokens(writer);\n\t\twriter.endArray();\n\n\t\twriter.name(SYSTEMSCOPES);\n\t\twriter.beginArray();\n\t\twriteSystemScopes(writer);\n\t\twriter.endArray();\n\n\t\tfor (MITREidDataServiceExtension extension : extensions) {\n\t\t\tif (extension.supportsVersion(THIS_VERSION)) {\n\t\t\t\textension.exportExtensionData(writer);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twriter.endObject(); // end mitreid-connect-1.3\n\t}", "signature": "void exportData(JsonWriter writer)", "full_signature": "@Override public void exportData(JsonWriter writer)", "class_method_signature": "MITREidDataService_1_3.exportData(JsonWriter writer)", "testcase": false, "constructor": false, "invocations": ["name", "beginObject", "name", "beginArray", "writeClients", "endArray", "name", "beginArray", "writeGrants", "endArray", "name", "beginArray", "writeWhitelistedSites", "endArray", "name", "beginArray", "writeBlacklistedSites", "endArray", "name", "beginArray", "writeAuthenticationHolders", "endArray", "name", "beginArray", "writeAccessTokens", "endArray", "name", "beginArray", "writeRefreshTokens", "endArray", "name", "beginArray", "writeSystemScopes", "endArray", "supportsVersion", "exportExtensionData", "endObject"]}, "repository": {"repo_id": 2681994, "url": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server", "language": "Java", "is_fork": false, "fork_count": 709, "stargazer_count": 1206, "size": 15055, "license": "licensed"}}