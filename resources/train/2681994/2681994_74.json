{"test_class": {"identifier": "TestDefaultOAuth2ProviderTokenService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long DELTA = 100L;", "modifier": "private static final", "type": "long", "declarator": "DELTA = 100L", "var_name": "DELTA"}, {"original_string": "private OAuth2Authentication authentication;", "modifier": "private", "type": "OAuth2Authentication", "declarator": "authentication", "var_name": "authentication"}, {"original_string": "private ClientDetailsEntity client;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "client", "var_name": "client"}, {"original_string": "private ClientDetailsEntity badClient;", "modifier": "private", "type": "ClientDetailsEntity", "declarator": "badClient", "var_name": "badClient"}, {"original_string": "private String clientId = \"test_client\";", "modifier": "private", "type": "String", "declarator": "clientId = \"test_client\"", "var_name": "clientId"}, {"original_string": "private String badClientId = \"bad_client\";", "modifier": "private", "type": "String", "declarator": "badClientId = \"bad_client\"", "var_name": "badClientId"}, {"original_string": "private Set<String> scope = newHashSet(\"openid\", \"profile\", \"email\", \"offline_access\");", "modifier": "private", "type": "Set<String>", "declarator": "scope = newHashSet(\"openid\", \"profile\", \"email\", \"offline_access\")", "var_name": "scope"}, {"original_string": "private OAuth2RefreshTokenEntity refreshToken;", "modifier": "private", "type": "OAuth2RefreshTokenEntity", "declarator": "refreshToken", "var_name": "refreshToken"}, {"original_string": "private OAuth2AccessTokenEntity accessToken;", "modifier": "private", "type": "OAuth2AccessTokenEntity", "declarator": "accessToken", "var_name": "accessToken"}, {"original_string": "private String refreshTokenValue = \"refresh_token_value\";", "modifier": "private", "type": "String", "declarator": "refreshTokenValue = \"refresh_token_value\"", "var_name": "refreshTokenValue"}, {"original_string": "private String userName = \"6a50ac11786d402a9591d3e592ac770f\";", "modifier": "private", "type": "String", "declarator": "userName = \"6a50ac11786d402a9591d3e592ac770f\"", "var_name": "userName"}, {"original_string": "private TokenRequest tokenRequest;", "modifier": "private", "type": "TokenRequest", "declarator": "tokenRequest", "var_name": "tokenRequest"}, {"original_string": "private OAuth2Request storedAuthRequest;", "modifier": "private", "type": "OAuth2Request", "declarator": "storedAuthRequest", "var_name": "storedAuthRequest"}, {"original_string": "private OAuth2Authentication storedAuthentication;", "modifier": "private", "type": "OAuth2Authentication", "declarator": "storedAuthentication", "var_name": "storedAuthentication"}, {"original_string": "private AuthenticationHolderEntity storedAuthHolder;", "modifier": "private", "type": "AuthenticationHolderEntity", "declarator": "storedAuthHolder", "var_name": "storedAuthHolder"}, {"original_string": "private Set<String> storedScope;", "modifier": "private", "type": "Set<String>", "declarator": "storedScope", "var_name": "storedScope"}, {"original_string": "@Mock\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Mock\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Mock\n\tprivate AuthenticationHolderRepository authenticationHolderRepository;", "modifier": "@Mock\n\tprivate", "type": "AuthenticationHolderRepository", "declarator": "authenticationHolderRepository", "var_name": "authenticationHolderRepository"}, {"original_string": "@Mock\n\tprivate ClientDetailsEntityService clientDetailsService;", "modifier": "@Mock\n\tprivate", "type": "ClientDetailsEntityService", "declarator": "clientDetailsService", "var_name": "clientDetailsService"}, {"original_string": "@Mock\n\tprivate TokenEnhancer tokenEnhancer;", "modifier": "@Mock\n\tprivate", "type": "TokenEnhancer", "declarator": "tokenEnhancer", "var_name": "tokenEnhancer"}, {"original_string": "@Mock\n\tprivate SystemScopeService scopeService;", "modifier": "@Mock\n\tprivate", "type": "SystemScopeService", "declarator": "scopeService", "var_name": "scopeService"}, {"original_string": "@InjectMocks\n\tprivate DefaultOAuth2ProviderTokenService service;", "modifier": "@InjectMocks\n\tprivate", "type": "DefaultOAuth2ProviderTokenService", "declarator": "service", "var_name": "service"}], "file": "openid-connect-server/src/test/java/org/mitre/oauth2/service/impl/TestDefaultOAuth2ProviderTokenService.java"}, "test_case": {"identifier": "createAccessToken_checkAttachedAuthentication", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void createAccessToken_checkAttachedAuthentication() {\n\t\tAuthenticationHolderEntity authHolder = mock(AuthenticationHolderEntity.class);\n\t\twhen(authHolder.getAuthentication()).thenReturn(authentication);\n\n\t\twhen(authenticationHolderRepository.save(any(AuthenticationHolderEntity.class))).thenReturn(authHolder);\n\n\t\tOAuth2AccessTokenEntity token = service.createAccessToken(authentication);\n\n\t\tassertThat(token.getAuthenticationHolder().getAuthentication(), equalTo(authentication));\n\t\tverify(authenticationHolderRepository).save(any(AuthenticationHolderEntity.class));\n\t\tverify(scopeService, atLeastOnce()).removeReservedScopes(anySet());\n\t}", "signature": "void createAccessToken_checkAttachedAuthentication()", "full_signature": "@Test public void createAccessToken_checkAttachedAuthentication()", "class_method_signature": "TestDefaultOAuth2ProviderTokenService.createAccessToken_checkAttachedAuthentication()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getAuthentication", "thenReturn", "when", "save", "any", "createAccessToken", "assertThat", "getAuthentication", "getAuthenticationHolder", "equalTo", "save", "verify", "any", "removeReservedScopes", "verify", "atLeastOnce", "anySet"]}, "focal_class": {"identifier": "DefaultOAuth2ProviderTokenService", "superclass": "", "interfaces": "implements OAuth2TokenEntityService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultOAuth2ProviderTokenService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultOAuth2ProviderTokenService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate OAuth2TokenRepository tokenRepository;", "modifier": "@Autowired\n\tprivate", "type": "OAuth2TokenRepository", "declarator": "tokenRepository", "var_name": "tokenRepository"}, {"original_string": "@Autowired\n\tprivate AuthenticationHolderRepository authenticationHolderRepository;", "modifier": "@Autowired\n\tprivate", "type": "AuthenticationHolderRepository", "declarator": "authenticationHolderRepository", "var_name": "authenticationHolderRepository"}, {"original_string": "@Autowired\n\tprivate ClientDetailsEntityService clientDetailsService;", "modifier": "@Autowired\n\tprivate", "type": "ClientDetailsEntityService", "declarator": "clientDetailsService", "var_name": "clientDetailsService"}, {"original_string": "@Autowired\n\tprivate TokenEnhancer tokenEnhancer;", "modifier": "@Autowired\n\tprivate", "type": "TokenEnhancer", "declarator": "tokenEnhancer", "var_name": "tokenEnhancer"}, {"original_string": "@Autowired\n\tprivate SystemScopeService scopeService;", "modifier": "@Autowired\n\tprivate", "type": "SystemScopeService", "declarator": "scopeService", "var_name": "scopeService"}, {"original_string": "@Autowired\n\tprivate ApprovedSiteService approvedSiteService;", "modifier": "@Autowired\n\tprivate", "type": "ApprovedSiteService", "declarator": "approvedSiteService", "var_name": "approvedSiteService"}], "methods": [{"identifier": "getAllAccessTokensForUser", "parameters": "(String userName)", "modifiers": "@Override public", "return": "Set<OAuth2AccessTokenEntity>", "signature": "Set<OAuth2AccessTokenEntity> getAllAccessTokensForUser(String userName)", "full_signature": "@Override public Set<OAuth2AccessTokenEntity> getAllAccessTokensForUser(String userName)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAllAccessTokensForUser(String userName)", "testcase": false, "constructor": false}, {"identifier": "getAllRefreshTokensForUser", "parameters": "(String userName)", "modifiers": "@Override public", "return": "Set<OAuth2RefreshTokenEntity>", "signature": "Set<OAuth2RefreshTokenEntity> getAllRefreshTokensForUser(String userName)", "full_signature": "@Override public Set<OAuth2RefreshTokenEntity> getAllRefreshTokensForUser(String userName)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAllRefreshTokensForUser(String userName)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenById", "parameters": "(Long id)", "modifiers": "@Override public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity getAccessTokenById(Long id)", "full_signature": "@Override public OAuth2AccessTokenEntity getAccessTokenById(Long id)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAccessTokenById(Long id)", "testcase": false, "constructor": false}, {"identifier": "getRefreshTokenById", "parameters": "(Long id)", "modifiers": "@Override public", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity getRefreshTokenById(Long id)", "full_signature": "@Override public OAuth2RefreshTokenEntity getRefreshTokenById(Long id)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getRefreshTokenById(Long id)", "testcase": false, "constructor": false}, {"identifier": "clearExpiredAccessToken", "parameters": "(OAuth2AccessTokenEntity token)", "modifiers": "private", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity clearExpiredAccessToken(OAuth2AccessTokenEntity token)", "full_signature": "private OAuth2AccessTokenEntity clearExpiredAccessToken(OAuth2AccessTokenEntity token)", "class_method_signature": "DefaultOAuth2ProviderTokenService.clearExpiredAccessToken(OAuth2AccessTokenEntity token)", "testcase": false, "constructor": false}, {"identifier": "clearExpiredRefreshToken", "parameters": "(OAuth2RefreshTokenEntity token)", "modifiers": "private", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity clearExpiredRefreshToken(OAuth2RefreshTokenEntity token)", "full_signature": "private OAuth2RefreshTokenEntity clearExpiredRefreshToken(OAuth2RefreshTokenEntity token)", "class_method_signature": "DefaultOAuth2ProviderTokenService.clearExpiredRefreshToken(OAuth2RefreshTokenEntity token)", "testcase": false, "constructor": false}, {"identifier": "createAccessToken", "parameters": "(OAuth2Authentication authentication)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity createAccessToken(OAuth2Authentication authentication)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2AccessTokenEntity createAccessToken(OAuth2Authentication authentication)", "class_method_signature": "DefaultOAuth2ProviderTokenService.createAccessToken(OAuth2Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "createRefreshToken", "parameters": "(ClientDetailsEntity client, AuthenticationHolderEntity authHolder)", "modifiers": "private", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity createRefreshToken(ClientDetailsEntity client, AuthenticationHolderEntity authHolder)", "full_signature": "private OAuth2RefreshTokenEntity createRefreshToken(ClientDetailsEntity client, AuthenticationHolderEntity authHolder)", "class_method_signature": "DefaultOAuth2ProviderTokenService.createRefreshToken(ClientDetailsEntity client, AuthenticationHolderEntity authHolder)", "testcase": false, "constructor": false}, {"identifier": "refreshAccessToken", "parameters": "(String refreshTokenValue, TokenRequest authRequest)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2AccessTokenEntity refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "class_method_signature": "DefaultOAuth2ProviderTokenService.refreshAccessToken(String refreshTokenValue, TokenRequest authRequest)", "testcase": false, "constructor": false}, {"identifier": "loadAuthentication", "parameters": "(String accessTokenValue)", "modifiers": "@Override public", "return": "OAuth2Authentication", "signature": "OAuth2Authentication loadAuthentication(String accessTokenValue)", "full_signature": "@Override public OAuth2Authentication loadAuthentication(String accessTokenValue)", "class_method_signature": "DefaultOAuth2ProviderTokenService.loadAuthentication(String accessTokenValue)", "testcase": false, "constructor": false}, {"identifier": "readAccessToken", "parameters": "(String accessTokenValue)", "modifiers": "@Override public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity readAccessToken(String accessTokenValue)", "full_signature": "@Override public OAuth2AccessTokenEntity readAccessToken(String accessTokenValue)", "class_method_signature": "DefaultOAuth2ProviderTokenService.readAccessToken(String accessTokenValue)", "testcase": false, "constructor": false}, {"identifier": "getAccessToken", "parameters": "(OAuth2Authentication authentication)", "modifiers": "@Override public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity getAccessToken(OAuth2Authentication authentication)", "full_signature": "@Override public OAuth2AccessTokenEntity getAccessToken(OAuth2Authentication authentication)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAccessToken(OAuth2Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "getRefreshToken", "parameters": "(String refreshTokenValue)", "modifiers": "@Override public", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity getRefreshToken(String refreshTokenValue)", "full_signature": "@Override public OAuth2RefreshTokenEntity getRefreshToken(String refreshTokenValue)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getRefreshToken(String refreshTokenValue)", "testcase": false, "constructor": false}, {"identifier": "revokeRefreshToken", "parameters": "(OAuth2RefreshTokenEntity refreshToken)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "void", "signature": "void revokeRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public void revokeRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "class_method_signature": "DefaultOAuth2ProviderTokenService.revokeRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "testcase": false, "constructor": false}, {"identifier": "revokeAccessToken", "parameters": "(OAuth2AccessTokenEntity accessToken)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "void", "signature": "void revokeAccessToken(OAuth2AccessTokenEntity accessToken)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public void revokeAccessToken(OAuth2AccessTokenEntity accessToken)", "class_method_signature": "DefaultOAuth2ProviderTokenService.revokeAccessToken(OAuth2AccessTokenEntity accessToken)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokensForClient", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "List<OAuth2AccessTokenEntity>", "signature": "List<OAuth2AccessTokenEntity> getAccessTokensForClient(ClientDetailsEntity client)", "full_signature": "@Override public List<OAuth2AccessTokenEntity> getAccessTokensForClient(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getAccessTokensForClient(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "getRefreshTokensForClient", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "List<OAuth2RefreshTokenEntity>", "signature": "List<OAuth2RefreshTokenEntity> getRefreshTokensForClient(ClientDetailsEntity client)", "full_signature": "@Override public List<OAuth2RefreshTokenEntity> getRefreshTokensForClient(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getRefreshTokensForClient(ClientDetailsEntity client)", "testcase": false, "constructor": false}, {"identifier": "clearExpiredTokens", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearExpiredTokens()", "full_signature": "@Override public void clearExpiredTokens()", "class_method_signature": "DefaultOAuth2ProviderTokenService.clearExpiredTokens()", "testcase": false, "constructor": false}, {"identifier": "saveAccessToken", "parameters": "(OAuth2AccessTokenEntity accessToken)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity saveAccessToken(OAuth2AccessTokenEntity accessToken)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2AccessTokenEntity saveAccessToken(OAuth2AccessTokenEntity accessToken)", "class_method_signature": "DefaultOAuth2ProviderTokenService.saveAccessToken(OAuth2AccessTokenEntity accessToken)", "testcase": false, "constructor": false}, {"identifier": "saveRefreshToken", "parameters": "(OAuth2RefreshTokenEntity refreshToken)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2RefreshTokenEntity", "signature": "OAuth2RefreshTokenEntity saveRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2RefreshTokenEntity saveRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "class_method_signature": "DefaultOAuth2ProviderTokenService.saveRefreshToken(OAuth2RefreshTokenEntity refreshToken)", "testcase": false, "constructor": false}, {"identifier": "getTokenEnhancer", "parameters": "()", "modifiers": "public", "return": "TokenEnhancer", "signature": "TokenEnhancer getTokenEnhancer()", "full_signature": "public TokenEnhancer getTokenEnhancer()", "class_method_signature": "DefaultOAuth2ProviderTokenService.getTokenEnhancer()", "testcase": false, "constructor": false}, {"identifier": "setTokenEnhancer", "parameters": "(TokenEnhancer tokenEnhancer)", "modifiers": "public", "return": "void", "signature": "void setTokenEnhancer(TokenEnhancer tokenEnhancer)", "full_signature": "public void setTokenEnhancer(TokenEnhancer tokenEnhancer)", "class_method_signature": "DefaultOAuth2ProviderTokenService.setTokenEnhancer(TokenEnhancer tokenEnhancer)", "testcase": false, "constructor": false}, {"identifier": "getRegistrationAccessTokenForClient", "parameters": "(ClientDetailsEntity client)", "modifiers": "@Override public", "return": "OAuth2AccessTokenEntity", "signature": "OAuth2AccessTokenEntity getRegistrationAccessTokenForClient(ClientDetailsEntity client)", "full_signature": "@Override public OAuth2AccessTokenEntity getRegistrationAccessTokenForClient(ClientDetailsEntity client)", "class_method_signature": "DefaultOAuth2ProviderTokenService.getRegistrationAccessTokenForClient(ClientDetailsEntity client)", "testcase": false, "constructor": false}], "file": "openid-connect-server/src/main/java/org/mitre/oauth2/service/impl/DefaultOAuth2ProviderTokenService.java"}, "focal_method": {"identifier": "createAccessToken", "parameters": "(OAuth2Authentication authentication)", "modifiers": "@Override @Transactional(value=\"defaultTransactionManager\") public", "return": "OAuth2AccessTokenEntity", "body": "@Override\n\t@Transactional(value=\"defaultTransactionManager\")\n\tpublic OAuth2AccessTokenEntity createAccessToken(OAuth2Authentication authentication) throws AuthenticationException, InvalidClientException {\n\t\tif (authentication != null && authentication.getOAuth2Request() != null) {\n\t\t\t// look up our client\n\t\t\tOAuth2Request request = authentication.getOAuth2Request();\n\n\t\t\tClientDetailsEntity client = clientDetailsService.loadClientByClientId(request.getClientId());\n\n\t\t\tif (client == null) {\n\t\t\t\tthrow new InvalidClientException(\"Client not found: \" + request.getClientId());\n\t\t\t}\n\n\t\t\t// handle the PKCE code challenge if present\n\t\t\tif (request.getExtensions().containsKey(CODE_CHALLENGE)) {\n\t\t\t\tString challenge = (String) request.getExtensions().get(CODE_CHALLENGE);\n\t\t\t\tPKCEAlgorithm alg = PKCEAlgorithm.parse((String) request.getExtensions().get(CODE_CHALLENGE_METHOD));\n\n\t\t\t\tString verifier = request.getRequestParameters().get(CODE_VERIFIER);\n\n\t\t\t\tif (alg.equals(PKCEAlgorithm.plain)) {\n\t\t\t\t\t// do a direct string comparison\n\t\t\t\t\tif (!challenge.equals(verifier)) {\n\t\t\t\t\t\tthrow new InvalidRequestException(\"Code challenge and verifier do not match\");\n\t\t\t\t\t}\n\t\t\t\t} else if (alg.equals(PKCEAlgorithm.S256)) {\n\t\t\t\t\t// hash the verifier\n\t\t\t\t\ttry {\n\t\t\t\t\t\tMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n\t\t\t\t\t\tString hash = Base64URL.encode(digest.digest(verifier.getBytes(StandardCharsets.US_ASCII))).toString();\n\t\t\t\t\t\tif (!challenge.equals(hash)) {\n\t\t\t\t\t\t\tthrow new InvalidRequestException(\"Code challenge and verifier do not match\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\t\t\t\tlogger.error(\"Unknown algorithm for PKCE digest\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tOAuth2AccessTokenEntity token = new OAuth2AccessTokenEntity();//accessTokenFactory.createNewAccessToken();\n\n\t\t\t// attach the client\n\t\t\ttoken.setClient(client);\n\n\t\t\t// inherit the scope from the auth, but make a new set so it is\n\t\t\t//not unmodifiable. Unmodifiables don't play nicely with Eclipselink, which\n\t\t\t//wants to use the clone operation.\n\t\t\tSet<SystemScope> scopes = scopeService.fromStrings(request.getScope());\n\n\t\t\t// remove any of the special system scopes\n\t\t\tscopes = scopeService.removeReservedScopes(scopes);\n\n\t\t\ttoken.setScope(scopeService.toStrings(scopes));\n\n\t\t\t// make it expire if necessary\n\t\t\tif (client.getAccessTokenValiditySeconds() != null && client.getAccessTokenValiditySeconds() > 0) {\n\t\t\t\tDate expiration = new Date(System.currentTimeMillis() + (client.getAccessTokenValiditySeconds() * 1000L));\n\t\t\t\ttoken.setExpiration(expiration);\n\t\t\t}\n\n\t\t\t// attach the authorization so that we can look it up later\n\t\t\tAuthenticationHolderEntity authHolder = new AuthenticationHolderEntity();\n\t\t\tauthHolder.setAuthentication(authentication);\n\t\t\tauthHolder = authenticationHolderRepository.save(authHolder);\n\n\t\t\ttoken.setAuthenticationHolder(authHolder);\n\n\t\t\t// attach a refresh token, if this client is allowed to request them and the user gets the offline scope\n\t\t\tif (client.isAllowRefresh() && token.getScope().contains(SystemScopeService.OFFLINE_ACCESS)) {\n\t\t\t\tOAuth2RefreshTokenEntity savedRefreshToken = createRefreshToken(client, authHolder);\n\n\t\t\t\ttoken.setRefreshToken(savedRefreshToken);\n\t\t\t}\n\n\t\t\t//Add approved site reference, if any\n\t\t\tOAuth2Request originalAuthRequest = authHolder.getAuthentication().getOAuth2Request();\n\n\t\t\tif (originalAuthRequest.getExtensions() != null && originalAuthRequest.getExtensions().containsKey(\"approved_site\")) {\n\n\t\t\t\tLong apId = Long.parseLong((String) originalAuthRequest.getExtensions().get(\"approved_site\"));\n\t\t\t\tApprovedSite ap = approvedSiteService.getById(apId);\n\n\t\t\t\ttoken.setApprovedSite(ap);\n\t\t\t}\n\n\t\t\tOAuth2AccessTokenEntity enhancedToken = (OAuth2AccessTokenEntity) tokenEnhancer.enhance(token, authentication);\n\n\t\t\tOAuth2AccessTokenEntity savedToken = saveAccessToken(enhancedToken);\n\n\t\t\tif (savedToken.getRefreshToken() != null) {\n\t\t\t\ttokenRepository.saveRefreshToken(savedToken.getRefreshToken()); // make sure we save any changes that might have been enhanced\n\t\t\t}\n\n\t\t\treturn savedToken;\n\t\t}\n\n\t\tthrow new AuthenticationCredentialsNotFoundException(\"No authentication credentials found\");\n\t}", "signature": "OAuth2AccessTokenEntity createAccessToken(OAuth2Authentication authentication)", "full_signature": "@Override @Transactional(value=\"defaultTransactionManager\") public OAuth2AccessTokenEntity createAccessToken(OAuth2Authentication authentication)", "class_method_signature": "DefaultOAuth2ProviderTokenService.createAccessToken(OAuth2Authentication authentication)", "testcase": false, "constructor": false, "invocations": ["getOAuth2Request", "getOAuth2Request", "loadClientByClientId", "getClientId", "getClientId", "containsKey", "getExtensions", "get", "getExtensions", "parse", "get", "getExtensions", "get", "getRequestParameters", "equals", "equals", "equals", "getInstance", "toString", "encode", "digest", "getBytes", "equals", "error", "setClient", "fromStrings", "getScope", "removeReservedScopes", "setScope", "toStrings", "getAccessTokenValiditySeconds", "getAccessTokenValiditySeconds", "currentTimeMillis", "getAccessTokenValiditySeconds", "setExpiration", "setAuthentication", "save", "setAuthenticationHolder", "isAllowRefresh", "contains", "getScope", "createRefreshToken", "setRefreshToken", "getOAuth2Request", "getAuthentication", "getExtensions", "containsKey", "getExtensions", "parseLong", "get", "getExtensions", "getById", "setApprovedSite", "enhance", "saveAccessToken", "getRefreshToken", "saveRefreshToken", "getRefreshToken"]}, "repository": {"repo_id": 2681994, "url": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server", "language": "Java", "is_fork": false, "fork_count": 709, "stargazer_count": 1206, "size": 15055, "license": "licensed"}}