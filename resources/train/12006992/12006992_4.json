{"test_class": {"identifier": "TrezorMessageUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "trezorj-core/src/test/java/uk/co/bsol/trezorj/core/utils/TrezorMessageUtilsTest.java"}, "test_case": {"identifier": "testNewTxOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNewTxOutput() throws Exception {\n\n    // Arrange\n    Address ourReceivingAddress = FakeTransactions.getElectrumAddressN(new int[] {0,0});\n    Address ourChangeAddress = FakeTransactions.getElectrumAddressN(new int[] {0,1});\n    Address random2Address = FakeTransactions.asMainNetAddress(\"1MKw8vWxvBnaBcrL2yXvZceqyRMoeG2kRn\");\n\n    Transaction tx = FakeTransactions.newMainNetFakeTx(\n      ourReceivingAddress,\n      ourChangeAddress,\n      random2Address,\n      BigInteger.TEN,\n      BigInteger.ONE\n    );\n\n    // Act\n    TrezorMessage.TxOutput txOutput0 = TrezorMessageUtils.newTxOutput(tx, 0); // Payment\n    TrezorMessage.TxOutput txOutput1 = TrezorMessageUtils.newTxOutput(tx, 1); // Change\n\n    // Assert\n    assertThat(txOutput0.getAmount()).isEqualTo(1L); // Payment\n    assertThat(txOutput1.getAmount()).isEqualTo(9L); // Change\n\n    assertThat(txOutput0.getAddress()).isEqualTo(random2Address.toString());\n    assertThat(txOutput1.getAddress()).isEqualTo(ourChangeAddress.toString());\n\n    assertThat(txOutput0.getIndex()).isEqualTo(0);\n    assertThat(txOutput1.getIndex()).isEqualTo(1);\n\n  }", "signature": "void testNewTxOutput()", "full_signature": "@Test public void testNewTxOutput()", "class_method_signature": "TrezorMessageUtilsTest.testNewTxOutput()", "testcase": true, "constructor": false, "invocations": ["getElectrumAddressN", "getElectrumAddressN", "asMainNetAddress", "newMainNetFakeTx", "newTxOutput", "newTxOutput", "isEqualTo", "assertThat", "getAmount", "isEqualTo", "assertThat", "getAmount", "isEqualTo", "assertThat", "getAddress", "toString", "isEqualTo", "assertThat", "getAddress", "toString", "isEqualTo", "assertThat", "getIndex", "isEqualTo", "assertThat", "getIndex"]}, "focal_class": {"identifier": "TrezorMessageUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TrezorMessageUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TrezorMessageUtils.class)", "var_name": "log"}], "methods": [{"identifier": "TrezorMessageUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TrezorMessageUtils()", "full_signature": "private  TrezorMessageUtils()", "class_method_signature": "TrezorMessageUtils.TrezorMessageUtils()", "testcase": false, "constructor": true}, {"identifier": "writeMessage", "parameters": "(Message message, DataOutputStream out)", "modifiers": "public static", "return": "void", "signature": "void writeMessage(Message message, DataOutputStream out)", "full_signature": "public static void writeMessage(Message message, DataOutputStream out)", "class_method_signature": "TrezorMessageUtils.writeMessage(Message message, DataOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "newTxInput", "parameters": "(Transaction tx, int index)", "modifiers": "public static", "return": "TrezorMessage.TxInput", "signature": "TrezorMessage.TxInput newTxInput(Transaction tx, int index)", "full_signature": "public static TrezorMessage.TxInput newTxInput(Transaction tx, int index)", "class_method_signature": "TrezorMessageUtils.newTxInput(Transaction tx, int index)", "testcase": false, "constructor": false}, {"identifier": "newTxOutput", "parameters": "(Transaction tx, int index)", "modifiers": "public static", "return": "TrezorMessage.TxOutput", "signature": "TrezorMessage.TxOutput newTxOutput(Transaction tx, int index)", "full_signature": "public static TrezorMessage.TxOutput newTxOutput(Transaction tx, int index)", "class_method_signature": "TrezorMessageUtils.newTxOutput(Transaction tx, int index)", "testcase": false, "constructor": false}], "file": "trezorj-core/src/main/java/uk/co/bsol/trezorj/core/utils/TrezorMessageUtils.java"}, "focal_method": {"identifier": "newTxOutput", "parameters": "(Transaction tx, int index)", "modifiers": "public static", "return": "TrezorMessage.TxOutput", "body": "public static TrezorMessage.TxOutput newTxOutput(Transaction tx, int index) {\n\n    Preconditions.checkNotNull(tx, \"Transaction must be present\");\n    Preconditions.checkElementIndex(index, tx.getOutputs().size(), \"TransactionOutput not present at index \" + index);\n\n    // Output index is valid\n    TransactionOutput txOutput = tx.getOutput(index);\n    TrezorMessage.TxOutput.Builder builder = TrezorMessage.TxOutput.newBuilder();\n    builder.setIndex(index);\n\n    // In Bitcoinj \"nanocoins\" are Satoshis\n    long satoshiAmount = txOutput.getValue().longValue();\n    builder.setAmount(satoshiAmount);\n\n    // Extract the receiving address from the output\n    try {\n      builder.setAddress(txOutput.getScriptPubKey().getToAddress(MainNetParams.get()).toString());\n    } catch (ScriptException e) {\n      throw new IllegalArgumentException(\"Transaction script pub key invalid\", e);\n    }\n    //builder.setAddressBytes(ByteString.copyFrom(\"\".getBytes()));\n\n    // Bitcoinj only support Pay to Address\n    builder.setScriptType(TrezorMessage.ScriptType.PAYTOADDRESS);\n\n    // TODO (GR) Verify what ScriptArgs is doing (array of script arguments?)\n    //builder.setScriptArgs(0,0);\n\n    // AddressN encodes the branch co-ordinates of the receiving/change public keys\n    // Leave it unset if the Trezor does not control the output address\n    if (index == 1) {\n      builder.addAddressN(0); // Depth of receiving address was\n      builder.addAddressN(1); // 0 is recipient address, 1 is change address\n    }\n\n    return builder.build();\n\n  }", "signature": "TrezorMessage.TxOutput newTxOutput(Transaction tx, int index)", "full_signature": "public static TrezorMessage.TxOutput newTxOutput(Transaction tx, int index)", "class_method_signature": "TrezorMessageUtils.newTxOutput(Transaction tx, int index)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkElementIndex", "size", "getOutputs", "getOutput", "newBuilder", "setIndex", "longValue", "getValue", "setAmount", "setAddress", "toString", "getToAddress", "getScriptPubKey", "get", "setScriptType", "addAddressN", "addAddressN", "build"]}, "repository": {"repo_id": 12006992, "url": "https://github.com/Multibit-Legacy/trezorj", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 13, "size": 1014, "license": "licensed"}}