{"test_class": {"identifier": "JSONLDUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dime-personalserver/dime-gateway/src/test/java/eu/dime/ps/gateway/util/JSONLDUtilsTest.java"}, "test_case": {"identifier": "shouldDeserializeJSONLD", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldDeserializeJSONLD() throws JsonParseException, JsonMappingException, JSONLDProcessingError {\n\t\tString json = \"{`@graph`:[{`@id`:`urn:uuid:4182dcd4-a510-4b0c-8145-271a3dcfe455`,`@type`:[`http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ContactMedium`,`http://www.w3.org/2000/01/rdf-schema#Resource`,`http://www.semanticdesktop.org/ontologies/2007/03/22/nco#EmailAddress`],`http://www.semanticdesktop.org/ontologies/2007/03/22/nco#emailAddress`:`test@email.com`},{`@id`:`urn:uuid:d030b056-cddd-4a8b-9828-a54dbca6495e`,`@type`:`http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact`,`http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress`:{`@id`:`urn:uuid:4182dcd4-a510-4b0c-8145-271a3dcfe455`},`http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefLabel`:`Test`}]}\".replace('`', '\"');\n\t\tPersonContact resource = JSONLDUtils.deserialize(json, PersonContact.class);\n\n\t\tModel metadata = resource.getModel();\n\t\tURI profile = new URIImpl(\"urn:uuid:d030b056-cddd-4a8b-9828-a54dbca6495e\");\n\t\tURI email = new URIImpl(\"urn:uuid:4182dcd4-a510-4b0c-8145-271a3dcfe455\");\n\t\t\n\t\tassertEquals(profile, profile.asURI());\n\t\tassertTrue(\"Must contain a nco:PersonContact resource\", metadata.contains(profile, RDF.type, NCO.PersonContact));\n\t\tassertEquals(\"Test\", ModelUtils.findObject(metadata, profile, NAO.prefLabel).asLiteral().getValue());\n\t\tassertTrue(\"Must contain a nco:EmailAddress resource\", metadata.contains(email, RDF.type, NCO.EmailAddress));\n\t\tassertEquals(\"test@email.com\", ModelUtils.findObject(metadata, email, NCO.emailAddress).asLiteral().getValue());\n\t}", "signature": "void shouldDeserializeJSONLD()", "full_signature": "@Test public void shouldDeserializeJSONLD()", "class_method_signature": "JSONLDUtilsTest.shouldDeserializeJSONLD()", "testcase": true, "constructor": false, "invocations": ["replace", "deserialize", "getModel", "assertEquals", "asURI", "assertTrue", "contains", "assertEquals", "getValue", "asLiteral", "findObject", "assertTrue", "contains", "assertEquals", "getValue", "asLiteral", "findObject"]}, "focal_class": {"identifier": "JSONLDUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JSONLDUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JSONLDUtils.class)", "var_name": "logger"}, {"original_string": "private static final RDF2GoRDFParser RDF_PARSER = new RDF2GoRDFParser();", "modifier": "private static final", "type": "RDF2GoRDFParser", "declarator": "RDF_PARSER = new RDF2GoRDFParser()", "var_name": "RDF_PARSER"}, {"original_string": "private static final Options OPTIONS = new Options();", "modifier": "private static final", "type": "Options", "declarator": "OPTIONS = new Options()", "var_name": "OPTIONS"}, {"original_string": "private static final Map<String, String> NS_PREFIX_MAP = new HashMap<String, String>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "NS_PREFIX_MAP = new HashMap<String, String>()", "var_name": "NS_PREFIX_MAP"}, {"original_string": "private static final boolean INCLUDE_DEFAULT_PREFIXES = false;", "modifier": "private static final", "type": "boolean", "declarator": "INCLUDE_DEFAULT_PREFIXES = false", "var_name": "INCLUDE_DEFAULT_PREFIXES"}], "methods": [{"identifier": "deserialize", "parameters": "(Object object, Class<T> returnType)", "modifiers": "public static", "return": "T", "signature": "T deserialize(Object object, Class<T> returnType)", "full_signature": "public static T deserialize(Object object, Class<T> returnType)", "class_method_signature": "JSONLDUtils.deserialize(Object object, Class<T> returnType)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String jsonObject, Class<T> returnType)", "modifiers": "public static", "return": "T", "signature": "T deserialize(String jsonObject, Class<T> returnType)", "full_signature": "public static T deserialize(String jsonObject, Class<T> returnType)", "class_method_signature": "JSONLDUtils.deserialize(String jsonObject, Class<T> returnType)", "testcase": false, "constructor": false}, {"identifier": "deserializeCollection", "parameters": "(List<Object> collection)", "modifiers": "@Deprecated public static", "return": "List<? extends Resource>", "signature": "List<? extends Resource> deserializeCollection(List<Object> collection)", "full_signature": "@Deprecated public static List<? extends Resource> deserializeCollection(List<Object> collection)", "class_method_signature": "JSONLDUtils.deserializeCollection(List<Object> collection)", "testcase": false, "constructor": false}, {"identifier": "deserializeCollection", "parameters": "(String jsonArray)", "modifiers": "@Deprecated public static", "return": "List<? extends Resource>", "signature": "List<? extends Resource> deserializeCollection(String jsonArray)", "full_signature": "@Deprecated public static List<? extends Resource> deserializeCollection(String jsonArray)", "class_method_signature": "JSONLDUtils.deserializeCollection(String jsonArray)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(T resource)", "modifiers": "public static", "return": "Object", "signature": "Object serialize(T resource)", "full_signature": "public static Object serialize(T resource)", "class_method_signature": "JSONLDUtils.serialize(T resource)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Map<String, String> prefixes, T resource)", "modifiers": "public static", "return": "Object", "signature": "Object serialize(Map<String, String> prefixes, T resource)", "full_signature": "public static Object serialize(Map<String, String> prefixes, T resource)", "class_method_signature": "JSONLDUtils.serialize(Map<String, String> prefixes, T resource)", "testcase": false, "constructor": false}, {"identifier": "serializeAsString", "parameters": "(T resource)", "modifiers": "public static", "return": "String", "signature": "String serializeAsString(T resource)", "full_signature": "public static String serializeAsString(T resource)", "class_method_signature": "JSONLDUtils.serializeAsString(T resource)", "testcase": false, "constructor": false}, {"identifier": "serializeAsString", "parameters": "(Map<String, String> prefixes, T resource)", "modifiers": "public static", "return": "String", "signature": "String serializeAsString(Map<String, String> prefixes, T resource)", "full_signature": "public static String serializeAsString(Map<String, String> prefixes, T resource)", "class_method_signature": "JSONLDUtils.serializeAsString(Map<String, String> prefixes, T resource)", "testcase": false, "constructor": false}, {"identifier": "serializeCollection", "parameters": "(T... collection)", "modifiers": "@Deprecated public static", "return": "List<Object>", "signature": "List<Object> serializeCollection(T... collection)", "full_signature": "@Deprecated public static List<Object> serializeCollection(T... collection)", "class_method_signature": "JSONLDUtils.serializeCollection(T... collection)", "testcase": false, "constructor": false}, {"identifier": "serializeCollection", "parameters": "(Map<String, String> prefixes,\n\t\t\tT... collection)", "modifiers": "@Deprecated public static", "return": "List<Object>", "signature": "List<Object> serializeCollection(Map<String, String> prefixes,\n\t\t\tT... collection)", "full_signature": "@Deprecated public static List<Object> serializeCollection(Map<String, String> prefixes,\n\t\t\tT... collection)", "class_method_signature": "JSONLDUtils.serializeCollection(Map<String, String> prefixes,\n\t\t\tT... collection)", "testcase": false, "constructor": false}, {"identifier": "guessClass", "parameters": "(URI type)", "modifiers": "private static", "return": "Class<? extends Resource>", "signature": "Class<? extends Resource> guessClass(URI type)", "full_signature": "private static Class<? extends Resource> guessClass(URI type)", "class_method_signature": "JSONLDUtils.guessClass(URI type)", "testcase": false, "constructor": false}, {"identifier": "addPrefixes", "parameters": "(Map<String, String> prefixes, Model model)", "modifiers": "private static", "return": "void", "signature": "void addPrefixes(Map<String, String> prefixes, Model model)", "full_signature": "private static void addPrefixes(Map<String, String> prefixes, Model model)", "class_method_signature": "JSONLDUtils.addPrefixes(Map<String, String> prefixes, Model model)", "testcase": false, "constructor": false}, {"identifier": "addDefaultPrefixes", "parameters": "(Model model)", "modifiers": "private static", "return": "void", "signature": "void addDefaultPrefixes(Model model)", "full_signature": "private static void addDefaultPrefixes(Model model)", "class_method_signature": "JSONLDUtils.addDefaultPrefixes(Model model)", "testcase": false, "constructor": false}, {"identifier": "toRDF", "parameters": "(Object object, JSONLDTripleCallback callback)", "modifiers": "private static", "return": "ModelSet", "signature": "ModelSet toRDF(Object object, JSONLDTripleCallback callback)", "full_signature": "private static ModelSet toRDF(Object object, JSONLDTripleCallback callback)", "class_method_signature": "JSONLDUtils.toRDF(Object object, JSONLDTripleCallback callback)", "testcase": false, "constructor": false}], "file": "dime-personalserver/dime-gateway/src/main/java/eu/dime/ps/gateway/util/JSONLDUtils.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(Object object, Class<T> returnType)", "modifiers": "public static", "return": "T", "body": "public static <T extends Resource> T deserialize(Object object, Class<T> returnType)\n\t\t\tthrows JsonParseException, JsonMappingException, JSONLDProcessingError {\n\t\tRDF2GoTripleCallback callback = new RDF2GoTripleCallback();\n\t\tModelSet modelSet = toRDF(object, callback);\n\n\t\t// find the resource URI corresponding to the returnType\n\t\tURI subject = null;\n\t\tClosableIterator<Statement> statements = modelSet.findStatements(Variable.ANY, Variable.ANY, RDF.type, Variable.ANY);\n\t\twhile (statements.hasNext()) {\n\t\t\tStatement statement = statements.next();\n\t\t\tURI type = statement.getObject().asURI();\n\t\t\tif (returnType.equals(guessClass(type))) {\n\t\t\t\tif (subject == null) {\n\t\t\t\t\tsubject = statement.getSubject().asURI();\n\t\t\t\t}\n\t\t\t\t// ensure the RDF metadata only contains ONE resource of the requested type\n\t\t\t\telse if (!subject.equals(statement.getSubject())) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"The following JSON contains more than one resource of type '\"\n\t\t\t\t\t\t\t+ returnType.getName() + \"', please consider calling instead deserializeCollection(Object):\\n\"\n\t\t\t\t\t\t\t+ JSONUtils.toString(object));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstatements.close();\n\n\t\tif (subject == null) {\n\t\t\tthrow new IllegalArgumentException(\"The following JSON does not contain any resource of type '\"\n\t\t\t\t\t+ returnType.getName() + \"':\\n\" + JSONUtils.toString(object));\n\t\t}\n\t\t\n\t\tModel resourceModel = RDF2Go.getModelFactory().createModel().open();\n\t\tresourceModel.addAll(modelSet.iterator());\n\t\tResource resource = new Resource(resourceModel, subject, false);\n\t\t\n\t\tmodelSet.close();\n\t\t\n\t\treturn (T) resource.castTo(returnType);\n\t}", "signature": "T deserialize(Object object, Class<T> returnType)", "full_signature": "public static T deserialize(Object object, Class<T> returnType)", "class_method_signature": "JSONLDUtils.deserialize(Object object, Class<T> returnType)", "testcase": false, "constructor": false, "invocations": ["toRDF", "findStatements", "hasNext", "next", "asURI", "getObject", "equals", "guessClass", "asURI", "getSubject", "equals", "getSubject", "getName", "toString", "close", "getName", "toString", "open", "createModel", "getModelFactory", "addAll", "iterator", "close", "castTo"]}, "repository": {"repo_id": 10522064, "url": "https://github.com/dime-project/dime-server", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 22, "size": 39337, "license": "licensed"}}