{"test_class": {"identifier": "FullnameExtractorTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private static FullnameExtractor fullnameExtractor = new FullnameExtractor();", "modifier": "private static", "type": "FullnameExtractor", "declarator": "fullnameExtractor = new FullnameExtractor()", "var_name": "fullnameExtractor"}], "file": "dime-personalserver/dime-datamining/src/test/java/eu/dime/ps/datamining/gate/FullnameExtractorTest.java"}, "test_case": {"identifier": "testFullnameExtraction8", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFullnameExtraction8() throws ModelRuntimeException, IOException, DataMiningException {\n\t\t// getting model\n\t\tModel model = RDF2Go.getModelFactory().createModel();\n\t    model.open();   \n\t \n\t    URI name = model.createURI(\"urn:juan:personName4\");\t   \t    \n\t\tResourceModel resourceModel = new ResourceModelImpl(name);\n\t\tresourceModel.set(NCO.fullname, \"John Smith Sr.\");\n\t\tresourceModel.set(NCO.nameHonorificSuffix, \"Jr.\");\n\t\t\n\t\tResourceModel newResourceModel = fullnameExtractor.extract(resourceModel);\t\n\t\tassertEquals(\"John\", newResourceModel.get(NCO.nameGiven));\n\t\tassertEquals(\"Smith\", newResourceModel.get(NCO.nameFamily));\n\t\tassertEquals(\"Jr.\", newResourceModel.get(NCO.nameHonorificSuffix)); //test to verify that original NCO.nameHonorSuffix property is not overridden by extracted entity i.e. Sr.\n\t\tassertEquals(\"male\", newResourceModel.get(NCO.gender));\n\t}", "signature": "void testFullnameExtraction8()", "full_signature": "@Test public void testFullnameExtraction8()", "class_method_signature": "FullnameExtractorTest.testFullnameExtraction8()", "testcase": true, "constructor": false, "invocations": ["createModel", "getModelFactory", "open", "createURI", "set", "set", "extract", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "FullnameExtractor", "superclass": "extends Base", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FullnameExtractor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FullnameExtractor.class)", "var_name": "logger"}, {"original_string": "private static final String GAPP = \"MatchingPipeline.gapp\";", "modifier": "private static final", "type": "String", "declarator": "GAPP = \"MatchingPipeline.gapp\"", "var_name": "GAPP"}, {"original_string": "private final CorpusController application;", "modifier": "private final", "type": "CorpusController", "declarator": "application", "var_name": "application"}], "methods": [{"identifier": "FullnameExtractor", "parameters": "()", "modifiers": "public", "return": "", "signature": " FullnameExtractor()", "full_signature": "public  FullnameExtractor()", "class_method_signature": "FullnameExtractor.FullnameExtractor()", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(ResourceModel personName)", "modifiers": "public", "return": "ResourceModel", "signature": "ResourceModel extract(ResourceModel personName)", "full_signature": "public ResourceModel extract(ResourceModel personName)", "class_method_signature": "FullnameExtractor.extract(ResourceModel personName)", "testcase": false, "constructor": false}], "file": "dime-personalserver/dime-datamining/src/main/java/eu/dime/ps/datamining/gate/FullnameExtractor.java"}, "focal_method": {"identifier": "extract", "parameters": "(ResourceModel personName)", "modifiers": "public", "return": "ResourceModel", "body": "public ResourceModel extract(ResourceModel personName) throws DataMiningException {\n\n\t\t// copy content from original resource\n\t\tResourceModel result = new ResourceModelImpl(personName.getModel(), personName.getIdentifier());\n\t\t\n\t\tString content = personName.getString(NCO.fullname);\n\t\tif ((content == null) || (content.trim().isEmpty())) {\n\t\t\tlogger.info(\"PersonName \"+personName.getIdentifier()+\" doesn't specify the contact's fullname as the NCO.fullname; \" +\n\t\t\t\t\t\"skipping fullname extraction...\");\n\t\t\treturn result;\n\t\t}\n\n\t\tDocument doc = null;\n\t\ttry {\n\t\t\t// build a document from the textual fullname\n\t\t\tdoc = Factory.newDocument(content);\n\n\t\t\tsynchronized(application) {\n\t\t\t\t// put the document in the corpus\n\t\t\t\tCorpus corpus = Factory.newCorpus(\"Fullname\"+System.currentTimeMillis());\n\t\t\t\tcorpus.add(doc);\n\t\t\t\n\t\t\t\t// tell application what corpus to use\n\t\t\t\tapplication.setCorpus(corpus);\n\n\t\t\t\t// run the application\n\t\t\t\tapplication.execute();\n\t\n\t\t\t\tAnnotationSet defaultAnnotSet = doc.getAnnotations();\t\t   \n\t\t\t\tSet<String> annotTypesRequired = new HashSet<String>();\t\n\t\t\t\tannotTypesRequired.add(\"PersonEntities\"); \n\t\t\t\t\t\t\t\t\n\t\t\t\tAnnotationSet entityAnnSet = defaultAnnotSet.get(new HashSet<String>(annotTypesRequired));\n\t\t\t\tList<Annotation> entityAnnots = gate.Utils.inDocumentOrder(entityAnnSet);\n\t\t\t\t\n\t\t\t\t// extract annotations from the defined AnnotationSet\n\t\t\t\tfor (Annotation annot : entityAnnots) {\t\t\t\t\n\t\t\t\t\tString entityType = annot.getType();\n\t\t\t\t\tString firstname = null;\n\t\t\t\t\tString surname = null;\n\t\t\t\t\tString prefix = null;\n\t\t\t\t\tString suffix = null; \n\t\t\t\t\tString gender = null;\n\t\t\t\t\t\n\t\t\t\t\tif (entityType.equals(\"PersonEntities\")) {   \n\t\t\t\t\t\tif ((!(annot.getFeatures().get(\"prefix\").toString().isEmpty())) && ((!(result.has(NCO.nameHonorificPrefix))) || ((result.get(NCO.nameHonorificPrefix)).equals(\"\")))) {\n\t\t\t\t\t\t\tprefix = annot.getFeatures().get(\"prefix\").toString(); \n\t\t\t\t\t\t\tresult.set(NCO.nameHonorificPrefix, prefix); \n\t\t\t\t\t\t} \n\t\t\t\t\t\tif ((!(annot.getFeatures().get(\"firstname\").toString().isEmpty())) && ((!(result.has(NCO.nameGiven))) || ((result.get(NCO.nameGiven)).equals(\"\")))) {\n\t\t\t\t\t\t\tfirstname = annot.getFeatures().get(\"firstname\").toString(); \n\t\t\t\t\t\t\tresult.set(NCO.nameGiven, firstname);\n\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\tif ((!(annot.getFeatures().get(\"surname\").toString().isEmpty())) && ((!(result.has(NCO.nameFamily))) || ((result.get(NCO.nameFamily)).equals(\"\")))) {\n\t\t\t\t\t\t\tsurname = annot.getFeatures().get(\"surname\").toString();  \n\t\t\t\t\t\t\tresult.set(NCO.nameFamily, surname);\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t   \t\n\t\t\t\t\t\tif ((!(annot.getFeatures().get(\"suffix\").toString().isEmpty())) && ((!(result.has(NCO.nameHonorificSuffix))) || ((result.get(NCO.nameHonorificSuffix)).equals(\"\")))) {\n\t\t\t\t\t\t\tsuffix = annot.getFeatures().get(\"suffix\").toString();  \n\t\t\t\t\t\t\tresult.set(NCO.nameHonorificSuffix, suffix);\n\t\t\t\t\t\t}  \n\t\t\t\t\t\tif ((!(annot.getFeatures().get(\"gender\").toString().isEmpty())) && ((!(result.has(NCO.gender))) || ((result.get(NCO.gender)).equals(\"\")))) {\n\t\t\t\t\t\t\tgender = annot.getFeatures().get(\"gender\").toString(); \n\t\t\t\t\t\t\tresult.set(NCO.gender, gender);\n\t\t\t\t\t\t}  \n\t\t\t\t\t}\t\n\t\t\t\t}\t\t\t\n\n\t\t\t\t// cleanup resources from corpus\n\t\t\t\tcorpus.cleanup();\n\t\t\t\tcorpus.clear();\n\t\t\t}\n\n\t\t} catch (ResourceInstantiationException e) {\n\t\t\tthrow new DataMiningException(\"Failed to extract named entities from '\"+content+\"'\", e);\n\t\t} catch (ExecutionException e) {\n\t\t\tthrow new DataMiningException(\"Failed to extract named entities from '\"+content+\"'\", e);\n\t\t} finally {\n\t\t\tif (doc != null) {\n\t\t\t\t// remove document so GATE doesn't hold any reference to it\n\t\t\t\tFactory.deleteResource(doc);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//if NER does not recognise any name and surname, use this manual approach\n\t\tif (((!(result.has(NCO.nameGiven))) || ((result.get(NCO.nameGiven)).equals(\"\"))) \n\t\t\t\t&& ((!(result.has(NCO.nameAdditional))) || ((result.get(NCO.nameAdditional)).equals(\"\")))\n\t\t\t\t&& ((!(result.has(NCO.nameFamily))) || ((result.get(NCO.nameFamily)).equals(\"\")))) {\t\t\n\t\t\n\t\t\tString[] fullname = content.split(\" \");\n\t\t\t\n\t\t\tif (fullname.length == 1) {\n\t\t\t\tresult.set(NCO.nameGiven, fullname[0]);\n\t \t\t} else if (fullname.length == 2) {\n\t\t\t\tresult.set(NCO.nameGiven, fullname[0]);\n\t\t\t\tresult.set(NCO.nameFamily, fullname[1]);\n\t\t\t} else if (fullname.length == 3) {\n\t\t\t\tresult.set(NCO.nameGiven, fullname[0]);\n\t\t\t\tresult.set(NCO.nameAdditional, fullname[1]);\n\t\t\t\tresult.set(NCO.nameFamily, fullname[2]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}", "signature": "ResourceModel extract(ResourceModel personName)", "full_signature": "public ResourceModel extract(ResourceModel personName)", "class_method_signature": "FullnameExtractor.extract(ResourceModel personName)", "testcase": false, "constructor": false, "invocations": ["getModel", "getIdentifier", "getString", "isEmpty", "trim", "info", "getIdentifier", "newDocument", "newCorpus", "currentTimeMillis", "add", "setCorpus", "execute", "getAnnotations", "add", "get", "inDocumentOrder", "getType", "equals", "isEmpty", "toString", "get", "getFeatures", "has", "equals", "get", "toString", "get", "getFeatures", "set", "isEmpty", "toString", "get", "getFeatures", "has", "equals", "get", "toString", "get", "getFeatures", "set", "isEmpty", "toString", "get", "getFeatures", "has", "equals", "get", "toString", "get", "getFeatures", "set", "isEmpty", "toString", "get", "getFeatures", "has", "equals", "get", "toString", "get", "getFeatures", "set", "isEmpty", "toString", "get", "getFeatures", "has", "equals", "get", "toString", "get", "getFeatures", "set", "cleanup", "clear", "deleteResource", "has", "equals", "get", "has", "equals", "get", "has", "equals", "get", "split", "set", "set", "set", "set", "set", "set"]}, "repository": {"repo_id": 10522064, "url": "https://github.com/dime-project/dime-server", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 22, "size": 39337, "license": "licensed"}}