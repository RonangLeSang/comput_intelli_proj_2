{"test_class": {"identifier": "CRUDNotifierTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private ModelFactory modelFactory = new ModelFactory();", "modifier": "private", "type": "ModelFactory", "declarator": "modelFactory = new ModelFactory()", "var_name": "modelFactory"}, {"original_string": "private CRUDNotifier notifier;", "modifier": "private", "type": "CRUDNotifier", "declarator": "notifier", "var_name": "notifier"}, {"original_string": "private NotifierManagerMock notifierManager = new NotifierManagerMock();", "modifier": "private", "type": "NotifierManagerMock", "declarator": "notifierManager = new NotifierManagerMock()", "var_name": "notifierManager"}, {"original_string": "private LogEventManagerMock logEventManager = new LogEventManagerMock();", "modifier": "private", "type": "LogEventManagerMock", "declarator": "logEventManager = new LogEventManagerMock()", "var_name": "logEventManager"}, {"original_string": "@Autowired\n\tprivate Connection connection;", "modifier": "@Autowired\n\tprivate", "type": "Connection", "declarator": "connection", "var_name": "connection"}], "file": "dime-personalserver/dime-controllers/src/test/java/eu/dime/ps/controllers/notification/CRUDNotifierTest.java"}, "test_case": {"identifier": "testCreatePersonGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreatePersonGroup() {\n\t\tPersonGroup group = modelFactory.getPIMOFactory().createPersonGroup();\n\t\tgroup.setCreator(new URIImpl(\"urn:test\"));\n\t\tEvent event = new Event(connection.getName(), Event.ACTION_RESOURCE_ADD, group);\n\t\tnotifier.onReceive(event);\n\t\t\n\t\tassertEquals(1, notifierManager.internal.size());\n\t\tDimeInternalNotification notification = notifierManager.internal.get(0);\n\t\tassertEquals(group.asURI().toString(), notification.getItemID());\n\t\tassertEquals(DimeInternalNotification.OP_CREATE, notification.getOperation());\n\t\tassertEquals(Type.get(group).getLabel(), notification.getItemType());\n\t}", "signature": "void testCreatePersonGroup()", "full_signature": "@Test public void testCreatePersonGroup()", "class_method_signature": "CRUDNotifierTest.testCreatePersonGroup()", "testcase": true, "constructor": false, "invocations": ["createPersonGroup", "getPIMOFactory", "setCreator", "getName", "onReceive", "assertEquals", "size", "get", "assertEquals", "toString", "asURI", "getItemID", "assertEquals", "getOperation", "assertEquals", "getLabel", "get", "getItemType"]}, "focal_class": {"identifier": "CRUDNotifier", "superclass": "", "interfaces": "implements BroadcastReceiver", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CRUDNotifier.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CRUDNotifier.class)", "var_name": "logger"}, {"original_string": "private NotifierManager notifierManager;", "modifier": "private", "type": "NotifierManager", "declarator": "notifierManager", "var_name": "notifierManager"}, {"original_string": "private LogEventManager logEventManager;", "modifier": "private", "type": "LogEventManager", "declarator": "logEventManager", "var_name": "logEventManager"}, {"original_string": "private static final String[] ACTIONS = new String[] {\n\t\tEvent.ACTION_RESOURCE_ADD,\n\t\tEvent.ACTION_RESOURCE_MODIFY,\n\t\tEvent.ACTION_RESOURCE_DELETE\n\t};", "modifier": "private static final", "type": "String[]", "declarator": "ACTIONS = new String[] {\n\t\tEvent.ACTION_RESOURCE_ADD,\n\t\tEvent.ACTION_RESOURCE_MODIFY,\n\t\tEvent.ACTION_RESOURCE_DELETE\n\t}", "var_name": "ACTIONS"}, {"original_string": "private static final Map<String, String> NOTIFY_ACTIONS;", "modifier": "private static final", "type": "Map<String, String>", "declarator": "NOTIFY_ACTIONS", "var_name": "NOTIFY_ACTIONS"}], "methods": [{"identifier": "setLogEventManager", "parameters": "(LogEventManager logEventManager)", "modifiers": "@Autowired public", "return": "void", "signature": "void setLogEventManager(LogEventManager logEventManager)", "full_signature": "@Autowired public void setLogEventManager(LogEventManager logEventManager)", "class_method_signature": "CRUDNotifier.setLogEventManager(LogEventManager logEventManager)", "testcase": false, "constructor": false}, {"identifier": "CRUDNotifier", "parameters": "()", "modifiers": "public", "return": "", "signature": " CRUDNotifier()", "full_signature": "public  CRUDNotifier()", "class_method_signature": "CRUDNotifier.CRUDNotifier()", "testcase": false, "constructor": true}, {"identifier": "setNotifierManager", "parameters": "(NotifierManager notifierManager)", "modifiers": "public", "return": "void", "signature": "void setNotifierManager(NotifierManager notifierManager)", "full_signature": "public void setNotifierManager(NotifierManager notifierManager)", "class_method_signature": "CRUDNotifier.setNotifierManager(NotifierManager notifierManager)", "testcase": false, "constructor": false}, {"identifier": "onReceive", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(Event event)", "full_signature": "@Override public void onReceive(Event event)", "class_method_signature": "CRUDNotifier.onReceive(Event event)", "testcase": false, "constructor": false}], "file": "dime-personalserver/dime-controllers/src/main/java/eu/dime/ps/controllers/notification/CRUDNotifier.java"}, "focal_method": {"identifier": "onReceive", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void onReceive(Event event) {\n\t\tfinal String action = event.getAction();\n\n\t\t// only interested in create/update/delete actions\n\t\tif (!ArrayUtils.contains(ACTIONS, action)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal String itemId = event.getIdentifier().toString();\n\t\tfinal Resource resource = event.getData();\n\n\t\tif (NOTIFY_ACTIONS.containsKey(action)) {\n\t\t\tif (resource == null) {\n\t\t\t\tlogger.debug(\"Impossible to find type of resource (no metadata provided in the event), no notification will be sent [item=\"+itemId+\", action=\"+action+\"]\");\n\t\t\t} else {\t\t\t\t\n\t\t\t\tfinal Type itemType = Type.get(resource); //if Type is not found maybe it is a profile attribute TODO find a better way of handling this\n\t\t\t\tfinal ProfileAttributeType itemTypeProfileAttribute = ProfileAttributeType.get(resource);\n\n\t\t\t\tif (itemType == null && itemTypeProfileAttribute == null) {\t\t\t\t\t\t\n\t\t\t\t\tlogger.debug(\"Type is undefined, no notification will be sent [item=\"+resource+\", action=\"+action+\"]\");\n\t\t\t\t\treturn;\n\t\t\t\t}\t\t\t\t\n\n\t\t\t\tfinal String type = (itemTypeProfileAttribute == null) ? itemType.toString() : \"profileattribute\";\n\t\t\t\tString creatorId = null;\n\t\t\t\tNode creator = ModelUtils.findObject(resource.getModel(), resource, NAO.creator);\n\t\t\t\tif (creator != null) {\n\t\t\t\t\tcreatorId = creator.toString();\n\t\t\t\t}\n\n\n\t\t\t\tfinal Long tenant = Long.parseLong(event.getTenant());\n\t\t\t\tfinal String operation = NOTIFY_ACTIONS.get(action);\n\n\t\t\t\t//selfevaulation tool store create and remove operations\n\t\t\t\tif(operation.equals(DimeInternalNotification.OP_CREATE) || operation.equals(DimeInternalNotification.OP_REMOVE ))\n\t\t\t\t\ttry {\n\t\t\t\t\t\tNode rdfType =  ModelUtils.findObject(resource.getModel(), resource,  RDF.type);\n\t\t\t\t\t\tif (rdfType != null && !rdfType.asURI().equals(PPO.PrivacyPreference))\t\t\t\t\t \n\t\t\t\t\t\t\tlogEventManager.setLog(operation, type,Tenant.find(tenant));\n\t\t\t\t\t\telse if(type.equals(\"profilecard\"))\n\t\t\t\t\t\t\tlogEventManager.setLog(operation, type,Tenant.find(tenant));\n\n\t\t\t\t\t} catch (EventLoggerException e) {\t\t\t\t\t\n\t\t\t\t\t\tlogger.error(\"A sharing process could not be logged\",e);\n\t\t\t\t\t}\t\t\t\t   \n\n\n\t\t\t\t// sends internal notifications (to UI)\n\t\t\t\tfinal SystemNotification notification = new SystemNotification(tenant, operation, itemId, type, creatorId);\n\t\t\t\ttry {\n\t\t\t\t\tlogger.debug(\"Pushing internal notification: \"+notification.toString());\n\t\t\t\t\tnotifierManager.pushInternalNotification(notification);\n\t\t\t\t} catch (NotifierException e) {\n\t\t\t\t\tlogger.error(\"Error while pushing notification [\"+notification+\"].\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void onReceive(Event event)", "full_signature": "@Override public void onReceive(Event event)", "class_method_signature": "CRUDNotifier.onReceive(Event event)", "testcase": false, "constructor": false, "invocations": ["getAction", "contains", "toString", "getIdentifier", "getData", "containsKey", "debug", "get", "get", "debug", "toString", "findObject", "getModel", "toString", "parseLong", "getTenant", "get", "equals", "equals", "findObject", "getModel", "equals", "asURI", "setLog", "find", "equals", "setLog", "find", "error", "debug", "toString", "pushInternalNotification", "error"]}, "repository": {"repo_id": 10522064, "url": "https://github.com/dime-project/dime-server", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 22, "size": 39337, "license": "licensed"}}