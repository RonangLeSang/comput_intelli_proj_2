{"test_class": {"identifier": "FocusedOnOnePortletPredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private HttpServletRequest mockRequest;", "modifier": "@Mock private", "type": "HttpServletRequest", "declarator": "mockRequest", "var_name": "mockRequest"}, {"original_string": "@Mock private IUrlSyntaxProvider syntaxProvider;", "modifier": "@Mock private", "type": "IUrlSyntaxProvider", "declarator": "syntaxProvider", "var_name": "syntaxProvider"}, {"original_string": "@Mock private IPortalRequestInfo portalRequestInfo;", "modifier": "@Mock private", "type": "IPortalRequestInfo", "declarator": "portalRequestInfo", "var_name": "portalRequestInfo"}, {"original_string": "private FocusedOnOnePortletPredicate predicate;", "modifier": "private", "type": "FocusedOnOnePortletPredicate", "declarator": "predicate", "var_name": "predicate"}], "file": "uPortal-rendering/src/test/java/org/apereo/portal/rendering/predicates/FocusedOnOnePortletPredicateTest.java"}, "test_case": {"identifier": "hasFriendlyToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hasFriendlyToString() {\n\n        assertEquals(\"FocusedOnOnePortletPredicate\", predicate.toString());\n    }", "signature": "void hasFriendlyToString()", "full_signature": "@Test public void hasFriendlyToString()", "class_method_signature": "FocusedOnOnePortletPredicateTest.hasFriendlyToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString"]}, "focal_class": {"identifier": "FocusedOnOnePortletPredicate", "superclass": "", "interfaces": "implements Predicate<HttpServletRequest>", "fields": [{"original_string": "protected final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private IUrlSyntaxProvider urlSyntaxProvider;", "modifier": "private", "type": "IUrlSyntaxProvider", "declarator": "urlSyntaxProvider", "var_name": "urlSyntaxProvider"}], "methods": [{"identifier": "test", "parameters": "(final HttpServletRequest request)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean test(final HttpServletRequest request)", "full_signature": "@Override public boolean test(final HttpServletRequest request)", "class_method_signature": "FocusedOnOnePortletPredicate.test(final HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "setUrlSyntaxProvider", "parameters": "(IUrlSyntaxProvider urlSyntaxProvider)", "modifiers": "@Autowired public", "return": "void", "signature": "void setUrlSyntaxProvider(IUrlSyntaxProvider urlSyntaxProvider)", "full_signature": "@Autowired public void setUrlSyntaxProvider(IUrlSyntaxProvider urlSyntaxProvider)", "class_method_signature": "FocusedOnOnePortletPredicate.setUrlSyntaxProvider(IUrlSyntaxProvider urlSyntaxProvider)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FocusedOnOnePortletPredicate.toString()", "testcase": false, "constructor": false}], "file": "uPortal-rendering/src/main/java/org/apereo/portal/rendering/predicates/FocusedOnOnePortletPredicate.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        return this.getClass().getSimpleName();\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FocusedOnOnePortletPredicate.toString()", "testcase": false, "constructor": false, "invocations": ["getSimpleName", "getClass"]}, "repository": {"repo_id": 2614085, "url": "https://github.com/Jasig/uPortal", "stars": 195, "created": "10/20/2011 3:34:22 PM +00:00", "updates": "2020-01-22T16:02:00+00:00", "fork": "False", "license": "licensed"}}