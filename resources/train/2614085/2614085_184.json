{"test_class": {"identifier": "PortalPropertySourcesPlaceholderConfigurerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "PortalPropertySourcesPlaceholderConfigurer propConfig =\n            new PortalPropertySourcesPlaceholderConfigurer();", "modifier": "", "type": "PortalPropertySourcesPlaceholderConfigurer", "declarator": "propConfig =\n            new PortalPropertySourcesPlaceholderConfigurer()", "var_name": "propConfig"}, {"original_string": "Properties props = new Properties();", "modifier": "", "type": "Properties", "declarator": "props = new Properties()", "var_name": "props"}], "file": "uPortal-spring/src/test/java/org/springframework/context/support/PortalPropertySourcesPlaceholderConfigurerTest.java"}, "test_case": {"identifier": "testNoEnvVar", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoEnvVar() {\n        propConfig.honorClusterOverrides(\"\", props);\n        assertEquals(\"props has same size\", 5, props.size());\n        assertEquals(\n                \"dev.url is still https://github.com/\",\n                \"https://github.com/\",\n                props.getProperty(\"dev.url\"));\n        assertEquals(\n                \"dev.user is still https://github.com/\", \"bjagg\", props.getProperty(\"dev.user\"));\n        assertEquals(\n                \"doc.url is still https://github.com/\",\n                \"https://github.io/\",\n                props.getProperty(\"doc.url\"));\n        assertEquals(\n                \"doc.user is still https://github.com/\", \"jhelwig\", props.getProperty(\"doc.user\"));\n        assertEquals(\"user is still https://github.com/\", \"jwick\", props.getProperty(\"user\"));\n    }", "signature": "void testNoEnvVar()", "full_signature": "@Test public void testNoEnvVar()", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurerTest.testNoEnvVar()", "testcase": true, "constructor": false, "invocations": ["honorClusterOverrides", "assertEquals", "size", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty"]}, "focal_class": {"identifier": "PortalPropertySourcesPlaceholderConfigurer", "superclass": "extends PropertySourcesPlaceholderConfigurer", "interfaces": "", "fields": [{"original_string": "public static final String EXTENDED_PROPERTIES_SOURCE = \"extendedPropertiesSource\";", "modifier": "public static final", "type": "String", "declarator": "EXTENDED_PROPERTIES_SOURCE = \"extendedPropertiesSource\"", "var_name": "EXTENDED_PROPERTIES_SOURCE"}, {"original_string": "public static final String JAYSYPT_ENCRYPTION_KEY_VARIABLE = \"UP_JASYPT_KEY\";", "modifier": "public static final", "type": "String", "declarator": "JAYSYPT_ENCRYPTION_KEY_VARIABLE = \"UP_JASYPT_KEY\"", "var_name": "JAYSYPT_ENCRYPTION_KEY_VARIABLE"}, {"original_string": "public static final String CLUSTER_ENV_VARIABLE = \"UP_CLUSTER\";", "modifier": "public static final", "type": "String", "declarator": "CLUSTER_ENV_VARIABLE = \"UP_CLUSTER\"", "var_name": "CLUSTER_ENV_VARIABLE"}, {"original_string": "public static final String CLUSTER_JVM_VARIABLE = \"cluster\";", "modifier": "public static final", "type": "String", "declarator": "CLUSTER_JVM_VARIABLE = \"cluster\"", "var_name": "CLUSTER_JVM_VARIABLE"}, {"original_string": "private PropertyResolver propertyResolver;", "modifier": "private", "type": "PropertyResolver", "declarator": "propertyResolver", "var_name": "propertyResolver"}], "methods": [{"identifier": "PortalPropertySourcesPlaceholderConfigurer", "parameters": "()", "modifiers": "public", "return": "", "signature": " PortalPropertySourcesPlaceholderConfigurer()", "full_signature": "public  PortalPropertySourcesPlaceholderConfigurer()", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.PortalPropertySourcesPlaceholderConfigurer()", "testcase": false, "constructor": true}, {"identifier": "setIgnoreResourceNotFound", "parameters": "(boolean value)", "modifiers": "@Override public", "return": "void", "signature": "void setIgnoreResourceNotFound(boolean value)", "full_signature": "@Override public void setIgnoreResourceNotFound(boolean value)", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.setIgnoreResourceNotFound(boolean value)", "testcase": false, "constructor": false}, {"identifier": "setLocations", "parameters": "(Resource... locations)", "modifiers": "@Override public", "return": "void", "signature": "void setLocations(Resource... locations)", "full_signature": "@Override public void setLocations(Resource... locations)", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.setLocations(Resource... locations)", "testcase": false, "constructor": false}, {"identifier": "postProcessBeanFactory", "parameters": "(ConfigurableListableBeanFactory beanFactory)", "modifiers": "@Override public", "return": "void", "signature": "void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)", "full_signature": "@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)", "testcase": false, "constructor": false}, {"identifier": "getPropertyResolver", "parameters": "()", "modifiers": "public", "return": "PropertyResolver", "signature": "PropertyResolver getPropertyResolver()", "full_signature": "public PropertyResolver getPropertyResolver()", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.getPropertyResolver()", "testcase": false, "constructor": false}, {"identifier": "mergeProperties", "parameters": "()", "modifiers": "@Override protected", "return": "Properties", "signature": "Properties mergeProperties()", "full_signature": "@Override protected Properties mergeProperties()", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.mergeProperties()", "testcase": false, "constructor": false}, {"identifier": "honorClusterOverrides", "parameters": "(Properties properties)", "modifiers": "public static", "return": "void", "signature": "void honorClusterOverrides(Properties properties)", "full_signature": "public static void honorClusterOverrides(Properties properties)", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.honorClusterOverrides(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "honorClusterOverrides", "parameters": "(String cluster, Properties properties)", "modifiers": "public static", "return": "void", "signature": "void honorClusterOverrides(String cluster, Properties properties)", "full_signature": "public static void honorClusterOverrides(String cluster, Properties properties)", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.honorClusterOverrides(String cluster, Properties properties)", "testcase": false, "constructor": false}], "file": "uPortal-spring/src/main/java/org/springframework/context/support/PortalPropertySourcesPlaceholderConfigurer.java"}, "focal_method": {"identifier": "honorClusterOverrides", "parameters": "(Properties properties)", "modifiers": "public static", "return": "void", "body": "public static void honorClusterOverrides(Properties properties) {\n        String cluster = System.getenv(CLUSTER_ENV_VARIABLE);\n        if (cluster == null || cluster.length() == 0) {\n            cluster = System.getProperty(CLUSTER_JVM_VARIABLE, \"\");\n        }\n        honorClusterOverrides(cluster, properties);\n    }", "signature": "void honorClusterOverrides(Properties properties)", "full_signature": "public static void honorClusterOverrides(Properties properties)", "class_method_signature": "PortalPropertySourcesPlaceholderConfigurer.honorClusterOverrides(Properties properties)", "testcase": false, "constructor": false, "invocations": ["getenv", "length", "getProperty", "honorClusterOverrides"]}, "repository": {"repo_id": 2614085, "url": "https://github.com/Jasig/uPortal", "stars": 195, "created": "10/20/2011 3:34:22 PM +00:00", "updates": "2020-01-22T16:02:00+00:00", "fork": "False", "license": "licensed"}}