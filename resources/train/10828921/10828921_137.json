{"test_class": {"identifier": "CommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME = UUID.randomUUID().toString();", "modifier": "private static final", "type": "String", "declarator": "NAME = UUID.randomUUID().toString()", "var_name": "NAME"}, {"original_string": "private static final String USER = UUID.randomUUID().toString();", "modifier": "private static final", "type": "String", "declarator": "USER = UUID.randomUUID().toString()", "var_name": "USER"}, {"original_string": "private static final String VERSION = UUID.randomUUID().toString();", "modifier": "private static final", "type": "String", "declarator": "VERSION = UUID.randomUUID().toString()", "var_name": "VERSION"}, {"original_string": "private static final long CHECK_DELAY = 12380L;", "modifier": "private static final", "type": "long", "declarator": "CHECK_DELAY = 12380L", "var_name": "CHECK_DELAY"}, {"original_string": "private static final ArrayList<String> EXECUTABLE_AND_ARGS = Lists.newArrayList(\"foo-cli\", \"--verbose\");", "modifier": "private static final", "type": "ArrayList<String>", "declarator": "EXECUTABLE_AND_ARGS = Lists.newArrayList(\"foo-cli\", \"--verbose\")", "var_name": "EXECUTABLE_AND_ARGS"}, {"original_string": "private static final String EXECUTABLE = StringUtils.join(EXECUTABLE_AND_ARGS, \" \");", "modifier": "private static final", "type": "String", "declarator": "EXECUTABLE = StringUtils.join(EXECUTABLE_AND_ARGS, \" \")", "var_name": "EXECUTABLE"}, {"original_string": "private static final int MEMORY = 10_255;", "modifier": "private static final", "type": "int", "declarator": "MEMORY = 10_255", "var_name": "MEMORY"}], "file": "genie-common/src/test/java/com/netflix/genie/common/dto/CommandTest.java"}, "test_case": {"identifier": "canBuildCommandNullOptionals", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void canBuildCommandNullOptionals() {\n        final Command.Builder builder\n            = new Command.Builder(NAME, USER, VERSION, CommandStatus.ACTIVE, EXECUTABLE_AND_ARGS, CHECK_DELAY);\n        builder.withSetupFile(null);\n        builder.withConfigs(null);\n        builder.withDependencies(null);\n        builder.withCreated(null);\n        builder.withDescription(null);\n        builder.withId(null);\n        builder.withTags(null);\n        builder.withUpdated(null);\n        builder.withMemory(null);\n        builder.withClusterCriteria(null);\n\n        final Command command = builder.build();\n        Assertions.assertThat(command.getName()).isEqualTo(NAME);\n        Assertions.assertThat(command.getUser()).isEqualTo(USER);\n        Assertions.assertThat(command.getVersion()).isEqualTo(VERSION);\n        Assertions.assertThat(command.getStatus()).isEqualTo(CommandStatus.ACTIVE);\n        Assertions.assertThat(command.getExecutable()).isEqualTo(EXECUTABLE);\n        Assertions.assertThat(command.getExecutableAndArguments()).isEqualTo(EXECUTABLE_AND_ARGS);\n        Assertions.assertThat(command.getSetupFile()).isNotPresent();\n        Assertions.assertThat(command.getConfigs()).isEmpty();\n        Assertions.assertThat(command.getDependencies()).isEmpty();\n        Assertions.assertThat(command.getCreated()).isNotPresent();\n        Assertions.assertThat(command.getDescription()).isNotPresent();\n        Assertions.assertThat(command.getId()).isNotPresent();\n        Assertions.assertThat(command.getTags()).isEmpty();\n        Assertions.assertThat(command.getUpdated()).isNotPresent();\n        Assertions.assertThat(command.getMemory()).isNotPresent();\n        Assertions.assertThat(command.getClusterCriteria()).isEmpty();\n    }", "signature": "void canBuildCommandNullOptionals()", "full_signature": "@Test void canBuildCommandNullOptionals()", "class_method_signature": "CommandTest.canBuildCommandNullOptionals()", "testcase": true, "constructor": false, "invocations": ["withSetupFile", "withConfigs", "withDependencies", "withCreated", "withDescription", "withId", "withTags", "withUpdated", "withMemory", "withClusterCriteria", "build", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getUser", "isEqualTo", "assertThat", "getVersion", "isEqualTo", "assertThat", "getStatus", "isEqualTo", "assertThat", "getExecutable", "isEqualTo", "assertThat", "getExecutableAndArguments", "isNotPresent", "assertThat", "getSetupFile", "isEmpty", "assertThat", "getConfigs", "isEmpty", "assertThat", "getDependencies", "isNotPresent", "assertThat", "getCreated", "isNotPresent", "assertThat", "getDescription", "isNotPresent", "assertThat", "getId", "isEmpty", "assertThat", "getTags", "isNotPresent", "assertThat", "getUpdated", "isNotPresent", "assertThat", "getMemory", "isEmpty", "assertThat", "getClusterCriteria"]}, "focal_class": {"identifier": "Command", "superclass": "extends ExecutionEnvironmentDTO", "interfaces": "", "fields": [{"original_string": "public static final long DEFAULT_CHECK_DELAY = 10000L;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_CHECK_DELAY = 10000L", "var_name": "DEFAULT_CHECK_DELAY"}, {"original_string": "private static final long serialVersionUID = -3559641165667609041L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3559641165667609041L", "var_name": "serialVersionUID"}, {"original_string": "@NotNull(message = \"A valid command status is required\")\n    private final CommandStatus status;", "modifier": "@NotNull(message = \"A valid command status is required\")\n    private final", "type": "CommandStatus", "declarator": "status", "var_name": "status"}, {"original_string": "@NotEmpty(message = \"An executable is required\")\n    @Size(max = 1024, message = \"Executable path can't be longer than 1024 characters\")\n    private final String executable;", "modifier": "@NotEmpty(message = \"An executable is required\")\n    @Size(max = 1024, message = \"Executable path can't be longer than 1024 characters\")\n    private final", "type": "String", "declarator": "executable", "var_name": "executable"}, {"original_string": "@NotEmpty(message = \"An executable is required\")\n    private final List<@NotEmpty @Size(max = 1024) String> executableAndArguments;", "modifier": "@NotEmpty(message = \"An executable is required\")\n    private final", "type": "List<@NotEmpty @Size(max = 1024) String>", "declarator": "executableAndArguments", "var_name": "executableAndArguments"}, {"original_string": "@Min(\n        value = 1,\n        message = \"The delay between checks must be at least 1 millisecond. Probably should be much more than that\"\n    )\n    private final long checkDelay;", "modifier": "@Min(\n        value = 1,\n        message = \"The delay between checks must be at least 1 millisecond. Probably should be much more than that\"\n    )\n    private final", "type": "long", "declarator": "checkDelay", "var_name": "checkDelay"}, {"original_string": "@Min(\n        value = 1,\n        message = \"The minimum amount of memory if desired is 1 MB. Probably should be much more than that\"\n    )\n    private final Integer memory;", "modifier": "@Min(\n        value = 1,\n        message = \"The minimum amount of memory if desired is 1 MB. Probably should be much more than that\"\n    )\n    private final", "type": "Integer", "declarator": "memory", "var_name": "memory"}, {"original_string": "private final List<Criterion> clusterCriteria;", "modifier": "private final", "type": "List<Criterion>", "declarator": "clusterCriteria", "var_name": "clusterCriteria"}], "methods": [{"identifier": "Command", "parameters": "(@Valid final Builder builder)", "modifiers": "protected", "return": "", "signature": " Command(@Valid final Builder builder)", "full_signature": "protected  Command(@Valid final Builder builder)", "class_method_signature": "Command.Command(@Valid final Builder builder)", "testcase": false, "constructor": true}, {"identifier": "getMemory", "parameters": "()", "modifiers": "public", "return": "Optional<Integer>", "signature": "Optional<Integer> getMemory()", "full_signature": "public Optional<Integer> getMemory()", "class_method_signature": "Command.getMemory()", "testcase": false, "constructor": false}], "file": "genie-common/src/main/java/com/netflix/genie/common/dto/Command.java"}, "focal_method": {"identifier": "getMemory", "parameters": "()", "modifiers": "public", "return": "Optional<Integer>", "body": "public Optional<Integer> getMemory() {\n        return Optional.ofNullable(this.memory);\n    }", "signature": "Optional<Integer> getMemory()", "full_signature": "public Optional<Integer> getMemory()", "class_method_signature": "Command.getMemory()", "testcase": false, "constructor": false, "invocations": ["ofNullable"]}, "repository": {"repo_id": 10828921, "url": "https://github.com/Netflix/genie", "stars": 1273, "created": "6/20/2013 8:35:56 PM +00:00", "updates": "2020-01-27T17:49:42+00:00", "fork": "False", "license": "licensed"}}