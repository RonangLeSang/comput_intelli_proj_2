{"test_class": {"identifier": "UNIXUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Executor executor;", "modifier": "private", "type": "Executor", "declarator": "executor", "var_name": "executor"}], "file": "genie-web/src/test/java/com/netflix/genie/web/util/UNIXUtilsTest.java"}, "test_case": {"identifier": "testCreateUserMethodSuccessDoesNotExist1", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testCreateUserMethodSuccessDoesNotExist1() throws IOException {\n        final String user = \"user\";\n        final String group = \"group\";\n\n        final CommandLine idCheckCommandLine = new CommandLine(\"id\");\n        idCheckCommandLine.addArgument(\"-u\");\n        idCheckCommandLine.addArgument(user);\n\n        Mockito.when(this.executor.execute(Mockito.any(CommandLine.class))).thenThrow(new IOException());\n\n        final ArgumentCaptor<CommandLine> argumentCaptor = ArgumentCaptor.forClass(CommandLine.class);\n        final List<String> command = Arrays.asList(\"sudo\", \"useradd\", user, \"-G\", group, \"-M\");\n\n        try {\n            UNIXUtils.createUser(user, group, executor);\n        } catch (IOException ignored) {\n        }\n\n        Mockito.verify(this.executor, Mockito.times(3)).execute(argumentCaptor.capture());\n        Assertions.assertThat(argumentCaptor.getAllValues().get(2).toStrings()).containsExactlyElementsOf(command);\n    }", "signature": "void testCreateUserMethodSuccessDoesNotExist1()", "full_signature": "@Test void testCreateUserMethodSuccessDoesNotExist1()", "class_method_signature": "UNIXUtilsTest.testCreateUserMethodSuccessDoesNotExist1()", "testcase": true, "constructor": false, "invocations": ["addArgument", "addArgument", "thenThrow", "when", "execute", "any", "forClass", "asList", "createUser", "execute", "verify", "times", "capture", "containsExactlyElementsOf", "assertThat", "toStrings", "get", "getAllValues"]}, "focal_class": {"identifier": "UNIXUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SUDO = \"sudo\";", "modifier": "private static final", "type": "String", "declarator": "SUDO = \"sudo\"", "var_name": "SUDO"}], "methods": [{"identifier": "UNIXUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " UNIXUtils()", "full_signature": "private  UNIXUtils()", "class_method_signature": "UNIXUtils.UNIXUtils()", "testcase": false, "constructor": true}, {"identifier": "createUser", "parameters": "(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    )", "modifiers": "public static synchronized", "return": "void", "signature": "void createUser(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    )", "full_signature": "public static synchronized void createUser(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    )", "class_method_signature": "UNIXUtils.createUser(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    )", "testcase": false, "constructor": false}, {"identifier": "changeOwnershipOfDirectory", "parameters": "(\n        final String dir,\n        final String user,\n        final Executor executor\n    )", "modifiers": "public static", "return": "void", "signature": "void changeOwnershipOfDirectory(\n        final String dir,\n        final String user,\n        final Executor executor\n    )", "full_signature": "public static void changeOwnershipOfDirectory(\n        final String dir,\n        final String user,\n        final Executor executor\n    )", "class_method_signature": "UNIXUtils.changeOwnershipOfDirectory(\n        final String dir,\n        final String user,\n        final Executor executor\n    )", "testcase": false, "constructor": false}], "file": "genie-web/src/main/java/com/netflix/genie/web/util/UNIXUtils.java"}, "focal_method": {"identifier": "createUser", "parameters": "(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    )", "modifiers": "public static synchronized", "return": "void", "body": "public static synchronized void createUser(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    ) throws IOException {\n\n        // First check if user already exists\n        final CommandLine idCheckCommandLine = new CommandLine(\"id\")\n            .addArgument(\"-u\")\n            .addArgument(user);\n\n        try {\n            executor.execute(idCheckCommandLine);\n            log.debug(\"User already exists\");\n        } catch (final IOException ioe) {\n            log.debug(\"User does not exist. Creating it now.\");\n\n            // Determine if the group is valid by checking that its not null and not same as user.\n            final boolean isGroupValid = StringUtils.isNotBlank(group) && !group.equals(user);\n\n            // Create the group for the user if its not the same as the user.\n            if (isGroupValid) {\n                log.debug(\"Group and User are different so creating group now.\");\n                final CommandLine groupCreateCommandLine = new CommandLine(SUDO).addArgument(\"groupadd\")\n                    .addArgument(group);\n\n                // We create the group and ignore the error as it will fail if group already exists.\n                // If the failure is due to some other reason, then user creation will fail and we catch that.\n                try {\n                    log.debug(\"Running command to create group:  [{}]\", groupCreateCommandLine);\n                    executor.execute(groupCreateCommandLine);\n                } catch (IOException ioexception) {\n                    log.debug(\"Group creation threw an error as it might already exist\", ioexception);\n                }\n            }\n\n            final CommandLine userCreateCommandLine = new CommandLine(SUDO)\n                .addArgument(\"useradd\")\n                .addArgument(user);\n            if (isGroupValid) {\n                userCreateCommandLine\n                    .addArgument(\"-G\")\n                    .addArgument(group);\n            }\n            userCreateCommandLine\n                .addArgument(\"-M\");\n\n            log.debug(\"Running command to create user: [{}]\", userCreateCommandLine);\n            executor.execute(userCreateCommandLine);\n        }\n    }", "signature": "void createUser(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    )", "full_signature": "public static synchronized void createUser(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    )", "class_method_signature": "UNIXUtils.createUser(\n        final String user,\n        @Nullable final String group,\n        final Executor executor\n    )", "testcase": false, "constructor": false, "invocations": ["addArgument", "addArgument", "execute", "debug", "debug", "isNotBlank", "equals", "debug", "addArgument", "addArgument", "debug", "execute", "debug", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "debug", "execute"]}, "repository": {"repo_id": 10828921, "url": "https://github.com/Netflix/genie", "stars": 1273, "created": "6/20/2013 8:35:56 PM +00:00", "updates": "2020-01-27T17:49:42+00:00", "fork": "False", "license": "licensed"}}