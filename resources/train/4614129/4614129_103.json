{"test_class": {"identifier": "ExceptionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/org/openecard/common/util/ExceptionUtilsTest.java"}, "test_case": {"identifier": "testMatchPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatchPath() {\n\t// create random exceptions, nest them and check if the path matches\n\tThrowable root = new NullPointerException();\n\tThrowable ex = new InvalidAlgorithmParameterException(root);\n\tex = new InvalidPropertiesFormatException(ex);\n\tNullPointerException result = ExceptionUtils.matchPath(ex, NullPointerException.class,\n\t\tInvalidAlgorithmParameterException.class);\n\tAssert.assertNotNull(result);\n\tAssert.assertEquals(result, root);\n    }", "signature": "void testMatchPath()", "full_signature": "@Test public void testMatchPath()", "class_method_signature": "ExceptionUtilsTest.testMatchPath()", "testcase": true, "constructor": false, "invocations": ["matchPath", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "ExceptionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "matchPath", "parameters": "(Throwable ex, C returnClass,\n\t    Class<?>... cs)", "modifiers": "public static", "return": "T", "signature": "T matchPath(Throwable ex, C returnClass,\n\t    Class<?>... cs)", "full_signature": "public static T matchPath(Throwable ex, C returnClass,\n\t    Class<?>... cs)", "class_method_signature": "ExceptionUtils.matchPath(Throwable ex, C returnClass,\n\t    Class<?>... cs)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/openecard/common/util/ExceptionUtils.java"}, "focal_method": {"identifier": "matchPath", "parameters": "(Throwable ex, C returnClass,\n\t    Class<?>... cs)", "modifiers": "public static", "return": "T", "body": "public static <T extends Throwable, C extends Class<T>> T matchPath(Throwable ex, C returnClass,\n\t    Class<?>... cs) {\n\t// TODO: optimize reverse processing\n\tArrayList<Class<?>> classList = new ArrayList<Class<?>>(cs.length);\n\tclassList.addAll(Arrays.asList(cs));\n\tCollections.reverse(classList);\n\t// trace back exceptions in list\n\tfor (Class<?> next : classList) {\n\t    Throwable nextEx = ex.getCause();\n\t    if (! (nextEx != null && next.isInstance(nextEx))) {\n\t\t// instance not of the desired type or not existing\n\t\treturn null;\n\t    }\n\t    ex = nextEx;\n\t}\n\t// check last instance for the desired type\n\tThrowable nextEx = ex.getCause();\n\tif (! (nextEx != null && returnClass.isInstance(nextEx))) {\n\t    // instance not of the desired type or not existing\n\t    return null;\n\t}\n\treturn returnClass.cast(nextEx);\n    }", "signature": "T matchPath(Throwable ex, C returnClass,\n\t    Class<?>... cs)", "full_signature": "public static T matchPath(Throwable ex, C returnClass,\n\t    Class<?>... cs)", "class_method_signature": "ExceptionUtils.matchPath(Throwable ex, C returnClass,\n\t    Class<?>... cs)", "testcase": false, "constructor": false, "invocations": ["addAll", "asList", "reverse", "getCause", "isInstance", "getCause", "isInstance", "cast"]}, "repository": {"repo_id": 4614129, "url": "https://github.com/ecsec/open-ecard", "stars": 83, "created": "6/10/2012 10:03:07 AM +00:00", "updates": "2020-01-09T21:25:04+00:00", "fork": "False", "license": "licensed"}}