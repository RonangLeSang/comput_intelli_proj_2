{"test_class": {"identifier": "ByteComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/org/openecard/common/util/ByteComparatorTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare() {\n\tComparator<byte[]> comp = new ByteComparator();\n\tbyte[] a = new byte[] { 0x00, 0x01, 0x02 }, b = new byte[] { 0x03, 0x04, 0x05 };\n\tbyte[] c = new byte[] { 0x00, 0x01, 0x02 }, d = new byte[] { 0x00 };\n\n\tAssert.assertTrue(0 >  comp.compare(a, b));\n\tAssert.assertTrue(0 == comp.compare(a, c));\n\tAssert.assertTrue(0 <  comp.compare(b, a));\n\tAssert.assertTrue(0 <  comp.compare(a, d));\n\tAssert.assertTrue(0 == comp.compare(a, a));\n\tAssert.assertTrue(0 <  comp.compare(a, null));\n\tAssert.assertTrue(0 >  comp.compare(null, a));\n    }", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "ByteComparatorTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare"]}, "focal_class": {"identifier": "ByteComparator", "superclass": "", "interfaces": "implements Comparator<byte[]>", "fields": [], "methods": [{"identifier": "compare", "parameters": "(byte[] o1, byte[] o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(byte[] o1, byte[] o2)", "full_signature": "@Override public int compare(byte[] o1, byte[] o2)", "class_method_signature": "ByteComparator.compare(byte[] o1, byte[] o2)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/openecard/common/util/ByteComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(byte[] o1, byte[] o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(byte[] o1, byte[] o2) {\n\tif (o1 == o2) {\n\t    return 0;\n\t}\n\tif (o1 == null) {\n\t    return -1;\n\t}\n\tif (o2 == null) {\n\t    return 1;\n\t}\n\tif (o1.length != o2.length) {\n\t    return o1.length - o2.length;\n\t}\n\n\tfor (int i = 0; i < o1.length; i++) {\n\t    // use int so no overflow is possible\n\t    int b1 = o1[i];\n\t    int b2 = o2[i];\n\t    if (b1 != b2) {\n\t\treturn b1 - b2;\n\t    }\n\t}\n\n\t// equal arrays\n\treturn 0;\n    }", "signature": "int compare(byte[] o1, byte[] o2)", "full_signature": "@Override public int compare(byte[] o1, byte[] o2)", "class_method_signature": "ByteComparator.compare(byte[] o1, byte[] o2)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4614129, "url": "https://github.com/ecsec/open-ecard", "stars": 83, "created": "6/10/2012 10:03:07 AM +00:00", "updates": "2020-01-09T21:25:04+00:00", "fork": "False", "license": "licensed"}}