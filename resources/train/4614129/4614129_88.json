{"test_class": {"identifier": "ByteUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/org/openecard/common/util/ByteUtilsTest.java"}, "test_case": {"identifier": "testCutLeadingNullBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCutLeadingNullBytes() {\n\tbyte[] input = new byte[] { 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05 };\n\tbyte[] expected = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 };\n\tbyte[] result = ByteUtils.cutLeadingNullBytes(input);\n\tassertEquals(expected, result);\n\tassertNull(ByteUtils.cutLeadingNullBytes(null));\n    }", "signature": "void testCutLeadingNullBytes()", "full_signature": "@Test public void testCutLeadingNullBytes()", "class_method_signature": "ByteUtilsTest.testCutLeadingNullBytes()", "testcase": true, "constructor": false, "invocations": ["cutLeadingNullBytes", "assertEquals", "assertNull", "cutLeadingNullBytes"]}, "focal_class": {"identifier": "ByteUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "clone", "parameters": "(@Nullable byte[] input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] clone(@Nullable byte[] input)", "full_signature": "public static byte[] clone(@Nullable byte[] input)", "class_method_signature": "ByteUtils.clone(@Nullable byte[] input)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(byte[] x, byte[] y)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concatenate(byte[] x, byte[] y)", "full_signature": "public static byte[] concatenate(byte[] x, byte[] y)", "class_method_signature": "ByteUtils.concatenate(byte[] x, byte[] y)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(byte x, byte[] y)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concatenate(byte x, byte[] y)", "full_signature": "public static byte[] concatenate(byte x, byte[] y)", "class_method_signature": "ByteUtils.concatenate(byte x, byte[] y)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(byte[] x, byte y)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concatenate(byte[] x, byte y)", "full_signature": "public static byte[] concatenate(byte[] x, byte y)", "class_method_signature": "ByteUtils.concatenate(byte[] x, byte y)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(byte x, byte y)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concatenate(byte x, byte y)", "full_signature": "public static byte[] concatenate(byte x, byte y)", "class_method_signature": "ByteUtils.concatenate(byte x, byte y)", "testcase": false, "constructor": false}, {"identifier": "cutLeadingNullBytes", "parameters": "(byte[] input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] cutLeadingNullBytes(byte[] input)", "full_signature": "public static byte[] cutLeadingNullBytes(byte[] input)", "class_method_signature": "ByteUtils.cutLeadingNullBytes(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "cutLeadingNullByte", "parameters": "(byte[] input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] cutLeadingNullByte(byte[] input)", "full_signature": "public static byte[] cutLeadingNullByte(byte[] input)", "class_method_signature": "ByteUtils.cutLeadingNullByte(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(byte[] input, int offset, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] copy(byte[] input, int offset, int length)", "full_signature": "public static byte[] copy(byte[] input, int offset, int length)", "class_method_signature": "ByteUtils.copy(byte[] input, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(byte[] x, byte[] y)", "modifiers": "public static", "return": "boolean", "signature": "boolean compare(byte[] x, byte[] y)", "full_signature": "public static boolean compare(byte[] x, byte[] y)", "class_method_signature": "ByteUtils.compare(byte[] x, byte[] y)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(byte x, byte[] y)", "modifiers": "public static", "return": "boolean", "signature": "boolean compare(byte x, byte[] y)", "full_signature": "public static boolean compare(byte x, byte[] y)", "class_method_signature": "ByteUtils.compare(byte x, byte[] y)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(byte[] x, byte y)", "modifiers": "public static", "return": "boolean", "signature": "boolean compare(byte[] x, byte y)", "full_signature": "public static boolean compare(byte[] x, byte y)", "class_method_signature": "ByteUtils.compare(byte[] x, byte y)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(byte x, byte y)", "modifiers": "public static", "return": "boolean", "signature": "boolean compare(byte x, byte y)", "full_signature": "public static boolean compare(byte x, byte y)", "class_method_signature": "ByteUtils.compare(byte x, byte y)", "testcase": false, "constructor": false}, {"identifier": "isPrefix", "parameters": "(byte[] prefix, byte[] data)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrefix(byte[] prefix, byte[] data)", "full_signature": "public static boolean isPrefix(byte[] prefix, byte[] data)", "class_method_signature": "ByteUtils.isPrefix(byte[] prefix, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "isPrefix", "parameters": "(byte prefix, byte[] data)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrefix(byte prefix, byte[] data)", "full_signature": "public static boolean isPrefix(byte prefix, byte[] data)", "class_method_signature": "ByteUtils.isPrefix(byte prefix, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(byte[] in)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] reverse(byte[] in)", "full_signature": "public static byte[] reverse(byte[] in)", "class_method_signature": "ByteUtils.reverse(byte[] in)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(@Nullable byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHexString(@Nullable byte[] bytes)", "full_signature": "public static String toHexString(@Nullable byte[] bytes)", "class_method_signature": "ByteUtils.toHexString(@Nullable byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(@Nullable byte[] bytes, boolean formatted)", "modifiers": "public static", "return": "String", "signature": "String toHexString(@Nullable byte[] bytes, boolean formatted)", "full_signature": "public static String toHexString(@Nullable byte[] bytes, boolean formatted)", "class_method_signature": "ByteUtils.toHexString(@Nullable byte[] bytes, boolean formatted)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(@Nullable byte[] bytes, boolean formatted, boolean addLinebreak)", "modifiers": "public static", "return": "String", "signature": "String toHexString(@Nullable byte[] bytes, boolean formatted, boolean addLinebreak)", "full_signature": "public static String toHexString(@Nullable byte[] bytes, boolean formatted, boolean addLinebreak)", "class_method_signature": "ByteUtils.toHexString(@Nullable byte[] bytes, boolean formatted, boolean addLinebreak)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(@Nullable byte[] bytes, String format, boolean addLinebreak)", "modifiers": "private static", "return": "String", "signature": "String toHexString(@Nullable byte[] bytes, String format, boolean addLinebreak)", "full_signature": "private static String toHexString(@Nullable byte[] bytes, String format, boolean addLinebreak)", "class_method_signature": "ByteUtils.toHexString(@Nullable byte[] bytes, String format, boolean addLinebreak)", "testcase": false, "constructor": false}, {"identifier": "toFileSafeBase64String", "parameters": "(@Nullable byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toFileSafeBase64String(@Nullable byte[] bytes)", "full_signature": "public static String toFileSafeBase64String(@Nullable byte[] bytes)", "class_method_signature": "ByteUtils.toFileSafeBase64String(@Nullable byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toWebSafeBase64String", "parameters": "(@Nullable byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toWebSafeBase64String(@Nullable byte[] bytes)", "full_signature": "public static String toWebSafeBase64String(@Nullable byte[] bytes)", "class_method_signature": "ByteUtils.toWebSafeBase64String(@Nullable byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toFileSafeBase64String", "parameters": "(@Nullable byte[] bytes, boolean withPadding)", "modifiers": "public static", "return": "String", "signature": "String toFileSafeBase64String(@Nullable byte[] bytes, boolean withPadding)", "full_signature": "public static String toFileSafeBase64String(@Nullable byte[] bytes, boolean withPadding)", "class_method_signature": "ByteUtils.toFileSafeBase64String(@Nullable byte[] bytes, boolean withPadding)", "testcase": false, "constructor": false}, {"identifier": "toShort", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "short", "signature": "short toShort(byte[] bytes)", "full_signature": "public static short toShort(byte[] bytes)", "class_method_signature": "ByteUtils.toShort(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toShort", "parameters": "(byte[] bytes, boolean bigEndian)", "modifiers": "public static", "return": "short", "signature": "short toShort(byte[] bytes, boolean bigEndian)", "full_signature": "public static short toShort(byte[] bytes, boolean bigEndian)", "class_method_signature": "ByteUtils.toShort(byte[] bytes, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toInteger", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "int", "signature": "int toInteger(byte[] bytes)", "full_signature": "public static int toInteger(byte[] bytes)", "class_method_signature": "ByteUtils.toInteger(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toInteger", "parameters": "(byte[] bytes, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int toInteger(byte[] bytes, boolean bigEndian)", "full_signature": "public static int toInteger(byte[] bytes, boolean bigEndian)", "class_method_signature": "ByteUtils.toInteger(byte[] bytes, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "long", "signature": "long toLong(byte[] bytes)", "full_signature": "public static long toLong(byte[] bytes)", "class_method_signature": "ByteUtils.toLong(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(byte[] bytes, boolean bigEndian)", "modifiers": "public static", "return": "long", "signature": "long toLong(byte[] bytes, boolean bigEndian)", "full_signature": "public static long toLong(byte[] bytes, boolean bigEndian)", "class_method_signature": "ByteUtils.toLong(byte[] bytes, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "isBitSet", "parameters": "(int position, byte[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBitSet(int position, byte[] array)", "full_signature": "public static boolean isBitSet(int position, byte[] array)", "class_method_signature": "ByteUtils.isBitSet(int position, byte[] array)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(int position, byte[] array)", "modifiers": "public static", "return": "void", "signature": "void setBit(int position, byte[] array)", "full_signature": "public static void setBit(int position, byte[] array)", "class_method_signature": "ByteUtils.setBit(int position, byte[] array)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/openecard/common/util/ByteUtils.java"}, "focal_method": {"identifier": "cutLeadingNullBytes", "parameters": "(byte[] input)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] cutLeadingNullBytes(byte[] input) {\n\tif (input == null) {\n\t    return null;\n\t}\n\n\tint i;\n\tfor (i = 0; i < input.length - 1; i++) {\n\t    if (input[i] != (byte) 0x00) {\n\t\tbreak;\n\t    }\n\t}\n\treturn copy(input, i, input.length - i);\n    }", "signature": "byte[] cutLeadingNullBytes(byte[] input)", "full_signature": "public static byte[] cutLeadingNullBytes(byte[] input)", "class_method_signature": "ByteUtils.cutLeadingNullBytes(byte[] input)", "testcase": false, "constructor": false, "invocations": ["copy"]}, "repository": {"repo_id": 4614129, "url": "https://github.com/ecsec/open-ecard", "stars": 83, "created": "6/10/2012 10:03:07 AM +00:00", "updates": "2020-01-09T21:25:04+00:00", "fork": "False", "license": "licensed"}}