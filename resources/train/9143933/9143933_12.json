{"test_class": {"identifier": "HashBasedHipsterGraphTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected HashBasedHipsterGraph graph;", "modifier": "protected", "type": "HashBasedHipsterGraph", "declarator": "graph", "var_name": "graph"}, {"original_string": "protected int size = 10;", "modifier": "protected", "type": "int", "declarator": "size = 10", "var_name": "size"}], "file": "hipster-core/src/test/java/es/usc/citius/hipster/graph/HashBasedHipsterGraphTest.java"}, "test_case": {"identifier": "testRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemove() throws Exception {\n        graph.remove(\"v1\");\n        assertFalse(Sets.newHashSet(graph.vertices()).contains(\"v1\"));\n    }", "signature": "void testRemove()", "full_signature": "@Test public void testRemove()", "class_method_signature": "HashBasedHipsterGraphTest.testRemove()", "testcase": true, "constructor": false, "invocations": ["remove", "assertFalse", "contains", "newHashSet", "vertices"]}, "focal_class": {"identifier": "HashBasedHipsterGraph", "superclass": "", "interfaces": "implements HipsterMutableGraph<V,E>", "fields": [{"original_string": "protected HashMap<V, Set<GraphEdge<V, E>>> connected;", "modifier": "protected", "type": "HashMap<V, Set<GraphEdge<V, E>>>", "declarator": "connected", "var_name": "connected"}], "methods": [{"identifier": "HashBasedHipsterGraph", "parameters": "()", "modifiers": "public", "return": "", "signature": " HashBasedHipsterGraph()", "full_signature": "public  HashBasedHipsterGraph()", "class_method_signature": "HashBasedHipsterGraph.HashBasedHipsterGraph()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(V v)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(V v)", "full_signature": "@Override public boolean add(V v)", "class_method_signature": "HashBasedHipsterGraph.add(V v)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(V... vertices)", "modifiers": "@Override public", "return": "Set<V>", "signature": "Set<V> add(V... vertices)", "full_signature": "@Override public Set<V> add(V... vertices)", "class_method_signature": "HashBasedHipsterGraph.add(V... vertices)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(V v)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(V v)", "full_signature": "@Override public boolean remove(V v)", "class_method_signature": "HashBasedHipsterGraph.remove(V v)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(V... vertices)", "modifiers": "@Override public", "return": "Set<V>", "signature": "Set<V> remove(V... vertices)", "full_signature": "@Override public Set<V> remove(V... vertices)", "class_method_signature": "HashBasedHipsterGraph.remove(V... vertices)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(V v1, V v2, E value)", "modifiers": "@Override public", "return": "GraphEdge<V,E>", "signature": "GraphEdge<V,E> connect(V v1, V v2, E value)", "full_signature": "@Override public GraphEdge<V,E> connect(V v1, V v2, E value)", "class_method_signature": "HashBasedHipsterGraph.connect(V v1, V v2, E value)", "testcase": false, "constructor": false}, {"identifier": "buildEdge", "parameters": "(V v1, V v2, E value)", "modifiers": "public", "return": "GraphEdge<V,E>", "signature": "GraphEdge<V,E> buildEdge(V v1, V v2, E value)", "full_signature": "public GraphEdge<V,E> buildEdge(V v1, V v2, E value)", "class_method_signature": "HashBasedHipsterGraph.buildEdge(V v1, V v2, E value)", "testcase": false, "constructor": false}, {"identifier": "createEntry", "parameters": "(final V vertex, final GraphEdge<V,E> edge)", "modifiers": "private", "return": "Map.Entry<V, GraphEdge<V,E>>", "signature": "Map.Entry<V, GraphEdge<V,E>> createEntry(final V vertex, final GraphEdge<V,E> edge)", "full_signature": "private Map.Entry<V, GraphEdge<V,E>> createEntry(final V vertex, final GraphEdge<V,E> edge)", "class_method_signature": "HashBasedHipsterGraph.createEntry(final V vertex, final GraphEdge<V,E> edge)", "testcase": false, "constructor": false}, {"identifier": "vedges", "parameters": "()", "modifiers": "protected", "return": "Iterable<Map.Entry<V, GraphEdge<V,E>>>", "signature": "Iterable<Map.Entry<V, GraphEdge<V,E>>> vedges()", "full_signature": "protected Iterable<Map.Entry<V, GraphEdge<V,E>>> vedges()", "class_method_signature": "HashBasedHipsterGraph.vedges()", "testcase": false, "constructor": false}, {"identifier": "edges", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<GraphEdge<V, E>>", "signature": "Iterable<GraphEdge<V, E>> edges()", "full_signature": "@Override public Iterable<GraphEdge<V, E>> edges()", "class_method_signature": "HashBasedHipsterGraph.edges()", "testcase": false, "constructor": false}, {"identifier": "vertices", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<V>", "signature": "Iterable<V> vertices()", "full_signature": "@Override public Iterable<V> vertices()", "class_method_signature": "HashBasedHipsterGraph.vertices()", "testcase": false, "constructor": false}, {"identifier": "edgesOf", "parameters": "(V vertex)", "modifiers": "@Override public", "return": "Iterable<GraphEdge<V, E>>", "signature": "Iterable<GraphEdge<V, E>> edgesOf(V vertex)", "full_signature": "@Override public Iterable<GraphEdge<V, E>> edgesOf(V vertex)", "class_method_signature": "HashBasedHipsterGraph.edgesOf(V vertex)", "testcase": false, "constructor": false}, {"identifier": "getConnected", "parameters": "()", "modifiers": "public", "return": "HashMap<V, Set<GraphEdge<V, E>>>", "signature": "HashMap<V, Set<GraphEdge<V, E>>> getConnected()", "full_signature": "public HashMap<V, Set<GraphEdge<V, E>>> getConnected()", "class_method_signature": "HashBasedHipsterGraph.getConnected()", "testcase": false, "constructor": false}, {"identifier": "setConnected", "parameters": "(HashMap<V, Set<GraphEdge<V, E>>> connected)", "modifiers": "public", "return": "void", "signature": "void setConnected(HashMap<V, Set<GraphEdge<V, E>>> connected)", "full_signature": "public void setConnected(HashMap<V, Set<GraphEdge<V, E>>> connected)", "class_method_signature": "HashBasedHipsterGraph.setConnected(HashMap<V, Set<GraphEdge<V, E>>> connected)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "HashBasedHipsterGraph<V, E>", "signature": "HashBasedHipsterGraph<V, E> create()", "full_signature": "public static HashBasedHipsterGraph<V, E> create()", "class_method_signature": "HashBasedHipsterGraph.create()", "testcase": false, "constructor": false}], "file": "hipster-core/src/main/java/es/usc/citius/hipster/graph/HashBasedHipsterGraph.java"}, "focal_method": {"identifier": "remove", "parameters": "(V v)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean remove(V v){\n        // Remove all edges related to v\n        Set<GraphEdge<V, E>> edges = this.connected.get(v);\n        if (edges == null) return false;\n\n        for(Iterator<GraphEdge<V,E>> it = edges.iterator(); it.hasNext(); ){\n            // Remove the edge in the list of the selected vertex\n            GraphEdge<V,E> edge = it.next();\n            it.remove();\n\n            V v2 = edge.getVertex1().equals(v) ? edge.getVertex2() : edge.getVertex1();\n            for(Iterator<GraphEdge<V,E>> it2 = this.connected.get(v2).iterator(); it2.hasNext();){\n                GraphEdge<V,E> edge2 = it2.next();\n                if (edge2.getVertex1().equals(v) || edge2.getVertex2().equals(v)){\n                    it2.remove();\n                }\n            }\n        }\n        this.connected.remove(v);\n        return true;\n    }", "signature": "boolean remove(V v)", "full_signature": "@Override public boolean remove(V v)", "class_method_signature": "HashBasedHipsterGraph.remove(V v)", "testcase": false, "constructor": false, "invocations": ["get", "iterator", "hasNext", "next", "remove", "equals", "getVertex1", "getVertex2", "getVertex1", "iterator", "get", "hasNext", "next", "equals", "getVertex1", "equals", "getVertex2", "remove", "remove"]}, "repository": {"repo_id": 9143933, "url": "https://github.com/citiususc/hipster", "language": "Java", "is_fork": false, "fork_count": 87, "stargazer_count": 292, "size": 5736, "license": "licensed"}}