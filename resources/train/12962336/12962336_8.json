{"test_class": {"identifier": "B58Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "B58 b58 = Config.getB58();", "modifier": "", "type": "B58", "declarator": "b58 = Config.getB58()", "var_name": "b58"}], "file": "ripple-core/src/test/java/com/ripple/encodings/base58/B58Test.java"}, "test_case": {"identifier": "testFindsecp256k1Prefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindsecp256k1Prefix() throws Exception {\n        String prefix = \"secp256k1\";\n        byte[] versionBytes = b58.findPrefix(16, prefix);\n        testStability(16, prefix, versionBytes);\n        assertEncodesTo(\"13984B20F2BD93\", versionBytes);\n    }", "signature": "void testFindsecp256k1Prefix()", "full_signature": "@Test public void testFindsecp256k1Prefix()", "class_method_signature": "B58Test.testFindsecp256k1Prefix()", "testcase": true, "constructor": false, "invocations": ["findPrefix", "testStability", "assertEncodesTo"]}, "focal_class": {"identifier": "B58", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int[] mIndexes;", "modifier": "private", "type": "int[]", "declarator": "mIndexes", "var_name": "mIndexes"}, {"original_string": "private char[] mAlphabet;", "modifier": "private", "type": "char[]", "declarator": "mAlphabet", "var_name": "mAlphabet"}], "methods": [{"identifier": "B58", "parameters": "(String alphabet)", "modifiers": "public", "return": "", "signature": " B58(String alphabet)", "full_signature": "public  B58(String alphabet)", "class_method_signature": "B58.B58(String alphabet)", "testcase": false, "constructor": true}, {"identifier": "findPrefix", "parameters": "(int payLoadLength, String desiredPrefix)", "modifiers": "public", "return": "byte[]", "signature": "byte[] findPrefix(int payLoadLength, String desiredPrefix)", "full_signature": "public byte[] findPrefix(int payLoadLength, String desiredPrefix)", "class_method_signature": "B58.findPrefix(int payLoadLength, String desiredPrefix)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(int times, char repeated)", "modifiers": "private static", "return": "String", "signature": "String repeat(int times, char repeated)", "full_signature": "private static String repeat(int times, char repeated)", "class_method_signature": "B58.repeat(int times, char repeated)", "testcase": false, "constructor": false}, {"identifier": "setAlphabet", "parameters": "(String alphabet)", "modifiers": "private", "return": "void", "signature": "void setAlphabet(String alphabet)", "full_signature": "private void setAlphabet(String alphabet)", "class_method_signature": "B58.setAlphabet(String alphabet)", "testcase": false, "constructor": false}, {"identifier": "buildIndexes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildIndexes()", "full_signature": "private void buildIndexes()", "class_method_signature": "B58.buildIndexes()", "testcase": false, "constructor": false}, {"identifier": "encodeToStringChecked", "parameters": "(byte[] input, int version)", "modifiers": "public", "return": "String", "signature": "String encodeToStringChecked(byte[] input, int version)", "full_signature": "public String encodeToStringChecked(byte[] input, int version)", "class_method_signature": "B58.encodeToStringChecked(byte[] input, int version)", "testcase": false, "constructor": false}, {"identifier": "encodeToStringChecked", "parameters": "(byte[] input, byte[] version)", "modifiers": "public", "return": "String", "signature": "String encodeToStringChecked(byte[] input, byte[] version)", "full_signature": "public String encodeToStringChecked(byte[] input, byte[] version)", "class_method_signature": "B58.encodeToStringChecked(byte[] input, byte[] version)", "testcase": false, "constructor": false}, {"identifier": "encodeToBytesChecked", "parameters": "(byte[] input, int version)", "modifiers": "public", "return": "byte[]", "signature": "byte[] encodeToBytesChecked(byte[] input, int version)", "full_signature": "public byte[] encodeToBytesChecked(byte[] input, int version)", "class_method_signature": "B58.encodeToBytesChecked(byte[] input, int version)", "testcase": false, "constructor": false}, {"identifier": "encodeToBytesChecked", "parameters": "(byte[] input, byte[] version)", "modifiers": "public", "return": "byte[]", "signature": "byte[] encodeToBytesChecked(byte[] input, byte[] version)", "full_signature": "public byte[] encodeToBytesChecked(byte[] input, byte[] version)", "class_method_signature": "B58.encodeToBytesChecked(byte[] input, byte[] version)", "testcase": false, "constructor": false}, {"identifier": "encodeToString", "parameters": "(byte[] input)", "modifiers": "public", "return": "String", "signature": "String encodeToString(byte[] input)", "full_signature": "public String encodeToString(byte[] input)", "class_method_signature": "B58.encodeToString(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "encodeToBytes", "parameters": "(byte[] input)", "modifiers": "public", "return": "byte[]", "signature": "byte[] encodeToBytes(byte[] input)", "full_signature": "public byte[] encodeToBytes(byte[] input)", "class_method_signature": "B58.encodeToBytes(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String input)", "modifiers": "public", "return": "byte[]", "signature": "byte[] decode(String input)", "full_signature": "public byte[] decode(String input)", "class_method_signature": "B58.decode(String input)", "testcase": false, "constructor": false}, {"identifier": "decodeToBigInteger", "parameters": "(String input)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger decodeToBigInteger(String input)", "full_signature": "public BigInteger decodeToBigInteger(String input)", "class_method_signature": "B58.decodeToBigInteger(String input)", "testcase": false, "constructor": false}, {"identifier": "decodeChecked", "parameters": "(String input, int version)", "modifiers": "public", "return": "byte[]", "signature": "byte[] decodeChecked(String input, int version)", "full_signature": "public byte[] decodeChecked(String input, int version)", "class_method_signature": "B58.decodeChecked(String input, int version)", "testcase": false, "constructor": false}, {"identifier": "decodeMulti", "parameters": "(String input,\n                               int expectedLength,\n                               byte[]... possibleVersions)", "modifiers": "public", "return": "Decoded", "signature": "Decoded decodeMulti(String input,\n                               int expectedLength,\n                               byte[]... possibleVersions)", "full_signature": "public Decoded decodeMulti(String input,\n                               int expectedLength,\n                               byte[]... possibleVersions)", "class_method_signature": "B58.decodeMulti(String input,\n                               int expectedLength,\n                               byte[]... possibleVersions)", "testcase": false, "constructor": false}, {"identifier": "decodeAndCheck", "parameters": "(String input)", "modifiers": "private", "return": "byte[]", "signature": "byte[] decodeAndCheck(String input)", "full_signature": "private byte[] decodeAndCheck(String input)", "class_method_signature": "B58.decodeAndCheck(String input)", "testcase": false, "constructor": false}, {"identifier": "divmod58", "parameters": "(byte[] number, int startAt)", "modifiers": "private", "return": "byte", "signature": "byte divmod58(byte[] number, int startAt)", "full_signature": "private byte divmod58(byte[] number, int startAt)", "class_method_signature": "B58.divmod58(byte[] number, int startAt)", "testcase": false, "constructor": false}, {"identifier": "divmod256", "parameters": "(byte[] number58, int startAt)", "modifiers": "private", "return": "byte", "signature": "byte divmod256(byte[] number58, int startAt)", "full_signature": "private byte divmod256(byte[] number58, int startAt)", "class_method_signature": "B58.divmod256(byte[] number58, int startAt)", "testcase": false, "constructor": false}, {"identifier": "copyOfRange", "parameters": "(byte[] source, int from, int to)", "modifiers": "private", "return": "byte[]", "signature": "byte[] copyOfRange(byte[] source, int from, int to)", "full_signature": "private byte[] copyOfRange(byte[] source, int from, int to)", "class_method_signature": "B58.copyOfRange(byte[] source, int from, int to)", "testcase": false, "constructor": false}], "file": "ripple-core/src/main/java/com/ripple/encodings/base58/B58.java"}, "focal_method": {"identifier": "findPrefix", "parameters": "(int payLoadLength, String desiredPrefix)", "modifiers": "public", "return": "byte[]", "body": "public byte[] findPrefix(int payLoadLength, String desiredPrefix) {\n        int totalLength = payLoadLength + 4; // for the checksum\n        double chars = Math.log(Math.pow(256, totalLength)) / Math.log(58);\n        int requiredChars = (int) Math.ceil(chars + 0.2D);\n        // Mess with this to see stability tests fail\n        int charPos = (mAlphabet.length / 2) - 1;\n        char padding = mAlphabet[(charPos)];\n        String template = desiredPrefix + repeat(requiredChars, padding);\n        byte[] decoded = decode(template);\n        return copyOfRange(decoded, 0, decoded.length - totalLength);\n    }", "signature": "byte[] findPrefix(int payLoadLength, String desiredPrefix)", "full_signature": "public byte[] findPrefix(int payLoadLength, String desiredPrefix)", "class_method_signature": "B58.findPrefix(int payLoadLength, String desiredPrefix)", "testcase": false, "constructor": false, "invocations": ["log", "pow", "log", "ceil", "repeat", "decode", "copyOfRange"]}, "repository": {"repo_id": 12962336, "url": "https://github.com/ripple-unmaintained/ripple-lib-java", "language": "Java", "is_fork": false, "fork_count": 104, "stargazer_count": 124, "size": 9796, "license": "licensed"}}