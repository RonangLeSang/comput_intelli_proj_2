{"test_class": {"identifier": "JAXWSEnvironmentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JAXWSEnvironment jaxwsEnvironment;", "modifier": "private", "type": "JAXWSEnvironment", "declarator": "jaxwsEnvironment", "var_name": "jaxwsEnvironment"}, {"original_string": "private Invoker mockInvoker = mock(Invoker.class);", "modifier": "private", "type": "Invoker", "declarator": "mockInvoker = mock(Invoker.class)", "var_name": "mockInvoker"}, {"original_string": "private TestUtilities testutils = new TestUtilities(JAXWSEnvironmentTest.class);", "modifier": "private", "type": "TestUtilities", "declarator": "testutils = new TestUtilities(JAXWSEnvironmentTest.class)", "var_name": "testutils"}, {"original_string": "private DummyService service = new DummyService();", "modifier": "private", "type": "DummyService", "declarator": "service = new DummyService()", "var_name": "service"}, {"original_string": "InstrumentedInvokerFactory mockInvokerBuilder = mock(InstrumentedInvokerFactory.class);", "modifier": "", "type": "InstrumentedInvokerFactory", "declarator": "mockInvokerBuilder = mock(InstrumentedInvokerFactory.class)", "var_name": "mockInvokerBuilder"}, {"original_string": "UnitOfWorkInvokerFactory mockUnitOfWorkInvokerBuilder = mock(UnitOfWorkInvokerFactory.class);", "modifier": "", "type": "UnitOfWorkInvokerFactory", "declarator": "mockUnitOfWorkInvokerBuilder = mock(UnitOfWorkInvokerFactory.class)", "var_name": "mockUnitOfWorkInvokerBuilder"}, {"original_string": "private int mockBasicAuthInterceptorInvoked;", "modifier": "private", "type": "int", "declarator": "mockBasicAuthInterceptorInvoked", "var_name": "mockBasicAuthInterceptorInvoked"}, {"original_string": "private String soapRequest = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \" +\n            \"xmlns:res=\\\"http://jaxws.dropwizard.roskart.com/\\\">\" +\n                \"<soapenv:Header/>\" +\n                \"<soapenv:Body>\" +\n                    \"<res:foo></res:foo>\" +\n                \"</soapenv:Body>\" +\n            \"</soapenv:Envelope>\";", "modifier": "private", "type": "String", "declarator": "soapRequest = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \" +\n            \"xmlns:res=\\\"http://jaxws.dropwizard.roskart.com/\\\">\" +\n                \"<soapenv:Header/>\" +\n                \"<soapenv:Body>\" +\n                    \"<res:foo></res:foo>\" +\n                \"</soapenv:Body>\" +\n            \"</soapenv:Envelope>\"", "var_name": "soapRequest"}], "file": "dropwizard-jaxws/src/test/java/com/roskart/dropwizard/jaxws/JAXWSEnvironmentTest.java"}, "test_case": {"identifier": "publishEndpointWithAuthentication", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void publishEndpointWithAuthentication() throws Exception {\n\n        jaxwsEnvironment.publishEndpoint(\n                new EndpointBuilder(\"local://path\", service)\n                    .authentication(mock(BasicAuthentication.class)));\n\n        verify(mockInvokerBuilder).create(any(), any(Invoker.class));\n        verifyZeroInteractions(mockUnitOfWorkInvokerBuilder);\n\n        Node soapResponse = testutils.invoke(\"local://path\",\n                LocalTransportFactory.TRANSPORT_ID, soapRequest.getBytes());\n\n        verify(mockInvoker).invoke(any(Exchange.class), any());\n\n        testutils.assertValid(\"/soap:Envelope/soap:Body/a:fooResponse\", soapResponse);\n\n        assertThat(mockBasicAuthInterceptorInvoked, equalTo(1));\n    }", "signature": "void publishEndpointWithAuthentication()", "full_signature": "@Test public void publishEndpointWithAuthentication()", "class_method_signature": "JAXWSEnvironmentTest.publishEndpointWithAuthentication()", "testcase": true, "constructor": false, "invocations": ["publishEndpoint", "authentication", "mock", "create", "verify", "any", "any", "verifyZeroInteractions", "invoke", "getBytes", "invoke", "verify", "any", "any", "assertValid", "assertThat", "equalTo"]}, "focal_class": {"identifier": "JAXWSEnvironment", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(JAXWSEnvironment.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(JAXWSEnvironment.class)", "var_name": "log"}, {"original_string": "protected final Bus bus;", "modifier": "protected final", "type": "Bus", "declarator": "bus", "var_name": "bus"}, {"original_string": "protected final String defaultPath;", "modifier": "protected final", "type": "String", "declarator": "defaultPath", "var_name": "defaultPath"}, {"original_string": "private InstrumentedInvokerFactory instrumentedInvokerBuilder;", "modifier": "private", "type": "InstrumentedInvokerFactory", "declarator": "instrumentedInvokerBuilder", "var_name": "instrumentedInvokerBuilder"}, {"original_string": "private UnitOfWorkInvokerFactory unitOfWorkInvokerBuilder = new UnitOfWorkInvokerFactory();", "modifier": "private", "type": "UnitOfWorkInvokerFactory", "declarator": "unitOfWorkInvokerBuilder = new UnitOfWorkInvokerFactory()", "var_name": "unitOfWorkInvokerBuilder"}, {"original_string": "private String publishedEndpointUrlPrefix;", "modifier": "private", "type": "String", "declarator": "publishedEndpointUrlPrefix", "var_name": "publishedEndpointUrlPrefix"}], "methods": [{"identifier": "getDefaultPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultPath()", "full_signature": "public String getDefaultPath()", "class_method_signature": "JAXWSEnvironment.getDefaultPath()", "testcase": false, "constructor": false}, {"identifier": "JAXWSEnvironment", "parameters": "(String defaultPath)", "modifiers": "public", "return": "", "signature": " JAXWSEnvironment(String defaultPath)", "full_signature": "public  JAXWSEnvironment(String defaultPath)", "class_method_signature": "JAXWSEnvironment.JAXWSEnvironment(String defaultPath)", "testcase": false, "constructor": true}, {"identifier": "buildServlet", "parameters": "()", "modifiers": "public", "return": "HttpServlet", "signature": "HttpServlet buildServlet()", "full_signature": "public HttpServlet buildServlet()", "class_method_signature": "JAXWSEnvironment.buildServlet()", "testcase": false, "constructor": false}, {"identifier": "setPublishedEndpointUrlPrefix", "parameters": "(String publishedEndpointUrlPrefix)", "modifiers": "public", "return": "void", "signature": "void setPublishedEndpointUrlPrefix(String publishedEndpointUrlPrefix)", "full_signature": "public void setPublishedEndpointUrlPrefix(String publishedEndpointUrlPrefix)", "class_method_signature": "JAXWSEnvironment.setPublishedEndpointUrlPrefix(String publishedEndpointUrlPrefix)", "testcase": false, "constructor": false}, {"identifier": "setInstrumentedInvokerBuilder", "parameters": "(InstrumentedInvokerFactory instrumentedInvokerBuilder)", "modifiers": "public", "return": "void", "signature": "void setInstrumentedInvokerBuilder(InstrumentedInvokerFactory instrumentedInvokerBuilder)", "full_signature": "public void setInstrumentedInvokerBuilder(InstrumentedInvokerFactory instrumentedInvokerBuilder)", "class_method_signature": "JAXWSEnvironment.setInstrumentedInvokerBuilder(InstrumentedInvokerFactory instrumentedInvokerBuilder)", "testcase": false, "constructor": false}, {"identifier": "setUnitOfWorkInvokerBuilder", "parameters": "(UnitOfWorkInvokerFactory unitOfWorkInvokerBuilder)", "modifiers": "public", "return": "void", "signature": "void setUnitOfWorkInvokerBuilder(UnitOfWorkInvokerFactory unitOfWorkInvokerBuilder)", "full_signature": "public void setUnitOfWorkInvokerBuilder(UnitOfWorkInvokerFactory unitOfWorkInvokerBuilder)", "class_method_signature": "JAXWSEnvironment.setUnitOfWorkInvokerBuilder(UnitOfWorkInvokerFactory unitOfWorkInvokerBuilder)", "testcase": false, "constructor": false}, {"identifier": "createBasicAuthenticationInterceptor", "parameters": "()", "modifiers": "protected", "return": "BasicAuthenticationInterceptor", "signature": "BasicAuthenticationInterceptor createBasicAuthenticationInterceptor()", "full_signature": "protected BasicAuthenticationInterceptor createBasicAuthenticationInterceptor()", "class_method_signature": "JAXWSEnvironment.createBasicAuthenticationInterceptor()", "testcase": false, "constructor": false}, {"identifier": "createValidatingInvoker", "parameters": "(Invoker invoker, Validator validator)", "modifiers": "protected", "return": "ValidatingInvoker", "signature": "ValidatingInvoker createValidatingInvoker(Invoker invoker, Validator validator)", "full_signature": "protected ValidatingInvoker createValidatingInvoker(Invoker invoker, Validator validator)", "class_method_signature": "JAXWSEnvironment.createValidatingInvoker(Invoker invoker, Validator validator)", "testcase": false, "constructor": false}, {"identifier": "logEndpoints", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void logEndpoints()", "full_signature": "public void logEndpoints()", "class_method_signature": "JAXWSEnvironment.logEndpoints()", "testcase": false, "constructor": false}, {"identifier": "publishEndpoint", "parameters": "(EndpointBuilder endpointBuilder)", "modifiers": "public", "return": "Endpoint", "signature": "Endpoint publishEndpoint(EndpointBuilder endpointBuilder)", "full_signature": "public Endpoint publishEndpoint(EndpointBuilder endpointBuilder)", "class_method_signature": "JAXWSEnvironment.publishEndpoint(EndpointBuilder endpointBuilder)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "(ClientBuilder<T> clientBuilder)", "modifiers": "public", "return": "T", "signature": "T getClient(ClientBuilder<T> clientBuilder)", "full_signature": "public T getClient(ClientBuilder<T> clientBuilder)", "class_method_signature": "JAXWSEnvironment.getClient(ClientBuilder<T> clientBuilder)", "testcase": false, "constructor": false}], "file": "dropwizard-jaxws/src/main/java/com/roskart/dropwizard/jaxws/JAXWSEnvironment.java"}, "focal_method": {"identifier": "publishEndpoint", "parameters": "(EndpointBuilder endpointBuilder)", "modifiers": "public", "return": "Endpoint", "body": "public Endpoint publishEndpoint(EndpointBuilder endpointBuilder) {\n        checkArgument(endpointBuilder != null, \"EndpointBuilder is null\");\n\n        EndpointImpl cxfendpoint = new EndpointImpl(bus, endpointBuilder.getService());\n        if(endpointBuilder.publishedEndpointUrl() != null) {\n            cxfendpoint.setPublishedEndpointUrl(endpointBuilder.publishedEndpointUrl());\n        }\n        else if(publishedEndpointUrlPrefix != null) {\n            cxfendpoint.setPublishedEndpointUrl(publishedEndpointUrlPrefix + endpointBuilder.getPath());\n        }\n        cxfendpoint.publish(endpointBuilder.getPath());\n\n        // MTOM support\n        if (endpointBuilder.isMtomEnabled()) {\n            ((SOAPBinding)cxfendpoint.getBinding()).setMTOMEnabled(true);\n        }\n\n        Invoker invoker = cxfendpoint.getService().getInvoker();\n\n        // validating invoker\n        ValidatorFactory vf = Validation.buildDefaultValidatorFactory();\n        invoker = this.createValidatingInvoker(invoker, vf.getValidator());\n\n        if (endpointBuilder.getSessionFactory() != null) {\n            // Add invoker to handle UnitOfWork annotations. Note that this invoker is set up before\n            // instrumented invoker(s) in order for instrumented invoker(s) to wrap \"unit of work\" invoker.\n            invoker = unitOfWorkInvokerBuilder.create(\n                    endpointBuilder.getService(), invoker, endpointBuilder.getSessionFactory());\n            cxfendpoint.getService().setInvoker(invoker);\n        }\n\n        // Replace CXF service invoker with instrumented invoker(s)\n        invoker = instrumentedInvokerBuilder.create(endpointBuilder.getService(), invoker);\n        cxfendpoint.getService().setInvoker(invoker);\n\n        if (endpointBuilder.getAuthentication() != null) {\n            // Configure CXF in interceptor to handle basic authentication\n            BasicAuthenticationInterceptor basicAuthInterceptor = this.createBasicAuthenticationInterceptor();\n            basicAuthInterceptor.setAuthenticator(endpointBuilder.getAuthentication());\n            cxfendpoint.getInInterceptors().add(basicAuthInterceptor);\n        }\n\n        // CXF interceptors\n\n        if (endpointBuilder.getCxfInInterceptors() != null) {\n            cxfendpoint.getInInterceptors().addAll(endpointBuilder.getCxfInInterceptors());\n        }\n\n        if (endpointBuilder.getCxfInFaultInterceptors() != null) {\n            cxfendpoint.getInFaultInterceptors().addAll(endpointBuilder.getCxfInFaultInterceptors());\n        }\n\n        if (endpointBuilder.getCxfOutInterceptors() != null) {\n            cxfendpoint.getOutInterceptors().addAll(endpointBuilder.getCxfOutInterceptors());\n        }\n\n        if (endpointBuilder.getCxfOutFaultInterceptors() != null) {\n            cxfendpoint.getOutFaultInterceptors().addAll(endpointBuilder.getCxfOutFaultInterceptors());\n        }\n\n        if (endpointBuilder.getProperties() != null) {\n            cxfendpoint.getProperties().putAll(\n                    endpointBuilder.getProperties());\n        }\n\n        return cxfendpoint;\n    }", "signature": "Endpoint publishEndpoint(EndpointBuilder endpointBuilder)", "full_signature": "public Endpoint publishEndpoint(EndpointBuilder endpointBuilder)", "class_method_signature": "JAXWSEnvironment.publishEndpoint(EndpointBuilder endpointBuilder)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "getService", "publishedEndpointUrl", "setPublishedEndpointUrl", "publishedEndpointUrl", "setPublishedEndpointUrl", "getPath", "publish", "getPath", "isMtomEnabled", "setMTOMEnabled", "getBinding", "getInvoker", "getService", "buildDefaultValidatorFactory", "createValidatingInvoker", "getValidator", "getSessionFactory", "create", "getService", "getSessionFactory", "setInvoker", "getService", "create", "getService", "setInvoker", "getService", "getAuthentication", "createBasicAuthenticationInterceptor", "setAuthenticator", "getAuthentication", "add", "getInInterceptors", "getCxfInInterceptors", "addAll", "getInInterceptors", "getCxfInInterceptors", "getCxfInFaultInterceptors", "addAll", "getInFaultInterceptors", "getCxfInFaultInterceptors", "getCxfOutInterceptors", "addAll", "getOutInterceptors", "getCxfOutInterceptors", "getCxfOutFaultInterceptors", "addAll", "getOutFaultInterceptors", "getCxfOutFaultInterceptors", "getProperties", "putAll", "getProperties", "getProperties"]}, "repository": {"repo_id": 9545480, "url": "https://github.com/roskart/dropwizard-jaxws", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 47, "size": 174, "license": "licensed"}}