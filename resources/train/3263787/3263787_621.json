{"test_class": {"identifier": "OCPStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ScheduleTrackingService scheduleTrackingService;", "modifier": "@Mock\n    private", "type": "ScheduleTrackingService", "declarator": "scheduleTrackingService", "var_name": "scheduleTrackingService"}, {"original_string": "@Mock\n    private ActionService actionService;", "modifier": "@Mock\n    private", "type": "ActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "@Mock\n    private ScheduleService scheduleService;", "modifier": "@Mock\n    private", "type": "ScheduleService", "declarator": "scheduleService", "var_name": "scheduleService"}, {"original_string": "private OCPStrategy strategy;", "modifier": "private", "type": "OCPStrategy", "declarator": "strategy", "var_name": "strategy"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/scheduling/fpMethodStrategy/OCPStrategyTest.java"}, "test_case": {"identifier": "shouldEnrollInOCPScheduleAndGenerateUpcomingAlertOnECRegistration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldEnrollInOCPScheduleAndGenerateUpcomingAlertOnECRegistration() throws Exception {\n        fakeIt(parse(\"2012-02-01\"));\n        strategy.registerEC(new FPProductInformation(\"entity id 1\", \"anm id 1\", \"ocp\", null, null, \"1\", \"2012-01-01\"\n                , \"20\", \"2012-03-01\", null, null, null, null));\n        verify(actionService).alertForBeneficiary(ec, \"entity id 1\", \"OCP Refill\", \"OCP Refill\", upcoming, LocalDate.parse(\"2012-01-15\").toDateTime(new LocalTime(14, 0)),\n                LocalDate.parse(\"2012-01-15\").plusWeeks(1).toDateTime(new LocalTime(14, 0)));\n        verify(scheduleService).enroll(\"entity id 1\", \"OCP Refill\", \"2012-01-15\");\n\n        strategy.registerEC(new FPProductInformation(\"entity id 1\", \"anm id 1\", \"ocp\", null, null, \"2\", \"2012-01-01\"\n                , \"20\", \"2012-03-01\", null, null, null, null));\n        verify(actionService).alertForBeneficiary(ec, \"entity id 1\", \"OCP Refill\", \"OCP Refill\", upcoming, LocalDate.parse(\"2012-02-12\").toDateTime(new LocalTime(14, 0)),\n                LocalDate.parse(\"2012-02-12\").plusWeeks(1).toDateTime(new LocalTime(14, 0)));\n        verify(scheduleService).enroll(\"entity id 1\", \"OCP Refill\", \"2012-02-12\");\n\n        strategy.registerEC(new FPProductInformation(\"entity id 1\", \"anm id 1\", \"ocp\", null, null, \"0\", \"2012-01-01\"\n                , \"20\", \"2012-03-01\", null, null, null, null));\n        verify(actionService).alertForBeneficiary(ec, \"entity id 1\", \"OCP Refill\", \"OCP Refill\", upcoming, LocalDate.parse(\"2012-02-01\").toDateTime(new LocalTime(14, 0)),\n                LocalDate.parse(\"2012-02-01\").plusWeeks(1).toDateTime(new LocalTime(14, 0)));\n        verify(scheduleService).enroll(\"entity id 1\", \"OCP Refill\", \"2012-02-01\");\n    }", "signature": "void shouldEnrollInOCPScheduleAndGenerateUpcomingAlertOnECRegistration()", "full_signature": "@Test public void shouldEnrollInOCPScheduleAndGenerateUpcomingAlertOnECRegistration()", "class_method_signature": "OCPStrategyTest.shouldEnrollInOCPScheduleAndGenerateUpcomingAlertOnECRegistration()", "testcase": true, "constructor": false, "invocations": ["fakeIt", "parse", "registerEC", "alertForBeneficiary", "verify", "toDateTime", "parse", "toDateTime", "plusWeeks", "parse", "enroll", "verify", "registerEC", "alertForBeneficiary", "verify", "toDateTime", "parse", "toDateTime", "plusWeeks", "parse", "enroll", "verify", "registerEC", "alertForBeneficiary", "verify", "toDateTime", "parse", "toDateTime", "plusWeeks", "parse", "enroll", "verify"]}, "focal_class": {"identifier": "OCPStrategy", "superclass": "", "interfaces": "implements FPMethodStrategy", "fields": [{"original_string": "public static final int NUMBER_OF_PILLS_IN_ONE_OCP_STRIP = 28;", "modifier": "public static final", "type": "int", "declarator": "NUMBER_OF_PILLS_IN_ONE_OCP_STRIP = 28", "var_name": "NUMBER_OF_PILLS_IN_ONE_OCP_STRIP"}, {"original_string": "public static final int DUE_WINDOW_PERIOD_IN_WEEKS = 1;", "modifier": "public static final", "type": "int", "declarator": "DUE_WINDOW_PERIOD_IN_WEEKS = 1", "var_name": "DUE_WINDOW_PERIOD_IN_WEEKS"}, {"original_string": "private static Logger logger = LoggerFactory.getLogger(OCPStrategy.class.toString());", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OCPStrategy.class.toString())", "var_name": "logger"}, {"original_string": "private final ScheduleTrackingService scheduleTrackingService;", "modifier": "private final", "type": "ScheduleTrackingService", "declarator": "scheduleTrackingService", "var_name": "scheduleTrackingService"}, {"original_string": "private final ActionService actionService;", "modifier": "private final", "type": "ActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "private final ScheduleService scheduleService;", "modifier": "private final", "type": "ScheduleService", "declarator": "scheduleService", "var_name": "scheduleService"}, {"original_string": "private final LocalTime preferredTime;", "modifier": "private final", "type": "LocalTime", "declarator": "preferredTime", "var_name": "preferredTime"}, {"original_string": "private final Schedule ocpRefillSchedule = new Schedule(EC_SCHEDULE_OCP_REFILL, asList(EC_SCHEDULE_OCP_REFILL_MILESTONE));", "modifier": "private final", "type": "Schedule", "declarator": "ocpRefillSchedule = new Schedule(EC_SCHEDULE_OCP_REFILL, asList(EC_SCHEDULE_OCP_REFILL_MILESTONE))", "var_name": "ocpRefillSchedule"}], "methods": [{"identifier": "OCPStrategy", "parameters": "(ScheduleTrackingService scheduleTrackingService, ActionService actionService, ScheduleService scheduleService,\n                       @Value(\"#{drishti['preferred.time']}\") int preferredTime)", "modifiers": "@Autowired public", "return": "", "signature": " OCPStrategy(ScheduleTrackingService scheduleTrackingService, ActionService actionService, ScheduleService scheduleService,\n                       @Value(\"#{drishti['preferred.time']}\") int preferredTime)", "full_signature": "@Autowired public  OCPStrategy(ScheduleTrackingService scheduleTrackingService, ActionService actionService, ScheduleService scheduleService,\n                       @Value(\"#{drishti['preferred.time']}\") int preferredTime)", "class_method_signature": "OCPStrategy.OCPStrategy(ScheduleTrackingService scheduleTrackingService, ActionService actionService, ScheduleService scheduleService,\n                       @Value(\"#{drishti['preferred.time']}\") int preferredTime)", "testcase": false, "constructor": true}, {"identifier": "registerEC", "parameters": "(FPProductInformation fpInfo)", "modifiers": "@Override public", "return": "void", "signature": "void registerEC(FPProductInformation fpInfo)", "full_signature": "@Override public void registerEC(FPProductInformation fpInfo)", "class_method_signature": "OCPStrategy.registerEC(FPProductInformation fpInfo)", "testcase": false, "constructor": false}, {"identifier": "unEnrollFromPreviousScheduleAsFPMethodChanged", "parameters": "(FPProductInformation fpInfo)", "modifiers": "@Override public", "return": "void", "signature": "void unEnrollFromPreviousScheduleAsFPMethodChanged(FPProductInformation fpInfo)", "full_signature": "@Override public void unEnrollFromPreviousScheduleAsFPMethodChanged(FPProductInformation fpInfo)", "class_method_signature": "OCPStrategy.unEnrollFromPreviousScheduleAsFPMethodChanged(FPProductInformation fpInfo)", "testcase": false, "constructor": false}, {"identifier": "enrollToNewScheduleForNewFPMethod", "parameters": "(FPProductInformation fpInfo)", "modifiers": "@Override public", "return": "void", "signature": "void enrollToNewScheduleForNewFPMethod(FPProductInformation fpInfo)", "full_signature": "@Override public void enrollToNewScheduleForNewFPMethod(FPProductInformation fpInfo)", "class_method_signature": "OCPStrategy.enrollToNewScheduleForNewFPMethod(FPProductInformation fpInfo)", "testcase": false, "constructor": false}, {"identifier": "renewFPProduct", "parameters": "(FPProductInformation fpInfo)", "modifiers": "@Override public", "return": "void", "signature": "void renewFPProduct(FPProductInformation fpInfo)", "full_signature": "@Override public void renewFPProduct(FPProductInformation fpInfo)", "class_method_signature": "OCPStrategy.renewFPProduct(FPProductInformation fpInfo)", "testcase": false, "constructor": false}, {"identifier": "fpFollowup", "parameters": "(FPProductInformation fpInfo)", "modifiers": "@Override public", "return": "void", "signature": "void fpFollowup(FPProductInformation fpInfo)", "full_signature": "@Override public void fpFollowup(FPProductInformation fpInfo)", "class_method_signature": "OCPStrategy.fpFollowup(FPProductInformation fpInfo)", "testcase": false, "constructor": false}, {"identifier": "enrollECToOCPRefillSchedule", "parameters": "(String entityId, String numberOfOCPStripsSupplied, String ocpRefillDate)", "modifiers": "private", "return": "void", "signature": "void enrollECToOCPRefillSchedule(String entityId, String numberOfOCPStripsSupplied, String ocpRefillDate)", "full_signature": "private void enrollECToOCPRefillSchedule(String entityId, String numberOfOCPStripsSupplied, String ocpRefillDate)", "class_method_signature": "OCPStrategy.enrollECToOCPRefillSchedule(String entityId, String numberOfOCPStripsSupplied, String ocpRefillDate)", "testcase": false, "constructor": false}, {"identifier": "twoWeeksBeforeOCPPillsRunOut", "parameters": "(String numberOfOCPStripsSupplied, String ocpRefillDate)", "modifiers": "private", "return": "LocalDate", "signature": "LocalDate twoWeeksBeforeOCPPillsRunOut(String numberOfOCPStripsSupplied, String ocpRefillDate)", "full_signature": "private LocalDate twoWeeksBeforeOCPPillsRunOut(String numberOfOCPStripsSupplied, String ocpRefillDate)", "class_method_signature": "OCPStrategy.twoWeeksBeforeOCPPillsRunOut(String numberOfOCPStripsSupplied, String ocpRefillDate)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/scheduling/fpMethodStrategy/OCPStrategy.java"}, "focal_method": {"identifier": "registerEC", "parameters": "(FPProductInformation fpInfo)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void registerEC(FPProductInformation fpInfo) {\n        enrollECToOCPRefillSchedule(fpInfo.entityId(), fpInfo.numberOfOCPStripsSupplied(), fpInfo.ocpRefillDate());\n    }", "signature": "void registerEC(FPProductInformation fpInfo)", "full_signature": "@Override public void registerEC(FPProductInformation fpInfo)", "class_method_signature": "OCPStrategy.registerEC(FPProductInformation fpInfo)", "testcase": false, "constructor": false, "invocations": ["enrollECToOCPRefillSchedule", "entityId", "numberOfOCPStripsSupplied", "ocpRefillDate"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}