{"test_class": {"identifier": "ANCSchedulesServiceTest", "superclass": "extends BaseUnitTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ScheduleTrackingService trackingService;", "modifier": "@Mock\n    private", "type": "ScheduleTrackingService", "declarator": "trackingService", "var_name": "trackingService"}, {"original_string": "@Mock\n    private ActionService actionService;", "modifier": "@Mock\n    private", "type": "ActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "@Mock\n    private ScheduleService scheduleService;", "modifier": "@Mock\n    private", "type": "ScheduleService", "declarator": "scheduleService", "var_name": "scheduleService"}, {"original_string": "private ANCSchedulesService ancSchedulesService;", "modifier": "private", "type": "ANCSchedulesService", "declarator": "ancSchedulesService", "var_name": "ancSchedulesService"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/scheduling/ANCSchedulesServiceTest.java"}, "test_case": {"identifier": "shouldEnrollANCToHbFollowupTestWhenHbTestIsDoneAndSheIsAnaemic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldEnrollANCToHbFollowupTestWhenHbTestIsDoneAndSheIsAnaemic() {\n        when(trackingService.getEnrollment(\"Case X\", \"Hb Test 1\"))\n                .thenReturn(new EnrollmentRecord(\"Case X\", \"Hb Test 1\", \"HB Test 1\", null, null, null, null, null, null, null));\n\n        ancSchedulesService.hbTestDone(\"Case X\", \"ANM 1\", \"2013-01-01\", \"Anaemic\", null);\n\n        verify(scheduleService).enroll(\"Case X\", \"Hb Followup Test\", \"2013-01-01\");\n    }", "signature": "void shouldEnrollANCToHbFollowupTestWhenHbTestIsDoneAndSheIsAnaemic()", "full_signature": "@Test public void shouldEnrollANCToHbFollowupTestWhenHbTestIsDoneAndSheIsAnaemic()", "class_method_signature": "ANCSchedulesServiceTest.shouldEnrollANCToHbFollowupTestWhenHbTestIsDoneAndSheIsAnaemic()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getEnrollment", "hbTestDone", "enroll", "verify"]}, "focal_class": {"identifier": "ANCSchedulesService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int NUMBER_OF_WEEKS_BEFORE_HB_TEST_2_BECOMES_DUE = 28;", "modifier": "public static final", "type": "int", "declarator": "NUMBER_OF_WEEKS_BEFORE_HB_TEST_2_BECOMES_DUE = 28", "var_name": "NUMBER_OF_WEEKS_BEFORE_HB_TEST_2_BECOMES_DUE"}, {"original_string": "private static Logger logger = LoggerFactory.getLogger(ANCSchedulesService.class.toString());", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ANCSchedulesService.class.toString())", "var_name": "logger"}, {"original_string": "private final ScheduleTrackingService trackingService;", "modifier": "private final", "type": "ScheduleTrackingService", "declarator": "trackingService", "var_name": "trackingService"}, {"original_string": "private static final String[] NON_ANC_SCHEDULES = {SCHEDULE_EDD, SCHEDULE_LAB, SCHEDULE_TT_1, SCHEDULE_IFA_1,\n            SCHEDULE_HB_TEST_1, SCHEDULE_DELIVERY_PLAN};", "modifier": "private static final", "type": "String[]", "declarator": "NON_ANC_SCHEDULES = {SCHEDULE_EDD, SCHEDULE_LAB, SCHEDULE_TT_1, SCHEDULE_IFA_1,\n            SCHEDULE_HB_TEST_1, SCHEDULE_DELIVERY_PLAN}", "var_name": "NON_ANC_SCHEDULES"}, {"original_string": "private ActionService actionService;", "modifier": "private", "type": "ActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "private final ScheduleService scheduleService;", "modifier": "private final", "type": "ScheduleService", "declarator": "scheduleService", "var_name": "scheduleService"}], "methods": [{"identifier": "ANCSchedulesService", "parameters": "(ScheduleTrackingService trackingService, ActionService actionService, ScheduleService scheduleService)", "modifiers": "@Autowired public", "return": "", "signature": " ANCSchedulesService(ScheduleTrackingService trackingService, ActionService actionService, ScheduleService scheduleService)", "full_signature": "@Autowired public  ANCSchedulesService(ScheduleTrackingService trackingService, ActionService actionService, ScheduleService scheduleService)", "class_method_signature": "ANCSchedulesService.ANCSchedulesService(ScheduleTrackingService trackingService, ActionService actionService, ScheduleService scheduleService)", "testcase": false, "constructor": true}, {"identifier": "enrollMother", "parameters": "(String caseId, LocalDate referenceDateForSchedule)", "modifiers": "public", "return": "void", "signature": "void enrollMother(String caseId, LocalDate referenceDateForSchedule)", "full_signature": "public void enrollMother(String caseId, LocalDate referenceDateForSchedule)", "class_method_signature": "ANCSchedulesService.enrollMother(String caseId, LocalDate referenceDateForSchedule)", "testcase": false, "constructor": false}, {"identifier": "ancVisitHasHappened", "parameters": "(String entityId, String anmId, int visitNumberToFulfill, String visitDate)", "modifiers": "public", "return": "void", "signature": "void ancVisitHasHappened(String entityId, String anmId, int visitNumberToFulfill, String visitDate)", "full_signature": "public void ancVisitHasHappened(String entityId, String anmId, int visitNumberToFulfill, String visitDate)", "class_method_signature": "ANCSchedulesService.ancVisitHasHappened(String entityId, String anmId, int visitNumberToFulfill, String visitDate)", "testcase": false, "constructor": false}, {"identifier": "deliveryHasBeenPlanned", "parameters": "(String entityId, String anmId, String deliveryPlanDate)", "modifiers": "public", "return": "void", "signature": "void deliveryHasBeenPlanned(String entityId, String anmId, String deliveryPlanDate)", "full_signature": "public void deliveryHasBeenPlanned(String entityId, String anmId, String deliveryPlanDate)", "class_method_signature": "ANCSchedulesService.deliveryHasBeenPlanned(String entityId, String anmId, String deliveryPlanDate)", "testcase": false, "constructor": false}, {"identifier": "ttVisitHasHappened", "parameters": "(String entityId, String anmId, String ttDose, String ttDate)", "modifiers": "public", "return": "void", "signature": "void ttVisitHasHappened(String entityId, String anmId, String ttDose, String ttDate)", "full_signature": "public void ttVisitHasHappened(String entityId, String anmId, String ttDose, String ttDate)", "class_method_signature": "ANCSchedulesService.ttVisitHasHappened(String entityId, String anmId, String ttDose, String ttDate)", "testcase": false, "constructor": false}, {"identifier": "ifaTabletsGiven", "parameters": "(String entityId, String anmId, String numberOfIFATabletsGiven, String ifaGivenDate)", "modifiers": "public", "return": "void", "signature": "void ifaTabletsGiven(String entityId, String anmId, String numberOfIFATabletsGiven, String ifaGivenDate)", "full_signature": "public void ifaTabletsGiven(String entityId, String anmId, String numberOfIFATabletsGiven, String ifaGivenDate)", "class_method_signature": "ANCSchedulesService.ifaTabletsGiven(String entityId, String anmId, String numberOfIFATabletsGiven, String ifaGivenDate)", "testcase": false, "constructor": false}, {"identifier": "hbTestDone", "parameters": "(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp)", "modifiers": "public", "return": "void", "signature": "void hbTestDone(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp)", "full_signature": "public void hbTestDone(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp)", "class_method_signature": "ANCSchedulesService.hbTestDone(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp)", "testcase": false, "constructor": false}, {"identifier": "enrollANCToHbTest2Schedule", "parameters": "(String entityId, LocalDate lmp)", "modifiers": "private", "return": "void", "signature": "void enrollANCToHbTest2Schedule(String entityId, LocalDate lmp)", "full_signature": "private void enrollANCToHbTest2Schedule(String entityId, LocalDate lmp)", "class_method_signature": "ANCSchedulesService.enrollANCToHbTest2Schedule(String entityId, LocalDate lmp)", "testcase": false, "constructor": false}, {"identifier": "forceFulfillMilestone", "parameters": "(String externalId, String scheduleName)", "modifiers": "public", "return": "void", "signature": "void forceFulfillMilestone(String externalId, String scheduleName)", "full_signature": "public void forceFulfillMilestone(String externalId, String scheduleName)", "class_method_signature": "ANCSchedulesService.forceFulfillMilestone(String externalId, String scheduleName)", "testcase": false, "constructor": false}, {"identifier": "unEnrollFromAllSchedules", "parameters": "(String entityId)", "modifiers": "public", "return": "void", "signature": "void unEnrollFromAllSchedules(String entityId)", "full_signature": "public void unEnrollFromAllSchedules(String entityId)", "class_method_signature": "ANCSchedulesService.unEnrollFromAllSchedules(String entityId)", "testcase": false, "constructor": false}, {"identifier": "unEnrollFromSchedule", "parameters": "(String entityId, String anmId, String scheduleName)", "modifiers": "private", "return": "void", "signature": "void unEnrollFromSchedule(String entityId, String anmId, String scheduleName)", "full_signature": "private void unEnrollFromSchedule(String entityId, String anmId, String scheduleName)", "class_method_signature": "ANCSchedulesService.unEnrollFromSchedule(String entityId, String anmId, String scheduleName)", "testcase": false, "constructor": false}, {"identifier": "enrollIntoCorrectMilestoneOfANCCare", "parameters": "(String entityId, LocalDate referenceDateForSchedule)", "modifiers": "private", "return": "void", "signature": "void enrollIntoCorrectMilestoneOfANCCare(String entityId, LocalDate referenceDateForSchedule)", "full_signature": "private void enrollIntoCorrectMilestoneOfANCCare(String entityId, LocalDate referenceDateForSchedule)", "class_method_signature": "ANCSchedulesService.enrollIntoCorrectMilestoneOfANCCare(String entityId, LocalDate referenceDateForSchedule)", "testcase": false, "constructor": false}, {"identifier": "fastForwardSchedule", "parameters": "(String entityId, String anmId, String scheduleName, String milestonePrefix, int visitNumberToFulfill, LocalDate visitDate)", "modifiers": "private", "return": "void", "signature": "void fastForwardSchedule(String entityId, String anmId, String scheduleName, String milestonePrefix, int visitNumberToFulfill, LocalDate visitDate)", "full_signature": "private void fastForwardSchedule(String entityId, String anmId, String scheduleName, String milestonePrefix, int visitNumberToFulfill, LocalDate visitDate)", "class_method_signature": "ANCSchedulesService.fastForwardSchedule(String entityId, String anmId, String scheduleName, String milestonePrefix, int visitNumberToFulfill, LocalDate visitDate)", "testcase": false, "constructor": false}, {"identifier": "fulfillMilestoneIfPossible", "parameters": "(String entityId, String anmId, String scheduleName, String milestone, LocalDate fulfillmentDate)", "modifiers": "private", "return": "boolean", "signature": "boolean fulfillMilestoneIfPossible(String entityId, String anmId, String scheduleName, String milestone, LocalDate fulfillmentDate)", "full_signature": "private boolean fulfillMilestoneIfPossible(String entityId, String anmId, String scheduleName, String milestone, LocalDate fulfillmentDate)", "class_method_signature": "ANCSchedulesService.fulfillMilestoneIfPossible(String entityId, String anmId, String scheduleName, String milestone, LocalDate fulfillmentDate)", "testcase": false, "constructor": false}, {"identifier": "currentMilestoneNumber", "parameters": "(String caseId, String scheduleName, String milestonePrefix)", "modifiers": "private", "return": "int", "signature": "int currentMilestoneNumber(String caseId, String scheduleName, String milestonePrefix)", "full_signature": "private int currentMilestoneNumber(String caseId, String scheduleName, String milestonePrefix)", "class_method_signature": "ANCSchedulesService.currentMilestoneNumber(String caseId, String scheduleName, String milestonePrefix)", "testcase": false, "constructor": false}, {"identifier": "isNotEnrolled", "parameters": "(String caseId, String scheduleName)", "modifiers": "private", "return": "boolean", "signature": "boolean isNotEnrolled(String caseId, String scheduleName)", "full_signature": "private boolean isNotEnrolled(String caseId, String scheduleName)", "class_method_signature": "ANCSchedulesService.isNotEnrolled(String caseId, String scheduleName)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/scheduling/ANCSchedulesService.java"}, "focal_method": {"identifier": "hbTestDone", "parameters": "(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp)", "modifiers": "public", "return": "void", "body": "public void hbTestDone(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp) {\n        if (fulfillMilestoneIfPossible(entityId, anmId, SCHEDULE_HB_TEST_1, SCHEDULE_HB_TEST_1, parse(date))) {\n            if (isNotBlank(anaemicStatus)) {\n                logger.info(format(\"ANC is anaemic so enrolling her to Hb Followup Test schedule: Entity id:{0}, Anaemic status: {1}\", entityId, anaemicStatus));\n                scheduleService.enroll(entityId, SCHEDULE_HB_FOLLOWUP_TEST, date);\n            } else {\n                enrollANCToHbTest2Schedule(entityId, lmp);\n            }\n        } else if (fulfillMilestoneIfPossible(entityId, anmId, SCHEDULE_HB_FOLLOWUP_TEST, SCHEDULE_HB_FOLLOWUP_TEST, parse(date))) {\n            if (parse(date).isAfter(lmp.plusWeeks(NUMBER_OF_WEEKS_BEFORE_HB_TEST_2_BECOMES_DUE))) {\n                fulfillMilestoneIfPossible(entityId, anmId, SCHEDULE_HB_TEST_2, SCHEDULE_HB_TEST_2, parse(date));\n            } else {\n                enrollANCToHbTest2Schedule(entityId, lmp);\n            }\n        } else {\n            fulfillMilestoneIfPossible(entityId, anmId, SCHEDULE_HB_TEST_2, SCHEDULE_HB_TEST_2, parse(date));\n        }\n    }", "signature": "void hbTestDone(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp)", "full_signature": "public void hbTestDone(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp)", "class_method_signature": "ANCSchedulesService.hbTestDone(String entityId, String anmId, String date, String anaemicStatus, LocalDate lmp)", "testcase": false, "constructor": false, "invocations": ["fulfillMilestoneIfPossible", "parse", "isNotBlank", "info", "format", "enroll", "enrollANCToHbTest2Schedule", "fulfillMilestoneIfPossible", "parse", "isAfter", "parse", "plusWeeks", "fulfillMilestoneIfPossible", "parse", "enrollANCToHbTest2Schedule", "fulfillMilestoneIfPossible", "parse"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}