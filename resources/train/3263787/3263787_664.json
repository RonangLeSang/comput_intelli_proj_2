{"test_class": {"identifier": "ANCRegisterServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ANCRegisterService registerService;", "modifier": "private", "type": "ANCRegisterService", "declarator": "registerService", "var_name": "registerService"}, {"original_string": "@Mock\n    private AllMothers allMothers;", "modifier": "@Mock\n    private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "@Mock\n    private AllEligibleCouples allEligibleCouples;", "modifier": "@Mock\n    private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/ANCRegisterServiceTest.java"}, "test_case": {"identifier": "shouldGetANCRegisterForAGivenANM", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetANCRegisterForAGivenANM() throws Exception {\n        Mother mother = new Mother(\"caseId\", \"ecCaseId\", \"thayi card number 1\")\n                .withLMP(LocalDate.parse(\"2013-12-30\"))\n                .withANCVisits(asList(\n                        create(\"ancVisitDate\", \"2013-01-01\")\n                                .put(\"weight\", \"55\")\n                                .put(\"bpSystolic\", \"120\")\n                                .put(\"bpDiastolic\", \"80\")\n                                .map()))\n                .withIFATablets(asList(\n                        create(\"ifaTabletsDate\", \"2013-05-24\")\n                                .put(\"numberOfIFATabletsGiven\", \"30\")\n                                .map()))\n                .withTTDoses(asList(create(\"ttDate\", \"2012-12-24\")\n                        .put(\"ttDose\", \"tt1\")\n                        .map()))\n                .withHBTests(asList(create(\"hbTestDate\", \"2013-01-01\")\n                        .put(\"hbLevel\", \"7.9\")\n                        .map()))\n                .withANCInvestigations(asList(\n                        create(\"testDate\", \"2012-09-01\")\n                                .put(\"bileSalts\", \"present\")\n                                .put(\"bilePigments\", \"present\")\n                                .map(),\n                        create(\"testDate\", \"2013-01-01\")\n                                .put(\"testResultsToEnter\", \"urine_sugar mp hiv\")\n                                .put(\"testsResultPositive\", \"urine_sugar\")\n                                .put(\"bileSalts\", \"absent\")\n                                .put(\"bilePigments\", \"absent\")\n                                .put(\"womanBloodGroup\", \"ab_positive\")\n                                .put(\"rhIncompatibleCouple\", \"no\")\n                                .map()))\n                .withDetails(\n                        create(\"ancNumber\", \"OA899\")\n                                .put(\"registrationDate\", \"2014-01-01\")\n                                .put(\"isJSYBeneficiary\", \"yes\")\n                                .put(\"edd\", \"2014-09-01\")\n                                .put(\"height\", \"150\")\n                                .put(\"bloodGroup\", \"o -ve\")\n                                .put(\"isHighRisk\", \"yes\")\n                                .map()\n                );\n        EligibleCouple eligibleCouple = new EligibleCouple(\"ecCaseId\", \"123\")\n                .withDetails(\n                        create(\"aadharNumber\", \"aadhar card number 1\")\n                                .put(\"householdAddress\", \"address1\")\n                                .put(\"phoneNumber\", \"phone 1\")\n                                .put(\"educationalLevel\", \"wife education level\")\n                                .put(\"husbandEducationLevel\", \"husband education level\")\n                                .put(\"caste\", \"sc\")\n                                .put(\"religion\", \"hindu\")\n                                .put(\"economicStatus\", \"bpl\")\n                                .put(\"bplCardNumber\", \"bpl card number 1\")\n                                .put(\"numberOfPregnancies\", \"1\")\n                                .put(\"parity\", \"2\")\n                                .put(\"numberOfLivingChildren\", \"3\")\n                                .put(\"numberOfStillBirths\", \"4\")\n                                .put(\"numberOfAbortions\", \"5\")\n                                .put(\"youngestChildDOB\", \"2012-01-01\")\n                                .put(\"womanDOB\", \"1989-01-01\")\n                                .map())\n                .withCouple(\"name1\", \"name2\");\n        when(allMothers.findAllOpenMothersForANM(\"anm1\")).thenReturn(asList(mother));\n        when(allEligibleCouples.findAll(asList(\"ecCaseId\"))).thenReturn(asList(eligibleCouple));\n        ANCRegister expectedRegister = new ANCRegister(asList(new ANCRegisterEntry()\n                .withANCNumber(\"OA899\")\n                .withRegistrationDate(\"2014-01-01\")\n                .withECNumber(\"123\")\n                .withThayiCardNumber(\"thayi card number 1\")\n                .withAadharCardNumber(\"aadhar card number 1\")\n                .withWifeName(\"name1\")\n                .withHusbandName(\"name2\")\n                .withAddress(\"address1\")\n                .withWifeDOB(\"1989-01-01\")\n                .withPhoneNumber(\"phone 1\")\n                .withWifeEducationLevel(\"wife education level\")\n                .withHusbandEducationLevel(\"husband education level\")\n                .withCaste(\"sc\")\n                .withReligion(\"hindu\")\n                .withEconomicStatus(\"bpl\")\n                .withBPLCardNumber(\"bpl card number 1\")\n                .withJSYBeneficiary(\"yes\")\n                .withGravida(\"1\")\n                .withParity(\"2\")\n                .withNumberOfLivingChildren(\"3\")\n                .withNumberOfStillBirths(\"4\")\n                .withNumberOfAbortions(\"5\")\n                .withYoungestChildDOB(\"2012-01-01\")\n                .withLMP(\"2013-12-30\")\n                .withEDD(\"2014-09-01\")\n                .withHeight(\"150\")\n                .withBloodGroup(\"o -ve\")\n                .withIsHRP(\"yes\")\n                .withHBTests(asList(\n                        create(\"hbTestDate\", \"2013-01-01\")\n                                .put(\"hbLevel\", \"7.9\")\n                                .map()))\n                .withANCVisits(asList(\n                        create(\"ancVisitDate\", \"2013-01-01\")\n                                .put(\"weight\", \"55\")\n                                .put(\"bpSystolic\", \"120\")\n                                .put(\"bpDiastolic\", \"80\")\n                                .map()))\n                .withANCInvestigations(asList(\n                        create(\"testDate\", \"2012-09-01\")\n                                .put(\"bileSalts\", \"present\")\n                                .put(\"bilePigments\", \"present\")\n                                .map(),\n                        create(\"testDate\", \"2013-01-01\")\n                                .put(\"testResultsToEnter\", \"urine_sugar mp hiv\")\n                                .put(\"testsResultPositive\", \"urine_sugar\")\n                                .put(\"bileSalts\", \"absent\")\n                                .put(\"bilePigments\", \"absent\")\n                                .put(\"womanBloodGroup\", \"ab_positive\")\n                                .put(\"rhIncompatibleCouple\", \"no\")\n                                .map()))\n                .withIFATablets(asList(\n                        create(\"ifaTabletsDate\", \"2013-05-24\")\n                                .put(\"numberOfIFATabletsGiven\", \"30\")\n                                .map()))\n                .withTTDoses(asList(create(\"ttDate\", \"2012-12-24\")\n                        .put(\"ttDose\", \"tt1\")\n                        .map())))\n        );\n\n        ANCRegister register = registerService.getRegisterForANM(\"anm1\");\n\n        assertEquals(expectedRegister, register);\n    }", "signature": "void shouldGetANCRegisterForAGivenANM()", "full_signature": "@Test public void shouldGetANCRegisterForAGivenANM()", "class_method_signature": "ANCRegisterServiceTest.shouldGetANCRegisterForAGivenANM()", "testcase": true, "constructor": false, "invocations": ["withDetails", "withANCInvestigations", "withHBTests", "withTTDoses", "withIFATablets", "withANCVisits", "withLMP", "parse", "asList", "map", "put", "put", "put", "create", "asList", "map", "put", "create", "asList", "map", "put", "create", "asList", "map", "put", "create", "asList", "map", "put", "put", "create", "map", "put", "put", "put", "put", "put", "put", "create", "map", "put", "put", "put", "put", "put", "put", "create", "withCouple", "withDetails", "map", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "create", "thenReturn", "when", "findAllOpenMothersForANM", "asList", "thenReturn", "when", "findAll", "asList", "asList", "asList", "withTTDoses", "withIFATablets", "withANCInvestigations", "withANCVisits", "withHBTests", "withIsHRP", "withBloodGroup", "withHeight", "withEDD", "withLMP", "withYoungestChildDOB", "withNumberOfAbortions", "withNumberOfStillBirths", "withNumberOfLivingChildren", "withParity", "withGravida", "withJSYBeneficiary", "withBPLCardNumber", "withEconomicStatus", "withReligion", "withCaste", "withHusbandEducationLevel", "withWifeEducationLevel", "withPhoneNumber", "withWifeDOB", "withAddress", "withHusbandName", "withWifeName", "withAadharCardNumber", "withThayiCardNumber", "withECNumber", "withRegistrationDate", "withANCNumber", "asList", "map", "put", "create", "asList", "map", "put", "put", "put", "create", "asList", "map", "put", "put", "create", "map", "put", "put", "put", "put", "put", "put", "create", "asList", "map", "put", "create", "asList", "map", "put", "create", "getRegisterForANM", "assertEquals"]}, "focal_class": {"identifier": "ANCRegisterService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AllMothers allMothers;", "modifier": "private final", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "private final AllEligibleCouples allEligibleCouples;", "modifier": "private final", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}], "methods": [{"identifier": "ANCRegisterService", "parameters": "(AllMothers allMothers,\n                              AllEligibleCouples allEligibleCouples)", "modifiers": "@Autowired public", "return": "", "signature": " ANCRegisterService(AllMothers allMothers,\n                              AllEligibleCouples allEligibleCouples)", "full_signature": "@Autowired public  ANCRegisterService(AllMothers allMothers,\n                              AllEligibleCouples allEligibleCouples)", "class_method_signature": "ANCRegisterService.ANCRegisterService(AllMothers allMothers,\n                              AllEligibleCouples allEligibleCouples)", "testcase": false, "constructor": true}, {"identifier": "getRegisterForANM", "parameters": "(String anmIdentifier)", "modifiers": "public", "return": "ANCRegister", "signature": "ANCRegister getRegisterForANM(String anmIdentifier)", "full_signature": "public ANCRegister getRegisterForANM(String anmIdentifier)", "class_method_signature": "ANCRegisterService.getRegisterForANM(String anmIdentifier)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/ANCRegisterService.java"}, "focal_method": {"identifier": "getRegisterForANM", "parameters": "(String anmIdentifier)", "modifiers": "public", "return": "ANCRegister", "body": "public ANCRegister getRegisterForANM(String anmIdentifier) {\n        ArrayList<ANCRegisterEntry> ancRegisterEntries = new ArrayList<>();\n        List<Mother> mothers = allMothers.findAllOpenMothersForANM(anmIdentifier);\n        Collection<String> ecIDs = selectDistinct(collect(mothers, on(Mother.class).ecCaseId()));\n        List<String> ecIdsList = new ArrayList<>();\n        ecIdsList.addAll(ecIDs);\n        List<EligibleCouple> ecs = allEligibleCouples.findAll(ecIdsList);\n        for (Mother mother : mothers) {\n            EligibleCouple ec = selectUnique(ecs,\n                    having(on(EligibleCouple.class).caseId(), equalTo(mother.ecCaseId())));\n            ANCRegisterEntry entry = new ANCRegisterEntry()\n                    .withANCNumber(mother.getDetail(ANC_NUMBER))\n                    .withRegistrationDate(mother.getDetail(REGISTRATION_DATE))\n                    .withECNumber(ec.ecNumber())\n                    .withThayiCardNumber(mother.thayiCardNumber())\n                    .withAadharCardNumber(ec.getDetail(AADHAR_NUMBER))\n                    .withWifeName(ec.wifeName())\n                    .withHusbandName(ec.husbandName())\n                    .withAddress(ec.getDetail(HOUSEHOLD_ADDRESS))\n                    .withWifeDOB(ec.wifeDOB())\n                    .withPhoneNumber(ec.getDetail(PHONE_NUMBER))\n                    .withWifeEducationLevel(ec.getDetail(WIFE_EDUCATIONAL_LEVEL))\n                    .withHusbandEducationLevel(ec.getDetail(HUSBAND_EDUCATION_LEVEL))\n                    .withCaste(ec.getDetail(CASTE))\n                    .withReligion(ec.getDetail(RELIGION))\n                    .withEconomicStatus(ec.getDetail(ECONOMIC_STATUS))\n                    .withBPLCardNumber(ec.getDetail(BPL_CARD_NUMBER))\n                    .withJSYBeneficiary(mother.getDetail(JSY_BENEFICIARY))\n                    .withGravida(ec.getDetail(NUMBER_OF_PREGNANCIES))\n                    .withParity(ec.getDetail(PARITY))\n                    .withNumberOfLivingChildren(ec.getDetail(NUMBER_OF_LIVING_CHILDREN))\n                    .withNumberOfStillBirths(ec.getDetail(NUMBER_OF_STILL_BIRTHS))\n                    .withNumberOfAbortions(ec.getDetail(NUMBER_OF_ABORTIONS))\n                    .withYoungestChildDOB(ec.getDetail(YOUNGEST_CHILD_DOB))\n                    .withLMP(mother.lmp().toString())\n                    .withEDD(mother.getDetail(EDD))\n                    .withHeight(mother.getDetail(HEIGHT))\n                    .withBloodGroup(mother.getDetail(BLOOD_GROUP))\n                    .withIsHRP(mother.getDetail(IS_HIGH_RISK))\n                    .withHBTests(mother.hbTests())\n                    .withANCInvestigations(mother.ancInvestigations())\n                    .withANCVisits(mother.ancVisits())\n                    .withIFATablets(mother.ifaTablets())\n                    .withTTDoses(mother.ttDoses());\n            ancRegisterEntries.add(entry);\n        }\n        return new ANCRegister(ancRegisterEntries);\n    }", "signature": "ANCRegister getRegisterForANM(String anmIdentifier)", "full_signature": "public ANCRegister getRegisterForANM(String anmIdentifier)", "class_method_signature": "ANCRegisterService.getRegisterForANM(String anmIdentifier)", "testcase": false, "constructor": false, "invocations": ["findAllOpenMothersForANM", "selectDistinct", "collect", "ecCaseId", "on", "addAll", "findAll", "selectUnique", "having", "caseId", "on", "equalTo", "ecCaseId", "withTTDoses", "withIFATablets", "withANCVisits", "withANCInvestigations", "withHBTests", "withIsHRP", "withBloodGroup", "withHeight", "withEDD", "withLMP", "withYoungestChildDOB", "withNumberOfAbortions", "withNumberOfStillBirths", "withNumberOfLivingChildren", "withParity", "withGravida", "withJSYBeneficiary", "withBPLCardNumber", "withEconomicStatus", "withReligion", "withCaste", "withHusbandEducationLevel", "withWifeEducationLevel", "withPhoneNumber", "withWifeDOB", "withAddress", "withHusbandName", "withWifeName", "withAadharCardNumber", "withThayiCardNumber", "withECNumber", "withRegistrationDate", "withANCNumber", "getDetail", "getDetail", "ecNumber", "thayiCardNumber", "getDetail", "wifeName", "husbandName", "getDetail", "wifeDOB", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "getDetail", "toString", "lmp", "getDetail", "getDetail", "getDetail", "getDetail", "hbTests", "ancInvestigations", "ancVisits", "ifaTablets", "ttDoses", "add"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}