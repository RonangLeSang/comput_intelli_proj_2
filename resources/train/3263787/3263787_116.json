{"test_class": {"identifier": "ECReportingServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ReportingService reportingService;", "modifier": "@Mock\n    private", "type": "ReportingService", "declarator": "reportingService", "var_name": "reportingService"}, {"original_string": "@Mock\n    private AllEligibleCouples allEligibleCouples;", "modifier": "@Mock\n    private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}, {"original_string": "@Mock\n    private ReportMonth reportMonth;", "modifier": "@Mock\n    private", "type": "ReportMonth", "declarator": "reportMonth", "var_name": "reportMonth"}, {"original_string": "private ECReportingService service;", "modifier": "private", "type": "ECReportingService", "declarator": "service", "var_name": "service"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/reporting/ECReportingServiceTest.java"}, "test_case": {"identifier": "shouldReportFPMethodChangeWhenECIsRegistered", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReportFPMethodChangeWhenECIsRegistered() throws Exception {\n        when(allEligibleCouples.findByCaseId(\"EC CASE 1\")).thenReturn(new EligibleCouple(\"EC CASE 1\", \"EC NUMBER 1\").withANMIdentifier(\"ANM X\").withLocation(\"bherya\", \"Sub Center\", \"PHC X\"));\n        when(reportMonth.areDatesBelongToSameReportingMonth(LocalDate.parse(\"2012-01-01\"), LocalDate.parse(\"2012-01-01\"))).thenReturn(true);\n        SafeMap reportData = new SafeMap(create(\"id\", \"EC CASE 1\")\n                .put(\"currentMethod\", \"iud\")\n                .put(\"familyPlanningMethodChangeDate\", \"2012-01-01\")\n                .put(\"caste\", \"sc\")\n                .put(\"submissionDate\", \"2012-01-01\")\n                .map());\n        service.registerEC(reportData);\n\n        verify(reportingService).sendReportData(ReportingData.anmReportData(\"ANM X\", \"EC CASE 1\", Indicator.FP_IUD, \"2012-01-01\"));\n        verify(reportingService).sendReportData(ReportingData.serviceProvidedData(\"ANM X\", \"EC NUMBER 1\", Indicator.FP_IUD, \"2012-01-01\", new Location(\"bherya\", \"Sub Center\", \"PHC X\"), \"EC CASE 1\"));\n        verifyNoMoreInteractions(reportingService);\n    }", "signature": "void shouldReportFPMethodChangeWhenECIsRegistered()", "full_signature": "@Test public void shouldReportFPMethodChangeWhenECIsRegistered()", "class_method_signature": "ECReportingServiceTest.shouldReportFPMethodChangeWhenECIsRegistered()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByCaseId", "withLocation", "withANMIdentifier", "thenReturn", "when", "areDatesBelongToSameReportingMonth", "parse", "parse", "map", "put", "put", "put", "put", "create", "registerEC", "sendReportData", "verify", "anmReportData", "sendReportData", "verify", "serviceProvidedData", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ECReportingService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReportingService service;", "modifier": "private", "type": "ReportingService", "declarator": "service", "var_name": "service"}, {"original_string": "private AllEligibleCouples allEligibleCouples;", "modifier": "private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}, {"original_string": "private final ReportMonth reportMonth;", "modifier": "private final", "type": "ReportMonth", "declarator": "reportMonth", "var_name": "reportMonth"}], "methods": [{"identifier": "ECReportingService", "parameters": "(ReportingService service, AllEligibleCouples allEligibleCouples, ReportMonth reportMonth)", "modifiers": "@Autowired public", "return": "", "signature": " ECReportingService(ReportingService service, AllEligibleCouples allEligibleCouples, ReportMonth reportMonth)", "full_signature": "@Autowired public  ECReportingService(ReportingService service, AllEligibleCouples allEligibleCouples, ReportMonth reportMonth)", "class_method_signature": "ECReportingService.ECReportingService(ReportingService service, AllEligibleCouples allEligibleCouples, ReportMonth reportMonth)", "testcase": false, "constructor": true}, {"identifier": "registerEC", "parameters": "(SafeMap reportData)", "modifiers": "public", "return": "void", "signature": "void registerEC(SafeMap reportData)", "full_signature": "public void registerEC(SafeMap reportData)", "class_method_signature": "ECReportingService.registerEC(SafeMap reportData)", "testcase": false, "constructor": false}, {"identifier": "fpChange", "parameters": "(SafeMap reportData)", "modifiers": "public", "return": "void", "signature": "void fpChange(SafeMap reportData)", "full_signature": "public void fpChange(SafeMap reportData)", "class_method_signature": "ECReportingService.fpChange(SafeMap reportData)", "testcase": false, "constructor": false}, {"identifier": "reportOCPCasteBasedIndicators", "parameters": "(SafeMap reportData, EligibleCouple ec, String fpMethod)", "modifiers": "private", "return": "void", "signature": "void reportOCPCasteBasedIndicators(SafeMap reportData, EligibleCouple ec, String fpMethod)", "full_signature": "private void reportOCPCasteBasedIndicators(SafeMap reportData, EligibleCouple ec, String fpMethod)", "class_method_signature": "ECReportingService.reportOCPCasteBasedIndicators(SafeMap reportData, EligibleCouple ec, String fpMethod)", "testcase": false, "constructor": false}, {"identifier": "reportFemaleSterilizationEconomicStatusBasedIndicators", "parameters": "(SafeMap reportData, EligibleCouple couple, String fpMethod)", "modifiers": "private", "return": "void", "signature": "void reportFemaleSterilizationEconomicStatusBasedIndicators(SafeMap reportData, EligibleCouple couple, String fpMethod)", "full_signature": "private void reportFemaleSterilizationEconomicStatusBasedIndicators(SafeMap reportData, EligibleCouple couple, String fpMethod)", "class_method_signature": "ECReportingService.reportFemaleSterilizationEconomicStatusBasedIndicators(SafeMap reportData, EligibleCouple couple, String fpMethod)", "testcase": false, "constructor": false}, {"identifier": "reportIndicator", "parameters": "(SafeMap reportData, EligibleCouple ec, Indicator indicator, String serviceProvidedDate,\n                                String submissionDate)", "modifiers": "public", "return": "void", "signature": "void reportIndicator(SafeMap reportData, EligibleCouple ec, Indicator indicator, String serviceProvidedDate,\n                                String submissionDate)", "full_signature": "public void reportIndicator(SafeMap reportData, EligibleCouple ec, Indicator indicator, String serviceProvidedDate,\n                                String submissionDate)", "class_method_signature": "ECReportingService.reportIndicator(SafeMap reportData, EligibleCouple ec, Indicator indicator, String serviceProvidedDate,\n                                String submissionDate)", "testcase": false, "constructor": false}, {"identifier": "deleteReportsForEC", "parameters": "(String ecCaseId)", "modifiers": "public", "return": "void", "signature": "void deleteReportsForEC(String ecCaseId)", "full_signature": "public void deleteReportsForEC(String ecCaseId)", "class_method_signature": "ECReportingService.deleteReportsForEC(String ecCaseId)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/reporting/ECReportingService.java"}, "focal_method": {"identifier": "registerEC", "parameters": "(SafeMap reportData)", "modifiers": "public", "return": "void", "body": "public void registerEC(SafeMap reportData) {\n        EligibleCouple couple = allEligibleCouples.findByCaseId(reportData.get(ID));\n        reportIndicator(reportData, couple, Indicator.from(reportData.get(CURRENT_FP_METHOD_FIELD_NAME)),\n                reportData.get(FP_METHOD_CHANGE_DATE_FIELD_NAME), reportData.get(SUBMISSION_DATE_FIELD_NAME));\n        reportOCPCasteBasedIndicators(reportData, couple, reportData.get(CURRENT_FP_METHOD_FIELD_NAME));\n        reportFemaleSterilizationEconomicStatusBasedIndicators(reportData, couple, reportData.get(CURRENT_FP_METHOD_FIELD_NAME));\n    }", "signature": "void registerEC(SafeMap reportData)", "full_signature": "public void registerEC(SafeMap reportData)", "class_method_signature": "ECReportingService.registerEC(SafeMap reportData)", "testcase": false, "constructor": false, "invocations": ["findByCaseId", "get", "reportIndicator", "from", "get", "get", "get", "reportOCPCasteBasedIndicators", "get", "reportFemaleSterilizationEconomicStatusBasedIndicators", "get"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}