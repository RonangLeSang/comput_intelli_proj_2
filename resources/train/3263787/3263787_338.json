{"test_class": {"identifier": "IsJEImmunizationGivenRuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IsJEImmunizationGivenRule rule;", "modifier": "private", "type": "IsJEImmunizationGivenRule", "declarator": "rule", "var_name": "rule"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/reporting/rules/IsJEImmunizationGivenRuleTest.java"}, "test_case": {"identifier": "shouldReturnTrueIfImmunizationsGivenContainsJE", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnTrueIfImmunizationsGivenContainsJE() {\n        SafeMap safeMap = new SafeMap(create(\"immunizationsGiven\", \"je dptbooster_2 opv_0 tt_1\").map());\n\n        boolean didRuleApply = rule.apply(safeMap);\n        assertTrue(didRuleApply);\n\n        didRuleApply = rule.apply(new SafeMap(create(\"immunizationsGiven\", \"je dptbooster_2 opv_0 tt_1\").put(\"previousImmunizations\", \"opv_0\").map()));\n        Assert.assertTrue(didRuleApply);\n\n        didRuleApply = rule.apply(new SafeMap(create(\"immunizationsGiven\", \"je dptbooster_2 opv_0 tt_1\").put(\"previousImmunizations\", \"\").map()));\n        Assert.assertTrue(didRuleApply);\n\n        didRuleApply = rule.apply(new SafeMap(create(\"immunizationsGiven\", \"je dptbooster_2 opv_0 tt_1\").put(\"previousImmunizations\", null).map()));\n        Assert.assertTrue(didRuleApply);\n    }", "signature": "void shouldReturnTrueIfImmunizationsGivenContainsJE()", "full_signature": "@Test public void shouldReturnTrueIfImmunizationsGivenContainsJE()", "class_method_signature": "IsJEImmunizationGivenRuleTest.shouldReturnTrueIfImmunizationsGivenContainsJE()", "testcase": true, "constructor": false, "invocations": ["map", "create", "apply", "assertTrue", "apply", "map", "put", "create", "assertTrue", "apply", "map", "put", "create", "assertTrue", "apply", "map", "put", "create", "assertTrue"]}, "focal_class": {"identifier": "IsJEImmunizationGivenRule", "superclass": "", "interfaces": "implements IRule", "fields": [], "methods": [{"identifier": "apply", "parameters": "(SafeMap reportFields)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(SafeMap reportFields)", "full_signature": "@Override public boolean apply(SafeMap reportFields)", "class_method_signature": "IsJEImmunizationGivenRule.apply(SafeMap reportFields)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/reporting/rules/IsJEImmunizationGivenRule.java"}, "focal_method": {"identifier": "apply", "parameters": "(SafeMap reportFields)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean apply(SafeMap reportFields) {\n        return new ChildImmunization().isImmunizedWith(JE_VALUE, reportFields);\n    }", "signature": "boolean apply(SafeMap reportFields)", "full_signature": "@Override public boolean apply(SafeMap reportFields)", "class_method_signature": "IsJEImmunizationGivenRule.apply(SafeMap reportFields)", "testcase": false, "constructor": false, "invocations": ["isImmunizedWith"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}