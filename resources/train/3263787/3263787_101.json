{"test_class": {"identifier": "MCTSReportServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private IRulesFactory rulesFactory;", "modifier": "@Mock\n    private", "type": "IRulesFactory", "declarator": "rulesFactory", "var_name": "rulesFactory"}, {"original_string": "@Mock\n    private IRule rule;", "modifier": "@Mock\n    private", "type": "IRule", "declarator": "rule", "var_name": "rule"}, {"original_string": "@Mock\n    private IMCTSReportDefinitionLoader reportDefinitionLoader;", "modifier": "@Mock\n    private", "type": "IMCTSReportDefinitionLoader", "declarator": "reportDefinitionLoader", "var_name": "reportDefinitionLoader"}, {"original_string": "@Mock\n    private MCTSReporter reporter;", "modifier": "@Mock\n    private", "type": "MCTSReporter", "declarator": "reporter", "var_name": "reporter"}, {"original_string": "@Mock\n    private IReferenceDataRepository referenceDataRepository;", "modifier": "@Mock\n    private", "type": "IReferenceDataRepository", "declarator": "referenceDataRepository", "var_name": "referenceDataRepository"}, {"original_string": "private MCTSReportService service;", "modifier": "private", "type": "MCTSReportService", "declarator": "service", "var_name": "service"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/reporting/MCTSReportServiceTest.java"}, "test_case": {"identifier": "shouldAddReferenceFieldsToReportData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAddReferenceFieldsToReportData() throws Exception {\n        FormSubmission submission = create()\n                .withFormName(\"anc_visit\")\n                .withANMId(\"anm id 1\")\n                .withEntityId(\"mother id 1\")\n                .addFormField(\"submissionDate\", \"2012-03-02\")\n                .addFormField(\"ancVisitDate\", \"2012-03-01\")\n                .addFormField(\"ancVisitNumber\", \"1\")\n                .build();\n        when(rulesFactory.ruleByName(any(String.class))).thenReturn(rule);\n        when(reportDefinitionLoader.load()).thenReturn(reportDefinition());\n        when(referenceDataRepository\n                .getReferenceData(any(FormSubmission.class), any(ReferenceData.class)))\n                .thenReturn(\n                        new SafeMap(EasyMap\n                                .create(\"thayiCardNumber\", \"thayi card 1\")\n                                .put(\"registrationDate\", \"2012-02-01\").map())\n                );\n\n        service.reportFor(submission);\n\n        verify(rule).apply(new SafeMap(EasyMap\n                .create(\"thayiCardNumber\", \"thayi card 1\")\n                .put(\"id\", \"mother id 1\")\n                .put(\"registrationDate\", \"2012-02-01\")\n                .put(\"ancVisitNumber\", \"1\")\n                .put(\"submissionDate\", \"2012-03-02\")\n                .map()));\n    }", "signature": "void shouldAddReferenceFieldsToReportData()", "full_signature": "@Test public void shouldAddReferenceFieldsToReportData()", "class_method_signature": "MCTSReportServiceTest.shouldAddReferenceFieldsToReportData()", "testcase": true, "constructor": false, "invocations": ["build", "addFormField", "addFormField", "addFormField", "withEntityId", "withANMId", "withFormName", "create", "thenReturn", "when", "ruleByName", "any", "thenReturn", "when", "load", "reportDefinition", "thenReturn", "when", "getReferenceData", "any", "any", "map", "put", "create", "reportFor", "apply", "verify", "map", "put", "put", "put", "put", "create"]}, "focal_class": {"identifier": "MCTSReportService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SUBJECT = \"SEND-MCTS-REPORT\";", "modifier": "public static final", "type": "String", "declarator": "SUBJECT = \"SEND-MCTS-REPORT\"", "var_name": "SUBJECT"}, {"original_string": "private static Logger logger = LoggerFactory.getLogger(MCTSReportService.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MCTSReportService.class)", "var_name": "logger"}, {"original_string": "private IRulesFactory rulesFactory;", "modifier": "private", "type": "IRulesFactory", "declarator": "rulesFactory", "var_name": "rulesFactory"}, {"original_string": "private IReferenceDataRepository referenceDataRepository;", "modifier": "private", "type": "IReferenceDataRepository", "declarator": "referenceDataRepository", "var_name": "referenceDataRepository"}, {"original_string": "private IMCTSReportDefinitionLoader reportDefinitionLoader;", "modifier": "private", "type": "IMCTSReportDefinitionLoader", "declarator": "reportDefinitionLoader", "var_name": "reportDefinitionLoader"}, {"original_string": "private MCTSReporter reporter;", "modifier": "private", "type": "MCTSReporter", "declarator": "reporter", "var_name": "reporter"}, {"original_string": "private MCTSReportDefinition reportDefinition;", "modifier": "private", "type": "MCTSReportDefinition", "declarator": "reportDefinition", "var_name": "reportDefinition"}], "methods": [{"identifier": "MCTSReportService", "parameters": "(IRulesFactory rulesFactory,\n                             IReferenceDataRepository referenceDataRepository,\n                             IMCTSReportDefinitionLoader reportDefinitionLoader, MCTSReporter reporter)", "modifiers": "@Autowired public", "return": "", "signature": " MCTSReportService(IRulesFactory rulesFactory,\n                             IReferenceDataRepository referenceDataRepository,\n                             IMCTSReportDefinitionLoader reportDefinitionLoader, MCTSReporter reporter)", "full_signature": "@Autowired public  MCTSReportService(IRulesFactory rulesFactory,\n                             IReferenceDataRepository referenceDataRepository,\n                             IMCTSReportDefinitionLoader reportDefinitionLoader, MCTSReporter reporter)", "class_method_signature": "MCTSReportService.MCTSReportService(IRulesFactory rulesFactory,\n                             IReferenceDataRepository referenceDataRepository,\n                             IMCTSReportDefinitionLoader reportDefinitionLoader, MCTSReporter reporter)", "testcase": false, "constructor": true}, {"identifier": "reportFor", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void reportFor(FormSubmission submission)", "full_signature": "public void reportFor(FormSubmission submission)", "class_method_signature": "MCTSReportService.reportFor(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "reportToMCTS", "parameters": "(String entityId, SafeMap reportFields,\n                              MCTSReportIndicator reportIndicator, String serviceProvidedDate)", "modifiers": "private", "return": "void", "signature": "void reportToMCTS(String entityId, SafeMap reportFields,\n                              MCTSReportIndicator reportIndicator, String serviceProvidedDate)", "full_signature": "private void reportToMCTS(String entityId, SafeMap reportFields,\n                              MCTSReportIndicator reportIndicator, String serviceProvidedDate)", "class_method_signature": "MCTSReportService.reportToMCTS(String entityId, SafeMap reportFields,\n                              MCTSReportIndicator reportIndicator, String serviceProvidedDate)", "testcase": false, "constructor": false}, {"identifier": "processRules", "parameters": "(List<String> rules, SafeMap reportFields, String indicator)", "modifiers": "private", "return": "boolean", "signature": "boolean processRules(List<String> rules, SafeMap reportFields, String indicator)", "full_signature": "private boolean processRules(List<String> rules, SafeMap reportFields, String indicator)", "class_method_signature": "MCTSReportService.processRules(List<String> rules, SafeMap reportFields, String indicator)", "testcase": false, "constructor": false}, {"identifier": "createReportFields", "parameters": "(FormSubmission submission, MCTSReportIndicator reportIndicator)", "modifiers": "private", "return": "SafeMap", "signature": "SafeMap createReportFields(FormSubmission submission, MCTSReportIndicator reportIndicator)", "full_signature": "private SafeMap createReportFields(FormSubmission submission, MCTSReportIndicator reportIndicator)", "class_method_signature": "MCTSReportService.createReportFields(FormSubmission submission, MCTSReportIndicator reportIndicator)", "testcase": false, "constructor": false}, {"identifier": "getServiceProvidedDate", "parameters": "(FormSubmission submission, MCTSReportIndicator reportIndicator)", "modifiers": "private", "return": "String", "signature": "String getServiceProvidedDate(FormSubmission submission, MCTSReportIndicator reportIndicator)", "full_signature": "private String getServiceProvidedDate(FormSubmission submission, MCTSReportIndicator reportIndicator)", "class_method_signature": "MCTSReportService.getServiceProvidedDate(FormSubmission submission, MCTSReportIndicator reportIndicator)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/reporting/MCTSReportService.java"}, "focal_method": {"identifier": "reportFor", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "body": "public void reportFor(FormSubmission submission) throws Exception {\n        if (reportDefinition == null) {\n            logger.info(\"Loading MCTS report definition.\");\n            reportDefinition = reportDefinitionLoader.load();\n        }\n\n        List<MCTSReportIndicator> reportIndicators = reportDefinition.getIndicatorsByFormName(submission.formName());\n\n        for (MCTSReportIndicator reportIndicator : reportIndicators) {\n            SafeMap reportFields = createReportFields(submission, reportIndicator);\n            boolean didAllRulesSucceed = processRules(reportIndicator.reportingRules(), reportFields, reportIndicator.indicator());\n            if (didAllRulesSucceed) {\n                logger.info(MessageFormat.format(\"Sending MCTS Report for indicator: {0} for entity with id {1} \", reportIndicator, submission.entityId()));\n                reportToMCTS(submission.entityId(), reportFields, reportIndicator, getServiceProvidedDate(submission, reportIndicator));\n            }\n        }\n    }", "signature": "void reportFor(FormSubmission submission)", "full_signature": "public void reportFor(FormSubmission submission)", "class_method_signature": "MCTSReportService.reportFor(FormSubmission submission)", "testcase": false, "constructor": false, "invocations": ["info", "load", "getIndicatorsByFormName", "formName", "createReportFields", "processRules", "reportingRules", "indicator", "info", "format", "entityId", "reportToMCTS", "entityId", "getServiceProvidedDate"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}