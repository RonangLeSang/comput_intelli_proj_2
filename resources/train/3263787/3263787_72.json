{"test_class": {"identifier": "ANCServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ActionService actionService;", "modifier": "@Mock\n    private", "type": "ActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "@Mock\n    private AllMothers allMothers;", "modifier": "@Mock\n    private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "@Mock\n    private AllEligibleCouples eligibleCouples;", "modifier": "@Mock\n    private", "type": "AllEligibleCouples", "declarator": "eligibleCouples", "var_name": "eligibleCouples"}, {"original_string": "@Mock\n    private ANCSchedulesService ancSchedulesService;", "modifier": "@Mock\n    private", "type": "ANCSchedulesService", "declarator": "ancSchedulesService", "var_name": "ancSchedulesService"}, {"original_string": "@Mock\n    protected MotherReportingService motherReportingService;", "modifier": "@Mock\n    protected", "type": "MotherReportingService", "declarator": "motherReportingService", "var_name": "motherReportingService"}, {"original_string": "@Mock\n    private ECService ecService;", "modifier": "@Mock\n    private", "type": "ECService", "declarator": "ecService", "var_name": "ecService"}, {"original_string": "@Mock\n    private ReportFieldsDefinition reportFieldsDefinition;", "modifier": "@Mock\n    private", "type": "ReportFieldsDefinition", "declarator": "reportFieldsDefinition", "var_name": "reportFieldsDefinition"}, {"original_string": "private ANCService service;", "modifier": "private", "type": "ANCService", "declarator": "service", "var_name": "service"}, {"original_string": "private Map<String, Map<String, String>> EXTRA_DATA = create(\"details\", mapOf(\"someKey\", \"someValue\")).put(\"reporting\", mapOf(\"someKey\", \"someValue\")).map();", "modifier": "private", "type": "Map<String, Map<String, String>>", "declarator": "EXTRA_DATA = create(\"details\", mapOf(\"someKey\", \"someValue\")).put(\"reporting\", mapOf(\"someKey\", \"someValue\")).map()", "var_name": "EXTRA_DATA"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/ANCServiceTest.java"}, "test_case": {"identifier": "shouldUpdateANCVisitInformationWhenItAlreadyExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpdateANCVisitInformationWhenItAlreadyExists() {\n        FormSubmission submission = create()\n                .withFormName(\"anc_visit\")\n                .withANMId(\"anm id 1\")\n                .withEntityId(\"entity id 1\")\n                .addFormField(\"ancVisitDate\", \"2013-01-01\")\n                .addFormField(\"ancVisitNumber\", \"2\")\n                .addFormField(\"someKey\", \"someValue\")\n                .addFormField(\"weight\", \"55\")\n                .addFormField(\"bpSystolic\", \"120\")\n                .addFormField(\"bpDiastolic\", \"80\")\n                .build();\n        List<Map<String, String>> ancVisits = new ArrayList<>();\n        ancVisits.add(create(\"ancVisitDate\", \"2012-09-01\")\n                .put(\"weight\", \"55\")\n                .put(\"bpSystolic\", \"121\")\n                .put(\"bpDiastolic\", \"81\")\n                .put(\"ancVisitNumber\", \"1\")\n                .map());\n        Mother mother = new Mother(\"entity id 1\", \"ec id 1\", \"TC1\")\n                .withANCVisits(ancVisits)\n                .withDetails(mapOf(\"someKey\", \"someValue\"));\n        when(allMothers.findByCaseId(\"entity id 1\")).thenReturn(mother);\n        when(reportFieldsDefinition.get(\"anc_visit\")).thenReturn(asList(\"someKey\"));\n\n        service.ancVisit(submission);\n\n        Mother updatedMother = new Mother(\"entity id 1\", \"ec id 1\", \"TC1\")\n                .withDetails(mapOf(\"someKey\", \"someValue\"))\n                .withANCVisits(asList(\n                        create(\"ancVisitDate\", \"2012-09-01\")\n                                .put(\"weight\", \"55\")\n                                .put(\"bpSystolic\", \"121\")\n                                .put(\"bpDiastolic\", \"81\")\n                                .put(\"ancVisitNumber\", \"1\")\n                                .map(),\n                        create(\"ancVisitDate\", \"2013-01-01\")\n                                .put(\"weight\", \"55\")\n                                .put(\"bpSystolic\", \"120\")\n                                .put(\"bpDiastolic\", \"80\")\n                                .put(\"ancVisitNumber\", \"2\")\n                                .map()\n                ));\n\n        verify(allMothers).update(updatedMother);\n        verify(ancSchedulesService).ancVisitHasHappened(\"entity id 1\", \"anm id 1\", 2, \"2013-01-01\");\n        verify(motherReportingService).ancVisit(new SafeMap(mapOf(\"someKey\", \"someValue\")));\n    }", "signature": "void shouldUpdateANCVisitInformationWhenItAlreadyExists()", "full_signature": "@Test public void shouldUpdateANCVisitInformationWhenItAlreadyExists()", "class_method_signature": "ANCServiceTest.shouldUpdateANCVisitInformationWhenItAlreadyExists()", "testcase": true, "constructor": false, "invocations": ["build", "addFormField", "addFormField", "addFormField", "addFormField", "addFormField", "addFormField", "withEntityId", "withANMId", "withFormName", "create", "add", "map", "put", "put", "put", "put", "create", "withDetails", "withANCVisits", "mapOf", "thenReturn", "when", "findByCaseId", "thenReturn", "when", "get", "asList", "ancVisit", "withANCVisits", "withDetails", "mapOf", "asList", "map", "put", "put", "put", "put", "create", "map", "put", "put", "put", "put", "create", "update", "verify", "ancVisitHasHappened", "verify", "ancVisit", "verify", "mapOf"]}, "focal_class": {"identifier": "ANCService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(ANCService.class.toString());", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ANCService.class.toString())", "var_name": "logger"}, {"original_string": "private AllMothers allMothers;", "modifier": "private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "private AllEligibleCouples eligibleCouples;", "modifier": "private", "type": "AllEligibleCouples", "declarator": "eligibleCouples", "var_name": "eligibleCouples"}, {"original_string": "private ANCSchedulesService ancSchedulesService;", "modifier": "private", "type": "ANCSchedulesService", "declarator": "ancSchedulesService", "var_name": "ancSchedulesService"}, {"original_string": "private ActionService actionService;", "modifier": "private", "type": "ActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "private MotherReportingService reportingService;", "modifier": "private", "type": "MotherReportingService", "declarator": "reportingService", "var_name": "reportingService"}, {"original_string": "private ReportFieldsDefinition reportFieldsDefinition;", "modifier": "private", "type": "ReportFieldsDefinition", "declarator": "reportFieldsDefinition", "var_name": "reportFieldsDefinition"}], "methods": [{"identifier": "ANCService", "parameters": "(AllMothers allMothers,\n                      AllEligibleCouples eligibleCouples,\n                      ANCSchedulesService ancSchedulesService,\n                      ActionService actionService,\n                      MotherReportingService reportingService,\n                      ReportFieldsDefinition reportFieldsDefinition)", "modifiers": "@Autowired public", "return": "", "signature": " ANCService(AllMothers allMothers,\n                      AllEligibleCouples eligibleCouples,\n                      ANCSchedulesService ancSchedulesService,\n                      ActionService actionService,\n                      MotherReportingService reportingService,\n                      ReportFieldsDefinition reportFieldsDefinition)", "full_signature": "@Autowired public  ANCService(AllMothers allMothers,\n                      AllEligibleCouples eligibleCouples,\n                      ANCSchedulesService ancSchedulesService,\n                      ActionService actionService,\n                      MotherReportingService reportingService,\n                      ReportFieldsDefinition reportFieldsDefinition)", "class_method_signature": "ANCService.ANCService(AllMothers allMothers,\n                      AllEligibleCouples eligibleCouples,\n                      ANCSchedulesService ancSchedulesService,\n                      ActionService actionService,\n                      MotherReportingService reportingService,\n                      ReportFieldsDefinition reportFieldsDefinition)", "testcase": false, "constructor": true}, {"identifier": "registerANC", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void registerANC(FormSubmission submission)", "full_signature": "public void registerANC(FormSubmission submission)", "class_method_signature": "ANCService.registerANC(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "registerOutOfAreaANC", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void registerOutOfAreaANC(FormSubmission submission)", "full_signature": "public void registerOutOfAreaANC(FormSubmission submission)", "class_method_signature": "ANCService.registerOutOfAreaANC(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "ancVisit", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void ancVisit(FormSubmission submission)", "full_signature": "public void ancVisit(FormSubmission submission)", "class_method_signature": "ANCService.ancVisit(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "updateMotherAfterANCVisit", "parameters": "(FormSubmission submission, Mother mother)", "modifiers": "private", "return": "void", "signature": "void updateMotherAfterANCVisit(FormSubmission submission, Mother mother)", "full_signature": "private void updateMotherAfterANCVisit(FormSubmission submission, Mother mother)", "class_method_signature": "ANCService.updateMotherAfterANCVisit(FormSubmission submission, Mother mother)", "testcase": false, "constructor": false}, {"identifier": "updateHypertensionDetection", "parameters": "(FormSubmission submission, Mother mother)", "modifiers": "private", "return": "void", "signature": "void updateHypertensionDetection(FormSubmission submission, Mother mother)", "full_signature": "private void updateHypertensionDetection(FormSubmission submission, Mother mother)", "class_method_signature": "ANCService.updateHypertensionDetection(FormSubmission submission, Mother mother)", "testcase": false, "constructor": false}, {"identifier": "ttProvided", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void ttProvided(FormSubmission submission)", "full_signature": "public void ttProvided(FormSubmission submission)", "class_method_signature": "ANCService.ttProvided(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "ifaTabletsGiven", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void ifaTabletsGiven(FormSubmission submission)", "full_signature": "public void ifaTabletsGiven(FormSubmission submission)", "class_method_signature": "ANCService.ifaTabletsGiven(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "hbTest", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void hbTest(FormSubmission submission)", "full_signature": "public void hbTest(FormSubmission submission)", "class_method_signature": "ANCService.hbTest(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "deliveryPlanned", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void deliveryPlanned(FormSubmission submission)", "full_signature": "public void deliveryPlanned(FormSubmission submission)", "class_method_signature": "ANCService.deliveryPlanned(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "deliveryOutcome", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void deliveryOutcome(FormSubmission submission)", "full_signature": "public void deliveryOutcome(FormSubmission submission)", "class_method_signature": "ANCService.deliveryOutcome(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void close(FormSubmission submission)", "full_signature": "public void close(FormSubmission submission)", "class_method_signature": "ANCService.close(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "ancInvestigations", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void ancInvestigations(FormSubmission submission)", "full_signature": "public void ancInvestigations(FormSubmission submission)", "class_method_signature": "ANCService.ancInvestigations(FormSubmission submission)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/ANCService.java"}, "focal_method": {"identifier": "ancVisit", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "body": "public void ancVisit(FormSubmission submission) {\n        Mother mother = allMothers.findByCaseId(submission.entityId());\n        if (mother == null) {\n            logger.warn(\"Found ANC visit without registered mother for Entity ID: \" + submission.entityId());\n            return;\n        }\n\n        updateMotherAfterANCVisit(submission, mother);\n        ancSchedulesService.ancVisitHasHappened(submission.entityId(), submission.anmId(),\n                parseInt(submission.getField(AllConstants.ANCFormFields.ANC_VISIT_NUMBER_FIELD)), submission.getField(AllConstants.ANCFormFields.ANC_VISIT_DATE_FIELD));\n\n        List<String> reportFields = reportFieldsDefinition.get(submission.formName());\n        reportingService.ancVisit(new SafeMap(submission.getFields(reportFields)));\n    }", "signature": "void ancVisit(FormSubmission submission)", "full_signature": "public void ancVisit(FormSubmission submission)", "class_method_signature": "ANCService.ancVisit(FormSubmission submission)", "testcase": false, "constructor": false, "invocations": ["findByCaseId", "entityId", "warn", "entityId", "updateMotherAfterANCVisit", "ancVisitHasHappened", "entityId", "anmId", "parseInt", "getField", "getField", "get", "formName", "ancVisit", "getFields"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}