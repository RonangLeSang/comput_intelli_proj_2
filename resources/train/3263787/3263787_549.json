{"test_class": {"identifier": "PNCServiceTest", "superclass": "extends BaseUnitTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ActionService actionService;", "modifier": "@Mock\n    private", "type": "ActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "@Mock\n    private ChildSchedulesService childSchedulesService;", "modifier": "@Mock\n    private", "type": "ChildSchedulesService", "declarator": "childSchedulesService", "var_name": "childSchedulesService"}, {"original_string": "@Mock\n    private AllEligibleCouples allEligibleCouples;", "modifier": "@Mock\n    private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}, {"original_string": "@Mock\n    private AllMothers allMothers;", "modifier": "@Mock\n    private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "@Mock\n    private AllChildren children;", "modifier": "@Mock\n    private", "type": "AllChildren", "declarator": "children", "var_name": "children"}, {"original_string": "@Mock\n    private MotherReportingService motherReportingService;", "modifier": "@Mock\n    private", "type": "MotherReportingService", "declarator": "motherReportingService", "var_name": "motherReportingService"}, {"original_string": "@Mock\n    private ChildReportingService childReportingService;", "modifier": "@Mock\n    private", "type": "ChildReportingService", "declarator": "childReportingService", "var_name": "childReportingService"}, {"original_string": "@Mock\n    private PNCSchedulesService pncSchedulesService;", "modifier": "@Mock\n    private", "type": "PNCSchedulesService", "declarator": "pncSchedulesService", "var_name": "pncSchedulesService"}, {"original_string": "@Mock\n    private ReportFieldsDefinition reportFieldsDefinition;", "modifier": "@Mock\n    private", "type": "ReportFieldsDefinition", "declarator": "reportFieldsDefinition", "var_name": "reportFieldsDefinition"}, {"original_string": "private PNCService service;", "modifier": "private", "type": "PNCService", "declarator": "service", "var_name": "service"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/PNCServiceTest.java"}, "test_case": {"identifier": "shouldUpdateMotherWithChildrenDetailsWhenPNCRegistrationOA", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpdateMotherWithChildrenDetailsWhenPNCRegistrationOA() {\n        when(allMothers.findByEcCaseId(\"ec id 1\")).thenReturn(asList(new Mother(\"mother id 1\", \"ec id 1\", \"tc 1\")));\n        when(allEligibleCouples.findByCaseId(\"ec id 1\")).thenReturn(new EligibleCouple(\"ec id 1\", \"123\"));\n        FormSubmission submission = create()\n                .withFormName(\"pnc_registration_oa\")\n                .withANMId(\"anm id 1\")\n                .withEntityId(\"ec id 1\")\n                .addFormField(\"referenceDate\", \"2012-01-01\")\n                .addFormField(\"didWomanSurvive\", \"yes\")\n                .withSubForm(new SubFormData(\"child_registration_oa\",\n                        asList(EasyMap.create(\"id\", \"child id 1\")\n                                        .put(\"gender\", \"male\")\n                                        .put(\"weight\", \"2\")\n                                        .map(),\n                                EasyMap.create(\"id\", \"child id 2\")\n                                        .put(\"gender\", \"female\")\n                                        .put(\"weight\", \"3\")\n                                        .map()\n                        )\n                ))\n                .build();\n\n        service.pncRegistrationOA(submission);\n\n        verify(allMothers).update(new Mother(\"mother id 1\", \"ec id 1\", \"tc 1\")\n                .withAnm(\"anm id 1\")\n                .withChildrenDetails(asList(EasyMap.create(\"id\", \"child id 1\")\n                                        .put(\"gender\", \"male\")\n                                        .put(\"weight\", \"2\")\n                                        .put(\"immunizationsAtBirth\", null)\n                                        .map(),\n                                EasyMap.create(\"id\", \"child id 2\")\n                                        .put(\"gender\", \"female\")\n                                        .put(\"weight\", \"3\")\n                                        .put(\"immunizationsAtBirth\", null)\n                                        .map()\n                        )\n                ));\n    }", "signature": "void shouldUpdateMotherWithChildrenDetailsWhenPNCRegistrationOA()", "full_signature": "@Test public void shouldUpdateMotherWithChildrenDetailsWhenPNCRegistrationOA()", "class_method_signature": "PNCServiceTest.shouldUpdateMotherWithChildrenDetailsWhenPNCRegistrationOA()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByEcCaseId", "asList", "thenReturn", "when", "findByCaseId", "build", "withSubForm", "addFormField", "addFormField", "withEntityId", "withANMId", "withFormName", "create", "asList", "map", "put", "put", "create", "map", "put", "put", "create", "pncRegistrationOA", "update", "verify", "withChildrenDetails", "withAnm", "asList", "map", "put", "put", "put", "create", "map", "put", "put", "put", "create"]}, "focal_class": {"identifier": "PNCService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(PNCService.class.toString());", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PNCService.class.toString())", "var_name": "logger"}, {"original_string": "private ActionService actionService;", "modifier": "private", "type": "ActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "private PNCSchedulesService pncSchedulesService;", "modifier": "private", "type": "PNCSchedulesService", "declarator": "pncSchedulesService", "var_name": "pncSchedulesService"}, {"original_string": "private AllEligibleCouples allEligibleCouples;", "modifier": "private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}, {"original_string": "private AllMothers allMothers;", "modifier": "private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "private AllChildren allChildren;", "modifier": "private", "type": "AllChildren", "declarator": "allChildren", "var_name": "allChildren"}, {"original_string": "private MotherReportingService motherReportingService;", "modifier": "private", "type": "MotherReportingService", "declarator": "motherReportingService", "var_name": "motherReportingService"}, {"original_string": "private ReportFieldsDefinition reportFieldsDefinition;", "modifier": "private", "type": "ReportFieldsDefinition", "declarator": "reportFieldsDefinition", "var_name": "reportFieldsDefinition"}], "methods": [{"identifier": "PNCService", "parameters": "(ActionService actionService,\n                      PNCSchedulesService pncSchedulesService,\n                      AllEligibleCouples allEligibleCouples,\n                      AllMothers allMothers,\n                      AllChildren allChildren,\n                      MotherReportingService motherReportingService,\n                      ReportFieldsDefinition reportFieldsDefinition)", "modifiers": "@Autowired public", "return": "", "signature": " PNCService(ActionService actionService,\n                      PNCSchedulesService pncSchedulesService,\n                      AllEligibleCouples allEligibleCouples,\n                      AllMothers allMothers,\n                      AllChildren allChildren,\n                      MotherReportingService motherReportingService,\n                      ReportFieldsDefinition reportFieldsDefinition)", "full_signature": "@Autowired public  PNCService(ActionService actionService,\n                      PNCSchedulesService pncSchedulesService,\n                      AllEligibleCouples allEligibleCouples,\n                      AllMothers allMothers,\n                      AllChildren allChildren,\n                      MotherReportingService motherReportingService,\n                      ReportFieldsDefinition reportFieldsDefinition)", "class_method_signature": "PNCService.PNCService(ActionService actionService,\n                      PNCSchedulesService pncSchedulesService,\n                      AllEligibleCouples allEligibleCouples,\n                      AllMothers allMothers,\n                      AllChildren allChildren,\n                      MotherReportingService motherReportingService,\n                      ReportFieldsDefinition reportFieldsDefinition)", "testcase": false, "constructor": true}, {"identifier": "deliveryOutcome", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void deliveryOutcome(FormSubmission submission)", "full_signature": "public void deliveryOutcome(FormSubmission submission)", "class_method_signature": "PNCService.deliveryOutcome(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "addChildrenDetailsToMother", "parameters": "(FormSubmission submission, SubFormData subFormData, Mother mother)", "modifiers": "private", "return": "void", "signature": "void addChildrenDetailsToMother(FormSubmission submission, SubFormData subFormData, Mother mother)", "full_signature": "private void addChildrenDetailsToMother(FormSubmission submission, SubFormData subFormData, Mother mother)", "class_method_signature": "PNCService.addChildrenDetailsToMother(FormSubmission submission, SubFormData subFormData, Mother mother)", "testcase": false, "constructor": false}, {"identifier": "closeMother", "parameters": "(Mother mother)", "modifiers": "private", "return": "void", "signature": "void closeMother(Mother mother)", "full_signature": "private void closeMother(Mother mother)", "class_method_signature": "PNCService.closeMother(Mother mother)", "testcase": false, "constructor": false}, {"identifier": "pncRegistrationOA", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void pncRegistrationOA(FormSubmission submission)", "full_signature": "public void pncRegistrationOA(FormSubmission submission)", "class_method_signature": "PNCService.pncRegistrationOA(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "updateEligibleCouple", "parameters": "(FormSubmission submission, Mother mother)", "modifiers": "private", "return": "void", "signature": "void updateEligibleCouple(FormSubmission submission, Mother mother)", "full_signature": "private void updateEligibleCouple(FormSubmission submission, Mother mother)", "class_method_signature": "PNCService.updateEligibleCouple(FormSubmission submission, Mother mother)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void close(FormSubmission submission)", "full_signature": "public void close(FormSubmission submission)", "class_method_signature": "PNCService.close(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "autoClosePNCCase", "parameters": "(String entityId)", "modifiers": "public", "return": "void", "signature": "void autoClosePNCCase(String entityId)", "full_signature": "public void autoClosePNCCase(String entityId)", "class_method_signature": "PNCService.autoClosePNCCase(String entityId)", "testcase": false, "constructor": false}, {"identifier": "pncVisitHappened", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void pncVisitHappened(FormSubmission submission)", "full_signature": "public void pncVisitHappened(FormSubmission submission)", "class_method_signature": "PNCService.pncVisitHappened(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "updatePNCVisitDetails", "parameters": "(FormSubmission submission, Mother mother)", "modifiers": "private", "return": "void", "signature": "void updatePNCVisitDetails(FormSubmission submission, Mother mother)", "full_signature": "private void updatePNCVisitDetails(FormSubmission submission, Mother mother)", "class_method_signature": "PNCService.updatePNCVisitDetails(FormSubmission submission, Mother mother)", "testcase": false, "constructor": false}, {"identifier": "getChildVisitDetails", "parameters": "(SubFormData subFormData)", "modifiers": "private", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getChildVisitDetails(SubFormData subFormData)", "full_signature": "private List<Map<String, String>> getChildVisitDetails(SubFormData subFormData)", "class_method_signature": "PNCService.getChildVisitDetails(SubFormData subFormData)", "testcase": false, "constructor": false}, {"identifier": "updatePNCVisitDatesOfMother", "parameters": "(FormSubmission submission, Mother mother)", "modifiers": "private", "return": "void", "signature": "void updatePNCVisitDatesOfMother(FormSubmission submission, Mother mother)", "full_signature": "private void updatePNCVisitDatesOfMother(FormSubmission submission, Mother mother)", "class_method_signature": "PNCService.updatePNCVisitDatesOfMother(FormSubmission submission, Mother mother)", "testcase": false, "constructor": false}, {"identifier": "reportPPFamilyPlanning", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "signature": "void reportPPFamilyPlanning(FormSubmission submission)", "full_signature": "public void reportPPFamilyPlanning(FormSubmission submission)", "class_method_signature": "PNCService.reportPPFamilyPlanning(FormSubmission submission)", "testcase": false, "constructor": false}, {"identifier": "updateECWithFPMethod", "parameters": "(FormSubmission submission, EligibleCouple eligibleCouple)", "modifiers": "private", "return": "EligibleCouple", "signature": "EligibleCouple updateECWithFPMethod(FormSubmission submission, EligibleCouple eligibleCouple)", "full_signature": "private EligibleCouple updateECWithFPMethod(FormSubmission submission, EligibleCouple eligibleCouple)", "class_method_signature": "PNCService.updateECWithFPMethod(FormSubmission submission, EligibleCouple eligibleCouple)", "testcase": false, "constructor": false}, {"identifier": "updateECWithIUDFPDetails", "parameters": "(EligibleCouple eligibleCouple, String place, String date)", "modifiers": "private", "return": "EligibleCouple", "signature": "EligibleCouple updateECWithIUDFPDetails(EligibleCouple eligibleCouple, String place, String date)", "full_signature": "private EligibleCouple updateECWithIUDFPDetails(EligibleCouple eligibleCouple, String place, String date)", "class_method_signature": "PNCService.updateECWithIUDFPDetails(EligibleCouple eligibleCouple, String place, String date)", "testcase": false, "constructor": false}, {"identifier": "updateECWithFemaleSterilizationFPDetails", "parameters": "(EligibleCouple eligibleCouple, String type, String date)", "modifiers": "private", "return": "EligibleCouple", "signature": "EligibleCouple updateECWithFemaleSterilizationFPDetails(EligibleCouple eligibleCouple, String type, String date)", "full_signature": "private EligibleCouple updateECWithFemaleSterilizationFPDetails(EligibleCouple eligibleCouple, String type, String date)", "class_method_signature": "PNCService.updateECWithFemaleSterilizationFPDetails(EligibleCouple eligibleCouple, String type, String date)", "testcase": false, "constructor": false}, {"identifier": "getOCPFPDetails", "parameters": "(FormSubmission submission, String fpAcceptanceDate)", "modifiers": "private", "return": "OCPFPDetails", "signature": "OCPFPDetails getOCPFPDetails(FormSubmission submission, String fpAcceptanceDate)", "full_signature": "private OCPFPDetails getOCPFPDetails(FormSubmission submission, String fpAcceptanceDate)", "class_method_signature": "PNCService.getOCPFPDetails(FormSubmission submission, String fpAcceptanceDate)", "testcase": false, "constructor": false}, {"identifier": "getCondomFPDetails", "parameters": "(FormSubmission submission, String fpAcceptanceDate)", "modifiers": "private", "return": "CondomFPDetails", "signature": "CondomFPDetails getCondomFPDetails(FormSubmission submission, String fpAcceptanceDate)", "full_signature": "private CondomFPDetails getCondomFPDetails(FormSubmission submission, String fpAcceptanceDate)", "class_method_signature": "PNCService.getCondomFPDetails(FormSubmission submission, String fpAcceptanceDate)", "testcase": false, "constructor": false}, {"identifier": "handleStillBirth", "parameters": "(FormSubmission submission, SubFormData subFormData)", "modifiers": "private", "return": "boolean", "signature": "boolean handleStillBirth(FormSubmission submission, SubFormData subFormData)", "full_signature": "private boolean handleStillBirth(FormSubmission submission, SubFormData subFormData)", "class_method_signature": "PNCService.handleStillBirth(FormSubmission submission, SubFormData subFormData)", "testcase": false, "constructor": false}, {"identifier": "isDeliveryOutcomeStillBirth", "parameters": "(FormSubmission submission)", "modifiers": "private", "return": "boolean", "signature": "boolean isDeliveryOutcomeStillBirth(FormSubmission submission)", "full_signature": "private boolean isDeliveryOutcomeStillBirth(FormSubmission submission)", "class_method_signature": "PNCService.isDeliveryOutcomeStillBirth(FormSubmission submission)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/PNCService.java"}, "focal_method": {"identifier": "pncRegistrationOA", "parameters": "(FormSubmission submission)", "modifiers": "public", "return": "void", "body": "public void pncRegistrationOA(FormSubmission submission) {\n        List<Mother> mothers = allMothers.findByEcCaseId(submission.entityId());\n        if (mothers.size() <= 0) {\n            logger.warn(\"Failed to handle PNC registration as there is no mother registered with ec id: \" + submission.entityId());\n            return;\n        }\n\n        Mother mother = mothers.get(0);\n        mother.withAnm(submission.anmId());\n        addChildrenDetailsToMother(submission, submission.getSubFormByName(CHILD_REGISTRATION_OA), mother);\n        allMothers.update(mother);\n\n        updateEligibleCouple(submission, mother);\n\n        if (BOOLEAN_TRUE_VALUE.equals(submission.getField(DID_WOMAN_SURVIVE))) {\n            pncSchedulesService.deliveryOutcome(mother.caseId(), submission.getField(REFERENCE_DATE));\n        }\n        List<String> reportFields = reportFieldsDefinition.get(submission.formName());\n        motherReportingService.pncRegistrationOA(new SafeMap(submission.getFields(reportFields)));\n    }", "signature": "void pncRegistrationOA(FormSubmission submission)", "full_signature": "public void pncRegistrationOA(FormSubmission submission)", "class_method_signature": "PNCService.pncRegistrationOA(FormSubmission submission)", "testcase": false, "constructor": false, "invocations": ["findByEcCaseId", "entityId", "size", "warn", "entityId", "get", "withAnm", "anmId", "addChildrenDetailsToMother", "getSubFormByName", "update", "updateEligibleCouple", "equals", "getField", "deliveryOutcome", "caseId", "getField", "get", "formName", "pncRegistrationOA", "getFields"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}