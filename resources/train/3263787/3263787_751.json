{"test_class": {"identifier": "ActionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AllActions allActions;", "modifier": "@Mock\n    private", "type": "AllActions", "declarator": "allActions", "var_name": "allActions"}, {"original_string": "@Mock\n    private AllMothers allMothers;", "modifier": "@Mock\n    private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "@Mock\n    private AllChildren allChildren;", "modifier": "@Mock\n    private", "type": "AllChildren", "declarator": "allChildren", "var_name": "allChildren"}, {"original_string": "@Mock\n    private AllEligibleCouples allEligibleCouples;", "modifier": "@Mock\n    private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}, {"original_string": "private ActionService service;", "modifier": "private", "type": "ActionService", "declarator": "service", "var_name": "service"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/ActionServiceTest.java"}, "test_case": {"identifier": "shouldNotSaveAlertActionIfThereIsNoECForTheCaseId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotSaveAlertActionIfThereIsNoECForTheCaseId() throws Exception {\n        when(allEligibleCouples.findByCaseId(\"Case X\")).thenReturn(null);\n\n        DateTime dueDate = DateTime.now().minusDays(1);\n        DateTime expiryDate = dueDate.plusWeeks(2);\n        service.alertForBeneficiary(ec, \"Case X\", \"OCP Refill\", \"OCP Refill\", urgent, dueDate, expiryDate);\n\n        verify(allActions, never()).addOrUpdateAlert(new Action(\"Case X\", \"ANM ID C\", ActionData.createAlert(ec, \"OCP Refill\", \"OCP Refill\", urgent, dueDate, expiryDate)));\n    }", "signature": "void shouldNotSaveAlertActionIfThereIsNoECForTheCaseId()", "full_signature": "@Test public void shouldNotSaveAlertActionIfThereIsNoECForTheCaseId()", "class_method_signature": "ActionServiceTest.shouldNotSaveAlertActionIfThereIsNoECForTheCaseId()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByCaseId", "minusDays", "now", "plusWeeks", "alertForBeneficiary", "addOrUpdateAlert", "verify", "never", "createAlert"]}, "focal_class": {"identifier": "ActionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AllActions allActions;", "modifier": "private", "type": "AllActions", "declarator": "allActions", "var_name": "allActions"}, {"original_string": "private AllMothers allMothers;", "modifier": "private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "private AllChildren allChildren;", "modifier": "private", "type": "AllChildren", "declarator": "allChildren", "var_name": "allChildren"}, {"original_string": "private AllEligibleCouples allEligibleCouples;", "modifier": "private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}], "methods": [{"identifier": "ActionService", "parameters": "(AllActions allActions, AllMothers allMothers, AllChildren allChildren, AllEligibleCouples allEligibleCouples)", "modifiers": "@Autowired public", "return": "", "signature": " ActionService(AllActions allActions, AllMothers allMothers, AllChildren allChildren, AllEligibleCouples allEligibleCouples)", "full_signature": "@Autowired public  ActionService(AllActions allActions, AllMothers allMothers, AllChildren allChildren, AllEligibleCouples allEligibleCouples)", "class_method_signature": "ActionService.ActionService(AllActions allActions, AllMothers allMothers, AllChildren allChildren, AllEligibleCouples allEligibleCouples)", "testcase": false, "constructor": true}, {"identifier": "getNewAlertsForANM", "parameters": "(String anmIdentifier, long timeStamp)", "modifiers": "public", "return": "List<Action>", "signature": "List<Action> getNewAlertsForANM(String anmIdentifier, long timeStamp)", "full_signature": "public List<Action> getNewAlertsForANM(String anmIdentifier, long timeStamp)", "class_method_signature": "ActionService.getNewAlertsForANM(String anmIdentifier, long timeStamp)", "testcase": false, "constructor": false}, {"identifier": "alertForBeneficiary", "parameters": "(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate)", "modifiers": "public", "return": "void", "signature": "void alertForBeneficiary(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate)", "full_signature": "public void alertForBeneficiary(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate)", "class_method_signature": "ActionService.alertForBeneficiary(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate)", "testcase": false, "constructor": false}, {"identifier": "markAllAlertsAsInactive", "parameters": "(String entityId)", "modifiers": "public", "return": "void", "signature": "void markAllAlertsAsInactive(String entityId)", "full_signature": "public void markAllAlertsAsInactive(String entityId)", "class_method_signature": "ActionService.markAllAlertsAsInactive(String entityId)", "testcase": false, "constructor": false}, {"identifier": "markAlertAsInactive", "parameters": "(String anmId, String entityId, String scheduleName)", "modifiers": "public", "return": "void", "signature": "void markAlertAsInactive(String anmId, String entityId, String scheduleName)", "full_signature": "public void markAlertAsInactive(String anmId, String entityId, String scheduleName)", "class_method_signature": "ActionService.markAlertAsInactive(String anmId, String entityId, String scheduleName)", "testcase": false, "constructor": false}, {"identifier": "markAlertAsClosed", "parameters": "(String caseId, String anmIdentifier, String visitCode, String completionDate)", "modifiers": "public", "return": "void", "signature": "void markAlertAsClosed(String caseId, String anmIdentifier, String visitCode, String completionDate)", "full_signature": "public void markAlertAsClosed(String caseId, String anmIdentifier, String visitCode, String completionDate)", "class_method_signature": "ActionService.markAlertAsClosed(String caseId, String anmIdentifier, String visitCode, String completionDate)", "testcase": false, "constructor": false}, {"identifier": "closeMother", "parameters": "(String caseId, String anmIdentifier, String reasonForClose)", "modifiers": "public", "return": "void", "signature": "void closeMother(String caseId, String anmIdentifier, String reasonForClose)", "full_signature": "public void closeMother(String caseId, String anmIdentifier, String reasonForClose)", "class_method_signature": "ActionService.closeMother(String caseId, String anmIdentifier, String reasonForClose)", "testcase": false, "constructor": false}, {"identifier": "reportForIndicator", "parameters": "(String anmIdentifier, ActionData actionData)", "modifiers": "public", "return": "void", "signature": "void reportForIndicator(String anmIdentifier, ActionData actionData)", "full_signature": "public void reportForIndicator(String anmIdentifier, ActionData actionData)", "class_method_signature": "ActionService.reportForIndicator(String anmIdentifier, ActionData actionData)", "testcase": false, "constructor": false}, {"identifier": "deleteReportActions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteReportActions()", "full_signature": "public void deleteReportActions()", "class_method_signature": "ActionService.deleteReportActions()", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/ActionService.java"}, "focal_method": {"identifier": "alertForBeneficiary", "parameters": "(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate)", "modifiers": "public", "return": "void", "body": "public void alertForBeneficiary(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate) {\n        // TODO: Get rid of this horrible if-else after Motech-Platform fixes the bug related to metadata in motech-schedule-tracking.\n        String anmIdentifier;\n        if (mother.equals(beneficiaryType)) {\n            Mother mother = allMothers.findByCaseId(caseID);\n            anmIdentifier = mother == null ? null : mother.anmIdentifier();\n        } else if (child.equals(beneficiaryType)) {\n            Child child = allChildren.findByCaseId(caseID);\n            anmIdentifier = child == null ? null : child.anmIdentifier();\n        } else if (ec.equals(beneficiaryType)) {\n            EligibleCouple eligibleCouple = allEligibleCouples.findByCaseId(caseID);\n            anmIdentifier = eligibleCouple == null ? null : eligibleCouple.anmIdentifier();\n\n        } else {\n            throw new IllegalArgumentException(\"Beneficiary Type : \" + beneficiaryType + \" is of unknown type\");\n        }\n\n        if (anmIdentifier != null) {\n            allActions.addOrUpdateAlert(new Action(caseID, anmIdentifier, ActionData.createAlert(beneficiaryType, scheduleName, visitCode, alertStatus, startDate, expiryDate)));\n        }\n    }", "signature": "void alertForBeneficiary(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate)", "full_signature": "public void alertForBeneficiary(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate)", "class_method_signature": "ActionService.alertForBeneficiary(BeneficiaryType beneficiaryType, String caseID, String scheduleName, String visitCode, AlertStatus alertStatus, DateTime startDate, DateTime expiryDate)", "testcase": false, "constructor": false, "invocations": ["equals", "findByCaseId", "anmIdentifier", "equals", "findByCaseId", "anmIdentifier", "equals", "findByCaseId", "anmIdentifier", "addOrUpdateAlert", "createAlert"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}