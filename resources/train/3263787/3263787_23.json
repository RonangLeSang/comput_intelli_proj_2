{"test_class": {"identifier": "ReportDataControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ServicesProvidedRepository servicesProvidedRepository;", "modifier": "@Mock\n    private", "type": "ServicesProvidedRepository", "declarator": "servicesProvidedRepository", "var_name": "servicesProvidedRepository"}, {"original_string": "@Mock\n    private ANMReportsRepository anmReportsRepository;", "modifier": "@Mock\n    private", "type": "ANMReportsRepository", "declarator": "anmReportsRepository", "var_name": "anmReportsRepository"}, {"original_string": "@Mock\n    private ServiceProvided serviceProvided;", "modifier": "@Mock\n    private", "type": "ServiceProvided", "declarator": "serviceProvided", "var_name": "serviceProvided"}, {"original_string": "@Mock\n    private ANMReportData anmReportData;", "modifier": "@Mock\n    private", "type": "ANMReportData", "declarator": "anmReportData", "var_name": "anmReportData"}, {"original_string": "@Mock\n    private Date date;", "modifier": "@Mock\n    private", "type": "Date", "declarator": "date", "var_name": "date"}, {"original_string": "private ReportDataController controller;", "modifier": "private", "type": "ReportDataController", "declarator": "controller", "var_name": "controller"}], "file": "drishti-reporting/src/test/java/org/ei/drishti/reporting/controller/ReportDataControllerTest.java"}, "test_case": {"identifier": "shouldDeleteAllServiceProvidedReportsGivenAnEntityID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDeleteAllServiceProvidedReportsGivenAnEntityID() throws Exception {\n        ReportDataDeleteRequest deleteRequest = new ReportDataDeleteRequest()\n                .withType(\"serviceProvided\")\n                .withDristhiEntityId(\"entity id 1\");\n\n        String result = controller.deleteReports(deleteRequest);\n\n        verify(servicesProvidedRepository).delete(deleteRequest);\n        verifyZeroInteractions(anmReportsRepository);\n        assertEquals(\"Success.\", result);\n    }", "signature": "void shouldDeleteAllServiceProvidedReportsGivenAnEntityID()", "full_signature": "@Test public void shouldDeleteAllServiceProvidedReportsGivenAnEntityID()", "class_method_signature": "ReportDataControllerTest.shouldDeleteAllServiceProvidedReportsGivenAnEntityID()", "testcase": true, "constructor": false, "invocations": ["withDristhiEntityId", "withType", "deleteReports", "delete", "verify", "verifyZeroInteractions", "assertEquals"]}, "focal_class": {"identifier": "ReportDataController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServicesProvidedRepository servicesProvidedRepository;", "modifier": "private", "type": "ServicesProvidedRepository", "declarator": "servicesProvidedRepository", "var_name": "servicesProvidedRepository"}, {"original_string": "private ANMReportsRepository anmReportsRepository;", "modifier": "private", "type": "ANMReportsRepository", "declarator": "anmReportsRepository", "var_name": "anmReportsRepository"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(ReportDataController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ReportDataController.class)", "var_name": "logger"}], "methods": [{"identifier": "ReportDataController", "parameters": "(ServicesProvidedRepository servicesProvidedRepository,\n                                ANMReportsRepository anmReportsRepository)", "modifiers": "@Autowired public", "return": "", "signature": " ReportDataController(ServicesProvidedRepository servicesProvidedRepository,\n                                ANMReportsRepository anmReportsRepository)", "full_signature": "@Autowired public  ReportDataController(ServicesProvidedRepository servicesProvidedRepository,\n                                ANMReportsRepository anmReportsRepository)", "class_method_signature": "ReportDataController.ReportDataController(ServicesProvidedRepository servicesProvidedRepository,\n                                ANMReportsRepository anmReportsRepository)", "testcase": false, "constructor": true}, {"identifier": "submit", "parameters": "(@RequestBody ReportingData reportingData)", "modifiers": "@RequestMapping(value = \"/report/submit\", method = RequestMethod.POST) @ResponseBody public", "return": "String", "signature": "String submit(@RequestBody ReportingData reportingData)", "full_signature": "@RequestMapping(value = \"/report/submit\", method = RequestMethod.POST) @ResponseBody public String submit(@RequestBody ReportingData reportingData)", "class_method_signature": "ReportDataController.submit(@RequestBody ReportingData reportingData)", "testcase": false, "constructor": false}, {"identifier": "updateReports", "parameters": "(@RequestBody ReportDataUpdateRequest request)", "modifiers": "@RequestMapping(headers = {\"Accept=application/json\"}, value = \"/report/update\", method = RequestMethod.POST) @ResponseBody public", "return": "String", "signature": "String updateReports(@RequestBody ReportDataUpdateRequest request)", "full_signature": "@RequestMapping(headers = {\"Accept=application/json\"}, value = \"/report/update\", method = RequestMethod.POST) @ResponseBody public String updateReports(@RequestBody ReportDataUpdateRequest request)", "class_method_signature": "ReportDataController.updateReports(@RequestBody ReportDataUpdateRequest request)", "testcase": false, "constructor": false}, {"identifier": "deleteReports", "parameters": "(@RequestBody ReportDataDeleteRequest request)", "modifiers": "@RequestMapping(headers = {\"Accept=application/json\"}, value = \"/report/delete\", method = RequestMethod.POST) @ResponseBody public", "return": "String", "signature": "String deleteReports(@RequestBody ReportDataDeleteRequest request)", "full_signature": "@RequestMapping(headers = {\"Accept=application/json\"}, value = \"/report/delete\", method = RequestMethod.POST) @ResponseBody public String deleteReports(@RequestBody ReportDataDeleteRequest request)", "class_method_signature": "ReportDataController.deleteReports(@RequestBody ReportDataDeleteRequest request)", "testcase": false, "constructor": false}, {"identifier": "getAllANMsIndicatorSummaries", "parameters": "()", "modifiers": "@RequestMapping(value = \"/report/fetchForAllANMs\", method = RequestMethod.GET) @ResponseBody public", "return": "List<ANMReport>", "signature": "List<ANMReport> getAllANMsIndicatorSummaries()", "full_signature": "@RequestMapping(value = \"/report/fetchForAllANMs\", method = RequestMethod.GET) @ResponseBody public List<ANMReport> getAllANMsIndicatorSummaries()", "class_method_signature": "ReportDataController.getAllANMsIndicatorSummaries()", "testcase": false, "constructor": false}, {"identifier": "throwExceptionIfMandatoryDataIsNotPresentForANMReport", "parameters": "(ReportingData reportingData)", "modifiers": "private", "return": "void", "signature": "void throwExceptionIfMandatoryDataIsNotPresentForANMReport(ReportingData reportingData)", "full_signature": "private void throwExceptionIfMandatoryDataIsNotPresentForANMReport(ReportingData reportingData)", "class_method_signature": "ReportDataController.throwExceptionIfMandatoryDataIsNotPresentForANMReport(ReportingData reportingData)", "testcase": false, "constructor": false}, {"identifier": "throwExceptionIfMandatoryDataIsNotPresentForServiceProvidedReport", "parameters": "(ReportingData reportingData)", "modifiers": "private", "return": "void", "signature": "void throwExceptionIfMandatoryDataIsNotPresentForServiceProvidedReport(ReportingData reportingData)", "full_signature": "private void throwExceptionIfMandatoryDataIsNotPresentForServiceProvidedReport(ReportingData reportingData)", "class_method_signature": "ReportDataController.throwExceptionIfMandatoryDataIsNotPresentForServiceProvidedReport(ReportingData reportingData)", "testcase": false, "constructor": false}, {"identifier": "throwExceptionIfMandatoryDataIsNotPresentForANMReport", "parameters": "(List<ReportingData> reportingData)", "modifiers": "private", "return": "void", "signature": "void throwExceptionIfMandatoryDataIsNotPresentForANMReport(List<ReportingData> reportingData)", "full_signature": "private void throwExceptionIfMandatoryDataIsNotPresentForANMReport(List<ReportingData> reportingData)", "class_method_signature": "ReportDataController.throwExceptionIfMandatoryDataIsNotPresentForANMReport(List<ReportingData> reportingData)", "testcase": false, "constructor": false}, {"identifier": "throwExceptionIfMandatoryDataIsNotPresentForServiceProvidedReport", "parameters": "(List<ReportingData> reportingData)", "modifiers": "private", "return": "void", "signature": "void throwExceptionIfMandatoryDataIsNotPresentForServiceProvidedReport(List<ReportingData> reportingData)", "full_signature": "private void throwExceptionIfMandatoryDataIsNotPresentForServiceProvidedReport(List<ReportingData> reportingData)", "class_method_signature": "ReportDataController.throwExceptionIfMandatoryDataIsNotPresentForServiceProvidedReport(List<ReportingData> reportingData)", "testcase": false, "constructor": false}, {"identifier": "throwExceptionIfDristhiEntityIdIsNotPresent", "parameters": "(ReportDataDeleteRequest request)", "modifiers": "private", "return": "void", "signature": "void throwExceptionIfDristhiEntityIdIsNotPresent(ReportDataDeleteRequest request)", "full_signature": "private void throwExceptionIfDristhiEntityIdIsNotPresent(ReportDataDeleteRequest request)", "class_method_signature": "ReportDataController.throwExceptionIfDristhiEntityIdIsNotPresent(ReportDataDeleteRequest request)", "testcase": false, "constructor": false}], "file": "drishti-reporting/src/main/java/org/ei/drishti/reporting/controller/ReportDataController.java"}, "focal_method": {"identifier": "deleteReports", "parameters": "(@RequestBody ReportDataDeleteRequest request)", "modifiers": "@RequestMapping(headers = {\"Accept=application/json\"}, value = \"/report/delete\", method = RequestMethod.POST) @ResponseBody public", "return": "String", "body": "@RequestMapping(headers = {\"Accept=application/json\"}, value = \"/report/delete\", method = RequestMethod.POST)\n    @ResponseBody\n    public String deleteReports(@RequestBody ReportDataDeleteRequest request) throws DristhiEntityIdMissingException {\n        logger.info(MessageFormat.format(\"Deleting {0} reports for entity with entity id: {1}\",\n                request.type(), request.dristhiEntityId()));\n        throwExceptionIfDristhiEntityIdIsNotPresent(request);\n        if (ReportDataParameters.SERVICE_PROVIDED_DATA_TYPE.equals(request.type())) {\n            servicesProvidedRepository.delete(request);\n        } else if (ReportDataParameters.ANM_REPORT_DATA_TYPE.equals(request.type())) {\n            anmReportsRepository.delete(request);\n        }\n        return \"Success.\";\n    }", "signature": "String deleteReports(@RequestBody ReportDataDeleteRequest request)", "full_signature": "@RequestMapping(headers = {\"Accept=application/json\"}, value = \"/report/delete\", method = RequestMethod.POST) @ResponseBody public String deleteReports(@RequestBody ReportDataDeleteRequest request)", "class_method_signature": "ReportDataController.deleteReports(@RequestBody ReportDataDeleteRequest request)", "testcase": false, "constructor": false, "invocations": ["info", "format", "type", "dristhiEntityId", "throwExceptionIfDristhiEntityIdIsNotPresent", "equals", "type", "delete", "equals", "type", "delete"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}