{"test_class": {"identifier": "ChildRegisterServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ChildRegisterService registerService;", "modifier": "private", "type": "ChildRegisterService", "declarator": "registerService", "var_name": "registerService"}, {"original_string": "@Mock\n    private AllChildren allChildren;", "modifier": "@Mock\n    private", "type": "AllChildren", "declarator": "allChildren", "var_name": "allChildren"}, {"original_string": "@Mock\n    private AllMothers allMothers;", "modifier": "@Mock\n    private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "@Mock\n    private AllEligibleCouples allEligibleCouples;", "modifier": "@Mock\n    private", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}], "file": "drishti-mother-child/src/test/java/org/ei/drishti/service/ChildRegisterServiceTest.java"}, "test_case": {"identifier": "shouldGetChildRegisterForAGivenANM", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetChildRegisterForAGivenANM() throws Exception {\n        Map<String, String> immunizations = EasyMap.create(\"bcg\", \"2013-01-01\")\n                .put(\"opv_0\", \"2013-01-01\")\n                .put(\"hepb_0\", \"2013-01-01\")\n                .put(\"opv_1\", \"2013-01-01\")\n                .put(\"pentavalent_1\", \"2013-01-01\")\n                .put(\"opv_2\", \"2013-01-01\")\n                .put(\"pentavalent_2\", \"2013-01-01\")\n                .put(\"opv_3\", \"2013-01-01\")\n                .put(\"pentavalent_3\", \"2013-01-01\")\n                .put(\"measles\", \"2013-01-01\")\n                .put(\"je\", \"2013-01-01\")\n                .put(\"mmr\", \"2013-01-01\")\n                .put(\"dptbooster_1\", \"2013-01-01\")\n                .put(\"dptbooster_2\", \"2013-01-01\")\n                .put(\"opvbooster\", \"2013-01-01\")\n                .put(\"measlesbooster\", \"2013-01-01\")\n                .put(\"je_2\", \"2013-01-01\")\n                .map();\n        Map<String, String> vitaminADoses = EasyMap.create(\"1\", \"2013-01-01\")\n                .put(\"2\", \"2013-01-01\")\n                .map();\n        Child child = new Child(\"child id\", \"mother id\", \"bcg opv_0 hepb_0 opv_1 pentavalent_1 opv_2 pentavalent_2\", \"3.0\", \"male\")\n                .withImmunizations(immunizations)\n                .withVitaminADoses(vitaminADoses)\n                .withDateOfBirth(\"2013-01-01\");\n        Mother mother = new Mother(\"mother id\", \"ec id\", \"thayi card number 1\");\n        EligibleCouple eligibleCouple = new EligibleCouple(\"ec id\", \"123\")\n                .withCouple(\"name1\", \"name2\")\n                .withLocation(\"boregowdanakoppalu\", \"hosa_agrahara\", \"phc\")\n                .withDetails(\n                        mapOf(\"womanDOB\", \"1989-01-01\"));\n        ChildRegister expectedRegister = new ChildRegister(asList(new ChildRegisterEntry()\n                .withThayiCardNumber(\"thayi card number 1\")\n                .withWifeName(\"name1\")\n                .withHusbandName(\"name2\")\n                .withWifeDOB(\"1989-01-01\")\n                .withVillage(\"boregowdanakoppalu\")\n                .withSubCenter(\"hosa_agrahara\")\n                .withDOB(\"2013-01-01\")\n                .withImmunizations(immunizations)\n                .withVitaminADoses(vitaminADoses)));\n        when(allChildren.findAllOpenChildrenForANM(\"anm1\")).thenReturn(asList(child));\n        when(allMothers.findAll(asList(\"mother id\"))).thenReturn(asList(mother));\n        when(allEligibleCouples.findAll(asList(\"ec id\"))).thenReturn(asList(eligibleCouple));\n\n        ChildRegister register = registerService.getRegisterForANM(\"anm1\");\n\n        assertEquals(expectedRegister, register);\n    }", "signature": "void shouldGetChildRegisterForAGivenANM()", "full_signature": "@Test public void shouldGetChildRegisterForAGivenANM()", "class_method_signature": "ChildRegisterServiceTest.shouldGetChildRegisterForAGivenANM()", "testcase": true, "constructor": false, "invocations": ["map", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "create", "map", "put", "create", "withDateOfBirth", "withVitaminADoses", "withImmunizations", "withDetails", "withLocation", "withCouple", "mapOf", "asList", "withVitaminADoses", "withImmunizations", "withDOB", "withSubCenter", "withVillage", "withWifeDOB", "withHusbandName", "withWifeName", "withThayiCardNumber", "thenReturn", "when", "findAllOpenChildrenForANM", "asList", "thenReturn", "when", "findAll", "asList", "asList", "thenReturn", "when", "findAll", "asList", "asList", "getRegisterForANM", "assertEquals"]}, "focal_class": {"identifier": "ChildRegisterService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AllChildren allChildren;", "modifier": "private final", "type": "AllChildren", "declarator": "allChildren", "var_name": "allChildren"}, {"original_string": "private AllMothers allMothers;", "modifier": "private", "type": "AllMothers", "declarator": "allMothers", "var_name": "allMothers"}, {"original_string": "private final AllEligibleCouples allEligibleCouples;", "modifier": "private final", "type": "AllEligibleCouples", "declarator": "allEligibleCouples", "var_name": "allEligibleCouples"}], "methods": [{"identifier": "ChildRegisterService", "parameters": "(AllChildren allChildren,\n                                AllMothers allMothers, AllEligibleCouples allEligibleCouples)", "modifiers": "@Autowired public", "return": "", "signature": " ChildRegisterService(AllChildren allChildren,\n                                AllMothers allMothers, AllEligibleCouples allEligibleCouples)", "full_signature": "@Autowired public  ChildRegisterService(AllChildren allChildren,\n                                AllMothers allMothers, AllEligibleCouples allEligibleCouples)", "class_method_signature": "ChildRegisterService.ChildRegisterService(AllChildren allChildren,\n                                AllMothers allMothers, AllEligibleCouples allEligibleCouples)", "testcase": false, "constructor": true}, {"identifier": "getRegisterForANM", "parameters": "(String anmIdentifier)", "modifiers": "public", "return": "ChildRegister", "signature": "ChildRegister getRegisterForANM(String anmIdentifier)", "full_signature": "public ChildRegister getRegisterForANM(String anmIdentifier)", "class_method_signature": "ChildRegisterService.getRegisterForANM(String anmIdentifier)", "testcase": false, "constructor": false}], "file": "drishti-mother-child/src/main/java/org/ei/drishti/service/ChildRegisterService.java"}, "focal_method": {"identifier": "getRegisterForANM", "parameters": "(String anmIdentifier)", "modifiers": "public", "return": "ChildRegister", "body": "public ChildRegister getRegisterForANM(String anmIdentifier) {\n        ArrayList<ChildRegisterEntry> childRegisterEntries = new ArrayList<>();\n        List<Child> children = allChildren.findAllOpenChildrenForANM(anmIdentifier);\n        Collection<String> motherIds = selectDistinct(collect(children, on(Child.class).motherCaseId()));\n        List<String> motherIdsList = new ArrayList<>();\n        motherIdsList.addAll(motherIds);\n        List<Mother> mothers = allMothers.findAll(motherIdsList);\n        Collection<String> ecIDs =  selectDistinct(collect(mothers, on(Mother.class).ecCaseId()));\n        List<String> ecIdsList = new ArrayList<>();\n        ecIdsList.addAll(ecIDs);\n        List<EligibleCouple> ecs = allEligibleCouples.findAll(ecIdsList);\n        for (Child child : children) {\n            Mother mother = selectUnique(mothers,\n                    having(on(Mother.class).caseId(), equalTo(child.motherCaseId())));\n            EligibleCouple ec = selectUnique(ecs,\n                    having(on(EligibleCouple.class).caseId(), equalTo(mother.ecCaseId())));\n            ChildRegisterEntry entry = new ChildRegisterEntry()\n                    .withThayiCardNumber(mother.thayiCardNumber())\n                    .withWifeName(ec.wifeName())\n                    .withHusbandName(ec.husbandName())\n                    .withWifeDOB(ec.wifeDOB().toString())\n                    .withVillage(ec.location().village())\n                    .withSubCenter(ec.location().subCenter())\n                    .withDOB(child.dateOfBirth())\n                    .withImmunizations(child.immunizations())\n                    .withVitaminADoses(child.vitaminADoses());\n            childRegisterEntries.add(entry);\n        }\n        return new ChildRegister(childRegisterEntries);\n    }", "signature": "ChildRegister getRegisterForANM(String anmIdentifier)", "full_signature": "public ChildRegister getRegisterForANM(String anmIdentifier)", "class_method_signature": "ChildRegisterService.getRegisterForANM(String anmIdentifier)", "testcase": false, "constructor": false, "invocations": ["findAllOpenChildrenForANM", "selectDistinct", "collect", "motherCaseId", "on", "addAll", "findAll", "selectDistinct", "collect", "ecCaseId", "on", "addAll", "findAll", "selectUnique", "having", "caseId", "on", "equalTo", "motherCaseId", "selectUnique", "having", "caseId", "on", "equalTo", "ecCaseId", "withVitaminADoses", "withImmunizations", "withDOB", "withSubCenter", "withVillage", "withWifeDOB", "withHusbandName", "withWifeName", "withThayiCardNumber", "thayiCardNumber", "wifeName", "husbandName", "toString", "wifeDOB", "village", "location", "subCenter", "location", "dateOfBirth", "immunizations", "vitaminADoses", "add"]}, "repository": {"repo_id": 3263787, "url": "https://github.com/SEL-Columbia/dristhi", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 15, "size": 19905, "license": "licensed"}}