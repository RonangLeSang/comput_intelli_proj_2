{"test_class": {"identifier": "L2ProductionTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private L2ProductionType productionType;", "modifier": "private", "type": "L2ProductionType", "declarator": "productionType", "var_name": "productionType"}], "file": "calvalus-production/src/test/java/com/bc/calvalus/production/hadoop/L2ProductionTypeTest.java"}, "test_case": {"identifier": "testCreateProductionWithMinMaxDates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateProductionWithMinMaxDates() throws ProductionException, IOException {\n        ProductionRequest productionRequest = new ProductionRequest(\"L2\", \"ewa\",\n                                                                    \"inputPath\", \"MER_RR__1P/r03/${yyyy}/${MM}/${dd}\",\n                                                                    \"productionName\", \"My Math Production\",\n                                                                    \"minDate\", \"2005-01-01\",\n                                                                    \"maxDate\", \"2005-01-31\",\n                                                                    \"outputFormat\", \"NetCDF\",\n                                                                    \"autoStaging\", \"true\",\n                                                                    ProcessorProductionRequest.PROCESSOR_BUNDLE_NAME, \"beam\",\n                                                                    ProcessorProductionRequest.PROCESSOR_BUNDLE_VERSION, \"4.9-SNAPSHOT\",\n                                                                    ProcessorProductionRequest.PROCESSOR_BUNDLE_LOCATION, \"/software/test/system\",\n                                                                    ProcessorProductionRequest.PROCESSOR_NAME, \"BandMaths\",\n                                                                    ProcessorProductionRequest.PROCESSOR_PARAMETERS, \"<!-- no params -->\",\n                                                                    \"minLon\", \"5\",\n                                                                    \"maxLon\", \"25\",\n                                                                    \"minLat\", \"50\",\n                                                                    \"maxLat\", \"60\"\n        );\n\n        Production production = productionType.createProduction(productionRequest);\n        assertNotNull(production);\n        assertEquals(\"My Math Production\", production.getName());\n        assertEquals(true, production.getStagingPath().startsWith(\"ewa/\"));\n        assertEquals(true, production.getId().contains(\"_\" + \"L2\" + \"_\"));\n        WorkflowItem workflow = production.getWorkflow();\n        assertNotNull(workflow);\n        WorkflowItem[] workflowItems = workflow.getItems();\n        assertNotNull(workflowItems);\n        assertEquals(0, workflowItems.length);\n        assertTrue(workflow instanceof L2WorkflowItem);\n        L2WorkflowItem l2WorkflowItem = (L2WorkflowItem) workflow;\n        assertEquals(true,\n                     l2WorkflowItem.getOutputDir().startsWith(\"hdfs://master00:9000/calvalus/outputs/home/ewa/\"));\n        assertEquals(\"POLYGON ((5 50, 25 50, 25 60, 5 60, 5 50))\",\n                     l2WorkflowItem.getJobConfig().get(JobConfigNames.CALVALUS_REGION_GEOMETRY));\n        String inputPathPattern = l2WorkflowItem.getJobConfig().get(JobConfigNames.CALVALUS_INPUT_PATH_PATTERNS);\n        assertEquals(\"MER_RR__1P/r03/${yyyy}/${MM}/${dd}\", inputPathPattern);\n        assertEquals(\"[2005-01-01:2005-01-31]\",\n                     l2WorkflowItem.getJobConfig().get(JobConfigNames.CALVALUS_INPUT_DATE_RANGES));\n        assertEquals(\"\", l2WorkflowItem.getJobConfig().get(JobConfigNames.CALVALUS_INPUT_REGION_NAME));\n\n        ProductSetSaver productSetSaver = getProductSetSaver(l2WorkflowItem);\n        assertNotNull(productSetSaver);\n        ProductSet productSet = productSetSaver.getProductSet();\n        assertNotNull(productSet);\n        assertEquals(\"Generic-L2\", productSet.getProductType());\n        assertEquals(\"My Math Production\", productSet.getName());\n        assertEquals(\n                \"hdfs://master00:9000/calvalus/outputs/home/ewa/\" + production.getId() + \"/[^_\\\\.].*(?:${yyyy}${MM}${dd}|${yyyy}${DDD}).*\\\\.seq$\",\n                productSet.getPath());\n        assertEquals(\"2005-01-01\", ProductionRequest.getDateFormat().format(productSet.getMinDate()));\n        assertEquals(\"2005-01-31\", ProductionRequest.getDateFormat().format(productSet.getMaxDate()));\n        assertEquals(\"\", productSet.getRegionName());\n        assertEquals(\"POLYGON ((5 50, 25 50, 25 60, 5 60, 5 50))\", productSet.getRegionWKT());\n\n    }", "signature": "void testCreateProductionWithMinMaxDates()", "full_signature": "@Test public void testCreateProductionWithMinMaxDates()", "class_method_signature": "L2ProductionTypeTest.testCreateProductionWithMinMaxDates()", "testcase": true, "constructor": false, "invocations": ["createProduction", "assertNotNull", "assertEquals", "getName", "assertEquals", "startsWith", "getStagingPath", "assertEquals", "contains", "getId", "getWorkflow", "assertNotNull", "getItems", "assertNotNull", "assertEquals", "assertTrue", "assertEquals", "startsWith", "getOutputDir", "assertEquals", "get", "getJobConfig", "get", "getJobConfig", "assertEquals", "assertEquals", "get", "getJobConfig", "assertEquals", "get", "getJobConfig", "getProductSetSaver", "assertNotNull", "getProductSet", "assertNotNull", "assertEquals", "getProductType", "assertEquals", "getName", "assertEquals", "getId", "getPath", "assertEquals", "format", "getDateFormat", "getMinDate", "assertEquals", "format", "getDateFormat", "getMaxDate", "assertEquals", "getRegionName", "assertEquals", "getRegionWKT"]}, "focal_class": {"identifier": "L2ProductionType", "superclass": "extends HadoopProductionType", "interfaces": "", "fields": [], "methods": [{"identifier": "L2ProductionType", "parameters": "(FileSystemService fileSystemService, HadoopProcessingService processingService,\n                     StagingService stagingService)", "modifiers": "", "return": "", "signature": " L2ProductionType(FileSystemService fileSystemService, HadoopProcessingService processingService,\n                     StagingService stagingService)", "full_signature": "  L2ProductionType(FileSystemService fileSystemService, HadoopProcessingService processingService,\n                     StagingService stagingService)", "class_method_signature": "L2ProductionType.L2ProductionType(FileSystemService fileSystemService, HadoopProcessingService processingService,\n                     StagingService stagingService)", "testcase": false, "constructor": true}, {"identifier": "createProduction", "parameters": "(ProductionRequest productionRequest)", "modifiers": "@Override public", "return": "Production", "signature": "Production createProduction(ProductionRequest productionRequest)", "full_signature": "@Override public Production createProduction(ProductionRequest productionRequest)", "class_method_signature": "L2ProductionType.createProduction(ProductionRequest productionRequest)", "testcase": false, "constructor": false}, {"identifier": "createUnsubmittedStaging", "parameters": "(Production production)", "modifiers": "@Override protected", "return": "Staging", "signature": "Staging createUnsubmittedStaging(Production production)", "full_signature": "@Override protected Staging createUnsubmittedStaging(Production production)", "class_method_signature": "L2ProductionType.createUnsubmittedStaging(Production production)", "testcase": false, "constructor": false}, {"identifier": "createWorkflowItem", "parameters": "(String productionId,\n                                      String productionName,\n                                      ProductionRequest productionRequest)", "modifiers": "", "return": "L2WorkflowItem", "signature": "L2WorkflowItem createWorkflowItem(String productionId,\n                                      String productionName,\n                                      ProductionRequest productionRequest)", "full_signature": " L2WorkflowItem createWorkflowItem(String productionId,\n                                      String productionName,\n                                      ProductionRequest productionRequest)", "class_method_signature": "L2ProductionType.createWorkflowItem(String productionId,\n                                      String productionName,\n                                      ProductionRequest productionRequest)", "testcase": false, "constructor": false}, {"identifier": "getResultingProductionType", "parameters": "(ProcessorDescriptor processorDescriptor)", "modifiers": "static", "return": "String", "signature": "String getResultingProductionType(ProcessorDescriptor processorDescriptor)", "full_signature": "static String getResultingProductionType(ProcessorDescriptor processorDescriptor)", "class_method_signature": "L2ProductionType.getResultingProductionType(ProcessorDescriptor processorDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getResultingBandNames", "parameters": "(ProcessorDescriptor processorDescriptor)", "modifiers": "static", "return": "String[]", "signature": "String[] getResultingBandNames(ProcessorDescriptor processorDescriptor)", "full_signature": "static String[] getResultingBandNames(ProcessorDescriptor processorDescriptor)", "class_method_signature": "L2ProductionType.getResultingBandNames(ProcessorDescriptor processorDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getPathPatternForProcessingResult", "parameters": "(ProcessorDescriptor processorDescriptor)", "modifiers": "static", "return": "String", "signature": "String getPathPatternForProcessingResult(ProcessorDescriptor processorDescriptor)", "full_signature": "static String getPathPatternForProcessingResult(ProcessorDescriptor processorDescriptor)", "class_method_signature": "L2ProductionType.getPathPatternForProcessingResult(ProcessorDescriptor processorDescriptor)", "testcase": false, "constructor": false}], "file": "calvalus-production/src/main/java/com/bc/calvalus/production/hadoop/L2ProductionType.java"}, "focal_method": {"identifier": "createProduction", "parameters": "(ProductionRequest productionRequest)", "modifiers": "@Override public", "return": "Production", "body": "@Override\n    public Production createProduction(ProductionRequest productionRequest) throws ProductionException {\n        final String productionId = Production.createId(productionRequest.getProductionType());\n        final String productionName = productionRequest.getProductionName(\n                createProductionName(\"Level 2 \", productionRequest));\n\n        L2WorkflowItem workflowItem = createWorkflowItem(productionId, productionName, productionRequest);\n\n        // todo - if autoStaging=true, create sequential workflow and add staging job\n        String stagingDir = productionRequest.getStagingDirectory(productionId);\n        boolean autoStaging = productionRequest.isAutoStaging();\n        return new Production(productionId,\n                              productionName,\n                              workflowItem.getOutputDir(),\n                              stagingDir,\n                              autoStaging,\n                              productionRequest,\n                              workflowItem);\n    }", "signature": "Production createProduction(ProductionRequest productionRequest)", "full_signature": "@Override public Production createProduction(ProductionRequest productionRequest)", "class_method_signature": "L2ProductionType.createProduction(ProductionRequest productionRequest)", "testcase": false, "constructor": false, "invocations": ["createId", "getProductionType", "getProductionName", "createProductionName", "createWorkflowItem", "getStagingDirectory", "isAutoStaging", "getOutputDir"]}, "repository": {"repo_id": 542927, "url": "https://github.com/bcdev/calvalus2", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 12, "size": 126408, "license": "licensed"}}