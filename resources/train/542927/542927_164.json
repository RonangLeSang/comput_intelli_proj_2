{"test_class": {"identifier": "AccumulatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "calvalus-processing/src/test/java/com/bc/calvalus/processing/ra/stat/AccumulatorTest.java"}, "test_case": {"identifier": "testAccumulateNoNaN", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccumulateNoNaN() throws Exception {\n        Accumulator acc = new Accumulator();\n\n        acc.accumulateNoNaN(Float.NaN, Float.NaN);\n        assertArrayEquals(new float[0], acc.getValues(), 1E-5f);\n        \n        acc.accumulateNoNaN(1, Float.NaN, 2, 3);\n        assertArrayEquals(new float[]{1, 2, 3}, acc.getValues(), 1E-5f);\n    }", "signature": "void testAccumulateNoNaN()", "full_signature": "@Test public void testAccumulateNoNaN()", "class_method_signature": "AccumulatorTest.testAccumulateNoNaN()", "testcase": true, "constructor": false, "invocations": ["accumulateNoNaN", "assertArrayEquals", "getValues", "accumulateNoNaN", "assertArrayEquals", "getValues"]}, "focal_class": {"identifier": "Accumulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private float[] values;", "modifier": "private", "type": "float[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "Accumulator", "parameters": "()", "modifiers": "public", "return": "", "signature": " Accumulator()", "full_signature": "public  Accumulator()", "class_method_signature": "Accumulator.Accumulator()", "testcase": false, "constructor": true}, {"identifier": "accumulateNoNaN", "parameters": "(float... samples)", "modifiers": "public", "return": "void", "signature": "void accumulateNoNaN(float... samples)", "full_signature": "public void accumulateNoNaN(float... samples)", "class_method_signature": "Accumulator.accumulateNoNaN(float... samples)", "testcase": false, "constructor": false}, {"identifier": "accumulate", "parameters": "(float... samples)", "modifiers": "public", "return": "void", "signature": "void accumulate(float... samples)", "full_signature": "public void accumulate(float... samples)", "class_method_signature": "Accumulator.accumulate(float... samples)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clear()", "full_signature": " void clear()", "class_method_signature": "Accumulator.clear()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "float[]", "signature": "float[] getValues()", "full_signature": "public float[] getValues()", "class_method_signature": "Accumulator.getValues()", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(float[] a1, float[] a2, int a2Length)", "modifiers": "private static", "return": "float[]", "signature": "float[] concat(float[] a1, float[] a2, int a2Length)", "full_signature": "private static float[] concat(float[] a1, float[] a2, int a2Length)", "class_method_signature": "Accumulator.concat(float[] a1, float[] a2, int a2Length)", "testcase": false, "constructor": false}], "file": "calvalus-processing/src/main/java/com/bc/calvalus/processing/ra/stat/Accumulator.java"}, "focal_method": {"identifier": "accumulateNoNaN", "parameters": "(float... samples)", "modifiers": "public", "return": "void", "body": "public void accumulateNoNaN(float... samples) {\n        float[] buffer = new float[samples.length];\n        int i = 0;\n        for (float sample : samples) {\n            if (!Float.isNaN(sample)) {\n                buffer[i++] = sample;\n            }\n        }\n        if (i > 0) {\n            values = concat(values, buffer, i);\n        }\n    }", "signature": "void accumulateNoNaN(float... samples)", "full_signature": "public void accumulateNoNaN(float... samples)", "class_method_signature": "Accumulator.accumulateNoNaN(float... samples)", "testcase": false, "constructor": false, "invocations": ["isNaN", "concat"]}, "repository": {"repo_id": 542927, "url": "https://github.com/bcdev/calvalus2", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 12, "size": 126408, "license": "licensed"}}