{"test_class": {"identifier": "WorkflowTest", "superclass": "", "interfaces": "", "fields": [], "file": "calvalus-commons/src/test/java/com/bc/calvalus/commons/WorkflowTest.java"}, "test_case": {"identifier": "testMixed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMixed() throws Exception {\n\n        Workflow.Sequential wf = new Workflow.Sequential();\n        LifeStepWorkflowItem job1 = new LifeStepWorkflowItem();\n        LifeStepWorkflowItem job2 = new LifeStepWorkflowItem();\n        LifeStepWorkflowItem job3 = new LifeStepWorkflowItem();\n        LifeStepWorkflowItem job4 = new LifeStepWorkflowItem();\n\n        Workflow.Parallel wfp = new Workflow.Parallel();\n        wfp.add(job1, job2);\n        Workflow.Sequential wfs = new Workflow.Sequential();\n        wfs.add(job3, job4);\n        wf.add(wfp, wfs);\n\n        wf.submit();\n        assertEquals(ProcessState.UNKNOWN, job1.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job2.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job3.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job4.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, wfp.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, wfs.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, wf.getStatus().getState());\n\n        incLifeStep(job1, job2, job3, job4);\n        assertEquals(ProcessState.SCHEDULED, job1.getStatus().getState());\n        assertEquals(ProcessState.SCHEDULED, job2.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job3.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job4.getStatus().getState());\n        assertEquals(ProcessState.SCHEDULED, wfp.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, wfs.getStatus().getState());\n        assertEquals(ProcessState.SCHEDULED, wf.getStatus().getState());\n\n        incLifeStep(job1, job2, job3, job4);\n        assertEquals(ProcessState.RUNNING, job1.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, job2.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job3.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job4.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wfp.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, wfs.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wf.getStatus().getState());\n\n        incLifeStep(job1, job2, job3, job4);\n        assertEquals(ProcessState.COMPLETED, job1.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job2.getStatus().getState());\n        assertEquals(ProcessState.SCHEDULED, job3.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job4.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wfp.getStatus().getState());\n        assertEquals(ProcessState.SCHEDULED, wfs.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wf.getStatus().getState());\n\n        incLifeStep(job1, job2, job3, job4);\n        assertEquals(ProcessState.COMPLETED, job1.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job2.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, job3.getStatus().getState());\n        assertEquals(ProcessState.UNKNOWN, job4.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wfp.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wfs.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wf.getStatus().getState());\n\n        incLifeStep(job1, job2, job3, job4);\n        assertEquals(ProcessState.COMPLETED, job1.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job2.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job3.getStatus().getState());\n        assertEquals(ProcessState.SCHEDULED, job4.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wfp.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wfs.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wf.getStatus().getState());\n\n        incLifeStep(job1, job2, job3, job4);\n        assertEquals(ProcessState.COMPLETED, job1.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job2.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job3.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, job4.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wfp.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wfs.getStatus().getState());\n        assertEquals(ProcessState.RUNNING, wf.getStatus().getState());\n\n        incLifeStep(job1, job2, job3, job4);\n        assertEquals(ProcessState.COMPLETED, job1.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job2.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job3.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job4.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wfp.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wfs.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wf.getStatus().getState());\n\n        incLifeStep(job1, job2, job3, job4);\n        assertEquals(ProcessState.COMPLETED, job1.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job2.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job3.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, job4.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wfp.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wfs.getStatus().getState());\n        assertEquals(ProcessState.COMPLETED, wf.getStatus().getState());\n\n        assertEquals(1, job1.getSubmitCount());\n        assertEquals(1, job2.getSubmitCount());\n        assertEquals(1, job3.getSubmitCount());\n        assertEquals(1, job4.getSubmitCount());\n    }", "signature": "void testMixed()", "full_signature": "@Test public void testMixed()", "class_method_signature": "WorkflowTest.testMixed()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "submit", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "incLifeStep", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "incLifeStep", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "incLifeStep", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "incLifeStep", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "incLifeStep", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "incLifeStep", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "incLifeStep", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "incLifeStep", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getState", "getStatus", "assertEquals", "getSubmitCount", "assertEquals", "getSubmitCount", "assertEquals", "getSubmitCount", "assertEquals", "getSubmitCount"]}, "focal_class": {"identifier": "Workflow", "superclass": "extends AbstractWorkflowItem", "interfaces": "implements WorkflowStatusListener", "fields": [{"original_string": "protected final List<WorkflowItem> itemList;", "modifier": "protected final", "type": "List<WorkflowItem>", "declarator": "itemList", "var_name": "itemList"}, {"original_string": "private boolean sustainable;", "modifier": "private", "type": "boolean", "declarator": "sustainable", "var_name": "sustainable"}], "methods": [{"identifier": "Workflow", "parameters": "(WorkflowItem... items)", "modifiers": "protected", "return": "", "signature": " Workflow(WorkflowItem... items)", "full_signature": "protected  Workflow(WorkflowItem... items)", "class_method_signature": "Workflow.Workflow(WorkflowItem... items)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(WorkflowItem... items)", "modifiers": "public", "return": "void", "signature": "void add(WorkflowItem... items)", "full_signature": "public void add(WorkflowItem... items)", "class_method_signature": "Workflow.add(WorkflowItem... items)", "testcase": false, "constructor": false}, {"identifier": "isSustainable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSustainable()", "full_signature": "public boolean isSustainable()", "class_method_signature": "Workflow.isSustainable()", "testcase": false, "constructor": false}, {"identifier": "setSustainable", "parameters": "(boolean sustainable)", "modifiers": "public", "return": "void", "signature": "void setSustainable(boolean sustainable)", "full_signature": "public void setSustainable(boolean sustainable)", "class_method_signature": "Workflow.setSustainable(boolean sustainable)", "testcase": false, "constructor": false}, {"identifier": "kill", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void kill()", "full_signature": "@Override public void kill()", "class_method_signature": "Workflow.kill()", "testcase": false, "constructor": false}, {"identifier": "updateStatus", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void updateStatus()", "full_signature": "@Override public void updateStatus()", "class_method_signature": "Workflow.updateStatus()", "testcase": false, "constructor": false}, {"identifier": "handleStatusChanged", "parameters": "(WorkflowStatusEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void handleStatusChanged(WorkflowStatusEvent event)", "full_signature": "@Override public void handleStatusChanged(WorkflowStatusEvent event)", "class_method_signature": "Workflow.handleStatusChanged(WorkflowStatusEvent event)", "testcase": false, "constructor": false}, {"identifier": "aggregateChildInformation", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void aggregateChildInformation()", "full_signature": "private void aggregateChildInformation()", "class_method_signature": "Workflow.aggregateChildInformation()", "testcase": false, "constructor": false}, {"identifier": "getJobIds", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getJobIds()", "full_signature": "@Override public Object[] getJobIds()", "class_method_signature": "Workflow.getJobIds()", "testcase": false, "constructor": false}, {"identifier": "getItems", "parameters": "()", "modifiers": "@Override public", "return": "WorkflowItem[]", "signature": "WorkflowItem[] getItems()", "full_signature": "@Override public WorkflowItem[] getItems()", "class_method_signature": "Workflow.getItems()", "testcase": false, "constructor": false}], "file": "calvalus-commons/src/main/java/com/bc/calvalus/commons/Workflow.java"}, "focal_method": {"identifier": "add", "parameters": "(WorkflowItem... items)", "modifiers": "public", "return": "void", "body": "public void add(WorkflowItem... items) {\n        for (WorkflowItem item : items) {\n            item.addWorkflowStatusListener(this);\n        }\n        itemList.addAll(Arrays.asList(items));\n        if (!itemList.isEmpty()) {\n            aggregateChildInformation();\n        }\n    }", "signature": "void add(WorkflowItem... items)", "full_signature": "public void add(WorkflowItem... items)", "class_method_signature": "Workflow.add(WorkflowItem... items)", "testcase": false, "constructor": false, "invocations": ["addWorkflowStatusListener", "addAll", "asList", "isEmpty", "aggregateChildInformation"]}, "repository": {"repo_id": 542927, "url": "https://github.com/bcdev/calvalus2", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 12, "size": 126408, "license": "licensed"}}