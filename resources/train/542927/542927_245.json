{"test_class": {"identifier": "MosaicTileHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DummyMosaicTileHandler tileHandler;", "modifier": "private", "type": "DummyMosaicTileHandler", "declarator": "tileHandler", "var_name": "tileHandler"}, {"original_string": "private MosaicGrid mosaicGrid;", "modifier": "private", "type": "MosaicGrid", "declarator": "mosaicGrid", "var_name": "mosaicGrid"}], "file": "calvalus-processing/src/test/java/com/bc/calvalus/processing/mosaic/MosaicTileHandlerTest.java"}, "test_case": {"identifier": "testCreateTileIndices", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateTileIndices() throws Exception {\n        Point[] tileIndices = tileHandler.createTileIndices(mosaicGrid.getMacroTileSize());\n        assertNotNull(tileIndices);\n        assertEquals(9, tileIndices.length);\n        assertEquals(new Point(0, 0), tileIndices[0]);\n        assertEquals(new Point(1, 0), tileIndices[1]);\n        assertEquals(new Point(2, 0), tileIndices[2]);\n        assertEquals(new Point(0, 1), tileIndices[3]);\n        assertEquals(new Point(1, 1), tileIndices[4]);\n        assertEquals(new Point(2, 1), tileIndices[5]);\n        assertEquals(new Point(2, 2), tileIndices[8]);\n\n    }", "signature": "void testCreateTileIndices()", "full_signature": "@Test public void testCreateTileIndices()", "class_method_signature": "MosaicTileHandlerTest.testCreateTileIndices()", "testcase": true, "constructor": false, "invocations": ["createTileIndices", "getMacroTileSize", "assertNotNull", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "MosaicTileHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MosaicGrid mosaicGrid;", "modifier": "private final", "type": "MosaicGrid", "declarator": "mosaicGrid", "var_name": "mosaicGrid"}, {"original_string": "private final Point[] indices;", "modifier": "private final", "type": "Point[]", "declarator": "indices", "var_name": "indices"}, {"original_string": "private Point currentMacroTile = null;", "modifier": "private", "type": "Point", "declarator": "currentMacroTile = null", "var_name": "currentMacroTile"}, {"original_string": "private Point currentTile = null;", "modifier": "private", "type": "Point", "declarator": "currentTile = null", "var_name": "currentTile"}], "methods": [{"identifier": "MosaicTileHandler", "parameters": "(MosaicGrid mosaicGrid)", "modifiers": "public", "return": "", "signature": " MosaicTileHandler(MosaicGrid mosaicGrid)", "full_signature": "public  MosaicTileHandler(MosaicGrid mosaicGrid)", "class_method_signature": "MosaicTileHandler.MosaicTileHandler(MosaicGrid mosaicGrid)", "testcase": false, "constructor": true}, {"identifier": "handleTile", "parameters": "(TileIndexWritable key, TileDataWritable data)", "modifiers": "public", "return": "void", "signature": "void handleTile(TileIndexWritable key, TileDataWritable data)", "full_signature": "public void handleTile(TileIndexWritable key, TileDataWritable data)", "class_method_signature": "MosaicTileHandler.handleTile(TileIndexWritable key, TileDataWritable data)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "MosaicTileHandler.close()", "testcase": false, "constructor": false}, {"identifier": "writeNaNTiles", "parameters": "(Point start, Point stop)", "modifiers": "private", "return": "void", "signature": "void writeNaNTiles(Point start, Point stop)", "full_signature": "private void writeNaNTiles(Point start, Point stop)", "class_method_signature": "MosaicTileHandler.writeNaNTiles(Point start, Point stop)", "testcase": false, "constructor": false}, {"identifier": "getRelativeTileIndex", "parameters": "(TileIndexWritable key)", "modifiers": "", "return": "Point", "signature": "Point getRelativeTileIndex(TileIndexWritable key)", "full_signature": " Point getRelativeTileIndex(TileIndexWritable key)", "class_method_signature": "MosaicTileHandler.getRelativeTileIndex(TileIndexWritable key)", "testcase": false, "constructor": false}, {"identifier": "getCurrentMacroTile", "parameters": "()", "modifiers": "", "return": "Point", "signature": "Point getCurrentMacroTile()", "full_signature": " Point getCurrentMacroTile()", "class_method_signature": "MosaicTileHandler.getCurrentMacroTile()", "testcase": false, "constructor": false}, {"identifier": "getMosaicGrid", "parameters": "()", "modifiers": "", "return": "MosaicGrid", "signature": "MosaicGrid getMosaicGrid()", "full_signature": " MosaicGrid getMosaicGrid()", "class_method_signature": "MosaicTileHandler.getMosaicGrid()", "testcase": false, "constructor": false}, {"identifier": "getMissingTileIndices", "parameters": "(Point start, Point stop)", "modifiers": "", "return": "Point[]", "signature": "Point[] getMissingTileIndices(Point start, Point stop)", "full_signature": " Point[] getMissingTileIndices(Point start, Point stop)", "class_method_signature": "MosaicTileHandler.getMissingTileIndices(Point start, Point stop)", "testcase": false, "constructor": false}, {"identifier": "createTileIndices", "parameters": "(int macroTileSize)", "modifiers": "static", "return": "Point[]", "signature": "Point[] createTileIndices(int macroTileSize)", "full_signature": "static Point[] createTileIndices(int macroTileSize)", "class_method_signature": "MosaicTileHandler.createTileIndices(int macroTileSize)", "testcase": false, "constructor": false}, {"identifier": "createProduct", "parameters": "(Point macroTile)", "modifiers": "protected abstract", "return": "void", "signature": "void createProduct(Point macroTile)", "full_signature": "protected abstract void createProduct(Point macroTile)", "class_method_signature": "MosaicTileHandler.createProduct(Point macroTile)", "testcase": false, "constructor": false}, {"identifier": "writeDataTile", "parameters": "(Point tile, TileDataWritable data)", "modifiers": "protected abstract", "return": "void", "signature": "void writeDataTile(Point tile, TileDataWritable data)", "full_signature": "protected abstract void writeDataTile(Point tile, TileDataWritable data)", "class_method_signature": "MosaicTileHandler.writeDataTile(Point tile, TileDataWritable data)", "testcase": false, "constructor": false}, {"identifier": "writeNaNTile", "parameters": "(Point tile)", "modifiers": "protected abstract", "return": "void", "signature": "void writeNaNTile(Point tile)", "full_signature": "protected abstract void writeNaNTile(Point tile)", "class_method_signature": "MosaicTileHandler.writeNaNTile(Point tile)", "testcase": false, "constructor": false}, {"identifier": "finishProduct", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void finishProduct()", "full_signature": "protected abstract void finishProduct()", "class_method_signature": "MosaicTileHandler.finishProduct()", "testcase": false, "constructor": false}], "file": "calvalus-processing/src/main/java/com/bc/calvalus/processing/mosaic/MosaicTileHandler.java"}, "focal_method": {"identifier": "createTileIndices", "parameters": "(int macroTileSize)", "modifiers": "static", "return": "Point[]", "body": "static Point[] createTileIndices(int macroTileSize) {\n        Point[] indices = new Point[macroTileSize * macroTileSize];\n        int index = 0;\n        for (int y = 0; y < macroTileSize; y++) {\n            for (int x = 0; x < macroTileSize; x++) {\n                indices[index++] = new Point(x, y);\n            }\n        }\n        return indices;\n    }", "signature": "Point[] createTileIndices(int macroTileSize)", "full_signature": "static Point[] createTileIndices(int macroTileSize)", "class_method_signature": "MosaicTileHandler.createTileIndices(int macroTileSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 542927, "url": "https://github.com/bcdev/calvalus2", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 12, "size": 126408, "license": "licensed"}}