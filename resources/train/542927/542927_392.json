{"test_class": {"identifier": "ExecuteRequestExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecuteRequestExtractor requestExtractor;", "modifier": "private", "type": "ExecuteRequestExtractor", "declarator": "requestExtractor", "var_name": "requestExtractor"}, {"original_string": "@Rule\n    public ExpectedException thrownException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrownException = ExpectedException.none()", "var_name": "thrownException"}], "file": "calvalus-wps-impl/src/test/java/com/bc/calvalus/wps/utils/ExecuteRequestExtractorTest.java"}, "test_case": {"identifier": "canGetParameterMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canGetParameterMap() throws Exception {\n        String executeRequestString = getExecuteRequestString();\n        InputStream requestInputStream = new ByteArrayInputStream(executeRequestString.getBytes());\n        Execute execute = (Execute) JaxbHelper.unmarshal(requestInputStream, new ObjectFactory());\n\n        requestExtractor = new ExecuteRequestExtractor(execute);\n\n        Map<String, String> parameterMap = requestExtractor.getInputParametersMapRaw();\n\n        assertThat(parameterMap.get(\"doAtmosphericCorrection\"), equalTo(\"true\"));\n        assertThat(parameterMap.get(\"outputTosa\"), equalTo(\"false\"));\n        assertThat(parameterMap.get(\"outputTransmittance\"), equalTo(\"false\"));\n        assertThat(parameterMap.get(\"calvalus.l3.parameters\"), equalTo(\"<parameters>\\n\" +\n                                                                       \"<planetaryGrid>org.esa.beam.binning.support.PlateCarreeGrid</planetaryGrid>\\n\" +\n                                                                       \"<numRows>21600</numRows>\\n\" +\n                                                                       \"<compositingType>MOSAICKING</compositingType>\\n\" +\n                                                                       \"<superSampling>1</superSampling>\\n\" +\n                                                                       \"<maskExpr>!case2_flags.INVALID</maskExpr>\\n\" +\n                                                                       \"<aggregators>\\n\" +\n                                                                       \"<aggregator>\\n\" +\n                                                                       \"<type>AVG</type>\\n\" +\n                                                                       \"<varName>tsm</varName>\\n\" +\n                                                                       \"</aggregator>\\n\" +\n                                                                       \"<aggregator>\\n\" +\n                                                                       \"<type>MIN_MAX</type>\\n\" +\n                                                                       \"<varName>chl_conc</varName>\\n\" +\n                                                                       \"</aggregator>\\n\" +\n                                                                       \"<aggregator>\\n\" +\n                                                                       \"<type>AVG</type>\\n\" +\n                                                                       \"<varName>Z90_max</varName>\\n\" +\n                                                                       \"</aggregator>\\n\" +\n                                                                       \"</aggregators>\\n\" +\n                                                                       \"</parameters>\"));\n\n    }", "signature": "void canGetParameterMap()", "full_signature": "@Test public void canGetParameterMap()", "class_method_signature": "ExecuteRequestExtractorTest.canGetParameterMap()", "testcase": true, "constructor": false, "invocations": ["getExecuteRequestString", "getBytes", "unmarshal", "getInputParametersMapRaw", "assertThat", "get", "equalTo", "assertThat", "get", "equalTo", "assertThat", "get", "equalTo", "assertThat", "get", "equalTo"]}, "focal_class": {"identifier": "ExecuteRequestExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, String> inputParametersMapRaw;", "modifier": "private final", "type": "Map<String, String>", "declarator": "inputParametersMapRaw", "var_name": "inputParametersMapRaw"}], "methods": [{"identifier": "ExecuteRequestExtractor", "parameters": "(Execute execute)", "modifiers": "public", "return": "", "signature": " ExecuteRequestExtractor(Execute execute)", "full_signature": "public  ExecuteRequestExtractor(Execute execute)", "class_method_signature": "ExecuteRequestExtractor.ExecuteRequestExtractor(Execute execute)", "testcase": false, "constructor": true}, {"identifier": "getInputParametersMapRaw", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getInputParametersMapRaw()", "full_signature": "public Map<String, String> getInputParametersMapRaw()", "class_method_signature": "ExecuteRequestExtractor.getInputParametersMapRaw()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String parameterName)", "modifiers": "public", "return": "String", "signature": "String getValue(String parameterName)", "full_signature": "public String getValue(String parameterName)", "class_method_signature": "ExecuteRequestExtractor.getValue(String parameterName)", "testcase": false, "constructor": false}, {"identifier": "extractInputParameters", "parameters": "(Execute execute)", "modifiers": "private", "return": "void", "signature": "void extractInputParameters(Execute execute)", "full_signature": "private void extractInputParameters(Execute execute)", "class_method_signature": "ExecuteRequestExtractor.extractInputParameters(Execute execute)", "testcase": false, "constructor": false}, {"identifier": "extractDataInputValue", "parameters": "(InputType dataInput)", "modifiers": "private", "return": "String", "signature": "String extractDataInputValue(InputType dataInput)", "full_signature": "private String extractDataInputValue(InputType dataInput)", "class_method_signature": "ExecuteRequestExtractor.extractDataInputValue(InputType dataInput)", "testcase": false, "constructor": false}, {"identifier": "extractL3Parameters", "parameters": "(L3Parameters l3Parameters)", "modifiers": "private", "return": "void", "signature": "void extractL3Parameters(L3Parameters l3Parameters)", "full_signature": "private void extractL3Parameters(L3Parameters l3Parameters)", "class_method_signature": "ExecuteRequestExtractor.extractL3Parameters(L3Parameters l3Parameters)", "testcase": false, "constructor": false}, {"identifier": "extractRAConfig", "parameters": "(RAConfig raConfig)", "modifiers": "private", "return": "void", "signature": "void extractRAConfig(RAConfig raConfig)", "full_signature": "private void extractRAConfig(RAConfig raConfig)", "class_method_signature": "ExecuteRequestExtractor.extractRAConfig(RAConfig raConfig)", "testcase": false, "constructor": false}, {"identifier": "getL3ParametersStream", "parameters": "(Node elementNS)", "modifiers": "private", "return": "InputStream", "signature": "InputStream getL3ParametersStream(Node elementNS)", "full_signature": "private InputStream getL3ParametersStream(Node elementNS)", "class_method_signature": "ExecuteRequestExtractor.getL3ParametersStream(Node elementNS)", "testcase": false, "constructor": false}], "file": "calvalus-wps-impl/src/main/java/com/bc/calvalus/wps/utils/ExecuteRequestExtractor.java"}, "focal_method": {"identifier": "getInputParametersMapRaw", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "body": "public Map<String, String> getInputParametersMapRaw() {\n        return inputParametersMapRaw;\n    }", "signature": "Map<String, String> getInputParametersMapRaw()", "full_signature": "public Map<String, String> getInputParametersMapRaw()", "class_method_signature": "ExecuteRequestExtractor.getInputParametersMapRaw()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 542927, "url": "https://github.com/bcdev/calvalus2", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 12, "size": 126408, "license": "licensed"}}