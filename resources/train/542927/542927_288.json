{"test_class": {"identifier": "RecordAggregatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "calvalus-processing/src/test/java/com/bc/calvalus/processing/ma/RecordAggregatorTest.java"}, "test_case": {"identifier": "testOneElementAggregationAllInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOneElementAggregationAllInvalid() throws Exception {\n        int maskAttributeIndex = 6;\n        float[] value5 = {1.1F};\n        int[] value6 = {64};\n        int[] mask = {0};\n        Record aggregatedRecord = new RecordAggregator(maskAttributeIndex, 1.5).transform(\n                createDataRecord(value5, value6, mask));  // = mask (INVALID now)\n        assertNotNull(aggregatedRecord);\n\n        testFirst4Values(aggregatedRecord);\n\n        Object v5 = aggregatedRecord.getAttributeValues()[4];\n        assertEquals(Float.class, v5.getClass());\n        Float a5 = (Float) v5;\n        assertTrue(Float.isNaN(a5));\n\n        Object v6 = aggregatedRecord.getAttributeValues()[5];\n        assertEquals(null, v6);\n\n        Object v7 = aggregatedRecord.getAttributeValues()[6];\n        assertEquals(Integer.class, v7.getClass());\n        assertEquals(0, v7);\n    }", "signature": "void testOneElementAggregationAllInvalid()", "full_signature": "@Test public void testOneElementAggregationAllInvalid()", "class_method_signature": "RecordAggregatorTest.testOneElementAggregationAllInvalid()", "testcase": true, "constructor": false, "invocations": ["transform", "createDataRecord", "assertNotNull", "testFirst4Values", "getAttributeValues", "assertEquals", "getClass", "assertTrue", "isNaN", "getAttributeValues", "assertEquals", "getAttributeValues", "assertEquals", "getClass", "assertEquals"]}, "focal_class": {"identifier": "RecordAggregator", "superclass": "", "interfaces": "implements RecordTransformer", "fields": [{"original_string": "private final int maskAttributeIndex;", "modifier": "private final", "type": "int", "declarator": "maskAttributeIndex", "var_name": "maskAttributeIndex"}, {"original_string": "private final double filteredMeanCoeff;", "modifier": "private final", "type": "double", "declarator": "filteredMeanCoeff", "var_name": "filteredMeanCoeff"}], "methods": [{"identifier": "create", "parameters": "(Header header, double filteredMeanCoeff)", "modifiers": "public static", "return": "RecordTransformer", "signature": "RecordTransformer create(Header header, double filteredMeanCoeff)", "full_signature": "public static RecordTransformer create(Header header, double filteredMeanCoeff)", "class_method_signature": "RecordAggregator.create(Header header, double filteredMeanCoeff)", "testcase": false, "constructor": false}, {"identifier": "RecordAggregator", "parameters": "(int maskAttributeIndex, double filteredMeanCoeff)", "modifiers": "", "return": "", "signature": " RecordAggregator(int maskAttributeIndex, double filteredMeanCoeff)", "full_signature": "  RecordAggregator(int maskAttributeIndex, double filteredMeanCoeff)", "class_method_signature": "RecordAggregator.RecordAggregator(int maskAttributeIndex, double filteredMeanCoeff)", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(Iterable<Record> recordIterable)", "modifiers": "@Override public", "return": "Iterable<Record>", "signature": "Iterable<Record> transform(Iterable<Record> recordIterable)", "full_signature": "@Override public Iterable<Record> transform(Iterable<Record> recordIterable)", "class_method_signature": "RecordAggregator.transform(Iterable<Record> recordIterable)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Record record)", "modifiers": "public", "return": "Record", "signature": "Record transform(Record record)", "full_signature": "public Record transform(Record record)", "class_method_signature": "RecordAggregator.transform(Record record)", "testcase": false, "constructor": false}, {"identifier": "getMaskValues", "parameters": "(Object[] attributeValues)", "modifiers": "private", "return": "int[]", "signature": "int[] getMaskValues(Object[] attributeValues)", "full_signature": "private int[] getMaskValues(Object[] attributeValues)", "class_method_signature": "RecordAggregator.getMaskValues(Object[] attributeValues)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(int[] values, int[] maskValues)", "modifiers": "private", "return": "Number", "signature": "Number aggregate(int[] values, int[] maskValues)", "full_signature": "private Number aggregate(int[] values, int[] maskValues)", "class_method_signature": "RecordAggregator.aggregate(int[] values, int[] maskValues)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(float[] values, int[] maskValues)", "modifiers": "private", "return": "Number", "signature": "Number aggregate(float[] values, int[] maskValues)", "full_signature": "private Number aggregate(float[] values, int[] maskValues)", "class_method_signature": "RecordAggregator.aggregate(float[] values, int[] maskValues)", "testcase": false, "constructor": false}, {"identifier": "isGoodPixel", "parameters": "(int[] maskValues, int i)", "modifiers": "private static", "return": "boolean", "signature": "boolean isGoodPixel(int[] maskValues, int i)", "full_signature": "private static boolean isGoodPixel(int[] maskValues, int i)", "class_method_signature": "RecordAggregator.isGoodPixel(int[] maskValues, int i)", "testcase": false, "constructor": false}, {"identifier": "getCommonArrayValueLength", "parameters": "(Object[] attributeValues)", "modifiers": "private static", "return": "int", "signature": "int getCommonArrayValueLength(Object[] attributeValues)", "full_signature": "private static int getCommonArrayValueLength(Object[] attributeValues)", "class_method_signature": "RecordAggregator.getCommonArrayValueLength(Object[] attributeValues)", "testcase": false, "constructor": false}], "file": "calvalus-processing/src/main/java/com/bc/calvalus/processing/ma/RecordAggregator.java"}, "focal_method": {"identifier": "transform", "parameters": "(Iterable<Record> recordIterable)", "modifiers": "@Override public", "return": "Iterable<Record>", "body": "@Override\n    public Iterable<Record> transform(Iterable<Record> recordIterable) {\n        return new Iterable<Record>() {\n            @Override\n            public Iterator<Record> iterator() {\n                return new RecIt(recordIterable.iterator());\n            }\n        };\n    }", "signature": "Iterable<Record> transform(Iterable<Record> recordIterable)", "full_signature": "@Override public Iterable<Record> transform(Iterable<Record> recordIterable)", "class_method_signature": "RecordAggregator.transform(Iterable<Record> recordIterable)", "testcase": false, "constructor": false, "invocations": ["iterator"]}, "repository": {"repo_id": 542927, "url": "https://github.com/bcdev/calvalus2", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 12, "size": 126408, "license": "licensed"}}