{"test_class": {"identifier": "DateRangeCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateFormat DATE_FORMAT = DateUtils.createDateFormat(\"yyyy-MM-dd\");", "modifier": "private static final", "type": "DateFormat", "declarator": "DATE_FORMAT = DateUtils.createDateFormat(\"yyyy-MM-dd\")", "var_name": "DATE_FORMAT"}], "file": "calvalus-production/src/test/java/com/bc/calvalus/production/util/DateRangeCalculatorTest.java"}, "test_case": {"identifier": "testFromMinMax_1w_1w_enfOfFeb", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromMinMax_1w_1w_enfOfFeb() throws Exception {\n        List<DateRange> dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2002-04-05\"),\n                date(\"2002-04-25\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(3, dateRanges.size());\n        assertEquals(\"[2002-04-05:2002-04-11]\", dateRanges.get(0).toString());\n        assertEquals(\"[2002-04-12:2002-04-18]\", dateRanges.get(1).toString());\n        assertEquals(\"[2002-04-19:2002-04-25]\", dateRanges.get(2).toString());\n\n        // 7 vs 1w\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2004-02-20\"),\n                date(\"2004-03-10\"),\n                \"7\",\n                \"7\");\n        assertEquals(2, dateRanges.size());\n        assertEquals(\"[2004-02-20:2004-02-26]\", dateRanges.get(0).toString());\n        assertEquals(\"[2004-02-27:2004-03-04]\", dateRanges.get(1).toString());\n\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2004-02-20\"),\n                date(\"2004-03-10\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(2, dateRanges.size());\n        assertEquals(\"[2004-02-20:2004-02-26]\", dateRanges.get(0).toString());\n        assertEquals(\"[2004-02-27:2004-03-05]\", dateRanges.get(1).toString());\n\n        // leap year\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2004-02-21\"),\n                date(\"2004-03-05\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(\"[2004-02-21:2004-02-27]\", dateRanges.get(0).toString());\n        assertEquals(\"[2004-02-28:2004-03-05]\", dateRanges.get(1).toString());\n\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2004-02-22\"),\n                date(\"2004-03-05\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(1, dateRanges.size());\n        assertEquals(\"[2004-02-22:2004-02-29]\", dateRanges.get(0).toString());\n\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2004-02-23\"),\n                date(\"2004-03-05\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(1, dateRanges.size());\n        assertEquals(\"[2004-02-23:2004-03-01]\", dateRanges.get(0).toString());\n\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2004-02-24\"),\n                date(\"2004-03-05\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(1, dateRanges.size());\n        assertEquals(\"[2004-02-24:2004-03-02]\", dateRanges.get(0).toString());\n\n        // no leap year\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2003-02-22\"),\n                date(\"2003-03-05\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(1, dateRanges.size());\n        assertEquals(\"[2003-02-22:2003-02-28]\", dateRanges.get(0).toString());\n\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2003-02-23\"),\n                date(\"2003-03-05\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(1, dateRanges.size());\n        assertEquals(\"[2003-02-23:2003-03-01]\", dateRanges.get(0).toString());\n\n        dateRanges = DateRangeCalculator.fromMinMax(\n                date(\"2003-02-24\"),\n                date(\"2003-03-05\"),\n                \"1w\",\n                \"1w\");\n        assertEquals(1, dateRanges.size());\n        assertEquals(\"[2003-02-24:2003-03-02]\", dateRanges.get(0).toString());\n    }", "signature": "void testFromMinMax_1w_1w_enfOfFeb()", "full_signature": "@Test public void testFromMinMax_1w_1w_enfOfFeb()", "class_method_signature": "DateRangeCalculatorTest.testFromMinMax_1w_1w_enfOfFeb()", "testcase": true, "constructor": false, "invocations": ["fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get", "fromMinMax", "date", "date", "assertEquals", "size", "assertEquals", "toString", "get"]}, "focal_class": {"identifier": "DateRangeCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern DAY_REGEX = Pattern.compile(\"([0-9]+)\\\\s*d\");", "modifier": "private static final", "type": "Pattern", "declarator": "DAY_REGEX = Pattern.compile(\"([0-9]+)\\\\s*d\")", "var_name": "DAY_REGEX"}, {"original_string": "private static final Pattern WEEK_REGEX = Pattern.compile(\"([0-9]+)\\\\s*w\");", "modifier": "private static final", "type": "Pattern", "declarator": "WEEK_REGEX = Pattern.compile(\"([0-9]+)\\\\s*w\")", "var_name": "WEEK_REGEX"}, {"original_string": "private static final Pattern MONTH_REGEX = Pattern.compile(\"([0-9]+)\\\\s*m\");", "modifier": "private static final", "type": "Pattern", "declarator": "MONTH_REGEX = Pattern.compile(\"([0-9]+)\\\\s*m\")", "var_name": "MONTH_REGEX"}, {"original_string": "private static final Pattern YEAR_REGEX = Pattern.compile(\"([0-9]+)\\\\s*y\");", "modifier": "private static final", "type": "Pattern", "declarator": "YEAR_REGEX = Pattern.compile(\"([0-9]+)\\\\s*y\")", "var_name": "YEAR_REGEX"}, {"original_string": "private static final Pattern INT_REGEX = Pattern.compile(\"([0-9]+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "INT_REGEX = Pattern.compile(\"([0-9]+)\")", "var_name": "INT_REGEX"}], "methods": [{"identifier": "fromDateList", "parameters": "(Date... dateList)", "modifiers": "public static", "return": "List<DateRange>", "signature": "List<DateRange> fromDateList(Date... dateList)", "full_signature": "public static List<DateRange> fromDateList(Date... dateList)", "class_method_signature": "DateRangeCalculator.fromDateList(Date... dateList)", "testcase": false, "constructor": false}, {"identifier": "fromMinMax", "parameters": "(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength)", "modifiers": "public static", "return": "List<DateRange>", "signature": "List<DateRange> fromMinMax(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength)", "full_signature": "public static List<DateRange> fromMinMax(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength)", "class_method_signature": "DateRangeCalculator.fromMinMax(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength)", "testcase": false, "constructor": false}, {"identifier": "parsePeriod", "parameters": "(String periodText)", "modifiers": "static", "return": "Period", "signature": "Period parsePeriod(String periodText)", "full_signature": "static Period parsePeriod(String periodText)", "class_method_signature": "DateRangeCalculator.parsePeriod(String periodText)", "testcase": false, "constructor": false}], "file": "calvalus-production/src/main/java/com/bc/calvalus/production/util/DateRangeCalculator.java"}, "focal_method": {"identifier": "fromMinMax", "parameters": "(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength)", "modifiers": "public static", "return": "List<DateRange>", "body": "public static List<DateRange> fromMinMax(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength) {\n        List<DateRange> dateRangeList = new ArrayList<>();\n\n        Period steppingPeriod = parsePeriod(steppingPeriodLength);\n        Period compositingPeriod = parsePeriod(compositingPeriodLength);\n        final GregorianCalendar calendar = DateUtils.createCalendar();\n\n        // set end of the interval to beginning of the following day for simpler comparison\n        calendar.setTime(maxDate);\n        calendar.add(Calendar.DAY_OF_MONTH, 1);\n        final Date end = calendar.getTime();\n\n        calendar.setTime(minDate);\n        while (true) {\n\n            // determine start and end of period\n            final Date periodStart = calendar.getTime();\n            compositingPeriod.next(calendar);\n            calendar.add(Calendar.SECOND, -1);\n            final Date periodEnd = calendar.getTime();\n\n            // check whether end of period exceeds end of overall interval\n            if (periodEnd.after(end)) {\n                break;\n            }\n            // accumulate date range for period\n            dateRangeList.add(new DateRange(periodStart, periodEnd));\n\n            // proceed by one period length\n            calendar.setTime(periodStart);\n\n            steppingPeriod.next(calendar);\n        }\n        return dateRangeList;\n    }", "signature": "List<DateRange> fromMinMax(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength)", "full_signature": "public static List<DateRange> fromMinMax(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength)", "class_method_signature": "DateRangeCalculator.fromMinMax(Date minDate, Date maxDate, String steppingPeriodLength, String compositingPeriodLength)", "testcase": false, "constructor": false, "invocations": ["parsePeriod", "parsePeriod", "createCalendar", "setTime", "add", "getTime", "setTime", "getTime", "next", "add", "getTime", "after", "add", "setTime", "next"]}, "repository": {"repo_id": 542927, "url": "https://github.com/bcdev/calvalus2", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 12, "size": 126408, "license": "licensed"}}