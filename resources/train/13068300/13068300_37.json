{"test_class": {"identifier": "TestLlamaAM", "superclass": "", "interfaces": "", "fields": [], "file": "llama/src/test/java/com/cloudera/llama/am/api/TestLlamaAM.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreate() throws Exception {\n    Configuration conf = new Configuration(false);\n    conf.setClass(LlamaAM.RM_CONNECTOR_CLASS_KEY, MyRMConnector.class,\n        RMConnector.class);\n    testCreate(conf);\n  }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "TestLlamaAM.testCreate()", "testcase": true, "constructor": false, "invocations": ["setClass", "testCreate"]}, "focal_class": {"identifier": "LlamaAM", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PREFIX_KEY = \"llama.am.\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX_KEY = \"llama.am.\"", "var_name": "PREFIX_KEY"}, {"original_string": "public static final String METRIC_PREFIX = \"llama.am.\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_PREFIX = \"llama.am.\"", "var_name": "METRIC_PREFIX"}, {"original_string": "public static final String CLUSTER_ID = PREFIX_KEY + \"cluster.id\";", "modifier": "public static final", "type": "String", "declarator": "CLUSTER_ID = PREFIX_KEY + \"cluster.id\"", "var_name": "CLUSTER_ID"}, {"original_string": "public static final String CLUSTER_ID_DEFAULT = \"llama\";", "modifier": "public static final", "type": "String", "declarator": "CLUSTER_ID_DEFAULT = \"llama\"", "var_name": "CLUSTER_ID_DEFAULT"}, {"original_string": "public static final String RM_CONNECTOR_CLASS_KEY = PREFIX_KEY +\n      \"rm.connector.class\";", "modifier": "public static final", "type": "String", "declarator": "RM_CONNECTOR_CLASS_KEY = PREFIX_KEY +\n      \"rm.connector.class\"", "var_name": "RM_CONNECTOR_CLASS_KEY"}, {"original_string": "public static final String RM_CONNECTOR_RECYCLE_INTERVAL_KEY =\n      PREFIX_KEY + \"rm.connector.recycle.interval.mins\";", "modifier": "public static final", "type": "String", "declarator": "RM_CONNECTOR_RECYCLE_INTERVAL_KEY =\n      PREFIX_KEY + \"rm.connector.recycle.interval.mins\"", "var_name": "RM_CONNECTOR_RECYCLE_INTERVAL_KEY"}, {"original_string": "public static long RM_CONNECTOR_RECYCLE_INTERVAL_DEFAULT =\n      20*60;", "modifier": "public static", "type": "long", "declarator": "RM_CONNECTOR_RECYCLE_INTERVAL_DEFAULT =\n      20*60", "var_name": "RM_CONNECTOR_RECYCLE_INTERVAL_DEFAULT"}, {"original_string": "public static final String CORE_QUEUES_KEY = PREFIX_KEY +\n      \"core.queues\";", "modifier": "public static final", "type": "String", "declarator": "CORE_QUEUES_KEY = PREFIX_KEY +\n      \"core.queues\"", "var_name": "CORE_QUEUES_KEY"}, {"original_string": "public static final String GANG_ANTI_DEADLOCK_ENABLED_KEY = PREFIX_KEY +\n      \"gang.anti.deadlock.enabled\";", "modifier": "public static final", "type": "String", "declarator": "GANG_ANTI_DEADLOCK_ENABLED_KEY = PREFIX_KEY +\n      \"gang.anti.deadlock.enabled\"", "var_name": "GANG_ANTI_DEADLOCK_ENABLED_KEY"}, {"original_string": "public static final boolean GANG_ANTI_DEADLOCK_ENABLED_DEFAULT = true;", "modifier": "public static final", "type": "boolean", "declarator": "GANG_ANTI_DEADLOCK_ENABLED_DEFAULT = true", "var_name": "GANG_ANTI_DEADLOCK_ENABLED_DEFAULT"}, {"original_string": "public static final String GANG_ANTI_DEADLOCK_NO_ALLOCATION_LIMIT_KEY =\n      PREFIX_KEY + \"gang.anti.deadlock.no.allocation.limit.ms\";", "modifier": "public static final", "type": "String", "declarator": "GANG_ANTI_DEADLOCK_NO_ALLOCATION_LIMIT_KEY =\n      PREFIX_KEY + \"gang.anti.deadlock.no.allocation.limit.ms\"", "var_name": "GANG_ANTI_DEADLOCK_NO_ALLOCATION_LIMIT_KEY"}, {"original_string": "public static final long GANG_ANTI_DEADLOCK_NO_ALLOCATION_LIMIT_DEFAULT =\n      30000;", "modifier": "public static final", "type": "long", "declarator": "GANG_ANTI_DEADLOCK_NO_ALLOCATION_LIMIT_DEFAULT =\n      30000", "var_name": "GANG_ANTI_DEADLOCK_NO_ALLOCATION_LIMIT_DEFAULT"}, {"original_string": "public static final String GANG_ANTI_DEADLOCK_BACKOFF_PERCENT_KEY =\n      PREFIX_KEY + \"gang.anti.deadlock.backoff.percent\";", "modifier": "public static final", "type": "String", "declarator": "GANG_ANTI_DEADLOCK_BACKOFF_PERCENT_KEY =\n      PREFIX_KEY + \"gang.anti.deadlock.backoff.percent\"", "var_name": "GANG_ANTI_DEADLOCK_BACKOFF_PERCENT_KEY"}, {"original_string": "public static final int GANG_ANTI_DEADLOCK_BACKOFF_PERCENT_DEFAULT =\n      30;", "modifier": "public static final", "type": "int", "declarator": "GANG_ANTI_DEADLOCK_BACKOFF_PERCENT_DEFAULT =\n      30", "var_name": "GANG_ANTI_DEADLOCK_BACKOFF_PERCENT_DEFAULT"}, {"original_string": "public static final String GANG_ANTI_DEADLOCK_BACKOFF_MIN_DELAY_KEY =\n      PREFIX_KEY + \"gang.anti.deadlock.backoff.min.delay.ms\";", "modifier": "public static final", "type": "String", "declarator": "GANG_ANTI_DEADLOCK_BACKOFF_MIN_DELAY_KEY =\n      PREFIX_KEY + \"gang.anti.deadlock.backoff.min.delay.ms\"", "var_name": "GANG_ANTI_DEADLOCK_BACKOFF_MIN_DELAY_KEY"}, {"original_string": "public static final long GANG_ANTI_DEADLOCK_BACKOFF_MIN_DELAY_DEFAULT = 10000;", "modifier": "public static final", "type": "long", "declarator": "GANG_ANTI_DEADLOCK_BACKOFF_MIN_DELAY_DEFAULT = 10000", "var_name": "GANG_ANTI_DEADLOCK_BACKOFF_MIN_DELAY_DEFAULT"}, {"original_string": "public static final String GANG_ANTI_DEADLOCK_BACKOFF_MAX_DELAY_KEY =\n      PREFIX_KEY + \"gang.anti.deadlock.backoff.max.delay.ms\";", "modifier": "public static final", "type": "String", "declarator": "GANG_ANTI_DEADLOCK_BACKOFF_MAX_DELAY_KEY =\n      PREFIX_KEY + \"gang.anti.deadlock.backoff.max.delay.ms\"", "var_name": "GANG_ANTI_DEADLOCK_BACKOFF_MAX_DELAY_KEY"}, {"original_string": "public static final long GANG_ANTI_DEADLOCK_BACKOFF_MAX_DELAY_DEFAULT = 30000;", "modifier": "public static final", "type": "long", "declarator": "GANG_ANTI_DEADLOCK_BACKOFF_MAX_DELAY_DEFAULT = 30000", "var_name": "GANG_ANTI_DEADLOCK_BACKOFF_MAX_DELAY_DEFAULT"}, {"original_string": "public static final String CACHING_ENABLED_KEY =\n      PREFIX_KEY + \"cache.enabled\";", "modifier": "public static final", "type": "String", "declarator": "CACHING_ENABLED_KEY =\n      PREFIX_KEY + \"cache.enabled\"", "var_name": "CACHING_ENABLED_KEY"}, {"original_string": "public static final boolean CACHING_ENABLED_DEFAULT = true;", "modifier": "public static final", "type": "boolean", "declarator": "CACHING_ENABLED_DEFAULT = true", "var_name": "CACHING_ENABLED_DEFAULT"}, {"original_string": "public static final String THROTTLING_ENABLED_KEY =\n      PREFIX_KEY + \"throttling.enabled\";", "modifier": "public static final", "type": "String", "declarator": "THROTTLING_ENABLED_KEY =\n      PREFIX_KEY + \"throttling.enabled\"", "var_name": "THROTTLING_ENABLED_KEY"}, {"original_string": "public static final boolean THROTTLING_ENABLED_DEFAULT = true;", "modifier": "public static final", "type": "boolean", "declarator": "THROTTLING_ENABLED_DEFAULT = true", "var_name": "THROTTLING_ENABLED_DEFAULT"}, {"original_string": "public static final String QUEUE_AM_EXPIRE_KEY =\n      PREFIX_KEY + \"queue.expire.ms\";", "modifier": "public static final", "type": "String", "declarator": "QUEUE_AM_EXPIRE_KEY =\n      PREFIX_KEY + \"queue.expire.ms\"", "var_name": "QUEUE_AM_EXPIRE_KEY"}, {"original_string": "public static final int QUEUE_AM_EXPIRE_DEFAULT = 5 * 60 * 1000;", "modifier": "public static final", "type": "int", "declarator": "QUEUE_AM_EXPIRE_DEFAULT = 5 * 60 * 1000", "var_name": "QUEUE_AM_EXPIRE_DEFAULT"}, {"original_string": "public static final String NORMALIZING_ENABLED_KEY =\n      PREFIX_KEY + \"resource.normalizing.enabled\";", "modifier": "public static final", "type": "String", "declarator": "NORMALIZING_ENABLED_KEY =\n      PREFIX_KEY + \"resource.normalizing.enabled\"", "var_name": "NORMALIZING_ENABLED_KEY"}, {"original_string": "public static final boolean NORMALIZING_ENABLED_DEFAULT = true;", "modifier": "public static final", "type": "boolean", "declarator": "NORMALIZING_ENABLED_DEFAULT = true", "var_name": "NORMALIZING_ENABLED_DEFAULT"}, {"original_string": "public static final String NORMALIZING_STANDARD_MBS_KEY =\n      PREFIX_KEY + \"resource.normalizing.standard.mbs\";", "modifier": "public static final", "type": "String", "declarator": "NORMALIZING_STANDARD_MBS_KEY =\n      PREFIX_KEY + \"resource.normalizing.standard.mbs\"", "var_name": "NORMALIZING_STANDARD_MBS_KEY"}, {"original_string": "public static final int NORMALIZING_SIZE_MBS_DEFAULT = 1024;", "modifier": "public static final", "type": "int", "declarator": "NORMALIZING_SIZE_MBS_DEFAULT = 1024", "var_name": "NORMALIZING_SIZE_MBS_DEFAULT"}, {"original_string": "public static final String NORMALIZING_STANDARD_VCORES_KEY =\n      PREFIX_KEY + \"resource.normalizing.standard.vcores\";", "modifier": "public static final", "type": "String", "declarator": "NORMALIZING_STANDARD_VCORES_KEY =\n      PREFIX_KEY + \"resource.normalizing.standard.vcores\"", "var_name": "NORMALIZING_STANDARD_VCORES_KEY"}, {"original_string": "public static final int NORMALIZING_SIZE_VCORES_DEFAULT = 1;", "modifier": "public static final", "type": "int", "declarator": "NORMALIZING_SIZE_VCORES_DEFAULT = 1", "var_name": "NORMALIZING_SIZE_VCORES_DEFAULT"}, {"original_string": "public static final String EVICTION_POLICY_CLASS_KEY =\n      PREFIX_KEY + \"cache.eviction.policy.class\";", "modifier": "public static final", "type": "String", "declarator": "EVICTION_POLICY_CLASS_KEY =\n      PREFIX_KEY + \"cache.eviction.policy.class\"", "var_name": "EVICTION_POLICY_CLASS_KEY"}, {"original_string": "public static final Class EVICTION_POLICY_CLASS_DEFAULT =\n      ResourceCache.TimeoutEvictionPolicy.class;", "modifier": "public static final", "type": "Class", "declarator": "EVICTION_POLICY_CLASS_DEFAULT =\n      ResourceCache.TimeoutEvictionPolicy.class", "var_name": "EVICTION_POLICY_CLASS_DEFAULT"}, {"original_string": "public static final String EVICTION_RUN_INTERVAL_KEY =\n      PREFIX_KEY + \"cache.eviction.run.interval.timeout.ms\";", "modifier": "public static final", "type": "String", "declarator": "EVICTION_RUN_INTERVAL_KEY =\n      PREFIX_KEY + \"cache.eviction.run.interval.timeout.ms\"", "var_name": "EVICTION_RUN_INTERVAL_KEY"}, {"original_string": "public static final int EVICTION_RUN_INTERVAL_DEFAULT = 5000;", "modifier": "public static final", "type": "int", "declarator": "EVICTION_RUN_INTERVAL_DEFAULT = 5000", "var_name": "EVICTION_RUN_INTERVAL_DEFAULT"}, {"original_string": "public static final String EVICTION_IDLE_TIMEOUT_KEY =\n      PREFIX_KEY + \"cache.eviction.timeout.policy.idle.timeout.ms\";", "modifier": "public static final", "type": "String", "declarator": "EVICTION_IDLE_TIMEOUT_KEY =\n      PREFIX_KEY + \"cache.eviction.timeout.policy.idle.timeout.ms\"", "var_name": "EVICTION_IDLE_TIMEOUT_KEY"}, {"original_string": "public static final int EVICTION_IDLE_TIMEOUT_DEFAULT = 30000;", "modifier": "public static final", "type": "int", "declarator": "EVICTION_IDLE_TIMEOUT_DEFAULT = 30000", "var_name": "EVICTION_IDLE_TIMEOUT_DEFAULT"}, {"original_string": "private MetricRegistry metricRegistry;", "modifier": "private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "public static final UUID WILDCARD_HANDLE = UUID.randomUUID();", "modifier": "public static final", "type": "UUID", "declarator": "WILDCARD_HANDLE = UUID.randomUUID()", "var_name": "WILDCARD_HANDLE"}, {"original_string": "public static final String ALL_QUEUES = \"ALL QUEUES\";", "modifier": "public static final", "type": "String", "declarator": "ALL_QUEUES = \"ALL QUEUES\"", "var_name": "ALL_QUEUES"}, {"original_string": "private static final ThreadLocal<Boolean> AS_ADMIN =\n      new ThreadLocal<Boolean>();", "modifier": "private static final", "type": "ThreadLocal<Boolean>", "declarator": "AS_ADMIN =\n      new ThreadLocal<Boolean>()", "var_name": "AS_ADMIN"}], "methods": [{"identifier": "cloneConfiguration", "parameters": "(Configuration conf)", "modifiers": "private static", "return": "Configuration", "signature": "Configuration cloneConfiguration(Configuration conf)", "full_signature": "private static Configuration cloneConfiguration(Configuration conf)", "class_method_signature": "LlamaAM.cloneConfiguration(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "LlamaAM", "signature": "LlamaAM create(Configuration conf)", "full_signature": "public static LlamaAM create(Configuration conf)", "class_method_signature": "LlamaAM.create(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "LlamaAM", "parameters": "(Configuration conf)", "modifiers": "protected", "return": "", "signature": " LlamaAM(Configuration conf)", "full_signature": "protected  LlamaAM(Configuration conf)", "class_method_signature": "LlamaAM.LlamaAM(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "setMetricRegistry", "parameters": "(MetricRegistry metricRegistry)", "modifiers": "public", "return": "void", "signature": "void setMetricRegistry(MetricRegistry metricRegistry)", "full_signature": "public void setMetricRegistry(MetricRegistry metricRegistry)", "class_method_signature": "LlamaAM.setMetricRegistry(MetricRegistry metricRegistry)", "testcase": false, "constructor": false}, {"identifier": "getMetricRegistry", "parameters": "()", "modifiers": "protected", "return": "MetricRegistry", "signature": "MetricRegistry getMetricRegistry()", "full_signature": "protected MetricRegistry getMetricRegistry()", "class_method_signature": "LlamaAM.getMetricRegistry()", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "public Configuration getConf()", "class_method_signature": "LlamaAM.getConf()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void start()", "full_signature": "public abstract void start()", "class_method_signature": "LlamaAM.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void stop()", "full_signature": "public abstract void stop()", "class_method_signature": "LlamaAM.stop()", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "public abstract boolean isRunning()", "class_method_signature": "LlamaAM.isRunning()", "testcase": false, "constructor": false}, {"identifier": "getNodes", "parameters": "()", "modifiers": "public abstract", "return": "List<NodeInfo>", "signature": "List<NodeInfo> getNodes()", "full_signature": "public abstract List<NodeInfo> getNodes()", "class_method_signature": "LlamaAM.getNodes()", "testcase": false, "constructor": false}, {"identifier": "reserve", "parameters": "(UUID reservationId, Reservation reservation)", "modifiers": "public abstract", "return": "void", "signature": "void reserve(UUID reservationId, Reservation reservation)", "full_signature": "public abstract void reserve(UUID reservationId, Reservation reservation)", "class_method_signature": "LlamaAM.reserve(UUID reservationId, Reservation reservation)", "testcase": false, "constructor": false}, {"identifier": "reserve", "parameters": "(Reservation reservation)", "modifiers": "public", "return": "UUID", "signature": "UUID reserve(Reservation reservation)", "full_signature": "public UUID reserve(Reservation reservation)", "class_method_signature": "LlamaAM.reserve(Reservation reservation)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(UUID expansionId, Expansion expansion)", "modifiers": "public", "return": "void", "signature": "void expand(UUID expansionId, Expansion expansion)", "full_signature": "public void expand(UUID expansionId, Expansion expansion)", "class_method_signature": "LlamaAM.expand(UUID expansionId, Expansion expansion)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(Expansion expansion)", "modifiers": "public", "return": "UUID", "signature": "UUID expand(Expansion expansion)", "full_signature": "public UUID expand(Expansion expansion)", "class_method_signature": "LlamaAM.expand(Expansion expansion)", "testcase": false, "constructor": false}, {"identifier": "getReservation", "parameters": "(UUID reservationId)", "modifiers": "public abstract", "return": "PlacedReservation", "signature": "PlacedReservation getReservation(UUID reservationId)", "full_signature": "public abstract PlacedReservation getReservation(UUID reservationId)", "class_method_signature": "LlamaAM.getReservation(UUID reservationId)", "testcase": false, "constructor": false}, {"identifier": "releaseReservation", "parameters": "(UUID handle,\n      UUID reservationId, boolean doNotCache)", "modifiers": "public abstract", "return": "PlacedReservation", "signature": "PlacedReservation releaseReservation(UUID handle,\n      UUID reservationId, boolean doNotCache)", "full_signature": "public abstract PlacedReservation releaseReservation(UUID handle,\n      UUID reservationId, boolean doNotCache)", "class_method_signature": "LlamaAM.releaseReservation(UUID handle,\n      UUID reservationId, boolean doNotCache)", "testcase": false, "constructor": false}, {"identifier": "releaseReservationsForHandle", "parameters": "(\n      UUID handle, boolean doNotCache)", "modifiers": "public abstract", "return": "List<PlacedReservation>", "signature": "List<PlacedReservation> releaseReservationsForHandle(\n      UUID handle, boolean doNotCache)", "full_signature": "public abstract List<PlacedReservation> releaseReservationsForHandle(\n      UUID handle, boolean doNotCache)", "class_method_signature": "LlamaAM.releaseReservationsForHandle(\n      UUID handle, boolean doNotCache)", "testcase": false, "constructor": false}, {"identifier": "releaseReservationsForQueue", "parameters": "(\n      String queue, boolean doNotCache)", "modifiers": "public abstract", "return": "List<PlacedReservation>", "signature": "List<PlacedReservation> releaseReservationsForQueue(\n      String queue, boolean doNotCache)", "full_signature": "public abstract List<PlacedReservation> releaseReservationsForQueue(\n      String queue, boolean doNotCache)", "class_method_signature": "LlamaAM.releaseReservationsForQueue(\n      String queue, boolean doNotCache)", "testcase": false, "constructor": false}, {"identifier": "emptyCacheForQueue", "parameters": "(String queue)", "modifiers": "public abstract", "return": "void", "signature": "void emptyCacheForQueue(String queue)", "full_signature": "public abstract void emptyCacheForQueue(String queue)", "class_method_signature": "LlamaAM.emptyCacheForQueue(String queue)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(LlamaAMListener listener)", "modifiers": "public abstract", "return": "void", "signature": "void addListener(LlamaAMListener listener)", "full_signature": "public abstract void addListener(LlamaAMListener listener)", "class_method_signature": "LlamaAM.addListener(LlamaAMListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(LlamaAMListener listener)", "modifiers": "public abstract", "return": "void", "signature": "void removeListener(LlamaAMListener listener)", "full_signature": "public abstract void removeListener(LlamaAMListener listener)", "class_method_signature": "LlamaAM.removeListener(LlamaAMListener listener)", "testcase": false, "constructor": false}, {"identifier": "isAdminCall", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isAdminCall()", "full_signature": "protected boolean isAdminCall()", "class_method_signature": "LlamaAM.isAdminCall()", "testcase": false, "constructor": false}, {"identifier": "doAsAdmin", "parameters": "(Callable<T> callable)", "modifiers": "public static", "return": "T", "signature": "T doAsAdmin(Callable<T> callable)", "full_signature": "public static T doAsAdmin(Callable<T> callable)", "class_method_signature": "LlamaAM.doAsAdmin(Callable<T> callable)", "testcase": false, "constructor": false}], "file": "llama/src/main/java/com/cloudera/llama/am/api/LlamaAM.java"}, "focal_method": {"identifier": "create", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "LlamaAM", "body": "public static LlamaAM create(Configuration conf)\n      throws LlamaException {\n    conf = cloneConfiguration(conf);\n    LlamaAM am = new MultiQueueLlamaAM(conf);\n    if (conf.getBoolean(GANG_ANTI_DEADLOCK_ENABLED_KEY,\n        GANG_ANTI_DEADLOCK_ENABLED_DEFAULT)) {\n      am = new GangAntiDeadlockLlamaAM(conf, am);\n    }\n    am = new ExpansionReservationsLlamaAM(am);\n    return new APIContractLlamaAM(am);\n  }", "signature": "LlamaAM create(Configuration conf)", "full_signature": "public static LlamaAM create(Configuration conf)", "class_method_signature": "LlamaAM.create(Configuration conf)", "testcase": false, "constructor": false, "invocations": ["cloneConfiguration", "getBoolean"]}, "repository": {"repo_id": 13068300, "url": "https://github.com/cloudera/llama", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 32, "size": 7630, "license": "licensed"}}