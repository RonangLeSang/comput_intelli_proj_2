{"test_class": {"identifier": "MetricTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TagList tags1 = SortedTagList.builder().withTag(\"cluster\", \"foo\")\n      .withTag(\"asg\", \"foo-v000\").build();", "modifier": "private final", "type": "TagList", "declarator": "tags1 = SortedTagList.builder().withTag(\"cluster\", \"foo\")\n      .withTag(\"asg\", \"foo-v000\").build()", "var_name": "tags1"}, {"original_string": "private final TagList tags2 = SortedTagList.builder().withTag(\"cluster\", \"foo\")\n      .withTag(\"asg\", \"foo-v001\").build();", "modifier": "private final", "type": "TagList", "declarator": "tags2 = SortedTagList.builder().withTag(\"cluster\", \"foo\")\n      .withTag(\"asg\", \"foo-v001\").build()", "var_name": "tags2"}], "file": "servo-core/src/test/java/com/netflix/servo/MetricTest.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHashCode() throws Exception {\n    long now = System.currentTimeMillis();\n    Metric m1 = new Metric(\"a\", tags1, now, 42);\n    Metric m2 = new Metric(\"a\", tags2, now, 42);\n    Metric m3 = new Metric(\"a\", tags1, now, 42);\n\n    assertTrue(m1.hashCode() == m1.hashCode());\n    assertTrue(m1.hashCode() != m2.hashCode());\n    assertTrue(m1.hashCode() == m3.hashCode());\n  }", "signature": "void testHashCode()", "full_signature": "@Test public void testHashCode()", "class_method_signature": "MetricTest.testHashCode()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "assertTrue", "hashCode", "hashCode", "assertTrue", "hashCode", "hashCode", "assertTrue", "hashCode", "hashCode"]}, "focal_class": {"identifier": "Metric", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MonitorConfig config;", "modifier": "private final", "type": "MonitorConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final long timestamp;", "modifier": "private final", "type": "long", "declarator": "timestamp", "var_name": "timestamp"}, {"original_string": "private final Object value;", "modifier": "private final", "type": "Object", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "Metric", "parameters": "(String name, TagList tags, long timestamp, Object value)", "modifiers": "public", "return": "", "signature": " Metric(String name, TagList tags, long timestamp, Object value)", "full_signature": "public  Metric(String name, TagList tags, long timestamp, Object value)", "class_method_signature": "Metric.Metric(String name, TagList tags, long timestamp, Object value)", "testcase": false, "constructor": true}, {"identifier": "Metric", "parameters": "(MonitorConfig config, long timestamp, Object value)", "modifiers": "public", "return": "", "signature": " Metric(MonitorConfig config, long timestamp, Object value)", "full_signature": "public  Metric(MonitorConfig config, long timestamp, Object value)", "class_method_signature": "Metric.Metric(MonitorConfig config, long timestamp, Object value)", "testcase": false, "constructor": true}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "MonitorConfig", "signature": "MonitorConfig getConfig()", "full_signature": "public MonitorConfig getConfig()", "class_method_signature": "Metric.getConfig()", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimestamp()", "full_signature": "public long getTimestamp()", "class_method_signature": "Metric.getTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getValue()", "full_signature": "public Object getValue()", "class_method_signature": "Metric.getValue()", "testcase": false, "constructor": false}, {"identifier": "getNumberValue", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getNumberValue()", "full_signature": "public Number getNumberValue()", "class_method_signature": "Metric.getNumberValue()", "testcase": false, "constructor": false}, {"identifier": "hasNumberValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNumberValue()", "full_signature": "public boolean hasNumberValue()", "class_method_signature": "Metric.hasNumberValue()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Metric.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Metric.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Metric.toString()", "testcase": false, "constructor": false}], "file": "servo-core/src/main/java/com/netflix/servo/Metric.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int hashCode() {\n    int result = config.hashCode();\n    result = 31 * result + (int) (timestamp ^ (timestamp >>> 32));\n    result = 31 * result + value.hashCode();\n    return result;\n  }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Metric.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode"]}, "repository": {"repo_id": 2997701, "url": "https://github.com/Netflix/servo", "language": "Java", "is_fork": false, "fork_count": 281, "stargazer_count": 1326, "size": 5380, "license": "licensed"}}