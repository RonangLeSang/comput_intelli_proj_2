{"test_class": {"identifier": "BasicTagTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_KEY = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "TEST_KEY = \"foo\"", "var_name": "TEST_KEY"}, {"original_string": "private static final String TEST_VALUE = \"bar\";", "modifier": "private static final", "type": "String", "declarator": "TEST_VALUE = \"bar\"", "var_name": "TEST_VALUE"}, {"original_string": "private final BasicTag testTag = new BasicTag(TEST_KEY, TEST_VALUE);", "modifier": "private final", "type": "BasicTag", "declarator": "testTag = new BasicTag(TEST_KEY, TEST_VALUE)", "var_name": "testTag"}], "file": "servo-core/src/test/java/com/netflix/servo/tag/BasicTagTest.java"}, "test_case": {"identifier": "testParseTagNoEqSign", "parameters": "()", "modifiers": "@Test(expectedExceptions = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expectedExceptions = IllegalArgumentException.class)\n  public void testParseTagNoEqSign() throws Exception {\n    String badString = \"foobar\";\n    Tags.parseTag(badString);\n  }", "signature": "void testParseTagNoEqSign()", "full_signature": "@Test(expectedExceptions = IllegalArgumentException.class) public void testParseTagNoEqSign()", "class_method_signature": "BasicTagTest.testParseTagNoEqSign()", "testcase": true, "constructor": false, "invocations": ["parseTag"]}, "focal_class": {"identifier": "BasicTag", "superclass": "", "interfaces": "implements Tag", "fields": [{"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private final String value;", "modifier": "private final", "type": "String", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "BasicTag", "parameters": "(String key, String value)", "modifiers": "public", "return": "", "signature": " BasicTag(String key, String value)", "full_signature": "public  BasicTag(String key, String value)", "class_method_signature": "BasicTag.BasicTag(String key, String value)", "testcase": false, "constructor": true}, {"identifier": "checkNotEmpty", "parameters": "(String v, String name)", "modifiers": "private static", "return": "String", "signature": "String checkNotEmpty(String v, String name)", "full_signature": "private static String checkNotEmpty(String v, String name)", "class_method_signature": "BasicTag.checkNotEmpty(String v, String name)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKey()", "full_signature": "public String getKey()", "class_method_signature": "BasicTag.getKey()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "BasicTag.getValue()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "BasicTag.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BasicTag.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BasicTag.toString()", "testcase": false, "constructor": false}, {"identifier": "parseTag", "parameters": "(String tagString)", "modifiers": "public static", "return": "BasicTag", "signature": "BasicTag parseTag(String tagString)", "full_signature": "public static BasicTag parseTag(String tagString)", "class_method_signature": "BasicTag.parseTag(String tagString)", "testcase": false, "constructor": false}, {"identifier": "tagString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String tagString()", "full_signature": "@Override public String tagString()", "class_method_signature": "BasicTag.tagString()", "testcase": false, "constructor": false}], "file": "servo-core/src/main/java/com/netflix/servo/tag/BasicTag.java"}, "focal_method": {"identifier": "parseTag", "parameters": "(String tagString)", "modifiers": "public static", "return": "BasicTag", "body": "public static BasicTag parseTag(String tagString) {\n    return (BasicTag) Tags.parseTag(tagString);\n  }", "signature": "BasicTag parseTag(String tagString)", "full_signature": "public static BasicTag parseTag(String tagString)", "class_method_signature": "BasicTag.parseTag(String tagString)", "testcase": false, "constructor": false, "invocations": ["parseTag"]}, "repository": {"repo_id": 2997701, "url": "https://github.com/Netflix/servo", "language": "Java", "is_fork": false, "fork_count": 281, "stargazer_count": 1326, "size": 5380, "license": "licensed"}}