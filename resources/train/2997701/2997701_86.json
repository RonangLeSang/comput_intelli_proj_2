{"test_class": {"identifier": "MonitorsTest", "superclass": "", "interfaces": "", "fields": [], "file": "servo-core/src/test/java/com/netflix/servo/monitor/MonitorsTest.java"}, "test_case": {"identifier": "testAddAnnotatedFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAddAnnotatedFields() throws Exception {\n    List<Monitor<?>> monitors = new ArrayList<>();\n    ClassWithMonitors obj = new ClassWithMonitors();\n    Monitors.addAnnotatedFields(monitors, null, null, obj);\n    Monitors.addAnnotatedFields(monitors, \"foo\", null, obj);\n    //System.out.println(monitors);\n    assertEquals(monitors.size(), 8);\n  }", "signature": "void testAddAnnotatedFields()", "full_signature": "@Test public void testAddAnnotatedFields()", "class_method_signature": "MonitorsTest.testAddAnnotatedFields()", "testcase": true, "constructor": false, "invocations": ["addAnnotatedFields", "addAnnotatedFields", "assertEquals", "size"]}, "focal_class": {"identifier": "Monitors", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_ID = \"default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ID = \"default\"", "var_name": "DEFAULT_ID"}, {"original_string": "private static final CounterFactory COUNTER_FUNCTION = new CounterFactory();", "modifier": "private static final", "type": "CounterFactory", "declarator": "COUNTER_FUNCTION = new CounterFactory()", "var_name": "COUNTER_FUNCTION"}], "methods": [{"identifier": "Monitors", "parameters": "()", "modifiers": "private", "return": "", "signature": " Monitors()", "full_signature": "private  Monitors()", "class_method_signature": "Monitors.Monitors()", "testcase": false, "constructor": true}, {"identifier": "newTimer", "parameters": "(String name)", "modifiers": "public static", "return": "Timer", "signature": "Timer newTimer(String name)", "full_signature": "public static Timer newTimer(String name)", "class_method_signature": "Monitors.newTimer(String name)", "testcase": false, "constructor": false}, {"identifier": "newTimer", "parameters": "(String name, TaggingContext context)", "modifiers": "public static", "return": "Timer", "signature": "Timer newTimer(String name, TaggingContext context)", "full_signature": "public static Timer newTimer(String name, TaggingContext context)", "class_method_signature": "Monitors.newTimer(String name, TaggingContext context)", "testcase": false, "constructor": false}, {"identifier": "newTimer", "parameters": "(String name, TimeUnit unit)", "modifiers": "public static", "return": "Timer", "signature": "Timer newTimer(String name, TimeUnit unit)", "full_signature": "public static Timer newTimer(String name, TimeUnit unit)", "class_method_signature": "Monitors.newTimer(String name, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "newTimer", "parameters": "(String name, TimeUnit unit, TaggingContext context)", "modifiers": "public static", "return": "Timer", "signature": "Timer newTimer(String name, TimeUnit unit, TaggingContext context)", "full_signature": "public static Timer newTimer(String name, TimeUnit unit, TaggingContext context)", "class_method_signature": "Monitors.newTimer(String name, TimeUnit unit, TaggingContext context)", "testcase": false, "constructor": false}, {"identifier": "newCounter", "parameters": "(String name)", "modifiers": "public static", "return": "Counter", "signature": "Counter newCounter(String name)", "full_signature": "public static Counter newCounter(String name)", "class_method_signature": "Monitors.newCounter(String name)", "testcase": false, "constructor": false}, {"identifier": "newCounter", "parameters": "(String name, TaggingContext context)", "modifiers": "public static", "return": "Counter", "signature": "Counter newCounter(String name, TaggingContext context)", "full_signature": "public static Counter newCounter(String name, TaggingContext context)", "class_method_signature": "Monitors.newCounter(String name, TaggingContext context)", "testcase": false, "constructor": false}, {"identifier": "newObjectMonitor", "parameters": "(Object obj)", "modifiers": "public static", "return": "CompositeMonitor<?>", "signature": "CompositeMonitor<?> newObjectMonitor(Object obj)", "full_signature": "public static CompositeMonitor<?> newObjectMonitor(Object obj)", "class_method_signature": "Monitors.newObjectMonitor(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newObjectMonitor", "parameters": "(String id, Object obj)", "modifiers": "public static", "return": "CompositeMonitor<?>", "signature": "CompositeMonitor<?> newObjectMonitor(String id, Object obj)", "full_signature": "public static CompositeMonitor<?> newObjectMonitor(String id, Object obj)", "class_method_signature": "Monitors.newObjectMonitor(String id, Object obj)", "testcase": false, "constructor": false}, {"identifier": "newThreadPoolMonitor", "parameters": "(String id, ThreadPoolExecutor pool)", "modifiers": "public static", "return": "CompositeMonitor<?>", "signature": "CompositeMonitor<?> newThreadPoolMonitor(String id, ThreadPoolExecutor pool)", "full_signature": "public static CompositeMonitor<?> newThreadPoolMonitor(String id, ThreadPoolExecutor pool)", "class_method_signature": "Monitors.newThreadPoolMonitor(String id, ThreadPoolExecutor pool)", "testcase": false, "constructor": false}, {"identifier": "newCacheMonitor", "parameters": "(String id, Cache<?, ?> cache)", "modifiers": "public static", "return": "CompositeMonitor<?>", "signature": "CompositeMonitor<?> newCacheMonitor(String id, Cache<?, ?> cache)", "full_signature": "public static CompositeMonitor<?> newCacheMonitor(String id, Cache<?, ?> cache)", "class_method_signature": "Monitors.newCacheMonitor(String id, Cache<?, ?> cache)", "testcase": false, "constructor": false}, {"identifier": "registerObject", "parameters": "(Object obj)", "modifiers": "public static", "return": "void", "signature": "void registerObject(Object obj)", "full_signature": "public static void registerObject(Object obj)", "class_method_signature": "Monitors.registerObject(Object obj)", "testcase": false, "constructor": false}, {"identifier": "unregisterObject", "parameters": "(Object obj)", "modifiers": "public static", "return": "void", "signature": "void unregisterObject(Object obj)", "full_signature": "public static void unregisterObject(Object obj)", "class_method_signature": "Monitors.unregisterObject(Object obj)", "testcase": false, "constructor": false}, {"identifier": "unregisterObject", "parameters": "(String id, Object obj)", "modifiers": "public static", "return": "void", "signature": "void unregisterObject(String id, Object obj)", "full_signature": "public static void unregisterObject(String id, Object obj)", "class_method_signature": "Monitors.unregisterObject(String id, Object obj)", "testcase": false, "constructor": false}, {"identifier": "registerObject", "parameters": "(String id, Object obj)", "modifiers": "public static", "return": "void", "signature": "void registerObject(String id, Object obj)", "full_signature": "public static void registerObject(String id, Object obj)", "class_method_signature": "Monitors.registerObject(String id, Object obj)", "testcase": false, "constructor": false}, {"identifier": "isObjectRegistered", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isObjectRegistered(Object obj)", "full_signature": "public static boolean isObjectRegistered(Object obj)", "class_method_signature": "Monitors.isObjectRegistered(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isObjectRegistered", "parameters": "(String id, Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isObjectRegistered(String id, Object obj)", "full_signature": "public static boolean isObjectRegistered(String id, Object obj)", "class_method_signature": "Monitors.isObjectRegistered(String id, Object obj)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(TagList tags, Monitor<T> monitor)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "Monitor<T>", "signature": "Monitor<T> wrap(TagList tags, Monitor<T> monitor)", "full_signature": "@SuppressWarnings(\"unchecked\") static Monitor<T> wrap(TagList tags, Monitor<T> monitor)", "class_method_signature": "Monitors.wrap(TagList tags, Monitor<T> monitor)", "testcase": false, "constructor": false}, {"identifier": "addMonitors", "parameters": "(List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "modifiers": "static", "return": "void", "signature": "void addMonitors(List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "full_signature": "static void addMonitors(List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "class_method_signature": "Monitors.addMonitors(List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "testcase": false, "constructor": false}, {"identifier": "addMonitorFields", "parameters": "(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "modifiers": "static", "return": "void", "signature": "void addMonitorFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "full_signature": "static void addMonitorFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "class_method_signature": "Monitors.addMonitorFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "testcase": false, "constructor": false}, {"identifier": "addAnnotatedFields", "parameters": "(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "modifiers": "static", "return": "void", "signature": "void addAnnotatedFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "full_signature": "static void addAnnotatedFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "class_method_signature": "Monitors.addAnnotatedFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "testcase": false, "constructor": false}, {"identifier": "getMonitorTags", "parameters": "(Object obj)", "modifiers": "private static", "return": "TagList", "signature": "TagList getMonitorTags(Object obj)", "full_signature": "private static TagList getMonitorTags(Object obj)", "class_method_signature": "Monitors.getMonitorTags(Object obj)", "testcase": false, "constructor": false}, {"identifier": "checkType", "parameters": "(\n      com.netflix.servo.annotations.Monitor anno, Class<?> type, Class<?> container)", "modifiers": "private static", "return": "void", "signature": "void checkType(\n      com.netflix.servo.annotations.Monitor anno, Class<?> type, Class<?> container)", "full_signature": "private static void checkType(\n      com.netflix.servo.annotations.Monitor anno, Class<?> type, Class<?> container)", "class_method_signature": "Monitors.checkType(\n      com.netflix.servo.annotations.Monitor anno, Class<?> type, Class<?> container)", "testcase": false, "constructor": false}, {"identifier": "isNumericType", "parameters": "(Class<?> c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNumericType(Class<?> c)", "full_signature": "private static boolean isNumericType(Class<?> c)", "class_method_signature": "Monitors.isNumericType(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "isMonitorType", "parameters": "(Class<?> c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMonitorType(Class<?> c)", "full_signature": "private static boolean isMonitorType(Class<?> c)", "class_method_signature": "Monitors.isMonitorType(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "newObjectConfig", "parameters": "(Class<?> c, String id, TagList tags)", "modifiers": "private static", "return": "MonitorConfig", "signature": "MonitorConfig newObjectConfig(Class<?> c, String id, TagList tags)", "full_signature": "private static MonitorConfig newObjectConfig(Class<?> c, String id, TagList tags)", "class_method_signature": "Monitors.newObjectConfig(Class<?> c, String id, TagList tags)", "testcase": false, "constructor": false}, {"identifier": "className", "parameters": "(Class c)", "modifiers": "private static", "return": "String", "signature": "String className(Class c)", "full_signature": "private static String className(Class c)", "class_method_signature": "Monitors.className(Class c)", "testcase": false, "constructor": false}, {"identifier": "newConfig", "parameters": "(\n      Class<?> c,\n      String defaultName,\n      String id,\n      com.netflix.servo.annotations.Monitor anno,\n      TagList tags)", "modifiers": "private static", "return": "MonitorConfig", "signature": "MonitorConfig newConfig(\n      Class<?> c,\n      String defaultName,\n      String id,\n      com.netflix.servo.annotations.Monitor anno,\n      TagList tags)", "full_signature": "private static MonitorConfig newConfig(\n      Class<?> c,\n      String defaultName,\n      String id,\n      com.netflix.servo.annotations.Monitor anno,\n      TagList tags)", "class_method_signature": "Monitors.newConfig(\n      Class<?> c,\n      String defaultName,\n      String id,\n      com.netflix.servo.annotations.Monitor anno,\n      TagList tags)", "testcase": false, "constructor": false}], "file": "servo-core/src/main/java/com/netflix/servo/monitor/Monitors.java"}, "focal_method": {"identifier": "addAnnotatedFields", "parameters": "(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "modifiers": "static", "return": "void", "body": "static void addAnnotatedFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj) {\n    final Class<com.netflix.servo.annotations.Monitor> annoClass =\n        com.netflix.servo.annotations.Monitor.class;\n    try {\n      Set<Field> fields = getFieldsAnnotatedBy(obj.getClass(), annoClass);\n      for (Field field : fields) {\n        final com.netflix.servo.annotations.Monitor anno = field.getAnnotation(annoClass);\n        if (anno != null) {\n          final MonitorConfig config =\n              newConfig(obj.getClass(), field.getName(), id, anno, tags);\n          if (anno.type() == DataSourceType.INFORMATIONAL) {\n            monitors.add(new AnnotatedStringMonitor(config, obj, field));\n          } else {\n            checkType(anno, field.getType(), field.getDeclaringClass());\n            monitors.add(new AnnotatedNumberMonitor(config, obj, field));\n          }\n        }\n      }\n\n      Set<Method> methods = getMethodsAnnotatedBy(obj.getClass(), annoClass);\n      for (Method method : methods) {\n        final com.netflix.servo.annotations.Monitor anno = method.getAnnotation(annoClass);\n        if (anno != null) {\n          final MonitorConfig config =\n              newConfig(obj.getClass(), method.getName(), id, anno, tags);\n          if (anno.type() == DataSourceType.INFORMATIONAL) {\n            monitors.add(new AnnotatedStringMonitor(config, obj, method));\n          } else {\n            checkType(anno, method.getReturnType(), method.getDeclaringClass());\n            monitors.add(new AnnotatedNumberMonitor(config, obj, method));\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "void addAnnotatedFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "full_signature": "static void addAnnotatedFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "class_method_signature": "Monitors.addAnnotatedFields(\n      List<Monitor<?>> monitors, String id, TagList tags, Object obj)", "testcase": false, "constructor": false, "invocations": ["getFieldsAnnotatedBy", "getClass", "getAnnotation", "newConfig", "getClass", "getName", "type", "add", "checkType", "getType", "getDeclaringClass", "add", "getMethodsAnnotatedBy", "getClass", "getAnnotation", "newConfig", "getClass", "getName", "type", "add", "checkType", "getReturnType", "getDeclaringClass", "add", "propagate"]}, "repository": {"repo_id": 2997701, "url": "https://github.com/Netflix/servo", "language": "Java", "is_fork": false, "fork_count": 281, "stargazer_count": 1326, "size": 5380, "license": "licensed"}}