{"test_class": {"identifier": "SmallTagMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "servo-core/src/test/java/com/netflix/servo/tag/SmallTagMapTest.java"}, "test_case": {"identifier": "testIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIterator() {\n    final Tag t1 = Tags.newTag(\"k1\", \"v\");\n    final Tag t2 = Tags.newTag(\"k2\", \"v2\");\n    SmallTagMap map = SmallTagMap.builder().add(t1).add(t2).result();\n    Set<Tag> tags = UnmodifiableSet.copyOf(map.iterator());\n    assertEquals(tags, UnmodifiableSet.of(t1, t2));\n  }", "signature": "void testIterator()", "full_signature": "@Test public void testIterator()", "class_method_signature": "SmallTagMapTest.testIterator()", "testcase": true, "constructor": false, "invocations": ["newTag", "newTag", "result", "add", "add", "builder", "copyOf", "iterator", "assertEquals", "of"]}, "focal_class": {"identifier": "SmallTagMap", "superclass": "", "interfaces": "implements Iterable<Tag>", "fields": [{"original_string": "public static final int MAX_TAGS = 32;", "modifier": "public static final", "type": "int", "declarator": "MAX_TAGS = 32", "var_name": "MAX_TAGS"}, {"original_string": "public static final int INITIAL_TAG_SIZE = 8;", "modifier": "public static final", "type": "int", "declarator": "INITIAL_TAG_SIZE = 8", "var_name": "INITIAL_TAG_SIZE"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SmallTagMap.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SmallTagMap.class)", "var_name": "LOGGER"}, {"original_string": "private int cachedHashCode = 0;", "modifier": "private", "type": "int", "declarator": "cachedHashCode = 0", "var_name": "cachedHashCode"}, {"original_string": "private final Tag[] tagArray;", "modifier": "private final", "type": "Tag[]", "declarator": "tagArray", "var_name": "tagArray"}], "methods": [{"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "SmallTagMap.builder()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Tag>", "signature": "Iterator<Tag> iterator()", "full_signature": "@Override public Iterator<Tag> iterator()", "class_method_signature": "SmallTagMap.iterator()", "testcase": false, "constructor": false}, {"identifier": "SmallTagMap", "parameters": "(Tag[] tagArray)", "modifiers": "", "return": "", "signature": " SmallTagMap(Tag[] tagArray)", "full_signature": "  SmallTagMap(Tag[] tagArray)", "class_method_signature": "SmallTagMap.SmallTagMap(Tag[] tagArray)", "testcase": false, "constructor": true}, {"identifier": "binarySearch", "parameters": "(Tag[] a, String key)", "modifiers": "static", "return": "int", "signature": "int binarySearch(Tag[] a, String key)", "full_signature": "static int binarySearch(Tag[] a, String key)", "class_method_signature": "SmallTagMap.binarySearch(Tag[] a, String key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "Tag", "signature": "Tag get(String key)", "full_signature": "public Tag get(String key)", "class_method_signature": "SmallTagMap.get(String key)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SmallTagMap.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SmallTagMap.toString()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(String k)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(String k)", "full_signature": "public boolean containsKey(String k)", "class_method_signature": "SmallTagMap.containsKey(String k)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "SmallTagMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "SmallTagMap.size()", "testcase": false, "constructor": false}, {"identifier": "tagSet", "parameters": "()", "modifiers": "@Deprecated public", "return": "Set<Tag>", "signature": "Set<Tag> tagSet()", "full_signature": "@Deprecated public Set<Tag> tagSet()", "class_method_signature": "SmallTagMap.tagSet()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override /** {@inheritDoc} */ public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override /** {@inheritDoc} */ public boolean equals(Object obj)", "class_method_signature": "SmallTagMap.equals(Object obj)", "testcase": false, "constructor": false}], "file": "servo-core/src/main/java/com/netflix/servo/tag/SmallTagMap.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Tag>", "body": "@Override\n  public Iterator<Tag> iterator() {\n    return new SmallTagIterator();\n  }", "signature": "Iterator<Tag> iterator()", "full_signature": "@Override public Iterator<Tag> iterator()", "class_method_signature": "SmallTagMap.iterator()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2997701, "url": "https://github.com/Netflix/servo", "language": "Java", "is_fork": false, "fork_count": 281, "stargazer_count": 1326, "size": 5380, "license": "licensed"}}