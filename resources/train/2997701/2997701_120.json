{"test_class": {"identifier": "JmxMetricPollerTest", "superclass": "", "interfaces": "", "fields": [], "file": "servo-core/src/test/java/com/netflix/servo/publish/JmxMetricPollerTest.java"}, "test_case": {"identifier": "testTabularData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTabularData() throws Exception {\n\n    MapMXBean mapMXBean = new MapMXBean();\n    try {\n      MetricPoller poller = new JmxMetricPoller(\n          new LocalJmxConnector(),\n          new ObjectName(\"com.netflix.servo.test:*\"),\n          MATCH_ALL);\n\n      List<Metric> metrics = poller.poll(config -> config.getName().equals(\"Count\"));\n      assertEquals(metrics.size(), 2);\n      Map<String, Integer> values = new HashMap<>();\n      for (Metric m : metrics) {\n        values.put(m.getConfig().getTags().getTag(\"JmxCompositePath\").getValue(), (Integer) m.getValue());\n      }\n      assertEquals(values.get(\"Entry1\"), (Integer) 111);\n      assertEquals(values.get(\"Entry2\"), (Integer) 222);\n    } finally {\n      mapMXBean.destroy();\n    }\n  }", "signature": "void testTabularData()", "full_signature": "@Test public void testTabularData()", "class_method_signature": "JmxMetricPollerTest.testTabularData()", "testcase": true, "constructor": false, "invocations": ["poll", "equals", "getName", "assertEquals", "size", "put", "getValue", "getTag", "getTags", "getConfig", "getValue", "assertEquals", "get", "assertEquals", "get", "destroy"]}, "focal_class": {"identifier": "JmxMetricPoller", "superclass": "", "interfaces": "implements MetricPoller", "fields": [{"original_string": "private static final Logger LOGGER =\n      LoggerFactory.getLogger(JmxMetricPoller.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n      LoggerFactory.getLogger(JmxMetricPoller.class)", "var_name": "LOGGER"}, {"original_string": "private static final Tag CLASS_TAG = Tags.newTag(\n      StandardTagKeys.CLASS_NAME.getKeyName(),\n      JmxMetricPoller.class.getCanonicalName());", "modifier": "private static final", "type": "Tag", "declarator": "CLASS_TAG = Tags.newTag(\n      StandardTagKeys.CLASS_NAME.getKeyName(),\n      JmxMetricPoller.class.getCanonicalName())", "var_name": "CLASS_TAG"}, {"original_string": "private static final String DOMAIN_KEY = \"JmxDomain\";", "modifier": "private static final", "type": "String", "declarator": "DOMAIN_KEY = \"JmxDomain\"", "var_name": "DOMAIN_KEY"}, {"original_string": "private static final String COMPOSITE_PATH_KEY = \"JmxCompositePath\";", "modifier": "private static final", "type": "String", "declarator": "COMPOSITE_PATH_KEY = \"JmxCompositePath\"", "var_name": "COMPOSITE_PATH_KEY"}, {"original_string": "private static final String PROP_KEY_PREFIX = \"Jmx\";", "modifier": "private static final", "type": "String", "declarator": "PROP_KEY_PREFIX = \"Jmx\"", "var_name": "PROP_KEY_PREFIX"}, {"original_string": "private final JmxConnector connector;", "modifier": "private final", "type": "JmxConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private final List<ObjectName> queries;", "modifier": "private final", "type": "List<ObjectName>", "declarator": "queries", "var_name": "queries"}, {"original_string": "private final MetricFilter counters;", "modifier": "private final", "type": "MetricFilter", "declarator": "counters", "var_name": "counters"}, {"original_string": "private final boolean onlyNumericMetrics;", "modifier": "private final", "type": "boolean", "declarator": "onlyNumericMetrics", "var_name": "onlyNumericMetrics"}, {"original_string": "private final List<Tag> defaultTags;", "modifier": "private final", "type": "List<Tag>", "declarator": "defaultTags", "var_name": "defaultTags"}], "methods": [{"identifier": "JmxMetricPoller", "parameters": "(\n      JmxConnector connector, ObjectName query, MetricFilter counters)", "modifiers": "public", "return": "", "signature": " JmxMetricPoller(\n      JmxConnector connector, ObjectName query, MetricFilter counters)", "full_signature": "public  JmxMetricPoller(\n      JmxConnector connector, ObjectName query, MetricFilter counters)", "class_method_signature": "JmxMetricPoller.JmxMetricPoller(\n      JmxConnector connector, ObjectName query, MetricFilter counters)", "testcase": false, "constructor": true}, {"identifier": "JmxMetricPoller", "parameters": "(\n      JmxConnector connector, List<ObjectName> queries, MetricFilter counters)", "modifiers": "public", "return": "", "signature": " JmxMetricPoller(\n      JmxConnector connector, List<ObjectName> queries, MetricFilter counters)", "full_signature": "public  JmxMetricPoller(\n      JmxConnector connector, List<ObjectName> queries, MetricFilter counters)", "class_method_signature": "JmxMetricPoller.JmxMetricPoller(\n      JmxConnector connector, List<ObjectName> queries, MetricFilter counters)", "testcase": false, "constructor": true}, {"identifier": "JmxMetricPoller", "parameters": "(\n      JmxConnector connector, List<ObjectName> queries, MetricFilter counters,\n      boolean onlyNumericMetrics, List<Tag> defaultTags)", "modifiers": "public", "return": "", "signature": " JmxMetricPoller(\n      JmxConnector connector, List<ObjectName> queries, MetricFilter counters,\n      boolean onlyNumericMetrics, List<Tag> defaultTags)", "full_signature": "public  JmxMetricPoller(\n      JmxConnector connector, List<ObjectName> queries, MetricFilter counters,\n      boolean onlyNumericMetrics, List<Tag> defaultTags)", "class_method_signature": "JmxMetricPoller.JmxMetricPoller(\n      JmxConnector connector, List<ObjectName> queries, MetricFilter counters,\n      boolean onlyNumericMetrics, List<Tag> defaultTags)", "testcase": false, "constructor": true}, {"identifier": "createTagList", "parameters": "(ObjectName name)", "modifiers": "private", "return": "TagList", "signature": "TagList createTagList(ObjectName name)", "full_signature": "private TagList createTagList(ObjectName name)", "class_method_signature": "JmxMetricPoller.createTagList(ObjectName name)", "testcase": false, "constructor": false}, {"identifier": "getTagListWithAdditionalTag", "parameters": "(TagList tags, Tag extra)", "modifiers": "private static", "return": "TagList", "signature": "TagList getTagListWithAdditionalTag(TagList tags, Tag extra)", "full_signature": "private static TagList getTagListWithAdditionalTag(TagList tags, Tag extra)", "class_method_signature": "JmxMetricPoller.getTagListWithAdditionalTag(TagList tags, Tag extra)", "testcase": false, "constructor": false}, {"identifier": "addMetric", "parameters": "(\n      List<Metric> metrics,\n      String name,\n      TagList tags,\n      Object value)", "modifiers": "private", "return": "void", "signature": "void addMetric(\n      List<Metric> metrics,\n      String name,\n      TagList tags,\n      Object value)", "full_signature": "private void addMetric(\n      List<Metric> metrics,\n      String name,\n      TagList tags,\n      Object value)", "class_method_signature": "JmxMetricPoller.addMetric(\n      List<Metric> metrics,\n      String name,\n      TagList tags,\n      Object value)", "testcase": false, "constructor": false}, {"identifier": "extractValues", "parameters": "(String path, Map<String, Object> values, CompositeData obj)", "modifiers": "private", "return": "void", "signature": "void extractValues(String path, Map<String, Object> values, CompositeData obj)", "full_signature": "private void extractValues(String path, Map<String, Object> values, CompositeData obj)", "class_method_signature": "JmxMetricPoller.extractValues(String path, Map<String, Object> values, CompositeData obj)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(\n      MBeanServerConnection con,\n      MetricFilter filter,\n      List<Metric> metrics,\n      ObjectName name)", "modifiers": "private", "return": "void", "signature": "void getMetrics(\n      MBeanServerConnection con,\n      MetricFilter filter,\n      List<Metric> metrics,\n      ObjectName name)", "full_signature": "private void getMetrics(\n      MBeanServerConnection con,\n      MetricFilter filter,\n      List<Metric> metrics,\n      ObjectName name)", "class_method_signature": "JmxMetricPoller.getMetrics(\n      MBeanServerConnection con,\n      MetricFilter filter,\n      List<Metric> metrics,\n      ObjectName name)", "testcase": false, "constructor": false}, {"identifier": "addCompositeMetrics", "parameters": "(MetricFilter filter, List<Metric> metrics, TagList tags,\n                                   String attrName, CompositeData obj)", "modifiers": "private", "return": "void", "signature": "void addCompositeMetrics(MetricFilter filter, List<Metric> metrics, TagList tags,\n                                   String attrName, CompositeData obj)", "full_signature": "private void addCompositeMetrics(MetricFilter filter, List<Metric> metrics, TagList tags,\n                                   String attrName, CompositeData obj)", "class_method_signature": "JmxMetricPoller.addCompositeMetrics(MetricFilter filter, List<Metric> metrics, TagList tags,\n                                   String attrName, CompositeData obj)", "testcase": false, "constructor": false}, {"identifier": "addTabularMetrics", "parameters": "(MetricFilter filter, List<Metric> metrics, TagList tags,\n                                 String attrName, CompositeData obj)", "modifiers": "private", "return": "void", "signature": "void addTabularMetrics(MetricFilter filter, List<Metric> metrics, TagList tags,\n                                 String attrName, CompositeData obj)", "full_signature": "private void addTabularMetrics(MetricFilter filter, List<Metric> metrics, TagList tags,\n                                 String attrName, CompositeData obj)", "class_method_signature": "JmxMetricPoller.addTabularMetrics(MetricFilter filter, List<Metric> metrics, TagList tags,\n                                 String attrName, CompositeData obj)", "testcase": false, "constructor": false}, {"identifier": "asNumber", "parameters": "(Object value)", "modifiers": "private static", "return": "Number", "signature": "Number asNumber(Object value)", "full_signature": "private static Number asNumber(Object value)", "class_method_signature": "JmxMetricPoller.asNumber(Object value)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(MetricFilter filter)", "modifiers": "public", "return": "List<Metric>", "signature": "List<Metric> poll(MetricFilter filter)", "full_signature": "public List<Metric> poll(MetricFilter filter)", "class_method_signature": "JmxMetricPoller.poll(MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(MetricFilter filter, boolean reset)", "modifiers": "public", "return": "List<Metric>", "signature": "List<Metric> poll(MetricFilter filter, boolean reset)", "full_signature": "public List<Metric> poll(MetricFilter filter, boolean reset)", "class_method_signature": "JmxMetricPoller.poll(MetricFilter filter, boolean reset)", "testcase": false, "constructor": false}, {"identifier": "safelyLoadAttributes", "parameters": "(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "modifiers": "private static", "return": "List<Attribute>", "signature": "List<Attribute> safelyLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "full_signature": "private static List<Attribute> safelyLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "class_method_signature": "JmxMetricPoller.safelyLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "testcase": false, "constructor": false}, {"identifier": "batchLoadAttributes", "parameters": "(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "modifiers": "private static", "return": "List<Attribute>", "signature": "List<Attribute> batchLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "full_signature": "private static List<Attribute> batchLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "class_method_signature": "JmxMetricPoller.batchLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "testcase": false, "constructor": false}, {"identifier": "individuallyLoadAttributes", "parameters": "(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "modifiers": "private static", "return": "List<Attribute>", "signature": "List<Attribute> individuallyLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "full_signature": "private static List<Attribute> individuallyLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "class_method_signature": "JmxMetricPoller.individuallyLoadAttributes(\n      MBeanServerConnection server, ObjectName objectName, List<String> matchingNames)", "testcase": false, "constructor": false}], "file": "servo-core/src/main/java/com/netflix/servo/publish/JmxMetricPoller.java"}, "focal_method": {"identifier": "poll", "parameters": "(MetricFilter filter)", "modifiers": "public", "return": "List<Metric>", "body": "public List<Metric> poll(MetricFilter filter) {\n    return poll(filter, false);\n  }", "signature": "List<Metric> poll(MetricFilter filter)", "full_signature": "public List<Metric> poll(MetricFilter filter)", "class_method_signature": "JmxMetricPoller.poll(MetricFilter filter)", "testcase": false, "constructor": false, "invocations": ["poll"]}, "repository": {"repo_id": 2997701, "url": "https://github.com/Netflix/servo", "language": "Java", "is_fork": false, "fork_count": 281, "stargazer_count": 1326, "size": 5380, "license": "licensed"}}