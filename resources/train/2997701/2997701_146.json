{"test_class": {"identifier": "StatsBufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final double[] PERCENTILES = {50.0, 95.0, 99.0, 99.5};", "modifier": "static final", "type": "double[]", "declarator": "PERCENTILES = {50.0, 95.0, 99.0, 99.5}", "var_name": "PERCENTILES"}, {"original_string": "private static final int SIZE = 1000;", "modifier": "private static final", "type": "int", "declarator": "SIZE = 1000", "var_name": "SIZE"}, {"original_string": "static final long EXPECTED_TOTAL_WRAP = SIZE * (SIZE + 1) / 2;", "modifier": "static final", "type": "long", "declarator": "EXPECTED_TOTAL_WRAP = SIZE * (SIZE + 1) / 2", "var_name": "EXPECTED_TOTAL_WRAP"}, {"original_string": "static final double EXPECTED_VARIANCE_WRAP = 83416.66667;", "modifier": "static final", "type": "double", "declarator": "EXPECTED_VARIANCE_WRAP = 83416.66667", "var_name": "EXPECTED_VARIANCE_WRAP"}], "file": "servo-core/src/test/java/com/netflix/servo/stats/StatsBufferTest.java"}, "test_case": {"identifier": "testMinWrap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMinWrap() {\n    StatsBuffer buffer = getWithWrap();\n    assertEquals(buffer.getMin(), 1);\n  }", "signature": "void testMinWrap()", "full_signature": "@Test public void testMinWrap()", "class_method_signature": "StatsBufferTest.testMinWrap()", "testcase": true, "constructor": false, "invocations": ["getWithWrap", "assertEquals", "getMin"]}, "focal_class": {"identifier": "StatsBuffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int pos;", "modifier": "private", "type": "int", "declarator": "pos", "var_name": "pos"}, {"original_string": "private int curSize;", "modifier": "private", "type": "int", "declarator": "curSize", "var_name": "curSize"}, {"original_string": "private double mean;", "modifier": "private", "type": "double", "declarator": "mean", "var_name": "mean"}, {"original_string": "private double variance;", "modifier": "private", "type": "double", "declarator": "variance", "var_name": "variance"}, {"original_string": "private double stddev;", "modifier": "private", "type": "double", "declarator": "stddev", "var_name": "stddev"}, {"original_string": "private long min;", "modifier": "private", "type": "long", "declarator": "min", "var_name": "min"}, {"original_string": "private long max;", "modifier": "private", "type": "long", "declarator": "max", "var_name": "max"}, {"original_string": "private long total;", "modifier": "private", "type": "long", "declarator": "total", "var_name": "total"}, {"original_string": "private final double[] percentiles;", "modifier": "private final", "type": "double[]", "declarator": "percentiles", "var_name": "percentiles"}, {"original_string": "private final double[] percentileValues;", "modifier": "private final", "type": "double[]", "declarator": "percentileValues", "var_name": "percentileValues"}, {"original_string": "private final int size;", "modifier": "private final", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private final long[] values;", "modifier": "private final", "type": "long[]", "declarator": "values", "var_name": "values"}, {"original_string": "private final AtomicBoolean statsComputed = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "statsComputed = new AtomicBoolean(false)", "var_name": "statsComputed"}], "methods": [{"identifier": "StatsBuffer", "parameters": "(int size, double[] percentiles)", "modifiers": "public", "return": "", "signature": " StatsBuffer(int size, double[] percentiles)", "full_signature": "public  StatsBuffer(int size, double[] percentiles)", "class_method_signature": "StatsBuffer.StatsBuffer(int size, double[] percentiles)", "testcase": false, "constructor": true}, {"identifier": "validPercentiles", "parameters": "(double[] percentiles)", "modifiers": "private static", "return": "boolean", "signature": "boolean validPercentiles(double[] percentiles)", "full_signature": "private static boolean validPercentiles(double[] percentiles)", "class_method_signature": "StatsBuffer.validPercentiles(double[] percentiles)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "StatsBuffer.reset()", "testcase": false, "constructor": false}, {"identifier": "record", "parameters": "(long n)", "modifiers": "public", "return": "void", "signature": "void record(long n)", "full_signature": "public void record(long n)", "class_method_signature": "StatsBuffer.record(long n)", "testcase": false, "constructor": false}, {"identifier": "computeStats", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void computeStats()", "full_signature": "public void computeStats()", "class_method_signature": "StatsBuffer.computeStats()", "testcase": false, "constructor": false}, {"identifier": "computePercentiles", "parameters": "(int curSize)", "modifiers": "private", "return": "void", "signature": "void computePercentiles(int curSize)", "full_signature": "private void computePercentiles(int curSize)", "class_method_signature": "StatsBuffer.computePercentiles(int curSize)", "testcase": false, "constructor": false}, {"identifier": "calcPercentile", "parameters": "(int curSize, double percent)", "modifiers": "private", "return": "double", "signature": "double calcPercentile(int curSize, double percent)", "full_signature": "private double calcPercentile(int curSize, double percent)", "class_method_signature": "StatsBuffer.calcPercentile(int curSize, double percent)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCount()", "full_signature": "public int getCount()", "class_method_signature": "StatsBuffer.getCount()", "testcase": false, "constructor": false}, {"identifier": "getMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMean()", "full_signature": "public double getMean()", "class_method_signature": "StatsBuffer.getMean()", "testcase": false, "constructor": false}, {"identifier": "getVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getVariance()", "full_signature": "public double getVariance()", "class_method_signature": "StatsBuffer.getVariance()", "testcase": false, "constructor": false}, {"identifier": "getStdDev", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getStdDev()", "full_signature": "public double getStdDev()", "class_method_signature": "StatsBuffer.getStdDev()", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMin()", "full_signature": "public long getMin()", "class_method_signature": "StatsBuffer.getMin()", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMax()", "full_signature": "public long getMax()", "class_method_signature": "StatsBuffer.getMax()", "testcase": false, "constructor": false}, {"identifier": "getTotalTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTotalTime()", "full_signature": "public long getTotalTime()", "class_method_signature": "StatsBuffer.getTotalTime()", "testcase": false, "constructor": false}, {"identifier": "getPercentileValues", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getPercentileValues()", "full_signature": "public double[] getPercentileValues()", "class_method_signature": "StatsBuffer.getPercentileValues()", "testcase": false, "constructor": false}, {"identifier": "getPercentiles", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getPercentiles()", "full_signature": "public double[] getPercentiles()", "class_method_signature": "StatsBuffer.getPercentiles()", "testcase": false, "constructor": false}, {"identifier": "getPercentileValueForIdx", "parameters": "(int index)", "modifiers": "public", "return": "double", "signature": "double getPercentileValueForIdx(int index)", "full_signature": "public double getPercentileValueForIdx(int index)", "class_method_signature": "StatsBuffer.getPercentileValueForIdx(int index)", "testcase": false, "constructor": false}], "file": "servo-core/src/main/java/com/netflix/servo/stats/StatsBuffer.java"}, "focal_method": {"identifier": "getMin", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getMin() {\n    return min;\n  }", "signature": "long getMin()", "full_signature": "public long getMin()", "class_method_signature": "StatsBuffer.getMin()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2997701, "url": "https://github.com/Netflix/servo", "language": "Java", "is_fork": false, "fork_count": 281, "stargazer_count": 1326, "size": 5380, "license": "licensed"}}