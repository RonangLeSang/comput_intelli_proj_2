{"test_class": {"identifier": "PathTest", "superclass": "", "interfaces": "", "fields": [], "file": "brix-core/src/test/java/org/brixcms/PathTest.java"}, "test_case": {"identifier": "append", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void append() {\n        assertEquals(new Path(\"/\").append(new Path(\"foo\")), new Path(\"/foo\"));\n        assertEquals(new Path(\"/\").append(new Path(\"foo/bar\")), new Path(\"/foo/bar\"));\n        assertEquals(new Path(\"/foo\").append(new Path(\"bar\")), new Path(\"/foo/bar\"));\n        assertEquals(new Path(\"/foo\").append(new Path(\"../bar\")), new Path(\"/bar\"));\n        assertEquals(new Path(\"/foo\").append(new Path(\"../../bar\")), new Path(\"/bar\"));\n        assertEquals(new Path(\"foo\").append(new Path(\"bar\")), new Path(\"foo/bar\"));\n        assertEquals(new Path(\"foo\").append(new Path(\"../bar\")), new Path(\"bar\"));\n        assertEquals(new Path(\"foo\").append(new Path(\"../../bar\")), new Path(\"../bar\"));\n\n        try {\n            new Path(\"/foo\").append(new Path(\"/\"));\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n    }", "signature": "void append()", "full_signature": "@Test public void append()", "class_method_signature": "PathTest.append()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "append", "assertEquals", "append", "assertEquals", "append", "assertEquals", "append", "assertEquals", "append", "assertEquals", "append", "assertEquals", "append", "assertEquals", "append", "append", "fail"]}, "focal_class": {"identifier": "Path", "superclass": "", "interfaces": "implements Iterable<String>, Serializable", "fields": [{"original_string": "private static final String SEPARATOR = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \"/\"", "var_name": "SEPARATOR"}, {"original_string": "public static final Path ROOT = new Path(SEPARATOR);", "modifier": "public static final", "type": "Path", "declarator": "ROOT = new Path(SEPARATOR)", "var_name": "ROOT"}, {"original_string": "public static final Comparator<Path> SMALLEST_FIRST_COMPARATOR = new Comparator<Path>() {\n        public int compare(Path o1, Path o2) {\n            if (o1 == o2) {\n                return 0;\n            } else if (o1 == null) {\n                return -1;\n            } else if (o2 == null) {\n                return 1;\n            } else {\n                int s1 = o1.size();\n                int s2 = o2.size();\n                if (s1 == s2) {\n                    return o1.path.compareTo(o2.path);\n                } else {\n                    return o1.size() - o2.size();\n                }\n            }\n        }\n    };", "modifier": "public static final", "type": "Comparator<Path>", "declarator": "SMALLEST_FIRST_COMPARATOR = new Comparator<Path>() {\n        public int compare(Path o1, Path o2) {\n            if (o1 == o2) {\n                return 0;\n            } else if (o1 == null) {\n                return -1;\n            } else if (o2 == null) {\n                return 1;\n            } else {\n                int s1 = o1.size();\n                int s2 = o2.size();\n                if (s1 == s2) {\n                    return o1.path.compareTo(o2.path);\n                } else {\n                    return o1.size() - o2.size();\n                }\n            }\n        }\n    }", "var_name": "SMALLEST_FIRST_COMPARATOR"}, {"original_string": "public static final Comparator<Path> LARGEST_FIRST_COMPARATOR = new Comparator<Path>() {\n        public int compare(Path o1, Path o2) {\n            if (o1 == o2) {\n                return 0;\n            } else if (o1 == null) {\n                return -1;\n            } else if (o2 == null) {\n                return 1;\n            } else {\n                int s1 = o1.size();\n                int s2 = o2.size();\n                if (s1 == s2) {\n                    return o1.path.compareTo(o2.path);\n                } else {\n                    return o1.size() - o2.size();\n                }\n            }\n        }\n\n    };", "modifier": "public static final", "type": "Comparator<Path>", "declarator": "LARGEST_FIRST_COMPARATOR = new Comparator<Path>() {\n        public int compare(Path o1, Path o2) {\n            if (o1 == o2) {\n                return 0;\n            } else if (o1 == null) {\n                return -1;\n            } else if (o2 == null) {\n                return 1;\n            } else {\n                int s1 = o1.size();\n                int s2 = o2.size();\n                if (s1 == s2) {\n                    return o1.path.compareTo(o2.path);\n                } else {\n                    return o1.size() - o2.size();\n                }\n            }\n        }\n\n    }", "var_name": "LARGEST_FIRST_COMPARATOR"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}], "methods": [{"identifier": "Path", "parameters": "(String path)", "modifiers": "public", "return": "", "signature": " Path(String path)", "full_signature": "public  Path(String path)", "class_method_signature": "Path.Path(String path)", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(String path, boolean canonize)", "modifiers": "public", "return": "", "signature": " Path(String path, boolean canonize)", "full_signature": "public  Path(String path, boolean canonize)", "class_method_signature": "Path.Path(String path, boolean canonize)", "testcase": false, "constructor": true}, {"identifier": "canonical", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path canonical()", "full_signature": "public Path canonical()", "class_method_signature": "Path.canonical()", "testcase": false, "constructor": false}, {"identifier": "isCanonical", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCanonical()", "full_signature": "public boolean isCanonical()", "class_method_signature": "Path.isCanonical()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "public boolean isRoot()", "class_method_signature": "Path.isRoot()", "testcase": false, "constructor": false}, {"identifier": "doCanonical", "parameters": "()", "modifiers": "private", "return": "Path", "signature": "Path doCanonical()", "full_signature": "private Path doCanonical()", "class_method_signature": "Path.doCanonical()", "testcase": false, "constructor": false}, {"identifier": "isAbsolute", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAbsolute()", "full_signature": "public boolean isAbsolute()", "class_method_signature": "Path.isAbsolute()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Path.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Path.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Path.toString()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<String>", "signature": "Iterator<String> iterator()", "full_signature": "public Iterator<String> iterator()", "class_method_signature": "Path.iterator()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Path.getName()", "testcase": false, "constructor": false}, {"identifier": "isAncestorOf", "parameters": "(Path other)", "modifiers": "public", "return": "boolean", "signature": "boolean isAncestorOf(Path other)", "full_signature": "public boolean isAncestorOf(Path other)", "class_method_signature": "Path.isAncestorOf(Path other)", "testcase": false, "constructor": false}, {"identifier": "isDescendantOf", "parameters": "(Path other)", "modifiers": "public", "return": "boolean", "signature": "boolean isDescendantOf(Path other)", "full_signature": "public boolean isDescendantOf(Path other)", "class_method_signature": "Path.isDescendantOf(Path other)", "testcase": false, "constructor": false}, {"identifier": "isParentOf", "parameters": "(Path other)", "modifiers": "public", "return": "boolean", "signature": "boolean isParentOf(Path other)", "full_signature": "public boolean isParentOf(Path other)", "class_method_signature": "Path.isParentOf(Path other)", "testcase": false, "constructor": false}, {"identifier": "isChildOf", "parameters": "(Path other)", "modifiers": "public", "return": "boolean", "signature": "boolean isChildOf(Path other)", "full_signature": "public boolean isChildOf(Path other)", "class_method_signature": "Path.isChildOf(Path other)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Path.size()", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path parent()", "full_signature": "public Path parent()", "class_method_signature": "Path.parent()", "testcase": false, "constructor": false}, {"identifier": "part", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String part(int index)", "full_signature": "public String part(int index)", "class_method_signature": "Path.part(int index)", "testcase": false, "constructor": false}, {"identifier": "subpath", "parameters": "(int idx)", "modifiers": "public", "return": "Path", "signature": "Path subpath(int idx)", "full_signature": "public Path subpath(int idx)", "class_method_signature": "Path.subpath(int idx)", "testcase": false, "constructor": false}, {"identifier": "toAbsolute", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path toAbsolute()", "full_signature": "public Path toAbsolute()", "class_method_signature": "Path.toAbsolute()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Path relative)", "modifiers": "public", "return": "Path", "signature": "Path append(Path relative)", "full_signature": "public Path append(Path relative)", "class_method_signature": "Path.append(Path relative)", "testcase": false, "constructor": false}, {"identifier": "toRelative", "parameters": "(Path ancestor)", "modifiers": "public", "return": "Path", "signature": "Path toRelative(Path ancestor)", "full_signature": "public Path toRelative(Path ancestor)", "class_method_signature": "Path.toRelative(Path ancestor)", "testcase": false, "constructor": false}], "file": "brix-core/src/main/java/org/brixcms/Path.java"}, "focal_method": {"identifier": "append", "parameters": "(Path relative)", "modifiers": "public", "return": "Path", "body": "public Path append(Path relative) {\n        if (relative == null) {\n            throw new IllegalArgumentException(\"Argument 'relative' cannot be null\");\n        }\n        if (relative.isAbsolute()) {\n            throw new IllegalArgumentException(\"Cannot append an absolute path\");\n        }\n\n        StringBuilder appended = new StringBuilder(path.length() + 1 + relative.path.length());\n        appended.append(path);\n        if (!path.endsWith(SEPARATOR)) {\n            appended.append(\"/\");\n        }\n        appended.append(relative.path);\n        return new Path(appended.toString());\n    }", "signature": "Path append(Path relative)", "full_signature": "public Path append(Path relative)", "class_method_signature": "Path.append(Path relative)", "testcase": false, "constructor": false, "invocations": ["isAbsolute", "length", "length", "append", "endsWith", "append", "append", "toString"]}, "repository": {"repo_id": 1017889, "url": "https://github.com/brix-cms/brix-cms", "language": "Java", "is_fork": false, "fork_count": 51, "stargazer_count": 119, "size": 5710, "license": "licensed"}}