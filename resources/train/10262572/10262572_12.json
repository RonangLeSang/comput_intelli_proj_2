{"test_class": {"identifier": "MICTest", "superclass": "", "interfaces": "", "fields": [], "file": "as2-lib/src/test/java/com/helger/as2lib/crypto/MICTest.java"}, "test_case": {"identifier": "testParseInvalidNoSep", "parameters": "()", "modifiers": "@Test (expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test (expected = IllegalArgumentException.class)\n  public void testParseInvalidNoSep ()\n  {\n    MIC.parse (\"VGVzdA==\");\n  }", "signature": "void testParseInvalidNoSep()", "full_signature": "@Test (expected = IllegalArgumentException.class) public void testParseInvalidNoSep()", "class_method_signature": "MICTest.testParseInvalidNoSep()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "MIC", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private final byte [] m_aMICBytes;", "modifier": "private final", "type": "byte []", "declarator": "m_aMICBytes", "var_name": "m_aMICBytes"}, {"original_string": "private final ECryptoAlgorithmSign m_eDigestAlgorithm;", "modifier": "private final", "type": "ECryptoAlgorithmSign", "declarator": "m_eDigestAlgorithm", "var_name": "m_eDigestAlgorithm"}], "methods": [{"identifier": "MIC", "parameters": "(@Nonnull final byte [] aMICBytes, @Nonnull final ECryptoAlgorithmSign eDigestAlgorithm)", "modifiers": "public", "return": "", "signature": " MIC(@Nonnull final byte [] aMICBytes, @Nonnull final ECryptoAlgorithmSign eDigestAlgorithm)", "full_signature": "public  MIC(@Nonnull final byte [] aMICBytes, @Nonnull final ECryptoAlgorithmSign eDigestAlgorithm)", "class_method_signature": "MIC.MIC(@Nonnull final byte [] aMICBytes, @Nonnull final ECryptoAlgorithmSign eDigestAlgorithm)", "testcase": false, "constructor": true}, {"identifier": "micBytes", "parameters": "()", "modifiers": "@Nonnull public", "return": "byte []", "signature": "byte [] micBytes()", "full_signature": "@Nonnull public byte [] micBytes()", "class_method_signature": "MIC.micBytes()", "testcase": false, "constructor": false}, {"identifier": "getDigestAlgorithm", "parameters": "()", "modifiers": "@Nonnull public", "return": "ECryptoAlgorithmSign", "signature": "ECryptoAlgorithmSign getDigestAlgorithm()", "full_signature": "@Nonnull public ECryptoAlgorithmSign getDigestAlgorithm()", "class_method_signature": "MIC.getDigestAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "getAsAS2String", "parameters": "()", "modifiers": "@Nonnull @Nonempty public", "return": "String", "signature": "String getAsAS2String()", "full_signature": "@Nonnull @Nonempty public String getAsAS2String()", "class_method_signature": "MIC.getAsAS2String()", "testcase": false, "constructor": false}, {"identifier": "_getUnified", "parameters": "(@Nonnull final ECryptoAlgorithmSign eAlgorithm)", "modifiers": "@SuppressWarnings (\"deprecation\") @Nonnull private static", "return": "ECryptoAlgorithmSign", "signature": "ECryptoAlgorithmSign _getUnified(@Nonnull final ECryptoAlgorithmSign eAlgorithm)", "full_signature": "@SuppressWarnings (\"deprecation\") @Nonnull private static ECryptoAlgorithmSign _getUnified(@Nonnull final ECryptoAlgorithmSign eAlgorithm)", "class_method_signature": "MIC._getUnified(@Nonnull final ECryptoAlgorithmSign eAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "MIC.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MIC.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MIC.toString()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@Nullable final String sMIC)", "modifiers": "@Nullable public static", "return": "MIC", "signature": "MIC parse(@Nullable final String sMIC)", "full_signature": "@Nullable public static MIC parse(@Nullable final String sMIC)", "class_method_signature": "MIC.parse(@Nullable final String sMIC)", "testcase": false, "constructor": false}], "file": "as2-lib/src/main/java/com/helger/as2lib/crypto/MIC.java"}, "focal_method": {"identifier": "parse", "parameters": "(@Nullable final String sMIC)", "modifiers": "@Nullable public static", "return": "MIC", "body": "@Nullable\n  public static MIC parse (@Nullable final String sMIC)\n  {\n    if (StringHelper.hasNoText (sMIC))\n      return null;\n\n    final StringTokenizer st = new StringTokenizer (sMIC, \", \\t\\r\\n\");\n\n    final String sMICBytes = st.nextToken ();\n    final byte [] aMICBytes = Base64.safeDecode (sMICBytes);\n    if (aMICBytes == null)\n      throw new IllegalArgumentException (\"Failed to base64 decode '\" + sMICBytes + \"'\");\n\n    if (!st.hasMoreTokens ())\n      throw new IllegalArgumentException (\"Separator after Base64 bytes is missing\");\n\n    final String sAlgorithm = st.nextToken ();\n    final ECryptoAlgorithmSign eDigestAlgorithm = ECryptoAlgorithmSign.getFromIDOrNull (sAlgorithm);\n    if (eDigestAlgorithm == null)\n      throw new IllegalArgumentException (\"Failed to parse digest algorithm '\" + sAlgorithm + \"'\");\n    return new MIC (aMICBytes, eDigestAlgorithm);\n  }", "signature": "MIC parse(@Nullable final String sMIC)", "full_signature": "@Nullable public static MIC parse(@Nullable final String sMIC)", "class_method_signature": "MIC.parse(@Nullable final String sMIC)", "testcase": false, "constructor": false, "invocations": ["hasNoText", "nextToken", "safeDecode", "hasMoreTokens", "nextToken", "getFromIDOrNull"]}, "repository": {"repo_id": 10262572, "url": "https://github.com/phax/as2-lib", "stars": 55, "created": "5/24/2013 8:45:41 AM +00:00", "updates": "2020-01-22T11:13:00+00:00", "fork": "False", "license": "licensed"}}