{"test_class": {"identifier": "MathUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static double powerOfTwo_EXPECTED;", "modifier": "static", "type": "double", "declarator": "powerOfTwo_EXPECTED", "var_name": "powerOfTwo_EXPECTED"}, {"original_string": "static double notPowerOfTwo_EXPECTED;", "modifier": "static", "type": "double", "declarator": "notPowerOfTwo_EXPECTED", "var_name": "notPowerOfTwo_EXPECTED"}, {"original_string": "static long oddVal_EXPECTED;", "modifier": "static", "type": "long", "declarator": "oddVal_EXPECTED", "var_name": "oddVal_EXPECTED"}, {"original_string": "static long evenVal_EXPECTED;", "modifier": "static", "type": "long", "declarator": "evenVal_EXPECTED", "var_name": "evenVal_EXPECTED"}, {"original_string": "static double valInDegrees_EXPECTED;", "modifier": "static", "type": "double", "declarator": "valInDegrees_EXPECTED", "var_name": "valInDegrees_EXPECTED"}, {"original_string": "static double valInRadians_EXPECTED;", "modifier": "static", "type": "double", "declarator": "valInRadians_EXPECTED", "var_name": "valInRadians_EXPECTED"}, {"original_string": "static double[] increment_1D_EXPECTED;", "modifier": "static", "type": "double[]", "declarator": "increment_1D_EXPECTED", "var_name": "increment_1D_EXPECTED"}, {"original_string": "static double[][] increment_2D_EXPECTED;", "modifier": "static", "type": "double[][]", "declarator": "increment_2D_EXPECTED", "var_name": "increment_2D_EXPECTED"}, {"original_string": "final static double VALUE = 2;", "modifier": "final static", "type": "double", "declarator": "VALUE = 2", "var_name": "VALUE"}, {"original_string": "final static double EXPONENT = 2;", "modifier": "final static", "type": "double", "declarator": "EXPONENT = 2", "var_name": "EXPONENT"}, {"original_string": "final static double DELTA = Math.pow(10, -6);", "modifier": "final static", "type": "double", "declarator": "DELTA = Math.pow(10, -6)", "var_name": "DELTA"}, {"original_string": "static int nRows;", "modifier": "static", "type": "int", "declarator": "nRows", "var_name": "nRows"}, {"original_string": "static int nCols;", "modifier": "static", "type": "int", "declarator": "nCols", "var_name": "nCols"}, {"original_string": "static double[] ramp_1D_EXPECTED;", "modifier": "static", "type": "double[]", "declarator": "ramp_1D_EXPECTED", "var_name": "ramp_1D_EXPECTED"}, {"original_string": "static DoubleMatrix ramp_2D_EXPECTED;", "modifier": "static", "type": "DoubleMatrix", "declarator": "ramp_2D_EXPECTED", "var_name": "ramp_2D_EXPECTED"}, {"original_string": "final static int[][] distributedPoints_EXPECTED = {\n            {0, 0},\n            {0, 3921},\n            {3707, 2941},\n            {7413, 1961},\n            {11120, 980},\n            {14826, 0},\n            {14826, 3921},\n            {18533, 2940},\n            {22239, 1960},\n            {25945, 980},\n            {25945, 4900}\n    };", "modifier": "final static", "type": "int[][]", "declarator": "distributedPoints_EXPECTED = {\n            {0, 0},\n            {0, 3921},\n            {3707, 2941},\n            {7413, 1961},\n            {11120, 980},\n            {14826, 0},\n            {14826, 3921},\n            {18533, 2940},\n            {22239, 1960},\n            {25945, 980},\n            {25945, 4900}\n    }", "var_name": "distributedPoints_EXPECTED"}, {"original_string": "final static int numOfPnts = 11;", "modifier": "final static", "type": "int", "declarator": "numOfPnts = 11", "var_name": "numOfPnts"}, {"original_string": "final static Window winForDistribution = new Window(0, 25945, 0, 4900);", "modifier": "final static", "type": "Window", "declarator": "winForDistribution = new Window(0, 25945, 0, 4900)", "var_name": "winForDistribution"}], "file": "jlinda-core/src/test/java/org/jlinda/core/utils/MathUtilsTest.java"}, "test_case": {"identifier": "testDeg2rad", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeg2rad() throws Exception {\n        Assert.assertEquals(valInRadians_EXPECTED, MathUtils.deg2rad(valInDegrees_EXPECTED), DELTA);\n    }", "signature": "void testDeg2rad()", "full_signature": "@Test public void testDeg2rad()", "class_method_signature": "MathUtilsTest.testDeg2rad()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "deg2rad"]}, "focal_class": {"identifier": "MathUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isEven", "parameters": "(long value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEven(long value)", "full_signature": "public static boolean isEven(long value)", "class_method_signature": "MathUtils.isEven(long value)", "testcase": false, "constructor": false}, {"identifier": "isOdd", "parameters": "(long value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOdd(long value)", "full_signature": "public static boolean isOdd(long value)", "class_method_signature": "MathUtils.isOdd(long value)", "testcase": false, "constructor": false}, {"identifier": "isPower2", "parameters": "(long value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPower2(long value)", "full_signature": "public static boolean isPower2(long value)", "class_method_signature": "MathUtils.isPower2(long value)", "testcase": false, "constructor": false}, {"identifier": "rad2deg", "parameters": "(double valueInRadians)", "modifiers": "public static", "return": "double", "signature": "double rad2deg(double valueInRadians)", "full_signature": "public static double rad2deg(double valueInRadians)", "class_method_signature": "MathUtils.rad2deg(double valueInRadians)", "testcase": false, "constructor": false}, {"identifier": "deg2rad", "parameters": "(double valueInDegrees)", "modifiers": "public static", "return": "double", "signature": "double deg2rad(double valueInDegrees)", "full_signature": "public static double deg2rad(double valueInDegrees)", "class_method_signature": "MathUtils.deg2rad(double valueInDegrees)", "testcase": false, "constructor": false}, {"identifier": "distributePoints", "parameters": "(final int numOfPoints, final Window window)", "modifiers": "public static", "return": "int[][]", "signature": "int[][] distributePoints(final int numOfPoints, final Window window)", "full_signature": "public static int[][] distributePoints(final int numOfPoints, final Window window)", "class_method_signature": "MathUtils.distributePoints(final int numOfPoints, final Window window)", "testcase": false, "constructor": false}, {"identifier": "distributePointsDoubles", "parameters": "(final int numOfPoints, final Window window)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] distributePointsDoubles(final int numOfPoints, final Window window)", "full_signature": "public static double[][] distributePointsDoubles(final int numOfPoints, final Window window)", "class_method_signature": "MathUtils.distributePointsDoubles(final int numOfPoints, final Window window)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(int m, double begin, double pitch)", "modifiers": "public static", "return": "double[]", "signature": "double[] increment(int m, double begin, double pitch)", "full_signature": "public static double[] increment(int m, double begin, double pitch)", "class_method_signature": "MathUtils.increment(int m, double begin, double pitch)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(int m, int n, double begin, double pitch)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] increment(int m, int n, double begin, double pitch)", "full_signature": "public static double[][] increment(int m, int n, double begin, double pitch)", "class_method_signature": "MathUtils.increment(int m, int n, double begin, double pitch)", "testcase": false, "constructor": false}, {"identifier": "ramp", "parameters": "(final int nRows, final int nColumns)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix ramp(final int nRows, final int nColumns)", "full_signature": "public static DoubleMatrix ramp(final int nRows, final int nColumns)", "class_method_signature": "MathUtils.ramp(final int nRows, final int nColumns)", "testcase": false, "constructor": false}, {"identifier": "lying", "parameters": "(DoubleMatrix inMatrix)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix lying(DoubleMatrix inMatrix)", "full_signature": "public static DoubleMatrix lying(DoubleMatrix inMatrix)", "class_method_signature": "MathUtils.lying(DoubleMatrix inMatrix)", "testcase": false, "constructor": false}, {"identifier": "randomIntInRange", "parameters": "(int min, int max)", "modifiers": "public static", "return": "int", "signature": "int randomIntInRange(int min, int max)", "full_signature": "public static int randomIntInRange(int min, int max)", "class_method_signature": "MathUtils.randomIntInRange(int min, int max)", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "(double value)", "modifiers": "@Deprecated public static", "return": "double", "signature": "double sqrt(double value)", "full_signature": "@Deprecated public static double sqrt(double value)", "class_method_signature": "MathUtils.sqrt(double value)", "testcase": false, "constructor": false}, {"identifier": "sqr", "parameters": "(double value)", "modifiers": "@Deprecated public static", "return": "double", "signature": "double sqr(double value)", "full_signature": "@Deprecated public static double sqr(double value)", "class_method_signature": "MathUtils.sqr(double value)", "testcase": false, "constructor": false}], "file": "jlinda-core/src/main/java/org/jlinda/core/utils/MathUtils.java"}, "focal_method": {"identifier": "deg2rad", "parameters": "(double valueInDegrees)", "modifiers": "public static", "return": "double", "body": "public static double deg2rad(double valueInDegrees) {\n//        return Math.toDegrees(rad);\n        return valueInDegrees * Constants.DTOR;\n    }", "signature": "double deg2rad(double valueInDegrees)", "full_signature": "public static double deg2rad(double valueInDegrees)", "class_method_signature": "MathUtils.deg2rad(double valueInDegrees)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10548179, "url": "https://github.com/ppolabs/jlinda", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 2628, "license": "licensed"}}