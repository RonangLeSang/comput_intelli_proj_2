{"test_class": {"identifier": "SarUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static int nRows = 128;", "modifier": "static", "type": "int", "declarator": "nRows = 128", "var_name": "nRows"}, {"original_string": "static int nCols = 256;", "modifier": "static", "type": "int", "declarator": "nCols = 256", "var_name": "nCols"}, {"original_string": "static ComplexDoubleMatrix cplxData;", "modifier": "static", "type": "ComplexDoubleMatrix", "declarator": "cplxData", "var_name": "cplxData"}, {"original_string": "private static final double DELTA_08 = 1e-08;", "modifier": "private static final", "type": "double", "declarator": "DELTA_08 = 1e-08", "var_name": "DELTA_08"}, {"original_string": "private static final double DELTA_04 = 1e-04;", "modifier": "private static final", "type": "double", "declarator": "DELTA_04 = 1e-04", "var_name": "DELTA_04"}, {"original_string": "private static final String testDataLocation = \"test/\";", "modifier": "private static final", "type": "String", "declarator": "testDataLocation = \"test/\"", "var_name": "testDataLocation"}, {"original_string": "private static final String testDataLocationCoh = \"/d2/etna_test/cohTest/\";", "modifier": "private static final", "type": "String", "declarator": "testDataLocationCoh = \"/d2/etna_test/cohTest/\"", "var_name": "testDataLocationCoh"}], "file": "jlinda-core/src/test/java/org/jlinda/core/utils/SarUtilsTest.java"}, "test_case": {"identifier": "testCoherence2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCoherence2() throws Exception {\n\n        // get test data\n        String fileTestDataName_1 = testDataLocationCoh + \"CINT_input\" + \".cr4.swap\";\n        String fileTestDataName_2 = testDataLocationCoh + \"NORMS_input\" + \".cr4.swap\";\n\n        final int nRows = 128;\n        final int nCols = 512;\n        final ComplexDoubleMatrix masterCplx = readCplxFloatData(fileTestDataName_1, nRows, nCols);\n        final ComplexDoubleMatrix slaveCplx = readCplxFloatData(fileTestDataName_2, nRows, nCols);\n\n        // loop through tests\n        final int[] cohWinAz = new int[]{2, 10, 10, 20};\n        final int[] cohWinRg = new int[]{2, 2, 10, 4};\n\n        for (int i = 0; i < cohWinAz.length; i++) {\n\n            int winAz = cohWinAz[i];\n            int winRg = cohWinRg[i];\n\n//            long time0 = System.currentTimeMillis();\n            // estimate coherence\n            DoubleMatrix coh_ACTUAL = SarUtils.coherence2(masterCplx, slaveCplx, winAz, winRg);\n//            long time1 = System.currentTimeMillis();\n//            System.out.printf(\"Coherence estimated in %10.3f sec\\n\", (0.001 * (time1 - time0)));\n\n            int cohRows = coh_ACTUAL.rows;\n            int cohCols = coh_ACTUAL.columns;\n\n            // read EXPECTED data\n            String fileName = testDataLocationCoh + \"coherence_output_\" + winAz + \"_\" + winRg + \".r4.swap\";\n            FloatMatrix coh_EXPECTED = readFloatData(fileName, cohRows, cohCols);\n\n            // assertEqual\n            Assert.assertArrayEquals(coh_EXPECTED.toArray(), coh_ACTUAL.toFloat().toArray(), (float) DELTA_04);\n        }\n    }", "signature": "void testCoherence2()", "full_signature": "@Test public void testCoherence2()", "class_method_signature": "SarUtilsTest.testCoherence2()", "testcase": true, "constructor": false, "invocations": ["readCplxFloatData", "readCplxFloatData", "coherence2", "readFloatData", "assertArrayEquals", "toArray", "toArray", "toFloat"]}, "focal_class": {"identifier": "SarUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = Logger.getLogger(SarUtils.class.getName());", "modifier": "static", "type": "Logger", "declarator": "logger = Logger.getLogger(SarUtils.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "oversample", "parameters": "(ComplexDoubleMatrix inputMatrix, final int factorRow, final int factorCol)", "modifiers": "public static", "return": "ComplexDoubleMatrix", "signature": "ComplexDoubleMatrix oversample(ComplexDoubleMatrix inputMatrix, final int factorRow, final int factorCol)", "full_signature": "public static ComplexDoubleMatrix oversample(ComplexDoubleMatrix inputMatrix, final int factorRow, final int factorCol)", "class_method_signature": "SarUtils.oversample(ComplexDoubleMatrix inputMatrix, final int factorRow, final int factorCol)", "testcase": false, "constructor": false}, {"identifier": "intensity", "parameters": "(final ComplexDoubleMatrix inputMatrix)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix intensity(final ComplexDoubleMatrix inputMatrix)", "full_signature": "public static DoubleMatrix intensity(final ComplexDoubleMatrix inputMatrix)", "class_method_signature": "SarUtils.intensity(final ComplexDoubleMatrix inputMatrix)", "testcase": false, "constructor": false}, {"identifier": "magnitude", "parameters": "(final ComplexDoubleMatrix inputMatrix)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix magnitude(final ComplexDoubleMatrix inputMatrix)", "full_signature": "public static DoubleMatrix magnitude(final ComplexDoubleMatrix inputMatrix)", "class_method_signature": "SarUtils.magnitude(final ComplexDoubleMatrix inputMatrix)", "testcase": false, "constructor": false}, {"identifier": "angle", "parameters": "(final ComplexDoubleMatrix cplxData)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix angle(final ComplexDoubleMatrix cplxData)", "full_signature": "public static DoubleMatrix angle(final ComplexDoubleMatrix cplxData)", "class_method_signature": "SarUtils.angle(final ComplexDoubleMatrix cplxData)", "testcase": false, "constructor": false}, {"identifier": "coherence", "parameters": "(final ComplexDoubleMatrix inputMatrix, final ComplexDoubleMatrix normsMatrix, final int winL, final int winP)", "modifiers": "@Deprecated public static", "return": "DoubleMatrix", "signature": "DoubleMatrix coherence(final ComplexDoubleMatrix inputMatrix, final ComplexDoubleMatrix normsMatrix, final int winL, final int winP)", "full_signature": "@Deprecated public static DoubleMatrix coherence(final ComplexDoubleMatrix inputMatrix, final ComplexDoubleMatrix normsMatrix, final int winL, final int winP)", "class_method_signature": "SarUtils.coherence(final ComplexDoubleMatrix inputMatrix, final ComplexDoubleMatrix normsMatrix, final int winL, final int winP)", "testcase": false, "constructor": false}, {"identifier": "coherence2", "parameters": "(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix coherence2(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP)", "full_signature": "public static DoubleMatrix coherence2(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP)", "class_method_signature": "SarUtils.coherence2(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP)", "testcase": false, "constructor": false}, {"identifier": "coherenceProduct", "parameters": "(final ComplexDouble sum, final ComplexDouble power)", "modifiers": "static", "return": "double", "signature": "double coherenceProduct(final ComplexDouble sum, final ComplexDouble power)", "full_signature": "static double coherenceProduct(final ComplexDouble sum, final ComplexDouble power)", "class_method_signature": "SarUtils.coherenceProduct(final ComplexDouble sum, final ComplexDouble power)", "testcase": false, "constructor": false}, {"identifier": "multilook", "parameters": "(final ComplexDoubleMatrix inputMatrix, final int factorRow, final int factorColumn)", "modifiers": "public static", "return": "ComplexDoubleMatrix", "signature": "ComplexDoubleMatrix multilook(final ComplexDoubleMatrix inputMatrix, final int factorRow, final int factorColumn)", "full_signature": "public static ComplexDoubleMatrix multilook(final ComplexDoubleMatrix inputMatrix, final int factorRow, final int factorColumn)", "class_method_signature": "SarUtils.multilook(final ComplexDoubleMatrix inputMatrix, final int factorRow, final int factorColumn)", "testcase": false, "constructor": false}, {"identifier": "computeIfg", "parameters": "(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData)", "modifiers": "public static", "return": "ComplexDoubleMatrix", "signature": "ComplexDoubleMatrix computeIfg(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData)", "full_signature": "public static ComplexDoubleMatrix computeIfg(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData)", "class_method_signature": "SarUtils.computeIfg(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData)", "testcase": false, "constructor": false}, {"identifier": "computeIfg_inplace", "parameters": "(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData)", "modifiers": "public static", "return": "void", "signature": "void computeIfg_inplace(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData)", "full_signature": "public static void computeIfg_inplace(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData)", "class_method_signature": "SarUtils.computeIfg_inplace(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData)", "testcase": false, "constructor": false}, {"identifier": "computeIfg", "parameters": "(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData,\n                                                 final int ovsFactorAz, final int ovsFactorRg)", "modifiers": "public static", "return": "ComplexDoubleMatrix", "signature": "ComplexDoubleMatrix computeIfg(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData,\n                                                 final int ovsFactorAz, final int ovsFactorRg)", "full_signature": "public static ComplexDoubleMatrix computeIfg(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData,\n                                                 final int ovsFactorAz, final int ovsFactorRg)", "class_method_signature": "SarUtils.computeIfg(final ComplexDoubleMatrix masterData, final ComplexDoubleMatrix slaveData,\n                                                 final int ovsFactorAz, final int ovsFactorRg)", "testcase": false, "constructor": false}], "file": "jlinda-core/src/main/java/org/jlinda/core/utils/SarUtils.java"}, "focal_method": {"identifier": "coherence2", "parameters": "(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP)", "modifiers": "public static", "return": "DoubleMatrix", "body": "public static DoubleMatrix coherence2(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP) {\n\n        logger.trace(\"coherence ver #2\");\n        if (!(winL >= winP)) {\n            logger.warn(\"coherence: estimator window size L<P not very efficiently programmed.\");\n        }\n\n        if (input.rows != norms.rows || input.rows != input.rows) {\n            logger.error(\"coherence: not same dimensions.\");\n            throw new IllegalArgumentException(\"coherence: not the same dimensions.\");\n        }\n\n        // allocate output :: account for window overlap\n        final int extent_RG = input.columns;\n        final int extent_AZ = input.rows - winL + 1;\n        DoubleMatrix result = new DoubleMatrix(input.rows - winL + 1, input.columns - winP + 1);\n\n        // temp variables\n        int i, j, k, l;\n        ComplexDouble sum;\n        ComplexDouble power;\n        int leadingZeros = (winP - 1) / 2;  // number of pixels=0 floor...\n        int trailingZeros = (winP) / 2;     // floor...\n\n        for (j = leadingZeros; j < extent_RG - trailingZeros; j++) {\n\n            sum = new ComplexDouble(0);\n            power = new ComplexDouble(0);\n\n            //// Compute sum over first data block ////\n            for (k = 0; k < winL; k++) {\n                for (l = j - leadingZeros; l < j - leadingZeros + winP; l++) {\n                    sum.addi(input.get(k, l));\n                    power.addi(norms.get(k, l));\n                }\n            }\n            result.put(0, j - leadingZeros, coherenceProduct(sum, power));\n\n            //// Compute (relatively) sum over rest of data blocks ////\n            for (i = 0; i < extent_AZ - 1; i++) {\n                for (l = j - leadingZeros; l < j - leadingZeros + winP; l++) {\n                    sum.addi(input.get(i + winL, l).sub(input.get(i, l)));\n                    power.addi(norms.get(i + winL, l).sub(norms.get(i, l)));\n                }\n                result.put(i + 1, j - leadingZeros, coherenceProduct(sum, power));\n            }\n        }\n        return result;\n    }", "signature": "DoubleMatrix coherence2(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP)", "full_signature": "public static DoubleMatrix coherence2(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP)", "class_method_signature": "SarUtils.coherence2(final ComplexDoubleMatrix input, final ComplexDoubleMatrix norms, final int winL, final int winP)", "testcase": false, "constructor": false, "invocations": ["trace", "warn", "error", "addi", "get", "addi", "get", "put", "coherenceProduct", "addi", "sub", "get", "get", "addi", "sub", "get", "get", "put", "coherenceProduct"]}, "repository": {"repo_id": 10548179, "url": "https://github.com/ppolabs/jlinda", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 2628, "license": "licensed"}}