{"test_class": {"identifier": "ISATABLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "import_layer/src/test/java/org/isatools/isatab/ISATABLoaderTest.java"}, "test_case": {"identifier": "testLoader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLoader() throws Exception {\n\t\tout.println(\"\\n\\n__________ ISATAB Loading Test __________\\n\\n\");\n\n\t\tString baseDir = System.getProperty(\"basedir\");\n\t\tString filesPath = baseDir + \"/target/test-classes/test-data/isatab/isatab/example\";\n\t\tISATABLoader loader = new ISATABLoader(filesPath);\n\t\tFormatSetInstance isatabInstance = loader.load();\n\n\t\tassertNotNull(\"Oh no! No loaded format instance\", isatabInstance);\n\n\t\tFormatInstance investigationFormatInstance = isatabInstance.getFormatInstance(\"investigation\");\n\t\tassertNotNull(\"Sigh! No investigation format loaded\", investigationFormatInstance);\n\t\tList<SectionInstance> investigationInstances = investigationFormatInstance.getSectionInstances(\"investigation\");\n\t\tassertNotNull(\"Ouch! No investigation instances in investigation format\", investigationInstances);\n\t\tassertEquals(\"Ouch! Bad number of investigations in investigation format \", 1, investigationInstances.size());\n\t\tSectionInstance investigationInstance = investigationInstances.get(0);\n\t\tassertEquals(\"Bad value for Investigation Title\", \"A Test Investigation, made for testing purposes\",\n\t\t\t\tinvestigationInstance.getString(0, \"Investigation Title\")\n\t\t);\n\n\t\tList<SectionInstance> studyInstances = investigationFormatInstance.getSectionInstances(\"study\");\n\t\tassertNotNull(\"Ouch! No study instances in investigation format\", studyInstances);\n\t\tassertEquals(\"Ouch! Bad number of study in investigation format \", 1, studyInstances.size());\n\n\t\tList<FormatInstance> study1FormatInstances = isatabInstance.getFormatInstances(\"study_samples\");\n\t\tassertNotNull(\"Sigh! No study format loaded\", study1FormatInstances);\n\t\tassertEquals(\"Ops! Bad # of study formats loaded\", 1, study1FormatInstances.size());\n\t\tSectionInstance studySampleInstance = study1FormatInstances.get(0).getSectionInstance(\"study_samples\");\n\t\tassertNotNull(\"Oh no! No samples in the study instance\", studySampleInstance);\n\t\tList<Record> sampleRecords = studySampleInstance.getRecords();\n\t\tassertNotNull(\"Arg! No records in study sample\", sampleRecords);\n\t\tassertEquals(\"Oh no! Bad # of samples in the study instance\", 12, sampleRecords.size());\n\t\tassertEquals(\"Oh no! Sample value retrieval failed\", \"Study1.animal4.liver\",\n\t\t\t\tstudySampleInstance.getString(3, \"Sample Name\")\n\t\t);\n\n\n\t\tList<FormatInstance> txInstances = isatabInstance.getFormatInstances(\"transcriptomics_assay\");\n\t\tassertNotNull(\"Urp! No transcriptomics file loaded\", txInstances);\n\t\tassertEquals(\"Ops! Bad # of TX formats loaded\", 1, txInstances.size());\n\t\tSectionInstance txPipelineInstance = txInstances.get(0).getSectionInstance(\"transcriptomics_pipeline\");\n\t\tassertNotNull(\"Oh no! No transcriptomics pipeline in the TX file\", txPipelineInstance);\n\t\tList<Record> txRecords = txPipelineInstance.getRecords();\n\t\tassertNotNull(\"Arg! No records in TX file\", txRecords);\n\t\tassertEquals(\"Oh no! Bad # of pipeline records in the TX file\", 12, txRecords.size());\n\t\tassertEquals(\"Oh no! Pipeline value retrieval failed\", \"scan3.normalized\",\n\t\t\t\ttxPipelineInstance.getString(2, \"Normalization Name\")\n\t\t);\n\n\n\t\tList<FormatInstance> msInstances = isatabInstance.getFormatInstances(\"ms_spec_assay\");\n\t\tassertNotNull(\"Urp! No MS/SPEC file loadd\", msInstances);\n\t\tassertEquals(\"Ops! Bad # of MS/SPEC formats loaded\", 1, msInstances.size());\n\t\tSectionInstance msPipelineInstance = msInstances.get(0).getSectionInstance(\"ms_spec_pipeline\");\n\t\tassertNotNull(\"Oh no! No MS/SPEC pipeline in the TX file\", msPipelineInstance);\n\t\tList<Record> msRecords = msPipelineInstance.getRecords();\n\t\tassertNotNull(\"Arg! No records in MAS/SPEC file\", msRecords);\n\t\tassertEquals(\"Oh no! Bad # of pipeline records in the MS/SPEC file\", 12, msRecords.size());\n\t\tassertEquals(\"Oh no! Pipeline value retrieval failed\", \"20 ppm\", msPipelineInstance.getString(3, 6));\n\n\n\t\tout.println(\"\\n\\n_________ /end: ISATAB Loading Test __________\\n\\n\\n\");\n\t}", "signature": "void testLoader()", "full_signature": "@Test public void testLoader()", "class_method_signature": "ISATABLoaderTest.testLoader()", "testcase": true, "constructor": false, "invocations": ["println", "getProperty", "load", "assertNotNull", "getFormatInstance", "assertNotNull", "getSectionInstances", "assertNotNull", "assertEquals", "size", "get", "assertEquals", "getString", "getSectionInstances", "assertNotNull", "assertEquals", "size", "getFormatInstances", "assertNotNull", "assertEquals", "size", "getSectionInstance", "get", "assertNotNull", "getRecords", "assertNotNull", "assertEquals", "size", "assertEquals", "getString", "getFormatInstances", "assertNotNull", "assertEquals", "size", "getSectionInstance", "get", "assertNotNull", "getRecords", "assertNotNull", "assertEquals", "size", "assertEquals", "getString", "getFormatInstances", "assertNotNull", "assertEquals", "size", "getSectionInstance", "get", "assertNotNull", "getRecords", "assertNotNull", "assertEquals", "size", "assertEquals", "getString", "println"]}, "focal_class": {"identifier": "ISATABLoader", "superclass": "extends TabLoader", "interfaces": "", "fields": [{"original_string": "public static final String ISATAB_SCHEMA_PATH = \"/isatab_0.2.format.xml\";", "modifier": "public static final", "type": "String", "declarator": "ISATAB_SCHEMA_PATH = \"/isatab_0.2.format.xml\"", "var_name": "ISATAB_SCHEMA_PATH"}, {"original_string": "private static FormatSet isatabSchema;", "modifier": "private static", "type": "FormatSet", "declarator": "isatabSchema", "var_name": "isatabSchema"}, {"original_string": "private String investigationFileName = \"investigation.csv\";", "modifier": "private", "type": "String", "declarator": "investigationFileName = \"investigation.csv\"", "var_name": "investigationFileName"}, {"original_string": "protected Map<String, String> alreadyLoadedFiles = new HashMap<String, String>();", "modifier": "protected", "type": "Map<String, String>", "declarator": "alreadyLoadedFiles = new HashMap<String, String>()", "var_name": "alreadyLoadedFiles"}], "methods": [{"identifier": "ISATABLoader", "parameters": "(String basePath)", "modifiers": "public", "return": "", "signature": " ISATABLoader(String basePath)", "full_signature": "public  ISATABLoader(String basePath)", "class_method_signature": "ISATABLoader.ISATABLoader(String basePath)", "testcase": false, "constructor": true}, {"identifier": "ISATABLoader", "parameters": "(FormatSet schema, String basePath)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "", "signature": " ISATABLoader(FormatSet schema, String basePath)", "full_signature": "@SuppressWarnings(\"unchecked\") protected  ISATABLoader(FormatSet schema, String basePath)", "class_method_signature": "ISATABLoader.ISATABLoader(FormatSet schema, String basePath)", "testcase": false, "constructor": true}, {"identifier": "loadInvestigation", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadInvestigation()", "full_signature": "private void loadInvestigation()", "class_method_signature": "ISATABLoader.loadInvestigation()", "testcase": false, "constructor": false}, {"identifier": "loadStudies", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadStudies()", "full_signature": "private void loadStudies()", "class_method_signature": "ISATABLoader.loadStudies()", "testcase": false, "constructor": false}, {"identifier": "loadAssays", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void loadAssays()", "full_signature": "protected void loadAssays()", "class_method_signature": "ISATABLoader.loadAssays()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "public", "return": "FormatSetInstance", "signature": "FormatSetInstance load()", "full_signature": "public FormatSetInstance load()", "class_method_signature": "ISATABLoader.load()", "testcase": false, "constructor": false}, {"identifier": "getISATABSchema", "parameters": "()", "modifiers": "public static", "return": "FormatSet", "signature": "FormatSet getISATABSchema()", "full_signature": "public static FormatSet getISATABSchema()", "class_method_signature": "ISATABLoader.getISATABSchema()", "testcase": false, "constructor": false}, {"identifier": "getInvestigationFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInvestigationFileName()", "full_signature": "public String getInvestigationFileName()", "class_method_signature": "ISATABLoader.getInvestigationFileName()", "testcase": false, "constructor": false}], "file": "import_layer/src/main/java/org/isatools/isatab/ISATABLoader.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "public", "return": "FormatSetInstance", "body": "public FormatSetInstance load() throws IOException {\n        // Load the Investigation file\n        loadInvestigation();\n\n        // Load the studies in Investigation.studyFileName\n        loadStudies();\n\n\n        // For all the assay files named in the assays, load the file\n        loadAssays();\n        log.debug(\"Finished loading Assays\");\n\n        return getFormatSetInstance();\n    }", "signature": "FormatSetInstance load()", "full_signature": "public FormatSetInstance load()", "class_method_signature": "ISATABLoader.load()", "testcase": false, "constructor": false, "invocations": ["loadInvestigation", "loadStudies", "loadAssays", "debug", "getFormatSetInstance"]}, "repository": {"repo_id": 1156021, "url": "https://github.com/ISA-tools/ISAvalidator-ISAconverter-BIImanager", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 12, "size": 5963, "license": "licensed"}}