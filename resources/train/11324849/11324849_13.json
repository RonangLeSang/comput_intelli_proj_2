{"test_class": {"identifier": "BinaryTreesCountTest", "superclass": "", "interfaces": "", "fields": [], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/BinaryTreesCountTest.java"}, "test_case": {"identifier": "testFindBinaryTrees3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindBinaryTrees3() {\n        assertThat(findBinaryTreesCount(3), is(BigInteger.valueOf(5)));\n    }", "signature": "void testFindBinaryTrees3()", "full_signature": "@Test public void testFindBinaryTrees3()", "class_method_signature": "BinaryTreesCountTest.testFindBinaryTrees3()", "testcase": true, "constructor": false, "invocations": ["assertThat", "findBinaryTreesCount", "is", "valueOf"]}, "focal_class": {"identifier": "BinaryTreesCount", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findBinaryTreesCount", "parameters": "(int n)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger findBinaryTreesCount(int n)", "full_signature": "public static BigInteger findBinaryTreesCount(int n)", "class_method_signature": "BinaryTreesCount.findBinaryTreesCount(int n)", "testcase": false, "constructor": false}, {"identifier": "findBinaryTreesCount", "parameters": "(int n, BigInteger[] cache)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger findBinaryTreesCount(int n, BigInteger[] cache)", "full_signature": "private static BigInteger findBinaryTreesCount(int n, BigInteger[] cache)", "class_method_signature": "BinaryTreesCount.findBinaryTreesCount(int n, BigInteger[] cache)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/BinaryTreesCount.java"}, "focal_method": {"identifier": "findBinaryTreesCount", "parameters": "(int n)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger findBinaryTreesCount(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input number of vertices is not positive\");\n        }\n        return findBinaryTreesCount(n, new BigInteger[n + 1]);\n    }", "signature": "BigInteger findBinaryTreesCount(int n)", "full_signature": "public static BigInteger findBinaryTreesCount(int n)", "class_method_signature": "BinaryTreesCount.findBinaryTreesCount(int n)", "testcase": false, "constructor": false, "invocations": ["findBinaryTreesCount"]}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}