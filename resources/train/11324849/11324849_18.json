{"test_class": {"identifier": "RadixSortTest", "superclass": "", "interfaces": "", "fields": [], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/RadixSortTest.java"}, "test_case": {"identifier": "testSortForIntsNullArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSortForIntsNullArray() {\n        int[] sequence = null;\n        sort(sequence);\n        assertNull(\"Sorting without exceptions, sequence should be null\", sequence);\n    }", "signature": "void testSortForIntsNullArray()", "full_signature": "@Test public void testSortForIntsNullArray()", "class_method_signature": "RadixSortTest.testSortForIntsNullArray()", "testcase": true, "constructor": false, "invocations": ["sort", "assertNull"]}, "focal_class": {"identifier": "RadixSort", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sort", "parameters": "(long[] sequence)", "modifiers": "public static", "return": "void", "signature": "void sort(long[] sequence)", "full_signature": "public static void sort(long[] sequence)", "class_method_signature": "RadixSort.sort(long[] sequence)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int[] sequence)", "modifiers": "public static", "return": "void", "signature": "void sort(int[] sequence)", "full_signature": "public static void sort(int[] sequence)", "class_method_signature": "RadixSort.sort(int[] sequence)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/RadixSort.java"}, "focal_method": {"identifier": "sort", "parameters": "(long[] sequence)", "modifiers": "public static", "return": "void", "body": "public static void sort(long[] sequence) {\n        if (sequence == null || sequence.length == 0) {\n            return;\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < sequence.length; i++) {\n            if (sequence[i] < 0) {\n                throw new IllegalArgumentException(\"Element #\" + i\n                        + \" is negative: \" + sequence[i]);\n            }\n            max = Math.max(max, sequence[i]);\n        }\n        final int module = 1001;\n        long exp = 1;\n        long[] copy = new long[sequence.length];\n        int[] buckets = new int[module];\n        while (max / exp > 0) {\n            Arrays.fill(buckets, 0);\n            for (long element : sequence) {\n                buckets[(int) ((element / exp) % module)]++;\n            }\n            for (int i = 1; i < buckets.length; i++) {\n                buckets[i] += buckets[i - 1];\n            }\n            for (int i = sequence.length - 1; i >= 0; i--) {\n                copy[--buckets[(int) ((sequence[i] / exp) % module)]] = sequence[i];\n            }\n            System.arraycopy(copy, 0, sequence, 0, sequence.length);\n            exp *= module;\n        }\n    }", "signature": "void sort(long[] sequence)", "full_signature": "public static void sort(long[] sequence)", "class_method_signature": "RadixSort.sort(long[] sequence)", "testcase": false, "constructor": false, "invocations": ["max", "fill", "arraycopy"]}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}