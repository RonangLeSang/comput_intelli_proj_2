{"test_class": {"identifier": "TripletInSequenceWithSpecialPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/TripletInSequenceWithSpecialPropertyTest.java"}, "test_case": {"identifier": "testFindTripletWithTwoElementArray", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testFindTripletWithTwoElementArray() {\n\tfindTriplet(new int[] { 1, 2 });\n    }", "signature": "void testFindTripletWithTwoElementArray()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testFindTripletWithTwoElementArray()", "class_method_signature": "TripletInSequenceWithSpecialPropertyTest.testFindTripletWithTwoElementArray()", "testcase": true, "constructor": false, "invocations": ["findTriplet"]}, "focal_class": {"identifier": "TripletInSequenceWithSpecialProperty", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findTriplet", "parameters": "(int[] a)", "modifiers": "public static", "return": "int[]", "signature": "int[] findTriplet(int[] a)", "full_signature": "public static int[] findTriplet(int[] a)", "class_method_signature": "TripletInSequenceWithSpecialProperty.findTriplet(int[] a)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/TripletInSequenceWithSpecialProperty.java"}, "focal_method": {"identifier": "findTriplet", "parameters": "(int[] a)", "modifiers": "public static", "return": "int[]", "body": "public static int[] findTriplet(int[] a) {\n\tif ((a == null) || (a.length < 3)) {\n\t    throw new IllegalArgumentException(\n\t\t    \"Array should have at least 3 elements\");\n\t}\n\tif ((a[0] < a[1]) || (a[a.length - 1] < a[a.length - 2])) {\n\t    throw new IllegalArgumentException(\n\t\t    \"Array does not have special property\");\n\t}\n\tif (a.length == 3) {\n\t    return new int[] { a[0], a[1], a[2] };\n\t}\n\tint left = 0;\n\tint right = a.length - 2;\n\twhile (left < right) {\n\t    int middle = left + ((right - left) >> 1);\n\t    if (a[middle + 1] - a[middle] < 0) {\n\t\tleft = middle + 1;\n\t    } else {\n\t\tright = middle;\n\t    }\n\t}\n\treturn new int[] { a[left - 1], a[left], a[left + 1] };\n    }", "signature": "int[] findTriplet(int[] a)", "full_signature": "public static int[] findTriplet(int[] a)", "class_method_signature": "TripletInSequenceWithSpecialProperty.findTriplet(int[] a)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}