{"test_class": {"identifier": "LeastDifferenceInArrayWithGivenNumberTest", "superclass": "", "interfaces": "", "fields": [], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/LeastDifferenceInArrayWithGivenNumberTest.java"}, "test_case": {"identifier": "testGetElementWithLeastDifference2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetElementWithLeastDifference2() {\n        int actual = getElementWithLeastDifference(new int[]{1, 4, 5, 7, 9, 11, 13, 15}, 2);\n        assertThat(actual, is(1));\n    }", "signature": "void testGetElementWithLeastDifference2()", "full_signature": "@Test public void testGetElementWithLeastDifference2()", "class_method_signature": "LeastDifferenceInArrayWithGivenNumberTest.testGetElementWithLeastDifference2()", "testcase": true, "constructor": false, "invocations": ["getElementWithLeastDifference", "assertThat", "is"]}, "focal_class": {"identifier": "LeastDifferenceInArrayWithGivenNumber", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getElementWithLeastDifference", "parameters": "(int[] sequence, int element)", "modifiers": "public static", "return": "int", "signature": "int getElementWithLeastDifference(int[] sequence, int element)", "full_signature": "public static int getElementWithLeastDifference(int[] sequence, int element)", "class_method_signature": "LeastDifferenceInArrayWithGivenNumber.getElementWithLeastDifference(int[] sequence, int element)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/LeastDifferenceInArrayWithGivenNumber.java"}, "focal_method": {"identifier": "getElementWithLeastDifference", "parameters": "(int[] sequence, int element)", "modifiers": "public static", "return": "int", "body": "public static int getElementWithLeastDifference(int[] sequence, int element) {\n        if (sequence == null || sequence.length == 0) {\n            throw new IllegalArgumentException(\"Input array is null or empty\");\n        }\n        int left = 0;\n        int right = sequence.length - 1;\n        while (left < right) {\n            int median = left + ((right - left) >> 1);\n            if (sequence[median] < element) {\n                left = median + 1;\n            } else {\n                right = median;\n            }\n        }\n        if (sequence[left] == element) {\n            return element;\n        } else {\n            if (left == 0) {\n                return sequence[0];\n            } else {\n                if (abs(element - sequence[left]) >= abs(element - sequence[left - 1])) {\n                    return sequence[left - 1];\n                } else {\n                    return sequence[left];\n                }\n            }\n        }\n    }", "signature": "int getElementWithLeastDifference(int[] sequence, int element)", "full_signature": "public static int getElementWithLeastDifference(int[] sequence, int element)", "class_method_signature": "LeastDifferenceInArrayWithGivenNumber.getElementWithLeastDifference(int[] sequence, int element)", "testcase": false, "constructor": false, "invocations": ["abs", "abs"]}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}