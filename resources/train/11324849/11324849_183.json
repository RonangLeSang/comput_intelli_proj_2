{"test_class": {"identifier": "GlassesWithWaterTest", "superclass": "", "interfaces": "", "fields": [], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/GlassesWithWaterTest.java"}, "test_case": {"identifier": "testGetAmountOfWater2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAmountOfWater2() {\n        assertThat(getAmountOfWater(1, 0, 2), is(0.5));\n    }", "signature": "void testGetAmountOfWater2()", "full_signature": "@Test public void testGetAmountOfWater2()", "class_method_signature": "GlassesWithWaterTest.testGetAmountOfWater2()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getAmountOfWater", "is"]}, "focal_class": {"identifier": "GlassesWithWater", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double MAX_AMOUNT_OF_WATER_IN_GLASS = 1.0d;", "modifier": "private static final", "type": "double", "declarator": "MAX_AMOUNT_OF_WATER_IN_GLASS = 1.0d", "var_name": "MAX_AMOUNT_OF_WATER_IN_GLASS"}], "methods": [{"identifier": "getAmountOfWater", "parameters": "(int level, int column, double x)", "modifiers": "public static", "return": "double", "signature": "double getAmountOfWater(int level, int column, double x)", "full_signature": "public static double getAmountOfWater(int level, int column, double x)", "class_method_signature": "GlassesWithWater.getAmountOfWater(int level, int column, double x)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/GlassesWithWater.java"}, "focal_method": {"identifier": "getAmountOfWater", "parameters": "(int level, int column, double x)", "modifiers": "public static", "return": "double", "body": "public static double getAmountOfWater(int level, int column, double x) {\n        if (x <= 0) {\n            throw new IllegalArgumentException(\"Amount of water should be positive\");\n        }\n        if (level < 0) {\n            throw new IllegalArgumentException(\"Level should be non-negative\");\n        }\n        if (column < 0) {\n            throw new IllegalArgumentException(\"Column should be non-negative\");\n        }\n        if (level < column) {\n            throw new IllegalArgumentException(\"Level should be greater or equal to column\");\n        }\n        if (level == 0) {\n            return min(MAX_AMOUNT_OF_WATER_IN_GLASS, x);\n        } else if (level == 1) {\n            return max((x - MAX_AMOUNT_OF_WATER_IN_GLASS) / 2, 0);\n        }\n        double[] prevLevelVolumes = new double[]{\n                max((x - MAX_AMOUNT_OF_WATER_IN_GLASS) / 2, 0),\n                max((x - MAX_AMOUNT_OF_WATER_IN_GLASS) / 2, 0)};\n        int i = 1;\n        while (true) {\n            i++;\n            double[] levelVolumes = new double[i + 1];\n            levelVolumes[0] = max((prevLevelVolumes[0] - 1) / 2, 0);\n            levelVolumes[i] = max((prevLevelVolumes[i - 1] - 1) / 2, 0);\n            for (int j = 1; j < levelVolumes.length - 1; j++) {\n                levelVolumes[j] = max((prevLevelVolumes[j - 1] - MAX_AMOUNT_OF_WATER_IN_GLASS) / 2, 0)\n                        + max((prevLevelVolumes[j] - MAX_AMOUNT_OF_WATER_IN_GLASS) / 2, 0);\n            }\n            if (i == level) {\n                return levelVolumes[column];\n            }\n            prevLevelVolumes = levelVolumes;\n        }\n    }", "signature": "double getAmountOfWater(int level, int column, double x)", "full_signature": "public static double getAmountOfWater(int level, int column, double x)", "class_method_signature": "GlassesWithWater.getAmountOfWater(int level, int column, double x)", "testcase": false, "constructor": false, "invocations": ["min", "max", "max", "max", "max", "max", "max", "max"]}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}