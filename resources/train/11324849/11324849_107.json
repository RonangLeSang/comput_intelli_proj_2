{"test_class": {"identifier": "SquareRootTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BigDecimal EPS = BigDecimal.valueOf(0.000001);", "modifier": "private static final", "type": "BigDecimal", "declarator": "EPS = BigDecimal.valueOf(0.000001)", "var_name": "EPS"}], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/SquareRootTest.java"}, "test_case": {"identifier": "testGetSquareRoot2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSquareRoot2() {\n        BigDecimal expected = BigDecimal.ONE;\n        BigDecimal actual = getSquareRoot(BigDecimal.valueOf(1));\n        BigDecimal diff = expected.subtract(actual).abs();\n        assertTrue(\"Expected: \" + expected.toString() + \", actual: \" + actual.toString(), EPS.compareTo(diff) > 0);\n    }", "signature": "void testGetSquareRoot2()", "full_signature": "@Test public void testGetSquareRoot2()", "class_method_signature": "SquareRootTest.testGetSquareRoot2()", "testcase": true, "constructor": false, "invocations": ["getSquareRoot", "valueOf", "abs", "subtract", "assertTrue", "toString", "toString", "compareTo"]}, "focal_class": {"identifier": "SquareRoot", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BigDecimal EPS = valueOf(0.0000001);", "modifier": "private static final", "type": "BigDecimal", "declarator": "EPS = valueOf(0.0000001)", "var_name": "EPS"}, {"original_string": "private static final BigDecimal TWO = valueOf(2);", "modifier": "private static final", "type": "BigDecimal", "declarator": "TWO = valueOf(2)", "var_name": "TWO"}, {"original_string": "private static final int SCALE = 14;", "modifier": "private static final", "type": "int", "declarator": "SCALE = 14", "var_name": "SCALE"}], "methods": [{"identifier": "getSquareRoot", "parameters": "(BigDecimal number)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal getSquareRoot(BigDecimal number)", "full_signature": "public static BigDecimal getSquareRoot(BigDecimal number)", "class_method_signature": "SquareRoot.getSquareRoot(BigDecimal number)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/SquareRoot.java"}, "focal_method": {"identifier": "getSquareRoot", "parameters": "(BigDecimal number)", "modifiers": "public static", "return": "BigDecimal", "body": "public static BigDecimal getSquareRoot(BigDecimal number) {\n        if (number == null) {\n            throw new IllegalArgumentException(\"Input number is null\");\n        }\n        if (number.signum() == -1) {\n            throw new IllegalArgumentException(\"Input number is negative\");\n        }\n        if (number.signum() == 0) {\n            return ZERO;\n        }\n        BigDecimal root = ONE;\n        BigDecimal prevRoot;\n        do {\n            prevRoot = root;\n            root = root.add(number.divide(root, SCALE, ROUND_FLOOR)).divide(TWO, SCALE, ROUND_FLOOR);\n        } while (root.subtract(prevRoot).abs().compareTo(EPS) >= 0);\n        return root;\n    }", "signature": "BigDecimal getSquareRoot(BigDecimal number)", "full_signature": "public static BigDecimal getSquareRoot(BigDecimal number)", "class_method_signature": "SquareRoot.getSquareRoot(BigDecimal number)", "testcase": false, "constructor": false, "invocations": ["signum", "signum", "divide", "add", "divide", "compareTo", "abs", "subtract"]}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}