{"test_class": {"identifier": "KnightTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String from;", "modifier": "private final", "type": "String", "declarator": "from", "var_name": "from"}, {"original_string": "private final String to;", "modifier": "private final", "type": "String", "declarator": "to", "var_name": "to"}, {"original_string": "private final int expected;", "modifier": "private final", "type": "int", "declarator": "expected", "var_name": "expected"}], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/KnightTest.java"}, "test_case": {"identifier": "testFindShortestWayStartIsEmpty", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testFindShortestWayStartIsEmpty() {\n        findShortestWay(\"\", \"h8\");\n    }", "signature": "void testFindShortestWayStartIsEmpty()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testFindShortestWayStartIsEmpty()", "class_method_signature": "KnightTest.testFindShortestWayStartIsEmpty()", "testcase": true, "constructor": false, "invocations": ["findShortestWay"]}, "focal_class": {"identifier": "Knight", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern BOARD_CELL_PATTERN = Pattern.compile(\"[a-h][1-8]\");", "modifier": "private static final", "type": "Pattern", "declarator": "BOARD_CELL_PATTERN = Pattern.compile(\"[a-h][1-8]\")", "var_name": "BOARD_CELL_PATTERN"}, {"original_string": "private static final int BOARD_SIZE = 8;", "modifier": "private static final", "type": "int", "declarator": "BOARD_SIZE = 8", "var_name": "BOARD_SIZE"}], "methods": [{"identifier": "findShortestWay", "parameters": "(String start, String end)", "modifiers": "public static", "return": "int", "signature": "int findShortestWay(String start, String end)", "full_signature": "public static int findShortestWay(String start, String end)", "class_method_signature": "Knight.findShortestWay(String start, String end)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/Knight.java"}, "focal_method": {"identifier": "findShortestWay", "parameters": "(String start, String end)", "modifiers": "public static", "return": "int", "body": "public static int findShortestWay(String start, String end) {\n        if (start == null || !BOARD_CELL_PATTERN.matcher(start).matches()) {\n            throw new IllegalArgumentException(\"Start position should be 2-char string [a-h][1-8], not \" + start);\n        }\n        if (end == null || !BOARD_CELL_PATTERN.matcher(end).matches()) {\n            throw new IllegalArgumentException(\"End position should be 2-char string [a-h][1-8], not \" + end);\n        }\n        int sh = start.charAt(0) - 'a';\n        int sg = start.charAt(1) - '1';\n        int eh = end.charAt(0) - 'a';\n        int eg = end.charAt(1) - '1';\n        NonDirectedGraph graph = new NonDirectedGraph(BOARD_SIZE * BOARD_SIZE);\n        for (int i = 0; i < BOARD_SIZE; i++) {\n            for (int j = 0; j < BOARD_SIZE; j++) {\n                if (i - 2 >= 0 && j - 1 >= 0) {\n                    graph.addEdge(BOARD_SIZE * (i - 2) + (j - 1), BOARD_SIZE * i + j);\n                }\n                if (i - 2 >= 0 && j + 1 < BOARD_SIZE) {\n                    graph.addEdge(BOARD_SIZE * (i - 2) + (j + 1), BOARD_SIZE * i + j);\n                }\n                if (i - 1 >= 0 && j - 2 >= 0) {\n                    graph.addEdge(BOARD_SIZE * (i - 1) + (j - 2), BOARD_SIZE * i + j);\n                }\n                if (i - 1 >= 0 && j + 2 < BOARD_SIZE) {\n                    graph.addEdge(BOARD_SIZE * (i - 1) + (j + 2), BOARD_SIZE * i + j);\n                }\n            }\n        }\n        return graph.bfs(sh * BOARD_SIZE + sg, eh * BOARD_SIZE + eg);\n    }", "signature": "int findShortestWay(String start, String end)", "full_signature": "public static int findShortestWay(String start, String end)", "class_method_signature": "Knight.findShortestWay(String start, String end)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher", "matches", "matcher", "charAt", "charAt", "charAt", "charAt", "addEdge", "addEdge", "addEdge", "addEdge", "bfs"]}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}