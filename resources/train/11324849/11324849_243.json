{"test_class": {"identifier": "TopKNumbersFromThreeSortedArraysTest", "superclass": "", "interfaces": "", "fields": [], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/TopKNumbersFromThreeSortedArraysTest.java"}, "test_case": {"identifier": "testFindTopKNumbersFromThreeSorted2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindTopKNumbersFromThreeSorted2() {\n\tint[] res = findTopKNumbersFromThreeSortedArrays(new int[] { 1, 2 },\n\t\tnew int[] { 1, 3 }, new int[] { 1, 4 }, 3);\n\tassertThat(res, is(new int[] { 2, 3, 4 }));\n    }", "signature": "void testFindTopKNumbersFromThreeSorted2()", "full_signature": "@Test public void testFindTopKNumbersFromThreeSorted2()", "class_method_signature": "TopKNumbersFromThreeSortedArraysTest.testFindTopKNumbersFromThreeSorted2()", "testcase": true, "constructor": false, "invocations": ["findTopKNumbersFromThreeSortedArrays", "assertThat", "is"]}, "focal_class": {"identifier": "TopKNumbersFromThreeSortedArrays", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findTopKNumbersFromThreeSortedArrays", "parameters": "(int[] first,\n\t    int[] second, int[] third, int k)", "modifiers": "public static", "return": "int[]", "signature": "int[] findTopKNumbersFromThreeSortedArrays(int[] first,\n\t    int[] second, int[] third, int k)", "full_signature": "public static int[] findTopKNumbersFromThreeSortedArrays(int[] first,\n\t    int[] second, int[] third, int k)", "class_method_signature": "TopKNumbersFromThreeSortedArrays.findTopKNumbersFromThreeSortedArrays(int[] first,\n\t    int[] second, int[] third, int k)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/TopKNumbersFromThreeSortedArrays.java"}, "focal_method": {"identifier": "findTopKNumbersFromThreeSortedArrays", "parameters": "(int[] first,\n\t    int[] second, int[] third, int k)", "modifiers": "public static", "return": "int[]", "body": "public static int[] findTopKNumbersFromThreeSortedArrays(int[] first,\n\t    int[] second, int[] third, int k) {\n\tif (k <= 0) {\n\t    throw new IllegalArgumentException(\"K should be positive number\");\n\t}\n\tif ((first == null) || (second == null) || (third == null)) {\n\t    throw new IllegalArgumentException(\n\t\t    \"All three arrays should be not null: \"\n\t\t\t    + \"first array is null - \" + (first == null)\n\t\t\t    + \"; second array is null - \" + (second == null)\n\t\t\t    + \"; third array is null - \" + (third == null));\n\t}\n\tif (first.length + second.length + third.length < k) {\n\t    throw new IllegalArgumentException(\n\t\t    \"The sum of arrays sizes should not be less than k\");\n\t}\n\tint p1 = first.length - 1;\n\tint p2 = second.length - 1;\n\tint p3 = third.length - 1;\n\tint[] res = new int[k];\n\twhile (k > 0) {\n\t    int max = Math.max(p1 >= 0 ? first[p1] : Integer.MIN_VALUE, Math\n\t\t    .max(p2 >= 0 ? second[p2] : Integer.MIN_VALUE,\n\t\t\t    p3 >= 0 ? third[p3] : Integer.MIN_VALUE));\n\t    res[k - 1] = max;\n\t    if ((p1 >= 0) && (max == first[p1])) {\n\t\tp1--;\n\t    } else if ((p2 >= 0) && (max == second[p2])) {\n\t\tp2--;\n\t    } else if ((p3 >= 0) && (max == third[p3])) {\n\t\tp3--;\n\t    }\n\t    k--;\n\t}\n\treturn res;\n    }", "signature": "int[] findTopKNumbersFromThreeSortedArrays(int[] first,\n\t    int[] second, int[] third, int k)", "full_signature": "public static int[] findTopKNumbersFromThreeSortedArrays(int[] first,\n\t    int[] second, int[] third, int k)", "class_method_signature": "TopKNumbersFromThreeSortedArrays.findTopKNumbersFromThreeSortedArrays(int[] first,\n\t    int[] second, int[] third, int k)", "testcase": false, "constructor": false, "invocations": ["max", "max"]}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}