{"test_class": {"identifier": "LongestRunningSequenceOfCharactersTest", "superclass": "", "interfaces": "", "fields": [], "file": "CareerCup/src/test/java/com/github/holodnov/careercup/LongestRunningSequenceOfCharactersTest.java"}, "test_case": {"identifier": "testGetLongestRunningSequence2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLongestRunningSequence2() {\n        assertThat(getLongestRunningSequence(new String[]{\"aaa\", \"ab\", \"bba\"}), is(new SimpleImmutableEntry<>('a', 5)));\n    }", "signature": "void testGetLongestRunningSequence2()", "full_signature": "@Test public void testGetLongestRunningSequence2()", "class_method_signature": "LongestRunningSequenceOfCharactersTest.testGetLongestRunningSequence2()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getLongestRunningSequence", "is"]}, "focal_class": {"identifier": "LongestRunningSequenceOfCharacters", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getLongestRunningSequence", "parameters": "(String[] strs)", "modifiers": "public static", "return": "Entry<Character, Integer>", "signature": "Entry<Character, Integer> getLongestRunningSequence(String[] strs)", "full_signature": "public static Entry<Character, Integer> getLongestRunningSequence(String[] strs)", "class_method_signature": "LongestRunningSequenceOfCharacters.getLongestRunningSequence(String[] strs)", "testcase": false, "constructor": false}], "file": "CareerCup/src/main/java/com/github/holodnov/careercup/LongestRunningSequenceOfCharacters.java"}, "focal_method": {"identifier": "getLongestRunningSequence", "parameters": "(String[] strs)", "modifiers": "public static", "return": "Entry<Character, Integer>", "body": "public static Entry<Character, Integer> getLongestRunningSequence(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return null;\n        }\n        Map<Character, Integer> initial = new HashMap<>();\n        List<StringStat> statistic = new ArrayList<>();\n        for (String str : strs) {\n            if (str == null || str.isEmpty()) {\n                continue;\n            }\n            StringStat stat = new StringStat(str);\n            if (stat.sameSymbolsInString) {\n                Integer initSize = initial.get(stat.prefix);\n                if (initSize == null) {\n                    initSize = stat.prefixLength;\n                } else {\n                    initSize += stat.prefixLength;\n                }\n                initial.put(stat.prefix, initSize);\n            } else {\n                statistic.add(stat);\n            }\n        }\n        if (statistic.isEmpty() && initial.isEmpty()) {\n            return null;\n        } else if (statistic.isEmpty()) {\n            char c = '\\0';\n            int length = 0;\n            for (Entry<Character, Integer> entry : initial.entrySet()) {\n                if (entry.getValue() > length) {\n                    c = entry.getKey();\n                    length = entry.getValue();\n                }\n            }\n            return new SimpleImmutableEntry<>(c, length);\n        }\n        char c = '\\0';\n        int length = 0;\n        for (StringStat stat : statistic) {\n            Integer init = initial.get(stat.prefix);\n            if (init == null) {\n                init = 0;\n            }\n            if (stat.prefixLength + init > length) {\n                length = stat.prefixLength + init;\n                c = stat.prefix;\n            }\n            init = initial.get(stat.suffix);\n            if (init == null) {\n                init = 0;\n            }\n            if (stat.suffixLength + init > length) {\n                length = stat.suffixLength + init;\n                c = stat.suffix;\n            }\n        }\n        for (int i = 0; i < statistic.size(); i++) {\n            for (int j = 0; j < statistic.size(); j++) {\n                if (i == j || statistic.get(i).suffix != statistic.get(j).prefix) {\n                    continue;\n                }\n                Integer init = initial.get(statistic.get(i).suffix);\n                if (init == null) {\n                    init = 0;\n                }\n                int candidate = init + statistic.get(i).suffixLength + statistic.get(j).prefixLength;\n                if (candidate > length) {\n                    length = candidate;\n                    c = statistic.get(i).suffix;\n                }\n            }\n        }\n        return new SimpleImmutableEntry<>(c, length);\n    }", "signature": "Entry<Character, Integer> getLongestRunningSequence(String[] strs)", "full_signature": "public static Entry<Character, Integer> getLongestRunningSequence(String[] strs)", "class_method_signature": "LongestRunningSequenceOfCharacters.getLongestRunningSequence(String[] strs)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "get", "put", "add", "isEmpty", "isEmpty", "isEmpty", "entrySet", "getValue", "getKey", "getValue", "get", "get", "size", "size", "get", "get", "get", "get", "get", "get", "get"]}, "repository": {"repo_id": 11324849, "url": "https://github.com/kyryloholodnov/niagara", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 6, "size": 227, "license": "licensed"}}