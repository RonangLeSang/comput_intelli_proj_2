{"test_class": {"identifier": "TransitionControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Transition transition;", "modifier": "@Mock", "type": "Transition", "declarator": "transition", "var_name": "transition"}, {"original_string": "@Mock\n    UndoableEditListener listener;", "modifier": "@Mock", "type": "UndoableEditListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "TransitionController controller;", "modifier": "", "type": "TransitionController", "declarator": "controller", "var_name": "controller"}], "file": "pipe-gui/src/test/java/pipe/controllers/TransitionControllerTest.java"}, "test_case": {"identifier": "setInfiniteServerModifiesTransition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setInfiniteServerModifiesTransition() {\n        boolean isInfinite = true;\n        controller.setInfiniteServer(isInfinite);\n        verify(transition).setInfiniteServer(isInfinite);\n    }", "signature": "void setInfiniteServerModifiesTransition()", "full_signature": "@Test public void setInfiniteServerModifiesTransition()", "class_method_signature": "TransitionControllerTest.setInfiniteServerModifiesTransition()", "testcase": true, "constructor": false, "invocations": ["setInfiniteServer", "setInfiniteServer", "verify"]}, "focal_class": {"identifier": "TransitionController", "superclass": "extends AbstractConnectableController<Transition>", "interfaces": "", "fields": [], "methods": [{"identifier": "TransitionController", "parameters": "(Transition component, UndoableEditListener listener)", "modifiers": "protected", "return": "", "signature": " TransitionController(Transition component, UndoableEditListener listener)", "full_signature": "protected  TransitionController(Transition component, UndoableEditListener listener)", "class_method_signature": "TransitionController.TransitionController(Transition component, UndoableEditListener listener)", "testcase": false, "constructor": true}, {"identifier": "isTimed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTimed()", "full_signature": "public boolean isTimed()", "class_method_signature": "TransitionController.isTimed()", "testcase": false, "constructor": false}, {"identifier": "setTimed", "parameters": "(boolean timedValue)", "modifiers": "public", "return": "void", "signature": "void setTimed(boolean timedValue)", "full_signature": "public void setTimed(boolean timedValue)", "class_method_signature": "TransitionController.setTimed(boolean timedValue)", "testcase": false, "constructor": false}, {"identifier": "isInfiniteServer", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInfiniteServer()", "full_signature": "public boolean isInfiniteServer()", "class_method_signature": "TransitionController.isInfiniteServer()", "testcase": false, "constructor": false}, {"identifier": "setInfiniteServer", "parameters": "(boolean infiniteValue)", "modifiers": "public", "return": "void", "signature": "void setInfiniteServer(boolean infiniteValue)", "full_signature": "public void setInfiniteServer(boolean infiniteValue)", "class_method_signature": "TransitionController.setInfiniteServer(boolean infiniteValue)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "TransitionController.getName()", "testcase": false, "constructor": false}, {"identifier": "getRateExpr", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRateExpr()", "full_signature": "public String getRateExpr()", "class_method_signature": "TransitionController.getRateExpr()", "testcase": false, "constructor": false}, {"identifier": "getPriority", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPriority()", "full_signature": "public int getPriority()", "class_method_signature": "TransitionController.getPriority()", "testcase": false, "constructor": false}, {"identifier": "setPriority", "parameters": "(int priorityValue)", "modifiers": "public", "return": "void", "signature": "void setPriority(int priorityValue)", "full_signature": "public void setPriority(int priorityValue)", "class_method_signature": "TransitionController.setPriority(int priorityValue)", "testcase": false, "constructor": false}, {"identifier": "getAngle", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAngle()", "full_signature": "public int getAngle()", "class_method_signature": "TransitionController.getAngle()", "testcase": false, "constructor": false}, {"identifier": "setAngle", "parameters": "(int angle)", "modifiers": "public", "return": "void", "signature": "void setAngle(int angle)", "full_signature": "public void setAngle(int angle)", "class_method_signature": "TransitionController.setAngle(int angle)", "testcase": false, "constructor": false}, {"identifier": "inboundArcs", "parameters": "()", "modifiers": "public", "return": "Collection<Arc<Place, Transition>>", "signature": "Collection<Arc<Place, Transition>> inboundArcs()", "full_signature": "public Collection<Arc<Place, Transition>> inboundArcs()", "class_method_signature": "TransitionController.inboundArcs()", "testcase": false, "constructor": false}, {"identifier": "getRate", "parameters": "()", "modifiers": "public", "return": "Rate", "signature": "Rate getRate()", "full_signature": "public Rate getRate()", "class_method_signature": "TransitionController.getRate()", "testcase": false, "constructor": false}, {"identifier": "setRate", "parameters": "(Rate rate)", "modifiers": "public", "return": "void", "signature": "void setRate(Rate rate)", "full_signature": "public void setRate(Rate rate)", "class_method_signature": "TransitionController.setRate(Rate rate)", "testcase": false, "constructor": false}], "file": "pipe-gui/src/main/java/pipe/controllers/TransitionController.java"}, "focal_method": {"identifier": "setInfiniteServer", "parameters": "(boolean infiniteValue)", "modifiers": "public", "return": "void", "body": "public void setInfiniteServer(boolean infiniteValue) {\n        component.setInfiniteServer(infiniteValue);\n        UndoableEdit infiniteAction = new TransitionInfiniteServer(component, infiniteValue);\n        registerUndoableEdit(infiniteAction);\n    }", "signature": "void setInfiniteServer(boolean infiniteValue)", "full_signature": "public void setInfiniteServer(boolean infiniteValue)", "class_method_signature": "TransitionController.setInfiniteServer(boolean infiniteValue)", "testcase": false, "constructor": false, "invocations": ["setInfiniteServer", "registerUndoableEdit"]}, "repository": {"repo_id": 13383431, "url": "https://github.com/sarahtattersall/PIPE", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 157, "size": 31480, "license": "licensed"}}