{"test_class": {"identifier": "MessageHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MessageHandler handler ;", "modifier": "private", "type": "MessageHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private ConnectivityManager connManager;", "modifier": "private", "type": "ConnectivityManager", "declarator": "connManager", "var_name": "connManager"}, {"original_string": "private ConnectionManagerControlCenter controlCenter;", "modifier": "private", "type": "ConnectionManagerControlCenter", "declarator": "controlCenter", "var_name": "controlCenter"}, {"original_string": "private SecurityManager securityManager;", "modifier": "private", "type": "SecurityManager", "declarator": "securityManager", "var_name": "securityManager"}], "file": "srcTest/org/unbiquitous/uos/core/messageEngine/MessageHandlerTest.java"}, "test_case": {"identifier": "callService_ShouldRejectNullDriverOnCall", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class) public void callService_ShouldRejectNullDriverOnCall() throws Exception{\n\t\thandler.callService(mock(UpDevice.class),new Call(null,\"s\"));\n\t}", "signature": "void callService_ShouldRejectNullDriverOnCall()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void callService_ShouldRejectNullDriverOnCall()", "class_method_signature": "MessageHandlerTest.callService_ShouldRejectNullDriverOnCall()", "testcase": true, "constructor": false, "invocations": ["callService", "mock"]}, "focal_class": {"identifier": "MessageHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = UOSLogging.getLogger();", "modifier": "private static", "type": "Logger", "declarator": "logger = UOSLogging.getLogger()", "var_name": "logger"}, {"original_string": "private int maxRetries = 30;", "modifier": "private", "type": "int", "declarator": "maxRetries = 30", "var_name": "maxRetries"}, {"original_string": "private int waitTime = 100;", "modifier": "private", "type": "int", "declarator": "waitTime = 100", "var_name": "waitTime"}, {"original_string": "private ConnectionManagerControlCenter connectionManagerControlCenter;", "modifier": "private", "type": "ConnectionManagerControlCenter", "declarator": "connectionManagerControlCenter", "var_name": "connectionManagerControlCenter"}, {"original_string": "private SecurityManager securityManager;", "modifier": "private", "type": "SecurityManager", "declarator": "securityManager", "var_name": "securityManager"}, {"original_string": "private ConnectivityManager connectivityManager;", "modifier": "private", "type": "ConnectivityManager", "declarator": "connectivityManager", "var_name": "connectivityManager"}], "methods": [{"identifier": "MessageHandler", "parameters": "(\n\t\t\tInitialProperties bundle,\n\t\t\t\tConnectionManagerControlCenter connectionManagerControlCenter,\n\t\t\t\tSecurityManager securityManager,\n\t\t\t\tConnectivityManager connectivityManager\n\t\t\t)", "modifiers": "public", "return": "", "signature": " MessageHandler(\n\t\t\tInitialProperties bundle,\n\t\t\t\tConnectionManagerControlCenter connectionManagerControlCenter,\n\t\t\t\tSecurityManager securityManager,\n\t\t\t\tConnectivityManager connectivityManager\n\t\t\t)", "full_signature": "public  MessageHandler(\n\t\t\tInitialProperties bundle,\n\t\t\t\tConnectionManagerControlCenter connectionManagerControlCenter,\n\t\t\t\tSecurityManager securityManager,\n\t\t\t\tConnectivityManager connectivityManager\n\t\t\t)", "class_method_signature": "MessageHandler.MessageHandler(\n\t\t\tInitialProperties bundle,\n\t\t\t\tConnectionManagerControlCenter connectionManagerControlCenter,\n\t\t\t\tSecurityManager securityManager,\n\t\t\t\tConnectivityManager connectivityManager\n\t\t\t)", "testcase": false, "constructor": true}, {"identifier": "callService", "parameters": "(UpDevice device,Call serviceCall)", "modifiers": "public", "return": "Response", "signature": "Response callService(UpDevice device,Call serviceCall)", "full_signature": "public Response callService(UpDevice device,Call serviceCall)", "class_method_signature": "MessageHandler.callService(UpDevice device,Call serviceCall)", "testcase": false, "constructor": false}, {"identifier": "sendEncapsulated", "parameters": "(String message, String securityType, UpDevice target)", "modifiers": "private", "return": "String", "signature": "String sendEncapsulated(String message, String securityType, UpDevice target)", "full_signature": "private String sendEncapsulated(String message, String securityType, UpDevice target)", "class_method_signature": "MessageHandler.sendEncapsulated(String message, String securityType, UpDevice target)", "testcase": false, "constructor": false}, {"identifier": "notifyEvent", "parameters": "(Notify notify, UpDevice device)", "modifiers": "public", "return": "void", "signature": "void notifyEvent(Notify notify, UpDevice device)", "full_signature": "public void notifyEvent(Notify notify, UpDevice device)", "class_method_signature": "MessageHandler.notifyEvent(Notify notify, UpDevice device)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String message, UpDevice target, boolean waitForResponse)", "modifiers": "private", "return": "String", "signature": "String send(String message, UpDevice target, boolean waitForResponse)", "full_signature": "private String send(String message, UpDevice target, boolean waitForResponse)", "class_method_signature": "MessageHandler.send(String message, UpDevice target, boolean waitForResponse)", "testcase": false, "constructor": false}, {"identifier": "sendReceive", "parameters": "(String call,OutputStream outputStream, InputStream inputStream, boolean waitForResponse)", "modifiers": "private", "return": "String", "signature": "String sendReceive(String call,OutputStream outputStream, InputStream inputStream, boolean waitForResponse)", "full_signature": "private String sendReceive(String call,OutputStream outputStream, InputStream inputStream, boolean waitForResponse)", "class_method_signature": "MessageHandler.sendReceive(String call,OutputStream outputStream, InputStream inputStream, boolean waitForResponse)", "testcase": false, "constructor": false}], "file": "src/org/unbiquitous/uos/core/messageEngine/MessageHandler.java"}, "focal_method": {"identifier": "callService", "parameters": "(UpDevice device,Call serviceCall)", "modifiers": "public", "return": "Response", "body": "public Response callService(UpDevice device,Call serviceCall) throws MessageEngineException{\n\t\tif (\tdevice == null || serviceCall == null ||\n\t\t\t\tserviceCall.getDriver() == null || serviceCall.getDriver().isEmpty() ||\n\t\t\t\tserviceCall.getService() == null || serviceCall.getService().isEmpty()){\n\t\t\tthrow new IllegalArgumentException(\"Either the Device or Service is invalid.\");\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tJSONObject  jsonCall = serviceCall.toJSON();\n\t\t\tif (serviceCall.getSecurityType() != null ){\n\t\t\t\tString data = sendEncapsulated(jsonCall.toString(), serviceCall.getSecurityType(), device);\n\t\t\t\treturn Response.fromJSON(new JSONObject(data));\n\t\t\t}\n\t\t\tString returnedMessage = send(jsonCall.toString(), device,true);\n\t\t\tif (returnedMessage != null)\n\t\t\t\treturn Response.fromJSON(new JSONObject(returnedMessage));\n\t\t} catch (Exception e) {\n\t\t\tthrow new MessageEngineException(e);\n\t\t} \n\t\treturn null;\n\t}", "signature": "Response callService(UpDevice device,Call serviceCall)", "full_signature": "public Response callService(UpDevice device,Call serviceCall)", "class_method_signature": "MessageHandler.callService(UpDevice device,Call serviceCall)", "testcase": false, "constructor": false, "invocations": ["getDriver", "isEmpty", "getDriver", "getService", "isEmpty", "getService", "toJSON", "getSecurityType", "sendEncapsulated", "toString", "getSecurityType", "fromJSON", "send", "toString", "fromJSON"]}, "repository": {"repo_id": 8786725, "url": "https://github.com/UnBiquitous/uos_core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 1244, "license": "licensed"}}