{"test_class": {"identifier": "DeviceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DeviceDao dao;", "modifier": "private", "type": "DeviceDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "private DeviceManager deviceManager;", "modifier": "private", "type": "DeviceManager", "declarator": "deviceManager", "var_name": "deviceManager"}, {"original_string": "private DriverManager driverManager;", "modifier": "private", "type": "DriverManager", "declarator": "driverManager", "var_name": "driverManager"}, {"original_string": "private UpDevice currentDevice;", "modifier": "private", "type": "UpDevice", "declarator": "currentDevice", "var_name": "currentDevice"}, {"original_string": "private DriverDao driverDao;", "modifier": "private", "type": "DriverDao", "declarator": "driverDao", "var_name": "driverDao"}, {"original_string": "private ConnectionManagerControlCenter connManager;", "modifier": "private", "type": "ConnectionManagerControlCenter", "declarator": "connManager", "var_name": "connManager"}, {"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private ConnectivityManager proxier;", "modifier": "private", "type": "ConnectivityManager", "declarator": "proxier", "var_name": "proxier"}], "file": "srcTest/org/unbiquitous/uos/core/deviceManager/DeviceManagerTest.java"}, "test_case": {"identifier": "shouldNotRegisterADriverWithEquivalentDriverNotInformed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldNotRegisterADriverWithEquivalentDriverNotInformed()\n\t\t\tthrows ServiceCallException, JSONException {\n\t\tNetworkDevice enteree = networkDevice(\"ADDR_UNKNOWN\", \"UNEXISTANT\");\n\t\tUpDevice device = new UpDevice(\"A\").addNetworkInterface(\"A\", \"T\");\n\n\t\twhen(gatewayHandshakeCall())\n\t\t\t\t.thenReturn(\n\t\t\t\t\t\tnew Response().addParameter(\"device\",\n\t\t\t\t\t\t\t\tdevice.toString()));\n\n\t\tJSONObject driverList = new JSONObject();\n\t\tUpDriver dummy = new UpDriver(\"DummyDriver\");\n\t\tdummy.addService(\"s1\");\n\t\tdummy.addEquivalentDrivers(\"equivalentDriver\");\n\n\t\tdriverList.put(\"id1\", dummy.toJSON());\n\n\t\twhen(gatewayListDriversCall()).thenReturn(\n\t\t\t\tnew Response().addParameter(\"driverList\",\n\t\t\t\t\t\tdriverList.toString()));\n\n\t\tList<JSONObject> jsonList = new ArrayList<JSONObject>();\n\n\t\tUpDriver equivalentDriver = new UpDriver(\"equivalentDriver\");\n\t\tequivalentDriver.addService(\"s1\");\n\t\tequivalentDriver.addEquivalentDrivers(\"notInformedEquivalentDriver\");\n\n\t\tjsonList.add(equivalentDriver.toJSON());\n\n\t\twhen(gatewayTellEquivalentDriverCall()).thenReturn(\n\t\t\t\tnew Response().addParameter(\"interfaces\", new JSONArray(\n\t\t\t\t\t\tjsonList).toString()));\n\n\t\tdeviceManager.deviceEntered(enteree);\n\n\t\tList<DriverModel> newGuyDrivers = driverDao.list(null, \"A\");\n\t\tassertEquals(0, newGuyDrivers.size());\n\t}", "signature": "void shouldNotRegisterADriverWithEquivalentDriverNotInformed()", "full_signature": "@Test public void shouldNotRegisterADriverWithEquivalentDriverNotInformed()", "class_method_signature": "DeviceManagerTest.shouldNotRegisterADriverWithEquivalentDriverNotInformed()", "testcase": true, "constructor": false, "invocations": ["networkDevice", "addNetworkInterface", "thenReturn", "when", "gatewayHandshakeCall", "addParameter", "toString", "addService", "addEquivalentDrivers", "put", "toJSON", "thenReturn", "when", "gatewayListDriversCall", "addParameter", "toString", "addService", "addEquivalentDrivers", "add", "toJSON", "thenReturn", "when", "gatewayTellEquivalentDriverCall", "addParameter", "toString", "deviceEntered", "list", "assertEquals", "size"]}, "focal_class": {"identifier": "DeviceManager", "superclass": "", "interfaces": "implements RadarListener", "fields": [{"original_string": "private static final String DEVICE_DRIVER_NAME = \"uos.DeviceDriver\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_DRIVER_NAME = \"uos.DeviceDriver\"", "var_name": "DEVICE_DRIVER_NAME"}, {"original_string": "private static final String DRIVERS_NAME_KEY = \"driversName\";", "modifier": "private static final", "type": "String", "declarator": "DRIVERS_NAME_KEY = \"driversName\"", "var_name": "DRIVERS_NAME_KEY"}, {"original_string": "private static final String INTERFACES_KEY = \"interfaces\";", "modifier": "private static final", "type": "String", "declarator": "INTERFACES_KEY = \"interfaces\"", "var_name": "INTERFACES_KEY"}, {"original_string": "private static final Logger logger = UOSLogging.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "logger = UOSLogging.getLogger()", "var_name": "logger"}, {"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private ConnectionManagerControlCenter connectionManagerControlCenter;", "modifier": "private", "type": "ConnectionManagerControlCenter", "declarator": "connectionManagerControlCenter", "var_name": "connectionManagerControlCenter"}, {"original_string": "private DeviceDao deviceDao;", "modifier": "private", "type": "DeviceDao", "declarator": "deviceDao", "var_name": "deviceDao"}, {"original_string": "private UpDevice currentDevice;", "modifier": "private", "type": "UpDevice", "declarator": "currentDevice", "var_name": "currentDevice"}, {"original_string": "private ConnectivityManager connectivityManager;", "modifier": "private", "type": "ConnectivityManager", "declarator": "connectivityManager", "var_name": "connectivityManager"}, {"original_string": "private DriverManager driverManager;", "modifier": "private", "type": "DriverManager", "declarator": "driverManager", "var_name": "driverManager"}, {"original_string": "private Set<String> unknownDrivers;", "modifier": "private", "type": "Set<String>", "declarator": "unknownDrivers", "var_name": "unknownDrivers"}, {"original_string": "private Set<DriverModel> dependents;", "modifier": "private", "type": "Set<DriverModel>", "declarator": "dependents", "var_name": "dependents"}], "methods": [{"identifier": "DeviceManager", "parameters": "(UpDevice currentDevice, DeviceDao deviceDao,\n\t\t\tDriverDao driverDao,\n\t\t\tConnectionManagerControlCenter connectionManagerControlCenter,\n\t\t\tConnectivityManager connectivityManager, Gateway gateway,\n\t\t\tDriverManager driverManager)", "modifiers": "public", "return": "", "signature": " DeviceManager(UpDevice currentDevice, DeviceDao deviceDao,\n\t\t\tDriverDao driverDao,\n\t\t\tConnectionManagerControlCenter connectionManagerControlCenter,\n\t\t\tConnectivityManager connectivityManager, Gateway gateway,\n\t\t\tDriverManager driverManager)", "full_signature": "public  DeviceManager(UpDevice currentDevice, DeviceDao deviceDao,\n\t\t\tDriverDao driverDao,\n\t\t\tConnectionManagerControlCenter connectionManagerControlCenter,\n\t\t\tConnectivityManager connectivityManager, Gateway gateway,\n\t\t\tDriverManager driverManager)", "class_method_signature": "DeviceManager.DeviceManager(UpDevice currentDevice, DeviceDao deviceDao,\n\t\t\tDriverDao driverDao,\n\t\t\tConnectionManagerControlCenter connectionManagerControlCenter,\n\t\t\tConnectivityManager connectivityManager, Gateway gateway,\n\t\t\tDriverManager driverManager)", "testcase": false, "constructor": true}, {"identifier": "registerDevice", "parameters": "(UpDevice device)", "modifiers": "public", "return": "void", "signature": "void registerDevice(UpDevice device)", "full_signature": "public void registerDevice(UpDevice device)", "class_method_signature": "DeviceManager.registerDevice(UpDevice device)", "testcase": false, "constructor": false}, {"identifier": "retrieveDevice", "parameters": "(String deviceName)", "modifiers": "public", "return": "UpDevice", "signature": "UpDevice retrieveDevice(String deviceName)", "full_signature": "public UpDevice retrieveDevice(String deviceName)", "class_method_signature": "DeviceManager.retrieveDevice(String deviceName)", "testcase": false, "constructor": false}, {"identifier": "retrieveDevice", "parameters": "(String networkAddress, String networkType)", "modifiers": "public", "return": "UpDevice", "signature": "UpDevice retrieveDevice(String networkAddress, String networkType)", "full_signature": "public UpDevice retrieveDevice(String networkAddress, String networkType)", "class_method_signature": "DeviceManager.retrieveDevice(String networkAddress, String networkType)", "testcase": false, "constructor": false}, {"identifier": "deviceEntered", "parameters": "(NetworkDevice device)", "modifiers": "@Override public", "return": "void", "signature": "void deviceEntered(NetworkDevice device)", "full_signature": "@Override public void deviceEntered(NetworkDevice device)", "class_method_signature": "DeviceManager.deviceEntered(NetworkDevice device)", "testcase": false, "constructor": false}, {"identifier": "doDriversRegistry", "parameters": "(NetworkDevice device, UpDevice upDevice)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void doDriversRegistry(NetworkDevice device, UpDevice upDevice)", "full_signature": "@SuppressWarnings(\"unchecked\") private void doDriversRegistry(NetworkDevice device, UpDevice upDevice)", "class_method_signature": "DeviceManager.doDriversRegistry(NetworkDevice device, UpDevice upDevice)", "testcase": false, "constructor": false}, {"identifier": "registerRemoteDriverInstances", "parameters": "(UpDevice upDevice, JSONObject driversListMap, String[] instanceIds)", "modifiers": "private", "return": "void", "signature": "void registerRemoteDriverInstances(UpDevice upDevice, JSONObject driversListMap, String[] instanceIds)", "full_signature": "private void registerRemoteDriverInstances(UpDevice upDevice, JSONObject driversListMap, String[] instanceIds)", "class_method_signature": "DeviceManager.registerRemoteDriverInstances(UpDevice upDevice, JSONObject driversListMap, String[] instanceIds)", "testcase": false, "constructor": false}, {"identifier": "findDrivers", "parameters": "(Set<String> unknownDrivers, UpDevice upDevice)", "modifiers": "private", "return": "void", "signature": "void findDrivers(Set<String> unknownDrivers, UpDevice upDevice)", "full_signature": "private void findDrivers(Set<String> unknownDrivers, UpDevice upDevice)", "class_method_signature": "DeviceManager.findDrivers(Set<String> unknownDrivers, UpDevice upDevice)", "testcase": false, "constructor": false}, {"identifier": "doHandshake", "parameters": "(NetworkDevice device, UpDevice upDevice)", "modifiers": "private", "return": "UpDevice", "signature": "UpDevice doHandshake(NetworkDevice device, UpDevice upDevice)", "full_signature": "private UpDevice doHandshake(NetworkDevice device, UpDevice upDevice)", "class_method_signature": "DeviceManager.doHandshake(NetworkDevice device, UpDevice upDevice)", "testcase": false, "constructor": false}, {"identifier": "deviceLeft", "parameters": "(NetworkDevice device)", "modifiers": "@Override public", "return": "void", "signature": "void deviceLeft(NetworkDevice device)", "full_signature": "@Override public void deviceLeft(NetworkDevice device)", "class_method_signature": "DeviceManager.deviceLeft(NetworkDevice device)", "testcase": false, "constructor": false}, {"identifier": "listDevices", "parameters": "()", "modifiers": "public", "return": "List<UpDevice>", "signature": "List<UpDevice> listDevices()", "full_signature": "public List<UpDevice> listDevices()", "class_method_signature": "DeviceManager.listDevices()", "testcase": false, "constructor": false}, {"identifier": "getDeviceDao", "parameters": "()", "modifiers": "public", "return": "DeviceDao", "signature": "DeviceDao getDeviceDao()", "full_signature": "public DeviceDao getDeviceDao()", "class_method_signature": "DeviceManager.getDeviceDao()", "testcase": false, "constructor": false}], "file": "src/org/unbiquitous/uos/core/deviceManager/DeviceManager.java"}, "focal_method": {"identifier": "deviceEntered", "parameters": "(NetworkDevice device)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void deviceEntered(NetworkDevice device) {\n\n\t\tif (device == null ) return;\n\t\t\n\t\t// verify if device entered is the current device\n\t\tString deviceHost = connectionManagerControlCenter.getHost(device.getNetworkDeviceName());\n\t\tfor (UpNetworkInterface networkInterface : this.currentDevice.getNetworks()) {\n\t\t\tString currentDeviceHost = connectionManagerControlCenter.getHost(networkInterface.getNetworkAddress());\n\t\t\tif(deviceHost != null && deviceHost.equals(currentDeviceHost)) {\n\t\t\t\tlogger.fine(\"Host of device entered is the same of current device:\" + device.getNetworkDeviceName());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// verify if already know this device.\n\t\tUpDevice upDevice = retrieveDevice(deviceHost,device.getNetworkDeviceType());\n\n\t\tif (upDevice == null){\n\t\t\tupDevice = doHandshake(device, upDevice);\n\t\t\tif (upDevice != null){\n\t\t\t\tdoDriversRegistry(device, upDevice); \n\t\t\t}\n\t\t}else{\n\t\t\tlogger.fine(\"Already known device \"+device.getNetworkDeviceName());\n\t\t}\n\t}", "signature": "void deviceEntered(NetworkDevice device)", "full_signature": "@Override public void deviceEntered(NetworkDevice device)", "class_method_signature": "DeviceManager.deviceEntered(NetworkDevice device)", "testcase": false, "constructor": false, "invocations": ["getHost", "getNetworkDeviceName", "getNetworks", "getHost", "getNetworkAddress", "equals", "fine", "getNetworkDeviceName", "retrieveDevice", "getNetworkDeviceType", "doHandshake", "doDriversRegistry", "fine", "getNetworkDeviceName"]}, "repository": {"repo_id": 8786725, "url": "https://github.com/UnBiquitous/uos_core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 1244, "license": "licensed"}}