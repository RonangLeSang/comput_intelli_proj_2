{"test_class": {"identifier": "AnsiRendererTest", "superclass": "", "interfaces": "", "fields": [], "file": "jansi/src/test/java/org/fusesource/jansi/AnsiRendererTest.java"}, "test_case": {"identifier": "testRenderNothing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRenderNothing() {\n        assertEquals(\"foo\", render(\"foo\"));\n    }", "signature": "void testRenderNothing()", "full_signature": "@Test public void testRenderNothing()", "class_method_signature": "AnsiRendererTest.testRenderNothing()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "render"]}, "focal_class": {"identifier": "AnsiRenderer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String BEGIN_TOKEN = \"@|\";", "modifier": "public static final", "type": "String", "declarator": "BEGIN_TOKEN = \"@|\"", "var_name": "BEGIN_TOKEN"}, {"original_string": "public static final String END_TOKEN = \"|@\";", "modifier": "public static final", "type": "String", "declarator": "END_TOKEN = \"|@\"", "var_name": "END_TOKEN"}, {"original_string": "public static final String CODE_TEXT_SEPARATOR = \" \";", "modifier": "public static final", "type": "String", "declarator": "CODE_TEXT_SEPARATOR = \" \"", "var_name": "CODE_TEXT_SEPARATOR"}, {"original_string": "public static final String CODE_LIST_SEPARATOR = \",\";", "modifier": "public static final", "type": "String", "declarator": "CODE_LIST_SEPARATOR = \",\"", "var_name": "CODE_LIST_SEPARATOR"}, {"original_string": "private static final int BEGIN_TOKEN_LEN = 2;", "modifier": "private static final", "type": "int", "declarator": "BEGIN_TOKEN_LEN = 2", "var_name": "BEGIN_TOKEN_LEN"}, {"original_string": "private static final int END_TOKEN_LEN = 2;", "modifier": "private static final", "type": "int", "declarator": "END_TOKEN_LEN = 2", "var_name": "END_TOKEN_LEN"}], "methods": [{"identifier": "render", "parameters": "(final String input)", "modifiers": "public static", "return": "String", "signature": "String render(final String input)", "full_signature": "public static String render(final String input)", "class_method_signature": "AnsiRenderer.render(final String input)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(final String input, Appendable target)", "modifiers": "public static", "return": "Appendable", "signature": "Appendable render(final String input, Appendable target)", "full_signature": "public static Appendable render(final String input, Appendable target)", "class_method_signature": "AnsiRenderer.render(final String input, Appendable target)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(final String text, final String... codes)", "modifiers": "public static", "return": "String", "signature": "String render(final String text, final String... codes)", "full_signature": "public static String render(final String text, final String... codes)", "class_method_signature": "AnsiRenderer.render(final String text, final String... codes)", "testcase": false, "constructor": false}, {"identifier": "renderCodes", "parameters": "(final String... codes)", "modifiers": "public static", "return": "String", "signature": "String renderCodes(final String... codes)", "full_signature": "public static String renderCodes(final String... codes)", "class_method_signature": "AnsiRenderer.renderCodes(final String... codes)", "testcase": false, "constructor": false}, {"identifier": "renderCodes", "parameters": "(final String codes)", "modifiers": "public static", "return": "String", "signature": "String renderCodes(final String codes)", "full_signature": "public static String renderCodes(final String codes)", "class_method_signature": "AnsiRenderer.renderCodes(final String codes)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(Ansi ansi, String... names)", "modifiers": "private static", "return": "Ansi", "signature": "Ansi render(Ansi ansi, String... names)", "full_signature": "private static Ansi render(Ansi ansi, String... names)", "class_method_signature": "AnsiRenderer.render(Ansi ansi, String... names)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(Ansi ansi, String name)", "modifiers": "private static", "return": "Ansi", "signature": "Ansi render(Ansi ansi, String name)", "full_signature": "private static Ansi render(Ansi ansi, String name)", "class_method_signature": "AnsiRenderer.render(Ansi ansi, String name)", "testcase": false, "constructor": false}, {"identifier": "test", "parameters": "(final String text)", "modifiers": "public static", "return": "boolean", "signature": "boolean test(final String text)", "full_signature": "public static boolean test(final String text)", "class_method_signature": "AnsiRenderer.test(final String text)", "testcase": false, "constructor": false}, {"identifier": "AnsiRenderer", "parameters": "()", "modifiers": "private", "return": "", "signature": " AnsiRenderer()", "full_signature": "private  AnsiRenderer()", "class_method_signature": "AnsiRenderer.AnsiRenderer()", "testcase": false, "constructor": true}], "file": "jansi/src/main/java/org/fusesource/jansi/AnsiRenderer.java"}, "focal_method": {"identifier": "render", "parameters": "(final String input)", "modifiers": "public static", "return": "String", "body": "public static String render(final String input) throws IllegalArgumentException {\n        try {\n            return render(input, new StringBuilder(input.length())).toString();\n        } catch (IOException e) {\n            // Cannot happen because StringBuilder does not throw IOException\n            throw new IllegalArgumentException(e);\n        }\n    }", "signature": "String render(final String input)", "full_signature": "public static String render(final String input)", "class_method_signature": "AnsiRenderer.render(final String input)", "testcase": false, "constructor": false, "invocations": ["toString", "render", "length"]}, "repository": {"repo_id": 298328, "url": "https://github.com/fusesource/jansi", "language": "Java", "is_fork": false, "fork_count": 99, "stargazer_count": 717, "size": 1133, "license": "licensed"}}