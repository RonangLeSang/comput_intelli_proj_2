{"test_class": {"identifier": "AnalysisServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static IMetadataDomainRepository metadataRepository;", "modifier": "private static", "type": "IMetadataDomainRepository", "declarator": "metadataRepository", "var_name": "metadataRepository"}, {"original_string": "private static IPlatformImporter importer;", "modifier": "private static", "type": "IPlatformImporter", "declarator": "importer", "var_name": "importer"}, {"original_string": "private static IAuthorizationPolicy policy;", "modifier": "private static", "type": "IAuthorizationPolicy", "declarator": "policy", "var_name": "policy"}, {"original_string": "private static IAclAwareMondrianCatalogService catalogService;", "modifier": "private static", "type": "IAclAwareMondrianCatalogService", "declarator": "catalogService", "var_name": "catalogService"}, {"original_string": "private static IDataAccessPermissionHandler permissionHandler;", "modifier": "private static", "type": "IDataAccessPermissionHandler", "declarator": "permissionHandler", "var_name": "permissionHandler"}, {"original_string": "private static final RepositoryFileAclDto acl = new RepositoryFileAclDto();", "modifier": "private static final", "type": "RepositoryFileAclDto", "declarator": "acl = new RepositoryFileAclDto()", "var_name": "acl"}, {"original_string": "private AnalysisService analysisService;", "modifier": "private", "type": "AnalysisService", "declarator": "analysisService", "var_name": "analysisService"}], "file": "core/src/test/java/org/pentaho/platform/dataaccess/datasource/api/AnalysisServiceTest.java"}, "test_case": {"identifier": "testSetAnalysisDatasourceAclNoAcl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetAnalysisDatasourceAclNoAcl() throws Exception {\n    allAccess();\n    String catalogName = \"catalogName\";\n    final MondrianCatalog mondrianCatalog = mock( MondrianCatalog.class );\n    when( catalogService.getCatalog( eq( catalogName ), any( IPentahoSession.class ) ) ).thenReturn( mondrianCatalog );\n    analysisService.setAnalysisDatasourceAcl( catalogName, null );\n    verify( catalogService ).setAclFor( eq( catalogName ), (RepositoryFileAcl) isNull() );\n  }", "signature": "void testSetAnalysisDatasourceAclNoAcl()", "full_signature": "@Test public void testSetAnalysisDatasourceAclNoAcl()", "class_method_signature": "AnalysisServiceTest.testSetAnalysisDatasourceAclNoAcl()", "testcase": true, "constructor": false, "invocations": ["allAccess", "mock", "thenReturn", "when", "getCatalog", "eq", "any", "setAnalysisDatasourceAcl", "setAclFor", "verify", "eq", "isNull"]}, "focal_class": {"identifier": "AnalysisService", "superclass": "extends DatasourceService", "interfaces": "", "fields": [{"original_string": "public static final String METADATA_EXT = \".xmi\";", "modifier": "public static final", "type": "String", "declarator": "METADATA_EXT = \".xmi\"", "var_name": "METADATA_EXT"}, {"original_string": "private static final String OVERWRITE_IN_REPOS = \"overwrite\";", "modifier": "private static final", "type": "String", "declarator": "OVERWRITE_IN_REPOS = \"overwrite\"", "var_name": "OVERWRITE_IN_REPOS"}, {"original_string": "private static final String DATASOURCE_NAME = \"datasourceName\";", "modifier": "private static final", "type": "String", "declarator": "DATASOURCE_NAME = \"datasourceName\"", "var_name": "DATASOURCE_NAME"}, {"original_string": "private static final String ENABLE_XMLA = \"EnableXmla\";", "modifier": "private static final", "type": "String", "declarator": "ENABLE_XMLA = \"EnableXmla\"", "var_name": "ENABLE_XMLA"}, {"original_string": "private static final String PARAMETERS = \"parameters\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETERS = \"parameters\"", "var_name": "PARAMETERS"}, {"original_string": "private static final String DOMAIN_ID = \"domain-id\";", "modifier": "private static final", "type": "String", "declarator": "DOMAIN_ID = \"domain-id\"", "var_name": "DOMAIN_ID"}, {"original_string": "private static final String MONDRIAN_MIME_TYPE = \"application/vnd.pentaho.mondrian+xml\";", "modifier": "private static final", "type": "String", "declarator": "MONDRIAN_MIME_TYPE = \"application/vnd.pentaho.mondrian+xml\"", "var_name": "MONDRIAN_MIME_TYPE"}, {"original_string": "private static final String CATALOG_NAME = \"catalogName\";", "modifier": "private static final", "type": "String", "declarator": "CATALOG_NAME = \"catalogName\"", "var_name": "CATALOG_NAME"}, {"original_string": "private static final String UTF_8 = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "UTF_8 = \"UTF-8\"", "var_name": "UTF_8"}, {"original_string": "private static final String ZIP_EXTENSION = \".zip\";", "modifier": "private static final", "type": "String", "declarator": "ZIP_EXTENSION = \".zip\"", "var_name": "ZIP_EXTENSION"}, {"original_string": "private static final String MONDRIAN_FILE_EXTENSION = \".mondrian.xml\";", "modifier": "private static final", "type": "String", "declarator": "MONDRIAN_FILE_EXTENSION = \".mondrian.xml\"", "var_name": "MONDRIAN_FILE_EXTENSION"}, {"original_string": "private static final String ANNOTATIONS_FILE = \"annotations.xml\";", "modifier": "private static final", "type": "String", "declarator": "ANNOTATIONS_FILE = \"annotations.xml\"", "var_name": "ANNOTATIONS_FILE"}, {"original_string": "private static final Log logger = LogFactory.getLog( AnalysisService.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( AnalysisService.class )", "var_name": "logger"}, {"original_string": "private static final String ANNOTATION_FOLDER = RepositoryFile.SEPARATOR + \"etc\"\n      + RepositoryFile.SEPARATOR + \"mondrian\" + RepositoryFile.SEPARATOR;", "modifier": "private static final", "type": "String", "declarator": "ANNOTATION_FOLDER = RepositoryFile.SEPARATOR + \"etc\"\n      + RepositoryFile.SEPARATOR + \"mondrian\" + RepositoryFile.SEPARATOR", "var_name": "ANNOTATION_FOLDER"}, {"original_string": "protected IPlatformImporter importer;", "modifier": "protected", "type": "IPlatformImporter", "declarator": "importer", "var_name": "importer"}, {"original_string": "protected IAclAwareMondrianCatalogService aclAwareMondrianCatalogService;", "modifier": "protected", "type": "IAclAwareMondrianCatalogService", "declarator": "aclAwareMondrianCatalogService", "var_name": "aclAwareMondrianCatalogService"}], "methods": [{"identifier": "AnalysisService", "parameters": "()", "modifiers": "public", "return": "", "signature": " AnalysisService()", "full_signature": "public  AnalysisService()", "class_method_signature": "AnalysisService.AnalysisService()", "testcase": false, "constructor": true}, {"identifier": "doGetAnalysisFilesAsDownload", "parameters": "( String analysisId )", "modifiers": "public", "return": "Map<String, InputStream>", "signature": "Map<String, InputStream> doGetAnalysisFilesAsDownload( String analysisId )", "full_signature": "public Map<String, InputStream> doGetAnalysisFilesAsDownload( String analysisId )", "class_method_signature": "AnalysisService.doGetAnalysisFilesAsDownload( String analysisId )", "testcase": false, "constructor": false}, {"identifier": "removeAnalysis", "parameters": "( String analysisId )", "modifiers": "public", "return": "void", "signature": "void removeAnalysis( String analysisId )", "full_signature": "public void removeAnalysis( String analysisId )", "class_method_signature": "AnalysisService.removeAnalysis( String analysisId )", "testcase": false, "constructor": false}, {"identifier": "getAnalysisDatasourceIds", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAnalysisDatasourceIds()", "full_signature": "public List<String> getAnalysisDatasourceIds()", "class_method_signature": "AnalysisService.getAnalysisDatasourceIds()", "testcase": false, "constructor": false}, {"identifier": "putMondrianSchema", "parameters": "( InputStream dataInputStream, FormDataContentDisposition schemaFileInfo,\n                                 String catalogName, // Optional\n                                 String origCatalogName, // Optional\n                                 String datasourceName, // Optional\n                                 boolean overwrite, boolean xmlaEnabledFlag, String parameters,\n                                 RepositoryFileAclDto acl )", "modifiers": "public", "return": "void", "signature": "void putMondrianSchema( InputStream dataInputStream, FormDataContentDisposition schemaFileInfo,\n                                 String catalogName, // Optional\n                                 String origCatalogName, // Optional\n                                 String datasourceName, // Optional\n                                 boolean overwrite, boolean xmlaEnabledFlag, String parameters,\n                                 RepositoryFileAclDto acl )", "full_signature": "public void putMondrianSchema( InputStream dataInputStream, FormDataContentDisposition schemaFileInfo,\n                                 String catalogName, // Optional\n                                 String origCatalogName, // Optional\n                                 String datasourceName, // Optional\n                                 boolean overwrite, boolean xmlaEnabledFlag, String parameters,\n                                 RepositoryFileAclDto acl )", "class_method_signature": "AnalysisService.putMondrianSchema( InputStream dataInputStream, FormDataContentDisposition schemaFileInfo,\n                                 String catalogName, // Optional\n                                 String origCatalogName, // Optional\n                                 String datasourceName, // Optional\n                                 boolean overwrite, boolean xmlaEnabledFlag, String parameters,\n                                 RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "getAnalysisDatasourceAcl", "parameters": "( String analysisId )", "modifiers": "public", "return": "RepositoryFileAclDto", "signature": "RepositoryFileAclDto getAnalysisDatasourceAcl( String analysisId )", "full_signature": "public RepositoryFileAclDto getAnalysisDatasourceAcl( String analysisId )", "class_method_signature": "AnalysisService.getAnalysisDatasourceAcl( String analysisId )", "testcase": false, "constructor": false}, {"identifier": "setAnalysisDatasourceAcl", "parameters": "( String analysisId, RepositoryFileAclDto aclDto )", "modifiers": "public", "return": "void", "signature": "void setAnalysisDatasourceAcl( String analysisId, RepositoryFileAclDto aclDto )", "full_signature": "public void setAnalysisDatasourceAcl( String analysisId, RepositoryFileAclDto aclDto )", "class_method_signature": "AnalysisService.setAnalysisDatasourceAcl( String analysisId, RepositoryFileAclDto aclDto )", "testcase": false, "constructor": false}, {"identifier": "checkAnalysisExists", "parameters": "( String analysisId )", "modifiers": "private", "return": "void", "signature": "void checkAnalysisExists( String analysisId )", "full_signature": "private void checkAnalysisExists( String analysisId )", "class_method_signature": "AnalysisService.checkAnalysisExists( String analysisId )", "testcase": false, "constructor": false}, {"identifier": "processMondrianImport", "parameters": "( InputStream dataInputStream, String catalogName, String origCatalogName,\n                                        boolean overwrite, boolean xmlaEnabledFlag, String parameters, String fileName,\n                                        RepositoryFileAclDto acl )", "modifiers": "protected", "return": "void", "signature": "void processMondrianImport( InputStream dataInputStream, String catalogName, String origCatalogName,\n                                        boolean overwrite, boolean xmlaEnabledFlag, String parameters, String fileName,\n                                        RepositoryFileAclDto acl )", "full_signature": "protected void processMondrianImport( InputStream dataInputStream, String catalogName, String origCatalogName,\n                                        boolean overwrite, boolean xmlaEnabledFlag, String parameters, String fileName,\n                                        RepositoryFileAclDto acl )", "class_method_signature": "AnalysisService.processMondrianImport( InputStream dataInputStream, String catalogName, String origCatalogName,\n                                        boolean overwrite, boolean xmlaEnabledFlag, String parameters, String fileName,\n                                        RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "isChangeCatalogName", "parameters": "( final String origCatalogName, final IPlatformImportBundle bundle )", "modifiers": "private", "return": "boolean", "signature": "boolean isChangeCatalogName( final String origCatalogName, final IPlatformImportBundle bundle )", "full_signature": "private boolean isChangeCatalogName( final String origCatalogName, final IPlatformImportBundle bundle )", "class_method_signature": "AnalysisService.isChangeCatalogName( final String origCatalogName, final IPlatformImportBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "isOverwriteAnnotations", "parameters": "( final String parameters, final boolean overWriteInRepository )", "modifiers": "private", "return": "boolean", "signature": "boolean isOverwriteAnnotations( final String parameters, final boolean overWriteInRepository )", "full_signature": "private boolean isOverwriteAnnotations( final String parameters, final boolean overWriteInRepository )", "class_method_signature": "AnalysisService.isOverwriteAnnotations( final String parameters, final boolean overWriteInRepository )", "testcase": false, "constructor": false}, {"identifier": "determineOverwriteFlag", "parameters": "( String parameters, boolean overWriteInRepository )", "modifiers": "private", "return": "boolean", "signature": "boolean determineOverwriteFlag( String parameters, boolean overWriteInRepository )", "full_signature": "private boolean determineOverwriteFlag( String parameters, boolean overWriteInRepository )", "class_method_signature": "AnalysisService.determineOverwriteFlag( String parameters, boolean overWriteInRepository )", "testcase": false, "constructor": false}, {"identifier": "createPlatformBundle", "parameters": "( String parameters, InputStream dataInputStream,\n                                                      String catalogName, boolean overWriteInRepository,\n                                                      String fileName, boolean xmlaEnabled, RepositoryFileAclDto acl )", "modifiers": "private", "return": "IPlatformImportBundle", "signature": "IPlatformImportBundle createPlatformBundle( String parameters, InputStream dataInputStream,\n                                                      String catalogName, boolean overWriteInRepository,\n                                                      String fileName, boolean xmlaEnabled, RepositoryFileAclDto acl )", "full_signature": "private IPlatformImportBundle createPlatformBundle( String parameters, InputStream dataInputStream,\n                                                      String catalogName, boolean overWriteInRepository,\n                                                      String fileName, boolean xmlaEnabled, RepositoryFileAclDto acl )", "class_method_signature": "AnalysisService.createPlatformBundle( String parameters, InputStream dataInputStream,\n                                                      String catalogName, boolean overWriteInRepository,\n                                                      String fileName, boolean xmlaEnabled, RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "( String parameters, String key )", "modifiers": "private", "return": "String", "signature": "String getValue( String parameters, String key )", "full_signature": "private String getValue( String parameters, String key )", "class_method_signature": "AnalysisService.getValue( String parameters, String key )", "testcase": false, "constructor": false}, {"identifier": "getXMLInputFactory", "parameters": "()", "modifiers": "", "return": "XMLInputFactory", "signature": "XMLInputFactory getXMLInputFactory()", "full_signature": " XMLInputFactory getXMLInputFactory()", "class_method_signature": "AnalysisService.getXMLInputFactory()", "testcase": false, "constructor": false}, {"identifier": "getSchemaName", "parameters": "( String encoding, InputStream inputStream )", "modifiers": "", "return": "String", "signature": "String getSchemaName( String encoding, InputStream inputStream )", "full_signature": " String getSchemaName( String encoding, InputStream inputStream )", "class_method_signature": "AnalysisService.getSchemaName( String encoding, InputStream inputStream )", "testcase": false, "constructor": false}, {"identifier": "determineDomainCatalogName", "parameters": "( String parameters, String catalogName, String fileName,\n                                             InputStream inputStream )", "modifiers": "private", "return": "String", "signature": "String determineDomainCatalogName( String parameters, String catalogName, String fileName,\n                                             InputStream inputStream )", "full_signature": "private String determineDomainCatalogName( String parameters, String catalogName, String fileName,\n                                             InputStream inputStream )", "class_method_signature": "AnalysisService.determineDomainCatalogName( String parameters, String catalogName, String fileName,\n                                             InputStream inputStream )", "testcase": false, "constructor": false}, {"identifier": "createNewMondrianCatalogRepositoryHelper", "parameters": "()", "modifiers": "protected", "return": "MondrianCatalogRepositoryHelper", "signature": "MondrianCatalogRepositoryHelper createNewMondrianCatalogRepositoryHelper()", "full_signature": "protected MondrianCatalogRepositoryHelper createNewMondrianCatalogRepositoryHelper()", "class_method_signature": "AnalysisService.createNewMondrianCatalogRepositoryHelper()", "testcase": false, "constructor": false}, {"identifier": "canAdministerCheck", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean canAdministerCheck()", "full_signature": "protected boolean canAdministerCheck()", "class_method_signature": "AnalysisService.canAdministerCheck()", "testcase": false, "constructor": false}, {"identifier": "ensureDataAccessPermissionCheck", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void ensureDataAccessPermissionCheck()", "full_signature": "protected void ensureDataAccessPermissionCheck()", "class_method_signature": "AnalysisService.ensureDataAccessPermissionCheck()", "testcase": false, "constructor": false}, {"identifier": "accessValidation", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void accessValidation()", "full_signature": "protected void accessValidation()", "class_method_signature": "AnalysisService.accessValidation()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "protected", "return": "IPentahoSession", "signature": "IPentahoSession getSession()", "full_signature": "protected IPentahoSession getSession()", "class_method_signature": "AnalysisService.getSession()", "testcase": false, "constructor": false}, {"identifier": "fileNameValidation", "parameters": "( final String fileName )", "modifiers": "private", "return": "void", "signature": "void fileNameValidation( final String fileName )", "full_signature": "private void fileNameValidation( final String fileName )", "class_method_signature": "AnalysisService.fileNameValidation( final String fileName )", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/pentaho/platform/dataaccess/datasource/api/AnalysisService.java"}, "focal_method": {"identifier": "setAnalysisDatasourceAcl", "parameters": "( String analysisId, RepositoryFileAclDto aclDto )", "modifiers": "public", "return": "void", "body": "public void setAnalysisDatasourceAcl( String analysisId, RepositoryFileAclDto aclDto )\n      throws PentahoAccessControlException, FileNotFoundException {\n    checkAnalysisExists( analysisId );\n\n    final RepositoryFileAcl acl = aclDto == null ? null : repositoryFileAclAdapter.unmarshal( aclDto );\n    if ( aclAwareMondrianCatalogService != null ) {\n      aclAwareMondrianCatalogService.setAclFor( analysisId, acl );\n    }\n    flushDataSources();\n  }", "signature": "void setAnalysisDatasourceAcl( String analysisId, RepositoryFileAclDto aclDto )", "full_signature": "public void setAnalysisDatasourceAcl( String analysisId, RepositoryFileAclDto aclDto )", "class_method_signature": "AnalysisService.setAnalysisDatasourceAcl( String analysisId, RepositoryFileAclDto aclDto )", "testcase": false, "constructor": false, "invocations": ["checkAnalysisExists", "unmarshal", "setAclFor", "flushDataSources"]}, "repository": {"repo_id": 2316191, "url": "https://github.com/pentaho/data-access", "language": "Java", "is_fork": false, "fork_count": 138, "stargazer_count": 31, "size": 7276, "license": "licensed"}}