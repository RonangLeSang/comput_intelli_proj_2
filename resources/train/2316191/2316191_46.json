{"test_class": {"identifier": "DatasourceServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static IAuthorizationPolicy authorizationPolicy;", "modifier": "private static", "type": "IAuthorizationPolicy", "declarator": "authorizationPolicy", "var_name": "authorizationPolicy"}], "file": "core/src/test/java/org/pentaho/platform/dataaccess/datasource/api/DatasourceServiceTest.java"}, "test_case": {"identifier": "isMetadataDomainTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void isMetadataDomainTest() throws ObjectFactoryException {\n    // given\n    Domain domain = mock( Domain.class );\n    List<LogicalModel> logicalModelList = new ArrayList<>(  );\n    LogicalModel model = new LogicalModel();\n    LogicalModel model2 = new LogicalModel();\n    // when\n    assertFalse( DatasourceService.isMetadataDatasource( (Domain) null ) );\n    assertTrue( DatasourceService.isMetadataDatasource( domain ) );\n\n    logicalModelList.add( model );\n    when(domain.getLogicalModels()).thenReturn( logicalModelList );\n    assertTrue( DatasourceService.isMetadataDatasource( domain ) );\n\n    model.setProperty( \"AGILE_BI_GENERATED_SCHEMA\", true );\n    assertFalse( DatasourceService.isMetadataDatasource( domain ) );\n\n    model2.setProperty( \"WIZARD_GENERATED_SCHEMA\", true );\n    logicalModelList.clear();\n    logicalModelList.add( model2 );\n    assertFalse( DatasourceService.isMetadataDatasource( domain ) );\n\n  }", "signature": "void isMetadataDomainTest()", "full_signature": "@Test public void isMetadataDomainTest()", "class_method_signature": "DatasourceServiceTest.isMetadataDomainTest()", "testcase": true, "constructor": false, "invocations": ["mock", "assertFalse", "isMetadataDatasource", "assertTrue", "isMetadataDatasource", "add", "thenReturn", "when", "getLogicalModels", "assertTrue", "isMetadataDatasource", "setProperty", "assertFalse", "isMetadataDatasource", "setProperty", "clear", "add", "assertFalse", "isMetadataDatasource"]}, "focal_class": {"identifier": "DatasourceService", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected IMetadataDomainRepository metadataDomainRepository;", "modifier": "protected", "type": "IMetadataDomainRepository", "declarator": "metadataDomainRepository", "var_name": "metadataDomainRepository"}, {"original_string": "protected IMondrianCatalogService mondrianCatalogService;", "modifier": "protected", "type": "IMondrianCatalogService", "declarator": "mondrianCatalogService", "var_name": "mondrianCatalogService"}, {"original_string": "protected RepositoryFileAclAdapter repositoryFileAclAdapter;", "modifier": "protected", "type": "RepositoryFileAclAdapter", "declarator": "repositoryFileAclAdapter", "var_name": "repositoryFileAclAdapter"}], "methods": [{"identifier": "DatasourceService", "parameters": "()", "modifiers": "public", "return": "", "signature": " DatasourceService()", "full_signature": "public  DatasourceService()", "class_method_signature": "DatasourceService.DatasourceService()", "testcase": false, "constructor": true}, {"identifier": "getRepository", "parameters": "()", "modifiers": "protected", "return": "IUnifiedRepository", "signature": "IUnifiedRepository getRepository()", "full_signature": "protected IUnifiedRepository getRepository()", "class_method_signature": "DatasourceService.getRepository()", "testcase": false, "constructor": false}, {"identifier": "canAdminister", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean canAdminister()", "full_signature": "public static boolean canAdminister()", "class_method_signature": "DatasourceService.canAdminister()", "testcase": false, "constructor": false}, {"identifier": "validateAccess", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void validateAccess()", "full_signature": "public static void validateAccess()", "class_method_signature": "DatasourceService.validateAccess()", "testcase": false, "constructor": false}, {"identifier": "canManageACL", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean canManageACL()", "full_signature": "protected boolean canManageACL()", "class_method_signature": "DatasourceService.canManageACL()", "testcase": false, "constructor": false}, {"identifier": "fixEncodedSlashParam", "parameters": "( String param )", "modifiers": "protected", "return": "String", "signature": "String fixEncodedSlashParam( String param )", "full_signature": "protected String fixEncodedSlashParam( String param )", "class_method_signature": "DatasourceService.fixEncodedSlashParam( String param )", "testcase": false, "constructor": false}, {"identifier": "isMetadataDatasource", "parameters": "( String id )", "modifiers": "public", "return": "boolean", "signature": "boolean isMetadataDatasource( String id )", "full_signature": "public boolean isMetadataDatasource( String id )", "class_method_signature": "DatasourceService.isMetadataDatasource( String id )", "testcase": false, "constructor": false}, {"identifier": "isMetadataDatasource", "parameters": "( Domain domain )", "modifiers": "public static", "return": "boolean", "signature": "boolean isMetadataDatasource( Domain domain )", "full_signature": "public static boolean isMetadataDatasource( Domain domain )", "class_method_signature": "DatasourceService.isMetadataDatasource( Domain domain )", "testcase": false, "constructor": false}, {"identifier": "parseMondrianSchemaName", "parameters": "( String dswId, Map<String, InputStream> fileData )", "modifiers": "public static", "return": "void", "signature": "void parseMondrianSchemaName( String dswId, Map<String, InputStream> fileData )", "full_signature": "public static void parseMondrianSchemaName( String dswId, Map<String, InputStream> fileData )", "class_method_signature": "DatasourceService.parseMondrianSchemaName( String dswId, Map<String, InputStream> fileData )", "testcase": false, "constructor": false}, {"identifier": "flushDataSources", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void flushDataSources()", "full_signature": "protected void flushDataSources()", "class_method_signature": "DatasourceService.flushDataSources()", "testcase": false, "constructor": false}, {"identifier": "ensureDataAccessPermission", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureDataAccessPermission()", "full_signature": "public void ensureDataAccessPermission()", "class_method_signature": "DatasourceService.ensureDataAccessPermission()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/pentaho/platform/dataaccess/datasource/api/DatasourceService.java"}, "focal_method": {"identifier": "isMetadataDatasource", "parameters": "( String id )", "modifiers": "public", "return": "boolean", "body": "public boolean isMetadataDatasource( String id ) {\n    Domain domain;\n    try {\n      domain = metadataDomainRepository.getDomain( id );\n      if ( domain == null ) {\n        return false;\n      }\n    } catch ( Exception e ) { // If we can't load the domain then we MUST return false\n      return false;\n    }\n\n    return isMetadataDatasource( domain );\n  }", "signature": "boolean isMetadataDatasource( String id )", "full_signature": "public boolean isMetadataDatasource( String id )", "class_method_signature": "DatasourceService.isMetadataDatasource( String id )", "testcase": false, "constructor": false, "invocations": ["getDomain", "isMetadataDatasource"]}, "repository": {"repo_id": 2316191, "url": "https://github.com/pentaho/data-access", "language": "Java", "is_fork": false, "fork_count": 138, "stargazer_count": 31, "size": 7276, "license": "licensed"}}