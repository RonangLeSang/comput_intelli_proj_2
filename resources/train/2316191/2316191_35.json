{"test_class": {"identifier": "MetadataResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static MetadataResource metadataResource;", "modifier": "private static", "type": "MetadataResource", "declarator": "metadataResource", "var_name": "metadataResource"}], "file": "core/src/test/java/org/pentaho/platform/dataaccess/datasource/api/resources/MetadataResourceTest.java"}, "test_case": {"identifier": "testImportMetadataDatasource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testImportMetadataDatasource() throws Exception {\n    Response mockResponse = Response.ok().status( new Integer( 3 ) ).type( MediaType.TEXT_PLAIN ).build();\n\n    String domainId = \"domainId\";\n    InputStream metadataFile = mock( InputStream.class );\n    FormDataContentDisposition metadataFileInfo = mock( FormDataContentDisposition.class );\n    String overwrite = \"overwrite\";\n    List<FormDataBodyPart> localeFiles = mock( List.class );\n    List<FormDataContentDisposition> localeFilesInfo = mock( List.class );\n\n    doNothing().when( metadataResource.service )\n      .importMetadataDatasource( domainId, metadataFile, metadataFileInfo, true, localeFiles,\n        localeFilesInfo, null );\n    doReturn( mockResponse ).when( metadataResource ).buildOkResponse( \"3\" );\n\n    Response response = metadataResource.importMetadataDatasourceLegacy( domainId, metadataFile, metadataFileInfo,\n      overwrite, localeFiles,\n      localeFilesInfo, null );\n\n    verify( metadataResource, times( 1 ) ).importMetadataDatasourceLegacy( domainId, metadataFile, metadataFileInfo,\n      overwrite, localeFiles,\n      localeFilesInfo, null );\n    assertEquals( mockResponse.getStatus(), response.getStatus() );\n  }", "signature": "void testImportMetadataDatasource()", "full_signature": "@Test public void testImportMetadataDatasource()", "class_method_signature": "MetadataResourceTest.testImportMetadataDatasource()", "testcase": true, "constructor": false, "invocations": ["build", "type", "status", "ok", "mock", "mock", "mock", "mock", "importMetadataDatasource", "when", "doNothing", "buildOkResponse", "when", "doReturn", "importMetadataDatasourceLegacy", "importMetadataDatasourceLegacy", "verify", "times", "assertEquals", "getStatus", "getStatus"]}, "focal_class": {"identifier": "MetadataResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog( MetadataResource.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( MetadataResource.class )", "var_name": "logger"}, {"original_string": "protected static final String OVERWRITE_IN_REPOS = \"overwrite\";", "modifier": "protected static final", "type": "String", "declarator": "OVERWRITE_IN_REPOS = \"overwrite\"", "var_name": "OVERWRITE_IN_REPOS"}, {"original_string": "private static final String SUCCESS = \"3\";", "modifier": "private static final", "type": "String", "declarator": "SUCCESS = \"3\"", "var_name": "SUCCESS"}, {"original_string": "private static final String DATASOURCE_ACL = \"acl\";", "modifier": "private static final", "type": "String", "declarator": "DATASOURCE_ACL = \"acl\"", "var_name": "DATASOURCE_ACL"}, {"original_string": "private static final String XMI_EXTENSION = \".xmi\";", "modifier": "private static final", "type": "String", "declarator": "XMI_EXTENSION = \".xmi\"", "var_name": "XMI_EXTENSION"}, {"original_string": "protected MetadataService service;", "modifier": "protected", "type": "MetadataService", "declarator": "service", "var_name": "service"}, {"original_string": "protected IMetadataDomainRepository metadataDomainRepository;", "modifier": "protected", "type": "IMetadataDomainRepository", "declarator": "metadataDomainRepository", "var_name": "metadataDomainRepository"}, {"original_string": "protected ResourceUtil resourceUtil;", "modifier": "protected", "type": "ResourceUtil", "declarator": "resourceUtil", "var_name": "resourceUtil"}], "methods": [{"identifier": "MetadataResource", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetadataResource()", "full_signature": "public  MetadataResource()", "class_method_signature": "MetadataResource.MetadataResource()", "testcase": false, "constructor": true}, {"identifier": "createMetadataService", "parameters": "()", "modifiers": "protected", "return": "MetadataService", "signature": "MetadataService createMetadataService()", "full_signature": "protected MetadataService createMetadataService()", "class_method_signature": "MetadataResource.createMetadataService()", "testcase": false, "constructor": false}, {"identifier": "downloadMetadata", "parameters": "( @PathParam( \"domainId\" ) String domainId )", "modifiers": "@GET @Path( \"/domain/{domainId : .+}\" ) @Produces( WILDCARD ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource export succeeded.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to export Metadata datasource.\" ), @ResponseCode( code = 500, condition = \"Failure to export Metadata datasource.\" ) } ) public", "return": "Response", "signature": "Response downloadMetadata( @PathParam( \"domainId\" ) String domainId )", "full_signature": "@GET @Path( \"/domain/{domainId : .+}\" ) @Produces( WILDCARD ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource export succeeded.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to export Metadata datasource.\" ), @ResponseCode( code = 500, condition = \"Failure to export Metadata datasource.\" ) } ) public Response downloadMetadata( @PathParam( \"domainId\" ) String domainId )", "class_method_signature": "MetadataResource.downloadMetadata( @PathParam( \"domainId\" ) String domainId )", "testcase": false, "constructor": false}, {"identifier": "deleteMetadata", "parameters": "( @PathParam( \"domainId\" ) String domainId )", "modifiers": "@DELETE @Path( \"/domain/{domainId : .+}\" ) @Produces( WILDCARD ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource removed.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to delete the Metadata datasource.\" ) } ) public", "return": "Response", "signature": "Response deleteMetadata( @PathParam( \"domainId\" ) String domainId )", "full_signature": "@DELETE @Path( \"/domain/{domainId : .+}\" ) @Produces( WILDCARD ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource removed.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to delete the Metadata datasource.\" ) } ) public Response deleteMetadata( @PathParam( \"domainId\" ) String domainId )", "class_method_signature": "MetadataResource.deleteMetadata( @PathParam( \"domainId\" ) String domainId )", "testcase": false, "constructor": false}, {"identifier": "listDomains", "parameters": "()", "modifiers": "@GET @Path( \"/domain\" ) @Produces( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully retrieved the list of existing metadata IDs\" ) } ) public", "return": "JaxbList<String>", "signature": "JaxbList<String> listDomains()", "full_signature": "@GET @Path( \"/domain\" ) @Produces( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully retrieved the list of existing metadata IDs\" ) } ) public JaxbList<String> listDomains()", "class_method_signature": "MetadataResource.listDomains()", "testcase": false, "constructor": false}, {"identifier": "importMetadataDatasourceLegacy", "parameters": "( @PathParam( \"domainId\" ) String domainId,\n                                                  @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                                  @FormDataParam( \"metadataFile\" )\n                                                  FormDataContentDisposition metadataFileInfo,\n                                                  @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                                  @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                                  @FormDataParam( \"localeFiles\" )\n                                                  List<FormDataContentDisposition> localeFilesInfo,\n                                                  @FormDataParam( DATASOURCE_ACL )\n                                                  RepositoryFileAclDto acl )", "modifiers": "public", "return": "Response", "signature": "Response importMetadataDatasourceLegacy( @PathParam( \"domainId\" ) String domainId,\n                                                  @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                                  @FormDataParam( \"metadataFile\" )\n                                                  FormDataContentDisposition metadataFileInfo,\n                                                  @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                                  @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                                  @FormDataParam( \"localeFiles\" )\n                                                  List<FormDataContentDisposition> localeFilesInfo,\n                                                  @FormDataParam( DATASOURCE_ACL )\n                                                  RepositoryFileAclDto acl )", "full_signature": "public Response importMetadataDatasourceLegacy( @PathParam( \"domainId\" ) String domainId,\n                                                  @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                                  @FormDataParam( \"metadataFile\" )\n                                                  FormDataContentDisposition metadataFileInfo,\n                                                  @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                                  @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                                  @FormDataParam( \"localeFiles\" )\n                                                  List<FormDataContentDisposition> localeFilesInfo,\n                                                  @FormDataParam( DATASOURCE_ACL )\n                                                  RepositoryFileAclDto acl )", "class_method_signature": "MetadataResource.importMetadataDatasourceLegacy( @PathParam( \"domainId\" ) String domainId,\n                                                  @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                                  @FormDataParam( \"metadataFile\" )\n                                                  FormDataContentDisposition metadataFileInfo,\n                                                  @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                                  @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                                  @FormDataParam( \"localeFiles\" )\n                                                  List<FormDataContentDisposition> localeFilesInfo,\n                                                  @FormDataParam( DATASOURCE_ACL )\n                                                  RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "catchPlatformImportException", "parameters": "( String domainId, PlatformImportException e )", "modifiers": "private", "return": "Response", "signature": "Response catchPlatformImportException( String domainId, PlatformImportException e )", "full_signature": "private Response catchPlatformImportException( String domainId, PlatformImportException e )", "class_method_signature": "MetadataResource.catchPlatformImportException( String domainId, PlatformImportException e )", "testcase": false, "constructor": false}, {"identifier": "importMetadata", "parameters": "( @PathParam( \"domainId\" ) String domainId,\n      @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n      @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n      @FormDataParam( OVERWRITE_IN_REPOS ) Boolean overwrite,\n      @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n      @FormDataParam( \"localeFiles\" ) List<FormDataContentDisposition> localeFilesInfo,\n      @FormDataParam( DATASOURCE_ACL ) RepositoryFileAclDto acl )", "modifiers": "@PUT @Path( \"/domain/{domainId : .+}\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) @Produces( \"text/plain\" ) @StatusCodes( { @ResponseCode( code = 409, condition = \"Content already exists (use overwrite flag to force)\" ), @ResponseCode( code = 401, condition = \"Import failed because publish is prohibited\" ), @ResponseCode( code = 500, condition = \"Unspecified general error has occurred\" ), @ResponseCode( code = 412, condition = \"Metadata datasource import failed. Error code or message included in response entity\" ), @ResponseCode( code = 403, condition = \"Access Control Forbidden\" ), @ResponseCode( code = 201, condition = \"Indicates successful import\" ) } ) public", "return": "Response", "signature": "Response importMetadata( @PathParam( \"domainId\" ) String domainId,\n      @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n      @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n      @FormDataParam( OVERWRITE_IN_REPOS ) Boolean overwrite,\n      @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n      @FormDataParam( \"localeFiles\" ) List<FormDataContentDisposition> localeFilesInfo,\n      @FormDataParam( DATASOURCE_ACL ) RepositoryFileAclDto acl )", "full_signature": "@PUT @Path( \"/domain/{domainId : .+}\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) @Produces( \"text/plain\" ) @StatusCodes( { @ResponseCode( code = 409, condition = \"Content already exists (use overwrite flag to force)\" ), @ResponseCode( code = 401, condition = \"Import failed because publish is prohibited\" ), @ResponseCode( code = 500, condition = \"Unspecified general error has occurred\" ), @ResponseCode( code = 412, condition = \"Metadata datasource import failed. Error code or message included in response entity\" ), @ResponseCode( code = 403, condition = \"Access Control Forbidden\" ), @ResponseCode( code = 201, condition = \"Indicates successful import\" ) } ) public Response importMetadata( @PathParam( \"domainId\" ) String domainId,\n      @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n      @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n      @FormDataParam( OVERWRITE_IN_REPOS ) Boolean overwrite,\n      @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n      @FormDataParam( \"localeFiles\" ) List<FormDataContentDisposition> localeFilesInfo,\n      @FormDataParam( DATASOURCE_ACL ) RepositoryFileAclDto acl )", "class_method_signature": "MetadataResource.importMetadata( @PathParam( \"domainId\" ) String domainId,\n      @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n      @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n      @FormDataParam( OVERWRITE_IN_REPOS ) Boolean overwrite,\n      @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n      @FormDataParam( \"localeFiles\" ) List<FormDataContentDisposition> localeFilesInfo,\n      @FormDataParam( DATASOURCE_ACL ) RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "importMetadataDatasource", "parameters": "( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "modifiers": "protected", "return": "Response", "signature": "Response importMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "full_signature": "protected Response importMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "class_method_signature": "MetadataResource.importMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "buildOkResponse", "parameters": "( String statusCode )", "modifiers": "protected", "return": "Response", "signature": "Response buildOkResponse( String statusCode )", "full_signature": "protected Response buildOkResponse( String statusCode )", "class_method_signature": "MetadataResource.buildOkResponse( String statusCode )", "testcase": false, "constructor": false}, {"identifier": "buildOkResponse", "parameters": "()", "modifiers": "protected", "return": "Response", "signature": "Response buildOkResponse()", "full_signature": "protected Response buildOkResponse()", "class_method_signature": "MetadataResource.buildOkResponse()", "testcase": false, "constructor": false}, {"identifier": "buildUnauthorizedResponse", "parameters": "()", "modifiers": "protected", "return": "Response", "signature": "Response buildUnauthorizedResponse()", "full_signature": "protected Response buildUnauthorizedResponse()", "class_method_signature": "MetadataResource.buildUnauthorizedResponse()", "testcase": false, "constructor": false}, {"identifier": "buildServerErrorResponse", "parameters": "( PentahoAccessControlException e )", "modifiers": "protected", "return": "Response", "signature": "Response buildServerErrorResponse( PentahoAccessControlException e )", "full_signature": "protected Response buildServerErrorResponse( PentahoAccessControlException e )", "class_method_signature": "MetadataResource.buildServerErrorResponse( PentahoAccessControlException e )", "testcase": false, "constructor": false}, {"identifier": "buildServerErrorResponse", "parameters": "()", "modifiers": "protected", "return": "Response", "signature": "Response buildServerErrorResponse()", "full_signature": "protected Response buildServerErrorResponse()", "class_method_signature": "MetadataResource.buildServerErrorResponse()", "testcase": false, "constructor": false}, {"identifier": "buildServerError001Response", "parameters": "()", "modifiers": "protected", "return": "Response", "signature": "Response buildServerError001Response()", "full_signature": "protected Response buildServerError001Response()", "class_method_signature": "MetadataResource.buildServerError001Response()", "testcase": false, "constructor": false}, {"identifier": "buildServerError003Response", "parameters": "( String domainId, FileResource fr )", "modifiers": "protected", "return": "Response", "signature": "Response buildServerError003Response( String domainId, FileResource fr )", "full_signature": "protected Response buildServerError003Response( String domainId, FileResource fr )", "class_method_signature": "MetadataResource.buildServerError003Response( String domainId, FileResource fr )", "testcase": false, "constructor": false}, {"identifier": "canAdminister", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean canAdminister()", "full_signature": "protected boolean canAdminister()", "class_method_signature": "MetadataResource.canAdminister()", "testcase": false, "constructor": false}, {"identifier": "createAttachment", "parameters": "( Map<String, InputStream> fileData, String dswId )", "modifiers": "protected", "return": "Response", "signature": "Response createAttachment( Map<String, InputStream> fileData, String dswId )", "full_signature": "protected Response createAttachment( Map<String, InputStream> fileData, String dswId )", "class_method_signature": "MetadataResource.createAttachment( Map<String, InputStream> fileData, String dswId )", "testcase": false, "constructor": false}, {"identifier": "createNewJaxbList", "parameters": "( List<String> DSWDatasources )", "modifiers": "protected", "return": "JaxbList<String>", "signature": "JaxbList<String> createNewJaxbList( List<String> DSWDatasources )", "full_signature": "protected JaxbList<String> createNewJaxbList( List<String> DSWDatasources )", "class_method_signature": "MetadataResource.createNewJaxbList( List<String> DSWDatasources )", "testcase": false, "constructor": false}, {"identifier": "getDomainFilesData", "parameters": "( String domainId )", "modifiers": "protected", "return": "Map<String, InputStream>", "signature": "Map<String, InputStream> getDomainFilesData( String domainId )", "full_signature": "protected Map<String, InputStream> getDomainFilesData( String domainId )", "class_method_signature": "MetadataResource.getDomainFilesData( String domainId )", "testcase": false, "constructor": false}, {"identifier": "isInstanceOfIPentahoMetadataDomainRepositoryExporter", "parameters": "( IMetadataDomainRepository obj )", "modifiers": "protected", "return": "boolean", "signature": "boolean isInstanceOfIPentahoMetadataDomainRepositoryExporter( IMetadataDomainRepository obj )", "full_signature": "protected boolean isInstanceOfIPentahoMetadataDomainRepositoryExporter( IMetadataDomainRepository obj )", "class_method_signature": "MetadataResource.isInstanceOfIPentahoMetadataDomainRepositoryExporter( IMetadataDomainRepository obj )", "testcase": false, "constructor": false}, {"identifier": "createFileResource", "parameters": "()", "modifiers": "protected", "return": "FileResource", "signature": "FileResource createFileResource()", "full_signature": "protected FileResource createFileResource()", "class_method_signature": "MetadataResource.createFileResource()", "testcase": false, "constructor": false}, {"identifier": "getMetadataDatasourceIds", "parameters": "()", "modifiers": "@GET @Path( \"/ids\" ) @Produces( { APPLICATION_XML, APPLICATION_JSON } ) @Facet( name = \"Unsupported\" ) public", "return": "JaxbList<String>", "signature": "JaxbList<String> getMetadataDatasourceIds()", "full_signature": "@GET @Path( \"/ids\" ) @Produces( { APPLICATION_XML, APPLICATION_JSON } ) @Facet( name = \"Unsupported\" ) public JaxbList<String> getMetadataDatasourceIds()", "class_method_signature": "MetadataResource.getMetadataDatasourceIds()", "testcase": false, "constructor": false}, {"identifier": "doGetMetadataFilesAsDownload", "parameters": "( @PathParam( \"domainId\" ) String domainId )", "modifiers": "@GET @Path( \"/{domainId : .+}/download\" ) @Produces( WILDCARD ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource export succeeded.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to export Metadata datasource.\" ), @ResponseCode( code = 500, condition = \"Failure to export Metadata datasource.\" ) } ) public", "return": "Response", "signature": "Response doGetMetadataFilesAsDownload( @PathParam( \"domainId\" ) String domainId )", "full_signature": "@GET @Path( \"/{domainId : .+}/download\" ) @Produces( WILDCARD ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource export succeeded.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to export Metadata datasource.\" ), @ResponseCode( code = 500, condition = \"Failure to export Metadata datasource.\" ) } ) public Response doGetMetadataFilesAsDownload( @PathParam( \"domainId\" ) String domainId )", "class_method_signature": "MetadataResource.doGetMetadataFilesAsDownload( @PathParam( \"domainId\" ) String domainId )", "testcase": false, "constructor": false}, {"identifier": "doRemoveMetadata", "parameters": "( @PathParam( \"domainId\" ) String domainId )", "modifiers": "@POST @Path( \"/{domainId : .+}/remove\" ) @Produces( WILDCARD ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource removed.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to delete the Metadata datasource.\" ) } ) public", "return": "Response", "signature": "Response doRemoveMetadata( @PathParam( \"domainId\" ) String domainId )", "full_signature": "@POST @Path( \"/{domainId : .+}/remove\" ) @Produces( WILDCARD ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource removed.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to delete the Metadata datasource.\" ) } ) public Response doRemoveMetadata( @PathParam( \"domainId\" ) String domainId )", "class_method_signature": "MetadataResource.doRemoveMetadata( @PathParam( \"domainId\" ) String domainId )", "testcase": false, "constructor": false}, {"identifier": "uploadMetadataFilesToTempDir", "parameters": "(\n      @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n      @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles )", "modifiers": "@POST @Path( \"/uploadxmi\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) @Produces( TEXT_HTML ) @StatusCodes( { @ResponseCode( code = 403, condition = \"Access Control Forbidden\" ), @ResponseCode( code = 200, condition = \"Indicates successful upload\" ) } ) public", "return": "String", "signature": "String uploadMetadataFilesToTempDir(\n      @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n      @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles )", "full_signature": "@POST @Path( \"/uploadxmi\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) @Produces( TEXT_HTML ) @StatusCodes( { @ResponseCode( code = 403, condition = \"Access Control Forbidden\" ), @ResponseCode( code = 200, condition = \"Indicates successful upload\" ) } ) public String uploadMetadataFilesToTempDir(\n      @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n      @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles )", "class_method_signature": "MetadataResource.uploadMetadataFilesToTempDir(\n      @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n      @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles )", "testcase": false, "constructor": false}, {"identifier": "isContainsModel", "parameters": "( @QueryParam ( \"tempFileName\" ) String tempFileName )", "modifiers": "@GET @Path( \"/iscontainsmodel\" ) @Produces( MediaType.TEXT_PLAIN ) @StatusCodes( { @ResponseCode( code = 200, condition = \"File successfully checked.\" ), @ResponseCode( code = 401, condition = \"User is not authorized\" ) } ) public", "return": "Response", "signature": "Response isContainsModel( @QueryParam ( \"tempFileName\" ) String tempFileName )", "full_signature": "@GET @Path( \"/iscontainsmodel\" ) @Produces( MediaType.TEXT_PLAIN ) @StatusCodes( { @ResponseCode( code = 200, condition = \"File successfully checked.\" ), @ResponseCode( code = 401, condition = \"User is not authorized\" ) } ) public Response isContainsModel( @QueryParam ( \"tempFileName\" ) String tempFileName )", "class_method_signature": "MetadataResource.isContainsModel( @QueryParam ( \"tempFileName\" ) String tempFileName )", "testcase": false, "constructor": false}, {"identifier": "importMetadataFromTemp", "parameters": "( @FormParam( \"domainId\" ) String domainId,\n                                        @FormParam ( \"jsonFileList\" ) String fileList,\n                                        @FormParam( OVERWRITE_IN_REPOS ) boolean overwrite,\n                                        @FormParam( DATASOURCE_ACL ) RepositoryFileAclDto acl )", "modifiers": "@POST @Path( \"/import/uploaded\" ) @Consumes( MediaType.APPLICATION_FORM_URLENCODED ) @Produces( MediaType.TEXT_PLAIN ) @StatusCodes( { @ResponseCode( code = 409, condition = \"Content already exists (use overwrite flag to force)\" ), @ResponseCode( code = 401, condition = \"Import failed because publish is prohibited\" ), @ResponseCode( code = 500, condition = \"Unspecified general error has occurred\" ), @ResponseCode( code = 412, condition = \"Metadata datasource import failed. Error code or message included in response entity\" ), @ResponseCode( code = 403, condition = \"Access Control Forbidden\" ), @ResponseCode( code = 201, condition = \"Indicates successful import\" ) } ) public", "return": "Response", "signature": "Response importMetadataFromTemp( @FormParam( \"domainId\" ) String domainId,\n                                        @FormParam ( \"jsonFileList\" ) String fileList,\n                                        @FormParam( OVERWRITE_IN_REPOS ) boolean overwrite,\n                                        @FormParam( DATASOURCE_ACL ) RepositoryFileAclDto acl )", "full_signature": "@POST @Path( \"/import/uploaded\" ) @Consumes( MediaType.APPLICATION_FORM_URLENCODED ) @Produces( MediaType.TEXT_PLAIN ) @StatusCodes( { @ResponseCode( code = 409, condition = \"Content already exists (use overwrite flag to force)\" ), @ResponseCode( code = 401, condition = \"Import failed because publish is prohibited\" ), @ResponseCode( code = 500, condition = \"Unspecified general error has occurred\" ), @ResponseCode( code = 412, condition = \"Metadata datasource import failed. Error code or message included in response entity\" ), @ResponseCode( code = 403, condition = \"Access Control Forbidden\" ), @ResponseCode( code = 201, condition = \"Indicates successful import\" ) } ) public Response importMetadataFromTemp( @FormParam( \"domainId\" ) String domainId,\n                                        @FormParam ( \"jsonFileList\" ) String fileList,\n                                        @FormParam( OVERWRITE_IN_REPOS ) boolean overwrite,\n                                        @FormParam( DATASOURCE_ACL ) RepositoryFileAclDto acl )", "class_method_signature": "MetadataResource.importMetadataFromTemp( @FormParam( \"domainId\" ) String domainId,\n                                        @FormParam ( \"jsonFileList\" ) String fileList,\n                                        @FormParam( OVERWRITE_IN_REPOS ) boolean overwrite,\n                                        @FormParam( DATASOURCE_ACL ) RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "catchNotImportException", "parameters": "( PlatformImportException e )", "modifiers": "private", "return": "WebApplicationException", "signature": "WebApplicationException catchNotImportException( PlatformImportException e )", "full_signature": "private WebApplicationException catchNotImportException( PlatformImportException e )", "class_method_signature": "MetadataResource.catchNotImportException( PlatformImportException e )", "testcase": false, "constructor": false}, {"identifier": "doImportMetadataDatasource", "parameters": "( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "modifiers": "@PUT @Path( \"/import\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) @Produces( \"text/plain\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource import succeeded. A response of:\\n\" + \" * 2: Unspecified general error has occurred\\n\" + \" * 3: Indicates successful import\\n\" + \" * 9: Content already exists (use overwrite flag to force)\\n\" + \" * 10: Import failed because publish is prohibited\" ), @ResponseCode( code = 500, condition = \"Metadata datasource import failed. Error code or message included in response entity\" ) } ) public", "return": "Response", "signature": "Response doImportMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "full_signature": "@PUT @Path( \"/import\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) @Produces( \"text/plain\" ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Metadata datasource import succeeded. A response of:\\n\" + \" * 2: Unspecified general error has occurred\\n\" + \" * 3: Indicates successful import\\n\" + \" * 9: Content already exists (use overwrite flag to force)\\n\" + \" * 10: Import failed because publish is prohibited\" ), @ResponseCode( code = 500, condition = \"Metadata datasource import failed. Error code or message included in response entity\" ) } ) public Response doImportMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "class_method_signature": "MetadataResource.doImportMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "testcase": false, "constructor": false}, {"identifier": "doGetMetadataAcl", "parameters": "( @PathParam( \"domainId\" ) String domainId )", "modifiers": "@GET @Path( \"/{domainId : .+}/acl\" ) @Produces ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully got the ACL\" ), @ResponseCode( code = 401, condition = \"Unauthorized\" ), @ResponseCode( code = 404, condition = \"ACL doesn't exist\" ), @ResponseCode( code = 409, condition = \"Metadata DS doesn't exist\" ), @ResponseCode( code = 500, condition = \"ACL failed to be retrieved. This could be caused by an invalid path, or the file does not exist.\" ) } ) public", "return": "RepositoryFileAclDto", "signature": "RepositoryFileAclDto doGetMetadataAcl( @PathParam( \"domainId\" ) String domainId )", "full_signature": "@GET @Path( \"/{domainId : .+}/acl\" ) @Produces ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully got the ACL\" ), @ResponseCode( code = 401, condition = \"Unauthorized\" ), @ResponseCode( code = 404, condition = \"ACL doesn't exist\" ), @ResponseCode( code = 409, condition = \"Metadata DS doesn't exist\" ), @ResponseCode( code = 500, condition = \"ACL failed to be retrieved. This could be caused by an invalid path, or the file does not exist.\" ) } ) public RepositoryFileAclDto doGetMetadataAcl( @PathParam( \"domainId\" ) String domainId )", "class_method_signature": "MetadataResource.doGetMetadataAcl( @PathParam( \"domainId\" ) String domainId )", "testcase": false, "constructor": false}, {"identifier": "doSetMetadataAcl", "parameters": "( @PathParam( \"domainId\" ) String domainId, RepositoryFileAclDto acl )", "modifiers": "@PUT @Path( \"/{domainId : .+}/acl\" ) @Produces ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully updated the ACL\" ), @ResponseCode( code = 401, condition = \"Unauthorized\" ), @ResponseCode( code = 409, condition = \"Metadata DS doesn't exist\" ), @ResponseCode( code = 500, condition = \"Failed to save acls due to another error.\" ) } ) public", "return": "Response", "signature": "Response doSetMetadataAcl( @PathParam( \"domainId\" ) String domainId, RepositoryFileAclDto acl )", "full_signature": "@PUT @Path( \"/{domainId : .+}/acl\" ) @Produces ( { APPLICATION_XML, APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully updated the ACL\" ), @ResponseCode( code = 401, condition = \"Unauthorized\" ), @ResponseCode( code = 409, condition = \"Metadata DS doesn't exist\" ), @ResponseCode( code = 500, condition = \"Failed to save acls due to another error.\" ) } ) public Response doSetMetadataAcl( @PathParam( \"domainId\" ) String domainId, RepositoryFileAclDto acl )", "class_method_signature": "MetadataResource.doSetMetadataAcl( @PathParam( \"domainId\" ) String domainId, RepositoryFileAclDto acl )", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/pentaho/platform/dataaccess/datasource/api/resources/MetadataResource.java"}, "focal_method": {"identifier": "importMetadataDatasource", "parameters": "( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "modifiers": "protected", "return": "Response", "body": "protected Response importMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl ) {\n    try {\n      boolean overWriteInRepository = \"True\".equalsIgnoreCase( overwrite ) ? true : false;\n      service.importMetadataDatasource( domainId, metadataFile, metadataFileInfo, overWriteInRepository, localeFiles,\n          localeFilesInfo, acl );\n      return Response.ok().status( new Integer( SUCCESS ) ).type( MediaType.TEXT_PLAIN ).build();\n    } catch ( PentahoAccessControlException e ) {\n      return buildServerErrorResponse( e );\n    } catch ( PlatformImportException e ) {\n      return catchPlatformImportException( domainId, e );\n    } catch ( Exception e ) {\n      logger.error( e );\n      return buildServerError001Response();\n    }\n  }", "signature": "Response importMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "full_signature": "protected Response importMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "class_method_signature": "MetadataResource.importMetadataDatasource( @FormDataParam( \"domainId\" ) String domainId,\n                                            @FormDataParam( \"metadataFile\" ) InputStream metadataFile,\n                                            @FormDataParam( \"metadataFile\" ) FormDataContentDisposition metadataFileInfo,\n                                            @FormDataParam( OVERWRITE_IN_REPOS ) String overwrite,\n                                            @FormDataParam( \"localeFiles\" ) List<FormDataBodyPart> localeFiles,\n                                            @FormDataParam( \"localeFiles\" )\n                                            List<FormDataContentDisposition> localeFilesInfo,\n                                            @FormDataParam( DATASOURCE_ACL )\n                                            RepositoryFileAclDto acl )", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "importMetadataDatasource", "build", "type", "status", "ok", "buildServerErrorResponse", "catchPlatformImportException", "error", "buildServerError001Response"]}, "repository": {"repo_id": 2316191, "url": "https://github.com/pentaho/data-access", "language": "Java", "is_fork": false, "fork_count": 138, "stargazer_count": 31, "size": 7276, "license": "licensed"}}