{"test_class": {"identifier": "DSWDatasourceServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONNECTION_NAME = \"[connection \u63a5\u7d9a <;>!@#$%^&*()_-=+.,]\";", "modifier": "private static final", "type": "String", "declarator": "CONNECTION_NAME = \"[connection \u63a5\u7d9a <;>!@#$%^&*()_-=+.,]\";", "var_name": "CONNECTION_NAME"}, {"original_string": "private static final String DB_TYPE = \"jdbc\";", "modifier": "private static final", "type": "String", "declarator": "DB_TYPE = \"jdbc\"", "var_name": "DB_TYPE"}, {"original_string": "private static final String VALID_QUERY = \"valid query\";", "modifier": "private static final", "type": "String", "declarator": "VALID_QUERY = \"valid query\"", "var_name": "VALID_QUERY"}, {"original_string": "private static final String QUERY_COLUMN_ALREADY_EXIST = \"invalid query\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_COLUMN_ALREADY_EXIST = \"invalid query\"", "var_name": "QUERY_COLUMN_ALREADY_EXIST"}, {"original_string": "private static final String PREVIEW_LIMIT = \"100\";", "modifier": "private static final", "type": "String", "declarator": "PREVIEW_LIMIT = \"100\"", "var_name": "PREVIEW_LIMIT"}, {"original_string": "private static final String DOMAIN_ID_2MODELS = \"DOMAIN_ID_2MODELS\";", "modifier": "private static final", "type": "String", "declarator": "DOMAIN_ID_2MODELS = \"DOMAIN_ID_2MODELS\"", "var_name": "DOMAIN_ID_2MODELS"}, {"original_string": "private static final String DOMAIN_ID_DOES_NOT_EXIST = \"DOMAIN_ID_DOESNOT_EXIST\";", "modifier": "private static final", "type": "String", "declarator": "DOMAIN_ID_DOES_NOT_EXIST = \"DOMAIN_ID_DOESNOT_EXIST\"", "var_name": "DOMAIN_ID_DOES_NOT_EXIST"}, {"original_string": "private static final String MODEL_NAME = \"modelName\";", "modifier": "private static final", "type": "String", "declarator": "MODEL_NAME = \"modelName\"", "var_name": "MODEL_NAME"}, {"original_string": "private static final String LOGICAL_MODEL_ID_DEFAULT = \"<def>\";", "modifier": "private static final", "type": "String", "declarator": "LOGICAL_MODEL_ID_DEFAULT = \"<def>\"", "var_name": "LOGICAL_MODEL_ID_DEFAULT"}, {"original_string": "private static final String LOGICAL_MODEL_ID_REPORTING = \"Reporting\";", "modifier": "private static final", "type": "String", "declarator": "LOGICAL_MODEL_ID_REPORTING = \"Reporting\"", "var_name": "LOGICAL_MODEL_ID_REPORTING"}, {"original_string": "private static final String LOGICAL_MODEL_ID_ANALYSIS = \"Analysis\";", "modifier": "private static final", "type": "String", "declarator": "LOGICAL_MODEL_ID_ANALYSIS = \"Analysis\"", "var_name": "LOGICAL_MODEL_ID_ANALYSIS"}, {"original_string": "private static final String LOGICAL_MODEL_CONTEXTNAME = \"contextName\";", "modifier": "private static final", "type": "String", "declarator": "LOGICAL_MODEL_CONTEXTNAME = \"contextName\"", "var_name": "LOGICAL_MODEL_CONTEXTNAME"}, {"original_string": "private static final String STRING_DEFAULT = \"<def>\";", "modifier": "private static final", "type": "String", "declarator": "STRING_DEFAULT = \"<def>\"", "var_name": "STRING_DEFAULT"}, {"original_string": "private LogicalModel analysisModel;", "modifier": "private", "type": "LogicalModel", "declarator": "analysisModel", "var_name": "analysisModel"}, {"original_string": "private LogicalModel reportingModel;", "modifier": "private", "type": "LogicalModel", "declarator": "reportingModel", "var_name": "reportingModel"}, {"original_string": "private DSWDatasourceServiceImpl dswService;", "modifier": "private", "type": "DSWDatasourceServiceImpl", "declarator": "dswService", "var_name": "dswService"}, {"original_string": "private Domain domain2Models;", "modifier": "private", "type": "Domain", "declarator": "domain2Models", "var_name": "domain2Models"}, {"original_string": "private final IMetadataDomainRepository domainRepository = mock( IMetadataDomainRepository.class );", "modifier": "private final", "type": "IMetadataDomainRepository", "declarator": "domainRepository = mock( IMetadataDomainRepository.class )", "var_name": "domainRepository"}, {"original_string": "private ModelerWorkspace workspace2Models;", "modifier": "private", "type": "ModelerWorkspace", "declarator": "workspace2Models", "var_name": "workspace2Models"}, {"original_string": "private IPentahoObjectFactory pentahoObjectFactory;", "modifier": "private", "type": "IPentahoObjectFactory", "declarator": "pentahoObjectFactory", "var_name": "pentahoObjectFactory"}, {"original_string": "private final IMondrianCatalogService mondrianService = mock( IMondrianCatalogService.class );", "modifier": "private final", "type": "IMondrianCatalogService", "declarator": "mondrianService = mock( IMondrianCatalogService.class )", "var_name": "mondrianService"}, {"original_string": "private final SQLConnection sqlConnection = mock( SQLConnection.class );", "modifier": "private final", "type": "SQLConnection", "declarator": "sqlConnection = mock( SQLConnection.class )", "var_name": "sqlConnection"}, {"original_string": "private final Connection nativeConnection = mock( Connection.class );", "modifier": "private final", "type": "Connection", "declarator": "nativeConnection = mock( Connection.class )", "var_name": "nativeConnection"}, {"original_string": "private final ModelerService modelerService = mock( ModelerService.class );", "modifier": "private final", "type": "ModelerService", "declarator": "modelerService = mock( ModelerService.class )", "var_name": "modelerService"}, {"original_string": "private int[] columnTypes = new int[]{ Types.INTEGER };", "modifier": "private", "type": "int[]", "declarator": "columnTypes = new int[]{ Types.INTEGER }", "var_name": "columnTypes"}, {"original_string": "private Object[] columns = new Object[]{ \"id\" };", "modifier": "private", "type": "Object[]", "declarator": "columns = new Object[]{ \"id\" }", "var_name": "columns"}], "file": "core/src/test/java/org/pentaho/platform/dataaccess/datasource/wizard/service/impl/DSWDatasourceServiceImplTest.java"}, "test_case": {"identifier": "testGenerateQueryDomain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGenerateQueryDomain() throws DatasourceServiceException {\n    testGenerateQueryDomain( MODEL_NAME, VALID_QUERY, null, null );\n  }", "signature": "void testGenerateQueryDomain()", "full_signature": "@Test public void testGenerateQueryDomain()", "class_method_signature": "DSWDatasourceServiceImplTest.testGenerateQueryDomain()", "testcase": true, "constructor": false, "invocations": ["testGenerateQueryDomain"]}, "focal_class": {"identifier": "DSWDatasourceServiceImpl", "superclass": "", "interfaces": "implements IDSWDatasourceService", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog( DSWDatasourceServiceImpl.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( DSWDatasourceServiceImpl.class )", "var_name": "logger"}, {"original_string": "protected static final String LM_PROP_DATASOURCE_TYPE = \"DatasourceType\";", "modifier": "protected static final", "type": "String", "declarator": "LM_PROP_DATASOURCE_TYPE = \"DatasourceType\"", "var_name": "LM_PROP_DATASOURCE_TYPE"}, {"original_string": "protected static final String LM_PROP_MONDRIAN_CATALOG_REF = \"MondrianCatalogRef\";", "modifier": "protected static final", "type": "String", "declarator": "LM_PROP_MONDRIAN_CATALOG_REF = \"MondrianCatalogRef\"", "var_name": "LM_PROP_MONDRIAN_CATALOG_REF"}, {"original_string": "protected static final String LM_PROP_DATASOURCE_MODEL = \"datasourceModel\";", "modifier": "protected static final", "type": "String", "declarator": "LM_PROP_DATASOURCE_MODEL = \"datasourceModel\"", "var_name": "LM_PROP_DATASOURCE_MODEL"}, {"original_string": "protected static final String LM_PROP_VISIBLE = \"visible\";", "modifier": "protected static final", "type": "String", "declarator": "LM_PROP_VISIBLE = \"visible\"", "var_name": "LM_PROP_VISIBLE"}, {"original_string": "private static final String DB_TYPE_ID_PENTAHO_DATA_SERVICE = \"Pentaho Data Services\";", "modifier": "private static final", "type": "String", "declarator": "DB_TYPE_ID_PENTAHO_DATA_SERVICE = \"Pentaho Data Services\"", "var_name": "DB_TYPE_ID_PENTAHO_DATA_SERVICE"}, {"original_string": "private IMetadataDomainRepository metadataDomainRepository;", "modifier": "private", "type": "IMetadataDomainRepository", "declarator": "metadataDomainRepository", "var_name": "metadataDomainRepository"}, {"original_string": "private static final String BEFORE_QUERY = \" SELECT * FROM (\";", "modifier": "private static final", "type": "String", "declarator": "BEFORE_QUERY = \" SELECT * FROM (\"", "var_name": "BEFORE_QUERY"}, {"original_string": "private static final String AFTER_QUERY = \") tbl\";", "modifier": "private static final", "type": "String", "declarator": "AFTER_QUERY = \") tbl\"", "var_name": "AFTER_QUERY"}, {"original_string": "private GeoContext geoContext;", "modifier": "private", "type": "GeoContext", "declarator": "geoContext", "var_name": "geoContext"}, {"original_string": "private ConnectionServiceImpl connService;", "modifier": "private", "type": "ConnectionServiceImpl", "declarator": "connService", "var_name": "connService"}], "methods": [{"identifier": "DSWDatasourceServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " DSWDatasourceServiceImpl()", "full_signature": "public  DSWDatasourceServiceImpl()", "class_method_signature": "DSWDatasourceServiceImpl.DSWDatasourceServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "DSWDatasourceServiceImpl", "parameters": "( ConnectionServiceImpl connService )", "modifiers": "public", "return": "", "signature": " DSWDatasourceServiceImpl( ConnectionServiceImpl connService )", "full_signature": "public  DSWDatasourceServiceImpl( ConnectionServiceImpl connService )", "class_method_signature": "DSWDatasourceServiceImpl.DSWDatasourceServiceImpl( ConnectionServiceImpl connService )", "testcase": false, "constructor": true}, {"identifier": "hasDataAccessPermission", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean hasDataAccessPermission()", "full_signature": "protected boolean hasDataAccessPermission()", "class_method_signature": "DSWDatasourceServiceImpl.hasDataAccessPermission()", "testcase": false, "constructor": false}, {"identifier": "hasDataAccessViewPermission", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean hasDataAccessViewPermission()", "full_signature": "protected boolean hasDataAccessViewPermission()", "class_method_signature": "DSWDatasourceServiceImpl.hasDataAccessViewPermission()", "testcase": false, "constructor": false}, {"identifier": "getPermittedRoleList", "parameters": "()", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getPermittedRoleList()", "full_signature": "protected List<String> getPermittedRoleList()", "class_method_signature": "DSWDatasourceServiceImpl.getPermittedRoleList()", "testcase": false, "constructor": false}, {"identifier": "getPermittedUserList", "parameters": "()", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getPermittedUserList()", "full_signature": "protected List<String> getPermittedUserList()", "class_method_signature": "DSWDatasourceServiceImpl.getPermittedUserList()", "testcase": false, "constructor": false}, {"identifier": "getDefaultAcls", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getDefaultAcls()", "full_signature": "protected int getDefaultAcls()", "class_method_signature": "DSWDatasourceServiceImpl.getDefaultAcls()", "testcase": false, "constructor": false}, {"identifier": "createModelerWorkspace", "parameters": "()", "modifiers": "protected", "return": "ModelerWorkspace", "signature": "ModelerWorkspace createModelerWorkspace()", "full_signature": "protected ModelerWorkspace createModelerWorkspace()", "class_method_signature": "DSWDatasourceServiceImpl.createModelerWorkspace()", "testcase": false, "constructor": false}, {"identifier": "createModelerService", "parameters": "()", "modifiers": "protected", "return": "ModelerService", "signature": "ModelerService createModelerService()", "full_signature": "protected ModelerService createModelerService()", "class_method_signature": "DSWDatasourceServiceImpl.createModelerService()", "testcase": false, "constructor": false}, {"identifier": "deleteLogicalModel", "parameters": "( String domainId, String modelName )", "modifiers": "public", "return": "boolean", "signature": "boolean deleteLogicalModel( String domainId, String modelName )", "full_signature": "public boolean deleteLogicalModel( String domainId, String modelName )", "class_method_signature": "DSWDatasourceServiceImpl.deleteLogicalModel( String domainId, String modelName )", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "( String connectionName, String query, String previewLimit )", "modifiers": "", "return": "IPentahoResultSet", "signature": "IPentahoResultSet executeQuery( String connectionName, String query, String previewLimit )", "full_signature": " IPentahoResultSet executeQuery( String connectionName, String query, String previewLimit )", "class_method_signature": "DSWDatasourceServiceImpl.executeQuery( String connectionName, String query, String previewLimit )", "testcase": false, "constructor": false}, {"identifier": "checkSqlQueriesSupported", "parameters": "( String connName )", "modifiers": "", "return": "void", "signature": "void checkSqlQueriesSupported( String connName )", "full_signature": " void checkSqlQueriesSupported( String connName )", "class_method_signature": "DSWDatasourceServiceImpl.checkSqlQueriesSupported( String connName )", "testcase": false, "constructor": false}, {"identifier": "doPreview", "parameters": "( String connectionName, String query, String previewLimit )", "modifiers": "public", "return": "SerializedResultSet", "signature": "SerializedResultSet doPreview( String connectionName, String query, String previewLimit )", "full_signature": "public SerializedResultSet doPreview( String connectionName, String query, String previewLimit )", "class_method_signature": "DSWDatasourceServiceImpl.doPreview( String connectionName, String query, String previewLimit )", "testcase": false, "constructor": false}, {"identifier": "testDataSourceConnection", "parameters": "( String connectionName )", "modifiers": "public", "return": "boolean", "signature": "boolean testDataSourceConnection( String connectionName )", "full_signature": "public boolean testDataSourceConnection( String connectionName )", "class_method_signature": "DSWDatasourceServiceImpl.testDataSourceConnection( String connectionName )", "testcase": false, "constructor": false}, {"identifier": "generateLogicalModel", "parameters": "( String modelName, String connectionName, String dbType, String query,\n                                            String previewLimit )", "modifiers": "public", "return": "BusinessData", "signature": "BusinessData generateLogicalModel( String modelName, String connectionName, String dbType, String query,\n                                            String previewLimit )", "full_signature": "public BusinessData generateLogicalModel( String modelName, String connectionName, String dbType, String query,\n                                            String previewLimit )", "class_method_signature": "DSWDatasourceServiceImpl.generateLogicalModel( String modelName, String connectionName, String dbType, String query,\n                                            String previewLimit )", "testcase": false, "constructor": false}, {"identifier": "getEffectivePermittedUserList", "parameters": "( boolean securityEnabled )", "modifiers": "private", "return": "List<String>", "signature": "List<String> getEffectivePermittedUserList( boolean securityEnabled )", "full_signature": "private List<String> getEffectivePermittedUserList( boolean securityEnabled )", "class_method_signature": "DSWDatasourceServiceImpl.getEffectivePermittedUserList( boolean securityEnabled )", "testcase": false, "constructor": false}, {"identifier": "getMetadataDomainRepository", "parameters": "()", "modifiers": "public", "return": "IMetadataDomainRepository", "signature": "IMetadataDomainRepository getMetadataDomainRepository()", "full_signature": "public IMetadataDomainRepository getMetadataDomainRepository()", "class_method_signature": "DSWDatasourceServiceImpl.getMetadataDomainRepository()", "testcase": false, "constructor": false}, {"identifier": "setMetadataDomainRepository", "parameters": "( IMetadataDomainRepository metadataDomainRepository )", "modifiers": "public", "return": "void", "signature": "void setMetadataDomainRepository( IMetadataDomainRepository metadataDomainRepository )", "full_signature": "public void setMetadataDomainRepository( IMetadataDomainRepository metadataDomainRepository )", "class_method_signature": "DSWDatasourceServiceImpl.setMetadataDomainRepository( IMetadataDomainRepository metadataDomainRepository )", "testcase": false, "constructor": false}, {"identifier": "saveLogicalModel", "parameters": "( Domain domain, boolean overwrite )", "modifiers": "public", "return": "boolean", "signature": "boolean saveLogicalModel( Domain domain, boolean overwrite )", "full_signature": "public boolean saveLogicalModel( Domain domain, boolean overwrite )", "class_method_signature": "DSWDatasourceServiceImpl.saveLogicalModel( Domain domain, boolean overwrite )", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasPermission()", "full_signature": "public boolean hasPermission()", "class_method_signature": "DSWDatasourceServiceImpl.hasPermission()", "testcase": false, "constructor": false}, {"identifier": "getLogicalModels", "parameters": "( String context )", "modifiers": "public", "return": "List<LogicalModelSummary>", "signature": "List<LogicalModelSummary> getLogicalModels( String context )", "full_signature": "public List<LogicalModelSummary> getLogicalModels( String context )", "class_method_signature": "DSWDatasourceServiceImpl.getLogicalModels( String context )", "testcase": false, "constructor": false}, {"identifier": "loadBusinessData", "parameters": "( String domainId, String modelId )", "modifiers": "public", "return": "BusinessData", "signature": "BusinessData loadBusinessData( String domainId, String modelId )", "full_signature": "public BusinessData loadBusinessData( String domainId, String modelId )", "class_method_signature": "DSWDatasourceServiceImpl.loadBusinessData( String domainId, String modelId )", "testcase": false, "constructor": false}, {"identifier": "gwtWorkaround", "parameters": "( BogoPojo pojo )", "modifiers": "public", "return": "BogoPojo", "signature": "BogoPojo gwtWorkaround( BogoPojo pojo )", "full_signature": "public BogoPojo gwtWorkaround( BogoPojo pojo )", "class_method_signature": "DSWDatasourceServiceImpl.gwtWorkaround( BogoPojo pojo )", "testcase": false, "constructor": false}, {"identifier": "serializeModelState", "parameters": "( DatasourceDTO dto )", "modifiers": "public", "return": "String", "signature": "String serializeModelState( DatasourceDTO dto )", "full_signature": "public String serializeModelState( DatasourceDTO dto )", "class_method_signature": "DSWDatasourceServiceImpl.serializeModelState( DatasourceDTO dto )", "testcase": false, "constructor": false}, {"identifier": "deSerializeModelState", "parameters": "( String dtoStr )", "modifiers": "public", "return": "DatasourceDTO", "signature": "DatasourceDTO deSerializeModelState( String dtoStr )", "full_signature": "public DatasourceDTO deSerializeModelState( String dtoStr )", "class_method_signature": "DSWDatasourceServiceImpl.deSerializeModelState( String dtoStr )", "testcase": false, "constructor": false}, {"identifier": "listDatasourceNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> listDatasourceNames()", "full_signature": "public List<String> listDatasourceNames()", "class_method_signature": "DSWDatasourceServiceImpl.listDatasourceNames()", "testcase": false, "constructor": false}, {"identifier": "generateQueryDomain", "parameters": "( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO )", "modifiers": "@Override public", "return": "QueryDatasourceSummary", "signature": "QueryDatasourceSummary generateQueryDomain( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO )", "full_signature": "@Override public QueryDatasourceSummary generateQueryDomain( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO )", "class_method_signature": "DSWDatasourceServiceImpl.generateQueryDomain( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO )", "testcase": false, "constructor": false}, {"identifier": "prepareForSerializaton", "parameters": "( Domain domain )", "modifiers": "public", "return": "void", "signature": "void prepareForSerializaton( Domain domain )", "full_signature": "public void prepareForSerializaton( Domain domain )", "class_method_signature": "DSWDatasourceServiceImpl.prepareForSerializaton( Domain domain )", "testcase": false, "constructor": false}, {"identifier": "getDatasourceIllegalCharacters", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDatasourceIllegalCharacters()", "full_signature": "public String getDatasourceIllegalCharacters()", "class_method_signature": "DSWDatasourceServiceImpl.getDatasourceIllegalCharacters()", "testcase": false, "constructor": false}, {"identifier": "getGeoContext", "parameters": "()", "modifiers": "@Override public", "return": "GeoContext", "signature": "GeoContext getGeoContext()", "full_signature": "@Override public GeoContext getGeoContext()", "class_method_signature": "DSWDatasourceServiceImpl.getGeoContext()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/pentaho/platform/dataaccess/datasource/wizard/service/impl/DSWDatasourceServiceImpl.java"}, "focal_method": {"identifier": "generateQueryDomain", "parameters": "( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO )", "modifiers": "@Override public", "return": "QueryDatasourceSummary", "body": "@Override\n  public QueryDatasourceSummary generateQueryDomain( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO ) throws DatasourceServiceException {\n\n    ModelerWorkspace modelerWorkspace = new ModelerWorkspace( new GwtModelerWorkspaceHelper(), getGeoContext() );\n    ModelerService modelerService = createModelerService();\n    modelerWorkspace.setModelName( name );\n\n    try {\n      UtilHtmlSanitizer.getInstance().sanitizeConnectionParameters( connection );\n      executeQuery( UtilHtmlSanitizer.getInstance().safeEscapeHtml( datasourceDTO.getConnectionName() ), query, \"1\" );\n      Boolean securityEnabled = ( getPermittedRoleList() != null && getPermittedRoleList().size() > 0 )\n        || ( getPermittedUserList() != null && getPermittedUserList().size() > 0 );\n      SerializedResultSet resultSet = DatasourceServiceHelper.getSerializeableResultSet( connection.getName(), query,\n        10, PentahoSessionHolder.getSession() );\n      SQLModelGenerator sqlModelGenerator =\n        new SQLModelGenerator( name, connection.getName(), connection.getDatabaseType().getShortName(),\n          resultSet.getColumnTypes(), resultSet.getColumns(), query,\n          securityEnabled, getEffectivePermittedUserList( securityEnabled ), getPermittedRoleList(), getDefaultAcls(),\n          ( PentahoSessionHolder\n            .getSession() != null ) ? PentahoSessionHolder.getSession().getName() : null );\n      Domain domain = sqlModelGenerator.generate();\n      domain.getPhysicalModels().get( 0 ).setId( connection.getName() );\n\n      modelerWorkspace.setDomain( domain );\n\n\n      modelerWorkspace.getWorkspaceHelper().autoModelFlat( modelerWorkspace );\n      modelerWorkspace.getWorkspaceHelper().autoModelRelationalFlat( modelerWorkspace );\n      modelerWorkspace.setModelName( datasourceDTO.getDatasourceName() );\n      modelerWorkspace.getWorkspaceHelper().populateDomain( modelerWorkspace );\n      domain.getLogicalModels().get( 0 ).setProperty( \"datasourceModel\", serializeModelState( datasourceDTO ) );\n      domain.getLogicalModels().get( 0 ).setProperty( \"DatasourceType\", \"SQL-DS\" );\n\n      QueryDatasourceSummary summary = new QueryDatasourceSummary();\n      prepareForSerializaton( domain );\n      modelerService.serializeModels( domain, modelerWorkspace.getModelName() );\n      summary.setDomain( domain );\n\n      return summary;\n    } catch ( SQLModelGeneratorException smge ) {\n      logger.error( Messages.getErrorString( \"DatasourceServiceImpl.ERROR_0011_UNABLE_TO_GENERATE_MODEL\", //$NON-NLS-1$\n        smge.getLocalizedMessage() ), smge );\n      throw new DatasourceServiceException( Messages\n        .getErrorString( \"DatasourceServiceImpl.ERROR_0011_UNABLE_TO_GENERATE_MODEL\", smge.getLocalizedMessage() ),\n        smge ); //$NON-NLS-1$\n    } catch ( QueryValidationException e ) {\n      logger.error( Messages.getErrorString(\n        \"DatasourceServiceImpl.ERROR_0009_QUERY_VALIDATION_FAILED\", e.getLocalizedMessage() ), e ); //$NON-NLS-1$\n      throw new DatasourceServiceException( Messages.getErrorString(\n        \"DatasourceServiceImpl.ERROR_0009_QUERY_VALIDATION_FAILED\", e.getLocalizedMessage() ), e ); //$NON-NLS-1$\n    } catch ( ModelerException e ) {\n      logger.error( Messages.getErrorString( \"DatasourceServiceImpl.ERROR_0011_UNABLE_TO_GENERATE_MODEL\", //$NON-NLS-1$\n        e.getLocalizedMessage() ), e );\n      throw new DatasourceServiceException( Messages\n        .getErrorString( \"DatasourceServiceImpl.ERROR_0011_UNABLE_TO_GENERATE_MODEL\", e.getLocalizedMessage() ),\n        e ); //$NON-NLS-1$\n    } catch ( SqlQueriesNotSupportedException e ) {\n      throw new DatasourceServiceException( e.getLocalizedMessage(), e ); //$NON-NLS-1$\n    } catch ( Exception e ) {\n      logger.error( Messages.getErrorString( \"DatasourceServiceImpl.ERROR_0011_UNABLE_TO_GENERATE_MODEL\", //$NON-NLS-1$\n        e.getLocalizedMessage() ), e );\n      throw new DatasourceServiceException( Messages\n        .getErrorString( \"DatasourceServiceImpl.ERROR_0011_UNABLE_TO_GENERATE_MODEL\", e.getLocalizedMessage() ),\n        e ); //$NON-NLS-1$\n    }\n\n  }", "signature": "QueryDatasourceSummary generateQueryDomain( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO )", "full_signature": "@Override public QueryDatasourceSummary generateQueryDomain( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO )", "class_method_signature": "DSWDatasourceServiceImpl.generateQueryDomain( String name, String query, DatabaseConnection connection,\n                                                     DatasourceDTO datasourceDTO )", "testcase": false, "constructor": false, "invocations": ["getGeoContext", "createModelerService", "setModelName", "sanitizeConnectionParameters", "getInstance", "executeQuery", "safeEscapeHtml", "getInstance", "getConnectionName", "getPermittedRoleList", "size", "getPermittedRoleList", "getPermittedUserList", "size", "getPermittedUserList", "getSerializeableResultSet", "getName", "getSession", "getName", "getShortName", "getDatabaseType", "getColumnTypes", "getColumns", "getEffectivePermittedUserList", "getPermittedRoleList", "getDefaultAcls", "getSession", "getName", "getSession", "generate", "setId", "get", "getPhysicalModels", "getName", "setDomain", "autoModelFlat", "getWorkspaceHelper", "autoModelRelationalFlat", "getWorkspaceHelper", "setModelName", "getDatasourceName", "populateDomain", "getWorkspaceHelper", "setProperty", "get", "getLogicalModels", "serializeModelState", "setProperty", "get", "getLogicalModels", "prepareForSerializaton", "serializeModels", "getModelName", "setDomain", "error", "getErrorString", "getLocalizedMessage", "getErrorString", "getLocalizedMessage", "error", "getErrorString", "getLocalizedMessage", "getErrorString", "getLocalizedMessage", "error", "getErrorString", "getLocalizedMessage", "getErrorString", "getLocalizedMessage", "getLocalizedMessage", "error", "getErrorString", "getLocalizedMessage", "getErrorString", "getLocalizedMessage"]}, "repository": {"repo_id": 2316191, "url": "https://github.com/pentaho/data-access", "language": "Java", "is_fork": false, "fork_count": 138, "stargazer_count": 31, "size": 7276, "license": "licensed"}}