{"test_class": {"identifier": "AutobeanUtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/pentaho/platform/dataaccess/datasource/beans/AutobeanUtilitiesTest.java"}, "test_case": {"identifier": "testConnectionBeanToImpl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConnectionBeanToImpl() {\n    DatabaseConnection dbConnection = new DatabaseConnection();\n    dbConnection.setId( \"my id\" );\n    dbConnection.setAccessType( DatabaseAccessType.NATIVE );\n    DatabaseType dbType = new DatabaseType();\n    List<DatabaseAccessType> accessTypes = new LinkedList<DatabaseAccessType>();\n    accessTypes.add( DatabaseAccessType.NATIVE );\n    dbType.setSupportedAccessTypes( accessTypes );\n    dbConnection.setDatabaseType( dbType );\n    Map<String, String> extraOptions = new HashMap<String, String>();\n    extraOptions.put( \"opt\", \"value\" );\n    dbConnection.setExtraOptions( extraOptions );\n    dbConnection.setName( \"Best name\" );\n    dbConnection.setHostname( \"localhost\" );\n    dbConnection.setDatabaseName( \"foodmart\" );\n    dbConnection.setDatabasePort( \"2233\" );\n    dbConnection.setUsername( \"username\" );\n    dbConnection.setPassword( \"password\" );\n    dbConnection.setStreamingResults( true );\n    dbConnection.setDataTablespace( \"tables\" );\n    dbConnection.setIndexTablespace( \"indexes\" );\n    dbConnection.setSQLServerInstance( \"INSTANCE_0\" );\n    dbConnection.setUsingDoubleDecimalAsSchemaTableSeparator( true );\n    dbConnection.setInformixServername( \"INFORM_1\" );\n    dbConnection.addExtraOption( \"100\", \"option\", \"value\" );\n    Map<String, String> attributes = new HashMap<String, String>();\n    attributes.put( \"attr1\", \"value\" );\n    dbConnection.setAttributes( attributes );\n    dbConnection.setChanged( true );\n    dbConnection.setQuoteAllFields( true );\n    dbConnection.setForcingIdentifiersToLowerCase( true );\n    dbConnection.setForcingIdentifiersToUpperCase( true );\n    dbConnection.setConnectSql( \"select * from 1\" );\n    dbConnection.setUsingConnectionPool( true );\n    dbConnection.setInitialPoolSize( 3 );\n    dbConnection.setMaximumPoolSize( 9 );\n    dbConnection.setPartitioned( true );\n    Map<String, String> connectionPoolingProperties = new HashMap<String, String>();\n    connectionPoolingProperties.put( \"pool\", \"abc\" );\n    dbConnection.setConnectionPoolingProperties( connectionPoolingProperties );\n    List<PartitionDatabaseMeta> partitioningInformation = new LinkedList<PartitionDatabaseMeta>();\n    PartitionDatabaseMeta pdm = new PartitionDatabaseMeta();\n    partitioningInformation.add( pdm );\n    dbConnection.setPartitioningInformation( partitioningInformation );\n\n    IDatabaseConnection conn = AutobeanUtilities.connectionBeanToImpl( dbConnection );\n    assertEquals( conn.getId(), \"my id\" );\n    assertEquals( conn.getAccessType( ), DatabaseAccessType.NATIVE );\n    assertEquals( conn.getDatabaseType( ).getSupportedAccessTypes().size(), 1 );\n    assertEquals( conn.getExtraOptions( ).size() , 3 );\n    assertEquals( conn.getName( ), \"Best name\" );\n    assertEquals( conn.getHostname( ), \"localhost\" );\n    assertEquals( conn.getDatabaseName( ), \"foodmart\" );\n    assertEquals( conn.getDatabasePort( ), \"2233\" );\n    assertEquals( conn.getUsername( ), \"username\" );\n    assertEquals( conn.getPassword( ), \"password\" );\n    assertEquals( conn.isStreamingResults( ), true );\n    assertEquals( conn.getDataTablespace( ), \"tables\" );\n    assertEquals( conn.getIndexTablespace( ), \"indexes\" );\n    assertEquals( conn.getSQLServerInstance( ), \"INSTANCE_0\" );\n    assertEquals( conn.isUsingDoubleDecimalAsSchemaTableSeparator( ), true );\n    assertEquals( conn.getInformixServername( ), \"INFORM_1\" );\n    assertEquals( conn.getAttributes( ).size(), 1 );\n    assertEquals( conn.getChanged( ), false );\n    assertEquals( conn.isQuoteAllFields( ), true );\n    assertEquals( conn.isForcingIdentifiersToLowerCase( ), true );\n    assertEquals( conn.isForcingIdentifiersToUpperCase( ), true );\n    assertEquals( conn.getConnectSql( ), \"select * from 1\" );\n    assertEquals( conn.isUsingConnectionPool( ), true );\n    assertEquals( conn.getInitialPoolSize( ), 3 );\n    assertEquals( conn.getMaximumPoolSize( ), 9 );\n    assertEquals( conn.isPartitioned( ), true );\n    assertEquals( conn.getConnectionPoolingProperties( ).size(), 1 );\n    assertEquals( conn.getPartitioningInformation( ).size(), 1 );\n  }", "signature": "void testConnectionBeanToImpl()", "full_signature": "@Test public void testConnectionBeanToImpl()", "class_method_signature": "AutobeanUtilitiesTest.testConnectionBeanToImpl()", "testcase": true, "constructor": false, "invocations": ["setId", "setAccessType", "add", "setSupportedAccessTypes", "setDatabaseType", "put", "setExtraOptions", "setName", "setHostname", "setDatabaseName", "setDatabasePort", "setUsername", "setPassword", "setStreamingResults", "setDataTablespace", "setIndexTablespace", "setSQLServerInstance", "setUsingDoubleDecimalAsSchemaTableSeparator", "setInformixServername", "addExtraOption", "put", "setAttributes", "setChanged", "setQuoteAllFields", "setForcingIdentifiersToLowerCase", "setForcingIdentifiersToUpperCase", "setConnectSql", "setUsingConnectionPool", "setInitialPoolSize", "setMaximumPoolSize", "setPartitioned", "put", "setConnectionPoolingProperties", "add", "setPartitioningInformation", "connectionBeanToImpl", "assertEquals", "getId", "assertEquals", "getAccessType", "assertEquals", "size", "getSupportedAccessTypes", "getDatabaseType", "assertEquals", "size", "getExtraOptions", "assertEquals", "getName", "assertEquals", "getHostname", "assertEquals", "getDatabaseName", "assertEquals", "getDatabasePort", "assertEquals", "getUsername", "assertEquals", "getPassword", "assertEquals", "isStreamingResults", "assertEquals", "getDataTablespace", "assertEquals", "getIndexTablespace", "assertEquals", "getSQLServerInstance", "assertEquals", "isUsingDoubleDecimalAsSchemaTableSeparator", "assertEquals", "getInformixServername", "assertEquals", "size", "getAttributes", "assertEquals", "getChanged", "assertEquals", "isQuoteAllFields", "assertEquals", "isForcingIdentifiersToLowerCase", "assertEquals", "isForcingIdentifiersToUpperCase", "assertEquals", "getConnectSql", "assertEquals", "isUsingConnectionPool", "assertEquals", "getInitialPoolSize", "assertEquals", "getMaximumPoolSize", "assertEquals", "isPartitioned", "assertEquals", "size", "getConnectionPoolingProperties", "assertEquals", "size", "getPartitioningInformation"]}, "focal_class": {"identifier": "AutobeanUtilities", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "connectionBeanToImpl", "parameters": "( IDatabaseConnection connectionBean )", "modifiers": "public static", "return": "IDatabaseConnection", "signature": "IDatabaseConnection connectionBeanToImpl( IDatabaseConnection connectionBean )", "full_signature": "public static IDatabaseConnection connectionBeanToImpl( IDatabaseConnection connectionBean )", "class_method_signature": "AutobeanUtilities.connectionBeanToImpl( IDatabaseConnection connectionBean )", "testcase": false, "constructor": false}, {"identifier": "dbTypeBeanToImpl", "parameters": "( IDatabaseType databaseTypeBean )", "modifiers": "public static", "return": "IDatabaseType", "signature": "IDatabaseType dbTypeBeanToImpl( IDatabaseType databaseTypeBean )", "full_signature": "public static IDatabaseType dbTypeBeanToImpl( IDatabaseType databaseTypeBean )", "class_method_signature": "AutobeanUtilities.dbTypeBeanToImpl( IDatabaseType databaseTypeBean )", "testcase": false, "constructor": false}, {"identifier": "listBeanToImpl", "parameters": "( List<DatabaseAccessType> supportedAccessTypes )", "modifiers": "private static", "return": "List<DatabaseAccessType>", "signature": "List<DatabaseAccessType> listBeanToImpl( List<DatabaseAccessType> supportedAccessTypes )", "full_signature": "private static List<DatabaseAccessType> listBeanToImpl( List<DatabaseAccessType> supportedAccessTypes )", "class_method_signature": "AutobeanUtilities.listBeanToImpl( List<DatabaseAccessType> supportedAccessTypes )", "testcase": false, "constructor": false}, {"identifier": "mapBeanToImpl", "parameters": "( Map<String, String> map )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> mapBeanToImpl( Map<String, String> map )", "full_signature": "public static Map<String, String> mapBeanToImpl( Map<String, String> map )", "class_method_signature": "AutobeanUtilities.mapBeanToImpl( Map<String, String> map )", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/pentaho/platform/dataaccess/datasource/beans/AutobeanUtilities.java"}, "focal_method": {"identifier": "connectionBeanToImpl", "parameters": "( IDatabaseConnection connectionBean )", "modifiers": "public static", "return": "IDatabaseConnection", "body": "public static IDatabaseConnection connectionBeanToImpl( IDatabaseConnection connectionBean ) {\n    DatabaseConnection connectionImpl = new DatabaseConnection();\n    connectionImpl.setAccessType( connectionBean.getAccessType() );\n    if ( connectionImpl.getAccessType() != null ) {\n      connectionImpl.setAccessTypeValue( connectionImpl.getAccessType().toString() );\n    }\n    connectionImpl.setAttributes( mapBeanToImpl( connectionBean.getAttributes() ) );\n    connectionImpl.setConnectionPoolingProperties( mapBeanToImpl( connectionBean.getConnectionPoolingProperties() ) );\n    connectionImpl.setConnectSql( connectionBean.getConnectSql() );\n    connectionImpl.setDatabaseName( connectionBean.getDatabaseName() );\n    connectionImpl.setDatabasePort( connectionBean.getDatabasePort() );\n    connectionImpl.setDatabaseType( dbTypeBeanToImpl( connectionBean.getDatabaseType() ) );\n    connectionImpl.setDataTablespace( connectionBean.getDataTablespace() );\n    connectionImpl.setForcingIdentifiersToLowerCase( connectionBean.isForcingIdentifiersToLowerCase() );\n    connectionImpl.setForcingIdentifiersToUpperCase( connectionBean.isForcingIdentifiersToUpperCase() );\n    connectionImpl.setHostname( connectionBean.getHostname() );\n    connectionImpl.setId( connectionBean.getId() );\n    connectionImpl.setIndexTablespace( connectionBean.getIndexTablespace() );\n    connectionImpl.setInformixServername( connectionBean.getInformixServername() );\n    connectionImpl.setInitialPoolSize( connectionBean.getInitialPoolSize() );\n    connectionImpl.setMaximumPoolSize( connectionBean.getMaximumPoolSize() );\n    connectionImpl.setName( connectionBean.getName() );\n    connectionImpl.setPartitioned( connectionBean.isPartitioned() );\n    connectionImpl.setPartitioningInformation( connectionBean.getPartitioningInformation() );\n    connectionImpl.setPassword( connectionBean.getPassword() );\n    connectionImpl.setDatabasePort( connectionBean.getDatabasePort() );\n    connectionImpl.setQuoteAllFields( connectionBean.isQuoteAllFields() );\n    connectionImpl.setSQLServerInstance( connectionBean.getSQLServerInstance() );\n    connectionImpl.setStreamingResults( connectionBean.isStreamingResults() );\n    connectionImpl.setUsername( connectionBean.getUsername() );\n    connectionImpl.setUsingConnectionPool( connectionBean.isUsingConnectionPool() );\n    connectionImpl\n      .setUsingDoubleDecimalAsSchemaTableSeparator( connectionBean.isUsingDoubleDecimalAsSchemaTableSeparator() );\n    connectionImpl.setExtraOptions( mapBeanToImpl( connectionBean.getExtraOptions() ) );\n    connectionImpl.setExtraOptionsOrder( mapBeanToImpl( connectionBean.getExtraOptionsOrder() ) );\n    return connectionImpl;\n  }", "signature": "IDatabaseConnection connectionBeanToImpl( IDatabaseConnection connectionBean )", "full_signature": "public static IDatabaseConnection connectionBeanToImpl( IDatabaseConnection connectionBean )", "class_method_signature": "AutobeanUtilities.connectionBeanToImpl( IDatabaseConnection connectionBean )", "testcase": false, "constructor": false, "invocations": ["setAccessType", "getAccessType", "getAccessType", "setAccessTypeValue", "toString", "getAccessType", "setAttributes", "mapBeanToImpl", "getAttributes", "setConnectionPoolingProperties", "mapBeanToImpl", "getConnectionPoolingProperties", "setConnectSql", "getConnectSql", "setDatabaseName", "getDatabaseName", "setDatabasePort", "getDatabasePort", "setDatabaseType", "dbTypeBeanToImpl", "getDatabaseType", "setDataTablespace", "getDataTablespace", "setForcingIdentifiersToLowerCase", "isForcingIdentifiersToLowerCase", "setForcingIdentifiersToUpperCase", "isForcingIdentifiersToUpperCase", "setHostname", "getHostname", "setId", "getId", "setIndexTablespace", "getIndexTablespace", "setInformixServername", "getInformixServername", "setInitialPoolSize", "getInitialPoolSize", "setMaximumPoolSize", "getMaximumPoolSize", "setName", "getName", "setPartitioned", "isPartitioned", "setPartitioningInformation", "getPartitioningInformation", "setPassword", "getPassword", "setDatabasePort", "getDatabasePort", "setQuoteAllFields", "isQuoteAllFields", "setSQLServerInstance", "getSQLServerInstance", "setStreamingResults", "isStreamingResults", "setUsername", "getUsername", "setUsingConnectionPool", "isUsingConnectionPool", "setUsingDoubleDecimalAsSchemaTableSeparator", "isUsingDoubleDecimalAsSchemaTableSeparator", "setExtraOptions", "mapBeanToImpl", "getExtraOptions", "setExtraOptionsOrder", "mapBeanToImpl", "getExtraOptionsOrder"]}, "repository": {"repo_id": 2316191, "url": "https://github.com/pentaho/data-access", "language": "Java", "is_fork": false, "fork_count": 138, "stargazer_count": 31, "size": 7276, "license": "licensed"}}