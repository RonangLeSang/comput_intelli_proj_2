{"test_class": {"identifier": "JDBCDatasourceResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JDBCDatasourceResource resource;", "modifier": "private", "type": "JDBCDatasourceResource", "declarator": "resource", "var_name": "resource"}, {"original_string": "private ConnectionServiceImpl service;", "modifier": "private", "type": "ConnectionServiceImpl", "declarator": "service", "var_name": "service"}, {"original_string": "private IDatabaseConnection connection;", "modifier": "private", "type": "IDatabaseConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private static Log logger = mock( Log.class );", "modifier": "private static", "type": "Log", "declarator": "logger = mock( Log.class )", "var_name": "logger"}], "file": "core/src/test/java/org/pentaho/platform/dataaccess/datasource/api/resources/JDBCDatasourceResourceTest.java"}, "test_case": {"identifier": "testUpdateServerError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUpdateServerError() throws Exception {\n    doReturn( mock( DatabaseConnection.class ) ).when( service ).getConnectionByName( \"Name\" );\n    doThrow( mock( RuntimeException.class ) ).when( service ).updateConnection( connection );\n\n    Response response = resource.addOrUpdate( \"Name\", (DatabaseConnection) connection );\n\n    assertEquals( Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus() );\n    verify( service, times( 1 ) ).updateConnection( connection );\n  }", "signature": "void testUpdateServerError()", "full_signature": "@Test public void testUpdateServerError()", "class_method_signature": "JDBCDatasourceResourceTest.testUpdateServerError()", "testcase": true, "constructor": false, "invocations": ["getConnectionByName", "when", "doReturn", "mock", "updateConnection", "when", "doThrow", "mock", "addOrUpdate", "assertEquals", "getStatusCode", "getStatus", "updateConnection", "verify", "times"]}, "focal_class": {"identifier": "JDBCDatasourceResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConnectionServiceImpl service;", "modifier": "private", "type": "ConnectionServiceImpl", "declarator": "service", "var_name": "service"}, {"original_string": "private static final Log logger = LogFactory.getLog( JDBCDatasourceResource.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( JDBCDatasourceResource.class )", "var_name": "logger"}], "methods": [{"identifier": "JDBCDatasourceResource", "parameters": "()", "modifiers": "public", "return": "", "signature": " JDBCDatasourceResource()", "full_signature": "public  JDBCDatasourceResource()", "class_method_signature": "JDBCDatasourceResource.JDBCDatasourceResource()", "testcase": false, "constructor": true}, {"identifier": "deleteConnection", "parameters": "( @PathParam( \"name\" ) String name )", "modifiers": "@DELETE @Path( \"/{name : .+}\" ) @StatusCodes( { @ResponseCode( code = 204, condition = \"JDBC datasource removed successfully.\" ), @ResponseCode( code = 304, condition = \"User is not authorized to remove the JDBC datasource or the connection does not exist.\" ), @ResponseCode( code = 500, condition = \"An unexpected error occurred while deleting the JDBC datasource.\" ) } ) public", "return": "Response", "signature": "Response deleteConnection( @PathParam( \"name\" ) String name )", "full_signature": "@DELETE @Path( \"/{name : .+}\" ) @StatusCodes( { @ResponseCode( code = 204, condition = \"JDBC datasource removed successfully.\" ), @ResponseCode( code = 304, condition = \"User is not authorized to remove the JDBC datasource or the connection does not exist.\" ), @ResponseCode( code = 500, condition = \"An unexpected error occurred while deleting the JDBC datasource.\" ) } ) public Response deleteConnection( @PathParam( \"name\" ) String name )", "class_method_signature": "JDBCDatasourceResource.deleteConnection( @PathParam( \"name\" ) String name )", "testcase": false, "constructor": false}, {"identifier": "getConnectionIDs", "parameters": "()", "modifiers": "@GET @Path( \"/\" ) @Produces( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully retrieved the list of JDBC datasource IDs\" ), @ResponseCode( code = 500, condition = \"Internal error retrieving JDBC datasource IDs\" ) } ) public", "return": "JaxbList<String>", "signature": "JaxbList<String> getConnectionIDs()", "full_signature": "@GET @Path( \"/\" ) @Produces( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully retrieved the list of JDBC datasource IDs\" ), @ResponseCode( code = 500, condition = \"Internal error retrieving JDBC datasource IDs\" ) } ) public JaxbList<String> getConnectionIDs()", "class_method_signature": "JDBCDatasourceResource.getConnectionIDs()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "( @PathParam( \"name\" ) String name )", "modifiers": "@GET @Path( \"/{name : .+}\" ) @Produces( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully retrieved the JDBC datasource\" ), @ResponseCode( code = 500, condition = \"An error occurred retrieving the JDBC datasource\" ) } ) public", "return": "Response", "signature": "Response getConnection( @PathParam( \"name\" ) String name )", "full_signature": "@GET @Path( \"/{name : .+}\" ) @Produces( { APPLICATION_JSON, APPLICATION_XML } ) @StatusCodes( { @ResponseCode( code = 200, condition = \"Successfully retrieved the JDBC datasource\" ), @ResponseCode( code = 500, condition = \"An error occurred retrieving the JDBC datasource\" ) } ) public Response getConnection( @PathParam( \"name\" ) String name )", "class_method_signature": "JDBCDatasourceResource.getConnection( @PathParam( \"name\" ) String name )", "testcase": false, "constructor": false}, {"identifier": "addOrUpdate", "parameters": "( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection )", "modifiers": "@PUT @Path( \"/{connectionId : .+}\" ) @Consumes( { APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 204, condition = \"JDBC datasource added successfully.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to add JDBC datasources.\" ), @ResponseCode( code = 304, condition = \"Datasource was not modified\" ), @ResponseCode( code = 500, condition = \"An unexpected error occurred while adding the JDBC datasource.\" ) } ) public", "return": "Response", "signature": "Response addOrUpdate( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection )", "full_signature": "@PUT @Path( \"/{connectionId : .+}\" ) @Consumes( { APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 204, condition = \"JDBC datasource added successfully.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to add JDBC datasources.\" ), @ResponseCode( code = 304, condition = \"Datasource was not modified\" ), @ResponseCode( code = 500, condition = \"An unexpected error occurred while adding the JDBC datasource.\" ) } ) public Response addOrUpdate( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection )", "class_method_signature": "JDBCDatasourceResource.addOrUpdate( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection )", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/pentaho/platform/dataaccess/datasource/api/resources/JDBCDatasourceResource.java"}, "focal_method": {"identifier": "addOrUpdate", "parameters": "( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection )", "modifiers": "@PUT @Path( \"/{connectionId : .+}\" ) @Consumes( { APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 204, condition = \"JDBC datasource added successfully.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to add JDBC datasources.\" ), @ResponseCode( code = 304, condition = \"Datasource was not modified\" ), @ResponseCode( code = 500, condition = \"An unexpected error occurred while adding the JDBC datasource.\" ) } ) public", "return": "Response", "body": "@PUT\n  @Path( \"/{connectionId : .+}\" )\n  @Consumes( { APPLICATION_JSON } )\n  @StatusCodes( {\n    @ResponseCode( code = 204, condition = \"JDBC datasource added successfully.\" ),\n    @ResponseCode( code = 401, condition = \"User is not authorized to add JDBC datasources.\" ),\n    @ResponseCode( code = 304, condition = \"Datasource was not modified\" ),\n    @ResponseCode( code = 500, condition = \"An unexpected error occurred while adding the JDBC datasource.\" )\n  } )\n  public Response addOrUpdate( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection ) {\n    try {\n      DatasourceService.validateAccess();\n      // Prefer the path name over the one in the DTO object\n      connection.setId( connectionName );\n\n      try {\n        IDatabaseConnection old = service.getConnectionByName( connectionName );\n\n        if ( StringUtils.isBlank( connection.getPassword() ) ) {\n          connection.setPassword( old.getPassword() );\n        }\n        connection.setId( old.getId() );\n\n        return service.updateConnection( connection ) ? Response.noContent().build() : Response.notModified().build();\n      } catch ( ConnectionServiceException e ) {\n        // unfortunately getConnectionById throws an exception not returning null when the connection is not present.\n      } catch ( NullPointerException e ) {\n        // unfortunately getConnectionById throws an exception not returning null when the connection is not present.\n      }\n\n      return service.addConnection( connection ) ? Response.noContent().build() : Response.notModified().build();\n    } catch ( PentahoAccessControlException t ) {\n      return Response.status( Response.Status.UNAUTHORIZED ).build();\n    } catch ( Throwable t ) {\n      logger.error( \"Error \" + t.getMessage() );\n      return Response.serverError().build();\n    }\n  }", "signature": "Response addOrUpdate( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection )", "full_signature": "@PUT @Path( \"/{connectionId : .+}\" ) @Consumes( { APPLICATION_JSON } ) @StatusCodes( { @ResponseCode( code = 204, condition = \"JDBC datasource added successfully.\" ), @ResponseCode( code = 401, condition = \"User is not authorized to add JDBC datasources.\" ), @ResponseCode( code = 304, condition = \"Datasource was not modified\" ), @ResponseCode( code = 500, condition = \"An unexpected error occurred while adding the JDBC datasource.\" ) } ) public Response addOrUpdate( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection )", "class_method_signature": "JDBCDatasourceResource.addOrUpdate( @PathParam( \"connectionId\" ) String connectionName, DatabaseConnection connection )", "testcase": false, "constructor": false, "invocations": ["validateAccess", "setId", "getConnectionByName", "isBlank", "getPassword", "setPassword", "getPassword", "setId", "getId", "updateConnection", "build", "noContent", "build", "notModified", "addConnection", "build", "noContent", "build", "notModified", "build", "status", "error", "getMessage", "build", "serverError"]}, "repository": {"repo_id": 2316191, "url": "https://github.com/pentaho/data-access", "language": "Java", "is_fork": false, "fork_count": 138, "stargazer_count": 31, "size": 7276, "license": "licensed"}}