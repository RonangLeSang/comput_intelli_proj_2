{"test_class": {"identifier": "ConnectionServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONN_NAME = \"Connection Name\";", "modifier": "private static final", "type": "String", "declarator": "CONN_NAME = \"Connection Name\"", "var_name": "CONN_NAME"}, {"original_string": "private static final String CONN_ID = \"Connection ID\";", "modifier": "private static final", "type": "String", "declarator": "CONN_ID = \"Connection ID\"", "var_name": "CONN_ID"}, {"original_string": "private static ConnectionServiceImpl connectionServiceImpl;", "modifier": "private static", "type": "ConnectionServiceImpl", "declarator": "connectionServiceImpl", "var_name": "connectionServiceImpl"}, {"original_string": "private IDatabaseConnection mockDBConnection = mock( IDatabaseConnection.class );", "modifier": "private", "type": "IDatabaseConnection", "declarator": "mockDBConnection = mock( IDatabaseConnection.class )", "var_name": "mockDBConnection"}, {"original_string": "private IDBDatasourceService datasourceService = mock( IDBDatasourceService.class );", "modifier": "private", "type": "IDBDatasourceService", "declarator": "datasourceService = mock( IDBDatasourceService.class )", "var_name": "datasourceService"}, {"original_string": "private IPentahoObjectFactory pentahoObjectFactory = mock( IPentahoObjectFactory.class );", "modifier": "private", "type": "IPentahoObjectFactory", "declarator": "pentahoObjectFactory = mock( IPentahoObjectFactory.class )", "var_name": "pentahoObjectFactory"}, {"original_string": "private final IPluginResourceLoader loader = mock( IPluginResourceLoader.class );", "modifier": "private final", "type": "IPluginResourceLoader", "declarator": "loader = mock( IPluginResourceLoader.class )", "var_name": "loader"}, {"original_string": "private IDatabaseType databaseType = mock( IDatabaseType.class );", "modifier": "private", "type": "IDatabaseType", "declarator": "databaseType = mock( IDatabaseType.class )", "var_name": "databaseType"}, {"original_string": "private final SQLConnection sqlConnection = mock( SQLConnection.class );", "modifier": "private final", "type": "SQLConnection", "declarator": "sqlConnection = mock( SQLConnection.class )", "var_name": "sqlConnection"}, {"original_string": "private final Connection nativeConnection = mock( Connection.class );", "modifier": "private final", "type": "Connection", "declarator": "nativeConnection = mock( Connection.class )", "var_name": "nativeConnection"}, {"original_string": "private final PooledDatasourceHelper pdh = mock( PooledDatasourceHelper.class );", "modifier": "private final", "type": "PooledDatasourceHelper", "declarator": "pdh = mock( PooledDatasourceHelper.class )", "var_name": "pdh"}, {"original_string": "private final DatabaseMetaData dmd = mock( DatabaseMetaData.class );", "modifier": "private final", "type": "DatabaseMetaData", "declarator": "dmd = mock( DatabaseMetaData.class )", "var_name": "dmd"}], "file": "core/src/test/java/org/pentaho/platform/dataaccess/datasource/wizard/service/impl/ConnectionServiceImplTest.java"}, "test_case": {"identifier": "testGetConnectionById", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetConnectionById() throws Exception {\n    doNothing().when( connectionServiceImpl ).ensureDataAccessPermission();\n    doReturn( mockDBConnection ).when( connectionServiceImpl.datasourceMgmtSvc ).getDatasourceById( CONN_ID );\n    IDatabaseConnection connection = connectionServiceImpl.getConnectionById( CONN_ID );\n    verify( connectionServiceImpl ).getConnectionById( CONN_ID );\n    assertEquals( mockDBConnection, connection );\n  }", "signature": "void testGetConnectionById()", "full_signature": "@Test public void testGetConnectionById()", "class_method_signature": "ConnectionServiceImplTest.testGetConnectionById()", "testcase": true, "constructor": false, "invocations": ["ensureDataAccessPermission", "when", "doNothing", "getDatasourceById", "when", "doReturn", "getConnectionById", "getConnectionById", "verify", "assertEquals"]}, "focal_class": {"identifier": "ConnectionServiceImpl", "superclass": "extends PentahoBase", "interfaces": "implements IConnectionService", "fields": [{"original_string": "private static final long serialVersionUID = -4321819783067403620L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4321819783067403620L", "var_name": "serialVersionUID"}, {"original_string": "private IDataAccessPermissionHandler dataAccessPermHandler;", "modifier": "private", "type": "IDataAccessPermissionHandler", "declarator": "dataAccessPermHandler", "var_name": "dataAccessPermHandler"}, {"original_string": "protected IDatasourceMgmtService datasourceMgmtSvc;", "modifier": "protected", "type": "IDatasourceMgmtService", "declarator": "datasourceMgmtSvc", "var_name": "datasourceMgmtSvc"}, {"original_string": "protected IDBDatasourceService datasourceService;", "modifier": "protected", "type": "IDBDatasourceService", "declarator": "datasourceService", "var_name": "datasourceService"}, {"original_string": "protected DatabaseDialectService dialectService = new DatabaseDialectService();", "modifier": "protected", "type": "DatabaseDialectService", "declarator": "dialectService = new DatabaseDialectService()", "var_name": "dialectService"}, {"original_string": "GenericDatabaseDialect genericDialect = new GenericDatabaseDialect();", "modifier": "", "type": "GenericDatabaseDialect", "declarator": "genericDialect = new GenericDatabaseDialect()", "var_name": "genericDialect"}, {"original_string": "private static final Log logger = LogFactory.getLog( ConnectionServiceImpl.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( ConnectionServiceImpl.class )", "var_name": "logger"}, {"original_string": "private UtilHtmlSanitizer sanitizer = UtilHtmlSanitizer.getInstance();", "modifier": "private", "type": "UtilHtmlSanitizer", "declarator": "sanitizer = UtilHtmlSanitizer.getInstance()", "var_name": "sanitizer"}], "methods": [{"identifier": "getLogger", "parameters": "()", "modifiers": "public", "return": "Log", "signature": "Log getLogger()", "full_signature": "public Log getLogger()", "class_method_signature": "ConnectionServiceImpl.getLogger()", "testcase": false, "constructor": false}, {"identifier": "ConnectionServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConnectionServiceImpl()", "full_signature": "public  ConnectionServiceImpl()", "class_method_signature": "ConnectionServiceImpl.ConnectionServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "hasDataAccessPermission", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasDataAccessPermission()", "full_signature": "public boolean hasDataAccessPermission()", "class_method_signature": "ConnectionServiceImpl.hasDataAccessPermission()", "testcase": false, "constructor": false}, {"identifier": "ensureDataAccessPermission", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureDataAccessPermission()", "full_signature": "public void ensureDataAccessPermission()", "class_method_signature": "ConnectionServiceImpl.ensureDataAccessPermission()", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "()", "modifiers": "public", "return": "List<IDatabaseConnection>", "signature": "List<IDatabaseConnection> getConnections()", "full_signature": "public List<IDatabaseConnection> getConnections()", "class_method_signature": "ConnectionServiceImpl.getConnections()", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "( boolean hidePassword )", "modifiers": "public", "return": "List<IDatabaseConnection>", "signature": "List<IDatabaseConnection> getConnections( boolean hidePassword )", "full_signature": "public List<IDatabaseConnection> getConnections( boolean hidePassword )", "class_method_signature": "ConnectionServiceImpl.getConnections( boolean hidePassword )", "testcase": false, "constructor": false}, {"identifier": "getConnectionByName", "parameters": "( String name )", "modifiers": "public", "return": "IDatabaseConnection", "signature": "IDatabaseConnection getConnectionByName( String name )", "full_signature": "public IDatabaseConnection getConnectionByName( String name )", "class_method_signature": "ConnectionServiceImpl.getConnectionByName( String name )", "testcase": false, "constructor": false}, {"identifier": "getConnectionByName", "parameters": "( String name, boolean doUnsanitize )", "modifiers": "public", "return": "IDatabaseConnection", "signature": "IDatabaseConnection getConnectionByName( String name, boolean doUnsanitize )", "full_signature": "public IDatabaseConnection getConnectionByName( String name, boolean doUnsanitize )", "class_method_signature": "ConnectionServiceImpl.getConnectionByName( String name, boolean doUnsanitize )", "testcase": false, "constructor": false}, {"identifier": "getConnectionById", "parameters": "( String id )", "modifiers": "public", "return": "IDatabaseConnection", "signature": "IDatabaseConnection getConnectionById( String id )", "full_signature": "public IDatabaseConnection getConnectionById( String id )", "class_method_signature": "ConnectionServiceImpl.getConnectionById( String id )", "testcase": false, "constructor": false}, {"identifier": "addConnection", "parameters": "( IDatabaseConnection connection )", "modifiers": "public", "return": "boolean", "signature": "boolean addConnection( IDatabaseConnection connection )", "full_signature": "public boolean addConnection( IDatabaseConnection connection )", "class_method_signature": "ConnectionServiceImpl.addConnection( IDatabaseConnection connection )", "testcase": false, "constructor": false}, {"identifier": "getConnectionPassword", "parameters": "( String name, String password )", "modifiers": "protected", "return": "String", "signature": "String getConnectionPassword( String name, String password )", "full_signature": "protected String getConnectionPassword( String name, String password )", "class_method_signature": "ConnectionServiceImpl.getConnectionPassword( String name, String password )", "testcase": false, "constructor": false}, {"identifier": "updateConnection", "parameters": "( IDatabaseConnection connection )", "modifiers": "public", "return": "boolean", "signature": "boolean updateConnection( IDatabaseConnection connection )", "full_signature": "public boolean updateConnection( IDatabaseConnection connection )", "class_method_signature": "ConnectionServiceImpl.updateConnection( IDatabaseConnection connection )", "testcase": false, "constructor": false}, {"identifier": "deleteConnection", "parameters": "( IDatabaseConnection connection )", "modifiers": "public", "return": "boolean", "signature": "boolean deleteConnection( IDatabaseConnection connection )", "full_signature": "public boolean deleteConnection( IDatabaseConnection connection )", "class_method_signature": "ConnectionServiceImpl.deleteConnection( IDatabaseConnection connection )", "testcase": false, "constructor": false}, {"identifier": "deleteConnection", "parameters": "( String name )", "modifiers": "public", "return": "boolean", "signature": "boolean deleteConnection( String name )", "full_signature": "public boolean deleteConnection( String name )", "class_method_signature": "ConnectionServiceImpl.deleteConnection( String name )", "testcase": false, "constructor": false}, {"identifier": "testConnection", "parameters": "( IDatabaseConnection connection )", "modifiers": "public", "return": "boolean", "signature": "boolean testConnection( IDatabaseConnection connection )", "full_signature": "public boolean testConnection( IDatabaseConnection connection )", "class_method_signature": "ConnectionServiceImpl.testConnection( IDatabaseConnection connection )", "testcase": false, "constructor": false}, {"identifier": "isConnectionExist", "parameters": "( String connectionName )", "modifiers": "public", "return": "boolean", "signature": "boolean isConnectionExist( String connectionName )", "full_signature": "public boolean isConnectionExist( String connectionName )", "class_method_signature": "ConnectionServiceImpl.isConnectionExist( String connectionName )", "testcase": false, "constructor": false}, {"identifier": "clearDatasource", "parameters": "( String name )", "modifiers": "private", "return": "void", "signature": "void clearDatasource( String name )", "full_signature": "private void clearDatasource( String name )", "class_method_signature": "ConnectionServiceImpl.clearDatasource( String name )", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/pentaho/platform/dataaccess/datasource/wizard/service/impl/ConnectionServiceImpl.java"}, "focal_method": {"identifier": "getConnectionById", "parameters": "( String id )", "modifiers": "public", "return": "IDatabaseConnection", "body": "public IDatabaseConnection getConnectionById( String id ) throws ConnectionServiceException {\n    ensureDataAccessPermission();\n    try {\n      IDatabaseConnection connection = datasourceMgmtSvc.getDatasourceById( id );\n      if ( connection == null ) {\n        throw new ConnectionServiceException( Response.SC_NOT_FOUND, Messages.getErrorString(\n          \"ConnectionServiceImpl.ERROR_0003_UNABLE_TO_GET_CONNECTION\", id ) ); //$NON-NLS-1$\n      } else {\n        return connection;\n      }\n    } catch ( DatasourceMgmtServiceException dme ) {\n      String message = Messages.getErrorString(\n        \"ConnectionServiceImpl.ERROR_0003_UNABLE_TO_GET_CONNECTION\", //$NON-NLS-1$\n        dme.getLocalizedMessage()\n      );\n      logger.error( message );\n      throw new ConnectionServiceException( message, dme );\n    }\n  }", "signature": "IDatabaseConnection getConnectionById( String id )", "full_signature": "public IDatabaseConnection getConnectionById( String id )", "class_method_signature": "ConnectionServiceImpl.getConnectionById( String id )", "testcase": false, "constructor": false, "invocations": ["ensureDataAccessPermission", "getDatasourceById", "getErrorString", "getErrorString", "getLocalizedMessage", "error"]}, "repository": {"repo_id": 2316191, "url": "https://github.com/pentaho/data-access", "language": "Java", "is_fork": false, "fork_count": 138, "stargazer_count": 31, "size": 7276, "license": "licensed"}}