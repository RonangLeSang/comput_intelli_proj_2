{"test_class": {"identifier": "NonupleTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/datastructures/tuples/NonupleTest.java"}, "test_case": {"identifier": "shouldBeMappableUsingUnaryFunctionOnSixthPosition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldBeMappableUsingUnaryFunctionOnSixthPosition() throws Exception {\n        // Given\n        Nonuple<Integer, String, Boolean, Double, Long, Name, Colour, Age, Location> nonuple =\n                tuple(5, \"Five\", true, 3.6, 2L, name(\"Ellen\"), colour(\"Green\"), age(20), location(\"France\"));\n        UnaryFunction<Name, String> function = new UnaryFunction<Name, String>() {\n            @Override public String call(Name input) {\n                return input.getValue();\n            }\n        };\n        Nonuple<Integer, String, Boolean, Double, Long, String, Colour, Age, Location> expected =\n                tuple(5, \"Five\", true, 3.6, 2L, \"Ellen\", colour(\"Green\"), age(20), location(\"France\"));\n\n        // When\n        Nonuple<Integer, String, Boolean, Double, Long, String, Colour, Age, Location> actual = nonuple.mapSixth(function);\n\n        // Then\n        assertThat(actual, is(expected));\n    }", "signature": "void shouldBeMappableUsingUnaryFunctionOnSixthPosition()", "full_signature": "@Test public void shouldBeMappableUsingUnaryFunctionOnSixthPosition()", "class_method_signature": "NonupleTest.shouldBeMappableUsingUnaryFunctionOnSixthPosition()", "testcase": true, "constructor": false, "invocations": ["tuple", "name", "colour", "age", "location", "getValue", "tuple", "colour", "age", "location", "mapSixth", "assertThat", "is"]}, "focal_class": {"identifier": "Nonuple", "superclass": "extends Octuple<R, S, T, U, V, W, X, Y>", "interfaces": "implements Ninth<Z>,\n                   MappableNinth<Z, Nonuple<R, S, T, U, V, W, X, Y, ?>>", "fields": [{"original_string": "private final Z ninth;", "modifier": "private final", "type": "Z", "declarator": "ninth", "var_name": "ninth"}], "methods": [{"identifier": "nonuple", "parameters": "(\n            R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth, Z ninth)", "modifiers": "public static", "return": "Nonuple<R, S, T, U, V, W, X, Y, Z>", "signature": "Nonuple<R, S, T, U, V, W, X, Y, Z> nonuple(\n            R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth, Z ninth)", "full_signature": "public static Nonuple<R, S, T, U, V, W, X, Y, Z> nonuple(\n            R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth, Z ninth)", "class_method_signature": "Nonuple.nonuple(\n            R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth, Z ninth)", "testcase": false, "constructor": false}, {"identifier": "Nonuple", "parameters": "(R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth, Z ninth)", "modifiers": "public", "return": "", "signature": " Nonuple(R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth, Z ninth)", "full_signature": "public  Nonuple(R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth, Z ninth)", "class_method_signature": "Nonuple.Nonuple(R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth, Z ninth)", "testcase": false, "constructor": true}, {"identifier": "getNinth", "parameters": "()", "modifiers": "@Override public", "return": "Z", "signature": "Z getNinth()", "full_signature": "@Override public Z getNinth()", "class_method_signature": "Nonuple.getNinth()", "testcase": false, "constructor": false}, {"identifier": "mapFirst", "parameters": "(UnaryFunction<R, A> function)", "modifiers": "@Override public", "return": "Nonuple<A, S, T, U, V, W, X, Y, Z>", "signature": "Nonuple<A, S, T, U, V, W, X, Y, Z> mapFirst(UnaryFunction<R, A> function)", "full_signature": "@Override public Nonuple<A, S, T, U, V, W, X, Y, Z> mapFirst(UnaryFunction<R, A> function)", "class_method_signature": "Nonuple.mapFirst(UnaryFunction<R, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapSecond", "parameters": "(UnaryFunction<S, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, A, T, U, V, W, X, Y, Z>", "signature": "Nonuple<R, A, T, U, V, W, X, Y, Z> mapSecond(UnaryFunction<S, A> function)", "full_signature": "@Override public Nonuple<R, A, T, U, V, W, X, Y, Z> mapSecond(UnaryFunction<S, A> function)", "class_method_signature": "Nonuple.mapSecond(UnaryFunction<S, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapThird", "parameters": "(UnaryFunction<T, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, S, A, U, V, W, X, Y, Z>", "signature": "Nonuple<R, S, A, U, V, W, X, Y, Z> mapThird(UnaryFunction<T, A> function)", "full_signature": "@Override public Nonuple<R, S, A, U, V, W, X, Y, Z> mapThird(UnaryFunction<T, A> function)", "class_method_signature": "Nonuple.mapThird(UnaryFunction<T, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapFourth", "parameters": "(UnaryFunction<U, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, S, T, A, V, W, X, Y, Z>", "signature": "Nonuple<R, S, T, A, V, W, X, Y, Z> mapFourth(UnaryFunction<U, A> function)", "full_signature": "@Override public Nonuple<R, S, T, A, V, W, X, Y, Z> mapFourth(UnaryFunction<U, A> function)", "class_method_signature": "Nonuple.mapFourth(UnaryFunction<U, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapFifth", "parameters": "(UnaryFunction<V, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, S, T, U, A, W, X, Y, Z>", "signature": "Nonuple<R, S, T, U, A, W, X, Y, Z> mapFifth(UnaryFunction<V, A> function)", "full_signature": "@Override public Nonuple<R, S, T, U, A, W, X, Y, Z> mapFifth(UnaryFunction<V, A> function)", "class_method_signature": "Nonuple.mapFifth(UnaryFunction<V, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapSixth", "parameters": "(UnaryFunction<W, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, S, T, U, V, A, X, Y, Z>", "signature": "Nonuple<R, S, T, U, V, A, X, Y, Z> mapSixth(UnaryFunction<W, A> function)", "full_signature": "@Override public Nonuple<R, S, T, U, V, A, X, Y, Z> mapSixth(UnaryFunction<W, A> function)", "class_method_signature": "Nonuple.mapSixth(UnaryFunction<W, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapSeventh", "parameters": "(UnaryFunction<X, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, S, T, U, V, W, A, Y, Z>", "signature": "Nonuple<R, S, T, U, V, W, A, Y, Z> mapSeventh(UnaryFunction<X, A> function)", "full_signature": "@Override public Nonuple<R, S, T, U, V, W, A, Y, Z> mapSeventh(UnaryFunction<X, A> function)", "class_method_signature": "Nonuple.mapSeventh(UnaryFunction<X, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapEighth", "parameters": "(UnaryFunction<Y, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, S, T, U, V, W, X, A, Z>", "signature": "Nonuple<R, S, T, U, V, W, X, A, Z> mapEighth(UnaryFunction<Y, A> function)", "full_signature": "@Override public Nonuple<R, S, T, U, V, W, X, A, Z> mapEighth(UnaryFunction<Y, A> function)", "class_method_signature": "Nonuple.mapEighth(UnaryFunction<Y, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapNinth", "parameters": "(UnaryFunction<Z, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, S, T, U, V, W, X, Y, A>", "signature": "Nonuple<R, S, T, U, V, W, X, Y, A> mapNinth(UnaryFunction<Z, A> function)", "full_signature": "@Override public Nonuple<R, S, T, U, V, W, X, Y, A> mapNinth(UnaryFunction<Z, A> function)", "class_method_signature": "Nonuple.mapNinth(UnaryFunction<Z, A> function)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Object>", "signature": "Iterable<Object> getValues()", "full_signature": "@Override public Iterable<Object> getValues()", "class_method_signature": "Nonuple.getValues()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/datastructures/tuples/Nonuple.java"}, "focal_method": {"identifier": "mapSixth", "parameters": "(UnaryFunction<W, A> function)", "modifiers": "@Override public", "return": "Nonuple<R, S, T, U, V, A, X, Y, Z>", "body": "@Override public <A> Nonuple<R, S, T, U, V, A, X, Y, Z> mapSixth(UnaryFunction<W, A> function) {\n        return nonuple(getFirst(), getSecond(), getThird(), getFourth(), getFifth(), function.call(getSixth()), getSeventh(), getEighth(), getNinth());\n    }", "signature": "Nonuple<R, S, T, U, V, A, X, Y, Z> mapSixth(UnaryFunction<W, A> function)", "full_signature": "@Override public Nonuple<R, S, T, U, V, A, X, Y, Z> mapSixth(UnaryFunction<W, A> function)", "class_method_signature": "Nonuple.mapSixth(UnaryFunction<W, A> function)", "testcase": false, "constructor": false, "invocations": ["nonuple", "getFirst", "getSecond", "getThird", "getFourth", "getFifth", "call", "getSixth", "getSeventh", "getEighth", "getNinth"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}