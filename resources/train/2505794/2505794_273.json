{"test_class": {"identifier": "SingleTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/datastructures/tuples/SingleTest.java"}, "test_case": {"identifier": "shouldBeMappableWithUnaryFunctionOnFirstPosition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldBeMappableWithUnaryFunctionOnFirstPosition() throws Exception {\n        // Given\n        Single<Integer> single = tuple(5);\n        UnaryFunction<Integer, String> function = new UnaryFunction<Integer, String>() {\n            @Override public String call(Integer input) {\n                return String.valueOf(input);\n            }\n        };\n        Single<String> expected = tuple(\"5\");\n\n        // When\n        Single<String> actual = single.mapFirst(function);\n\n        // Then\n        assertThat(actual, is(expected));\n    }", "signature": "void shouldBeMappableWithUnaryFunctionOnFirstPosition()", "full_signature": "@Test public void shouldBeMappableWithUnaryFunctionOnFirstPosition()", "class_method_signature": "SingleTest.shouldBeMappableWithUnaryFunctionOnFirstPosition()", "testcase": true, "constructor": false, "invocations": ["tuple", "valueOf", "tuple", "mapFirst", "assertThat", "is"]}, "focal_class": {"identifier": "Single", "superclass": "extends AbstractTuple", "interfaces": "implements First<R>,\n                   MappableFirst<R, Single<?>>", "fields": [{"original_string": "private R first;", "modifier": "private", "type": "R", "declarator": "first", "var_name": "first"}], "methods": [{"identifier": "single", "parameters": "(R first)", "modifiers": "public static", "return": "Single<R>", "signature": "Single<R> single(R first)", "full_signature": "public static Single<R> single(R first)", "class_method_signature": "Single.single(R first)", "testcase": false, "constructor": false}, {"identifier": "Single", "parameters": "(R first)", "modifiers": "public", "return": "", "signature": " Single(R first)", "full_signature": "public  Single(R first)", "class_method_signature": "Single.Single(R first)", "testcase": false, "constructor": true}, {"identifier": "getFirst", "parameters": "()", "modifiers": "@Override public", "return": "R", "signature": "R getFirst()", "full_signature": "@Override public R getFirst()", "class_method_signature": "Single.getFirst()", "testcase": false, "constructor": false}, {"identifier": "mapFirst", "parameters": "(UnaryFunction<R, A> mapper)", "modifiers": "@Override public", "return": "Single<A>", "signature": "Single<A> mapFirst(UnaryFunction<R, A> mapper)", "full_signature": "@Override public Single<A> mapFirst(UnaryFunction<R, A> mapper)", "class_method_signature": "Single.mapFirst(UnaryFunction<R, A> mapper)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Object>", "signature": "Iterable<Object> getValues()", "full_signature": "@Override public Iterable<Object> getValues()", "class_method_signature": "Single.getValues()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/datastructures/tuples/Single.java"}, "focal_method": {"identifier": "mapFirst", "parameters": "(UnaryFunction<R, A> mapper)", "modifiers": "@Override public", "return": "Single<A>", "body": "@Override public <A> Single<A> mapFirst(UnaryFunction<R, A> mapper) {\n        return single(mapper.call(first));\n    }", "signature": "Single<A> mapFirst(UnaryFunction<R, A> mapper)", "full_signature": "@Override public Single<A> mapFirst(UnaryFunction<R, A> mapper)", "class_method_signature": "Single.mapFirst(UnaryFunction<R, A> mapper)", "testcase": false, "constructor": false, "invocations": ["single", "call"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}