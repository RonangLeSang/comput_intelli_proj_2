{"test_class": {"identifier": "QuintupleTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/datastructures/tuples/QuintupleTest.java"}, "test_case": {"identifier": "shouldBeMappableUsingMapperOnSecondPosition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldBeMappableUsingMapperOnSecondPosition() throws Exception {\n        // Given\n        Quintuple<Integer, String, Boolean, Double, Long> quintuple = tuple(5, \"Five\", true, 3.6, 2L);\n        Mapper<String, Integer> mapper = new Mapper<String, Integer>() {\n            @Override public Integer map(String input) {\n                return input.length();\n            }\n        };\n        Quintuple<Integer, Integer, Boolean, Double, Long> expected = tuple(5, 4, true, 3.6, 2L);\n\n        // When\n        Quintuple<Integer, Integer, Boolean, Double, Long> actual = quintuple.mapSecond(mapper);\n\n        // Then\n        assertThat(actual, is(expected));\n    }", "signature": "void shouldBeMappableUsingMapperOnSecondPosition()", "full_signature": "@Test public void shouldBeMappableUsingMapperOnSecondPosition()", "class_method_signature": "QuintupleTest.shouldBeMappableUsingMapperOnSecondPosition()", "testcase": true, "constructor": false, "invocations": ["tuple", "length", "tuple", "mapSecond", "assertThat", "is"]}, "focal_class": {"identifier": "Quintuple", "superclass": "extends Quadruple<R, S, T, U>", "interfaces": "implements Fifth<V>,\n                   MappableFifth<V, Quintuple<R, S, T, U, ?>>", "fields": [{"original_string": "private final V fifth;", "modifier": "private final", "type": "V", "declarator": "fifth", "var_name": "fifth"}], "methods": [{"identifier": "quintuple", "parameters": "(R first, S second, T third, U fourth, V fifth)", "modifiers": "public static", "return": "Quintuple<R, S, T, U, V>", "signature": "Quintuple<R, S, T, U, V> quintuple(R first, S second, T third, U fourth, V fifth)", "full_signature": "public static Quintuple<R, S, T, U, V> quintuple(R first, S second, T third, U fourth, V fifth)", "class_method_signature": "Quintuple.quintuple(R first, S second, T third, U fourth, V fifth)", "testcase": false, "constructor": false}, {"identifier": "Quintuple", "parameters": "(R first, S second, T third, U fourth, V fifth)", "modifiers": "public", "return": "", "signature": " Quintuple(R first, S second, T third, U fourth, V fifth)", "full_signature": "public  Quintuple(R first, S second, T third, U fourth, V fifth)", "class_method_signature": "Quintuple.Quintuple(R first, S second, T third, U fourth, V fifth)", "testcase": false, "constructor": true}, {"identifier": "getFifth", "parameters": "()", "modifiers": "@Override public", "return": "V", "signature": "V getFifth()", "full_signature": "@Override public V getFifth()", "class_method_signature": "Quintuple.getFifth()", "testcase": false, "constructor": false}, {"identifier": "mapFirst", "parameters": "(UnaryFunction<R, A> function)", "modifiers": "@Override public", "return": "Quintuple<A, S, T, U, V>", "signature": "Quintuple<A, S, T, U, V> mapFirst(UnaryFunction<R, A> function)", "full_signature": "@Override public Quintuple<A, S, T, U, V> mapFirst(UnaryFunction<R, A> function)", "class_method_signature": "Quintuple.mapFirst(UnaryFunction<R, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapSecond", "parameters": "(UnaryFunction<S, A> function)", "modifiers": "@Override public", "return": "Quintuple<R, A, T, U, V>", "signature": "Quintuple<R, A, T, U, V> mapSecond(UnaryFunction<S, A> function)", "full_signature": "@Override public Quintuple<R, A, T, U, V> mapSecond(UnaryFunction<S, A> function)", "class_method_signature": "Quintuple.mapSecond(UnaryFunction<S, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapThird", "parameters": "(UnaryFunction<T, A> function)", "modifiers": "@Override public", "return": "Quintuple<R, S, A, U, V>", "signature": "Quintuple<R, S, A, U, V> mapThird(UnaryFunction<T, A> function)", "full_signature": "@Override public Quintuple<R, S, A, U, V> mapThird(UnaryFunction<T, A> function)", "class_method_signature": "Quintuple.mapThird(UnaryFunction<T, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapFourth", "parameters": "(UnaryFunction<U, A> function)", "modifiers": "@Override public", "return": "Quintuple<R, S, T, A, V>", "signature": "Quintuple<R, S, T, A, V> mapFourth(UnaryFunction<U, A> function)", "full_signature": "@Override public Quintuple<R, S, T, A, V> mapFourth(UnaryFunction<U, A> function)", "class_method_signature": "Quintuple.mapFourth(UnaryFunction<U, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapFifth", "parameters": "(UnaryFunction<V, A> function)", "modifiers": "@Override public", "return": "Quintuple<R, S, T, U, A>", "signature": "Quintuple<R, S, T, U, A> mapFifth(UnaryFunction<V, A> function)", "full_signature": "@Override public Quintuple<R, S, T, U, A> mapFifth(UnaryFunction<V, A> function)", "class_method_signature": "Quintuple.mapFifth(UnaryFunction<V, A> function)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Object>", "signature": "Iterable<Object> getValues()", "full_signature": "@Override public Iterable<Object> getValues()", "class_method_signature": "Quintuple.getValues()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/datastructures/tuples/Quintuple.java"}, "focal_method": {"identifier": "mapSecond", "parameters": "(UnaryFunction<S, A> function)", "modifiers": "@Override public", "return": "Quintuple<R, A, T, U, V>", "body": "@Override public <A> Quintuple<R, A, T, U, V> mapSecond(UnaryFunction<S, A> function) {\n        return quintuple(getFirst(), function.call(getSecond()), getThird(), getFourth(), getFifth());\n    }", "signature": "Quintuple<R, A, T, U, V> mapSecond(UnaryFunction<S, A> function)", "full_signature": "@Override public Quintuple<R, A, T, U, V> mapSecond(UnaryFunction<S, A> function)", "class_method_signature": "Quintuple.mapSecond(UnaryFunction<S, A> function)", "testcase": false, "constructor": false, "invocations": ["quintuple", "getFirst", "call", "getSecond", "getThird", "getFourth", "getFifth"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}