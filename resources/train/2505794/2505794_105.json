{"test_class": {"identifier": "IntegerRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/datastructures/IntegerRangeTest.java"}, "test_case": {"identifier": "shouldReturnFalseIfTheSpecifiedIntegerIsBetweenStartAndEndButDoesNotLieOnAStepPoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnFalseIfTheSpecifiedIntegerIsBetweenStartAndEndButDoesNotLieOnAStepPoint() throws Exception {\n        // Given\n        Range<Integer> range = new IntegerRange(0, 10, 3);\n\n        // When\n        Boolean contained = range.contains(4);\n\n        // Then\n        assertThat(contained, is(false));\n    }", "signature": "void shouldReturnFalseIfTheSpecifiedIntegerIsBetweenStartAndEndButDoesNotLieOnAStepPoint()", "full_signature": "@Test public void shouldReturnFalseIfTheSpecifiedIntegerIsBetweenStartAndEndButDoesNotLieOnAStepPoint()", "class_method_signature": "IntegerRangeTest.shouldReturnFalseIfTheSpecifiedIntegerIsBetweenStartAndEndButDoesNotLieOnAStepPoint()", "testcase": true, "constructor": false, "invocations": ["contains", "assertThat", "is"]}, "focal_class": {"identifier": "IntegerRange", "superclass": "", "interfaces": "implements Range<Integer>", "fields": [{"original_string": "private final Integer start;", "modifier": "private final", "type": "Integer", "declarator": "start", "var_name": "start"}, {"original_string": "private final Integer end;", "modifier": "private final", "type": "Integer", "declarator": "end", "var_name": "end"}, {"original_string": "private final Integer step;", "modifier": "private final", "type": "Integer", "declarator": "step", "var_name": "step"}], "methods": [{"identifier": "IntegerRange", "parameters": "(Integer start, Integer end)", "modifiers": "public", "return": "", "signature": " IntegerRange(Integer start, Integer end)", "full_signature": "public  IntegerRange(Integer start, Integer end)", "class_method_signature": "IntegerRange.IntegerRange(Integer start, Integer end)", "testcase": false, "constructor": true}, {"identifier": "IntegerRange", "parameters": "(Integer start, Integer end, Integer step)", "modifiers": "public", "return": "", "signature": " IntegerRange(Integer start, Integer end, Integer step)", "full_signature": "public  IntegerRange(Integer start, Integer end, Integer step)", "class_method_signature": "IntegerRange.IntegerRange(Integer start, Integer end, Integer step)", "testcase": false, "constructor": true}, {"identifier": "contains", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object other)", "full_signature": "@Override public boolean contains(Object other)", "class_method_signature": "IntegerRange.contains(Object other)", "testcase": false, "constructor": false}, {"identifier": "getStart", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getStart()", "full_signature": "@Override public Integer getStart()", "class_method_signature": "IntegerRange.getStart()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getEnd()", "full_signature": "@Override public Integer getEnd()", "class_method_signature": "IntegerRange.getEnd()", "testcase": false, "constructor": false}, {"identifier": "getStep", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getStep()", "full_signature": "@Override public Integer getStep()", "class_method_signature": "IntegerRange.getStep()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Integer>", "signature": "Iterator<Integer> iterator()", "full_signature": "@Override public Iterator<Integer> iterator()", "class_method_signature": "IntegerRange.iterator()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/datastructures/IntegerRange.java"}, "focal_method": {"identifier": "contains", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean contains(Object other) {\n        if (other instanceof Integer) {\n            int valueToFind = (Integer) other;\n            for (int valueInRange : this) {\n                if (valueInRange == valueToFind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }", "signature": "boolean contains(Object other)", "full_signature": "@Override public boolean contains(Object other)", "class_method_signature": "IntegerRange.contains(Object other)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}