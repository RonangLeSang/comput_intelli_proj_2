{"test_class": {"identifier": "IteratorsTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/IteratorsTest.java"}, "test_case": {"identifier": "shouldReturnAFunctionFromIterableToIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnAFunctionFromIterableToIterator() {\n        // Given\n        Iterable<String> iterable = iterableWith(\"1\", \"2\", \"3\");\n\n        // When\n        Iterator<? extends String> firstIterator = fromIterableToIterator(String.class).call(iterable);\n        Iterator<? extends String> secondIterator = fromIterableToIterator(String.class).call(iterable);\n\n        // Then\n        assertThat(firstIterator.next(), is(\"1\"));\n        assertThat(secondIterator.next(), is(\"1\"));\n        assertThat(secondIterator.next(), is(\"2\"));\n        assertThat(firstIterator.next(), is(\"2\"));\n        assertThat(firstIterator.next(), is(\"3\"));\n        assertThat(secondIterator.next(), is(\"3\"));\n    }", "signature": "void shouldReturnAFunctionFromIterableToIterator()", "full_signature": "@Test public void shouldReturnAFunctionFromIterableToIterator()", "class_method_signature": "IteratorsTest.shouldReturnAFunctionFromIterableToIterator()", "testcase": true, "constructor": false, "invocations": ["iterableWith", "call", "fromIterableToIterator", "call", "fromIterableToIterator", "assertThat", "next", "is", "assertThat", "next", "is", "assertThat", "next", "is", "assertThat", "next", "is", "assertThat", "next", "is", "assertThat", "next", "is"]}, "focal_class": {"identifier": "Iterators", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Iterators", "parameters": "()", "modifiers": "private", "return": "", "signature": " Iterators()", "full_signature": "private  Iterators()", "class_method_signature": "Iterators.Iterators()", "testcase": false, "constructor": true}, {"identifier": "emptyIterator", "parameters": "()", "modifiers": "public static", "return": "Iterator<T>", "signature": "Iterator<T> emptyIterator()", "full_signature": "public static Iterator<T> emptyIterator()", "class_method_signature": "Iterators.emptyIterator()", "testcase": false, "constructor": false}, {"identifier": "asIterable", "parameters": "(Iterator<T> iterator)", "modifiers": "public static", "return": "Iterable<T>", "signature": "Iterable<T> asIterable(Iterator<T> iterator)", "full_signature": "public static Iterable<T> asIterable(Iterator<T> iterator)", "class_method_signature": "Iterators.asIterable(Iterator<T> iterator)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(Iterator<? extends T> iterator)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asList(Iterator<? extends T> iterator)", "full_signature": "public static List<T> asList(Iterator<? extends T> iterator)", "class_method_signature": "Iterators.asList(Iterator<? extends T> iterator)", "testcase": false, "constructor": false}, {"identifier": "asSet", "parameters": "(Iterator<? extends T> iterator)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> asSet(Iterator<? extends T> iterator)", "full_signature": "public static Set<T> asSet(Iterator<? extends T> iterator)", "class_method_signature": "Iterators.asSet(Iterator<? extends T> iterator)", "testcase": false, "constructor": false}, {"identifier": "asMultiset", "parameters": "(Iterator<? extends T> iterator)", "modifiers": "public static", "return": "Multiset<T>", "signature": "Multiset<T> asMultiset(Iterator<? extends T> iterator)", "full_signature": "public static Multiset<T> asMultiset(Iterator<? extends T> iterator)", "class_method_signature": "Iterators.asMultiset(Iterator<? extends T> iterator)", "testcase": false, "constructor": false}, {"identifier": "fromIterableToIterator", "parameters": "()", "modifiers": "public static", "return": "UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>>", "signature": "UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>> fromIterableToIterator()", "full_signature": "public static UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>> fromIterableToIterator()", "class_method_signature": "Iterators.fromIterableToIterator()", "testcase": false, "constructor": false}, {"identifier": "fromIterableToIterator", "parameters": "(Class<T> ofKlass)", "modifiers": "public static", "return": "UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>>", "signature": "UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>> fromIterableToIterator(Class<T> ofKlass)", "full_signature": "public static UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>> fromIterableToIterator(Class<T> ofKlass)", "class_method_signature": "Iterators.fromIterableToIterator(Class<T> ofKlass)", "testcase": false, "constructor": false}, {"identifier": "fromIterableToIteratorKeepingNull", "parameters": "()", "modifiers": "public static", "return": "UnaryFunction<Iterable<? extends T>, Iterator<? extends T>>", "signature": "UnaryFunction<Iterable<? extends T>, Iterator<? extends T>> fromIterableToIteratorKeepingNull()", "full_signature": "public static UnaryFunction<Iterable<? extends T>, Iterator<? extends T>> fromIterableToIteratorKeepingNull()", "class_method_signature": "Iterators.fromIterableToIteratorKeepingNull()", "testcase": false, "constructor": false}, {"identifier": "fromIterableToIteratorKeepingNull", "parameters": "(Class<T> ofKlass)", "modifiers": "public static", "return": "UnaryFunction<Iterable<? extends T>, Iterator<? extends T>>", "signature": "UnaryFunction<Iterable<? extends T>, Iterator<? extends T>> fromIterableToIteratorKeepingNull(Class<T> ofKlass)", "full_signature": "public static UnaryFunction<Iterable<? extends T>, Iterator<? extends T>> fromIterableToIteratorKeepingNull(Class<T> ofKlass)", "class_method_signature": "Iterators.fromIterableToIteratorKeepingNull(Class<T> ofKlass)", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/Iterators.java"}, "focal_method": {"identifier": "fromIterableToIterator", "parameters": "()", "modifiers": "public static", "return": "UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>>", "body": "public static <T> UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>> fromIterableToIterator() {\n        return new UnaryFunction<Iterable<? extends T>, Iterator<? extends T>>() {\n            public Iterator<? extends T> call(Iterable<? extends T> iterable) {\n                return iterable.iterator();\n            }\n        };\n    }", "signature": "UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>> fromIterableToIterator()", "full_signature": "public static UnaryFunction<? super Iterable<? extends T>, Iterator<? extends T>> fromIterableToIterator()", "class_method_signature": "Iterators.fromIterableToIterator()", "testcase": false, "constructor": false, "invocations": ["iterator"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}