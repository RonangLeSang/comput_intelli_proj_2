{"test_class": {"identifier": "AccumulatorsTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/AccumulatorsTest.java"}, "test_case": {"identifier": "shouldReturnAnAccumulatorThatMultipliesTheSuppliedAccumulatorValueByTheSuppliedFloatInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnAnAccumulatorThatMultipliesTheSuppliedAccumulatorValueByTheSuppliedFloatInput() throws Exception {\n        // Given\n        Reducer<Float, Float> floatMultiplicationAccumulator = Accumulators.floatMultiplicationAccumulator();\n\n        // When\n        Float result = floatMultiplicationAccumulator.accumulate(2.5F, 3.2F);\n\n        // Then\n        assertThat(result.doubleValue(), is(closeTo(8.0F, 0.01)));\n    }", "signature": "void shouldReturnAnAccumulatorThatMultipliesTheSuppliedAccumulatorValueByTheSuppliedFloatInput()", "full_signature": "@Test public void shouldReturnAnAccumulatorThatMultipliesTheSuppliedAccumulatorValueByTheSuppliedFloatInput()", "class_method_signature": "AccumulatorsTest.shouldReturnAnAccumulatorThatMultipliesTheSuppliedAccumulatorValueByTheSuppliedFloatInput()", "testcase": true, "constructor": false, "invocations": ["floatMultiplicationAccumulator", "accumulate", "assertThat", "doubleValue", "is", "closeTo"]}, "focal_class": {"identifier": "Accumulators", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Accumulators", "parameters": "()", "modifiers": "private", "return": "", "signature": " Accumulators()", "full_signature": "private  Accumulators()", "class_method_signature": "Accumulators.Accumulators()", "testcase": false, "constructor": true}, {"identifier": "integerAdditionAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Integer, Integer>", "signature": "Reducer<Integer, Integer> integerAdditionAccumulator()", "full_signature": "public static Reducer<Integer, Integer> integerAdditionAccumulator()", "class_method_signature": "Accumulators.integerAdditionAccumulator()", "testcase": false, "constructor": false}, {"identifier": "longAdditionAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Long, Long>", "signature": "Reducer<Long, Long> longAdditionAccumulator()", "full_signature": "public static Reducer<Long, Long> longAdditionAccumulator()", "class_method_signature": "Accumulators.longAdditionAccumulator()", "testcase": false, "constructor": false}, {"identifier": "doubleAdditionAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Double, Double>", "signature": "Reducer<Double, Double> doubleAdditionAccumulator()", "full_signature": "public static Reducer<Double, Double> doubleAdditionAccumulator()", "class_method_signature": "Accumulators.doubleAdditionAccumulator()", "testcase": false, "constructor": false}, {"identifier": "floatAdditionAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Float, Float>", "signature": "Reducer<Float, Float> floatAdditionAccumulator()", "full_signature": "public static Reducer<Float, Float> floatAdditionAccumulator()", "class_method_signature": "Accumulators.floatAdditionAccumulator()", "testcase": false, "constructor": false}, {"identifier": "bigDecimalAdditionAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<BigDecimal, BigDecimal>", "signature": "Reducer<BigDecimal, BigDecimal> bigDecimalAdditionAccumulator()", "full_signature": "public static Reducer<BigDecimal, BigDecimal> bigDecimalAdditionAccumulator()", "class_method_signature": "Accumulators.bigDecimalAdditionAccumulator()", "testcase": false, "constructor": false}, {"identifier": "bigIntegerAdditionAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<BigInteger, BigInteger>", "signature": "Reducer<BigInteger, BigInteger> bigIntegerAdditionAccumulator()", "full_signature": "public static Reducer<BigInteger, BigInteger> bigIntegerAdditionAccumulator()", "class_method_signature": "Accumulators.bigIntegerAdditionAccumulator()", "testcase": false, "constructor": false}, {"identifier": "integerMultiplicationAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Integer, Integer>", "signature": "Reducer<Integer, Integer> integerMultiplicationAccumulator()", "full_signature": "public static Reducer<Integer, Integer> integerMultiplicationAccumulator()", "class_method_signature": "Accumulators.integerMultiplicationAccumulator()", "testcase": false, "constructor": false}, {"identifier": "longMultiplicationAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Long, Long>", "signature": "Reducer<Long, Long> longMultiplicationAccumulator()", "full_signature": "public static Reducer<Long, Long> longMultiplicationAccumulator()", "class_method_signature": "Accumulators.longMultiplicationAccumulator()", "testcase": false, "constructor": false}, {"identifier": "bigIntegerMultiplicationAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<BigInteger, BigInteger>", "signature": "Reducer<BigInteger, BigInteger> bigIntegerMultiplicationAccumulator()", "full_signature": "public static Reducer<BigInteger, BigInteger> bigIntegerMultiplicationAccumulator()", "class_method_signature": "Accumulators.bigIntegerMultiplicationAccumulator()", "testcase": false, "constructor": false}, {"identifier": "doubleMultiplicationAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Double, Double>", "signature": "Reducer<Double, Double> doubleMultiplicationAccumulator()", "full_signature": "public static Reducer<Double, Double> doubleMultiplicationAccumulator()", "class_method_signature": "Accumulators.doubleMultiplicationAccumulator()", "testcase": false, "constructor": false}, {"identifier": "floatMultiplicationAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Float, Float>", "signature": "Reducer<Float, Float> floatMultiplicationAccumulator()", "full_signature": "public static Reducer<Float, Float> floatMultiplicationAccumulator()", "class_method_signature": "Accumulators.floatMultiplicationAccumulator()", "testcase": false, "constructor": false}, {"identifier": "bigDecimalMultiplicationAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<BigDecimal, BigDecimal>", "signature": "Reducer<BigDecimal, BigDecimal> bigDecimalMultiplicationAccumulator()", "full_signature": "public static Reducer<BigDecimal, BigDecimal> bigDecimalMultiplicationAccumulator()", "class_method_signature": "Accumulators.bigDecimalMultiplicationAccumulator()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/Accumulators.java"}, "focal_method": {"identifier": "floatMultiplicationAccumulator", "parameters": "()", "modifiers": "public static", "return": "Reducer<Float, Float>", "body": "public static Reducer<Float, Float> floatMultiplicationAccumulator() {\n        return new Reducer<Float, Float>() {\n            @Override public Float accumulate(Float accumulator, Float element) {\n                return accumulator * element;\n            }\n        };\n    }", "signature": "Reducer<Float, Float> floatMultiplicationAccumulator()", "full_signature": "public static Reducer<Float, Float> floatMultiplicationAccumulator()", "class_method_signature": "Accumulators.floatMultiplicationAccumulator()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}