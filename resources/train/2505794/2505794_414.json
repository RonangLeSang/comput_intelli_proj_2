{"test_class": {"identifier": "ComprehensionIteratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/iterators/ComprehensionIteratorTest.java"}, "test_case": {"identifier": "shouldIncludeTheMappingFunctionInTheToStringRepresentation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldIncludeTheMappingFunctionInTheToStringRepresentation() throws Exception {\n        // Given\n        UnaryFunction<Integer, Integer> mapper = new UnaryFunction<Integer, Integer>() {\n            @Override public Integer call(Integer integer) {\n                throw new NotImplementedException();\n            }\n\n            @Override public String toString() {\n                return \"some-mapping-function\";\n            }\n        };\n        Iterator<Integer> input = listWith(1, 2, 3).iterator();\n        Predicate<Integer> predicate = Predicates.alwaysTrue();\n\n        ComprehensionIterator<Integer, Integer> iterator =\n                new ComprehensionIterator<Integer, Integer>(mapper, input, listWith(predicate));\n\n        // When\n        String toString = iterator.toString();\n\n        // Then\n        assertThat(toString, containsString(\"some-mapping-function\"));\n    }", "signature": "void shouldIncludeTheMappingFunctionInTheToStringRepresentation()", "full_signature": "@Test public void shouldIncludeTheMappingFunctionInTheToStringRepresentation()", "class_method_signature": "ComprehensionIteratorTest.shouldIncludeTheMappingFunctionInTheToStringRepresentation()", "testcase": true, "constructor": false, "invocations": ["iterator", "listWith", "alwaysTrue", "listWith", "toString", "assertThat", "containsString"]}, "focal_class": {"identifier": "ComprehensionIterator", "superclass": "extends CachingIterator<T>", "interfaces": "", "fields": [{"original_string": "private UnaryFunction<? super S, T> mapper;", "modifier": "private", "type": "UnaryFunction<? super S, T>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private Iterator<? extends S> iterator;", "modifier": "private", "type": "Iterator<? extends S>", "declarator": "iterator", "var_name": "iterator"}, {"original_string": "private Iterable<? extends UnaryPredicate<? super S>> predicates;", "modifier": "private", "type": "Iterable<? extends UnaryPredicate<? super S>>", "declarator": "predicates", "var_name": "predicates"}], "methods": [{"identifier": "ComprehensionIterator", "parameters": "(\n            UnaryFunction<? super S, T> mapper,\n            Iterator<S> iterator,\n            Iterable<? extends UnaryPredicate<? super S>> predicates)", "modifiers": "public", "return": "", "signature": " ComprehensionIterator(\n            UnaryFunction<? super S, T> mapper,\n            Iterator<S> iterator,\n            Iterable<? extends UnaryPredicate<? super S>> predicates)", "full_signature": "public  ComprehensionIterator(\n            UnaryFunction<? super S, T> mapper,\n            Iterator<S> iterator,\n            Iterable<? extends UnaryPredicate<? super S>> predicates)", "class_method_signature": "ComprehensionIterator.ComprehensionIterator(\n            UnaryFunction<? super S, T> mapper,\n            Iterator<S> iterator,\n            Iterable<? extends UnaryPredicate<? super S>> predicates)", "testcase": false, "constructor": true}, {"identifier": "findNext", "parameters": "()", "modifiers": "@Override protected", "return": "T", "signature": "T findNext()", "full_signature": "@Override protected T findNext()", "class_method_signature": "ComprehensionIterator.findNext()", "testcase": false, "constructor": false}, {"identifier": "removeLast", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void removeLast()", "full_signature": "@Override protected void removeLast()", "class_method_signature": "ComprehensionIterator.removeLast()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ComprehensionIterator.toString()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/iterators/ComprehensionIterator.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override public String toString() {\n        return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n                .append(\"mapper\", mapper)\n                .append(\"iterator\", iterator)\n                .append(\"predicates\", predicates)\n                .toString();\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ComprehensionIterator.toString()", "testcase": false, "constructor": false, "invocations": ["toString", "append", "append", "append"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}