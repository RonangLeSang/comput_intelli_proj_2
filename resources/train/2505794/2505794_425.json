{"test_class": {"identifier": "CyclicIteratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/iterators/CyclicIteratorTest.java"}, "test_case": {"identifier": "shouldIncludeTheIteratorInTheToStringRepresentation", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void shouldIncludeTheIteratorInTheToStringRepresentation() throws Exception {\n        // Given\n        Iterator<String> input = (Iterator<String>) mock(Iterator.class);\n\n        when(input.toString()).thenReturn(\"the-iterator\");\n\n        Iterator<String> iterator = new CyclicIterator<String>(input);\n\n        // When\n        String toString = iterator.toString();\n\n        // Then\n        assertThat(toString, containsString(\"the-iterator\"));\n    }", "signature": "void shouldIncludeTheIteratorInTheToStringRepresentation()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void shouldIncludeTheIteratorInTheToStringRepresentation()", "class_method_signature": "CyclicIteratorTest.shouldIncludeTheIteratorInTheToStringRepresentation()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "toString", "toString", "assertThat", "containsString"]}, "focal_class": {"identifier": "CyclicIterator", "superclass": "", "interfaces": "implements Iterator<T>", "fields": [{"original_string": "private Iterator<? extends T> iterator;", "modifier": "private", "type": "Iterator<? extends T>", "declarator": "iterator", "var_name": "iterator"}, {"original_string": "private Integer numberOfTimesToRepeat;", "modifier": "private", "type": "Integer", "declarator": "numberOfTimesToRepeat", "var_name": "numberOfTimesToRepeat"}, {"original_string": "private List<T> elements = new ArrayList<T>();", "modifier": "private", "type": "List<T>", "declarator": "elements = new ArrayList<T>()", "var_name": "elements"}, {"original_string": "private int repeats = 0;", "modifier": "private", "type": "int", "declarator": "repeats = 0", "var_name": "repeats"}, {"original_string": "private int index = 0;", "modifier": "private", "type": "int", "declarator": "index = 0", "var_name": "index"}], "methods": [{"identifier": "CyclicIterator", "parameters": "(Iterator<? extends T> iterator)", "modifiers": "public", "return": "", "signature": " CyclicIterator(Iterator<? extends T> iterator)", "full_signature": "public  CyclicIterator(Iterator<? extends T> iterator)", "class_method_signature": "CyclicIterator.CyclicIterator(Iterator<? extends T> iterator)", "testcase": false, "constructor": true}, {"identifier": "CyclicIterator", "parameters": "(Iterator<? extends T> iterator, int numberOfTimesToRepeat)", "modifiers": "public", "return": "", "signature": " CyclicIterator(Iterator<? extends T> iterator, int numberOfTimesToRepeat)", "full_signature": "public  CyclicIterator(Iterator<? extends T> iterator, int numberOfTimesToRepeat)", "class_method_signature": "CyclicIterator.CyclicIterator(Iterator<? extends T> iterator, int numberOfTimesToRepeat)", "testcase": false, "constructor": true}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "CyclicIterator.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "CyclicIterator.next()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void remove()", "full_signature": "@Override public void remove()", "class_method_signature": "CyclicIterator.remove()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CyclicIterator.toString()", "testcase": false, "constructor": false}, {"identifier": "shouldCycleInfinitely", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldCycleInfinitely()", "full_signature": "private boolean shouldCycleInfinitely()", "class_method_signature": "CyclicIterator.shouldCycleInfinitely()", "testcase": false, "constructor": false}, {"identifier": "shouldContinueCyclingInfinitely", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldContinueCyclingInfinitely()", "full_signature": "private boolean shouldContinueCyclingInfinitely()", "class_method_signature": "CyclicIterator.shouldContinueCyclingInfinitely()", "testcase": false, "constructor": false}, {"identifier": "shouldNotCycleAtAll", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldNotCycleAtAll()", "full_signature": "private boolean shouldNotCycleAtAll()", "class_method_signature": "CyclicIterator.shouldNotCycleAtAll()", "testcase": false, "constructor": false}, {"identifier": "iteratorContainsMoreElements", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean iteratorContainsMoreElements()", "full_signature": "private boolean iteratorContainsMoreElements()", "class_method_signature": "CyclicIterator.iteratorContainsMoreElements()", "testcase": false, "constructor": false}, {"identifier": "elementsAreCached", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean elementsAreCached()", "full_signature": "private boolean elementsAreCached()", "class_method_signature": "CyclicIterator.elementsAreCached()", "testcase": false, "constructor": false}, {"identifier": "hasRepeatsRemaining", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasRepeatsRemaining()", "full_signature": "private boolean hasRepeatsRemaining()", "class_method_signature": "CyclicIterator.hasRepeatsRemaining()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/iterators/CyclicIterator.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override public String toString() {\n        return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n                .append(\"iterator\", iterator)\n                .append(\"numberOfTimesToRepeat\", numberOfTimesToRepeat == null ? \"infinite\" : numberOfTimesToRepeat)\n                .append(\"numberOfRepeatsCompleted\", repeats)\n                .append(\"indexInCurrentRepeat\", index)\n                .toString();\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CyclicIterator.toString()", "testcase": false, "constructor": false, "invocations": ["toString", "append", "append", "append", "append"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}