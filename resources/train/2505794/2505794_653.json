{"test_class": {"identifier": "BigDecimalsTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/BigDecimalsTest.java"}, "test_case": {"identifier": "returnsMapperFromLongToBigDecimal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void returnsMapperFromLongToBigDecimal() {\n        assertThat(fromLongToBigDecimal().map(123L), is(new BigDecimal(\"123\")));\n    }", "signature": "void returnsMapperFromLongToBigDecimal()", "full_signature": "@Test public void returnsMapperFromLongToBigDecimal()", "class_method_signature": "BigDecimalsTest.returnsMapperFromLongToBigDecimal()", "testcase": true, "constructor": false, "invocations": ["assertThat", "map", "fromLongToBigDecimal", "is"]}, "focal_class": {"identifier": "BigDecimals", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BigDecimals", "parameters": "()", "modifiers": "private", "return": "", "signature": " BigDecimals()", "full_signature": "private  BigDecimals()", "class_method_signature": "BigDecimals.BigDecimals()", "testcase": false, "constructor": true}, {"identifier": "fromStringToBigDecimal", "parameters": "()", "modifiers": "public static", "return": "Mapper<String, BigDecimal>", "signature": "Mapper<String, BigDecimal> fromStringToBigDecimal()", "full_signature": "public static Mapper<String, BigDecimal> fromStringToBigDecimal()", "class_method_signature": "BigDecimals.fromStringToBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "fromIntegerToBigDecimal", "parameters": "()", "modifiers": "public static", "return": "Mapper<Integer, BigDecimal>", "signature": "Mapper<Integer, BigDecimal> fromIntegerToBigDecimal()", "full_signature": "public static Mapper<Integer, BigDecimal> fromIntegerToBigDecimal()", "class_method_signature": "BigDecimals.fromIntegerToBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "fromLongToBigDecimal", "parameters": "()", "modifiers": "public static", "return": "Mapper<Long, BigDecimal>", "signature": "Mapper<Long, BigDecimal> fromLongToBigDecimal()", "full_signature": "public static Mapper<Long, BigDecimal> fromLongToBigDecimal()", "class_method_signature": "BigDecimals.fromLongToBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "fromBigIntegerToBigDecimal", "parameters": "()", "modifiers": "public static", "return": "Mapper<BigInteger, BigDecimal>", "signature": "Mapper<BigInteger, BigDecimal> fromBigIntegerToBigDecimal()", "full_signature": "public static Mapper<BigInteger, BigDecimal> fromBigIntegerToBigDecimal()", "class_method_signature": "BigDecimals.fromBigIntegerToBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "fromDoubleToBigDecimal", "parameters": "()", "modifiers": "public static", "return": "Mapper<Double, BigDecimal>", "signature": "Mapper<Double, BigDecimal> fromDoubleToBigDecimal()", "full_signature": "public static Mapper<Double, BigDecimal> fromDoubleToBigDecimal()", "class_method_signature": "BigDecimals.fromDoubleToBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "toPlainString", "parameters": "()", "modifiers": "public static", "return": "Mapper<BigDecimal, String>", "signature": "Mapper<BigDecimal, String> toPlainString()", "full_signature": "public static Mapper<BigDecimal, String> toPlainString()", "class_method_signature": "BigDecimals.toPlainString()", "testcase": false, "constructor": false}, {"identifier": "toScaled", "parameters": "(final Integer scale, final RoundingMode roundingMode)", "modifiers": "public static", "return": "Mapper<BigDecimal, BigDecimal>", "signature": "Mapper<BigDecimal, BigDecimal> toScaled(final Integer scale, final RoundingMode roundingMode)", "full_signature": "public static Mapper<BigDecimal, BigDecimal> toScaled(final Integer scale, final RoundingMode roundingMode)", "class_method_signature": "BigDecimals.toScaled(final Integer scale, final RoundingMode roundingMode)", "testcase": false, "constructor": false}, {"identifier": "bigDecimal", "parameters": "(Integer value)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal bigDecimal(Integer value)", "full_signature": "public static BigDecimal bigDecimal(Integer value)", "class_method_signature": "BigDecimals.bigDecimal(Integer value)", "testcase": false, "constructor": false}, {"identifier": "bigDecimal", "parameters": "(Long value)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal bigDecimal(Long value)", "full_signature": "public static BigDecimal bigDecimal(Long value)", "class_method_signature": "BigDecimals.bigDecimal(Long value)", "testcase": false, "constructor": false}, {"identifier": "bigDecimal", "parameters": "(Double value)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal bigDecimal(Double value)", "full_signature": "public static BigDecimal bigDecimal(Double value)", "class_method_signature": "BigDecimals.bigDecimal(Double value)", "testcase": false, "constructor": false}, {"identifier": "bigDecimal", "parameters": "(String value)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal bigDecimal(String value)", "full_signature": "public static BigDecimal bigDecimal(String value)", "class_method_signature": "BigDecimals.bigDecimal(String value)", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/BigDecimals.java"}, "focal_method": {"identifier": "fromLongToBigDecimal", "parameters": "()", "modifiers": "public static", "return": "Mapper<Long, BigDecimal>", "body": "public static Mapper<Long, BigDecimal> fromLongToBigDecimal() {\n        return new Mapper<Long, BigDecimal>() {\n            @Override public BigDecimal map(Long input) {\n                return new BigDecimal(input);\n            }\n        };\n    }", "signature": "Mapper<Long, BigDecimal> fromLongToBigDecimal()", "full_signature": "public static Mapper<Long, BigDecimal> fromLongToBigDecimal()", "class_method_signature": "BigDecimals.fromLongToBigDecimal()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}