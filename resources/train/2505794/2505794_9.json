{"test_class": {"identifier": "EitherMatchersTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-matchers/src/test/java/org/javafunk/funk/matchers/EitherMatchersTest.java"}, "test_case": {"identifier": "shouldProvideAdequateDescriptionWhenLeftWithSpecificValueIsAskedToDescribeItself", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldProvideAdequateDescriptionWhenLeftWithSpecificValueIsAskedToDescribeItself() throws Exception {\n        // Given\n        Matcher<? super Either<String, Integer>> matcher = left(\"value\");\n        StringDescription description = new StringDescription();\n\n        // When\n        matcher.describeTo(description);\n\n        // Then\n        assertThat(description.toString(), is(\"Either to be Left with value: \\\"value\\\"\"));\n    }", "signature": "void shouldProvideAdequateDescriptionWhenLeftWithSpecificValueIsAskedToDescribeItself()", "full_signature": "@Test public void shouldProvideAdequateDescriptionWhenLeftWithSpecificValueIsAskedToDescribeItself()", "class_method_signature": "EitherMatchersTest.shouldProvideAdequateDescriptionWhenLeftWithSpecificValueIsAskedToDescribeItself()", "testcase": true, "constructor": false, "invocations": ["left", "describeTo", "assertThat", "toString", "is"]}, "focal_class": {"identifier": "EitherMatchers", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "left", "parameters": "()", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "signature": "Matcher<? super Either<S, T>> left()", "full_signature": "public static Matcher<? super Either<S, T>> left()", "class_method_signature": "EitherMatchers.left()", "testcase": false, "constructor": false}, {"identifier": "left", "parameters": "(S leftValue)", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "signature": "Matcher<? super Either<S, T>> left(S leftValue)", "full_signature": "public static Matcher<? super Either<S, T>> left(S leftValue)", "class_method_signature": "EitherMatchers.left(S leftValue)", "testcase": false, "constructor": false}, {"identifier": "leftOver", "parameters": "(Class<S> leftClass, Class<T> rightClass)", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "signature": "Matcher<? super Either<S, T>> leftOver(Class<S> leftClass, Class<T> rightClass)", "full_signature": "public static Matcher<? super Either<S, T>> leftOver(Class<S> leftClass, Class<T> rightClass)", "class_method_signature": "EitherMatchers.leftOver(Class<S> leftClass, Class<T> rightClass)", "testcase": false, "constructor": false}, {"identifier": "leftOverValueAndType", "parameters": "(S leftValue, Class<T> rightClass)", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "signature": "Matcher<? super Either<S, T>> leftOverValueAndType(S leftValue, Class<T> rightClass)", "full_signature": "public static Matcher<? super Either<S, T>> leftOverValueAndType(S leftValue, Class<T> rightClass)", "class_method_signature": "EitherMatchers.leftOverValueAndType(S leftValue, Class<T> rightClass)", "testcase": false, "constructor": false}, {"identifier": "right", "parameters": "()", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "signature": "Matcher<? super Either<S, T>> right()", "full_signature": "public static Matcher<? super Either<S, T>> right()", "class_method_signature": "EitherMatchers.right()", "testcase": false, "constructor": false}, {"identifier": "right", "parameters": "(T rightValue)", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "signature": "Matcher<? super Either<S, T>> right(T rightValue)", "full_signature": "public static Matcher<? super Either<S, T>> right(T rightValue)", "class_method_signature": "EitherMatchers.right(T rightValue)", "testcase": false, "constructor": false}, {"identifier": "rightOver", "parameters": "(Class<S> leftClass, Class<T> rightClass)", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "signature": "Matcher<? super Either<S, T>> rightOver(Class<S> leftClass, Class<T> rightClass)", "full_signature": "public static Matcher<? super Either<S, T>> rightOver(Class<S> leftClass, Class<T> rightClass)", "class_method_signature": "EitherMatchers.rightOver(Class<S> leftClass, Class<T> rightClass)", "testcase": false, "constructor": false}, {"identifier": "rightOverTypeAndValue", "parameters": "(Class<S> leftClass, T rightValue)", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "signature": "Matcher<? super Either<S, T>> rightOverTypeAndValue(Class<S> leftClass, T rightValue)", "full_signature": "public static Matcher<? super Either<S, T>> rightOverTypeAndValue(Class<S> leftClass, T rightValue)", "class_method_signature": "EitherMatchers.rightOverTypeAndValue(Class<S> leftClass, T rightValue)", "testcase": false, "constructor": false}], "file": "funk-matchers/src/main/java/org/javafunk/funk/matchers/EitherMatchers.java"}, "focal_method": {"identifier": "left", "parameters": "()", "modifiers": "public static", "return": "Matcher<? super Either<S, T>>", "body": "public static <S, T> Matcher<? super Either<S, T>> left() {\n        return new EitherAnyLeftMatcher<S, T>();\n    }", "signature": "Matcher<? super Either<S, T>> left()", "full_signature": "public static Matcher<? super Either<S, T>> left()", "class_method_signature": "EitherMatchers.left()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}