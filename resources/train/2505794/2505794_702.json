{"test_class": {"identifier": "MapsTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/MapsTest.java"}, "test_case": {"identifier": "shouldStoreTheValueReturnedByTheMapperInTheMapIfTheKeyDoesntExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldStoreTheValueReturnedByTheMapperInTheMapIfTheKeyDoesntExist() {\n        // Given\n        Map<Integer, String> input = Literals.mapBuilderWithKeyValuePair(1, \"one\")\n                .andKeyValuePair(2, \"two\")\n                .andKeyValuePair(3, \"three\")\n                .build(HashMap.class);\n\n        // When\n        Maps.getOrAdd(input, 12, new Mapper<Integer, String>() {\n            @Override public String map(Integer integer) {\n                return integer < 10 ? \"lower value\" : \"higher value\";\n            }\n        });\n\n        // Then\n        assertThat(input.get(12), is(\"higher value\"));\n    }", "signature": "void shouldStoreTheValueReturnedByTheMapperInTheMapIfTheKeyDoesntExist()", "full_signature": "@Test public void shouldStoreTheValueReturnedByTheMapperInTheMapIfTheKeyDoesntExist()", "class_method_signature": "MapsTest.shouldStoreTheValueReturnedByTheMapperInTheMapIfTheKeyDoesntExist()", "testcase": true, "constructor": false, "invocations": ["build", "andKeyValuePair", "andKeyValuePair", "mapBuilderWithKeyValuePair", "getOrAdd", "assertThat", "get", "is"]}, "focal_class": {"identifier": "Maps", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Maps", "parameters": "()", "modifiers": "private", "return": "", "signature": " Maps()", "full_signature": "private  Maps()", "class_method_signature": "Maps.Maps()", "testcase": false, "constructor": true}, {"identifier": "getOrAdd", "parameters": "(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper)", "modifiers": "public static", "return": "V", "signature": "V getOrAdd(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper)", "full_signature": "public static V getOrAdd(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper)", "class_method_signature": "Maps.getOrAdd(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper)", "testcase": false, "constructor": false}, {"identifier": "getOrAdd", "parameters": "(Map<U, V> map, U key, final NullaryFunction<? extends V> factory)", "modifiers": "public static", "return": "V", "signature": "V getOrAdd(Map<U, V> map, U key, final NullaryFunction<? extends V> factory)", "full_signature": "public static V getOrAdd(Map<U, V> map, U key, final NullaryFunction<? extends V> factory)", "class_method_signature": "Maps.getOrAdd(Map<U, V> map, U key, final NullaryFunction<? extends V> factory)", "testcase": false, "constructor": false}, {"identifier": "toEntrySet", "parameters": "()", "modifiers": "public static", "return": "Mapper<? super Map<K, V>, Set<Map.Entry<K, V>>>", "signature": "Mapper<? super Map<K, V>, Set<Map.Entry<K, V>>> toEntrySet()", "full_signature": "public static Mapper<? super Map<K, V>, Set<Map.Entry<K, V>>> toEntrySet()", "class_method_signature": "Maps.toEntrySet()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/Maps.java"}, "focal_method": {"identifier": "getOrAdd", "parameters": "(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper)", "modifiers": "public static", "return": "V", "body": "public static <U, V> V getOrAdd(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper) {\n        if (map.containsKey(key)) {\n            return map.get(key);\n        } else {\n            V newValue = mapper.call(key);\n            map.put(key, newValue);\n            return newValue;\n        }\n    }", "signature": "V getOrAdd(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper)", "full_signature": "public static V getOrAdd(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper)", "class_method_signature": "Maps.getOrAdd(Map<U, V> map, U key, UnaryFunction<? super U, ? extends V> mapper)", "testcase": false, "constructor": false, "invocations": ["containsKey", "get", "call", "put"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}