{"test_class": {"identifier": "PairTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/datastructures/tuples/PairTest.java"}, "test_case": {"identifier": "shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond() throws Exception {\n        // Given\n        Pair<Integer, String> pair = tuple(5, \"Five\");\n        UnaryFunction<String, Integer> function = null;\n\n        // When\n        pair.mapSecond(function);\n\n        // Then a NullPointerException is thrown\n    }", "signature": "void shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond()", "full_signature": "@Test(expected = NullPointerException.class) public void shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond()", "class_method_signature": "PairTest.shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond()", "testcase": true, "constructor": false, "invocations": ["tuple", "mapSecond"]}, "focal_class": {"identifier": "Pair", "superclass": "extends Single<R>", "interfaces": "implements Second<S>,\n                   MappableSecond<S, Pair<R, ?>>", "fields": [{"original_string": "private S second;", "modifier": "private", "type": "S", "declarator": "second", "var_name": "second"}], "methods": [{"identifier": "pair", "parameters": "(R first, S second)", "modifiers": "public static", "return": "Pair<R, S>", "signature": "Pair<R, S> pair(R first, S second)", "full_signature": "public static Pair<R, S> pair(R first, S second)", "class_method_signature": "Pair.pair(R first, S second)", "testcase": false, "constructor": false}, {"identifier": "Pair", "parameters": "(R first, S second)", "modifiers": "public", "return": "", "signature": " Pair(R first, S second)", "full_signature": "public  Pair(R first, S second)", "class_method_signature": "Pair.Pair(R first, S second)", "testcase": false, "constructor": true}, {"identifier": "getSecond", "parameters": "()", "modifiers": "@Override public", "return": "S", "signature": "S getSecond()", "full_signature": "@Override public S getSecond()", "class_method_signature": "Pair.getSecond()", "testcase": false, "constructor": false}, {"identifier": "mapFirst", "parameters": "(UnaryFunction<R, A> function)", "modifiers": "@Override public", "return": "Pair<A, S>", "signature": "Pair<A, S> mapFirst(UnaryFunction<R, A> function)", "full_signature": "@Override public Pair<A, S> mapFirst(UnaryFunction<R, A> function)", "class_method_signature": "Pair.mapFirst(UnaryFunction<R, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapSecond", "parameters": "(UnaryFunction<S, A> function)", "modifiers": "@Override public", "return": "Pair<R, A>", "signature": "Pair<R, A> mapSecond(UnaryFunction<S, A> function)", "full_signature": "@Override public Pair<R, A> mapSecond(UnaryFunction<S, A> function)", "class_method_signature": "Pair.mapSecond(UnaryFunction<S, A> function)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Object>", "signature": "Iterable<Object> getValues()", "full_signature": "@Override public Iterable<Object> getValues()", "class_method_signature": "Pair.getValues()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/datastructures/tuples/Pair.java"}, "focal_method": {"identifier": "mapSecond", "parameters": "(UnaryFunction<S, A> function)", "modifiers": "@Override public", "return": "Pair<R, A>", "body": "@Override public <A> Pair<R, A> mapSecond(UnaryFunction<S, A> function) {\n        return pair(getFirst(), function.call(getSecond()));\n    }", "signature": "Pair<R, A> mapSecond(UnaryFunction<S, A> function)", "full_signature": "@Override public Pair<R, A> mapSecond(UnaryFunction<S, A> function)", "class_method_signature": "Pair.mapSecond(UnaryFunction<S, A> function)", "testcase": false, "constructor": false, "invocations": ["pair", "getFirst", "call", "getSecond"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}