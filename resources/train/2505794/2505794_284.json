{"test_class": {"identifier": "OctupleTest", "superclass": "", "interfaces": "", "fields": [], "file": "funk-core/src/test/java/org/javafunk/funk/datastructures/tuples/OctupleTest.java"}, "test_case": {"identifier": "shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond() throws Exception {\n        // Given\n        Octuple<Integer, String, Boolean, Double, Long, Name, Colour, Age> octuple =\n                tuple(5, \"Five\", true, 3.6, 2L, name(\"Ellen\"), colour(\"Green\"), age(20));\n        UnaryFunction<String, Integer> function = null;\n\n        // When\n        octuple.mapSecond(function);\n\n        // Then a NullPointerException is thrown\n    }", "signature": "void shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond()", "full_signature": "@Test(expected = NullPointerException.class) public void shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond()", "class_method_signature": "OctupleTest.shouldThrowNullPointerExceptionIfNullUnaryFunctionPassedToMapSecond()", "testcase": true, "constructor": false, "invocations": ["tuple", "name", "colour", "age", "mapSecond"]}, "focal_class": {"identifier": "Octuple", "superclass": "extends Septuple<R, S, T, U, V, W, X>", "interfaces": "implements Eighth<Y>,\n                   MappableEighth<Y, Octuple<R, S, T, U, V, W, X, ?>>", "fields": [{"original_string": "private final Y eighth;", "modifier": "private final", "type": "Y", "declarator": "eighth", "var_name": "eighth"}], "methods": [{"identifier": "octuple", "parameters": "(\n            R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth)", "modifiers": "public static", "return": "Octuple<R, S, T, U, V, W, X, Y>", "signature": "Octuple<R, S, T, U, V, W, X, Y> octuple(\n            R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth)", "full_signature": "public static Octuple<R, S, T, U, V, W, X, Y> octuple(\n            R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth)", "class_method_signature": "Octuple.octuple(\n            R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth)", "testcase": false, "constructor": false}, {"identifier": "Octuple", "parameters": "(R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth)", "modifiers": "public", "return": "", "signature": " Octuple(R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth)", "full_signature": "public  Octuple(R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth)", "class_method_signature": "Octuple.Octuple(R first, S second, T third, U fourth, V fifth, W sixth, X seventh, Y eighth)", "testcase": false, "constructor": true}, {"identifier": "getEighth", "parameters": "()", "modifiers": "@Override public", "return": "Y", "signature": "Y getEighth()", "full_signature": "@Override public Y getEighth()", "class_method_signature": "Octuple.getEighth()", "testcase": false, "constructor": false}, {"identifier": "mapFirst", "parameters": "(UnaryFunction<R, A> function)", "modifiers": "@Override public", "return": "Octuple<A, S, T, U, V, W, X, Y>", "signature": "Octuple<A, S, T, U, V, W, X, Y> mapFirst(UnaryFunction<R, A> function)", "full_signature": "@Override public Octuple<A, S, T, U, V, W, X, Y> mapFirst(UnaryFunction<R, A> function)", "class_method_signature": "Octuple.mapFirst(UnaryFunction<R, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapSecond", "parameters": "(UnaryFunction<S, A> function)", "modifiers": "@Override public", "return": "Octuple<R, A, T, U, V, W, X, Y>", "signature": "Octuple<R, A, T, U, V, W, X, Y> mapSecond(UnaryFunction<S, A> function)", "full_signature": "@Override public Octuple<R, A, T, U, V, W, X, Y> mapSecond(UnaryFunction<S, A> function)", "class_method_signature": "Octuple.mapSecond(UnaryFunction<S, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapThird", "parameters": "(UnaryFunction<T, A> function)", "modifiers": "@Override public", "return": "Octuple<R, S, A, U, V, W, X, Y>", "signature": "Octuple<R, S, A, U, V, W, X, Y> mapThird(UnaryFunction<T, A> function)", "full_signature": "@Override public Octuple<R, S, A, U, V, W, X, Y> mapThird(UnaryFunction<T, A> function)", "class_method_signature": "Octuple.mapThird(UnaryFunction<T, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapFourth", "parameters": "(UnaryFunction<U, A> function)", "modifiers": "@Override public", "return": "Octuple<R, S, T, A, V, W, X, Y>", "signature": "Octuple<R, S, T, A, V, W, X, Y> mapFourth(UnaryFunction<U, A> function)", "full_signature": "@Override public Octuple<R, S, T, A, V, W, X, Y> mapFourth(UnaryFunction<U, A> function)", "class_method_signature": "Octuple.mapFourth(UnaryFunction<U, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapFifth", "parameters": "(UnaryFunction<V, A> function)", "modifiers": "@Override public", "return": "Octuple<R, S, T, U, A, W, X, Y>", "signature": "Octuple<R, S, T, U, A, W, X, Y> mapFifth(UnaryFunction<V, A> function)", "full_signature": "@Override public Octuple<R, S, T, U, A, W, X, Y> mapFifth(UnaryFunction<V, A> function)", "class_method_signature": "Octuple.mapFifth(UnaryFunction<V, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapSixth", "parameters": "(UnaryFunction<W, A> function)", "modifiers": "@Override public", "return": "Octuple<R, S, T, U, V, A, X, Y>", "signature": "Octuple<R, S, T, U, V, A, X, Y> mapSixth(UnaryFunction<W, A> function)", "full_signature": "@Override public Octuple<R, S, T, U, V, A, X, Y> mapSixth(UnaryFunction<W, A> function)", "class_method_signature": "Octuple.mapSixth(UnaryFunction<W, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapSeventh", "parameters": "(UnaryFunction<X, A> function)", "modifiers": "@Override public", "return": "Octuple<R, S, T, U, V, W, A, Y>", "signature": "Octuple<R, S, T, U, V, W, A, Y> mapSeventh(UnaryFunction<X, A> function)", "full_signature": "@Override public Octuple<R, S, T, U, V, W, A, Y> mapSeventh(UnaryFunction<X, A> function)", "class_method_signature": "Octuple.mapSeventh(UnaryFunction<X, A> function)", "testcase": false, "constructor": false}, {"identifier": "mapEighth", "parameters": "(UnaryFunction<Y, A> function)", "modifiers": "@Override public", "return": "Octuple<R, S, T, U, V, W, X, A>", "signature": "Octuple<R, S, T, U, V, W, X, A> mapEighth(UnaryFunction<Y, A> function)", "full_signature": "@Override public Octuple<R, S, T, U, V, W, X, A> mapEighth(UnaryFunction<Y, A> function)", "class_method_signature": "Octuple.mapEighth(UnaryFunction<Y, A> function)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Object>", "signature": "Iterable<Object> getValues()", "full_signature": "@Override public Iterable<Object> getValues()", "class_method_signature": "Octuple.getValues()", "testcase": false, "constructor": false}], "file": "funk-core/src/main/java/org/javafunk/funk/datastructures/tuples/Octuple.java"}, "focal_method": {"identifier": "mapSecond", "parameters": "(UnaryFunction<S, A> function)", "modifiers": "@Override public", "return": "Octuple<R, A, T, U, V, W, X, Y>", "body": "@Override public <A> Octuple<R, A, T, U, V, W, X, Y> mapSecond(UnaryFunction<S, A> function) {\n        return octuple(getFirst(), function.call(getSecond()), getThird(), getFourth(), getFifth(), getSixth(), getSeventh(), getEighth());\n    }", "signature": "Octuple<R, A, T, U, V, W, X, Y> mapSecond(UnaryFunction<S, A> function)", "full_signature": "@Override public Octuple<R, A, T, U, V, W, X, Y> mapSecond(UnaryFunction<S, A> function)", "class_method_signature": "Octuple.mapSecond(UnaryFunction<S, A> function)", "testcase": false, "constructor": false, "invocations": ["octuple", "getFirst", "call", "getSecond", "getThird", "getFourth", "getFifth", "getSixth", "getSeventh", "getEighth"]}, "repository": {"repo_id": 2505794, "url": "https://github.com/javafunk/funk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 33, "size": 13785, "license": "licensed"}}