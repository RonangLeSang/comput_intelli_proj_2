{"test_class": {"identifier": "ShipTypeAndSizeAnalysisTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JUnit4Mockery context;", "modifier": "private", "type": "JUnit4Mockery", "declarator": "context", "var_name": "context"}, {"original_string": "private long testCellId = 24930669189L;", "modifier": "private", "type": "long", "declarator": "testCellId = 24930669189L", "var_name": "testCellId"}, {"original_string": "final AisPacket msg5 = AisPacket.from(\n        \"$PGHP,1,2014,4,10,13,30,29,165,219,,2190067,1,28*22\\r\\n\" +\n        \"!BSVDM,2,1,1,A,53@ng7P1uN6PuLpl000I8TLN1=T@ITDp0000000u1Pr844@P07PSiBQ1,0*7B\\r\\n\" +\n        \"!BSVDM,2,2,1,A,CcAVCTj0EP00000,2*53\");", "modifier": "final", "type": "AisPacket", "declarator": "msg5 = AisPacket.from(\n        \"$PGHP,1,2014,4,10,13,30,29,165,219,,2190067,1,28*22\\r\\n\" +\n        \"!BSVDM,2,1,1,A,53@ng7P1uN6PuLpl000I8TLN1=T@ITDp0000000u1Pr844@P07PSiBQ1,0*7B\\r\\n\" +\n        \"!BSVDM,2,2,1,A,CcAVCTj0EP00000,2*53\")", "var_name": "msg5"}, {"original_string": "private Configuration configuration;", "modifier": "private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private EventEmittingTracker trackingService;", "modifier": "private", "type": "EventEmittingTracker", "declarator": "trackingService", "var_name": "trackingService"}, {"original_string": "private AppStatisticsService statisticsService;", "modifier": "private", "type": "AppStatisticsService", "declarator": "statisticsService", "var_name": "statisticsService"}, {"original_string": "private StatisticDataRepository statisticsRepository;", "modifier": "private", "type": "StatisticDataRepository", "declarator": "statisticsRepository", "var_name": "statisticsRepository"}, {"original_string": "private EventRepository eventRepository;", "modifier": "private", "type": "EventRepository", "declarator": "eventRepository", "var_name": "eventRepository"}, {"original_string": "private ShipTypeAndSizeStatisticData statistics1, statistics2;", "modifier": "private", "type": "ShipTypeAndSizeStatisticData", "declarator": "statistics1", "var_name": "statistics1"}, {"original_string": "private BehaviourManager behaviourManager;", "modifier": "private", "type": "BehaviourManager", "declarator": "behaviourManager", "var_name": "behaviourManager"}], "file": "ais-ab-analyzer/src/test/java/dk/dma/ais/abnormal/analyzer/analysis/ShipTypeAndSizeAnalysisTest.java"}, "test_case": {"identifier": "testNoEventIsRaisedForNormalBehaviour", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoEventIsRaisedForNormalBehaviour() {\n        // Create test data\n        Track track = new Track(219000606);\n        track.setProperty(Track.CELL_ID, 123L);\n        track.update(msg5);\n\n        assertEquals(61, track.getShipType().intValue());\n        assertEquals(70, track.getVesselLength().intValue());\n        assertTrue(statistics2.getValue(Categorizer.mapShipTypeToCategory(track.getShipType()) - 1, Categorizer.mapShipLengthToCategory(track.getVesselLength()) - 1, \"shipCount\") > 1000);\n\n        // These are needed to create an event object in the database:\n        track.update(1370589743L, Position.create(56, 12), 45.0f, 10.1f, 45.0f);\n\n        CellChangedEvent event = new CellChangedEvent(track, null);\n\n        // Create object under test\n        context.checking(new Expectations() {{\n            oneOf(behaviourManager).registerSubscriber(with(any(ShipTypeAndSizeAnalysis.class)));\n        }});\n        final ShipTypeAndSizeAnalysis analysis = new ShipTypeAndSizeAnalysis(configuration, statisticsService, statisticsRepository, trackingService, eventRepository, behaviourManager);\n\n        // Perform test - none of the required data are there\n        context.checking(new Expectations() {{\n            ignoring(statisticsService).incAnalysisStatistics(with(ShipTypeAndSizeAnalysis.class.getSimpleName()), with(any(String.class)));\n            oneOf(trackingService).registerSubscriber(analysis);\n            oneOf(statisticsRepository).getStatisticData(\"ShipTypeAndSizeStatistic\", 123L); will(returnValue(statistics2));\n            oneOf(behaviourManager).normalBehaviourDetected(ShipSizeOrTypeEvent.class, track);\n        }});\n        analysis.start();\n        analysis.onCellIdChanged(event);\n        context.assertIsSatisfied();\n    }", "signature": "void testNoEventIsRaisedForNormalBehaviour()", "full_signature": "@Test public void testNoEventIsRaisedForNormalBehaviour()", "class_method_signature": "ShipTypeAndSizeAnalysisTest.testNoEventIsRaisedForNormalBehaviour()", "testcase": true, "constructor": false, "invocations": ["setProperty", "update", "assertEquals", "intValue", "getShipType", "assertEquals", "intValue", "getVesselLength", "assertTrue", "getValue", "mapShipTypeToCategory", "getShipType", "mapShipLengthToCategory", "getVesselLength", "update", "create", "checking", "registerSubscriber", "oneOf", "with", "any", "checking", "incAnalysisStatistics", "ignoring", "with", "getSimpleName", "with", "any", "registerSubscriber", "oneOf", "getStatisticData", "oneOf", "will", "returnValue", "normalBehaviourDetected", "oneOf", "start", "onCellIdChanged", "assertIsSatisfied"]}, "focal_class": {"identifier": "ShipTypeAndSizeAnalysis", "superclass": "extends StatisticBasedAnalysis", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ShipTypeAndSizeAnalysis.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ShipTypeAndSizeAnalysis.class)", "var_name": "LOG"}, {"original_string": "private final AppStatisticsService statisticsService;", "modifier": "private final", "type": "AppStatisticsService", "declarator": "statisticsService", "var_name": "statisticsService"}, {"original_string": "private final int TOTAL_SHIP_COUNT_THRESHOLD;", "modifier": "private final", "type": "int", "declarator": "TOTAL_SHIP_COUNT_THRESHOLD", "var_name": "TOTAL_SHIP_COUNT_THRESHOLD"}, {"original_string": "private final float PD;", "modifier": "private final", "type": "float", "declarator": "PD", "var_name": "PD"}, {"original_string": "private final int SHIP_LENGTH_MIN;", "modifier": "private final", "type": "int", "declarator": "SHIP_LENGTH_MIN", "var_name": "SHIP_LENGTH_MIN"}], "methods": [{"identifier": "ShipTypeAndSizeAnalysis", "parameters": "(Configuration configuration, AppStatisticsService statisticsService, StatisticDataRepository statisticsRepository, EventEmittingTracker trackingService, EventRepository eventRepository, BehaviourManager behaviourManager)", "modifiers": "@Inject public", "return": "", "signature": " ShipTypeAndSizeAnalysis(Configuration configuration, AppStatisticsService statisticsService, StatisticDataRepository statisticsRepository, EventEmittingTracker trackingService, EventRepository eventRepository, BehaviourManager behaviourManager)", "full_signature": "@Inject public  ShipTypeAndSizeAnalysis(Configuration configuration, AppStatisticsService statisticsService, StatisticDataRepository statisticsRepository, EventEmittingTracker trackingService, EventRepository eventRepository, BehaviourManager behaviourManager)", "class_method_signature": "ShipTypeAndSizeAnalysis.ShipTypeAndSizeAnalysis(Configuration configuration, AppStatisticsService statisticsService, StatisticDataRepository statisticsRepository, EventEmittingTracker trackingService, EventRepository eventRepository, BehaviourManager behaviourManager)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ShipTypeAndSizeAnalysis.toString()", "testcase": false, "constructor": false}, {"identifier": "onCellIdChanged", "parameters": "(CellChangedEvent trackEvent)", "modifiers": "@AllowConcurrentEvents @Subscribe public", "return": "void", "signature": "void onCellIdChanged(CellChangedEvent trackEvent)", "full_signature": "@AllowConcurrentEvents @Subscribe public void onCellIdChanged(CellChangedEvent trackEvent)", "class_method_signature": "ShipTypeAndSizeAnalysis.onCellIdChanged(CellChangedEvent trackEvent)", "testcase": false, "constructor": false}, {"identifier": "onTrackStale", "parameters": "(TrackStaleEvent trackEvent)", "modifiers": "@AllowConcurrentEvents @Subscribe public", "return": "void", "signature": "void onTrackStale(TrackStaleEvent trackEvent)", "full_signature": "@AllowConcurrentEvents @Subscribe public void onTrackStale(TrackStaleEvent trackEvent)", "class_method_signature": "ShipTypeAndSizeAnalysis.onTrackStale(TrackStaleEvent trackEvent)", "testcase": false, "constructor": false}, {"identifier": "onAbnormalEventRaise", "parameters": "(AbnormalEventRaise behaviourEvent)", "modifiers": "@Subscribe public", "return": "void", "signature": "void onAbnormalEventRaise(AbnormalEventRaise behaviourEvent)", "full_signature": "@Subscribe public void onAbnormalEventRaise(AbnormalEventRaise behaviourEvent)", "class_method_signature": "ShipTypeAndSizeAnalysis.onAbnormalEventRaise(AbnormalEventRaise behaviourEvent)", "testcase": false, "constructor": false}, {"identifier": "onAbnormalEventMaintain", "parameters": "(AbnormalEventMaintain behaviourEvent)", "modifiers": "@Subscribe public", "return": "void", "signature": "void onAbnormalEventMaintain(AbnormalEventMaintain behaviourEvent)", "full_signature": "@Subscribe public void onAbnormalEventMaintain(AbnormalEventMaintain behaviourEvent)", "class_method_signature": "ShipTypeAndSizeAnalysis.onAbnormalEventMaintain(AbnormalEventMaintain behaviourEvent)", "testcase": false, "constructor": false}, {"identifier": "onAbnormalEventLower", "parameters": "(AbnormalEventLower behaviourEvent)", "modifiers": "@Subscribe public", "return": "void", "signature": "void onAbnormalEventLower(AbnormalEventLower behaviourEvent)", "full_signature": "@Subscribe public void onAbnormalEventLower(AbnormalEventLower behaviourEvent)", "class_method_signature": "ShipTypeAndSizeAnalysis.onAbnormalEventLower(AbnormalEventLower behaviourEvent)", "testcase": false, "constructor": false}, {"identifier": "isAbnormalCellForShipTypeAndSize", "parameters": "(Long cellId, int shipTypeKey, int shipSizeKey)", "modifiers": "", "return": "boolean", "signature": "boolean isAbnormalCellForShipTypeAndSize(Long cellId, int shipTypeKey, int shipSizeKey)", "full_signature": " boolean isAbnormalCellForShipTypeAndSize(Long cellId, int shipTypeKey, int shipSizeKey)", "class_method_signature": "ShipTypeAndSizeAnalysis.isAbnormalCellForShipTypeAndSize(Long cellId, int shipTypeKey, int shipSizeKey)", "testcase": false, "constructor": false}, {"identifier": "buildEvent", "parameters": "(Track track, Track... otherTracks)", "modifiers": "@Override protected", "return": "Event", "signature": "Event buildEvent(Track track, Track... otherTracks)", "full_signature": "@Override protected Event buildEvent(Track track, Track... otherTracks)", "class_method_signature": "ShipTypeAndSizeAnalysis.buildEvent(Track track, Track... otherTracks)", "testcase": false, "constructor": false}], "file": "ais-ab-analyzer/src/main/java/dk/dma/ais/abnormal/analyzer/analysis/ShipTypeAndSizeAnalysis.java"}, "focal_method": {"identifier": "onCellIdChanged", "parameters": "(CellChangedEvent trackEvent)", "modifiers": "@AllowConcurrentEvents @Subscribe public", "return": "void", "body": "@AllowConcurrentEvents\n    @Subscribe\n    public void onCellIdChanged(CellChangedEvent trackEvent) {\n        statisticsService.incAnalysisStatistics(getAnalysisName(), \"Events received\");\n\n        Track track = trackEvent.getTrack();\n\n        if (isClassB.test(track) || isUnknownTypeOrSize.test(track) || isFishingVessel.test(track) || isSmallVessel.test(track) || isSpecialCraft.test(track) || isEngagedInTowing.test(track)) {\n            return;\n        }\n\n        /* Skip analysis if track has been predicted forward for too long */\n        if (isLastAisTrackingReportTooOld(track, track.getTimeOfLastPositionReport())) {\n            LOG.debug(\"Skipping analysis: MMSI \" + track.getMmsi() + \" was predicted for too long.\");\n            return;\n        }\n\n        Long cellId = (Long) track.getProperty(Track.CELL_ID);\n        Integer shipType = track.getShipType();\n        Integer shipLength = track.getVesselLength();\n\n        if (cellId == null) {\n            statisticsService.incAnalysisStatistics(getAnalysisName(), \"Unknown mmsi\");\n            return;\n        }\n\n        if (shipType == null) {\n            statisticsService.incAnalysisStatistics(getAnalysisName(), \"Unknown ship type\");\n            return;\n        }\n\n        if (shipLength == null) {\n            statisticsService.incAnalysisStatistics(getAnalysisName(), \"Unknown ship length\");\n            return;\n        }\n\n        if (shipLength < SHIP_LENGTH_MIN) {\n            statisticsService.incAnalysisStatistics(getAnalysisName(), \"LOA < \" + SHIP_LENGTH_MIN);\n            return;\n        }\n\n        int shipTypeKey = Categorizer.mapShipTypeToCategory(shipType) - 1;\n        int shipLengthKey = Categorizer.mapShipLengthToCategory(shipLength) - 1;\n\n        if (isAbnormalCellForShipTypeAndSize(cellId, shipTypeKey, shipLengthKey)) {\n            getBehaviourManager().abnormalBehaviourDetected(ShipSizeOrTypeEvent.class, track);\n        } else {\n            getBehaviourManager().normalBehaviourDetected(ShipSizeOrTypeEvent.class, track);\n        }\n    }", "signature": "void onCellIdChanged(CellChangedEvent trackEvent)", "full_signature": "@AllowConcurrentEvents @Subscribe public void onCellIdChanged(CellChangedEvent trackEvent)", "class_method_signature": "ShipTypeAndSizeAnalysis.onCellIdChanged(CellChangedEvent trackEvent)", "testcase": false, "constructor": false, "invocations": ["incAnalysisStatistics", "getAnalysisName", "getTrack", "test", "test", "test", "test", "test", "test", "isLastAisTrackingReportTooOld", "getTimeOfLastPositionReport", "debug", "getMmsi", "getProperty", "getShipType", "getVesselLength", "incAnalysisStatistics", "getAnalysisName", "incAnalysisStatistics", "getAnalysisName", "incAnalysisStatistics", "getAnalysisName", "incAnalysisStatistics", "getAnalysisName", "mapShipTypeToCategory", "mapShipLengthToCategory", "isAbnormalCellForShipTypeAndSize", "abnormalBehaviourDetected", "getBehaviourManager", "normalBehaviourDetected", "getBehaviourManager"]}, "repository": {"repo_id": 14281911, "url": "https://github.com/dma-ais/AisAbnormal", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 21, "size": 7998, "license": "licensed"}}