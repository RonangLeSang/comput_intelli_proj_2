{"test_class": {"identifier": "SuddenSpeedChangeAnalysisTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JUnit4Mockery context;", "modifier": "private", "type": "JUnit4Mockery", "declarator": "context", "var_name": "context"}, {"original_string": "private Injector injector;", "modifier": "private", "type": "Injector", "declarator": "injector", "var_name": "injector"}, {"original_string": "private SuddenSpeedChangeAnalysis analysis;", "modifier": "private", "type": "SuddenSpeedChangeAnalysis", "declarator": "analysis", "var_name": "analysis"}, {"original_string": "private Configuration configuration;", "modifier": "private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private AppStatisticsService statisticsService;", "modifier": "private", "type": "AppStatisticsService", "declarator": "statisticsService", "var_name": "statisticsService"}, {"original_string": "private Tracker trackingService;", "modifier": "private", "type": "Tracker", "declarator": "trackingService", "var_name": "trackingService"}, {"original_string": "private EventRepository eventRepository;", "modifier": "private", "type": "EventRepository", "declarator": "eventRepository", "var_name": "eventRepository"}, {"original_string": "private Track track;", "modifier": "private", "type": "Track", "declarator": "track", "var_name": "track"}, {"original_string": "final AisPacket msg5 = AisPacket.from(\n        \"$PGHP,1,2014,4,10,13,30,29,165,219,,2190067,1,28*22\\r\\n\" +\n        \"!BSVDM,2,1,1,A,53@ng7P1uN6PuLpl000I8TLN1=T@ITDp0000000u1Pr844@P07PSiBQ1,0*7B\\r\\n\" +\n        \"!BSVDM,2,2,1,A,CcAVCTj0EP00000,2*53\");", "modifier": "final", "type": "AisPacket", "declarator": "msg5 = AisPacket.from(\n        \"$PGHP,1,2014,4,10,13,30,29,165,219,,2190067,1,28*22\\r\\n\" +\n        \"!BSVDM,2,1,1,A,53@ng7P1uN6PuLpl000I8TLN1=T@ITDp0000000u1Pr844@P07PSiBQ1,0*7B\\r\\n\" +\n        \"!BSVDM,2,2,1,A,CcAVCTj0EP00000,2*53\")", "var_name": "msg5"}], "file": "ais-ab-analyzer/src/test/java/dk/dma/ais/abnormal/analyzer/analysis/SuddenSpeedChangeAnalysisTest.java"}, "test_case": {"identifier": "eventIsRaisedForSuddenSpeedChangeSpanningSeveralMessages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void eventIsRaisedForSuddenSpeedChangeSpanningSeveralMessages() {\n        // Perform test - none of the required data are there\n        final ArgumentCaptor<SuddenSpeedChangeEvent> eventCaptor = ArgumentCaptor.forClass(SuddenSpeedChangeEvent.class);\n\n        context.checking(new Expectations() {{\n            ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n            never(eventRepository).save(with(eventCaptor.getMatcher()));\n        }});\n        analysis.start();\n\n        int deltaSecs = 10;\n\n        /* Grounding of 314234000 on Jul 03 2009 - 20:44:18 - 20:45:18 */\n\n        track.update(track.getTimeOfLastPositionReport() + deltaSecs * 1000, Position.create(56, 12), 45.0f, 13.9f, 45.0f);\n        context.checking(new Expectations() {{\n            ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n            never(eventRepository).save(with(eventCaptor.getMatcher()));\n        }});\n        analysis.onSpeedOverGroundUpdated(new PositionChangedEvent(track, null));\n        context.assertIsSatisfied();\n\n        track.update(track.getTimeOfLastPositionReport() + deltaSecs * 1000, Position.create(56, 12), 45.0f, 13.3f, 45.0f);\n        context.checking(new Expectations() {{\n            ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n            never(eventRepository).save(with(eventCaptor.getMatcher()));\n        }});\n        analysis.onSpeedOverGroundUpdated(new PositionChangedEvent(track, null));\n        context.assertIsSatisfied();\n\n        track.update(track.getTimeOfLastPositionReport() + deltaSecs * 1000, Position.create(56, 12), 45.0f, 11.7f, 45.0f);\n        context.checking(new Expectations() {{\n            ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n            never(eventRepository).save(with(eventCaptor.getMatcher()));\n        }});\n        analysis.onSpeedOverGroundUpdated(new PositionChangedEvent(track, null));\n        context.assertIsSatisfied();\n\n        track.update(track.getTimeOfLastPositionReport() + deltaSecs * 1000, Position.create(56, 12), 45.0f, 8.3f, 45.0f);\n        context.checking(new Expectations() {{\n            ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n            never(eventRepository).save(with(eventCaptor.getMatcher()));\n        }});\n        analysis.onSpeedOverGroundUpdated(new PositionChangedEvent(track, null));\n        context.assertIsSatisfied();\n\n        track.update(track.getTimeOfLastPositionReport() + deltaSecs * 1000, Position.create(56, 12), 45.0f, 5.0f, 45.0f);\n        context.checking(new Expectations() {{\n            ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n            never(eventRepository).save(with(eventCaptor.getMatcher()));\n        }});\n        analysis.onSpeedOverGroundUpdated(new PositionChangedEvent(track, null));\n        context.assertIsSatisfied();\n\n        track.update(track.getTimeOfLastPositionReport() + deltaSecs * 1000, Position.create(56, 12), 45.0f, 1.9f, 45.0f);\n        context.checking(new Expectations() {{\n            ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n            never(eventRepository).save(with(eventCaptor.getMatcher()));\n        }});\n        analysis.onSpeedOverGroundUpdated(new PositionChangedEvent(track, null));\n        context.assertIsSatisfied();\n\n        for (int i=0; i<6; i++) { // Sustain low speed\n            track.update(track.getTimeOfLastPositionReport() + deltaSecs * 1000, Position.create(56, 12), 45.0f, 0.0f, 45.0f);\n            context.checking(new Expectations() {{\n                ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n                never(eventRepository).save(with(eventCaptor.getMatcher()));\n            }});\n            analysis.onSpeedOverGroundUpdated(new PositionChangedEvent(track, null));\n            context.assertIsSatisfied();\n        }\n\n        track.update(track.getTimeOfLastPositionReport() + deltaSecs * 1000, Position.create(56, 12), 45.0f, 0.2f, 45.0f);\n        context.checking(new Expectations() {{\n            ignoring(eventRepository).findOngoingEventByVessel(219000606, SuddenSpeedChangeEvent.class);\n            oneOf(eventRepository).save(with(eventCaptor.getMatcher()));\n        }});\n        analysis.onSpeedOverGroundUpdated(new PositionChangedEvent(track, null));\n        context.assertIsSatisfied();\n\n        SuddenSpeedChangeEvent capturedEvent = eventCaptor.getCapturedObject();\n        assertEquals(\"SuddenSpeedChangeEvent\", capturedEvent.getEventType());\n        assertEquals(219000606, capturedEvent.getBehaviour(track.getMmsi()).getVessel().getMmsi());\n        assertTrue(capturedEvent.getStartTime().isBefore(capturedEvent.getEndTime()));\n        assertEquals(2, capturedEvent.getBehaviour(track.getMmsi()).getTrackingPoints().size());\n    }", "signature": "void eventIsRaisedForSuddenSpeedChangeSpanningSeveralMessages()", "full_signature": "@Test public void eventIsRaisedForSuddenSpeedChangeSpanningSeveralMessages()", "class_method_signature": "SuddenSpeedChangeAnalysisTest.eventIsRaisedForSuddenSpeedChangeSpanningSeveralMessages()", "testcase": true, "constructor": false, "invocations": ["forClass", "checking", "findOngoingEventByVessel", "ignoring", "save", "never", "with", "getMatcher", "start", "update", "getTimeOfLastPositionReport", "create", "checking", "findOngoingEventByVessel", "ignoring", "save", "never", "with", "getMatcher", "onSpeedOverGroundUpdated", "assertIsSatisfied", "update", "getTimeOfLastPositionReport", "create", "checking", "findOngoingEventByVessel", "ignoring", "save", "never", "with", "getMatcher", "onSpeedOverGroundUpdated", "assertIsSatisfied", "update", "getTimeOfLastPositionReport", "create", "checking", "findOngoingEventByVessel", "ignoring", "save", "never", "with", "getMatcher", "onSpeedOverGroundUpdated", "assertIsSatisfied", "update", "getTimeOfLastPositionReport", "create", "checking", "findOngoingEventByVessel", "ignoring", "save", "never", "with", "getMatcher", "onSpeedOverGroundUpdated", "assertIsSatisfied", "update", "getTimeOfLastPositionReport", "create", "checking", "findOngoingEventByVessel", "ignoring", "save", "never", "with", "getMatcher", "onSpeedOverGroundUpdated", "assertIsSatisfied", "update", "getTimeOfLastPositionReport", "create", "checking", "findOngoingEventByVessel", "ignoring", "save", "never", "with", "getMatcher", "onSpeedOverGroundUpdated", "assertIsSatisfied", "update", "getTimeOfLastPositionReport", "create", "checking", "findOngoingEventByVessel", "ignoring", "save", "never", "with", "getMatcher", "onSpeedOverGroundUpdated", "assertIsSatisfied", "update", "getTimeOfLastPositionReport", "create", "checking", "findOngoingEventByVessel", "ignoring", "save", "oneOf", "with", "getMatcher", "onSpeedOverGroundUpdated", "assertIsSatisfied", "getCapturedObject", "assertEquals", "getEventType", "assertEquals", "getMmsi", "getVessel", "getBehaviour", "getMmsi", "assertTrue", "isBefore", "getStartTime", "getEndTime", "assertEquals", "size", "getTrackingPoints", "getBehaviour", "getMmsi"]}, "focal_class": {"identifier": "SuddenSpeedChangeAnalysis", "superclass": "extends Analysis", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SuddenSpeedChangeAnalysis.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SuddenSpeedChangeAnalysis.class)", "var_name": "LOG"}, {"original_string": "private final AppStatisticsService statisticsService;", "modifier": "private final", "type": "AppStatisticsService", "declarator": "statisticsService", "var_name": "statisticsService"}, {"original_string": "final float SPEED_HIGH_MARK;", "modifier": "final", "type": "float", "declarator": "SPEED_HIGH_MARK", "var_name": "SPEED_HIGH_MARK"}, {"original_string": "final float SPEED_LOW_MARK;", "modifier": "final", "type": "float", "declarator": "SPEED_LOW_MARK", "var_name": "SPEED_LOW_MARK"}, {"original_string": "final int SPEED_DECAY_SECS;", "modifier": "final", "type": "int", "declarator": "SPEED_DECAY_SECS", "var_name": "SPEED_DECAY_SECS"}, {"original_string": "final long SPEED_SUSTAIN_SECS;", "modifier": "final", "type": "long", "declarator": "SPEED_SUSTAIN_SECS", "var_name": "SPEED_SUSTAIN_SECS"}, {"original_string": "final int SHIP_LENGTH_MIN;", "modifier": "final", "type": "int", "declarator": "SHIP_LENGTH_MIN", "var_name": "SHIP_LENGTH_MIN"}, {"original_string": "final float MAX_VALID_SPEED = (float) 102.2;", "modifier": "final", "type": "float", "declarator": "MAX_VALID_SPEED = (float) 102.2", "var_name": "MAX_VALID_SPEED"}, {"original_string": "private TreeSet<Integer> tracksWithSuddenSpeedDecrease = new TreeSet<>();", "modifier": "private", "type": "TreeSet<Integer>", "declarator": "tracksWithSuddenSpeedDecrease = new TreeSet<>()", "var_name": "tracksWithSuddenSpeedDecrease"}, {"original_string": "private int statCount = 0;", "modifier": "private", "type": "int", "declarator": "statCount = 0", "var_name": "statCount"}], "methods": [{"identifier": "SuddenSpeedChangeAnalysis", "parameters": "(Configuration configuration, AppStatisticsService statisticsService, EventEmittingTracker trackingService, EventRepository eventRepository)", "modifiers": "@Inject public", "return": "", "signature": " SuddenSpeedChangeAnalysis(Configuration configuration, AppStatisticsService statisticsService, EventEmittingTracker trackingService, EventRepository eventRepository)", "full_signature": "@Inject public  SuddenSpeedChangeAnalysis(Configuration configuration, AppStatisticsService statisticsService, EventEmittingTracker trackingService, EventRepository eventRepository)", "class_method_signature": "SuddenSpeedChangeAnalysis.SuddenSpeedChangeAnalysis(Configuration configuration, AppStatisticsService statisticsService, EventEmittingTracker trackingService, EventRepository eventRepository)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SuddenSpeedChangeAnalysis.toString()", "testcase": false, "constructor": false}, {"identifier": "onSpeedOverGroundUpdated", "parameters": "(PositionChangedEvent trackEvent)", "modifiers": "@AllowConcurrentEvents @Subscribe public", "return": "void", "signature": "void onSpeedOverGroundUpdated(PositionChangedEvent trackEvent)", "full_signature": "@AllowConcurrentEvents @Subscribe public void onSpeedOverGroundUpdated(PositionChangedEvent trackEvent)", "class_method_signature": "SuddenSpeedChangeAnalysis.onSpeedOverGroundUpdated(PositionChangedEvent trackEvent)", "testcase": false, "constructor": false}, {"identifier": "updateApplicationStatistics", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateApplicationStatistics()", "full_signature": "private void updateApplicationStatistics()", "class_method_signature": "SuddenSpeedChangeAnalysis.updateApplicationStatistics()", "testcase": false, "constructor": false}, {"identifier": "onTrackStale", "parameters": "(TrackStaleEvent trackEvent)", "modifiers": "@AllowConcurrentEvents @Subscribe public", "return": "void", "signature": "void onTrackStale(TrackStaleEvent trackEvent)", "full_signature": "@AllowConcurrentEvents @Subscribe public void onTrackStale(TrackStaleEvent trackEvent)", "class_method_signature": "SuddenSpeedChangeAnalysis.onTrackStale(TrackStaleEvent trackEvent)", "testcase": false, "constructor": false}, {"identifier": "performAnalysis", "parameters": "(Track track)", "modifiers": "private", "return": "void", "signature": "void performAnalysis(Track track)", "full_signature": "private void performAnalysis(Track track)", "class_method_signature": "SuddenSpeedChangeAnalysis.performAnalysis(Track track)", "testcase": false, "constructor": false}, {"identifier": "isSustainedReportedSpeedDecrease", "parameters": "(Track track)", "modifiers": "private", "return": "boolean", "signature": "boolean isSustainedReportedSpeedDecrease(Track track)", "full_signature": "private boolean isSustainedReportedSpeedDecrease(Track track)", "class_method_signature": "SuddenSpeedChangeAnalysis.isSustainedReportedSpeedDecrease(Track track)", "testcase": false, "constructor": false}, {"identifier": "isSustainedCalculatedSpeedDecrease", "parameters": "(Track track)", "modifiers": "private", "return": "boolean", "signature": "boolean isSustainedCalculatedSpeedDecrease(Track track)", "full_signature": "private boolean isSustainedCalculatedSpeedDecrease(Track track)", "class_method_signature": "SuddenSpeedChangeAnalysis.isSustainedCalculatedSpeedDecrease(Track track)", "testcase": false, "constructor": false}, {"identifier": "isSuddenSpeedDecrease", "parameters": "(Track track)", "modifiers": "private", "return": "boolean", "signature": "boolean isSuddenSpeedDecrease(Track track)", "full_signature": "private boolean isSuddenSpeedDecrease(Track track)", "class_method_signature": "SuddenSpeedChangeAnalysis.isSuddenSpeedDecrease(Track track)", "testcase": false, "constructor": false}, {"identifier": "timeOfLastTrackingReportAboveHighMark", "parameters": "(List<TrackingReport> trackingReports)", "modifiers": "private", "return": "long", "signature": "long timeOfLastTrackingReportAboveHighMark(List<TrackingReport> trackingReports)", "full_signature": "private long timeOfLastTrackingReportAboveHighMark(List<TrackingReport> trackingReports)", "class_method_signature": "SuddenSpeedChangeAnalysis.timeOfLastTrackingReportAboveHighMark(List<TrackingReport> trackingReports)", "testcase": false, "constructor": false}, {"identifier": "timeOfFirstTrackingReportBelowLowMark", "parameters": "(List<TrackingReport> trackingReports, long t1)", "modifiers": "private", "return": "long", "signature": "long timeOfFirstTrackingReportBelowLowMark(List<TrackingReport> trackingReports, long t1)", "full_signature": "private long timeOfFirstTrackingReportBelowLowMark(List<TrackingReport> trackingReports, long t1)", "class_method_signature": "SuddenSpeedChangeAnalysis.timeOfFirstTrackingReportBelowLowMark(List<TrackingReport> trackingReports, long t1)", "testcase": false, "constructor": false}, {"identifier": "buildEvent", "parameters": "(Track track, Track... otherTracks)", "modifiers": "@Override protected", "return": "Event", "signature": "Event buildEvent(Track track, Track... otherTracks)", "full_signature": "@Override protected Event buildEvent(Track track, Track... otherTracks)", "class_method_signature": "SuddenSpeedChangeAnalysis.buildEvent(Track track, Track... otherTracks)", "testcase": false, "constructor": false}, {"identifier": "raiseAndLowerSuddenSpeedChangeEvent", "parameters": "(Track track)", "modifiers": "private", "return": "void", "signature": "void raiseAndLowerSuddenSpeedChangeEvent(Track track)", "full_signature": "private void raiseAndLowerSuddenSpeedChangeEvent(Track track)", "class_method_signature": "SuddenSpeedChangeAnalysis.raiseAndLowerSuddenSpeedChangeEvent(Track track)", "testcase": false, "constructor": false}], "file": "ais-ab-analyzer/src/main/java/dk/dma/ais/abnormal/analyzer/analysis/SuddenSpeedChangeAnalysis.java"}, "focal_method": {"identifier": "onSpeedOverGroundUpdated", "parameters": "(PositionChangedEvent trackEvent)", "modifiers": "@AllowConcurrentEvents @Subscribe public", "return": "void", "body": "@AllowConcurrentEvents\n    @Subscribe\n    public void onSpeedOverGroundUpdated(PositionChangedEvent trackEvent) {\n        Track track = trackEvent.getTrack();\n\n        Integer vesselLength = track.getVesselLength();\n        if (vesselLength != null && vesselLength < SHIP_LENGTH_MIN) {\n            statisticsService.incAnalysisStatistics(getAnalysisName(), \"LOA < \" + SHIP_LENGTH_MIN);\n            return;\n        }\n\n        /* Do not perform analysis if reported speed is invalid */\n        if (!isSpeedOverGroundAvailable(track.getSpeedOverGround())) {\n            return;\n        }\n\n        /* Do not perform analysis for vessels with these characteristics: */\n        if (isClassB.test(track)\n            || isUnknownTypeOrSize.test(track)\n            || isFishingVessel.test(track)\n            || isSpecialCraft.test(track)\n            || isEngagedInTowing.test(track)\n        ) {\n            return;\n        }\n\n        /* Skip analysis if track has been predicted forward for too long */\n        /* (However: This can never happen for this event ?) */\n        if (isLastAisTrackingReportTooOld(track, track.getTimeOfLastPositionReport())) {\n            LOG.debug(\"Skipping analysis: MMSI \" + track.getMmsi() + \" was predicted for too long.\");\n            return;\n        }\n\n        /* Perform analysis only for very long vessels and some other vessels: */\n        if (isVeryLongVessel.test(track) || (isCargoVessel.test(track) || isTankerVessel.test(track) || isPassengerVessel.test(track))) {\n            performAnalysis(track);\n            updateApplicationStatistics();\n        }\n    }", "signature": "void onSpeedOverGroundUpdated(PositionChangedEvent trackEvent)", "full_signature": "@AllowConcurrentEvents @Subscribe public void onSpeedOverGroundUpdated(PositionChangedEvent trackEvent)", "class_method_signature": "SuddenSpeedChangeAnalysis.onSpeedOverGroundUpdated(PositionChangedEvent trackEvent)", "testcase": false, "constructor": false, "invocations": ["getTrack", "getVesselLength", "incAnalysisStatistics", "getAnalysisName", "isSpeedOverGroundAvailable", "getSpeedOverGround", "test", "test", "test", "test", "test", "isLastAisTrackingReportTooOld", "getTimeOfLastPositionReport", "debug", "getMmsi", "test", "test", "test", "test", "performAnalysis", "updateApplicationStatistics"]}, "repository": {"repo_id": 14281911, "url": "https://github.com/dma-ais/AisAbnormal", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 21, "size": 7998, "license": "licensed"}}