{"test_class": {"identifier": "SugarDataSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SugarDataSource<TestRecord> recordSugarDataSource;", "modifier": "private", "type": "SugarDataSource<TestRecord>", "declarator": "recordSugarDataSource", "var_name": "recordSugarDataSource"}], "file": "library/src/test/java/com/orm/SugarDataSourceTest.java"}, "test_case": {"identifier": "nullFindById", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nullFindById() {\n        TestRecord record = new TestRecord();\n        record.setId(0L);\n\n        recordSugarDataSource.findById(\n                record.getId(),\n                new SugarDataSource.SuccessCallback<TestRecord>() {\n                    @Override\n                    public void onSuccess(TestRecord object) {\n                        assertNull(object);\n                    }\n                },\n                new SugarDataSource.ErrorCallback() {\n                    @Override\n                    public void onError(Exception e) {\n                        assertNotNull(e.getMessage());\n                    }\n                }\n        );\n    }", "signature": "void nullFindById()", "full_signature": "@Test public void nullFindById()", "class_method_signature": "SugarDataSourceTest.nullFindById()", "testcase": true, "constructor": false, "invocations": ["setId", "findById", "getId", "assertNull", "assertNotNull", "getMessage"]}, "focal_class": {"identifier": "SugarDataSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Class<T> sClass;", "modifier": "private final", "type": "Class<T>", "declarator": "sClass", "var_name": "sClass"}], "methods": [{"identifier": "SugarDataSource", "parameters": "(Class<T> tClass)", "modifiers": "private", "return": "", "signature": " SugarDataSource(Class<T> tClass)", "full_signature": "private  SugarDataSource(Class<T> tClass)", "class_method_signature": "SugarDataSource.SugarDataSource(Class<T> tClass)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(Class<T> sClass)", "modifiers": "public static", "return": "SugarDataSource<T>", "signature": "SugarDataSource<T> getInstance(Class<T> sClass)", "full_signature": "public static SugarDataSource<T> getInstance(Class<T> sClass)", "class_method_signature": "SugarDataSource.getInstance(Class<T> sClass)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(final T object, final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void insert(final T object, final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void insert(final T object, final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.insert(final T object, final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "bulkInsert", "parameters": "(final List<T> objects, final SuccessCallback<List<Long>> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void bulkInsert(final List<T> objects, final SuccessCallback<List<Long>> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void bulkInsert(final List<T> objects, final SuccessCallback<List<Long>> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.bulkInsert(final List<T> objects, final SuccessCallback<List<Long>> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void findById(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void findById(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.findById(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final String whereClause, final String[] whereArgs, final String groupBy, final String orderBy, final String limit, final SuccessCallback<Cursor> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void query(final String whereClause, final String[] whereArgs, final String groupBy, final String orderBy, final String limit, final SuccessCallback<Cursor> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void query(final String whereClause, final String[] whereArgs, final String groupBy, final String orderBy, final String limit, final SuccessCallback<Cursor> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.query(final String whereClause, final String[] whereArgs, final String groupBy, final String orderBy, final String limit, final SuccessCallback<Cursor> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "listAll", "parameters": "(final String orderBy, final SuccessCallback<List<T>> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void listAll(final String orderBy, final SuccessCallback<List<T>> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void listAll(final String orderBy, final SuccessCallback<List<T>> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.listAll(final String orderBy, final SuccessCallback<List<T>> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final T object, final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void update(final T object, final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void update(final T object, final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.update(final T object, final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final T object, final SuccessCallback<Boolean> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void delete(final T object, final SuccessCallback<Boolean> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void delete(final T object, final SuccessCallback<Boolean> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.delete(final T object, final SuccessCallback<Boolean> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final String whereClause, final String[] whereArgs, final SuccessCallback<Integer> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void delete(final String whereClause, final String[] whereArgs, final SuccessCallback<Integer> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void delete(final String whereClause, final String[] whereArgs, final SuccessCallback<Integer> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.delete(final String whereClause, final String[] whereArgs, final SuccessCallback<Integer> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(final SuccessCallback<Integer> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void deleteAll(final SuccessCallback<Integer> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void deleteAll(final SuccessCallback<Integer> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.deleteAll(final SuccessCallback<Integer> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "signature": "void count(final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void count(final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.count(final SuccessCallback<Long> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false}, {"identifier": "checkNotNull", "parameters": "(Object object)", "modifiers": "protected", "return": "void", "signature": "void checkNotNull(Object object)", "full_signature": "protected void checkNotNull(Object object)", "class_method_signature": "SugarDataSource.checkNotNull(Object object)", "testcase": false, "constructor": false}, {"identifier": "getSugarClass", "parameters": "()", "modifiers": "public", "return": "Class<T>", "signature": "Class<T> getSugarClass()", "full_signature": "public Class<T> getSugarClass()", "class_method_signature": "SugarDataSource.getSugarClass()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/orm/SugarDataSource.java"}, "focal_method": {"identifier": "findById", "parameters": "(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback)", "modifiers": "public", "return": "void", "body": "public void findById(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback) {\n        checkNotNull(successCallback);\n        checkNotNull(errorCallback);\n        checkNotNull(id);\n\n        final Callable<T> call = new Callable<T>() {\n            @Override\n            public T call() throws Exception {\n                return SugarRecord.findById(getSugarClass(), id);\n            }\n        };\n\n        final Future<T> future = doInBackground(call);\n        T object;\n\n        try {\n            object = future.get();\n\n            if (null == object) {\n                errorCallback.onError(new Exception(\"The object with \" + id.toString() + \"doesn't exist in database\"));\n            } else {\n                successCallback.onSuccess(object);\n            }\n\n        } catch (Exception e) {\n            errorCallback.onError(e);\n        }\n    }", "signature": "void findById(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback)", "full_signature": "public void findById(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback)", "class_method_signature": "SugarDataSource.findById(final Long id, final SuccessCallback<T> successCallback, final ErrorCallback errorCallback)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "checkNotNull", "findById", "getSugarClass", "doInBackground", "get", "onError", "toString", "onSuccess", "onError"]}, "repository": {"repo_id": 2197202, "url": "https://github.com/chennaione/sugar", "language": "Java", "is_fork": false, "fork_count": 617, "stargazer_count": 2629, "size": 9679, "license": "licensed"}}