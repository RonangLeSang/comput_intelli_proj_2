{"test_class": {"identifier": "WsdlParserUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TEMP_CONVERT_WSDL = \"http://www.w3schools.com/webservices/tempconvert.asmx?WSDL\";", "modifier": "public static final", "type": "String", "declarator": "TEMP_CONVERT_WSDL = \"http://www.w3schools.com/webservices/tempconvert.asmx?WSDL\"", "var_name": "TEMP_CONVERT_WSDL"}, {"original_string": "public static final String TEMP_CONVERT_MODIFIED_LOCAL_WSDL = \"tempconvert.wsdl\";", "modifier": "public static final", "type": "String", "declarator": "TEMP_CONVERT_MODIFIED_LOCAL_WSDL = \"tempconvert.wsdl\"", "var_name": "TEMP_CONVERT_MODIFIED_LOCAL_WSDL"}, {"original_string": "public static final String KK_WEB_SERVICE_ENG_WSDL = \"http://www.konakart.com/konakart/services/KKWebServiceEng?wsdl\";", "modifier": "public static final", "type": "String", "declarator": "KK_WEB_SERVICE_ENG_WSDL = \"http://www.konakart.com/konakart/services/KKWebServiceEng?wsdl\"", "var_name": "KK_WEB_SERVICE_ENG_WSDL"}, {"original_string": "public static final String ELASTIC_MAP_REDUCE_WSDL = \"http://elasticmapreduce.amazonaws.com/doc/2009-03-31/ElasticMapReduce.wsdl\";", "modifier": "public static final", "type": "String", "declarator": "ELASTIC_MAP_REDUCE_WSDL = \"http://elasticmapreduce.amazonaws.com/doc/2009-03-31/ElasticMapReduce.wsdl\"", "var_name": "ELASTIC_MAP_REDUCE_WSDL"}, {"original_string": "public static final String SRC_TEST_RESOURCES_PATH = \".\"\n            + WsdlParserUtils.FILE_SEPARATOR + \"src\"\n            + WsdlParserUtils.FILE_SEPARATOR + \"test\"\n            + WsdlParserUtils.FILE_SEPARATOR + \"resources\";", "modifier": "public static final", "type": "String", "declarator": "SRC_TEST_RESOURCES_PATH = \".\"\n            + WsdlParserUtils.FILE_SEPARATOR + \"src\"\n            + WsdlParserUtils.FILE_SEPARATOR + \"test\"\n            + WsdlParserUtils.FILE_SEPARATOR + \"resources\"", "var_name": "SRC_TEST_RESOURCES_PATH"}], "file": "addon-service/addon/src/test/java/org/gvnix/service/roo/addon/addon/util/WsdlParserUtilsTest.java"}, "test_case": {"identifier": "testGetTargetNamespaceRelatedPackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTargetNamespaceRelatedPackage() throws Exception {\n\n        Document wsdl = XmlUtils.getDocumentBuilder().parse(TEMP_CONVERT_WSDL);\n        Element root = wsdl.getDocumentElement();\n        assertEquals(\"com.w3schools.www.webservices.\",\n                WsdlParserUtils.getTargetNamespaceRelatedPackage(root));\n\n        File file = new File(SRC_TEST_RESOURCES_PATH,\n                TEMP_CONVERT_MODIFIED_LOCAL_WSDL);\n        wsdl = XmlUtils.getDocumentBuilder().parse(file);\n        root = wsdl.getDocumentElement();\n        assertEquals(\"org.te3mupuuri.www.kk.idu1ur.\",\n                WsdlParserUtils.getTargetNamespaceRelatedPackage(root));\n\n        wsdl = XmlUtils.getDocumentBuilder().parse(ELASTIC_MAP_REDUCE_WSDL);\n        root = wsdl.getDocumentElement();\n        assertEquals(\"com.amazonaws.elasticmapreduce.doc.u2009u03u31.\",\n                WsdlParserUtils.getTargetNamespaceRelatedPackage(root));\n    }", "signature": "void testGetTargetNamespaceRelatedPackage()", "full_signature": "@Test public void testGetTargetNamespaceRelatedPackage()", "class_method_signature": "WsdlParserUtilsTest.testGetTargetNamespaceRelatedPackage()", "testcase": true, "constructor": false, "invocations": ["parse", "getDocumentBuilder", "getDocumentElement", "assertEquals", "getTargetNamespaceRelatedPackage", "parse", "getDocumentBuilder", "getDocumentElement", "assertEquals", "getTargetNamespaceRelatedPackage", "parse", "getDocumentBuilder", "getDocumentElement", "assertEquals", "getTargetNamespaceRelatedPackage"]}, "focal_class": {"identifier": "WsdlParserUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ROOT_ELEMENT_REQUIRED = \"Wsdl root element required\";", "modifier": "private static final", "type": "String", "declarator": "ROOT_ELEMENT_REQUIRED = \"Wsdl root element required\"", "var_name": "ROOT_ELEMENT_REQUIRED"}, {"original_string": "public static final String SOAP_11_NAMESPACE = \"http://schemas.xmlsoap.org/wsdl/soap/\";", "modifier": "public static final", "type": "String", "declarator": "SOAP_11_NAMESPACE = \"http://schemas.xmlsoap.org/wsdl/soap/\"", "var_name": "SOAP_11_NAMESPACE"}, {"original_string": "public static final String NAMESPACE_WITHOUT_SLASH_11 = SOAP_11_NAMESPACE\n            .substring(0, SOAP_11_NAMESPACE.length() - 1);", "modifier": "public static final", "type": "String", "declarator": "NAMESPACE_WITHOUT_SLASH_11 = SOAP_11_NAMESPACE\n            .substring(0, SOAP_11_NAMESPACE.length() - 1)", "var_name": "NAMESPACE_WITHOUT_SLASH_11"}, {"original_string": "public static final String SOAP_12_NAMESPACE = \"http://schemas.xmlsoap.org/wsdl/soap12/\";", "modifier": "public static final", "type": "String", "declarator": "SOAP_12_NAMESPACE = \"http://schemas.xmlsoap.org/wsdl/soap12/\"", "var_name": "SOAP_12_NAMESPACE"}, {"original_string": "public static final String NAMESPACE_WITHOUT_SLASH_12 = SOAP_12_NAMESPACE\n            .substring(0, SOAP_12_NAMESPACE.length() - 1);", "modifier": "public static final", "type": "String", "declarator": "NAMESPACE_WITHOUT_SLASH_12 = SOAP_12_NAMESPACE\n            .substring(0, SOAP_12_NAMESPACE.length() - 1)", "var_name": "NAMESPACE_WITHOUT_SLASH_12"}, {"original_string": "public static final String XML_NAMESPACE_PREFIX = \"xmlns:\";", "modifier": "public static final", "type": "String", "declarator": "XML_NAMESPACE_PREFIX = \"xmlns:\"", "var_name": "XML_NAMESPACE_PREFIX"}, {"original_string": "public static final String NAMESPACE_SEPARATOR = \":\";", "modifier": "public static final", "type": "String", "declarator": "NAMESPACE_SEPARATOR = \":\"", "var_name": "NAMESPACE_SEPARATOR"}, {"original_string": "public static final String FILE_SEPARATOR = File.separator;", "modifier": "public static final", "type": "String", "declarator": "FILE_SEPARATOR = File.separator", "var_name": "FILE_SEPARATOR"}, {"original_string": "public static final String XPATH_SEPARATOR = \"/\";", "modifier": "public static final", "type": "String", "declarator": "XPATH_SEPARATOR = \"/\"", "var_name": "XPATH_SEPARATOR"}, {"original_string": "public static final String PACKAGE_SEPARATOR = \".\";", "modifier": "public static final", "type": "String", "declarator": "PACKAGE_SEPARATOR = \".\"", "var_name": "PACKAGE_SEPARATOR"}, {"original_string": "protected static final char[] pkgSeparators = { '.', ':' };", "modifier": "protected static final", "type": "char[]", "declarator": "pkgSeparators = { '.', ':' }", "var_name": "pkgSeparators"}, {"original_string": "public static final char javaPkgSeparator = pkgSeparators[0];", "modifier": "public static final", "type": "char", "declarator": "javaPkgSeparator = pkgSeparators[0]", "var_name": "javaPkgSeparator"}, {"original_string": "protected static final String keywords[] = { \"abstract\", \"assert\",\n            \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\",\n            \"const\", \"continue\", \"default\", \"do\", \"double\", \"else\", \"extends\",\n            \"false\", \"final\", \"finally\", \"float\", \"for\", \"goto\", \"if\",\n            \"implements\", \"import\", \"instanceof\", \"int\", \"interface\", \"long\",\n            \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\",\n            \"public\", \"return\", \"short\", \"static\", \"strictfp\", \"super\",\n            \"switch\", \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\",\n            \"true\", \"try\", \"void\", \"volatile\", \"while\" };", "modifier": "protected static final", "type": "String", "declarator": "keywords[] = { \"abstract\", \"assert\",\n            \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\",\n            \"const\", \"continue\", \"default\", \"do\", \"double\", \"else\", \"extends\",\n            \"false\", \"final\", \"finally\", \"float\", \"for\", \"goto\", \"if\",\n            \"implements\", \"import\", \"instanceof\", \"int\", \"interface\", \"long\",\n            \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\",\n            \"public\", \"return\", \"short\", \"static\", \"strictfp\", \"super\",\n            \"switch\", \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\",\n            \"true\", \"try\", \"void\", \"volatile\", \"while\" }", "var_name": "keywords"}, {"original_string": "public static final Collator englishCollator = Collator\n            .getInstance(Locale.ENGLISH);", "modifier": "public static final", "type": "Collator", "declarator": "englishCollator = Collator\n            .getInstance(Locale.ENGLISH)", "var_name": "englishCollator"}, {"original_string": "public static final char keywordPrefix = '_';", "modifier": "public static final", "type": "char", "declarator": "keywordPrefix = '_'", "var_name": "keywordPrefix"}, {"original_string": "public static final String TARGET_GENERATED_SOURCES_PATH = \".\"\n            + FILE_SEPARATOR + \"target\" + FILE_SEPARATOR + \"generated-sources\"\n            + FILE_SEPARATOR + \"client\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_GENERATED_SOURCES_PATH = \".\"\n            + FILE_SEPARATOR + \"target\" + FILE_SEPARATOR + \"generated-sources\"\n            + FILE_SEPARATOR + \"client\"", "var_name": "TARGET_GENERATED_SOURCES_PATH"}, {"original_string": "public static final String DEFINITIONS_ELEMENT = \"definitions\";", "modifier": "public static final", "type": "String", "declarator": "DEFINITIONS_ELEMENT = \"definitions\"", "var_name": "DEFINITIONS_ELEMENT"}, {"original_string": "public static final String BINDING_ELEMENT = \"binding\";", "modifier": "public static final", "type": "String", "declarator": "BINDING_ELEMENT = \"binding\"", "var_name": "BINDING_ELEMENT"}, {"original_string": "public static final String PORT_TYPE_ELEMENT = \"portType\";", "modifier": "public static final", "type": "String", "declarator": "PORT_TYPE_ELEMENT = \"portType\"", "var_name": "PORT_TYPE_ELEMENT"}, {"original_string": "public static final String SERVICE_ELEMENT = \"service\";", "modifier": "public static final", "type": "String", "declarator": "SERVICE_ELEMENT = \"service\"", "var_name": "SERVICE_ELEMENT"}, {"original_string": "public static final String PORT_ELEMENT = \"port\";", "modifier": "public static final", "type": "String", "declarator": "PORT_ELEMENT = \"port\"", "var_name": "PORT_ELEMENT"}, {"original_string": "public static final String ADDRESS_ELEMENT = \"address\";", "modifier": "public static final", "type": "String", "declarator": "ADDRESS_ELEMENT = \"address\"", "var_name": "ADDRESS_ELEMENT"}, {"original_string": "public static final String TARGET_NAMESPACE_ATTRIBUTE = \"targetNamespace\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_NAMESPACE_ATTRIBUTE = \"targetNamespace\"", "var_name": "TARGET_NAMESPACE_ATTRIBUTE"}, {"original_string": "public static final String NAME_ATTRIBUTE = \"name\";", "modifier": "public static final", "type": "String", "declarator": "NAME_ATTRIBUTE = \"name\"", "var_name": "NAME_ATTRIBUTE"}, {"original_string": "public static final String BINDING_ATTRIBUTE = \"binding\";", "modifier": "public static final", "type": "String", "declarator": "BINDING_ATTRIBUTE = \"binding\"", "var_name": "BINDING_ATTRIBUTE"}, {"original_string": "public static final String TYPE_ATTRIBUTE = \"type\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_ATTRIBUTE = \"type\"", "var_name": "TYPE_ATTRIBUTE"}, {"original_string": "public static final String STYLE_ATTRIBUTE = \"style\";", "modifier": "public static final", "type": "String", "declarator": "STYLE_ATTRIBUTE = \"style\"", "var_name": "STYLE_ATTRIBUTE"}, {"original_string": "public static final String BINDINGS_XPATH = XPATH_SEPARATOR\n            + DEFINITIONS_ELEMENT + XPATH_SEPARATOR + BINDING_ELEMENT;", "modifier": "public static final", "type": "String", "declarator": "BINDINGS_XPATH = XPATH_SEPARATOR\n            + DEFINITIONS_ELEMENT + XPATH_SEPARATOR + BINDING_ELEMENT", "var_name": "BINDINGS_XPATH"}, {"original_string": "public static final String PORT_TYPES_XPATH = XPATH_SEPARATOR\n            + DEFINITIONS_ELEMENT + XPATH_SEPARATOR + PORT_TYPE_ELEMENT;", "modifier": "public static final", "type": "String", "declarator": "PORT_TYPES_XPATH = XPATH_SEPARATOR\n            + DEFINITIONS_ELEMENT + XPATH_SEPARATOR + PORT_TYPE_ELEMENT", "var_name": "PORT_TYPES_XPATH"}, {"original_string": "public static final String ADDRESSES_XPATH = XPATH_SEPARATOR\n            + DEFINITIONS_ELEMENT + XPATH_SEPARATOR + SERVICE_ELEMENT\n            + XPATH_SEPARATOR + PORT_ELEMENT + XPATH_SEPARATOR\n            + ADDRESS_ELEMENT;", "modifier": "public static final", "type": "String", "declarator": "ADDRESSES_XPATH = XPATH_SEPARATOR\n            + DEFINITIONS_ELEMENT + XPATH_SEPARATOR + SERVICE_ELEMENT\n            + XPATH_SEPARATOR + PORT_ELEMENT + XPATH_SEPARATOR\n            + ADDRESS_ELEMENT", "var_name": "ADDRESSES_XPATH"}, {"original_string": "public static final String CHILD_BINDINGS_XPATH = XPATH_SEPARATOR\n            + DEFINITIONS_ELEMENT + XPATH_SEPARATOR + BINDING_ELEMENT\n            + XPATH_SEPARATOR + BINDING_ELEMENT;", "modifier": "public static final", "type": "String", "declarator": "CHILD_BINDINGS_XPATH = XPATH_SEPARATOR\n            + DEFINITIONS_ELEMENT + XPATH_SEPARATOR + BINDING_ELEMENT\n            + XPATH_SEPARATOR + BINDING_ELEMENT", "var_name": "CHILD_BINDINGS_XPATH"}], "methods": [{"identifier": "getTargetNamespace", "parameters": "(Element root)", "modifiers": "public static", "return": "String", "signature": "String getTargetNamespace(Element root)", "full_signature": "public static String getTargetNamespace(Element root)", "class_method_signature": "WsdlParserUtils.getTargetNamespace(Element root)", "testcase": false, "constructor": false}, {"identifier": "getTargetNamespaceRelatedPackage", "parameters": "(Element root)", "modifiers": "public static", "return": "String", "signature": "String getTargetNamespaceRelatedPackage(Element root)", "full_signature": "public static String getTargetNamespaceRelatedPackage(Element root)", "class_method_signature": "WsdlParserUtils.getTargetNamespaceRelatedPackage(Element root)", "testcase": false, "constructor": false}, {"identifier": "getTargetNamespaceRelatedPackage", "parameters": "(String namespace,\n            Element root)", "modifiers": "private static", "return": "String", "signature": "String getTargetNamespaceRelatedPackage(String namespace,\n            Element root)", "full_signature": "private static String getTargetNamespaceRelatedPackage(String namespace,\n            Element root)", "class_method_signature": "WsdlParserUtils.getTargetNamespaceRelatedPackage(String namespace,\n            Element root)", "testcase": false, "constructor": false}, {"identifier": "normalizePackageName", "parameters": "(String pkg, char separator)", "modifiers": "private static", "return": "String", "signature": "String normalizePackageName(String pkg, char separator)", "full_signature": "private static String normalizePackageName(String pkg, char separator)", "class_method_signature": "WsdlParserUtils.normalizePackageName(String pkg, char separator)", "testcase": false, "constructor": false}, {"identifier": "makePackageName", "parameters": "(String namespace)", "modifiers": "public static", "return": "String", "signature": "String makePackageName(String namespace)", "full_signature": "public static String makePackageName(String namespace)", "class_method_signature": "WsdlParserUtils.makePackageName(String namespace)", "testcase": false, "constructor": false}, {"identifier": "addWordToPackageBuffer", "parameters": "(StringBuffer sb, String word,\n            boolean firstWord)", "modifiers": "private static", "return": "void", "signature": "void addWordToPackageBuffer(StringBuffer sb, String word,\n            boolean firstWord)", "full_signature": "private static void addWordToPackageBuffer(StringBuffer sb, String word,\n            boolean firstWord)", "class_method_signature": "WsdlParserUtils.addWordToPackageBuffer(StringBuffer sb, String word,\n            boolean firstWord)", "testcase": false, "constructor": false}, {"identifier": "isJavaKeyword", "parameters": "(String keyword)", "modifiers": "public static", "return": "boolean", "signature": "boolean isJavaKeyword(String keyword)", "full_signature": "public static boolean isJavaKeyword(String keyword)", "class_method_signature": "WsdlParserUtils.isJavaKeyword(String keyword)", "testcase": false, "constructor": false}, {"identifier": "makeNonJavaKeyword", "parameters": "(String keyword)", "modifiers": "public static", "return": "String", "signature": "String makeNonJavaKeyword(String keyword)", "full_signature": "public static String makeNonJavaKeyword(String keyword)", "class_method_signature": "WsdlParserUtils.makeNonJavaKeyword(String keyword)", "testcase": false, "constructor": false}, {"identifier": "findFirstCompatibleAddress", "parameters": "(Element root)", "modifiers": "public static", "return": "Element", "signature": "Element findFirstCompatibleAddress(Element root)", "full_signature": "public static Element findFirstCompatibleAddress(Element root)", "class_method_signature": "WsdlParserUtils.findFirstCompatibleAddress(Element root)", "testcase": false, "constructor": false}, {"identifier": "getReferencedElement", "parameters": "(Element root,\n            List<Element> elements, String reference)", "modifiers": "private static", "return": "Element", "signature": "Element getReferencedElement(Element root,\n            List<Element> elements, String reference)", "full_signature": "private static Element getReferencedElement(Element root,\n            List<Element> elements, String reference)", "class_method_signature": "WsdlParserUtils.getReferencedElement(Element root,\n            List<Element> elements, String reference)", "testcase": false, "constructor": false}, {"identifier": "getServiceClassPath", "parameters": "(Element root, WsType sense)", "modifiers": "public static", "return": "String", "signature": "String getServiceClassPath(Element root, WsType sense)", "full_signature": "public static String getServiceClassPath(Element root, WsType sense)", "class_method_signature": "WsdlParserUtils.getServiceClassPath(Element root, WsType sense)", "testcase": false, "constructor": false}, {"identifier": "getPortTypeClassPath", "parameters": "(Element root, WsType sense)", "modifiers": "public static", "return": "String", "signature": "String getPortTypeClassPath(Element root, WsType sense)", "full_signature": "public static String getPortTypeClassPath(Element root, WsType sense)", "class_method_signature": "WsdlParserUtils.getPortTypeClassPath(Element root, WsType sense)", "testcase": false, "constructor": false}, {"identifier": "getPortTypeJavaFile", "parameters": "(Element root, WsType sense)", "modifiers": "public static", "return": "File", "signature": "File getPortTypeJavaFile(Element root, WsType sense)", "full_signature": "public static File getPortTypeJavaFile(Element root, WsType sense)", "class_method_signature": "WsdlParserUtils.getPortTypeJavaFile(Element root, WsType sense)", "testcase": false, "constructor": false}, {"identifier": "convertTypePathToJavaPath", "parameters": "(String classPath)", "modifiers": "private static", "return": "String", "signature": "String convertTypePathToJavaPath(String classPath)", "full_signature": "private static String convertTypePathToJavaPath(String classPath)", "class_method_signature": "WsdlParserUtils.convertTypePathToJavaPath(String classPath)", "testcase": false, "constructor": false}, {"identifier": "getGeneratedJavaFile", "parameters": "(String path)", "modifiers": "private static", "return": "File", "signature": "File getGeneratedJavaFile(String path)", "full_signature": "private static File getGeneratedJavaFile(String path)", "class_method_signature": "WsdlParserUtils.getGeneratedJavaFile(String path)", "testcase": false, "constructor": false}, {"identifier": "findFirstCompatibleServiceClassName", "parameters": "(Element root,\n            WsType sense)", "modifiers": "private static", "return": "String", "signature": "String findFirstCompatibleServiceClassName(Element root,\n            WsType sense)", "full_signature": "private static String findFirstCompatibleServiceClassName(Element root,\n            WsType sense)", "class_method_signature": "WsdlParserUtils.findFirstCompatibleServiceClassName(Element root,\n            WsType sense)", "testcase": false, "constructor": false}, {"identifier": "findFirstCompatibleServiceElementName", "parameters": "(Element root)", "modifiers": "public static", "return": "String", "signature": "String findFirstCompatibleServiceElementName(Element root)", "full_signature": "public static String findFirstCompatibleServiceElementName(Element root)", "class_method_signature": "WsdlParserUtils.findFirstCompatibleServiceElementName(Element root)", "testcase": false, "constructor": false}, {"identifier": "findFirstCompatiblePort", "parameters": "(Element root)", "modifiers": "public static", "return": "Element", "signature": "Element findFirstCompatiblePort(Element root)", "full_signature": "public static Element findFirstCompatiblePort(Element root)", "class_method_signature": "WsdlParserUtils.findFirstCompatiblePort(Element root)", "testcase": false, "constructor": false}, {"identifier": "checkCompatiblePort", "parameters": "(Element root)", "modifiers": "public static", "return": "Element", "signature": "Element checkCompatiblePort(Element root)", "full_signature": "public static Element checkCompatiblePort(Element root)", "class_method_signature": "WsdlParserUtils.checkCompatiblePort(Element root)", "testcase": false, "constructor": false}, {"identifier": "checkCompatibleAddress", "parameters": "(Element root)", "modifiers": "public static", "return": "Element", "signature": "Element checkCompatibleAddress(Element root)", "full_signature": "public static Element checkCompatibleAddress(Element root)", "class_method_signature": "WsdlParserUtils.checkCompatibleAddress(Element root)", "testcase": false, "constructor": false}, {"identifier": "findFirstCompatiblePortClassName", "parameters": "(Element root,\n            WsType sense)", "modifiers": "public static", "return": "String", "signature": "String findFirstCompatiblePortClassName(Element root,\n            WsType sense)", "full_signature": "public static String findFirstCompatiblePortClassName(Element root,\n            WsType sense)", "class_method_signature": "WsdlParserUtils.findFirstCompatiblePortClassName(Element root,\n            WsType sense)", "testcase": false, "constructor": false}, {"identifier": "findFirstCompatiblePortTypeClassName", "parameters": "(Element root,\n            WsType sense)", "modifiers": "private static", "return": "String", "signature": "String findFirstCompatiblePortTypeClassName(Element root,\n            WsType sense)", "full_signature": "private static String findFirstCompatiblePortTypeClassName(Element root,\n            WsType sense)", "class_method_signature": "WsdlParserUtils.findFirstCompatiblePortTypeClassName(Element root,\n            WsType sense)", "testcase": false, "constructor": false}, {"identifier": "findFirstCompatibleBinding", "parameters": "(Element root)", "modifiers": "private static", "return": "Element", "signature": "Element findFirstCompatibleBinding(Element root)", "full_signature": "private static Element findFirstCompatibleBinding(Element root)", "class_method_signature": "WsdlParserUtils.findFirstCompatibleBinding(Element root)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceURI", "parameters": "(Element root, String namespace)", "modifiers": "private static", "return": "String", "signature": "String getNamespaceURI(Element root, String namespace)", "full_signature": "private static String getNamespaceURI(Element root, String namespace)", "class_method_signature": "WsdlParserUtils.getNamespaceURI(Element root, String namespace)", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "(String elementName)", "modifiers": "protected static", "return": "String", "signature": "String getNamespace(String elementName)", "full_signature": "protected static String getNamespace(String elementName)", "class_method_signature": "WsdlParserUtils.getNamespace(String elementName)", "testcase": false, "constructor": false}, {"identifier": "getLocalName", "parameters": "(String elementName)", "modifiers": "protected static", "return": "String", "signature": "String getLocalName(String elementName)", "full_signature": "protected static String getLocalName(String elementName)", "class_method_signature": "WsdlParserUtils.getLocalName(String elementName)", "testcase": false, "constructor": false}, {"identifier": "convertNameToJavaFormat", "parameters": "(String name, WsType sense)", "modifiers": "private static", "return": "String", "signature": "String convertNameToJavaFormat(String name, WsType sense)", "full_signature": "private static String convertNameToJavaFormat(String name, WsType sense)", "class_method_signature": "WsdlParserUtils.convertNameToJavaFormat(String name, WsType sense)", "testcase": false, "constructor": false}, {"identifier": "convertDocumentNameToJavaFormat", "parameters": "(String name)", "modifiers": "private static", "return": "String", "signature": "String convertDocumentNameToJavaFormat(String name)", "full_signature": "private static String convertDocumentNameToJavaFormat(String name)", "class_method_signature": "WsdlParserUtils.convertDocumentNameToJavaFormat(String name)", "testcase": false, "constructor": false}, {"identifier": "convertRpcNameToJavaFormat", "parameters": "(String name)", "modifiers": "private static", "return": "String", "signature": "String convertRpcNameToJavaFormat(String name)", "full_signature": "private static String convertRpcNameToJavaFormat(String name)", "class_method_signature": "WsdlParserUtils.convertRpcNameToJavaFormat(String name)", "testcase": false, "constructor": false}, {"identifier": "isJavaId", "parameters": "(String id)", "modifiers": "public static", "return": "boolean", "signature": "boolean isJavaId(String id)", "full_signature": "public static boolean isJavaId(String id)", "class_method_signature": "WsdlParserUtils.isJavaId(String id)", "testcase": false, "constructor": false}, {"identifier": "xmlNameToJavaClass", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String xmlNameToJavaClass(String name)", "full_signature": "public static String xmlNameToJavaClass(String name)", "class_method_signature": "WsdlParserUtils.xmlNameToJavaClass(String name)", "testcase": false, "constructor": false}, {"identifier": "capitalizeFirstChar", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String capitalizeFirstChar(String name)", "full_signature": "public static String capitalizeFirstChar(String name)", "class_method_signature": "WsdlParserUtils.capitalizeFirstChar(String name)", "testcase": false, "constructor": false}, {"identifier": "xmlNameToJava", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String xmlNameToJava(String name)", "full_signature": "public static String xmlNameToJava(String name)", "class_method_signature": "WsdlParserUtils.xmlNameToJava(String name)", "testcase": false, "constructor": false}, {"identifier": "isPunctuation", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPunctuation(char c)", "full_signature": "private static boolean isPunctuation(char c)", "class_method_signature": "WsdlParserUtils.isPunctuation(char c)", "testcase": false, "constructor": false}, {"identifier": "isRpcEncoded", "parameters": "(Element root)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRpcEncoded(Element root)", "full_signature": "public static boolean isRpcEncoded(Element root)", "class_method_signature": "WsdlParserUtils.isRpcEncoded(Element root)", "testcase": false, "constructor": false}, {"identifier": "validateWsdlUrl", "parameters": "(String url)", "modifiers": "public static", "return": "Element", "signature": "Element validateWsdlUrl(String url)", "full_signature": "public static Element validateWsdlUrl(String url)", "class_method_signature": "WsdlParserUtils.validateWsdlUrl(String url)", "testcase": false, "constructor": false}], "file": "addon-service/addon/src/main/java/org/gvnix/service/roo/addon/addon/util/WsdlParserUtils.java"}, "focal_method": {"identifier": "getTargetNamespaceRelatedPackage", "parameters": "(Element root)", "modifiers": "public static", "return": "String", "body": "public static String getTargetNamespaceRelatedPackage(Element root) {\n\n        Validate.notNull(root, ROOT_ELEMENT_REQUIRED);\n\n        // Get the namespace attribute from root wsdl\n        String namespace = getTargetNamespace(root);\n\n        String pkg = getTargetNamespaceRelatedPackage(namespace, root)\n                .toLowerCase();\n        pkg = pkg.replace('_', 'u');\n\n        return pkg.concat(\".\");\n    }", "signature": "String getTargetNamespaceRelatedPackage(Element root)", "full_signature": "public static String getTargetNamespaceRelatedPackage(Element root)", "class_method_signature": "WsdlParserUtils.getTargetNamespaceRelatedPackage(Element root)", "testcase": false, "constructor": false, "invocations": ["notNull", "getTargetNamespace", "toLowerCase", "getTargetNamespaceRelatedPackage", "replace", "concat"]}, "repository": {"repo_id": 9519880, "url": "https://github.com/gvSIGAssociation/gvnix", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 41, "size": 203829, "license": "licensed"}}