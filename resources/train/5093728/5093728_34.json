{"test_class": {"identifier": "FeatureContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Configuration options;", "modifier": "private", "type": "Configuration", "declarator": "options", "var_name": "options"}, {"original_string": "private FeatureContext context;", "modifier": "private", "type": "FeatureContext", "declarator": "context", "var_name": "context"}], "file": "core/src/test/java/com/googlecode/fitchy/FeatureContextTest.java"}, "test_case": {"identifier": "featureHasStatus_WithoutFeatureKey_ThrowsException", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n    public void featureHasStatus_WithoutFeatureKey_ThrowsException() {\n        addFeatureToContext(\"test.feature\", options.enabledStatus);\n        context.featureHasStatus(null, options.enabledStatus);\n    }", "signature": "void featureHasStatus_WithoutFeatureKey_ThrowsException()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void featureHasStatus_WithoutFeatureKey_ThrowsException()", "class_method_signature": "FeatureContextTest.featureHasStatus_WithoutFeatureKey_ThrowsException()", "testcase": true, "constructor": false, "invocations": ["addFeatureToContext", "featureHasStatus"]}, "focal_class": {"identifier": "FeatureContext", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, Feature> featureMap;", "modifier": "private", "type": "Map<String, Feature>", "declarator": "featureMap", "var_name": "featureMap"}, {"original_string": "private Configuration config;", "modifier": "private", "type": "Configuration", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "FeatureContext", "parameters": "(Configuration config)", "modifiers": "public", "return": "", "signature": " FeatureContext(Configuration config)", "full_signature": "public  FeatureContext(Configuration config)", "class_method_signature": "FeatureContext.FeatureContext(Configuration config)", "testcase": false, "constructor": true}, {"identifier": "addFeature", "parameters": "(String key)", "modifiers": "public", "return": "Feature", "signature": "Feature addFeature(String key)", "full_signature": "public Feature addFeature(String key)", "class_method_signature": "FeatureContext.addFeature(String key)", "testcase": false, "constructor": false}, {"identifier": "addFeature", "parameters": "(Feature feature)", "modifiers": "public", "return": "Feature", "signature": "Feature addFeature(Feature feature)", "full_signature": "public Feature addFeature(Feature feature)", "class_method_signature": "FeatureContext.addFeature(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "hasFeature", "parameters": "(String key)", "modifiers": "public", "return": "boolean", "signature": "boolean hasFeature(String key)", "full_signature": "public boolean hasFeature(String key)", "class_method_signature": "FeatureContext.hasFeature(String key)", "testcase": false, "constructor": false}, {"identifier": "featureHasStatus", "parameters": "(String key, FeatureStatus status)", "modifiers": "public", "return": "boolean", "signature": "boolean featureHasStatus(String key, FeatureStatus status)", "full_signature": "public boolean featureHasStatus(String key, FeatureStatus status)", "class_method_signature": "FeatureContext.featureHasStatus(String key, FeatureStatus status)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "FeatureContext.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "FeatureContext.size()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getConfig()", "full_signature": "public Configuration getConfig()", "class_method_signature": "FeatureContext.getConfig()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/googlecode/fitchy/FeatureContext.java"}, "focal_method": {"identifier": "featureHasStatus", "parameters": "(String key, FeatureStatus status)", "modifiers": "public", "return": "boolean", "body": "public boolean featureHasStatus(String key, FeatureStatus status) {\n\t\tif(key == null || \"\".equals(key)) {\n            throw new IllegalArgumentException(\"key argument is required\");\n        }\n\n        if(hasFeature(key)) {\n\t\t\treturn featureMap.get(key).getStatus() == status;\n\t\t}\n\t\t\n\t\treturn false;\n\t}", "signature": "boolean featureHasStatus(String key, FeatureStatus status)", "full_signature": "public boolean featureHasStatus(String key, FeatureStatus status)", "class_method_signature": "FeatureContext.featureHasStatus(String key, FeatureStatus status)", "testcase": false, "constructor": false, "invocations": ["equals", "hasFeature", "getStatus", "get"]}, "repository": {"repo_id": 5093728, "url": "https://github.com/ankaubisch/fitchy", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 17, "size": 316, "license": "licensed"}}