{"test_class": {"identifier": "HandlerManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n\tprivate HandlerManager manager;", "modifier": "@InjectMocks\n\tprivate", "type": "HandlerManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "@Mock\n\tprivate Handler handler1;", "modifier": "@Mock\n\tprivate", "type": "Handler", "declarator": "handler1", "var_name": "handler1"}, {"original_string": "@Mock\n\tprivate Handler handler2;", "modifier": "@Mock\n\tprivate", "type": "Handler", "declarator": "handler2", "var_name": "handler2"}], "file": "mockito-collections-samples/src/test/java/uk/co/webamoeba/mockito/collections/sample/HandlerManagerTest.java"}, "test_case": {"identifier": "shouldCallAllHandlers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldCallAllHandlers() {\n\t\t// Given\n\t\tString thingToHandle = \"Something\";\n\t\tgiven(handler1.handle(thingToHandle)).willReturn(\"value1\");\n\t\tgiven(handler2.handle(thingToHandle)).willReturn(\"value2\");\n\n\t\t// When\n\t\tString[] strings = manager.handle(thingToHandle);\n\n\t\t// Then\n\t\t// Is array (order is important) but we can guarantee order of Set of Handlers using LinkedHashSet\n\t\t// No need to verify see http://monkeyisland.pl/2008/04/26/asking-and-telling/\n\t\tassertArrayEquals(new String[] { \"value1\", \"value2\" }, strings);\n\t}", "signature": "void shouldCallAllHandlers()", "full_signature": "@Test public void shouldCallAllHandlers()", "class_method_signature": "HandlerManagerTest.shouldCallAllHandlers()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "handle", "willReturn", "given", "handle", "handle", "assertArrayEquals"]}, "focal_class": {"identifier": "HandlerManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Set<Handler> handlers;", "modifier": "private", "type": "Set<Handler>", "declarator": "handlers", "var_name": "handlers"}], "methods": [{"identifier": "handle", "parameters": "(String thingToHandle)", "modifiers": "public", "return": "String[]", "signature": "String[] handle(String thingToHandle)", "full_signature": "public String[] handle(String thingToHandle)", "class_method_signature": "HandlerManager.handle(String thingToHandle)", "testcase": false, "constructor": false}, {"identifier": "setHandlers", "parameters": "(Set<Handler> handlers)", "modifiers": "public", "return": "void", "signature": "void setHandlers(Set<Handler> handlers)", "full_signature": "public void setHandlers(Set<Handler> handlers)", "class_method_signature": "HandlerManager.setHandlers(Set<Handler> handlers)", "testcase": false, "constructor": false}], "file": "mockito-collections-samples/src/main/java/uk/co/webamoeba/mockito/collections/sample/HandlerManager.java"}, "focal_method": {"identifier": "handle", "parameters": "(String thingToHandle)", "modifiers": "public", "return": "String[]", "body": "public String[] handle(String thingToHandle) {\n\t\tif (thingToHandle == null) {\n\t\t\tthrow new IllegalArgumentException(\"thingToHandle must not be null\");\n\t\t}\n\n\t\tString[] strings = new String[handlers.size()];\n\t\tint i = 0;\n\t\tfor (Handler handler : handlers) {\n\t\t\tstrings[i++] = handler.handle(thingToHandle);\n\t\t}\n\t\treturn strings;\n\t}", "signature": "String[] handle(String thingToHandle)", "full_signature": "public String[] handle(String thingToHandle)", "class_method_signature": "HandlerManager.handle(String thingToHandle)", "testcase": false, "constructor": false, "invocations": ["size", "handle"]}, "repository": {"repo_id": 4835576, "url": "https://github.com/jameskennard/mockito-collections", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 792, "license": "licensed"}}