{"test_class": {"identifier": "DefaultMockSelectionStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultMockSelectionStrategy strategy = new DefaultMockSelectionStrategy();", "modifier": "private", "type": "DefaultMockSelectionStrategy", "declarator": "strategy = new DefaultMockSelectionStrategy()", "var_name": "strategy"}], "file": "mockito-collections-core/src/test/java/uk/co/webamoeba/mockito/collections/inject/DefaultMockSelectionStrategyTest.java"}, "test_case": {"identifier": "shouldGetMockCollectionGivenTwoTypesOfElement", "parameters": "()", "modifiers": "@Test @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "void", "body": "@Test\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tpublic void shouldGetMockCollectionGivenTwoTypesOfElement() {\n\t\t// Given\n\t\tCollectionOfMocksField mockCollection1 = new CollectionOfMocksField(Collections.emptyList(), List.class,\n\t\t\t\tFileOutputStream.class);\n\t\tCollectionOfMocksField mockCollection2 = new CollectionOfMocksField(Collections.emptyList(), List.class,\n\t\t\t\tOutputStream.class);\n\t\tSet<CollectionOfMocksField<Collection<Object>, Object>> mockCollections = new HashSet<CollectionOfMocksField<Collection<Object>, Object>>(\n\t\t\t\tArrays.<CollectionOfMocksField<Collection<Object>, Object>> asList(mockCollection1, mockCollection2));\n\t\tCollectionOfMocksFieldSet set = mock(CollectionOfMocksFieldSet.class);\n\t\tgiven(set.iterator()).willReturn(mockCollections.iterator());\n\n\t\tClass<List> typeOfCollection = List.class;\n\t\tClass<OutputStream> typeOfElements = OutputStream.class;\n\n\t\t// When\n\t\tCollectionOfMocksField actualMockCollection = strategy.getCollectionOfMocksField(set, typeOfCollection,\n\t\t\t\ttypeOfElements);\n\n\t\t// Then\n\t\tassertSame(mockCollection2, actualMockCollection);\n\t}", "signature": "void shouldGetMockCollectionGivenTwoTypesOfElement()", "full_signature": "@Test @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public void shouldGetMockCollectionGivenTwoTypesOfElement()", "class_method_signature": "DefaultMockSelectionStrategyTest.shouldGetMockCollectionGivenTwoTypesOfElement()", "testcase": true, "constructor": false, "invocations": ["emptyList", "emptyList", "asList", "mock", "willReturn", "given", "iterator", "iterator", "getCollectionOfMocksField", "assertSame"]}, "focal_class": {"identifier": "DefaultMockSelectionStrategy", "superclass": "", "interfaces": "implements MockSelectionStrategy", "fields": [], "methods": [{"identifier": "selectMocks", "parameters": "(OrderedSet<Object> mocks, Class<T> mockClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "OrderedSet<T>", "signature": "OrderedSet<T> selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public OrderedSet<T> selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "class_method_signature": "DefaultMockSelectionStrategy.selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "testcase": false, "constructor": false}, {"identifier": "getCollectionOfMocksField", "parameters": "(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "CollectionOfMocksField<C, E>", "signature": "CollectionOfMocksField<C, E> getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "full_signature": "@SuppressWarnings(\"unchecked\") public CollectionOfMocksField<C, E> getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "class_method_signature": "DefaultMockSelectionStrategy.getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "testcase": false, "constructor": false}], "file": "mockito-collections-core/src/main/java/uk/co/webamoeba/mockito/collections/inject/DefaultMockSelectionStrategy.java"}, "focal_method": {"identifier": "getCollectionOfMocksField", "parameters": "(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "CollectionOfMocksField<C, E>", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic <C extends Collection<E>, E> CollectionOfMocksField<C, E> getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements) {\n\t\tif (collectionOfMocksFieldSet == null) {\n\t\t\tthrow new IllegalArgumentException(\"collectionOfMocksFieldSet must not be null\");\n\t\t}\n\t\tif (typeOfCollection == null) {\n\t\t\tthrow new IllegalArgumentException(\"typeOfCollection must not be null\");\n\t\t}\n\t\tif (typeOfElements == null) {\n\t\t\tthrow new IllegalArgumentException(\"typeOfElements must not be null\");\n\t\t}\n\n\t\tCollectionOfMocksField<C, E> collectionOfMocksField = null;\n\t\tfor (CollectionOfMocksField<?, ?> candidate : collectionOfMocksFieldSet) {\n\t\t\tif (candidate.getTypeOfCollection().equals(typeOfCollection)\n\t\t\t\t\t&& candidate.getTypeOfElements().equals(typeOfElements)) {\n\t\t\t\tif (collectionOfMocksField != null) {\n\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\"There is more than one CollectionOfMocksField of type of collection \" + typeOfCollection\n\t\t\t\t\t\t\t\t\t+ \" and type of element \" + typeOfElements\n\t\t\t\t\t\t\t\t\t+ \". There may be other offending duplicates.\");\n\t\t\t\t}\n\t\t\t\tcollectionOfMocksField = (CollectionOfMocksField<C, E>) candidate;\n\t\t\t}\n\t\t}\n\t\treturn collectionOfMocksField;\n\t}", "signature": "CollectionOfMocksField<C, E> getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "full_signature": "@SuppressWarnings(\"unchecked\") public CollectionOfMocksField<C, E> getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "class_method_signature": "DefaultMockSelectionStrategy.getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "testcase": false, "constructor": false, "invocations": ["equals", "getTypeOfCollection", "equals", "getTypeOfElements"]}, "repository": {"repo_id": 4835576, "url": "https://github.com/jameskennard/mockito-collections", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 792, "license": "licensed"}}