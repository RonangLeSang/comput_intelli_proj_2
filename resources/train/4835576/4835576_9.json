{"test_class": {"identifier": "DefaultMockSelectionStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultMockSelectionStrategy strategy = new DefaultMockSelectionStrategy();", "modifier": "private", "type": "DefaultMockSelectionStrategy", "declarator": "strategy = new DefaultMockSelectionStrategy()", "var_name": "strategy"}], "file": "mockito-collections-core/src/test/java/uk/co/webamoeba/mockito/collections/inject/DefaultMockSelectionStrategyTest.java"}, "test_case": {"identifier": "shouldGetMocksGivenNoMatchingMocks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldGetMocksGivenNoMatchingMocks() {\n\t\t// Given\n\t\tObject mock1 = mock(InputStream.class);\n\t\tObject mock2 = mock(OutputStream.class);\n\t\tOrderedSet<Object> mocks = new OrderedSet<Object>(Arrays.asList(mock1, mock2));\n\n\t\t// When\n\t\tOrderedSet<FileOutputStream> actualMocks = strategy.selectMocks(mocks, FileOutputStream.class);\n\n\t\t// Then\n\t\tassertTrue(actualMocks.isEmpty());\n\t}", "signature": "void shouldGetMocksGivenNoMatchingMocks()", "full_signature": "@Test public void shouldGetMocksGivenNoMatchingMocks()", "class_method_signature": "DefaultMockSelectionStrategyTest.shouldGetMocksGivenNoMatchingMocks()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "asList", "selectMocks", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "DefaultMockSelectionStrategy", "superclass": "", "interfaces": "implements MockSelectionStrategy", "fields": [], "methods": [{"identifier": "selectMocks", "parameters": "(OrderedSet<Object> mocks, Class<T> mockClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "OrderedSet<T>", "signature": "OrderedSet<T> selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public OrderedSet<T> selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "class_method_signature": "DefaultMockSelectionStrategy.selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "testcase": false, "constructor": false}, {"identifier": "getCollectionOfMocksField", "parameters": "(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "CollectionOfMocksField<C, E>", "signature": "CollectionOfMocksField<C, E> getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "full_signature": "@SuppressWarnings(\"unchecked\") public CollectionOfMocksField<C, E> getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "class_method_signature": "DefaultMockSelectionStrategy.getCollectionOfMocksField(\n\t\t\tCollectionOfMocksFieldSet collectionOfMocksFieldSet, Class<C> typeOfCollection, Class<E> typeOfElements)", "testcase": false, "constructor": false}], "file": "mockito-collections-core/src/main/java/uk/co/webamoeba/mockito/collections/inject/DefaultMockSelectionStrategy.java"}, "focal_method": {"identifier": "selectMocks", "parameters": "(OrderedSet<Object> mocks, Class<T> mockClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "OrderedSet<T>", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic <T> OrderedSet<T> selectMocks(OrderedSet<Object> mocks, Class<T> mockClass) {\n\t\tOrderedSet<T> matchingMocks = new OrderedSet<T>();\n\t\tfor (Object object : mocks) {\n\t\t\tif (mockClass.isAssignableFrom(object.getClass())) {\n\t\t\t\tmatchingMocks.add((T) object);\n\t\t\t}\n\t\t}\n\t\treturn matchingMocks;\n\t}", "signature": "OrderedSet<T> selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public OrderedSet<T> selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "class_method_signature": "DefaultMockSelectionStrategy.selectMocks(OrderedSet<Object> mocks, Class<T> mockClass)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getClass", "add"]}, "repository": {"repo_id": 4835576, "url": "https://github.com/jameskennard/mockito-collections", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 792, "license": "licensed"}}