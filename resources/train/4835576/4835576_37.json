{"test_class": {"identifier": "AnnotatedFieldRetrieverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n\tprivate AnnotatedFieldRetriever retriever;", "modifier": "@InjectMocks\n\tprivate", "type": "AnnotatedFieldRetriever", "declarator": "retriever", "var_name": "retriever"}], "file": "mockito-collections-core/src/test/java/uk/co/webamoeba/mockito/collections/util/AnnotatedFieldRetrieverTest.java"}, "test_case": {"identifier": "shouldGetAnnotatedFieldsGivenExtendedClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldGetAnnotatedFieldsGivenExtendedClass() {\n\t\t// Given\n\t\tClass<ExtendedClassWithAnnnotations> clazz = ExtendedClassWithAnnnotations.class;\n\t\tClass<? extends Annotation> annotationClass = InjectMocks.class;\n\n\t\t// When\n\t\tSet<Field> fields = retriever.getAnnotatedFields(clazz, annotationClass);\n\n\t\t// Then\n\t\tassertEquals(2, fields.size());\n\t\tassertTrue(fields.contains(getField(clazz, \"privateAnnotatedField\")));\n\t\tassertTrue(fields.contains(getField(ClassWithAnnnotations.class, \"privateAnnotatedField\")));\n\t}", "signature": "void shouldGetAnnotatedFieldsGivenExtendedClass()", "full_signature": "@Test public void shouldGetAnnotatedFieldsGivenExtendedClass()", "class_method_signature": "AnnotatedFieldRetrieverTest.shouldGetAnnotatedFieldsGivenExtendedClass()", "testcase": true, "constructor": false, "invocations": ["getAnnotatedFields", "assertEquals", "size", "assertTrue", "contains", "getField", "assertTrue", "contains", "getField"]}, "focal_class": {"identifier": "AnnotatedFieldRetriever", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getAnnotatedFields", "parameters": "(Class<?> clazz, Class<? extends Annotation> annotationClass)", "modifiers": "public", "return": "Set<Field>", "signature": "Set<Field> getAnnotatedFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "full_signature": "public Set<Field> getAnnotatedFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "class_method_signature": "AnnotatedFieldRetriever.getAnnotatedFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}], "file": "mockito-collections-core/src/main/java/uk/co/webamoeba/mockito/collections/util/AnnotatedFieldRetriever.java"}, "focal_method": {"identifier": "getAnnotatedFields", "parameters": "(Class<?> clazz, Class<? extends Annotation> annotationClass)", "modifiers": "public", "return": "Set<Field>", "body": "public Set<Field> getAnnotatedFields(Class<?> clazz, Class<? extends Annotation> annotationClass) {\n\t\tSet<Field> mockDependentFields = new HashSet<Field>();\n\t\twhile (clazz != Object.class) {\n\t\t\t// We use getDeclaredFields because we want to get fields that are not otherwise visible. This means we also\n\t\t\t// want to look through the inheritance hierarchy because getDeclaredFields will not do\n\t\t\t// this for us\n\t\t\tField[] fields = clazz.getDeclaredFields();\n\t\t\tfor (Field field : fields) {\n\t\t\t\tif (null != field.getAnnotation(annotationClass)) {\n\t\t\t\t\tmockDependentFields.add(field);\n\t\t\t\t}\n\t\t\t}\n\t\t\tclazz = clazz.getSuperclass();\n\t\t}\n\t\treturn mockDependentFields;\n\t}", "signature": "Set<Field> getAnnotatedFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "full_signature": "public Set<Field> getAnnotatedFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "class_method_signature": "AnnotatedFieldRetriever.getAnnotatedFields(Class<?> clazz, Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false, "invocations": ["getDeclaredFields", "getAnnotation", "add", "getSuperclass"]}, "repository": {"repo_id": 4835576, "url": "https://github.com/jameskennard/mockito-collections", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 792, "license": "licensed"}}