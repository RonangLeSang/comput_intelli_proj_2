{"test_class": {"identifier": "SimpleOneWayPropertyInfoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Mockery context;", "modifier": "private", "type": "Mockery", "declarator": "context", "var_name": "context"}], "file": "codegen/src/test/java/org/robobinding/codegen/viewbinding/SimpleOneWayPropertyInfoTest.java"}, "test_case": {"identifier": "givenPrimitivePropertyType_thenReturnBoxedType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void givenPrimitivePropertyType_thenReturnBoxedType() {\n\t\tfinal SetterElement setter = context.mock(SetterElement.class);\n\t\tfinal WrappedPrimitiveType primitiveType = context.mock(WrappedPrimitiveType.class);\n\t\tcontext.checking(new Expectations() {{\n\t\t    oneOf(setter).parameterType(); will(returnValue(primitiveType));\n\t\t    oneOf(primitiveType).isPrimitive(); will(returnValue(true));\n\t\t    oneOf(primitiveType).boxedClassName(); will(returnValue(Integer.class.getName()));\n\t\t}});\n\t\t\n\t\tSimpleOneWayPropertyInfo info = new SimpleOneWayPropertyInfo(setter);\n\t\tassertThat(info.propertyType(), equalTo(Integer.class.getName()));\n\t}", "signature": "void givenPrimitivePropertyType_thenReturnBoxedType()", "full_signature": "@Test public void givenPrimitivePropertyType_thenReturnBoxedType()", "class_method_signature": "SimpleOneWayPropertyInfoTest.givenPrimitivePropertyType_thenReturnBoxedType()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "checking", "parameterType", "oneOf", "will", "returnValue", "isPrimitive", "oneOf", "will", "returnValue", "boxedClassName", "oneOf", "will", "returnValue", "getName", "assertThat", "propertyType", "equalTo", "getName"]}, "focal_class": {"identifier": "SimpleOneWayPropertyInfo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SetterElement setter;", "modifier": "private final", "type": "SetterElement", "declarator": "setter", "var_name": "setter"}, {"original_string": "private JDefinedClass bindingType;", "modifier": "private", "type": "JDefinedClass", "declarator": "bindingType", "var_name": "bindingType"}], "methods": [{"identifier": "SimpleOneWayPropertyInfo", "parameters": "(SetterElement setter)", "modifiers": "public", "return": "", "signature": " SimpleOneWayPropertyInfo(SetterElement setter)", "full_signature": "public  SimpleOneWayPropertyInfo(SetterElement setter)", "class_method_signature": "SimpleOneWayPropertyInfo.SimpleOneWayPropertyInfo(SetterElement setter)", "testcase": false, "constructor": true}, {"identifier": "propertySetter", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String propertySetter()", "full_signature": "public String propertySetter()", "class_method_signature": "SimpleOneWayPropertyInfo.propertySetter()", "testcase": false, "constructor": false}, {"identifier": "propertyType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String propertyType()", "full_signature": "public String propertyType()", "class_method_signature": "SimpleOneWayPropertyInfo.propertyType()", "testcase": false, "constructor": false}, {"identifier": "propertyName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String propertyName()", "full_signature": "public String propertyName()", "class_method_signature": "SimpleOneWayPropertyInfo.propertyName()", "testcase": false, "constructor": false}, {"identifier": "getBindingClass", "parameters": "()", "modifiers": "public", "return": "JDefinedClass", "signature": "JDefinedClass getBindingClass()", "full_signature": "public JDefinedClass getBindingClass()", "class_method_signature": "SimpleOneWayPropertyInfo.getBindingClass()", "testcase": false, "constructor": false}, {"identifier": "defineBindingClass", "parameters": "(ClassDefinitionCallback callback)", "modifiers": "public", "return": "JDefinedClass", "signature": "JDefinedClass defineBindingClass(ClassDefinitionCallback callback)", "full_signature": "public JDefinedClass defineBindingClass(ClassDefinitionCallback callback)", "class_method_signature": "SimpleOneWayPropertyInfo.defineBindingClass(ClassDefinitionCallback callback)", "testcase": false, "constructor": false}, {"identifier": "bindingTypeName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String bindingTypeName()", "full_signature": " String bindingTypeName()", "class_method_signature": "SimpleOneWayPropertyInfo.bindingTypeName()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "SimpleOneWayPropertyInfo.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SimpleOneWayPropertyInfo.hashCode()", "testcase": false, "constructor": false}], "file": "codegen/src/main/java/org/robobinding/codegen/viewbinding/SimpleOneWayPropertyInfo.java"}, "focal_method": {"identifier": "propertyType", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String propertyType() {\n\t\tWrappedTypeMirror parameterType = setter.parameterType();\n\t\tif(parameterType.isPrimitive()) {\n\t\t\treturn ((WrappedPrimitiveType)parameterType).boxedClassName();\n\t\t} else {\n\t\t\treturn parameterType.className();\n\t\t}\n\t}", "signature": "String propertyType()", "full_signature": "public String propertyType()", "class_method_signature": "SimpleOneWayPropertyInfo.propertyType()", "testcase": false, "constructor": false, "invocations": ["parameterType", "isPrimitive", "boxedClassName", "className"]}, "repository": {"repo_id": 2408915, "url": "https://github.com/RoboBinding/RoboBinding", "language": "Java", "is_fork": false, "fork_count": 227, "stargazer_count": 1306, "size": 20509, "license": "licensed"}}