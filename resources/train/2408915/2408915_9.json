{"test_class": {"identifier": "MultiTypePropertyViewAttributeBinderTest", "superclass": "extends ViewAttributeContractTest<MultiTypePropertyViewAttributeBinder>", "interfaces": "", "fields": [{"original_string": "@Mock\n\tPropertyViewAttributeBinderProvider viewAttributeBinderProvider;", "modifier": "@Mock", "type": "PropertyViewAttributeBinderProvider", "declarator": "viewAttributeBinderProvider", "var_name": "viewAttributeBinderProvider"}, {"original_string": "@Mock\n\tValueModelAttribute attribute;", "modifier": "@Mock", "type": "ValueModelAttribute", "declarator": "attribute", "var_name": "attribute"}, {"original_string": "@Mock\n\tPropertyViewAttributeBinder viewAttributeBinder;", "modifier": "@Mock", "type": "PropertyViewAttributeBinder", "declarator": "viewAttributeBinder", "var_name": "viewAttributeBinder"}, {"original_string": "@Mock\n\tBindingContext bindingContext;", "modifier": "@Mock", "type": "BindingContext", "declarator": "bindingContext", "var_name": "bindingContext"}], "file": "framework/src/test/java/org/robobinding/viewattribute/property/MultiTypePropertyViewAttributeBinderTest.java"}, "test_case": {"identifier": "givenAMatchingViewAttributeBinder_whenBind_thenTheViewAttributeBinderIsBoundToContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void givenAMatchingViewAttributeBinder_whenBind_thenTheViewAttributeBinderIsBoundToContext() {\n\n\t\twhen(viewAttributeBinderProvider.create(any(Class.class))).thenReturn(viewAttributeBinder);\n\t\tMultiTypePropertyViewAttributeBinder multiTypeViewAttributeBinder = new MultiTypePropertyViewAttributeBinder(\n\t\t\t\tviewAttributeBinderProvider, attribute);\n\n\t\tmultiTypeViewAttributeBinder.bindTo(bindingContext);\n\n\t\tverify(viewAttributeBinder).bindTo(bindingContext);\n\t}", "signature": "void givenAMatchingViewAttributeBinder_whenBind_thenTheViewAttributeBinderIsBoundToContext()", "full_signature": "@Test public void givenAMatchingViewAttributeBinder_whenBind_thenTheViewAttributeBinderIsBoundToContext()", "class_method_signature": "MultiTypePropertyViewAttributeBinderTest.givenAMatchingViewAttributeBinder_whenBind_thenTheViewAttributeBinderIsBoundToContext()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "create", "any", "bindTo", "bindTo", "verify"]}, "focal_class": {"identifier": "MultiTypePropertyViewAttributeBinder", "superclass": "", "interfaces": "implements ViewAttributeBinder", "fields": [{"original_string": "private final PropertyViewAttributeBinderProvider viewAttributeBinderProvider;", "modifier": "private final", "type": "PropertyViewAttributeBinderProvider", "declarator": "viewAttributeBinderProvider", "var_name": "viewAttributeBinderProvider"}, {"original_string": "private final ValueModelAttribute attribute;", "modifier": "private final", "type": "ValueModelAttribute", "declarator": "attribute", "var_name": "attribute"}, {"original_string": "private PropertyViewAttributeBinder viewAttributeBinder;", "modifier": "private", "type": "PropertyViewAttributeBinder", "declarator": "viewAttributeBinder", "var_name": "viewAttributeBinder"}], "methods": [{"identifier": "MultiTypePropertyViewAttributeBinder", "parameters": "(PropertyViewAttributeBinderProvider viewAttributeBinderProvider, \n\t\t\tValueModelAttribute attribute)", "modifiers": "public", "return": "", "signature": " MultiTypePropertyViewAttributeBinder(PropertyViewAttributeBinderProvider viewAttributeBinderProvider, \n\t\t\tValueModelAttribute attribute)", "full_signature": "public  MultiTypePropertyViewAttributeBinder(PropertyViewAttributeBinderProvider viewAttributeBinderProvider, \n\t\t\tValueModelAttribute attribute)", "class_method_signature": "MultiTypePropertyViewAttributeBinder.MultiTypePropertyViewAttributeBinder(PropertyViewAttributeBinderProvider viewAttributeBinderProvider, \n\t\t\tValueModelAttribute attribute)", "testcase": false, "constructor": true}, {"identifier": "bindTo", "parameters": "(BindingContext bindingContext)", "modifiers": "@Override public", "return": "void", "signature": "void bindTo(BindingContext bindingContext)", "full_signature": "@Override public void bindTo(BindingContext bindingContext)", "class_method_signature": "MultiTypePropertyViewAttributeBinder.bindTo(BindingContext bindingContext)", "testcase": false, "constructor": false}, {"identifier": "initializeViewAttributeBinder", "parameters": "(BindingContext presentationModelAdapter)", "modifiers": "private", "return": "void", "signature": "void initializeViewAttributeBinder(BindingContext presentationModelAdapter)", "full_signature": "private void initializeViewAttributeBinder(BindingContext presentationModelAdapter)", "class_method_signature": "MultiTypePropertyViewAttributeBinder.initializeViewAttributeBinder(BindingContext presentationModelAdapter)", "testcase": false, "constructor": false}, {"identifier": "performBind", "parameters": "(BindingContext bindingContext)", "modifiers": "private", "return": "void", "signature": "void performBind(BindingContext bindingContext)", "full_signature": "private void performBind(BindingContext bindingContext)", "class_method_signature": "MultiTypePropertyViewAttributeBinder.performBind(BindingContext bindingContext)", "testcase": false, "constructor": false}, {"identifier": "preInitializeView", "parameters": "(BindingContext bindingContext)", "modifiers": "@Override public", "return": "void", "signature": "void preInitializeView(BindingContext bindingContext)", "full_signature": "@Override public void preInitializeView(BindingContext bindingContext)", "class_method_signature": "MultiTypePropertyViewAttributeBinder.preInitializeView(BindingContext bindingContext)", "testcase": false, "constructor": false}], "file": "framework/src/main/java/org/robobinding/viewattribute/property/MultiTypePropertyViewAttributeBinder.java"}, "focal_method": {"identifier": "bindTo", "parameters": "(BindingContext bindingContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void bindTo(BindingContext bindingContext) {\n\t\ttry {\n\t\t\tinitializeViewAttributeBinder(bindingContext);\n\t\t\t\n\t\t\tperformBind(bindingContext);\n\t\t} catch (RuntimeException e) {\n\t\t\tthrow new AttributeBindingException(attribute.getName(), e);\n\t\t}\n\t}", "signature": "void bindTo(BindingContext bindingContext)", "full_signature": "@Override public void bindTo(BindingContext bindingContext)", "class_method_signature": "MultiTypePropertyViewAttributeBinder.bindTo(BindingContext bindingContext)", "testcase": false, "constructor": false, "invocations": ["initializeViewAttributeBinder", "performBind", "getName"]}, "repository": {"repo_id": 2408915, "url": "https://github.com/RoboBinding/RoboBinding", "language": "Java", "is_fork": false, "fork_count": 227, "stargazer_count": 1306, "size": 20509, "license": "licensed"}}