{"test_class": {"identifier": "Vector3Test", "superclass": "", "interfaces": "", "fields": [], "file": "rajawali/src/test/java/org/rajawali3d/math/vector/Vector3Test.java"}, "test_case": {"identifier": "testIsUnit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsUnit() {\n        assertTrue(Vector3.X.isUnit());\n        assertTrue(Vector3.Y.isUnit());\n        assertTrue(Vector3.Z.isUnit());\n        assertFalse((new Vector3(1)).isUnit());\n        assertFalse((new Vector3(0)).isUnit());\n    }", "signature": "void testIsUnit()", "full_signature": "@Test public void testIsUnit()", "class_method_signature": "Vector3Test.testIsUnit()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isUnit", "assertTrue", "isUnit", "assertTrue", "isUnit", "assertFalse", "isUnit", "assertFalse", "isUnit"]}, "focal_class": {"identifier": "Vector3", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "public double x;", "modifier": "public", "type": "double", "declarator": "x", "var_name": "x"}, {"original_string": "public double y;", "modifier": "public", "type": "double", "declarator": "y", "var_name": "y"}, {"original_string": "public double z;", "modifier": "public", "type": "double", "declarator": "z", "var_name": "z"}, {"original_string": "@NonNull\n    public static final Vector3 X = new Vector3(1, 0, 0);", "modifier": "@NonNull\n    public static final", "type": "Vector3", "declarator": "X = new Vector3(1, 0, 0)", "var_name": "X"}, {"original_string": "@NonNull\n    public static final Vector3 Y = new Vector3(0, 1, 0);", "modifier": "@NonNull\n    public static final", "type": "Vector3", "declarator": "Y = new Vector3(0, 1, 0)", "var_name": "Y"}, {"original_string": "@NonNull\n    public static final Vector3 Z = new Vector3(0, 0, 1);", "modifier": "@NonNull\n    public static final", "type": "Vector3", "declarator": "Z = new Vector3(0, 0, 1)", "var_name": "Z"}, {"original_string": "@NonNull\n    public static final Vector3 NEG_X = new Vector3(-1, 0, 0);", "modifier": "@NonNull\n    public static final", "type": "Vector3", "declarator": "NEG_X = new Vector3(-1, 0, 0)", "var_name": "NEG_X"}, {"original_string": "@NonNull\n    public static final Vector3 NEG_Y = new Vector3(0, -1, 0);", "modifier": "@NonNull\n    public static final", "type": "Vector3", "declarator": "NEG_Y = new Vector3(0, -1, 0)", "var_name": "NEG_Y"}, {"original_string": "@NonNull\n    public static final Vector3 NEG_Z = new Vector3(0, 0, -1);", "modifier": "@NonNull\n    public static final", "type": "Vector3", "declarator": "NEG_Z = new Vector3(0, 0, -1)", "var_name": "NEG_Z"}, {"original_string": "@NonNull\n    public static final Vector3 ZERO = new Vector3(0, 0, 0);", "modifier": "@NonNull\n    public static final", "type": "Vector3", "declarator": "ZERO = new Vector3(0, 0, 0)", "var_name": "ZERO"}, {"original_string": "@NonNull\n    public static final Vector3 ONE = new Vector3(1.0, 1.0, 1.0);", "modifier": "@NonNull\n    public static final", "type": "Vector3", "declarator": "ONE = new Vector3(1.0, 1.0, 1.0)", "var_name": "ONE"}, {"original_string": "private Vector3 mTmpVector3 = null;", "modifier": "private", "type": "Vector3", "declarator": "mTmpVector3 = null", "var_name": "mTmpVector3"}, {"original_string": "private Matrix4 mTmpMatrix4 = null;", "modifier": "private", "type": "Matrix4", "declarator": "mTmpMatrix4 = null", "var_name": "mTmpMatrix4"}], "methods": [{"identifier": "Vector3", "parameters": "()", "modifiers": "public", "return": "", "signature": " Vector3()", "full_signature": "public  Vector3()", "class_method_signature": "Vector3.Vector3()", "testcase": false, "constructor": true}, {"identifier": "Vector3", "parameters": "(double from)", "modifiers": "public", "return": "", "signature": " Vector3(double from)", "full_signature": "public  Vector3(double from)", "class_method_signature": "Vector3.Vector3(double from)", "testcase": false, "constructor": true}, {"identifier": "Vector3", "parameters": "(@NonNull Vector3 from)", "modifiers": "public", "return": "", "signature": " Vector3(@NonNull Vector3 from)", "full_signature": "public  Vector3(@NonNull Vector3 from)", "class_method_signature": "Vector3.Vector3(@NonNull Vector3 from)", "testcase": false, "constructor": true}, {"identifier": "Vector3", "parameters": "(@NonNull @Size(min = 3) String[] values)", "modifiers": "public", "return": "", "signature": " Vector3(@NonNull @Size(min = 3) String[] values)", "full_signature": "public  Vector3(@NonNull @Size(min = 3) String[] values)", "class_method_signature": "Vector3.Vector3(@NonNull @Size(min = 3) String[] values)", "testcase": false, "constructor": true}, {"identifier": "Vector3", "parameters": "(@NonNull @Size(min = 3) double[] values)", "modifiers": "public", "return": "", "signature": " Vector3(@NonNull @Size(min = 3) double[] values)", "full_signature": "public  Vector3(@NonNull @Size(min = 3) double[] values)", "class_method_signature": "Vector3.Vector3(@NonNull @Size(min = 3) double[] values)", "testcase": false, "constructor": true}, {"identifier": "Vector3", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "", "signature": " Vector3(double x, double y, double z)", "full_signature": "public  Vector3(double x, double y, double z)", "class_method_signature": "Vector3.Vector3(double x, double y, double z)", "testcase": false, "constructor": true}, {"identifier": "setAll", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "Vector3", "signature": "Vector3 setAll(double x, double y, double z)", "full_signature": "public Vector3 setAll(double x, double y, double z)", "class_method_signature": "Vector3.setAll(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "setAll", "parameters": "(@NonNull Vector3 other)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 setAll(@NonNull Vector3 other)", "full_signature": "@NonNull public Vector3 setAll(@NonNull Vector3 other)", "class_method_signature": "Vector3.setAll(@NonNull Vector3 other)", "testcase": false, "constructor": false}, {"identifier": "setAll", "parameters": "(@NonNull Axis axis)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 setAll(@NonNull Axis axis)", "full_signature": "@NonNull public Vector3 setAll(@NonNull Axis axis)", "class_method_signature": "Vector3.setAll(@NonNull Axis axis)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 add(@NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 add(@NonNull Vector3 v)", "class_method_signature": "Vector3.add(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double x, double y, double z)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 add(double x, double y, double z)", "full_signature": "@NonNull public Vector3 add(double x, double y, double z)", "class_method_signature": "Vector3.add(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double value)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 add(double value)", "full_signature": "@NonNull public Vector3 add(double value)", "class_method_signature": "Vector3.add(double value)", "testcase": false, "constructor": false}, {"identifier": "addAndSet", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 addAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 addAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.addAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "addAndCreate", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 addAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public static Vector3 addAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.addAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(@NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 subtract(@NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 subtract(@NonNull Vector3 v)", "class_method_signature": "Vector3.subtract(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(double x, double y, double z)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 subtract(double x, double y, double z)", "full_signature": "@NonNull public Vector3 subtract(double x, double y, double z)", "class_method_signature": "Vector3.subtract(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(double value)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 subtract(double value)", "full_signature": "@NonNull public Vector3 subtract(double value)", "class_method_signature": "Vector3.subtract(double value)", "testcase": false, "constructor": false}, {"identifier": "subtractAndSet", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 subtractAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 subtractAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.subtractAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "subtractAndCreate", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 subtractAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public static Vector3 subtractAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.subtractAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(double value)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 multiply(double value)", "full_signature": "@NonNull public Vector3 multiply(double value)", "class_method_signature": "Vector3.multiply(double value)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(@NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 multiply(@NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 multiply(@NonNull Vector3 v)", "class_method_signature": "Vector3.multiply(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(@NonNull @Size(min = 16) double[] matrix)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 multiply(@NonNull @Size(min = 16) double[] matrix)", "full_signature": "@NonNull public Vector3 multiply(@NonNull @Size(min = 16) double[] matrix)", "class_method_signature": "Vector3.multiply(@NonNull @Size(min = 16) double[] matrix)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(@NonNull Matrix4 matrix)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 multiply(@NonNull Matrix4 matrix)", "full_signature": "@NonNull public Vector3 multiply(@NonNull Matrix4 matrix)", "class_method_signature": "Vector3.multiply(@NonNull Matrix4 matrix)", "testcase": false, "constructor": false}, {"identifier": "multiplyAndSet", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 multiplyAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 multiplyAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.multiplyAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "multiplyAndCreate", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 multiplyAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public static Vector3 multiplyAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.multiplyAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "multiplyAndCreate", "parameters": "(@NonNull Vector3 v, double value)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 multiplyAndCreate(@NonNull Vector3 v, double value)", "full_signature": "@NonNull public static Vector3 multiplyAndCreate(@NonNull Vector3 v, double value)", "class_method_signature": "Vector3.multiplyAndCreate(@NonNull Vector3 v, double value)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(double value)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 divide(double value)", "full_signature": "@NonNull public Vector3 divide(double value)", "class_method_signature": "Vector3.divide(double value)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(@NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 divide(@NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 divide(@NonNull Vector3 v)", "class_method_signature": "Vector3.divide(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "divideAndSet", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 divideAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 divideAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.divideAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "scaleAndSet", "parameters": "(@NonNull Vector3 v, double b)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 scaleAndSet(@NonNull Vector3 v, double b)", "full_signature": "@NonNull public Vector3 scaleAndSet(@NonNull Vector3 v, double b)", "class_method_signature": "Vector3.scaleAndSet(@NonNull Vector3 v, double b)", "testcase": false, "constructor": false}, {"identifier": "scaleAndCreate", "parameters": "(@NonNull Vector3 u, double v)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 scaleAndCreate(@NonNull Vector3 u, double v)", "full_signature": "@NonNull public static Vector3 scaleAndCreate(@NonNull Vector3 u, double v)", "class_method_signature": "Vector3.scaleAndCreate(@NonNull Vector3 u, double v)", "testcase": false, "constructor": false}, {"identifier": "rotateBy", "parameters": "(@NonNull Quaternion quaternion)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 rotateBy(@NonNull Quaternion quaternion)", "full_signature": "@NonNull public Vector3 rotateBy(@NonNull Quaternion quaternion)", "class_method_signature": "Vector3.rotateBy(@NonNull Quaternion quaternion)", "testcase": false, "constructor": false}, {"identifier": "rotateX", "parameters": "(double angle)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 rotateX(double angle)", "full_signature": "@NonNull public Vector3 rotateX(double angle)", "class_method_signature": "Vector3.rotateX(double angle)", "testcase": false, "constructor": false}, {"identifier": "rotateY", "parameters": "(double angle)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 rotateY(double angle)", "full_signature": "@NonNull public Vector3 rotateY(double angle)", "class_method_signature": "Vector3.rotateY(double angle)", "testcase": false, "constructor": false}, {"identifier": "rotateZ", "parameters": "(double angle)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 rotateZ(double angle)", "full_signature": "@NonNull public Vector3 rotateZ(double angle)", "class_method_signature": "Vector3.rotateZ(double angle)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double normalize()", "full_signature": "public double normalize()", "class_method_signature": "Vector3.normalize()", "testcase": false, "constructor": false}, {"identifier": "orthoNormalize", "parameters": "(@NonNull @Size(min = 2) Vector3[] vecs)", "modifiers": "public static", "return": "void", "signature": "void orthoNormalize(@NonNull @Size(min = 2) Vector3[] vecs)", "full_signature": "public static void orthoNormalize(@NonNull @Size(min = 2) Vector3[] vecs)", "class_method_signature": "Vector3.orthoNormalize(@NonNull @Size(min = 2) Vector3[] vecs)", "testcase": false, "constructor": false}, {"identifier": "orthoNormalize", "parameters": "(@NonNull Vector3 v1, @NonNull Vector3 v2)", "modifiers": "public static", "return": "void", "signature": "void orthoNormalize(@NonNull Vector3 v1, @NonNull Vector3 v2)", "full_signature": "public static void orthoNormalize(@NonNull Vector3 v1, @NonNull Vector3 v2)", "class_method_signature": "Vector3.orthoNormalize(@NonNull Vector3 v1, @NonNull Vector3 v2)", "testcase": false, "constructor": false}, {"identifier": "inverse", "parameters": "()", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 inverse()", "full_signature": "@NonNull public Vector3 inverse()", "class_method_signature": "Vector3.inverse()", "testcase": false, "constructor": false}, {"identifier": "invertAndCreate", "parameters": "()", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 invertAndCreate()", "full_signature": "@NonNull public Vector3 invertAndCreate()", "class_method_signature": "Vector3.invertAndCreate()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(double x, double y, double z)", "modifiers": "public static", "return": "double", "signature": "double length(double x, double y, double z)", "full_signature": "public static double length(double x, double y, double z)", "class_method_signature": "Vector3.length(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(@NonNull Vector3 v)", "modifiers": "public static", "return": "double", "signature": "double length(@NonNull Vector3 v)", "full_signature": "public static double length(@NonNull Vector3 v)", "class_method_signature": "Vector3.length(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "length2", "parameters": "(@NonNull Vector3 v)", "modifiers": "public static", "return": "double", "signature": "double length2(@NonNull Vector3 v)", "full_signature": "public static double length2(@NonNull Vector3 v)", "class_method_signature": "Vector3.length2(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "length2", "parameters": "(double x, double y, double z)", "modifiers": "public static", "return": "double", "signature": "double length2(double x, double y, double z)", "full_signature": "public static double length2(double x, double y, double z)", "class_method_signature": "Vector3.length2(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double length()", "full_signature": "public double length()", "class_method_signature": "Vector3.length()", "testcase": false, "constructor": false}, {"identifier": "length2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double length2()", "full_signature": "public double length2()", "class_method_signature": "Vector3.length2()", "testcase": false, "constructor": false}, {"identifier": "distanceTo", "parameters": "(@NonNull Vector3 v)", "modifiers": "public", "return": "double", "signature": "double distanceTo(@NonNull Vector3 v)", "full_signature": "public double distanceTo(@NonNull Vector3 v)", "class_method_signature": "Vector3.distanceTo(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "distanceTo", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "double", "signature": "double distanceTo(double x, double y, double z)", "full_signature": "public double distanceTo(double x, double y, double z)", "class_method_signature": "Vector3.distanceTo(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "distanceTo", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "public static", "return": "double", "signature": "double distanceTo(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "public static double distanceTo(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.distanceTo(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "distanceTo", "parameters": "(double x1, double y1, double z1, double x2, double y2, double z2)", "modifiers": "public static", "return": "double", "signature": "double distanceTo(double x1, double y1, double z1, double x2, double y2, double z2)", "full_signature": "public static double distanceTo(double x1, double y1, double z1, double x2, double y2, double z2)", "class_method_signature": "Vector3.distanceTo(double x1, double y1, double z1, double x2, double y2, double z2)", "testcase": false, "constructor": false}, {"identifier": "distanceTo2", "parameters": "(@NonNull Vector3 v)", "modifiers": "public", "return": "double", "signature": "double distanceTo2(@NonNull Vector3 v)", "full_signature": "public double distanceTo2(@NonNull Vector3 v)", "class_method_signature": "Vector3.distanceTo2(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "distanceTo2", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "double", "signature": "double distanceTo2(double x, double y, double z)", "full_signature": "public double distanceTo2(double x, double y, double z)", "class_method_signature": "Vector3.distanceTo2(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "distanceTo2", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "public static", "return": "double", "signature": "double distanceTo2(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "public static double distanceTo2(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.distanceTo2(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "distanceTo2", "parameters": "(double x1, double y1, double z1, double x2, double y2, double z2)", "modifiers": "public static", "return": "double", "signature": "double distanceTo2(double x1, double y1, double z1, double x2, double y2, double z2)", "full_signature": "public static double distanceTo2(double x1, double y1, double z1, double x2, double y2, double z2)", "class_method_signature": "Vector3.distanceTo2(double x1, double y1, double z1, double x2, double y2, double z2)", "testcase": false, "constructor": false}, {"identifier": "absoluteValue", "parameters": "()", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 absoluteValue()", "full_signature": "@NonNull public Vector3 absoluteValue()", "class_method_signature": "Vector3.absoluteValue()", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "(@NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 project(@NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 project(@NonNull Vector3 v)", "class_method_signature": "Vector3.project(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "(@NonNull @Size(min = 16) double[] matrix)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 project(@NonNull @Size(min = 16) double[] matrix)", "full_signature": "@NonNull public Vector3 project(@NonNull @Size(min = 16) double[] matrix)", "class_method_signature": "Vector3.project(@NonNull @Size(min = 16) double[] matrix)", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "(@NonNull Matrix4 matrix)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 project(@NonNull Matrix4 matrix)", "full_signature": "@NonNull public Vector3 project(@NonNull Matrix4 matrix)", "class_method_signature": "Vector3.project(@NonNull Matrix4 matrix)", "testcase": false, "constructor": false}, {"identifier": "projectAndCreate", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 projectAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public static Vector3 projectAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.projectAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "angle", "parameters": "(@NonNull Vector3 v)", "modifiers": "public", "return": "double", "signature": "double angle(@NonNull Vector3 v)", "full_signature": "public double angle(@NonNull Vector3 v)", "class_method_signature": "Vector3.angle(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "public static", "return": "double", "signature": "double dot(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "public static double dot(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.dot(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(@NonNull Vector3 v)", "modifiers": "public", "return": "double", "signature": "double dot(@NonNull Vector3 v)", "full_signature": "public double dot(@NonNull Vector3 v)", "class_method_signature": "Vector3.dot(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "double", "signature": "double dot(double x, double y, double z)", "full_signature": "public double dot(double x, double y, double z)", "class_method_signature": "Vector3.dot(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(final double x1, final double y1, final double z1,\n                             final double x2, final double y2, final double z2)", "modifiers": "public static", "return": "double", "signature": "double dot(final double x1, final double y1, final double z1,\n                             final double x2, final double y2, final double z2)", "full_signature": "public static double dot(final double x1, final double y1, final double z1,\n                             final double x2, final double y2, final double z2)", "class_method_signature": "Vector3.dot(final double x1, final double y1, final double z1,\n                             final double x2, final double y2, final double z2)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(@NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 cross(@NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 cross(@NonNull Vector3 v)", "class_method_signature": "Vector3.cross(@NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(double x, double y, double z)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 cross(double x, double y, double z)", "full_signature": "@NonNull public Vector3 cross(double x, double y, double z)", "class_method_signature": "Vector3.cross(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "crossAndSet", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 crossAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public Vector3 crossAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.crossAndSet(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "crossAndCreate", "parameters": "(@NonNull Vector3 u, @NonNull Vector3 v)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 crossAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "full_signature": "@NonNull public static Vector3 crossAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "class_method_signature": "Vector3.crossAndCreate(@NonNull Vector3 u, @NonNull Vector3 v)", "testcase": false, "constructor": false}, {"identifier": "getRotationTo", "parameters": "(@NonNull Vector3 direction)", "modifiers": "@NonNull public", "return": "Quaternion", "signature": "Quaternion getRotationTo(@NonNull Vector3 direction)", "full_signature": "@NonNull public Quaternion getRotationTo(@NonNull Vector3 direction)", "class_method_signature": "Vector3.getRotationTo(@NonNull Vector3 direction)", "testcase": false, "constructor": false}, {"identifier": "lerp", "parameters": "(@NonNull Vector3 target, double t)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 lerp(@NonNull Vector3 target, double t)", "full_signature": "@NonNull public Vector3 lerp(@NonNull Vector3 target, double t)", "class_method_signature": "Vector3.lerp(@NonNull Vector3 target, double t)", "testcase": false, "constructor": false}, {"identifier": "lerpAndSet", "parameters": "(@NonNull Vector3 from, @NonNull Vector3 to, double amount)", "modifiers": "@NonNull public", "return": "Vector3", "signature": "Vector3 lerpAndSet(@NonNull Vector3 from, @NonNull Vector3 to, double amount)", "full_signature": "@NonNull public Vector3 lerpAndSet(@NonNull Vector3 from, @NonNull Vector3 to, double amount)", "class_method_signature": "Vector3.lerpAndSet(@NonNull Vector3 from, @NonNull Vector3 to, double amount)", "testcase": false, "constructor": false}, {"identifier": "lerpAndCreate", "parameters": "(@NonNull Vector3 from, @NonNull Vector3 to, double amount)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 lerpAndCreate(@NonNull Vector3 from, @NonNull Vector3 to, double amount)", "full_signature": "@NonNull public static Vector3 lerpAndCreate(@NonNull Vector3 from, @NonNull Vector3 to, double amount)", "class_method_signature": "Vector3.lerpAndCreate(@NonNull Vector3 from, @NonNull Vector3 to, double amount)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "Vector3", "signature": "Vector3 clone()", "full_signature": "@NonNull @Override public Vector3 clone()", "class_method_signature": "Vector3.clone()", "testcase": false, "constructor": false}, {"identifier": "isUnit", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnit()", "full_signature": "public boolean isUnit()", "class_method_signature": "Vector3.isUnit()", "testcase": false, "constructor": false}, {"identifier": "isUnit", "parameters": "(double margin)", "modifiers": "public", "return": "boolean", "signature": "boolean isUnit(double margin)", "full_signature": "public boolean isUnit(double margin)", "class_method_signature": "Vector3.isUnit(double margin)", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "Vector3.isZero()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(double margin)", "modifiers": "public", "return": "boolean", "signature": "boolean isZero(double margin)", "full_signature": "public boolean isZero(double margin)", "class_method_signature": "Vector3.isZero(double margin)", "testcase": false, "constructor": false}, {"identifier": "getAxisVector", "parameters": "(@NonNull Axis axis)", "modifiers": "@NonNull public static", "return": "Vector3", "signature": "Vector3 getAxisVector(@NonNull Axis axis)", "full_signature": "@NonNull public static Vector3 getAxisVector(@NonNull Axis axis)", "class_method_signature": "Vector3.getAxisVector(@NonNull Axis axis)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Vector3.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@NonNull Vector3 obj, double error)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(@NonNull Vector3 obj, double error)", "full_signature": "public boolean equals(@NonNull Vector3 obj, double error)", "class_method_signature": "Vector3.equals(@NonNull Vector3 obj, double error)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(@Size(min = 3) double[] array)", "modifiers": "@NonNull @Size(min = 3) public", "return": "double[]", "signature": "double[] toArray(@Size(min = 3) double[] array)", "full_signature": "@NonNull @Size(min = 3) public double[] toArray(@Size(min = 3) double[] array)", "class_method_signature": "Vector3.toArray(@Size(min = 3) double[] array)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@NonNull @Size(3) public", "return": "double[]", "signature": "double[] toArray()", "full_signature": "@NonNull @Size(3) public double[] toArray()", "class_method_signature": "Vector3.toArray()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String toString()", "full_signature": "@NonNull @Override public String toString()", "class_method_signature": "Vector3.toString()", "testcase": false, "constructor": false}], "file": "rajawali/src/main/java/org/rajawali3d/math/vector/Vector3.java"}, "focal_method": {"identifier": "isUnit", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isUnit() {\n        return isUnit(1e-8);\n    }", "signature": "boolean isUnit()", "full_signature": "public boolean isUnit()", "class_method_signature": "Vector3.isUnit()", "testcase": false, "constructor": false, "invocations": ["isUnit"]}, "repository": {"repo_id": 2011647, "url": "https://github.com/Rajawali/Rajawali", "language": "Java", "is_fork": false, "fork_count": 666, "stargazer_count": 1984, "size": 83746, "license": "licensed"}}