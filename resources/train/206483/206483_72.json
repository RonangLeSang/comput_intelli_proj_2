{"test_class": {"identifier": "DefaultProblemTest", "superclass": "", "interfaces": "", "fields": [], "file": "maven-builder-support/src/test/java/org/apache/maven/building/DefaultProblemTest.java"}, "test_case": {"identifier": "testGetSeverity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSeverity()\n    {\n        DefaultProblem problem = new DefaultProblem( null, null, null, -1, -1, null );\n        assertEquals( Severity.ERROR, problem.getSeverity() );\n\n        problem = new DefaultProblem( null, Severity.FATAL, null, -1, -1, null );\n        assertEquals( Severity.FATAL, problem.getSeverity() );\n        \n        problem = new DefaultProblem( null, Severity.ERROR, null, -1, -1, null );\n        assertEquals( Severity.ERROR, problem.getSeverity() );\n\n        problem = new DefaultProblem( null, Severity.WARNING, null, -1, -1, null );\n        assertEquals( Severity.WARNING, problem.getSeverity() );\n    }", "signature": "void testGetSeverity()", "full_signature": "@Test public void testGetSeverity()", "class_method_signature": "DefaultProblemTest.testGetSeverity()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getSeverity", "assertEquals", "getSeverity", "assertEquals", "getSeverity", "assertEquals", "getSeverity"]}, "focal_class": {"identifier": "DefaultProblem", "superclass": "", "interfaces": "implements Problem", "fields": [{"original_string": "private final String source;", "modifier": "private final", "type": "String", "declarator": "source", "var_name": "source"}, {"original_string": "private final int lineNumber;", "modifier": "private final", "type": "int", "declarator": "lineNumber", "var_name": "lineNumber"}, {"original_string": "private final int columnNumber;", "modifier": "private final", "type": "int", "declarator": "columnNumber", "var_name": "columnNumber"}, {"original_string": "private final String message;", "modifier": "private final", "type": "String", "declarator": "message", "var_name": "message"}, {"original_string": "private final Exception exception;", "modifier": "private final", "type": "Exception", "declarator": "exception", "var_name": "exception"}, {"original_string": "private final Severity severity;", "modifier": "private final", "type": "Severity", "declarator": "severity", "var_name": "severity"}], "methods": [{"identifier": "DefaultProblem", "parameters": "( String message, Severity severity, String source, int lineNumber, int columnNumber,\n                                   Exception exception )", "modifiers": "", "return": "", "signature": " DefaultProblem( String message, Severity severity, String source, int lineNumber, int columnNumber,\n                                   Exception exception )", "full_signature": "  DefaultProblem( String message, Severity severity, String source, int lineNumber, int columnNumber,\n                                   Exception exception )", "class_method_signature": "DefaultProblem.DefaultProblem( String message, Severity severity, String source, int lineNumber, int columnNumber,\n                                   Exception exception )", "testcase": false, "constructor": true}, {"identifier": "getSource", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSource()", "full_signature": "public String getSource()", "class_method_signature": "DefaultProblem.getSource()", "testcase": false, "constructor": false}, {"identifier": "getLineNumber", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLineNumber()", "full_signature": "public int getLineNumber()", "class_method_signature": "DefaultProblem.getLineNumber()", "testcase": false, "constructor": false}, {"identifier": "getColumnNumber", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumnNumber()", "full_signature": "public int getColumnNumber()", "class_method_signature": "DefaultProblem.getColumnNumber()", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLocation()", "full_signature": "public String getLocation()", "class_method_signature": "DefaultProblem.getLocation()", "testcase": false, "constructor": false}, {"identifier": "getException", "parameters": "()", "modifiers": "public", "return": "Exception", "signature": "Exception getException()", "full_signature": "public Exception getException()", "class_method_signature": "DefaultProblem.getException()", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMessage()", "full_signature": "public String getMessage()", "class_method_signature": "DefaultProblem.getMessage()", "testcase": false, "constructor": false}, {"identifier": "getSeverity", "parameters": "()", "modifiers": "public", "return": "Severity", "signature": "Severity getSeverity()", "full_signature": "public Severity getSeverity()", "class_method_signature": "DefaultProblem.getSeverity()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DefaultProblem.toString()", "testcase": false, "constructor": false}], "file": "maven-builder-support/src/main/java/org/apache/maven/building/DefaultProblem.java"}, "focal_method": {"identifier": "getSeverity", "parameters": "()", "modifiers": "public", "return": "Severity", "body": "public Severity getSeverity()\n    {\n        return severity;\n    }", "signature": "Severity getSeverity()", "full_signature": "public Severity getSeverity()", "class_method_signature": "DefaultProblem.getSeverity()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 206483, "url": "https://github.com/apache/maven", "stars": 1997, "created": "5/21/2009 3:22:03 AM +00:00", "updates": "2020-01-27T15:31:10+00:00", "fork": "False", "license": "licensed"}}