{"test_class": {"identifier": "InstallerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private Installer install;", "modifier": "private", "type": "Installer", "declarator": "install", "var_name": "install"}, {"original_string": "private Path distributionDir;", "modifier": "private", "type": "Path", "declarator": "distributionDir", "var_name": "distributionDir"}, {"original_string": "private Path zipStore;", "modifier": "private", "type": "Path", "declarator": "zipStore", "var_name": "zipStore"}, {"original_string": "private Path mavenHomeDir;", "modifier": "private", "type": "Path", "declarator": "mavenHomeDir", "var_name": "mavenHomeDir"}, {"original_string": "private Path zipDestination;", "modifier": "private", "type": "Path", "declarator": "zipDestination", "var_name": "zipDestination"}, {"original_string": "private WrapperConfiguration configuration = new WrapperConfiguration();", "modifier": "private", "type": "WrapperConfiguration", "declarator": "configuration = new WrapperConfiguration()", "var_name": "configuration"}, {"original_string": "private Downloader download;", "modifier": "private", "type": "Downloader", "declarator": "download", "var_name": "download"}, {"original_string": "private PathAssembler pathAssembler;", "modifier": "private", "type": "PathAssembler", "declarator": "pathAssembler", "var_name": "pathAssembler"}, {"original_string": "private PathAssembler.LocalDistribution localDistribution;", "modifier": "private", "type": "PathAssembler.LocalDistribution", "declarator": "localDistribution", "var_name": "localDistribution"}], "file": "maven-wrapper/src/test/java/org/apache/maven/wrapper/InstallerTest.java"}, "test_case": {"identifier": "testCreateDistWithExistingDistribution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateDistWithExistingDistribution()\n        throws Exception\n    {\n        Files.createFile( zipDestination );\n\n        Files.createDirectories( mavenHomeDir );\n        Path someFile = mavenHomeDir.resolve( \"some-file\" );\n        Files.createFile( someFile );\n\n        Path homeDir = install.createDist( configuration );\n\n        Assert.assertEquals( mavenHomeDir, homeDir );\n        Assert.assertTrue( Files.isDirectory( mavenHomeDir ) );\n        Assert.assertTrue( Files.exists( homeDir.resolve( \"some-file\" ) ) );\n        Assert.assertTrue( Files.exists( zipDestination ) );\n\n        Assert.assertEquals( localDistribution, pathAssembler.getDistribution( configuration ) );\n        Assert.assertEquals( distributionDir, localDistribution.getDistributionDir() );\n        Assert.assertEquals( zipDestination, localDistribution.getZipFile() );\n    }", "signature": "void testCreateDistWithExistingDistribution()", "full_signature": "@Test public void testCreateDistWithExistingDistribution()", "class_method_signature": "InstallerTest.testCreateDistWithExistingDistribution()", "testcase": true, "constructor": false, "invocations": ["createFile", "createDirectories", "resolve", "createFile", "createDist", "assertEquals", "assertTrue", "isDirectory", "assertTrue", "exists", "resolve", "assertTrue", "exists", "assertEquals", "getDistribution", "assertEquals", "getDistributionDir", "assertEquals", "getZipFile"]}, "focal_class": {"identifier": "Installer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_DISTRIBUTION_PATH = \"wrapper/dists\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_DISTRIBUTION_PATH = \"wrapper/dists\"", "var_name": "DEFAULT_DISTRIBUTION_PATH"}, {"original_string": "private final Downloader download;", "modifier": "private final", "type": "Downloader", "declarator": "download", "var_name": "download"}, {"original_string": "private final PathAssembler pathAssembler;", "modifier": "private final", "type": "PathAssembler", "declarator": "pathAssembler", "var_name": "pathAssembler"}], "methods": [{"identifier": "Installer", "parameters": "( Downloader download, PathAssembler pathAssembler )", "modifiers": "public", "return": "", "signature": " Installer( Downloader download, PathAssembler pathAssembler )", "full_signature": "public  Installer( Downloader download, PathAssembler pathAssembler )", "class_method_signature": "Installer.Installer( Downloader download, PathAssembler pathAssembler )", "testcase": false, "constructor": true}, {"identifier": "createDist", "parameters": "( WrapperConfiguration configuration )", "modifiers": "public", "return": "Path", "signature": "Path createDist( WrapperConfiguration configuration )", "full_signature": "public Path createDist( WrapperConfiguration configuration )", "class_method_signature": "Installer.createDist( WrapperConfiguration configuration )", "testcase": false, "constructor": false}, {"identifier": "listDirs", "parameters": "( Path distDir )", "modifiers": "private", "return": "List<Path>", "signature": "List<Path> listDirs( Path distDir )", "full_signature": "private List<Path> listDirs( Path distDir )", "class_method_signature": "Installer.listDirs( Path distDir )", "testcase": false, "constructor": false}, {"identifier": "setExecutablePermissions", "parameters": "( Path mavenHome )", "modifiers": "private", "return": "void", "signature": "void setExecutablePermissions( Path mavenHome )", "full_signature": "private void setExecutablePermissions( Path mavenHome )", "class_method_signature": "Installer.setExecutablePermissions( Path mavenHome )", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "private boolean isWindows()", "class_method_signature": "Installer.isWindows()", "testcase": false, "constructor": false}, {"identifier": "unzip", "parameters": "( Path zip, Path dest )", "modifiers": "private", "return": "void", "signature": "void unzip( Path zip, Path dest )", "full_signature": "private void unzip( Path zip, Path dest )", "class_method_signature": "Installer.unzip( Path zip, Path dest )", "testcase": false, "constructor": false}], "file": "maven-wrapper/src/main/java/org/apache/maven/wrapper/Installer.java"}, "focal_method": {"identifier": "createDist", "parameters": "( WrapperConfiguration configuration )", "modifiers": "public", "return": "Path", "body": "public Path createDist( WrapperConfiguration configuration )\n        throws IOException, URISyntaxException\n    {\n        URI distributionUrl;\n        String mvnwRepoUrl = System.getenv( MavenWrapperMain.MVNW_REPOURL );\n        if ( mvnwRepoUrl != null && !mvnwRepoUrl.isEmpty() )\n        {\n            distributionUrl = new URI( mvnwRepoUrl + \"/\" + MavenWrapperMain.MVN_PATH );\n            Logger.info( \"Detected MVNW_REPOURL environment variable \" + mvnwRepoUrl );\n        }\n        else\n        {\n            distributionUrl = configuration.getDistribution();\n        }\n        Logger.info( \"Downloading Maven binary from \" + distributionUrl );\n        boolean alwaysDownload = configuration.isAlwaysDownload();\n        boolean alwaysUnpack = configuration.isAlwaysUnpack();\n\n        PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution( configuration );\n\n        Path localZipFile = localDistribution.getZipFile();\n        boolean downloaded = false;\n        if ( alwaysDownload || !Files.exists( localZipFile ) )\n        {\n            Path tmpZipFile = localZipFile.resolveSibling( localZipFile.getFileName() + \".part\" );\n            Files.deleteIfExists( tmpZipFile );\n            Logger.info( \"Downloading \" + distributionUrl );\n            download.download( distributionUrl, tmpZipFile );\n            Files.move( tmpZipFile, localZipFile );\n            downloaded = true;\n        }\n\n        Path distDir = localDistribution.getDistributionDir();\n        List<Path> dirs = listDirs( distDir );\n\n        if ( downloaded || alwaysUnpack || dirs.isEmpty() )\n        {\n            Files.walkFileTree( distDir.toAbsolutePath(), new SimpleFileVisitor<Path>()\n            {\n                @Override\n                public FileVisitResult postVisitDirectory( Path dir, IOException exc )\n                    throws IOException\n                {\n                    if ( dir.getParent().equals( distDir ) )\n                    {\n                        Logger.info( \"Deleting directory \" + distDir.toAbsolutePath() );\n                        Files.delete( dir );\n                    }\n                    return FileVisitResult.CONTINUE;\n                }\n\n                public FileVisitResult visitFile( Path file, BasicFileAttributes attrs )\n                    throws IOException\n                {\n                    if ( !file.getParent().equals( distDir ) )\n                    {\n                        Files.delete( file );\n                    }\n                    return FileVisitResult.CONTINUE;\n                };\n            } );\n\n            Logger.info( \"Unzipping \" + localZipFile.toAbsolutePath() + \" to \" + distDir.toAbsolutePath() );\n            unzip( localZipFile, distDir );\n\n            dirs = listDirs( distDir );\n            if ( dirs.isEmpty() )\n            {\n                throw new RuntimeException( String.format( \n                   \"Maven distribution '%s' does not contain any directories. Expected to find exactly 1 directory.\",\n                   distributionUrl ) );\n            }\n            setExecutablePermissions( dirs.get( 0 ) );\n        }\n        if ( dirs.size() != 1 )\n        {\n            throw new IllegalStateException( String.format( \n                   \"Maven distribution '%s' contains too many directories. Expected to find exactly 1 directory.\",\n                   distributionUrl ) );\n        }\n        return dirs.get( 0 );\n    }", "signature": "Path createDist( WrapperConfiguration configuration )", "full_signature": "public Path createDist( WrapperConfiguration configuration )", "class_method_signature": "Installer.createDist( WrapperConfiguration configuration )", "testcase": false, "constructor": false, "invocations": ["getenv", "isEmpty", "info", "getDistribution", "info", "isAlwaysDownload", "isAlwaysUnpack", "getDistribution", "getZipFile", "exists", "resolveSibling", "getFileName", "deleteIfExists", "info", "download", "move", "getDistributionDir", "listDirs", "isEmpty", "walkFileTree", "toAbsolutePath", "equals", "getParent", "info", "toAbsolutePath", "delete", "equals", "getParent", "delete", "info", "toAbsolutePath", "toAbsolutePath", "unzip", "listDirs", "isEmpty", "format", "setExecutablePermissions", "get", "size", "format", "get"]}, "repository": {"repo_id": 206483, "url": "https://github.com/apache/maven", "stars": 1997, "created": "5/21/2009 3:22:03 AM +00:00", "updates": "2020-01-27T15:31:10+00:00", "fork": "False", "license": "licensed"}}