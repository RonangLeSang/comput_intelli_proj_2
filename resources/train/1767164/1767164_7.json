{"test_class": {"identifier": "ResthubExceptionHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResthubExceptionHandler resthubHandler = new ResthubExceptionHandler();", "modifier": "private", "type": "ResthubExceptionHandler", "declarator": "resthubHandler = new ResthubExceptionHandler()", "var_name": "resthubHandler"}, {"original_string": "private WebRequest webRequest = mock(WebRequest.class);", "modifier": "private", "type": "WebRequest", "declarator": "webRequest = mock(WebRequest.class)", "var_name": "webRequest"}], "file": "resthub-web/resthub-web-server/src/test/java/org/resthub/web/ResthubExceptionHandlerTest.java"}, "test_case": {"identifier": "testIllegalArgumentException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIllegalArgumentException() {\n        IllegalArgumentException ex = new IllegalArgumentException();\n        ResponseEntity<Object> response = this.resthubHandler.handleCustomException(ex, this.webRequest);\n\n        Assertions.assertThat(response).isNotNull();\n        Assertions.assertThat(response.getStatusCode()).isNotNull().isEqualTo(HttpStatus.BAD_REQUEST);\n        Assertions.assertThat(response.getBody()).isNotNull().isInstanceOf(RestError.class);\n        RestError restError = (RestError)response.getBody();\n        Assertions.assertThat(restError.getCode()).isEqualTo(HttpStatus.BAD_REQUEST.value());\n        Assertions.assertThat(restError.getStatus()).isEqualTo(HttpStatus.BAD_REQUEST.getReasonPhrase());\n        Assertions.assertThat(restError.getThrowable()).isEqualTo(ex);\n    }", "signature": "void testIllegalArgumentException()", "full_signature": "@Test public void testIllegalArgumentException()", "class_method_signature": "ResthubExceptionHandlerTest.testIllegalArgumentException()", "testcase": true, "constructor": false, "invocations": ["handleCustomException", "isNotNull", "assertThat", "isEqualTo", "isNotNull", "assertThat", "getStatusCode", "isInstanceOf", "isNotNull", "assertThat", "getBody", "getBody", "isEqualTo", "assertThat", "getCode", "value", "isEqualTo", "assertThat", "getStatus", "getReasonPhrase", "isEqualTo", "assertThat", "getThrowable"]}, "focal_class": {"identifier": "ResthubExceptionHandler", "superclass": "extends ResponseEntityExceptionHandler", "interfaces": "", "fields": [], "methods": [{"identifier": "handleCustomException", "parameters": "(Exception ex, WebRequest request)", "modifiers": "@ExceptionHandler(value={ IllegalArgumentException.class, ValidationException.class, NotFoundException.class, NotImplementedException.class }) public", "return": "ResponseEntity<Object>", "signature": "ResponseEntity<Object> handleCustomException(Exception ex, WebRequest request)", "full_signature": "@ExceptionHandler(value={ IllegalArgumentException.class, ValidationException.class, NotFoundException.class, NotImplementedException.class }) public ResponseEntity<Object> handleCustomException(Exception ex, WebRequest request)", "class_method_signature": "ResthubExceptionHandler.handleCustomException(Exception ex, WebRequest request)", "testcase": false, "constructor": false}, {"identifier": "buildRestError", "parameters": "(Exception ex, HttpStatus status)", "modifiers": "private", "return": "RestError", "signature": "RestError buildRestError(Exception ex, HttpStatus status)", "full_signature": "private RestError buildRestError(Exception ex, HttpStatus status)", "class_method_signature": "ResthubExceptionHandler.buildRestError(Exception ex, HttpStatus status)", "testcase": false, "constructor": false}], "file": "resthub-web/resthub-web-server/src/main/java/org/resthub/web/ResthubExceptionHandler.java"}, "focal_method": {"identifier": "handleCustomException", "parameters": "(Exception ex, WebRequest request)", "modifiers": "@ExceptionHandler(value={ IllegalArgumentException.class, ValidationException.class, NotFoundException.class, NotImplementedException.class }) public", "return": "ResponseEntity<Object>", "body": "@ExceptionHandler(value={\n            IllegalArgumentException.class,\n            ValidationException.class,\n            NotFoundException.class,\n            NotImplementedException.class\n    })\n    public ResponseEntity<Object> handleCustomException(Exception ex, WebRequest request) {\n\n        HttpHeaders headers = new HttpHeaders();\n        HttpStatus status;\n\n        if (ex instanceof IllegalArgumentException) {\n            status = HttpStatus.BAD_REQUEST;\n        } else if (ex instanceof ValidationException) {\n            status = HttpStatus.BAD_REQUEST;\n        } else if (ex instanceof NotFoundException) {\n            status = HttpStatus.NOT_FOUND;\n        } else if (ex instanceof NotImplementedException) {\n            status = HttpStatus.NOT_IMPLEMENTED;\n        } else {\n            logger.warn(\"Unknown exception type: \" + ex.getClass().getName());\n            status = HttpStatus.INTERNAL_SERVER_ERROR;\n            return handleExceptionInternal(ex, null, headers, status, request);\n        }\n\n        return handleExceptionInternal(ex, buildRestError(ex, status), headers, status, request);\n    }", "signature": "ResponseEntity<Object> handleCustomException(Exception ex, WebRequest request)", "full_signature": "@ExceptionHandler(value={ IllegalArgumentException.class, ValidationException.class, NotFoundException.class, NotImplementedException.class }) public ResponseEntity<Object> handleCustomException(Exception ex, WebRequest request)", "class_method_signature": "ResthubExceptionHandler.handleCustomException(Exception ex, WebRequest request)", "testcase": false, "constructor": false, "invocations": ["warn", "getName", "getClass", "handleExceptionInternal", "handleExceptionInternal", "buildRestError"]}, "repository": {"repo_id": 1767164, "url": "https://github.com/resthub/resthub-spring-stack", "language": "Java", "is_fork": false, "fork_count": 69, "stargazer_count": 120, "size": 7528, "license": "licensed"}}