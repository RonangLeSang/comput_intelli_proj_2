{"test_class": {"identifier": "SingleRouteTraverserTest", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private Collection<IntersectionNode> leaves;", "modifier": "private", "type": "Collection<IntersectionNode>", "declarator": "leaves", "var_name": "leaves"}, {"original_string": "private IntersectionNode nodeA;", "modifier": "private", "type": "IntersectionNode", "declarator": "nodeA", "var_name": "nodeA"}, {"original_string": "private IntersectionNode nodeB;", "modifier": "private", "type": "IntersectionNode", "declarator": "nodeB", "var_name": "nodeB"}], "file": "osm-tools-ra/src/test/java/org/osmtools/ra/traverse/SingleRouteTraverserTest.java"}, "test_case": {"identifier": "testTraverseOrderAtoB", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTraverseOrderAtoB() throws Exception {\n        SingleRouteTraverser traverser = new SingleRouteTraverser(nodeA, nodeB);\n        List<Node> nodes = traverser.getPath();\n        assertEquals(nodeA.getNode(), nodes.get(0));\n        assertEquals(nodeB.getNode(), nodes.get(4));\n    }", "signature": "void testTraverseOrderAtoB()", "full_signature": "@Test public void testTraverseOrderAtoB()", "class_method_signature": "SingleRouteTraverserTest.testTraverseOrderAtoB()", "testcase": true, "constructor": false, "invocations": ["getPath", "assertEquals", "getNode", "get", "assertEquals", "getNode", "get"]}, "focal_class": {"identifier": "SingleRouteTraverser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Node> path = new ArrayList<Node>();", "modifier": "private", "type": "List<Node>", "declarator": "path = new ArrayList<Node>()", "var_name": "path"}, {"original_string": "private Collection<IntersectionNode> visitedNodes = new HashSet<IntersectionNode>();", "modifier": "private", "type": "Collection<IntersectionNode>", "declarator": "visitedNodes = new HashSet<IntersectionNode>()", "var_name": "visitedNodes"}, {"original_string": "private IntersectionNode endNode;", "modifier": "private", "type": "IntersectionNode", "declarator": "endNode", "var_name": "endNode"}], "methods": [{"identifier": "SingleRouteTraverser", "parameters": "(IntersectionNode startNode, IntersectionNode endNode)", "modifiers": "public", "return": "", "signature": " SingleRouteTraverser(IntersectionNode startNode, IntersectionNode endNode)", "full_signature": "public  SingleRouteTraverser(IntersectionNode startNode, IntersectionNode endNode)", "class_method_signature": "SingleRouteTraverser.SingleRouteTraverser(IntersectionNode startNode, IntersectionNode endNode)", "testcase": false, "constructor": true}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "List<Node>", "signature": "List<Node> getPath()", "full_signature": "public List<Node> getPath()", "class_method_signature": "SingleRouteTraverser.getPath()", "testcase": false, "constructor": false}, {"identifier": "traverseNodes", "parameters": "(IntersectionNode startNode)", "modifiers": "private", "return": "void", "signature": "void traverseNodes(IntersectionNode startNode)", "full_signature": "private void traverseNodes(IntersectionNode startNode)", "class_method_signature": "SingleRouteTraverser.traverseNodes(IntersectionNode startNode)", "testcase": false, "constructor": false}, {"identifier": "getNextNode", "parameters": "(IntersectionNode startNode)", "modifiers": "private", "return": "IntersectionNode", "signature": "IntersectionNode getNextNode(IntersectionNode startNode)", "full_signature": "private IntersectionNode getNextNode(IntersectionNode startNode)", "class_method_signature": "SingleRouteTraverser.getNextNode(IntersectionNode startNode)", "testcase": false, "constructor": false}], "file": "osm-tools-ra/src/main/java/org/osmtools/ra/traverse/SingleRouteTraverser.java"}, "focal_method": {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "List<Node>", "body": "public List<Node> getPath() {\n\t\treturn path;\n\t}", "signature": "List<Node> getPath()", "full_signature": "public List<Node> getPath()", "class_method_signature": "SingleRouteTraverser.getPath()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2287347, "url": "https://github.com/grundid/osm-tools", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 7488, "license": "licensed"}}