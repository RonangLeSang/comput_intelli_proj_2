{"test_class": {"identifier": "PercentTest", "superclass": "", "interfaces": "", "fields": [], "file": "jscl/src/test/java/jscl/math/operator/PercentTest.java"}, "test_case": {"identifier": "testNumeric", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNumeric() throws Exception {\n        final JsclMathEngine me = new JsclMathEngine();\n\n        assertEquals(\"150\", me.evaluate(\"100+50%\"));\n        assertEquals(\"0\", me.evaluate(\"100-100%\"));\n        assertEquals(\"50\", me.evaluate(\"100*50%\"));\n        assertEquals(\"150\", me.evaluate(\"100+100*50%\"));\n        assertEquals(\"125\", me.evaluate(\"100+100*50%*50%\"));\n        assertEquals(\"125\", me.evaluate(\"100+100*50%*(25+25)%\"));\n        assertEquals(\"250\", me.evaluate(\"100+100*50%*(25+25)%+100%\"));\n        assertEquals(\"150\", me.evaluate(\"100+(100*50%*(25+25)%+100%)\"));\n        assertEquals(\"140\", me.evaluate(\"100+(20+20)%\"));\n        assertEquals(\"124\", me.evaluate(\"100+(20%+20%)\"));\n\n        assertEquals(\"100+50%-50%\", me.simplify(\"100+50%-50%\"));\n\n        assertEquals(\"100+(100*50%*(50)%+100%)\", me.simplify(\"100+(100*50%*(25+25)%+100%)\"));\n\n        assertEquals(\"450\", me.evaluate(\"((100+100*50%)+50%)*200%\"));\n        assertEquals(\"150\", me.evaluate(\"((100+100*50%)*50%)+100%\"));\n        assertEquals(\"150\", me.evaluate(\"100*50%+100\"));\n        assertEquals(\"75\", me.evaluate(\"100+50%-50%\"));\n        assertEquals(\"75\", me.evaluate(\"100+50%+(-50%)\"));\n        assertEquals(\"0\", me.evaluate(\"0+(-50%)\"));\n        assertEquals(\"0\", me.evaluate(\"0+(50%)\"));\n        assertEquals(\"0\", me.evaluate(\"0+50%\"));\n        assertEquals(\"-150\", me.evaluate(\"-100+50%\"));\n        assertEquals(\"-148.5\", me.evaluate(\"1-100+50%\"));\n        assertEquals(\"-49.5\", me.evaluate(\"1-100-50%\"));\n        assertEquals(\"-49.5\", me.evaluate(\"(1-100)-50%\"));\n        assertEquals(\"-49\", me.evaluate(\"1-(100-50%)\"));\n        assertEquals(\"50\", me.evaluate(\"100-50%\"));\n        assertEquals(\"2600\", me.evaluate(\"100+50%^2\"));\n        assertEquals(\"101.0813826568003\", me.evaluate(\"100+50^2%\"));\n        assertEquals(\"22500\", me.evaluate(\"(100+50%)^2\"));\n        assertEquals(\"225\", me.evaluate(\"(100+50%)+50%\"));\n        assertEquals(\"225\", me.evaluate(\"(100+50%)+(abs(-50)+10-10)%\"));\n\n        assertEquals(\"0\", me.evaluate(\"100-(10+2*40+10)%\"));\n        assertEquals(\"3\", me.evaluate(\"100-(10+2*40+10)%+3\"));\n\n        assertEquals(\"0\", me.evaluate(\"100-(200/2)%\"));\n        assertEquals(\"3\", me.evaluate(\"100-(200/2)%+3\"));\n\n        assertEquals(\"99\", me.evaluate(\"100-2*50%\"));\n        assertEquals(\"102\", me.evaluate(\"100-2*50%+3\"));\n\n        assertEquals(\"84\", me.evaluate(\"20+2^3!\"));\n        assertEquals(\"21.0471285480509\", me.evaluate(\"20+10^2%\"));\n        assertEquals(\"20.48\", me.evaluate(\"20+4!*2%\"));\n\n        assertEquals(\"120\", me.evaluate(\"100-20+50%\"));\n\n        try {\n            me.evaluate(\"+50%\");\n            Assert.fail();\n        } catch (ParseException e) {\n        }\n\n        assertEquals(\"0.5\", me.evaluate(\"50%\"));\n        assertEquals(\"-0.5\", me.evaluate(\"-50%\"));\n        assertEquals(\"225\", me.evaluate(\"(100+50%)+50%\"));\n\n        // undefined behavior, percent function always uses preceding number ignoring multiplier after\n        assertEquals(\"10100\", me.evaluate(\"100+100%*100\"));\n    }", "signature": "void testNumeric()", "full_signature": "@Test public void testNumeric()", "class_method_signature": "PercentTest.testNumeric()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "simplify", "assertEquals", "simplify", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "evaluate", "fail", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate"]}, "focal_class": {"identifier": "Percent", "superclass": "extends PostfixFunction", "interfaces": "", "fields": [{"original_string": "public static final String NAME = \"%\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"%\"", "var_name": "NAME"}], "methods": [{"identifier": "Percent", "parameters": "(Generic content, Generic previousSumElement)", "modifiers": "public", "return": "", "signature": " Percent(Generic content, Generic previousSumElement)", "full_signature": "public  Percent(Generic content, Generic previousSumElement)", "class_method_signature": "Percent.Percent(Generic content, Generic previousSumElement)", "testcase": false, "constructor": true}, {"identifier": "Percent", "parameters": "(Generic[] parameters)", "modifiers": "private", "return": "", "signature": " Percent(Generic[] parameters)", "full_signature": "private  Percent(Generic[] parameters)", "class_method_signature": "Percent.Percent(Generic[] parameters)", "testcase": false, "constructor": true}, {"identifier": "createParameters", "parameters": "(@Nullable Generic content, @Nullable Generic previousSumElement)", "modifiers": "private static", "return": "Generic[]", "signature": "Generic[] createParameters(@Nullable Generic content, @Nullable Generic previousSumElement)", "full_signature": "private static Generic[] createParameters(@Nullable Generic content, @Nullable Generic previousSumElement)", "class_method_signature": "Percent.createParameters(@Nullable Generic content, @Nullable Generic previousSumElement)", "testcase": false, "constructor": false}, {"identifier": "getMinParameters", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMinParameters()", "full_signature": "@Override public int getMinParameters()", "class_method_signature": "Percent.getMinParameters()", "testcase": false, "constructor": false}, {"identifier": "getMaxParameters", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxParameters()", "full_signature": "@Override public int getMaxParameters()", "class_method_signature": "Percent.getMaxParameters()", "testcase": false, "constructor": false}, {"identifier": "selfExpand", "parameters": "()", "modifiers": "public", "return": "Generic", "signature": "Generic selfExpand()", "full_signature": "public Generic selfExpand()", "class_method_signature": "Percent.selfExpand()", "testcase": false, "constructor": false}, {"identifier": "simplify", "parameters": "()", "modifiers": "@Override public", "return": "Generic", "signature": "Generic simplify()", "full_signature": "@Override public Generic simplify()", "class_method_signature": "Percent.simplify()", "testcase": false, "constructor": false}, {"identifier": "selfNumeric", "parameters": "()", "modifiers": "@Override public", "return": "Generic", "signature": "Generic selfNumeric()", "full_signature": "@Override public Generic selfNumeric()", "class_method_signature": "Percent.selfNumeric()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(@Nonnull Generic[] parameters)", "modifiers": "@Nonnull @Override public", "return": "Operator", "signature": "Operator newInstance(@Nonnull Generic[] parameters)", "full_signature": "@Nonnull @Override public Operator newInstance(@Nonnull Generic[] parameters)", "class_method_signature": "Percent.newInstance(@Nonnull Generic[] parameters)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "Variable", "signature": "Variable newInstance()", "full_signature": "@Nonnull @Override public Variable newInstance()", "class_method_signature": "Percent.newInstance()", "testcase": false, "constructor": false}], "file": "jscl/src/main/java/jscl/math/operator/Percent.java"}, "focal_method": {"identifier": "simplify", "parameters": "()", "modifiers": "@Override public", "return": "Generic", "body": "@Override\n    public Generic simplify() {\n        return expressionValue();\n    }", "signature": "Generic simplify()", "full_signature": "@Override public Generic simplify()", "class_method_signature": "Percent.simplify()", "testcase": false, "constructor": false, "invocations": ["expressionValue"]}, "repository": {"repo_id": 1944249, "url": "https://github.com/serso/android-calculatorpp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 312, "size": 22067, "license": "licensed"}}