{"test_class": {"identifier": "LiteralTest", "superclass": "", "interfaces": "", "fields": [], "file": "jscl/src/test/java/jscl/math/LiteralTest.java"}, "test_case": {"identifier": "testGcd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGcd() throws Exception {\n\n    }", "signature": "void testGcd()", "full_signature": "@Test public void testGcd()", "class_method_signature": "LiteralTest.testGcd()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "Literal", "superclass": "", "interfaces": "implements Comparable", "fields": [{"original_string": "private Variable variables[];", "modifier": "private", "type": "Variable", "declarator": "variables[]", "var_name": "variables"}, {"original_string": "private int powers[];", "modifier": "private", "type": "int", "declarator": "powers[]", "var_name": "powers"}, {"original_string": "private int degree;", "modifier": "private", "type": "int", "declarator": "degree", "var_name": "degree"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "Literal", "parameters": "()", "modifiers": "", "return": "", "signature": " Literal()", "full_signature": "  Literal()", "class_method_signature": "Literal.Literal()", "testcase": false, "constructor": true}, {"identifier": "Literal", "parameters": "(int size)", "modifiers": "", "return": "", "signature": " Literal(int size)", "full_signature": "  Literal(int size)", "class_method_signature": "Literal.Literal(int size)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "Literal", "signature": "Literal newInstance()", "full_signature": "public static Literal newInstance()", "class_method_signature": "Literal.newInstance()", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(Variable variable)", "modifiers": "public static", "return": "Literal", "signature": "Literal valueOf(Variable variable)", "full_signature": "public static Literal valueOf(Variable variable)", "class_method_signature": "Literal.valueOf(Variable variable)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(Variable variable, int power)", "modifiers": "public static", "return": "Literal", "signature": "Literal valueOf(Variable variable, int power)", "full_signature": "public static Literal valueOf(Variable variable, int power)", "class_method_signature": "Literal.valueOf(Variable variable, int power)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(Monomial monomial)", "modifiers": "public static", "return": "Literal", "signature": "Literal valueOf(Monomial monomial)", "full_signature": "public static Literal valueOf(Monomial monomial)", "class_method_signature": "Literal.valueOf(Monomial monomial)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Literal.size()", "testcase": false, "constructor": false}, {"identifier": "getVariable", "parameters": "(int i)", "modifiers": "@Nonnull public", "return": "Variable", "signature": "Variable getVariable(int i)", "full_signature": "@Nonnull public Variable getVariable(int i)", "class_method_signature": "Literal.getVariable(int i)", "testcase": false, "constructor": false}, {"identifier": "getPower", "parameters": "(int i)", "modifiers": "public", "return": "int", "signature": "int getPower(int i)", "full_signature": "public int getPower(int i)", "class_method_signature": "Literal.getPower(int i)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(int size)", "modifiers": "", "return": "void", "signature": "void init(int size)", "full_signature": " void init(int size)", "class_method_signature": "Literal.init(int size)", "testcase": false, "constructor": false}, {"identifier": "resize", "parameters": "(int size)", "modifiers": "", "return": "void", "signature": "void resize(int size)", "full_signature": " void resize(int size)", "class_method_signature": "Literal.resize(int size)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(@Nonnull Literal that)", "modifiers": "public", "return": "Literal", "signature": "Literal multiply(@Nonnull Literal that)", "full_signature": "public Literal multiply(@Nonnull Literal that)", "class_method_signature": "Literal.multiply(@Nonnull Literal that)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(Literal literal)", "modifiers": "public", "return": "Literal", "signature": "Literal divide(Literal literal)", "full_signature": "public Literal divide(Literal literal)", "class_method_signature": "Literal.divide(Literal literal)", "testcase": false, "constructor": false}, {"identifier": "gcd", "parameters": "(@Nonnull Literal that)", "modifiers": "@Nonnull public", "return": "Literal", "signature": "Literal gcd(@Nonnull Literal that)", "full_signature": "@Nonnull public Literal gcd(@Nonnull Literal that)", "class_method_signature": "Literal.gcd(@Nonnull Literal that)", "testcase": false, "constructor": false}, {"identifier": "scm", "parameters": "(@Nonnull Literal that)", "modifiers": "public", "return": "Literal", "signature": "Literal scm(@Nonnull Literal that)", "full_signature": "public Literal scm(@Nonnull Literal that)", "class_method_signature": "Literal.scm(@Nonnull Literal that)", "testcase": false, "constructor": false}, {"identifier": "productValue", "parameters": "()", "modifiers": "public", "return": "Generic[]", "signature": "Generic[] productValue()", "full_signature": "public Generic[] productValue()", "class_method_signature": "Literal.productValue()", "testcase": false, "constructor": false}, {"identifier": "powerValue", "parameters": "()", "modifiers": "public", "return": "Power", "signature": "Power powerValue()", "full_signature": "public Power powerValue()", "class_method_signature": "Literal.powerValue()", "testcase": false, "constructor": false}, {"identifier": "variableValue", "parameters": "()", "modifiers": "public", "return": "Variable", "signature": "Variable variableValue()", "full_signature": "public Variable variableValue()", "class_method_signature": "Literal.variableValue()", "testcase": false, "constructor": false}, {"identifier": "variables", "parameters": "()", "modifiers": "public", "return": "Variable[]", "signature": "Variable[] variables()", "full_signature": "public Variable[] variables()", "class_method_signature": "Literal.variables()", "testcase": false, "constructor": false}, {"identifier": "degree", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int degree()", "full_signature": "public int degree()", "class_method_signature": "Literal.degree()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@Nonnull Literal that)", "modifiers": "public", "return": "int", "signature": "int compareTo(@Nonnull Literal that)", "full_signature": "public int compareTo(@Nonnull Literal that)", "class_method_signature": "Literal.compareTo(@Nonnull Literal that)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object o)", "modifiers": "public", "return": "int", "signature": "int compareTo(Object o)", "full_signature": "public int compareTo(Object o)", "class_method_signature": "Literal.compareTo(Object o)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Variable var, int pow)", "modifiers": "", "return": "void", "signature": "void init(Variable var, int pow)", "full_signature": " void init(Variable var, int pow)", "class_method_signature": "Literal.init(Variable var, int pow)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Monomial monomial)", "modifiers": "", "return": "void", "signature": "void init(Monomial monomial)", "full_signature": " void init(Monomial monomial)", "class_method_signature": "Literal.init(Monomial monomial)", "testcase": false, "constructor": false}, {"identifier": "content", "parameters": "(@Nonnull Function<Variable, Generic> c)", "modifiers": "", "return": "Map<Variable, Generic>", "signature": "Map<Variable, Generic> content(@Nonnull Function<Variable, Generic> c)", "full_signature": " Map<Variable, Generic> content(@Nonnull Function<Variable, Generic> c)", "class_method_signature": "Literal.content(@Nonnull Function<Variable, Generic> c)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Literal.toString()", "testcase": false, "constructor": false}, {"identifier": "toJava", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toJava()", "full_signature": "public String toJava()", "class_method_signature": "Literal.toJava()", "testcase": false, "constructor": false}, {"identifier": "toMathML", "parameters": "(MathML element, @Nullable Object data)", "modifiers": "public", "return": "void", "signature": "void toMathML(MathML element, @Nullable Object data)", "full_signature": "public void toMathML(MathML element, @Nullable Object data)", "class_method_signature": "Literal.toMathML(MathML element, @Nullable Object data)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(int n)", "modifiers": "@Nonnull private", "return": "Literal", "signature": "Literal newInstance(int n)", "full_signature": "@Nonnull private Literal newInstance(int n)", "class_method_signature": "Literal.newInstance(int n)", "testcase": false, "constructor": false}], "file": "jscl/src/main/java/jscl/math/Literal.java"}, "focal_method": {"identifier": "gcd", "parameters": "(@Nonnull Literal that)", "modifiers": "@Nonnull public", "return": "Literal", "body": "@Nonnull\n    public Literal gcd(@Nonnull Literal that) {\n        Literal result = newInstance(Math.min(this.size, that.size));\n        int i = 0;\n\n        int thisI = 0;\n        int thatI = 0;\n\n        Variable thisVariable = thisI < this.size ? this.variables[thisI] : null;\n        Variable thatVariable = thatI < that.size ? that.variables[thatI] : null;\n\n        while (thisVariable != null || thatVariable != null) {\n            int c;\n\n            if (thisVariable == null) {\n                c = 1;\n            } else if (thatVariable == null) {\n                c = -1;\n            } else {\n                c = thisVariable.compareTo(thatVariable);\n            }\n\n            if (c < 0) {\n                thisI++;\n                thisVariable = thisI < this.size ? this.variables[thisI] : null;\n            } else if (c > 0) {\n                thatI++;\n                thatVariable = thatI < that.size ? that.variables[thatI] : null;\n            } else {\n                int minPower = Math.min(this.powers[thisI], that.powers[thatI]);\n\n                result.variables[i] = thisVariable;\n                result.powers[i] = minPower;\n                result.degree += minPower;\n\n                i++;\n                thisI++;\n                thatI++;\n\n                thisVariable = thisI < this.size ? this.variables[thisI] : null;\n                thatVariable = thatI < that.size ? that.variables[thatI] : null;\n            }\n        }\n\n        result.resize(i);\n\n        return result;\n    }", "signature": "Literal gcd(@Nonnull Literal that)", "full_signature": "@Nonnull public Literal gcd(@Nonnull Literal that)", "class_method_signature": "Literal.gcd(@Nonnull Literal that)", "testcase": false, "constructor": false, "invocations": ["newInstance", "min", "compareTo", "min", "resize"]}, "repository": {"repo_id": 1944249, "url": "https://github.com/serso/android-calculatorpp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 312, "size": 22067, "license": "licensed"}}