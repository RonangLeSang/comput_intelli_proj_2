{"test_class": {"identifier": "DegTest", "superclass": "", "interfaces": "", "fields": [], "file": "jscl/src/test/java/jscl/math/function/DegTest.java"}, "test_case": {"identifier": "testDeg", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeg() throws Exception {\n        final JsclMathEngine mathEngine = JsclMathEngine.getInstance();\n\n        Assert.assertEquals(\"2\", mathEngine.evaluate(\"deg(0.03490658503988659)\"));\n        Assert.assertEquals(\"-2\", mathEngine.evaluate(\"deg(-0.03490658503988659)\"));\n        Assert.assertEquals(\"180\", mathEngine.evaluate(\"deg(\" + String.valueOf(Math.PI) + \")\"));\n\n        for (int i = 0; i < 1000; i++) {\n            double value = Math.random() * 100000;\n            assertEquals(value, Double.valueOf(mathEngine.evaluate(\"rad(deg(\" + value + \"))\")));\n            assertEquals(value, Double.valueOf(mathEngine.evaluate(\"deg(rad(\" + value + \"))\")));\n        }\n    }", "signature": "void testDeg()", "full_signature": "@Test public void testDeg()", "class_method_signature": "DegTest.testDeg()", "testcase": true, "constructor": false, "invocations": ["getInstance", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "valueOf", "random", "assertEquals", "valueOf", "evaluate", "assertEquals", "valueOf", "evaluate"]}, "focal_class": {"identifier": "Deg", "superclass": "extends Algebraic", "interfaces": "", "fields": [], "methods": [{"identifier": "Deg", "parameters": "(Generic generic)", "modifiers": "public", "return": "", "signature": " Deg(Generic generic)", "full_signature": "public  Deg(Generic generic)", "class_method_signature": "Deg.Deg(Generic generic)", "testcase": false, "constructor": true}, {"identifier": "rootValue", "parameters": "()", "modifiers": "@Override public", "return": "Root", "signature": "Root rootValue()", "full_signature": "@Override public Root rootValue()", "class_method_signature": "Deg.rootValue()", "testcase": false, "constructor": false}, {"identifier": "bodyToMathML", "parameters": "(MathML element, boolean fenced)", "modifiers": "@Override", "return": "void", "signature": "void bodyToMathML(MathML element, boolean fenced)", "full_signature": "@Override void bodyToMathML(MathML element, boolean fenced)", "class_method_signature": "Deg.bodyToMathML(MathML element, boolean fenced)", "testcase": false, "constructor": false}, {"identifier": "selfExpand", "parameters": "()", "modifiers": "@Override public", "return": "Generic", "signature": "Generic selfExpand()", "full_signature": "@Override public Generic selfExpand()", "class_method_signature": "Deg.selfExpand()", "testcase": false, "constructor": false}, {"identifier": "selfElementary", "parameters": "()", "modifiers": "@Override public", "return": "Generic", "signature": "Generic selfElementary()", "full_signature": "@Override public Generic selfElementary()", "class_method_signature": "Deg.selfElementary()", "testcase": false, "constructor": false}, {"identifier": "selfSimplify", "parameters": "()", "modifiers": "@Override public", "return": "Generic", "signature": "Generic selfSimplify()", "full_signature": "@Override public Generic selfSimplify()", "class_method_signature": "Deg.selfSimplify()", "testcase": false, "constructor": false}, {"identifier": "selfNumeric", "parameters": "()", "modifiers": "@Override public", "return": "Generic", "signature": "Generic selfNumeric()", "full_signature": "@Override public Generic selfNumeric()", "class_method_signature": "Deg.selfNumeric()", "testcase": false, "constructor": false}, {"identifier": "derivative", "parameters": "(int n)", "modifiers": "@Override public", "return": "Generic", "signature": "Generic derivative(int n)", "full_signature": "@Override public Generic derivative(int n)", "class_method_signature": "Deg.derivative(int n)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "Variable", "signature": "Variable newInstance()", "full_signature": "@Nonnull @Override public Variable newInstance()", "class_method_signature": "Deg.newInstance()", "testcase": false, "constructor": false}], "file": "jscl/src/main/java/jscl/math/function/Deg.java"}, "focal_method": {"identifier": "Deg", "parameters": "(Generic generic)", "modifiers": "public", "return": "", "body": "public Deg(Generic generic) {\n        super(\"deg\", new Generic[]{generic});\n    }", "signature": " Deg(Generic generic)", "full_signature": "public  Deg(Generic generic)", "class_method_signature": "Deg.Deg(Generic generic)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 1944249, "url": "https://github.com/serso/android-calculatorpp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 312, "size": 22067, "license": "licensed"}}