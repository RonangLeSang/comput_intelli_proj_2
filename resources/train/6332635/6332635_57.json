{"test_class": {"identifier": "RuleManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "RuleManager manager;", "modifier": "", "type": "RuleManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "Rule proxy3013;", "modifier": "", "type": "Rule", "declarator": "proxy3013", "var_name": "proxy3013"}, {"original_string": "Rule forwardBlz;", "modifier": "", "type": "Rule", "declarator": "forwardBlz", "var_name": "forwardBlz"}, {"original_string": "Rule forwardBlzPOST;", "modifier": "", "type": "Rule", "declarator": "forwardBlzPOST", "var_name": "forwardBlzPOST"}], "file": "core/src/test/java/com/predic8/membrane/core/RuleManagerTest.java"}, "test_case": {"identifier": "testRemoveRule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRemoveRule() throws Exception {\n\t\tmanager.removeRule(proxy3013);\n\t\tassertEquals(2, manager.getRules().size());\n\t\tassertFalse(manager.getRules().contains(proxy3013));\n\t}", "signature": "void testRemoveRule()", "full_signature": "@Test public void testRemoveRule()", "class_method_signature": "RuleManagerTest.testRemoveRule()", "testcase": true, "constructor": false, "invocations": ["removeRule", "assertEquals", "size", "getRules", "assertFalse", "contains", "getRules"]}, "focal_class": {"identifier": "RuleManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(RuleManager.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RuleManager.class.getName())", "var_name": "log"}, {"original_string": "private Router router;", "modifier": "private", "type": "Router", "declarator": "router", "var_name": "router"}, {"original_string": "private List<Rule> rules = new Vector<Rule>();", "modifier": "private", "type": "List<Rule>", "declarator": "rules = new Vector<Rule>()", "var_name": "rules"}, {"original_string": "private List<RuleDefinitionSource> ruleSources = new ArrayList<RuleManager.RuleDefinitionSource>();", "modifier": "private", "type": "List<RuleDefinitionSource>", "declarator": "ruleSources = new ArrayList<RuleManager.RuleDefinitionSource>()", "var_name": "ruleSources"}, {"original_string": "private Set<IRuleChangeListener> listeners = new HashSet<IRuleChangeListener>();", "modifier": "private", "type": "Set<IRuleChangeListener>", "declarator": "listeners = new HashSet<IRuleChangeListener>()", "var_name": "listeners"}, {"original_string": "private String defaultTargetHost = \"localhost\";", "modifier": "private", "type": "String", "declarator": "defaultTargetHost = \"localhost\"", "var_name": "defaultTargetHost"}, {"original_string": "private String defaultHost = \"*\";", "modifier": "private", "type": "String", "declarator": "defaultHost = \"*\"", "var_name": "defaultHost"}, {"original_string": "private int defaultListenPort = 2000;", "modifier": "private", "type": "int", "declarator": "defaultListenPort = 2000", "var_name": "defaultListenPort"}, {"original_string": "private int defaultTargetPort = 8080;", "modifier": "private", "type": "int", "declarator": "defaultTargetPort = 8080", "var_name": "defaultTargetPort"}, {"original_string": "private String defaultPath = \".*\";", "modifier": "private", "type": "String", "declarator": "defaultPath = \".*\"", "var_name": "defaultPath"}, {"original_string": "private int defaultMethod = 4;", "modifier": "private", "type": "int", "declarator": "defaultMethod = 4", "var_name": "defaultMethod"}], "methods": [{"identifier": "getDefaultListenPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDefaultListenPort()", "full_signature": "public int getDefaultListenPort()", "class_method_signature": "RuleManager.getDefaultListenPort()", "testcase": false, "constructor": false}, {"identifier": "getDefaultHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultHost()", "full_signature": "public String getDefaultHost()", "class_method_signature": "RuleManager.getDefaultHost()", "testcase": false, "constructor": false}, {"identifier": "getDefaultPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultPath()", "full_signature": "public String getDefaultPath()", "class_method_signature": "RuleManager.getDefaultPath()", "testcase": false, "constructor": false}, {"identifier": "getDefaultMethod", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDefaultMethod()", "full_signature": "public int getDefaultMethod()", "class_method_signature": "RuleManager.getDefaultMethod()", "testcase": false, "constructor": false}, {"identifier": "setDefaultMethod", "parameters": "(int defaultMethod)", "modifiers": "public", "return": "void", "signature": "void setDefaultMethod(int defaultMethod)", "full_signature": "public void setDefaultMethod(int defaultMethod)", "class_method_signature": "RuleManager.setDefaultMethod(int defaultMethod)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTargetHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultTargetHost()", "full_signature": "public String getDefaultTargetHost()", "class_method_signature": "RuleManager.getDefaultTargetHost()", "testcase": false, "constructor": false}, {"identifier": "setDefaultTargetHost", "parameters": "(String defaultTargetHost)", "modifiers": "public", "return": "void", "signature": "void setDefaultTargetHost(String defaultTargetHost)", "full_signature": "public void setDefaultTargetHost(String defaultTargetHost)", "class_method_signature": "RuleManager.setDefaultTargetHost(String defaultTargetHost)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTargetPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDefaultTargetPort()", "full_signature": "public int getDefaultTargetPort()", "class_method_signature": "RuleManager.getDefaultTargetPort()", "testcase": false, "constructor": false}, {"identifier": "isAnyRuleWithPort", "parameters": "(int port)", "modifiers": "public", "return": "boolean", "signature": "boolean isAnyRuleWithPort(int port)", "full_signature": "public boolean isAnyRuleWithPort(int port)", "class_method_signature": "RuleManager.isAnyRuleWithPort(int port)", "testcase": false, "constructor": false}, {"identifier": "addProxyAndOpenPortIfNew", "parameters": "(Rule rule)", "modifiers": "public", "return": "void", "signature": "void addProxyAndOpenPortIfNew(Rule rule)", "full_signature": "public void addProxyAndOpenPortIfNew(Rule rule)", "class_method_signature": "RuleManager.addProxyAndOpenPortIfNew(Rule rule)", "testcase": false, "constructor": false}, {"identifier": "addProxyAndOpenPortIfNew", "parameters": "(Rule rule, RuleDefinitionSource source)", "modifiers": "public synchronized", "return": "void", "signature": "void addProxyAndOpenPortIfNew(Rule rule, RuleDefinitionSource source)", "full_signature": "public synchronized void addProxyAndOpenPortIfNew(Rule rule, RuleDefinitionSource source)", "class_method_signature": "RuleManager.addProxyAndOpenPortIfNew(Rule rule, RuleDefinitionSource source)", "testcase": false, "constructor": false}, {"identifier": "addProxy", "parameters": "(Rule rule, RuleDefinitionSource source)", "modifiers": "public synchronized", "return": "void", "signature": "void addProxy(Rule rule, RuleDefinitionSource source)", "full_signature": "public synchronized void addProxy(Rule rule, RuleDefinitionSource source)", "class_method_signature": "RuleManager.addProxy(Rule rule, RuleDefinitionSource source)", "testcase": false, "constructor": false}, {"identifier": "openPorts", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void openPorts()", "full_signature": "public synchronized void openPorts()", "class_method_signature": "RuleManager.openPorts()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(RuleKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean exists(RuleKey key)", "full_signature": "public boolean exists(RuleKey key)", "class_method_signature": "RuleManager.exists(RuleKey key)", "testcase": false, "constructor": false}, {"identifier": "getRule", "parameters": "(RuleKey key)", "modifiers": "private", "return": "Rule", "signature": "Rule getRule(RuleKey key)", "full_signature": "private Rule getRule(RuleKey key)", "class_method_signature": "RuleManager.getRule(RuleKey key)", "testcase": false, "constructor": false}, {"identifier": "getRules", "parameters": "()", "modifiers": "public", "return": "List<Rule>", "signature": "List<Rule> getRules()", "full_signature": "public List<Rule> getRules()", "class_method_signature": "RuleManager.getRules()", "testcase": false, "constructor": false}, {"identifier": "ruleUp", "parameters": "(Rule rule)", "modifiers": "public synchronized", "return": "void", "signature": "void ruleUp(Rule rule)", "full_signature": "public synchronized void ruleUp(Rule rule)", "class_method_signature": "RuleManager.ruleUp(Rule rule)", "testcase": false, "constructor": false}, {"identifier": "ruleDown", "parameters": "(Rule rule)", "modifiers": "public synchronized", "return": "void", "signature": "void ruleDown(Rule rule)", "full_signature": "public synchronized void ruleDown(Rule rule)", "class_method_signature": "RuleManager.ruleDown(Rule rule)", "testcase": false, "constructor": false}, {"identifier": "ruleChanged", "parameters": "(Rule rule)", "modifiers": "public", "return": "void", "signature": "void ruleChanged(Rule rule)", "full_signature": "public void ruleChanged(Rule rule)", "class_method_signature": "RuleManager.ruleChanged(Rule rule)", "testcase": false, "constructor": false}, {"identifier": "getMatchingRule", "parameters": "(String hostHeader, String method, String uri, String version, int port, String localIP)", "modifiers": "public", "return": "Rule", "signature": "Rule getMatchingRule(String hostHeader, String method, String uri, String version, int port, String localIP)", "full_signature": "public Rule getMatchingRule(String hostHeader, String method, String uri, String version, int port, String localIP)", "class_method_signature": "RuleManager.getMatchingRule(String hostHeader, String method, String uri, String version, int port, String localIP)", "testcase": false, "constructor": false}, {"identifier": "addRuleChangeListener", "parameters": "(IRuleChangeListener viewer)", "modifiers": "public", "return": "void", "signature": "void addRuleChangeListener(IRuleChangeListener viewer)", "full_signature": "public void addRuleChangeListener(IRuleChangeListener viewer)", "class_method_signature": "RuleManager.addRuleChangeListener(IRuleChangeListener viewer)", "testcase": false, "constructor": false}, {"identifier": "removeRuleChangeListener", "parameters": "(IRuleChangeListener viewer)", "modifiers": "public", "return": "void", "signature": "void removeRuleChangeListener(IRuleChangeListener viewer)", "full_signature": "public void removeRuleChangeListener(IRuleChangeListener viewer)", "class_method_signature": "RuleManager.removeRuleChangeListener(IRuleChangeListener viewer)", "testcase": false, "constructor": false}, {"identifier": "addExchangesStoreListener", "parameters": "(IExchangesStoreListener viewer)", "modifiers": "public", "return": "void", "signature": "void addExchangesStoreListener(IExchangesStoreListener viewer)", "full_signature": "public void addExchangesStoreListener(IExchangesStoreListener viewer)", "class_method_signature": "RuleManager.addExchangesStoreListener(IExchangesStoreListener viewer)", "testcase": false, "constructor": false}, {"identifier": "removeExchangesStoreListener", "parameters": "(IExchangesStoreListener viewer)", "modifiers": "public", "return": "void", "signature": "void removeExchangesStoreListener(IExchangesStoreListener viewer)", "full_signature": "public void removeExchangesStoreListener(IExchangesStoreListener viewer)", "class_method_signature": "RuleManager.removeExchangesStoreListener(IExchangesStoreListener viewer)", "testcase": false, "constructor": false}, {"identifier": "removeRule", "parameters": "(Rule rule)", "modifiers": "public synchronized", "return": "void", "signature": "void removeRule(Rule rule)", "full_signature": "public synchronized void removeRule(Rule rule)", "class_method_signature": "RuleManager.removeRule(Rule rule)", "testcase": false, "constructor": false}, {"identifier": "replaceRule", "parameters": "(Rule rule, Rule newRule)", "modifiers": "public synchronized", "return": "void", "signature": "void replaceRule(Rule rule, Rule newRule)", "full_signature": "public synchronized void replaceRule(Rule rule, Rule newRule)", "class_method_signature": "RuleManager.replaceRule(Rule rule, Rule newRule)", "testcase": false, "constructor": false}, {"identifier": "removeRulesFromSource", "parameters": "(RuleDefinitionSource source)", "modifiers": "public synchronized", "return": "void", "signature": "void removeRulesFromSource(RuleDefinitionSource source)", "full_signature": "public synchronized void removeRulesFromSource(RuleDefinitionSource source)", "class_method_signature": "RuleManager.removeRulesFromSource(RuleDefinitionSource source)", "testcase": false, "constructor": false}, {"identifier": "removeAllRules", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void removeAllRules()", "full_signature": "public synchronized void removeAllRules()", "class_method_signature": "RuleManager.removeAllRules()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfRules", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int getNumberOfRules()", "full_signature": "public synchronized int getNumberOfRules()", "class_method_signature": "RuleManager.getNumberOfRules()", "testcase": false, "constructor": false}, {"identifier": "setRouter", "parameters": "(Router router)", "modifiers": "public", "return": "void", "signature": "void setRouter(Router router)", "full_signature": "public void setRouter(Router router)", "class_method_signature": "RuleManager.setRouter(Router router)", "testcase": false, "constructor": false}, {"identifier": "getExchangeStore", "parameters": "()", "modifiers": "private", "return": "ExchangeStore", "signature": "ExchangeStore getExchangeStore()", "full_signature": "private ExchangeStore getExchangeStore()", "class_method_signature": "RuleManager.getExchangeStore()", "testcase": false, "constructor": false}, {"identifier": "getRuleByName", "parameters": "(String name)", "modifiers": "public", "return": "Rule", "signature": "Rule getRuleByName(String name)", "full_signature": "public Rule getRuleByName(String name)", "class_method_signature": "RuleManager.getRuleByName(String name)", "testcase": false, "constructor": false}, {"identifier": "getRulesBySource", "parameters": "(final RuleDefinitionSource source)", "modifiers": "public synchronized", "return": "List<Rule>", "signature": "List<Rule> getRulesBySource(final RuleDefinitionSource source)", "full_signature": "public synchronized List<Rule> getRulesBySource(final RuleDefinitionSource source)", "class_method_signature": "RuleManager.getRulesBySource(final RuleDefinitionSource source)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/predic8/membrane/core/RuleManager.java"}, "focal_method": {"identifier": "removeRule", "parameters": "(Rule rule)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void removeRule(Rule rule) {\n\t\tgetExchangeStore().removeAllExchanges(rule);\n\n\t\tint i = rules.indexOf(rule);\n\t\trules.remove(i);\n\t\truleSources.remove(i);\n\n\t\tfor (IRuleChangeListener listener : listeners) {\n\t\t\tlistener.ruleRemoved(rule, rules.size());\n\t\t}\n\n\t}", "signature": "void removeRule(Rule rule)", "full_signature": "public synchronized void removeRule(Rule rule)", "class_method_signature": "RuleManager.removeRule(Rule rule)", "testcase": false, "constructor": false, "invocations": ["removeAllExchanges", "getExchangeStore", "indexOf", "remove", "remove", "ruleRemoved", "size"]}, "repository": {"repo_id": 6332635, "url": "https://github.com/membrane/service-proxy", "language": "Java", "is_fork": false, "fork_count": 115, "stargazer_count": 329, "size": 42287, "license": "licensed"}}