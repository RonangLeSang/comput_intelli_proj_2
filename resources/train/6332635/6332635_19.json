{"test_class": {"identifier": "TextUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/predic8/membrane/core/util/TextUtilTest.java"}, "test_case": {"identifier": "testGlobToExpStarPrefixIp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGlobToExpStarPrefixIp() throws Exception {\n\t\tPattern pattern = Pattern.compile(TextUtil.globToRegExp(\"*.68.5.122\"));\n\t\tassertTrue(pattern.matcher(\"192.68.5.122\").matches());\n\t\tassertFalse(pattern.matcher(\"192.68.5.123\").matches());\n\t}", "signature": "void testGlobToExpStarPrefixIp()", "full_signature": "@Test public void testGlobToExpStarPrefixIp()", "class_method_signature": "TextUtilTest.testGlobToExpStarPrefixIp()", "testcase": true, "constructor": false, "invocations": ["compile", "globToRegExp", "assertTrue", "matches", "matcher", "assertFalse", "matches", "matcher"]}, "focal_class": {"identifier": "TextUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(TextUtil.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TextUtil.class.getName())", "var_name": "log"}, {"original_string": "private static final char[] source;", "modifier": "private static final", "type": "char[]", "declarator": "source", "var_name": "source"}, {"original_string": "private static final String[] replace;", "modifier": "private static final", "type": "String[]", "declarator": "replace", "var_name": "replace"}, {"original_string": "private static XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();", "modifier": "private static", "type": "XMLInputFactory", "declarator": "xmlInputFactory = XMLInputFactory.newInstance()", "var_name": "xmlInputFactory"}], "methods": [{"identifier": "formatXML", "parameters": "(Reader reader)", "modifiers": "public static", "return": "String", "signature": "String formatXML(Reader reader)", "full_signature": "public static String formatXML(Reader reader)", "class_method_signature": "TextUtil.formatXML(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "formatXML", "parameters": "(Reader reader, boolean asHTML)", "modifiers": "public static", "return": "String", "signature": "String formatXML(Reader reader, boolean asHTML)", "full_signature": "public static String formatXML(Reader reader, boolean asHTML)", "class_method_signature": "TextUtil.formatXML(Reader reader, boolean asHTML)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(String str)", "full_signature": "public static boolean isNullOrEmpty(String str)", "class_method_signature": "TextUtil.isNullOrEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "globToRegExp", "parameters": "(String glob)", "modifiers": "public static", "return": "String", "signature": "String globToRegExp(String glob)", "full_signature": "public static String globToRegExp(String glob)", "class_method_signature": "TextUtil.globToRegExp(String glob)", "testcase": false, "constructor": false}, {"identifier": "appendReplacement", "parameters": "(char c, StringBuilder buf)", "modifiers": "private static", "return": "void", "signature": "void appendReplacement(char c, StringBuilder buf)", "full_signature": "private static void appendReplacement(char c, StringBuilder buf)", "class_method_signature": "TextUtil.appendReplacement(char c, StringBuilder buf)", "testcase": false, "constructor": false}, {"identifier": "toEnglishList", "parameters": "(String conjuction, String... args)", "modifiers": "public static", "return": "String", "signature": "String toEnglishList(String conjuction, String... args)", "full_signature": "public static String toEnglishList(String conjuction, String... args)", "class_method_signature": "TextUtil.toEnglishList(String conjuction, String... args)", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "(String english)", "modifiers": "public static", "return": "Object", "signature": "Object capitalize(String english)", "full_signature": "public static Object capitalize(String english)", "class_method_signature": "TextUtil.capitalize(String english)", "testcase": false, "constructor": false}, {"identifier": "isValidXMLSnippet", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidXMLSnippet(String s)", "full_signature": "public static boolean isValidXMLSnippet(String s)", "class_method_signature": "TextUtil.isValidXMLSnippet(String s)", "testcase": false, "constructor": false}, {"identifier": "linkURL", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String linkURL(String url)", "full_signature": "public static String linkURL(String url)", "class_method_signature": "TextUtil.linkURL(String url)", "testcase": false, "constructor": false}, {"identifier": "removeFinalChar", "parameters": "(String s)", "modifiers": "public static", "return": "Object", "signature": "Object removeFinalChar(String s)", "full_signature": "public static Object removeFinalChar(String s)", "class_method_signature": "TextUtil.removeFinalChar(String s)", "testcase": false, "constructor": false}, {"identifier": "removeCommonLeadingIndentation", "parameters": "(String src)", "modifiers": "public static", "return": "String", "signature": "String removeCommonLeadingIndentation(String src)", "full_signature": "public static String removeCommonLeadingIndentation(String src)", "class_method_signature": "TextUtil.removeCommonLeadingIndentation(String src)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/predic8/membrane/core/util/TextUtil.java"}, "focal_method": {"identifier": "globToRegExp", "parameters": "(String glob)", "modifiers": "public static", "return": "String", "body": "public static String globToRegExp(String glob) {\n\t\tStringBuilder buf = new StringBuilder();\n\t\tbuf.append(\"^\");\n\t\tfor(int i = 0; i < glob.length(); i ++) {\n\t\t\tappendReplacement(glob.charAt(i), buf);\n\t\t}\n\t\tbuf.append(\"$\");\n\t\treturn buf.toString();\n\t}", "signature": "String globToRegExp(String glob)", "full_signature": "public static String globToRegExp(String glob)", "class_method_signature": "TextUtil.globToRegExp(String glob)", "testcase": false, "constructor": false, "invocations": ["append", "length", "appendReplacement", "charAt", "append", "toString"]}, "repository": {"repo_id": 6332635, "url": "https://github.com/membrane/service-proxy", "language": "Java", "is_fork": false, "fork_count": 115, "stargazer_count": 329, "size": 42287, "license": "licensed"}}