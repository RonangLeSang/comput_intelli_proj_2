{"test_class": {"identifier": "JSESSIONIDExtractorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/com/predic8/membrane/core/interceptor/balancer/JSESSIONIDExtractorTest.java"}, "test_case": {"identifier": "testRequestExtraction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRequestExtraction() throws Exception {\n\t\tRequest req = new Request();\n\n\t\tJSESSIONIDExtractor extractor = new JSESSIONIDExtractor();\n\n\t\treq.setHeader(getHeader(\"path=root/dir ; JSESSIONID=555555\"));\n\t\tassertEquals(\"555555\", extractor.getSessionId(req));\n\n\t\treq.setHeader(getHeader(\"path=root/dir ; JSESSIONID=555555; name=jim\"));\n\t\tassertEquals(\"555555\", extractor.getSessionId(req));\n\n\t\treq.setHeader(getHeader(\"JSESSIONID=555555  ;path=root/dir;\"));\n\t\tassertEquals(\"555555\", extractor.getSessionId(req));\n\n\t\treq.setHeader(getHeader(\"name=jim;path=root/dir;\"));\n\t\tassertEquals(false, extractor.hasSessionId(req));\n\n\t\treq.setHeader(getHeader(null));\n\t\tassertEquals(false, extractor.hasSessionId(req));\n\t}", "signature": "void testRequestExtraction()", "full_signature": "@Test public void testRequestExtraction()", "class_method_signature": "JSESSIONIDExtractorTest.testRequestExtraction()", "testcase": true, "constructor": false, "invocations": ["setHeader", "getHeader", "assertEquals", "getSessionId", "setHeader", "getHeader", "assertEquals", "getSessionId", "setHeader", "getHeader", "assertEquals", "getSessionId", "setHeader", "getHeader", "assertEquals", "hasSessionId", "setHeader", "getHeader", "assertEquals", "hasSessionId"]}, "focal_class": {"identifier": "JSESSIONIDExtractor", "superclass": "extends AbstractSessionIdExtractor", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(JSESSIONIDExtractor.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(JSESSIONIDExtractor.class.getName())", "var_name": "log"}, {"original_string": "Pattern pattern = Pattern.compile(\".*JSESSIONID\\\\s*=([^;]*)\");", "modifier": "", "type": "Pattern", "declarator": "pattern = Pattern.compile(\".*JSESSIONID\\\\s*=([^;]*)\")", "var_name": "pattern"}], "methods": [{"identifier": "getSessionId", "parameters": "(Message msg)", "modifiers": "@Override public", "return": "String", "signature": "String getSessionId(Message msg)", "full_signature": "@Override public String getSessionId(Message msg)", "class_method_signature": "JSESSIONIDExtractor.getSessionId(Message msg)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(XMLStreamWriter out)", "modifiers": "@Override public", "return": "void", "signature": "void write(XMLStreamWriter out)", "full_signature": "@Override public void write(XMLStreamWriter out)", "class_method_signature": "JSESSIONIDExtractor.write(XMLStreamWriter out)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/predic8/membrane/core/interceptor/balancer/JSESSIONIDExtractor.java"}, "focal_method": {"identifier": "getSessionId", "parameters": "(Message msg)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getSessionId(Message msg) throws Exception {\n\n\t\tString cookie = msg.getHeader().getFirstValue(\"Cookie\");\n\t\tif (cookie == null) {\n\t\t\tlog.debug(\"no cookie set\");\n\t\t\treturn null;\n\t\t}\n\n\t\tMatcher m = pattern.matcher(cookie);\n\n\t\tlog.debug(\"cookie: \" + msg.getHeader().getFirstValue(\"Cookie\"));\n\n\t\tif (!m.lookingAt()) return null;\n\n\t\tlog.debug(\"JSESSION cookie found: \"+m.group(1).trim());\n\t\treturn m.group(1).trim();\n\t}", "signature": "String getSessionId(Message msg)", "full_signature": "@Override public String getSessionId(Message msg)", "class_method_signature": "JSESSIONIDExtractor.getSessionId(Message msg)", "testcase": false, "constructor": false, "invocations": ["getFirstValue", "getHeader", "debug", "matcher", "debug", "getFirstValue", "getHeader", "lookingAt", "debug", "trim", "group", "trim", "group"]}, "repository": {"repo_id": 6332635, "url": "https://github.com/membrane/service-proxy", "language": "Java", "is_fork": false, "fork_count": 115, "stargazer_count": 329, "size": 42287, "license": "licensed"}}