{"test_class": {"identifier": "RewriteInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RewriteInterceptor rewriter;", "modifier": "private", "type": "RewriteInterceptor", "declarator": "rewriter", "var_name": "rewriter"}, {"original_string": "private Exchange exc;", "modifier": "private", "type": "Exchange", "declarator": "exc", "var_name": "exc"}, {"original_string": "private DispatchingInterceptor di;", "modifier": "private", "type": "DispatchingInterceptor", "declarator": "di", "var_name": "di"}, {"original_string": "private ServiceProxy sp;", "modifier": "private", "type": "ServiceProxy", "declarator": "sp", "var_name": "sp"}], "file": "core/src/test/java/com/predic8/membrane/core/interceptor/rewrite/RewriteInterceptorTest.java"}, "test_case": {"identifier": "testRewriteWithoutTarget", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRewriteWithoutTarget() throws Exception {\n\t\tassertEquals(Outcome.CONTINUE, di.handleRequest(exc));\n\t\tassertEquals(Outcome.CONTINUE, rewriter.handleRequest(exc));\n\t\tassertEquals(\"/buy?item=banana&amount=3\", exc.getDestinations().get(0));\n\t}", "signature": "void testRewriteWithoutTarget()", "full_signature": "@Test public void testRewriteWithoutTarget()", "class_method_signature": "RewriteInterceptorTest.testRewriteWithoutTarget()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "handleRequest", "assertEquals", "handleRequest", "assertEquals", "get", "getDestinations"]}, "focal_class": {"identifier": "RewriteInterceptor", "superclass": "extends AbstractInterceptor", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(RewriteInterceptor.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RewriteInterceptor.class.getName())", "var_name": "log"}, {"original_string": "private List<Mapping> mappings = new ArrayList<Mapping>();", "modifier": "private", "type": "List<Mapping>", "declarator": "mappings = new ArrayList<Mapping>()", "var_name": "mappings"}], "methods": [{"identifier": "RewriteInterceptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " RewriteInterceptor()", "full_signature": "public  RewriteInterceptor()", "class_method_signature": "RewriteInterceptor.RewriteInterceptor()", "testcase": false, "constructor": true}, {"identifier": "handleRequest", "parameters": "(Exchange exc)", "modifiers": "@Override public", "return": "Outcome", "signature": "Outcome handleRequest(Exchange exc)", "full_signature": "@Override public Outcome handleRequest(Exchange exc)", "class_method_signature": "RewriteInterceptor.handleRequest(Exchange exc)", "testcase": false, "constructor": false}, {"identifier": "logMappings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void logMappings()", "full_signature": "private void logMappings()", "class_method_signature": "RewriteInterceptor.logMappings()", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String uri, Mapping mapping)", "modifiers": "private", "return": "String", "signature": "String replace(String uri, Mapping mapping)", "full_signature": "private String replace(String uri, Mapping mapping)", "class_method_signature": "RewriteInterceptor.replace(String uri, Mapping mapping)", "testcase": false, "constructor": false}, {"identifier": "findFirstMatchingRegEx", "parameters": "(String uri)", "modifiers": "private", "return": "Mapping", "signature": "Mapping findFirstMatchingRegEx(String uri)", "full_signature": "private Mapping findFirstMatchingRegEx(String uri)", "class_method_signature": "RewriteInterceptor.findFirstMatchingRegEx(String uri)", "testcase": false, "constructor": false}, {"identifier": "getMappings", "parameters": "()", "modifiers": "public", "return": "List<Mapping>", "signature": "List<Mapping> getMappings()", "full_signature": "public List<Mapping> getMappings()", "class_method_signature": "RewriteInterceptor.getMappings()", "testcase": false, "constructor": false}, {"identifier": "setMappings", "parameters": "(List<Mapping> mappings)", "modifiers": "@Required @MCChildElement public", "return": "void", "signature": "void setMappings(List<Mapping> mappings)", "full_signature": "@Required @MCChildElement public void setMappings(List<Mapping> mappings)", "class_method_signature": "RewriteInterceptor.setMappings(List<Mapping> mappings)", "testcase": false, "constructor": false}, {"identifier": "getShortDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getShortDescription()", "full_signature": "@Override public String getShortDescription()", "class_method_signature": "RewriteInterceptor.getShortDescription()", "testcase": false, "constructor": false}, {"identifier": "getLongDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLongDescription()", "full_signature": "@Override public String getLongDescription()", "class_method_signature": "RewriteInterceptor.getLongDescription()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/predic8/membrane/core/interceptor/rewrite/RewriteInterceptor.java"}, "focal_method": {"identifier": "handleRequest", "parameters": "(Exchange exc)", "modifiers": "@Override public", "return": "Outcome", "body": "@Override\n\tpublic Outcome handleRequest(Exchange exc) throws Exception {\n\n\t\tlogMappings();\n\n\t\tListIterator<String>  it = exc.getDestinations().listIterator();\n\t\twhile ( it.hasNext() ) {\n\t\t\tString dest = it.next();\n\n\t\t\tString pathQuery = URLUtil.getPathQuery(router.getUriFactory(), dest);\n\t\t\tint pathBegin = -1;\n\t\t\tint authorityBegin = dest.indexOf(\"//\");\n\t\t\tif (authorityBegin != -1)\n\t\t\t\tpathBegin = dest.indexOf(\"/\", authorityBegin + 2);\n\t\t\tString schemaHostPort = pathBegin == -1 ? null : dest.substring(0, pathBegin);\n\n\t\t\tlog.debug(\"pathQuery: \" + pathQuery);\n\t\t\tlog.debug(\"schemaHostPort: \" + schemaHostPort);\n\n\t\t\tMapping mapping = findFirstMatchingRegEx(pathQuery);\n\t\t\tif (mapping == null)\n\t\t\t\tcontinue;\n\n\t\t\tType do_ = mapping.getDo();\n\n\t\t\tlog.debug(\"match found: \" + mapping.from);\n\t\t\tlog.debug(\"replacing with: \" + mapping.to);\n\t\t\tlog.debug(\"for type: \" + do_);\n\n\t\t\tString newDest = replace(pathQuery, mapping);\n\n\t\t\tif (do_ == Type.REDIRECT_PERMANENT || do_ == Type.REDIRECT_TEMPORARY) {\n\t\t\t\texc.setResponse(Response.redirect(newDest, do_ == Type.REDIRECT_PERMANENT).build());\n\t\t\t\treturn Outcome.RETURN;\n\t\t\t}\n\n\t\t\tif (!newDest.contains(\"://\") && schemaHostPort != null) {\n\t\t\t\t// prepend schema, host and port from original uri\n\t\t\t\tnewDest = schemaHostPort + newDest;\n\t\t\t}\n\n\t\t\tit.set(newDest);\n\t\t}\n\n\t\tMapping mapping = findFirstMatchingRegEx(exc.getRequest().getUri());\n\t\tif (mapping != null && mapping.do_ == Type.REWRITE) {\n\t\t\tString newDest = replace(exc.getRequest().getUri(), mapping);\n\t\t\tif (newDest.contains(\"://\")) {\n\t\t\t\tnewDest = URLUtil.getPathQuery(router.getUriFactory(), newDest);\n\t\t\t}\n\t\t\texc.getRequest().setUri(newDest);\n\t\t}\n\n\t\treturn Outcome.CONTINUE;\n\t}", "signature": "Outcome handleRequest(Exchange exc)", "full_signature": "@Override public Outcome handleRequest(Exchange exc)", "class_method_signature": "RewriteInterceptor.handleRequest(Exchange exc)", "testcase": false, "constructor": false, "invocations": ["logMappings", "listIterator", "getDestinations", "hasNext", "next", "getPathQuery", "getUriFactory", "indexOf", "indexOf", "substring", "debug", "debug", "findFirstMatchingRegEx", "getDo", "debug", "debug", "debug", "replace", "setResponse", "build", "redirect", "contains", "set", "findFirstMatchingRegEx", "getUri", "getRequest", "replace", "getUri", "getRequest", "contains", "getPathQuery", "getUriFactory", "setUri", "getRequest"]}, "repository": {"repo_id": 6332635, "url": "https://github.com/membrane/service-proxy", "language": "Java", "is_fork": false, "fork_count": 115, "stargazer_count": 329, "size": 42287, "license": "licensed"}}