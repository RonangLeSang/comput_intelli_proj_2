{"test_class": {"identifier": "URLUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "pax-runner-handler/src/test/java/org/ops4j/pax/runner/handler/internal/URLUtilsTest.java"}, "test_case": {"identifier": "setURLStreamHandlerFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setURLStreamHandlerFactory()\n    {\n        URLStreamHandlerFactory factory = createMock( URLStreamHandlerFactory.class );\n        URLUtils.setURLStreamHandlerFactory( factory );\n        assertEquals( \"Factory\", factory, URLUtils.getURLStreamHandlerFactory() );\n    }", "signature": "void setURLStreamHandlerFactory()", "full_signature": "@Test public void setURLStreamHandlerFactory()", "class_method_signature": "URLUtilsTest.setURLStreamHandlerFactory()", "testcase": true, "constructor": false, "invocations": ["createMock", "setURLStreamHandlerFactory", "assertEquals", "getURLStreamHandlerFactory"]}, "focal_class": {"identifier": "URLUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOGGER = LogFactory.getLog( URLUtils.class );", "modifier": "private static final", "type": "Log", "declarator": "LOGGER = LogFactory.getLog( URLUtils.class )", "var_name": "LOGGER"}], "methods": [{"identifier": "URLUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " URLUtils()", "full_signature": "private  URLUtils()", "class_method_signature": "URLUtils.URLUtils()", "testcase": false, "constructor": true}, {"identifier": "setURLStreamHandlerFactory", "parameters": "( final URLStreamHandlerFactory urlStreamHandlerFactory )", "modifiers": "public static", "return": "void", "signature": "void setURLStreamHandlerFactory( final URLStreamHandlerFactory urlStreamHandlerFactory )", "full_signature": "public static void setURLStreamHandlerFactory( final URLStreamHandlerFactory urlStreamHandlerFactory )", "class_method_signature": "URLUtils.setURLStreamHandlerFactory( final URLStreamHandlerFactory urlStreamHandlerFactory )", "testcase": false, "constructor": false}, {"identifier": "resetURLStreamHandlerFactory", "parameters": "()", "modifiers": "public static", "return": "URLStreamHandlerFactory", "signature": "URLStreamHandlerFactory resetURLStreamHandlerFactory()", "full_signature": "public static URLStreamHandlerFactory resetURLStreamHandlerFactory()", "class_method_signature": "URLUtils.resetURLStreamHandlerFactory()", "testcase": false, "constructor": false}, {"identifier": "getURLStreamHandlerFactory", "parameters": "()", "modifiers": "public static", "return": "URLStreamHandlerFactory", "signature": "URLStreamHandlerFactory getURLStreamHandlerFactory()", "full_signature": "public static URLStreamHandlerFactory getURLStreamHandlerFactory()", "class_method_signature": "URLUtils.getURLStreamHandlerFactory()", "testcase": false, "constructor": false}, {"identifier": "getURLStreamHandlerFactoryField", "parameters": "()", "modifiers": "private static", "return": "Field", "signature": "Field getURLStreamHandlerFactoryField()", "full_signature": "private static Field getURLStreamHandlerFactoryField()", "class_method_signature": "URLUtils.getURLStreamHandlerFactoryField()", "testcase": false, "constructor": false}], "file": "pax-runner-handler/src/main/java/org/ops4j/pax/runner/handler/internal/URLUtils.java"}, "focal_method": {"identifier": "setURLStreamHandlerFactory", "parameters": "( final URLStreamHandlerFactory urlStreamHandlerFactory )", "modifiers": "public static", "return": "void", "body": "public static void setURLStreamHandlerFactory( final URLStreamHandlerFactory urlStreamHandlerFactory )\n    {\n        try\n        {\n            URL.setURLStreamHandlerFactory( urlStreamHandlerFactory );\n        }\n        catch( Error err )\n        {\n            // usually we get here because the URLStreamHandlerFactory was already set and is only permited onec pe JVM\n            // so, we will try to \"still\" the static field inside URL via reflection and install our handler factory\n            // that will delegate to the original factory\n            LOGGER.debug( \"URLStreamHandlerFactory already set in the system. Replacing it with a composite\" );\n            synchronized( URL.class )\n            {\n                final URLStreamHandlerFactory currentFactory = resetURLStreamHandlerFactory();\n                // ususally it should not be null as otherwise we shouldn't be here but then we try again\n                if( currentFactory == null )\n                {\n                    URL.setURLStreamHandlerFactory( urlStreamHandlerFactory );\n                }\n                else if( currentFactory instanceof CompositeURLStreamHandlerFactory )\n                {\n                    URL.setURLStreamHandlerFactory( currentFactory );\n                    ( (CompositeURLStreamHandlerFactory) currentFactory ).registerFactory( urlStreamHandlerFactory );\n                }\n                else\n                {\n                    URL.setURLStreamHandlerFactory(\n                        new CompositeURLStreamHandlerFactory()\n                            .registerFactory( urlStreamHandlerFactory )\n                            .registerFactory( currentFactory )\n                    );\n                }\n            }\n        }\n    }", "signature": "void setURLStreamHandlerFactory( final URLStreamHandlerFactory urlStreamHandlerFactory )", "full_signature": "public static void setURLStreamHandlerFactory( final URLStreamHandlerFactory urlStreamHandlerFactory )", "class_method_signature": "URLUtils.setURLStreamHandlerFactory( final URLStreamHandlerFactory urlStreamHandlerFactory )", "testcase": false, "constructor": false, "invocations": ["setURLStreamHandlerFactory", "debug", "resetURLStreamHandlerFactory", "setURLStreamHandlerFactory", "setURLStreamHandlerFactory", "registerFactory", "setURLStreamHandlerFactory", "registerFactory", "registerFactory"]}, "repository": {"repo_id": 905232, "url": "https://github.com/ops4j/org.ops4j.pax.runner", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 44, "size": 18304, "license": "licensed"}}