{"test_class": {"identifier": "ExtensionBasedProvisionSchemaResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProvisionSchemaResolver m_underTest;", "modifier": "private", "type": "ProvisionSchemaResolver", "declarator": "m_underTest", "var_name": "m_underTest"}], "file": "pax-runner/src/test/java/org/ops4j/pax/runner/ExtensionBasedProvisionSchemaResolverTest.java"}, "test_case": {"identifier": "resolvePOMWithFileProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolvePOMWithFileProtocol()\n    {\n        assertEquals( \"Resolved\", \"scan-pom:file:pom.xml\", m_underTest.resolve( \"file:pom.xml\" ) );\n    }", "signature": "void resolvePOMWithFileProtocol()", "full_signature": "@Test public void resolvePOMWithFileProtocol()", "class_method_signature": "ExtensionBasedProvisionSchemaResolverTest.resolvePOMWithFileProtocol()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "resolve"]}, "focal_class": {"identifier": "ExtensionBasedProvisionSchemaResolver", "superclass": "", "interfaces": "implements ProvisionSchemaResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "( final String toResolve )", "modifiers": "public", "return": "String", "signature": "String resolve( final String toResolve )", "full_signature": "public String resolve( final String toResolve )", "class_method_signature": "ExtensionBasedProvisionSchemaResolver.resolve( final String toResolve )", "testcase": false, "constructor": false}], "file": "pax-runner/src/main/java/org/ops4j/pax/runner/ExtensionBasedProvisionSchemaResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "( final String toResolve )", "modifiers": "public", "return": "String", "body": "public String resolve( final String toResolve )\n    {\n        if( toResolve == null || toResolve.trim().length() == 0 )\n        {\n            return null;\n        }\n        if( toResolve.matches( \"scan-.*:.*\" ) )\n        {\n            return toResolve;\n        }\n        String options = \"\";\n        String resolve = toResolve;\n        if( toResolve.contains( \"@\" ) )\n        {\n            final int startOfOption = toResolve.indexOf( \"@\" );\n            options = toResolve.substring( startOfOption );\n            resolve = toResolve.substring( 0, startOfOption );\n        }\n        // first resolve schema\n        String schema = org.ops4j.pax.scanner.dir.ServiceConstants.SCHEMA;\n        if( !resolve.endsWith( \"/\" ) && !resolve.endsWith( \"\\\\\" ) && !resolve.contains( \"!/\" ) )\n        {\n            // check if is a pom using mvn protocol\n            if( resolve.startsWith( org.ops4j.pax.url.mvn.ServiceConstants.PROTOCOL )\n                && resolve.endsWith( \"pom\" ) )\n            {\n                schema = org.ops4j.pax.scanner.pom.ServiceConstants.SCHEMA;\n            }\n            // check if starts with mvn / wrap / war / obr, because most common it will be a bundle\n            else if( resolve.startsWith( org.ops4j.pax.url.mvn.ServiceConstants.PROTOCOL )\n                     || resolve.startsWith( org.ops4j.pax.url.wrap.ServiceConstants.PROTOCOL )\n                     || resolve.startsWith( org.ops4j.pax.url.war.ServiceConstants.PROTOCOL_WAR )\n                     || resolve.startsWith( org.ops4j.pax.url.war.ServiceConstants.PROTOCOL_WAR_INSTRUCTIONS )\n                     || resolve.startsWith( org.ops4j.pax.url.war.ServiceConstants.PROTOCOL_WAR_REFERENCE )\n                     || resolve.startsWith( org.ops4j.pax.url.war.ServiceConstants.PROTOCOL_WEB_BUNDLE )\n                     || resolve.startsWith( org.ops4j.pax.url.obr.ServiceConstants.PROTOCOL )\n                     || resolve.startsWith( org.ops4j.pax.url.assembly.ServiceConstants.PROTOCOL )\n                     || resolve.startsWith( org.ops4j.pax.url.assembly.ServiceConstants.PROTOCOL_REFERENCE )\n                     || resolve.startsWith( org.ops4j.pax.url.dir.ServiceConstants.PROTOCOL ) )\n            {\n                schema = org.ops4j.pax.scanner.bundle.ServiceConstants.SCHEMA;\n            }\n            else\n            {\n                int indexOfSlash = resolve.lastIndexOf( \"/\" );\n                if( indexOfSlash == -1 )\n                {\n                    indexOfSlash = resolve.lastIndexOf( \"\\\\\" );\n                }\n                final int indexOfDot = resolve.lastIndexOf( \".\" );\n                if( indexOfDot > indexOfSlash )\n                {\n                    schema = org.ops4j.pax.scanner.file.ServiceConstants.SCHEMA;\n                    if( indexOfDot < resolve.length() - 1 )\n                    {\n                        final String extension = resolve.substring( indexOfDot + 1 ).toUpperCase();\n                        if( \"XML\".equals( extension ) )\n                        {\n                            schema = org.ops4j.pax.scanner.pom.ServiceConstants.SCHEMA;\n                        }\n                        else if( \"ZIP\".equals( extension ) )\n                        {\n                            schema = org.ops4j.pax.scanner.dir.ServiceConstants.SCHEMA;\n                        }\n                        else if( \"JAR\".equals( extension ) || \"BUNDLE\".equals( extension ) )\n                        {\n                            schema = org.ops4j.pax.scanner.bundle.ServiceConstants.SCHEMA;\n                        }\n                        else if( \"OBR\".equals( extension ) )\n                        {\n                            schema = org.ops4j.pax.scanner.obr.ServiceConstants.SCHEMA;\n                        }\n                        else if( \"COMPOSITE\".equals( extension ) || \"PROFILE\".equals( extension ) )\n                        {\n                            schema = org.ops4j.pax.scanner.composite.ServiceConstants.SCHEMA;\n                        }\n                    }\n                }\n            }\n        }\n        // then check out if is a local file\n        final File file = new File( resolve );\n        String resolved = resolve;\n        if( file.exists() )\n        {\n            try\n            {\n                resolved = file.toURL().toExternalForm();\n            }\n            catch( MalformedURLException ignore )\n            {\n                // ignore as this should not happen if the file exists\n            }\n        }\n        return schema + org.ops4j.pax.scanner.ServiceConstants.SEPARATOR_SCHEME + resolved + options;\n    }", "signature": "String resolve( final String toResolve )", "full_signature": "public String resolve( final String toResolve )", "class_method_signature": "ExtensionBasedProvisionSchemaResolver.resolve( final String toResolve )", "testcase": false, "constructor": false, "invocations": ["length", "trim", "matches", "contains", "indexOf", "substring", "substring", "endsWith", "endsWith", "contains", "startsWith", "endsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "lastIndexOf", "lastIndexOf", "lastIndexOf", "length", "toUpperCase", "substring", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "exists", "toExternalForm", "toURL"]}, "repository": {"repo_id": 905232, "url": "https://github.com/ops4j/org.ops4j.pax.runner", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 44, "size": 18304, "license": "licensed"}}