{"test_class": {"identifier": "CoinsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Coin[] testAmounts = new Coin[]{\n    Coin.parseCoin(\"20999999.12345678\"), // 20,999,999.123 456 78\n    Coin.parseCoin(\"0.12345678\"), // 0.123 456 78\n    Coin.parseCoin(\"0.00000001\") // 0.000 000 01\n  };", "modifier": "private", "type": "Coin[]", "declarator": "testAmounts = new Coin[]{\n    Coin.parseCoin(\"20999999.12345678\"), // 20,999,999.123 456 78\n    Coin.parseCoin(\"0.12345678\"), // 0.123 456 78\n    Coin.parseCoin(\"0.00000001\") // 0.000 000 01\n  }", "var_name": "testAmounts"}, {"original_string": "private BigDecimal exchangeRate = new BigDecimal(\"1000\");", "modifier": "private", "type": "BigDecimal", "declarator": "exchangeRate = new BigDecimal(\"1000\")", "var_name": "exchangeRate"}], "file": "mbhd-core/src/test/java/org/multibit/hd/core/utils/CoinsTest.java"}, "test_case": {"identifier": "testToLocalAmount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToLocalAmount() throws Exception {\n\n    // Large\n    BigDecimal expected1 = new BigDecimal(\"20999999123.456780000000\");\n    BigDecimal actual1 = Coins.toLocalAmount(testAmounts[0], exchangeRate);\n\n    assertThat(actual1).isEqualTo(expected1);\n\n    // Medium\n    BigDecimal expected2 = new BigDecimal(\"123.456780000000\");\n    BigDecimal actual2 = Coins.toLocalAmount(testAmounts[1], exchangeRate);\n\n    assertThat(actual2).isEqualTo(expected2);\n\n    // Small\n    BigDecimal expected3 = new BigDecimal(\"0.000010000000\");\n    BigDecimal actual3 = Coins.toLocalAmount(testAmounts[2], exchangeRate);\n\n    assertThat(actual3).isEqualTo(expected3);\n\n\n  }", "signature": "void testToLocalAmount()", "full_signature": "@Test public void testToLocalAmount()", "class_method_signature": "CoinsTest.testToLocalAmount()", "testcase": true, "constructor": false, "invocations": ["toLocalAmount", "isEqualTo", "assertThat", "toLocalAmount", "isEqualTo", "assertThat", "toLocalAmount", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "Coins", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final BigDecimal BTC_COIN = new BigDecimal(\"1\"+Strings.repeat(\"0\",8));", "modifier": "public static final", "type": "BigDecimal", "declarator": "BTC_COIN = new BigDecimal(\"1\"+Strings.repeat(\"0\",8))", "var_name": "BTC_COIN"}, {"original_string": "private static final int BITCOIN_SCALE = 12;", "modifier": "private static final", "type": "int", "declarator": "BITCOIN_SCALE = 12", "var_name": "BITCOIN_SCALE"}, {"original_string": "private static final int LOCAL_SCALE = 12;", "modifier": "private static final", "type": "int", "declarator": "LOCAL_SCALE = 12", "var_name": "LOCAL_SCALE"}], "methods": [{"identifier": "toLocalAmount", "parameters": "(Coin coin, BigDecimal exchangeRate)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toLocalAmount(Coin coin, BigDecimal exchangeRate)", "full_signature": "public static BigDecimal toLocalAmount(Coin coin, BigDecimal exchangeRate)", "class_method_signature": "Coins.toLocalAmount(Coin coin, BigDecimal exchangeRate)", "testcase": false, "constructor": false}, {"identifier": "fromLocalAmount", "parameters": "(BigDecimal localAmount, BigDecimal exchangeRate)", "modifiers": "public static", "return": "Coin", "signature": "Coin fromLocalAmount(BigDecimal localAmount, BigDecimal exchangeRate)", "full_signature": "public static Coin fromLocalAmount(BigDecimal localAmount, BigDecimal exchangeRate)", "class_method_signature": "Coins.fromLocalAmount(BigDecimal localAmount, BigDecimal exchangeRate)", "testcase": false, "constructor": false}, {"identifier": "fromPlainAmount", "parameters": "(BigDecimal plainAmount)", "modifiers": "public static", "return": "Coin", "signature": "Coin fromPlainAmount(BigDecimal plainAmount)", "full_signature": "public static Coin fromPlainAmount(BigDecimal plainAmount)", "class_method_signature": "Coins.fromPlainAmount(BigDecimal plainAmount)", "testcase": false, "constructor": false}, {"identifier": "fromPlainAmount", "parameters": "(String plainAmount)", "modifiers": "public static", "return": "Coin", "signature": "Coin fromPlainAmount(String plainAmount)", "full_signature": "public static Coin fromPlainAmount(String plainAmount)", "class_method_signature": "Coins.fromPlainAmount(String plainAmount)", "testcase": false, "constructor": false}, {"identifier": "fromSymbolicAmount", "parameters": "(BigDecimal symbolicAmount, BitcoinSymbol bitcoinSymbol)", "modifiers": "public static", "return": "Coin", "signature": "Coin fromSymbolicAmount(BigDecimal symbolicAmount, BitcoinSymbol bitcoinSymbol)", "full_signature": "public static Coin fromSymbolicAmount(BigDecimal symbolicAmount, BitcoinSymbol bitcoinSymbol)", "class_method_signature": "Coins.fromSymbolicAmount(BigDecimal symbolicAmount, BitcoinSymbol bitcoinSymbol)", "testcase": false, "constructor": false}, {"identifier": "toSymbolicAmount", "parameters": "(Coin coin, BitcoinSymbol bitcoinSymbol)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toSymbolicAmount(Coin coin, BitcoinSymbol bitcoinSymbol)", "full_signature": "public static BigDecimal toSymbolicAmount(Coin coin, BitcoinSymbol bitcoinSymbol)", "class_method_signature": "Coins.toSymbolicAmount(Coin coin, BitcoinSymbol bitcoinSymbol)", "testcase": false, "constructor": false}], "file": "mbhd-core/src/main/java/org/multibit/hd/core/utils/Coins.java"}, "focal_method": {"identifier": "toLocalAmount", "parameters": "(Coin coin, BigDecimal exchangeRate)", "modifiers": "public static", "return": "BigDecimal", "body": "public static BigDecimal toLocalAmount(Coin coin, BigDecimal exchangeRate) {\n\n    Preconditions.checkNotNull(coin, \"'coin' must be present\");\n    Preconditions.checkNotNull(exchangeRate, \"'exchangeRate' must be present\");\n\n    // Convert coins to bitcoins\n    BigDecimal bitcoins = BigDecimal.valueOf(coin.longValue()).divide(BTC_COIN, LOCAL_SCALE, RoundingMode.HALF_EVEN);\n\n    return exchangeRate.multiply(bitcoins);\n\n  }", "signature": "BigDecimal toLocalAmount(Coin coin, BigDecimal exchangeRate)", "full_signature": "public static BigDecimal toLocalAmount(Coin coin, BigDecimal exchangeRate)", "class_method_signature": "Coins.toLocalAmount(Coin coin, BigDecimal exchangeRate)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "divide", "valueOf", "longValue", "multiply"]}, "repository": {"repo_id": 13379760, "url": "https://github.com/Multibit-Legacy/multibit-hd", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 171, "size": 51941, "license": "licensed"}}