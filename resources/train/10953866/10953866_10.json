{"test_class": {"identifier": "TestJobHistoryFileParserBase", "superclass": "", "interfaces": "", "fields": [], "file": "hraven-etl/src/test/java/com/twitter/hraven/etl/TestJobHistoryFileParserBase.java"}, "test_case": {"identifier": "testGetXmxValueIncorrectInput2", "parameters": "()", "modifiers": "@Test(expected=ProcessingException.class) public", "return": "void", "body": "@Test(expected=ProcessingException.class) \n  public void testGetXmxValueIncorrectInput2(){\n    String jc = \" -Xmx1024Q\" ;\n    @SuppressWarnings(\"unused\")\n    Long value = JobHistoryFileParserBase.getXmxValue(jc);\n  }", "signature": "void testGetXmxValueIncorrectInput2()", "full_signature": "@Test(expected=ProcessingException.class) public void testGetXmxValueIncorrectInput2()", "class_method_signature": "TestJobHistoryFileParserBase.testGetXmxValueIncorrectInput2()", "testcase": true, "constructor": false, "invocations": ["getXmxValue"]}, "focal_class": {"identifier": "JobHistoryFileParserBase", "superclass": "", "interfaces": "implements JobHistoryFileParser", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(JobHistoryFileParserBase.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(JobHistoryFileParserBase.class)", "var_name": "LOG"}, {"original_string": "protected final Configuration jobConf;", "modifier": "protected final", "type": "Configuration", "declarator": "jobConf", "var_name": "jobConf"}], "methods": [{"identifier": "JobHistoryFileParserBase", "parameters": "(Configuration conf)", "modifiers": "protected", "return": "", "signature": " JobHistoryFileParserBase(Configuration conf)", "full_signature": "protected  JobHistoryFileParserBase(Configuration conf)", "class_method_signature": "JobHistoryFileParserBase.JobHistoryFileParserBase(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "getHadoopVersionPut", "parameters": "(HadoopVersion historyFileVersion, byte[] jobKeyBytes)", "modifiers": "public", "return": "Put", "signature": "Put getHadoopVersionPut(HadoopVersion historyFileVersion, byte[] jobKeyBytes)", "full_signature": "public Put getHadoopVersionPut(HadoopVersion historyFileVersion, byte[] jobKeyBytes)", "class_method_signature": "JobHistoryFileParserBase.getHadoopVersionPut(HadoopVersion historyFileVersion, byte[] jobKeyBytes)", "testcase": false, "constructor": false}, {"identifier": "extractXmxValueStr", "parameters": "(String javaChildOptsStr)", "modifiers": "static", "return": "String", "signature": "String extractXmxValueStr(String javaChildOptsStr)", "full_signature": "static String extractXmxValueStr(String javaChildOptsStr)", "class_method_signature": "JobHistoryFileParserBase.extractXmxValueStr(String javaChildOptsStr)", "testcase": false, "constructor": false}, {"identifier": "getXmxValue", "parameters": "(String javaChildOptsStr)", "modifiers": "public static", "return": "long", "signature": "long getXmxValue(String javaChildOptsStr)", "full_signature": "public static long getXmxValue(String javaChildOptsStr)", "class_method_signature": "JobHistoryFileParserBase.getXmxValue(String javaChildOptsStr)", "testcase": false, "constructor": false}, {"identifier": "getXmxTotal", "parameters": "(final long xmx75)", "modifiers": "public static", "return": "long", "signature": "long getXmxTotal(final long xmx75)", "full_signature": "public static long getXmxTotal(final long xmx75)", "class_method_signature": "JobHistoryFileParserBase.getXmxTotal(final long xmx75)", "testcase": false, "constructor": false}, {"identifier": "getSubmitTimeMillisFromJobHistory", "parameters": "(byte[] jobHistoryRaw)", "modifiers": "public static", "return": "long", "signature": "long getSubmitTimeMillisFromJobHistory(byte[] jobHistoryRaw)", "full_signature": "public static long getSubmitTimeMillisFromJobHistory(byte[] jobHistoryRaw)", "class_method_signature": "JobHistoryFileParserBase.getSubmitTimeMillisFromJobHistory(byte[] jobHistoryRaw)", "testcase": false, "constructor": false}, {"identifier": "calculateJobCost", "parameters": "(long mbMillis, double computeTco, long machineMemory)", "modifiers": "public static", "return": "double", "signature": "double calculateJobCost(long mbMillis, double computeTco, long machineMemory)", "full_signature": "public static double calculateJobCost(long mbMillis, double computeTco, long machineMemory)", "class_method_signature": "JobHistoryFileParserBase.calculateJobCost(long mbMillis, double computeTco, long machineMemory)", "testcase": false, "constructor": false}], "file": "hraven-etl/src/main/java/com/twitter/hraven/etl/JobHistoryFileParserBase.java"}, "focal_method": {"identifier": "getXmxValue", "parameters": "(String javaChildOptsStr)", "modifiers": "public static", "return": "long", "body": "public static long getXmxValue(String javaChildOptsStr) {\n    long retVal = 0L;\n    String valueStr = extractXmxValueStr(javaChildOptsStr);\n    char lastChar = valueStr.charAt(valueStr.length() - 1);\n    try {\n      if (Character.isLetter(lastChar)) {\n        String xmxValStr = valueStr.substring(0, valueStr.length() - 1);\n        retVal = Long.parseLong(xmxValStr);\n        switch (lastChar) {\n        case 'M':\n        case 'm':\n          // do nothing, since it's already in megabytes\n          break;\n        case 'K':\n        case 'k':\n          // convert kilobytes to megabytes\n          retVal /= 1024;\n          break;\n        case 'G':\n        case 'g':\n          // convert gigabytes to megabtyes\n          retVal *= 1024;\n          break;\n        default:\n          throw new ProcessingException(\"Unable to get the Xmx value from \" + javaChildOptsStr\n              + \" invalid value for Xmx \" + xmxValStr);\n       }\n      } else {\n        retVal = Long.parseLong(valueStr);\n        // now convert to megabytes\n        // since this was in bytes since the last char was absent\n        retVal /= (1024 * 1024);\n      }\n    } catch (NumberFormatException nfe) {\n      LOG.error(\"Unable to get the Xmx value from \" + javaChildOptsStr + \"\\n\", nfe);\n      throw new ProcessingException(\"Unable to get the Xmx value from \" + javaChildOptsStr, nfe);\n    }\n    return retVal;\n  }", "signature": "long getXmxValue(String javaChildOptsStr)", "full_signature": "public static long getXmxValue(String javaChildOptsStr)", "class_method_signature": "JobHistoryFileParserBase.getXmxValue(String javaChildOptsStr)", "testcase": false, "constructor": false, "invocations": ["extractXmxValueStr", "charAt", "length", "isLetter", "substring", "length", "parseLong", "parseLong", "error"]}, "repository": {"repo_id": 10953866, "url": "https://github.com/twitter/hraven", "language": "Java", "is_fork": false, "fork_count": 66, "stargazer_count": 126, "size": 1235, "license": "licensed"}}