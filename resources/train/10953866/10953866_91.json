{"test_class": {"identifier": "TestQualifiedPathKey", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String cluster1 = \"cluster1\";", "modifier": "private static final", "type": "String", "declarator": "cluster1 = \"cluster1\"", "var_name": "cluster1"}, {"original_string": "private static final String path1 = \"path1\";", "modifier": "private static final", "type": "String", "declarator": "path1 = \"path1\"", "var_name": "path1"}, {"original_string": "private static final String namespace1 = \"namespace1\";", "modifier": "private static final", "type": "String", "declarator": "namespace1 = \"namespace1\"", "var_name": "namespace1"}, {"original_string": "private static final String namespace2 = \"namespace2\";", "modifier": "private static final", "type": "String", "declarator": "namespace2 = \"namespace2\"", "var_name": "namespace2"}], "file": "hraven-core/src/test/java/com/twitter/hraven/TestQualifiedPathKey.java"}, "test_case": {"identifier": "testInEqualityWithNamespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInEqualityWithNamespace() throws Exception {\n    // keep only the namespace name different\n    QualifiedPathKey key1 = new QualifiedPathKey(cluster1, path1, namespace1);\n    QualifiedPathKey key2 = new QualifiedPathKey(cluster1, path1, namespace2);\n    assertEquals(key1.compareTo(key2), -1);\n  }", "signature": "void testInEqualityWithNamespace()", "full_signature": "@Test public void testInEqualityWithNamespace()", "class_method_signature": "TestQualifiedPathKey.testInEqualityWithNamespace()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compareTo"]}, "focal_class": {"identifier": "QualifiedPathKey", "superclass": "", "interfaces": "implements Comparable<Object>", "fields": [{"original_string": "private final String cluster;", "modifier": "private final", "type": "String", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final String namespace;", "modifier": "private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}], "methods": [{"identifier": "QualifiedPathKey", "parameters": "(String cluster, String path)", "modifiers": "public", "return": "", "signature": " QualifiedPathKey(String cluster, String path)", "full_signature": "public  QualifiedPathKey(String cluster, String path)", "class_method_signature": "QualifiedPathKey.QualifiedPathKey(String cluster, String path)", "testcase": false, "constructor": true}, {"identifier": "QualifiedPathKey", "parameters": "(String cluster, String path, String namespace)", "modifiers": "public", "return": "", "signature": " QualifiedPathKey(String cluster, String path, String namespace)", "full_signature": "public  QualifiedPathKey(String cluster, String path, String namespace)", "class_method_signature": "QualifiedPathKey.QualifiedPathKey(String cluster, String path, String namespace)", "testcase": false, "constructor": true}, {"identifier": "getCluster", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCluster()", "full_signature": "public String getCluster()", "class_method_signature": "QualifiedPathKey.getCluster()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPath()", "full_signature": "public String getPath()", "class_method_signature": "QualifiedPathKey.getPath()", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespace()", "full_signature": "public String getNamespace()", "class_method_signature": "QualifiedPathKey.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "QualifiedPathKey.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Object other)", "full_signature": "@Override public int compareTo(Object other)", "class_method_signature": "QualifiedPathKey.compareTo(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "QualifiedPathKey.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "QualifiedPathKey.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hasFederatedNS", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasFederatedNS()", "full_signature": "public boolean hasFederatedNS()", "class_method_signature": "QualifiedPathKey.hasFederatedNS()", "testcase": false, "constructor": false}], "file": "hraven-core/src/main/java/com/twitter/hraven/QualifiedPathKey.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(Object other)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compareTo(Object other) {\n    if (other == null) {\n      return -1;\n    }\n    QualifiedPathKey otherKey = (QualifiedPathKey) other;\n    if (StringUtils.isNotBlank(this.namespace)) {\n      return new CompareToBuilder()\n          .append(this.cluster, otherKey.getCluster())\n          .append(getPath(), otherKey.getPath())\n          .append(this.namespace, otherKey.getNamespace())\n          .toComparison();\n    } else {\n      return new CompareToBuilder()\n        .append(this.cluster, otherKey.getCluster())\n        .append(getPath(), otherKey.getPath())\n        .toComparison();\n    }\n  }", "signature": "int compareTo(Object other)", "full_signature": "@Override public int compareTo(Object other)", "class_method_signature": "QualifiedPathKey.compareTo(Object other)", "testcase": false, "constructor": false, "invocations": ["isNotBlank", "toComparison", "append", "append", "append", "getCluster", "getPath", "getPath", "getNamespace", "toComparison", "append", "append", "getCluster", "getPath", "getPath"]}, "repository": {"repo_id": 10953866, "url": "https://github.com/twitter/hraven", "language": "Java", "is_fork": false, "fork_count": 66, "stargazer_count": 126, "size": 1235, "license": "licensed"}}