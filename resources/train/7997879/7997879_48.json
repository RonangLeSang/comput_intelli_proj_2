{"test_class": {"identifier": "HistogramTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "CollectorRegistry registry;", "modifier": "", "type": "CollectorRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "Histogram noLabels, labels;", "modifier": "", "type": "Histogram", "declarator": "noLabels", "var_name": "noLabels"}, {"original_string": "@Rule\n  public final ExpectedException thrown = none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "thrown = none()", "var_name": "thrown"}], "file": "simpleclient/src/test/java/io/prometheus/client/HistogramTest.java"}, "test_case": {"identifier": "testCollect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCollect() {\n    labels.labels(\"a\").observe(2);\n    List<Collector.MetricFamilySamples> mfs = labels.collect();\n\n    ArrayList<Collector.MetricFamilySamples.Sample> samples = new ArrayList<Collector.MetricFamilySamples.Sample>();\n    ArrayList<String> labelNames = new ArrayList<String>();\n    labelNames.add(\"l\");\n    ArrayList<String> labelValues = new ArrayList<String>();\n    labelValues.add(\"a\");\n    ArrayList<String> labelNamesLe = new ArrayList<String>(labelNames);\n    labelNamesLe.add(\"le\");\n    for (String bucket: new String[]{\"0.005\", \"0.01\", \"0.025\", \"0.05\", \"0.075\", \"0.1\", \"0.25\", \"0.5\", \"0.75\", \"1.0\"}) {\n      ArrayList<String> labelValuesLe = new ArrayList<String>(labelValues);\n      labelValuesLe.add(bucket);\n      samples.add(new Collector.MetricFamilySamples.Sample(\"labels_bucket\", labelNamesLe, labelValuesLe, 0.0));\n    }\n    for (String bucket: new String[]{\"2.5\", \"5.0\", \"7.5\", \"10.0\", \"+Inf\"}) {\n      ArrayList<String> labelValuesLe = new ArrayList<String>(labelValues);\n      labelValuesLe.add(bucket);\n      samples.add(new Collector.MetricFamilySamples.Sample(\"labels_bucket\", labelNamesLe, labelValuesLe, 1.0));\n    }\n    samples.add(new Collector.MetricFamilySamples.Sample(\"labels_count\", labelNames, labelValues, 1.0));\n    samples.add(new Collector.MetricFamilySamples.Sample(\"labels_sum\", labelNames, labelValues, 2.0));\n    Collector.MetricFamilySamples mfsFixture = new Collector.MetricFamilySamples(\"labels\", Collector.Type.HISTOGRAM, \"help\", samples);\n\n    assertEquals(1, mfs.size());\n    assertEquals(mfsFixture, mfs.get(0));\n  }", "signature": "void testCollect()", "full_signature": "@Test public void testCollect()", "class_method_signature": "HistogramTest.testCollect()", "testcase": true, "constructor": false, "invocations": ["observe", "labels", "collect", "add", "add", "add", "add", "add", "add", "add", "add", "add", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "Histogram", "superclass": "extends SimpleCollector<Histogram.Child>", "interfaces": "implements Collector.Describable", "fields": [{"original_string": "private final double[] buckets;", "modifier": "private final", "type": "double[]", "declarator": "buckets", "var_name": "buckets"}], "methods": [{"identifier": "Histogram", "parameters": "(Builder b)", "modifiers": "", "return": "", "signature": " Histogram(Builder b)", "full_signature": "  Histogram(Builder b)", "class_method_signature": "Histogram.Histogram(Builder b)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "(String name, String help)", "modifiers": "public static", "return": "Builder", "signature": "Builder build(String name, String help)", "full_signature": "public static Builder build(String name, String help)", "class_method_signature": "Histogram.build(String name, String help)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder build()", "full_signature": "public static Builder build()", "class_method_signature": "Histogram.build()", "testcase": false, "constructor": false}, {"identifier": "newChild", "parameters": "()", "modifiers": "@Override protected", "return": "Child", "signature": "Child newChild()", "full_signature": "@Override protected Child newChild()", "class_method_signature": "Histogram.newChild()", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "(double amt)", "modifiers": "public", "return": "void", "signature": "void observe(double amt)", "full_signature": "public void observe(double amt)", "class_method_signature": "Histogram.observe(double amt)", "testcase": false, "constructor": false}, {"identifier": "startTimer", "parameters": "()", "modifiers": "public", "return": "Timer", "signature": "Timer startTimer()", "full_signature": "public Timer startTimer()", "class_method_signature": "Histogram.startTimer()", "testcase": false, "constructor": false}, {"identifier": "time", "parameters": "(Runnable timeable)", "modifiers": "public", "return": "double", "signature": "double time(Runnable timeable)", "full_signature": "public double time(Runnable timeable)", "class_method_signature": "Histogram.time(Runnable timeable)", "testcase": false, "constructor": false}, {"identifier": "time", "parameters": "(Callable<E> timeable)", "modifiers": "public", "return": "E", "signature": "E time(Callable<E> timeable)", "full_signature": "public E time(Callable<E> timeable)", "class_method_signature": "Histogram.time(Callable<E> timeable)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "()", "modifiers": "@Override public", "return": "List<MetricFamilySamples>", "signature": "List<MetricFamilySamples> collect()", "full_signature": "@Override public List<MetricFamilySamples> collect()", "class_method_signature": "Histogram.collect()", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "()", "modifiers": "@Override public", "return": "List<MetricFamilySamples>", "signature": "List<MetricFamilySamples> describe()", "full_signature": "@Override public List<MetricFamilySamples> describe()", "class_method_signature": "Histogram.describe()", "testcase": false, "constructor": false}, {"identifier": "getBuckets", "parameters": "()", "modifiers": "", "return": "double[]", "signature": "double[] getBuckets()", "full_signature": " double[] getBuckets()", "class_method_signature": "Histogram.getBuckets()", "testcase": false, "constructor": false}], "file": "simpleclient/src/main/java/io/prometheus/client/Histogram.java"}, "focal_method": {"identifier": "collect", "parameters": "()", "modifiers": "@Override public", "return": "List<MetricFamilySamples>", "body": "@Override\n  public List<MetricFamilySamples> collect() {\n    List<MetricFamilySamples.Sample> samples = new ArrayList<MetricFamilySamples.Sample>();\n    for(Map.Entry<List<String>, Child> c: children.entrySet()) {\n      Child.Value v = c.getValue().get();\n      List<String> labelNamesWithLe = new ArrayList<String>(labelNames);\n      labelNamesWithLe.add(\"le\");\n      for (int i = 0; i < v.buckets.length; ++i) {\n        List<String> labelValuesWithLe = new ArrayList<String>(c.getKey());\n        labelValuesWithLe.add(doubleToGoString(buckets[i]));\n        samples.add(new MetricFamilySamples.Sample(fullname + \"_bucket\", labelNamesWithLe, labelValuesWithLe, v.buckets[i]));\n      }\n      samples.add(new MetricFamilySamples.Sample(fullname + \"_count\", labelNames, c.getKey(), v.buckets[buckets.length-1]));\n      samples.add(new MetricFamilySamples.Sample(fullname + \"_sum\", labelNames, c.getKey(), v.sum));\n    }\n\n    return familySamplesList(Type.HISTOGRAM, samples);\n  }", "signature": "List<MetricFamilySamples> collect()", "full_signature": "@Override public List<MetricFamilySamples> collect()", "class_method_signature": "Histogram.collect()", "testcase": false, "constructor": false, "invocations": ["entrySet", "get", "getValue", "add", "getKey", "add", "doubleToGoString", "add", "add", "getKey", "add", "getKey", "familySamplesList"]}, "repository": {"repo_id": 7997879, "url": "https://github.com/prometheus/client_java", "stars": 1094, "created": "2/3/2013 10:55:49 PM +00:00", "updates": "2020-01-25T01:49:53+00:00", "fork": "False", "license": "licensed"}}