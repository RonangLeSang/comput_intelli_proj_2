{"test_class": {"identifier": "MetricsFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MetricsFilter f = new MetricsFilter();", "modifier": "", "type": "MetricsFilter", "declarator": "f = new MetricsFilter()", "var_name": "f"}], "file": "simpleclient_servlet/src/test/java/io/prometheus/client/filter/MetricsFilterTest.java"}, "test_case": {"identifier": "init", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void init() throws Exception {\n        FilterConfig cfg = mock(FilterConfig.class);\n        when(cfg.getInitParameter(anyString())).thenReturn(null);\n\n        String metricName = \"foo\";\n\n        when(cfg.getInitParameter(MetricsFilter.METRIC_NAME_PARAM)).thenReturn(metricName);\n        when(cfg.getInitParameter(MetricsFilter.PATH_COMPONENT_PARAM)).thenReturn(\"4\");\n\n        f.init(cfg);\n\n        assertEquals(f.pathComponents, 4);\n\n        HttpServletRequest req = mock(HttpServletRequest.class);\n\n        when(req.getRequestURI()).thenReturn(\"/foo/bar/baz/bang/zilch/zip/nada\");\n        when(req.getMethod()).thenReturn(HttpMethods.GET);\n\n        HttpServletResponse res = mock(HttpServletResponse.class);\n        FilterChain c = mock(FilterChain.class);\n\n        f.doFilter(req, res, c);\n\n        verify(c).doFilter(req, res);\n\n        final Double sampleValue = CollectorRegistry.defaultRegistry.getSampleValue(metricName + \"_count\", new String[]{\"path\", \"method\"}, new String[]{\"/foo/bar/baz/bang\", HttpMethods.GET});\n        assertNotNull(sampleValue);\n        assertEquals(1, sampleValue, 0.0001);\n    }", "signature": "void init()", "full_signature": "@Test public void init()", "class_method_signature": "MetricsFilterTest.init()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getInitParameter", "anyString", "thenReturn", "when", "getInitParameter", "thenReturn", "when", "getInitParameter", "init", "assertEquals", "mock", "thenReturn", "when", "getRequestURI", "thenReturn", "when", "getMethod", "mock", "mock", "doFilter", "doFilter", "verify", "getSampleValue", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "MetricsFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "static final String PATH_COMPONENT_PARAM = \"path-components\";", "modifier": "static final", "type": "String", "declarator": "PATH_COMPONENT_PARAM = \"path-components\"", "var_name": "PATH_COMPONENT_PARAM"}, {"original_string": "static final String HELP_PARAM = \"help\";", "modifier": "static final", "type": "String", "declarator": "HELP_PARAM = \"help\"", "var_name": "HELP_PARAM"}, {"original_string": "static final String METRIC_NAME_PARAM = \"metric-name\";", "modifier": "static final", "type": "String", "declarator": "METRIC_NAME_PARAM = \"metric-name\"", "var_name": "METRIC_NAME_PARAM"}, {"original_string": "static final String BUCKET_CONFIG_PARAM = \"buckets\";", "modifier": "static final", "type": "String", "declarator": "BUCKET_CONFIG_PARAM = \"buckets\"", "var_name": "BUCKET_CONFIG_PARAM"}, {"original_string": "static final String UNKNOWN_HTTP_STATUS_CODE = \"\";", "modifier": "static final", "type": "String", "declarator": "UNKNOWN_HTTP_STATUS_CODE = \"\"", "var_name": "UNKNOWN_HTTP_STATUS_CODE"}, {"original_string": "private Histogram histogram = null;", "modifier": "private", "type": "Histogram", "declarator": "histogram = null", "var_name": "histogram"}, {"original_string": "private Counter statusCounter = null;", "modifier": "private", "type": "Counter", "declarator": "statusCounter = null", "var_name": "statusCounter"}, {"original_string": "int pathComponents = 1;", "modifier": "", "type": "int", "declarator": "pathComponents = 1", "var_name": "pathComponents"}, {"original_string": "private String metricName = null;", "modifier": "private", "type": "String", "declarator": "metricName = null", "var_name": "metricName"}, {"original_string": "private String help = \"The time taken fulfilling servlet requests\";", "modifier": "private", "type": "String", "declarator": "help = \"The time taken fulfilling servlet requests\"", "var_name": "help"}, {"original_string": "private double[] buckets = null;", "modifier": "private", "type": "double[]", "declarator": "buckets = null", "var_name": "buckets"}], "methods": [{"identifier": "MetricsFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetricsFilter()", "full_signature": "public  MetricsFilter()", "class_method_signature": "MetricsFilter.MetricsFilter()", "testcase": false, "constructor": true}, {"identifier": "MetricsFilter", "parameters": "(\n            String metricName,\n            String help,\n            Integer pathComponents,\n            double[] buckets)", "modifiers": "public", "return": "", "signature": " MetricsFilter(\n            String metricName,\n            String help,\n            Integer pathComponents,\n            double[] buckets)", "full_signature": "public  MetricsFilter(\n            String metricName,\n            String help,\n            Integer pathComponents,\n            double[] buckets)", "class_method_signature": "MetricsFilter.MetricsFilter(\n            String metricName,\n            String help,\n            Integer pathComponents,\n            double[] buckets)", "testcase": false, "constructor": true}, {"identifier": "isEmpty", "parameters": "(String s)", "modifiers": "private", "return": "boolean", "signature": "boolean isEmpty(String s)", "full_signature": "private boolean isEmpty(String s)", "class_method_signature": "MetricsFilter.isEmpty(String s)", "testcase": false, "constructor": false}, {"identifier": "getComponents", "parameters": "(String str)", "modifiers": "private", "return": "String", "signature": "String getComponents(String str)", "full_signature": "private String getComponents(String str)", "class_method_signature": "MetricsFilter.getComponents(String str)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FilterConfig filterConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(FilterConfig filterConfig)", "full_signature": "@Override public void init(FilterConfig filterConfig)", "class_method_signature": "MetricsFilter.init(FilterConfig filterConfig)", "testcase": false, "constructor": false}, {"identifier": "doFilter", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "modifiers": "@Override public", "return": "void", "signature": "void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "full_signature": "@Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "class_method_signature": "MetricsFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "testcase": false, "constructor": false}, {"identifier": "getStatusCode", "parameters": "(ServletResponse servletResponse)", "modifiers": "private", "return": "String", "signature": "String getStatusCode(ServletResponse servletResponse)", "full_signature": "private String getStatusCode(ServletResponse servletResponse)", "class_method_signature": "MetricsFilter.getStatusCode(ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "MetricsFilter.destroy()", "testcase": false, "constructor": false}], "file": "simpleclient_servlet/src/main/java/io/prometheus/client/filter/MetricsFilter.java"}, "focal_method": {"identifier": "init", "parameters": "(FilterConfig filterConfig)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        Histogram.Builder builder = Histogram.build()\n                .labelNames(\"path\", \"method\");\n\n        if (filterConfig == null && isEmpty(metricName)) {\n            throw new ServletException(\"No configuration object provided, and no metricName passed via constructor\");\n        }\n\n        if (filterConfig != null) {\n            if (isEmpty(metricName)) {\n                metricName = filterConfig.getInitParameter(METRIC_NAME_PARAM);\n                if (isEmpty(metricName)) {\n                    throw new ServletException(\"Init parameter \\\"\" + METRIC_NAME_PARAM + \"\\\" is required; please supply a value\");\n                }\n            }\n\n            if (!isEmpty(filterConfig.getInitParameter(HELP_PARAM))) {\n                help = filterConfig.getInitParameter(HELP_PARAM);\n            }\n\n            // Allow overriding of the path \"depth\" to track\n            if (!isEmpty(filterConfig.getInitParameter(PATH_COMPONENT_PARAM))) {\n                pathComponents = Integer.valueOf(filterConfig.getInitParameter(PATH_COMPONENT_PARAM));\n            }\n\n            // Allow users to override the default bucket configuration\n            if (!isEmpty(filterConfig.getInitParameter(BUCKET_CONFIG_PARAM))) {\n                String[] bucketParams = filterConfig.getInitParameter(BUCKET_CONFIG_PARAM).split(\",\");\n                buckets = new double[bucketParams.length];\n\n                for (int i = 0; i < bucketParams.length; i++) {\n                    buckets[i] = Double.parseDouble(bucketParams[i]);\n                }\n            }\n        }\n\n        if (buckets != null) {\n            builder = builder.buckets(buckets);\n        }\n\n        histogram = builder\n                .help(help)\n                .name(metricName)\n                .register();\n\n        statusCounter = Counter.build(metricName + \"_status_total\", \"HTTP status codes of \" + help)\n                .labelNames(\"path\", \"method\", \"status\")\n                .register();\n    }", "signature": "void init(FilterConfig filterConfig)", "full_signature": "@Override public void init(FilterConfig filterConfig)", "class_method_signature": "MetricsFilter.init(FilterConfig filterConfig)", "testcase": false, "constructor": false, "invocations": ["labelNames", "build", "isEmpty", "isEmpty", "getInitParameter", "isEmpty", "isEmpty", "getInitParameter", "getInitParameter", "isEmpty", "getInitParameter", "valueOf", "getInitParameter", "isEmpty", "getInitParameter", "split", "getInitParameter", "parseDouble", "buckets", "register", "name", "help", "register", "labelNames", "build"]}, "repository": {"repo_id": 7997879, "url": "https://github.com/prometheus/client_java", "stars": 1094, "created": "2/3/2013 10:55:49 PM +00:00", "updates": "2020-01-25T01:49:53+00:00", "fork": "False", "license": "licensed"}}