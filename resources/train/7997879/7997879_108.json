{"test_class": {"identifier": "JettyStatisticsCollectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Server server = new Server();", "modifier": "private final", "type": "Server", "declarator": "server = new Server()", "var_name": "server"}, {"original_string": "private final ServerConnector connector = new ServerConnector(server);", "modifier": "private final", "type": "ServerConnector", "declarator": "connector = new ServerConnector(server)", "var_name": "connector"}], "file": "simpleclient_jetty/src/test/java/io/prometheus/client/jetty/JettyStatisticsCollectorTest.java"}, "test_case": {"identifier": "collect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void collect() throws Exception {\n    // send GET request\n    try {\n      final String spec = \"http://127.0.0.1:\" + connector.getLocalPort();\n      final HttpURLConnection urlConnection = (HttpURLConnection) new URL(spec).openConnection();\n      urlConnection.getInputStream().close();\n      urlConnection.disconnect();\n    } catch (FileNotFoundException ignored) {\n    }\n\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_requests_total\"), is(1.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_requests_active\"), is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_requests_active_max\"),\n        is(1.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_request_time_max_seconds\"),\n        is(notNullValue()));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_request_time_seconds_total\"),\n        is(notNullValue()));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_dispatched_total\"), is(1.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_dispatched_active\"),\n        is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_dispatched_active_max\"),\n        is(greaterThan(0.0)));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_dispatched_time_max\"),\n        is(notNullValue()));\n    assertThat(\n        CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_dispatched_time_seconds_total\"),\n        is(notNullValue()));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_async_requests_total\"),\n        is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_async_requests_waiting\"),\n        is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_async_requests_waiting_max\"),\n        is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_async_dispatches_total\"),\n        is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_expires_total\"), is(0.0));\n\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_responses_total\",\n        new String[]{\"code\"}, new String[]{\"1xx\"}), is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_responses_total\",\n        new String[]{\"code\"}, new String[]{\"2xx\"}), is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_responses_total\",\n        new String[]{\"code\"}, new String[]{\"3xx\"}), is(0.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_responses_total\",\n        new String[]{\"code\"}, new String[]{\"4xx\"}), is(1.0));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_responses_total\",\n        new String[]{\"code\"}, new String[]{\"5xx\"}), is(0.0));\n\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_stats_seconds\"),\n        is(notNullValue()));\n    assertThat(CollectorRegistry.defaultRegistry.getSampleValue(\"jetty_responses_bytes_total\"),\n        is(notNullValue()));\n  }", "signature": "void collect()", "full_signature": "@Test public void collect()", "class_method_signature": "JettyStatisticsCollectorTest.collect()", "testcase": true, "constructor": false, "invocations": ["getLocalPort", "openConnection", "close", "getInputStream", "disconnect", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "notNullValue", "assertThat", "getSampleValue", "is", "notNullValue", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "greaterThan", "assertThat", "getSampleValue", "is", "notNullValue", "assertThat", "getSampleValue", "is", "notNullValue", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "assertThat", "getSampleValue", "is", "notNullValue", "assertThat", "getSampleValue", "is", "notNullValue"]}, "focal_class": {"identifier": "JettyStatisticsCollector", "superclass": "extends Collector", "interfaces": "", "fields": [{"original_string": "private final StatisticsHandler statisticsHandler;", "modifier": "private final", "type": "StatisticsHandler", "declarator": "statisticsHandler", "var_name": "statisticsHandler"}, {"original_string": "private static final List<String> EMPTY_LIST = new ArrayList<String>();", "modifier": "private static final", "type": "List<String>", "declarator": "EMPTY_LIST = new ArrayList<String>()", "var_name": "EMPTY_LIST"}], "methods": [{"identifier": "JettyStatisticsCollector", "parameters": "(StatisticsHandler statisticsHandler)", "modifiers": "public", "return": "", "signature": " JettyStatisticsCollector(StatisticsHandler statisticsHandler)", "full_signature": "public  JettyStatisticsCollector(StatisticsHandler statisticsHandler)", "class_method_signature": "JettyStatisticsCollector.JettyStatisticsCollector(StatisticsHandler statisticsHandler)", "testcase": false, "constructor": true}, {"identifier": "collect", "parameters": "()", "modifiers": "@Override public", "return": "List<MetricFamilySamples>", "signature": "List<MetricFamilySamples> collect()", "full_signature": "@Override public List<MetricFamilySamples> collect()", "class_method_signature": "JettyStatisticsCollector.collect()", "testcase": false, "constructor": false}, {"identifier": "buildGauge", "parameters": "(String name, String help, double value)", "modifiers": "private static", "return": "MetricFamilySamples", "signature": "MetricFamilySamples buildGauge(String name, String help, double value)", "full_signature": "private static MetricFamilySamples buildGauge(String name, String help, double value)", "class_method_signature": "JettyStatisticsCollector.buildGauge(String name, String help, double value)", "testcase": false, "constructor": false}, {"identifier": "buildCounter", "parameters": "(String name, String help, double value)", "modifiers": "private static", "return": "MetricFamilySamples", "signature": "MetricFamilySamples buildCounter(String name, String help, double value)", "full_signature": "private static MetricFamilySamples buildCounter(String name, String help, double value)", "class_method_signature": "JettyStatisticsCollector.buildCounter(String name, String help, double value)", "testcase": false, "constructor": false}, {"identifier": "buildStatusCounter", "parameters": "()", "modifiers": "private", "return": "MetricFamilySamples", "signature": "MetricFamilySamples buildStatusCounter()", "full_signature": "private MetricFamilySamples buildStatusCounter()", "class_method_signature": "JettyStatisticsCollector.buildStatusCounter()", "testcase": false, "constructor": false}, {"identifier": "buildStatusSample", "parameters": "(String name, String status, double value)", "modifiers": "private static", "return": "MetricFamilySamples.Sample", "signature": "MetricFamilySamples.Sample buildStatusSample(String name, String status, double value)", "full_signature": "private static MetricFamilySamples.Sample buildStatusSample(String name, String status, double value)", "class_method_signature": "JettyStatisticsCollector.buildStatusSample(String name, String status, double value)", "testcase": false, "constructor": false}], "file": "simpleclient_jetty/src/main/java/io/prometheus/client/jetty/JettyStatisticsCollector.java"}, "focal_method": {"identifier": "collect", "parameters": "()", "modifiers": "@Override public", "return": "List<MetricFamilySamples>", "body": "@Override\n  public List<MetricFamilySamples> collect() {\n    return Arrays.asList(\n            buildCounter(\"jetty_requests_total\", \"Number of requests\", statisticsHandler.getRequests()),\n            buildGauge(\"jetty_requests_active\", \"Number of requests currently active\", statisticsHandler.getRequestsActive()),\n            buildGauge(\"jetty_requests_active_max\", \"Maximum number of requests that have been active at once\", statisticsHandler.getRequestsActiveMax()),\n            buildGauge(\"jetty_request_time_max_seconds\", \"Maximum time spent handling requests\", statisticsHandler.getRequestTimeMax() / 1000.0),\n            buildCounter(\"jetty_request_time_seconds_total\", \"Total time spent in all request handling\", statisticsHandler.getRequestTimeTotal() / 1000.0),\n            buildCounter(\"jetty_dispatched_total\", \"Number of dispatches\", statisticsHandler.getDispatched()),\n            buildGauge(\"jetty_dispatched_active\", \"Number of dispatches currently active\", statisticsHandler.getDispatchedActive()),\n            buildGauge(\"jetty_dispatched_active_max\", \"Maximum number of active dispatches being handled\", statisticsHandler.getDispatchedActiveMax()),\n            buildGauge(\"jetty_dispatched_time_max\", \"Maximum time spent in dispatch handling\", statisticsHandler.getDispatchedTimeMax()),\n            buildCounter(\"jetty_dispatched_time_seconds_total\", \"Total time spent in dispatch handling\", statisticsHandler.getDispatchedTimeTotal() / 1000.0),\n            buildCounter(\"jetty_async_requests_total\", \"Total number of async requests\", statisticsHandler.getAsyncRequests()),\n            buildGauge(\"jetty_async_requests_waiting\", \"Currently waiting async requests\", statisticsHandler.getAsyncRequestsWaiting()),\n            buildGauge(\"jetty_async_requests_waiting_max\", \"Maximum number of waiting async requests\", statisticsHandler.getAsyncRequestsWaitingMax()),\n            buildCounter(\"jetty_async_dispatches_total\", \"Number of requested that have been asynchronously dispatched\", statisticsHandler.getAsyncDispatches()),\n            buildCounter(\"jetty_expires_total\", \"Number of async requests requests that have expired\", statisticsHandler.getExpires()),\n            buildStatusCounter(),\n            buildGauge(\"jetty_stats_seconds\", \"Time in seconds stats have been collected for\", statisticsHandler.getStatsOnMs() / 1000.0),\n            buildCounter(\"jetty_responses_bytes_total\", \"Total number of bytes across all responses\", statisticsHandler.getResponsesBytesTotal())\n    );\n  }", "signature": "List<MetricFamilySamples> collect()", "full_signature": "@Override public List<MetricFamilySamples> collect()", "class_method_signature": "JettyStatisticsCollector.collect()", "testcase": false, "constructor": false, "invocations": ["asList", "buildCounter", "getRequests", "buildGauge", "getRequestsActive", "buildGauge", "getRequestsActiveMax", "buildGauge", "getRequestTimeMax", "buildCounter", "getRequestTimeTotal", "buildCounter", "getDispatched", "buildGauge", "getDispatchedActive", "buildGauge", "getDispatchedActiveMax", "buildGauge", "getDispatchedTimeMax", "buildCounter", "getDispatchedTimeTotal", "buildCounter", "getAsyncRequests", "buildGauge", "getAsyncRequestsWaiting", "buildGauge", "getAsyncRequestsWaitingMax", "buildCounter", "getAsyncDispatches", "buildCounter", "getExpires", "buildStatusCounter", "buildGauge", "getStatsOnMs", "buildCounter", "getResponsesBytesTotal"]}, "repository": {"repo_id": 7997879, "url": "https://github.com/prometheus/client_java", "stars": 1094, "created": "2/3/2013 10:55:49 PM +00:00", "updates": "2020-01-25T01:49:53+00:00", "fork": "False", "license": "licensed"}}