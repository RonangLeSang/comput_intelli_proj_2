{"test_class": {"identifier": "ComplexityThresholdsUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "its/projects/abacus/src/test/java/org/sonar/plugins/abacus/utils/ComplexityThresholdsUtilsTest.java"}, "test_case": {"identifier": "testInitCounterThreshold", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInitCounterThreshold() {\n\n    List<ComplexityThreshold> complexityThresholds = new ArrayList<ComplexityThreshold>();\n    complexityThresholds.add(new ComplexityThreshold(\"Simple\", 10.0));\n    complexityThresholds.add(new ComplexityThreshold(\"Medium\", 30.0));\n    complexityThresholds.add(new ComplexityThreshold(\"Complex\", 60.0));\n    complexityThresholds.add(new ComplexityThreshold(\"Very complex\", null));\n\n    ComplexityThresholdsUtils.initCounterThreshold(complexityThresholds);\n\n    Assert.assertEquals(0, complexityThresholds.get(0).getCounter());\n    Assert.assertEquals(0, complexityThresholds.get(1).getCounter());\n    Assert.assertEquals(0, complexityThresholds.get(2).getCounter());\n    Assert.assertEquals(0, complexityThresholds.get(3).getCounter());\n\n  }", "signature": "void testInitCounterThreshold()", "full_signature": "@Test public void testInitCounterThreshold()", "class_method_signature": "ComplexityThresholdsUtilsTest.testInitCounterThreshold()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "initCounterThreshold", "assertEquals", "getCounter", "get", "assertEquals", "getCounter", "get", "assertEquals", "getCounter", "get", "assertEquals", "getCounter", "get"]}, "focal_class": {"identifier": "ComplexityThresholdsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PARSING_SEPARATOR = \":\";", "modifier": "private static final", "type": "String", "declarator": "PARSING_SEPARATOR = \":\"", "var_name": "PARSING_SEPARATOR"}, {"original_string": "private static final String EQUALITY_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "EQUALITY_SEPARATOR = \"=\"", "var_name": "EQUALITY_SEPARATOR"}], "methods": [{"identifier": "convertAbacusThresholdsToComplexityThresholds", "parameters": "(String[] propertyThresholds)", "modifiers": "public static", "return": "List<ComplexityThreshold>", "signature": "List<ComplexityThreshold> convertAbacusThresholdsToComplexityThresholds(String[] propertyThresholds)", "full_signature": "public static List<ComplexityThreshold> convertAbacusThresholdsToComplexityThresholds(String[] propertyThresholds)", "class_method_signature": "ComplexityThresholdsUtils.convertAbacusThresholdsToComplexityThresholds(String[] propertyThresholds)", "testcase": false, "constructor": false}, {"identifier": "convertCyclomaticComplexityToAbacusComplexity", "parameters": "(Double cyclomaticComplexity, List<ComplexityThreshold> complexityThresholds)", "modifiers": "public static", "return": "String", "signature": "String convertCyclomaticComplexityToAbacusComplexity(Double cyclomaticComplexity, List<ComplexityThreshold> complexityThresholds)", "full_signature": "public static String convertCyclomaticComplexityToAbacusComplexity(Double cyclomaticComplexity, List<ComplexityThreshold> complexityThresholds)", "class_method_signature": "ComplexityThresholdsUtils.convertCyclomaticComplexityToAbacusComplexity(Double cyclomaticComplexity, List<ComplexityThreshold> complexityThresholds)", "testcase": false, "constructor": false}, {"identifier": "initCounterThreshold", "parameters": "(List<ComplexityThreshold> complexityThresholds)", "modifiers": "public static", "return": "void", "signature": "void initCounterThreshold(List<ComplexityThreshold> complexityThresholds)", "full_signature": "public static void initCounterThreshold(List<ComplexityThreshold> complexityThresholds)", "class_method_signature": "ComplexityThresholdsUtils.initCounterThreshold(List<ComplexityThreshold> complexityThresholds)", "testcase": false, "constructor": false}, {"identifier": "buildComplexityDistributionMeasureValue", "parameters": "(List<ComplexityThreshold> complexityThresholds)", "modifiers": "public static", "return": "String", "signature": "String buildComplexityDistributionMeasureValue(List<ComplexityThreshold> complexityThresholds)", "full_signature": "public static String buildComplexityDistributionMeasureValue(List<ComplexityThreshold> complexityThresholds)", "class_method_signature": "ComplexityThresholdsUtils.buildComplexityDistributionMeasureValue(List<ComplexityThreshold> complexityThresholds)", "testcase": false, "constructor": false}], "file": "its/projects/abacus/src/main/java/org/sonar/plugins/abacus/utils/ComplexityThresholdsUtils.java"}, "focal_method": {"identifier": "initCounterThreshold", "parameters": "(List<ComplexityThreshold> complexityThresholds)", "modifiers": "public static", "return": "void", "body": "public static void initCounterThreshold(List<ComplexityThreshold> complexityThresholds) {\n    for (ComplexityThreshold complexityThreshold : complexityThresholds) {\n      complexityThreshold.initializeCounter();\n    }\n  }", "signature": "void initCounterThreshold(List<ComplexityThreshold> complexityThresholds)", "full_signature": "public static void initCounterThreshold(List<ComplexityThreshold> complexityThresholds)", "class_method_signature": "ComplexityThresholdsUtils.initCounterThreshold(List<ComplexityThreshold> complexityThresholds)", "testcase": false, "constructor": false, "invocations": ["initializeCounter"]}, "repository": {"repo_id": 1381837, "url": "https://github.com/SonarSource/sonar-scanner-jenkins", "stars": 133, "created": "2/18/2011 9:54:38 AM +00:00", "updates": "2020-01-06T10:04:08+00:00", "fork": "False", "license": "licensed"}}