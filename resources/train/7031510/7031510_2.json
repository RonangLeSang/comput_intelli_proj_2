{"test_class": {"identifier": "LinearAlarmFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LinearAlarmFilter filter = new LinearAlarmFilter();", "modifier": "", "type": "LinearAlarmFilter", "declarator": "filter = new LinearAlarmFilter()", "var_name": "filter"}, {"original_string": "Clock clock = mock(Clock.class);", "modifier": "", "type": "Clock", "declarator": "clock = mock(Clock.class)", "var_name": "clock"}], "file": "alarm/src/test/java/com/dianping/puma/alarm/core/monitor/filter/LinearAlarmFilterTest.java"}, "test_case": {"identifier": "test2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test2() throws Exception {\n        PullTimeDelayAlarmState state = new PullTimeDelayAlarmState();\n        AlarmResult result;\n\n        AlarmContext context = new AlarmContext();\n        context.setNamespace(\"client\");\n        context.setName(\"test\");\n\n        LinearAlarmStrategy strategy = new LinearAlarmStrategy();\n        strategy.setLinearAlarmIntervalInSecond(100);\n\n        state.setAlarm(true);\n        when(clock.getTimestamp()).thenReturn(0L);\n        result = filter.filter(context, state, strategy);\n        assertTrue(result.isAlarm());\n\n        state.setAlarm(false);\n        when(clock.getTimestamp()).thenReturn(50L);\n        result = filter.filter(context, state, strategy);\n        assertFalse(result.isAlarm());\n\n        state.setAlarm(true);\n        when(clock.getTimestamp()).thenReturn(60L);\n        result = filter.filter(context, state, strategy);\n        assertTrue(result.isAlarm());\n    }", "signature": "void test2()", "full_signature": "@Test public void test2()", "class_method_signature": "LinearAlarmFilterTest.test2()", "testcase": true, "constructor": false, "invocations": ["setNamespace", "setName", "setLinearAlarmIntervalInSecond", "setAlarm", "thenReturn", "when", "getTimestamp", "filter", "assertTrue", "isAlarm", "setAlarm", "thenReturn", "when", "getTimestamp", "filter", "assertFalse", "isAlarm", "setAlarm", "thenReturn", "when", "getTimestamp", "filter", "assertTrue", "isAlarm"]}, "focal_class": {"identifier": "LinearAlarmFilter", "superclass": "extends AbstractPumaAlarmFilter", "interfaces": "", "fields": [{"original_string": "private Clock clock = new Clock();", "modifier": "private", "type": "Clock", "declarator": "clock = new Clock()", "var_name": "clock"}, {"original_string": "private ConcurrentMap<String, Long> lastAlarmTimeMap = new MapMaker().makeMap();", "modifier": "private", "type": "ConcurrentMap<String, Long>", "declarator": "lastAlarmTimeMap = new MapMaker().makeMap()", "var_name": "lastAlarmTimeMap"}], "methods": [{"identifier": "filter", "parameters": "(AlarmContext context, AlarmState state, AlarmStrategy strategy)", "modifiers": "@Override public", "return": "AlarmResult", "signature": "AlarmResult filter(AlarmContext context, AlarmState state, AlarmStrategy strategy)", "full_signature": "@Override public AlarmResult filter(AlarmContext context, AlarmState state, AlarmStrategy strategy)", "class_method_signature": "LinearAlarmFilter.filter(AlarmContext context, AlarmState state, AlarmStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "setClock", "parameters": "(Clock clock)", "modifiers": "public", "return": "void", "signature": "void setClock(Clock clock)", "full_signature": "public void setClock(Clock clock)", "class_method_signature": "LinearAlarmFilter.setClock(Clock clock)", "testcase": false, "constructor": false}], "file": "alarm/src/main/java/com/dianping/puma/alarm/core/monitor/filter/LinearAlarmFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(AlarmContext context, AlarmState state, AlarmStrategy strategy)", "modifiers": "@Override public", "return": "AlarmResult", "body": "@Override\n    public AlarmResult filter(AlarmContext context, AlarmState state, AlarmStrategy strategy)\n            throws PumaAlarmFilterException {\n        if (!(strategy instanceof LinearAlarmStrategy)) {\n            throw new PumaAlarmFilterUnsupportedException(\"unsupported alarm strategy[%s]\", strategy);\n        }\n\n        LinearAlarmStrategy linearAlarmStrategy = (LinearAlarmStrategy) strategy;\n\n        AlarmResult result = new AlarmResult();\n        String mnemonic = generateMnemonic(context.getNamespace(), context.getName(),\n                state.getClass().getSimpleName());\n\n        if (!state.isAlarm()) {\n            lastAlarmTimeMap.remove(mnemonic);\n            result.setAlarm(false);\n        } else {\n\n            if (!lastAlarmTimeMap.containsKey(mnemonic)) {\n                lastAlarmTimeMap.put(mnemonic, clock.getTimestamp());\n                result.setAlarm(true);\n            } else {\n                long lastAlarmTime = lastAlarmTimeMap.get(mnemonic);\n                long now = clock.getTimestamp();\n                long linearAlarmIntervalInSecond = linearAlarmStrategy.getLinearAlarmIntervalInSecond();\n                if (now - lastAlarmTime > linearAlarmIntervalInSecond) {\n                    lastAlarmTimeMap.put(mnemonic, now);\n                    result.setAlarm(true);\n                } else {\n                    result.setAlarm(false);\n                }\n            }\n        }\n\n        return result;\n    }", "signature": "AlarmResult filter(AlarmContext context, AlarmState state, AlarmStrategy strategy)", "full_signature": "@Override public AlarmResult filter(AlarmContext context, AlarmState state, AlarmStrategy strategy)", "class_method_signature": "LinearAlarmFilter.filter(AlarmContext context, AlarmState state, AlarmStrategy strategy)", "testcase": false, "constructor": false, "invocations": ["generateMnemonic", "getNamespace", "getName", "getSimpleName", "getClass", "isAlarm", "remove", "setAlarm", "containsKey", "put", "getTimestamp", "setAlarm", "get", "getTimestamp", "getLinearAlarmIntervalInSecond", "put", "setAlarm", "setAlarm"]}, "repository": {"repo_id": 7031510, "url": "https://github.com/dianping/puma", "language": "Java", "is_fork": false, "fork_count": 102, "stargazer_count": 166, "size": 26527, "license": "licensed"}}