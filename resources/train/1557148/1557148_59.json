{"test_class": {"identifier": "TaskunImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Taskun taskun;", "modifier": "private", "type": "Taskun", "declarator": "taskun", "var_name": "taskun"}, {"original_string": "private TaskunInjector taskunInjector;", "modifier": "private", "type": "TaskunInjector", "declarator": "taskunInjector", "var_name": "taskunInjector"}], "file": "taskun-scheduler/src/test/java/com/github/seratch/taskun/scheduler/impl/TaskunImplTest.java"}, "test_case": {"identifier": "DIContainerAdaptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void initialize_A$DIContainerAdaptor() throws Exception {\n        taskun.initialize(taskunInjector);\n    }", "signature": "void DIContainerAdaptor()", "full_signature": "@Test public void DIContainerAdaptor()", "class_method_signature": "TaskunImplTest.DIContainerAdaptor()", "testcase": true, "constructor": false, "invocations": ["initialize"]}, "focal_class": {"identifier": "TaskunImpl", "superclass": "", "interfaces": "implements Taskun", "fields": [{"original_string": "private ScheduledExecutorService executorService;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private TaskunInjector taskunInjector;", "modifier": "private", "type": "TaskunInjector", "declarator": "taskunInjector", "var_name": "taskunInjector"}, {"original_string": "private CronInvocation cronInvocation = new CronInvocation();", "modifier": "private", "type": "CronInvocation", "declarator": "cronInvocation = new CronInvocation()", "var_name": "cronInvocation"}, {"original_string": "private String crontabFilepath;", "modifier": "private", "type": "String", "declarator": "crontabFilepath", "var_name": "crontabFilepath"}], "methods": [{"identifier": "initialize", "parameters": "(TaskunConfig config)", "modifiers": "public", "return": "void", "signature": "void initialize(TaskunConfig config)", "full_signature": "public void initialize(TaskunConfig config)", "class_method_signature": "TaskunImpl.initialize(TaskunConfig config)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(TaskunInjector taskunInjector)", "modifiers": "public", "return": "void", "signature": "void initialize(TaskunInjector taskunInjector)", "full_signature": "public void initialize(TaskunInjector taskunInjector)", "class_method_signature": "TaskunImpl.initialize(TaskunInjector taskunInjector)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "TaskunImpl.start()", "testcase": false, "constructor": false}, {"identifier": "scheduleCronExecute", "parameters": "(Runnable runnable, RawCrontabLine crontabLine)", "modifiers": "@Override public", "return": "void", "signature": "void scheduleCronExecute(Runnable runnable, RawCrontabLine crontabLine)", "full_signature": "@Override public void scheduleCronExecute(Runnable runnable, RawCrontabLine crontabLine)", "class_method_signature": "TaskunImpl.scheduleCronExecute(Runnable runnable, RawCrontabLine crontabLine)", "testcase": false, "constructor": false}, {"identifier": "scheduleIntervalExecute", "parameters": "(Runnable runnable, Calendar initialScheduledDate, long interval, TimeUnit timeUnit)", "modifiers": "@Override public", "return": "void", "signature": "void scheduleIntervalExecute(Runnable runnable, Calendar initialScheduledDate, long interval, TimeUnit timeUnit)", "full_signature": "@Override public void scheduleIntervalExecute(Runnable runnable, Calendar initialScheduledDate, long interval, TimeUnit timeUnit)", "class_method_signature": "TaskunImpl.scheduleIntervalExecute(Runnable runnable, Calendar initialScheduledDate, long interval, TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "scheduleOnetime", "parameters": "(Runnable runnable, Calendar scheduledDate)", "modifiers": "@Override public", "return": "void", "signature": "void scheduleOnetime(Runnable runnable, Calendar scheduledDate)", "full_signature": "@Override public void scheduleOnetime(Runnable runnable, Calendar scheduledDate)", "class_method_signature": "TaskunImpl.scheduleOnetime(Runnable runnable, Calendar scheduledDate)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "TaskunImpl.shutdown()", "testcase": false, "constructor": false}, {"identifier": "replaceCrontabFile", "parameters": "(String crontabFilepath)", "modifiers": "@Override public", "return": "void", "signature": "void replaceCrontabFile(String crontabFilepath)", "full_signature": "@Override public void replaceCrontabFile(String crontabFilepath)", "class_method_signature": "TaskunImpl.replaceCrontabFile(String crontabFilepath)", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "@Override public boolean isRunning()", "class_method_signature": "TaskunImpl.isRunning()", "testcase": false, "constructor": false}, {"identifier": "getCurrentRawCrontabLines", "parameters": "()", "modifiers": "@Override public", "return": "List<RawCrontabLine>", "signature": "List<RawCrontabLine> getCurrentRawCrontabLines()", "full_signature": "@Override public List<RawCrontabLine> getCurrentRawCrontabLines()", "class_method_signature": "TaskunImpl.getCurrentRawCrontabLines()", "testcase": false, "constructor": false}, {"identifier": "getLastCronInvocationTimeMillis", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLastCronInvocationTimeMillis()", "full_signature": "@Override public long getLastCronInvocationTimeMillis()", "class_method_signature": "TaskunImpl.getLastCronInvocationTimeMillis()", "testcase": false, "constructor": false}, {"identifier": "invokeCronDaemon", "parameters": "(TaskunInjector taskunInjector, ScheduledExecutorService executorService)", "modifiers": "", "return": "void", "signature": "void invokeCronDaemon(TaskunInjector taskunInjector, ScheduledExecutorService executorService)", "full_signature": " void invokeCronDaemon(TaskunInjector taskunInjector, ScheduledExecutorService executorService)", "class_method_signature": "TaskunImpl.invokeCronDaemon(TaskunInjector taskunInjector, ScheduledExecutorService executorService)", "testcase": false, "constructor": false}, {"identifier": "getDelayValue", "parameters": "(Calendar executeDate, TimeUnit timeUnit)", "modifiers": "", "return": "long", "signature": "long getDelayValue(Calendar executeDate, TimeUnit timeUnit)", "full_signature": " long getDelayValue(Calendar executeDate, TimeUnit timeUnit)", "class_method_signature": "TaskunImpl.getDelayValue(Calendar executeDate, TimeUnit timeUnit)", "testcase": false, "constructor": false}], "file": "taskun-scheduler/src/main/java/com/github/seratch/taskun/scheduler/impl/TaskunImpl.java"}, "focal_method": {"identifier": "initialize", "parameters": "(TaskunConfig config)", "modifiers": "public", "return": "void", "body": "public void initialize(TaskunConfig config) {\n        final TaskunConfig config_ = config;\n        initialize(new TaskunInjector() {\n            @Override\n            public TaskunConfig getTaskunConfig() {\n                return config_;\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public <T> T inject(Class<?> clazz) {\n                try {\n                    return (T) clazz.newInstance();\n                } catch (Exception e) {\n                    return null;\n                }\n            }\n        });\n    }", "signature": "void initialize(TaskunConfig config)", "full_signature": "public void initialize(TaskunConfig config)", "class_method_signature": "TaskunImpl.initialize(TaskunConfig config)", "testcase": false, "constructor": false, "invocations": ["initialize", "newInstance"]}, "repository": {"repo_id": 1557148, "url": "https://github.com/seratch/taskun", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 3917, "license": "licensed"}}