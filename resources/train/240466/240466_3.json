{"test_class": {"identifier": "PropertyEditorsTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private static final List<String> calls = new ArrayList<String>();", "modifier": "private static final", "type": "List<String>", "declarator": "calls = new ArrayList<String>()", "var_name": "calls"}], "file": "xbean-reflect/src/test/java/org/apache/xbean/propertyeditor/PropertyEditorsTest.java"}, "test_case": {"identifier": "staticFactoryIsUsed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void staticFactoryIsUsed() throws Exception {\n        final Red expected = new Red(\"red\");\n        calls.clear();\n\n        final Object actual = PropertyEditors.getValue(Red.class, \"red\");\n\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n\n        final List<String> expectedCalls = Arrays.asList(\n                \"Red.valueOf\",\n                \"Red.constructor\");\n\n        assertEquals(join(expectedCalls), join(calls));\n    }", "signature": "void staticFactoryIsUsed()", "full_signature": "@Test public void staticFactoryIsUsed()", "class_method_signature": "PropertyEditorsTest.staticFactoryIsUsed()", "testcase": true, "constructor": false, "invocations": ["clear", "getValue", "assertNotNull", "assertEquals", "asList", "assertEquals", "join", "join"]}, "focal_class": {"identifier": "PropertyEditors", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static boolean registerWithVM;", "modifier": "private static", "type": "boolean", "declarator": "registerWithVM", "var_name": "registerWithVM"}, {"original_string": "private static final PropertyEditorRegistry REGISTRY = new PropertyEditorRegistry() {\n        {\n            registerDefaults();\n        }\n\n        @Override\n        public Converter register(final Converter converter) {\n            final Converter register = super.register(converter);\n            if (registerWithVM) {\n                PropertyEditorManager.registerEditor(converter.getType(), converter.getClass());\n                final Class<?> sibling = Primitives.findSibling(converter.getType());\n                if (sibling != null) {\n                    PropertyEditorManager.registerEditor(sibling, converter.getClass());\n                }\n            }\n            return register;\n        }\n    };", "modifier": "private static final", "type": "PropertyEditorRegistry", "declarator": "REGISTRY = new PropertyEditorRegistry() {\n        {\n            registerDefaults();\n        }\n\n        @Override\n        public Converter register(final Converter converter) {\n            final Converter register = super.register(converter);\n            if (registerWithVM) {\n                PropertyEditorManager.registerEditor(converter.getType(), converter.getClass());\n                final Class<?> sibling = Primitives.findSibling(converter.getType());\n                if (sibling != null) {\n                    PropertyEditorManager.registerEditor(sibling, converter.getClass());\n                }\n            }\n            return register;\n        }\n    }", "var_name": "REGISTRY"}], "methods": [{"identifier": "isRegisterWithVM", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isRegisterWithVM()", "full_signature": "public static boolean isRegisterWithVM()", "class_method_signature": "PropertyEditors.isRegisterWithVM()", "testcase": false, "constructor": false}, {"identifier": "setRegisterWithVM", "parameters": "(boolean registerWithVM)", "modifiers": "public static", "return": "void", "signature": "void setRegisterWithVM(boolean registerWithVM)", "full_signature": "public static void setRegisterWithVM(boolean registerWithVM)", "class_method_signature": "PropertyEditors.setRegisterWithVM(boolean registerWithVM)", "testcase": false, "constructor": false}, {"identifier": "registerConverter", "parameters": "(Converter converter)", "modifiers": "public static", "return": "void", "signature": "void registerConverter(Converter converter)", "full_signature": "public static void registerConverter(Converter converter)", "class_method_signature": "PropertyEditors.registerConverter(Converter converter)", "testcase": false, "constructor": false}, {"identifier": "canConvert", "parameters": "(final String type, final ClassLoader classLoader)", "modifiers": "public static", "return": "boolean", "signature": "boolean canConvert(final String type, final ClassLoader classLoader)", "full_signature": "public static boolean canConvert(final String type, final ClassLoader classLoader)", "class_method_signature": "PropertyEditors.canConvert(final String type, final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "canConvert", "parameters": "(final Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean canConvert(final Class<?> type)", "full_signature": "public static boolean canConvert(final Class<?> type)", "class_method_signature": "PropertyEditors.canConvert(final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final Object value)", "modifiers": "public static", "return": "String", "signature": "String toString(final Object value)", "full_signature": "public static String toString(final Object value)", "class_method_signature": "PropertyEditors.toString(final Object value)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final String type, final String value, final ClassLoader classLoader)", "modifiers": "public static", "return": "Object", "signature": "Object getValue(final String type, final String value, final ClassLoader classLoader)", "full_signature": "public static Object getValue(final String type, final String value, final ClassLoader classLoader)", "class_method_signature": "PropertyEditors.getValue(final String type, final String value, final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final Type type, final String value)", "modifiers": "public static", "return": "Object", "signature": "Object getValue(final Type type, final String value)", "full_signature": "public static Object getValue(final Type type, final String value)", "class_method_signature": "PropertyEditors.getValue(final Type type, final String value)", "testcase": false, "constructor": false}, {"identifier": "registry", "parameters": "()", "modifiers": "public static", "return": "PropertyEditorRegistry", "signature": "PropertyEditorRegistry registry()", "full_signature": "public static PropertyEditorRegistry registry()", "class_method_signature": "PropertyEditors.registry()", "testcase": false, "constructor": false}], "file": "xbean-reflect/src/main/java/org/apache/xbean/propertyeditor/PropertyEditors.java"}, "focal_method": {"identifier": "getValue", "parameters": "(final String type, final String value, final ClassLoader classLoader)", "modifiers": "public static", "return": "Object", "body": "public static Object getValue(final String type, final String value, final ClassLoader classLoader) throws PropertyEditorException {\n        return REGISTRY.getValue(type, value, classLoader);\n\n    }", "signature": "Object getValue(final String type, final String value, final ClassLoader classLoader)", "full_signature": "public static Object getValue(final String type, final String value, final ClassLoader classLoader)", "class_method_signature": "PropertyEditors.getValue(final String type, final String value, final ClassLoader classLoader)", "testcase": false, "constructor": false, "invocations": ["getValue"]}, "repository": {"repo_id": 240466, "url": "https://github.com/apache/geronimo-xbean", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 7, "size": 8553, "license": "licensed"}}