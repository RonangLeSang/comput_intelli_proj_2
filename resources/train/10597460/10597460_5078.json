{"test_class": {"identifier": "XATransactionalStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TransactionManager transactionManager;", "modifier": "private", "type": "TransactionManager", "declarator": "transactionManager", "var_name": "transactionManager"}, {"original_string": "private Cache              cach1;", "modifier": "private", "type": "Cache", "declarator": "cach1", "var_name": "cach1"}, {"original_string": "private Cache              cache;", "modifier": "private", "type": "Cache", "declarator": "cache", "var_name": "cache"}], "file": "tags/ehcache-core-2.2.1/src/test/java/net/sf/ehcache/store/XATransactionalStoreTest.java"}, "test_case": {"identifier": "testPutIfAbsent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPutIfAbsent() throws Exception {\n        transactionManager.begin();\n        assertEquals(\"Cache should be empty to start\", 0, cache.getSize());\n        assertEquals(\"Cach1 should be empty to start\", 0, cach1.getSize());\n        assertNull(cach1.putIfAbsent(new Element(\"key\", \"value1\")));\n        assertNull(cache.putIfAbsent(new Element(\"key\", \"value1\")));\n        Transaction tx1 = transactionManager.suspend();\n        transactionManager.begin();\n        assertNull(cache.putIfAbsent(new Element(\"key\", \"value2\")));\n        transactionManager.commit();\n        transactionManager.resume(tx1);\n        try {\n            transactionManager.commit();\n            fail(\"This should have thrown an Exception, as the putIfAbsent should have failed!\");\n        } catch (RollbackException e) {\n            // Expected\n        }\n\n        CacheLockProvider clp = (CacheLockProvider)cache.getInternalContext();\n        assertFalse(clp.getSyncForKey(\"key\").isHeldByCurrentThread(LockType.WRITE));\n\n        transactionManager.begin();\n        Element element = cache.get(\"key\");\n        assertEquals(\"value2\", element.getValue());\n        assertNull(cach1.get(\"key\"));\n        assertEquals(element, cache.putIfAbsent(new Element(\"key\", \"value3\")));\n        transactionManager.commit();\n\n        transactionManager.begin();\n        element = cache.get(\"key\");\n        assertEquals(\"value2\", element.getValue());\n        transactionManager.commit();\n\n        transactionManager.begin();\n        cache.put(new Element(\"key2\", \"randomValue\"));\n        cache.putIfAbsent(new Element(\"key2\", \"notThere!\"));\n        assertEquals(\"randomValue\", cache.get(\"key2\").getValue());\n        transactionManager.commit();\n\n        transactionManager.begin();\n        assertEquals(\"randomValue\", cache.get(\"key2\").getValue());\n        transactionManager.commit();\n\n        transactionManager.begin();\n        cach1.remove(\"key2\");\n        cache.remove(\"key2\");\n        cache.putIfAbsent(new Element(\"key2\", \"nowThere!\"));\n        assertEquals(\"nowThere!\", cache.get(\"key2\").getValue());\n        transactionManager.commit();\n\n        transactionManager.begin();\n        assertEquals(\"nowThere!\", cache.get(\"key2\").getValue());\n        transactionManager.commit();\n\n        transactionManager.begin();\n        cache.remove(\"key2\");\n        cache.putIfAbsent(new Element(\"key2\", \"nowThere!\"));\n        assertEquals(\"nowThere!\", cache.get(\"key2\").getValue());\n        Transaction tx2 = transactionManager.suspend();\n\n        transactionManager.begin();\n        assertEquals(\"nowThere!\", cache.get(\"key2\").getValue());\n        cache.put(new Element(\"key2\", \"newValue\"));\n        transactionManager.commit();\n\n        transactionManager.resume(tx2);\n        cach1.put(new Element(\"fake\", \"entry\"));\n        try {\n            transactionManager.commit();\n            fail(\"This should have thrown an Exception!\");\n        } catch (RollbackException e) {\n            // Expected\n        }\n\n        transactionManager.begin();\n        assertEquals(\"newValue\", cache.get(\"key2\").getValue());\n        transactionManager.commit();\n    }", "signature": "void testPutIfAbsent()", "full_signature": "@Test public void testPutIfAbsent()", "class_method_signature": "XATransactionalStoreTest.testPutIfAbsent()", "testcase": true, "constructor": false, "invocations": ["begin", "assertEquals", "getSize", "assertEquals", "getSize", "assertNull", "putIfAbsent", "assertNull", "putIfAbsent", "suspend", "begin", "assertNull", "putIfAbsent", "commit", "resume", "commit", "fail", "getInternalContext", "assertFalse", "isHeldByCurrentThread", "getSyncForKey", "begin", "get", "assertEquals", "getValue", "assertNull", "get", "assertEquals", "putIfAbsent", "commit", "begin", "get", "assertEquals", "getValue", "commit", "begin", "put", "putIfAbsent", "assertEquals", "getValue", "get", "commit", "begin", "assertEquals", "getValue", "get", "commit", "begin", "remove", "remove", "putIfAbsent", "assertEquals", "getValue", "get", "commit", "begin", "assertEquals", "getValue", "get", "commit", "begin", "remove", "putIfAbsent", "assertEquals", "getValue", "get", "suspend", "begin", "assertEquals", "getValue", "get", "put", "commit", "resume", "put", "commit", "fail", "begin", "assertEquals", "getValue", "get", "commit"]}, "focal_class": {"identifier": "XATransactionalStore", "superclass": "extends AbstractStore", "interfaces": "", "fields": [{"original_string": "private final Store underlyingStore;", "modifier": "private final", "type": "Store", "declarator": "underlyingStore", "var_name": "underlyingStore"}, {"original_string": "private final Store oldVersionStore;", "modifier": "private final", "type": "Store", "declarator": "oldVersionStore", "var_name": "oldVersionStore"}, {"original_string": "private Ehcache cache;", "modifier": "private", "type": "Ehcache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private EhcacheXAStore ehcacheXAStore;", "modifier": "private", "type": "EhcacheXAStore", "declarator": "ehcacheXAStore", "var_name": "ehcacheXAStore"}, {"original_string": "private TransactionManagerLookup transactionManagerLookup;", "modifier": "private", "type": "TransactionManagerLookup", "declarator": "transactionManagerLookup", "var_name": "transactionManagerLookup"}, {"original_string": "private TransactionManager txnManager;", "modifier": "private", "type": "TransactionManager", "declarator": "txnManager", "var_name": "txnManager"}, {"original_string": "private final ConcurrentHashMap<Transaction, EhcacheXAResource> transactionToXAResourceMap =\n            new ConcurrentHashMap<Transaction, EhcacheXAResource>();", "modifier": "private final", "type": "ConcurrentHashMap<Transaction, EhcacheXAResource>", "declarator": "transactionToXAResourceMap =\n            new ConcurrentHashMap<Transaction, EhcacheXAResource>()", "var_name": "transactionToXAResourceMap"}], "methods": [{"identifier": "XATransactionalStore", "parameters": "(Ehcache cache, EhcacheXAStore ehcacheXAStore,\n                                TransactionManagerLookup transactionManagerLookup, TransactionManager txnManager)", "modifiers": "public", "return": "", "signature": " XATransactionalStore(Ehcache cache, EhcacheXAStore ehcacheXAStore,\n                                TransactionManagerLookup transactionManagerLookup, TransactionManager txnManager)", "full_signature": "public  XATransactionalStore(Ehcache cache, EhcacheXAStore ehcacheXAStore,\n                                TransactionManagerLookup transactionManagerLookup, TransactionManager txnManager)", "class_method_signature": "XATransactionalStore.XATransactionalStore(Ehcache cache, EhcacheXAStore ehcacheXAStore,\n                                TransactionManagerLookup transactionManagerLookup, TransactionManager txnManager)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(final Element element)", "modifiers": "public", "return": "boolean", "signature": "boolean put(final Element element)", "full_signature": "public boolean put(final Element element)", "class_method_signature": "XATransactionalStore.put(final Element element)", "testcase": false, "constructor": false}, {"identifier": "internalPut", "parameters": "(final StorePutCommand putCommand)", "modifiers": "private", "return": "boolean", "signature": "boolean internalPut(final StorePutCommand putCommand)", "full_signature": "private boolean internalPut(final StorePutCommand putCommand)", "class_method_signature": "XATransactionalStore.internalPut(final StorePutCommand putCommand)", "testcase": false, "constructor": false}, {"identifier": "putWithWriter", "parameters": "(final Element element, final CacheWriterManager writerManager)", "modifiers": "public", "return": "boolean", "signature": "boolean putWithWriter(final Element element, final CacheWriterManager writerManager)", "full_signature": "public boolean putWithWriter(final Element element, final CacheWriterManager writerManager)", "class_method_signature": "XATransactionalStore.putWithWriter(final Element element, final CacheWriterManager writerManager)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Object key)", "modifiers": "public", "return": "Element", "signature": "Element get(final Object key)", "full_signature": "public Element get(final Object key)", "class_method_signature": "XATransactionalStore.get(final Object key)", "testcase": false, "constructor": false}, {"identifier": "getQuiet", "parameters": "(final Object key)", "modifiers": "public", "return": "Element", "signature": "Element getQuiet(final Object key)", "full_signature": "public Element getQuiet(final Object key)", "class_method_signature": "XATransactionalStore.getQuiet(final Object key)", "testcase": false, "constructor": false}, {"identifier": "getKeyArray", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] getKeyArray()", "full_signature": "public Object[] getKeyArray()", "class_method_signature": "XATransactionalStore.getKeyArray()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final Object key)", "modifiers": "public", "return": "Element", "signature": "Element remove(final Object key)", "full_signature": "public Element remove(final Object key)", "class_method_signature": "XATransactionalStore.remove(final Object key)", "testcase": false, "constructor": false}, {"identifier": "retrieveElement", "parameters": "(final Object key)", "modifiers": "private", "return": "Element", "signature": "Element retrieveElement(final Object key)", "full_signature": "private Element retrieveElement(final Object key)", "class_method_signature": "XATransactionalStore.retrieveElement(final Object key)", "testcase": false, "constructor": false}, {"identifier": "removeInternal", "parameters": "(final StoreRemoveCommand command)", "modifiers": "private", "return": "Element", "signature": "Element removeInternal(final StoreRemoveCommand command)", "full_signature": "private Element removeInternal(final StoreRemoveCommand command)", "class_method_signature": "XATransactionalStore.removeInternal(final StoreRemoveCommand command)", "testcase": false, "constructor": false}, {"identifier": "removeWithWriter", "parameters": "(final Object key, final CacheWriterManager writerManager)", "modifiers": "public", "return": "Element", "signature": "Element removeWithWriter(final Object key, final CacheWriterManager writerManager)", "full_signature": "public Element removeWithWriter(final Object key, final CacheWriterManager writerManager)", "class_method_signature": "XATransactionalStore.removeWithWriter(final Object key, final CacheWriterManager writerManager)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeAll()", "full_signature": "public void removeAll()", "class_method_signature": "XATransactionalStore.removeAll()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "XATransactionalStore.dispose()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "XATransactionalStore.getSize()", "testcase": false, "constructor": false}, {"identifier": "getOnDiskSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOnDiskSize()", "full_signature": "public int getOnDiskSize()", "class_method_signature": "XATransactionalStore.getOnDiskSize()", "testcase": false, "constructor": false}, {"identifier": "getInMemorySize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInMemorySize()", "full_signature": "public int getInMemorySize()", "class_method_signature": "XATransactionalStore.getInMemorySize()", "testcase": false, "constructor": false}, {"identifier": "getTerracottaClusteredSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTerracottaClusteredSize()", "full_signature": "public int getTerracottaClusteredSize()", "class_method_signature": "XATransactionalStore.getTerracottaClusteredSize()", "testcase": false, "constructor": false}, {"identifier": "getInMemorySizeInBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getInMemorySizeInBytes()", "full_signature": "public long getInMemorySizeInBytes()", "class_method_signature": "XATransactionalStore.getInMemorySizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "getOnDiskSizeInBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getOnDiskSizeInBytes()", "full_signature": "public long getOnDiskSizeInBytes()", "class_method_signature": "XATransactionalStore.getOnDiskSizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "Status", "signature": "Status getStatus()", "full_signature": "public Status getStatus()", "class_method_signature": "XATransactionalStore.getStatus()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(final Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(final Object key)", "full_signature": "public boolean containsKey(final Object key)", "class_method_signature": "XATransactionalStore.containsKey(final Object key)", "testcase": false, "constructor": false}, {"identifier": "containsKeyInMemory", "parameters": "(final Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKeyInMemory(final Object key)", "full_signature": "public boolean containsKeyInMemory(final Object key)", "class_method_signature": "XATransactionalStore.containsKeyInMemory(final Object key)", "testcase": false, "constructor": false}, {"identifier": "containsKeyOnDisk", "parameters": "(final Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKeyOnDisk(final Object key)", "full_signature": "public boolean containsKeyOnDisk(final Object key)", "class_method_signature": "XATransactionalStore.containsKeyOnDisk(final Object key)", "testcase": false, "constructor": false}, {"identifier": "expireElements", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void expireElements()", "full_signature": "public void expireElements()", "class_method_signature": "XATransactionalStore.expireElements()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "XATransactionalStore.flush()", "testcase": false, "constructor": false}, {"identifier": "bufferFull", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean bufferFull()", "full_signature": "public boolean bufferFull()", "class_method_signature": "XATransactionalStore.bufferFull()", "testcase": false, "constructor": false}, {"identifier": "getInMemoryEvictionPolicy", "parameters": "()", "modifiers": "public", "return": "Policy", "signature": "Policy getInMemoryEvictionPolicy()", "full_signature": "public Policy getInMemoryEvictionPolicy()", "class_method_signature": "XATransactionalStore.getInMemoryEvictionPolicy()", "testcase": false, "constructor": false}, {"identifier": "setInMemoryEvictionPolicy", "parameters": "(final Policy policy)", "modifiers": "public", "return": "void", "signature": "void setInMemoryEvictionPolicy(final Policy policy)", "full_signature": "public void setInMemoryEvictionPolicy(final Policy policy)", "class_method_signature": "XATransactionalStore.setInMemoryEvictionPolicy(final Policy policy)", "testcase": false, "constructor": false}, {"identifier": "getInternalContext", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getInternalContext()", "full_signature": "public Object getInternalContext()", "class_method_signature": "XATransactionalStore.getInternalContext()", "testcase": false, "constructor": false}, {"identifier": "isCacheCoherent", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCacheCoherent()", "full_signature": "@Override public boolean isCacheCoherent()", "class_method_signature": "XATransactionalStore.isCacheCoherent()", "testcase": false, "constructor": false}, {"identifier": "isClusterCoherent", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClusterCoherent()", "full_signature": "@Override public boolean isClusterCoherent()", "class_method_signature": "XATransactionalStore.isClusterCoherent()", "testcase": false, "constructor": false}, {"identifier": "isNodeCoherent", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNodeCoherent()", "full_signature": "@Override public boolean isNodeCoherent()", "class_method_signature": "XATransactionalStore.isNodeCoherent()", "testcase": false, "constructor": false}, {"identifier": "setNodeCoherent", "parameters": "(boolean coherent)", "modifiers": "@Override public", "return": "void", "signature": "void setNodeCoherent(boolean coherent)", "full_signature": "@Override public void setNodeCoherent(boolean coherent)", "class_method_signature": "XATransactionalStore.setNodeCoherent(boolean coherent)", "testcase": false, "constructor": false}, {"identifier": "waitUntilClusterCoherent", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void waitUntilClusterCoherent()", "full_signature": "@Override public void waitUntilClusterCoherent()", "class_method_signature": "XATransactionalStore.waitUntilClusterCoherent()", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(Element element)", "modifiers": "public", "return": "Element", "signature": "Element putIfAbsent(Element element)", "full_signature": "public Element putIfAbsent(Element element)", "class_method_signature": "XATransactionalStore.putIfAbsent(Element element)", "testcase": false, "constructor": false}, {"identifier": "removeElement", "parameters": "(Element element)", "modifiers": "public", "return": "Element", "signature": "Element removeElement(Element element)", "full_signature": "public Element removeElement(Element element)", "class_method_signature": "XATransactionalStore.removeElement(Element element)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(Element old, Element element)", "modifiers": "public", "return": "boolean", "signature": "boolean replace(Element old, Element element)", "full_signature": "public boolean replace(Element old, Element element)", "class_method_signature": "XATransactionalStore.replace(Element old, Element element)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(Element element)", "modifiers": "public", "return": "Element", "signature": "Element replace(Element element)", "full_signature": "public Element replace(Element element)", "class_method_signature": "XATransactionalStore.replace(Element element)", "testcase": false, "constructor": false}, {"identifier": "getCurrentElement", "parameters": "(final Serializable key, final TransactionContext context)", "modifiers": "private", "return": "Element", "signature": "Element getCurrentElement(final Serializable key, final TransactionContext context)", "full_signature": "private Element getCurrentElement(final Serializable key, final TransactionContext context)", "class_method_signature": "XATransactionalStore.getCurrentElement(final Serializable key, final TransactionContext context)", "testcase": false, "constructor": false}, {"identifier": "getFromUnderlyingStore", "parameters": "(final Object key)", "modifiers": "private", "return": "Element", "signature": "Element getFromUnderlyingStore(final Object key)", "full_signature": "private Element getFromUnderlyingStore(final Object key)", "class_method_signature": "XATransactionalStore.getFromUnderlyingStore(final Object key)", "testcase": false, "constructor": false}, {"identifier": "getQuietFromUnderlyingStore", "parameters": "(final Object key)", "modifiers": "private", "return": "Element", "signature": "Element getQuietFromUnderlyingStore(final Object key)", "full_signature": "private Element getQuietFromUnderlyingStore(final Object key)", "class_method_signature": "XATransactionalStore.getQuietFromUnderlyingStore(final Object key)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateXAResource", "parameters": "()", "modifiers": "public", "return": "EhcacheXAResource", "signature": "EhcacheXAResource getOrCreateXAResource()", "full_signature": "public EhcacheXAResource getOrCreateXAResource()", "class_method_signature": "XATransactionalStore.getOrCreateXAResource()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateTransactionContext", "parameters": "()", "modifiers": "private", "return": "TransactionContext", "signature": "TransactionContext getOrCreateTransactionContext()", "full_signature": "private TransactionContext getOrCreateTransactionContext()", "class_method_signature": "XATransactionalStore.getOrCreateTransactionContext()", "testcase": false, "constructor": false}], "file": "tags/ehcache-core-2.2.1/src/main/java/net/sf/ehcache/store/XATransactionalStore.java"}, "focal_method": {"identifier": "putIfAbsent", "parameters": "(Element element)", "modifiers": "public", "return": "Element", "body": "public Element putIfAbsent(Element element) throws NullPointerException {\n        TransactionContext context = getOrCreateTransactionContext();\n        Element previous = getCurrentElement(element.getKey(), context);\n\n        if (previous == null) {\n            context.addCommand(new StorePutIfAbsentCommand(element), element);\n        }\n\n        return previous;\n    }", "signature": "Element putIfAbsent(Element element)", "full_signature": "public Element putIfAbsent(Element element)", "class_method_signature": "XATransactionalStore.putIfAbsent(Element element)", "testcase": false, "constructor": false, "invocations": ["getOrCreateTransactionContext", "getCurrentElement", "getKey", "addCommand"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}