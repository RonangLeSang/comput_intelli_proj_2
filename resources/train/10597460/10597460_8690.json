{"test_class": {"identifier": "UpdatingSelfPopulatingCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private CacheManager cacheManager;", "modifier": "private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private Cache cache;", "modifier": "private", "type": "Cache", "declarator": "cache", "var_name": "cache"}], "file": "tags/ehcache-core-2.6.9/src/test/java/net/sf/ehcache/constructs/blocking/UpdatingSelfPopulatingCacheTest.java"}, "test_case": {"identifier": "testFetchFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFetchFail() throws Exception {\n        final Exception exception = new Exception(\"Failed.\");\n        final UpdatingCacheEntryFactory factory = new UpdatingCacheEntryFactory() {\n            public Object createEntry(final Object key)\n                    throws Exception {\n                throw exception;\n            }\n\n            public void updateEntryValue(Object key, Object value)\n                    throws Exception {\n                throw exception;\n            }\n        };\n\n        UpdatingSelfPopulatingCache selfPopulatingCache = new UpdatingSelfPopulatingCache(cache, factory);\n\n        // Lookup\n        try {\n            selfPopulatingCache.get(\"key\");\n            fail();\n        } catch (final Exception e) {\n            Thread.sleep(20);\n\n            // Check the error\n            assertEquals(\"Could not update object for cache entry with key \\\"key\\\".\", e.getMessage());\n        }\n\n    }", "signature": "void testFetchFail()", "full_signature": "@Test public void testFetchFail()", "class_method_signature": "UpdatingSelfPopulatingCacheTest.testFetchFail()", "testcase": true, "constructor": false, "invocations": ["get", "fail", "sleep", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "UpdatingSelfPopulatingCache", "superclass": "extends SelfPopulatingCache", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(UpdatingSelfPopulatingCache.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(UpdatingSelfPopulatingCache.class.getName())", "var_name": "LOG"}], "methods": [{"identifier": "UpdatingSelfPopulatingCache", "parameters": "(Ehcache cache, final UpdatingCacheEntryFactory factory)", "modifiers": "public", "return": "", "signature": " UpdatingSelfPopulatingCache(Ehcache cache, final UpdatingCacheEntryFactory factory)", "full_signature": "public  UpdatingSelfPopulatingCache(Ehcache cache, final UpdatingCacheEntryFactory factory)", "class_method_signature": "UpdatingSelfPopulatingCache.UpdatingSelfPopulatingCache(Ehcache cache, final UpdatingCacheEntryFactory factory)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(final Object key)", "modifiers": "public", "return": "Element", "signature": "Element get(final Object key)", "full_signature": "public Element get(final Object key)", "class_method_signature": "UpdatingSelfPopulatingCache.get(final Object key)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final Object key)", "modifiers": "protected", "return": "void", "signature": "void update(final Object key)", "full_signature": "protected void update(final Object key)", "class_method_signature": "UpdatingSelfPopulatingCache.update(final Object key)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refresh()", "full_signature": "public void refresh()", "class_method_signature": "UpdatingSelfPopulatingCache.refresh()", "testcase": false, "constructor": false}], "file": "tags/ehcache-core-2.6.9/src/main/java/net/sf/ehcache/constructs/blocking/UpdatingSelfPopulatingCache.java"}, "focal_method": {"identifier": "get", "parameters": "(final Object key)", "modifiers": "public", "return": "Element", "body": "public Element get(final Object key) throws LockTimeoutException {\n\n        try {\n\n            Ehcache backingCache = getCache();\n            Element element = backingCache.get(key);\n\n            if (element == null) {\n                element = super.get(key);\n            } else {\n                Sync lock = getLockForKey(key);\n                try {\n                    lock.lock(LockType.WRITE);\n                    update(key);\n                } finally {\n                    lock.unlock(LockType.WRITE);\n                }\n            }\n            return element;\n        } catch (final Throwable throwable) {\n            // Could not fetch - Ditch the entry from the cache and rethrow\n            put(new Element(key, null));\n            throw new LockTimeoutException(\"Could not update object for cache entry with key \\\"\" + key + \"\\\".\", throwable);\n        }\n    }", "signature": "Element get(final Object key)", "full_signature": "public Element get(final Object key)", "class_method_signature": "UpdatingSelfPopulatingCache.get(final Object key)", "testcase": false, "constructor": false, "invocations": ["getCache", "get", "get", "getLockForKey", "lock", "update", "unlock", "put"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}