{"test_class": {"identifier": "MemoryLimitedCacheLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Ehcache cache;", "modifier": "private", "type": "Ehcache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private CacheConfiguration configuration;", "modifier": "private", "type": "CacheConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private TestCacheLoader loader;", "modifier": "private", "type": "TestCacheLoader", "declarator": "loader", "var_name": "loader"}, {"original_string": "private StatisticsGateway statisticsGateway;", "modifier": "private", "type": "StatisticsGateway", "declarator": "statisticsGateway", "var_name": "statisticsGateway"}], "file": "tags/ehcache-2.10.0-16-pipeline/ehcache-core/src/test/java/net/sf/ehcache/store/MemoryLimitedCacheLoaderTest.java"}, "test_case": {"identifier": "testLocalHeapSizeBased", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLocalHeapSizeBased() {\n        configuration.setOverflowToOffHeap(false);\n        configuration.setMaxBytesLocalHeap(1024L);\n\n        when(statisticsGateway.getLocalHeapSize()).thenReturn(0L, 1L, 4L);\n        when(statisticsGateway.getLocalHeapSizeInBytes()).thenReturn(250L, 1000L);\n\n        assertThat(loader.isInMemoryLimitReached(cache, 0), is(false));\n        assertThat(loader.isInMemoryLimitReached(cache, 1), is(false));\n        assertThat(loader.isInMemoryLimitReached(cache, 4), is(true));\n    }", "signature": "void testLocalHeapSizeBased()", "full_signature": "@Test public void testLocalHeapSizeBased()", "class_method_signature": "MemoryLimitedCacheLoaderTest.testLocalHeapSizeBased()", "testcase": true, "constructor": false, "invocations": ["setOverflowToOffHeap", "setMaxBytesLocalHeap", "thenReturn", "when", "getLocalHeapSize", "thenReturn", "when", "getLocalHeapSizeInBytes", "assertThat", "isInMemoryLimitReached", "is", "assertThat", "isInMemoryLimitReached", "is", "assertThat", "isInMemoryLimitReached", "is"]}, "focal_class": {"identifier": "MemoryLimitedCacheLoader", "superclass": "", "interfaces": "implements BootstrapCacheLoader, Cloneable", "fields": [], "methods": [{"identifier": "isInMemoryLimitReached", "parameters": "(final Ehcache cache, final int loadedElements)", "modifiers": "protected", "return": "boolean", "signature": "boolean isInMemoryLimitReached(final Ehcache cache, final int loadedElements)", "full_signature": "protected boolean isInMemoryLimitReached(final Ehcache cache, final int loadedElements)", "class_method_signature": "MemoryLimitedCacheLoader.isInMemoryLimitReached(final Ehcache cache, final int loadedElements)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "MemoryLimitedCacheLoader.clone()", "testcase": false, "constructor": false}], "file": "tags/ehcache-2.10.0-16-pipeline/ehcache-core/src/main/java/net/sf/ehcache/store/MemoryLimitedCacheLoader.java"}, "focal_method": {"identifier": "isInMemoryLimitReached", "parameters": "(final Ehcache cache, final int loadedElements)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isInMemoryLimitReached(final Ehcache cache, final int loadedElements) {\n\n        long maxBytesInMem;\n        long maxElementsInMem;\n        final boolean overflowToOffHeap = cache.getCacheConfiguration().isOverflowToOffHeap();\n        maxElementsInMem = cache.getCacheConfiguration().getMaxEntriesLocalHeap() == 0\n                ? Integer.MAX_VALUE : cache.getCacheConfiguration().getMaxEntriesLocalHeap();\n        if (overflowToOffHeap) {\n            maxBytesInMem = cache.getCacheConfiguration().getMaxBytesLocalOffHeap();\n        } else {\n            maxBytesInMem = cache.getCacheConfiguration().getMaxBytesLocalHeap();\n        }\n\n        if (maxBytesInMem != 0) {\n            final long inMemoryCount = overflowToOffHeap ? cache.getStatistics().getLocalOffHeapSize() : cache.getStatistics().getLocalHeapSize();\n            if (inMemoryCount == 0L) {\n                return false;\n            } else {\n                final long inMemorySizeInBytes = overflowToOffHeap ? cache.getStatistics().getLocalOffHeapSizeInBytes() : cache.getStatistics()\n                        .getLocalHeapSizeInBytes();\n                final long avgSize = inMemorySizeInBytes\n                        / inMemoryCount;\n                return inMemorySizeInBytes + (avgSize * 2) >= maxBytesInMem;\n            }\n        } else {\n            return loadedElements >= maxElementsInMem;\n        }\n    }", "signature": "boolean isInMemoryLimitReached(final Ehcache cache, final int loadedElements)", "full_signature": "protected boolean isInMemoryLimitReached(final Ehcache cache, final int loadedElements)", "class_method_signature": "MemoryLimitedCacheLoader.isInMemoryLimitReached(final Ehcache cache, final int loadedElements)", "testcase": false, "constructor": false, "invocations": ["isOverflowToOffHeap", "getCacheConfiguration", "getMaxEntriesLocalHeap", "getCacheConfiguration", "getMaxEntriesLocalHeap", "getCacheConfiguration", "getMaxBytesLocalOffHeap", "getCacheConfiguration", "getMaxBytesLocalHeap", "getCacheConfiguration", "getLocalOffHeapSize", "getStatistics", "getLocalHeapSize", "getStatistics", "getLocalOffHeapSizeInBytes", "getStatistics", "getLocalHeapSizeInBytes", "getStatistics"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}