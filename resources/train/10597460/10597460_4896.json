{"test_class": {"identifier": "CacheManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CacheManagerTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CacheManagerTest.class.getName())", "var_name": "LOG"}, {"original_string": "private static final int CACHES_IN_EHCACHE_XML = 15;", "modifier": "private static final", "type": "int", "declarator": "CACHES_IN_EHCACHE_XML = 15", "var_name": "CACHES_IN_EHCACHE_XML"}, {"original_string": "protected CacheManager singletonManager;", "modifier": "protected", "type": "CacheManager", "declarator": "singletonManager", "var_name": "singletonManager"}, {"original_string": "protected CacheManager instanceManager;", "modifier": "protected", "type": "CacheManager", "declarator": "instanceManager", "var_name": "instanceManager"}], "file": "tags/ehcache-core-2.5.0/src/test/java/net/sf/ehcache/CacheManagerTest.java"}, "test_case": {"identifier": "testForCacheManagerThreadLeak", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForCacheManagerThreadLeak() throws CacheException,\n            InterruptedException {\n        // Check can start second one with a different disk path\n        int startingThreadCount = countThreads();\n\n        URL secondCacheConfiguration = this.getClass().getResource(\n                \"/ehcache-2.xml\");\n        for (int i = 0; i < 100; i++) {\n            instanceManager = new CacheManager(secondCacheConfiguration);\n            instanceManager.shutdown();\n        }\n        int endingThreadCount;\n        int tries = 0;\n        // Give the spools a chance to exit\n        do {\n            Thread.sleep(500);\n            endingThreadCount = countThreads();\n        } while (tries++ < 5 || endingThreadCount >= startingThreadCount + 2);\n\n        // Allow a bit of variation.\n        assertTrue(endingThreadCount < startingThreadCount + 2);\n\n    }", "signature": "void testForCacheManagerThreadLeak()", "full_signature": "@Test public void testForCacheManagerThreadLeak()", "class_method_signature": "CacheManagerTest.testForCacheManagerThreadLeak()", "testcase": true, "constructor": false, "invocations": ["countThreads", "getResource", "getClass", "shutdown", "sleep", "countThreads", "assertTrue"]}, "focal_class": {"identifier": "CacheManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_NAME = \"__DEFAULT__\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_NAME = \"__DEFAULT__\"", "var_name": "DEFAULT_NAME"}, {"original_string": "public static final double ON_HEAP_THRESHOLD = 0.8;", "modifier": "public static final", "type": "double", "declarator": "ON_HEAP_THRESHOLD = 0.8", "var_name": "ON_HEAP_THRESHOLD"}, {"original_string": "public static final List<CacheManager> ALL_CACHE_MANAGERS = new CopyOnWriteArrayList<CacheManager>();", "modifier": "public static final", "type": "List<CacheManager>", "declarator": "ALL_CACHE_MANAGERS = new CopyOnWriteArrayList<CacheManager>()", "var_name": "ALL_CACHE_MANAGERS"}, {"original_string": "public static final String ENABLE_SHUTDOWN_HOOK_PROPERTY = \"net.sf.ehcache.enableShutdownHook\";", "modifier": "public static final", "type": "String", "declarator": "ENABLE_SHUTDOWN_HOOK_PROPERTY = \"net.sf.ehcache.enableShutdownHook\"", "var_name": "ENABLE_SHUTDOWN_HOOK_PROPERTY"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CacheManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CacheManager.class)", "var_name": "LOG"}, {"original_string": "private static final long EVERY_WEEK = 7 * 24 * 60 * 60 * 1000;", "modifier": "private static final", "type": "long", "declarator": "EVERY_WEEK = 7 * 24 * 60 * 60 * 1000", "var_name": "EVERY_WEEK"}, {"original_string": "private static final long DELAY_UPDATE_CHECK = 1000;", "modifier": "private static final", "type": "long", "declarator": "DELAY_UPDATE_CHECK = 1000", "var_name": "DELAY_UPDATE_CHECK"}, {"original_string": "private static volatile CacheManager singleton;", "modifier": "private static volatile", "type": "CacheManager", "declarator": "singleton", "var_name": "singleton"}, {"original_string": "private static final MBeanRegistrationProviderFactory MBEAN_REGISTRATION_PROVIDER_FACTORY = new MBeanRegistrationProviderFactoryImpl();", "modifier": "private static final", "type": "MBeanRegistrationProviderFactory", "declarator": "MBEAN_REGISTRATION_PROVIDER_FACTORY = new MBeanRegistrationProviderFactoryImpl()", "var_name": "MBEAN_REGISTRATION_PROVIDER_FACTORY"}, {"original_string": "private static final String NO_DEFAULT_CACHE_ERROR_MSG = \"Caches cannot be added by name when default cache config is not specified\"\n            + \" in the config. Please add a default cache config in the configuration.\";", "modifier": "private static final", "type": "String", "declarator": "NO_DEFAULT_CACHE_ERROR_MSG = \"Caches cannot be added by name when default cache config is not specified\"\n            + \" in the config. Please add a default cache config in the configuration.\"", "var_name": "NO_DEFAULT_CACHE_ERROR_MSG"}, {"original_string": "private static final Map<String, CacheManager> CACHE_MANAGERS_MAP = new HashMap<String, CacheManager>();", "modifier": "private static final", "type": "Map<String, CacheManager>", "declarator": "CACHE_MANAGERS_MAP = new HashMap<String, CacheManager>()", "var_name": "CACHE_MANAGERS_MAP"}, {"original_string": "private static final IdentityHashMap<CacheManager, String> CACHE_MANAGERS_REVERSE_MAP = new IdentityHashMap<CacheManager, String>();", "modifier": "private static final", "type": "IdentityHashMap<CacheManager, String>", "declarator": "CACHE_MANAGERS_REVERSE_MAP = new IdentityHashMap<CacheManager, String>()", "var_name": "CACHE_MANAGERS_REVERSE_MAP"}, {"original_string": "protected volatile Status status;", "modifier": "protected volatile", "type": "Status", "declarator": "status", "var_name": "status"}, {"original_string": "protected final Map<String, CacheManagerPeerProvider> cacheManagerPeerProviders = new ConcurrentHashMap<String, CacheManagerPeerProvider>();", "modifier": "protected final", "type": "Map<String, CacheManagerPeerProvider>", "declarator": "cacheManagerPeerProviders = new ConcurrentHashMap<String, CacheManagerPeerProvider>()", "var_name": "cacheManagerPeerProviders"}, {"original_string": "protected final Map<String, CacheManagerPeerListener> cacheManagerPeerListeners = new ConcurrentHashMap<String, CacheManagerPeerListener>();", "modifier": "protected final", "type": "Map<String, CacheManagerPeerListener>", "declarator": "cacheManagerPeerListeners = new ConcurrentHashMap<String, CacheManagerPeerListener>()", "var_name": "cacheManagerPeerListeners"}, {"original_string": "protected final CacheManagerEventListenerRegistry cacheManagerEventListenerRegistry = new CacheManagerEventListenerRegistry();", "modifier": "protected final", "type": "CacheManagerEventListenerRegistry", "declarator": "cacheManagerEventListenerRegistry = new CacheManagerEventListenerRegistry()", "var_name": "cacheManagerEventListenerRegistry"}, {"original_string": "protected Thread shutdownHook;", "modifier": "protected", "type": "Thread", "declarator": "shutdownHook", "var_name": "shutdownHook"}, {"original_string": "private final ConcurrentMap<String, Ehcache> ehcaches = new ConcurrentHashMap<String, Ehcache>();", "modifier": "private final", "type": "ConcurrentMap<String, Ehcache>", "declarator": "ehcaches = new ConcurrentHashMap<String, Ehcache>()", "var_name": "ehcaches"}, {"original_string": "private Ehcache defaultCache;", "modifier": "private", "type": "Ehcache", "declarator": "defaultCache", "var_name": "defaultCache"}, {"original_string": "private String diskStorePath;", "modifier": "private", "type": "String", "declarator": "diskStorePath", "var_name": "diskStorePath"}, {"original_string": "private MBeanRegistrationProvider mbeanRegistrationProvider;", "modifier": "private", "type": "MBeanRegistrationProvider", "declarator": "mbeanRegistrationProvider", "var_name": "mbeanRegistrationProvider"}, {"original_string": "private FailSafeTimer cacheManagerTimer;", "modifier": "private", "type": "FailSafeTimer", "declarator": "cacheManagerTimer", "var_name": "cacheManagerTimer"}, {"original_string": "private volatile TerracottaClient terracottaClient;", "modifier": "private volatile", "type": "TerracottaClient", "declarator": "terracottaClient", "var_name": "terracottaClient"}, {"original_string": "private volatile TransactionManagerLookup transactionManagerLookup;", "modifier": "private volatile", "type": "TransactionManagerLookup", "declarator": "transactionManagerLookup", "var_name": "transactionManagerLookup"}, {"original_string": "private volatile TransactionController transactionController;", "modifier": "private volatile", "type": "TransactionController", "declarator": "transactionController", "var_name": "transactionController"}, {"original_string": "private final ConcurrentMap<String, SoftLockFactory> softLockFactories = new ConcurrentHashMap<String, SoftLockFactory>();", "modifier": "private final", "type": "ConcurrentMap<String, SoftLockFactory>", "declarator": "softLockFactories = new ConcurrentHashMap<String, SoftLockFactory>()", "var_name": "softLockFactories"}, {"original_string": "private volatile Pool onHeapPool;", "modifier": "private volatile", "type": "Pool", "declarator": "onHeapPool", "var_name": "onHeapPool"}, {"original_string": "private volatile Pool onDiskPool;", "modifier": "private volatile", "type": "Pool", "declarator": "onDiskPool", "var_name": "onDiskPool"}, {"original_string": "private final NonstopExecutorServiceFactory nonstopExecutorServiceFactory = CacheManagerExecutorServiceFactory.getInstance();", "modifier": "private final", "type": "NonstopExecutorServiceFactory", "declarator": "nonstopExecutorServiceFactory = CacheManagerExecutorServiceFactory.getInstance()", "var_name": "nonstopExecutorServiceFactory"}, {"original_string": "private volatile Configuration.RuntimeCfg runtimeCfg;", "modifier": "private volatile", "type": "Configuration.RuntimeCfg", "declarator": "runtimeCfg", "var_name": "runtimeCfg"}], "methods": [{"identifier": "CacheManager", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "", "signature": " CacheManager(Configuration configuration)", "full_signature": "public  CacheManager(Configuration configuration)", "class_method_signature": "CacheManager.CacheManager(Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "(String configurationFileName)", "modifiers": "public", "return": "", "signature": " CacheManager(String configurationFileName)", "full_signature": "public  CacheManager(String configurationFileName)", "class_method_signature": "CacheManager.CacheManager(String configurationFileName)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "(URL configurationURL)", "modifiers": "public", "return": "", "signature": " CacheManager(URL configurationURL)", "full_signature": "public  CacheManager(URL configurationURL)", "class_method_signature": "CacheManager.CacheManager(URL configurationURL)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "(InputStream configurationInputStream)", "modifiers": "public", "return": "", "signature": " CacheManager(InputStream configurationInputStream)", "full_signature": "public  CacheManager(InputStream configurationInputStream)", "class_method_signature": "CacheManager.CacheManager(InputStream configurationInputStream)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " CacheManager()", "full_signature": "public  CacheManager()", "class_method_signature": "CacheManager.CacheManager()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Configuration initialConfiguration, String configurationFileName, URL configurationURL,\n            InputStream configurationInputStream)", "modifiers": "protected", "return": "void", "signature": "void init(Configuration initialConfiguration, String configurationFileName, URL configurationURL,\n            InputStream configurationInputStream)", "full_signature": "protected void init(Configuration initialConfiguration, String configurationFileName, URL configurationURL,\n            InputStream configurationInputStream)", "class_method_signature": "CacheManager.init(Configuration initialConfiguration, String configurationFileName, URL configurationURL,\n            InputStream configurationInputStream)", "testcase": false, "constructor": false}, {"identifier": "doInit", "parameters": "(Configuration configuration)", "modifiers": "private", "return": "void", "signature": "void doInit(Configuration configuration)", "full_signature": "private void doInit(Configuration configuration)", "class_method_signature": "CacheManager.doInit(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "assertNoCacheManagerExistsWithSameName", "parameters": "(Configuration configuration)", "modifiers": "private", "return": "void", "signature": "void assertNoCacheManagerExistsWithSameName(Configuration configuration)", "full_signature": "private void assertNoCacheManagerExistsWithSameName(Configuration configuration)", "class_method_signature": "CacheManager.assertNoCacheManagerExistsWithSameName(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "getOnHeapPool", "parameters": "()", "modifiers": "public", "return": "Pool", "signature": "Pool getOnHeapPool()", "full_signature": "public Pool getOnHeapPool()", "class_method_signature": "CacheManager.getOnHeapPool()", "testcase": false, "constructor": false}, {"identifier": "getOnDiskPool", "parameters": "()", "modifiers": "public", "return": "Pool", "signature": "Pool getOnDiskPool()", "full_signature": "public Pool getOnDiskPool()", "class_method_signature": "CacheManager.getOnDiskPool()", "testcase": false, "constructor": false}, {"identifier": "getClusterUUID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClusterUUID()", "full_signature": "public String getClusterUUID()", "class_method_signature": "CacheManager.getClusterUUID()", "testcase": false, "constructor": false}, {"identifier": "getClientUUID", "parameters": "(ClusteredInstanceFactory clusteredInstanceFactory)", "modifiers": "private static", "return": "String", "signature": "String getClientUUID(ClusteredInstanceFactory clusteredInstanceFactory)", "full_signature": "private static String getClientUUID(ClusteredInstanceFactory clusteredInstanceFactory)", "class_method_signature": "CacheManager.getClientUUID(ClusteredInstanceFactory clusteredInstanceFactory)", "testcase": false, "constructor": false}, {"identifier": "createTerracottaStore", "parameters": "(Ehcache cache)", "modifiers": "public", "return": "Store", "signature": "Store createTerracottaStore(Ehcache cache)", "full_signature": "public Store createTerracottaStore(Ehcache cache)", "class_method_signature": "CacheManager.createTerracottaStore(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "createTerracottaWriteBehind", "parameters": "(Ehcache cache)", "modifiers": "public", "return": "WriteBehind", "signature": "WriteBehind createTerracottaWriteBehind(Ehcache cache)", "full_signature": "public WriteBehind createTerracottaWriteBehind(Ehcache cache)", "class_method_signature": "CacheManager.createTerracottaWriteBehind(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "createTerracottaEventReplicator", "parameters": "(Ehcache cache)", "modifiers": "public", "return": "CacheEventListener", "signature": "CacheEventListener createTerracottaEventReplicator(Ehcache cache)", "full_signature": "public CacheEventListener createTerracottaEventReplicator(Ehcache cache)", "class_method_signature": "CacheManager.createTerracottaEventReplicator(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getNonstopActiveDelegateHolder", "parameters": "(Ehcache cache)", "modifiers": "private", "return": "NonstopActiveDelegateHolder", "signature": "NonstopActiveDelegateHolder getNonstopActiveDelegateHolder(Ehcache cache)", "full_signature": "private NonstopActiveDelegateHolder getNonstopActiveDelegateHolder(Ehcache cache)", "class_method_signature": "CacheManager.getNonstopActiveDelegateHolder(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getClusteredInstanceFactory", "parameters": "(Ehcache cache)", "modifiers": "protected", "return": "ClusteredInstanceFactory", "signature": "ClusteredInstanceFactory getClusteredInstanceFactory(Ehcache cache)", "full_signature": "protected ClusteredInstanceFactory getClusteredInstanceFactory(Ehcache cache)", "class_method_signature": "CacheManager.getClusteredInstanceFactory(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "checkForUpdateIfNeeded", "parameters": "(boolean updateCheckNeeded)", "modifiers": "private", "return": "void", "signature": "void checkForUpdateIfNeeded(boolean updateCheckNeeded)", "full_signature": "private void checkForUpdateIfNeeded(boolean updateCheckNeeded)", "class_method_signature": "CacheManager.checkForUpdateIfNeeded(boolean updateCheckNeeded)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(String configurationFileName, URL configurationURL,\n            InputStream configurationInputStream)", "modifiers": "private synchronized", "return": "Configuration", "signature": "Configuration parseConfiguration(String configurationFileName, URL configurationURL,\n            InputStream configurationInputStream)", "full_signature": "private synchronized Configuration parseConfiguration(String configurationFileName, URL configurationURL,\n            InputStream configurationInputStream)", "class_method_signature": "CacheManager.parseConfiguration(String configurationFileName, URL configurationURL,\n            InputStream configurationInputStream)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(ConfigurationHelper configurationHelper)", "modifiers": "private", "return": "void", "signature": "void configure(ConfigurationHelper configurationHelper)", "full_signature": "private void configure(ConfigurationHelper configurationHelper)", "class_method_signature": "CacheManager.configure(ConfigurationHelper configurationHelper)", "testcase": false, "constructor": false}, {"identifier": "detectAndFixDiskStorePathConflict", "parameters": "(ConfigurationHelper configurationHelper)", "modifiers": "private", "return": "void", "signature": "void detectAndFixDiskStorePathConflict(ConfigurationHelper configurationHelper)", "full_signature": "private void detectAndFixDiskStorePathConflict(ConfigurationHelper configurationHelper)", "class_method_signature": "CacheManager.detectAndFixDiskStorePathConflict(ConfigurationHelper configurationHelper)", "testcase": false, "constructor": false}, {"identifier": "detectAndFixCacheManagerPeerListenerConflict", "parameters": "(ConfigurationHelper configurationHelper)", "modifiers": "private", "return": "void", "signature": "void detectAndFixCacheManagerPeerListenerConflict(ConfigurationHelper configurationHelper)", "full_signature": "private void detectAndFixCacheManagerPeerListenerConflict(ConfigurationHelper configurationHelper)", "class_method_signature": "CacheManager.detectAndFixCacheManagerPeerListenerConflict(ConfigurationHelper configurationHelper)", "testcase": false, "constructor": false}, {"identifier": "addConfiguredCaches", "parameters": "(ConfigurationHelper configurationHelper)", "modifiers": "private", "return": "void", "signature": "void addConfiguredCaches(ConfigurationHelper configurationHelper)", "full_signature": "private void addConfiguredCaches(ConfigurationHelper configurationHelper)", "class_method_signature": "CacheManager.addConfiguredCaches(ConfigurationHelper configurationHelper)", "testcase": false, "constructor": false}, {"identifier": "addOrReplaceDecoratedCache", "parameters": "(final Ehcache underlyingCache, final Ehcache decoratedCache)", "modifiers": "private", "return": "void", "signature": "void addOrReplaceDecoratedCache(final Ehcache underlyingCache, final Ehcache decoratedCache)", "full_signature": "private void addOrReplaceDecoratedCache(final Ehcache underlyingCache, final Ehcache decoratedCache)", "class_method_signature": "CacheManager.addOrReplaceDecoratedCache(final Ehcache underlyingCache, final Ehcache decoratedCache)", "testcase": false, "constructor": false}, {"identifier": "reinitialisationCheck", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reinitialisationCheck()", "full_signature": "private void reinitialisationCheck()", "class_method_signature": "CacheManager.reinitialisationCheck()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create()", "full_signature": "public static CacheManager create()", "class_method_signature": "CacheManager.create()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager getInstance()", "full_signature": "public static CacheManager getInstance()", "class_method_signature": "CacheManager.getInstance()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String configurationFileName)", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create(String configurationFileName)", "full_signature": "public static CacheManager create(String configurationFileName)", "class_method_signature": "CacheManager.create(String configurationFileName)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(URL configurationFileURL)", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create(URL configurationFileURL)", "full_signature": "public static CacheManager create(URL configurationFileURL)", "class_method_signature": "CacheManager.create(URL configurationFileURL)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create(InputStream inputStream)", "full_signature": "public static CacheManager create(InputStream inputStream)", "class_method_signature": "CacheManager.create(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Configuration config)", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create(Configuration config)", "full_signature": "public static CacheManager create(Configuration config)", "class_method_signature": "CacheManager.create(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Configuration configuration, String msg)", "modifiers": "private static", "return": "CacheManager", "signature": "CacheManager create(Configuration configuration, String msg)", "full_signature": "private static CacheManager create(Configuration configuration, String msg)", "class_method_signature": "CacheManager.create(Configuration configuration, String msg)", "testcase": false, "constructor": false}, {"identifier": "getCacheManager", "parameters": "(String name)", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager getCacheManager(String name)", "full_signature": "public static CacheManager getCacheManager(String name)", "class_method_signature": "CacheManager.getCacheManager(String name)", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "(String name)", "modifiers": "public", "return": "Cache", "signature": "Cache getCache(String name)", "full_signature": "public Cache getCache(String name)", "class_method_signature": "CacheManager.getCache(String name)", "testcase": false, "constructor": false}, {"identifier": "getEhcache", "parameters": "(String name)", "modifiers": "public", "return": "Ehcache", "signature": "Ehcache getEhcache(String name)", "full_signature": "public Ehcache getEhcache(String name)", "class_method_signature": "CacheManager.getEhcache(String name)", "testcase": false, "constructor": false}, {"identifier": "addShutdownHookIfRequired", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addShutdownHookIfRequired()", "full_signature": "private void addShutdownHookIfRequired()", "class_method_signature": "CacheManager.addShutdownHookIfRequired()", "testcase": false, "constructor": false}, {"identifier": "removeShutdownHook", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeShutdownHook()", "full_signature": "private void removeShutdownHook()", "class_method_signature": "CacheManager.removeShutdownHook()", "testcase": false, "constructor": false}, {"identifier": "addCache", "parameters": "(String cacheName)", "modifiers": "public", "return": "void", "signature": "void addCache(String cacheName)", "full_signature": "public void addCache(String cacheName)", "class_method_signature": "CacheManager.addCache(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "addCache", "parameters": "(Cache cache)", "modifiers": "public", "return": "void", "signature": "void addCache(Cache cache)", "full_signature": "public void addCache(Cache cache)", "class_method_signature": "CacheManager.addCache(Cache cache)", "testcase": false, "constructor": false}, {"identifier": "addCache", "parameters": "(Ehcache cache)", "modifiers": "public", "return": "void", "signature": "void addCache(Ehcache cache)", "full_signature": "public void addCache(Ehcache cache)", "class_method_signature": "CacheManager.addCache(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "addDecoratedCache", "parameters": "(Ehcache decoratedCache)", "modifiers": "public", "return": "void", "signature": "void addDecoratedCache(Ehcache decoratedCache)", "full_signature": "public void addDecoratedCache(Ehcache decoratedCache)", "class_method_signature": "CacheManager.addDecoratedCache(Ehcache decoratedCache)", "testcase": false, "constructor": false}, {"identifier": "addDecoratedCacheIfAbsent", "parameters": "(Ehcache decoratedCache)", "modifiers": "public", "return": "void", "signature": "void addDecoratedCacheIfAbsent(Ehcache decoratedCache)", "full_signature": "public void addDecoratedCacheIfAbsent(Ehcache decoratedCache)", "class_method_signature": "CacheManager.addDecoratedCacheIfAbsent(Ehcache decoratedCache)", "testcase": false, "constructor": false}, {"identifier": "internalAddDecoratedCache", "parameters": "(final Ehcache decoratedCache, final boolean strict)", "modifiers": "private", "return": "void", "signature": "void internalAddDecoratedCache(final Ehcache decoratedCache, final boolean strict)", "full_signature": "private void internalAddDecoratedCache(final Ehcache decoratedCache, final boolean strict)", "class_method_signature": "CacheManager.internalAddDecoratedCache(final Ehcache decoratedCache, final boolean strict)", "testcase": false, "constructor": false}, {"identifier": "initializeEhcache", "parameters": "(final Ehcache cache, final boolean registerCacheConfig)", "modifiers": "", "return": "void", "signature": "void initializeEhcache(final Ehcache cache, final boolean registerCacheConfig)", "full_signature": " void initializeEhcache(final Ehcache cache, final boolean registerCacheConfig)", "class_method_signature": "CacheManager.initializeEhcache(final Ehcache cache, final boolean registerCacheConfig)", "testcase": false, "constructor": false}, {"identifier": "addCacheNoCheck", "parameters": "(final Ehcache cache, final boolean strict)", "modifiers": "private", "return": "Ehcache", "signature": "Ehcache addCacheNoCheck(final Ehcache cache, final boolean strict)", "full_signature": "private Ehcache addCacheNoCheck(final Ehcache cache, final boolean strict)", "class_method_signature": "CacheManager.addCacheNoCheck(final Ehcache cache, final boolean strict)", "testcase": false, "constructor": false}, {"identifier": "cacheExists", "parameters": "(String cacheName)", "modifiers": "public", "return": "boolean", "signature": "boolean cacheExists(String cacheName)", "full_signature": "public boolean cacheExists(String cacheName)", "class_method_signature": "CacheManager.cacheExists(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "removalAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removalAll()", "full_signature": "public void removalAll()", "class_method_signature": "CacheManager.removalAll()", "testcase": false, "constructor": false}, {"identifier": "removeCache", "parameters": "(String cacheName)", "modifiers": "public", "return": "void", "signature": "void removeCache(String cacheName)", "full_signature": "public void removeCache(String cacheName)", "class_method_signature": "CacheManager.removeCache(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "CacheManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getCacheNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getCacheNames()", "full_signature": "public String[] getCacheNames()", "class_method_signature": "CacheManager.getCacheNames()", "testcase": false, "constructor": false}, {"identifier": "checkStatus", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkStatus()", "full_signature": "protected void checkStatus()", "class_method_signature": "CacheManager.checkStatus()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "Status", "signature": "Status getStatus()", "full_signature": "public Status getStatus()", "class_method_signature": "CacheManager.getStatus()", "testcase": false, "constructor": false}, {"identifier": "clearAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearAll()", "full_signature": "public void clearAll()", "class_method_signature": "CacheManager.clearAll()", "testcase": false, "constructor": false}, {"identifier": "clearAllStartingWith", "parameters": "(String prefix)", "modifiers": "public", "return": "void", "signature": "void clearAllStartingWith(String prefix)", "full_signature": "public void clearAllStartingWith(String prefix)", "class_method_signature": "CacheManager.clearAllStartingWith(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getCacheManagerPeerProvider", "parameters": "(String scheme)", "modifiers": "public", "return": "CacheManagerPeerProvider", "signature": "CacheManagerPeerProvider getCacheManagerPeerProvider(String scheme)", "full_signature": "public CacheManagerPeerProvider getCacheManagerPeerProvider(String scheme)", "class_method_signature": "CacheManager.getCacheManagerPeerProvider(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getCacheManagerPeerProviders", "parameters": "()", "modifiers": "public", "return": "Map<String, CacheManagerPeerProvider>", "signature": "Map<String, CacheManagerPeerProvider> getCacheManagerPeerProviders()", "full_signature": "public Map<String, CacheManagerPeerProvider> getCacheManagerPeerProviders()", "class_method_signature": "CacheManager.getCacheManagerPeerProviders()", "testcase": false, "constructor": false}, {"identifier": "getCachePeerListener", "parameters": "(String scheme)", "modifiers": "public", "return": "CacheManagerPeerListener", "signature": "CacheManagerPeerListener getCachePeerListener(String scheme)", "full_signature": "public CacheManagerPeerListener getCachePeerListener(String scheme)", "class_method_signature": "CacheManager.getCachePeerListener(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getCacheManagerEventListener", "parameters": "()", "modifiers": "public", "return": "CacheManagerEventListener", "signature": "CacheManagerEventListener getCacheManagerEventListener()", "full_signature": "public CacheManagerEventListener getCacheManagerEventListener()", "class_method_signature": "CacheManager.getCacheManagerEventListener()", "testcase": false, "constructor": false}, {"identifier": "setCacheManagerEventListener", "parameters": "(CacheManagerEventListener cacheManagerEventListener)", "modifiers": "public", "return": "void", "signature": "void setCacheManagerEventListener(CacheManagerEventListener cacheManagerEventListener)", "full_signature": "public void setCacheManagerEventListener(CacheManagerEventListener cacheManagerEventListener)", "class_method_signature": "CacheManager.setCacheManagerEventListener(CacheManagerEventListener cacheManagerEventListener)", "testcase": false, "constructor": false}, {"identifier": "getCacheManagerEventListenerRegistry", "parameters": "()", "modifiers": "public", "return": "CacheManagerEventListenerRegistry", "signature": "CacheManagerEventListenerRegistry getCacheManagerEventListenerRegistry()", "full_signature": "public CacheManagerEventListenerRegistry getCacheManagerEventListenerRegistry()", "class_method_signature": "CacheManager.getCacheManagerEventListenerRegistry()", "testcase": false, "constructor": false}, {"identifier": "replaceCacheWithDecoratedCache", "parameters": "(Ehcache ehcache, Ehcache decoratedCache)", "modifiers": "public", "return": "void", "signature": "void replaceCacheWithDecoratedCache(Ehcache ehcache, Ehcache decoratedCache)", "full_signature": "public void replaceCacheWithDecoratedCache(Ehcache ehcache, Ehcache decoratedCache)", "class_method_signature": "CacheManager.replaceCacheWithDecoratedCache(Ehcache ehcache, Ehcache decoratedCache)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "CacheManager.getName()", "testcase": false, "constructor": false}, {"identifier": "isNamed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNamed()", "full_signature": "public boolean isNamed()", "class_method_signature": "CacheManager.isNamed()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "CacheManager.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CacheManager.toString()", "testcase": false, "constructor": false}, {"identifier": "getDiskStorePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDiskStorePath()", "full_signature": "public String getDiskStorePath()", "class_method_signature": "CacheManager.getDiskStorePath()", "testcase": false, "constructor": false}, {"identifier": "getTimer", "parameters": "()", "modifiers": "public", "return": "FailSafeTimer", "signature": "FailSafeTimer getTimer()", "full_signature": "public FailSafeTimer getTimer()", "class_method_signature": "CacheManager.getTimer()", "testcase": false, "constructor": false}, {"identifier": "getCluster", "parameters": "(ClusterScheme scheme)", "modifiers": "public", "return": "CacheCluster", "signature": "CacheCluster getCluster(ClusterScheme scheme)", "full_signature": "public CacheCluster getCluster(ClusterScheme scheme)", "class_method_signature": "CacheManager.getCluster(ClusterScheme scheme)", "testcase": false, "constructor": false}, {"identifier": "getOriginalConfigurationText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOriginalConfigurationText()", "full_signature": "public String getOriginalConfigurationText()", "class_method_signature": "CacheManager.getOriginalConfigurationText()", "testcase": false, "constructor": false}, {"identifier": "getActiveConfigurationText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getActiveConfigurationText()", "full_signature": "public String getActiveConfigurationText()", "class_method_signature": "CacheManager.getActiveConfigurationText()", "testcase": false, "constructor": false}, {"identifier": "getOriginalConfigurationText", "parameters": "(String cacheName)", "modifiers": "public", "return": "String", "signature": "String getOriginalConfigurationText(String cacheName)", "full_signature": "public String getOriginalConfigurationText(String cacheName)", "class_method_signature": "CacheManager.getOriginalConfigurationText(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getActiveConfigurationText", "parameters": "(String cacheName)", "modifiers": "public", "return": "String", "signature": "String getActiveConfigurationText(String cacheName)", "full_signature": "public String getActiveConfigurationText(String cacheName)", "class_method_signature": "CacheManager.getActiveConfigurationText(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getConfiguration()", "full_signature": "public Configuration getConfiguration()", "class_method_signature": "CacheManager.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "addCacheIfAbsent", "parameters": "(final Ehcache cache)", "modifiers": "public", "return": "Ehcache", "signature": "Ehcache addCacheIfAbsent(final Ehcache cache)", "full_signature": "public Ehcache addCacheIfAbsent(final Ehcache cache)", "class_method_signature": "CacheManager.addCacheIfAbsent(final Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "addCacheIfAbsent", "parameters": "(final String cacheName)", "modifiers": "public", "return": "Ehcache", "signature": "Ehcache addCacheIfAbsent(final String cacheName)", "full_signature": "public Ehcache addCacheIfAbsent(final String cacheName)", "class_method_signature": "CacheManager.addCacheIfAbsent(final String cacheName)", "testcase": false, "constructor": false}, {"identifier": "cloneDefaultCache", "parameters": "(final String cacheName)", "modifiers": "private", "return": "Ehcache", "signature": "Ehcache cloneDefaultCache(final String cacheName)", "full_signature": "private Ehcache cloneDefaultCache(final String cacheName)", "class_method_signature": "CacheManager.cloneDefaultCache(final String cacheName)", "testcase": false, "constructor": false}, {"identifier": "createDefaultCacheDecorators", "parameters": "(Ehcache underlyingCache)", "modifiers": "private", "return": "List<Ehcache>", "signature": "List<Ehcache> createDefaultCacheDecorators(Ehcache underlyingCache)", "full_signature": "private List<Ehcache> createDefaultCacheDecorators(Ehcache underlyingCache)", "class_method_signature": "CacheManager.createDefaultCacheDecorators(Ehcache underlyingCache)", "testcase": false, "constructor": false}, {"identifier": "getTransactionController", "parameters": "()", "modifiers": "public", "return": "TransactionController", "signature": "TransactionController getTransactionController()", "full_signature": "public TransactionController getTransactionController()", "class_method_signature": "CacheManager.getTransactionController()", "testcase": false, "constructor": false}, {"identifier": "createTransactionIDFactory", "parameters": "()", "modifiers": "", "return": "TransactionIDFactory", "signature": "TransactionIDFactory createTransactionIDFactory()", "full_signature": " TransactionIDFactory createTransactionIDFactory()", "class_method_signature": "CacheManager.createTransactionIDFactory()", "testcase": false, "constructor": false}, {"identifier": "createSoftLockFactory", "parameters": "(Ehcache cache)", "modifiers": "", "return": "SoftLockFactory", "signature": "SoftLockFactory createSoftLockFactory(Ehcache cache)", "full_signature": " SoftLockFactory createSoftLockFactory(Ehcache cache)", "class_method_signature": "CacheManager.createSoftLockFactory(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getSoftLockFactory", "parameters": "(String cacheName)", "modifiers": "public", "return": "SoftLockFactory", "signature": "SoftLockFactory getSoftLockFactory(String cacheName)", "full_signature": "public SoftLockFactory getSoftLockFactory(String cacheName)", "class_method_signature": "CacheManager.getSoftLockFactory(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "clusterRejoinStarted", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clusterRejoinStarted()", "full_signature": "private void clusterRejoinStarted()", "class_method_signature": "CacheManager.clusterRejoinStarted()", "testcase": false, "constructor": false}, {"identifier": "clusterRejoinComplete", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clusterRejoinComplete()", "full_signature": "private void clusterRejoinComplete()", "class_method_signature": "CacheManager.clusterRejoinComplete()", "testcase": false, "constructor": false}, {"identifier": "createSizeOfEngine", "parameters": "(final Cache cache)", "modifiers": "", "return": "SizeOfEngine", "signature": "SizeOfEngine createSizeOfEngine(final Cache cache)", "full_signature": " SizeOfEngine createSizeOfEngine(final Cache cache)", "class_method_signature": "CacheManager.createSizeOfEngine(final Cache cache)", "testcase": false, "constructor": false}, {"identifier": "getNonstopExecutorService", "parameters": "()", "modifiers": "protected", "return": "NonstopExecutorService", "signature": "NonstopExecutorService getNonstopExecutorService()", "full_signature": "protected NonstopExecutorService getNonstopExecutorService()", "class_method_signature": "CacheManager.getNonstopExecutorService()", "testcase": false, "constructor": false}], "file": "tags/ehcache-core-2.5.0/src/main/java/net/sf/ehcache/CacheManager.java"}, "focal_method": {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void shutdown() {\n        synchronized (CacheManager.class) {\n            if (status.equals(Status.STATUS_SHUTDOWN)) {\n                LOG.debug(\"CacheManager already shutdown\");\n                return;\n            }\n            for (CacheManagerPeerProvider cacheManagerPeerProvider : cacheManagerPeerProviders.values()) {\n                if (cacheManagerPeerProvider != null) {\n                    cacheManagerPeerProvider.dispose();\n                }\n            }\n\n            // cancel the cacheManager timer and all tasks\n            if (cacheManagerTimer != null) {\n                cacheManagerTimer.cancel();\n                cacheManagerTimer.purge();\n            }\n\n            cacheManagerEventListenerRegistry.dispose();\n\n            ALL_CACHE_MANAGERS.remove(this);\n\n            for (Ehcache cache : ehcaches.values()) {\n                if (cache != null) {\n                    cache.dispose();\n                }\n            }\n            if (defaultCache != null) {\n                defaultCache.dispose();\n            }\n            status = Status.STATUS_SHUTDOWN;\n            XARequestProcessor.shutdown();\n\n            // only delete singleton if the singleton is shutting down.\n            if (this == singleton) {\n                singleton = null;\n            }\n            terracottaClient.shutdown();\n            transactionController = null;\n            removeShutdownHook();\n            nonstopExecutorServiceFactory.shutdown(this);\n\n            final String name = CACHE_MANAGERS_REVERSE_MAP.remove(this);\n            CACHE_MANAGERS_MAP.remove(name);\n        }\n    }", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "CacheManager.shutdown()", "testcase": false, "constructor": false, "invocations": ["equals", "debug", "values", "dispose", "cancel", "purge", "dispose", "remove", "values", "dispose", "dispose", "shutdown", "shutdown", "removeShutdownHook", "shutdown", "remove", "remove"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}