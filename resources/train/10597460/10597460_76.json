{"test_class": {"identifier": "RefreshAheadCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static CacheLoader stringifyCacheLoader = new StringifyCacheLoaderFactory().createCacheLoader(null, null);", "modifier": "private static", "type": "CacheLoader", "declarator": "stringifyCacheLoader = new StringifyCacheLoaderFactory().createCacheLoader(null, null)", "var_name": "stringifyCacheLoader"}], "file": "tags/ehcache-2.10.0-16-pipeline/ehcache-core/src/test/java/net/sf/ehcache/constructs/refreshahead/RefreshAheadCacheTest.java"}, "test_case": {"identifier": "testSimpleCaseXML", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimpleCaseXML() {\n\n        CacheManager cacheManager = new CacheManager(getClass().getResourceAsStream\n                (\"/ehcache-refresh-ahead-simple.xml\"));\n\n        try {\n            final Ehcache decorator = cacheManager.getEhcache(\"testRefreshAhead1\");\n\n            final Integer key1 = 1;\n            decorator.put(new Element(key1, \"1\"));\n            decorator.put(new Element(2, \"2\"));\n            decorator.put(new Element(3, \"3\"));\n            decorator.put(new Element(4, \"4\"));\n\n            // get the first one\n            Element got = decorator.get(key1);\n            long creationTime = got.getCreationTime();\n            assertNotNull(got);\n\n            sleepFor(1, TimeUnit.SECONDS);\n            // now, you should get the same one, no refresh ahead\n            got = decorator.get(key1);\n            assertNotNull(got);\n            assertEquals(got.getCreationTime(), creationTime);\n\n            assertBy(5, TimeUnit.SECONDS, new Callable<Element>() {\n                @Override\n                public Element call() throws Exception {\n                    return decorator.get(key1);\n                }\n            }, not(sameInstance(got)));\n            // better not have the same creation time as originally\n            got = decorator.get(key1);\n            assertFalse(creationTime == got.getCreationTime());\n\n        } finally {\n            cacheManager.shutdown();\n        }\n    }", "signature": "void testSimpleCaseXML()", "full_signature": "@Test public void testSimpleCaseXML()", "class_method_signature": "RefreshAheadCacheTest.testSimpleCaseXML()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "getEhcache", "put", "put", "put", "put", "get", "getCreationTime", "assertNotNull", "sleepFor", "get", "assertNotNull", "assertEquals", "getCreationTime", "assertBy", "get", "not", "sameInstance", "get", "assertFalse", "getCreationTime", "shutdown"]}, "focal_class": {"identifier": "RefreshAheadCache", "superclass": "extends EhcacheDecoratorAdapter", "interfaces": "", "fields": [{"original_string": "private static final Object REFRESH_VALUE = Boolean.TRUE;", "modifier": "private static final", "type": "Object", "declarator": "REFRESH_VALUE = Boolean.TRUE", "var_name": "REFRESH_VALUE"}, {"original_string": "private static final int DEFAULT_SUPPORT_TTL_SECONDS = (int)TimeUnit.SECONDS.convert(10, TimeUnit.MINUTES);", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SUPPORT_TTL_SECONDS = (int)TimeUnit.SECONDS.convert(10, TimeUnit.MINUTES)", "var_name": "DEFAULT_SUPPORT_TTL_SECONDS"}, {"original_string": "private final AtomicLong refreshSuccessCount = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "refreshSuccessCount = new AtomicLong()", "var_name": "refreshSuccessCount"}, {"original_string": "private final RefreshAheadCacheConfiguration refreshAheadConfig;", "modifier": "private final", "type": "RefreshAheadCacheConfiguration", "declarator": "refreshAheadConfig", "var_name": "refreshAheadConfig"}, {"original_string": "private CacheConfiguration supportConfig;", "modifier": "private", "type": "CacheConfiguration", "declarator": "supportConfig", "var_name": "supportConfig"}, {"original_string": "private volatile Ehcache supportCache;", "modifier": "private volatile", "type": "Ehcache", "declarator": "supportCache", "var_name": "supportCache"}, {"original_string": "private volatile ThreadedWorkQueue<Object> refreshWorkQueue;", "modifier": "private volatile", "type": "ThreadedWorkQueue<Object>", "declarator": "refreshWorkQueue", "var_name": "refreshWorkQueue"}], "methods": [{"identifier": "RefreshAheadCache", "parameters": "(Ehcache adaptedCache, RefreshAheadCacheConfiguration refreshConfig)", "modifiers": "public", "return": "", "signature": " RefreshAheadCache(Ehcache adaptedCache, RefreshAheadCacheConfiguration refreshConfig)", "full_signature": "public  RefreshAheadCache(Ehcache adaptedCache, RefreshAheadCacheConfiguration refreshConfig)", "class_method_signature": "RefreshAheadCache.RefreshAheadCache(Ehcache adaptedCache, RefreshAheadCacheConfiguration refreshConfig)", "testcase": false, "constructor": true}, {"identifier": "initSupportCache", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initSupportCache()", "full_signature": "private void initSupportCache()", "class_method_signature": "RefreshAheadCache.initSupportCache()", "testcase": false, "constructor": false}, {"identifier": "initWorkQueue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initWorkQueue()", "full_signature": "private void initWorkQueue()", "class_method_signature": "RefreshAheadCache.initWorkQueue()", "testcase": false, "constructor": false}, {"identifier": "checkForRefresh", "parameters": "(Element elem, long accessTime, long timeToRefreshMillis)", "modifiers": "private", "return": "boolean", "signature": "boolean checkForRefresh(Element elem, long accessTime, long timeToRefreshMillis)", "full_signature": "private boolean checkForRefresh(Element elem, long accessTime, long timeToRefreshMillis)", "class_method_signature": "RefreshAheadCache.checkForRefresh(Element elem, long accessTime, long timeToRefreshMillis)", "testcase": false, "constructor": false}, {"identifier": "possiblyTriggerRefresh", "parameters": "(Element elem, long timeToRefreshMillis)", "modifiers": "private", "return": "void", "signature": "void possiblyTriggerRefresh(Element elem, long timeToRefreshMillis)", "full_signature": "private void possiblyTriggerRefresh(Element elem, long timeToRefreshMillis)", "class_method_signature": "RefreshAheadCache.possiblyTriggerRefresh(Element elem, long timeToRefreshMillis)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "Element", "signature": "Element get(Object key)", "full_signature": "@Override public Element get(Object key)", "class_method_signature": "RefreshAheadCache.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Serializable key)", "modifiers": "@Override public", "return": "Element", "signature": "Element get(Serializable key)", "full_signature": "@Override public Element get(Serializable key)", "class_method_signature": "RefreshAheadCache.get(Serializable key)", "testcase": false, "constructor": false}, {"identifier": "getRefreshSuccessCount", "parameters": "()", "modifiers": "@org.terracotta.statistics.Statistic(name = \"refreshed\", tags = \"refreshahead\") public", "return": "long", "signature": "long getRefreshSuccessCount()", "full_signature": "@org.terracotta.statistics.Statistic(name = \"refreshed\", tags = \"refreshahead\") public long getRefreshSuccessCount()", "class_method_signature": "RefreshAheadCache.getRefreshSuccessCount()", "testcase": false, "constructor": false}, {"identifier": "localDispose", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void localDispose()", "full_signature": "private void localDispose()", "class_method_signature": "RefreshAheadCache.localDispose()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "RefreshAheadCache.getName()", "testcase": false, "constructor": false}, {"identifier": "getOfferCount", "parameters": "()", "modifiers": "@org.terracotta.statistics.Statistic(name = \"offered\", tags = \"refreshahead\") public", "return": "long", "signature": "long getOfferCount()", "full_signature": "@org.terracotta.statistics.Statistic(name = \"offered\", tags = \"refreshahead\") public long getOfferCount()", "class_method_signature": "RefreshAheadCache.getOfferCount()", "testcase": false, "constructor": false}, {"identifier": "getDroppedCount", "parameters": "()", "modifiers": "@org.terracotta.statistics.Statistic(name = \"dropped\", tags = \"refreshahead\") public", "return": "long", "signature": "long getDroppedCount()", "full_signature": "@org.terracotta.statistics.Statistic(name = \"dropped\", tags = \"refreshahead\") public long getDroppedCount()", "class_method_signature": "RefreshAheadCache.getDroppedCount()", "testcase": false, "constructor": false}, {"identifier": "getProcessedCount", "parameters": "()", "modifiers": "@org.terracotta.statistics.Statistic(name = \"processed\", tags = \"refreshahead\") public", "return": "long", "signature": "long getProcessedCount()", "full_signature": "@org.terracotta.statistics.Statistic(name = \"processed\", tags = \"refreshahead\") public long getProcessedCount()", "class_method_signature": "RefreshAheadCache.getProcessedCount()", "testcase": false, "constructor": false}, {"identifier": "getBacklogCount", "parameters": "()", "modifiers": "@org.terracotta.statistics.Statistic(name = \"backlog\", tags = \"refreshahead\") public", "return": "long", "signature": "long getBacklogCount()", "full_signature": "@org.terracotta.statistics.Statistic(name = \"backlog\", tags = \"refreshahead\") public long getBacklogCount()", "class_method_signature": "RefreshAheadCache.getBacklogCount()", "testcase": false, "constructor": false}, {"identifier": "findRefreshedStatistic", "parameters": "(Ehcache cache)", "modifiers": "public static", "return": "Set<ExtendedStatistics.Statistic<Number>>", "signature": "Set<ExtendedStatistics.Statistic<Number>> findRefreshedStatistic(Ehcache cache)", "full_signature": "public static Set<ExtendedStatistics.Statistic<Number>> findRefreshedStatistic(Ehcache cache)", "class_method_signature": "RefreshAheadCache.findRefreshedStatistic(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "findOfferStatistic", "parameters": "(Ehcache cache)", "modifiers": "public static", "return": "Set<ExtendedStatistics.Statistic<Number>>", "signature": "Set<ExtendedStatistics.Statistic<Number>> findOfferStatistic(Ehcache cache)", "full_signature": "public static Set<ExtendedStatistics.Statistic<Number>> findOfferStatistic(Ehcache cache)", "class_method_signature": "RefreshAheadCache.findOfferStatistic(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "findDroppedStatistic", "parameters": "(Ehcache cache)", "modifiers": "public static", "return": "Set<ExtendedStatistics.Statistic<Number>>", "signature": "Set<ExtendedStatistics.Statistic<Number>> findDroppedStatistic(Ehcache cache)", "full_signature": "public static Set<ExtendedStatistics.Statistic<Number>> findDroppedStatistic(Ehcache cache)", "class_method_signature": "RefreshAheadCache.findDroppedStatistic(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "findProcessedStatistic", "parameters": "(Ehcache cache)", "modifiers": "public static", "return": "Set<ExtendedStatistics.Statistic<Number>>", "signature": "Set<ExtendedStatistics.Statistic<Number>> findProcessedStatistic(Ehcache cache)", "full_signature": "public static Set<ExtendedStatistics.Statistic<Number>> findProcessedStatistic(Ehcache cache)", "class_method_signature": "RefreshAheadCache.findProcessedStatistic(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "findBacklogStatistic", "parameters": "(Ehcache cache)", "modifiers": "public static", "return": "Set<ExtendedStatistics.Statistic<Number>>", "signature": "Set<ExtendedStatistics.Statistic<Number>> findBacklogStatistic(Ehcache cache)", "full_signature": "public static Set<ExtendedStatistics.Statistic<Number>> findBacklogStatistic(Ehcache cache)", "class_method_signature": "RefreshAheadCache.findBacklogStatistic(Ehcache cache)", "testcase": false, "constructor": false}], "file": "tags/ehcache-2.10.0-16-pipeline/ehcache-core/src/main/java/net/sf/ehcache/constructs/refreshahead/RefreshAheadCache.java"}, "focal_method": {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "Element", "body": "@Override\n    public Element get(Object key) throws IllegalStateException, CacheException {\n        Element elem = super.get(key);\n        possiblyTriggerRefresh(elem, refreshAheadConfig.getTimeToRefreshMillis());\n        return elem;\n    }", "signature": "Element get(Object key)", "full_signature": "@Override public Element get(Object key)", "class_method_signature": "RefreshAheadCache.get(Object key)", "testcase": false, "constructor": false, "invocations": ["get", "possiblyTriggerRefresh", "getTimeToRefreshMillis"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}