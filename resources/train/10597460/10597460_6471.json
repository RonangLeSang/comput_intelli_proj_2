{"test_class": {"identifier": "ConfigurationFactoryTest", "superclass": "extends AbstractCacheTest", "interfaces": "", "fields": [{"original_string": "private static final int CACHES_IN_TEST_EHCACHE = 13;", "modifier": "private static final", "type": "int", "declarator": "CACHES_IN_TEST_EHCACHE = 13", "var_name": "CACHES_IN_TEST_EHCACHE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationFactoryTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationFactoryTest.class.getName())", "var_name": "LOG"}], "file": "tags/ehcache-1.7.1/core/src/test/java/net/sf/ehcache/config/ConfigurationFactoryTest.java"}, "test_case": {"identifier": "testTerracottaConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTerracottaConfiguration() {\n      File file = new File(TEST_CONFIG_DIR + \"terracotta/ehcache-terracotta.xml\");\n      Configuration configuration = ConfigurationFactory.parseConfiguration(file);\n      ConfigurationHelper configurationHelper = new ConfigurationHelper(manager, configuration);\n\n      assertEquals(\"tc\", configurationHelper.getConfigurationBean().getName());\n      assertEquals(false, configurationHelper.getConfigurationBean().getUpdateCheck());\n      assertEquals(Configuration.Monitoring.AUTODETECT, configurationHelper.getConfigurationBean().getMonitoring());\n\n      //Check default cache\n      Ehcache defaultCache = configurationHelper.createDefaultCache();\n      assertEquals(\"default\", defaultCache.getName());\n      assertEquals(false, defaultCache.getCacheConfiguration().isEternal());\n      assertEquals(5, defaultCache.getCacheConfiguration().getTimeToIdleSeconds());\n      assertEquals(10, defaultCache.getCacheConfiguration().getTimeToLiveSeconds());\n      assertEquals(false, defaultCache.getCacheConfiguration().isOverflowToDisk());\n      assertEquals(10, defaultCache.getCacheConfiguration().getMaxElementsInMemory());\n      assertEquals(0, defaultCache.getCacheConfiguration().getMaxElementsOnDisk());\n      assertEquals(true, defaultCache.getCacheConfiguration().isTerracottaClustered());\n      assertEquals(true, defaultCache.getCacheConfiguration().getTerracottaConfiguration().getCoherentReads());\n\n      //Check caches\n      assertEquals(6, configurationHelper.createCaches().size());\n\n      //  <cache name=\"clustered-1\"\n      //   maxElementsInMemory=\"1000\"\n      //   memoryStoreEvictionPolicy=\"LFU\">\n      //   <terracotta/>\n      //  </cache>\n      Ehcache sampleCache1 = configurationHelper.createCacheFromName(\"clustered-1\");\n      assertEquals(\"clustered-1\", sampleCache1.getName());\n      assertEquals(true, sampleCache1.getCacheConfiguration().isTerracottaClustered());\n      assertEquals(TerracottaConfiguration.ValueMode.SERIALIZATION,\n                  sampleCache1.getCacheConfiguration().getTerracottaConfiguration().getValueMode());\n\n      //  <cache name=\"clustered-2\"\n      //      maxElementsInMemory=\"1000\"\n      //            memoryStoreEvictionPolicy=\"LFU\">\n      //          <terracotta clustered=\"false\"/>\n      //   </cache>\n      Ehcache sampleCache2 = configurationHelper.createCacheFromName(\"clustered-2\");\n      assertEquals(\"clustered-2\", sampleCache2.getName());\n      assertEquals(false, sampleCache2.getCacheConfiguration().isTerracottaClustered());\n      assertEquals(TerracottaConfiguration.ValueMode.SERIALIZATION,\n              sampleCache2.getCacheConfiguration().getTerracottaConfiguration().getValueMode());\n\n      //  <cache name=\"clustered-3\"\n      //   maxElementsInMemory=\"1000\"\n      //   memoryStoreEvictionPolicy=\"LFU\">\n      //   <terracotta valueMode=\"serialization\"/>\n      //  </cache>\n      Ehcache sampleCache3 = configurationHelper.createCacheFromName(\"clustered-3\");\n      assertEquals(\"clustered-3\", sampleCache3.getName());\n      assertEquals(true, sampleCache3.getCacheConfiguration().isTerracottaClustered());\n      assertEquals(TerracottaConfiguration.ValueMode.SERIALIZATION,\n              sampleCache3.getCacheConfiguration().getTerracottaConfiguration().getValueMode());\n\n      //  <cache name=\"clustered-4\"\n      //   maxElementsInMemory=\"1000\"\n      //   memoryStoreEvictionPolicy=\"LFU\">\n      //   <terracotta valueMode=\"identity\"/>\n      //  </cache>\n      Ehcache sampleCache4 = configurationHelper.createCacheFromName(\"clustered-4\");\n      assertEquals(\"clustered-4\", sampleCache4.getName());\n      assertEquals(true, sampleCache4.getCacheConfiguration().isTerracottaClustered());\n      assertEquals(TerracottaConfiguration.ValueMode.IDENTITY,\n              sampleCache4.getCacheConfiguration().getTerracottaConfiguration().getValueMode());\n\n      //  <cache name=\"clustered-5\"\n      //   maxElementsInMemory=\"1000\"\n      //   memoryStoreEvictionPolicy=\"LFU\">\n      //   <terracotta coherentReads=\"false\"/>\n      //  </cache>\n      Ehcache sampleCache5 = configurationHelper.createCacheFromName(\"clustered-5\");\n      assertEquals(\"clustered-5\", sampleCache5.getName());\n      assertEquals(true, sampleCache5.getCacheConfiguration().isTerracottaClustered());\n      assertEquals(false,\n              sampleCache5.getCacheConfiguration().getTerracottaConfiguration().getCoherentReads());\n\n      // <terracottaConfig>\n      //  <url>localhost:9510</url>\n      // </terracottaConfig>\n      TerracottaConfigConfiguration tcConfig = configuration.getTerracottaConfiguration();\n      assertNotNull(tcConfig);\n      assertEquals(\"localhost:9510\", tcConfig.getUrl());\n    }", "signature": "void testTerracottaConfiguration()", "full_signature": "@Test public void testTerracottaConfiguration()", "class_method_signature": "ConfigurationFactoryTest.testTerracottaConfiguration()", "testcase": true, "constructor": false, "invocations": ["parseConfiguration", "assertEquals", "getName", "getConfigurationBean", "assertEquals", "getUpdateCheck", "getConfigurationBean", "assertEquals", "getMonitoring", "getConfigurationBean", "createDefaultCache", "assertEquals", "getName", "assertEquals", "isEternal", "getCacheConfiguration", "assertEquals", "getTimeToIdleSeconds", "getCacheConfiguration", "assertEquals", "getTimeToLiveSeconds", "getCacheConfiguration", "assertEquals", "isOverflowToDisk", "getCacheConfiguration", "assertEquals", "getMaxElementsInMemory", "getCacheConfiguration", "assertEquals", "getMaxElementsOnDisk", "getCacheConfiguration", "assertEquals", "isTerracottaClustered", "getCacheConfiguration", "assertEquals", "getCoherentReads", "getTerracottaConfiguration", "getCacheConfiguration", "assertEquals", "size", "createCaches", "createCacheFromName", "assertEquals", "getName", "assertEquals", "isTerracottaClustered", "getCacheConfiguration", "assertEquals", "getValueMode", "getTerracottaConfiguration", "getCacheConfiguration", "createCacheFromName", "assertEquals", "getName", "assertEquals", "isTerracottaClustered", "getCacheConfiguration", "assertEquals", "getValueMode", "getTerracottaConfiguration", "getCacheConfiguration", "createCacheFromName", "assertEquals", "getName", "assertEquals", "isTerracottaClustered", "getCacheConfiguration", "assertEquals", "getValueMode", "getTerracottaConfiguration", "getCacheConfiguration", "createCacheFromName", "assertEquals", "getName", "assertEquals", "isTerracottaClustered", "getCacheConfiguration", "assertEquals", "getValueMode", "getTerracottaConfiguration", "getCacheConfiguration", "createCacheFromName", "assertEquals", "getName", "assertEquals", "isTerracottaClustered", "getCacheConfiguration", "assertEquals", "getCoherentReads", "getTerracottaConfiguration", "getCacheConfiguration", "getTerracottaConfiguration", "assertNotNull", "assertEquals", "getUrl"]}, "focal_class": {"identifier": "ConfigurationFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationFactory.class.getName())", "var_name": "LOG"}, {"original_string": "private static final String DEFAULT_CLASSPATH_CONFIGURATION_FILE = \"/ehcache.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CLASSPATH_CONFIGURATION_FILE = \"/ehcache.xml\"", "var_name": "DEFAULT_CLASSPATH_CONFIGURATION_FILE"}, {"original_string": "private static final String FAILSAFE_CLASSPATH_CONFIGURATION_FILE = \"/ehcache-failsafe.xml\";", "modifier": "private static final", "type": "String", "declarator": "FAILSAFE_CLASSPATH_CONFIGURATION_FILE = \"/ehcache-failsafe.xml\"", "var_name": "FAILSAFE_CLASSPATH_CONFIGURATION_FILE"}], "methods": [{"identifier": "ConfigurationFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConfigurationFactory()", "full_signature": "private  ConfigurationFactory()", "class_method_signature": "ConfigurationFactory.ConfigurationFactory()", "testcase": false, "constructor": true}, {"identifier": "parseConfiguration", "parameters": "(final File file)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final File file)", "full_signature": "public static Configuration parseConfiguration(final File file)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final File file)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final URL url)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final URL url)", "full_signature": "public static Configuration parseConfiguration(final URL url)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final URL url)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "()", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration()", "full_signature": "public static Configuration parseConfiguration()", "class_method_signature": "ConfigurationFactory.parseConfiguration()", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final InputStream inputStream)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final InputStream inputStream)", "full_signature": "public static Configuration parseConfiguration(final InputStream inputStream)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "translateSystemProperties", "parameters": "(InputStream inputStream)", "modifiers": "private static", "return": "InputStream", "signature": "InputStream translateSystemProperties(InputStream inputStream)", "full_signature": "private static InputStream translateSystemProperties(InputStream inputStream)", "class_method_signature": "ConfigurationFactory.translateSystemProperties(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "extractPropertyTokens", "parameters": "(String sourceDocument)", "modifiers": "static", "return": "Set", "signature": "Set extractPropertyTokens(String sourceDocument)", "full_signature": "static Set extractPropertyTokens(String sourceDocument)", "class_method_signature": "ConfigurationFactory.extractPropertyTokens(String sourceDocument)", "testcase": false, "constructor": false}], "file": "tags/ehcache-1.7.1/core/src/main/java/net/sf/ehcache/config/ConfigurationFactory.java"}, "focal_method": {"identifier": "parseConfiguration", "parameters": "(final File file)", "modifiers": "public static", "return": "Configuration", "body": "public static Configuration parseConfiguration(final File file) throws CacheException {\n        if (file == null) {\n            throw new CacheException(\"Attempt to configure ehcache from null file.\");\n        }\n\n        LOG.debug(\"Configuring ehcache from file: {}\", file);\n        Configuration configuration = null;\n        InputStream input = null;\n        try {\n            input = new BufferedInputStream(new FileInputStream(file));\n            configuration = parseConfiguration(input);\n        } catch (Exception e) {\n            throw new CacheException(\"Error configuring from \" + file + \". Initial cause was \" + e.getMessage(), e);\n        } finally {\n            try {\n                if (input != null) {\n                    input.close();\n                }\n            } catch (IOException e) {\n                LOG.error(\"IOException while closing configuration input stream. Error was \" + e.getMessage());\n            }\n        }\n        return configuration;\n    }", "signature": "Configuration parseConfiguration(final File file)", "full_signature": "public static Configuration parseConfiguration(final File file)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final File file)", "testcase": false, "constructor": false, "invocations": ["debug", "parseConfiguration", "getMessage", "close", "error", "getMessage"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}