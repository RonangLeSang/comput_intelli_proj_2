{"test_class": {"identifier": "CacheTest", "superclass": "extends AbstractCacheTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CacheTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CacheTest.class.getName())", "var_name": "LOG"}], "file": "branches/ehcache-core-2.x-groups/src/test/java/net/sf/ehcache/CacheTest.java"}, "test_case": {"identifier": "testInitialiseFailures", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialiseFailures() {\n        try {\n            Cache cache = new Cache(\"testInitialiseFailures2\", 1, false, false, 5, 1);\n            cache.initialise();\n\n            cache.initialise();\n            fail(\"Should have thrown IllegalArgumentException\");\n        } catch (IllegalStateException e) {\n            //noop\n        }\n    }", "signature": "void testInitialiseFailures()", "full_signature": "@Test public void testInitialiseFailures()", "class_method_signature": "CacheTest.testInitialiseFailures()", "testcase": true, "constructor": false, "invocations": ["initialise", "initialise", "fail"]}, "focal_class": {"identifier": "Cache", "superclass": "", "interfaces": "implements Ehcache, StoreListener", "fields": [{"original_string": "public static final String DEFAULT_CACHE_NAME = \"default\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CACHE_NAME = \"default\"", "var_name": "DEFAULT_CACHE_NAME"}, {"original_string": "public static final String NET_SF_EHCACHE_DISABLED = \"net.sf.ehcache.disabled\";", "modifier": "public static final", "type": "String", "declarator": "NET_SF_EHCACHE_DISABLED = \"net.sf.ehcache.disabled\"", "var_name": "NET_SF_EHCACHE_DISABLED"}, {"original_string": "public static final String NET_SF_EHCACHE_USE_CLASSIC_LRU = \"net.sf.ehcache.use.classic.lru\";", "modifier": "public static final", "type": "String", "declarator": "NET_SF_EHCACHE_USE_CLASSIC_LRU = \"net.sf.ehcache.use.classic.lru\"", "var_name": "NET_SF_EHCACHE_USE_CLASSIC_LRU"}, {"original_string": "public static final long DEFAULT_EXPIRY_THREAD_INTERVAL_SECONDS = CacheConfiguration.DEFAULT_EXPIRY_THREAD_INTERVAL_SECONDS;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_EXPIRY_THREAD_INTERVAL_SECONDS = CacheConfiguration.DEFAULT_EXPIRY_THREAD_INTERVAL_SECONDS", "var_name": "DEFAULT_EXPIRY_THREAD_INTERVAL_SECONDS"}, {"original_string": "private static final String OFF_HEAP_STORE_CLASSNAME = \"net.sf.ehcache.store.offheap.OffHeapStore\";", "modifier": "private static final", "type": "String", "declarator": "OFF_HEAP_STORE_CLASSNAME = \"net.sf.ehcache.store.offheap.OffHeapStore\"", "var_name": "OFF_HEAP_STORE_CLASSNAME"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Cache.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Cache.class.getName())", "var_name": "LOG"}, {"original_string": "private static InetAddress localhost;", "modifier": "private static", "type": "InetAddress", "declarator": "localhost", "var_name": "localhost"}, {"original_string": "private static final int BACK_OFF_TIME_MILLIS = 50;", "modifier": "private static final", "type": "int", "declarator": "BACK_OFF_TIME_MILLIS = 50", "var_name": "BACK_OFF_TIME_MILLIS"}, {"original_string": "private static final int EXECUTOR_KEEP_ALIVE_TIME = 60000;", "modifier": "private static final", "type": "int", "declarator": "EXECUTOR_KEEP_ALIVE_TIME = 60000", "var_name": "EXECUTOR_KEEP_ALIVE_TIME"}, {"original_string": "private static final int EXECUTOR_MAXIMUM_POOL_SIZE = Math.min(10, Runtime.getRuntime().availableProcessors());", "modifier": "private static final", "type": "int", "declarator": "EXECUTOR_MAXIMUM_POOL_SIZE = Math.min(10, Runtime.getRuntime().availableProcessors())", "var_name": "EXECUTOR_MAXIMUM_POOL_SIZE"}, {"original_string": "private static final int EXECUTOR_CORE_POOL_SIZE = 1;", "modifier": "private static final", "type": "int", "declarator": "EXECUTOR_CORE_POOL_SIZE = 1", "var_name": "EXECUTOR_CORE_POOL_SIZE"}, {"original_string": "private volatile boolean disabled = Boolean.getBoolean(NET_SF_EHCACHE_DISABLED);", "modifier": "private volatile", "type": "boolean", "declarator": "disabled = Boolean.getBoolean(NET_SF_EHCACHE_DISABLED)", "var_name": "disabled"}, {"original_string": "private final boolean useClassicLru = Boolean.getBoolean(NET_SF_EHCACHE_USE_CLASSIC_LRU);", "modifier": "private final", "type": "boolean", "declarator": "useClassicLru = Boolean.getBoolean(NET_SF_EHCACHE_USE_CLASSIC_LRU)", "var_name": "useClassicLru"}, {"original_string": "private volatile String diskStorePath;", "modifier": "private volatile", "type": "String", "declarator": "diskStorePath", "var_name": "diskStorePath"}, {"original_string": "private volatile CacheStatus status = new CacheStatus();", "modifier": "private volatile", "type": "CacheStatus", "declarator": "status = new CacheStatus()", "var_name": "status"}, {"original_string": "private volatile CacheConfiguration configuration;", "modifier": "private volatile", "type": "CacheConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private volatile Store compoundStore;", "modifier": "private volatile", "type": "Store", "declarator": "compoundStore", "var_name": "compoundStore"}, {"original_string": "private volatile CacheLockProvider lockProvider;", "modifier": "private volatile", "type": "CacheLockProvider", "declarator": "lockProvider", "var_name": "lockProvider"}, {"original_string": "private volatile RegisteredEventListeners registeredEventListeners;", "modifier": "private volatile", "type": "RegisteredEventListeners", "declarator": "registeredEventListeners", "var_name": "registeredEventListeners"}, {"original_string": "private volatile List<CacheExtension> registeredCacheExtensions;", "modifier": "private volatile", "type": "List<CacheExtension>", "declarator": "registeredCacheExtensions", "var_name": "registeredCacheExtensions"}, {"original_string": "private volatile String guid;", "modifier": "private volatile", "type": "String", "declarator": "guid", "var_name": "guid"}, {"original_string": "private volatile CacheManager cacheManager;", "modifier": "private volatile", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private volatile BootstrapCacheLoader bootstrapCacheLoader;", "modifier": "private volatile", "type": "BootstrapCacheLoader", "declarator": "bootstrapCacheLoader", "var_name": "bootstrapCacheLoader"}, {"original_string": "private volatile CacheExceptionHandler cacheExceptionHandler;", "modifier": "private volatile", "type": "CacheExceptionHandler", "declarator": "cacheExceptionHandler", "var_name": "cacheExceptionHandler"}, {"original_string": "private volatile List<CacheLoader> registeredCacheLoaders;", "modifier": "private volatile", "type": "List<CacheLoader>", "declarator": "registeredCacheLoaders", "var_name": "registeredCacheLoaders"}, {"original_string": "private volatile CacheWriterManager cacheWriterManager;", "modifier": "private volatile", "type": "CacheWriterManager", "declarator": "cacheWriterManager", "var_name": "cacheWriterManager"}, {"original_string": "private final AtomicBoolean cacheWriterManagerInitFlag = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "cacheWriterManagerInitFlag = new AtomicBoolean(false)", "var_name": "cacheWriterManagerInitFlag"}, {"original_string": "private final ReentrantLock cacheWriterManagerInitLock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "cacheWriterManagerInitLock = new ReentrantLock()", "var_name": "cacheWriterManagerInitLock"}, {"original_string": "private volatile CacheWriter registeredCacheWriter;", "modifier": "private volatile", "type": "CacheWriter", "declarator": "registeredCacheWriter", "var_name": "registeredCacheWriter"}, {"original_string": "private volatile ExecutorService executorService;", "modifier": "private volatile", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private volatile LiveCacheStatisticsWrapper liveCacheStatisticsData;", "modifier": "private volatile", "type": "LiveCacheStatisticsWrapper", "declarator": "liveCacheStatisticsData", "var_name": "liveCacheStatisticsData"}, {"original_string": "private volatile SampledCacheStatisticsWrapper sampledCacheStatistics;", "modifier": "private volatile", "type": "SampledCacheStatisticsWrapper", "declarator": "sampledCacheStatistics", "var_name": "sampledCacheStatistics"}, {"original_string": "private volatile TransactionManagerLookup transactionManagerLookup;", "modifier": "private volatile", "type": "TransactionManagerLookup", "declarator": "transactionManagerLookup", "var_name": "transactionManagerLookup"}, {"original_string": "private volatile boolean allowDisable = true;", "modifier": "private volatile", "type": "boolean", "declarator": "allowDisable = true", "var_name": "allowDisable"}, {"original_string": "private final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);", "modifier": "private final", "type": "PropertyChangeSupport", "declarator": "propertyChangeSupport = new PropertyChangeSupport(this)", "var_name": "propertyChangeSupport"}, {"original_string": "private final String masterGroupKey = GroupElement.MASTER_GROUP_KEY;", "modifier": "private final", "type": "String", "declarator": "masterGroupKey = GroupElement.MASTER_GROUP_KEY", "var_name": "masterGroupKey"}, {"original_string": "private volatile ElementValueComparator elementValueComparator;", "modifier": "private volatile", "type": "ElementValueComparator", "declarator": "elementValueComparator", "var_name": "elementValueComparator"}], "methods": [{"identifier": "Cache", "parameters": "(CacheConfiguration cacheConfiguration)", "modifiers": "public", "return": "", "signature": " Cache(CacheConfiguration cacheConfiguration)", "full_signature": "public  Cache(CacheConfiguration cacheConfiguration)", "class_method_signature": "Cache.Cache(CacheConfiguration cacheConfiguration)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(CacheConfiguration cacheConfiguration,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader)", "modifiers": "public", "return": "", "signature": " Cache(CacheConfiguration cacheConfiguration,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader)", "full_signature": "public  Cache(CacheConfiguration cacheConfiguration,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader)", "class_method_signature": "Cache.Cache(CacheConfiguration cacheConfiguration,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(String name, int maxElementsInMemory, boolean overflowToDisk,\n                 boolean eternal, long timeToLiveSeconds, long timeToIdleSeconds)", "modifiers": "public", "return": "", "signature": " Cache(String name, int maxElementsInMemory, boolean overflowToDisk,\n                 boolean eternal, long timeToLiveSeconds, long timeToIdleSeconds)", "full_signature": "public  Cache(String name, int maxElementsInMemory, boolean overflowToDisk,\n                 boolean eternal, long timeToLiveSeconds, long timeToIdleSeconds)", "class_method_signature": "Cache.Cache(String name, int maxElementsInMemory, boolean overflowToDisk,\n                 boolean eternal, long timeToLiveSeconds, long timeToIdleSeconds)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(String name,\n                 int maxElementsInMemory,\n                 boolean overflowToDisk,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds)", "modifiers": "public", "return": "", "signature": " Cache(String name,\n                 int maxElementsInMemory,\n                 boolean overflowToDisk,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds)", "full_signature": "public  Cache(String name,\n                 int maxElementsInMemory,\n                 boolean overflowToDisk,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds)", "class_method_signature": "Cache.Cache(String name,\n                 int maxElementsInMemory,\n                 boolean overflowToDisk,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners)", "modifiers": "public", "return": "", "signature": " Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners)", "full_signature": "public  Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners)", "class_method_signature": "Cache.Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader)", "modifiers": "public", "return": "", "signature": " Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader)", "full_signature": "public  Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader)", "class_method_signature": "Cache.Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk)", "modifiers": "public", "return": "", "signature": " Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk)", "full_signature": "public  Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk)", "class_method_signature": "Cache.Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk,\n                 int diskSpoolBufferSizeMB)", "modifiers": "public", "return": "", "signature": " Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk,\n                 int diskSpoolBufferSizeMB)", "full_signature": "public  Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk,\n                 int diskSpoolBufferSizeMB)", "class_method_signature": "Cache.Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk,\n                 int diskSpoolBufferSizeMB)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk,\n                 int diskSpoolBufferSizeMB,\n                 boolean clearOnFlush)", "modifiers": "public", "return": "", "signature": " Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk,\n                 int diskSpoolBufferSizeMB,\n                 boolean clearOnFlush)", "full_signature": "public  Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk,\n                 int diskSpoolBufferSizeMB,\n                 boolean clearOnFlush)", "class_method_signature": "Cache.Cache(String name,\n                 int maxElementsInMemory,\n                 MemoryStoreEvictionPolicy memoryStoreEvictionPolicy,\n                 boolean overflowToDisk,\n                 String diskStorePath,\n                 boolean eternal,\n                 long timeToLiveSeconds,\n                 long timeToIdleSeconds,\n                 boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds,\n                 RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader,\n                 int maxElementsOnDisk,\n                 int diskSpoolBufferSizeMB,\n                 boolean clearOnFlush)", "testcase": false, "constructor": true}, {"identifier": "Cache", "parameters": "(String name, int maxElementsInMemory, MemoryStoreEvictionPolicy memoryStoreEvictionPolicy, boolean overflowToDisk,\n                 String diskStorePath, boolean eternal, long timeToLiveSeconds, long timeToIdleSeconds, boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds, RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader, int maxElementsOnDisk, int diskSpoolBufferSizeMB, boolean clearOnFlush,\n                 boolean isTerracottaClustered, String terracottaValueMode, boolean terracottaCoherentReads)", "modifiers": "public", "return": "", "signature": " Cache(String name, int maxElementsInMemory, MemoryStoreEvictionPolicy memoryStoreEvictionPolicy, boolean overflowToDisk,\n                 String diskStorePath, boolean eternal, long timeToLiveSeconds, long timeToIdleSeconds, boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds, RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader, int maxElementsOnDisk, int diskSpoolBufferSizeMB, boolean clearOnFlush,\n                 boolean isTerracottaClustered, String terracottaValueMode, boolean terracottaCoherentReads)", "full_signature": "public  Cache(String name, int maxElementsInMemory, MemoryStoreEvictionPolicy memoryStoreEvictionPolicy, boolean overflowToDisk,\n                 String diskStorePath, boolean eternal, long timeToLiveSeconds, long timeToIdleSeconds, boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds, RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader, int maxElementsOnDisk, int diskSpoolBufferSizeMB, boolean clearOnFlush,\n                 boolean isTerracottaClustered, String terracottaValueMode, boolean terracottaCoherentReads)", "class_method_signature": "Cache.Cache(String name, int maxElementsInMemory, MemoryStoreEvictionPolicy memoryStoreEvictionPolicy, boolean overflowToDisk,\n                 String diskStorePath, boolean eternal, long timeToLiveSeconds, long timeToIdleSeconds, boolean diskPersistent,\n                 long diskExpiryThreadIntervalSeconds, RegisteredEventListeners registeredEventListeners,\n                 BootstrapCacheLoader bootstrapCacheLoader, int maxElementsOnDisk, int diskSpoolBufferSizeMB, boolean clearOnFlush,\n                 boolean isTerracottaClustered, String terracottaValueMode, boolean terracottaCoherentReads)", "testcase": false, "constructor": true}, {"identifier": "registerCacheListeners", "parameters": "(CacheConfiguration cacheConfiguration,\n                                                 RegisteredEventListeners registeredEventListeners)", "modifiers": "private static", "return": "void", "signature": "void registerCacheListeners(CacheConfiguration cacheConfiguration,\n                                                 RegisteredEventListeners registeredEventListeners)", "full_signature": "private static void registerCacheListeners(CacheConfiguration cacheConfiguration,\n                                                 RegisteredEventListeners registeredEventListeners)", "class_method_signature": "Cache.registerCacheListeners(CacheConfiguration cacheConfiguration,\n                                                 RegisteredEventListeners registeredEventListeners)", "testcase": false, "constructor": false}, {"identifier": "registerCacheExtensions", "parameters": "(CacheConfiguration cacheConfiguration, Ehcache cache)", "modifiers": "private static", "return": "void", "signature": "void registerCacheExtensions(CacheConfiguration cacheConfiguration, Ehcache cache)", "full_signature": "private static void registerCacheExtensions(CacheConfiguration cacheConfiguration, Ehcache cache)", "class_method_signature": "Cache.registerCacheExtensions(CacheConfiguration cacheConfiguration, Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "registerCacheLoaders", "parameters": "(CacheConfiguration cacheConfiguration, Ehcache cache)", "modifiers": "private static", "return": "void", "signature": "void registerCacheLoaders(CacheConfiguration cacheConfiguration, Ehcache cache)", "full_signature": "private static void registerCacheLoaders(CacheConfiguration cacheConfiguration, Ehcache cache)", "class_method_signature": "Cache.registerCacheLoaders(CacheConfiguration cacheConfiguration, Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "registerCacheWriter", "parameters": "(CacheConfiguration cacheConfiguration, Ehcache cache)", "modifiers": "private static", "return": "void", "signature": "void registerCacheWriter(CacheConfiguration cacheConfiguration, Ehcache cache)", "full_signature": "private static void registerCacheWriter(CacheConfiguration cacheConfiguration, Ehcache cache)", "class_method_signature": "Cache.registerCacheWriter(CacheConfiguration cacheConfiguration, Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "createCacheEventListener", "parameters": "(\n            CacheConfiguration.CacheEventListenerFactoryConfiguration factoryConfiguration)", "modifiers": "private static", "return": "CacheEventListener", "signature": "CacheEventListener createCacheEventListener(\n            CacheConfiguration.CacheEventListenerFactoryConfiguration factoryConfiguration)", "full_signature": "private static CacheEventListener createCacheEventListener(\n            CacheConfiguration.CacheEventListenerFactoryConfiguration factoryConfiguration)", "class_method_signature": "Cache.createCacheEventListener(\n            CacheConfiguration.CacheEventListenerFactoryConfiguration factoryConfiguration)", "testcase": false, "constructor": false}, {"identifier": "createCacheExtension", "parameters": "(\n            CacheConfiguration.CacheExtensionFactoryConfiguration factoryConfiguration, Ehcache cache)", "modifiers": "private static", "return": "CacheExtension", "signature": "CacheExtension createCacheExtension(\n            CacheConfiguration.CacheExtensionFactoryConfiguration factoryConfiguration, Ehcache cache)", "full_signature": "private static CacheExtension createCacheExtension(\n            CacheConfiguration.CacheExtensionFactoryConfiguration factoryConfiguration, Ehcache cache)", "class_method_signature": "Cache.createCacheExtension(\n            CacheConfiguration.CacheExtensionFactoryConfiguration factoryConfiguration, Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "createCacheLoader", "parameters": "(\n            CacheConfiguration.CacheLoaderFactoryConfiguration factoryConfiguration, Ehcache cache)", "modifiers": "private static", "return": "CacheLoader", "signature": "CacheLoader createCacheLoader(\n            CacheConfiguration.CacheLoaderFactoryConfiguration factoryConfiguration, Ehcache cache)", "full_signature": "private static CacheLoader createCacheLoader(\n            CacheConfiguration.CacheLoaderFactoryConfiguration factoryConfiguration, Ehcache cache)", "class_method_signature": "Cache.createCacheLoader(\n            CacheConfiguration.CacheLoaderFactoryConfiguration factoryConfiguration, Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "createCacheWriter", "parameters": "(CacheWriterConfiguration config, Ehcache cache)", "modifiers": "private static", "return": "CacheWriter", "signature": "CacheWriter createCacheWriter(CacheWriterConfiguration config, Ehcache cache)", "full_signature": "private static CacheWriter createCacheWriter(CacheWriterConfiguration config, Ehcache cache)", "class_method_signature": "Cache.createCacheWriter(CacheWriterConfiguration config, Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "createBootstrapCacheLoader", "parameters": "(\n            CacheConfiguration.BootstrapCacheLoaderFactoryConfiguration factoryConfiguration)", "modifiers": "private static final", "return": "BootstrapCacheLoader", "signature": "BootstrapCacheLoader createBootstrapCacheLoader(\n            CacheConfiguration.BootstrapCacheLoaderFactoryConfiguration factoryConfiguration)", "full_signature": "private static final BootstrapCacheLoader createBootstrapCacheLoader(\n            CacheConfiguration.BootstrapCacheLoaderFactoryConfiguration factoryConfiguration)", "class_method_signature": "Cache.createBootstrapCacheLoader(\n            CacheConfiguration.BootstrapCacheLoaderFactoryConfiguration factoryConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getTransactionManagerLookup", "parameters": "()", "modifiers": "public", "return": "TransactionManagerLookup", "signature": "TransactionManagerLookup getTransactionManagerLookup()", "full_signature": "public TransactionManagerLookup getTransactionManagerLookup()", "class_method_signature": "Cache.getTransactionManagerLookup()", "testcase": false, "constructor": false}, {"identifier": "setTransactionManagerLookup", "parameters": "(TransactionManagerLookup lookup)", "modifiers": "public", "return": "void", "signature": "void setTransactionManagerLookup(TransactionManagerLookup lookup)", "full_signature": "public void setTransactionManagerLookup(TransactionManagerLookup lookup)", "class_method_signature": "Cache.setTransactionManagerLookup(TransactionManagerLookup lookup)", "testcase": false, "constructor": false}, {"identifier": "initialise", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initialise()", "full_signature": "public void initialise()", "class_method_signature": "Cache.initialise()", "testcase": false, "constructor": false}, {"identifier": "getCacheCluster", "parameters": "()", "modifiers": "private", "return": "CacheCluster", "signature": "CacheCluster getCacheCluster()", "full_signature": "private CacheCluster getCacheCluster()", "class_method_signature": "Cache.getCacheCluster()", "testcase": false, "constructor": false}, {"identifier": "initialiseCacheWriterManager", "parameters": "(boolean imperative)", "modifiers": "private", "return": "void", "signature": "void initialiseCacheWriterManager(boolean imperative)", "full_signature": "private void initialiseCacheWriterManager(boolean imperative)", "class_method_signature": "Cache.initialiseCacheWriterManager(boolean imperative)", "testcase": false, "constructor": false}, {"identifier": "getWriterManager", "parameters": "()", "modifiers": "public", "return": "CacheWriterManager", "signature": "CacheWriterManager getWriterManager()", "full_signature": "public CacheWriterManager getWriterManager()", "class_method_signature": "Cache.getWriterManager()", "testcase": false, "constructor": false}, {"identifier": "createDiskStore", "parameters": "()", "modifiers": "protected", "return": "DiskStore", "signature": "DiskStore createDiskStore()", "full_signature": "protected DiskStore createDiskStore()", "class_method_signature": "Cache.createDiskStore()", "testcase": false, "constructor": false}, {"identifier": "isDiskStore", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isDiskStore()", "full_signature": "protected boolean isDiskStore()", "class_method_signature": "Cache.isDiskStore()", "testcase": false, "constructor": false}, {"identifier": "isTerracottaClustered", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTerracottaClustered()", "full_signature": "public boolean isTerracottaClustered()", "class_method_signature": "Cache.isTerracottaClustered()", "testcase": false, "constructor": false}, {"identifier": "bootstrap", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void bootstrap()", "full_signature": "public void bootstrap()", "class_method_signature": "Cache.bootstrap()", "testcase": false, "constructor": false}, {"identifier": "changeStatus", "parameters": "(Status status)", "modifiers": "private", "return": "void", "signature": "void changeStatus(Status status)", "full_signature": "private void changeStatus(Status status)", "class_method_signature": "Cache.changeStatus(Status status)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Element element)", "modifiers": "public final", "return": "void", "signature": "void put(Element element)", "full_signature": "public final void put(Element element)", "class_method_signature": "Cache.put(Element element)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Element element, boolean doNotNotifyCacheReplicators)", "modifiers": "public final", "return": "void", "signature": "void put(Element element, boolean doNotNotifyCacheReplicators)", "full_signature": "public final void put(Element element, boolean doNotNotifyCacheReplicators)", "class_method_signature": "Cache.put(Element element, boolean doNotNotifyCacheReplicators)", "testcase": false, "constructor": false}, {"identifier": "putWithWriter", "parameters": "(Element element)", "modifiers": "public", "return": "void", "signature": "void putWithWriter(Element element)", "full_signature": "public void putWithWriter(Element element)", "class_method_signature": "Cache.putWithWriter(Element element)", "testcase": false, "constructor": false}, {"identifier": "putInternal", "parameters": "(Element element, boolean doNotNotifyCacheReplicators, boolean useCacheWriter)", "modifiers": "private", "return": "void", "signature": "void putInternal(Element element, boolean doNotNotifyCacheReplicators, boolean useCacheWriter)", "full_signature": "private void putInternal(Element element, boolean doNotNotifyCacheReplicators, boolean useCacheWriter)", "class_method_signature": "Cache.putInternal(Element element, boolean doNotNotifyCacheReplicators, boolean useCacheWriter)", "testcase": false, "constructor": false}, {"identifier": "notifyPutInternalListeners", "parameters": "(Element element, boolean doNotNotifyCacheReplicators, boolean elementExists)", "modifiers": "private", "return": "void", "signature": "void notifyPutInternalListeners(Element element, boolean doNotNotifyCacheReplicators, boolean elementExists)", "full_signature": "private void notifyPutInternalListeners(Element element, boolean doNotNotifyCacheReplicators, boolean elementExists)", "class_method_signature": "Cache.notifyPutInternalListeners(Element element, boolean doNotNotifyCacheReplicators, boolean elementExists)", "testcase": false, "constructor": false}, {"identifier": "backOffIfDiskSpoolFull", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void backOffIfDiskSpoolFull()", "full_signature": "private void backOffIfDiskSpoolFull()", "class_method_signature": "Cache.backOffIfDiskSpoolFull()", "testcase": false, "constructor": false}, {"identifier": "applyDefaultsToElementWithoutLifespanSet", "parameters": "(Element element)", "modifiers": "private", "return": "void", "signature": "void applyDefaultsToElementWithoutLifespanSet(Element element)", "full_signature": "private void applyDefaultsToElementWithoutLifespanSet(Element element)", "class_method_signature": "Cache.applyDefaultsToElementWithoutLifespanSet(Element element)", "testcase": false, "constructor": false}, {"identifier": "putQuiet", "parameters": "(Element element)", "modifiers": "public final", "return": "void", "signature": "void putQuiet(Element element)", "full_signature": "public final void putQuiet(Element element)", "class_method_signature": "Cache.putQuiet(Element element)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Serializable key)", "modifiers": "public final", "return": "Element", "signature": "Element get(Serializable key)", "full_signature": "public final Element get(Serializable key)", "class_method_signature": "Cache.get(Serializable key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "public final", "return": "Element", "signature": "Element get(Object key)", "full_signature": "public final Element get(Object key)", "class_method_signature": "Cache.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "getWithLoader", "parameters": "(Object key, CacheLoader loader, Object loaderArgument)", "modifiers": "public", "return": "Element", "signature": "Element getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "full_signature": "public Element getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "class_method_signature": "Cache.getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(final Object key)", "modifiers": "public", "return": "void", "signature": "void load(final Object key)", "full_signature": "public void load(final Object key)", "class_method_signature": "Cache.load(final Object key)", "testcase": false, "constructor": false}, {"identifier": "getAllWithLoader", "parameters": "(Collection keys, Object loaderArgument)", "modifiers": "public", "return": "Map", "signature": "Map getAllWithLoader(Collection keys, Object loaderArgument)", "full_signature": "public Map getAllWithLoader(Collection keys, Object loaderArgument)", "class_method_signature": "Cache.getAllWithLoader(Collection keys, Object loaderArgument)", "testcase": false, "constructor": false}, {"identifier": "loadAll", "parameters": "(final Collection keys, final Object argument)", "modifiers": "public", "return": "void", "signature": "void loadAll(final Collection keys, final Object argument)", "full_signature": "public void loadAll(final Collection keys, final Object argument)", "class_method_signature": "Cache.loadAll(final Collection keys, final Object argument)", "testcase": false, "constructor": false}, {"identifier": "getQuiet", "parameters": "(Serializable key)", "modifiers": "public final", "return": "Element", "signature": "Element getQuiet(Serializable key)", "full_signature": "public final Element getQuiet(Serializable key)", "class_method_signature": "Cache.getQuiet(Serializable key)", "testcase": false, "constructor": false}, {"identifier": "getQuiet", "parameters": "(Object key)", "modifiers": "public final", "return": "Element", "signature": "Element getQuiet(Object key)", "full_signature": "public final Element getQuiet(Object key)", "class_method_signature": "Cache.getQuiet(Object key)", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "public final", "return": "List", "signature": "List getKeys()", "full_signature": "public final List getKeys()", "class_method_signature": "Cache.getKeys()", "testcase": false, "constructor": false}, {"identifier": "getKeysWithExpiryCheck", "parameters": "()", "modifiers": "public final", "return": "List", "signature": "List getKeysWithExpiryCheck()", "full_signature": "public final List getKeysWithExpiryCheck()", "class_method_signature": "Cache.getKeysWithExpiryCheck()", "testcase": false, "constructor": false}, {"identifier": "getKeysNoDuplicateCheck", "parameters": "()", "modifiers": "public final", "return": "List", "signature": "List getKeysNoDuplicateCheck()", "full_signature": "public final List getKeysNoDuplicateCheck()", "class_method_signature": "Cache.getKeysNoDuplicateCheck()", "testcase": false, "constructor": false}, {"identifier": "searchInStoreWithStats", "parameters": "(Object key)", "modifiers": "private", "return": "Element", "signature": "Element searchInStoreWithStats(Object key)", "full_signature": "private Element searchInStoreWithStats(Object key)", "class_method_signature": "Cache.searchInStoreWithStats(Object key)", "testcase": false, "constructor": false}, {"identifier": "searchInStoreWithoutStats", "parameters": "(Object key, boolean quiet, boolean notifyListeners)", "modifiers": "private", "return": "Element", "signature": "Element searchInStoreWithoutStats(Object key, boolean quiet, boolean notifyListeners)", "full_signature": "private Element searchInStoreWithoutStats(Object key, boolean quiet, boolean notifyListeners)", "class_method_signature": "Cache.searchInStoreWithoutStats(Object key, boolean quiet, boolean notifyListeners)", "testcase": false, "constructor": false}, {"identifier": "tryRemoveImmediately", "parameters": "(final Object key, final boolean notifyListeners)", "modifiers": "private", "return": "void", "signature": "void tryRemoveImmediately(final Object key, final boolean notifyListeners)", "full_signature": "private void tryRemoveImmediately(final Object key, final boolean notifyListeners)", "class_method_signature": "Cache.tryRemoveImmediately(final Object key, final boolean notifyListeners)", "testcase": false, "constructor": false}, {"identifier": "skipUpdateAccessStatistics", "parameters": "(Element element)", "modifiers": "private", "return": "boolean", "signature": "boolean skipUpdateAccessStatistics(Element element)", "full_signature": "private boolean skipUpdateAccessStatistics(Element element)", "class_method_signature": "Cache.skipUpdateAccessStatistics(Element element)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Serializable key)", "modifiers": "public final", "return": "boolean", "signature": "boolean remove(Serializable key)", "full_signature": "public final boolean remove(Serializable key)", "class_method_signature": "Cache.remove(Serializable key)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "public final", "return": "boolean", "signature": "boolean remove(Object key)", "full_signature": "public final boolean remove(Object key)", "class_method_signature": "Cache.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Serializable key, boolean doNotNotifyCacheReplicators)", "modifiers": "public final", "return": "boolean", "signature": "boolean remove(Serializable key, boolean doNotNotifyCacheReplicators)", "full_signature": "public final boolean remove(Serializable key, boolean doNotNotifyCacheReplicators)", "class_method_signature": "Cache.remove(Serializable key, boolean doNotNotifyCacheReplicators)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key, boolean doNotNotifyCacheReplicators)", "modifiers": "public final", "return": "boolean", "signature": "boolean remove(Object key, boolean doNotNotifyCacheReplicators)", "full_signature": "public final boolean remove(Object key, boolean doNotNotifyCacheReplicators)", "class_method_signature": "Cache.remove(Object key, boolean doNotNotifyCacheReplicators)", "testcase": false, "constructor": false}, {"identifier": "removeQuiet", "parameters": "(Serializable key)", "modifiers": "public final", "return": "boolean", "signature": "boolean removeQuiet(Serializable key)", "full_signature": "public final boolean removeQuiet(Serializable key)", "class_method_signature": "Cache.removeQuiet(Serializable key)", "testcase": false, "constructor": false}, {"identifier": "removeQuiet", "parameters": "(Object key)", "modifiers": "public final", "return": "boolean", "signature": "boolean removeQuiet(Object key)", "full_signature": "public final boolean removeQuiet(Object key)", "class_method_signature": "Cache.removeQuiet(Object key)", "testcase": false, "constructor": false}, {"identifier": "removeWithWriter", "parameters": "(Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean removeWithWriter(Object key)", "full_signature": "public boolean removeWithWriter(Object key)", "class_method_signature": "Cache.removeWithWriter(Object key)", "testcase": false, "constructor": false}, {"identifier": "removeInternal", "parameters": "(Object key, boolean expiry, boolean notifyListeners,\n                           boolean doNotNotifyCacheReplicators, boolean useCacheWriter)", "modifiers": "private", "return": "boolean", "signature": "boolean removeInternal(Object key, boolean expiry, boolean notifyListeners,\n                           boolean doNotNotifyCacheReplicators, boolean useCacheWriter)", "full_signature": "private boolean removeInternal(Object key, boolean expiry, boolean notifyListeners,\n                           boolean doNotNotifyCacheReplicators, boolean useCacheWriter)", "class_method_signature": "Cache.removeInternal(Object key, boolean expiry, boolean notifyListeners,\n                           boolean doNotNotifyCacheReplicators, boolean useCacheWriter)", "testcase": false, "constructor": false}, {"identifier": "notifyRemoveInternalListeners", "parameters": "(Object key, boolean expiry, boolean notifyListeners, boolean doNotNotifyCacheReplicators,\n                                                  Element elementFromStore)", "modifiers": "private", "return": "boolean", "signature": "boolean notifyRemoveInternalListeners(Object key, boolean expiry, boolean notifyListeners, boolean doNotNotifyCacheReplicators,\n                                                  Element elementFromStore)", "full_signature": "private boolean notifyRemoveInternalListeners(Object key, boolean expiry, boolean notifyListeners, boolean doNotNotifyCacheReplicators,\n                                                  Element elementFromStore)", "class_method_signature": "Cache.notifyRemoveInternalListeners(Object key, boolean expiry, boolean notifyListeners, boolean doNotNotifyCacheReplicators,\n                                                  Element elementFromStore)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeAll()", "full_signature": "public void removeAll()", "class_method_signature": "Cache.removeAll()", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(boolean doNotNotifyCacheReplicators)", "modifiers": "public", "return": "void", "signature": "void removeAll(boolean doNotNotifyCacheReplicators)", "full_signature": "public void removeAll(boolean doNotNotifyCacheReplicators)", "class_method_signature": "Cache.removeAll(boolean doNotNotifyCacheReplicators)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void dispose()", "full_signature": "public synchronized void dispose()", "class_method_signature": "Cache.dispose()", "testcase": false, "constructor": false}, {"identifier": "initialiseRegisteredCacheExtensions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialiseRegisteredCacheExtensions()", "full_signature": "private void initialiseRegisteredCacheExtensions()", "class_method_signature": "Cache.initialiseRegisteredCacheExtensions()", "testcase": false, "constructor": false}, {"identifier": "disposeRegisteredCacheExtensions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disposeRegisteredCacheExtensions()", "full_signature": "private void disposeRegisteredCacheExtensions()", "class_method_signature": "Cache.disposeRegisteredCacheExtensions()", "testcase": false, "constructor": false}, {"identifier": "initialiseRegisteredCacheLoaders", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialiseRegisteredCacheLoaders()", "full_signature": "private void initialiseRegisteredCacheLoaders()", "class_method_signature": "Cache.initialiseRegisteredCacheLoaders()", "testcase": false, "constructor": false}, {"identifier": "disposeRegisteredCacheLoaders", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disposeRegisteredCacheLoaders()", "full_signature": "private void disposeRegisteredCacheLoaders()", "class_method_signature": "Cache.disposeRegisteredCacheLoaders()", "testcase": false, "constructor": false}, {"identifier": "initialiseRegisteredCacheWriter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialiseRegisteredCacheWriter()", "full_signature": "private void initialiseRegisteredCacheWriter()", "class_method_signature": "Cache.initialiseRegisteredCacheWriter()", "testcase": false, "constructor": false}, {"identifier": "disposeRegisteredCacheWriter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disposeRegisteredCacheWriter()", "full_signature": "private void disposeRegisteredCacheWriter()", "class_method_signature": "Cache.disposeRegisteredCacheWriter()", "testcase": false, "constructor": false}, {"identifier": "getCacheConfiguration", "parameters": "()", "modifiers": "public", "return": "CacheConfiguration", "signature": "CacheConfiguration getCacheConfiguration()", "full_signature": "public CacheConfiguration getCacheConfiguration()", "class_method_signature": "Cache.getCacheConfiguration()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public final synchronized", "return": "void", "signature": "void flush()", "full_signature": "public final synchronized void flush()", "class_method_signature": "Cache.flush()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getSize()", "full_signature": "public final int getSize()", "class_method_signature": "Cache.getSize()", "testcase": false, "constructor": false}, {"identifier": "getSizeBasedOnAccuracy", "parameters": "(int statisticsAccuracy)", "modifiers": "public", "return": "int", "signature": "int getSizeBasedOnAccuracy(int statisticsAccuracy)", "full_signature": "public int getSizeBasedOnAccuracy(int statisticsAccuracy)", "class_method_signature": "Cache.getSizeBasedOnAccuracy(int statisticsAccuracy)", "testcase": false, "constructor": false}, {"identifier": "calculateInMemorySize", "parameters": "()", "modifiers": "public final", "return": "long", "signature": "long calculateInMemorySize()", "full_signature": "public final long calculateInMemorySize()", "class_method_signature": "Cache.calculateInMemorySize()", "testcase": false, "constructor": false}, {"identifier": "calculateOffHeapSize", "parameters": "()", "modifiers": "public final", "return": "long", "signature": "long calculateOffHeapSize()", "full_signature": "public final long calculateOffHeapSize()", "class_method_signature": "Cache.calculateOffHeapSize()", "testcase": false, "constructor": false}, {"identifier": "getMemoryStoreSize", "parameters": "()", "modifiers": "public final", "return": "long", "signature": "long getMemoryStoreSize()", "full_signature": "public final long getMemoryStoreSize()", "class_method_signature": "Cache.getMemoryStoreSize()", "testcase": false, "constructor": false}, {"identifier": "getOffHeapStoreSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getOffHeapStoreSize()", "full_signature": "public long getOffHeapStoreSize()", "class_method_signature": "Cache.getOffHeapStoreSize()", "testcase": false, "constructor": false}, {"identifier": "getDiskStoreSize", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getDiskStoreSize()", "full_signature": "public final int getDiskStoreSize()", "class_method_signature": "Cache.getDiskStoreSize()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public final", "return": "Status", "signature": "Status getStatus()", "full_signature": "public final Status getStatus()", "class_method_signature": "Cache.getStatus()", "testcase": false, "constructor": false}, {"identifier": "checkStatus", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkStatus()", "full_signature": "private void checkStatus()", "class_method_signature": "Cache.checkStatus()", "testcase": false, "constructor": false}, {"identifier": "checkStatusAlreadyDisposed", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean checkStatusAlreadyDisposed()", "full_signature": "private boolean checkStatusAlreadyDisposed()", "class_method_signature": "Cache.checkStatusAlreadyDisposed()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getName()", "full_signature": "public final String getName()", "class_method_signature": "Cache.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public final", "return": "void", "signature": "void setName(String name)", "full_signature": "public final void setName(String name)", "class_method_signature": "Cache.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Cache.toString()", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "(Element element)", "modifiers": "public final", "return": "boolean", "signature": "boolean isExpired(Element element)", "full_signature": "public final boolean isExpired(Element element)", "class_method_signature": "Cache.isExpired(Element element)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public final", "return": "Cache", "signature": "Cache clone()", "full_signature": "@Override public final Cache clone()", "class_method_signature": "Cache.clone()", "testcase": false, "constructor": false}, {"identifier": "getStore", "parameters": "()", "modifiers": "final", "return": "Store", "signature": "Store getStore()", "full_signature": "final Store getStore()", "class_method_signature": "Cache.getStore()", "testcase": false, "constructor": false}, {"identifier": "getStoreMBean", "parameters": "()", "modifiers": "public final", "return": "Object", "signature": "Object getStoreMBean()", "full_signature": "public final Object getStoreMBean()", "class_method_signature": "Cache.getStoreMBean()", "testcase": false, "constructor": false}, {"identifier": "getCacheEventNotificationService", "parameters": "()", "modifiers": "public final", "return": "RegisteredEventListeners", "signature": "RegisteredEventListeners getCacheEventNotificationService()", "full_signature": "public final RegisteredEventListeners getCacheEventNotificationService()", "class_method_signature": "Cache.getCacheEventNotificationService()", "testcase": false, "constructor": false}, {"identifier": "isElementInMemory", "parameters": "(Serializable key)", "modifiers": "public final", "return": "boolean", "signature": "boolean isElementInMemory(Serializable key)", "full_signature": "public final boolean isElementInMemory(Serializable key)", "class_method_signature": "Cache.isElementInMemory(Serializable key)", "testcase": false, "constructor": false}, {"identifier": "isElementInMemory", "parameters": "(Object key)", "modifiers": "public final", "return": "boolean", "signature": "boolean isElementInMemory(Object key)", "full_signature": "public final boolean isElementInMemory(Object key)", "class_method_signature": "Cache.isElementInMemory(Object key)", "testcase": false, "constructor": false}, {"identifier": "isElementOffHeap", "parameters": "(Object key)", "modifiers": "public final", "return": "boolean", "signature": "boolean isElementOffHeap(Object key)", "full_signature": "public final boolean isElementOffHeap(Object key)", "class_method_signature": "Cache.isElementOffHeap(Object key)", "testcase": false, "constructor": false}, {"identifier": "isElementOnDisk", "parameters": "(Serializable key)", "modifiers": "public final", "return": "boolean", "signature": "boolean isElementOnDisk(Serializable key)", "full_signature": "public final boolean isElementOnDisk(Serializable key)", "class_method_signature": "Cache.isElementOnDisk(Serializable key)", "testcase": false, "constructor": false}, {"identifier": "isElementOnDisk", "parameters": "(Object key)", "modifiers": "public final", "return": "boolean", "signature": "boolean isElementOnDisk(Object key)", "full_signature": "public final boolean isElementOnDisk(Object key)", "class_method_signature": "Cache.isElementOnDisk(Object key)", "testcase": false, "constructor": false}, {"identifier": "getGuid", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getGuid()", "full_signature": "public final String getGuid()", "class_method_signature": "Cache.getGuid()", "testcase": false, "constructor": false}, {"identifier": "getCacheManager", "parameters": "()", "modifiers": "public final", "return": "CacheManager", "signature": "CacheManager getCacheManager()", "full_signature": "public final CacheManager getCacheManager()", "class_method_signature": "Cache.getCacheManager()", "testcase": false, "constructor": false}, {"identifier": "clearStatistics", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearStatistics()", "full_signature": "public void clearStatistics()", "class_method_signature": "Cache.clearStatistics()", "testcase": false, "constructor": false}, {"identifier": "getStatisticsAccuracy", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStatisticsAccuracy()", "full_signature": "public int getStatisticsAccuracy()", "class_method_signature": "Cache.getStatisticsAccuracy()", "testcase": false, "constructor": false}, {"identifier": "setStatisticsAccuracy", "parameters": "(int statisticsAccuracy)", "modifiers": "public", "return": "void", "signature": "void setStatisticsAccuracy(int statisticsAccuracy)", "full_signature": "public void setStatisticsAccuracy(int statisticsAccuracy)", "class_method_signature": "Cache.setStatisticsAccuracy(int statisticsAccuracy)", "testcase": false, "constructor": false}, {"identifier": "evictExpiredElements", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void evictExpiredElements()", "full_signature": "public void evictExpiredElements()", "class_method_signature": "Cache.evictExpiredElements()", "testcase": false, "constructor": false}, {"identifier": "isKeyInCache", "parameters": "(Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean isKeyInCache(Object key)", "full_signature": "public boolean isKeyInCache(Object key)", "class_method_signature": "Cache.isKeyInCache(Object key)", "testcase": false, "constructor": false}, {"identifier": "isValueInCache", "parameters": "(Object value)", "modifiers": "public", "return": "boolean", "signature": "boolean isValueInCache(Object value)", "full_signature": "public boolean isValueInCache(Object value)", "class_method_signature": "Cache.isValueInCache(Object value)", "testcase": false, "constructor": false}, {"identifier": "getStatistics", "parameters": "()", "modifiers": "public", "return": "Statistics", "signature": "Statistics getStatistics()", "full_signature": "public Statistics getStatistics()", "class_method_signature": "Cache.getStatistics()", "testcase": false, "constructor": false}, {"identifier": "setCacheManager", "parameters": "(CacheManager cacheManager)", "modifiers": "public", "return": "void", "signature": "void setCacheManager(CacheManager cacheManager)", "full_signature": "public void setCacheManager(CacheManager cacheManager)", "class_method_signature": "Cache.setCacheManager(CacheManager cacheManager)", "testcase": false, "constructor": false}, {"identifier": "getBootstrapCacheLoader", "parameters": "()", "modifiers": "public", "return": "BootstrapCacheLoader", "signature": "BootstrapCacheLoader getBootstrapCacheLoader()", "full_signature": "public BootstrapCacheLoader getBootstrapCacheLoader()", "class_method_signature": "Cache.getBootstrapCacheLoader()", "testcase": false, "constructor": false}, {"identifier": "setBootstrapCacheLoader", "parameters": "(BootstrapCacheLoader bootstrapCacheLoader)", "modifiers": "public", "return": "void", "signature": "void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader)", "full_signature": "public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader)", "class_method_signature": "Cache.setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader)", "testcase": false, "constructor": false}, {"identifier": "setDiskStorePath", "parameters": "(String diskStorePath)", "modifiers": "public", "return": "void", "signature": "void setDiskStorePath(String diskStorePath)", "full_signature": "public void setDiskStorePath(String diskStorePath)", "class_method_signature": "Cache.setDiskStorePath(String diskStorePath)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object object)", "full_signature": "@Override public boolean equals(Object object)", "class_method_signature": "Cache.equals(Object object)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Cache.hashCode()", "testcase": false, "constructor": false}, {"identifier": "createGuid", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String createGuid()", "full_signature": "private String createGuid()", "class_method_signature": "Cache.createGuid()", "testcase": false, "constructor": false}, {"identifier": "registerCacheExtension", "parameters": "(CacheExtension cacheExtension)", "modifiers": "public", "return": "void", "signature": "void registerCacheExtension(CacheExtension cacheExtension)", "full_signature": "public void registerCacheExtension(CacheExtension cacheExtension)", "class_method_signature": "Cache.registerCacheExtension(CacheExtension cacheExtension)", "testcase": false, "constructor": false}, {"identifier": "getRegisteredCacheExtensions", "parameters": "()", "modifiers": "public", "return": "List<CacheExtension>", "signature": "List<CacheExtension> getRegisteredCacheExtensions()", "full_signature": "public List<CacheExtension> getRegisteredCacheExtensions()", "class_method_signature": "Cache.getRegisteredCacheExtensions()", "testcase": false, "constructor": false}, {"identifier": "unregisterCacheExtension", "parameters": "(CacheExtension cacheExtension)", "modifiers": "public", "return": "void", "signature": "void unregisterCacheExtension(CacheExtension cacheExtension)", "full_signature": "public void unregisterCacheExtension(CacheExtension cacheExtension)", "class_method_signature": "Cache.unregisterCacheExtension(CacheExtension cacheExtension)", "testcase": false, "constructor": false}, {"identifier": "getAverageGetTime", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getAverageGetTime()", "full_signature": "public float getAverageGetTime()", "class_method_signature": "Cache.getAverageGetTime()", "testcase": false, "constructor": false}, {"identifier": "setCacheExceptionHandler", "parameters": "(CacheExceptionHandler cacheExceptionHandler)", "modifiers": "public", "return": "void", "signature": "void setCacheExceptionHandler(CacheExceptionHandler cacheExceptionHandler)", "full_signature": "public void setCacheExceptionHandler(CacheExceptionHandler cacheExceptionHandler)", "class_method_signature": "Cache.setCacheExceptionHandler(CacheExceptionHandler cacheExceptionHandler)", "testcase": false, "constructor": false}, {"identifier": "getCacheExceptionHandler", "parameters": "()", "modifiers": "public", "return": "CacheExceptionHandler", "signature": "CacheExceptionHandler getCacheExceptionHandler()", "full_signature": "public CacheExceptionHandler getCacheExceptionHandler()", "class_method_signature": "Cache.getCacheExceptionHandler()", "testcase": false, "constructor": false}, {"identifier": "registerCacheLoader", "parameters": "(CacheLoader cacheLoader)", "modifiers": "public", "return": "void", "signature": "void registerCacheLoader(CacheLoader cacheLoader)", "full_signature": "public void registerCacheLoader(CacheLoader cacheLoader)", "class_method_signature": "Cache.registerCacheLoader(CacheLoader cacheLoader)", "testcase": false, "constructor": false}, {"identifier": "unregisterCacheLoader", "parameters": "(CacheLoader cacheLoader)", "modifiers": "public", "return": "void", "signature": "void unregisterCacheLoader(CacheLoader cacheLoader)", "full_signature": "public void unregisterCacheLoader(CacheLoader cacheLoader)", "class_method_signature": "Cache.unregisterCacheLoader(CacheLoader cacheLoader)", "testcase": false, "constructor": false}, {"identifier": "getRegisteredCacheLoaders", "parameters": "()", "modifiers": "public", "return": "List<CacheLoader>", "signature": "List<CacheLoader> getRegisteredCacheLoaders()", "full_signature": "public List<CacheLoader> getRegisteredCacheLoaders()", "class_method_signature": "Cache.getRegisteredCacheLoaders()", "testcase": false, "constructor": false}, {"identifier": "registerCacheWriter", "parameters": "(CacheWriter cacheWriter)", "modifiers": "public", "return": "void", "signature": "void registerCacheWriter(CacheWriter cacheWriter)", "full_signature": "public void registerCacheWriter(CacheWriter cacheWriter)", "class_method_signature": "Cache.registerCacheWriter(CacheWriter cacheWriter)", "testcase": false, "constructor": false}, {"identifier": "unregisterCacheWriter", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unregisterCacheWriter()", "full_signature": "public void unregisterCacheWriter()", "class_method_signature": "Cache.unregisterCacheWriter()", "testcase": false, "constructor": false}, {"identifier": "getRegisteredCacheWriter", "parameters": "()", "modifiers": "public", "return": "CacheWriter", "signature": "CacheWriter getRegisteredCacheWriter()", "full_signature": "public CacheWriter getRegisteredCacheWriter()", "class_method_signature": "Cache.getRegisteredCacheWriter()", "testcase": false, "constructor": false}, {"identifier": "asynchronousLoad", "parameters": "(final Object key, final CacheLoader specificLoader, final Object argument)", "modifiers": "", "return": "Future", "signature": "Future asynchronousLoad(final Object key, final CacheLoader specificLoader, final Object argument)", "full_signature": " Future asynchronousLoad(final Object key, final CacheLoader specificLoader, final Object argument)", "class_method_signature": "Cache.asynchronousLoad(final Object key, final CacheLoader specificLoader, final Object argument)", "testcase": false, "constructor": false}, {"identifier": "loadWithRegisteredLoaders", "parameters": "(Object argument, Object key)", "modifiers": "private", "return": "Object", "signature": "Object loadWithRegisteredLoaders(Object argument, Object key)", "full_signature": "private Object loadWithRegisteredLoaders(Object argument, Object key)", "class_method_signature": "Cache.loadWithRegisteredLoaders(Object argument, Object key)", "testcase": false, "constructor": false}, {"identifier": "asynchronousLoadAll", "parameters": "(final Collection keys, final Object argument)", "modifiers": "", "return": "Future", "signature": "Future asynchronousLoadAll(final Collection keys, final Object argument)", "full_signature": " Future asynchronousLoadAll(final Collection keys, final Object argument)", "class_method_signature": "Cache.asynchronousLoadAll(final Collection keys, final Object argument)", "testcase": false, "constructor": false}, {"identifier": "loadWithRegisteredLoaders", "parameters": "(Object argument, Set<Object> nonLoadedKeys)", "modifiers": "", "return": "Map", "signature": "Map loadWithRegisteredLoaders(Object argument, Set<Object> nonLoadedKeys)", "full_signature": " Map loadWithRegisteredLoaders(Object argument, Set<Object> nonLoadedKeys)", "class_method_signature": "Cache.loadWithRegisteredLoaders(Object argument, Set<Object> nonLoadedKeys)", "testcase": false, "constructor": false}, {"identifier": "getExecutorService", "parameters": "()", "modifiers": "", "return": "ExecutorService", "signature": "ExecutorService getExecutorService()", "full_signature": " ExecutorService getExecutorService()", "class_method_signature": "Cache.getExecutorService()", "testcase": false, "constructor": false}, {"identifier": "isDisabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDisabled()", "full_signature": "public boolean isDisabled()", "class_method_signature": "Cache.isDisabled()", "testcase": false, "constructor": false}, {"identifier": "setDisabled", "parameters": "(boolean disabled)", "modifiers": "public", "return": "void", "signature": "void setDisabled(boolean disabled)", "full_signature": "public void setDisabled(boolean disabled)", "class_method_signature": "Cache.setDisabled(boolean disabled)", "testcase": false, "constructor": false}, {"identifier": "getMemoryStoreEvictionPolicy", "parameters": "()", "modifiers": "public", "return": "Policy", "signature": "Policy getMemoryStoreEvictionPolicy()", "full_signature": "public Policy getMemoryStoreEvictionPolicy()", "class_method_signature": "Cache.getMemoryStoreEvictionPolicy()", "testcase": false, "constructor": false}, {"identifier": "setMemoryStoreEvictionPolicy", "parameters": "(Policy policy)", "modifiers": "public", "return": "void", "signature": "void setMemoryStoreEvictionPolicy(Policy policy)", "full_signature": "public void setMemoryStoreEvictionPolicy(Policy policy)", "class_method_signature": "Cache.setMemoryStoreEvictionPolicy(Policy policy)", "testcase": false, "constructor": false}, {"identifier": "getLiveCacheStatistics", "parameters": "()", "modifiers": "public", "return": "LiveCacheStatistics", "signature": "LiveCacheStatistics getLiveCacheStatistics()", "full_signature": "public LiveCacheStatistics getLiveCacheStatistics()", "class_method_signature": "Cache.getLiveCacheStatistics()", "testcase": false, "constructor": false}, {"identifier": "getLiveCacheStatisticsNoCheck", "parameters": "()", "modifiers": "private", "return": "LiveCacheStatistics", "signature": "LiveCacheStatistics getLiveCacheStatisticsNoCheck()", "full_signature": "private LiveCacheStatistics getLiveCacheStatisticsNoCheck()", "class_method_signature": "Cache.getLiveCacheStatisticsNoCheck()", "testcase": false, "constructor": false}, {"identifier": "registerCacheUsageListener", "parameters": "(CacheUsageListener cacheUsageListener)", "modifiers": "public", "return": "void", "signature": "void registerCacheUsageListener(CacheUsageListener cacheUsageListener)", "full_signature": "public void registerCacheUsageListener(CacheUsageListener cacheUsageListener)", "class_method_signature": "Cache.registerCacheUsageListener(CacheUsageListener cacheUsageListener)", "testcase": false, "constructor": false}, {"identifier": "removeCacheUsageListener", "parameters": "(CacheUsageListener cacheUsageListener)", "modifiers": "public", "return": "void", "signature": "void removeCacheUsageListener(CacheUsageListener cacheUsageListener)", "full_signature": "public void removeCacheUsageListener(CacheUsageListener cacheUsageListener)", "class_method_signature": "Cache.removeCacheUsageListener(CacheUsageListener cacheUsageListener)", "testcase": false, "constructor": false}, {"identifier": "isStatisticsEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStatisticsEnabled()", "full_signature": "public boolean isStatisticsEnabled()", "class_method_signature": "Cache.isStatisticsEnabled()", "testcase": false, "constructor": false}, {"identifier": "setStatisticsEnabled", "parameters": "(boolean enableStatistics)", "modifiers": "public", "return": "void", "signature": "void setStatisticsEnabled(boolean enableStatistics)", "full_signature": "public void setStatisticsEnabled(boolean enableStatistics)", "class_method_signature": "Cache.setStatisticsEnabled(boolean enableStatistics)", "testcase": false, "constructor": false}, {"identifier": "getSampledCacheStatistics", "parameters": "()", "modifiers": "public", "return": "SampledCacheStatistics", "signature": "SampledCacheStatistics getSampledCacheStatistics()", "full_signature": "public SampledCacheStatistics getSampledCacheStatistics()", "class_method_signature": "Cache.getSampledCacheStatistics()", "testcase": false, "constructor": false}, {"identifier": "setSampledStatisticsEnabled", "parameters": "(final boolean enableStatistics)", "modifiers": "public", "return": "void", "signature": "void setSampledStatisticsEnabled(final boolean enableStatistics)", "full_signature": "public void setSampledStatisticsEnabled(final boolean enableStatistics)", "class_method_signature": "Cache.setSampledStatisticsEnabled(final boolean enableStatistics)", "testcase": false, "constructor": false}, {"identifier": "isSampledStatisticsEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSampledStatisticsEnabled()", "full_signature": "public boolean isSampledStatisticsEnabled()", "class_method_signature": "Cache.isSampledStatisticsEnabled()", "testcase": false, "constructor": false}, {"identifier": "getInternalContext", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getInternalContext()", "full_signature": "public Object getInternalContext()", "class_method_signature": "Cache.getInternalContext()", "testcase": false, "constructor": false}, {"identifier": "disableDynamicFeatures", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disableDynamicFeatures()", "full_signature": "public void disableDynamicFeatures()", "class_method_signature": "Cache.disableDynamicFeatures()", "testcase": false, "constructor": false}, {"identifier": "isClusterCoherent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClusterCoherent()", "full_signature": "public boolean isClusterCoherent()", "class_method_signature": "Cache.isClusterCoherent()", "testcase": false, "constructor": false}, {"identifier": "isNodeCoherent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNodeCoherent()", "full_signature": "public boolean isNodeCoherent()", "class_method_signature": "Cache.isNodeCoherent()", "testcase": false, "constructor": false}, {"identifier": "setNodeCoherent", "parameters": "(boolean coherent)", "modifiers": "public", "return": "void", "signature": "void setNodeCoherent(boolean coherent)", "full_signature": "public void setNodeCoherent(boolean coherent)", "class_method_signature": "Cache.setNodeCoherent(boolean coherent)", "testcase": false, "constructor": false}, {"identifier": "waitUntilClusterCoherent", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void waitUntilClusterCoherent()", "full_signature": "public void waitUntilClusterCoherent()", "class_method_signature": "Cache.waitUntilClusterCoherent()", "testcase": false, "constructor": false}, {"identifier": "addPropertyChangeListener", "parameters": "(PropertyChangeListener listener)", "modifiers": "public synchronized", "return": "void", "signature": "void addPropertyChangeListener(PropertyChangeListener listener)", "full_signature": "public synchronized void addPropertyChangeListener(PropertyChangeListener listener)", "class_method_signature": "Cache.addPropertyChangeListener(PropertyChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "removePropertyChangeListener", "parameters": "(PropertyChangeListener listener)", "modifiers": "public synchronized", "return": "void", "signature": "void removePropertyChangeListener(PropertyChangeListener listener)", "full_signature": "public synchronized void removePropertyChangeListener(PropertyChangeListener listener)", "class_method_signature": "Cache.removePropertyChangeListener(PropertyChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "firePropertyChange", "parameters": "(String propertyName, Object oldValue, Object newValue)", "modifiers": "public", "return": "void", "signature": "void firePropertyChange(String propertyName, Object oldValue, Object newValue)", "full_signature": "public void firePropertyChange(String propertyName, Object oldValue, Object newValue)", "class_method_signature": "Cache.firePropertyChange(String propertyName, Object oldValue, Object newValue)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(Element element)", "modifiers": "public", "return": "Element", "signature": "Element putIfAbsent(Element element)", "full_signature": "public Element putIfAbsent(Element element)", "class_method_signature": "Cache.putIfAbsent(Element element)", "testcase": false, "constructor": false}, {"identifier": "removeElement", "parameters": "(Element element)", "modifiers": "public", "return": "boolean", "signature": "boolean removeElement(Element element)", "full_signature": "public boolean removeElement(Element element)", "class_method_signature": "Cache.removeElement(Element element)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(Element old, Element element)", "modifiers": "public", "return": "boolean", "signature": "boolean replace(Element old, Element element)", "full_signature": "public boolean replace(Element old, Element element)", "class_method_signature": "Cache.replace(Element old, Element element)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(Element element)", "modifiers": "public", "return": "Element", "signature": "Element replace(Element element)", "full_signature": "public Element replace(Element element)", "class_method_signature": "Cache.replace(Element element)", "testcase": false, "constructor": false}, {"identifier": "clusterCoherent", "parameters": "(boolean clusterCoherent)", "modifiers": "public", "return": "void", "signature": "void clusterCoherent(boolean clusterCoherent)", "full_signature": "public void clusterCoherent(boolean clusterCoherent)", "class_method_signature": "Cache.clusterCoherent(boolean clusterCoherent)", "testcase": false, "constructor": false}, {"identifier": "nodeCoherent", "parameters": "(boolean nodeCoherent)", "modifiers": "public", "return": "void", "signature": "void nodeCoherent(boolean nodeCoherent)", "full_signature": "public void nodeCoherent(boolean nodeCoherent)", "class_method_signature": "Cache.nodeCoherent(boolean nodeCoherent)", "testcase": false, "constructor": false}, {"identifier": "registerGroupElement", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerGroupElement()", "full_signature": "private void registerGroupElement()", "class_method_signature": "Cache.registerGroupElement()", "testcase": false, "constructor": false}, {"identifier": "getGroupElement", "parameters": "()", "modifiers": "private", "return": "GroupElement", "signature": "GroupElement getGroupElement()", "full_signature": "private GroupElement getGroupElement()", "class_method_signature": "Cache.getGroupElement()", "testcase": false, "constructor": false}, {"identifier": "fireGroupElementChanged", "parameters": "(GroupElement groupElement)", "modifiers": "private", "return": "void", "signature": "void fireGroupElementChanged(GroupElement groupElement)", "full_signature": "private void fireGroupElementChanged(GroupElement groupElement)", "class_method_signature": "Cache.fireGroupElementChanged(GroupElement groupElement)", "testcase": false, "constructor": false}, {"identifier": "addToGroups", "parameters": "(Element element, boolean elementExists, boolean quiet,\n            boolean doNotNotifyCacheReplicators)", "modifiers": "private", "return": "void", "signature": "void addToGroups(Element element, boolean elementExists, boolean quiet,\n            boolean doNotNotifyCacheReplicators)", "full_signature": "private void addToGroups(Element element, boolean elementExists, boolean quiet,\n            boolean doNotNotifyCacheReplicators)", "class_method_signature": "Cache.addToGroups(Element element, boolean elementExists, boolean quiet,\n            boolean doNotNotifyCacheReplicators)", "testcase": false, "constructor": false}, {"identifier": "removeFromGroups", "parameters": "(Element element, boolean quiet,\n            boolean doNotNotifyCacheReplicators)", "modifiers": "private", "return": "void", "signature": "void removeFromGroups(Element element, boolean quiet,\n            boolean doNotNotifyCacheReplicators)", "full_signature": "private void removeFromGroups(Element element, boolean quiet,\n            boolean doNotNotifyCacheReplicators)", "class_method_signature": "Cache.removeFromGroups(Element element, boolean quiet,\n            boolean doNotNotifyCacheReplicators)", "testcase": false, "constructor": false}, {"identifier": "removeRemovedGroups", "parameters": "(Element element)", "modifiers": "private", "return": "boolean", "signature": "boolean removeRemovedGroups(Element element)", "full_signature": "private boolean removeRemovedGroups(Element element)", "class_method_signature": "Cache.removeRemovedGroups(Element element)", "testcase": false, "constructor": false}, {"identifier": "getElementKeysForGroup", "parameters": "(String groupKey)", "modifiers": "public final", "return": "Set<Object>", "signature": "Set<Object> getElementKeysForGroup(String groupKey)", "full_signature": "public final Set<Object> getElementKeysForGroup(String groupKey)", "class_method_signature": "Cache.getElementKeysForGroup(String groupKey)", "testcase": false, "constructor": false}, {"identifier": "removeByGroup", "parameters": "(String groupKey, boolean doNotNotifyCacheReplicators)", "modifiers": "public final", "return": "Set<Object>", "signature": "Set<Object> removeByGroup(String groupKey, boolean doNotNotifyCacheReplicators)", "full_signature": "public final Set<Object> removeByGroup(String groupKey, boolean doNotNotifyCacheReplicators)", "class_method_signature": "Cache.removeByGroup(String groupKey, boolean doNotNotifyCacheReplicators)", "testcase": false, "constructor": false}, {"identifier": "getSearchAttribute", "parameters": "(String attributeName)", "modifiers": "public", "return": "Attribute<T>", "signature": "Attribute<T> getSearchAttribute(String attributeName)", "full_signature": "public Attribute<T> getSearchAttribute(String attributeName)", "class_method_signature": "Cache.getSearchAttribute(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "createQuery", "parameters": "()", "modifiers": "public", "return": "Query", "signature": "Query createQuery()", "full_signature": "public Query createQuery()", "class_method_signature": "Cache.createQuery()", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(StoreQuery query)", "modifiers": "", "return": "Results", "signature": "Results executeQuery(StoreQuery query)", "full_signature": " Results executeQuery(StoreQuery query)", "class_method_signature": "Cache.executeQuery(StoreQuery query)", "testcase": false, "constructor": false}, {"identifier": "isSearchable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSearchable()", "full_signature": "public boolean isSearchable()", "class_method_signature": "Cache.isSearchable()", "testcase": false, "constructor": false}, {"identifier": "clusterRejoinStarted", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clusterRejoinStarted()", "full_signature": " void clusterRejoinStarted()", "class_method_signature": "Cache.clusterRejoinStarted()", "testcase": false, "constructor": false}, {"identifier": "clusterRejoinComplete", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clusterRejoinComplete()", "full_signature": " void clusterRejoinComplete()", "class_method_signature": "Cache.clusterRejoinComplete()", "testcase": false, "constructor": false}, {"identifier": "reinitialize", "parameters": "()", "modifiers": "", "return": "void", "signature": "void reinitialize()", "full_signature": " void reinitialize()", "class_method_signature": "Cache.reinitialize()", "testcase": false, "constructor": false}], "file": "branches/ehcache-core-2.x-groups/src/main/java/net/sf/ehcache/Cache.java"}, "focal_method": {"identifier": "initialise", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void initialise() {\n        synchronized (this) {\n            if (!status.canInitialize()) {\n                throw new IllegalStateException(\"Cannot initialise the \" + configuration.getName()\n                        + \" cache because its status is not STATUS_UNINITIALISED\");\n            }\n\n            if (configuration.getMaxElementsInMemory() == 0) {\n                LOG.warn(\"Cache: \" + configuration.getName() +\n                        \" has a maxElementsInMemory of 0.  \" +\n                        \"In Ehcache 2.0 this has been changed to mean a store\" +\n                        \" with no capacity limit. Set it to 1 if you want\" +\n                        \" no elements cached in memory\");\n            }\n\n            ReadWriteCopyStrategy<Element> copyStrategy = null;\n            if (configuration.getTransactionalMode().isTransactional() && !configuration.isXaTransactional()) {\n                copyStrategy = configuration.getCopyStrategyConfiguration().getCopyStrategyInstance();\n                configuration.getCopyStrategyConfiguration().setCopyStrategyInstance(new ImmutableValueElementCopyStrategy());\n            }\n\n            if (configuration.getTransactionalMode().isTransactional()\n                && configuration.isTerracottaClustered()\n                && configuration.getTerracottaConfiguration().getValueMode() != TerracottaConfiguration.ValueMode.SERIALIZATION) {\n                throw new CacheException(\"To be transactional, a Terracotta clustered cache needs to be in Serialization value mode\");\n            }\n\n            final Store store;\n            if (configuration.isOverflowToOffHeap()) {\n                try {\n                    Class<Store> storeClass = ClassLoaderUtil.loadClass(OFF_HEAP_STORE_CLASSNAME);\n                    try {\n                        store = (Store) storeClass.getMethod(\"create\", Ehcache.class, String.class).invoke(null, this, diskStorePath);\n                    } catch (NoSuchMethodException e) {\n                       throw new CacheException(\"Cache: \" + configuration.getName() + \" cannot find static factory\" +\n                        \" method create(Ehcache, String)\" +\n                        \" in store class \" + OFF_HEAP_STORE_CLASSNAME, e);\n                    } catch (InvocationTargetException e) {\n                        Throwable cause = e.getCause();\n                        if (cause instanceof CacheException) {\n                            throw (CacheException)cause;\n                        } else {\n                            throw new CacheException(\"Cache: \" + configuration.getName() +\n                                    \" cannot instantiate store \" + OFF_HEAP_STORE_CLASSNAME, cause);\n                        }\n                    } catch (IllegalAccessException e) {\n                        throw new CacheException(\"Cache: \" + configuration.getName() +\n                                \" cannot instantiate store \" + OFF_HEAP_STORE_CLASSNAME, e);\n                    }\n                } catch (ClassNotFoundException e) {\n                    throw new CacheException(\"Cache \" + configuration.getName() +\n                            \" cannot be configured because the off-heap store class could not be found. \" +\n                            \"You must use an enterprise version of Ehcache to successfully enable overflowToOffHeap.\");\n                }\n            } else if (isTerracottaClustered()) {\n                if (!getCacheConfiguration().getTerracottaConfiguration().isStorageStrategySet()) {\n                    getCacheConfiguration().getTerracottaConfiguration().storageStrategy(\n                            TerracottaClient.getTerracottaDefaultStrategyForCurrentRuntime());\n                }\n\n                Store terracottaStore = cacheManager.createTerracottaStore(this);\n                NonstopConfiguration nonstopConfig = getCacheConfiguration().getTerracottaConfiguration().getNonstopConfiguration();\n                // freeze the config whether nonstop is enabled or not\n                if (nonstopConfig != null) {\n                    nonstopConfig.freezeConfig();\n                }\n                if (getCacheConfiguration().getTerracottaConfiguration().isNonstopEnabled()) {\n                    store = new NonstopStore(terracottaStore, getCacheCluster(), nonstopConfig, CacheManagerExecutorServiceFactory\n                            .getInstance().getOrCreateNonStopCacheExecutorService(this));\n                } else {\n                    store = terracottaStore;\n                }\n\n                boolean unlockedReads = !this.configuration.getTerracottaConfiguration().getCoherentReads();\n                // if coherentReads=false, make coherent=false\n                boolean coherent = unlockedReads ? false : this.configuration.getTerracottaConfiguration().isCoherent();\n                store.setNodeCoherent(coherent);\n            } else {\n                if (useClassicLru && configuration.getMemoryStoreEvictionPolicy().equals(MemoryStoreEvictionPolicy.LRU)) {\n                    Store disk = createDiskStore();\n                    store = new LegacyStoreWrapper(new LruMemoryStore(this, disk), disk, registeredEventListeners, configuration);\n                } else {\n                    if (configuration.isDiskPersistent()) {\n                        store = DiskPersistentStore.create(this, diskStorePath);\n                    } else if (configuration.isOverflowToDisk()) {\n                        store = OverflowToDiskStore.create(this, diskStorePath);\n                    } else {\n                        store = MemoryOnlyStore.create(this, diskStorePath);\n                    }\n                }\n            }\n\n            if (configuration.isXaTransactional()) {\n                Object txnManager = configuration.getDefaultTransactionManager();\n                if (txnManager == null) {\n                    txnManager = transactionManagerLookup.getTransactionManager();\n                }\n                if (txnManager == null) {\n                    throw new CacheException(\"You've configured cache \" + cacheManager.getName() + \".\"\n                                             + configuration.getName() + \" to be transactional, but no TransactionManager could be found!\");\n                }\n                //set xa enabled\n                if (configuration.isTerracottaClustered()) {\n                    configuration.getTerracottaConfiguration().setCacheXA(true);\n                }\n\n                EhcacheXAStore ehcacheXAStore =\n                    cacheManager.createEhcacheXAStore(this, store, txnManager instanceof SyncTransactionManager);\n\n                // this xaresource is for initial registration and recovery\n                EhcacheXAResourceImpl xaResource = new EhcacheXAResourceImpl(this, txnManager, ehcacheXAStore);\n                transactionManagerLookup.register(xaResource);\n\n                this.compoundStore = new XATransactionalStore(this, ehcacheXAStore, transactionManagerLookup, txnManager);\n            } else if (configuration.isLocalJtaTransactional()) {\n                SoftLockFactory softLockFactory = cacheManager.createSoftLockFactory(this);\n                LocalTransactionStore localTransactionStore = new LocalTransactionStore(getCacheManager().getTransactionController(),\n                        softLockFactory, this, store, copyStrategy);\n                this.compoundStore = new JtaLocalTransactionStore(localTransactionStore, transactionManagerLookup,\n                        cacheManager.getTransactionController());\n            } else if (configuration.isLocalTransactional()) {\n                SoftLockFactory softLockFactory = cacheManager.createSoftLockFactory(this);\n                this.compoundStore = new LocalTransactionStore(getCacheManager().getTransactionController(), softLockFactory, this, store,\n                        copyStrategy);\n            } else {\n                this.compoundStore = store;\n            }\n\n\n            Map<String, AttributeExtractor> extractors = new HashMap<String, AttributeExtractor>();\n            for (SearchAttribute sa : configuration.getSearchAttributes().values()) {\n                extractors.put(sa.getName(), sa.constructExtractor());\n            }\n\n            store.setAttributeExtractors(extractors);\n\n\n            this.cacheWriterManager = configuration.getCacheWriterConfiguration().getWriteMode().createWriterManager(this);\n            initialiseCacheWriterManager(false);\n\n            changeStatus(Status.STATUS_ALIVE);\n            initialiseRegisteredCacheExtensions();\n            initialiseRegisteredCacheLoaders();\n            initialiseRegisteredCacheWriter();\n\n            // initialize live statistics\n            // register to get notifications of\n            // put/update/removeInternal/expiry/eviction\n            getCacheEventNotificationService().registerListener(liveCacheStatisticsData);\n            // set up default values\n            liveCacheStatisticsData.setStatisticsAccuracy(Statistics.STATISTICS_ACCURACY_BEST_EFFORT);\n            liveCacheStatisticsData.setStatisticsEnabled(configuration.getStatistics());\n\n            // register the sampled cache statistics\n            this.registerCacheUsageListener(sampledCacheStatistics);\n\n            if (isTerracottaClustered()) {\n                // create this to be sure that it's present on each node to receive clustered events,\n                // even if this node is not sending out its events\n                cacheManager.createTerracottaEventReplicator(this);\n            }\n\n            Object context = compoundStore.getInternalContext();\n            if (context instanceof CacheLockProvider) {\n                lockProvider = (CacheLockProvider) context;\n            }\n        }\n\n        compoundStore.addStoreListener(this);\n\n        registerGroupElement();\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Initialised cache: \" + configuration.getName());\n        }\n\n        if (disabled) {\n            LOG.warn(\"Cache: \" + configuration.getName() + \" is disabled because the \" + NET_SF_EHCACHE_DISABLED\n                    + \" property was set to true. No elements will be added to the cache.\");\n        }\n    }", "signature": "void initialise()", "full_signature": "public void initialise()", "class_method_signature": "Cache.initialise()", "testcase": false, "constructor": false, "invocations": ["canInitialize", "getName", "getMaxElementsInMemory", "warn", "getName", "isTransactional", "getTransactionalMode", "isXaTransactional", "getCopyStrategyInstance", "getCopyStrategyConfiguration", "setCopyStrategyInstance", "getCopyStrategyConfiguration", "isTransactional", "getTransactionalMode", "isTerracottaClustered", "getValueMode", "getTerracottaConfiguration", "isOverflowToOffHeap", "loadClass", "invoke", "getMethod", "getName", "getCause", "getName", "getName", "getName", "isTerracottaClustered", "isStorageStrategySet", "getTerracottaConfiguration", "getCacheConfiguration", "storageStrategy", "getTerracottaConfiguration", "getCacheConfiguration", "getTerracottaDefaultStrategyForCurrentRuntime", "createTerracottaStore", "getNonstopConfiguration", "getTerracottaConfiguration", "getCacheConfiguration", "freezeConfig", "isNonstopEnabled", "getTerracottaConfiguration", "getCacheConfiguration", "getCacheCluster", "getOrCreateNonStopCacheExecutorService", "getInstance", "getCoherentReads", "getTerracottaConfiguration", "isCoherent", "getTerracottaConfiguration", "setNodeCoherent", "equals", "getMemoryStoreEvictionPolicy", "createDiskStore", "isDiskPersistent", "create", "isOverflowToDisk", "create", "create", "isXaTransactional", "getDefaultTransactionManager", "getTransactionManager", "getName", "getName", "isTerracottaClustered", "setCacheXA", "getTerracottaConfiguration", "createEhcacheXAStore", "register", "isLocalJtaTransactional", "createSoftLockFactory", "getTransactionController", "getCacheManager", "getTransactionController", "isLocalTransactional", "createSoftLockFactory", "getTransactionController", "getCacheManager", "values", "getSearchAttributes", "put", "getName", "constructExtractor", "setAttributeExtractors", "createWriterManager", "getWriteMode", "getCacheWriterConfiguration", "initialiseCacheWriterManager", "changeStatus", "initialiseRegisteredCacheExtensions", "initialiseRegisteredCacheLoaders", "initialiseRegisteredCacheWriter", "registerListener", "getCacheEventNotificationService", "setStatisticsAccuracy", "setStatisticsEnabled", "getStatistics", "registerCacheUsageListener", "isTerracottaClustered", "createTerracottaEventReplicator", "getInternalContext", "addStoreListener", "registerGroupElement", "isDebugEnabled", "debug", "getName", "warn", "getName"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}