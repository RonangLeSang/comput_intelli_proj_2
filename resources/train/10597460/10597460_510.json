{"test_class": {"identifier": "BlockingCacheTest", "superclass": "extends CacheTest", "interfaces": "", "fields": [{"original_string": "private BlockingCache blockingCache;", "modifier": "private", "type": "BlockingCache", "declarator": "blockingCache", "var_name": "blockingCache"}], "file": "tags/ehcache-core-2.4.4/src/test/java/net/sf/ehcache/constructs/blocking/BlockingCacheTest.java"}, "test_case": {"identifier": "testGetWithLoader", "parameters": "()", "modifiers": "@Override @Test public", "return": "void", "body": "@Override\n    @Test\n    public void testGetWithLoader() {\n        super.testGetWithLoader();\n    }", "signature": "void testGetWithLoader()", "full_signature": "@Override @Test public void testGetWithLoader()", "class_method_signature": "BlockingCacheTest.testGetWithLoader()", "testcase": true, "constructor": false, "invocations": ["testGetWithLoader"]}, "focal_class": {"identifier": "BlockingCache", "superclass": "extends EhcacheDecoratorAdapter", "interfaces": "", "fields": [{"original_string": "protected volatile int timeoutMillis;", "modifier": "protected volatile", "type": "int", "declarator": "timeoutMillis", "var_name": "timeoutMillis"}, {"original_string": "private final int stripes;", "modifier": "private final", "type": "int", "declarator": "stripes", "var_name": "stripes"}, {"original_string": "private final AtomicReference<CacheLockProvider> cacheLockProviderReference;", "modifier": "private final", "type": "AtomicReference<CacheLockProvider>", "declarator": "cacheLockProviderReference", "var_name": "cacheLockProviderReference"}], "methods": [{"identifier": "BlockingCache", "parameters": "(final Ehcache cache, int numberOfStripes)", "modifiers": "public", "return": "", "signature": " BlockingCache(final Ehcache cache, int numberOfStripes)", "full_signature": "public  BlockingCache(final Ehcache cache, int numberOfStripes)", "class_method_signature": "BlockingCache.BlockingCache(final Ehcache cache, int numberOfStripes)", "testcase": false, "constructor": true}, {"identifier": "BlockingCache", "parameters": "(final Ehcache cache)", "modifiers": "public", "return": "", "signature": " BlockingCache(final Ehcache cache)", "full_signature": "public  BlockingCache(final Ehcache cache)", "class_method_signature": "BlockingCache.BlockingCache(final Ehcache cache)", "testcase": false, "constructor": true}, {"identifier": "getCacheLockProvider", "parameters": "()", "modifiers": "private", "return": "CacheLockProvider", "signature": "CacheLockProvider getCacheLockProvider()", "full_signature": "private CacheLockProvider getCacheLockProvider()", "class_method_signature": "BlockingCache.getCacheLockProvider()", "testcase": false, "constructor": false}, {"identifier": "createCacheLockProvider", "parameters": "()", "modifiers": "private", "return": "CacheLockProvider", "signature": "CacheLockProvider createCacheLockProvider()", "full_signature": "private CacheLockProvider createCacheLockProvider()", "class_method_signature": "BlockingCache.createCacheLockProvider()", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "()", "modifiers": "protected", "return": "Ehcache", "signature": "Ehcache getCache()", "full_signature": "protected Ehcache getCache()", "class_method_signature": "BlockingCache.getCache()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Object key)", "modifiers": "@Override public", "return": "Element", "signature": "Element get(final Object key)", "full_signature": "@Override public Element get(final Object key)", "class_method_signature": "BlockingCache.get(final Object key)", "testcase": false, "constructor": false}, {"identifier": "acquiredLockForKey", "parameters": "(final Object key, final Sync lock, final LockType lockType)", "modifiers": "private", "return": "void", "signature": "void acquiredLockForKey(final Object key, final Sync lock, final LockType lockType)", "full_signature": "private void acquiredLockForKey(final Object key, final Sync lock, final LockType lockType)", "class_method_signature": "BlockingCache.acquiredLockForKey(final Object key, final Sync lock, final LockType lockType)", "testcase": false, "constructor": false}, {"identifier": "getLockForKey", "parameters": "(final Object key)", "modifiers": "protected", "return": "Sync", "signature": "Sync getLockForKey(final Object key)", "full_signature": "protected Sync getLockForKey(final Object key)", "class_method_signature": "BlockingCache.getLockForKey(final Object key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Element element)", "modifiers": "@Override public", "return": "void", "signature": "void put(Element element)", "full_signature": "@Override public void put(Element element)", "class_method_signature": "BlockingCache.put(Element element)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Serializable key)", "modifiers": "@Override public", "return": "Element", "signature": "Element get(Serializable key)", "full_signature": "@Override public Element get(Serializable key)", "class_method_signature": "BlockingCache.get(Serializable key)", "testcase": false, "constructor": false}, {"identifier": "liveness", "parameters": "()", "modifiers": "public synchronized", "return": "String", "signature": "String liveness()", "full_signature": "public synchronized String liveness()", "class_method_signature": "BlockingCache.liveness()", "testcase": false, "constructor": false}, {"identifier": "setTimeoutMillis", "parameters": "(int timeoutMillis)", "modifiers": "public", "return": "void", "signature": "void setTimeoutMillis(int timeoutMillis)", "full_signature": "public void setTimeoutMillis(int timeoutMillis)", "class_method_signature": "BlockingCache.setTimeoutMillis(int timeoutMillis)", "testcase": false, "constructor": false}, {"identifier": "getTimeoutMillis", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTimeoutMillis()", "full_signature": "public int getTimeoutMillis()", "class_method_signature": "BlockingCache.getTimeoutMillis()", "testcase": false, "constructor": false}, {"identifier": "registerCacheLoader", "parameters": "(CacheLoader cacheLoader)", "modifiers": "@Override public", "return": "void", "signature": "void registerCacheLoader(CacheLoader cacheLoader)", "full_signature": "@Override public void registerCacheLoader(CacheLoader cacheLoader)", "class_method_signature": "BlockingCache.registerCacheLoader(CacheLoader cacheLoader)", "testcase": false, "constructor": false}, {"identifier": "unregisterCacheLoader", "parameters": "(CacheLoader cacheLoader)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterCacheLoader(CacheLoader cacheLoader)", "full_signature": "@Override public void unregisterCacheLoader(CacheLoader cacheLoader)", "class_method_signature": "BlockingCache.unregisterCacheLoader(CacheLoader cacheLoader)", "testcase": false, "constructor": false}, {"identifier": "getWithLoader", "parameters": "(Object key, CacheLoader loader, Object loaderArgument)", "modifiers": "@Override public", "return": "Element", "signature": "Element getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "full_signature": "@Override public Element getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "class_method_signature": "BlockingCache.getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "testcase": false, "constructor": false}, {"identifier": "getAllWithLoader", "parameters": "(Collection keys, Object loaderArgument)", "modifiers": "@Override public", "return": "Map", "signature": "Map getAllWithLoader(Collection keys, Object loaderArgument)", "full_signature": "@Override public Map getAllWithLoader(Collection keys, Object loaderArgument)", "class_method_signature": "BlockingCache.getAllWithLoader(Collection keys, Object loaderArgument)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Object key)", "modifiers": "@Override public", "return": "void", "signature": "void load(Object key)", "full_signature": "@Override public void load(Object key)", "class_method_signature": "BlockingCache.load(Object key)", "testcase": false, "constructor": false}, {"identifier": "loadAll", "parameters": "(Collection keys, Object argument)", "modifiers": "@Override public", "return": "void", "signature": "void loadAll(Collection keys, Object argument)", "full_signature": "@Override public void loadAll(Collection keys, Object argument)", "class_method_signature": "BlockingCache.loadAll(Collection keys, Object argument)", "testcase": false, "constructor": false}], "file": "tags/ehcache-core-2.4.4/src/main/java/net/sf/ehcache/constructs/blocking/BlockingCache.java"}, "focal_method": {"identifier": "getWithLoader", "parameters": "(Object key, CacheLoader loader, Object loaderArgument)", "modifiers": "@Override public", "return": "Element", "body": "@Override\n    public Element getWithLoader(Object key, CacheLoader loader, Object loaderArgument) throws CacheException {\n        throw new CacheException(\"This method is not appropriate for a Blocking Cache\");\n    }", "signature": "Element getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "full_signature": "@Override public Element getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "class_method_signature": "BlockingCache.getWithLoader(Object key, CacheLoader loader, Object loaderArgument)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}