{"test_class": {"identifier": "ConfigurationFactoryTest", "superclass": "extends AbstractCacheTest", "interfaces": "", "fields": [{"original_string": "private static final int CACHES_IN_TEST_EHCACHE = 15;", "modifier": "private static final", "type": "int", "declarator": "CACHES_IN_TEST_EHCACHE = 15", "var_name": "CACHES_IN_TEST_EHCACHE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationFactoryTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationFactoryTest.class.getName())", "var_name": "LOG"}], "file": "tags/ehcache-2.10.0-16-pipeline/ehcache-core/src/test/java/net/sf/ehcache/config/ConfigurationFactoryTest.java"}, "test_case": {"identifier": "testLoadConfigurationWithReplacement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadConfigurationWithReplacement() throws Exception {\n        System.setProperty(\"multicastGroupPort\", \"4446\");\n        System.setProperty(\"serverAndPort\", \"server.com:9510\");\n        File file = new File(TEST_CONFIG_DIR + \"ehcache-replacement.xml\");\n        Configuration configuration = ConfigurationFactory.parseConfiguration(file);\n        ConfigurationHelper configurationHelper = new ConfigurationHelper(manager, configuration);\n\n\n        //Check disk path  <diskStore path=\"/tmp\"/>\n        assertNotSame(System.getProperty(\"java.io.tmpdir\"), configurationHelper.getDiskStorePath());\n        assertTrue(configuration.getCacheManagerPeerProviderFactoryConfiguration().get(0)\n                .getProperties().indexOf(\"multicastGroupPort=4446\") != -1);\n\n\n    }", "signature": "void testLoadConfigurationWithReplacement()", "full_signature": "@Test public void testLoadConfigurationWithReplacement()", "class_method_signature": "ConfigurationFactoryTest.testLoadConfigurationWithReplacement()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "parseConfiguration", "assertNotSame", "getProperty", "getDiskStorePath", "assertTrue", "indexOf", "getProperties", "get", "getCacheManagerPeerProviderFactoryConfiguration"]}, "focal_class": {"identifier": "ConfigurationFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationFactory.class.getName())", "var_name": "LOG"}, {"original_string": "private static final String DEFAULT_CLASSPATH_CONFIGURATION_FILE = \"/ehcache.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CLASSPATH_CONFIGURATION_FILE = \"/ehcache.xml\"", "var_name": "DEFAULT_CLASSPATH_CONFIGURATION_FILE"}, {"original_string": "private static final String FAILSAFE_CLASSPATH_CONFIGURATION_FILE = \"/ehcache-failsafe.xml\";", "modifier": "private static final", "type": "String", "declarator": "FAILSAFE_CLASSPATH_CONFIGURATION_FILE = \"/ehcache-failsafe.xml\"", "var_name": "FAILSAFE_CLASSPATH_CONFIGURATION_FILE"}], "methods": [{"identifier": "ConfigurationFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConfigurationFactory()", "full_signature": "private  ConfigurationFactory()", "class_method_signature": "ConfigurationFactory.ConfigurationFactory()", "testcase": false, "constructor": true}, {"identifier": "parseConfiguration", "parameters": "(final File file)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final File file)", "full_signature": "public static Configuration parseConfiguration(final File file)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final File file)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final URL url)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final URL url)", "full_signature": "public static Configuration parseConfiguration(final URL url)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final URL url)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "()", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration()", "full_signature": "public static Configuration parseConfiguration()", "class_method_signature": "ConfigurationFactory.parseConfiguration()", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final InputStream inputStream)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final InputStream inputStream)", "full_signature": "public static Configuration parseConfiguration(final InputStream inputStream)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseCacheConfiguration", "parameters": "(String xmlString)", "modifiers": "public static", "return": "CacheConfiguration", "signature": "CacheConfiguration parseCacheConfiguration(String xmlString)", "full_signature": "public static CacheConfiguration parseCacheConfiguration(String xmlString)", "class_method_signature": "ConfigurationFactory.parseCacheConfiguration(String xmlString)", "testcase": false, "constructor": false}, {"identifier": "translateSystemProperties", "parameters": "(InputStream inputStream)", "modifiers": "private static", "return": "InputStream", "signature": "InputStream translateSystemProperties(InputStream inputStream)", "full_signature": "private static InputStream translateSystemProperties(InputStream inputStream)", "class_method_signature": "ConfigurationFactory.translateSystemProperties(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "extractPropertyTokens", "parameters": "(String sourceDocument)", "modifiers": "static", "return": "Set", "signature": "Set extractPropertyTokens(String sourceDocument)", "full_signature": "static Set extractPropertyTokens(String sourceDocument)", "class_method_signature": "ConfigurationFactory.extractPropertyTokens(String sourceDocument)", "testcase": false, "constructor": false}], "file": "tags/ehcache-2.10.0-16-pipeline/ehcache-core/src/main/java/net/sf/ehcache/config/ConfigurationFactory.java"}, "focal_method": {"identifier": "parseConfiguration", "parameters": "(final File file)", "modifiers": "public static", "return": "Configuration", "body": "public static Configuration parseConfiguration(final File file) throws CacheException {\n        if (file == null) {\n            throw new CacheException(\"Attempt to configure ehcache from null file.\");\n        }\n\n        LOG.debug(\"Configuring ehcache from file: {}\", file);\n        Configuration configuration = null;\n        InputStream input = null;\n        try {\n            input = new BufferedInputStream(new FileInputStream(file));\n            configuration = parseConfiguration(input);\n        } catch (Exception e) {\n            throw new CacheException(\"Error configuring from \" + file + \". Initial cause was \" + e.getMessage(), e);\n        } finally {\n            try {\n                if (input != null) {\n                    input.close();\n                }\n            } catch (IOException e) {\n                LOG.error(\"IOException while closing configuration input stream. Error was \" + e.getMessage());\n            }\n        }\n        configuration.setSource(ConfigurationSource.getConfigurationSource(file));\n        return configuration;\n    }", "signature": "Configuration parseConfiguration(final File file)", "full_signature": "public static Configuration parseConfiguration(final File file)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final File file)", "testcase": false, "constructor": false, "invocations": ["debug", "parseConfiguration", "getMessage", "close", "error", "getMessage", "setSource", "getConfigurationSource"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}