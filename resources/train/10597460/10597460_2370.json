{"test_class": {"identifier": "CopyStrategyHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReadWriteCopyStrategy<Element> copyStrategy;", "modifier": "private", "type": "ReadWriteCopyStrategy<Element>", "declarator": "copyStrategy", "var_name": "copyStrategy"}], "file": "tags/ehcache-2.8.1/ehcache-core/src/test/java/net/sf/ehcache/store/CopyStrategyHandlerTest.java"}, "test_case": {"identifier": "given_copy_on_read_and_write_when_copyElementForReadIfNeeded_with_Element_then_returns_different", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void given_copy_on_read_and_write_when_copyElementForReadIfNeeded_with_Element_then_returns_different() {\n        Element element = new Element(\"key\", \"value\");\n        Element serial = new Element(\"key\", new byte[] { });\n        when(copyStrategy.copyForRead(serial)).thenReturn(new Element(\"key\", \"value\"));\n        CopyStrategyHandler copyStrategyHandler = new CopyStrategyHandler(true, true, copyStrategy);\n        assertThat(copyStrategyHandler.copyElementForReadIfNeeded(serial), is(element));\n        verify(copyStrategy).copyForRead(serial);\n    }", "signature": "void given_copy_on_read_and_write_when_copyElementForReadIfNeeded_with_Element_then_returns_different()", "full_signature": "@Test public void given_copy_on_read_and_write_when_copyElementForReadIfNeeded_with_Element_then_returns_different()", "class_method_signature": "CopyStrategyHandlerTest.given_copy_on_read_and_write_when_copyElementForReadIfNeeded_with_Element_then_returns_different()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "copyForRead", "assertThat", "copyElementForReadIfNeeded", "is", "copyForRead", "verify"]}, "focal_class": {"identifier": "CopyStrategyHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final boolean copyOnRead;", "modifier": "private final", "type": "boolean", "declarator": "copyOnRead", "var_name": "copyOnRead"}, {"original_string": "private final boolean copyOnWrite;", "modifier": "private final", "type": "boolean", "declarator": "copyOnWrite", "var_name": "copyOnWrite"}, {"original_string": "private final ReadWriteCopyStrategy<Element> copyStrategy;", "modifier": "private final", "type": "ReadWriteCopyStrategy<Element>", "declarator": "copyStrategy", "var_name": "copyStrategy"}], "methods": [{"identifier": "CopyStrategyHandler", "parameters": "(boolean copyOnRead, boolean copyOnWrite, ReadWriteCopyStrategy<Element> copyStrategy)", "modifiers": "public", "return": "", "signature": " CopyStrategyHandler(boolean copyOnRead, boolean copyOnWrite, ReadWriteCopyStrategy<Element> copyStrategy)", "full_signature": "public  CopyStrategyHandler(boolean copyOnRead, boolean copyOnWrite, ReadWriteCopyStrategy<Element> copyStrategy)", "class_method_signature": "CopyStrategyHandler.CopyStrategyHandler(boolean copyOnRead, boolean copyOnWrite, ReadWriteCopyStrategy<Element> copyStrategy)", "testcase": false, "constructor": true}, {"identifier": "copyElementForReadIfNeeded", "parameters": "(Element element)", "modifiers": "public", "return": "Element", "signature": "Element copyElementForReadIfNeeded(Element element)", "full_signature": "public Element copyElementForReadIfNeeded(Element element)", "class_method_signature": "CopyStrategyHandler.copyElementForReadIfNeeded(Element element)", "testcase": false, "constructor": false}, {"identifier": "copyElementForWriteIfNeeded", "parameters": "(Element element)", "modifiers": "", "return": "Element", "signature": "Element copyElementForWriteIfNeeded(Element element)", "full_signature": " Element copyElementForWriteIfNeeded(Element element)", "class_method_signature": "CopyStrategyHandler.copyElementForWriteIfNeeded(Element element)", "testcase": false, "constructor": false}, {"identifier": "copyElementForRemovalIfNeeded", "parameters": "(Element element)", "modifiers": "", "return": "Element", "signature": "Element copyElementForRemovalIfNeeded(Element element)", "full_signature": " Element copyElementForRemovalIfNeeded(Element element)", "class_method_signature": "CopyStrategyHandler.copyElementForRemovalIfNeeded(Element element)", "testcase": false, "constructor": false}, {"identifier": "isCopyActive", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isCopyActive()", "full_signature": " boolean isCopyActive()", "class_method_signature": "CopyStrategyHandler.isCopyActive()", "testcase": false, "constructor": false}], "file": "tags/ehcache-2.8.1/ehcache-core/src/main/java/net/sf/ehcache/store/CopyStrategyHandler.java"}, "focal_method": {"identifier": "copyElementForReadIfNeeded", "parameters": "(Element element)", "modifiers": "public", "return": "Element", "body": "public Element copyElementForReadIfNeeded(Element element) {\n        if (element == null) {\n            return null;\n        }\n\n        if (copyOnRead && copyOnWrite) {\n            return copyStrategy.copyForRead(element);\n        } else if (copyOnRead) {\n            return copyStrategy.copyForRead(copyStrategy.copyForWrite(element));\n        } else {\n            return element;\n        }\n    }", "signature": "Element copyElementForReadIfNeeded(Element element)", "full_signature": "public Element copyElementForReadIfNeeded(Element element)", "class_method_signature": "CopyStrategyHandler.copyElementForReadIfNeeded(Element element)", "testcase": false, "constructor": false, "invocations": ["copyForRead", "copyForRead", "copyForWrite"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}