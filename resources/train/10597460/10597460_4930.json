{"test_class": {"identifier": "SelfPopulatingCacheTest", "superclass": "extends CacheTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SelfPopulatingCacheTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SelfPopulatingCacheTest.class.getName())", "var_name": "LOG"}, {"original_string": "protected CacheManager manager;", "modifier": "protected", "type": "CacheManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "protected SelfPopulatingCache selfPopulatingCache;", "modifier": "protected", "type": "SelfPopulatingCache", "declarator": "selfPopulatingCache", "var_name": "selfPopulatingCache"}, {"original_string": "protected Ehcache cache;", "modifier": "protected", "type": "Ehcache", "declarator": "cache", "var_name": "cache"}, {"original_string": "protected volatile int cacheEntryFactoryRequests;", "modifier": "protected volatile", "type": "int", "declarator": "cacheEntryFactoryRequests", "var_name": "cacheEntryFactoryRequests"}], "file": "tags/ehcache-core-2.0.1/src/test/java/net/sf/ehcache/constructs/blocking/SelfPopulatingCacheTest.java"}, "test_case": {"identifier": "testFetchFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFetchFail() throws Exception {\n        final Exception exception = new Exception(\"Failed.\");\n        final CacheEntryFactory factory = new CacheEntryFactory() {\n            public Object createEntry(final Object key) throws Exception {\n                throw exception;\n            }\n        };\n        selfPopulatingCache = new SelfPopulatingCache(cache, factory);\n\n        // Lookup\n        try {\n            selfPopulatingCache.get(\"key\");\n            fail();\n        } catch (final Exception e) {\n            Thread.sleep(20);\n            // Check the error\n            assertEquals(\"Could not fetch object for cache entry with key \\\"key\\\".\", e.getMessage());\n        }\n    }", "signature": "void testFetchFail()", "full_signature": "@Test public void testFetchFail()", "class_method_signature": "SelfPopulatingCacheTest.testFetchFail()", "testcase": true, "constructor": false, "invocations": ["get", "fail", "sleep", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "SelfPopulatingCache", "superclass": "extends BlockingCache", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SelfPopulatingCache.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SelfPopulatingCache.class.getName())", "var_name": "LOG"}, {"original_string": "protected final CacheEntryFactory factory;", "modifier": "protected final", "type": "CacheEntryFactory", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "SelfPopulatingCache", "parameters": "(final Ehcache cache, final CacheEntryFactory factory)", "modifiers": "public", "return": "", "signature": " SelfPopulatingCache(final Ehcache cache, final CacheEntryFactory factory)", "full_signature": "public  SelfPopulatingCache(final Ehcache cache, final CacheEntryFactory factory)", "class_method_signature": "SelfPopulatingCache.SelfPopulatingCache(final Ehcache cache, final CacheEntryFactory factory)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(final Object key)", "modifiers": "public", "return": "Element", "signature": "Element get(final Object key)", "full_signature": "public Element get(final Object key)", "class_method_signature": "SelfPopulatingCache.get(final Object key)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refresh()", "full_signature": "public void refresh()", "class_method_signature": "SelfPopulatingCache.refresh()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(boolean quiet)", "modifiers": "public", "return": "void", "signature": "void refresh(boolean quiet)", "full_signature": "public void refresh(boolean quiet)", "class_method_signature": "SelfPopulatingCache.refresh(boolean quiet)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(Object key)", "modifiers": "public", "return": "Element", "signature": "Element refresh(Object key)", "full_signature": "public Element refresh(Object key)", "class_method_signature": "SelfPopulatingCache.refresh(Object key)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(Object key, boolean quiet)", "modifiers": "public", "return": "Element", "signature": "Element refresh(Object key, boolean quiet)", "full_signature": "public Element refresh(Object key, boolean quiet)", "class_method_signature": "SelfPopulatingCache.refresh(Object key, boolean quiet)", "testcase": false, "constructor": false}, {"identifier": "refreshElement", "parameters": "(final Element element, Ehcache backingCache)", "modifiers": "protected", "return": "void", "signature": "void refreshElement(final Element element, Ehcache backingCache)", "full_signature": "protected void refreshElement(final Element element, Ehcache backingCache)", "class_method_signature": "SelfPopulatingCache.refreshElement(final Element element, Ehcache backingCache)", "testcase": false, "constructor": false}, {"identifier": "refreshElement", "parameters": "(final Element element, Ehcache backingCache, boolean quiet)", "modifiers": "protected", "return": "Element", "signature": "Element refreshElement(final Element element, Ehcache backingCache, boolean quiet)", "full_signature": "protected Element refreshElement(final Element element, Ehcache backingCache, boolean quiet)", "class_method_signature": "SelfPopulatingCache.refreshElement(final Element element, Ehcache backingCache, boolean quiet)", "testcase": false, "constructor": false}, {"identifier": "makeAndCheckElement", "parameters": "(Object key, Object value)", "modifiers": "protected static", "return": "Element", "signature": "Element makeAndCheckElement(Object key, Object value)", "full_signature": "protected static Element makeAndCheckElement(Object key, Object value)", "class_method_signature": "SelfPopulatingCache.makeAndCheckElement(Object key, Object value)", "testcase": false, "constructor": false}], "file": "tags/ehcache-core-2.0.1/src/main/java/net/sf/ehcache/constructs/blocking/SelfPopulatingCache.java"}, "focal_method": {"identifier": "get", "parameters": "(final Object key)", "modifiers": "public", "return": "Element", "body": "public Element get(final Object key) throws LockTimeoutException {\n\n        try {\n            //if null will lock here\n            Element element = super.get(key);\n            if (element == null) {\n                // Value not cached - fetch it\n                Object value = factory.createEntry(key);\n                element = makeAndCheckElement(key, value);\n                put(element);\n            }\n            return element;\n        } catch (LockTimeoutException e) {\n            //do not release the lock, because you never acquired it\n            String message = \"Timeout after \" + timeoutMillis + \" waiting on another thread \" +\n                    \"to fetch object for cache entry \\\"\" + key + \"\\\".\";\n            throw new LockTimeoutException(message, e);\n\n        } catch (final Throwable throwable) {\n            // Could not fetch - Ditch the entry from the cache and rethrow\n\n            //release the lock you acquired\n            put(new Element(key, null));\n            throw new CacheException(\"Could not fetch object for cache entry with key \\\"\" + key + \"\\\".\", throwable);\n        }\n    }", "signature": "Element get(final Object key)", "full_signature": "public Element get(final Object key)", "class_method_signature": "SelfPopulatingCache.get(final Object key)", "testcase": false, "constructor": false, "invocations": ["get", "createEntry", "makeAndCheckElement", "put", "put"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}