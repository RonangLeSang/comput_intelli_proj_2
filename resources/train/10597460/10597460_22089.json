{"test_class": {"identifier": "KeySnapshotterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KEY = \"Key\";", "modifier": "private static final", "type": "String", "declarator": "KEY = \"Key\"", "var_name": "KEY"}, {"original_string": "private static final long MAX_KEY = 10000;", "modifier": "private static final", "type": "long", "declarator": "MAX_KEY = 10000", "var_name": "MAX_KEY"}, {"original_string": "private static final String DUMPS_DIRECTORY = System.getProperty(\"java.io.tmpdir\") + File.separator + \"dumps\";", "modifier": "private static final", "type": "String", "declarator": "DUMPS_DIRECTORY = System.getProperty(\"java.io.tmpdir\") + File.separator + \"dumps\"", "var_name": "DUMPS_DIRECTORY"}], "file": "branches/ehcache-core-2.5.x/src/test/java/net/sf/ehcache/terracotta/KeySnapshotterTest.java"}, "test_case": {"identifier": "testDisposesProperlyButFinishes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDisposesProperlyButFinishes() throws BrokenBarrierException, InterruptedException, IOException {\n        CacheManager manager = new CacheManager(new Configuration().name(\"testDisposesProperlyImmediately\"));\n        try {\n            deleteFolder(new File(DUMPS_DIRECTORY));\n            final RotatingSnapshotFile rotatingSnapshotFile = new RotatingSnapshotFile(DUMPS_DIRECTORY, \"testingInterruptFinishes\");\n            final TerracottaStore mockedTcStore = mock(TerracottaStore.class);\n            final CyclicBarrier barrier = new CyclicBarrier(2);\n            final Set mockedSet = mock(Set.class);\n            final AtomicLong counter = new AtomicLong(0);\n            when(mockedSet.iterator()).thenAnswer(new Answer<Iterator>() {\n                public Iterator answer(final InvocationOnMock invocationOnMock) throws Throwable {\n                    return new Iterator<Object>() {\n\n                        public boolean hasNext() {\n                            return counter.get() < MAX_KEY;\n                        }\n\n                        public Object next() {\n                            return KEY + counter.getAndIncrement();\n                        }\n\n                        public void remove() {\n                            //\n                        }\n                    };\n                }\n            });\n            when(mockedTcStore.getLocalKeys()).thenAnswer(new Answer<Set>() {\n                public Set answer(final InvocationOnMock invocationOnMock) throws Throwable {\n                    barrier.await();\n                    return mockedSet;\n                }\n            });\n            KeySnapshotter snapshotter = new KeySnapshotter(createFakeTcClusteredCache(manager, mockedTcStore), 1, true, rotatingSnapshotFile);\n            barrier.await();\n            snapshotter.dispose(false);\n            assertThat(counter.get(), is(MAX_KEY));\n            final Set<Object> objects = new HashSet<Object>(rotatingSnapshotFile.readAll());\n            assertThat(objects.size(), is((int) MAX_KEY));\n            for(int i = 0; i < MAX_KEY; i++) {\n                objects.remove(KEY + i);\n            }\n            assertThat(objects.isEmpty(), is(true));\n        } finally {\n            manager.shutdown();\n        }\n    }", "signature": "void testDisposesProperlyButFinishes()", "full_signature": "@Test public void testDisposesProperlyButFinishes()", "class_method_signature": "KeySnapshotterTest.testDisposesProperlyButFinishes()", "testcase": true, "constructor": false, "invocations": ["name", "deleteFolder", "mock", "mock", "thenAnswer", "when", "iterator", "get", "getAndIncrement", "thenAnswer", "when", "getLocalKeys", "await", "createFakeTcClusteredCache", "await", "dispose", "assertThat", "get", "is", "readAll", "assertThat", "size", "is", "remove", "assertThat", "isEmpty", "is", "shutdown"]}, "focal_class": {"identifier": "KeySnapshotter", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KeySnapshotter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KeySnapshotter.class.getName())", "var_name": "LOG"}, {"original_string": "private static final int POOL_SIZE = Integer.getInteger(\"net.sf.ehcache.terracotta.KeySnapshotter.threadPoolSize\", 10);", "modifier": "private static final", "type": "int", "declarator": "POOL_SIZE = Integer.getInteger(\"net.sf.ehcache.terracotta.KeySnapshotter.threadPoolSize\", 10)", "var_name": "POOL_SIZE"}, {"original_string": "private static final WeakIdentityConcurrentMap<CacheManager, ScheduledExecutorService> INSTANCES =\n        new WeakIdentityConcurrentMap<CacheManager, ScheduledExecutorService>(\n            new WeakIdentityConcurrentMap.CleanUpTask<ScheduledExecutorService>() {\n                public void cleanUp(final ScheduledExecutorService executor) {\n                    executor.shutdownNow();\n                }\n            });", "modifier": "private static final", "type": "WeakIdentityConcurrentMap<CacheManager, ScheduledExecutorService>", "declarator": "INSTANCES =\n        new WeakIdentityConcurrentMap<CacheManager, ScheduledExecutorService>(\n            new WeakIdentityConcurrentMap.CleanUpTask<ScheduledExecutorService>() {\n                public void cleanUp(final ScheduledExecutorService executor) {\n                    executor.shutdownNow();\n                }\n            })", "var_name": "INSTANCES"}, {"original_string": "private final String cacheName;", "modifier": "private final", "type": "String", "declarator": "cacheName", "var_name": "cacheName"}, {"original_string": "private final TerracottaStore tcStore;", "modifier": "private final", "type": "TerracottaStore", "declarator": "tcStore", "var_name": "tcStore"}, {"original_string": "private final RotatingSnapshotFile rotatingWriter;", "modifier": "private final", "type": "RotatingSnapshotFile", "declarator": "rotatingWriter", "var_name": "rotatingWriter"}, {"original_string": "private final Thread thread;", "modifier": "private final", "type": "Thread", "declarator": "thread", "var_name": "thread"}, {"original_string": "private volatile Runnable onSnapshot;", "modifier": "private volatile", "type": "Runnable", "declarator": "onSnapshot", "var_name": "onSnapshot"}], "methods": [{"identifier": "KeySnapshotter", "parameters": "(final Ehcache cache, final long interval,\n                   final boolean doKeySnapshotOnDedicatedThread,\n                   final RotatingSnapshotFile rotatingWriter)", "modifiers": "", "return": "", "signature": " KeySnapshotter(final Ehcache cache, final long interval,\n                   final boolean doKeySnapshotOnDedicatedThread,\n                   final RotatingSnapshotFile rotatingWriter)", "full_signature": "  KeySnapshotter(final Ehcache cache, final long interval,\n                   final boolean doKeySnapshotOnDedicatedThread,\n                   final RotatingSnapshotFile rotatingWriter)", "class_method_signature": "KeySnapshotter.KeySnapshotter(final Ehcache cache, final long interval,\n                   final boolean doKeySnapshotOnDedicatedThread,\n                   final RotatingSnapshotFile rotatingWriter)", "testcase": false, "constructor": true}, {"identifier": "dispose", "parameters": "(boolean immediately)", "modifiers": "", "return": "void", "signature": "void dispose(boolean immediately)", "full_signature": " void dispose(boolean immediately)", "class_method_signature": "KeySnapshotter.dispose(boolean immediately)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "KeySnapshotter.run()", "testcase": false, "constructor": false}, {"identifier": "onSnapshot", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onSnapshot()", "full_signature": "private void onSnapshot()", "class_method_signature": "KeySnapshotter.onSnapshot()", "testcase": false, "constructor": false}, {"identifier": "getKnownCacheManagers", "parameters": "()", "modifiers": "static", "return": "Collection<CacheManager>", "signature": "Collection<CacheManager> getKnownCacheManagers()", "full_signature": "static Collection<CacheManager> getKnownCacheManagers()", "class_method_signature": "KeySnapshotter.getKnownCacheManagers()", "testcase": false, "constructor": false}, {"identifier": "doSnapshot", "parameters": "()", "modifiers": "", "return": "void", "signature": "void doSnapshot()", "full_signature": " void doSnapshot()", "class_method_signature": "KeySnapshotter.doSnapshot()", "testcase": false, "constructor": false}, {"identifier": "setOnSnapshot", "parameters": "(final Runnable onSnapshot)", "modifiers": "", "return": "void", "signature": "void setOnSnapshot(final Runnable onSnapshot)", "full_signature": " void setOnSnapshot(final Runnable onSnapshot)", "class_method_signature": "KeySnapshotter.setOnSnapshot(final Runnable onSnapshot)", "testcase": false, "constructor": false}, {"identifier": "getCacheName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCacheName()", "full_signature": "public String getCacheName()", "class_method_signature": "KeySnapshotter.getCacheName()", "testcase": false, "constructor": false}], "file": "branches/ehcache-core-2.5.x/src/main/java/net/sf/ehcache/terracotta/KeySnapshotter.java"}, "focal_method": {"identifier": "dispose", "parameters": "(boolean immediately)", "modifiers": "", "return": "void", "body": "void dispose(boolean immediately) {\n        if (thread != null) {\n            rotatingWriter.setShutdownOnThreadInterrupted(immediately);\n            thread.interrupt();\n            try {\n                thread.join();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }", "signature": "void dispose(boolean immediately)", "full_signature": " void dispose(boolean immediately)", "class_method_signature": "KeySnapshotter.dispose(boolean immediately)", "testcase": false, "constructor": false, "invocations": ["setShutdownOnThreadInterrupted", "interrupt", "join", "interrupt", "currentThread"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}