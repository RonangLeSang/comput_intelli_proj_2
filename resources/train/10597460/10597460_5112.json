{"test_class": {"identifier": "DeleteOperationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String OUR_KEY = \"ourKey\";", "modifier": "private static final", "type": "String", "declarator": "OUR_KEY = \"ourKey\"", "var_name": "OUR_KEY"}, {"original_string": "private static final String OTHER_KEY = \"otherKey\";", "modifier": "private static final", "type": "String", "declarator": "OTHER_KEY = \"otherKey\"", "var_name": "OTHER_KEY"}], "file": "tags/ehcache-core-2.2.1/src/test/java/net/sf/ehcache/writer/writebehind/operations/DeleteOperationTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() throws Exception {\n\n        DeleteOperation op1 = new DeleteOperation(new CacheEntry(OUR_KEY, new Element(OUR_KEY, \"someValue\")));\n        DeleteOperation op2 = new DeleteOperation(new CacheEntry(OUR_KEY, new Element(OUR_KEY, \"someOtherValue\")));\n        DeleteOperation op3 = new DeleteOperation(new CacheEntry(OTHER_KEY, new Element(OTHER_KEY, \"someOtherValue\")));\n\n        assertThat(\"Two delete operations for the same key are to be considered equal\", op1.equals(op2), is(true));\n        assertThat(\"Two delete operations for the different keys are not to be equal\", op1.equals(op3), is(false));\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "DeleteOperationTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertThat", "equals", "is", "assertThat", "equals", "is"]}, "focal_class": {"identifier": "DeleteOperation", "superclass": "", "interfaces": "implements SingleOperation", "fields": [{"original_string": "private final CacheEntry entry;", "modifier": "private final", "type": "CacheEntry", "declarator": "entry", "var_name": "entry"}, {"original_string": "private final long creationTime;", "modifier": "private final", "type": "long", "declarator": "creationTime", "var_name": "creationTime"}], "methods": [{"identifier": "DeleteOperation", "parameters": "(CacheEntry entry)", "modifiers": "public", "return": "", "signature": " DeleteOperation(CacheEntry entry)", "full_signature": "public  DeleteOperation(CacheEntry entry)", "class_method_signature": "DeleteOperation.DeleteOperation(CacheEntry entry)", "testcase": false, "constructor": true}, {"identifier": "DeleteOperation", "parameters": "(CacheEntry entry, long creationTime)", "modifiers": "public", "return": "", "signature": " DeleteOperation(CacheEntry entry, long creationTime)", "full_signature": "public  DeleteOperation(CacheEntry entry, long creationTime)", "class_method_signature": "DeleteOperation.DeleteOperation(CacheEntry entry, long creationTime)", "testcase": false, "constructor": true}, {"identifier": "duplicateCacheEntryElement", "parameters": "(CacheEntry entry)", "modifiers": "private", "return": "CacheEntry", "signature": "CacheEntry duplicateCacheEntryElement(CacheEntry entry)", "full_signature": "private CacheEntry duplicateCacheEntryElement(CacheEntry entry)", "class_method_signature": "DeleteOperation.duplicateCacheEntryElement(CacheEntry entry)", "testcase": false, "constructor": false}, {"identifier": "performSingleOperation", "parameters": "(CacheWriter cacheWriter)", "modifiers": "public", "return": "void", "signature": "void performSingleOperation(CacheWriter cacheWriter)", "full_signature": "public void performSingleOperation(CacheWriter cacheWriter)", "class_method_signature": "DeleteOperation.performSingleOperation(CacheWriter cacheWriter)", "testcase": false, "constructor": false}, {"identifier": "createBatchOperation", "parameters": "(List<SingleOperation> operations)", "modifiers": "public", "return": "BatchOperation", "signature": "BatchOperation createBatchOperation(List<SingleOperation> operations)", "full_signature": "public BatchOperation createBatchOperation(List<SingleOperation> operations)", "class_method_signature": "DeleteOperation.createBatchOperation(List<SingleOperation> operations)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getKey()", "full_signature": "public Object getKey()", "class_method_signature": "DeleteOperation.getKey()", "testcase": false, "constructor": false}, {"identifier": "getCreationTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCreationTime()", "full_signature": "public long getCreationTime()", "class_method_signature": "DeleteOperation.getCreationTime()", "testcase": false, "constructor": false}, {"identifier": "getEntry", "parameters": "()", "modifiers": "public", "return": "CacheEntry", "signature": "CacheEntry getEntry()", "full_signature": "public CacheEntry getEntry()", "class_method_signature": "DeleteOperation.getEntry()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "SingleOperationType", "signature": "SingleOperationType getType()", "full_signature": "public SingleOperationType getType()", "class_method_signature": "DeleteOperation.getType()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "DeleteOperation.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DeleteOperation.hashCode()", "testcase": false, "constructor": false}], "file": "tags/ehcache-core-2.2.1/src/main/java/net/sf/ehcache/writer/writebehind/operations/DeleteOperation.java"}, "focal_method": {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        final DeleteOperation that = (DeleteOperation) o;\n\n        return entry.getKey().equals(that.getKey());\n    }", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "DeleteOperation.equals(final Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "getKey", "getKey"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}