{"test_class": {"identifier": "ConfigurationFactoryTest", "superclass": "extends AbstractCacheTest", "interfaces": "", "fields": [{"original_string": "private static final int CACHES_IN_TEST_EHCACHE = 13;", "modifier": "private static final", "type": "int", "declarator": "CACHES_IN_TEST_EHCACHE = 13", "var_name": "CACHES_IN_TEST_EHCACHE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationFactoryTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationFactoryTest.class.getName())", "var_name": "LOG"}], "file": "tags/ehcache-1.6.0-rc1/core/src/site/apt/index.apt/src/test/java/net/sf/ehcache/config/ConfigurationFactoryTest.java"}, "test_case": {"identifier": "testLoadConfigurationFromFileDistribution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadConfigurationFromFileDistribution() throws Exception {\n        File file = new File(TEST_CONFIG_DIR + \"distribution/ehcache-distributed1.xml\");\n        Configuration configuration = ConfigurationFactory.parseConfiguration(file);\n        ConfigurationHelper configurationHelper = new ConfigurationHelper(manager, configuration);\n\n        //Check CacheManagerPeerProvider\n        Map<String,CacheManagerPeerProvider> peerProviders = configurationHelper.createCachePeerProviders();\n        CacheManagerPeerProvider peerProvider = peerProviders.get(\"RMI\");\n\n\n        //Check TTL\n        assertTrue(peerProvider instanceof MulticastRMICacheManagerPeerProvider);\n        assertEquals(new Integer(64), ((MulticastRMICacheManagerPeerProvider) peerProvider).getHeartBeatSender().getTimeToLive());\n\n\n        //check CacheManagerPeerListener\n        Map<String, CacheManagerPeerListener> peerListeners = configurationHelper.createCachePeerListeners();\n\n        //should be one in this config\n        for (CacheManagerPeerListener peerListener : peerListeners.values()) {\n            assertTrue(peerListener instanceof RMICacheManagerPeerListener);\n        }\n\n        //Check caches. Configuration should have completed\n        assertEquals(61, configurationHelper.createCaches().size());\n\n        Ehcache sampleCache1 = configurationHelper.createCacheFromName(\"sampleCache1\");\n        Set listeners = sampleCache1.getCacheEventNotificationService().getCacheEventListeners();\n        assertEquals(2, listeners.size());\n        for (Iterator iterator = listeners.iterator(); iterator.hasNext();) {\n            CacheEventListener cacheEventListener = (CacheEventListener) iterator.next();\n            assertTrue(cacheEventListener instanceof RMIAsynchronousCacheReplicator || cacheEventListener\n                    instanceof CountingCacheEventListener);\n        }\n\n        BootstrapCacheLoader bootstrapCacheLoader = sampleCache1.getBootstrapCacheLoader();\n        assertNotNull(bootstrapCacheLoader);\n        assertEquals(RMIBootstrapCacheLoader.class, bootstrapCacheLoader.getClass());\n        assertEquals(true, bootstrapCacheLoader.isAsynchronous());\n        assertEquals(5000000, ((RMIBootstrapCacheLoader) bootstrapCacheLoader).getMaximumChunkSizeBytes());\n\n    }", "signature": "void testLoadConfigurationFromFileDistribution()", "full_signature": "@Test public void testLoadConfigurationFromFileDistribution()", "class_method_signature": "ConfigurationFactoryTest.testLoadConfigurationFromFileDistribution()", "testcase": true, "constructor": false, "invocations": ["parseConfiguration", "createCachePeerProviders", "get", "assertTrue", "assertEquals", "getTimeToLive", "getHeartBeatSender", "createCachePeerListeners", "values", "assertTrue", "assertEquals", "size", "createCaches", "createCacheFromName", "getCacheEventListeners", "getCacheEventNotificationService", "assertEquals", "size", "iterator", "hasNext", "next", "assertTrue", "getBootstrapCacheLoader", "assertNotNull", "assertEquals", "getClass", "assertEquals", "isAsynchronous", "assertEquals", "getMaximumChunkSizeBytes"]}, "focal_class": {"identifier": "ConfigurationFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationFactory.class.getName())", "var_name": "LOG"}, {"original_string": "private static final String DEFAULT_CLASSPATH_CONFIGURATION_FILE = \"/ehcache.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CLASSPATH_CONFIGURATION_FILE = \"/ehcache.xml\"", "var_name": "DEFAULT_CLASSPATH_CONFIGURATION_FILE"}, {"original_string": "private static final String FAILSAFE_CLASSPATH_CONFIGURATION_FILE = \"/ehcache-failsafe.xml\";", "modifier": "private static final", "type": "String", "declarator": "FAILSAFE_CLASSPATH_CONFIGURATION_FILE = \"/ehcache-failsafe.xml\"", "var_name": "FAILSAFE_CLASSPATH_CONFIGURATION_FILE"}], "methods": [{"identifier": "ConfigurationFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConfigurationFactory()", "full_signature": "private  ConfigurationFactory()", "class_method_signature": "ConfigurationFactory.ConfigurationFactory()", "testcase": false, "constructor": true}, {"identifier": "parseConfiguration", "parameters": "(final File file)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final File file)", "full_signature": "public static Configuration parseConfiguration(final File file)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final File file)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final URL url)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final URL url)", "full_signature": "public static Configuration parseConfiguration(final URL url)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final URL url)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "()", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration()", "full_signature": "public static Configuration parseConfiguration()", "class_method_signature": "ConfigurationFactory.parseConfiguration()", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final InputStream inputStream)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final InputStream inputStream)", "full_signature": "public static Configuration parseConfiguration(final InputStream inputStream)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "translateSystemProperties", "parameters": "(InputStream inputStream)", "modifiers": "private static", "return": "InputStream", "signature": "InputStream translateSystemProperties(InputStream inputStream)", "full_signature": "private static InputStream translateSystemProperties(InputStream inputStream)", "class_method_signature": "ConfigurationFactory.translateSystemProperties(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "extractPropertyTokens", "parameters": "(String sourceDocument)", "modifiers": "static", "return": "Set", "signature": "Set extractPropertyTokens(String sourceDocument)", "full_signature": "static Set extractPropertyTokens(String sourceDocument)", "class_method_signature": "ConfigurationFactory.extractPropertyTokens(String sourceDocument)", "testcase": false, "constructor": false}], "file": "tags/ehcache-1.6.0-rc1/core/src/site/apt/index.apt/src/main/java/net/sf/ehcache/config/ConfigurationFactory.java"}, "focal_method": {"identifier": "parseConfiguration", "parameters": "(final File file)", "modifiers": "public static", "return": "Configuration", "body": "public static Configuration parseConfiguration(final File file) throws CacheException {\n        if (file == null) {\n            throw new CacheException(\"Attempt to configure ehcache from null file.\");\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Configuring ehcache from file: \" + file.toString());\n        }\n        Configuration configuration = null;\n        InputStream input = null;\n        try {\n            input = new BufferedInputStream(new FileInputStream(file));\n            configuration = parseConfiguration(input);\n        } catch (Exception e) {\n            throw new CacheException(\"Error configuring from \" + file + \". Initial cause was \" + e.getMessage(), e);\n        } finally {\n            try {\n                if (input != null) {\n                    input.close();\n                }\n            } catch (IOException e) {\n                LOG.error(\"IOException while closing configuration input stream. Error was \" + e.getMessage());\n            }\n        }\n        return configuration;\n    }", "signature": "Configuration parseConfiguration(final File file)", "full_signature": "public static Configuration parseConfiguration(final File file)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final File file)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "toString", "parseConfiguration", "getMessage", "close", "error", "getMessage"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}