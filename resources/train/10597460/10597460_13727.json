{"test_class": {"identifier": "ConfigurationFactoryTest", "superclass": "extends AbstractCacheTest", "interfaces": "", "fields": [{"original_string": "private static final int CACHES_IN_TEST_EHCACHE = 13;", "modifier": "private static final", "type": "int", "declarator": "CACHES_IN_TEST_EHCACHE = 13", "var_name": "CACHES_IN_TEST_EHCACHE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationFactoryTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationFactoryTest.class.getName())", "var_name": "LOG"}], "file": "tags/ehcache-1.7.2/core/src/test/java/net/sf/ehcache/config/ConfigurationFactoryTest.java"}, "test_case": {"identifier": "testLoadConfigurationFromClasspath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadConfigurationFromClasspath() throws Exception {\n\n        Configuration configuration = ConfigurationFactory.parseConfiguration();\n        ConfigurationHelper configurationHelper = new ConfigurationHelper(manager, configuration);\n\n        //Check core attributes\n        assertEquals(null, configurationHelper.getConfigurationBean().getName());\n        assertEquals(true, configurationHelper.getConfigurationBean().getUpdateCheck());\n        assertEquals(Configuration.Monitoring.AUTODETECT, configurationHelper.getConfigurationBean().getMonitoring());\n\n        //Check disk store\n        assertEquals(System.getProperty(\"java.io.tmpdir\"), configurationHelper.getDiskStorePath());\n\n\n        //Check CacheManagerPeerProvider\n        Map<String, CacheManagerPeerProvider> peerProviders = configurationHelper.createCachePeerProviders();\n        CacheManagerPeerProvider peerProvider = peerProviders.get(\"RMI\");\n\n\n        //Check TTL\n        assertTrue(peerProvider instanceof MulticastRMICacheManagerPeerProvider);\n        assertEquals(Integer.valueOf(0), ((MulticastRMICacheManagerPeerProvider) peerProvider).getHeartBeatSender().getTimeToLive());\n\n        //Check CacheManagerEventListener\n        assertEquals(null, configurationHelper.createCacheManagerEventListener());\n\n        //Check default cache\n        Ehcache defaultCache = configurationHelper.createDefaultCache();\n        assertEquals(\"default\", defaultCache.getName());\n        assertEquals(false, defaultCache.getCacheConfiguration().isEternal());\n        assertEquals(5, defaultCache.getCacheConfiguration().getTimeToIdleSeconds());\n        assertEquals(10, defaultCache.getCacheConfiguration().getTimeToLiveSeconds());\n        assertEquals(true, defaultCache.getCacheConfiguration().isOverflowToDisk());\n\n        //Check caches\n        assertEquals(CACHES_IN_TEST_EHCACHE, configurationHelper.createCaches().size());\n\n        /*\n        <cache name=\"sampleCache1\"\n        maxElementsInMemory=\"10000\"\n        eternal=\"false\"\n        timeToIdleSeconds=\"360\"\n        timeToLiveSeconds=\"1000\"\n        overflowToDisk=\"true\"\n        />\n        */\n        Ehcache sampleCache1 = configurationHelper.createCacheFromName(\"sampleCache1\");\n        assertEquals(\"sampleCache1\", sampleCache1.getName());\n        assertEquals(false, sampleCache1.getCacheConfiguration().isEternal());\n        assertEquals(360, sampleCache1.getCacheConfiguration().getTimeToIdleSeconds());\n        assertEquals(1000, sampleCache1.getCacheConfiguration().getTimeToLiveSeconds());\n        assertEquals(true, sampleCache1.getCacheConfiguration().isOverflowToDisk());\n        assertEquals(1000, sampleCache1.getCacheConfiguration().getMaxElementsOnDisk());\n\n        /** A cache which overflows to disk. The disk store is persistent\n         between cache and VM restarts. The disk expiry thread interval is set to 10 minutes, overriding\n         the default of 2 minutes.\n         <cache name=\"persistentLongExpiryIntervalCache\"\n         maxElementsInMemory=\"500\"\n         eternal=\"false\"\n         timeToIdleSeconds=\"300\"\n         timeToLiveSeconds=\"600\"\n         overflowToDisk=\"true\"\n         diskPersistent=\"true\"\n         diskExpiryThreadIntervalSeconds=\"600\"\n         /> */\n        Ehcache persistentLongExpiryIntervalCache = configurationHelper.createCacheFromName(\"persistentLongExpiryIntervalCache\");\n        assertEquals(\"persistentLongExpiryIntervalCache\", persistentLongExpiryIntervalCache.getName());\n        assertEquals(false, persistentLongExpiryIntervalCache.getCacheConfiguration().isEternal());\n        assertEquals(300, persistentLongExpiryIntervalCache.getCacheConfiguration().getTimeToIdleSeconds());\n        assertEquals(600, persistentLongExpiryIntervalCache.getCacheConfiguration().getTimeToLiveSeconds());\n        assertEquals(true, persistentLongExpiryIntervalCache.getCacheConfiguration().isOverflowToDisk());\n        assertEquals(true, persistentLongExpiryIntervalCache.getCacheConfiguration().isDiskPersistent());\n        assertEquals(600, persistentLongExpiryIntervalCache.getCacheConfiguration().getDiskExpiryThreadIntervalSeconds());\n\n        /*\n           <!--\n            A cache which has a CacheExtension\n            -->\n            <cache name=\"testCacheExtensionCache\"\n                   maxElementsInMemory=\"10\"\n                   eternal=\"false\"\n                   timeToIdleSeconds=\"100\"\n                   timeToLiveSeconds=\"100\"\n                   overflowToDisk=\"false\">\n                <cacheExtensionFactory\n                        class=\"net.sf.ehcache.extension.TestCacheExtensionFactory\"\n                        properties=\"propertyA=valueA\"/>\n            </cache>CacheExtension cache\n        */\n        Ehcache exceptionHandlingCache = configurationHelper.createCacheFromName(\"exceptionHandlingCache\");\n        assertEquals(\"exceptionHandlingCache\", exceptionHandlingCache.getName());\n        assertTrue(exceptionHandlingCache.getCacheExceptionHandler() != null);\n        assertTrue(exceptionHandlingCache.getCacheExceptionHandler() instanceof CountingExceptionHandler);\n        assertTrue(exceptionHandlingCache.getCacheExceptionHandler() instanceof CacheExceptionHandler);\n    }", "signature": "void testLoadConfigurationFromClasspath()", "full_signature": "@Test public void testLoadConfigurationFromClasspath()", "class_method_signature": "ConfigurationFactoryTest.testLoadConfigurationFromClasspath()", "testcase": true, "constructor": false, "invocations": ["parseConfiguration", "assertEquals", "getName", "getConfigurationBean", "assertEquals", "getUpdateCheck", "getConfigurationBean", "assertEquals", "getMonitoring", "getConfigurationBean", "assertEquals", "getProperty", "getDiskStorePath", "createCachePeerProviders", "get", "assertTrue", "assertEquals", "valueOf", "getTimeToLive", "getHeartBeatSender", "assertEquals", "createCacheManagerEventListener", "createDefaultCache", "assertEquals", "getName", "assertEquals", "isEternal", "getCacheConfiguration", "assertEquals", "getTimeToIdleSeconds", "getCacheConfiguration", "assertEquals", "getTimeToLiveSeconds", "getCacheConfiguration", "assertEquals", "isOverflowToDisk", "getCacheConfiguration", "assertEquals", "size", "createCaches", "createCacheFromName", "assertEquals", "getName", "assertEquals", "isEternal", "getCacheConfiguration", "assertEquals", "getTimeToIdleSeconds", "getCacheConfiguration", "assertEquals", "getTimeToLiveSeconds", "getCacheConfiguration", "assertEquals", "isOverflowToDisk", "getCacheConfiguration", "assertEquals", "getMaxElementsOnDisk", "getCacheConfiguration", "createCacheFromName", "assertEquals", "getName", "assertEquals", "isEternal", "getCacheConfiguration", "assertEquals", "getTimeToIdleSeconds", "getCacheConfiguration", "assertEquals", "getTimeToLiveSeconds", "getCacheConfiguration", "assertEquals", "isOverflowToDisk", "getCacheConfiguration", "assertEquals", "isDiskPersistent", "getCacheConfiguration", "assertEquals", "getDiskExpiryThreadIntervalSeconds", "getCacheConfiguration", "createCacheFromName", "assertEquals", "getName", "assertTrue", "getCacheExceptionHandler", "assertTrue", "getCacheExceptionHandler", "assertTrue", "getCacheExceptionHandler"]}, "focal_class": {"identifier": "ConfigurationFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ConfigurationFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ConfigurationFactory.class.getName())", "var_name": "LOG"}, {"original_string": "private static final String DEFAULT_CLASSPATH_CONFIGURATION_FILE = \"/ehcache.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CLASSPATH_CONFIGURATION_FILE = \"/ehcache.xml\"", "var_name": "DEFAULT_CLASSPATH_CONFIGURATION_FILE"}, {"original_string": "private static final String FAILSAFE_CLASSPATH_CONFIGURATION_FILE = \"/ehcache-failsafe.xml\";", "modifier": "private static final", "type": "String", "declarator": "FAILSAFE_CLASSPATH_CONFIGURATION_FILE = \"/ehcache-failsafe.xml\"", "var_name": "FAILSAFE_CLASSPATH_CONFIGURATION_FILE"}], "methods": [{"identifier": "ConfigurationFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConfigurationFactory()", "full_signature": "private  ConfigurationFactory()", "class_method_signature": "ConfigurationFactory.ConfigurationFactory()", "testcase": false, "constructor": true}, {"identifier": "parseConfiguration", "parameters": "(final File file)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final File file)", "full_signature": "public static Configuration parseConfiguration(final File file)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final File file)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final URL url)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final URL url)", "full_signature": "public static Configuration parseConfiguration(final URL url)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final URL url)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "()", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration()", "full_signature": "public static Configuration parseConfiguration()", "class_method_signature": "ConfigurationFactory.parseConfiguration()", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(final InputStream inputStream)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration parseConfiguration(final InputStream inputStream)", "full_signature": "public static Configuration parseConfiguration(final InputStream inputStream)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "translateSystemProperties", "parameters": "(InputStream inputStream)", "modifiers": "private static", "return": "InputStream", "signature": "InputStream translateSystemProperties(InputStream inputStream)", "full_signature": "private static InputStream translateSystemProperties(InputStream inputStream)", "class_method_signature": "ConfigurationFactory.translateSystemProperties(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "extractPropertyTokens", "parameters": "(String sourceDocument)", "modifiers": "static", "return": "Set", "signature": "Set extractPropertyTokens(String sourceDocument)", "full_signature": "static Set extractPropertyTokens(String sourceDocument)", "class_method_signature": "ConfigurationFactory.extractPropertyTokens(String sourceDocument)", "testcase": false, "constructor": false}], "file": "tags/ehcache-1.7.2/core/src/main/java/net/sf/ehcache/config/ConfigurationFactory.java"}, "focal_method": {"identifier": "parseConfiguration", "parameters": "(final File file)", "modifiers": "public static", "return": "Configuration", "body": "public static Configuration parseConfiguration(final File file) throws CacheException {\n        if (file == null) {\n            throw new CacheException(\"Attempt to configure ehcache from null file.\");\n        }\n\n        LOG.debug(\"Configuring ehcache from file: {}\", file);\n        Configuration configuration = null;\n        InputStream input = null;\n        try {\n            input = new BufferedInputStream(new FileInputStream(file));\n            configuration = parseConfiguration(input);\n        } catch (Exception e) {\n            throw new CacheException(\"Error configuring from \" + file + \". Initial cause was \" + e.getMessage(), e);\n        } finally {\n            try {\n                if (input != null) {\n                    input.close();\n                }\n            } catch (IOException e) {\n                LOG.error(\"IOException while closing configuration input stream. Error was \" + e.getMessage());\n            }\n        }\n        return configuration;\n    }", "signature": "Configuration parseConfiguration(final File file)", "full_signature": "public static Configuration parseConfiguration(final File file)", "class_method_signature": "ConfigurationFactory.parseConfiguration(final File file)", "testcase": false, "constructor": false, "invocations": ["debug", "parseConfiguration", "getMessage", "close", "error", "getMessage"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}