{"test_class": {"identifier": "TimestamperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int TOTAL_RUNS = 750000;", "modifier": "public static final", "type": "int", "declarator": "TOTAL_RUNS = 750000", "var_name": "TOTAL_RUNS"}, {"original_string": "private static final Logger slewClockLogger = Logger.getLogger(SlewClock.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "slewClockLogger = Logger.getLogger(SlewClock.class.getName())", "var_name": "slewClockLogger"}, {"original_string": "private static final ConsoleHandler slewClockHandler = new ConsoleHandler();", "modifier": "private static final", "type": "ConsoleHandler", "declarator": "slewClockHandler = new ConsoleHandler()", "var_name": "slewClockHandler"}], "file": "tags/ehcache-2.10.0-16-pipeline/ehcache-core/src/test/java/net/sf/ehcache/util/TimestamperTest.java"}, "test_case": {"identifier": "testCorrectness", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorrectness() throws Exception {\n        final int THREADS = 8;\n        final ConcurrentMap<Long, Integer> values = new ConcurrentHashMap<Long, Integer>();\n        final AtomicLong errors = new AtomicLong();\n        \n        Thread[] threads = new Thread[THREADS];\n        for(int i =0; i < THREADS; i++) {\n            threads[i] = new Thread() {\n\n                @Override\n                public void run() {\n                    for (int i = 0; i < (TOTAL_RUNS / THREADS); i++) {\n                        if(values.putIfAbsent(Timestamper.next(), 0) != null) {\n                            errors.incrementAndGet();\n                        }\n                    }\n                }\n            };\n        }\n        for (Thread thread : threads) {\n            thread.start();\n        }\n        for (Thread thread : threads) {\n            thread.join();\n        }\n        assertThat(errors.get(), is(0L));\n    }", "signature": "void testCorrectness()", "full_signature": "@Test public void testCorrectness()", "class_method_signature": "TimestamperTest.testCorrectness()", "testcase": true, "constructor": false, "invocations": ["putIfAbsent", "next", "incrementAndGet", "start", "join", "assertThat", "get", "is"]}, "focal_class": {"identifier": "Timestamper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int BIN_DIGITS = Integer.getInteger(\"net.sf.ehcache.util.Timestamper.shift\", 12);", "modifier": "public static final", "type": "int", "declarator": "BIN_DIGITS = Integer.getInteger(\"net.sf.ehcache.util.Timestamper.shift\", 12)", "var_name": "BIN_DIGITS"}, {"original_string": "public static final int ONE_MS = 1 << BIN_DIGITS;", "modifier": "public static final", "type": "int", "declarator": "ONE_MS = 1 << BIN_DIGITS", "var_name": "ONE_MS"}, {"original_string": "private static final Logger LOG     = LoggerFactory.getLogger(Timestamper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG     = LoggerFactory.getLogger(Timestamper.class)", "var_name": "LOG"}, {"original_string": "private static final int    MAX_LOG = Integer.getInteger(\"net.sf.ehcache.util.Timestamper.log.max\", 1) * 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_LOG = Integer.getInteger(\"net.sf.ehcache.util.Timestamper.log.max\", 1) * 1000", "var_name": "MAX_LOG"}, {"original_string": "private static final AtomicLong VALUE  = new AtomicLong();", "modifier": "private static final", "type": "AtomicLong", "declarator": "VALUE  = new AtomicLong()", "var_name": "VALUE"}, {"original_string": "private static final AtomicLong LOGGED = new AtomicLong();", "modifier": "private static final", "type": "AtomicLong", "declarator": "LOGGED = new AtomicLong()", "var_name": "LOGGED"}], "methods": [{"identifier": "Timestamper", "parameters": "()", "modifiers": "private", "return": "", "signature": " Timestamper()", "full_signature": "private  Timestamper()", "class_method_signature": "Timestamper.Timestamper()", "testcase": false, "constructor": true}, {"identifier": "next", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long next()", "full_signature": "public static long next()", "class_method_signature": "Timestamper.next()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(final long base, final String message, final Object... params)", "modifiers": "private static", "return": "void", "signature": "void log(final long base, final String message, final Object... params)", "full_signature": "private static void log(final long base, final String message, final Object... params)", "class_method_signature": "Timestamper.log(final long base, final String message, final Object... params)", "testcase": false, "constructor": false}], "file": "tags/ehcache-2.10.0-16-pipeline/ehcache-core/src/main/java/net/sf/ehcache/util/Timestamper.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "public static", "return": "long", "body": "public static long next() {\n        int runs = 0;\n        while (true) {\n            long base = SlewClock.timeMillis() << BIN_DIGITS;\n            long maxValue = base + ONE_MS - 1;\n\n            for (long current = VALUE.get(), update = Math.max(base, current + 1); update < maxValue;\n                 current = VALUE.get(), update = Math.max(base, current + 1)) {\n                if (VALUE.compareAndSet(current, update)) {\n                    if (runs > 1) {\n                        log(base, \"Thread spin-waits on time to pass. Looped \"\n                                  + \"{} times, you might want to increase -Dnet.sf.ehcache.util.Timestamper.shift\", runs);\n                    }\n                    return update;\n                }\n            }\n            ++runs;\n        }\n    }", "signature": "long next()", "full_signature": "public static long next()", "class_method_signature": "Timestamper.next()", "testcase": false, "constructor": false, "invocations": ["timeMillis", "get", "max", "get", "max", "compareAndSet", "log"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}