{"test_class": {"identifier": "ResourceClassLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URLClassLoader testCaseClassLoader;", "modifier": "private", "type": "URLClassLoader", "declarator": "testCaseClassLoader", "var_name": "testCaseClassLoader"}], "file": "tags/ehcache-core-2.6.7/src/test/java/net/sf/ehcache/management/ResourceClassLoaderTest.java"}, "test_case": {"identifier": "contentOfTheJarNotVisibleWithNormalClassLoaderTest", "parameters": "()", "modifiers": "@Test(expected = ClassNotFoundException.class) public", "return": "void", "body": "@Test(expected = ClassNotFoundException.class)\n    public void contentOfTheJarNotVisibleWithNormalClassLoaderTest() throws ClassNotFoundException {\n        // a normal classloader, can not read classes located in the subdirectory of a jar\n        Class<?> simpleClass = testCaseClassLoader.loadClass(\"pof.Simple\");\n    }", "signature": "void contentOfTheJarNotVisibleWithNormalClassLoaderTest()", "full_signature": "@Test(expected = ClassNotFoundException.class) public void contentOfTheJarNotVisibleWithNormalClassLoaderTest()", "class_method_signature": "ResourceClassLoaderTest.contentOfTheJarNotVisibleWithNormalClassLoaderTest()", "testcase": true, "constructor": false, "invocations": ["loadClass"]}, "focal_class": {"identifier": "ResourceClassLoader", "superclass": "extends ClassLoader", "interfaces": "", "fields": [{"original_string": "private static final int BUFFER_SIZE = 1024;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_SIZE = 1024", "var_name": "BUFFER_SIZE"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ResourceClassLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ResourceClassLoader.class)", "var_name": "LOG"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final String implementationVersion;", "modifier": "private final", "type": "String", "declarator": "implementationVersion", "var_name": "implementationVersion"}], "methods": [{"identifier": "ResourceClassLoader", "parameters": "(String prefix, ClassLoader parent)", "modifiers": "public", "return": "", "signature": " ResourceClassLoader(String prefix, ClassLoader parent)", "full_signature": "public  ResourceClassLoader(String prefix, ClassLoader parent)", "class_method_signature": "ResourceClassLoader.ResourceClassLoader(String prefix, ClassLoader parent)", "testcase": false, "constructor": true}, {"identifier": "loadClass", "parameters": "(String name, boolean resolve)", "modifiers": "@Override public synchronized", "return": "Class<?>", "signature": "Class<?> loadClass(String name, boolean resolve)", "full_signature": "@Override public synchronized Class<?> loadClass(String name, boolean resolve)", "class_method_signature": "ResourceClassLoader.loadClass(String name, boolean resolve)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String name)", "modifiers": "@Override public", "return": "URL", "signature": "URL getResource(String name)", "full_signature": "@Override public URL getResource(String name)", "class_method_signature": "ResourceClassLoader.getResource(String name)", "testcase": false, "constructor": false}, {"identifier": "findResource", "parameters": "(String name)", "modifiers": "@Override protected", "return": "URL", "signature": "URL findResource(String name)", "full_signature": "@Override protected URL findResource(String name)", "class_method_signature": "ResourceClassLoader.findResource(String name)", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "(String resourceName)", "modifiers": "@Override /** * very similar to what OracleJDK classloader does, * except the first resources (more important) are the ones found with our ResourceClassLoader */ public", "return": "Enumeration<URL>", "signature": "Enumeration<URL> getResources(String resourceName)", "full_signature": "@Override /** * very similar to what OracleJDK classloader does, * except the first resources (more important) are the ones found with our ResourceClassLoader */ public Enumeration<URL> getResources(String resourceName)", "class_method_signature": "ResourceClassLoader.getResources(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "findResources", "parameters": "(String name)", "modifiers": "@Override protected", "return": "Enumeration<URL>", "signature": "Enumeration<URL> findResources(String name)", "full_signature": "@Override protected Enumeration<URL> findResources(String name)", "class_method_signature": "ResourceClassLoader.findResources(String name)", "testcase": false, "constructor": false}, {"identifier": "findClass", "parameters": "(String className)", "modifiers": "@Override protected", "return": "Class<?>", "signature": "Class<?> findClass(String className)", "full_signature": "@Override protected Class<?> findClass(String className)", "class_method_signature": "ResourceClassLoader.findClass(String className)", "testcase": false, "constructor": false}, {"identifier": "translateFromVFSToPhysicalURL", "parameters": "(URL vfsUrl)", "modifiers": "private", "return": "URL", "signature": "URL translateFromVFSToPhysicalURL(URL vfsUrl)", "full_signature": "private URL translateFromVFSToPhysicalURL(URL vfsUrl)", "class_method_signature": "ResourceClassLoader.translateFromVFSToPhysicalURL(URL vfsUrl)", "testcase": false, "constructor": false}, {"identifier": "unpackVfsResourceToPhysicalURLLocation", "parameters": "(URL physicalUrl, Object vfsVirtualFile, Method recursiveCopy)", "modifiers": "private", "return": "void", "signature": "void unpackVfsResourceToPhysicalURLLocation(URL physicalUrl, Object vfsVirtualFile, Method recursiveCopy)", "full_signature": "private void unpackVfsResourceToPhysicalURLLocation(URL physicalUrl, Object vfsVirtualFile, Method recursiveCopy)", "class_method_signature": "ResourceClassLoader.unpackVfsResourceToPhysicalURLLocation(URL physicalUrl, Object vfsVirtualFile, Method recursiveCopy)", "testcase": false, "constructor": false}], "file": "tags/ehcache-core-2.6.7/src/main/java/net/sf/ehcache/management/ResourceClassLoader.java"}, "focal_method": {"identifier": "loadClass", "parameters": "(String name, boolean resolve)", "modifiers": "@Override public synchronized", "return": "Class<?>", "body": "@Override\n    public synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n        // changing the order of delegation to prefer the resourceClassLoader over its parents\n        Class c = findLoadedClass(name);\n        if (c == null) {\n            try {\n                c = findClass(name);\n            } catch (ClassNotFoundException e) {\n                c = super.loadClass(name, resolve);\n            }\n        }\n        if (resolve) {\n            resolveClass(c);\n        }\n        return c;\n    }", "signature": "Class<?> loadClass(String name, boolean resolve)", "full_signature": "@Override public synchronized Class<?> loadClass(String name, boolean resolve)", "class_method_signature": "ResourceClassLoader.loadClass(String name, boolean resolve)", "testcase": false, "constructor": false, "invocations": ["findLoadedClass", "findClass", "loadClass", "resolveClass"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}