{"test_class": {"identifier": "ToolkitInstanceFactoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String                        CACHE_MANAGER_NAME = \"CACHE_MANAGER_NAME\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_MANAGER_NAME = \"CACHE_MANAGER_NAME\"", "var_name": "CACHE_MANAGER_NAME"}, {"original_string": "private static final String                        CACHE_NAME         = \"CACHE_NAME\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_NAME         = \"CACHE_NAME\"", "var_name": "CACHE_NAME"}, {"original_string": "@Mock private Toolkit                                    toolkit;", "modifier": "@Mock private", "type": "Toolkit", "declarator": "toolkit", "var_name": "toolkit"}, {"original_string": "@Mock private WANUtil                                    wanUtil;", "modifier": "@Mock private", "type": "WANUtil", "declarator": "wanUtil", "var_name": "wanUtil"}, {"original_string": "@Mock private Ehcache                                    ehcache;", "modifier": "@Mock private", "type": "Ehcache", "declarator": "ehcache", "var_name": "ehcache"}, {"original_string": "@Mock private CacheManager                               cacheManager;", "modifier": "@Mock private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private ToolkitInstanceFactoryImpl                       factory;", "modifier": "private", "type": "ToolkitInstanceFactoryImpl", "declarator": "factory", "var_name": "factory"}, {"original_string": "private ToolkitCacheInternal<String, Serializable>       resultantCache;", "modifier": "private", "type": "ToolkitCacheInternal<String, Serializable>", "declarator": "resultantCache", "var_name": "resultantCache"}, {"original_string": "private final String defaultCMConfig = \"<ehcache name=\\\"test-lifecycle\\\">\" +\n                                         \"  <terracottaConfig url=\\\"localhost:PORT\\\"/>\" +\n                                         \"  <defaultCache\" +\n                                         \"      maxElementsInMemory=\\\"10\\\"\" +\n                                         \"      eternal=\\\"true\\\"/>\" +\n                                         \"</ehcache>\";", "modifier": "private final", "type": "String", "declarator": "defaultCMConfig = \"<ehcache name=\\\"test-lifecycle\\\">\" +\n                                         \"  <terracottaConfig url=\\\"localhost:PORT\\\"/>\" +\n                                         \"  <defaultCache\" +\n                                         \"      maxElementsInMemory=\\\"10\\\"\" +\n                                         \"      eternal=\\\"true\\\"/>\" +\n                                         \"</ehcache>\"", "var_name": "defaultCMConfig"}], "file": "tags/ehcache-2.10.0-16-pipeline/terracotta/bootstrap/src/test/java/org/terracotta/modules/ehcache/ToolkitInstanceFactoryImplTest.java"}, "test_case": {"identifier": "testCreatingNewClusteredCacheManagerEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreatingNewClusteredCacheManagerEntity() {\n    String name = \"newCM\";\n\n    net.sf.ehcache.config.Configuration configuration = new net.sf.ehcache.config.Configuration();\n\n    ClusteredEntityManager clusteredEntityManager = mock(ClusteredEntityManager.class);\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n        Object[] arguments = invocationOnMock.getArguments();\n        ((ToolkitBackedClusteredCacheManager)arguments[2]).setEntityLockHandler(mock(EntityLockHandler.class));\n        return null;\n      }\n    }).when(clusteredEntityManager).addRootEntityIfAbsent(eq(name), eq(ClusteredCacheManager.class), any(ClusteredCacheManager.class));\n    ToolkitReadWriteLock rwLock = mock(ToolkitReadWriteLock.class);\n    ToolkitLock writeLock = mock(ToolkitLock.class);\n    when(writeLock.tryLock()).thenReturn(true);\n    when(rwLock.writeLock()).thenReturn(writeLock);\n    when(clusteredEntityManager.getEntityLock(any(String.class))).thenReturn(rwLock);\n\n    ToolkitInstanceFactoryImpl toolkitInstanceFactory = new ToolkitInstanceFactoryImpl(getMockToolkit(),\n                                                                                       clusteredEntityManager);\n\n    toolkitInstanceFactory.linkClusteredCacheManager(name, configuration);\n    verify(clusteredEntityManager).getRootEntity(name, ClusteredCacheManager.class);\n    verify(clusteredEntityManager).getEntityLock(EhcacheEntitiesNaming.getCacheManagerLockNameFor(name));\n    verify(clusteredEntityManager).addRootEntityIfAbsent(eq(name), any(Class.class), any(ClusteredCacheManager.class));\n    verifyNoMoreInteractions(clusteredEntityManager);\n  }", "signature": "void testCreatingNewClusteredCacheManagerEntity()", "full_signature": "@Test public void testCreatingNewClusteredCacheManagerEntity()", "class_method_signature": "ToolkitInstanceFactoryImplTest.testCreatingNewClusteredCacheManagerEntity()", "testcase": true, "constructor": false, "invocations": ["mock", "addRootEntityIfAbsent", "when", "doAnswer", "getArguments", "setEntityLockHandler", "mock", "eq", "eq", "any", "mock", "mock", "thenReturn", "when", "tryLock", "thenReturn", "when", "writeLock", "thenReturn", "when", "getEntityLock", "any", "getMockToolkit", "linkClusteredCacheManager", "getRootEntity", "verify", "getEntityLock", "verify", "getCacheManagerLockNameFor", "addRootEntityIfAbsent", "verify", "eq", "any", "any", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ToolkitInstanceFactoryImpl", "superclass": "", "interfaces": "implements ToolkitInstanceFactory", "fields": [{"original_string": "public static final Logger           LOGGER                                   = LoggerFactory\n                                                                                      .getLogger(ToolkitInstanceFactoryImpl.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOGGER                                   = LoggerFactory\n                                                                                      .getLogger(ToolkitInstanceFactoryImpl.class)", "var_name": "LOGGER"}, {"original_string": "private static final String CONFIG_LOGGER_NAME = \"com.terracotta.ehcache.config\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_LOGGER_NAME = \"com.terracotta.ehcache.config\"", "var_name": "CONFIG_LOGGER_NAME"}, {"original_string": "public static final String  DELIMITER                                = \"|\";", "modifier": "public static final", "type": "String", "declarator": "DELIMITER                                = \"|\"", "var_name": "DELIMITER"}, {"original_string": "private static final String EVENT_NOTIFIER_SUFFIX                    = \"event-notifier\";", "modifier": "private static final", "type": "String", "declarator": "EVENT_NOTIFIER_SUFFIX                    = \"event-notifier\"", "var_name": "EVENT_NOTIFIER_SUFFIX"}, {"original_string": "private static final String DISPOSAL_NOTIFIER_SUFFIX                 = \"disposal-notifier\";", "modifier": "private static final", "type": "String", "declarator": "DISPOSAL_NOTIFIER_SUFFIX                 = \"disposal-notifier\"", "var_name": "DISPOSAL_NOTIFIER_SUFFIX"}, {"original_string": "private static final String EHCACHE_NAME_PREFIX                      = \"__tc_clustered-ehcache\";", "modifier": "private static final", "type": "String", "declarator": "EHCACHE_NAME_PREFIX                      = \"__tc_clustered-ehcache\"", "var_name": "EHCACHE_NAME_PREFIX"}, {"original_string": "private static final String CONFIG_NOTIFIER_SUFFIX                   = \"config-notifier\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_NOTIFIER_SUFFIX                   = \"config-notifier\"", "var_name": "CONFIG_NOTIFIER_SUFFIX"}, {"original_string": "private static final String EHCACHE_TXNS_DECISION_STATE_MAP_NAME     = EHCACHE_NAME_PREFIX + DELIMITER\n                                                                                    + \"txnsDecision\";", "modifier": "private static final", "type": "String", "declarator": "EHCACHE_TXNS_DECISION_STATE_MAP_NAME     = EHCACHE_NAME_PREFIX + DELIMITER\n                                                                                    + \"txnsDecision\"", "var_name": "EHCACHE_TXNS_DECISION_STATE_MAP_NAME"}, {"original_string": "private static final String ALL_SOFT_LOCKS_MAP_SUFFIX                = \"softLocks\";", "modifier": "private static final", "type": "String", "declarator": "ALL_SOFT_LOCKS_MAP_SUFFIX                = \"softLocks\"", "var_name": "ALL_SOFT_LOCKS_MAP_SUFFIX"}, {"original_string": "private static final String NEW_SOFT_LOCKS_LIST_SUFFIX               = \"newSoftLocks\";", "modifier": "private static final", "type": "String", "declarator": "NEW_SOFT_LOCKS_LIST_SUFFIX               = \"newSoftLocks\"", "var_name": "NEW_SOFT_LOCKS_LIST_SUFFIX"}, {"original_string": "private static final String LOCK_TAG                                 = \"::LOCK\";", "modifier": "private static final", "type": "String", "declarator": "LOCK_TAG                                 = \"::LOCK\"", "var_name": "LOCK_TAG"}, {"original_string": "static final String         CLUSTERED_STORE_CONFIG_MAP               = EHCACHE_NAME_PREFIX + DELIMITER + \"configMap\";", "modifier": "static final", "type": "String", "declarator": "CLUSTERED_STORE_CONFIG_MAP               = EHCACHE_NAME_PREFIX + DELIMITER + \"configMap\"", "var_name": "CLUSTERED_STORE_CONFIG_MAP"}, {"original_string": "private static final String EHCACHE_TXNS_SOFTLOCK_WRITE_LOCK_NAME    = EHCACHE_NAME_PREFIX + DELIMITER\n                                                                                    + \"softWriteLock\";", "modifier": "private static final", "type": "String", "declarator": "EHCACHE_TXNS_SOFTLOCK_WRITE_LOCK_NAME    = EHCACHE_NAME_PREFIX + DELIMITER\n                                                                                    + \"softWriteLock\"", "var_name": "EHCACHE_TXNS_SOFTLOCK_WRITE_LOCK_NAME"}, {"original_string": "private static final String EHCACHE_TXNS_SOFTLOCK_FREEZE_LOCK_NAME   = EHCACHE_NAME_PREFIX + DELIMITER\n                                                                                    + \"softFreezeLock\";", "modifier": "private static final", "type": "String", "declarator": "EHCACHE_TXNS_SOFTLOCK_FREEZE_LOCK_NAME   = EHCACHE_NAME_PREFIX + DELIMITER\n                                                                                    + \"softFreezeLock\"", "var_name": "EHCACHE_TXNS_SOFTLOCK_FREEZE_LOCK_NAME"}, {"original_string": "private static final String EHCACHE_TXNS_SOFTLOCK_NOTIFIER_LOCK_NAME = EHCACHE_NAME_PREFIX + DELIMITER\n                                                                                    + \"softNotifierLock\";", "modifier": "private static final", "type": "String", "declarator": "EHCACHE_TXNS_SOFTLOCK_NOTIFIER_LOCK_NAME = EHCACHE_NAME_PREFIX + DELIMITER\n                                                                                    + \"softNotifierLock\"", "var_name": "EHCACHE_TXNS_SOFTLOCK_NOTIFIER_LOCK_NAME"}, {"original_string": "public static final int RETRY_MARK_IN_USE_AFTER_REJOIN = 5;", "modifier": "public static final", "type": "int", "declarator": "RETRY_MARK_IN_USE_AFTER_REJOIN = 5", "var_name": "RETRY_MARK_IN_USE_AFTER_REJOIN"}, {"original_string": "protected final Toolkit                 toolkit;", "modifier": "protected final", "type": "Toolkit", "declarator": "toolkit", "var_name": "toolkit"}, {"original_string": "private final WANUtil                   wanUtil;", "modifier": "private final", "type": "WANUtil", "declarator": "wanUtil", "var_name": "wanUtil"}, {"original_string": "private final ClusteredEntityManager    clusteredEntityManager;", "modifier": "private final", "type": "ClusteredEntityManager", "declarator": "clusteredEntityManager", "var_name": "clusteredEntityManager"}, {"original_string": "private volatile ClusteredCacheManager  clusteredCacheManagerEntity;", "modifier": "private volatile", "type": "ClusteredCacheManager", "declarator": "clusteredCacheManagerEntity", "var_name": "clusteredCacheManagerEntity"}, {"original_string": "private final EntityNamesHolder         entityNames;", "modifier": "private final", "type": "EntityNamesHolder", "declarator": "entityNames", "var_name": "entityNames"}, {"original_string": "private final Watchdog                  wanWatchdog;", "modifier": "private final", "type": "Watchdog", "declarator": "wanWatchdog", "var_name": "wanWatchdog"}], "methods": [{"identifier": "ToolkitInstanceFactoryImpl", "parameters": "(final TerracottaClientConfiguration terracottaClientConfiguration,\n                                    final String productId, ClassLoader loader)", "modifiers": "public", "return": "", "signature": " ToolkitInstanceFactoryImpl(final TerracottaClientConfiguration terracottaClientConfiguration,\n                                    final String productId, ClassLoader loader)", "full_signature": "public  ToolkitInstanceFactoryImpl(final TerracottaClientConfiguration terracottaClientConfiguration,\n                                    final String productId, ClassLoader loader)", "class_method_signature": "ToolkitInstanceFactoryImpl.ToolkitInstanceFactoryImpl(final TerracottaClientConfiguration terracottaClientConfiguration,\n                                    final String productId, ClassLoader loader)", "testcase": false, "constructor": true}, {"identifier": "ToolkitInstanceFactoryImpl", "parameters": "(final TerracottaClientConfiguration terracottaClientConfiguration,\n                                    ClassLoader loader)", "modifiers": "public", "return": "", "signature": " ToolkitInstanceFactoryImpl(final TerracottaClientConfiguration terracottaClientConfiguration,\n                                    ClassLoader loader)", "full_signature": "public  ToolkitInstanceFactoryImpl(final TerracottaClientConfiguration terracottaClientConfiguration,\n                                    ClassLoader loader)", "class_method_signature": "ToolkitInstanceFactoryImpl.ToolkitInstanceFactoryImpl(final TerracottaClientConfiguration terracottaClientConfiguration,\n                                    ClassLoader loader)", "testcase": false, "constructor": true}, {"identifier": "ToolkitInstanceFactoryImpl", "parameters": "(final Toolkit toolkit, final ClusteredEntityManager clusteredEntityManager)", "modifiers": "", "return": "", "signature": " ToolkitInstanceFactoryImpl(final Toolkit toolkit, final ClusteredEntityManager clusteredEntityManager)", "full_signature": "  ToolkitInstanceFactoryImpl(final Toolkit toolkit, final ClusteredEntityManager clusteredEntityManager)", "class_method_signature": "ToolkitInstanceFactoryImpl.ToolkitInstanceFactoryImpl(final Toolkit toolkit, final ClusteredEntityManager clusteredEntityManager)", "testcase": false, "constructor": true}, {"identifier": "ToolkitInstanceFactoryImpl", "parameters": "(final Toolkit toolkit, final ClusteredEntityManager clusteredEntityManager,\n                             final WANUtil util, final Watchdog wanWatchdog)", "modifiers": "", "return": "", "signature": " ToolkitInstanceFactoryImpl(final Toolkit toolkit, final ClusteredEntityManager clusteredEntityManager,\n                             final WANUtil util, final Watchdog wanWatchdog)", "full_signature": "  ToolkitInstanceFactoryImpl(final Toolkit toolkit, final ClusteredEntityManager clusteredEntityManager,\n                             final WANUtil util, final Watchdog wanWatchdog)", "class_method_signature": "ToolkitInstanceFactoryImpl.ToolkitInstanceFactoryImpl(final Toolkit toolkit, final ClusteredEntityManager clusteredEntityManager,\n                             final WANUtil util, final Watchdog wanWatchdog)", "testcase": false, "constructor": true}, {"identifier": "updateDefaultNonStopConfig", "parameters": "(Toolkit toolkitParam)", "modifiers": "private", "return": "void", "signature": "void updateDefaultNonStopConfig(Toolkit toolkitParam)", "full_signature": "private void updateDefaultNonStopConfig(Toolkit toolkitParam)", "class_method_signature": "ToolkitInstanceFactoryImpl.updateDefaultNonStopConfig(Toolkit toolkitParam)", "testcase": false, "constructor": false}, {"identifier": "createTerracottaToolkit", "parameters": "(TerracottaClientConfiguration terracottaClientConfiguration,\n                                                 String productId, ClassLoader loader)", "modifiers": "private static", "return": "Toolkit", "signature": "Toolkit createTerracottaToolkit(TerracottaClientConfiguration terracottaClientConfiguration,\n                                                 String productId, ClassLoader loader)", "full_signature": "private static Toolkit createTerracottaToolkit(TerracottaClientConfiguration terracottaClientConfiguration,\n                                                 String productId, ClassLoader loader)", "class_method_signature": "ToolkitInstanceFactoryImpl.createTerracottaToolkit(TerracottaClientConfiguration terracottaClientConfiguration,\n                                                 String productId, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "waitForOrchestrator", "parameters": "(String cacheManagerName)", "modifiers": "@Override public", "return": "void", "signature": "void waitForOrchestrator(String cacheManagerName)", "full_signature": "@Override public void waitForOrchestrator(String cacheManagerName)", "class_method_signature": "ToolkitInstanceFactoryImpl.waitForOrchestrator(String cacheManagerName)", "testcase": false, "constructor": false}, {"identifier": "markCacheWanDisabled", "parameters": "(String cacheManagerName, String cacheName)", "modifiers": "@Override public", "return": "void", "signature": "void markCacheWanDisabled(String cacheManagerName, String cacheName)", "full_signature": "@Override public void markCacheWanDisabled(String cacheManagerName, String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.markCacheWanDisabled(String cacheManagerName, String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getToolkit", "parameters": "()", "modifiers": "@Override public", "return": "Toolkit", "signature": "Toolkit getToolkit()", "full_signature": "@Override public Toolkit getToolkit()", "class_method_signature": "ToolkitInstanceFactoryImpl.getToolkit()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateToolkitCache", "parameters": "(final Ehcache cache)", "modifiers": "@Override public", "return": "ToolkitCacheInternal<String, Serializable>", "signature": "ToolkitCacheInternal<String, Serializable> getOrCreateToolkitCache(final Ehcache cache)", "full_signature": "@Override public ToolkitCacheInternal<String, Serializable> getOrCreateToolkitCache(final Ehcache cache)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateToolkitCache(final Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateWanAwareToolkitCache", "parameters": "(final String cacheManagerName,\n                                                                                    final String cacheName,\n                                                                                    final CacheConfiguration ehcacheConfig,\n                                                                                    final boolean masterCache,\n                                                                                    final boolean bidirectional)", "modifiers": "@Override public", "return": "WanAwareToolkitCache<String, Serializable>", "signature": "WanAwareToolkitCache<String, Serializable> getOrCreateWanAwareToolkitCache(final String cacheManagerName,\n                                                                                    final String cacheName,\n                                                                                    final CacheConfiguration ehcacheConfig,\n                                                                                    final boolean masterCache,\n                                                                                    final boolean bidirectional)", "full_signature": "@Override public WanAwareToolkitCache<String, Serializable> getOrCreateWanAwareToolkitCache(final String cacheManagerName,\n                                                                                    final String cacheName,\n                                                                                    final CacheConfiguration ehcacheConfig,\n                                                                                    final boolean masterCache,\n                                                                                    final boolean bidirectional)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateWanAwareToolkitCache(final String cacheManagerName,\n                                                                                    final String cacheName,\n                                                                                    final CacheConfiguration ehcacheConfig,\n                                                                                    final boolean masterCache,\n                                                                                    final boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "createWanAwareToolkitCache", "parameters": "(final String cacheManagerName,\n                                                                                final String cacheName,\n                                                                                final ToolkitCacheInternal<String, Serializable> toolkitCache,\n                                                                                final CacheConfiguration cacheConfiguration,\n                                                                                final boolean masterCache,\n                                                                                final boolean bidirectional)", "modifiers": "private", "return": "WanAwareToolkitCache<String, Serializable>", "signature": "WanAwareToolkitCache<String, Serializable> createWanAwareToolkitCache(final String cacheManagerName,\n                                                                                final String cacheName,\n                                                                                final ToolkitCacheInternal<String, Serializable> toolkitCache,\n                                                                                final CacheConfiguration cacheConfiguration,\n                                                                                final boolean masterCache,\n                                                                                final boolean bidirectional)", "full_signature": "private WanAwareToolkitCache<String, Serializable> createWanAwareToolkitCache(final String cacheManagerName,\n                                                                                final String cacheName,\n                                                                                final ToolkitCacheInternal<String, Serializable> toolkitCache,\n                                                                                final CacheConfiguration cacheConfiguration,\n                                                                                final boolean masterCache,\n                                                                                final boolean bidirectional)", "class_method_signature": "ToolkitInstanceFactoryImpl.createWanAwareToolkitCache(final String cacheManagerName,\n                                                                                final String cacheName,\n                                                                                final ToolkitCacheInternal<String, Serializable> toolkitCache,\n                                                                                final CacheConfiguration cacheConfiguration,\n                                                                                final boolean masterCache,\n                                                                                final boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateRegularToolkitCache", "parameters": "(final String cacheManagerName,\n                                                                                    final String cacheName,\n                                                                                    final CacheConfiguration ehcacheConfig)", "modifiers": "private", "return": "ToolkitCacheInternal<String, Serializable>", "signature": "ToolkitCacheInternal<String, Serializable> getOrCreateRegularToolkitCache(final String cacheManagerName,\n                                                                                    final String cacheName,\n                                                                                    final CacheConfiguration ehcacheConfig)", "full_signature": "private ToolkitCacheInternal<String, Serializable> getOrCreateRegularToolkitCache(final String cacheManagerName,\n                                                                                    final String cacheName,\n                                                                                    final CacheConfiguration ehcacheConfig)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateRegularToolkitCache(final String cacheManagerName,\n                                                                                    final String cacheName,\n                                                                                    final CacheConfiguration ehcacheConfig)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateToolkitCache", "parameters": "(final String fullyQualifiedCacheName,\n                                                                             final Configuration toolkitCacheConfig)", "modifiers": "private", "return": "ToolkitCacheInternal<String, Serializable>", "signature": "ToolkitCacheInternal<String, Serializable> getOrCreateToolkitCache(final String fullyQualifiedCacheName,\n                                                                             final Configuration toolkitCacheConfig)", "full_signature": "private ToolkitCacheInternal<String, Serializable> getOrCreateToolkitCache(final String fullyQualifiedCacheName,\n                                                                             final Configuration toolkitCacheConfig)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateToolkitCache(final String fullyQualifiedCacheName,\n                                                                             final Configuration toolkitCacheConfig)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateConfigChangeNotifier", "parameters": "(Ehcache cache)", "modifiers": "@Override public", "return": "ToolkitNotifier<CacheConfigChangeNotificationMsg>", "signature": "ToolkitNotifier<CacheConfigChangeNotificationMsg> getOrCreateConfigChangeNotifier(Ehcache cache)", "full_signature": "@Override public ToolkitNotifier<CacheConfigChangeNotificationMsg> getOrCreateConfigChangeNotifier(Ehcache cache)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateConfigChangeNotifier(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateConfigChangeNotifier", "parameters": "(String cacheManagerName, String cacheName)", "modifiers": "private", "return": "ToolkitNotifier<CacheConfigChangeNotificationMsg>", "signature": "ToolkitNotifier<CacheConfigChangeNotificationMsg> getOrCreateConfigChangeNotifier(String cacheManagerName, String cacheName)", "full_signature": "private ToolkitNotifier<CacheConfigChangeNotificationMsg> getOrCreateConfigChangeNotifier(String cacheManagerName, String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateConfigChangeNotifier(String cacheManagerName, String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateCacheEventNotifier", "parameters": "(Ehcache cache)", "modifiers": "@Override public", "return": "ToolkitNotifier<CacheEventNotificationMsg>", "signature": "ToolkitNotifier<CacheEventNotificationMsg> getOrCreateCacheEventNotifier(Ehcache cache)", "full_signature": "@Override public ToolkitNotifier<CacheEventNotificationMsg> getOrCreateCacheEventNotifier(Ehcache cache)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateCacheEventNotifier(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateCacheDisposalNotifier", "parameters": "(Ehcache cache)", "modifiers": "@Override public", "return": "ToolkitNotifier<CacheDisposalNotification>", "signature": "ToolkitNotifier<CacheDisposalNotification> getOrCreateCacheDisposalNotifier(Ehcache cache)", "full_signature": "@Override public ToolkitNotifier<CacheDisposalNotification> getOrCreateCacheDisposalNotifier(Ehcache cache)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateCacheDisposalNotifier(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateCacheEventNotifier", "parameters": "(String cacheManagerName, String cacheName)", "modifiers": "private", "return": "ToolkitNotifier<CacheEventNotificationMsg>", "signature": "ToolkitNotifier<CacheEventNotificationMsg> getOrCreateCacheEventNotifier(String cacheManagerName, String cacheName)", "full_signature": "private ToolkitNotifier<CacheEventNotificationMsg> getOrCreateCacheEventNotifier(String cacheManagerName, String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateCacheEventNotifier(String cacheManagerName, String cacheName)", "testcase": false, "constructor": false}, {"identifier": "createClusteredCacheConfig", "parameters": "(final CacheConfiguration ehcacheConfig,\n                                                          final String cacheManagerName)", "modifiers": "private static", "return": "Configuration", "signature": "Configuration createClusteredCacheConfig(final CacheConfiguration ehcacheConfig,\n                                                          final String cacheManagerName)", "full_signature": "private static Configuration createClusteredCacheConfig(final CacheConfiguration ehcacheConfig,\n                                                          final String cacheManagerName)", "class_method_signature": "ToolkitInstanceFactoryImpl.createClusteredCacheConfig(final CacheConfiguration ehcacheConfig,\n                                                          final String cacheManagerName)", "testcase": false, "constructor": false}, {"identifier": "isPinnedInCache", "parameters": "(final CacheConfiguration ehcacheConfig)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPinnedInCache(final CacheConfiguration ehcacheConfig)", "full_signature": "private static boolean isPinnedInCache(final CacheConfiguration ehcacheConfig)", "class_method_signature": "ToolkitInstanceFactoryImpl.isPinnedInCache(final CacheConfiguration ehcacheConfig)", "testcase": false, "constructor": false}, {"identifier": "calculateCorrectConcurrency", "parameters": "(CacheConfiguration cacheConfiguration)", "modifiers": "private static", "return": "int", "signature": "int calculateCorrectConcurrency(CacheConfiguration cacheConfiguration)", "full_signature": "private static int calculateCorrectConcurrency(CacheConfiguration cacheConfiguration)", "class_method_signature": "ToolkitInstanceFactoryImpl.calculateCorrectConcurrency(CacheConfiguration cacheConfiguration)", "testcase": false, "constructor": false}, {"identifier": "isPinnedInLocalMemory", "parameters": "(CacheConfiguration ehcacheConfig)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPinnedInLocalMemory(CacheConfiguration ehcacheConfig)", "full_signature": "private static boolean isPinnedInLocalMemory(CacheConfiguration ehcacheConfig)", "class_method_signature": "ToolkitInstanceFactoryImpl.isPinnedInLocalMemory(CacheConfiguration ehcacheConfig)", "testcase": false, "constructor": false}, {"identifier": "getFullyQualifiedCacheName", "parameters": "(Ehcache cache)", "modifiers": "@Override public", "return": "String", "signature": "String getFullyQualifiedCacheName(Ehcache cache)", "full_signature": "@Override public String getFullyQualifiedCacheName(Ehcache cache)", "class_method_signature": "ToolkitInstanceFactoryImpl.getFullyQualifiedCacheName(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getCacheManagerName", "parameters": "(Ehcache cache)", "modifiers": "private static", "return": "String", "signature": "String getCacheManagerName(Ehcache cache)", "full_signature": "private static String getCacheManagerName(Ehcache cache)", "class_method_signature": "ToolkitInstanceFactoryImpl.getCacheManagerName(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateStoreLock", "parameters": "(Ehcache cache)", "modifiers": "@Override public", "return": "ToolkitLock", "signature": "ToolkitLock getOrCreateStoreLock(Ehcache cache)", "full_signature": "@Override public ToolkitLock getOrCreateStoreLock(Ehcache cache)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateStoreLock(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateExtractorsMap", "parameters": "(final String cacheManagerName, String cacheName)", "modifiers": "@Override public", "return": "ToolkitMap<String, AttributeExtractor>", "signature": "ToolkitMap<String, AttributeExtractor> getOrCreateExtractorsMap(final String cacheManagerName, String cacheName)", "full_signature": "@Override public ToolkitMap<String, AttributeExtractor> getOrCreateExtractorsMap(final String cacheManagerName, String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateExtractorsMap(final String cacheManagerName, String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateAttributeMap", "parameters": "(final String cacheManagerName, String cacheName)", "modifiers": "@Override public", "return": "ToolkitMap<String, String>", "signature": "ToolkitMap<String, String> getOrCreateAttributeMap(final String cacheManagerName, String cacheName)", "full_signature": "@Override public ToolkitMap<String, String> getOrCreateAttributeMap(final String cacheManagerName, String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateAttributeMap(final String cacheManagerName, String cacheName)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "ToolkitInstanceFactoryImpl.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateAllSoftLockMap", "parameters": "(String cacheManagerName,\n                                                                                                                            String cacheName)", "modifiers": "@Override public", "return": "SerializedToolkitCache<ClusteredSoftLockIDKey, SerializedReadCommittedClusteredSoftLock>", "signature": "SerializedToolkitCache<ClusteredSoftLockIDKey, SerializedReadCommittedClusteredSoftLock> getOrCreateAllSoftLockMap(String cacheManagerName,\n                                                                                                                            String cacheName)", "full_signature": "@Override public SerializedToolkitCache<ClusteredSoftLockIDKey, SerializedReadCommittedClusteredSoftLock> getOrCreateAllSoftLockMap(String cacheManagerName,\n                                                                                                                            String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateAllSoftLockMap(String cacheManagerName,\n                                                                                                                            String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateNewSoftLocksSet", "parameters": "(String cacheManagerName,\n                                                                                                  String cacheName)", "modifiers": "@Override public", "return": "ToolkitMap<SerializedReadCommittedClusteredSoftLock, Integer>", "signature": "ToolkitMap<SerializedReadCommittedClusteredSoftLock, Integer> getOrCreateNewSoftLocksSet(String cacheManagerName,\n                                                                                                  String cacheName)", "full_signature": "@Override public ToolkitMap<SerializedReadCommittedClusteredSoftLock, Integer> getOrCreateNewSoftLocksSet(String cacheManagerName,\n                                                                                                  String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateNewSoftLocksSet(String cacheManagerName,\n                                                                                                  String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateAsyncConfigMap", "parameters": "()", "modifiers": "@Override public", "return": "ToolkitMap<String, AsyncConfig>", "signature": "ToolkitMap<String, AsyncConfig> getOrCreateAsyncConfigMap()", "full_signature": "@Override public ToolkitMap<String, AsyncConfig> getOrCreateAsyncConfigMap()", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateAsyncConfigMap()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateAsyncListNamesMap", "parameters": "(String fullAsyncName, String cacheName)", "modifiers": "@Override public", "return": "ToolkitMap<String, Set<String>>", "signature": "ToolkitMap<String, Set<String>> getOrCreateAsyncListNamesMap(String fullAsyncName, String cacheName)", "full_signature": "@Override public ToolkitMap<String, Set<String>> getOrCreateAsyncListNamesMap(String fullAsyncName, String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateAsyncListNamesMap(String fullAsyncName, String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getAsyncProcessingBucket", "parameters": "(String bucketName, String cacheName)", "modifiers": "@Override public", "return": "ToolkitListInternal", "signature": "ToolkitListInternal getAsyncProcessingBucket(String bucketName, String cacheName)", "full_signature": "@Override public ToolkitListInternal getAsyncProcessingBucket(String bucketName, String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getAsyncProcessingBucket(String bucketName, String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateClusteredStoreConfigMap", "parameters": "(String cacheManagerName, String cacheName)", "modifiers": "@Override public", "return": "ToolkitMap<String, Serializable>", "signature": "ToolkitMap<String, Serializable> getOrCreateClusteredStoreConfigMap(String cacheManagerName, String cacheName)", "full_signature": "@Override public ToolkitMap<String, Serializable> getOrCreateClusteredStoreConfigMap(String cacheManagerName, String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateClusteredStoreConfigMap(String cacheManagerName, String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateConfigMap", "parameters": "(final String fullyQualifiedCacheName)", "modifiers": "private", "return": "ToolkitMap<String, Serializable>", "signature": "ToolkitMap<String, Serializable> getOrCreateConfigMap(final String fullyQualifiedCacheName)", "full_signature": "private ToolkitMap<String, Serializable> getOrCreateConfigMap(final String fullyQualifiedCacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateConfigMap(final String fullyQualifiedCacheName)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateTransactionCommitStateMap", "parameters": "(String cacheManagerName)", "modifiers": "@Override public", "return": "SerializedToolkitCache<TransactionID, Decision>", "signature": "SerializedToolkitCache<TransactionID, Decision> getOrCreateTransactionCommitStateMap(String cacheManagerName)", "full_signature": "@Override public SerializedToolkitCache<TransactionID, Decision> getOrCreateTransactionCommitStateMap(String cacheManagerName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateTransactionCommitStateMap(String cacheManagerName)", "testcase": false, "constructor": false}, {"identifier": "getSoftLockWriteLock", "parameters": "(String cacheManagerName, String cacheName, TransactionID transactionID,\n                                          Object key)", "modifiers": "@Override public", "return": "ToolkitLock", "signature": "ToolkitLock getSoftLockWriteLock(String cacheManagerName, String cacheName, TransactionID transactionID,\n                                          Object key)", "full_signature": "@Override public ToolkitLock getSoftLockWriteLock(String cacheManagerName, String cacheName, TransactionID transactionID,\n                                          Object key)", "class_method_signature": "ToolkitInstanceFactoryImpl.getSoftLockWriteLock(String cacheManagerName, String cacheName, TransactionID transactionID,\n                                          Object key)", "testcase": false, "constructor": false}, {"identifier": "getLockForCache", "parameters": "(Ehcache cache, String lockName)", "modifiers": "@Override public", "return": "ToolkitLock", "signature": "ToolkitLock getLockForCache(Ehcache cache, String lockName)", "full_signature": "@Override public ToolkitLock getLockForCache(Ehcache cache, String lockName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getLockForCache(Ehcache cache, String lockName)", "testcase": false, "constructor": false}, {"identifier": "serializeToString", "parameters": "(Object serializable)", "modifiers": "private static", "return": "String", "signature": "String serializeToString(Object serializable)", "full_signature": "private static String serializeToString(Object serializable)", "class_method_signature": "ToolkitInstanceFactoryImpl.serializeToString(Object serializable)", "testcase": false, "constructor": false}, {"identifier": "getSoftLockFreezeLock", "parameters": "(String cacheManagerName, String cacheName,\n                                                    TransactionID transactionID, Object key)", "modifiers": "@Override public", "return": "ToolkitReadWriteLock", "signature": "ToolkitReadWriteLock getSoftLockFreezeLock(String cacheManagerName, String cacheName,\n                                                    TransactionID transactionID, Object key)", "full_signature": "@Override public ToolkitReadWriteLock getSoftLockFreezeLock(String cacheManagerName, String cacheName,\n                                                    TransactionID transactionID, Object key)", "class_method_signature": "ToolkitInstanceFactoryImpl.getSoftLockFreezeLock(String cacheManagerName, String cacheName,\n                                                    TransactionID transactionID, Object key)", "testcase": false, "constructor": false}, {"identifier": "getSoftLockNotifierLock", "parameters": "(String cacheManagerName, String cacheName,\n                                                      TransactionID transactionID, Object key)", "modifiers": "@Override public", "return": "ToolkitReadWriteLock", "signature": "ToolkitReadWriteLock getSoftLockNotifierLock(String cacheManagerName, String cacheName,\n                                                      TransactionID transactionID, Object key)", "full_signature": "@Override public ToolkitReadWriteLock getSoftLockNotifierLock(String cacheManagerName, String cacheName,\n                                                      TransactionID transactionID, Object key)", "class_method_signature": "ToolkitInstanceFactoryImpl.getSoftLockNotifierLock(String cacheManagerName, String cacheName,\n                                                      TransactionID transactionID, Object key)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(final String cacheManagerName, final String cacheName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean destroy(final String cacheManagerName, final String cacheName)", "full_signature": "@Override public boolean destroy(final String cacheManagerName, final String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.destroy(final String cacheManagerName, final String cacheName)", "testcase": false, "constructor": false}, {"identifier": "addNonStopConfigForCache", "parameters": "(final CacheConfiguration ehcacheConfig, final String fullyQualifiedCacheName)", "modifiers": "protected", "return": "void", "signature": "void addNonStopConfigForCache(final CacheConfiguration ehcacheConfig, final String fullyQualifiedCacheName)", "full_signature": "protected void addNonStopConfigForCache(final CacheConfiguration ehcacheConfig, final String fullyQualifiedCacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.addNonStopConfigForCache(final CacheConfiguration ehcacheConfig, final String fullyQualifiedCacheName)", "testcase": false, "constructor": false}, {"identifier": "removeNonStopConfigforCache", "parameters": "(Ehcache cache)", "modifiers": "@Override public", "return": "void", "signature": "void removeNonStopConfigforCache(Ehcache cache)", "full_signature": "@Override public void removeNonStopConfigforCache(Ehcache cache)", "class_method_signature": "ToolkitInstanceFactoryImpl.removeNonStopConfigforCache(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "addCacheMetaInfo", "parameters": "(String cacheName, ToolkitObjectType type, String dsName)", "modifiers": "protected", "return": "void", "signature": "void addCacheMetaInfo(String cacheName, ToolkitObjectType type, String dsName)", "full_signature": "protected void addCacheMetaInfo(String cacheName, ToolkitObjectType type, String dsName)", "class_method_signature": "ToolkitInstanceFactoryImpl.addCacheMetaInfo(String cacheName, ToolkitObjectType type, String dsName)", "testcase": false, "constructor": false}, {"identifier": "addKeyRemoveInfo", "parameters": "(String cacheName, String toolkitMapName, String keytoBeRemoved)", "modifiers": "private", "return": "void", "signature": "void addKeyRemoveInfo(String cacheName, String toolkitMapName, String keytoBeRemoved)", "full_signature": "private void addKeyRemoveInfo(String cacheName, String toolkitMapName, String keytoBeRemoved)", "class_method_signature": "ToolkitInstanceFactoryImpl.addKeyRemoveInfo(String cacheName, String toolkitMapName, String keytoBeRemoved)", "testcase": false, "constructor": false}, {"identifier": "linkClusteredCacheManager", "parameters": "(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "modifiers": "@Override public", "return": "void", "signature": "void linkClusteredCacheManager(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "full_signature": "@Override public void linkClusteredCacheManager(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "class_method_signature": "ToolkitInstanceFactoryImpl.linkClusteredCacheManager(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "logCacheManagerConfigInTerracottaClientLogs", "parameters": "(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "modifiers": "private", "return": "void", "signature": "void logCacheManagerConfigInTerracottaClientLogs(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "full_signature": "private void logCacheManagerConfigInTerracottaClientLogs(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "class_method_signature": "ToolkitInstanceFactoryImpl.logCacheManagerConfigInTerracottaClientLogs(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "createClusteredCacheManagerEntity", "parameters": "(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "modifiers": "private", "return": "ClusteredCacheManager", "signature": "ClusteredCacheManager createClusteredCacheManagerEntity(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "full_signature": "private ClusteredCacheManager createClusteredCacheManagerEntity(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "class_method_signature": "ToolkitInstanceFactoryImpl.createClusteredCacheManagerEntity(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateCacheManagerMetaInfoMap", "parameters": "(String cacheManagerName)", "modifiers": "@Override public", "return": "ToolkitMap<String, Serializable>", "signature": "ToolkitMap<String, Serializable> getOrCreateCacheManagerMetaInfoMap(String cacheManagerName)", "full_signature": "@Override public ToolkitMap<String, Serializable> getOrCreateCacheManagerMetaInfoMap(String cacheManagerName)", "class_method_signature": "ToolkitInstanceFactoryImpl.getOrCreateCacheManagerMetaInfoMap(String cacheManagerName)", "testcase": false, "constructor": false}, {"identifier": "addCacheEntityInfo", "parameters": "(final String cacheName, final CacheConfiguration ehcacheConfig, String toolkitCacheName)", "modifiers": "", "return": "void", "signature": "void addCacheEntityInfo(final String cacheName, final CacheConfiguration ehcacheConfig, String toolkitCacheName)", "full_signature": " void addCacheEntityInfo(final String cacheName, final CacheConfiguration ehcacheConfig, String toolkitCacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.addCacheEntityInfo(final String cacheName, final CacheConfiguration ehcacheConfig, String toolkitCacheName)", "testcase": false, "constructor": false}, {"identifier": "logCacheConfigInTerracottaClientLogs", "parameters": "(String cacheName, CacheConfiguration ehcacheConfig)", "modifiers": "private", "return": "void", "signature": "void logCacheConfigInTerracottaClientLogs(String cacheName, CacheConfiguration ehcacheConfig)", "full_signature": "private void logCacheConfigInTerracottaClientLogs(String cacheName, CacheConfiguration ehcacheConfig)", "class_method_signature": "ToolkitInstanceFactoryImpl.logCacheConfigInTerracottaClientLogs(String cacheName, CacheConfiguration ehcacheConfig)", "testcase": false, "constructor": false}, {"identifier": "createClusteredCacheEntity", "parameters": "(String cacheName, CacheConfiguration ehcacheConfig, String toolkitCacheName)", "modifiers": "private", "return": "ClusteredCache", "signature": "ClusteredCache createClusteredCacheEntity(String cacheName, CacheConfiguration ehcacheConfig, String toolkitCacheName)", "full_signature": "private ClusteredCache createClusteredCacheEntity(String cacheName, CacheConfiguration ehcacheConfig, String toolkitCacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.createClusteredCacheEntity(String cacheName, CacheConfiguration ehcacheConfig, String toolkitCacheName)", "testcase": false, "constructor": false}, {"identifier": "createClusteredCacheConfiguration", "parameters": "(CacheConfiguration ehcacheConfig)", "modifiers": "private", "return": "ClusteredCacheConfiguration", "signature": "ClusteredCacheConfiguration createClusteredCacheConfiguration(CacheConfiguration ehcacheConfig)", "full_signature": "private ClusteredCacheConfiguration createClusteredCacheConfiguration(CacheConfiguration ehcacheConfig)", "class_method_signature": "ToolkitInstanceFactoryImpl.createClusteredCacheConfiguration(CacheConfiguration ehcacheConfig)", "testcase": false, "constructor": false}, {"identifier": "convertCacheConfigurationToXMLString", "parameters": "(CacheConfiguration ehcacheConfig)", "modifiers": "private", "return": "String", "signature": "String convertCacheConfigurationToXMLString(CacheConfiguration ehcacheConfig)", "full_signature": "private String convertCacheConfigurationToXMLString(CacheConfiguration ehcacheConfig)", "class_method_signature": "ToolkitInstanceFactoryImpl.convertCacheConfigurationToXMLString(CacheConfiguration ehcacheConfig)", "testcase": false, "constructor": false}, {"identifier": "unlinkCache", "parameters": "(String cacheName)", "modifiers": "@Override public", "return": "void", "signature": "void unlinkCache(String cacheName)", "full_signature": "@Override public void unlinkCache(String cacheName)", "class_method_signature": "ToolkitInstanceFactoryImpl.unlinkCache(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "clusterRejoined", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clusterRejoined()", "full_signature": "@Override public void clusterRejoined()", "class_method_signature": "ToolkitInstanceFactoryImpl.clusterRejoined()", "testcase": false, "constructor": false}, {"identifier": "convertConfigurationToXMLString", "parameters": "(net.sf.ehcache.config.Configuration configuration, String cacheManagerName, boolean stripCacheConfigs)", "modifiers": "private", "return": "String", "signature": "String convertConfigurationToXMLString(net.sf.ehcache.config.Configuration configuration, String cacheManagerName, boolean stripCacheConfigs)", "full_signature": "private String convertConfigurationToXMLString(net.sf.ehcache.config.Configuration configuration, String cacheManagerName, boolean stripCacheConfigs)", "class_method_signature": "ToolkitInstanceFactoryImpl.convertConfigurationToXMLString(net.sf.ehcache.config.Configuration configuration, String cacheManagerName, boolean stripCacheConfigs)", "testcase": false, "constructor": false}, {"identifier": "cloneConfiguration", "parameters": "(net.sf.ehcache.config.Configuration configuration)", "modifiers": "private", "return": "net.sf.ehcache.config.Configuration", "signature": "net.sf.ehcache.config.Configuration cloneConfiguration(net.sf.ehcache.config.Configuration configuration)", "full_signature": "private net.sf.ehcache.config.Configuration cloneConfiguration(net.sf.ehcache.config.Configuration configuration)", "class_method_signature": "ToolkitInstanceFactoryImpl.cloneConfiguration(net.sf.ehcache.config.Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "parseCacheManagerConfiguration", "parameters": "(String xmlCacheManagerConfig)", "modifiers": "private", "return": "net.sf.ehcache.config.Configuration", "signature": "net.sf.ehcache.config.Configuration parseCacheManagerConfiguration(String xmlCacheManagerConfig)", "full_signature": "private net.sf.ehcache.config.Configuration parseCacheManagerConfiguration(String xmlCacheManagerConfig)", "class_method_signature": "ToolkitInstanceFactoryImpl.parseCacheManagerConfiguration(String xmlCacheManagerConfig)", "testcase": false, "constructor": false}], "file": "tags/ehcache-2.10.0-16-pipeline/terracotta/bootstrap/src/main/java/org/terracotta/modules/ehcache/ToolkitInstanceFactoryImpl.java"}, "focal_method": {"identifier": "linkClusteredCacheManager", "parameters": "(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void linkClusteredCacheManager(String cacheManagerName, net.sf.ehcache.config.Configuration configuration) {\n    if (clusteredCacheManagerEntity == null) {\n      logCacheManagerConfigInTerracottaClientLogs(cacheManagerName, configuration);\n\n      ClusteredCacheManager clusteredCacheManager = clusteredEntityManager.getRootEntity(cacheManagerName,\n          ClusteredCacheManager.class);\n      ToolkitReadWriteLock cmRWLock = clusteredEntityManager.getEntityLock(EhcacheEntitiesNaming\n          .getCacheManagerLockNameFor(cacheManagerName));\n      ToolkitLock cmWriteLock = cmRWLock.writeLock();\n      while (clusteredCacheManager == null) {\n        if (cmWriteLock.tryLock()) {\n          try {\n            clusteredCacheManager = createClusteredCacheManagerEntity(cacheManagerName, configuration);\n          } finally {\n            cmWriteLock.unlock();\n          }\n        } else {\n          clusteredCacheManager = clusteredEntityManager.getRootEntity(cacheManagerName, ClusteredCacheManager.class);\n        }\n      }\n      clusteredCacheManagerEntity = clusteredCacheManager;\n      entityNames.setCacheManagerName(cacheManagerName);\n    }\n  }", "signature": "void linkClusteredCacheManager(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "full_signature": "@Override public void linkClusteredCacheManager(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "class_method_signature": "ToolkitInstanceFactoryImpl.linkClusteredCacheManager(String cacheManagerName, net.sf.ehcache.config.Configuration configuration)", "testcase": false, "constructor": false, "invocations": ["logCacheManagerConfigInTerracottaClientLogs", "getRootEntity", "getEntityLock", "getCacheManagerLockNameFor", "writeLock", "tryLock", "createClusteredCacheManagerEntity", "unlock", "getRootEntity", "setCacheManagerName"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}