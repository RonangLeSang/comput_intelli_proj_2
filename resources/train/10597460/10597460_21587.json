{"test_class": {"identifier": "CacheManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CacheManagerTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CacheManagerTest.class.getName())", "var_name": "LOG"}, {"original_string": "protected CacheManager singletonManager;", "modifier": "protected", "type": "CacheManager", "declarator": "singletonManager", "var_name": "singletonManager"}, {"original_string": "protected CacheManager instanceManager;", "modifier": "protected", "type": "CacheManager", "declarator": "instanceManager", "var_name": "instanceManager"}], "file": "branches/events/core/src/test/java/net/sf/ehcache/CacheManagerTest.java"}, "test_case": {"identifier": "testMultipleCacheManagers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleCacheManagers() {\n        CacheManager[] managers = new CacheManager[2];\n        managers[0] = new CacheManager(makeCacheManagerConfig());\n        managers[1] = new CacheManager(makeCacheManagerConfig());\n\n        managers[0].shutdown();\n        managers[1].shutdown();\n\n    }", "signature": "void testMultipleCacheManagers()", "full_signature": "@Test public void testMultipleCacheManagers()", "class_method_signature": "CacheManagerTest.testMultipleCacheManagers()", "testcase": true, "constructor": false, "invocations": ["makeCacheManagerConfig", "makeCacheManagerConfig", "shutdown", "shutdown"]}, "focal_class": {"identifier": "CacheManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final List<CacheManager> ALL_CACHE_MANAGERS = new CopyOnWriteArrayList<CacheManager>();", "modifier": "public static final", "type": "List<CacheManager>", "declarator": "ALL_CACHE_MANAGERS = new CopyOnWriteArrayList<CacheManager>()", "var_name": "ALL_CACHE_MANAGERS"}, {"original_string": "public static final String ENABLE_SHUTDOWN_HOOK_PROPERTY = \"net.sf.ehcache.enableShutdownHook\";", "modifier": "public static final", "type": "String", "declarator": "ENABLE_SHUTDOWN_HOOK_PROPERTY = \"net.sf.ehcache.enableShutdownHook\"", "var_name": "ENABLE_SHUTDOWN_HOOK_PROPERTY"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CacheManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CacheManager.class)", "var_name": "LOG"}, {"original_string": "private static final long EVERY_WEEK = 7 * 24 * 60 * 60 * 1000;", "modifier": "private static final", "type": "long", "declarator": "EVERY_WEEK = 7 * 24 * 60 * 60 * 1000", "var_name": "EVERY_WEEK"}, {"original_string": "private static volatile CacheManager singleton;", "modifier": "private static volatile", "type": "CacheManager", "declarator": "singleton", "var_name": "singleton"}, {"original_string": "private static MBeanRegistrationProviderFactory mBeanRegistrationProviderFactory = new MBeanRegistrationProviderFactoryImpl();", "modifier": "private static", "type": "MBeanRegistrationProviderFactory", "declarator": "mBeanRegistrationProviderFactory = new MBeanRegistrationProviderFactoryImpl()", "var_name": "mBeanRegistrationProviderFactory"}, {"original_string": "protected final Map ehcaches = new ConcurrentHashMap();", "modifier": "protected final", "type": "Map", "declarator": "ehcaches = new ConcurrentHashMap()", "var_name": "ehcaches"}, {"original_string": "protected final Map caches = new ConcurrentHashMap();", "modifier": "protected final", "type": "Map", "declarator": "caches = new ConcurrentHashMap()", "var_name": "caches"}, {"original_string": "protected String name;", "modifier": "protected", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "protected Status status;", "modifier": "protected", "type": "Status", "declarator": "status", "var_name": "status"}, {"original_string": "protected Map<String, CacheManagerPeerProvider> cacheManagerPeerProviders = new ConcurrentHashMap<String, CacheManagerPeerProvider>();", "modifier": "protected", "type": "Map<String, CacheManagerPeerProvider>", "declarator": "cacheManagerPeerProviders = new ConcurrentHashMap<String, CacheManagerPeerProvider>()", "var_name": "cacheManagerPeerProviders"}, {"original_string": "protected Map<String, CacheManagerPeerListener> cacheManagerPeerListeners = new ConcurrentHashMap<String, CacheManagerPeerListener>();", "modifier": "protected", "type": "Map<String, CacheManagerPeerListener>", "declarator": "cacheManagerPeerListeners = new ConcurrentHashMap<String, CacheManagerPeerListener>()", "var_name": "cacheManagerPeerListeners"}, {"original_string": "protected CacheManagerEventListenerRegistry cacheManagerEventListenerRegistry = new CacheManagerEventListenerRegistry();", "modifier": "protected", "type": "CacheManagerEventListenerRegistry", "declarator": "cacheManagerEventListenerRegistry = new CacheManagerEventListenerRegistry()", "var_name": "cacheManagerEventListenerRegistry"}, {"original_string": "protected Thread shutdownHook;", "modifier": "protected", "type": "Thread", "declarator": "shutdownHook", "var_name": "shutdownHook"}, {"original_string": "private Ehcache defaultCache;", "modifier": "private", "type": "Ehcache", "declarator": "defaultCache", "var_name": "defaultCache"}, {"original_string": "private String diskStorePath;", "modifier": "private", "type": "String", "declarator": "diskStorePath", "var_name": "diskStorePath"}, {"original_string": "private MBeanRegistrationProvider mbeanRegistrationProvider;", "modifier": "private", "type": "MBeanRegistrationProvider", "declarator": "mbeanRegistrationProvider", "var_name": "mbeanRegistrationProvider"}, {"original_string": "private FailSafeTimer cacheManagerTimer;", "modifier": "private", "type": "FailSafeTimer", "declarator": "cacheManagerTimer", "var_name": "cacheManagerTimer"}, {"original_string": "private volatile ClusteredInstanceFactory terracottaClusteredInstanceFactory;", "modifier": "private volatile", "type": "ClusteredInstanceFactory", "declarator": "terracottaClusteredInstanceFactory", "var_name": "terracottaClusteredInstanceFactory"}, {"original_string": "private TerracottaConfigConfiguration terracottaConfigConfiguration;", "modifier": "private", "type": "TerracottaConfigConfiguration", "declarator": "terracottaConfigConfiguration", "var_name": "terracottaConfigConfiguration"}, {"original_string": "private AtomicBoolean terracottaStoreFactoryCreated = new AtomicBoolean(false);", "modifier": "private", "type": "AtomicBoolean", "declarator": "terracottaStoreFactoryCreated = new AtomicBoolean(false)", "var_name": "terracottaStoreFactoryCreated"}, {"original_string": "private volatile ConfigurationSource originalConfigurationSource;", "modifier": "private volatile", "type": "ConfigurationSource", "declarator": "originalConfigurationSource", "var_name": "originalConfigurationSource"}, {"original_string": "private Configuration configuration;", "modifier": "private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private volatile boolean allowsDynamicCacheConfig = true;", "modifier": "private volatile", "type": "boolean", "declarator": "allowsDynamicCacheConfig = true", "var_name": "allowsDynamicCacheConfig"}], "methods": [{"identifier": "CacheManager", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "", "signature": " CacheManager(Configuration configuration)", "full_signature": "public  CacheManager(Configuration configuration)", "class_method_signature": "CacheManager.CacheManager(Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "(String configurationFileName)", "modifiers": "public", "return": "", "signature": " CacheManager(String configurationFileName)", "full_signature": "public  CacheManager(String configurationFileName)", "class_method_signature": "CacheManager.CacheManager(String configurationFileName)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "(URL configurationURL)", "modifiers": "public", "return": "", "signature": " CacheManager(URL configurationURL)", "full_signature": "public  CacheManager(URL configurationURL)", "class_method_signature": "CacheManager.CacheManager(URL configurationURL)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "(InputStream configurationInputStream)", "modifiers": "public", "return": "", "signature": " CacheManager(InputStream configurationInputStream)", "full_signature": "public  CacheManager(InputStream configurationInputStream)", "class_method_signature": "CacheManager.CacheManager(InputStream configurationInputStream)", "testcase": false, "constructor": true}, {"identifier": "CacheManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " CacheManager()", "full_signature": "public  CacheManager()", "class_method_signature": "CacheManager.CacheManager()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Configuration configuration, String configurationFileName, URL configurationURL,\n                        InputStream configurationInputStream)", "modifiers": "protected", "return": "void", "signature": "void init(Configuration configuration, String configurationFileName, URL configurationURL,\n                        InputStream configurationInputStream)", "full_signature": "protected void init(Configuration configuration, String configurationFileName, URL configurationURL,\n                        InputStream configurationInputStream)", "class_method_signature": "CacheManager.init(Configuration configuration, String configurationFileName, URL configurationURL,\n                        InputStream configurationInputStream)", "testcase": false, "constructor": false}, {"identifier": "getClusterUUID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClusterUUID()", "full_signature": "public String getClusterUUID()", "class_method_signature": "CacheManager.getClusterUUID()", "testcase": false, "constructor": false}, {"identifier": "getClientUUID", "parameters": "(ClusteredInstanceFactory clusteredInstanceFactory)", "modifiers": "private static", "return": "String", "signature": "String getClientUUID(ClusteredInstanceFactory clusteredInstanceFactory)", "full_signature": "private static String getClientUUID(ClusteredInstanceFactory clusteredInstanceFactory)", "class_method_signature": "CacheManager.getClientUUID(ClusteredInstanceFactory clusteredInstanceFactory)", "testcase": false, "constructor": false}, {"identifier": "initializeMBeanRegistrationProvider", "parameters": "(Configuration localConfiguration)", "modifiers": "private", "return": "void", "signature": "void initializeMBeanRegistrationProvider(Configuration localConfiguration)", "full_signature": "private void initializeMBeanRegistrationProvider(Configuration localConfiguration)", "class_method_signature": "CacheManager.initializeMBeanRegistrationProvider(Configuration localConfiguration)", "testcase": false, "constructor": false}, {"identifier": "createTerracottaStore", "parameters": "(Ehcache cache)", "modifiers": "", "return": "Store", "signature": "Store createTerracottaStore(Ehcache cache)", "full_signature": " Store createTerracottaStore(Ehcache cache)", "class_method_signature": "CacheManager.createTerracottaStore(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "createWriteBehind", "parameters": "(Ehcache cache)", "modifiers": "", "return": "WriteBehind", "signature": "WriteBehind createWriteBehind(Ehcache cache)", "full_signature": " WriteBehind createWriteBehind(Ehcache cache)", "class_method_signature": "CacheManager.createWriteBehind(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "getClusteredInstanceFactory", "parameters": "(Ehcache cache)", "modifiers": "private", "return": "ClusteredInstanceFactory", "signature": "ClusteredInstanceFactory getClusteredInstanceFactory(Ehcache cache)", "full_signature": "private ClusteredInstanceFactory getClusteredInstanceFactory(Ehcache cache)", "class_method_signature": "CacheManager.getClusteredInstanceFactory(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "checkForUpdateIfNeeded", "parameters": "(boolean updateCheckNeeded)", "modifiers": "private", "return": "void", "signature": "void checkForUpdateIfNeeded(boolean updateCheckNeeded)", "full_signature": "private void checkForUpdateIfNeeded(boolean updateCheckNeeded)", "class_method_signature": "CacheManager.checkForUpdateIfNeeded(boolean updateCheckNeeded)", "testcase": false, "constructor": false}, {"identifier": "parseConfiguration", "parameters": "(String configurationFileName, URL configurationURL,\n                                                          InputStream configurationInputStream)", "modifiers": "private synchronized", "return": "Configuration", "signature": "Configuration parseConfiguration(String configurationFileName, URL configurationURL,\n                                                          InputStream configurationInputStream)", "full_signature": "private synchronized Configuration parseConfiguration(String configurationFileName, URL configurationURL,\n                                                          InputStream configurationInputStream)", "class_method_signature": "CacheManager.parseConfiguration(String configurationFileName, URL configurationURL,\n                                                          InputStream configurationInputStream)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(ConfigurationHelper configurationHelper)", "modifiers": "private", "return": "void", "signature": "void configure(ConfigurationHelper configurationHelper)", "full_signature": "private void configure(ConfigurationHelper configurationHelper)", "class_method_signature": "CacheManager.configure(ConfigurationHelper configurationHelper)", "testcase": false, "constructor": false}, {"identifier": "detectAndFixDiskStorePathConflict", "parameters": "(ConfigurationHelper configurationHelper)", "modifiers": "private", "return": "void", "signature": "void detectAndFixDiskStorePathConflict(ConfigurationHelper configurationHelper)", "full_signature": "private void detectAndFixDiskStorePathConflict(ConfigurationHelper configurationHelper)", "class_method_signature": "CacheManager.detectAndFixDiskStorePathConflict(ConfigurationHelper configurationHelper)", "testcase": false, "constructor": false}, {"identifier": "detectAndFixCacheManagerPeerListenerConflict", "parameters": "(ConfigurationHelper configurationHelper)", "modifiers": "private", "return": "void", "signature": "void detectAndFixCacheManagerPeerListenerConflict(ConfigurationHelper configurationHelper)", "full_signature": "private void detectAndFixCacheManagerPeerListenerConflict(ConfigurationHelper configurationHelper)", "class_method_signature": "CacheManager.detectAndFixCacheManagerPeerListenerConflict(ConfigurationHelper configurationHelper)", "testcase": false, "constructor": false}, {"identifier": "addConfiguredCaches", "parameters": "(ConfigurationHelper configurationHelper)", "modifiers": "private", "return": "void", "signature": "void addConfiguredCaches(ConfigurationHelper configurationHelper)", "full_signature": "private void addConfiguredCaches(ConfigurationHelper configurationHelper)", "class_method_signature": "CacheManager.addConfiguredCaches(ConfigurationHelper configurationHelper)", "testcase": false, "constructor": false}, {"identifier": "reinitialisationCheck", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reinitialisationCheck()", "full_signature": "private void reinitialisationCheck()", "class_method_signature": "CacheManager.reinitialisationCheck()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create()", "full_signature": "public static CacheManager create()", "class_method_signature": "CacheManager.create()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager getInstance()", "full_signature": "public static CacheManager getInstance()", "class_method_signature": "CacheManager.getInstance()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String configurationFileName)", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create(String configurationFileName)", "full_signature": "public static CacheManager create(String configurationFileName)", "class_method_signature": "CacheManager.create(String configurationFileName)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(URL configurationFileURL)", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create(URL configurationFileURL)", "full_signature": "public static CacheManager create(URL configurationFileURL)", "class_method_signature": "CacheManager.create(URL configurationFileURL)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "CacheManager", "signature": "CacheManager create(InputStream inputStream)", "full_signature": "public static CacheManager create(InputStream inputStream)", "class_method_signature": "CacheManager.create(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getCache", "parameters": "(String name)", "modifiers": "public", "return": "Cache", "signature": "Cache getCache(String name)", "full_signature": "public Cache getCache(String name)", "class_method_signature": "CacheManager.getCache(String name)", "testcase": false, "constructor": false}, {"identifier": "getEhcache", "parameters": "(String name)", "modifiers": "public", "return": "Ehcache", "signature": "Ehcache getEhcache(String name)", "full_signature": "public Ehcache getEhcache(String name)", "class_method_signature": "CacheManager.getEhcache(String name)", "testcase": false, "constructor": false}, {"identifier": "addShutdownHookIfRequired", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addShutdownHookIfRequired()", "full_signature": "private void addShutdownHookIfRequired()", "class_method_signature": "CacheManager.addShutdownHookIfRequired()", "testcase": false, "constructor": false}, {"identifier": "removeShutdownHook", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeShutdownHook()", "full_signature": "private void removeShutdownHook()", "class_method_signature": "CacheManager.removeShutdownHook()", "testcase": false, "constructor": false}, {"identifier": "addCache", "parameters": "(String cacheName)", "modifiers": "public", "return": "void", "signature": "void addCache(String cacheName)", "full_signature": "public void addCache(String cacheName)", "class_method_signature": "CacheManager.addCache(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "addCache", "parameters": "(Cache cache)", "modifiers": "public", "return": "void", "signature": "void addCache(Cache cache)", "full_signature": "public void addCache(Cache cache)", "class_method_signature": "CacheManager.addCache(Cache cache)", "testcase": false, "constructor": false}, {"identifier": "addCache", "parameters": "(Ehcache cache)", "modifiers": "public", "return": "void", "signature": "void addCache(Ehcache cache)", "full_signature": "public void addCache(Ehcache cache)", "class_method_signature": "CacheManager.addCache(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "addCacheNoCheck", "parameters": "(Ehcache cache)", "modifiers": "private", "return": "void", "signature": "void addCacheNoCheck(Ehcache cache)", "full_signature": "private void addCacheNoCheck(Ehcache cache)", "class_method_signature": "CacheManager.addCacheNoCheck(Ehcache cache)", "testcase": false, "constructor": false}, {"identifier": "cacheExists", "parameters": "(String cacheName)", "modifiers": "public", "return": "boolean", "signature": "boolean cacheExists(String cacheName)", "full_signature": "public boolean cacheExists(String cacheName)", "class_method_signature": "CacheManager.cacheExists(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "removalAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removalAll()", "full_signature": "public void removalAll()", "class_method_signature": "CacheManager.removalAll()", "testcase": false, "constructor": false}, {"identifier": "removeCache", "parameters": "(String cacheName)", "modifiers": "public", "return": "void", "signature": "void removeCache(String cacheName)", "full_signature": "public void removeCache(String cacheName)", "class_method_signature": "CacheManager.removeCache(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "CacheManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getCacheNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getCacheNames()", "full_signature": "public String[] getCacheNames()", "class_method_signature": "CacheManager.getCacheNames()", "testcase": false, "constructor": false}, {"identifier": "checkStatus", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkStatus()", "full_signature": "protected void checkStatus()", "class_method_signature": "CacheManager.checkStatus()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "Status", "signature": "Status getStatus()", "full_signature": "public Status getStatus()", "class_method_signature": "CacheManager.getStatus()", "testcase": false, "constructor": false}, {"identifier": "clearAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearAll()", "full_signature": "public void clearAll()", "class_method_signature": "CacheManager.clearAll()", "testcase": false, "constructor": false}, {"identifier": "clearAllStartingWith", "parameters": "(String prefix)", "modifiers": "public", "return": "void", "signature": "void clearAllStartingWith(String prefix)", "full_signature": "public void clearAllStartingWith(String prefix)", "class_method_signature": "CacheManager.clearAllStartingWith(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getCacheManagerPeerProvider", "parameters": "(String scheme)", "modifiers": "public", "return": "CacheManagerPeerProvider", "signature": "CacheManagerPeerProvider getCacheManagerPeerProvider(String scheme)", "full_signature": "public CacheManagerPeerProvider getCacheManagerPeerProvider(String scheme)", "class_method_signature": "CacheManager.getCacheManagerPeerProvider(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getCachePeerListener", "parameters": "(String scheme)", "modifiers": "public", "return": "CacheManagerPeerListener", "signature": "CacheManagerPeerListener getCachePeerListener(String scheme)", "full_signature": "public CacheManagerPeerListener getCachePeerListener(String scheme)", "class_method_signature": "CacheManager.getCachePeerListener(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getCacheManagerEventListener", "parameters": "()", "modifiers": "public", "return": "CacheManagerEventListener", "signature": "CacheManagerEventListener getCacheManagerEventListener()", "full_signature": "public CacheManagerEventListener getCacheManagerEventListener()", "class_method_signature": "CacheManager.getCacheManagerEventListener()", "testcase": false, "constructor": false}, {"identifier": "setCacheManagerEventListener", "parameters": "(CacheManagerEventListener cacheManagerEventListener)", "modifiers": "public", "return": "void", "signature": "void setCacheManagerEventListener(CacheManagerEventListener cacheManagerEventListener)", "full_signature": "public void setCacheManagerEventListener(CacheManagerEventListener cacheManagerEventListener)", "class_method_signature": "CacheManager.setCacheManagerEventListener(CacheManagerEventListener cacheManagerEventListener)", "testcase": false, "constructor": false}, {"identifier": "getCacheManagerEventListenerRegistry", "parameters": "()", "modifiers": "public", "return": "CacheManagerEventListenerRegistry", "signature": "CacheManagerEventListenerRegistry getCacheManagerEventListenerRegistry()", "full_signature": "public CacheManagerEventListenerRegistry getCacheManagerEventListenerRegistry()", "class_method_signature": "CacheManager.getCacheManagerEventListenerRegistry()", "testcase": false, "constructor": false}, {"identifier": "replaceCacheWithDecoratedCache", "parameters": "(Ehcache ehcache, Ehcache decoratedCache)", "modifiers": "public", "return": "void", "signature": "void replaceCacheWithDecoratedCache(Ehcache ehcache, Ehcache decoratedCache)", "full_signature": "public void replaceCacheWithDecoratedCache(Ehcache ehcache, Ehcache decoratedCache)", "class_method_signature": "CacheManager.replaceCacheWithDecoratedCache(Ehcache ehcache, Ehcache decoratedCache)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "CacheManager.getName()", "testcase": false, "constructor": false}, {"identifier": "isNamed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNamed()", "full_signature": "public boolean isNamed()", "class_method_signature": "CacheManager.isNamed()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "CacheManager.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CacheManager.toString()", "testcase": false, "constructor": false}, {"identifier": "getDiskStorePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDiskStorePath()", "full_signature": "public String getDiskStorePath()", "class_method_signature": "CacheManager.getDiskStorePath()", "testcase": false, "constructor": false}, {"identifier": "getTimer", "parameters": "()", "modifiers": "public", "return": "FailSafeTimer", "signature": "FailSafeTimer getTimer()", "full_signature": "public FailSafeTimer getTimer()", "class_method_signature": "CacheManager.getTimer()", "testcase": false, "constructor": false}, {"identifier": "getCluster", "parameters": "(String scheme)", "modifiers": "public", "return": "CacheCluster", "signature": "CacheCluster getCluster(String scheme)", "full_signature": "public CacheCluster getCluster(String scheme)", "class_method_signature": "CacheManager.getCluster(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getOriginalConfigurationText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOriginalConfigurationText()", "full_signature": "public String getOriginalConfigurationText()", "class_method_signature": "CacheManager.getOriginalConfigurationText()", "testcase": false, "constructor": false}, {"identifier": "getActiveConfigurationText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getActiveConfigurationText()", "full_signature": "public String getActiveConfigurationText()", "class_method_signature": "CacheManager.getActiveConfigurationText()", "testcase": false, "constructor": false}, {"identifier": "getOriginalConfigurationText", "parameters": "(String cacheName)", "modifiers": "public", "return": "String", "signature": "String getOriginalConfigurationText(String cacheName)", "full_signature": "public String getOriginalConfigurationText(String cacheName)", "class_method_signature": "CacheManager.getOriginalConfigurationText(String cacheName)", "testcase": false, "constructor": false}, {"identifier": "getActiveConfigurationText", "parameters": "(String cacheName)", "modifiers": "public", "return": "String", "signature": "String getActiveConfigurationText(String cacheName)", "full_signature": "public String getActiveConfigurationText(String cacheName)", "class_method_signature": "CacheManager.getActiveConfigurationText(String cacheName)", "testcase": false, "constructor": false}], "file": "branches/events/core/src/main/java/net/sf/ehcache/CacheManager.java"}, "focal_method": {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void shutdown() {\n        synchronized (CacheManager.class) {\n            if (status.equals(Status.STATUS_SHUTDOWN)) {\n\n                    LOG.debug(\"CacheManager already shutdown\");\n                return;\n            }\n            for (CacheManagerPeerProvider cacheManagerPeerProvider : cacheManagerPeerProviders.values()) {\n                if (cacheManagerPeerProvider != null) {\n                    cacheManagerPeerProvider.dispose();\n                }\n            }\n\n            // cancel the cacheManager timer and all tasks\n            if (cacheManagerTimer != null) {\n                cacheManagerTimer.cancel();\n                cacheManagerTimer.purge();\n            }\n\n            cacheManagerEventListenerRegistry.dispose();\n\n            synchronized (CacheManager.class) {\n                ALL_CACHE_MANAGERS.remove(this);\n\n                Collection cacheSet = ehcaches.values();\n                for (Iterator iterator = cacheSet.iterator(); iterator.hasNext();) {\n                    Ehcache cache = (Ehcache) iterator.next();\n                    if (cache != null) {\n                        cache.dispose();\n                    }\n                }\n                defaultCache.dispose();\n                status = Status.STATUS_SHUTDOWN;\n\n                //only delete singleton if the singleton is shutting down.\n                if (this == singleton) {\n                    singleton = null;\n                }\n                removeShutdownHook();\n            }\n        }\n    }", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "CacheManager.shutdown()", "testcase": false, "constructor": false, "invocations": ["equals", "debug", "values", "dispose", "cancel", "purge", "dispose", "remove", "values", "iterator", "hasNext", "next", "dispose", "dispose", "removeShutdownHook"]}, "repository": {"repo_id": 10597460, "url": "https://github.com/svn2github/ehcache", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 12, "size": 128373, "license": "licensed"}}