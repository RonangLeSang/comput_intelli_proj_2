{"test_class": {"identifier": "MoreThanImmediateNeighboursTest2", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Mockery context = new JUnit4Mockery();", "modifier": "final", "type": "Mockery", "declarator": "context = new JUnit4Mockery()", "var_name": "context"}, {"original_string": "final Connections connections = context.mock(Connections.class);", "modifier": "final", "type": "Connections", "declarator": "connections = context.mock(Connections.class)", "var_name": "connections"}, {"original_string": "final TicketManager ticketManager = context.mock(TicketManager.class);", "modifier": "final", "type": "TicketManager", "declarator": "ticketManager = context.mock(TicketManager.class)", "var_name": "ticketManager"}, {"original_string": "final IssueManager issueManager = context.mock(IssueManager.class);", "modifier": "final", "type": "IssueManager", "declarator": "issueManager = context.mock(IssueManager.class)", "var_name": "issueManager"}, {"original_string": "final IssueHandler issueHandler = context.mock(IssueHandler.class);", "modifier": "final", "type": "IssueHandler", "declarator": "issueHandler = context.mock(IssueHandler.class)", "var_name": "issueHandler"}, {"original_string": "final Issue issue1Unresolved = issue(true);", "modifier": "final", "type": "Issue", "declarator": "issue1Unresolved = issue(true)", "var_name": "issue1Unresolved"}, {"original_string": "final Issue issue2 = issue(false);", "modifier": "final", "type": "Issue", "declarator": "issue2 = issue(false)", "var_name": "issue2"}, {"original_string": "final Issue issue3Unresolved = issue(true);", "modifier": "final", "type": "Issue", "declarator": "issue3Unresolved = issue(true)", "var_name": "issue3Unresolved"}, {"original_string": "final MoreThanImmediateNeighbours2 moreThanImmediateNeighbours = new MoreThanImmediateNeighbours2(connections);", "modifier": "final", "type": "MoreThanImmediateNeighbours2", "declarator": "moreThanImmediateNeighbours = new MoreThanImmediateNeighbours2(connections)", "var_name": "moreThanImmediateNeighbours"}], "file": "flexibility/src/book/example/flexibility/neighbours/MoreThanImmediateNeighboursTest2.java"}, "test_case": {"identifier": "filtersUnresolvedIssuesFromIssueManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filtersUnresolvedIssuesFromIssueManager() throws Failure {\n        final ArrayList<Issue> allIssues = new ArrayList<Issue>() {{\n            add(issue1Unresolved);\n            add(issue2);\n            add(issue3Unresolved);\n        }};\n\n        final States locking = context.states(\"locking\").startsAs(\"unlocked\");\n\n        context.checking(new Expectations() {{\n            allowing(connections).getTicketManager();\n            will(returnValue(ticketManager));\n            allowing(issueManager).allIssuesIterator();\n            will(returnIterator(allIssues));\n\n            oneOf(ticketManager).lock();\n            when(locking.is(\"unlocked\"));\n            then(locking.is(\"locked\"));\n\n            oneOf(ticketManager).getIssueManager();\n            when(locking.is(\"locked\"));\n            will(returnValue(issueManager));\n\n            oneOf(issueHandler).accept(issue1Unresolved);\n            when(locking.is(\"locked\"));\n            oneOf(issueHandler).accept(issue3Unresolved);\n            when(locking.is(\"locked\"));\n\n            oneOf(ticketManager).unlock();\n            when(locking.is(\"locked\"));\n            then(locking.is(\"unlocked\"));\n        }});\n\n        moreThanImmediateNeighbours.allUnresolvedIssues(issueHandler);\n    }", "signature": "void filtersUnresolvedIssuesFromIssueManager()", "full_signature": "@Test public void filtersUnresolvedIssuesFromIssueManager()", "class_method_signature": "MoreThanImmediateNeighboursTest2.filtersUnresolvedIssuesFromIssueManager()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "startsAs", "states", "checking", "getTicketManager", "allowing", "will", "returnValue", "allIssuesIterator", "allowing", "will", "returnIterator", "lock", "oneOf", "when", "is", "then", "is", "getIssueManager", "oneOf", "when", "is", "will", "returnValue", "accept", "oneOf", "when", "is", "accept", "oneOf", "when", "is", "unlock", "oneOf", "when", "is", "then", "is", "allUnresolvedIssues"]}, "focal_class": {"identifier": "MoreThanImmediateNeighbours2", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Connections connections;", "modifier": "private final", "type": "Connections", "declarator": "connections", "var_name": "connections"}], "methods": [{"identifier": "MoreThanImmediateNeighbours2", "parameters": "(Connections connections)", "modifiers": "public", "return": "", "signature": " MoreThanImmediateNeighbours2(Connections connections)", "full_signature": "public  MoreThanImmediateNeighbours2(Connections connections)", "class_method_signature": "MoreThanImmediateNeighbours2.MoreThanImmediateNeighbours2(Connections connections)", "testcase": false, "constructor": true}, {"identifier": "allUnresolvedIssues", "parameters": "(IssueHandler handler)", "modifiers": "public", "return": "void", "signature": "void allUnresolvedIssues(IssueHandler handler)", "full_signature": "public void allUnresolvedIssues(IssueHandler handler)", "class_method_signature": "MoreThanImmediateNeighbours2.allUnresolvedIssues(IssueHandler handler)", "testcase": false, "constructor": false}, {"identifier": "retrieveUnresolvedIssues", "parameters": "(IssueManager issueManager, IssueHandler handler)", "modifiers": "private", "return": "void", "signature": "void retrieveUnresolvedIssues(IssueManager issueManager, IssueHandler handler)", "full_signature": "private void retrieveUnresolvedIssues(IssueManager issueManager, IssueHandler handler)", "class_method_signature": "MoreThanImmediateNeighbours2.retrieveUnresolvedIssues(IssueManager issueManager, IssueHandler handler)", "testcase": false, "constructor": false}], "file": "flexibility/src/book/example/flexibility/neighbours/MoreThanImmediateNeighbours2.java"}, "focal_method": {"identifier": "allUnresolvedIssues", "parameters": "(IssueHandler handler)", "modifiers": "public", "return": "void", "body": "public void allUnresolvedIssues(IssueHandler handler) throws Failure {\n        TicketManager ticketManager = connections.getTicketManager();\n\n        ticketManager.lock();\n        try {\n            retrieveUnresolvedIssues(ticketManager.getIssueManager(), handler);\n        } finally {\n            ticketManager.unlock();\n        }\n    }", "signature": "void allUnresolvedIssues(IssueHandler handler)", "full_signature": "public void allUnresolvedIssues(IssueHandler handler)", "class_method_signature": "MoreThanImmediateNeighbours2.allUnresolvedIssues(IssueHandler handler)", "testcase": false, "constructor": false, "invocations": ["getTicketManager", "lock", "retrieveUnresolvedIssues", "getIssueManager", "unlock"]}, "repository": {"repo_id": 457158, "url": "https://github.com/npryce/goos-code-examples", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 58, "size": 9103, "license": "licensed"}}