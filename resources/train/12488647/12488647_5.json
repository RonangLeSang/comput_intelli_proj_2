{"test_class": {"identifier": "ArgumentsParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "frontend-plugin-core/src/test/java/com/github/eirslett/maven/plugins/frontend/lib/ArgumentsParserTest.java"}, "test_case": {"identifier": "testAdditionalArgumentsWithIntersection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdditionalArgumentsWithIntersection() {\n        ArgumentsParser parser = new ArgumentsParser(Arrays.asList(\"foo\", \"foobar\"));\n\n        assertArrayEquals(new Object[] { \"bar\", \"foobar\", \"foo\" }, parser.parse(\"bar foobar\").toArray());\n    }", "signature": "void testAdditionalArgumentsWithIntersection()", "full_signature": "@Test public void testAdditionalArgumentsWithIntersection()", "class_method_signature": "ArgumentsParserTest.testAdditionalArgumentsWithIntersection()", "testcase": true, "constructor": false, "invocations": ["asList", "assertArrayEquals", "toArray", "parse"]}, "focal_class": {"identifier": "ArgumentsParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<String> additionalArguments;", "modifier": "private final", "type": "List<String>", "declarator": "additionalArguments", "var_name": "additionalArguments"}], "methods": [{"identifier": "ArgumentsParser", "parameters": "()", "modifiers": "", "return": "", "signature": " ArgumentsParser()", "full_signature": "  ArgumentsParser()", "class_method_signature": "ArgumentsParser.ArgumentsParser()", "testcase": false, "constructor": true}, {"identifier": "ArgumentsParser", "parameters": "(List<String> additionalArguments)", "modifiers": "", "return": "", "signature": " ArgumentsParser(List<String> additionalArguments)", "full_signature": "  ArgumentsParser(List<String> additionalArguments)", "class_method_signature": "ArgumentsParser.ArgumentsParser(List<String> additionalArguments)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String args)", "modifiers": "", "return": "List<String>", "signature": "List<String> parse(String args)", "full_signature": " List<String> parse(String args)", "class_method_signature": "ArgumentsParser.parse(String args)", "testcase": false, "constructor": false}, {"identifier": "addArgument", "parameters": "(StringBuilder argumentBuilder, List<String> arguments)", "modifiers": "private static", "return": "void", "signature": "void addArgument(StringBuilder argumentBuilder, List<String> arguments)", "full_signature": "private static void addArgument(StringBuilder argumentBuilder, List<String> arguments)", "class_method_signature": "ArgumentsParser.addArgument(StringBuilder argumentBuilder, List<String> arguments)", "testcase": false, "constructor": false}, {"identifier": "addArgument", "parameters": "(String argument, List<String> arguments)", "modifiers": "private static", "return": "void", "signature": "void addArgument(String argument, List<String> arguments)", "full_signature": "private static void addArgument(String argument, List<String> arguments)", "class_method_signature": "ArgumentsParser.addArgument(String argument, List<String> arguments)", "testcase": false, "constructor": false}], "file": "frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/ArgumentsParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String args)", "modifiers": "", "return": "List<String>", "body": "List<String> parse(String args) {\n        if (args == null || \"null\".equals(args) || args.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        final List<String> arguments = new LinkedList<>();\n        final StringBuilder argumentBuilder = new StringBuilder();\n        Character quote = null;\n\n        for (int i = 0, l = args.length(); i < l; i++) {\n            char c = args.charAt(i);\n\n            if (Character.isWhitespace(c) && quote == null) {\n                addArgument(argumentBuilder, arguments);\n                continue;\n            } else if (c == '\"' || c == '\\'') {\n                // explicit boxing allows us to use object caching of the Character class\n                Character currentQuote = Character.valueOf(c);\n                if (quote == null) {\n                    quote = currentQuote;\n                } else if (quote.equals(currentQuote)){\n                    quote = null;\n                } // else\n                // we ignore the case when a quoted argument contains the other kind of quote\n            }\n\n            argumentBuilder.append(c);\n        }\n\n        addArgument(argumentBuilder, arguments);\n\n        for (String argument : this.additionalArguments) {\n            addArgument(argument, arguments);\n        }\n\n        return new ArrayList<>(arguments);\n    }", "signature": "List<String> parse(String args)", "full_signature": " List<String> parse(String args)", "class_method_signature": "ArgumentsParser.parse(String args)", "testcase": false, "constructor": false, "invocations": ["equals", "isEmpty", "emptyList", "length", "charAt", "isWhitespace", "addArgument", "valueOf", "equals", "append", "addArgument", "addArgument"]}, "repository": {"repo_id": 12488647, "url": "https://github.com/eirslett/frontend-maven-plugin", "stars": 3121, "created": "8/30/2013 2:44:38 PM +00:00", "updates": "2020-01-27T09:18:46+00:00", "fork": "False", "license": "licensed"}}