{"test_class": {"identifier": "VarsJsonHandlerTest", "superclass": "extends StatSupplierTestBase", "interfaces": "", "fields": [{"original_string": "private VarsJsonHandler varsJson;", "modifier": "private", "type": "VarsJsonHandler", "declarator": "varsJson", "var_name": "varsJson"}], "file": "commons/src/test/java/org/apache/aurora/common/net/http/handlers/VarsJsonHandlerTest.java"}, "test_case": {"identifier": "testGetPretty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetPretty() {\n    expectVarScrape(ImmutableMap.<String, Object>of(\n        \"str\", \"foobar\",\n        \"int\", 5,\n        \"float\", 4.16126\n    ));\n\n    control.replay();\n\n    assertEquals(\"{\\n\" +\n        \"  \\\"str\\\": \\\"foobar\\\",\\n\" +\n        \"  \\\"int\\\": 5,\\n\" +\n        \"  \\\"float\\\": 4.16126\\n\" +\n        \"}\", varsJson.getBody(true));\n  }", "signature": "void testGetPretty()", "full_signature": "@Test public void testGetPretty()", "class_method_signature": "VarsJsonHandlerTest.testGetPretty()", "testcase": true, "constructor": false, "invocations": ["expectVarScrape", "of", "replay", "assertEquals", "getBody"]}, "focal_class": {"identifier": "VarsJsonHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Supplier<Iterable<Stat<?>>> statSupplier;", "modifier": "private final", "type": "Supplier<Iterable<Stat<?>>>", "declarator": "statSupplier", "var_name": "statSupplier"}], "methods": [{"identifier": "VarsJsonHandler", "parameters": "(Supplier<Iterable<Stat<?>>> statSupplier)", "modifiers": "@Inject public", "return": "", "signature": " VarsJsonHandler(Supplier<Iterable<Stat<?>>> statSupplier)", "full_signature": "@Inject public  VarsJsonHandler(Supplier<Iterable<Stat<?>>> statSupplier)", "class_method_signature": "VarsJsonHandler.VarsJsonHandler(Supplier<Iterable<Stat<?>>> statSupplier)", "testcase": false, "constructor": true}, {"identifier": "getBody", "parameters": "(boolean pretty)", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String getBody(boolean pretty)", "full_signature": "@VisibleForTesting String getBody(boolean pretty)", "class_method_signature": "VarsJsonHandler.getBody(boolean pretty)", "testcase": false, "constructor": false}, {"identifier": "getVars", "parameters": "(@QueryParam(\"pretty\") boolean pretty)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) public", "return": "String", "signature": "String getVars(@QueryParam(\"pretty\") boolean pretty)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) public String getVars(@QueryParam(\"pretty\") boolean pretty)", "class_method_signature": "VarsJsonHandler.getVars(@QueryParam(\"pretty\") boolean pretty)", "testcase": false, "constructor": false}, {"identifier": "getGson", "parameters": "(boolean pretty)", "modifiers": "private", "return": "Gson", "signature": "Gson getGson(boolean pretty)", "full_signature": "private Gson getGson(boolean pretty)", "class_method_signature": "VarsJsonHandler.getGson(boolean pretty)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/apache/aurora/common/net/http/handlers/VarsJsonHandler.java"}, "focal_method": {"identifier": "getBody", "parameters": "(boolean pretty)", "modifiers": "@VisibleForTesting", "return": "String", "body": "@VisibleForTesting\n  String getBody(boolean pretty) {\n    Map<String, Object> vars = Maps.newLinkedHashMap();\n    for (Stat<?> var : statSupplier.get()) {\n      vars.put(var.getName(), var.read());\n    }\n    // TODO(wfarner): Let the jax-rs provider handle serialization.\n    return getGson(pretty).toJson(vars);\n  }", "signature": "String getBody(boolean pretty)", "full_signature": "@VisibleForTesting String getBody(boolean pretty)", "class_method_signature": "VarsJsonHandler.getBody(boolean pretty)", "testcase": false, "constructor": false, "invocations": ["newLinkedHashMap", "get", "put", "getName", "read", "toJson", "getGson"]}, "repository": {"repo_id": 14135467, "url": "https://github.com/apache/attic-aurora", "language": "Java", "is_fork": false, "fork_count": 242, "stargazer_count": 625, "size": 30334, "license": "licensed"}}