{"test_class": {"identifier": "ConsumersTest", "superclass": "extends EasyMockTest", "interfaces": "", "fields": [{"original_string": "private static final Clazz<Consumer<Integer>> INT_CLOSURE_CLZ = new Clazz<Consumer<Integer>>() { };", "modifier": "private static final", "type": "Clazz<Consumer<Integer>>", "declarator": "INT_CLOSURE_CLZ = new Clazz<Consumer<Integer>>() { }", "var_name": "INT_CLOSURE_CLZ"}], "file": "commons/src/test/java/org/apache/aurora/common/base/ConsumersTest.java"}, "test_case": {"identifier": "testCombine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCombine() {\n    Consumer<Integer> work1 = createMock(INT_CLOSURE_CLZ);\n    Consumer<Integer> work2 = createMock(INT_CLOSURE_CLZ);\n\n    @SuppressWarnings(\"unchecked\") // Needed because type information lost in vargs.\n        Consumer<Integer> wrapper = Consumers.combine(ImmutableList.of(work1, work2));\n\n    work1.accept(1);\n    work2.accept(1);\n\n    work1.accept(2);\n    work2.accept(2);\n\n    control.replay();\n\n    wrapper.accept(1);\n    wrapper.accept(2);\n  }", "signature": "void testCombine()", "full_signature": "@Test public void testCombine()", "class_method_signature": "ConsumersTest.testCombine()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "combine", "of", "accept", "accept", "accept", "accept", "replay", "accept", "accept"]}, "focal_class": {"identifier": "Consumers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Consumer<?> NOOP = item -> {\n    // noop\n  };", "modifier": "private static final", "type": "Consumer<?>", "declarator": "NOOP = item -> {\n    // noop\n  }", "var_name": "NOOP"}], "methods": [{"identifier": "Consumers", "parameters": "()", "modifiers": "private", "return": "", "signature": " Consumers()", "full_signature": "private  Consumers()", "class_method_signature": "Consumers.Consumers()", "testcase": false, "constructor": true}, {"identifier": "combine", "parameters": "(List<Consumer<T>> consumers)", "modifiers": "public static", "return": "Consumer<T>", "signature": "Consumer<T> combine(List<Consumer<T>> consumers)", "full_signature": "public static Consumer<T> combine(List<Consumer<T>> consumers)", "class_method_signature": "Consumers.combine(List<Consumer<T>> consumers)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(final Predicate<T> filter, final Consumer<T> consumer)", "modifiers": "public static", "return": "Consumer<T>", "signature": "Consumer<T> filter(final Predicate<T> filter, final Consumer<T> consumer)", "full_signature": "public static Consumer<T> filter(final Predicate<T> filter, final Consumer<T> consumer)", "class_method_signature": "Consumers.filter(final Predicate<T> filter, final Consumer<T> consumer)", "testcase": false, "constructor": false}, {"identifier": "noop", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Consumer<T>", "signature": "Consumer<T> noop()", "full_signature": "@SuppressWarnings(\"unchecked\") public static Consumer<T> noop()", "class_method_signature": "Consumers.noop()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/apache/aurora/common/base/Consumers.java"}, "focal_method": {"identifier": "combine", "parameters": "(List<Consumer<T>> consumers)", "modifiers": "public static", "return": "Consumer<T>", "body": "public static <T> Consumer<T> combine(List<Consumer<T>> consumers) {\n    checkNotNull(consumers);\n    checkArgument(Iterables.all(consumers, Predicates.notNull()));\n\n    return consumers.stream().reduce(noop(), Consumer::andThen);\n  }", "signature": "Consumer<T> combine(List<Consumer<T>> consumers)", "full_signature": "public static Consumer<T> combine(List<Consumer<T>> consumers)", "class_method_signature": "Consumers.combine(List<Consumer<T>> consumers)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkArgument", "all", "notNull", "reduce", "stream", "noop"]}, "repository": {"repo_id": 14135467, "url": "https://github.com/apache/attic-aurora", "language": "Java", "is_fork": false, "fork_count": 242, "stargazer_count": 625, "size": 30334, "license": "licensed"}}