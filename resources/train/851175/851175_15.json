{"test_class": {"identifier": "VirtualDirBz2Test", "superclass": "", "interfaces": "", "fields": [], "file": "beam-globalbedo-meteosat-reader/src/test/java/org/esa/beam/dataio/VirtualDirBz2Test.java"}, "test_case": {"identifier": "testCreateTargetDirInTemp_fromSystemPropertyUserHome", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateTargetDirInTemp_fromSystemPropertyUserHome() throws IOException {\n        final String oldTempDir = System.getProperty(\"java.io.tmpdir\");\n        System.clearProperty(\"java.io.tmpdir\");\n        final String userHome = System.getProperty(\"user.home\");\n        assertNotNull(userHome);\n\n        File dirInTemp = null;\n        try {\n            dirInTemp = VirtualDirBz2.createTargetDirInTemp(\"Schneck\");\n            assertNotNull(dirInTemp);\n            assertTrue(dirInTemp.isDirectory());\n            assertEquals(new File(userHome, \".beam/temp/Schneck\").getAbsolutePath(), dirInTemp.getAbsolutePath());\n        } finally {\n            System.setProperty(\"java.io.tmpdir\", oldTempDir);\n            if (dirInTemp != null) {\n                FileUtils.deleteTree(dirInTemp);\n            }\n        }\n    }", "signature": "void testCreateTargetDirInTemp_fromSystemPropertyUserHome()", "full_signature": "@Test public void testCreateTargetDirInTemp_fromSystemPropertyUserHome()", "class_method_signature": "VirtualDirBz2Test.testCreateTargetDirInTemp_fromSystemPropertyUserHome()", "testcase": true, "constructor": false, "invocations": ["getProperty", "clearProperty", "getProperty", "assertNotNull", "createTargetDirInTemp", "assertNotNull", "assertTrue", "isDirectory", "assertEquals", "getAbsolutePath", "getAbsolutePath", "setProperty", "deleteTree"]}, "focal_class": {"identifier": "VirtualDirBz2", "superclass": "extends VirtualDir", "interfaces": "", "fields": [{"original_string": "private final File archiveFile;", "modifier": "private final", "type": "File", "declarator": "archiveFile", "var_name": "archiveFile"}, {"original_string": "private File extractDir;", "modifier": "private", "type": "File", "declarator": "extractDir", "var_name": "extractDir"}], "methods": [{"identifier": "VirtualDirBz2", "parameters": "(File bz2)", "modifiers": "public", "return": "", "signature": " VirtualDirBz2(File bz2)", "full_signature": "public  VirtualDirBz2(File bz2)", "class_method_signature": "VirtualDirBz2.VirtualDirBz2(File bz2)", "testcase": false, "constructor": true}, {"identifier": "getBasePath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBasePath()", "full_signature": "@Override public String getBasePath()", "class_method_signature": "VirtualDirBz2.getBasePath()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(String path)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(String path)", "full_signature": "@Override public InputStream getInputStream(String path)", "class_method_signature": "VirtualDirBz2.getInputStream(String path)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String path)", "modifiers": "@Override public", "return": "File", "signature": "File getFile(String path)", "full_signature": "@Override public File getFile(String path)", "class_method_signature": "VirtualDirBz2.getFile(String path)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(String path)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] list(String path)", "full_signature": "@Override public String[] list(String path)", "class_method_signature": "VirtualDirBz2.list(String path)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "VirtualDirBz2.close()", "testcase": false, "constructor": false}, {"identifier": "isCompressed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCompressed()", "full_signature": "@Override public boolean isCompressed()", "class_method_signature": "VirtualDirBz2.isCompressed()", "testcase": false, "constructor": false}, {"identifier": "isArchive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isArchive()", "full_signature": "@Override public boolean isArchive()", "class_method_signature": "VirtualDirBz2.isArchive()", "testcase": false, "constructor": false}, {"identifier": "createTargetDirInTemp", "parameters": "(String name)", "modifiers": "static", "return": "File", "signature": "File createTargetDirInTemp(String name)", "full_signature": "static File createTargetDirInTemp(String name)", "class_method_signature": "VirtualDirBz2.createTargetDirInTemp(String name)", "testcase": false, "constructor": false}, {"identifier": "getFilenameFromPath", "parameters": "(String path)", "modifiers": "static", "return": "String", "signature": "String getFilenameFromPath(String path)", "full_signature": "static String getFilenameFromPath(String path)", "class_method_signature": "VirtualDirBz2.getFilenameFromPath(String path)", "testcase": false, "constructor": false}, {"identifier": "isBz2Only", "parameters": "(String filename)", "modifiers": "static", "return": "boolean", "signature": "boolean isBz2Only(String filename)", "full_signature": "static boolean isBz2Only(String filename)", "class_method_signature": "VirtualDirBz2.isBz2Only(String filename)", "testcase": false, "constructor": false}, {"identifier": "isTarOnly", "parameters": "(String filename)", "modifiers": "static", "return": "boolean", "signature": "boolean isTarOnly(String filename)", "full_signature": "static boolean isTarOnly(String filename)", "class_method_signature": "VirtualDirBz2.isTarOnly(String filename)", "testcase": false, "constructor": false}, {"identifier": "isTarBz2", "parameters": "(String filename)", "modifiers": "static", "return": "boolean", "signature": "boolean isTarBz2(String filename)", "full_signature": "static boolean isTarBz2(String filename)", "class_method_signature": "VirtualDirBz2.isTarBz2(String filename)", "testcase": false, "constructor": false}, {"identifier": "ensureUnpackedTar", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureUnpackedTar()", "full_signature": "private void ensureUnpackedTar()", "class_method_signature": "VirtualDirBz2.ensureUnpackedTar()", "testcase": false, "constructor": false}, {"identifier": "ensureUnpackedBz2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureUnpackedBz2()", "full_signature": "private void ensureUnpackedBz2()", "class_method_signature": "VirtualDirBz2.ensureUnpackedBz2()", "testcase": false, "constructor": false}, {"identifier": "ensureUnpackedTarBz2", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureUnpackedTarBz2()", "full_signature": "private void ensureUnpackedTarBz2()", "class_method_signature": "VirtualDirBz2.ensureUnpackedTarBz2()", "testcase": false, "constructor": false}, {"identifier": "writeTempHdfFile", "parameters": "(InputStream is, String targetFileName, File targetDir)", "modifiers": "private", "return": "void", "signature": "void writeTempHdfFile(InputStream is, String targetFileName, File targetDir)", "full_signature": "private void writeTempHdfFile(InputStream is, String targetFileName, File targetDir)", "class_method_signature": "VirtualDirBz2.writeTempHdfFile(InputStream is, String targetFileName, File targetDir)", "testcase": false, "constructor": false}, {"identifier": "writeTempFilesFromTarInputStream", "parameters": "(TarInputStream tis)", "modifiers": "private", "return": "void", "signature": "void writeTempFilesFromTarInputStream(TarInputStream tis)", "full_signature": "private void writeTempFilesFromTarInputStream(TarInputStream tis)", "class_method_signature": "VirtualDirBz2.writeTempFilesFromTarInputStream(TarInputStream tis)", "testcase": false, "constructor": false}, {"identifier": "getBufferedInputStreamFromArchiveFile", "parameters": "()", "modifiers": "private", "return": "BufferedInputStream", "signature": "BufferedInputStream getBufferedInputStreamFromArchiveFile()", "full_signature": "private BufferedInputStream getBufferedInputStreamFromArchiveFile()", "class_method_signature": "VirtualDirBz2.getBufferedInputStreamFromArchiveFile()", "testcase": false, "constructor": false}, {"identifier": "ensureDirectory", "parameters": "(File targetDir)", "modifiers": "private", "return": "void", "signature": "void ensureDirectory(File targetDir)", "full_signature": "private void ensureDirectory(File targetDir)", "class_method_signature": "VirtualDirBz2.ensureDirectory(File targetDir)", "testcase": false, "constructor": false}], "file": "beam-globalbedo-meteosat-reader/src/main/java/org/esa/beam/dataio/VirtualDirBz2.java"}, "focal_method": {"identifier": "createTargetDirInTemp", "parameters": "(String name)", "modifiers": "static", "return": "File", "body": "static File createTargetDirInTemp(String name) throws IOException {\n        File tempDir = null;\n        String tempDirName = System.getProperty(\"java.io.tmpdir\");\n        if (tempDirName != null) {\n            tempDir = new File(tempDirName);\n        }\n        if (tempDir == null) {\n            tempDir = new File(new File(System.getProperty(\"user.home\", \".\")), \".beam/temp\");\n            if (!tempDir.exists()) {\n                if (!tempDir.mkdirs()) {\n                    throw new IOException(\"unable to create directory: \" + tempDir.getAbsolutePath());\n                }\n            }\n        }\n\n        File targetDir = new File(tempDir, name);\n        if (!targetDir.exists()) {\n            if (!targetDir.mkdirs()) {\n                throw new IOException(\"unable to create directory: \" + targetDir.getAbsolutePath());\n            }\n        }\n\n        return targetDir;\n    }", "signature": "File createTargetDirInTemp(String name)", "full_signature": "static File createTargetDirInTemp(String name)", "class_method_signature": "VirtualDirBz2.createTargetDirInTemp(String name)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "exists", "mkdirs", "getAbsolutePath", "exists", "mkdirs", "getAbsolutePath"]}, "repository": {"repo_id": 851175, "url": "https://github.com/bcdev/beam-globalbedo", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 47059, "license": "licensed"}}