{"test_class": {"identifier": "FormDataRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    FormHeaderParser mockFormHeaderParser;", "modifier": "@Mock", "type": "FormHeaderParser", "declarator": "mockFormHeaderParser", "var_name": "mockFormHeaderParser"}, {"original_string": "@Mock\n    XmlFormParser mockXmlParser;", "modifier": "@Mock", "type": "XmlFormParser", "declarator": "mockXmlParser", "var_name": "mockXmlParser"}, {"original_string": "@Mock\n    DatabaseDataSource mockDatabaseDataSource;", "modifier": "@Mock", "type": "DatabaseDataSource", "declarator": "mockDatabaseDataSource", "var_name": "mockDatabaseDataSource"}, {"original_string": "@Mock\n    FileDataSource mockFileDataSource;", "modifier": "@Mock", "type": "FileDataSource", "declarator": "mockFileDataSource", "var_name": "mockFileDataSource"}, {"original_string": "@Mock\n    FormIdMapper mockFormIdMapper;", "modifier": "@Mock", "type": "FormIdMapper", "declarator": "mockFormIdMapper", "var_name": "mockFormIdMapper"}, {"original_string": "@Mock\n    DeviceHelper mockDeviceHelper;", "modifier": "@Mock", "type": "DeviceHelper", "declarator": "mockDeviceHelper", "var_name": "mockDeviceHelper"}, {"original_string": "@Mock\n    InputStream mockInputStream;", "modifier": "@Mock", "type": "InputStream", "declarator": "mockInputStream", "var_name": "mockInputStream"}, {"original_string": "@Mock\n    DateFormat mockDateFormat;", "modifier": "@Mock", "type": "DateFormat", "declarator": "mockDateFormat", "var_name": "mockDateFormat"}, {"original_string": "@Mock\n    AmazonAuthHelper mockAmazonAuth;", "modifier": "@Mock", "type": "AmazonAuthHelper", "declarator": "mockAmazonAuth", "var_name": "mockAmazonAuth"}, {"original_string": "@Mock\n    Cursor mockCursor;", "modifier": "@Mock", "type": "Cursor", "declarator": "mockCursor", "var_name": "mockCursor"}, {"original_string": "@Mock\n    Form mockForm;", "modifier": "@Mock", "type": "Form", "declarator": "mockForm", "var_name": "mockForm"}, {"original_string": "private MockWebServer mockWebServer;", "modifier": "private", "type": "MockWebServer", "declarator": "mockWebServer", "var_name": "mockWebServer"}, {"original_string": "private FormDataRepository formDataRepository;", "modifier": "private", "type": "FormDataRepository", "declarator": "formDataRepository", "var_name": "formDataRepository"}, {"original_string": "private RestApi restApi;", "modifier": "private", "type": "RestApi", "declarator": "restApi", "var_name": "restApi"}, {"original_string": "private S3RestApi s3RestApi;", "modifier": "private", "type": "S3RestApi", "declarator": "s3RestApi", "var_name": "s3RestApi"}], "file": "data/src/test/java/org/akvo/flow/data/repository/FormDataRepositoryTest.java"}, "test_case": {"identifier": "loadFormShouldInstallTestFormIfTestId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadFormShouldInstallTestFormIfTestId() {\n        TestObserver observer = new TestObserver<Boolean>();\n        when(mockDatabaseDataSource.installTestForm()).thenReturn(Observable.just(true));\n\n        formDataRepository.loadForm(\"0\", \"deviceId\").subscribe(observer);\n\n        verify(mockDatabaseDataSource, times(1)).installTestForm();\n        observer.assertNoErrors();\n    }", "signature": "void loadFormShouldInstallTestFormIfTestId()", "full_signature": "@Test public void loadFormShouldInstallTestFormIfTestId()", "class_method_signature": "FormDataRepositoryTest.loadFormShouldInstallTestFormIfTestId()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "installTestForm", "just", "subscribe", "loadForm", "installTestForm", "verify", "times", "assertNoErrors"]}, "focal_class": {"identifier": "FormDataRepository", "superclass": "", "interfaces": "implements FormRepository", "fields": [{"original_string": "private static final String TEST_FORM_ID = \"0\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FORM_ID = \"0\"", "var_name": "TEST_FORM_ID"}, {"original_string": "private final FormHeaderParser formHeaderParser;", "modifier": "private final", "type": "FormHeaderParser", "declarator": "formHeaderParser", "var_name": "formHeaderParser"}, {"original_string": "private final XmlFormParser xmlParser;", "modifier": "private final", "type": "XmlFormParser", "declarator": "xmlParser", "var_name": "xmlParser"}, {"original_string": "private final RestApi restApi;", "modifier": "private final", "type": "RestApi", "declarator": "restApi", "var_name": "restApi"}, {"original_string": "private final DataSourceFactory dataSourceFactory;", "modifier": "private final", "type": "DataSourceFactory", "declarator": "dataSourceFactory", "var_name": "dataSourceFactory"}, {"original_string": "private final FormIdMapper formIdMapper;", "modifier": "private final", "type": "FormIdMapper", "declarator": "formIdMapper", "var_name": "formIdMapper"}, {"original_string": "private final S3RestApi s3RestApi;", "modifier": "private final", "type": "S3RestApi", "declarator": "s3RestApi", "var_name": "s3RestApi"}, {"original_string": "private final DomainFormMapper domainFormMapper;", "modifier": "private final", "type": "DomainFormMapper", "declarator": "domainFormMapper", "var_name": "domainFormMapper"}], "methods": [{"identifier": "FormDataRepository", "parameters": "(FormHeaderParser formHeaderParser, XmlFormParser xmlParser,\n                              RestApi restApi, DataSourceFactory dataSourceFactory, FormIdMapper formIdMapper,\n                              S3RestApi s3RestApi, DomainFormMapper domainFormMapper)", "modifiers": "@Inject public", "return": "", "signature": " FormDataRepository(FormHeaderParser formHeaderParser, XmlFormParser xmlParser,\n                              RestApi restApi, DataSourceFactory dataSourceFactory, FormIdMapper formIdMapper,\n                              S3RestApi s3RestApi, DomainFormMapper domainFormMapper)", "full_signature": "@Inject public  FormDataRepository(FormHeaderParser formHeaderParser, XmlFormParser xmlParser,\n                              RestApi restApi, DataSourceFactory dataSourceFactory, FormIdMapper formIdMapper,\n                              S3RestApi s3RestApi, DomainFormMapper domainFormMapper)", "class_method_signature": "FormDataRepository.FormDataRepository(FormHeaderParser formHeaderParser, XmlFormParser xmlParser,\n                              RestApi restApi, DataSourceFactory dataSourceFactory, FormIdMapper formIdMapper,\n                              S3RestApi s3RestApi, DomainFormMapper domainFormMapper)", "testcase": false, "constructor": true}, {"identifier": "loadForm", "parameters": "(String formId, String deviceId)", "modifiers": "@Override public", "return": "Observable<Boolean>", "signature": "Observable<Boolean> loadForm(String formId, String deviceId)", "full_signature": "@Override public Observable<Boolean> loadForm(String formId, String deviceId)", "class_method_signature": "FormDataRepository.loadForm(String formId, String deviceId)", "testcase": false, "constructor": false}, {"identifier": "reloadForms", "parameters": "(final String deviceId)", "modifiers": "@Override public", "return": "Observable<Integer>", "signature": "Observable<Integer> reloadForms(final String deviceId)", "full_signature": "@Override public Observable<Integer> reloadForms(final String deviceId)", "class_method_signature": "FormDataRepository.reloadForms(final String deviceId)", "testcase": false, "constructor": false}, {"identifier": "downloadForms", "parameters": "(final String deviceId)", "modifiers": "@Override public", "return": "Observable<Integer>", "signature": "Observable<Integer> downloadForms(final String deviceId)", "full_signature": "@Override public Observable<Integer> downloadForms(final String deviceId)", "class_method_signature": "FormDataRepository.downloadForms(final String deviceId)", "testcase": false, "constructor": false}, {"identifier": "getForm", "parameters": "(@NotNull String formId)", "modifiers": "@Override @NotNull public", "return": "Single<DomainForm>", "signature": "Single<DomainForm> getForm(@NotNull String formId)", "full_signature": "@Override @NotNull public Single<DomainForm> getForm(@NotNull String formId)", "class_method_signature": "FormDataRepository.getForm(@NotNull String formId)", "testcase": false, "constructor": false}, {"identifier": "downloadFormHeader", "parameters": "(String formId, String deviceId)", "modifiers": "private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> downloadFormHeader(String formId, String deviceId)", "full_signature": "private Observable<Boolean> downloadFormHeader(String formId, String deviceId)", "class_method_signature": "FormDataRepository.downloadFormHeader(String formId, String deviceId)", "testcase": false, "constructor": false}, {"identifier": "downloadForms", "parameters": "(List<ApiFormHeader> apiFormHeaders)", "modifiers": "private", "return": "Observable<Integer>", "signature": "Observable<Integer> downloadForms(List<ApiFormHeader> apiFormHeaders)", "full_signature": "private Observable<Integer> downloadForms(List<ApiFormHeader> apiFormHeaders)", "class_method_signature": "FormDataRepository.downloadForms(List<ApiFormHeader> apiFormHeaders)", "testcase": false, "constructor": false}, {"identifier": "insertAndDownload", "parameters": "(final ApiFormHeader apiFormHeader)", "modifiers": "private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> insertAndDownload(final ApiFormHeader apiFormHeader)", "full_signature": "private Observable<Boolean> insertAndDownload(final ApiFormHeader apiFormHeader)", "class_method_signature": "FormDataRepository.insertAndDownload(final ApiFormHeader apiFormHeader)", "testcase": false, "constructor": false}, {"identifier": "downloadFormHeaders", "parameters": "(List<String> formIds, final String deviceId)", "modifiers": "private", "return": "Observable<Integer>", "signature": "Observable<Integer> downloadFormHeaders(List<String> formIds, final String deviceId)", "full_signature": "private Observable<Integer> downloadFormHeaders(List<String> formIds, final String deviceId)", "class_method_signature": "FormDataRepository.downloadFormHeaders(List<String> formIds, final String deviceId)", "testcase": false, "constructor": false}, {"identifier": "downloadForm", "parameters": "(final ApiFormHeader apiFormHeader)", "modifiers": "private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> downloadForm(final ApiFormHeader apiFormHeader)", "full_signature": "private Observable<Boolean> downloadForm(final ApiFormHeader apiFormHeader)", "class_method_signature": "FormDataRepository.downloadForm(final ApiFormHeader apiFormHeader)", "testcase": false, "constructor": false}, {"identifier": "downloadAndSaveForm", "parameters": "(final ApiFormHeader apiFormHeader)", "modifiers": "private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> downloadAndSaveForm(final ApiFormHeader apiFormHeader)", "full_signature": "private Observable<Boolean> downloadAndSaveForm(final ApiFormHeader apiFormHeader)", "class_method_signature": "FormDataRepository.downloadAndSaveForm(final ApiFormHeader apiFormHeader)", "testcase": false, "constructor": false}, {"identifier": "downloadAndExtractFile", "parameters": "(final String fileName, final String folder)", "modifiers": "private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> downloadAndExtractFile(final String fileName, final String folder)", "full_signature": "private Observable<Boolean> downloadAndExtractFile(final String fileName, final String folder)", "class_method_signature": "FormDataRepository.downloadAndExtractFile(final String fileName, final String folder)", "testcase": false, "constructor": false}, {"identifier": "saveForm", "parameters": "(final ApiFormHeader apiFormHeader)", "modifiers": "private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> saveForm(final ApiFormHeader apiFormHeader)", "full_signature": "private Observable<Boolean> saveForm(final ApiFormHeader apiFormHeader)", "class_method_signature": "FormDataRepository.saveForm(final ApiFormHeader apiFormHeader)", "testcase": false, "constructor": false}, {"identifier": "downloadResources", "parameters": "(Form form)", "modifiers": "private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> downloadResources(Form form)", "full_signature": "private Observable<Boolean> downloadResources(Form form)", "class_method_signature": "FormDataRepository.downloadResources(Form form)", "testcase": false, "constructor": false}], "file": "data/src/main/java/org/akvo/flow/data/repository/FormDataRepository.java"}, "focal_method": {"identifier": "loadForm", "parameters": "(String formId, String deviceId)", "modifiers": "@Override public", "return": "Observable<Boolean>", "body": "@Override\n    public Observable<Boolean> loadForm(String formId, String deviceId) {\n        final DatabaseDataSource dataBaseDataSource = dataSourceFactory.getDataBaseDataSource();\n        if (TEST_FORM_ID.equals(formId)) {\n            return dataBaseDataSource.installTestForm();\n        } else {\n            return downloadFormHeader(formId, deviceId);\n        }\n    }", "signature": "Observable<Boolean> loadForm(String formId, String deviceId)", "full_signature": "@Override public Observable<Boolean> loadForm(String formId, String deviceId)", "class_method_signature": "FormDataRepository.loadForm(String formId, String deviceId)", "testcase": false, "constructor": false, "invocations": ["getDataBaseDataSource", "equals", "installTestForm", "downloadFormHeader"]}, "repository": {"repo_id": 5380818, "url": "https://github.com/akvo/akvo-flow-mobile", "stars": 15, "created": "8/11/2012 3:36:16 PM +00:00", "updates": "2020-01-20T15:04:47+00:00", "fork": "False", "license": "licensed"}}