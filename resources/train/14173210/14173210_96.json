{"test_class": {"identifier": "LinkDiscoveryManagerTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "private TestLinkDiscoveryManager ldm;", "modifier": "private", "type": "TestLinkDiscoveryManager", "declarator": "ldm", "var_name": "ldm"}, {"original_string": "protected static Logger log = LoggerFactory.getLogger(LinkDiscoveryManagerTest.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LinkDiscoveryManagerTest.class)", "var_name": "log"}], "file": "floodlight-master/src/test/java/net/floodlightcontroller/linkdiscovery/internal/LinkDiscoveryManagerTest.java"}, "test_case": {"identifier": "testSwitchAdded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSwitchAdded() throws Exception {\n        LinkDiscoveryManager linkDiscovery = getLinkDiscoveryManager();\n        Capture<OFMessage> wc;\n        Capture<FloodlightContext> fc;\n        Set<Short> qPorts;\n        OFPhysicalPort ofpp = new OFPhysicalPort();\n        ofpp.setName(\"eth4242\");\n        ofpp.setPortNumber((short)4242);\n        ofpp.setHardwareAddress(HexString.fromHexString(\"5c:16:c7:00:00:01\"));\n        ofpp.setCurrentFeatures(0);\n        ImmutablePort p1 = ImmutablePort.fromOFPhysicalPort(ofpp);\n        IOFSwitch sw1 = createMockSwitch(1L);\n\n        // Set switch map in floodlightProvider.\n        Map<Long, IOFSwitch> switches = new HashMap<Long, IOFSwitch>();\n        switches.put(1L, sw1);\n        getMockFloodlightProvider().setSwitches(switches);\n\n        // Create the set of ports\n        List<Short> ports = new ArrayList<Short>();\n        for(short p=1; p<=20; ++p) {\n            ports.add(p);\n        }\n\n        // Set the captures.\n        wc = new Capture<OFMessage>(CaptureType.ALL);\n        fc = new Capture<FloodlightContext>(CaptureType.ALL);\n\n        // Expect switch to return those ports.\n        expect(sw1.getEnabledPortNumbers()).andReturn(ports).anyTimes();\n        expect(sw1.getPort(EasyMock.anyShort())).andReturn(p1).anyTimes();\n        sw1.write(capture(wc), capture(fc));\n        expectLastCall().anyTimes();\n        replay(sw1);\n\n        linkDiscovery.switchActivated(sw1.getId());\n        verify(sw1);\n\n        qPorts = linkDiscovery.getQuarantinedPorts(sw1.getId());\n        assertNotNull(qPorts);\n        assertFalse(qPorts.isEmpty());\n\n        Thread.sleep(100);\n        qPorts = linkDiscovery.getQuarantinedPorts(sw1.getId());\n        assertNotNull(qPorts);\n        assertFalse(qPorts.isEmpty());\n\n        Thread.sleep(200);\n        qPorts = linkDiscovery.getQuarantinedPorts(sw1.getId());\n        assertNotNull(qPorts);\n        assertTrue(qPorts.isEmpty());\n\n        // Ensure that through every switch port, an LLDP and BDDP\n        // packet was sent out.  Total # of packets = # of ports * 2.\n        assertTrue(wc.hasCaptured());\n        List<OFMessage> msgList = wc.getValues();\n        assertTrue(msgList.size() == ports.size() * 2);\n    }", "signature": "void testSwitchAdded()", "full_signature": "@Test public void testSwitchAdded()", "class_method_signature": "LinkDiscoveryManagerTest.testSwitchAdded()", "testcase": true, "constructor": false, "invocations": ["getLinkDiscoveryManager", "setName", "setPortNumber", "setHardwareAddress", "fromHexString", "setCurrentFeatures", "fromOFPhysicalPort", "createMockSwitch", "put", "setSwitches", "getMockFloodlightProvider", "add", "anyTimes", "andReturn", "expect", "getEnabledPortNumbers", "anyTimes", "andReturn", "expect", "getPort", "anyShort", "write", "capture", "capture", "anyTimes", "expectLastCall", "replay", "switchActivated", "getId", "verify", "getQuarantinedPorts", "getId", "assertNotNull", "assertFalse", "isEmpty", "sleep", "getQuarantinedPorts", "getId", "assertNotNull", "assertFalse", "isEmpty", "sleep", "getQuarantinedPorts", "getId", "assertNotNull", "assertTrue", "isEmpty", "assertTrue", "hasCaptured", "getValues", "assertTrue", "size", "size"]}, "focal_class": {"identifier": "LinkDiscoveryManager", "superclass": "", "interfaces": "implements IOFMessageListener,\n    IOFSwitchListener, IStorageSourceListener, ILinkDiscoveryService,\n    IFloodlightModule, IInfoProvider", "fields": [{"original_string": "protected static final Logger log = LoggerFactory.getLogger(LinkDiscoveryManager.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LinkDiscoveryManager.class)", "var_name": "log"}, {"original_string": "protected static final INotificationManager notifier =\n        NotificationManagerFactory.getNotificationManager(LinkDiscoveryManager.class);", "modifier": "protected static final", "type": "INotificationManager", "declarator": "notifier =\n        NotificationManagerFactory.getNotificationManager(LinkDiscoveryManager.class)", "var_name": "notifier"}, {"original_string": "public static final String MODULE_NAME = \"linkdiscovery\";", "modifier": "public static final", "type": "String", "declarator": "MODULE_NAME = \"linkdiscovery\"", "var_name": "MODULE_NAME"}, {"original_string": "private static final String TOPOLOGY_TABLE_NAME = \"controller_topologyconfig\";", "modifier": "private static final", "type": "String", "declarator": "TOPOLOGY_TABLE_NAME = \"controller_topologyconfig\"", "var_name": "TOPOLOGY_TABLE_NAME"}, {"original_string": "private static final String TOPOLOGY_ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "TOPOLOGY_ID = \"id\"", "var_name": "TOPOLOGY_ID"}, {"original_string": "private static final String TOPOLOGY_AUTOPORTFAST = \"autoportfast\";", "modifier": "private static final", "type": "String", "declarator": "TOPOLOGY_AUTOPORTFAST = \"autoportfast\"", "var_name": "TOPOLOGY_AUTOPORTFAST"}, {"original_string": "private static final String LINK_TABLE_NAME = \"controller_link\";", "modifier": "private static final", "type": "String", "declarator": "LINK_TABLE_NAME = \"controller_link\"", "var_name": "LINK_TABLE_NAME"}, {"original_string": "private static final String LINK_ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "LINK_ID = \"id\"", "var_name": "LINK_ID"}, {"original_string": "private static final String LINK_SRC_SWITCH = \"src_switch_id\";", "modifier": "private static final", "type": "String", "declarator": "LINK_SRC_SWITCH = \"src_switch_id\"", "var_name": "LINK_SRC_SWITCH"}, {"original_string": "private static final String LINK_SRC_PORT = \"src_port\";", "modifier": "private static final", "type": "String", "declarator": "LINK_SRC_PORT = \"src_port\"", "var_name": "LINK_SRC_PORT"}, {"original_string": "private static final String LINK_DST_SWITCH = \"dst_switch_id\";", "modifier": "private static final", "type": "String", "declarator": "LINK_DST_SWITCH = \"dst_switch_id\"", "var_name": "LINK_DST_SWITCH"}, {"original_string": "private static final String LINK_DST_PORT = \"dst_port\";", "modifier": "private static final", "type": "String", "declarator": "LINK_DST_PORT = \"dst_port\"", "var_name": "LINK_DST_PORT"}, {"original_string": "private static final String LINK_VALID_TIME = \"valid_time\";", "modifier": "private static final", "type": "String", "declarator": "LINK_VALID_TIME = \"valid_time\"", "var_name": "LINK_VALID_TIME"}, {"original_string": "private static final String LINK_TYPE = \"link_type\";", "modifier": "private static final", "type": "String", "declarator": "LINK_TYPE = \"link_type\"", "var_name": "LINK_TYPE"}, {"original_string": "private static final String SWITCH_CONFIG_TABLE_NAME = \"controller_switchconfig\";", "modifier": "private static final", "type": "String", "declarator": "SWITCH_CONFIG_TABLE_NAME = \"controller_switchconfig\"", "var_name": "SWITCH_CONFIG_TABLE_NAME"}, {"original_string": "private static final String SWITCH_CONFIG_CORE_SWITCH = \"core_switch\";", "modifier": "private static final", "type": "String", "declarator": "SWITCH_CONFIG_CORE_SWITCH = \"core_switch\"", "var_name": "SWITCH_CONFIG_CORE_SWITCH"}, {"original_string": "protected IEventUpdater<DirectLinkEvent> evDirectLink;", "modifier": "protected", "type": "IEventUpdater<DirectLinkEvent>", "declarator": "evDirectLink", "var_name": "evDirectLink"}, {"original_string": "protected IFloodlightProviderService floodlightProvider;", "modifier": "protected", "type": "IFloodlightProviderService", "declarator": "floodlightProvider", "var_name": "floodlightProvider"}, {"original_string": "protected IStorageSourceService storageSource;", "modifier": "protected", "type": "IStorageSourceService", "declarator": "storageSource", "var_name": "storageSource"}, {"original_string": "protected IThreadPoolService threadPool;", "modifier": "protected", "type": "IThreadPoolService", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "protected IRestApiService restApi;", "modifier": "protected", "type": "IRestApiService", "declarator": "restApi", "var_name": "restApi"}, {"original_string": "protected IDebugCounterService debugCounters;", "modifier": "protected", "type": "IDebugCounterService", "declarator": "debugCounters", "var_name": "debugCounters"}, {"original_string": "protected IDebugEventService debugEvents;", "modifier": "protected", "type": "IDebugEventService", "declarator": "debugEvents", "var_name": "debugEvents"}, {"original_string": "protected Role role;", "modifier": "protected", "type": "Role", "declarator": "role", "var_name": "role"}, {"original_string": "private static final byte[] LLDP_STANDARD_DST_MAC_STRING =\n            HexString.fromHexString(\"01:80:c2:00:00:0e\");", "modifier": "private static final", "type": "byte[]", "declarator": "LLDP_STANDARD_DST_MAC_STRING =\n            HexString.fromHexString(\"01:80:c2:00:00:0e\")", "var_name": "LLDP_STANDARD_DST_MAC_STRING"}, {"original_string": "private static final long LINK_LOCAL_MASK = 0xfffffffffff0L;", "modifier": "private static final", "type": "long", "declarator": "LINK_LOCAL_MASK = 0xfffffffffff0L", "var_name": "LINK_LOCAL_MASK"}, {"original_string": "private static final long LINK_LOCAL_VALUE = 0x0180c2000000L;", "modifier": "private static final", "type": "long", "declarator": "LINK_LOCAL_VALUE = 0x0180c2000000L", "var_name": "LINK_LOCAL_VALUE"}, {"original_string": "protected static int EVENT_HISTORY_SIZE = 1024;", "modifier": "protected static", "type": "int", "declarator": "EVENT_HISTORY_SIZE = 1024", "var_name": "EVENT_HISTORY_SIZE"}, {"original_string": "private static final String LLDP_BSN_DST_MAC_STRING = \"ff:ff:ff:ff:ff:ff\";", "modifier": "private static final", "type": "String", "declarator": "LLDP_BSN_DST_MAC_STRING = \"ff:ff:ff:ff:ff:ff\"", "var_name": "LLDP_BSN_DST_MAC_STRING"}, {"original_string": "private static final byte TLV_DIRECTION_TYPE = 0x73;", "modifier": "private static final", "type": "byte", "declarator": "TLV_DIRECTION_TYPE = 0x73", "var_name": "TLV_DIRECTION_TYPE"}, {"original_string": "private static final short TLV_DIRECTION_LENGTH = 1;", "modifier": "private static final", "type": "short", "declarator": "TLV_DIRECTION_LENGTH = 1", "var_name": "TLV_DIRECTION_LENGTH"}, {"original_string": "private static final byte TLV_DIRECTION_VALUE_FORWARD[] = { 0x01 };", "modifier": "private static final", "type": "byte", "declarator": "TLV_DIRECTION_VALUE_FORWARD[] = { 0x01 }", "var_name": "TLV_DIRECTION_VALUE_FORWARD"}, {"original_string": "private static final byte TLV_DIRECTION_VALUE_REVERSE[] = { 0x02 };", "modifier": "private static final", "type": "byte", "declarator": "TLV_DIRECTION_VALUE_REVERSE[] = { 0x02 }", "var_name": "TLV_DIRECTION_VALUE_REVERSE"}, {"original_string": "private static final LLDPTLV forwardTLV = new LLDPTLV().setType(TLV_DIRECTION_TYPE)\n                                                           .setLength(TLV_DIRECTION_LENGTH)\n                                                           .setValue(TLV_DIRECTION_VALUE_FORWARD);", "modifier": "private static final", "type": "LLDPTLV", "declarator": "forwardTLV = new LLDPTLV().setType(TLV_DIRECTION_TYPE)\n                                                           .setLength(TLV_DIRECTION_LENGTH)\n                                                           .setValue(TLV_DIRECTION_VALUE_FORWARD)", "var_name": "forwardTLV"}, {"original_string": "private static final LLDPTLV reverseTLV = new LLDPTLV().setType(TLV_DIRECTION_TYPE)\n                                                           .setLength(TLV_DIRECTION_LENGTH)\n                                                           .setValue(TLV_DIRECTION_VALUE_REVERSE);", "modifier": "private static final", "type": "LLDPTLV", "declarator": "reverseTLV = new LLDPTLV().setType(TLV_DIRECTION_TYPE)\n                                                           .setLength(TLV_DIRECTION_LENGTH)\n                                                           .setValue(TLV_DIRECTION_VALUE_REVERSE)", "var_name": "reverseTLV"}, {"original_string": "protected SingletonTask discoveryTask;", "modifier": "protected", "type": "SingletonTask", "declarator": "discoveryTask", "var_name": "discoveryTask"}, {"original_string": "protected final int DISCOVERY_TASK_INTERVAL = 1;", "modifier": "protected final", "type": "int", "declarator": "DISCOVERY_TASK_INTERVAL = 1", "var_name": "DISCOVERY_TASK_INTERVAL"}, {"original_string": "protected final int LINK_TIMEOUT = 35;", "modifier": "protected final", "type": "int", "declarator": "LINK_TIMEOUT = 35", "var_name": "LINK_TIMEOUT"}, {"original_string": "protected final int LLDP_TO_ALL_INTERVAL = 15;", "modifier": "protected final", "type": "int", "declarator": "LLDP_TO_ALL_INTERVAL = 15", "var_name": "LLDP_TO_ALL_INTERVAL"}, {"original_string": "protected long lldpClock = 0;", "modifier": "protected", "type": "long", "declarator": "lldpClock = 0", "var_name": "lldpClock"}, {"original_string": "protected final int LLDP_TO_KNOWN_INTERVAL = 20;", "modifier": "protected final", "type": "int", "declarator": "LLDP_TO_KNOWN_INTERVAL = 20", "var_name": "LLDP_TO_KNOWN_INTERVAL"}, {"original_string": "protected LLDPTLV controllerTLV;", "modifier": "protected", "type": "LLDPTLV", "declarator": "controllerTLV", "var_name": "controllerTLV"}, {"original_string": "protected ReentrantReadWriteLock lock;", "modifier": "protected", "type": "ReentrantReadWriteLock", "declarator": "lock", "var_name": "lock"}, {"original_string": "int lldpTimeCount = 0;", "modifier": "", "type": "int", "declarator": "lldpTimeCount = 0", "var_name": "lldpTimeCount"}, {"original_string": "protected boolean AUTOPORTFAST_DEFAULT = false;", "modifier": "protected", "type": "boolean", "declarator": "AUTOPORTFAST_DEFAULT = false", "var_name": "AUTOPORTFAST_DEFAULT"}, {"original_string": "protected boolean autoPortFastFeature = AUTOPORTFAST_DEFAULT;", "modifier": "protected", "type": "boolean", "declarator": "autoPortFastFeature = AUTOPORTFAST_DEFAULT", "var_name": "autoPortFastFeature"}, {"original_string": "protected Map<Link, LinkInfo> links;", "modifier": "protected", "type": "Map<Link, LinkInfo>", "declarator": "links", "var_name": "links"}, {"original_string": "protected Map<Long, Set<Link>> switchLinks;", "modifier": "protected", "type": "Map<Long, Set<Link>>", "declarator": "switchLinks", "var_name": "switchLinks"}, {"original_string": "protected Map<NodePortTuple, Set<Link>> portLinks;", "modifier": "protected", "type": "Map<NodePortTuple, Set<Link>>", "declarator": "portLinks", "var_name": "portLinks"}, {"original_string": "protected volatile boolean shuttingDown = false;", "modifier": "protected volatile", "type": "boolean", "declarator": "shuttingDown = false", "var_name": "shuttingDown"}, {"original_string": "protected ArrayList<ILinkDiscoveryListener> linkDiscoveryAware;", "modifier": "protected", "type": "ArrayList<ILinkDiscoveryListener>", "declarator": "linkDiscoveryAware", "var_name": "linkDiscoveryAware"}, {"original_string": "protected BlockingQueue<LDUpdate> updates;", "modifier": "protected", "type": "BlockingQueue<LDUpdate>", "declarator": "updates", "var_name": "updates"}, {"original_string": "protected Thread updatesThread;", "modifier": "protected", "type": "Thread", "declarator": "updatesThread", "var_name": "updatesThread"}, {"original_string": "protected Set<NodePortTuple> suppressLinkDiscovery;", "modifier": "protected", "type": "Set<NodePortTuple>", "declarator": "suppressLinkDiscovery", "var_name": "suppressLinkDiscovery"}, {"original_string": "protected LinkedBlockingQueue<NodePortTuple> quarantineQueue;", "modifier": "protected", "type": "LinkedBlockingQueue<NodePortTuple>", "declarator": "quarantineQueue", "var_name": "quarantineQueue"}, {"original_string": "protected LinkedBlockingQueue<NodePortTuple> maintenanceQueue;", "modifier": "protected", "type": "LinkedBlockingQueue<NodePortTuple>", "declarator": "maintenanceQueue", "var_name": "maintenanceQueue"}, {"original_string": "protected SingletonTask bddpTask;", "modifier": "protected", "type": "SingletonTask", "declarator": "bddpTask", "var_name": "bddpTask"}, {"original_string": "protected final int BDDP_TASK_INTERVAL = 100;", "modifier": "protected final", "type": "int", "declarator": "BDDP_TASK_INTERVAL = 100", "var_name": "BDDP_TASK_INTERVAL"}, {"original_string": "protected final int BDDP_TASK_SIZE = 10;", "modifier": "protected final", "type": "int", "declarator": "BDDP_TASK_SIZE = 10", "var_name": "BDDP_TASK_SIZE"}, {"original_string": "protected Set<MACRange> ignoreMACSet;", "modifier": "protected", "type": "Set<MACRange>", "declarator": "ignoreMACSet", "var_name": "ignoreMACSet"}, {"original_string": "private IHAListener haListener;", "modifier": "private", "type": "IHAListener", "declarator": "haListener", "var_name": "haListener"}, {"original_string": "private IDebugCounter ctrQuarantineDrops;", "modifier": "private", "type": "IDebugCounter", "declarator": "ctrQuarantineDrops", "var_name": "ctrQuarantineDrops"}, {"original_string": "private IDebugCounter ctrIgnoreSrcMacDrops;", "modifier": "private", "type": "IDebugCounter", "declarator": "ctrIgnoreSrcMacDrops", "var_name": "ctrIgnoreSrcMacDrops"}, {"original_string": "private IDebugCounter ctrIncoming;", "modifier": "private", "type": "IDebugCounter", "declarator": "ctrIncoming", "var_name": "ctrIncoming"}, {"original_string": "private IDebugCounter ctrLinkLocalDrops;", "modifier": "private", "type": "IDebugCounter", "declarator": "ctrLinkLocalDrops", "var_name": "ctrLinkLocalDrops"}, {"original_string": "private IDebugCounter ctrLldpEol;", "modifier": "private", "type": "IDebugCounter", "declarator": "ctrLldpEol", "var_name": "ctrLldpEol"}, {"original_string": "private final String PACKAGE = LinkDiscoveryManager.class.getPackage().getName();", "modifier": "private final", "type": "String", "declarator": "PACKAGE = LinkDiscoveryManager.class.getPackage().getName()", "var_name": "PACKAGE"}], "methods": [{"identifier": "generateLLDPMessage", "parameters": "(long sw, short port,\n                                       boolean isStandard, boolean isReverse)", "modifiers": "@Override public", "return": "OFPacketOut", "signature": "OFPacketOut generateLLDPMessage(long sw, short port,\n                                       boolean isStandard, boolean isReverse)", "full_signature": "@Override public OFPacketOut generateLLDPMessage(long sw, short port,\n                                       boolean isStandard, boolean isReverse)", "class_method_signature": "LinkDiscoveryManager.generateLLDPMessage(long sw, short port,\n                                       boolean isStandard, boolean isReverse)", "testcase": false, "constructor": false}, {"identifier": "getLldpFrequency", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLldpFrequency()", "full_signature": "public int getLldpFrequency()", "class_method_signature": "LinkDiscoveryManager.getLldpFrequency()", "testcase": false, "constructor": false}, {"identifier": "getLldpTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLldpTimeout()", "full_signature": "public int getLldpTimeout()", "class_method_signature": "LinkDiscoveryManager.getLldpTimeout()", "testcase": false, "constructor": false}, {"identifier": "getPortLinks", "parameters": "()", "modifiers": "@Override public", "return": "Map<NodePortTuple, Set<Link>>", "signature": "Map<NodePortTuple, Set<Link>> getPortLinks()", "full_signature": "@Override public Map<NodePortTuple, Set<Link>> getPortLinks()", "class_method_signature": "LinkDiscoveryManager.getPortLinks()", "testcase": false, "constructor": false}, {"identifier": "getSuppressLLDPsInfo", "parameters": "()", "modifiers": "@Override public", "return": "Set<NodePortTuple>", "signature": "Set<NodePortTuple> getSuppressLLDPsInfo()", "full_signature": "@Override public Set<NodePortTuple> getSuppressLLDPsInfo()", "class_method_signature": "LinkDiscoveryManager.getSuppressLLDPsInfo()", "testcase": false, "constructor": false}, {"identifier": "AddToSuppressLLDPs", "parameters": "(long sw, short port)", "modifiers": "@Override public", "return": "void", "signature": "void AddToSuppressLLDPs(long sw, short port)", "full_signature": "@Override public void AddToSuppressLLDPs(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.AddToSuppressLLDPs(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "RemoveFromSuppressLLDPs", "parameters": "(long sw, short port)", "modifiers": "@Override public", "return": "void", "signature": "void RemoveFromSuppressLLDPs(long sw, short port)", "full_signature": "@Override public void RemoveFromSuppressLLDPs(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.RemoveFromSuppressLLDPs(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "isShuttingDown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isShuttingDown()", "full_signature": "public boolean isShuttingDown()", "class_method_signature": "LinkDiscoveryManager.isShuttingDown()", "testcase": false, "constructor": false}, {"identifier": "isTunnelPort", "parameters": "(long sw, short port)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTunnelPort(long sw, short port)", "full_signature": "@Override public boolean isTunnelPort(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.isTunnelPort(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "getLinkType", "parameters": "(Link lt, LinkInfo info)", "modifiers": "@Override public", "return": "ILinkDiscovery.LinkType", "signature": "ILinkDiscovery.LinkType getLinkType(Link lt, LinkInfo info)", "full_signature": "@Override public ILinkDiscovery.LinkType getLinkType(Link lt, LinkInfo info)", "class_method_signature": "LinkDiscoveryManager.getLinkType(Link lt, LinkInfo info)", "testcase": false, "constructor": false}, {"identifier": "getQuarantinedPorts", "parameters": "(long sw)", "modifiers": "@Override public", "return": "Set<Short>", "signature": "Set<Short> getQuarantinedPorts(long sw)", "full_signature": "@Override public Set<Short> getQuarantinedPorts(long sw)", "class_method_signature": "LinkDiscoveryManager.getQuarantinedPorts(long sw)", "testcase": false, "constructor": false}, {"identifier": "getSwitchLinks", "parameters": "()", "modifiers": "@Override public", "return": "Map<Long, Set<Link>>", "signature": "Map<Long, Set<Link>> getSwitchLinks()", "full_signature": "@Override public Map<Long, Set<Link>> getSwitchLinks()", "class_method_signature": "LinkDiscoveryManager.getSwitchLinks()", "testcase": false, "constructor": false}, {"identifier": "addMACToIgnoreList", "parameters": "(long mac, int ignoreBits)", "modifiers": "@Override public", "return": "void", "signature": "void addMACToIgnoreList(long mac, int ignoreBits)", "full_signature": "@Override public void addMACToIgnoreList(long mac, int ignoreBits)", "class_method_signature": "LinkDiscoveryManager.addMACToIgnoreList(long mac, int ignoreBits)", "testcase": false, "constructor": false}, {"identifier": "isAutoPortFastFeature", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAutoPortFastFeature()", "full_signature": "@Override public boolean isAutoPortFastFeature()", "class_method_signature": "LinkDiscoveryManager.isAutoPortFastFeature()", "testcase": false, "constructor": false}, {"identifier": "setAutoPortFastFeature", "parameters": "(boolean autoPortFastFeature)", "modifiers": "@Override public", "return": "void", "signature": "void setAutoPortFastFeature(boolean autoPortFastFeature)", "full_signature": "@Override public void setAutoPortFastFeature(boolean autoPortFastFeature)", "class_method_signature": "LinkDiscoveryManager.setAutoPortFastFeature(boolean autoPortFastFeature)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(ILinkDiscoveryListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(ILinkDiscoveryListener listener)", "full_signature": "@Override public void addListener(ILinkDiscoveryListener listener)", "class_method_signature": "LinkDiscoveryManager.addListener(ILinkDiscoveryListener listener)", "testcase": false, "constructor": false}, {"identifier": "getLinks", "parameters": "()", "modifiers": "@Override public", "return": "Map<Link, LinkInfo>", "signature": "Map<Link, LinkInfo> getLinks()", "full_signature": "@Override public Map<Link, LinkInfo> getLinks()", "class_method_signature": "LinkDiscoveryManager.getLinks()", "testcase": false, "constructor": false}, {"identifier": "getLinkInfo", "parameters": "(Link link)", "modifiers": "@Override public", "return": "LinkInfo", "signature": "LinkInfo getLinkInfo(Link link)", "full_signature": "@Override public LinkInfo getLinkInfo(Link link)", "class_method_signature": "LinkDiscoveryManager.getLinkInfo(Link link)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "LinkDiscoveryManager.getName()", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg,\n                           FloodlightContext cntx)", "modifiers": "@Override public", "return": "Command", "signature": "Command receive(IOFSwitch sw, OFMessage msg,\n                           FloodlightContext cntx)", "full_signature": "@Override public Command receive(IOFSwitch sw, OFMessage msg,\n                           FloodlightContext cntx)", "class_method_signature": "LinkDiscoveryManager.receive(IOFSwitch sw, OFMessage msg,\n                           FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(OFType type, String name)", "class_method_signature": "LinkDiscoveryManager.isCallbackOrderingPrereq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(OFType type, String name)", "class_method_signature": "LinkDiscoveryManager.isCallbackOrderingPostreq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "handlePacketIn", "parameters": "(long sw, OFPacketIn pi,\n                                     FloodlightContext cntx)", "modifiers": "protected", "return": "Command", "signature": "Command handlePacketIn(long sw, OFPacketIn pi,\n                                     FloodlightContext cntx)", "full_signature": "protected Command handlePacketIn(long sw, OFPacketIn pi,\n                                     FloodlightContext cntx)", "class_method_signature": "LinkDiscoveryManager.handlePacketIn(long sw, OFPacketIn pi,\n                                     FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "ignorePacketInFromSource", "parameters": "(long srcMAC)", "modifiers": "private", "return": "boolean", "signature": "boolean ignorePacketInFromSource(long srcMAC)", "full_signature": "private boolean ignorePacketInFromSource(long srcMAC)", "class_method_signature": "LinkDiscoveryManager.ignorePacketInFromSource(long srcMAC)", "testcase": false, "constructor": false}, {"identifier": "handleLldp", "parameters": "(LLDP lldp, long sw, short inPort,\n                               boolean isStandard, FloodlightContext cntx)", "modifiers": "private", "return": "Command", "signature": "Command handleLldp(LLDP lldp, long sw, short inPort,\n                               boolean isStandard, FloodlightContext cntx)", "full_signature": "private Command handleLldp(LLDP lldp, long sw, short inPort,\n                               boolean isStandard, FloodlightContext cntx)", "class_method_signature": "LinkDiscoveryManager.handleLldp(LLDP lldp, long sw, short inPort,\n                               boolean isStandard, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "processNewPort", "parameters": "(long sw, short p)", "modifiers": "private", "return": "void", "signature": "void processNewPort(long sw, short p)", "full_signature": "private void processNewPort(long sw, short p)", "class_method_signature": "LinkDiscoveryManager.processNewPort(long sw, short p)", "testcase": false, "constructor": false}, {"identifier": "doUpdatesThread", "parameters": "()", "modifiers": "@LogMessageDoc(level = \"ERROR\", message = \"Error in link discovery updates loop\", explanation = \"An unknown error occured while dispatching \" + \"link update notifications\", recommendation = LogMessageDoc.GENERIC_ACTION) private", "return": "void", "signature": "void doUpdatesThread()", "full_signature": "@LogMessageDoc(level = \"ERROR\", message = \"Error in link discovery updates loop\", explanation = \"An unknown error occured while dispatching \" + \"link update notifications\", recommendation = LogMessageDoc.GENERIC_ACTION) private void doUpdatesThread()", "class_method_signature": "LinkDiscoveryManager.doUpdatesThread()", "testcase": false, "constructor": false}, {"identifier": "isLinkDiscoverySuppressed", "parameters": "(long sw, short portNumber)", "modifiers": "protected", "return": "boolean", "signature": "boolean isLinkDiscoverySuppressed(long sw, short portNumber)", "full_signature": "protected boolean isLinkDiscoverySuppressed(long sw, short portNumber)", "class_method_signature": "LinkDiscoveryManager.isLinkDiscoverySuppressed(long sw, short portNumber)", "testcase": false, "constructor": false}, {"identifier": "discoverLinks", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void discoverLinks()", "full_signature": "protected void discoverLinks()", "class_method_signature": "LinkDiscoveryManager.discoverLinks()", "testcase": false, "constructor": false}, {"identifier": "addToQuarantineQueue", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void addToQuarantineQueue(NodePortTuple npt)", "full_signature": "protected void addToQuarantineQueue(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.addToQuarantineQueue(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "removeFromQuarantineQueue", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void removeFromQuarantineQueue(NodePortTuple npt)", "full_signature": "protected void removeFromQuarantineQueue(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.removeFromQuarantineQueue(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "addToMaintenanceQueue", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void addToMaintenanceQueue(NodePortTuple npt)", "full_signature": "protected void addToMaintenanceQueue(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.addToMaintenanceQueue(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "removeFromMaintenanceQueue", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void removeFromMaintenanceQueue(NodePortTuple npt)", "full_signature": "protected void removeFromMaintenanceQueue(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.removeFromMaintenanceQueue(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "processBDDPLists", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void processBDDPLists()", "full_signature": "protected void processBDDPLists()", "class_method_signature": "LinkDiscoveryManager.processBDDPLists()", "testcase": false, "constructor": false}, {"identifier": "generateSwitchPortStatusUpdate", "parameters": "(long sw, short port)", "modifiers": "private", "return": "void", "signature": "void generateSwitchPortStatusUpdate(long sw, short port)", "full_signature": "private void generateSwitchPortStatusUpdate(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.generateSwitchPortStatusUpdate(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "discover", "parameters": "(NodePortTuple npt)", "modifiers": "protected", "return": "void", "signature": "void discover(NodePortTuple npt)", "full_signature": "protected void discover(NodePortTuple npt)", "class_method_signature": "LinkDiscoveryManager.discover(NodePortTuple npt)", "testcase": false, "constructor": false}, {"identifier": "discover", "parameters": "(long sw, short port)", "modifiers": "protected", "return": "void", "signature": "void discover(long sw, short port)", "full_signature": "protected void discover(long sw, short port)", "class_method_signature": "LinkDiscoveryManager.discover(long sw, short port)", "testcase": false, "constructor": false}, {"identifier": "isIncomingDiscoveryAllowed", "parameters": "(long sw, short port,\n                                                 boolean isStandard)", "modifiers": "protected", "return": "boolean", "signature": "boolean isIncomingDiscoveryAllowed(long sw, short port,\n                                                 boolean isStandard)", "full_signature": "protected boolean isIncomingDiscoveryAllowed(long sw, short port,\n                                                 boolean isStandard)", "class_method_signature": "LinkDiscoveryManager.isIncomingDiscoveryAllowed(long sw, short port,\n                                                 boolean isStandard)", "testcase": false, "constructor": false}, {"identifier": "isOutgoingDiscoveryAllowed", "parameters": "(long sw, short port,\n                                                 boolean isStandard,\n                                                 boolean isReverse)", "modifiers": "protected", "return": "boolean", "signature": "boolean isOutgoingDiscoveryAllowed(long sw, short port,\n                                                 boolean isStandard,\n                                                 boolean isReverse)", "full_signature": "protected boolean isOutgoingDiscoveryAllowed(long sw, short port,\n                                                 boolean isStandard,\n                                                 boolean isReverse)", "class_method_signature": "LinkDiscoveryManager.isOutgoingDiscoveryAllowed(long sw, short port,\n                                                 boolean isStandard,\n                                                 boolean isReverse)", "testcase": false, "constructor": false}, {"identifier": "getDiscoveryActions", "parameters": "(IOFSwitch sw, OFPhysicalPort port)", "modifiers": "protected", "return": "List<OFAction>", "signature": "List<OFAction> getDiscoveryActions(IOFSwitch sw, OFPhysicalPort port)", "full_signature": "protected List<OFAction> getDiscoveryActions(IOFSwitch sw, OFPhysicalPort port)", "class_method_signature": "LinkDiscoveryManager.getDiscoveryActions(IOFSwitch sw, OFPhysicalPort port)", "testcase": false, "constructor": false}, {"identifier": "sendDiscoveryMessage", "parameters": "(long sw, short port,\n                                        boolean isStandard, boolean isReverse)", "modifiers": "@LogMessageDoc(level = \"ERROR\", message = \"Failure sending LLDP out port {port} on switch {switch}\", explanation = \"An I/O error occured while sending LLDP message \" + \"to the switch.\", recommendation = LogMessageDoc.CHECK_SWITCH) protected", "return": "void", "signature": "void sendDiscoveryMessage(long sw, short port,\n                                        boolean isStandard, boolean isReverse)", "full_signature": "@LogMessageDoc(level = \"ERROR\", message = \"Failure sending LLDP out port {port} on switch {switch}\", explanation = \"An I/O error occured while sending LLDP message \" + \"to the switch.\", recommendation = LogMessageDoc.CHECK_SWITCH) protected void sendDiscoveryMessage(long sw, short port,\n                                        boolean isStandard, boolean isReverse)", "class_method_signature": "LinkDiscoveryManager.sendDiscoveryMessage(long sw, short port,\n                                        boolean isStandard, boolean isReverse)", "testcase": false, "constructor": false}, {"identifier": "discoverOnAllPorts", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void discoverOnAllPorts()", "full_signature": "protected void discoverOnAllPorts()", "class_method_signature": "LinkDiscoveryManager.discoverOnAllPorts()", "testcase": false, "constructor": false}, {"identifier": "getUpdateOperation", "parameters": "(int srcPortState,\n                                                 int dstPortState)", "modifiers": "protected", "return": "UpdateOperation", "signature": "UpdateOperation getUpdateOperation(int srcPortState,\n                                                 int dstPortState)", "full_signature": "protected UpdateOperation getUpdateOperation(int srcPortState,\n                                                 int dstPortState)", "class_method_signature": "LinkDiscoveryManager.getUpdateOperation(int srcPortState,\n                                                 int dstPortState)", "testcase": false, "constructor": false}, {"identifier": "getUpdateOperation", "parameters": "(int srcPortState)", "modifiers": "protected", "return": "UpdateOperation", "signature": "UpdateOperation getUpdateOperation(int srcPortState)", "full_signature": "protected UpdateOperation getUpdateOperation(int srcPortState)", "class_method_signature": "LinkDiscoveryManager.getUpdateOperation(int srcPortState)", "testcase": false, "constructor": false}, {"identifier": "isLinkAllowed", "parameters": "(long src, short srcPort,\n                                    long dst, short dstPort)", "modifiers": "protected", "return": "boolean", "signature": "boolean isLinkAllowed(long src, short srcPort,\n                                    long dst, short dstPort)", "full_signature": "protected boolean isLinkAllowed(long src, short srcPort,\n                                    long dst, short dstPort)", "class_method_signature": "LinkDiscoveryManager.isLinkAllowed(long src, short srcPort,\n                                    long dst, short dstPort)", "testcase": false, "constructor": false}, {"identifier": "addLink", "parameters": "(Link lt, LinkInfo newInfo)", "modifiers": "private", "return": "boolean", "signature": "boolean addLink(Link lt, LinkInfo newInfo)", "full_signature": "private boolean addLink(Link lt, LinkInfo newInfo)", "class_method_signature": "LinkDiscoveryManager.addLink(Link lt, LinkInfo newInfo)", "testcase": false, "constructor": false}, {"identifier": "updateLink", "parameters": "(Link lt, LinkInfo oldInfo, LinkInfo newInfo)", "modifiers": "protected", "return": "boolean", "signature": "boolean updateLink(Link lt, LinkInfo oldInfo, LinkInfo newInfo)", "full_signature": "protected boolean updateLink(Link lt, LinkInfo oldInfo, LinkInfo newInfo)", "class_method_signature": "LinkDiscoveryManager.updateLink(Link lt, LinkInfo oldInfo, LinkInfo newInfo)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateLink", "parameters": "(Link lt, LinkInfo newInfo)", "modifiers": "@LogMessageDocs({ @LogMessageDoc(message=\"Inter-switch link detected:\", explanation=\"Detected a new link between two openflow switches,\" + \"use show link to find current status\"), @LogMessageDoc(message=\"Inter-switch link updated:\", explanation=\"Detected a link change between two openflow switches, \" + \"use show link to find current status\") }) protected", "return": "boolean", "signature": "boolean addOrUpdateLink(Link lt, LinkInfo newInfo)", "full_signature": "@LogMessageDocs({ @LogMessageDoc(message=\"Inter-switch link detected:\", explanation=\"Detected a new link between two openflow switches,\" + \"use show link to find current status\"), @LogMessageDoc(message=\"Inter-switch link updated:\", explanation=\"Detected a link change between two openflow switches, \" + \"use show link to find current status\") }) protected boolean addOrUpdateLink(Link lt, LinkInfo newInfo)", "class_method_signature": "LinkDiscoveryManager.addOrUpdateLink(Link lt, LinkInfo newInfo)", "testcase": false, "constructor": false}, {"identifier": "deleteLink", "parameters": "(Link link, String reason)", "modifiers": "protected", "return": "void", "signature": "void deleteLink(Link link, String reason)", "full_signature": "protected void deleteLink(Link link, String reason)", "class_method_signature": "LinkDiscoveryManager.deleteLink(Link link, String reason)", "testcase": false, "constructor": false}, {"identifier": "deleteLinks", "parameters": "(List<Link> links, String reason)", "modifiers": "protected", "return": "void", "signature": "void deleteLinks(List<Link> links, String reason)", "full_signature": "protected void deleteLinks(List<Link> links, String reason)", "class_method_signature": "LinkDiscoveryManager.deleteLinks(List<Link> links, String reason)", "testcase": false, "constructor": false}, {"identifier": "deleteLinks", "parameters": "(List<Link> links, String reason,\n                               List<LDUpdate> updateList)", "modifiers": "@LogMessageDoc(message=\"Inter-switch link removed:\", explanation=\"A previously detected link between two openflow switches no longer exists, \" + \"use show link to find current status\") protected", "return": "void", "signature": "void deleteLinks(List<Link> links, String reason,\n                               List<LDUpdate> updateList)", "full_signature": "@LogMessageDoc(message=\"Inter-switch link removed:\", explanation=\"A previously detected link between two openflow switches no longer exists, \" + \"use show link to find current status\") protected void deleteLinks(List<Link> links, String reason,\n                               List<LDUpdate> updateList)", "class_method_signature": "LinkDiscoveryManager.deleteLinks(List<Link> links, String reason,\n                               List<LDUpdate> updateList)", "testcase": false, "constructor": false}, {"identifier": "deleteLinksOnPort", "parameters": "(NodePortTuple npt, String reason)", "modifiers": "protected", "return": "void", "signature": "void deleteLinksOnPort(NodePortTuple npt, String reason)", "full_signature": "protected void deleteLinksOnPort(NodePortTuple npt, String reason)", "class_method_signature": "LinkDiscoveryManager.deleteLinksOnPort(NodePortTuple npt, String reason)", "testcase": false, "constructor": false}, {"identifier": "timeoutLinks", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void timeoutLinks()", "full_signature": "protected void timeoutLinks()", "class_method_signature": "LinkDiscoveryManager.timeoutLinks()", "testcase": false, "constructor": false}, {"identifier": "setControllerTLV", "parameters": "()", "modifiers": "@LogMessageDoc(level=\"WARN\", message=\"Could not get list of interfaces of local machine to \" + \"encode in TLV: {detail-msg}\", explanation=\"Outgoing LLDP packets encode a unique hash to \" + \"identify the local machine. The list of network \" + \"interfaces is used as input and the controller failed \" + \"to query this list\", recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) protected", "return": "void", "signature": "void setControllerTLV()", "full_signature": "@LogMessageDoc(level=\"WARN\", message=\"Could not get list of interfaces of local machine to \" + \"encode in TLV: {detail-msg}\", explanation=\"Outgoing LLDP packets encode a unique hash to \" + \"identify the local machine. The list of network \" + \"interfaces is used as input and the controller failed \" + \"to query this list\", recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) protected void setControllerTLV()", "class_method_signature": "LinkDiscoveryManager.setControllerTLV()", "testcase": false, "constructor": false}, {"identifier": "handlePortDown", "parameters": "(long switchId, short portNumber)", "modifiers": "private", "return": "void", "signature": "void handlePortDown(long switchId, short portNumber)", "full_signature": "private void handlePortDown(long switchId, short portNumber)", "class_method_signature": "LinkDiscoveryManager.handlePortDown(long switchId, short portNumber)", "testcase": false, "constructor": false}, {"identifier": "switchPortChanged", "parameters": "(long switchId,\n            ImmutablePort port,\n            IOFSwitch.PortChangeType type)", "modifiers": "@Override public", "return": "void", "signature": "void switchPortChanged(long switchId,\n            ImmutablePort port,\n            IOFSwitch.PortChangeType type)", "full_signature": "@Override public void switchPortChanged(long switchId,\n            ImmutablePort port,\n            IOFSwitch.PortChangeType type)", "class_method_signature": "LinkDiscoveryManager.switchPortChanged(long switchId,\n            ImmutablePort port,\n            IOFSwitch.PortChangeType type)", "testcase": false, "constructor": false}, {"identifier": "switchAdded", "parameters": "(long switchId)", "modifiers": "@Override public", "return": "void", "signature": "void switchAdded(long switchId)", "full_signature": "@Override public void switchAdded(long switchId)", "class_method_signature": "LinkDiscoveryManager.switchAdded(long switchId)", "testcase": false, "constructor": false}, {"identifier": "switchRemoved", "parameters": "(long sw)", "modifiers": "@Override public", "return": "void", "signature": "void switchRemoved(long sw)", "full_signature": "@Override public void switchRemoved(long sw)", "class_method_signature": "LinkDiscoveryManager.switchRemoved(long sw)", "testcase": false, "constructor": false}, {"identifier": "switchActivated", "parameters": "(long switchId)", "modifiers": "@Override public", "return": "void", "signature": "void switchActivated(long switchId)", "full_signature": "@Override public void switchActivated(long switchId)", "class_method_signature": "LinkDiscoveryManager.switchActivated(long switchId)", "testcase": false, "constructor": false}, {"identifier": "switchChanged", "parameters": "(long switchId)", "modifiers": "@Override public", "return": "void", "signature": "void switchChanged(long switchId)", "full_signature": "@Override public void switchChanged(long switchId)", "class_method_signature": "LinkDiscoveryManager.switchChanged(long switchId)", "testcase": false, "constructor": false}, {"identifier": "setStorageSource", "parameters": "(IStorageSourceService storageSource)", "modifiers": "public", "return": "void", "signature": "void setStorageSource(IStorageSourceService storageSource)", "full_signature": "public void setStorageSource(IStorageSourceService storageSource)", "class_method_signature": "LinkDiscoveryManager.setStorageSource(IStorageSourceService storageSource)", "testcase": false, "constructor": false}, {"identifier": "getStorageSource", "parameters": "()", "modifiers": "public", "return": "IStorageSourceService", "signature": "IStorageSourceService getStorageSource()", "full_signature": "public IStorageSourceService getStorageSource()", "class_method_signature": "LinkDiscoveryManager.getStorageSource()", "testcase": false, "constructor": false}, {"identifier": "rowsModified", "parameters": "(String tableName, Set<Object> rowKeys)", "modifiers": "@Override public", "return": "void", "signature": "void rowsModified(String tableName, Set<Object> rowKeys)", "full_signature": "@Override public void rowsModified(String tableName, Set<Object> rowKeys)", "class_method_signature": "LinkDiscoveryManager.rowsModified(String tableName, Set<Object> rowKeys)", "testcase": false, "constructor": false}, {"identifier": "rowsDeleted", "parameters": "(String tableName, Set<Object> rowKeys)", "modifiers": "@Override public", "return": "void", "signature": "void rowsDeleted(String tableName, Set<Object> rowKeys)", "full_signature": "@Override public void rowsDeleted(String tableName, Set<Object> rowKeys)", "class_method_signature": "LinkDiscoveryManager.rowsDeleted(String tableName, Set<Object> rowKeys)", "testcase": false, "constructor": false}, {"identifier": "readTopologyConfigFromStorage", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readTopologyConfigFromStorage()", "full_signature": "protected void readTopologyConfigFromStorage()", "class_method_signature": "LinkDiscoveryManager.readTopologyConfigFromStorage()", "testcase": false, "constructor": false}, {"identifier": "clearAllLinks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clearAllLinks()", "full_signature": " void clearAllLinks()", "class_method_signature": "LinkDiscoveryManager.clearAllLinks()", "testcase": false, "constructor": false}, {"identifier": "writeLinkToStorage", "parameters": "(Link lt, LinkInfo linkInfo)", "modifiers": "protected", "return": "void", "signature": "void writeLinkToStorage(Link lt, LinkInfo linkInfo)", "full_signature": "protected void writeLinkToStorage(Link lt, LinkInfo linkInfo)", "class_method_signature": "LinkDiscoveryManager.writeLinkToStorage(Link lt, LinkInfo linkInfo)", "testcase": false, "constructor": false}, {"identifier": "removeLinkFromStorage", "parameters": "(Link lt)", "modifiers": "protected", "return": "void", "signature": "void removeLinkFromStorage(Link lt)", "full_signature": "protected void removeLinkFromStorage(Link lt)", "class_method_signature": "LinkDiscoveryManager.removeLinkFromStorage(Link lt)", "testcase": false, "constructor": false}, {"identifier": "readLinkValidTime", "parameters": "(Link lt)", "modifiers": "public", "return": "Long", "signature": "Long readLinkValidTime(Link lt)", "full_signature": "public Long readLinkValidTime(Link lt)", "class_method_signature": "LinkDiscoveryManager.readLinkValidTime(Link lt)", "testcase": false, "constructor": false}, {"identifier": "getLinkId", "parameters": "(Link lt)", "modifiers": "private", "return": "String", "signature": "String getLinkId(Link lt)", "full_signature": "private String getLinkId(Link lt)", "class_method_signature": "LinkDiscoveryManager.getLinkId(Link lt)", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "LinkDiscoveryManager.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "LinkDiscoveryManager.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "LinkDiscoveryManager.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "LinkDiscoveryManager.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override @LogMessageDocs({ @LogMessageDoc(level = \"ERROR\", message = \"No storage source found.\", explanation = \"Storage source was not initialized; cannot initialize \" + \"link discovery.\", recommendation = LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level = \"ERROR\", message = \"Error in installing listener for \" + \"switch config table {table}\", explanation = \"Failed to install storage notification for the \" + \"switch config table\", recommendation = LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level = \"ERROR\", message = \"No storage source found.\", explanation = \"Storage source was not initialized; cannot initialize \" + \"link discovery.\", recommendation = LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level = \"ERROR\", message = \"Exception in LLDP send timer.\", explanation = \"An unknown error occured while sending LLDP \" + \"messages to switches.\", recommendation = LogMessageDoc.CHECK_SWITCH) }) public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override @LogMessageDocs({ @LogMessageDoc(level = \"ERROR\", message = \"No storage source found.\", explanation = \"Storage source was not initialized; cannot initialize \" + \"link discovery.\", recommendation = LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level = \"ERROR\", message = \"Error in installing listener for \" + \"switch config table {table}\", explanation = \"Failed to install storage notification for the \" + \"switch config table\", recommendation = LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level = \"ERROR\", message = \"No storage source found.\", explanation = \"Storage source was not initialized; cannot initialize \" + \"link discovery.\", recommendation = LogMessageDoc.REPORT_CONTROLLER_BUG), @LogMessageDoc(level = \"ERROR\", message = \"Exception in LLDP send timer.\", explanation = \"An unknown error occured while sending LLDP \" + \"messages to switches.\", recommendation = LogMessageDoc.CHECK_SWITCH) }) public void startUp(FloodlightModuleContext context)", "class_method_signature": "LinkDiscoveryManager.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "registerLinkDiscoveryDebugCounters", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerLinkDiscoveryDebugCounters()", "full_signature": "private void registerLinkDiscoveryDebugCounters()", "class_method_signature": "LinkDiscoveryManager.registerLinkDiscoveryDebugCounters()", "testcase": false, "constructor": false}, {"identifier": "registerLinkDiscoveryDebugEvents", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerLinkDiscoveryDebugEvents()", "full_signature": "private void registerLinkDiscoveryDebugEvents()", "class_method_signature": "LinkDiscoveryManager.registerLinkDiscoveryDebugEvents()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "(String type)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getInfo(String type)", "full_signature": "@Override public Map<String, Object> getInfo(String type)", "class_method_signature": "LinkDiscoveryManager.getInfo(String type)", "testcase": false, "constructor": false}], "file": "floodlight-master/src/main/java/net/floodlightcontroller/linkdiscovery/internal/LinkDiscoveryManager.java"}, "focal_method": {"identifier": "switchAdded", "parameters": "(long switchId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void switchAdded(long switchId) {\n        // no-op\n        // We don't do anything at switch added, but we do only when the\n        // switch is activated.\n    }", "signature": "void switchAdded(long switchId)", "full_signature": "@Override public void switchAdded(long switchId)", "class_method_signature": "LinkDiscoveryManager.switchAdded(long switchId)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14173210, "url": "https://github.com/xiaochengzhong/floodlightUI", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 23102, "license": "licensed"}}