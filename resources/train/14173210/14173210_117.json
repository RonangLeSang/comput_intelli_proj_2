{"test_class": {"identifier": "DebugCounterTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "DebugCounter dc;", "modifier": "", "type": "DebugCounter", "declarator": "dc", "var_name": "dc"}, {"original_string": "protected static Logger log = LoggerFactory.getLogger(DebugCounterTest.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DebugCounterTest.class)", "var_name": "log"}, {"original_string": "IDebugCounter S1, S2, S1_pi, S1_pi_d, S1_pi_e, S1_po, L_t;", "modifier": "", "type": "IDebugCounter", "declarator": "S1", "var_name": "S1"}, {"original_string": "List<DebugCounterInfo> dclist;", "modifier": "", "type": "List<DebugCounterInfo>", "declarator": "dclist", "var_name": "dclist"}], "file": "floodlight-master/src/test/java/net/floodlightcontroller/debugcounter/DebugCounterTest.java"}, "test_case": {"identifier": "testHierarchicalCounterReset2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHierarchicalCounterReset2() {\n        testCounterHierarchy();\n        dc.resetCounterHierarchy(\"switch\", \"01\");\n        checkCounters(0, 2, 3, 0, 0, 0, 0);\n    }", "signature": "void testHierarchicalCounterReset2()", "full_signature": "@Test public void testHierarchicalCounterReset2()", "class_method_signature": "DebugCounterTest.testHierarchicalCounterReset2()", "testcase": true, "constructor": false, "invocations": ["testCounterHierarchy", "resetCounterHierarchy", "checkCounters"]}, "focal_class": {"identifier": "DebugCounter", "superclass": "", "interfaces": "implements IFloodlightModule, IDebugCounterService", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(DebugCounter.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DebugCounter.class)", "var_name": "log"}, {"original_string": "protected AtomicInteger counterIdCounter = new AtomicInteger();", "modifier": "protected", "type": "AtomicInteger", "declarator": "counterIdCounter = new AtomicInteger()", "var_name": "counterIdCounter"}, {"original_string": "protected static DebugCounterInfo[] allCounters =\n                            new DebugCounterInfo[MAX_COUNTERS];", "modifier": "protected static", "type": "DebugCounterInfo[]", "declarator": "allCounters =\n                            new DebugCounterInfo[MAX_COUNTERS]", "var_name": "allCounters"}, {"original_string": "protected ConcurrentHashMap<String, ConcurrentHashMap<String, CounterIndexStore>>\n        moduleCounters = new ConcurrentHashMap<String,\n                                                ConcurrentHashMap<String,\n                                                                   CounterIndexStore>>();", "modifier": "protected", "type": "ConcurrentHashMap<String, ConcurrentHashMap<String, CounterIndexStore>>", "declarator": "moduleCounters = new ConcurrentHashMap<String,\n                                                ConcurrentHashMap<String,\n                                                                   CounterIndexStore>>()", "var_name": "moduleCounters"}, {"original_string": "protected Set<Integer> currentCounters = Collections.newSetFromMap(\n                                         new ConcurrentHashMap<Integer,Boolean>());", "modifier": "protected", "type": "Set<Integer>", "declarator": "currentCounters = Collections.newSetFromMap(\n                                         new ConcurrentHashMap<Integer,Boolean>())", "var_name": "currentCounters"}, {"original_string": "protected final ThreadLocal<LocalCounterInfo[]> threadlocalCounters =\n            new ThreadLocal<LocalCounterInfo[]>() {\n        @Override\n        protected LocalCounterInfo[] initialValue() {\n            return new LocalCounterInfo[MAX_COUNTERS];\n        }\n    };", "modifier": "protected final", "type": "ThreadLocal<LocalCounterInfo[]>", "declarator": "threadlocalCounters =\n            new ThreadLocal<LocalCounterInfo[]>() {\n        @Override\n        protected LocalCounterInfo[] initialValue() {\n            return new LocalCounterInfo[MAX_COUNTERS];\n        }\n    }", "var_name": "threadlocalCounters"}, {"original_string": "protected final ThreadLocal<Set<Integer>> threadlocalCurrentCounters =\n            new ThreadLocal<Set<Integer>>() {\n        @Override\n        protected Set<Integer> initialValue() {\n            return new HashSet<Integer>();\n        }\n    };", "modifier": "protected final", "type": "ThreadLocal<Set<Integer>>", "declarator": "threadlocalCurrentCounters =\n            new ThreadLocal<Set<Integer>>() {\n        @Override\n        protected Set<Integer> initialValue() {\n            return new HashSet<Integer>();\n        }\n    }", "var_name": "threadlocalCurrentCounters"}], "methods": [{"identifier": "registerCounter", "parameters": "(String moduleName, String counterHierarchy,\n                           String counterDescription, CounterType counterType,\n                           String... metaData)", "modifiers": "@Override public", "return": "IDebugCounter", "signature": "IDebugCounter registerCounter(String moduleName, String counterHierarchy,\n                           String counterDescription, CounterType counterType,\n                           String... metaData)", "full_signature": "@Override public IDebugCounter registerCounter(String moduleName, String counterHierarchy,\n                           String counterDescription, CounterType counterType,\n                           String... metaData)", "class_method_signature": "DebugCounter.registerCounter(String moduleName, String counterHierarchy,\n                           String counterDescription, CounterType counterType,\n                           String... metaData)", "testcase": false, "constructor": false}, {"identifier": "updateCounter", "parameters": "(int counterId, int incr, boolean flushNow)", "modifiers": "private", "return": "void", "signature": "void updateCounter(int counterId, int incr, boolean flushNow)", "full_signature": "private void updateCounter(int counterId, int incr, boolean flushNow)", "class_method_signature": "DebugCounter.updateCounter(int counterId, int incr, boolean flushNow)", "testcase": false, "constructor": false}, {"identifier": "flushCounters", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flushCounters()", "full_signature": "@Override public void flushCounters()", "class_method_signature": "DebugCounter.flushCounters()", "testcase": false, "constructor": false}, {"identifier": "resetCounterHierarchy", "parameters": "(String moduleName, String counterHierarchy)", "modifiers": "@Override public", "return": "void", "signature": "void resetCounterHierarchy(String moduleName, String counterHierarchy)", "full_signature": "@Override public void resetCounterHierarchy(String moduleName, String counterHierarchy)", "class_method_signature": "DebugCounter.resetCounterHierarchy(String moduleName, String counterHierarchy)", "testcase": false, "constructor": false}, {"identifier": "resetAllCounters", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetAllCounters()", "full_signature": "@Override public void resetAllCounters()", "class_method_signature": "DebugCounter.resetAllCounters()", "testcase": false, "constructor": false}, {"identifier": "resetAllModuleCounters", "parameters": "(String moduleName)", "modifiers": "@Override public", "return": "void", "signature": "void resetAllModuleCounters(String moduleName)", "full_signature": "@Override public void resetAllModuleCounters(String moduleName)", "class_method_signature": "DebugCounter.resetAllModuleCounters(String moduleName)", "testcase": false, "constructor": false}, {"identifier": "enableCtrOnDemand", "parameters": "(String moduleName, String counterHierarchy)", "modifiers": "@Override public", "return": "void", "signature": "void enableCtrOnDemand(String moduleName, String counterHierarchy)", "full_signature": "@Override public void enableCtrOnDemand(String moduleName, String counterHierarchy)", "class_method_signature": "DebugCounter.enableCtrOnDemand(String moduleName, String counterHierarchy)", "testcase": false, "constructor": false}, {"identifier": "disableCtrOnDemand", "parameters": "(String moduleName, String counterHierarchy)", "modifiers": "@Override public", "return": "void", "signature": "void disableCtrOnDemand(String moduleName, String counterHierarchy)", "full_signature": "@Override public void disableCtrOnDemand(String moduleName, String counterHierarchy)", "class_method_signature": "DebugCounter.disableCtrOnDemand(String moduleName, String counterHierarchy)", "testcase": false, "constructor": false}, {"identifier": "getCounterHierarchy", "parameters": "(String moduleName,\n                                                     String counterHierarchy)", "modifiers": "@Override public", "return": "List<DebugCounterInfo>", "signature": "List<DebugCounterInfo> getCounterHierarchy(String moduleName,\n                                                     String counterHierarchy)", "full_signature": "@Override public List<DebugCounterInfo> getCounterHierarchy(String moduleName,\n                                                     String counterHierarchy)", "class_method_signature": "DebugCounter.getCounterHierarchy(String moduleName,\n                                                     String counterHierarchy)", "testcase": false, "constructor": false}, {"identifier": "getAllCounterValues", "parameters": "()", "modifiers": "@Override public", "return": "List<DebugCounterInfo>", "signature": "List<DebugCounterInfo> getAllCounterValues()", "full_signature": "@Override public List<DebugCounterInfo> getAllCounterValues()", "class_method_signature": "DebugCounter.getAllCounterValues()", "testcase": false, "constructor": false}, {"identifier": "getModuleCounterValues", "parameters": "(String moduleName)", "modifiers": "@Override public", "return": "List<DebugCounterInfo>", "signature": "List<DebugCounterInfo> getModuleCounterValues(String moduleName)", "full_signature": "@Override public List<DebugCounterInfo> getModuleCounterValues(String moduleName)", "class_method_signature": "DebugCounter.getModuleCounterValues(String moduleName)", "testcase": false, "constructor": false}, {"identifier": "containsModuleCounterHierarchy", "parameters": "(String moduleName,\n                                                 String counterHierarchy)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsModuleCounterHierarchy(String moduleName,\n                                                 String counterHierarchy)", "full_signature": "@Override public boolean containsModuleCounterHierarchy(String moduleName,\n                                                 String counterHierarchy)", "class_method_signature": "DebugCounter.containsModuleCounterHierarchy(String moduleName,\n                                                 String counterHierarchy)", "testcase": false, "constructor": false}, {"identifier": "containsModuleName", "parameters": "(String moduleName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsModuleName(String moduleName)", "full_signature": "@Override public boolean containsModuleName(String moduleName)", "class_method_signature": "DebugCounter.containsModuleName(String moduleName)", "testcase": false, "constructor": false}, {"identifier": "getModuleList", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getModuleList()", "full_signature": "@Override public List<String> getModuleList()", "class_method_signature": "DebugCounter.getModuleList()", "testcase": false, "constructor": false}, {"identifier": "getModuleCounterList", "parameters": "(String moduleName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getModuleCounterList(String moduleName)", "full_signature": "@Override public List<String> getModuleCounterList(String moduleName)", "class_method_signature": "DebugCounter.getModuleCounterList(String moduleName)", "testcase": false, "constructor": false}, {"identifier": "getCounterId", "parameters": "(String moduleName, String counterHierarchy)", "modifiers": "protected", "return": "RetCtrInfo", "signature": "RetCtrInfo getCounterId(String moduleName, String counterHierarchy)", "full_signature": "protected RetCtrInfo getCounterId(String moduleName, String counterHierarchy)", "class_method_signature": "DebugCounter.getCounterId(String moduleName, String counterHierarchy)", "testcase": false, "constructor": false}, {"identifier": "addToModuleCounterHierarchy", "parameters": "(String moduleName, int counterId,\n                                            RetCtrInfo rci)", "modifiers": "protected", "return": "void", "signature": "void addToModuleCounterHierarchy(String moduleName, int counterId,\n                                            RetCtrInfo rci)", "full_signature": "protected void addToModuleCounterHierarchy(String moduleName, int counterId,\n                                            RetCtrInfo rci)", "class_method_signature": "DebugCounter.addToModuleCounterHierarchy(String moduleName, int counterId,\n                                            RetCtrInfo rci)", "testcase": false, "constructor": false}, {"identifier": "getHierarchyBelow", "parameters": "(String moduleName, RetCtrInfo rci)", "modifiers": "protected", "return": "ArrayList<Integer>", "signature": "ArrayList<Integer> getHierarchyBelow(String moduleName, RetCtrInfo rci)", "full_signature": "protected ArrayList<Integer> getHierarchyBelow(String moduleName, RetCtrInfo rci)", "class_method_signature": "DebugCounter.getHierarchyBelow(String moduleName, RetCtrInfo rci)", "testcase": false, "constructor": false}, {"identifier": "getIdsAtLevel", "parameters": "(Map<String, CounterIndexStore> hcy,\n                                ArrayList<Integer> retval, int level)", "modifiers": "protected", "return": "void", "signature": "void getIdsAtLevel(Map<String, CounterIndexStore> hcy,\n                                ArrayList<Integer> retval, int level)", "full_signature": "protected void getIdsAtLevel(Map<String, CounterIndexStore> hcy,\n                                ArrayList<Integer> retval, int level)", "class_method_signature": "DebugCounter.getIdsAtLevel(Map<String, CounterIndexStore> hcy,\n                                ArrayList<Integer> retval, int level)", "testcase": false, "constructor": false}, {"identifier": "printAllCounterIds", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void printAllCounterIds()", "full_signature": "protected void printAllCounterIds()", "class_method_signature": "DebugCounter.printAllCounterIds()", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "DebugCounter.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "DebugCounter.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "DebugCounter.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "DebugCounter.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "DebugCounter.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}], "file": "floodlight-master/src/main/java/net/floodlightcontroller/debugcounter/DebugCounter.java"}, "focal_method": {"identifier": "resetCounterHierarchy", "parameters": "(String moduleName, String counterHierarchy)", "modifiers": "@Override public", "return": "void", "body": "@Override\n   public void resetCounterHierarchy(String moduleName, String counterHierarchy) {\n       RetCtrInfo rci = getCounterId(moduleName, counterHierarchy);\n       if (!rci.allLevelsFound) {\n           String missing = rci.levels[rci.foundUptoLevel];\n           log.error(\"Cannot reset counter hierarchy - missing counter {}\", missing);\n           return;\n       }\n       // reset at this level\n       allCounters[rci.ctrIds[rci.foundUptoLevel-1]].cvalue.set(0);\n       // reset all levels below\n       ArrayList<Integer> resetIds = getHierarchyBelow(moduleName, rci);\n       for (int index : resetIds) {\n           allCounters[index].cvalue.set(0);\n       }\n   }", "signature": "void resetCounterHierarchy(String moduleName, String counterHierarchy)", "full_signature": "@Override public void resetCounterHierarchy(String moduleName, String counterHierarchy)", "class_method_signature": "DebugCounter.resetCounterHierarchy(String moduleName, String counterHierarchy)", "testcase": false, "constructor": false, "invocations": ["getCounterId", "error", "set", "getHierarchyBelow", "set"]}, "repository": {"repo_id": 14173210, "url": "https://github.com/xiaochengzhong/floodlightUI", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 23102, "license": "licensed"}}