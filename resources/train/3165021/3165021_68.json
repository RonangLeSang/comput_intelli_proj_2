{"test_class": {"identifier": "ValidationManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate ValidationRulesContainer container;", "modifier": "@Mock\n\tprivate", "type": "ValidationRulesContainer", "declarator": "container", "var_name": "container"}, {"original_string": "@InjectMocks\n\tprivate ValidationManager validationManager = new ValidationManager();", "modifier": "@InjectMocks\n\tprivate", "type": "ValidationManager", "declarator": "validationManager = new ValidationManager()", "var_name": "validationManager"}], "file": "validation/src/test/java/org/springjutsu/validation/ValidationManagerTest.java"}, "test_case": {"identifier": "testConvertRuleArgument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConvertRuleArgument() {\n\t\tObject converted = validationManager.convertRuleArgument(\"5\", new MaxLengthRuleExecutor());\n\t\tassertEquals(5, converted);\n\t}", "signature": "void testConvertRuleArgument()", "full_signature": "@Test public void testConvertRuleArgument()", "class_method_signature": "ValidationManagerTest.testConvertRuleArgument()", "testcase": true, "constructor": false, "invocations": ["convertRuleArgument", "assertEquals"]}, "focal_class": {"identifier": "ValidationManager", "superclass": "extends CustomValidatorBean", "interfaces": "", "fields": [{"original_string": "protected static Log log = LogFactory.getLog(ValidationManager.class);", "modifier": "protected static", "type": "Log", "declarator": "log = LogFactory.getLog(ValidationManager.class)", "var_name": "log"}, {"original_string": "@Autowired\n\tprotected ValidationRulesContainer rulesContainer;", "modifier": "@Autowired\n\tprotected", "type": "ValidationRulesContainer", "declarator": "rulesContainer", "var_name": "rulesContainer"}, {"original_string": "@Autowired\n\tprotected RuleExecutorContainer ruleExecutorContainer;", "modifier": "@Autowired\n\tprotected", "type": "RuleExecutorContainer", "declarator": "ruleExecutorContainer", "var_name": "ruleExecutorContainer"}, {"original_string": "@Autowired\n\tprotected ValidationContextHandlerContainer contextHandlerContainer;", "modifier": "@Autowired\n\tprotected", "type": "ValidationContextHandlerContainer", "declarator": "contextHandlerContainer", "var_name": "contextHandlerContainer"}, {"original_string": "@Autowired\n\tprotected ValidationErrorMessageHandler validationErrorMessageHandler;", "modifier": "@Autowired\n\tprotected", "type": "ValidationErrorMessageHandler", "declarator": "validationErrorMessageHandler", "var_name": "validationErrorMessageHandler"}, {"original_string": "@Autowired(required=false)\n\tprotected ConversionService conversionService;", "modifier": "@Autowired(required=false)\n\tprotected", "type": "ConversionService", "declarator": "conversionService", "var_name": "conversionService"}, {"original_string": "protected TypeConverter typeConverter;", "modifier": "protected", "type": "TypeConverter", "declarator": "typeConverter", "var_name": "typeConverter"}], "methods": [{"identifier": "supports", "parameters": "(Class<?> clazz)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(Class<?> clazz)", "full_signature": "@Override public boolean supports(Class<?> clazz)", "class_method_signature": "ValidationManager.supports(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object target)", "modifiers": "public", "return": "Errors", "signature": "Errors validate(Object target)", "full_signature": "public Errors validate(Object target)", "class_method_signature": "ValidationManager.validate(Object target)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object target, Object... validationHints)", "modifiers": "public", "return": "Errors", "signature": "Errors validate(Object target, Object... validationHints)", "full_signature": "public Errors validate(Object target, Object... validationHints)", "class_method_signature": "ValidationManager.validate(Object target, Object... validationHints)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object target, Errors errors)", "modifiers": "@Override public", "return": "void", "signature": "void validate(Object target, Errors errors)", "full_signature": "@Override public void validate(Object target, Errors errors)", "class_method_signature": "ValidationManager.validate(Object target, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object target, Errors errors, Object... validationHints)", "modifiers": "@Override public", "return": "void", "signature": "void validate(Object target, Errors errors, Object... validationHints)", "full_signature": "@Override public void validate(Object target, Errors errors, Object... validationHints)", "class_method_signature": "ValidationManager.validate(Object target, Errors errors, Object... validationHints)", "testcase": false, "constructor": false}, {"identifier": "doValidate", "parameters": "(ValidationEvaluationContext context)", "modifiers": "protected", "return": "void", "signature": "void doValidate(ValidationEvaluationContext context)", "full_signature": "protected void doValidate(ValidationEvaluationContext context)", "class_method_signature": "ValidationManager.doValidate(ValidationEvaluationContext context)", "testcase": false, "constructor": false}, {"identifier": "callRules", "parameters": "(ValidationEvaluationContext context, RuleHolder ruleHolder)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void callRules(ValidationEvaluationContext context, RuleHolder ruleHolder)", "full_signature": "@SuppressWarnings(\"unchecked\") protected void callRules(ValidationEvaluationContext context, RuleHolder ruleHolder)", "class_method_signature": "ValidationManager.callRules(ValidationEvaluationContext context, RuleHolder ruleHolder)", "testcase": false, "constructor": false}, {"identifier": "handleValidationRule", "parameters": "(ValidationEvaluationContext context, ValidationRule rule)", "modifiers": "protected", "return": "void", "signature": "void handleValidationRule(ValidationEvaluationContext context, ValidationRule rule)", "full_signature": "protected void handleValidationRule(ValidationEvaluationContext context, ValidationRule rule)", "class_method_signature": "ValidationManager.handleValidationRule(ValidationEvaluationContext context, ValidationRule rule)", "testcase": false, "constructor": false}, {"identifier": "resolveCollectionPathReplacements", "parameters": "(ValidationEvaluationContext context, ValidationRule rule)", "modifiers": "@SuppressWarnings(\"rawtypes\") protected", "return": "SingletonMap", "signature": "SingletonMap resolveCollectionPathReplacements(ValidationEvaluationContext context, ValidationRule rule)", "full_signature": "@SuppressWarnings(\"rawtypes\") protected SingletonMap resolveCollectionPathReplacements(ValidationEvaluationContext context, ValidationRule rule)", "class_method_signature": "ValidationManager.resolveCollectionPathReplacements(ValidationEvaluationContext context, ValidationRule rule)", "testcase": false, "constructor": false}, {"identifier": "passes", "parameters": "(ValidationRule rule, ValidationEvaluationContext context)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) protected", "return": "boolean", "signature": "boolean passes(ValidationRule rule, ValidationEvaluationContext context)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) protected boolean passes(ValidationRule rule, ValidationEvaluationContext context)", "class_method_signature": "ValidationManager.passes(ValidationRule rule, ValidationEvaluationContext context)", "testcase": false, "constructor": false}, {"identifier": "convertRuleArgument", "parameters": "(Object ruleArg, RuleExecutor executor)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "Object", "signature": "Object convertRuleArgument(Object ruleArg, RuleExecutor executor)", "full_signature": "@SuppressWarnings(\"rawtypes\") public Object convertRuleArgument(Object ruleArg, RuleExecutor executor)", "class_method_signature": "ValidationManager.convertRuleArgument(Object ruleArg, RuleExecutor executor)", "testcase": false, "constructor": false}, {"identifier": "getTypeConverter", "parameters": "()", "modifiers": "protected", "return": "TypeConverter", "signature": "TypeConverter getTypeConverter()", "full_signature": "protected TypeConverter getTypeConverter()", "class_method_signature": "ValidationManager.getTypeConverter()", "testcase": false, "constructor": false}], "file": "validation/src/main/java/org/springjutsu/validation/ValidationManager.java"}, "focal_method": {"identifier": "convertRuleArgument", "parameters": "(Object ruleArg, RuleExecutor executor)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "Object", "body": "@SuppressWarnings(\"rawtypes\")\n\tpublic Object convertRuleArgument(Object ruleArg, RuleExecutor executor) {\n\t\tObject convertedRuleArg = ruleArg;\n\t\tif (ruleArg != null) {\n\t\t\tClass<?> unwrappedExecutorClass = AopUtils.getTargetClass(executor);\n\t\t\tClass<?>[] parameterizedTypes = GenericTypeResolver.resolveTypeArguments(unwrappedExecutorClass, RuleExecutor.class);\n\t\t\tif (parameterizedTypes != null) {\n\t\t\t\tconvertedRuleArg = getTypeConverter().convertIfNecessary(ruleArg, parameterizedTypes[1]);\n\t\t\t}\n\t\t}\n\t\treturn convertedRuleArg;\n\t}", "signature": "Object convertRuleArgument(Object ruleArg, RuleExecutor executor)", "full_signature": "@SuppressWarnings(\"rawtypes\") public Object convertRuleArgument(Object ruleArg, RuleExecutor executor)", "class_method_signature": "ValidationManager.convertRuleArgument(Object ruleArg, RuleExecutor executor)", "testcase": false, "constructor": false, "invocations": ["getTargetClass", "resolveTypeArguments", "convertIfNecessary", "getTypeConverter"]}, "repository": {"repo_id": 3165021, "url": "https://github.com/SpringJutsu/Springjutsu-Validation", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 571, "license": "licensed"}}