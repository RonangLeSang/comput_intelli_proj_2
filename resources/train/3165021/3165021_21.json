{"test_class": {"identifier": "RequestUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "validation/src/test/java/org/springjutsu/validation/util/RequestUtilsTest.java"}, "test_case": {"identifier": "testReplacePathVariablesFromModelWhenNotInUriVariables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReplacePathVariablesFromModelWhenNotInUriVariables() {\n\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\tmodel.put(\"id\", 4);\n\t\tMap<String, Object> uriTemplateVariables = new HashMap<String, Object>();\n\t\tHttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n\t\tMockito.when(request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE)).thenReturn(uriTemplateVariables);\n\t\tString replaced = RequestUtils.replaceRestPathVariables(\"/foo/{id}\", model, request);\n\t\tassertEquals(\"/foo/4\", replaced);\n\t}", "signature": "void testReplacePathVariablesFromModelWhenNotInUriVariables()", "full_signature": "@Test public void testReplacePathVariablesFromModelWhenNotInUriVariables()", "class_method_signature": "RequestUtilsTest.testReplacePathVariablesFromModelWhenNotInUriVariables()", "testcase": true, "constructor": false, "invocations": ["put", "mock", "thenReturn", "when", "getAttribute", "replaceRestPathVariables", "assertEquals"]}, "focal_class": {"identifier": "RequestUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATH_VAR_PATTERN = \"\\\\{[^\\\\}]+\\\\}\";", "modifier": "public static final", "type": "String", "declarator": "PATH_VAR_PATTERN = \"\\\\{[^\\\\}]+\\\\}\"", "var_name": "PATH_VAR_PATTERN"}], "methods": [{"identifier": "replaceRestPathVariables", "parameters": "(String viewName, Map<String, Object> model, HttpServletRequest request)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "String", "signature": "String replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "full_signature": "@SuppressWarnings(\"unchecked\") public static String replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "class_method_signature": "RequestUtils.replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "findFirstMatchingRestPath", "parameters": "(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "full_signature": "public static String findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "class_method_signature": "RequestUtils.findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getControllerRequestPaths", "parameters": "(HandlerMethod handler)", "modifiers": "public static", "return": "String[]", "signature": "String[] getControllerRequestPaths(HandlerMethod handler)", "full_signature": "public static String[] getControllerRequestPaths(HandlerMethod handler)", "class_method_signature": "RequestUtils.getControllerRequestPaths(HandlerMethod handler)", "testcase": false, "constructor": false}, {"identifier": "getCurrentRequest", "parameters": "()", "modifiers": "public static", "return": "HttpServletRequest", "signature": "HttpServletRequest getCurrentRequest()", "full_signature": "public static HttpServletRequest getCurrentRequest()", "class_method_signature": "RequestUtils.getCurrentRequest()", "testcase": false, "constructor": false}, {"identifier": "getPathWithinHandlerMapping", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getPathWithinHandlerMapping()", "full_signature": "public static String getPathWithinHandlerMapping()", "class_method_signature": "RequestUtils.getPathWithinHandlerMapping()", "testcase": false, "constructor": false}, {"identifier": "removeLeadingAndTrailingSlashes", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String removeLeadingAndTrailingSlashes(String path)", "full_signature": "public static String removeLeadingAndTrailingSlashes(String path)", "class_method_signature": "RequestUtils.removeLeadingAndTrailingSlashes(String path)", "testcase": false, "constructor": false}], "file": "validation/src/main/java/org/springjutsu/validation/util/RequestUtils.java"}, "focal_method": {"identifier": "replaceRestPathVariables", "parameters": "(String viewName, Map<String, Object> model, HttpServletRequest request)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "String", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic static String replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request) {\n\t\tString newViewName = viewName;\n\t\tMatcher matcher = Pattern.compile(PATH_VAR_PATTERN).matcher(newViewName);\n\t\twhile (matcher.find()) {\n\t\t\tString match = matcher.group();\n\t\t\tString varName = match.substring(1, match.length() - 1);\n\t\t\tString baseVarName = null;\n\t\t\tString subPath = null;\n\t\t\tif (varName.contains(\".\")) {\n\t\t\t\tbaseVarName = varName.substring(0, varName.indexOf(\".\"));\n\t\t\t\tsubPath = varName.substring(varName.indexOf(\".\") + 1);\n\t\t\t} else {\n\t\t\t\tbaseVarName = varName;\n\t\t\t}\n\t\t\tMap<String, String> uriTemplateVariables = \n\t\t\t\t(Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);\n\t\t\tif (uriTemplateVariables != null && uriTemplateVariables.containsKey(varName)) {\n\t\t\t\tnewViewName = newViewName.replace(match, String.valueOf(uriTemplateVariables.get(varName)));\n\t\t\t} else {\n\t\t\t\tObject resolvedObject = model.get(baseVarName);\n\t\t\t\tif (resolvedObject == null) {\n\t\t\t\t\tthrow new IllegalArgumentException(varName + \" is not present in model.\");\n\t\t\t\t}\n\t\t\t\tif (subPath != null) {\n\t\t\t\t\tBeanWrapperImpl beanWrapper = new BeanWrapperImpl(resolvedObject);\n\t\t\t\t\tresolvedObject = beanWrapper.getPropertyValue(subPath);\n\t\t\t\t}\n\t\t\t\tif (resolvedObject == null) {\n\t\t\t\t\tthrow new IllegalArgumentException(varName + \" is not present in model.\");\n\t\t\t\t}\n\t\t\t\tnewViewName = newViewName.replace(match, String.valueOf(resolvedObject));\n\t\t\t}\n\t\t\tmatcher.reset(newViewName);\n\t\t}\n\t\treturn newViewName;\n\t}", "signature": "String replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "full_signature": "@SuppressWarnings(\"unchecked\") public static String replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "class_method_signature": "RequestUtils.replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["matcher", "compile", "find", "group", "substring", "length", "contains", "substring", "indexOf", "substring", "indexOf", "getAttribute", "containsKey", "replace", "valueOf", "get", "get", "getPropertyValue", "replace", "valueOf", "reset"]}, "repository": {"repo_id": 3165021, "url": "https://github.com/SpringJutsu/Springjutsu-Validation", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 571, "license": "licensed"}}