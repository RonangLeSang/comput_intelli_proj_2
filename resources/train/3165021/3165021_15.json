{"test_class": {"identifier": "RequestUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "validation/src/test/java/org/springjutsu/validation/util/RequestUtilsTest.java"}, "test_case": {"identifier": "testFindFirstMatchingRestPathWithNestedAntPathWithMultipleControllerPaths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindFirstMatchingRestPathWithNestedAntPathWithMultipleControllerPaths() {\n\t\tString[] candidateViewNames = new String[]{\"/financial/holdings/edit\",\"/**/new\",\"/financial/holdings/new\"};\n\t\tString[] controllerPaths = new String[]{\"/hamburger\", \"/account\"};\n\t\tHttpServletRequest request = mockRequestWithPattern(\"/account/financial/holdings/new\");\n\t\tString matchingRestPath = RequestUtils.findFirstMatchingRestPath(candidateViewNames, controllerPaths, request);\n\t\tassertEquals(\"/**/new\", matchingRestPath);\n\t}", "signature": "void testFindFirstMatchingRestPathWithNestedAntPathWithMultipleControllerPaths()", "full_signature": "@Test public void testFindFirstMatchingRestPathWithNestedAntPathWithMultipleControllerPaths()", "class_method_signature": "RequestUtilsTest.testFindFirstMatchingRestPathWithNestedAntPathWithMultipleControllerPaths()", "testcase": true, "constructor": false, "invocations": ["mockRequestWithPattern", "findFirstMatchingRestPath", "assertEquals"]}, "focal_class": {"identifier": "RequestUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATH_VAR_PATTERN = \"\\\\{[^\\\\}]+\\\\}\";", "modifier": "public static final", "type": "String", "declarator": "PATH_VAR_PATTERN = \"\\\\{[^\\\\}]+\\\\}\"", "var_name": "PATH_VAR_PATTERN"}], "methods": [{"identifier": "replaceRestPathVariables", "parameters": "(String viewName, Map<String, Object> model, HttpServletRequest request)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "String", "signature": "String replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "full_signature": "@SuppressWarnings(\"unchecked\") public static String replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "class_method_signature": "RequestUtils.replaceRestPathVariables(String viewName, Map<String, Object> model, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "findFirstMatchingRestPath", "parameters": "(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "full_signature": "public static String findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "class_method_signature": "RequestUtils.findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getControllerRequestPaths", "parameters": "(HandlerMethod handler)", "modifiers": "public static", "return": "String[]", "signature": "String[] getControllerRequestPaths(HandlerMethod handler)", "full_signature": "public static String[] getControllerRequestPaths(HandlerMethod handler)", "class_method_signature": "RequestUtils.getControllerRequestPaths(HandlerMethod handler)", "testcase": false, "constructor": false}, {"identifier": "getCurrentRequest", "parameters": "()", "modifiers": "public static", "return": "HttpServletRequest", "signature": "HttpServletRequest getCurrentRequest()", "full_signature": "public static HttpServletRequest getCurrentRequest()", "class_method_signature": "RequestUtils.getCurrentRequest()", "testcase": false, "constructor": false}, {"identifier": "getPathWithinHandlerMapping", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getPathWithinHandlerMapping()", "full_signature": "public static String getPathWithinHandlerMapping()", "class_method_signature": "RequestUtils.getPathWithinHandlerMapping()", "testcase": false, "constructor": false}, {"identifier": "removeLeadingAndTrailingSlashes", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String removeLeadingAndTrailingSlashes(String path)", "full_signature": "public static String removeLeadingAndTrailingSlashes(String path)", "class_method_signature": "RequestUtils.removeLeadingAndTrailingSlashes(String path)", "testcase": false, "constructor": false}], "file": "validation/src/main/java/org/springjutsu/validation/util/RequestUtils.java"}, "focal_method": {"identifier": "findFirstMatchingRestPath", "parameters": "(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "modifiers": "public static", "return": "String", "body": "public static String findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request) {\n\t\t\n\t\tString pathWithinHandlerMapping = removeLeadingAndTrailingSlashes(\n\t\t\t(String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n\t\t\n\t\tAntPathMatcher antPathMatcher = new AntPathMatcher();\n\t\tfor (String candidatePath : candidateViewNames) {\n\t\t\tif ((controllerPaths == null || candidatePath.startsWith(\"/\")) \n\t\t\t\t\t&& antPathMatcher.match(removeLeadingAndTrailingSlashes(candidatePath), pathWithinHandlerMapping)) {\n\t\t\t\treturn candidatePath;\n\t\t\t} else if (controllerPaths != null) {\n\t\t\t\tfor (String controllerPath : controllerPaths) {\n\t\t\t\t\tString testPath = (controllerPath + \"/\" + candidatePath).replace(\"//\", \"/\");\n\t\t\t\t\tif (antPathMatcher.match(removeLeadingAndTrailingSlashes(testPath), pathWithinHandlerMapping)) {\n\t\t\t\t\t\treturn candidatePath;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "signature": "String findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "full_signature": "public static String findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "class_method_signature": "RequestUtils.findFirstMatchingRestPath(String[] candidateViewNames, \n\t\t\tString[] controllerPaths, HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["removeLeadingAndTrailingSlashes", "getAttribute", "startsWith", "match", "removeLeadingAndTrailingSlashes", "replace", "match", "removeLeadingAndTrailingSlashes"]}, "repository": {"repo_id": 3165021, "url": "https://github.com/SpringJutsu/Springjutsu-Validation", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 571, "license": "licensed"}}