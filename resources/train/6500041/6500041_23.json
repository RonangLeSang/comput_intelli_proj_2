{"test_class": {"identifier": "TestFreebaseRDFMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FreebaseRDFMapper mapper;", "modifier": "private", "type": "FreebaseRDFMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}], "file": "bakemono/src/test/java/com/ontology2/bakemono/freebasePrefilter/TestFreebaseRDFMapper.java"}, "test_case": {"identifier": "ignoreNotableForDisplayNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ignoreNotableForDisplayNames() throws IOException,\n    InterruptedException {\n        String ordinaryTriple = \"ns:rock.me.amadeus\\tns:common.notable_for.display_name\\t\\\"Musikale Tracke\\\"@en\";\n        mapper.map(new LongWritable(1L), new Text(ordinaryTriple), context);\n        verify(context).getCounter(FreebasePrefilterCounter.IGNORED);\n        verifyNoMoreInteractions(context);\n    }", "signature": "void ignoreNotableForDisplayNames()", "full_signature": "@Test public void ignoreNotableForDisplayNames()", "class_method_signature": "TestFreebaseRDFMapper.ignoreNotableForDisplayNames()", "testcase": true, "constructor": false, "invocations": ["map", "getCounter", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "FreebaseRDFMapper", "superclass": "extends Mapper<LongWritable,Text,Text,Text>", "interfaces": "", "fields": [{"original_string": "private static org.apache.commons.logging.Log logger = LogFactory.getLog(FreebaseRDFMapper.class);", "modifier": "private static", "type": "org.apache.commons.logging.Log", "declarator": "logger = LogFactory.getLog(FreebaseRDFMapper.class)", "var_name": "logger"}, {"original_string": "ImmutableMap.Builder<String,String> prefixBuilder=new ImmutableMap.Builder<String,String>();", "modifier": "", "type": "ImmutableMap.Builder<String,String>", "declarator": "prefixBuilder=new ImmutableMap.Builder<String,String>()", "var_name": "prefixBuilder"}, {"original_string": "ImmutableMap<String,String> prefixMap = ImmutableMap.of();", "modifier": "", "type": "ImmutableMap<String,String>", "declarator": "prefixMap = ImmutableMap.of()", "var_name": "prefixMap"}, {"original_string": "Codec<PrimitiveTriple> ptCodec=new PrimitiveTripleCodec();", "modifier": "", "type": "Codec<PrimitiveTriple>", "declarator": "ptCodec=new PrimitiveTripleCodec()", "var_name": "ptCodec"}, {"original_string": "private Predicate<PrimitiveTriple> tripleFilter;", "modifier": "private", "type": "Predicate<PrimitiveTriple>", "declarator": "tripleFilter", "var_name": "tripleFilter"}, {"original_string": "private Function<PrimitiveTriple, PrimitiveTriple> rewritingFunction;", "modifier": "private", "type": "Function<PrimitiveTriple, PrimitiveTriple>", "declarator": "rewritingFunction", "var_name": "rewritingFunction"}, {"original_string": "final static Splitter lineSplitter = Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings().limit(3);", "modifier": "final static", "type": "Splitter", "declarator": "lineSplitter = Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings().limit(3)", "var_name": "lineSplitter"}, {"original_string": "final static Splitter iriSplitter = Splitter.on(\":\").limit(2);", "modifier": "final static", "type": "Splitter", "declarator": "iriSplitter = Splitter.on(\":\").limit(2)", "var_name": "iriSplitter"}], "methods": [{"identifier": "declarePrefix", "parameters": "(String obj)", "modifiers": "public", "return": "void", "signature": "void declarePrefix(String obj)", "full_signature": "public void declarePrefix(String obj)", "class_method_signature": "FreebaseRDFMapper.declarePrefix(String obj)", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "(Context job)", "modifiers": "@Override public", "return": "void", "signature": "void setup(Context job)", "full_signature": "@Override public void setup(Context job)", "class_method_signature": "FreebaseRDFMapper.setup(Context job)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(LongWritable k, Text v,Context c)", "modifiers": "@Override public", "return": "void", "signature": "void map(LongWritable k, Text v,Context c)", "full_signature": "@Override public void map(LongWritable k, Text v,Context c)", "class_method_signature": "FreebaseRDFMapper.map(LongWritable k, Text v,Context c)", "testcase": false, "constructor": false}, {"identifier": "incrementCounter", "parameters": "(Context context,Enum <?> counterId,long amount)", "modifiers": "private", "return": "void", "signature": "void incrementCounter(Context context,Enum <?> counterId,long amount)", "full_signature": "private void incrementCounter(Context context,Enum <?> counterId,long amount)", "class_method_signature": "FreebaseRDFMapper.incrementCounter(Context context,Enum <?> counterId,long amount)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Context out,\n            PrimitiveTriple primitiveTriple)", "modifiers": "private", "return": "void", "signature": "void accept(Context out,\n            PrimitiveTriple primitiveTriple)", "full_signature": "private void accept(Context out,\n            PrimitiveTriple primitiveTriple)", "class_method_signature": "FreebaseRDFMapper.accept(Context out,\n            PrimitiveTriple primitiveTriple)", "testcase": false, "constructor": false}, {"identifier": "expandTripleParts", "parameters": "(String line)", "modifiers": "", "return": "List<String>", "signature": "List<String> expandTripleParts(String line)", "full_signature": " List<String> expandTripleParts(String line)", "class_method_signature": "FreebaseRDFMapper.expandTripleParts(String line)", "testcase": false, "constructor": false}, {"identifier": "splitTriple", "parameters": "(String obj)", "modifiers": "static", "return": "List<String>", "signature": "List<String> splitTriple(String obj)", "full_signature": "static List<String> splitTriple(String obj)", "class_method_signature": "FreebaseRDFMapper.splitTriple(String obj)", "testcase": false, "constructor": false}, {"identifier": "expandIRINode", "parameters": "(String string)", "modifiers": "public", "return": "String", "signature": "String expandIRINode(String string)", "full_signature": "public String expandIRINode(String string)", "class_method_signature": "FreebaseRDFMapper.expandIRINode(String string)", "testcase": false, "constructor": false}, {"identifier": "expandAnyNode", "parameters": "(String string)", "modifiers": "public", "return": "String", "signature": "String expandAnyNode(String string)", "full_signature": "public String expandAnyNode(String string)", "class_method_signature": "FreebaseRDFMapper.expandAnyNode(String string)", "testcase": false, "constructor": false}, {"identifier": "rewriteNode", "parameters": "(String uri)", "modifiers": "public", "return": "String", "signature": "String rewriteNode(String uri)", "full_signature": "public String rewriteNode(String uri)", "class_method_signature": "FreebaseRDFMapper.rewriteNode(String uri)", "testcase": false, "constructor": false}, {"identifier": "splitPrefixDeclaration", "parameters": "(String obj)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> splitPrefixDeclaration(String obj)", "full_signature": "public static List<String> splitPrefixDeclaration(String obj)", "class_method_signature": "FreebaseRDFMapper.splitPrefixDeclaration(String obj)", "testcase": false, "constructor": false}, {"identifier": "acceptTheseTriples", "parameters": "()", "modifiers": "public static", "return": "Predicate <PrimitiveTriple>", "signature": "Predicate <PrimitiveTriple> acceptTheseTriples()", "full_signature": "public static Predicate <PrimitiveTriple> acceptTheseTriples()", "class_method_signature": "FreebaseRDFMapper.acceptTheseTriples()", "testcase": false, "constructor": false}, {"identifier": "tripleRewritingFunction", "parameters": "()", "modifiers": "public static", "return": "Function<PrimitiveTriple, PrimitiveTriple>", "signature": "Function<PrimitiveTriple, PrimitiveTriple> tripleRewritingFunction()", "full_signature": "public static Function<PrimitiveTriple, PrimitiveTriple> tripleRewritingFunction()", "class_method_signature": "FreebaseRDFMapper.tripleRewritingFunction()", "testcase": false, "constructor": false}], "file": "bakemono/src/main/java/com/ontology2/bakemono/freebasePrefilter/FreebaseRDFMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(LongWritable k, Text v,Context c)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void map(LongWritable k, Text v,Context c) throws IOException, InterruptedException {\n\n        String line=v.toString();\n        if (line.startsWith(\"@prefix\")) {\n            incrementCounter(c,FreebasePrefilterCounter.PREFIX_DECL,1L);\n            return;\n        }\n\n        try {\n            List<String> parts = expandTripleParts(line);\n            line.getBytes();\n            PrimitiveTriple triple=new PrimitiveTriple(parts.get(0),parts.get(1),parts.get(2));\n\n\n            if(tripleFilter.apply(triple)) {\n                triple=rewritingFunction.apply(triple);\n                accept(c,triple);\n                incrementCounter(c,FreebasePrefilterCounter.ACCEPTED,1L);\n            } else {\n                incrementCounter(c,FreebasePrefilterCounter.IGNORED,1L);\n            }\n\n        } catch(InvalidNodeException ex) {\n            incrementCounter(c,FreebasePrefilterCounter.IGNORED,1L);\n            logger.warn(\"Invalid triple: \"+line);\n        }\n\n        return;\t\t\t\t\n    }", "signature": "void map(LongWritable k, Text v,Context c)", "full_signature": "@Override public void map(LongWritable k, Text v,Context c)", "class_method_signature": "FreebaseRDFMapper.map(LongWritable k, Text v,Context c)", "testcase": false, "constructor": false, "invocations": ["toString", "startsWith", "incrementCounter", "expandTripleParts", "getBytes", "get", "get", "get", "apply", "apply", "accept", "incrementCounter", "incrementCounter", "incrementCounter", "warn"]}, "repository": {"repo_id": 6500041, "url": "https://github.com/paulhoule/infovore", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 147, "size": 4385, "license": "licensed"}}