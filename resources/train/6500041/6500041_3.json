{"test_class": {"identifier": "TestPrimitiveTripleCodec", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PrimitiveTripleCodec codec;", "modifier": "private", "type": "PrimitiveTripleCodec", "declarator": "codec", "var_name": "codec"}, {"original_string": "final static String X=\"<http://example.com/X>\";", "modifier": "final static", "type": "String", "declarator": "X=\"<http://example.com/X>\"", "var_name": "X"}, {"original_string": "final static String Y=\"<http://example.com/Y>\";", "modifier": "final static", "type": "String", "declarator": "Y=\"<http://example.com/Y>\"", "var_name": "Y"}, {"original_string": "final static String Z=\"<http://example.com/Z>\";", "modifier": "final static", "type": "String", "declarator": "Z=\"<http://example.com/Z>\"", "var_name": "Z"}, {"original_string": "final static String L1=\"88712\";", "modifier": "final static", "type": "String", "declarator": "L1=\"88712\"", "var_name": "L1"}, {"original_string": "final static String L2=\"\\\"all is well that ends well\\\"\";", "modifier": "final static", "type": "String", "declarator": "L2=\"\\\"all is well that ends well\\\"\"", "var_name": "L2"}], "file": "bakemono/src/test/java/com/ontology2/bakemono/primitiveTriples/TestPrimitiveTripleCodec.java"}, "test_case": {"identifier": "parsesALiteralTriple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parsesALiteralTriple() {\n        String in=X+\"\\t\"+Y+\"\\t \"+L1+\"\\t.\";\n        PrimitiveTriple out=codec.decode(in);\n        assertEquals(X,out.getSubject());\n        assertEquals(Y,out.getPredicate());\n        assertEquals(L1,out.getObject());\n    }", "signature": "void parsesALiteralTriple()", "full_signature": "@Test public void parsesALiteralTriple()", "class_method_signature": "TestPrimitiveTripleCodec.parsesALiteralTriple()", "testcase": true, "constructor": false, "invocations": ["decode", "assertEquals", "getSubject", "assertEquals", "getPredicate", "assertEquals", "getObject"]}, "focal_class": {"identifier": "PrimitiveTripleCodec", "superclass": "", "interfaces": "implements Codec<PrimitiveTriple>", "fields": [{"original_string": "final Splitter tripleSplitter=Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings().limit(3);", "modifier": "final", "type": "Splitter", "declarator": "tripleSplitter=Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings().limit(3)", "var_name": "tripleSplitter"}, {"original_string": "final CharMatcher period=CharMatcher.is('.');", "modifier": "final", "type": "CharMatcher", "declarator": "period=CharMatcher.is('.')", "var_name": "period"}], "methods": [{"identifier": "encode", "parameters": "(PrimitiveTriple obj)", "modifiers": "@Override public", "return": "String", "signature": "String encode(PrimitiveTriple obj)", "full_signature": "@Override public String encode(PrimitiveTriple obj)", "class_method_signature": "PrimitiveTripleCodec.encode(PrimitiveTriple obj)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String obj)", "modifiers": "@Override public", "return": "PrimitiveTriple", "signature": "PrimitiveTriple decode(String obj)", "full_signature": "@Override public PrimitiveTriple decode(String obj)", "class_method_signature": "PrimitiveTripleCodec.decode(String obj)", "testcase": false, "constructor": false}, {"identifier": "trimObject", "parameters": "(String that)", "modifiers": "private", "return": "String", "signature": "String trimObject(String that)", "full_signature": "private String trimObject(String that)", "class_method_signature": "PrimitiveTripleCodec.trimObject(String that)", "testcase": false, "constructor": false}], "file": "bakemono/src/main/java/com/ontology2/bakemono/primitiveTriples/PrimitiveTripleCodec.java"}, "focal_method": {"identifier": "decode", "parameters": "(String obj)", "modifiers": "@Override public", "return": "PrimitiveTriple", "body": "@Override\n    public PrimitiveTriple decode(String obj) {\n        Iterator<String> parts=tripleSplitter.split(obj).iterator();\n        String subject = parts.next();\n        String predicate = parts.next();\n        String object = trimObject(parts.next());\n        return new PrimitiveTriple(subject,predicate,object);\n    }", "signature": "PrimitiveTriple decode(String obj)", "full_signature": "@Override public PrimitiveTriple decode(String obj)", "class_method_signature": "PrimitiveTripleCodec.decode(String obj)", "testcase": false, "constructor": false, "invocations": ["iterator", "split", "next", "next", "trimObject", "next"]}, "repository": {"repo_id": 6500041, "url": "https://github.com/paulhoule/infovore", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 147, "size": 4385, "license": "licensed"}}