{"test_class": {"identifier": "TestWritableNode", "superclass": "", "interfaces": "", "fields": [], "file": "bakemono/src/test/java/com/ontology2/bakemono/jena/TestWritableNode.java"}, "test_case": {"identifier": "serializeAndDeserialize100_000CharString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void serializeAndDeserialize100_000CharString() throws IOException {\n        String bigString= repeat(\"TEN DIGITS\", 10000);\n        assertEquals((int) Math.pow(10,5),bigString.length());\n        Node n1=Node.createLiteral(bigString);\n        WritableNode wn1=new WritableNode(n1);\n        WritableNode wn2=new WritableNode(null);\n\n        roundtrip(wn1, wn2);\n        assertEquals(bigString,wn2.getNode().getLiteralValue());\n        assertEquals(\"\", wn2.getNode().getLiteralLanguage());\n    }", "signature": "void serializeAndDeserialize100_000CharString()", "full_signature": "@Test public void serializeAndDeserialize100_000CharString()", "class_method_signature": "TestWritableNode.serializeAndDeserialize100_000CharString()", "testcase": true, "constructor": false, "invocations": ["repeat", "assertEquals", "pow", "length", "createLiteral", "roundtrip", "assertEquals", "getLiteralValue", "getNode", "assertEquals", "getLiteralLanguage", "getNode"]}, "focal_class": {"identifier": "WritableNode", "superclass": "", "interfaces": "implements WritableComparable", "fields": [{"original_string": "Node innerNode;", "modifier": "", "type": "Node", "declarator": "innerNode", "var_name": "innerNode"}, {"original_string": "final static int URI=0;", "modifier": "final static", "type": "int", "declarator": "URI=0", "var_name": "URI"}, {"original_string": "final static int STRING=1;", "modifier": "final static", "type": "int", "declarator": "STRING=1", "var_name": "STRING"}, {"original_string": "final static int GENERAL_LITERAL=2;", "modifier": "final static", "type": "int", "declarator": "GENERAL_LITERAL=2", "var_name": "GENERAL_LITERAL"}, {"original_string": "private TypeMapper typeLookup=TypeMapper.getInstance();", "modifier": "private", "type": "TypeMapper", "declarator": "typeLookup=TypeMapper.getInstance()", "var_name": "typeLookup"}], "methods": [{"identifier": "WritableNode", "parameters": "()", "modifiers": "public", "return": "", "signature": " WritableNode()", "full_signature": "public  WritableNode()", "class_method_signature": "WritableNode.WritableNode()", "testcase": false, "constructor": true}, {"identifier": "WritableNode", "parameters": "(Node n)", "modifiers": "public", "return": "", "signature": " WritableNode(Node n)", "full_signature": "public  WritableNode(Node n)", "class_method_signature": "WritableNode.WritableNode(Node n)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "WritableNode.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "nodeType", "parameters": "()", "modifiers": "", "return": "int", "signature": "int nodeType()", "full_signature": " int nodeType()", "class_method_signature": "WritableNode.nodeType()", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "WritableNode.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node getNode()", "full_signature": "public Node getNode()", "class_method_signature": "WritableNode.getNode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "WritableNode.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "WritableNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Object o)", "full_signature": "@Override public int compareTo(Object o)", "class_method_signature": "WritableNode.compareTo(Object o)", "testcase": false, "constructor": false}, {"identifier": "writeBigUTF8", "parameters": "(DataOutput out,String that)", "modifiers": "public static", "return": "void", "signature": "void writeBigUTF8(DataOutput out,String that)", "full_signature": "public static void writeBigUTF8(DataOutput out,String that)", "class_method_signature": "WritableNode.writeBigUTF8(DataOutput out,String that)", "testcase": false, "constructor": false}, {"identifier": "readBigUTF8", "parameters": "(DataInput in)", "modifiers": "public static", "return": "String", "signature": "String readBigUTF8(DataInput in)", "full_signature": "public static String readBigUTF8(DataInput in)", "class_method_signature": "WritableNode.readBigUTF8(DataInput in)", "testcase": false, "constructor": false}], "file": "bakemono/src/main/java/com/ontology2/bakemono/jena/WritableNode.java"}, "focal_method": {"identifier": "getNode", "parameters": "()", "modifiers": "public", "return": "Node", "body": "public Node getNode() {\n        return innerNode;\n    }", "signature": "Node getNode()", "full_signature": "public Node getNode()", "class_method_signature": "WritableNode.getNode()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6500041, "url": "https://github.com/paulhoule/infovore", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 147, "size": 4385, "license": "licensed"}}