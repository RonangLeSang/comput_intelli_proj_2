{"test_class": {"identifier": "CaliperConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "caliper/src/test/java/com/google/caliper/config/CaliperConfigTest.java"}, "test_case": {"identifier": "getVmConfig_baseDirectoryAndHome", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void getVmConfig_baseDirectoryAndHome() throws Exception {\n    File tempBaseDir = folder.newFolder();\n    File jdkHome = new File(tempBaseDir, \"test-home\");\n    jdkHome.mkdir();\n    CaliperConfig configuration = new CaliperConfig(ImmutableMap.of(\n        \"vm.baseDirectory\", tempBaseDir.getAbsolutePath(),\n        \"vm.test.home\", \"test-home\"));\n    assertEquals(new VmConfig.Builder(jdkHome).build(),\n        configuration.getVmConfig(\"test\"));\n  }", "signature": "void getVmConfig_baseDirectoryAndHome()", "full_signature": "@Test public void getVmConfig_baseDirectoryAndHome()", "class_method_signature": "CaliperConfigTest.getVmConfig_baseDirectoryAndHome()", "testcase": true, "constructor": false, "invocations": ["newFolder", "mkdir", "of", "getAbsolutePath", "assertEquals", "build", "getVmConfig"]}, "focal_class": {"identifier": "CaliperConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting final ImmutableMap<String, String> properties;", "modifier": "@VisibleForTesting final", "type": "ImmutableMap<String, String>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final ImmutableMap<Class<? extends ResultProcessor>, ResultProcessorConfig>\n      resultProcessorConfigs;", "modifier": "private final", "type": "ImmutableMap<Class<? extends ResultProcessor>, ResultProcessorConfig>", "declarator": "resultProcessorConfigs", "var_name": "resultProcessorConfigs"}, {"original_string": "private static final Pattern CLASS_PROPERTY_PATTERN = Pattern.compile(\"(\\\\w+)\\\\.class\");", "modifier": "private static final", "type": "Pattern", "declarator": "CLASS_PROPERTY_PATTERN = Pattern.compile(\"(\\\\w+)\\\\.class\")", "var_name": "CLASS_PROPERTY_PATTERN"}, {"original_string": "private static final Pattern INSTRUMENT_CLASS_PATTERN = Pattern.compile(\"([^\\\\.]+)\\\\.class\");", "modifier": "private static final", "type": "Pattern", "declarator": "INSTRUMENT_CLASS_PATTERN = Pattern.compile(\"([^\\\\.]+)\\\\.class\")", "var_name": "INSTRUMENT_CLASS_PATTERN"}], "methods": [{"identifier": "CaliperConfig", "parameters": "(ImmutableMap<String, String> properties)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " CaliperConfig(ImmutableMap<String, String> properties)", "full_signature": "@VisibleForTesting public  CaliperConfig(ImmutableMap<String, String> properties)", "class_method_signature": "CaliperConfig.CaliperConfig(ImmutableMap<String, String> properties)", "testcase": false, "constructor": true}, {"identifier": "mapGroupNamesToClasses", "parameters": "(\n      ImmutableMap<String, String> groupProperties, Class<T> type)", "modifiers": "private static", "return": "ImmutableBiMap<String, Class<? extends T>>", "signature": "ImmutableBiMap<String, Class<? extends T>> mapGroupNamesToClasses(\n      ImmutableMap<String, String> groupProperties, Class<T> type)", "full_signature": "private static ImmutableBiMap<String, Class<? extends T>> mapGroupNamesToClasses(\n      ImmutableMap<String, String> groupProperties, Class<T> type)", "class_method_signature": "CaliperConfig.mapGroupNamesToClasses(\n      ImmutableMap<String, String> groupProperties, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "findResultProcessorConfigs", "parameters": "(ImmutableMap<String, String> resultsProperties)", "modifiers": "private static", "return": "ImmutableMap<Class<? extends ResultProcessor>, ResultProcessorConfig>", "signature": "ImmutableMap<Class<? extends ResultProcessor>, ResultProcessorConfig> findResultProcessorConfigs(ImmutableMap<String, String> resultsProperties)", "full_signature": "private static ImmutableMap<Class<? extends ResultProcessor>, ResultProcessorConfig> findResultProcessorConfigs(ImmutableMap<String, String> resultsProperties)", "class_method_signature": "CaliperConfig.findResultProcessorConfigs(ImmutableMap<String, String> resultsProperties)", "testcase": false, "constructor": false}, {"identifier": "properties", "parameters": "()", "modifiers": "public", "return": "ImmutableMap<String, String>", "signature": "ImmutableMap<String, String> properties()", "full_signature": "public ImmutableMap<String, String> properties()", "class_method_signature": "CaliperConfig.properties()", "testcase": false, "constructor": false}, {"identifier": "getDefaultVmConfig", "parameters": "()", "modifiers": "public", "return": "VmConfig", "signature": "VmConfig getDefaultVmConfig()", "full_signature": "public VmConfig getDefaultVmConfig()", "class_method_signature": "CaliperConfig.getDefaultVmConfig()", "testcase": false, "constructor": false}, {"identifier": "getVmConfig", "parameters": "(String name)", "modifiers": "public", "return": "VmConfig", "signature": "VmConfig getVmConfig(String name)", "full_signature": "public VmConfig getVmConfig(String name)", "class_method_signature": "CaliperConfig.getVmConfig(String name)", "testcase": false, "constructor": false}, {"identifier": "getConfiguredInstruments", "parameters": "()", "modifiers": "public", "return": "ImmutableSet<String>", "signature": "ImmutableSet<String> getConfiguredInstruments()", "full_signature": "public ImmutableSet<String> getConfiguredInstruments()", "class_method_signature": "CaliperConfig.getConfiguredInstruments()", "testcase": false, "constructor": false}, {"identifier": "getInstrumentConfig", "parameters": "(String name)", "modifiers": "public", "return": "InstrumentConfig", "signature": "InstrumentConfig getInstrumentConfig(String name)", "full_signature": "public InstrumentConfig getInstrumentConfig(String name)", "class_method_signature": "CaliperConfig.getInstrumentConfig(String name)", "testcase": false, "constructor": false}, {"identifier": "getConfiguredResultProcessors", "parameters": "()", "modifiers": "public", "return": "ImmutableSet<Class<? extends ResultProcessor>>", "signature": "ImmutableSet<Class<? extends ResultProcessor>> getConfiguredResultProcessors()", "full_signature": "public ImmutableSet<Class<? extends ResultProcessor>> getConfiguredResultProcessors()", "class_method_signature": "CaliperConfig.getConfiguredResultProcessors()", "testcase": false, "constructor": false}, {"identifier": "getResultProcessorConfig", "parameters": "(\n      Class<? extends ResultProcessor> resultProcessorClass)", "modifiers": "public", "return": "ResultProcessorConfig", "signature": "ResultProcessorConfig getResultProcessorConfig(\n      Class<? extends ResultProcessor> resultProcessorClass)", "full_signature": "public ResultProcessorConfig getResultProcessorConfig(\n      Class<? extends ResultProcessor> resultProcessorClass)", "class_method_signature": "CaliperConfig.getResultProcessorConfig(\n      Class<? extends ResultProcessor> resultProcessorClass)", "testcase": false, "constructor": false}, {"identifier": "getResultProcessorConfig", "parameters": "(\n      ImmutableMap<String, String> resultsProperties, String name)", "modifiers": "private static", "return": "ResultProcessorConfig", "signature": "ResultProcessorConfig getResultProcessorConfig(\n      ImmutableMap<String, String> resultsProperties, String name)", "full_signature": "private static ResultProcessorConfig getResultProcessorConfig(\n      ImmutableMap<String, String> resultsProperties, String name)", "class_method_signature": "CaliperConfig.getResultProcessorConfig(\n      ImmutableMap<String, String> resultsProperties, String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CaliperConfig.toString()", "testcase": false, "constructor": false}, {"identifier": "subgroupMap", "parameters": "(ImmutableMap<String, String> map,\n      String groupName)", "modifiers": "private static final", "return": "ImmutableMap<String, String>", "signature": "ImmutableMap<String, String> subgroupMap(ImmutableMap<String, String> map,\n      String groupName)", "full_signature": "private static final ImmutableMap<String, String> subgroupMap(ImmutableMap<String, String> map,\n      String groupName)", "class_method_signature": "CaliperConfig.subgroupMap(ImmutableMap<String, String> map,\n      String groupName)", "testcase": false, "constructor": false}, {"identifier": "getArgs", "parameters": "(Map<String, String> properties)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getArgs(Map<String, String> properties)", "full_signature": "private static List<String> getArgs(Map<String, String> properties)", "class_method_signature": "CaliperConfig.getArgs(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "getJdkHomeDir", "parameters": "(@Nullable String baseDirectoryPath,\n      @Nullable String homeDirPath, String vmConfigName)", "modifiers": "private static", "return": "File", "signature": "File getJdkHomeDir(@Nullable String baseDirectoryPath,\n      @Nullable String homeDirPath, String vmConfigName)", "full_signature": "private static File getJdkHomeDir(@Nullable String baseDirectoryPath,\n      @Nullable String homeDirPath, String vmConfigName)", "class_method_signature": "CaliperConfig.getJdkHomeDir(@Nullable String baseDirectoryPath,\n      @Nullable String homeDirPath, String vmConfigName)", "testcase": false, "constructor": false}, {"identifier": "getBaseDirectory", "parameters": "(@Nullable String baseDirectoryPath)", "modifiers": "private static", "return": "File", "signature": "File getBaseDirectory(@Nullable String baseDirectoryPath)", "full_signature": "private static File getBaseDirectory(@Nullable String baseDirectoryPath)", "class_method_signature": "CaliperConfig.getBaseDirectory(@Nullable String baseDirectoryPath)", "testcase": false, "constructor": false}, {"identifier": "checkConfiguration", "parameters": "(boolean check, String message)", "modifiers": "private static", "return": "void", "signature": "void checkConfiguration(boolean check, String message)", "full_signature": "private static void checkConfiguration(boolean check, String message)", "class_method_signature": "CaliperConfig.checkConfiguration(boolean check, String message)", "testcase": false, "constructor": false}, {"identifier": "checkConfiguration", "parameters": "(boolean check, String messageFormat, Object... args)", "modifiers": "private static", "return": "void", "signature": "void checkConfiguration(boolean check, String messageFormat, Object... args)", "full_signature": "private static void checkConfiguration(boolean check, String messageFormat, Object... args)", "class_method_signature": "CaliperConfig.checkConfiguration(boolean check, String messageFormat, Object... args)", "testcase": false, "constructor": false}], "file": "caliper/src/main/java/com/google/caliper/config/CaliperConfig.java"}, "focal_method": {"identifier": "getVmConfig", "parameters": "(String name)", "modifiers": "public", "return": "VmConfig", "body": "public VmConfig getVmConfig(String name) throws InvalidConfigurationException {\n    checkNotNull(name);\n    ImmutableMap<String, String> vmGroupMap = subgroupMap(properties, \"vm\");\n    ImmutableMap<String, String> vmMap = subgroupMap(vmGroupMap, name);\n    File homeDir = getJdkHomeDir(vmGroupMap.get(\"baseDirectory\"), vmMap.get(\"home\"), name);\n    return new VmConfig.Builder(homeDir)\n        .addAllOptions(getArgs(vmGroupMap))\n        .addAllOptions(getArgs(vmMap))\n        .build();\n  }", "signature": "VmConfig getVmConfig(String name)", "full_signature": "public VmConfig getVmConfig(String name)", "class_method_signature": "CaliperConfig.getVmConfig(String name)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "subgroupMap", "subgroupMap", "getJdkHomeDir", "get", "get", "build", "addAllOptions", "addAllOptions", "getArgs", "getArgs"]}, "repository": {"repo_id": 11429654, "url": "https://github.com/mrflip/caliper", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 7972, "license": "licensed"}}