{"test_class": {"identifier": "LogMessageParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject LogMessageParser parser;", "modifier": "@Inject", "type": "LogMessageParser", "declarator": "parser", "var_name": "parser"}], "file": "caliper/src/test/java/com/google/caliper/bridge/LogMessageParserTest.java"}, "test_case": {"identifier": "gcPatten_jdk7", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void gcPatten_jdk7() throws Exception {\n    List<String> lines = Resources.readLines(\n        Resources.getResource(LogMessageParserTest.class, \"jdk7-gc.txt\"), UTF_8);\n    for (String line : lines) {\n      assertTrue(parser.parse(line) instanceof GcLogMessage);\n    }\n  }", "signature": "void gcPatten_jdk7()", "full_signature": "@Test public void gcPatten_jdk7()", "class_method_signature": "LogMessageParserTest.gcPatten_jdk7()", "testcase": true, "constructor": false, "invocations": ["readLines", "getResource", "assertTrue", "parse"]}, "focal_class": {"identifier": "LogMessageParser", "superclass": "", "interfaces": "implements Parser<LogMessage>", "fields": [{"original_string": "private final Gson gson;", "modifier": "private final", "type": "Gson", "declarator": "gson", "var_name": "gson"}, {"original_string": "private final ImmutableBiMap<Class<? extends CaliperControlLogMessage>, String> typeMap;", "modifier": "private final", "type": "ImmutableBiMap<Class<? extends CaliperControlLogMessage>, String>", "declarator": "typeMap", "var_name": "typeMap"}, {"original_string": "private static final Pattern GC_PATTERN =\n      Pattern.compile(\".*\\\\[(?:(Full) )?GC.*(\\\\d+\\\\.\\\\d+) secs\\\\]\");", "modifier": "private static final", "type": "Pattern", "declarator": "GC_PATTERN =\n      Pattern.compile(\".*\\\\[(?:(Full) )?GC.*(\\\\d+\\\\.\\\\d+) secs\\\\]\")", "var_name": "GC_PATTERN"}, {"original_string": "private static final Pattern JIT_PATTERN =\n      Pattern.compile(\".*::.*( \\\\(((\\\\d+ bytes)|(static))\\\\))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "JIT_PATTERN =\n      Pattern.compile(\".*::.*( \\\\(((\\\\d+ bytes)|(static))\\\\))?\")", "var_name": "JIT_PATTERN"}, {"original_string": "private static final Pattern VM_OPTION_PATTERN =\n      Pattern.compile(\"\\\\s*(\\\\w+)\\\\s+(\\\\w+)\\\\s+:?=\\\\s+([^\\\\s]*)\\\\s+\\\\{([^}]*)\\\\}\\\\s*\");", "modifier": "private static final", "type": "Pattern", "declarator": "VM_OPTION_PATTERN =\n      Pattern.compile(\"\\\\s*(\\\\w+)\\\\s+(\\\\w+)\\\\s+:?=\\\\s+([^\\\\s]*)\\\\s+\\\\{([^}]*)\\\\}\\\\s*\")", "var_name": "VM_OPTION_PATTERN"}], "methods": [{"identifier": "LogMessageParser", "parameters": "(Gson gson)", "modifiers": "@SuppressWarnings(\"unchecked\") @Inject", "return": "", "signature": " LogMessageParser(Gson gson)", "full_signature": "@SuppressWarnings(\"unchecked\") @Inject  LogMessageParser(Gson gson)", "class_method_signature": "LogMessageParser.LogMessageParser(Gson gson)", "testcase": false, "constructor": true}, {"identifier": "createMapForTypes", "parameters": "(Set<Class<? extends CaliperControlLogMessage>> messageTypes)", "modifiers": "private static", "return": "ImmutableBiMap<Class<? extends CaliperControlLogMessage>, String>", "signature": "ImmutableBiMap<Class<? extends CaliperControlLogMessage>, String> createMapForTypes(Set<Class<? extends CaliperControlLogMessage>> messageTypes)", "full_signature": "private static ImmutableBiMap<Class<? extends CaliperControlLogMessage>, String> createMapForTypes(Set<Class<? extends CaliperControlLogMessage>> messageTypes)", "class_method_signature": "LogMessageParser.createMapForTypes(Set<Class<? extends CaliperControlLogMessage>> messageTypes)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(CharSequence text)", "modifiers": "@Override public", "return": "LogMessage", "signature": "LogMessage parse(CharSequence text)", "full_signature": "@Override public LogMessage parse(CharSequence text)", "class_method_signature": "LogMessageParser.parse(CharSequence text)", "testcase": false, "constructor": false}], "file": "caliper/src/main/java/com/google/caliper/bridge/LogMessageParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(CharSequence text)", "modifiers": "@Override public", "return": "LogMessage", "body": "@Override public LogMessage parse(CharSequence text) {\n    // TODO(gak): do this stuff in terms of CharSequence instead of String\n    String string = text.toString();\n    if (string.startsWith(CONTROL_PREFIX)) {\n      ImmutableList<String> parts = ImmutableList.copyOf(\n          CONTROL_TYPE_SPLITTER.split(string.substring(CONTROL_PREFIX.length())));\n      Class<? extends CaliperControlLogMessage> messageType = typeMap.inverse().get(parts.get(0));\n      return gson.fromJson(parts.get(1), messageType);\n    } else {\n      Matcher gcMatcher = GC_PATTERN.matcher(string);\n      if (gcMatcher.matches()) {\n        return new GcLogMessage(\n            \"Full\".equals(gcMatcher.group(1))\n                ? GcLogMessage.Type.FULL\n                : GcLogMessage.Type.INCREMENTAL,\n            ShortDuration.of(BigDecimal.valueOf(Double.parseDouble(gcMatcher.group(2))), SECONDS));\n      }\n      Matcher jitMatcher = JIT_PATTERN.matcher(string);\n      if (jitMatcher.matches()) {\n        return new HotspotLogMessage();\n      }\n      Matcher vmOptionMatcher = VM_OPTION_PATTERN.matcher(string);\n      if (vmOptionMatcher.matches()) {\n        return new VmOptionLogMessage(vmOptionMatcher.group(2), vmOptionMatcher.group(3));\n      }\n      return new GenericLogMessage();\n    }\n  }", "signature": "LogMessage parse(CharSequence text)", "full_signature": "@Override public LogMessage parse(CharSequence text)", "class_method_signature": "LogMessageParser.parse(CharSequence text)", "testcase": false, "constructor": false, "invocations": ["toString", "startsWith", "copyOf", "split", "substring", "length", "get", "inverse", "get", "fromJson", "get", "matcher", "matches", "equals", "group", "of", "valueOf", "parseDouble", "group", "matcher", "matches", "matcher", "matches", "group", "group"]}, "repository": {"repo_id": 11429654, "url": "https://github.com/mrflip/caliper", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 7972, "license": "licensed"}}