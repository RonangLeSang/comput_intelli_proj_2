{"test_class": {"identifier": "RuntimeInstrumentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RuntimeInstrument instrument;", "modifier": "private", "type": "RuntimeInstrument", "declarator": "instrument", "var_name": "instrument"}], "file": "caliper/src/test/java/com/google/caliper/runner/RuntimeInstrumentTest.java"}, "test_case": {"identifier": "createInstrumentation_microbenchmark", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void createInstrumentation_microbenchmark() throws Exception {\n    Method benchmarkMethod = RuntimeBenchmark.class.getDeclaredMethod(\"microbenchmark\", int.class);\n    Instrumentation instrumentation = instrument.createInstrumentation(benchmarkMethod);\n    assertEquals(benchmarkMethod, instrumentation.benchmarkMethod());\n    assertEquals(instrument, instrumentation.instrument());\n    assertEquals(RuntimeWorker.Micro.class, instrumentation.workerClass());\n  }", "signature": "void createInstrumentation_microbenchmark()", "full_signature": "@Test public void createInstrumentation_microbenchmark()", "class_method_signature": "RuntimeInstrumentTest.createInstrumentation_microbenchmark()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "createInstrumentation", "assertEquals", "benchmarkMethod", "assertEquals", "instrument", "assertEquals", "workerClass"]}, "focal_class": {"identifier": "RuntimeInstrument", "superclass": "extends Instrument", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(RuntimeInstrument.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(RuntimeInstrument.class.getName())", "var_name": "logger"}, {"original_string": "private static final int DRY_RUN_REPS = 1;", "modifier": "private static final", "type": "int", "declarator": "DRY_RUN_REPS = 1", "var_name": "DRY_RUN_REPS"}, {"original_string": "private final PrintWriter stdout;", "modifier": "private final", "type": "PrintWriter", "declarator": "stdout", "var_name": "stdout"}, {"original_string": "private final PrintWriter stderr;", "modifier": "private final", "type": "PrintWriter", "declarator": "stderr", "var_name": "stderr"}, {"original_string": "private final ShortDuration nanoTimeGranularity;", "modifier": "private final", "type": "ShortDuration", "declarator": "nanoTimeGranularity", "var_name": "nanoTimeGranularity"}], "methods": [{"identifier": "RuntimeInstrument", "parameters": "(@NanoTimeGranularity ShortDuration nanoTimeGranularity,\n      @Stdout PrintWriter stdout, @Stderr PrintWriter stderr)", "modifiers": "@Inject", "return": "", "signature": " RuntimeInstrument(@NanoTimeGranularity ShortDuration nanoTimeGranularity,\n      @Stdout PrintWriter stdout, @Stderr PrintWriter stderr)", "full_signature": "@Inject  RuntimeInstrument(@NanoTimeGranularity ShortDuration nanoTimeGranularity,\n      @Stdout PrintWriter stdout, @Stderr PrintWriter stderr)", "class_method_signature": "RuntimeInstrument.RuntimeInstrument(@NanoTimeGranularity ShortDuration nanoTimeGranularity,\n      @Stdout PrintWriter stdout, @Stderr PrintWriter stderr)", "testcase": false, "constructor": true}, {"identifier": "isBenchmarkMethod", "parameters": "(Method method)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBenchmarkMethod(Method method)", "full_signature": "@Override public boolean isBenchmarkMethod(Method method)", "class_method_signature": "RuntimeInstrument.isBenchmarkMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "instrumentOptions", "parameters": "()", "modifiers": "@Override protected", "return": "ImmutableSet<String>", "signature": "ImmutableSet<String> instrumentOptions()", "full_signature": "@Override protected ImmutableSet<String> instrumentOptions()", "class_method_signature": "RuntimeInstrument.instrumentOptions()", "testcase": false, "constructor": false}, {"identifier": "createInstrumentation", "parameters": "(Method benchmarkMethod)", "modifiers": "@Override public", "return": "Instrumentation", "signature": "Instrumentation createInstrumentation(Method benchmarkMethod)", "full_signature": "@Override public Instrumentation createInstrumentation(Method benchmarkMethod)", "class_method_signature": "RuntimeInstrument.createInstrumentation(Method benchmarkMethod)", "testcase": false, "constructor": false}, {"identifier": "getMeasurementsPerTrial", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getMeasurementsPerTrial()", "full_signature": "private int getMeasurementsPerTrial()", "class_method_signature": "RuntimeInstrument.getMeasurementsPerTrial()", "testcase": false, "constructor": false}], "file": "caliper/src/main/java/com/google/caliper/runner/RuntimeInstrument.java"}, "focal_method": {"identifier": "createInstrumentation", "parameters": "(Method benchmarkMethod)", "modifiers": "@Override public", "return": "Instrumentation", "body": "@Override\n  public Instrumentation createInstrumentation(Method benchmarkMethod)\n      throws InvalidBenchmarkException {\n    checkNotNull(benchmarkMethod);\n    checkArgument(isBenchmarkMethod(benchmarkMethod));\n    if (isStatic(benchmarkMethod)) {\n      throw new InvalidBenchmarkException(\"Benchmark methods must not be static: %s\",\n          benchmarkMethod.getName());\n    }\n    try {\n      switch (BenchmarkMethods.Type.of(benchmarkMethod)) {\n        case MACRO:\n          return new MacrobenchmarkInstrumentation(benchmarkMethod);\n        case MICRO:\n          return new MicrobenchmarkInstrumentation(benchmarkMethod);\n        case PICO:\n          return new PicobenchmarkInstrumentation(benchmarkMethod);\n        default:\n          throw new AssertionError(\"unknown type\");\n      }\n    } catch (IllegalArgumentException e) {\n      throw new InvalidBenchmarkException(\"Benchmark methods must have no arguments or accept \"\n          + \"a single int or long parameter: %s\", benchmarkMethod.getName());\n    }\n  }", "signature": "Instrumentation createInstrumentation(Method benchmarkMethod)", "full_signature": "@Override public Instrumentation createInstrumentation(Method benchmarkMethod)", "class_method_signature": "RuntimeInstrument.createInstrumentation(Method benchmarkMethod)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkArgument", "isBenchmarkMethod", "isStatic", "getName", "of", "getName"]}, "repository": {"repo_id": 11429654, "url": "https://github.com/mrflip/caliper", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 7972, "license": "licensed"}}