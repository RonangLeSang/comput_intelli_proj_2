{"test_class": {"identifier": "ObjectGraphMeasurerTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "static final Object oneEnumField = new Object() {\n    @SuppressWarnings(\"unused\") DummyEnum enumField = DummyEnum.VALUE;\n  };", "modifier": "static final", "type": "Object", "declarator": "oneEnumField = new Object() {\n    @SuppressWarnings(\"unused\") DummyEnum enumField = DummyEnum.VALUE;\n  }", "var_name": "oneEnumField"}, {"original_string": "static final Object oneClassField = new Object() {\n    @SuppressWarnings(\"unused\") Class<?> clazz = Object.class;\n  };", "modifier": "static final", "type": "Object", "declarator": "oneClassField = new Object() {\n    @SuppressWarnings(\"unused\") Class<?> clazz = Object.class;\n  }", "var_name": "oneClassField"}, {"original_string": "static final Object oneObjectField = new Object() {\n    @SuppressWarnings(\"unused\") Object objectField = new Object();\n  };", "modifier": "static final", "type": "Object", "declarator": "oneObjectField = new Object() {\n    @SuppressWarnings(\"unused\") Object objectField = new Object();\n  }", "var_name": "oneObjectField"}, {"original_string": "static final Object withCycle = new Object() {\n    Object[] array = new Object[1];\n    {\n      array[0] = this;\n    }\n  };", "modifier": "static final", "type": "Object", "declarator": "withCycle = new Object() {\n    Object[] array = new Object[1];\n    {\n      array[0] = this;\n    }\n  }", "var_name": "withCycle"}, {"original_string": "static final Object multiplePathsToObject = new Object() {\n    Object object = new Object();\n    @SuppressWarnings(\"unused\") Object ref1 = object;\n    @SuppressWarnings(\"unused\") Object ref2 = object;\n  };", "modifier": "static final", "type": "Object", "declarator": "multiplePathsToObject = new Object() {\n    Object object = new Object();\n    @SuppressWarnings(\"unused\") Object ref1 = object;\n    @SuppressWarnings(\"unused\") Object ref2 = object;\n  }", "var_name": "multiplePathsToObject"}, {"original_string": "static final Object multiplePathsToClass = new Object() {\n    Object object = Object.class;\n    @SuppressWarnings(\"unused\") Object ref1 = object;\n    @SuppressWarnings(\"unused\") Object ref2 = object;\n  };", "modifier": "static final", "type": "Object", "declarator": "multiplePathsToClass = new Object() {\n    Object object = Object.class;\n    @SuppressWarnings(\"unused\") Object ref1 = object;\n    @SuppressWarnings(\"unused\") Object ref2 = object;\n  }", "var_name": "multiplePathsToClass"}, {"original_string": "static final Object oneNullOneNonNull = new Object() {\n    Object nonNull1 = new Object();\n    Object nonNull2 = nonNull1;\n    Object null1 = null;\n    Object null2 = null;\n    Object null3 = null;\n  };", "modifier": "static final", "type": "Object", "declarator": "oneNullOneNonNull = new Object() {\n    Object nonNull1 = new Object();\n    Object nonNull2 = nonNull1;\n    Object null1 = null;\n    Object null2 = null;\n    Object null3 = null;\n  }", "var_name": "oneNullOneNonNull"}, {"original_string": "private static final ImmutableMultiset<Class<?>> NO_PRIMITIVES = ImmutableMultiset.of();", "modifier": "private static final", "type": "ImmutableMultiset<Class<?>>", "declarator": "NO_PRIMITIVES = ImmutableMultiset.of()", "var_name": "NO_PRIMITIVES"}], "file": "caliper/src/test/java/com/google/caliper/memory/ObjectGraphMeasurerTest.java"}, "test_case": {"identifier": "testStaticFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testStaticFields() {\n    ObjectGraphMeasurer.Footprint footprint = ObjectGraphMeasurer.measure(new WithStaticField());\n    assertEquals(new ObjectGraphMeasurer.Footprint(1, 0, 0, NO_PRIMITIVES), footprint);\n  }", "signature": "void testStaticFields()", "full_signature": "@Test public void testStaticFields()", "class_method_signature": "ObjectGraphMeasurerTest.testStaticFields()", "testcase": true, "constructor": false, "invocations": ["measure", "assertEquals"]}, "focal_class": {"identifier": "ObjectGraphMeasurer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "measure", "parameters": "(Object rootObject)", "modifiers": "public static", "return": "Footprint", "signature": "Footprint measure(Object rootObject)", "full_signature": "public static Footprint measure(Object rootObject)", "class_method_signature": "ObjectGraphMeasurer.measure(Object rootObject)", "testcase": false, "constructor": false}, {"identifier": "measure", "parameters": "(Object rootObject, Predicate<Object> objectAcceptor)", "modifiers": "public static", "return": "Footprint", "signature": "Footprint measure(Object rootObject, Predicate<Object> objectAcceptor)", "full_signature": "public static Footprint measure(Object rootObject, Predicate<Object> objectAcceptor)", "class_method_signature": "ObjectGraphMeasurer.measure(Object rootObject, Predicate<Object> objectAcceptor)", "testcase": false, "constructor": false}, {"identifier": "ObjectGraphMeasurer", "parameters": "()", "modifiers": "private", "return": "", "signature": " ObjectGraphMeasurer()", "full_signature": "private  ObjectGraphMeasurer()", "class_method_signature": "ObjectGraphMeasurer.ObjectGraphMeasurer()", "testcase": false, "constructor": true}], "file": "caliper/src/main/java/com/google/caliper/memory/ObjectGraphMeasurer.java"}, "focal_method": {"identifier": "measure", "parameters": "(Object rootObject)", "modifiers": "public static", "return": "Footprint", "body": "public static Footprint measure(Object rootObject) {\n    return measure(rootObject, Predicates.alwaysTrue());\n  }", "signature": "Footprint measure(Object rootObject)", "full_signature": "public static Footprint measure(Object rootObject)", "class_method_signature": "ObjectGraphMeasurer.measure(Object rootObject)", "testcase": false, "constructor": false, "invocations": ["measure", "alwaysTrue"]}, "repository": {"repo_id": 11429654, "url": "https://github.com/mrflip/caliper", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 7972, "license": "licensed"}}