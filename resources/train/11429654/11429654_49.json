{"test_class": {"identifier": "RuntimeInstrumentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RuntimeInstrument instrument;", "modifier": "private", "type": "RuntimeInstrument", "declarator": "instrument", "var_name": "instrument"}], "file": "caliper/src/test/java/com/google/caliper/runner/RuntimeInstrumentTest.java"}, "test_case": {"identifier": "isBenchmarkMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void isBenchmarkMethod() {\n    assertEquals(\n        ImmutableSet.of(\"macrobenchmark\", \"microbenchmark\", \"picobenchmark\", \"integerParam\"),\n        FluentIterable.from(Arrays.asList(RuntimeBenchmark.class.getDeclaredMethods()))\n            .filter(new Predicate<Method>() {\n              @Override public boolean apply(Method input) {\n                return instrument.isBenchmarkMethod(input);\n              }\n            })\n            .transform(new Function<Method, String>() {\n              @Override public String apply(Method input) {\n                return input.getName();\n              }\n            })\n            .toSet());\n  }", "signature": "void isBenchmarkMethod()", "full_signature": "@Test public void isBenchmarkMethod()", "class_method_signature": "RuntimeInstrumentTest.isBenchmarkMethod()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "of", "toSet", "transform", "filter", "from", "asList", "getDeclaredMethods", "isBenchmarkMethod", "getName"]}, "focal_class": {"identifier": "RuntimeInstrument", "superclass": "extends Instrument", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(RuntimeInstrument.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(RuntimeInstrument.class.getName())", "var_name": "logger"}, {"original_string": "private static final int DRY_RUN_REPS = 1;", "modifier": "private static final", "type": "int", "declarator": "DRY_RUN_REPS = 1", "var_name": "DRY_RUN_REPS"}, {"original_string": "private final PrintWriter stdout;", "modifier": "private final", "type": "PrintWriter", "declarator": "stdout", "var_name": "stdout"}, {"original_string": "private final PrintWriter stderr;", "modifier": "private final", "type": "PrintWriter", "declarator": "stderr", "var_name": "stderr"}, {"original_string": "private final ShortDuration nanoTimeGranularity;", "modifier": "private final", "type": "ShortDuration", "declarator": "nanoTimeGranularity", "var_name": "nanoTimeGranularity"}], "methods": [{"identifier": "RuntimeInstrument", "parameters": "(@NanoTimeGranularity ShortDuration nanoTimeGranularity,\n      @Stdout PrintWriter stdout, @Stderr PrintWriter stderr)", "modifiers": "@Inject", "return": "", "signature": " RuntimeInstrument(@NanoTimeGranularity ShortDuration nanoTimeGranularity,\n      @Stdout PrintWriter stdout, @Stderr PrintWriter stderr)", "full_signature": "@Inject  RuntimeInstrument(@NanoTimeGranularity ShortDuration nanoTimeGranularity,\n      @Stdout PrintWriter stdout, @Stderr PrintWriter stderr)", "class_method_signature": "RuntimeInstrument.RuntimeInstrument(@NanoTimeGranularity ShortDuration nanoTimeGranularity,\n      @Stdout PrintWriter stdout, @Stderr PrintWriter stderr)", "testcase": false, "constructor": true}, {"identifier": "isBenchmarkMethod", "parameters": "(Method method)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBenchmarkMethod(Method method)", "full_signature": "@Override public boolean isBenchmarkMethod(Method method)", "class_method_signature": "RuntimeInstrument.isBenchmarkMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "instrumentOptions", "parameters": "()", "modifiers": "@Override protected", "return": "ImmutableSet<String>", "signature": "ImmutableSet<String> instrumentOptions()", "full_signature": "@Override protected ImmutableSet<String> instrumentOptions()", "class_method_signature": "RuntimeInstrument.instrumentOptions()", "testcase": false, "constructor": false}, {"identifier": "createInstrumentation", "parameters": "(Method benchmarkMethod)", "modifiers": "@Override public", "return": "Instrumentation", "signature": "Instrumentation createInstrumentation(Method benchmarkMethod)", "full_signature": "@Override public Instrumentation createInstrumentation(Method benchmarkMethod)", "class_method_signature": "RuntimeInstrument.createInstrumentation(Method benchmarkMethod)", "testcase": false, "constructor": false}, {"identifier": "getMeasurementsPerTrial", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getMeasurementsPerTrial()", "full_signature": "private int getMeasurementsPerTrial()", "class_method_signature": "RuntimeInstrument.getMeasurementsPerTrial()", "testcase": false, "constructor": false}], "file": "caliper/src/main/java/com/google/caliper/runner/RuntimeInstrument.java"}, "focal_method": {"identifier": "isBenchmarkMethod", "parameters": "(Method method)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean isBenchmarkMethod(Method method) {\n    return method.isAnnotationPresent(Benchmark.class)\n        || BenchmarkMethods.isTimeMethod(method)\n        || method.isAnnotationPresent(Macrobenchmark.class);\n  }", "signature": "boolean isBenchmarkMethod(Method method)", "full_signature": "@Override public boolean isBenchmarkMethod(Method method)", "class_method_signature": "RuntimeInstrument.isBenchmarkMethod(Method method)", "testcase": false, "constructor": false, "invocations": ["isAnnotationPresent", "isTimeMethod", "isAnnotationPresent"]}, "repository": {"repo_id": 11429654, "url": "https://github.com/mrflip/caliper", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 7972, "license": "licensed"}}