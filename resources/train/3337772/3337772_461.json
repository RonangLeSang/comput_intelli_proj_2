{"test_class": {"identifier": "S3StorageProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AmazonS3 s3Client;", "modifier": "private", "type": "AmazonS3", "declarator": "s3Client", "var_name": "s3Client"}, {"original_string": "private InputStream contentStream;", "modifier": "private", "type": "InputStream", "declarator": "contentStream", "var_name": "contentStream"}, {"original_string": "private static final String accessKey = \"abcdefghijklmnopqrst\";", "modifier": "private static final", "type": "String", "declarator": "accessKey = \"abcdefghijklmnopqrst\"", "var_name": "accessKey"}, {"original_string": "private static final String secretKey = \"secretKey\";", "modifier": "private static final", "type": "String", "declarator": "secretKey = \"secretKey\"", "var_name": "secretKey"}, {"original_string": "private static final String spaceId = \"space-id\";", "modifier": "private static final", "type": "String", "declarator": "spaceId = \"space-id\"", "var_name": "spaceId"}, {"original_string": "private static final String contentId = \"content-id\";", "modifier": "private static final", "type": "String", "declarator": "contentId = \"content-id\"", "var_name": "contentId"}, {"original_string": "private static final String content = \"hello-world\";", "modifier": "private static final", "type": "String", "declarator": "content = \"hello-world\"", "var_name": "content"}, {"original_string": "private static final String hexChecksum = \"2095312189753de6ad47dfe20cbe97ec\";", "modifier": "private static final", "type": "String", "declarator": "hexChecksum = \"2095312189753de6ad47dfe20cbe97ec\"", "var_name": "hexChecksum"}, {"original_string": "private static final String base64Checksum = \"IJUxIYl1PeatR9/iDL6X7A==\";", "modifier": "private static final", "type": "String", "declarator": "base64Checksum = \"IJUxIYl1PeatR9/iDL6X7A==\"", "var_name": "base64Checksum"}], "file": "s3storageprovider/src/test/java/org/duracloud/s3storage/S3StorageProviderTest.java"}, "test_case": {"identifier": "testAddContent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddContent() {\n        Capture<PutObjectRequest> capturedRequest =\n            createS3ClientAddContent(hexChecksum);\n        S3StorageProvider provider =\n            new S3StorageProvider(s3Client, accessKey, new HashMap<String, String>());\n\n        String content = \"hello\";\n        contentStream = createStream(content);\n        String mimetype = \"mimetype\";\n        String userMetaName = \"user-metadata-name\";\n        String userMetaValue = \"user-metadata-value\";\n        Map<String, String> userMeta = new HashMap<>();\n        userMeta.put(userMetaName, userMetaValue);\n\n        String resultChecksum =\n            provider.addContent(spaceId,\n                                \"contentId\",\n                                mimetype,\n                                userMeta,\n                                content.length(),\n                                hexChecksum,\n                                contentStream);\n\n        Assert.assertEquals(hexChecksum, resultChecksum);\n\n        PutObjectRequest request = capturedRequest.getValue();\n        Assert.assertNotNull(request);\n\n        ObjectMetadata requestMetadata = request.getMetadata();\n        Assert.assertEquals(base64Checksum, requestMetadata.getContentMD5());\n        Assert.assertEquals(mimetype, requestMetadata.getContentType());\n        Assert.assertEquals(provider.encodeHeaderValue(userMetaValue),\n                            requestMetadata.getUserMetadata().get(provider.encodeHeaderKey(userMetaName)));\n    }", "signature": "void testAddContent()", "full_signature": "@Test public void testAddContent()", "class_method_signature": "S3StorageProviderTest.testAddContent()", "testcase": true, "constructor": false, "invocations": ["createS3ClientAddContent", "createStream", "put", "addContent", "length", "assertEquals", "getValue", "assertNotNull", "getMetadata", "assertEquals", "getContentMD5", "assertEquals", "getContentType", "assertEquals", "encodeHeaderValue", "get", "getUserMetadata", "encodeHeaderKey"]}, "focal_class": {"identifier": "S3StorageProvider", "superclass": "extends StorageProviderBase", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(S3StorageProvider.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(S3StorageProvider.class)", "var_name": "log"}, {"original_string": "protected static final int MAX_ITEM_COUNT = 1000;", "modifier": "protected static final", "type": "int", "declarator": "MAX_ITEM_COUNT = 1000", "var_name": "MAX_ITEM_COUNT"}, {"original_string": "protected static final StorageClass DEFAULT_STORAGE_CLASS =\n        StorageClass.Standard;", "modifier": "protected static final", "type": "StorageClass", "declarator": "DEFAULT_STORAGE_CLASS =\n        StorageClass.Standard", "var_name": "DEFAULT_STORAGE_CLASS"}, {"original_string": "private static final String UTF_8 = StandardCharsets.UTF_8.name();", "modifier": "private static final", "type": "String", "declarator": "UTF_8 = StandardCharsets.UTF_8.name()", "var_name": "UTF_8"}, {"original_string": "public static final String HIDDEN_SPACE_PREFIX = \"hidden-\";", "modifier": "public static final", "type": "String", "declarator": "HIDDEN_SPACE_PREFIX = \"hidden-\"", "var_name": "HIDDEN_SPACE_PREFIX"}, {"original_string": "protected static final String HEADER_VALUE_PREFIX = UTF_8 + \"''\";", "modifier": "protected static final", "type": "String", "declarator": "HEADER_VALUE_PREFIX = UTF_8 + \"''\"", "var_name": "HEADER_VALUE_PREFIX"}, {"original_string": "protected static final String HEADER_KEY_SUFFIX = \"*\";", "modifier": "protected static final", "type": "String", "declarator": "HEADER_KEY_SUFFIX = \"*\"", "var_name": "HEADER_KEY_SUFFIX"}, {"original_string": "protected String accessKeyId = null;", "modifier": "protected", "type": "String", "declarator": "accessKeyId = null", "var_name": "accessKeyId"}, {"original_string": "protected AmazonS3 s3Client = null;", "modifier": "protected", "type": "AmazonS3", "declarator": "s3Client = null", "var_name": "s3Client"}], "methods": [{"identifier": "S3StorageProvider", "parameters": "(String accessKey, String secretKey)", "modifiers": "public", "return": "", "signature": " S3StorageProvider(String accessKey, String secretKey)", "full_signature": "public  S3StorageProvider(String accessKey, String secretKey)", "class_method_signature": "S3StorageProvider.S3StorageProvider(String accessKey, String secretKey)", "testcase": false, "constructor": true}, {"identifier": "S3StorageProvider", "parameters": "(String accessKey,\n                             String secretKey,\n                             Map<String, String> options)", "modifiers": "public", "return": "", "signature": " S3StorageProvider(String accessKey,\n                             String secretKey,\n                             Map<String, String> options)", "full_signature": "public  S3StorageProvider(String accessKey,\n                             String secretKey,\n                             Map<String, String> options)", "class_method_signature": "S3StorageProvider.S3StorageProvider(String accessKey,\n                             String secretKey,\n                             Map<String, String> options)", "testcase": false, "constructor": true}, {"identifier": "S3StorageProvider", "parameters": "(AmazonS3 s3Client,\n                             String accessKey,\n                             Map<String, String> options)", "modifiers": "public", "return": "", "signature": " S3StorageProvider(AmazonS3 s3Client,\n                             String accessKey,\n                             Map<String, String> options)", "full_signature": "public  S3StorageProvider(AmazonS3 s3Client,\n                             String accessKey,\n                             Map<String, String> options)", "class_method_signature": "S3StorageProvider.S3StorageProvider(AmazonS3 s3Client,\n                             String accessKey,\n                             Map<String, String> options)", "testcase": false, "constructor": true}, {"identifier": "getStorageProviderType", "parameters": "()", "modifiers": "@Override public", "return": "StorageProviderType", "signature": "StorageProviderType getStorageProviderType()", "full_signature": "@Override public StorageProviderType getStorageProviderType()", "class_method_signature": "S3StorageProvider.getStorageProviderType()", "testcase": false, "constructor": false}, {"identifier": "getSpaces", "parameters": "()", "modifiers": "public", "return": "Iterator<String>", "signature": "Iterator<String> getSpaces()", "full_signature": "public Iterator<String> getSpaces()", "class_method_signature": "S3StorageProvider.getSpaces()", "testcase": false, "constructor": false}, {"identifier": "listAllBuckets", "parameters": "()", "modifiers": "private", "return": "List<Bucket>", "signature": "List<Bucket> listAllBuckets()", "full_signature": "private List<Bucket> listAllBuckets()", "class_method_signature": "S3StorageProvider.listAllBuckets()", "testcase": false, "constructor": false}, {"identifier": "getSpaceContents", "parameters": "(String spaceId,\n                                             String prefix)", "modifiers": "public", "return": "Iterator<String>", "signature": "Iterator<String> getSpaceContents(String spaceId,\n                                             String prefix)", "full_signature": "public Iterator<String> getSpaceContents(String spaceId,\n                                             String prefix)", "class_method_signature": "S3StorageProvider.getSpaceContents(String spaceId,\n                                             String prefix)", "testcase": false, "constructor": false}, {"identifier": "getSpaceContentsChunked", "parameters": "(String spaceId,\n                                                String prefix,\n                                                long maxResults,\n                                                String marker)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSpaceContentsChunked(String spaceId,\n                                                String prefix,\n                                                long maxResults,\n                                                String marker)", "full_signature": "public List<String> getSpaceContentsChunked(String spaceId,\n                                                String prefix,\n                                                long maxResults,\n                                                String marker)", "class_method_signature": "S3StorageProvider.getSpaceContentsChunked(String spaceId,\n                                                String prefix,\n                                                long maxResults,\n                                                String marker)", "testcase": false, "constructor": false}, {"identifier": "getCompleteBucketContents", "parameters": "(String bucketName,\n                                                   String prefix,\n                                                   long maxResults,\n                                                   String marker)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getCompleteBucketContents(String bucketName,\n                                                   String prefix,\n                                                   long maxResults,\n                                                   String marker)", "full_signature": "private List<String> getCompleteBucketContents(String bucketName,\n                                                   String prefix,\n                                                   long maxResults,\n                                                   String marker)", "class_method_signature": "S3StorageProvider.getCompleteBucketContents(String bucketName,\n                                                   String prefix,\n                                                   long maxResults,\n                                                   String marker)", "testcase": false, "constructor": false}, {"identifier": "listObjects", "parameters": "(String bucketName,\n                                              String prefix,\n                                              long maxResults,\n                                              String marker)", "modifiers": "private", "return": "List<S3ObjectSummary>", "signature": "List<S3ObjectSummary> listObjects(String bucketName,\n                                              String prefix,\n                                              long maxResults,\n                                              String marker)", "full_signature": "private List<S3ObjectSummary> listObjects(String bucketName,\n                                              String prefix,\n                                              long maxResults,\n                                              String marker)", "class_method_signature": "S3StorageProvider.listObjects(String bucketName,\n                                              String prefix,\n                                              long maxResults,\n                                              String marker)", "testcase": false, "constructor": false}, {"identifier": "spaceExists", "parameters": "(String spaceId)", "modifiers": "protected", "return": "boolean", "signature": "boolean spaceExists(String spaceId)", "full_signature": "protected boolean spaceExists(String spaceId)", "class_method_signature": "S3StorageProvider.spaceExists(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "createSpace", "parameters": "(String spaceId)", "modifiers": "public", "return": "void", "signature": "void createSpace(String spaceId)", "full_signature": "public void createSpace(String spaceId)", "class_method_signature": "S3StorageProvider.createSpace(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "createBucket", "parameters": "(String spaceId)", "modifiers": "protected", "return": "Bucket", "signature": "Bucket createBucket(String spaceId)", "full_signature": "protected Bucket createBucket(String spaceId)", "class_method_signature": "S3StorageProvider.createBucket(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "getHiddenBucketName", "parameters": "(String spaceId)", "modifiers": "protected", "return": "String", "signature": "String getHiddenBucketName(String spaceId)", "full_signature": "protected String getHiddenBucketName(String spaceId)", "class_method_signature": "S3StorageProvider.getHiddenBucketName(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "createHiddenSpace", "parameters": "(String spaceId, int expirationInDays)", "modifiers": "public", "return": "String", "signature": "String createHiddenSpace(String spaceId, int expirationInDays)", "full_signature": "public String createHiddenSpace(String spaceId, int expirationInDays)", "class_method_signature": "S3StorageProvider.createHiddenSpace(String spaceId, int expirationInDays)", "testcase": false, "constructor": false}, {"identifier": "getStoragePolicy", "parameters": "()", "modifiers": "protected", "return": "StoragePolicy", "signature": "StoragePolicy getStoragePolicy()", "full_signature": "protected StoragePolicy getStoragePolicy()", "class_method_signature": "S3StorageProvider.getStoragePolicy()", "testcase": false, "constructor": false}, {"identifier": "setSpaceLifecycle", "parameters": "(String bucketName,\n                                  BucketLifecycleConfiguration config)", "modifiers": "public", "return": "void", "signature": "void setSpaceLifecycle(String bucketName,\n                                  BucketLifecycleConfiguration config)", "full_signature": "public void setSpaceLifecycle(String bucketName,\n                                  BucketLifecycleConfiguration config)", "class_method_signature": "S3StorageProvider.setSpaceLifecycle(String bucketName,\n                                  BucketLifecycleConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "getNewBucketName", "parameters": "(String spaceId)", "modifiers": "protected", "return": "String", "signature": "String getNewBucketName(String spaceId)", "full_signature": "protected String getNewBucketName(String spaceId)", "class_method_signature": "S3StorageProvider.getNewBucketName(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "formattedDate", "parameters": "(Date date)", "modifiers": "protected", "return": "String", "signature": "String formattedDate(Date date)", "full_signature": "protected String formattedDate(Date date)", "class_method_signature": "S3StorageProvider.formattedDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "removeSpace", "parameters": "(String spaceId)", "modifiers": "public", "return": "void", "signature": "void removeSpace(String spaceId)", "full_signature": "public void removeSpace(String spaceId)", "class_method_signature": "S3StorageProvider.removeSpace(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "getAllSpaceProperties", "parameters": "(String spaceId)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> getAllSpaceProperties(String spaceId)", "full_signature": "protected Map<String, String> getAllSpaceProperties(String spaceId)", "class_method_signature": "S3StorageProvider.getAllSpaceProperties(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "getSpaceCount", "parameters": "(String spaceId, int maxCount)", "modifiers": "protected", "return": "String", "signature": "String getSpaceCount(String spaceId, int maxCount)", "full_signature": "protected String getSpaceCount(String spaceId, int maxCount)", "class_method_signature": "S3StorageProvider.getSpaceCount(String spaceId, int maxCount)", "testcase": false, "constructor": false}, {"identifier": "getBucketCreationDate", "parameters": "(String bucketName)", "modifiers": "protected", "return": "String", "signature": "String getBucketCreationDate(String bucketName)", "full_signature": "protected String getBucketCreationDate(String bucketName)", "class_method_signature": "S3StorageProvider.getBucketCreationDate(String bucketName)", "testcase": false, "constructor": false}, {"identifier": "doSetSpaceProperties", "parameters": "(String spaceId,\n                                        Map<String, String> spaceProperties)", "modifiers": "protected", "return": "void", "signature": "void doSetSpaceProperties(String spaceId,\n                                        Map<String, String> spaceProperties)", "full_signature": "protected void doSetSpaceProperties(String spaceId,\n                                        Map<String, String> spaceProperties)", "class_method_signature": "S3StorageProvider.doSetSpaceProperties(String spaceId,\n                                        Map<String, String> spaceProperties)", "testcase": false, "constructor": false}, {"identifier": "replaceInMapValues", "parameters": "(Map<String, String> map,\n                                                   String oldVal,\n                                                   String newVal)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> replaceInMapValues(Map<String, String> map,\n                                                   String oldVal,\n                                                   String newVal)", "full_signature": "protected Map<String, String> replaceInMapValues(Map<String, String> map,\n                                                   String oldVal,\n                                                   String newVal)", "class_method_signature": "S3StorageProvider.replaceInMapValues(Map<String, String> map,\n                                                   String oldVal,\n                                                   String newVal)", "testcase": false, "constructor": false}, {"identifier": "addHiddenContent", "parameters": "(String spaceId,\n                                   String contentId,\n                                   String contentMimeType,\n                                   InputStream content)", "modifiers": "public", "return": "String", "signature": "String addHiddenContent(String spaceId,\n                                   String contentId,\n                                   String contentMimeType,\n                                   InputStream content)", "full_signature": "public String addHiddenContent(String spaceId,\n                                   String contentId,\n                                   String contentMimeType,\n                                   InputStream content)", "class_method_signature": "S3StorageProvider.addHiddenContent(String spaceId,\n                                   String contentId,\n                                   String contentMimeType,\n                                   InputStream content)", "testcase": false, "constructor": false}, {"identifier": "addContent", "parameters": "(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content)", "modifiers": "public", "return": "String", "signature": "String addContent(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content)", "full_signature": "public String addContent(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content)", "class_method_signature": "S3StorageProvider.addContent(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content)", "testcase": false, "constructor": false}, {"identifier": "removeContentEncoding", "parameters": "(Map<String, String> properties)", "modifiers": "private", "return": "String", "signature": "String removeContentEncoding(Map<String, String> properties)", "full_signature": "private String removeContentEncoding(Map<String, String> properties)", "class_method_signature": "S3StorageProvider.removeContentEncoding(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "doesContentExistWithExpectedChecksum", "parameters": "(String bucketName,\n                                                          String contentId,\n                                                          String expectedChecksum)", "modifiers": "protected", "return": "String", "signature": "String doesContentExistWithExpectedChecksum(String bucketName,\n                                                          String contentId,\n                                                          String expectedChecksum)", "full_signature": "protected String doesContentExistWithExpectedChecksum(String bucketName,\n                                                          String contentId,\n                                                          String expectedChecksum)", "class_method_signature": "S3StorageProvider.doesContentExistWithExpectedChecksum(String bucketName,\n                                                          String contentId,\n                                                          String expectedChecksum)", "testcase": false, "constructor": false}, {"identifier": "wait", "parameters": "(int seconds)", "modifiers": "protected", "return": "void", "signature": "void wait(int seconds)", "full_signature": "protected void wait(int seconds)", "class_method_signature": "S3StorageProvider.wait(int seconds)", "testcase": false, "constructor": false}, {"identifier": "copyContent", "parameters": "(String sourceSpaceId,\n                              String sourceContentId,\n                              String destSpaceId,\n                              String destContentId)", "modifiers": "@Override public", "return": "String", "signature": "String copyContent(String sourceSpaceId,\n                              String sourceContentId,\n                              String destSpaceId,\n                              String destContentId)", "full_signature": "@Override public String copyContent(String sourceSpaceId,\n                              String sourceContentId,\n                              String destSpaceId,\n                              String destContentId)", "class_method_signature": "S3StorageProvider.copyContent(String sourceSpaceId,\n                              String sourceContentId,\n                              String destSpaceId,\n                              String destContentId)", "testcase": false, "constructor": false}, {"identifier": "doCopyObject", "parameters": "(CopyObjectRequest request)", "modifiers": "private", "return": "CopyObjectResult", "signature": "CopyObjectResult doCopyObject(CopyObjectRequest request)", "full_signature": "private CopyObjectResult doCopyObject(CopyObjectRequest request)", "class_method_signature": "S3StorageProvider.doCopyObject(CopyObjectRequest request)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(String spaceId, String contentId)", "modifiers": "public", "return": "RetrievedContent", "signature": "RetrievedContent getContent(String spaceId, String contentId)", "full_signature": "public RetrievedContent getContent(String spaceId, String contentId)", "class_method_signature": "S3StorageProvider.getContent(String spaceId, String contentId)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(String spaceId, String contentId, String range)", "modifiers": "public", "return": "RetrievedContent", "signature": "RetrievedContent getContent(String spaceId, String contentId, String range)", "full_signature": "public RetrievedContent getContent(String spaceId, String contentId, String range)", "class_method_signature": "S3StorageProvider.getContent(String spaceId, String contentId, String range)", "testcase": false, "constructor": false}, {"identifier": "deleteContent", "parameters": "(String spaceId, String contentId)", "modifiers": "public", "return": "void", "signature": "void deleteContent(String spaceId, String contentId)", "full_signature": "public void deleteContent(String spaceId, String contentId)", "class_method_signature": "S3StorageProvider.deleteContent(String spaceId, String contentId)", "testcase": false, "constructor": false}, {"identifier": "setContentProperties", "parameters": "(String spaceId,\n                                     String contentId,\n                                     Map<String, String> contentProperties)", "modifiers": "public", "return": "void", "signature": "void setContentProperties(String spaceId,\n                                     String contentId,\n                                     Map<String, String> contentProperties)", "full_signature": "public void setContentProperties(String spaceId,\n                                     String contentId,\n                                     Map<String, String> contentProperties)", "class_method_signature": "S3StorageProvider.setContentProperties(String spaceId,\n                                     String contentId,\n                                     Map<String, String> contentProperties)", "testcase": false, "constructor": false}, {"identifier": "removeCalculatedProperties", "parameters": "(Map<String, String> contentProperties)", "modifiers": "@Override protected", "return": "Map<String, String>", "signature": "Map<String, String> removeCalculatedProperties(Map<String, String> contentProperties)", "full_signature": "@Override protected Map<String, String> removeCalculatedProperties(Map<String, String> contentProperties)", "class_method_signature": "S3StorageProvider.removeCalculatedProperties(Map<String, String> contentProperties)", "testcase": false, "constructor": false}, {"identifier": "throwIfContentNotExist", "parameters": "(String bucketName, String contentId)", "modifiers": "protected", "return": "void", "signature": "void throwIfContentNotExist(String bucketName, String contentId)", "full_signature": "protected void throwIfContentNotExist(String bucketName, String contentId)", "class_method_signature": "S3StorageProvider.throwIfContentNotExist(String bucketName, String contentId)", "testcase": false, "constructor": false}, {"identifier": "getObjectDetails", "parameters": "(String bucketName,\n                                            String contentId,\n                                            boolean retry)", "modifiers": "private", "return": "ObjectMetadata", "signature": "ObjectMetadata getObjectDetails(String bucketName,\n                                            String contentId,\n                                            boolean retry)", "full_signature": "private ObjectMetadata getObjectDetails(String bucketName,\n                                            String contentId,\n                                            boolean retry)", "class_method_signature": "S3StorageProvider.getObjectDetails(String bucketName,\n                                            String contentId,\n                                            boolean retry)", "testcase": false, "constructor": false}, {"identifier": "updateObjectProperties", "parameters": "(String bucketName,\n                                          String contentId,\n                                          ObjectMetadata objMetadata)", "modifiers": "protected", "return": "void", "signature": "void updateObjectProperties(String bucketName,\n                                          String contentId,\n                                          ObjectMetadata objMetadata)", "full_signature": "protected void updateObjectProperties(String bucketName,\n                                          String contentId,\n                                          ObjectMetadata objMetadata)", "class_method_signature": "S3StorageProvider.updateObjectProperties(String bucketName,\n                                          String contentId,\n                                          ObjectMetadata objMetadata)", "testcase": false, "constructor": false}, {"identifier": "getContentProperties", "parameters": "(String spaceId,\n                                                    String contentId)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getContentProperties(String spaceId,\n                                                    String contentId)", "full_signature": "public Map<String, String> getContentProperties(String spaceId,\n                                                    String contentId)", "class_method_signature": "S3StorageProvider.getContentProperties(String spaceId,\n                                                    String contentId)", "testcase": false, "constructor": false}, {"identifier": "getSpaceProperties", "parameters": "(String spaceId)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getSpaceProperties(String spaceId)", "full_signature": "@Override public Map<String, String> getSpaceProperties(String spaceId)", "class_method_signature": "S3StorageProvider.getSpaceProperties(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "prepContentProperties", "parameters": "(ObjectMetadata objMetadata)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> prepContentProperties(ObjectMetadata objMetadata)", "full_signature": "protected Map<String, String> prepContentProperties(ObjectMetadata objMetadata)", "class_method_signature": "S3StorageProvider.prepContentProperties(ObjectMetadata objMetadata)", "testcase": false, "constructor": false}, {"identifier": "getETagValue", "parameters": "(String etag)", "modifiers": "protected", "return": "String", "signature": "String getETagValue(String etag)", "full_signature": "protected String getETagValue(String etag)", "class_method_signature": "S3StorageProvider.getETagValue(String etag)", "testcase": false, "constructor": false}, {"identifier": "getBucketName", "parameters": "(String spaceId)", "modifiers": "public", "return": "String", "signature": "String getBucketName(String spaceId)", "full_signature": "public String getBucketName(String spaceId)", "class_method_signature": "S3StorageProvider.getBucketName(String spaceId)", "testcase": false, "constructor": false}, {"identifier": "getSpaceId", "parameters": "(String bucketName)", "modifiers": "protected", "return": "String", "signature": "String getSpaceId(String bucketName)", "full_signature": "protected String getSpaceId(String bucketName)", "class_method_signature": "S3StorageProvider.getSpaceId(String bucketName)", "testcase": false, "constructor": false}, {"identifier": "isSpace", "parameters": "(String bucketName)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSpace(String bucketName)", "full_signature": "protected boolean isSpace(String bucketName)", "class_method_signature": "S3StorageProvider.isSpace(String bucketName)", "testcase": false, "constructor": false}, {"identifier": "getSpaceFree", "parameters": "(String name)", "modifiers": "protected", "return": "String", "signature": "String getSpaceFree(String name)", "full_signature": "protected String getSpaceFree(String name)", "class_method_signature": "S3StorageProvider.getSpaceFree(String name)", "testcase": false, "constructor": false}, {"identifier": "getWithSpace", "parameters": "(String name)", "modifiers": "protected", "return": "String", "signature": "String getWithSpace(String name)", "full_signature": "protected String getWithSpace(String name)", "class_method_signature": "S3StorageProvider.getWithSpace(String name)", "testcase": false, "constructor": false}, {"identifier": "encodeHeaderValue", "parameters": "(String userMetaValue)", "modifiers": "static protected", "return": "String", "signature": "String encodeHeaderValue(String userMetaValue)", "full_signature": "static protected String encodeHeaderValue(String userMetaValue)", "class_method_signature": "S3StorageProvider.encodeHeaderValue(String userMetaValue)", "testcase": false, "constructor": false}, {"identifier": "decodeHeaderValue", "parameters": "(String userMetaValue)", "modifiers": "static protected", "return": "String", "signature": "String decodeHeaderValue(String userMetaValue)", "full_signature": "static protected String decodeHeaderValue(String userMetaValue)", "class_method_signature": "S3StorageProvider.decodeHeaderValue(String userMetaValue)", "testcase": false, "constructor": false}, {"identifier": "encodeHeaderKey", "parameters": "(String userMetaName)", "modifiers": "static protected", "return": "String", "signature": "String encodeHeaderKey(String userMetaName)", "full_signature": "static protected String encodeHeaderKey(String userMetaName)", "class_method_signature": "S3StorageProvider.encodeHeaderKey(String userMetaName)", "testcase": false, "constructor": false}, {"identifier": "decodeHeaderKey", "parameters": "(String userMetaName)", "modifiers": "static protected", "return": "String", "signature": "String decodeHeaderKey(String userMetaName)", "full_signature": "static protected String decodeHeaderKey(String userMetaName)", "class_method_signature": "S3StorageProvider.decodeHeaderKey(String userMetaName)", "testcase": false, "constructor": false}], "file": "s3storageprovider/src/main/java/org/duracloud/s3storage/S3StorageProvider.java"}, "focal_method": {"identifier": "addContent", "parameters": "(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content)", "modifiers": "public", "return": "String", "body": "public String addContent(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content) {\n        log.debug(\"addContent(\" + spaceId + \", \" + contentId + \", \" +\n                  contentMimeType + \", \" + contentSize + \", \" + contentChecksum + \")\");\n\n        // Will throw if bucket does not exist\n        String bucketName = getBucketName(spaceId);\n\n        // Wrap the content in order to be able to retrieve a checksum\n        ChecksumInputStream wrappedContent =\n            new ChecksumInputStream(content, contentChecksum);\n\n        String contentEncoding = removeContentEncoding(userProperties);\n\n        userProperties = removeCalculatedProperties(userProperties);\n\n        if (contentMimeType == null || contentMimeType.equals(\"\")) {\n            contentMimeType = DEFAULT_MIMETYPE;\n        }\n\n        ObjectMetadata objMetadata = new ObjectMetadata();\n        objMetadata.setContentType(contentMimeType);\n        if (contentSize > 0) {\n            objMetadata.setContentLength(contentSize);\n        }\n        if (null != contentChecksum && !contentChecksum.isEmpty()) {\n            String encodedChecksum =\n                ChecksumUtil.convertToBase64Encoding(contentChecksum);\n            objMetadata.setContentMD5(encodedChecksum);\n        }\n\n        if (contentEncoding != null) {\n            objMetadata.setContentEncoding(contentEncoding);\n        }\n\n        if (userProperties != null) {\n            for (String key : userProperties.keySet()) {\n                String value = userProperties.get(key);\n\n                if (log.isDebugEnabled()) {\n                    log.debug(\"[\" + key + \"|\" + value + \"]\");\n                }\n\n                objMetadata.addUserMetadata(getSpaceFree(encodeHeaderKey(key)), encodeHeaderValue(value));\n            }\n        }\n\n        PutObjectRequest putRequest = new PutObjectRequest(bucketName,\n                                                           contentId,\n                                                           wrappedContent,\n                                                           objMetadata);\n        putRequest.setStorageClass(DEFAULT_STORAGE_CLASS);\n        putRequest.setCannedAcl(CannedAccessControlList.Private);\n\n        // Add the object\n        String etag;\n        try {\n            PutObjectResult putResult = s3Client.putObject(putRequest);\n            etag = putResult.getETag();\n        } catch (AmazonClientException e) {\n            if (e instanceof AmazonS3Exception) {\n                AmazonS3Exception s3Ex = (AmazonS3Exception) e;\n                String errorCode = s3Ex.getErrorCode();\n                Integer statusCode = s3Ex.getStatusCode();\n                String message =\n                    MessageFormat.format(\"exception putting object {0} into {1}: errorCode={2},\" +\n                                         \"  statusCode={3}, errorMessage={4}\",\n                                         contentId,\n                                         bucketName,\n                                         errorCode,\n                                         statusCode,\n                                         e.getMessage());\n\n                if (errorCode.equals(\"InvalidDigest\") || errorCode.equals(\"BadDigest\")) {\n                    log.error(message, e);\n\n                    String err = \"Checksum mismatch detected attempting to add \" + \"content \" +\n                                 contentId + \" to S3 bucket \" + bucketName + \". Content was not added.\";\n                    throw new ChecksumMismatchException(err, e, NO_RETRY);\n                } else if (errorCode.equals(\"IncompleteBody\")) {\n                    log.error(message, e);\n                    throw new StorageException(\"The content body was incomplete for \"\n                                               + contentId\n                                               + \" to S3 bucket \"\n                                               + bucketName\n                                               + \". Content was not added.\",\n                                               e,\n                                               NO_RETRY);\n                } else if (!statusCode.equals(HttpStatus.SC_SERVICE_UNAVAILABLE)\n                           && !statusCode.equals(HttpStatus.SC_NOT_FOUND)) {\n                    log.error(message, e);\n                } else {\n                    log.warn(message, e);\n                }\n            } else {\n                String err = MessageFormat.format(\"exception putting object {0} into {1}: {2}\",\n                                                  contentId,\n                                                  bucketName,\n                                                  e.getMessage());\n                log.error(err, e);\n            }\n\n            // Check to see if file landed successfully in S3, despite the exception\n            etag = doesContentExistWithExpectedChecksum(bucketName, contentId, contentChecksum);\n            if (null == etag) {\n                String err = \"Could not add content \" + contentId +\n                             \" with type \" + contentMimeType +\n                             \" and size \" + contentSize +\n                             \" to S3 bucket \" + bucketName + \" due to error: \" +\n                             e.getMessage();\n                throw new StorageException(err, e, NO_RETRY);\n            }\n        }\n\n        // Compare checksum\n        String providerChecksum = getETagValue(etag);\n        String checksum = wrappedContent.getMD5();\n        StorageProviderUtil.compareChecksum(providerChecksum,\n                                            spaceId,\n                                            contentId,\n                                            checksum);\n        return providerChecksum;\n    }", "signature": "String addContent(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content)", "full_signature": "public String addContent(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content)", "class_method_signature": "S3StorageProvider.addContent(String spaceId,\n                             String contentId,\n                             String contentMimeType,\n                             Map<String, String> userProperties,\n                             long contentSize,\n                             String contentChecksum,\n                             InputStream content)", "testcase": false, "constructor": false, "invocations": ["debug", "getBucketName", "removeContentEncoding", "removeCalculatedProperties", "equals", "setContentType", "setContentLength", "isEmpty", "convertToBase64Encoding", "setContentMD5", "setContentEncoding", "keySet", "get", "isDebugEnabled", "debug", "addUserMetadata", "getSpaceFree", "encodeHeaderKey", "encodeHeaderValue", "setStorageClass", "setCannedAcl", "putObject", "getETag", "getErrorCode", "getStatusCode", "format", "getMessage", "equals", "equals", "error", "equals", "error", "equals", "equals", "error", "warn", "format", "getMessage", "error", "doesContentExistWithExpectedChecksum", "getMessage", "getETagValue", "getMD5", "compareChecksum"]}, "repository": {"repo_id": 3337772, "url": "https://github.com/duracloud/duracloud", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 7, "size": 76851, "license": "licensed"}}