{"test_class": {"identifier": "ChunkableContentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ChunkableContent chunkable;", "modifier": "private", "type": "ChunkableContent", "declarator": "chunkable", "var_name": "chunkable"}, {"original_string": "private String contentId = \"contentId\";", "modifier": "private", "type": "String", "declarator": "contentId = \"contentId\"", "var_name": "contentId"}, {"original_string": "private final long MAX_CHUNK_SIZE = 10000;", "modifier": "private final", "type": "long", "declarator": "MAX_CHUNK_SIZE = 10000", "var_name": "MAX_CHUNK_SIZE"}, {"original_string": "private DigestInputStream contentInputStream;", "modifier": "private", "type": "DigestInputStream", "declarator": "contentInputStream", "var_name": "contentInputStream"}, {"original_string": "private MessageDigest contentChecksum;", "modifier": "private", "type": "MessageDigest", "declarator": "contentChecksum", "var_name": "contentChecksum"}, {"original_string": "private long contentSize;", "modifier": "private", "type": "long", "declarator": "contentSize", "var_name": "contentSize"}, {"original_string": "private List<File> chunkFiles;", "modifier": "private", "type": "List<File>", "declarator": "chunkFiles", "var_name": "chunkFiles"}, {"original_string": "private File contentFile;", "modifier": "private", "type": "File", "declarator": "contentFile", "var_name": "contentFile"}, {"original_string": "private final String CHUNK_PREFIX = \"a-chunk-\";", "modifier": "private final", "type": "String", "declarator": "CHUNK_PREFIX = \"a-chunk-\"", "var_name": "CHUNK_PREFIX"}, {"original_string": "private final String LARGE_PREFIX = \"a-large-\";", "modifier": "private final", "type": "String", "declarator": "LARGE_PREFIX = \"a-large-\"", "var_name": "LARGE_PREFIX"}], "file": "chunk/src/test/java/org/duracloud/chunk/ChunkableContentTest.java"}, "test_case": {"identifier": "testManifest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testManifest() throws Exception {\n        doChunking();\n        ChunksManifest manifest = chunkable.finalizeManifest();\n        Assert.assertNotNull(manifest);\n\n        ChunksManifestBean.ManifestHeader header = manifest.getHeader();\n        Assert.assertNotNull(header);\n\n        List<ChunksManifestBean.ManifestEntry> entries = manifest.getEntries();\n        Assert.assertNotNull(entries);\n        Assert.assertEquals(chunkFiles.size(), entries.size());\n\n        KnownLengthInputStream body = manifest.getBody();\n        Assert.assertNotNull(body);\n        Assert.assertTrue(body.getLength() > 0);\n    }", "signature": "void testManifest()", "full_signature": "@Test public void testManifest()", "class_method_signature": "ChunkableContentTest.testManifest()", "testcase": true, "constructor": false, "invocations": ["doChunking", "finalizeManifest", "assertNotNull", "getHeader", "assertNotNull", "getEntries", "assertNotNull", "assertEquals", "size", "size", "getBody", "assertNotNull", "assertTrue", "getLength"]}, "focal_class": {"identifier": "ChunkableContent", "superclass": "", "interfaces": "implements Iterable<ChunkInputStream>, Iterator<ChunkInputStream>", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(ChunkableContent.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ChunkableContent.class)", "var_name": "log"}, {"original_string": "private CountingDigestInputStream largeStream;", "modifier": "private", "type": "CountingDigestInputStream", "declarator": "largeStream", "var_name": "largeStream"}, {"original_string": "private String contentId;", "modifier": "private", "type": "String", "declarator": "contentId", "var_name": "contentId"}, {"original_string": "private long maxChunkSize;", "modifier": "private", "type": "long", "declarator": "maxChunkSize", "var_name": "maxChunkSize"}, {"original_string": "private long contentSize;", "modifier": "private", "type": "long", "declarator": "contentSize", "var_name": "contentSize"}, {"original_string": "private ChunkInputStream currentChunk;", "modifier": "private", "type": "ChunkInputStream", "declarator": "currentChunk", "var_name": "currentChunk"}, {"original_string": "private ChunksManifest manifest;", "modifier": "private", "type": "ChunksManifest", "declarator": "manifest", "var_name": "manifest"}, {"original_string": "private long bytesRead;", "modifier": "private", "type": "long", "declarator": "bytesRead", "var_name": "bytesRead"}, {"original_string": "private boolean preserveChunkMD5s = false;", "modifier": "private", "type": "boolean", "declarator": "preserveChunkMD5s = false", "var_name": "preserveChunkMD5s"}, {"original_string": "private static final String DEFAULT_MIME = \"application/octet-stream\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_MIME = \"application/octet-stream\"", "var_name": "DEFAULT_MIME"}, {"original_string": "private final int BUFFER_SIZE;", "modifier": "private final", "type": "int", "declarator": "BUFFER_SIZE", "var_name": "BUFFER_SIZE"}], "methods": [{"identifier": "ChunkableContent", "parameters": "(String contentId,\n                            InputStream largeStream,\n                            long contentSize,\n                            long maxChunkSize)", "modifiers": "public", "return": "", "signature": " ChunkableContent(String contentId,\n                            InputStream largeStream,\n                            long contentSize,\n                            long maxChunkSize)", "full_signature": "public  ChunkableContent(String contentId,\n                            InputStream largeStream,\n                            long contentSize,\n                            long maxChunkSize)", "class_method_signature": "ChunkableContent.ChunkableContent(String contentId,\n                            InputStream largeStream,\n                            long contentSize,\n                            long maxChunkSize)", "testcase": false, "constructor": true}, {"identifier": "ChunkableContent", "parameters": "(String contentId,\n                            String contentMimetype,\n                            InputStream largeStream,\n                            long contentSize,\n                            long maxChunkSize)", "modifiers": "public", "return": "", "signature": " ChunkableContent(String contentId,\n                            String contentMimetype,\n                            InputStream largeStream,\n                            long contentSize,\n                            long maxChunkSize)", "full_signature": "public  ChunkableContent(String contentId,\n                            String contentMimetype,\n                            InputStream largeStream,\n                            long contentSize,\n                            long maxChunkSize)", "class_method_signature": "ChunkableContent.ChunkableContent(String contentId,\n                            String contentMimetype,\n                            InputStream largeStream,\n                            long contentSize,\n                            long maxChunkSize)", "testcase": false, "constructor": true}, {"identifier": "calculateBufferSize", "parameters": "(long maxChunkSize)", "modifiers": "protected", "return": "int", "signature": "int calculateBufferSize(long maxChunkSize)", "full_signature": "protected int calculateBufferSize(long maxChunkSize)", "class_method_signature": "ChunkableContent.calculateBufferSize(long maxChunkSize)", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "public boolean hasNext()", "class_method_signature": "ChunkableContent.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "ChunkInputStream", "signature": "ChunkInputStream next()", "full_signature": "public ChunkInputStream next()", "class_method_signature": "ChunkableContent.next()", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addEntry()", "full_signature": "private void addEntry()", "class_method_signature": "ChunkableContent.addEntry()", "testcase": false, "constructor": false}, {"identifier": "calculateNextChunkSize", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long calculateNextChunkSize()", "full_signature": "private long calculateNextChunkSize()", "class_method_signature": "ChunkableContent.calculateNextChunkSize()", "testcase": false, "constructor": false}, {"identifier": "throwIfChunkNotFullyRead", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void throwIfChunkNotFullyRead()", "full_signature": "private void throwIfChunkNotFullyRead()", "class_method_signature": "ChunkableContent.throwIfChunkNotFullyRead()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void remove()", "full_signature": "public void remove()", "class_method_signature": "ChunkableContent.remove()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<ChunkInputStream>", "signature": "Iterator<ChunkInputStream> iterator()", "full_signature": "public Iterator<ChunkInputStream> iterator()", "class_method_signature": "ChunkableContent.iterator()", "testcase": false, "constructor": false}, {"identifier": "setPreserveChunkMD5s", "parameters": "(boolean preserveChunkMD5s)", "modifiers": "public", "return": "void", "signature": "void setPreserveChunkMD5s(boolean preserveChunkMD5s)", "full_signature": "public void setPreserveChunkMD5s(boolean preserveChunkMD5s)", "class_method_signature": "ChunkableContent.setPreserveChunkMD5s(boolean preserveChunkMD5s)", "testcase": false, "constructor": false}, {"identifier": "getMaxChunkSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxChunkSize()", "full_signature": "public long getMaxChunkSize()", "class_method_signature": "ChunkableContent.getMaxChunkSize()", "testcase": false, "constructor": false}, {"identifier": "getManifest", "parameters": "()", "modifiers": "public", "return": "ChunksManifest", "signature": "ChunksManifest getManifest()", "full_signature": "public ChunksManifest getManifest()", "class_method_signature": "ChunkableContent.getManifest()", "testcase": false, "constructor": false}, {"identifier": "finalizeManifest", "parameters": "()", "modifiers": "public", "return": "ChunksManifest", "signature": "ChunksManifest finalizeManifest()", "full_signature": "public ChunksManifest finalizeManifest()", "class_method_signature": "ChunkableContent.finalizeManifest()", "testcase": false, "constructor": false}], "file": "chunk/src/main/java/org/duracloud/chunk/ChunkableContent.java"}, "focal_method": {"identifier": "finalizeManifest", "parameters": "()", "modifiers": "public", "return": "ChunksManifest", "body": "public ChunksManifest finalizeManifest() {\n        addEntry();\n\n        manifest.setMD5OfSourceContent(largeStream.getMD5());\n        IOUtils.closeQuietly(largeStream);\n        return manifest;\n    }", "signature": "ChunksManifest finalizeManifest()", "full_signature": "public ChunksManifest finalizeManifest()", "class_method_signature": "ChunkableContent.finalizeManifest()", "testcase": false, "constructor": false, "invocations": ["addEntry", "setMD5OfSourceContent", "getMD5", "closeQuietly"]}, "repository": {"repo_id": 3337772, "url": "https://github.com/duracloud/duracloud", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 7, "size": 76851, "license": "licensed"}}