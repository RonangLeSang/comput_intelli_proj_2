{"test_class": {"identifier": "GetUrlTaskRunnerTest", "superclass": "extends StreamingTaskRunnerTestBase", "interfaces": "", "fields": [{"original_string": "private final String contentId = \"content-id\";", "modifier": "private final", "type": "String", "declarator": "contentId = \"content-id\"", "var_name": "contentId"}], "file": "s3storageprovider/src/test/java/org/duracloud/s3task/streaming/GetUrlTaskRunnerTest.java"}, "test_case": {"identifier": "testPerformTask4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPerformTask4() throws Exception {\n        BaseStreamingTaskRunner runner =\n            createRunner(createMockStorageProvider(new HashMap<String, String>(), true),\n                         createMockUnwrappedS3StorageProvider(),\n                         createMockS3ClientV1(),\n                         createMockCFClientV1());\n\n        GetUrlTaskParameters taskParams = new GetUrlTaskParameters();\n        taskParams.setSpaceId(spaceId);\n        taskParams.setContentId(contentId);\n\n        try {\n            runner.performTask(taskParams.serialize());\n            fail(\"Exception expected\");\n        } catch (UnsupportedTaskException e) {\n            assertTrue(e.getMessage()\n                        .contains(StorageTaskConstants.ENABLE_STREAMING_TASK_NAME));\n        }\n    }", "signature": "void testPerformTask4()", "full_signature": "@Test public void testPerformTask4()", "class_method_signature": "GetUrlTaskRunnerTest.testPerformTask4()", "testcase": true, "constructor": false, "invocations": ["createRunner", "createMockStorageProvider", "createMockUnwrappedS3StorageProvider", "createMockS3ClientV1", "createMockCFClientV1", "setSpaceId", "setContentId", "performTask", "serialize", "fail", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "GetUrlTaskRunner", "superclass": "extends BaseStreamingTaskRunner", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(GetUrlTaskRunner.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GetUrlTaskRunner.class)", "var_name": "log"}, {"original_string": "private static final String TASK_NAME =\n        StorageTaskConstants.GET_URL_TASK_NAME;", "modifier": "private static final", "type": "String", "declarator": "TASK_NAME =\n        StorageTaskConstants.GET_URL_TASK_NAME", "var_name": "TASK_NAME"}], "methods": [{"identifier": "GetUrlTaskRunner", "parameters": "(StorageProvider s3Provider,\n                            S3StorageProvider unwrappedS3Provider,\n                            AmazonCloudFrontClient cfClient)", "modifiers": "public", "return": "", "signature": " GetUrlTaskRunner(StorageProvider s3Provider,\n                            S3StorageProvider unwrappedS3Provider,\n                            AmazonCloudFrontClient cfClient)", "full_signature": "public  GetUrlTaskRunner(StorageProvider s3Provider,\n                            S3StorageProvider unwrappedS3Provider,\n                            AmazonCloudFrontClient cfClient)", "class_method_signature": "GetUrlTaskRunner.GetUrlTaskRunner(StorageProvider s3Provider,\n                            S3StorageProvider unwrappedS3Provider,\n                            AmazonCloudFrontClient cfClient)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "GetUrlTaskRunner.getName()", "testcase": false, "constructor": false}, {"identifier": "performTask", "parameters": "(String taskParameters)", "modifiers": "public", "return": "String", "signature": "String performTask(String taskParameters)", "full_signature": "public String performTask(String taskParameters)", "class_method_signature": "GetUrlTaskRunner.performTask(String taskParameters)", "testcase": false, "constructor": false}], "file": "s3storageprovider/src/main/java/org/duracloud/s3task/streaming/GetUrlTaskRunner.java"}, "focal_method": {"identifier": "performTask", "parameters": "(String taskParameters)", "modifiers": "public", "return": "String", "body": "public String performTask(String taskParameters) {\n        GetUrlTaskParameters taskParams =\n            GetUrlTaskParameters.deserialize(taskParameters);\n\n        String spaceId = taskParams.getSpaceId();\n        String contentId = taskParams.getContentId();\n        String resourcePrefix = taskParams.getResourcePrefix();\n\n        log.info(\"Performing \" + TASK_NAME + \" task with parameters: spaceId=\" + spaceId +\n                 \", contentId=\" + contentId + \", resourcePrefix=\" + resourcePrefix);\n\n        // Will throw if bucket does not exist\n        String bucketName = unwrappedS3Provider.getBucketName(spaceId);\n        GetUrlTaskResult taskResult = new GetUrlTaskResult();\n\n        // Ensure that streaming service is on\n        checkThatStreamingServiceIsEnabled(spaceId, TASK_NAME);\n\n        // Retrieve the existing distribution for the given space\n        StreamingDistributionSummary existingDist =\n            getExistingDistribution(bucketName);\n        if (null == existingDist) {\n            throw new UnsupportedTaskException(TASK_NAME,\n                                               \"The \" + TASK_NAME + \" task can only be used after a space has \" +\n                                               \"been configured to enable open streaming. Use \" +\n                                               StorageTaskConstants.ENABLE_STREAMING_TASK_NAME +\n                                               \" to enable open streaming on this space.\");\n        }\n        String domainName = existingDist.getDomainName();\n\n        // Verify that this is an open distribution\n        if (!existingDist.getTrustedSigners().getItems().isEmpty()) {\n            throw new UnsupportedTaskException(TASK_NAME,\n                                               \"The \" + TASK_NAME + \" task cannot be used to request a stream \" +\n                                               \"from a secure distribution. Use \" +\n                                               StorageTaskConstants.GET_SIGNED_URL_TASK_NAME + \" instead.\");\n        }\n\n        // Create the resource Id, which may or may not require a prefix\n        // (such as \"mp4:\" for an mp4 file) depending on the intended player\n        String resourceId = contentId;\n        if (null != resourcePrefix && !resourcePrefix.equals(\"\")) {\n            resourceId = resourcePrefix + contentId;\n        }\n\n        taskResult.setStreamUrl(\"rtmp://\" + domainName + \"/cfx/st/\" + resourceId);\n\n        String toReturn = taskResult.serialize();\n        log.info(\"Result of \" + TASK_NAME + \" task: \" + toReturn);\n        return toReturn;\n    }", "signature": "String performTask(String taskParameters)", "full_signature": "public String performTask(String taskParameters)", "class_method_signature": "GetUrlTaskRunner.performTask(String taskParameters)", "testcase": false, "constructor": false, "invocations": ["deserialize", "getSpaceId", "getContentId", "getResourcePrefix", "info", "getBucketName", "checkThatStreamingServiceIsEnabled", "getExistingDistribution", "getDomainName", "isEmpty", "getItems", "getTrustedSigners", "equals", "setStreamUrl", "serialize", "info"]}, "repository": {"repo_id": 3337772, "url": "https://github.com/duracloud/duracloud", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 7, "size": 76851, "license": "licensed"}}