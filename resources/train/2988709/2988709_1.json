{"test_class": {"identifier": "TestCoreGraph", "superclass": "extends SQLRepositoryTestCase", "interfaces": "", "fields": [{"original_string": "public static final String DC_TERMS_NS = \"http://purl.org/dc/terms/\";", "modifier": "public static final", "type": "String", "declarator": "DC_TERMS_NS = \"http://purl.org/dc/terms/\"", "var_name": "DC_TERMS_NS"}, {"original_string": "private static final String GRAPH_NAME = \"myrelations\";", "modifier": "private static final", "type": "String", "declarator": "GRAPH_NAME = \"myrelations\"", "var_name": "GRAPH_NAME"}, {"original_string": "private RelationManager service;", "modifier": "private", "type": "RelationManager", "declarator": "service", "var_name": "service"}, {"original_string": "private CoreGraph graph;", "modifier": "private", "type": "CoreGraph", "declarator": "graph", "var_name": "graph"}, {"original_string": "private List<Statement> statements;", "modifier": "private", "type": "List<Statement>", "declarator": "statements", "var_name": "statements"}, {"original_string": "private Resource doc1;", "modifier": "private", "type": "Resource", "declarator": "doc1", "var_name": "doc1"}, {"original_string": "private Resource doc2;", "modifier": "private", "type": "Resource", "declarator": "doc2", "var_name": "doc2"}, {"original_string": "private QNameResource isBasedOn;", "modifier": "private", "type": "QNameResource", "declarator": "isBasedOn", "var_name": "isBasedOn"}, {"original_string": "private QNameResource references;", "modifier": "private", "type": "QNameResource", "declarator": "references", "var_name": "references"}], "file": "nuxeo-platform-relations/nuxeo-platform-relations-core/src/test/java/org/nuxeo/ecm/platform/relations/TestCoreGraph.java"}, "test_case": {"identifier": "testSetOptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetOptions() {\n        Map<String, String> options = new HashMap<String, String>();\n        options.put(CoreGraph.OPTION_DOCTYPE, \"Foo\");\n        try {\n            graph.setOptions(options);\n            fail(\"Should have raised IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // ok\n        }\n        options.put(CoreGraph.OPTION_DOCTYPE, \"Relation\");\n        graph.setOptions(options);\n    }", "signature": "void testSetOptions()", "full_signature": "@Test public void testSetOptions()", "class_method_signature": "TestCoreGraph.testSetOptions()", "testcase": true, "constructor": false, "invocations": ["put", "setOptions", "fail", "put", "setOptions"]}, "focal_class": {"identifier": "CoreGraph", "superclass": "", "interfaces": "implements Graph", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Log log = LogFactory.getLog(CoreGraph.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(CoreGraph.class)", "var_name": "log"}, {"original_string": "public static final String OPTION_DOCTYPE = \"doctype\";", "modifier": "public static final", "type": "String", "declarator": "OPTION_DOCTYPE = \"doctype\"", "var_name": "OPTION_DOCTYPE"}, {"original_string": "public static final String REL_TYPE = \"Relation\";", "modifier": "public static final", "type": "String", "declarator": "REL_TYPE = \"Relation\"", "var_name": "REL_TYPE"}, {"original_string": "public static final String REL_PREDICATE = \"relation:predicate\";", "modifier": "public static final", "type": "String", "declarator": "REL_PREDICATE = \"relation:predicate\"", "var_name": "REL_PREDICATE"}, {"original_string": "public static final String REL_SOURCE_ID = \"relation:source\";", "modifier": "public static final", "type": "String", "declarator": "REL_SOURCE_ID = \"relation:source\"", "var_name": "REL_SOURCE_ID"}, {"original_string": "public static final String REL_SOURCE_URI = \"relation:sourceUri\";", "modifier": "public static final", "type": "String", "declarator": "REL_SOURCE_URI = \"relation:sourceUri\"", "var_name": "REL_SOURCE_URI"}, {"original_string": "public static final String REL_TARGET_ID = \"relation:target\";", "modifier": "public static final", "type": "String", "declarator": "REL_TARGET_ID = \"relation:target\"", "var_name": "REL_TARGET_ID"}, {"original_string": "public static final String REL_TARGET_URI = \"relation:targetUri\";", "modifier": "public static final", "type": "String", "declarator": "REL_TARGET_URI = \"relation:targetUri\"", "var_name": "REL_TARGET_URI"}, {"original_string": "public static final String REL_TARGET_STRING = \"relation:targetString\";", "modifier": "public static final", "type": "String", "declarator": "REL_TARGET_STRING = \"relation:targetString\"", "var_name": "REL_TARGET_STRING"}, {"original_string": "public static final String DC_CREATED = \"dc:created\";", "modifier": "public static final", "type": "String", "declarator": "DC_CREATED = \"dc:created\"", "var_name": "DC_CREATED"}, {"original_string": "public static final String DC_CREATOR = \"dc:creator\";", "modifier": "public static final", "type": "String", "declarator": "DC_CREATOR = \"dc:creator\"", "var_name": "DC_CREATOR"}, {"original_string": "public static final String DC_MODIFIED = \"dc:modified\";", "modifier": "public static final", "type": "String", "declarator": "DC_MODIFIED = \"dc:modified\"", "var_name": "DC_MODIFIED"}, {"original_string": "public static final String DC_TITLE = \"dc:title\";", "modifier": "public static final", "type": "String", "declarator": "DC_TITLE = \"dc:title\"", "var_name": "DC_TITLE"}, {"original_string": "public static final String DC_DESCRIPTION = \"dc:description\";", "modifier": "public static final", "type": "String", "declarator": "DC_DESCRIPTION = \"dc:description\"", "var_name": "DC_DESCRIPTION"}, {"original_string": "public static String BLANK_NS = \"-:\";", "modifier": "public static", "type": "String", "declarator": "BLANK_NS = \"-:\"", "var_name": "BLANK_NS"}, {"original_string": "public static String DOCUMENT_NAMESPACE = RelationConstants.DOCUMENT_NAMESPACE;", "modifier": "public static", "type": "String", "declarator": "DOCUMENT_NAMESPACE = RelationConstants.DOCUMENT_NAMESPACE", "var_name": "DOCUMENT_NAMESPACE"}, {"original_string": "public static String DOCUMENT_NAMESPACE2 = DOCUMENT_NAMESPACE.substring(0,\n            DOCUMENT_NAMESPACE.length() - 1);", "modifier": "public static", "type": "String", "declarator": "DOCUMENT_NAMESPACE2 = DOCUMENT_NAMESPACE.substring(0,\n            DOCUMENT_NAMESPACE.length() - 1)", "var_name": "DOCUMENT_NAMESPACE2"}, {"original_string": "public static final String COMMENT_NAMESPACE = \"http://www.nuxeo.org/comments/uid\";", "modifier": "public static final", "type": "String", "declarator": "COMMENT_NAMESPACE = \"http://www.nuxeo.org/comments/uid\"", "var_name": "COMMENT_NAMESPACE"}, {"original_string": "public static final String[] DOC_NAMESPACES = { DOCUMENT_NAMESPACE,\n            DOCUMENT_NAMESPACE2, COMMENT_NAMESPACE };", "modifier": "public static final", "type": "String[]", "declarator": "DOC_NAMESPACES = { DOCUMENT_NAMESPACE,\n            DOCUMENT_NAMESPACE2, COMMENT_NAMESPACE }", "var_name": "DOC_NAMESPACES"}, {"original_string": "protected static final List<Statement> EMPTY_STATEMENTS = Collections.emptyList();", "modifier": "protected static final", "type": "List<Statement>", "declarator": "EMPTY_STATEMENTS = Collections.emptyList()", "var_name": "EMPTY_STATEMENTS"}, {"original_string": "protected static final Statement ALL = new StatementImpl(null, null, null);", "modifier": "protected static final", "type": "Statement", "declarator": "ALL = new StatementImpl(null, null, null)", "var_name": "ALL"}, {"original_string": "protected CoreSession session;", "modifier": "protected", "type": "CoreSession", "declarator": "session", "var_name": "session"}, {"original_string": "protected String name;", "modifier": "protected", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "protected String docType = REL_TYPE;", "modifier": "protected", "type": "String", "declarator": "docType = REL_TYPE", "var_name": "docType"}, {"original_string": "public Map<String, String> namespaces;", "modifier": "public", "type": "Map<String, String>", "declarator": "namespaces", "var_name": "namespaces"}, {"original_string": "public List<String> namespaceList = Collections.emptyList();", "modifier": "public", "type": "List<String>", "declarator": "namespaceList = Collections.emptyList()", "var_name": "namespaceList"}], "methods": [{"identifier": "CoreGraph", "parameters": "(CoreSession session)", "modifiers": "public", "return": "", "signature": " CoreGraph(CoreSession session)", "full_signature": "public  CoreGraph(CoreSession session)", "class_method_signature": "CoreGraph.CoreGraph(CoreSession session)", "testcase": false, "constructor": true}, {"identifier": "setDescription", "parameters": "(GraphDescription graphDescription)", "modifiers": "@Override public", "return": "void", "signature": "void setDescription(GraphDescription graphDescription)", "full_signature": "@Override public void setDescription(GraphDescription graphDescription)", "class_method_signature": "CoreGraph.setDescription(GraphDescription graphDescription)", "testcase": false, "constructor": false}, {"identifier": "setOptions", "parameters": "(Map<String, String> options)", "modifiers": "protected", "return": "void", "signature": "void setOptions(Map<String, String> options)", "full_signature": "protected void setOptions(Map<String, String> options)", "class_method_signature": "CoreGraph.setOptions(Map<String, String> options)", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getNamespaces()", "full_signature": "@Override public Map<String, String> getNamespaces()", "class_method_signature": "CoreGraph.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long size()", "full_signature": "@Override public Long size()", "class_method_signature": "CoreGraph.size()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "CoreGraph.clear()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "void", "signature": "void add(Statement statement)", "full_signature": "@Override public void add(Statement statement)", "class_method_signature": "CoreGraph.add(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(List<Statement> statements)", "modifiers": "@Override public", "return": "void", "signature": "void add(List<Statement> statements)", "full_signature": "@Override public void add(List<Statement> statements)", "class_method_signature": "CoreGraph.add(List<Statement> statements)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Statement statement)", "full_signature": "@Override public void remove(Statement statement)", "class_method_signature": "CoreGraph.remove(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(List<Statement> statements)", "modifiers": "@Override public", "return": "void", "signature": "void remove(List<Statement> statements)", "full_signature": "@Override public void remove(List<Statement> statements)", "class_method_signature": "CoreGraph.remove(List<Statement> statements)", "testcase": false, "constructor": false}, {"identifier": "getStatements", "parameters": "()", "modifiers": "@Override public", "return": "List<Statement>", "signature": "List<Statement> getStatements()", "full_signature": "@Override public List<Statement> getStatements()", "class_method_signature": "CoreGraph.getStatements()", "testcase": false, "constructor": false}, {"identifier": "getStatements", "parameters": "(Node subject, Node predicate,\n            Node object)", "modifiers": "@Override public", "return": "List<Statement>", "signature": "List<Statement> getStatements(Node subject, Node predicate,\n            Node object)", "full_signature": "@Override public List<Statement> getStatements(Node subject, Node predicate,\n            Node object)", "class_method_signature": "CoreGraph.getStatements(Node subject, Node predicate,\n            Node object)", "testcase": false, "constructor": false}, {"identifier": "getStatements", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "List<Statement>", "signature": "List<Statement> getStatements(Statement statement)", "full_signature": "@Override public List<Statement> getStatements(Statement statement)", "class_method_signature": "CoreGraph.getStatements(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "getSubjects", "parameters": "(Node predicate, Node object)", "modifiers": "@Override public", "return": "List<Node>", "signature": "List<Node> getSubjects(Node predicate, Node object)", "full_signature": "@Override public List<Node> getSubjects(Node predicate, Node object)", "class_method_signature": "CoreGraph.getSubjects(Node predicate, Node object)", "testcase": false, "constructor": false}, {"identifier": "getPredicates", "parameters": "(Node subject, Node object)", "modifiers": "@Override public", "return": "List<Node>", "signature": "List<Node> getPredicates(Node subject, Node object)", "full_signature": "@Override public List<Node> getPredicates(Node subject, Node object)", "class_method_signature": "CoreGraph.getPredicates(Node subject, Node object)", "testcase": false, "constructor": false}, {"identifier": "getObjects", "parameters": "(Node subject, Node predicate)", "modifiers": "@Override public", "return": "List<Node>", "signature": "List<Node> getObjects(Node subject, Node predicate)", "full_signature": "@Override public List<Node> getObjects(Node subject, Node predicate)", "class_method_signature": "CoreGraph.getObjects(Node subject, Node predicate)", "testcase": false, "constructor": false}, {"identifier": "hasStatement", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasStatement(Statement statement)", "full_signature": "@Override public boolean hasStatement(Statement statement)", "class_method_signature": "CoreGraph.hasStatement(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "hasResource", "parameters": "(Resource resource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasResource(Resource resource)", "full_signature": "@Override public boolean hasResource(Resource resource)", "class_method_signature": "CoreGraph.hasResource(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(String queryString, String language, String baseURI)", "modifiers": "@Override public", "return": "QueryResult", "signature": "QueryResult query(String queryString, String language, String baseURI)", "full_signature": "@Override public QueryResult query(String queryString, String language, String baseURI)", "class_method_signature": "CoreGraph.query(String queryString, String language, String baseURI)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String path, String lang, String base)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(String path, String lang, String base)", "full_signature": "@Override public boolean read(String path, String lang, String base)", "class_method_signature": "CoreGraph.read(String path, String lang, String base)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String path, String lang, String base)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(String path, String lang, String base)", "full_signature": "@Override public boolean write(String path, String lang, String base)", "class_method_signature": "CoreGraph.write(String path, String lang, String base)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InputStream in, String lang, String base)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InputStream in, String lang, String base)", "full_signature": "@Override public boolean read(InputStream in, String lang, String base)", "class_method_signature": "CoreGraph.read(InputStream in, String lang, String base)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream out, String lang, String base)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(OutputStream out, String lang, String base)", "full_signature": "@Override public boolean write(OutputStream out, String lang, String base)", "class_method_signature": "CoreGraph.write(OutputStream out, String lang, String base)", "testcase": false, "constructor": false}, {"identifier": "getDefaultRepositoryName", "parameters": "()", "modifiers": "protected static", "return": "String", "signature": "String getDefaultRepositoryName()", "full_signature": "protected static String getDefaultRepositoryName()", "class_method_signature": "CoreGraph.getDefaultRepositoryName()", "testcase": false, "constructor": false}, {"identifier": "whereBuilder", "parameters": "(String query, Statement statement)", "modifiers": "protected", "return": "String", "signature": "String whereBuilder(String query, Statement statement)", "full_signature": "protected String whereBuilder(String query, Statement statement)", "class_method_signature": "CoreGraph.whereBuilder(String query, Statement statement)", "testcase": false, "constructor": false}, {"identifier": "getNodeAsString", "parameters": "(Node node)", "modifiers": "protected static", "return": "NodeAsString", "signature": "NodeAsString getNodeAsString(Node node)", "full_signature": "protected static NodeAsString getNodeAsString(Node node)", "class_method_signature": "CoreGraph.getNodeAsString(Node node)", "testcase": false, "constructor": false}, {"identifier": "localNameToId", "parameters": "(String localName)", "modifiers": "protected static", "return": "String", "signature": "String localNameToId(String localName)", "full_signature": "protected static String localNameToId(String localName)", "class_method_signature": "CoreGraph.localNameToId(String localName)", "testcase": false, "constructor": false}, {"identifier": "getAuthor", "parameters": "(Statement statement)", "modifiers": "protected static", "return": "String", "signature": "String getAuthor(Statement statement)", "full_signature": "protected static String getAuthor(Statement statement)", "class_method_signature": "CoreGraph.getAuthor(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "setAuthor", "parameters": "(Statement statement, String author)", "modifiers": "protected static", "return": "void", "signature": "void setAuthor(Statement statement, String author)", "full_signature": "protected static void setAuthor(Statement statement, String author)", "class_method_signature": "CoreGraph.setAuthor(Statement statement, String author)", "testcase": false, "constructor": false}, {"identifier": "getCreationDate", "parameters": "(Statement statement)", "modifiers": "protected static", "return": "Date", "signature": "Date getCreationDate(Statement statement)", "full_signature": "protected static Date getCreationDate(Statement statement)", "class_method_signature": "CoreGraph.getCreationDate(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "setCreationDate", "parameters": "(Statement statement, Calendar created)", "modifiers": "protected static", "return": "void", "signature": "void setCreationDate(Statement statement, Calendar created)", "full_signature": "protected static void setCreationDate(Statement statement, Calendar created)", "class_method_signature": "CoreGraph.setCreationDate(Statement statement, Calendar created)", "testcase": false, "constructor": false}, {"identifier": "getModificationDate", "parameters": "(Statement statement)", "modifiers": "protected static", "return": "Date", "signature": "Date getModificationDate(Statement statement)", "full_signature": "protected static Date getModificationDate(Statement statement)", "class_method_signature": "CoreGraph.getModificationDate(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "setModificationDate", "parameters": "(Statement statement,\n            Calendar modified)", "modifiers": "protected static", "return": "void", "signature": "void setModificationDate(Statement statement,\n            Calendar modified)", "full_signature": "protected static void setModificationDate(Statement statement,\n            Calendar modified)", "class_method_signature": "CoreGraph.setModificationDate(Statement statement,\n            Calendar modified)", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "(Statement statement)", "modifiers": "protected static", "return": "String", "signature": "String getComment(Statement statement)", "full_signature": "protected static String getComment(Statement statement)", "class_method_signature": "CoreGraph.getComment(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "setComment", "parameters": "(Statement statement, String comment)", "modifiers": "protected static", "return": "void", "signature": "void setComment(Statement statement, String comment)", "full_signature": "protected static void setComment(Statement statement, String comment)", "class_method_signature": "CoreGraph.setComment(Statement statement, String comment)", "testcase": false, "constructor": false}, {"identifier": "getStringProperty", "parameters": "(Statement statement, Resource prop)", "modifiers": "protected static", "return": "String", "signature": "String getStringProperty(Statement statement, Resource prop)", "full_signature": "protected static String getStringProperty(Statement statement, Resource prop)", "class_method_signature": "CoreGraph.getStringProperty(Statement statement, Resource prop)", "testcase": false, "constructor": false}, {"identifier": "setStringProperty", "parameters": "(Statement statement, Resource prop,\n            String string)", "modifiers": "protected static", "return": "void", "signature": "void setStringProperty(Statement statement, Resource prop,\n            String string)", "full_signature": "protected static void setStringProperty(Statement statement, Resource prop,\n            String string)", "class_method_signature": "CoreGraph.setStringProperty(Statement statement, Resource prop,\n            String string)", "testcase": false, "constructor": false}, {"identifier": "getDateProperty", "parameters": "(Statement statement, Resource prop)", "modifiers": "protected static", "return": "Date", "signature": "Date getDateProperty(Statement statement, Resource prop)", "full_signature": "protected static Date getDateProperty(Statement statement, Resource prop)", "class_method_signature": "CoreGraph.getDateProperty(Statement statement, Resource prop)", "testcase": false, "constructor": false}, {"identifier": "setDateProperty", "parameters": "(Statement statement, Resource prop,\n            Calendar date)", "modifiers": "protected static", "return": "void", "signature": "void setDateProperty(Statement statement, Resource prop,\n            Calendar date)", "full_signature": "protected static void setDateProperty(Statement statement, Resource prop,\n            Calendar date)", "class_method_signature": "CoreGraph.setDateProperty(Statement statement, Resource prop,\n            Calendar date)", "testcase": false, "constructor": false}], "file": "nuxeo-platform-relations/nuxeo-platform-relations-core/src/main/java/org/nuxeo/ecm/platform/relations/CoreGraph.java"}, "focal_method": {"identifier": "setOptions", "parameters": "(Map<String, String> options)", "modifiers": "protected", "return": "void", "body": "protected void setOptions(Map<String, String> options) {\n        for (Entry<String, String> option : options.entrySet()) {\n            String key = option.getKey();\n            String type = option.getValue();\n            if (key.equals(OPTION_DOCTYPE)) {\n                SchemaManager sm = Framework.getLocalService(SchemaManager.class);\n                DocumentType documentType = sm.getDocumentType(type);\n                if (documentType == null) {\n                    throw new IllegalArgumentException(\"Unknown type: \" + type\n                            + \" for graph: \" + name);\n                }\n                Type[] th = documentType.getTypeHierarchy();\n                String baseType = th.length == 0 ? type\n                        : th[th.length - 1].getName();\n                if (!REL_TYPE.equals(baseType)) {\n                    throw new IllegalArgumentException(\"Not a Relation type: \"\n                            + type + \" for graph: \" + name);\n                }\n                docType = type;\n            }\n        }\n    }", "signature": "void setOptions(Map<String, String> options)", "full_signature": "protected void setOptions(Map<String, String> options)", "class_method_signature": "CoreGraph.setOptions(Map<String, String> options)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "equals", "getLocalService", "getDocumentType", "getTypeHierarchy", "getName", "equals"]}, "repository": {"repo_id": 2988709, "url": "https://github.com/nuxeo-archives/nuxeo-features", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 13, "size": 135542, "license": "licensed"}}