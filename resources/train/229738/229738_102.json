{"test_class": {"identifier": "BeanMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public H2DatabaseRule dbRule = new H2DatabaseRule().withSomething();", "modifier": "@Rule\n    public", "type": "H2DatabaseRule", "declarator": "dbRule = new H2DatabaseRule().withSomething()", "var_name": "dbRule"}, {"original_string": "private Handle handle;", "modifier": "private", "type": "Handle", "declarator": "handle", "var_name": "handle"}, {"original_string": "RowMapper<SampleBean> mapper = BeanMapper.of(SampleBean.class);", "modifier": "", "type": "RowMapper<SampleBean>", "declarator": "mapper = BeanMapper.of(SampleBean.class)", "var_name": "mapper"}], "file": "core/src/test/java/org/jdbi/v3/core/mapper/reflect/BeanMapperTest.java"}, "test_case": {"identifier": "testNestedStrict", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNestedStrict() {\n        handle.getConfig(ReflectionMappers.class).setStrictMatching(true);\n        handle.registerRowMapper(BeanMapper.factory(NestedBean.class));\n\n        handle.execute(\"insert into something (id, name) values (1, 'foo')\");\n\n        assertThat(handle\n            .createQuery(\"select id, name from something\")\n            .mapTo(NestedBean.class)\n            .one())\n            .extracting(\"nested.id\", \"nested.name\")\n            .containsExactly(1, \"foo\");\n\n        assertThatThrownBy(() -> handle\n            .createQuery(\"select id, name, 1 as other from something\")\n            .mapTo(NestedBean.class)\n            .one())\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessageContaining(\"could not match properties for columns: [other]\");\n    }", "signature": "void testNestedStrict()", "full_signature": "@Test public void testNestedStrict()", "class_method_signature": "BeanMapperTest.testNestedStrict()", "testcase": true, "constructor": false, "invocations": ["setStrictMatching", "getConfig", "registerRowMapper", "factory", "execute", "containsExactly", "extracting", "assertThat", "one", "mapTo", "createQuery", "hasMessageContaining", "isInstanceOf", "assertThatThrownBy", "one", "mapTo", "createQuery"]}, "focal_class": {"identifier": "BeanMapper", "superclass": "extends PojoMapper<T>", "interfaces": "", "fields": [{"original_string": "static final String DEFAULT_PREFIX = \"\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_PREFIX = \"\"", "var_name": "DEFAULT_PREFIX"}], "methods": [{"identifier": "factory", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "RowMapperFactory", "signature": "RowMapperFactory factory(Class<?> type)", "full_signature": "public static RowMapperFactory factory(Class<?> type)", "class_method_signature": "BeanMapper.factory(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "factory", "parameters": "(Class<?> type, String prefix)", "modifiers": "public static", "return": "RowMapperFactory", "signature": "RowMapperFactory factory(Class<?> type, String prefix)", "full_signature": "public static RowMapperFactory factory(Class<?> type, String prefix)", "class_method_signature": "BeanMapper.factory(Class<?> type, String prefix)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Class<T> type)", "modifiers": "public static", "return": "RowMapper<T>", "signature": "RowMapper<T> of(Class<T> type)", "full_signature": "public static RowMapper<T> of(Class<T> type)", "class_method_signature": "BeanMapper.of(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Class<T> type, String prefix)", "modifiers": "public static", "return": "RowMapper<T>", "signature": "RowMapper<T> of(Class<T> type, String prefix)", "full_signature": "public static RowMapper<T> of(Class<T> type, String prefix)", "class_method_signature": "BeanMapper.of(Class<T> type, String prefix)", "testcase": false, "constructor": false}, {"identifier": "BeanMapper", "parameters": "(Class<T> type, String prefix)", "modifiers": "private", "return": "", "signature": " BeanMapper(Class<T> type, String prefix)", "full_signature": "private  BeanMapper(Class<T> type, String prefix)", "class_method_signature": "BeanMapper.BeanMapper(Class<T> type, String prefix)", "testcase": false, "constructor": true}, {"identifier": "getProperties", "parameters": "(ConfigRegistry config)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") protected", "return": "PojoProperties<T>", "signature": "PojoProperties<T> getProperties(ConfigRegistry config)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") protected PojoProperties<T> getProperties(ConfigRegistry config)", "class_method_signature": "BeanMapper.getProperties(ConfigRegistry config)", "testcase": false, "constructor": false}, {"identifier": "createNestedMapper", "parameters": "(StatementContext ctx, PojoProperty<T> property, String nestedPrefix)", "modifiers": "@Override protected", "return": "BeanMapper<?>", "signature": "BeanMapper<?> createNestedMapper(StatementContext ctx, PojoProperty<T> property, String nestedPrefix)", "full_signature": "@Override protected BeanMapper<?> createNestedMapper(StatementContext ctx, PojoProperty<T> property, String nestedPrefix)", "class_method_signature": "BeanMapper.createNestedMapper(StatementContext ctx, PojoProperty<T> property, String nestedPrefix)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/BeanMapper.java"}, "focal_method": {"identifier": "factory", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "RowMapperFactory", "body": "public static RowMapperFactory factory(Class<?> type) {\n        return RowMapperFactory.of(type, BeanMapper.of(type));\n    }", "signature": "RowMapperFactory factory(Class<?> type)", "full_signature": "public static RowMapperFactory factory(Class<?> type)", "class_method_signature": "BeanMapper.factory(Class<?> type)", "testcase": false, "constructor": false, "invocations": ["of", "of"]}, "repository": {"repo_id": 229738, "url": "https://github.com/jdbi/jdbi", "stars": 1361, "created": "6/17/2009 4:36:36 PM +00:00", "updates": "2020-01-24T19:16:55+00:00", "fork": "False", "license": "licensed"}}