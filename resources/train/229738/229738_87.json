{"test_class": {"identifier": "FieldMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public H2DatabaseRule dbRule = new H2DatabaseRule().withSomething();", "modifier": "@Rule\n    public", "type": "H2DatabaseRule", "declarator": "dbRule = new H2DatabaseRule().withSomething()", "var_name": "dbRule"}, {"original_string": "Handle handle;", "modifier": "", "type": "Handle", "declarator": "handle", "var_name": "handle"}, {"original_string": "RowMapper<SampleBean> mapper = FieldMapper.of(SampleBean.class);", "modifier": "", "type": "RowMapper<SampleBean>", "declarator": "mapper = FieldMapper.of(SampleBean.class)", "var_name": "mapper"}], "file": "core/src/test/java/org/jdbi/v3/core/mapper/reflect/FieldMapperTest.java"}, "test_case": {"identifier": "testNested", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNested() {\n        handle.execute(\"insert into something (id, name) values (1, 'foo')\");\n\n        assertThat(handle\n            .registerRowMapper(FieldMapper.factory(NestedThing.class))\n            .select(\"SELECT id, name FROM something\")\n            .mapTo(NestedThing.class)\n            .one())\n            .extracting(\"nested.i\", \"nested.s\")\n            .containsExactly(1, \"foo\");\n    }", "signature": "void testNested()", "full_signature": "@Test public void testNested()", "class_method_signature": "FieldMapperTest.testNested()", "testcase": true, "constructor": false, "invocations": ["execute", "containsExactly", "extracting", "assertThat", "one", "mapTo", "select", "registerRowMapper", "factory"]}, "focal_class": {"identifier": "FieldMapper", "superclass": "", "interfaces": "implements RowMapper<T>", "fields": [{"original_string": "private static final String DEFAULT_PREFIX = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PREFIX = \"\"", "var_name": "DEFAULT_PREFIX"}, {"original_string": "private static final String NO_MATCHING_COLUMNS =\n        \"Mapping fields for type %s didn't find any matching columns in result set\";", "modifier": "private static final", "type": "String", "declarator": "NO_MATCHING_COLUMNS =\n        \"Mapping fields for type %s didn't find any matching columns in result set\"", "var_name": "NO_MATCHING_COLUMNS"}, {"original_string": "private static final String UNMATCHED_COLUMNS_STRICT =\n        \"Mapping type %s could not match fields for columns: %s\";", "modifier": "private static final", "type": "String", "declarator": "UNMATCHED_COLUMNS_STRICT =\n        \"Mapping type %s could not match fields for columns: %s\"", "var_name": "UNMATCHED_COLUMNS_STRICT"}, {"original_string": "private static final String TYPE_NOT_INSTANTIABLE =\n        \"A type, %s, was mapped which was not instantiable\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_NOT_INSTANTIABLE =\n        \"A type, %s, was mapped which was not instantiable\"", "var_name": "TYPE_NOT_INSTANTIABLE"}, {"original_string": "private static final String CANNOT_ACCESS_PROPERTY = \"Unable to access property, %s\";", "modifier": "private static final", "type": "String", "declarator": "CANNOT_ACCESS_PROPERTY = \"Unable to access property, %s\"", "var_name": "CANNOT_ACCESS_PROPERTY"}, {"original_string": "private final Class<T> type;", "modifier": "private final", "type": "Class<T>", "declarator": "type", "var_name": "type"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final Map<Field, FieldMapper<?>> nestedMappers = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Field, FieldMapper<?>>", "declarator": "nestedMappers = new ConcurrentHashMap<>()", "var_name": "nestedMappers"}], "methods": [{"identifier": "factory", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "RowMapperFactory", "signature": "RowMapperFactory factory(Class<?> type)", "full_signature": "public static RowMapperFactory factory(Class<?> type)", "class_method_signature": "FieldMapper.factory(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "factory", "parameters": "(Class<?> type, String prefix)", "modifiers": "public static", "return": "RowMapperFactory", "signature": "RowMapperFactory factory(Class<?> type, String prefix)", "full_signature": "public static RowMapperFactory factory(Class<?> type, String prefix)", "class_method_signature": "FieldMapper.factory(Class<?> type, String prefix)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Class<T> type)", "modifiers": "public static", "return": "RowMapper<T>", "signature": "RowMapper<T> of(Class<T> type)", "full_signature": "public static RowMapper<T> of(Class<T> type)", "class_method_signature": "FieldMapper.of(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Class<T> type, String prefix)", "modifiers": "public static", "return": "RowMapper<T>", "signature": "RowMapper<T> of(Class<T> type, String prefix)", "full_signature": "public static RowMapper<T> of(Class<T> type, String prefix)", "class_method_signature": "FieldMapper.of(Class<T> type, String prefix)", "testcase": false, "constructor": false}, {"identifier": "FieldMapper", "parameters": "(Class<T> type, String prefix)", "modifiers": "private", "return": "", "signature": " FieldMapper(Class<T> type, String prefix)", "full_signature": "private  FieldMapper(Class<T> type, String prefix)", "class_method_signature": "FieldMapper.FieldMapper(Class<T> type, String prefix)", "testcase": false, "constructor": true}, {"identifier": "map", "parameters": "(ResultSet rs, StatementContext ctx)", "modifiers": "@Override public", "return": "T", "signature": "T map(ResultSet rs, StatementContext ctx)", "full_signature": "@Override public T map(ResultSet rs, StatementContext ctx)", "class_method_signature": "FieldMapper.map(ResultSet rs, StatementContext ctx)", "testcase": false, "constructor": false}, {"identifier": "specialize", "parameters": "(ResultSet rs, StatementContext ctx)", "modifiers": "@Override public", "return": "RowMapper<T>", "signature": "RowMapper<T> specialize(ResultSet rs, StatementContext ctx)", "full_signature": "@Override public RowMapper<T> specialize(ResultSet rs, StatementContext ctx)", "class_method_signature": "FieldMapper.specialize(ResultSet rs, StatementContext ctx)", "testcase": false, "constructor": false}, {"identifier": "specialize0", "parameters": "(StatementContext ctx,\n                                               List<String> columnNames,\n                                               List<ColumnNameMatcher> columnNameMatchers,\n                                               List<String> unmatchedColumns)", "modifiers": "private", "return": "Optional<RowMapper<T>>", "signature": "Optional<RowMapper<T>> specialize0(StatementContext ctx,\n                                               List<String> columnNames,\n                                               List<ColumnNameMatcher> columnNameMatchers,\n                                               List<String> unmatchedColumns)", "full_signature": "private Optional<RowMapper<T>> specialize0(StatementContext ctx,\n                                               List<String> columnNames,\n                                               List<ColumnNameMatcher> columnNameMatchers,\n                                               List<String> unmatchedColumns)", "class_method_signature": "FieldMapper.specialize0(StatementContext ctx,\n                                               List<String> columnNames,\n                                               List<ColumnNameMatcher> columnNameMatchers,\n                                               List<String> unmatchedColumns)", "testcase": false, "constructor": false}, {"identifier": "paramName", "parameters": "(Field field)", "modifiers": "private static", "return": "String", "signature": "String paramName(Field field)", "full_signature": "private static String paramName(Field field)", "class_method_signature": "FieldMapper.paramName(Field field)", "testcase": false, "constructor": false}, {"identifier": "debugName", "parameters": "(Field field)", "modifiers": "private", "return": "String", "signature": "String debugName(Field field)", "full_signature": "private String debugName(Field field)", "class_method_signature": "FieldMapper.debugName(Field field)", "testcase": false, "constructor": false}, {"identifier": "construct", "parameters": "()", "modifiers": "private", "return": "T", "signature": "T construct()", "full_signature": "private T construct()", "class_method_signature": "FieldMapper.construct()", "testcase": false, "constructor": false}, {"identifier": "writeField", "parameters": "(T obj, Field field, Object value)", "modifiers": "private", "return": "void", "signature": "void writeField(T obj, Field field, Object value)", "full_signature": "private void writeField(T obj, Field field, Object value)", "class_method_signature": "FieldMapper.writeField(T obj, Field field, Object value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java"}, "focal_method": {"identifier": "factory", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "RowMapperFactory", "body": "public static RowMapperFactory factory(Class<?> type) {\n        return RowMapperFactory.of(type, FieldMapper.of(type));\n    }", "signature": "RowMapperFactory factory(Class<?> type)", "full_signature": "public static RowMapperFactory factory(Class<?> type)", "class_method_signature": "FieldMapper.factory(Class<?> type)", "testcase": false, "constructor": false, "invocations": ["of", "of"]}, "repository": {"repo_id": 229738, "url": "https://github.com/jdbi/jdbi", "stars": 1361, "created": "6/17/2009 4:36:36 PM +00:00", "updates": "2020-01-24T19:16:55+00:00", "fork": "False", "license": "licensed"}}