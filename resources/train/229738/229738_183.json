{"test_class": {"identifier": "TestJdbi", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public H2DatabaseRule dbRule = new H2DatabaseRule().withSomething();", "modifier": "@Rule\n    public", "type": "H2DatabaseRule", "declarator": "dbRule = new H2DatabaseRule().withSomething()", "var_name": "dbRule"}], "file": "core/src/test/java/org/jdbi/v3/core/TestJdbi.java"}, "test_case": {"identifier": "testCorrectExceptionOnSQLException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorrectExceptionOnSQLException() {\n        Jdbi db = Jdbi.create(() -> {\n            throw new SQLException();\n        });\n\n        assertThatThrownBy(db::open).isInstanceOf(ConnectionException.class);\n    }", "signature": "void testCorrectExceptionOnSQLException()", "full_signature": "@Test public void testCorrectExceptionOnSQLException()", "class_method_signature": "TestJdbi.testCorrectExceptionOnSQLException()", "testcase": true, "constructor": false, "invocations": ["create", "isInstanceOf", "assertThatThrownBy"]}, "focal_class": {"identifier": "Jdbi", "superclass": "", "interfaces": "implements Configurable<Jdbi>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Jdbi.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Jdbi.class)", "var_name": "LOG"}, {"original_string": "private final ConfigRegistry config = new ConfigRegistry();", "modifier": "private final", "type": "ConfigRegistry", "declarator": "config = new ConfigRegistry()", "var_name": "config"}, {"original_string": "private final ConnectionFactory connectionFactory;", "modifier": "private final", "type": "ConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}, {"original_string": "private final AtomicReference<TransactionHandler> transactionhandler = new AtomicReference<>(LocalTransactionHandler.binding());", "modifier": "private final", "type": "AtomicReference<TransactionHandler>", "declarator": "transactionhandler = new AtomicReference<>(LocalTransactionHandler.binding())", "var_name": "transactionhandler"}, {"original_string": "private final AtomicReference<StatementBuilderFactory> statementBuilderFactory = new AtomicReference<>(DefaultStatementBuilder.FACTORY);", "modifier": "private final", "type": "AtomicReference<StatementBuilderFactory>", "declarator": "statementBuilderFactory = new AtomicReference<>(DefaultStatementBuilder.FACTORY)", "var_name": "statementBuilderFactory"}, {"original_string": "private final CopyOnWriteArrayList<JdbiPlugin> plugins = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<JdbiPlugin>", "declarator": "plugins = new CopyOnWriteArrayList<>()", "var_name": "plugins"}, {"original_string": "private final ThreadLocal<HandleSupplier> threadHandleSupplier = new ThreadLocal<>();", "modifier": "private final", "type": "ThreadLocal<HandleSupplier>", "declarator": "threadHandleSupplier = new ThreadLocal<>()", "var_name": "threadHandleSupplier"}], "methods": [{"identifier": "Jdbi", "parameters": "(ConnectionFactory connectionFactory)", "modifiers": "private", "return": "", "signature": " Jdbi(ConnectionFactory connectionFactory)", "full_signature": "private  Jdbi(ConnectionFactory connectionFactory)", "class_method_signature": "Jdbi.Jdbi(ConnectionFactory connectionFactory)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Connection connection)", "modifiers": "public static", "return": "Jdbi", "signature": "Jdbi create(Connection connection)", "full_signature": "public static Jdbi create(Connection connection)", "class_method_signature": "Jdbi.create(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(DataSource dataSource)", "modifiers": "public static", "return": "Jdbi", "signature": "Jdbi create(DataSource dataSource)", "full_signature": "public static Jdbi create(DataSource dataSource)", "class_method_signature": "Jdbi.create(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ConnectionFactory connectionFactory)", "modifiers": "public static", "return": "Jdbi", "signature": "Jdbi create(ConnectionFactory connectionFactory)", "full_signature": "public static Jdbi create(ConnectionFactory connectionFactory)", "class_method_signature": "Jdbi.create(ConnectionFactory connectionFactory)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final String url)", "modifiers": "public static", "return": "Jdbi", "signature": "Jdbi create(final String url)", "full_signature": "public static Jdbi create(final String url)", "class_method_signature": "Jdbi.create(final String url)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final String url, final Properties properties)", "modifiers": "public static", "return": "Jdbi", "signature": "Jdbi create(final String url, final Properties properties)", "full_signature": "public static Jdbi create(final String url, final Properties properties)", "class_method_signature": "Jdbi.create(final String url, final Properties properties)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final String url, final String username, final String password)", "modifiers": "public static", "return": "Jdbi", "signature": "Jdbi create(final String url, final String username, final String password)", "full_signature": "public static Jdbi create(final String url, final String username, final String password)", "class_method_signature": "Jdbi.create(final String url, final String username, final String password)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(DataSource dataSource)", "modifiers": "public static", "return": "Handle", "signature": "Handle open(DataSource dataSource)", "full_signature": "public static Handle open(DataSource dataSource)", "class_method_signature": "Jdbi.open(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(ConnectionFactory connectionFactory)", "modifiers": "public static", "return": "Handle", "signature": "Handle open(ConnectionFactory connectionFactory)", "full_signature": "public static Handle open(ConnectionFactory connectionFactory)", "class_method_signature": "Jdbi.open(ConnectionFactory connectionFactory)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "Handle", "signature": "Handle open(final Connection connection)", "full_signature": "public static Handle open(final Connection connection)", "class_method_signature": "Jdbi.open(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(final String url)", "modifiers": "public static", "return": "Handle", "signature": "Handle open(final String url)", "full_signature": "public static Handle open(final String url)", "class_method_signature": "Jdbi.open(final String url)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(final String url, final String username, final String password)", "modifiers": "public static", "return": "Handle", "signature": "Handle open(final String url, final String username, final String password)", "full_signature": "public static Handle open(final String url, final String username, final String password)", "class_method_signature": "Jdbi.open(final String url, final String username, final String password)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(final String url, final Properties props)", "modifiers": "public static", "return": "Handle", "signature": "Handle open(final String url, final Properties props)", "full_signature": "public static Handle open(final String url, final Properties props)", "class_method_signature": "Jdbi.open(final String url, final Properties props)", "testcase": false, "constructor": false}, {"identifier": "installPlugins", "parameters": "()", "modifiers": "public", "return": "Jdbi", "signature": "Jdbi installPlugins()", "full_signature": "public Jdbi installPlugins()", "class_method_signature": "Jdbi.installPlugins()", "testcase": false, "constructor": false}, {"identifier": "installPlugin", "parameters": "(JdbiPlugin plugin)", "modifiers": "public", "return": "Jdbi", "signature": "Jdbi installPlugin(JdbiPlugin plugin)", "full_signature": "public Jdbi installPlugin(JdbiPlugin plugin)", "class_method_signature": "Jdbi.installPlugin(JdbiPlugin plugin)", "testcase": false, "constructor": false}, {"identifier": "setStatementBuilderFactory", "parameters": "(StatementBuilderFactory factory)", "modifiers": "public", "return": "Jdbi", "signature": "Jdbi setStatementBuilderFactory(StatementBuilderFactory factory)", "full_signature": "public Jdbi setStatementBuilderFactory(StatementBuilderFactory factory)", "class_method_signature": "Jdbi.setStatementBuilderFactory(StatementBuilderFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getStatementBuilderFactory", "parameters": "()", "modifiers": "public", "return": "StatementBuilderFactory", "signature": "StatementBuilderFactory getStatementBuilderFactory()", "full_signature": "public StatementBuilderFactory getStatementBuilderFactory()", "class_method_signature": "Jdbi.getStatementBuilderFactory()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "@Override public", "return": "ConfigRegistry", "signature": "ConfigRegistry getConfig()", "full_signature": "@Override public ConfigRegistry getConfig()", "class_method_signature": "Jdbi.getConfig()", "testcase": false, "constructor": false}, {"identifier": "setTransactionHandler", "parameters": "(TransactionHandler handler)", "modifiers": "public", "return": "Jdbi", "signature": "Jdbi setTransactionHandler(TransactionHandler handler)", "full_signature": "public Jdbi setTransactionHandler(TransactionHandler handler)", "class_method_signature": "Jdbi.setTransactionHandler(TransactionHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getTransactionHandler", "parameters": "()", "modifiers": "public", "return": "TransactionHandler", "signature": "TransactionHandler getTransactionHandler()", "full_signature": "public TransactionHandler getTransactionHandler()", "class_method_signature": "Jdbi.getTransactionHandler()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "Handle", "signature": "Handle open()", "full_signature": "public Handle open()", "class_method_signature": "Jdbi.open()", "testcase": false, "constructor": false}, {"identifier": "withHandle", "parameters": "(HandleCallback<R, X> callback)", "modifiers": "public", "return": "R", "signature": "R withHandle(HandleCallback<R, X> callback)", "full_signature": "public R withHandle(HandleCallback<R, X> callback)", "class_method_signature": "Jdbi.withHandle(HandleCallback<R, X> callback)", "testcase": false, "constructor": false}, {"identifier": "useHandle", "parameters": "(final HandleConsumer<X> consumer)", "modifiers": "public", "return": "void", "signature": "void useHandle(final HandleConsumer<X> consumer)", "full_signature": "public void useHandle(final HandleConsumer<X> consumer)", "class_method_signature": "Jdbi.useHandle(final HandleConsumer<X> consumer)", "testcase": false, "constructor": false}, {"identifier": "inTransaction", "parameters": "(final HandleCallback<R, X> callback)", "modifiers": "public", "return": "R", "signature": "R inTransaction(final HandleCallback<R, X> callback)", "full_signature": "public R inTransaction(final HandleCallback<R, X> callback)", "class_method_signature": "Jdbi.inTransaction(final HandleCallback<R, X> callback)", "testcase": false, "constructor": false}, {"identifier": "useTransaction", "parameters": "(final HandleConsumer<X> callback)", "modifiers": "public", "return": "void", "signature": "void useTransaction(final HandleConsumer<X> callback)", "full_signature": "public void useTransaction(final HandleConsumer<X> callback)", "class_method_signature": "Jdbi.useTransaction(final HandleConsumer<X> callback)", "testcase": false, "constructor": false}, {"identifier": "inTransaction", "parameters": "(final TransactionIsolationLevel level, final HandleCallback<R, X> callback)", "modifiers": "public", "return": "R", "signature": "R inTransaction(final TransactionIsolationLevel level, final HandleCallback<R, X> callback)", "full_signature": "public R inTransaction(final TransactionIsolationLevel level, final HandleCallback<R, X> callback)", "class_method_signature": "Jdbi.inTransaction(final TransactionIsolationLevel level, final HandleCallback<R, X> callback)", "testcase": false, "constructor": false}, {"identifier": "useTransaction", "parameters": "(final TransactionIsolationLevel level, final HandleConsumer<X> callback)", "modifiers": "public", "return": "void", "signature": "void useTransaction(final TransactionIsolationLevel level, final HandleConsumer<X> callback)", "full_signature": "public void useTransaction(final TransactionIsolationLevel level, final HandleConsumer<X> callback)", "class_method_signature": "Jdbi.useTransaction(final TransactionIsolationLevel level, final HandleConsumer<X> callback)", "testcase": false, "constructor": false}, {"identifier": "withExtension", "parameters": "(Class<E> extensionType, ExtensionCallback<R, E, X> callback)", "modifiers": "public", "return": "R", "signature": "R withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)", "full_signature": "public R withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)", "class_method_signature": "Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)", "testcase": false, "constructor": false}, {"identifier": "callWithExtension", "parameters": "(Class<E> extensionType,\n                                                            ExtensionCallback<R, E, X> callback,\n                                                            HandleSupplier handle)", "modifiers": "private", "return": "R", "signature": "R callWithExtension(Class<E> extensionType,\n                                                            ExtensionCallback<R, E, X> callback,\n                                                            HandleSupplier handle)", "full_signature": "private R callWithExtension(Class<E> extensionType,\n                                                            ExtensionCallback<R, E, X> callback,\n                                                            HandleSupplier handle)", "class_method_signature": "Jdbi.callWithExtension(Class<E> extensionType,\n                                                            ExtensionCallback<R, E, X> callback,\n                                                            HandleSupplier handle)", "testcase": false, "constructor": false}, {"identifier": "useExtension", "parameters": "(Class<E> extensionType, ExtensionConsumer<E, X> callback)", "modifiers": "public", "return": "void", "signature": "void useExtension(Class<E> extensionType, ExtensionConsumer<E, X> callback)", "full_signature": "public void useExtension(Class<E> extensionType, ExtensionConsumer<E, X> callback)", "class_method_signature": "Jdbi.useExtension(Class<E> extensionType, ExtensionConsumer<E, X> callback)", "testcase": false, "constructor": false}, {"identifier": "onDemand", "parameters": "(Class<E> extensionType)", "modifiers": "public", "return": "E", "signature": "E onDemand(Class<E> extensionType)", "full_signature": "public E onDemand(Class<E> extensionType)", "class_method_signature": "Jdbi.onDemand(Class<E> extensionType)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jdbi/v3/core/Jdbi.java"}, "focal_method": {"identifier": "create", "parameters": "(Connection connection)", "modifiers": "public static", "return": "Jdbi", "body": "public static Jdbi create(Connection connection) {\n        return create(new SingleConnectionFactory(connection));\n    }", "signature": "Jdbi create(Connection connection)", "full_signature": "public static Jdbi create(Connection connection)", "class_method_signature": "Jdbi.create(Connection connection)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 229738, "url": "https://github.com/jdbi/jdbi", "stars": 1361, "created": "6/17/2009 4:36:36 PM +00:00", "updates": "2020-01-24T19:16:55+00:00", "fork": "False", "license": "licensed"}}