{"test_class": {"identifier": "IterableLikeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/jdbi/v3/core/internal/IterableLikeTest.java"}, "test_case": {"identifier": "testOverflow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOverflow() {\n        final Iterator<?> it = IterableLike.of(new int[]{1});\n\n        assertThat(it.hasNext()).isTrue();\n        assertThat(it.next()).isEqualTo(1);\n\n        assertThatThrownBy(it::next).isInstanceOf(NoSuchElementException.class);\n    }", "signature": "void testOverflow()", "full_signature": "@Test public void testOverflow()", "class_method_signature": "IterableLikeTest.testOverflow()", "testcase": true, "constructor": false, "invocations": ["of", "isTrue", "assertThat", "hasNext", "isEqualTo", "assertThat", "next", "isInstanceOf", "assertThatThrownBy"]}, "focal_class": {"identifier": "IterableLike", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "IterableLike", "parameters": "()", "modifiers": "private", "return": "", "signature": " IterableLike()", "full_signature": "private  IterableLike()", "class_method_signature": "IterableLike.IterableLike()", "testcase": false, "constructor": true}, {"identifier": "isIterable", "parameters": "(Object maybeIterable)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIterable(Object maybeIterable)", "full_signature": "public static boolean isIterable(Object maybeIterable)", "class_method_signature": "IterableLike.isIterable(Object maybeIterable)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Object iterable)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Iterator<Object>", "signature": "Iterator<Object> of(Object iterable)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Iterator<Object> of(Object iterable)", "class_method_signature": "IterableLike.of(Object iterable)", "testcase": false, "constructor": false}, {"identifier": "elementTypeOf", "parameters": "(Object iterable)", "modifiers": "public static", "return": "Optional<Type>", "signature": "Optional<Type> elementTypeOf(Object iterable)", "full_signature": "public static Optional<Type> elementTypeOf(Object iterable)", "class_method_signature": "IterableLike.elementTypeOf(Object iterable)", "testcase": false, "constructor": false}, {"identifier": "elementTypeOf", "parameters": "(Type type)", "modifiers": "public static", "return": "Optional<Type>", "signature": "Optional<Type> elementTypeOf(Type type)", "full_signature": "public static Optional<Type> elementTypeOf(Type type)", "class_method_signature": "IterableLike.elementTypeOf(Type type)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(Object iterable)", "modifiers": "public static", "return": "Stream<Object>", "signature": "Stream<Object> stream(Object iterable)", "full_signature": "public static Stream<Object> stream(Object iterable)", "class_method_signature": "IterableLike.stream(Object iterable)", "testcase": false, "constructor": false}, {"identifier": "iterable", "parameters": "(Object iterable)", "modifiers": "public static", "return": "Iterable<Object>", "signature": "Iterable<Object> iterable(Object iterable)", "full_signature": "public static Iterable<Object> iterable(Object iterable)", "class_method_signature": "IterableLike.iterable(Object iterable)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(Object iterable)", "modifiers": "public static", "return": "List<Object>", "signature": "List<Object> toList(Object iterable)", "full_signature": "public static List<Object> toList(Object iterable)", "class_method_signature": "IterableLike.toList(Object iterable)", "testcase": false, "constructor": false}, {"identifier": "getTypeWarning", "parameters": "(final Class<?> type)", "modifiers": "private static", "return": "String", "signature": "String getTypeWarning(final Class<?> type)", "full_signature": "private static String getTypeWarning(final Class<?> type)", "class_method_signature": "IterableLike.getTypeWarning(final Class<?> type)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java"}, "focal_method": {"identifier": "of", "parameters": "(Object iterable)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Iterator<Object>", "body": "@SuppressWarnings(\"unchecked\")\n    public static Iterator<Object> of(Object iterable) {\n        if (iterable == null) {\n            throw new IllegalArgumentException(\"can't iterate null\");\n        }\n        if (iterable instanceof Iterator<?>) {\n            return (Iterator<Object>) iterable;\n        } else if (iterable instanceof Iterable<?>) {\n            return ((Iterable<Object>) iterable).iterator();\n        }\n        if (iterable instanceof Stream<?>) {\n            return ((Stream<Object>) iterable).iterator();\n        }\n\n        Class<?> klass = iterable.getClass();\n        if (!klass.isArray()) {\n            throw new IllegalArgumentException(getTypeWarning(klass));\n        }\n\n        if (klass.getComponentType().isPrimitive()) {\n            return new PrimitiveArrayIterator(iterable);\n        }\n        return Arrays.asList((Object[]) iterable).iterator();\n    }", "signature": "Iterator<Object> of(Object iterable)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Iterator<Object> of(Object iterable)", "class_method_signature": "IterableLike.of(Object iterable)", "testcase": false, "constructor": false, "invocations": ["iterator", "iterator", "getClass", "isArray", "getTypeWarning", "isPrimitive", "getComponentType", "iterator", "asList"]}, "repository": {"repo_id": 229738, "url": "https://github.com/jdbi/jdbi", "stars": 1361, "created": "6/17/2009 4:36:36 PM +00:00", "updates": "2020-01-24T19:16:55+00:00", "fork": "False", "license": "licensed"}}