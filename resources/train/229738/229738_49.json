{"test_class": {"identifier": "ArgumentBinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Argument NOP = (position, statement, ctx) -> {};", "modifier": "private static final", "type": "Argument", "declarator": "NOP = (position, statement, ctx) -> {}", "var_name": "NOP"}, {"original_string": "@Rule\n    public MethodRule mockito = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MethodRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock\n    private PreparedStatement stmt;", "modifier": "@Mock\n    private", "type": "PreparedStatement", "declarator": "stmt", "var_name": "stmt"}, {"original_string": "@Mock\n    private StatementContext ctx;", "modifier": "@Mock\n    private", "type": "StatementContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private SqlStatements statements = new SqlStatements();", "modifier": "private", "type": "SqlStatements", "declarator": "statements = new SqlStatements()", "var_name": "statements"}], "file": "core/src/test/java/org/jdbi/v3/core/statement/ArgumentBinderTest.java"}, "test_case": {"identifier": "testNamedDeclaredButNotProvided", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNamedDeclaredButNotProvided() {\n        assertThatThrownBy(() -> new ArgumentBinder<>(stmt, ctx, namedParams(\"unused\")).bind(namedBinding()))\n            .isInstanceOf(UnableToCreateStatementException.class);\n    }", "signature": "void testNamedDeclaredButNotProvided()", "full_signature": "@Test public void testNamedDeclaredButNotProvided()", "class_method_signature": "ArgumentBinderTest.testNamedDeclaredButNotProvided()", "testcase": true, "constructor": false, "invocations": ["isInstanceOf", "assertThatThrownBy", "bind", "namedParams", "namedBinding"]}, "focal_class": {"identifier": "ArgumentBinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "final PreparedStatement stmt;", "modifier": "final", "type": "PreparedStatement", "declarator": "stmt", "var_name": "stmt"}, {"original_string": "final StatementContext ctx;", "modifier": "final", "type": "StatementContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "final ParsedParameters params;", "modifier": "final", "type": "ParsedParameters", "declarator": "params", "var_name": "params"}, {"original_string": "final Map<QualifiedType<?>, Function<Object, Argument>> argumentFactoryByType = new HashMap<>();", "modifier": "final", "type": "Map<QualifiedType<?>, Function<Object, Argument>>", "declarator": "argumentFactoryByType = new HashMap<>()", "var_name": "argumentFactoryByType"}], "methods": [{"identifier": "ArgumentBinder", "parameters": "(PreparedStatement stmt, StatementContext ctx, ParsedParameters params)", "modifiers": "", "return": "", "signature": " ArgumentBinder(PreparedStatement stmt, StatementContext ctx, ParsedParameters params)", "full_signature": "  ArgumentBinder(PreparedStatement stmt, StatementContext ctx, ParsedParameters params)", "class_method_signature": "ArgumentBinder.ArgumentBinder(PreparedStatement stmt, StatementContext ctx, ParsedParameters params)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(Binding binding)", "modifiers": "", "return": "void", "signature": "void bind(Binding binding)", "full_signature": " void bind(Binding binding)", "class_method_signature": "ArgumentBinder.bind(Binding binding)", "testcase": false, "constructor": false}, {"identifier": "bindPositional", "parameters": "(Binding binding)", "modifiers": "", "return": "void", "signature": "void bindPositional(Binding binding)", "full_signature": " void bindPositional(Binding binding)", "class_method_signature": "ArgumentBinder.bindPositional(Binding binding)", "testcase": false, "constructor": false}, {"identifier": "bindNamed", "parameters": "(Binding binding)", "modifiers": "", "return": "void", "signature": "void bindNamed(Binding binding)", "full_signature": " void bindNamed(Binding binding)", "class_method_signature": "ArgumentBinder.bindNamed(Binding binding)", "testcase": false, "constructor": false}, {"identifier": "bindNamedCheck", "parameters": "(Binding binding, List<String> paramNames)", "modifiers": "", "return": "void", "signature": "void bindNamedCheck(Binding binding, List<String> paramNames)", "full_signature": " void bindNamedCheck(Binding binding, List<String> paramNames)", "class_method_signature": "ArgumentBinder.bindNamedCheck(Binding binding, List<String> paramNames)", "testcase": false, "constructor": false}, {"identifier": "typeOf", "parameters": "(Object value)", "modifiers": "", "return": "QualifiedType<?>", "signature": "QualifiedType<?> typeOf(Object value)", "full_signature": " QualifiedType<?> typeOf(Object value)", "class_method_signature": "ArgumentBinder.typeOf(Object value)", "testcase": false, "constructor": false}, {"identifier": "toArgument", "parameters": "(Object found)", "modifiers": "@Deprecated", "return": "Argument", "signature": "Argument toArgument(Object found)", "full_signature": "@Deprecated Argument toArgument(Object found)", "class_method_signature": "ArgumentBinder.toArgument(Object found)", "testcase": false, "constructor": false}, {"identifier": "argumentFactoryForType", "parameters": "(QualifiedType<?> type)", "modifiers": "", "return": "Function<Object, Argument>", "signature": "Function<Object, Argument> argumentFactoryForType(QualifiedType<?> type)", "full_signature": " Function<Object, Argument> argumentFactoryForType(QualifiedType<?> type)", "class_method_signature": "ArgumentBinder.argumentFactoryForType(QualifiedType<?> type)", "testcase": false, "constructor": false}, {"identifier": "missingNamedParameter", "parameters": "(String name, Binding binding)", "modifiers": "", "return": "UnableToCreateStatementException", "signature": "UnableToCreateStatementException missingNamedParameter(String name, Binding binding)", "full_signature": " UnableToCreateStatementException missingNamedParameter(String name, Binding binding)", "class_method_signature": "ArgumentBinder.missingNamedParameter(String name, Binding binding)", "testcase": false, "constructor": false}, {"identifier": "wrapExceptions", "parameters": "(Supplier<String> paramName, CheckedConsumer<T> consumer)", "modifiers": "", "return": "Consumer<T>", "signature": "Consumer<T> wrapExceptions(Supplier<String> paramName, CheckedConsumer<T> consumer)", "full_signature": " Consumer<T> wrapExceptions(Supplier<String> paramName, CheckedConsumer<T> consumer)", "class_method_signature": "ArgumentBinder.wrapExceptions(Supplier<String> paramName, CheckedConsumer<T> consumer)", "testcase": false, "constructor": false}, {"identifier": "factoryNotFound", "parameters": "(QualifiedType<?> qualifiedType, Object value)", "modifiers": "private", "return": "UnableToCreateStatementException", "signature": "UnableToCreateStatementException factoryNotFound(QualifiedType<?> qualifiedType, Object value)", "full_signature": "private UnableToCreateStatementException factoryNotFound(QualifiedType<?> qualifiedType, Object value)", "class_method_signature": "ArgumentBinder.factoryNotFound(QualifiedType<?> qualifiedType, Object value)", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "(Object maybeTypedValue)", "modifiers": "static", "return": "Object", "signature": "Object unwrap(Object maybeTypedValue)", "full_signature": "static Object unwrap(Object maybeTypedValue)", "class_method_signature": "ArgumentBinder.unwrap(Object maybeTypedValue)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java"}, "focal_method": {"identifier": "bind", "parameters": "(Binding binding)", "modifiers": "", "return": "void", "body": "void bind(Binding binding) {\n        if (params.isPositional()) {\n            bindPositional(binding);\n        } else {\n            bindNamed(binding);\n        }\n    }", "signature": "void bind(Binding binding)", "full_signature": " void bind(Binding binding)", "class_method_signature": "ArgumentBinder.bind(Binding binding)", "testcase": false, "constructor": false, "invocations": ["isPositional", "bindPositional", "bindNamed"]}, "repository": {"repo_id": 229738, "url": "https://github.com/jdbi/jdbi", "stars": 1361, "created": "6/17/2009 4:36:36 PM +00:00", "updates": "2020-01-24T19:16:55+00:00", "fork": "False", "license": "licensed"}}