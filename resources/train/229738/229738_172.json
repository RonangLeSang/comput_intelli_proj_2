{"test_class": {"identifier": "GenericTypesTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/jdbi/v3/core/generic/GenericTypesTest.java"}, "test_case": {"identifier": "getErasedTypeOfRaw", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getErasedTypeOfRaw() throws NoSuchMethodException {\n        assertThat(GenericTypes.getErasedType(methodReturnType(Foo.class, \"raw\"))).isEqualTo(Foo.class);\n    }", "signature": "void getErasedTypeOfRaw()", "full_signature": "@Test public void getErasedTypeOfRaw()", "class_method_signature": "GenericTypesTest.getErasedTypeOfRaw()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getErasedType", "methodReturnType"]}, "focal_class": {"identifier": "GenericTypes", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TypeVariable<Class<Map>> KEY;", "modifier": "private static final", "type": "TypeVariable<Class<Map>>", "declarator": "KEY", "var_name": "KEY"}, {"original_string": "private static final TypeVariable<Class<Map>> VALUE;", "modifier": "private static final", "type": "TypeVariable<Class<Map>>", "declarator": "VALUE", "var_name": "VALUE"}], "methods": [{"identifier": "GenericTypes", "parameters": "()", "modifiers": "private", "return": "", "signature": " GenericTypes()", "full_signature": "private  GenericTypes()", "class_method_signature": "GenericTypes.GenericTypes()", "testcase": false, "constructor": true}, {"identifier": "getErasedType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getErasedType(Type type)", "full_signature": "public static Class<?> getErasedType(Type type)", "class_method_signature": "GenericTypes.getErasedType(Type type)", "testcase": false, "constructor": false}, {"identifier": "findGenericParameter", "parameters": "(Type type, Class<?> parameterizedSupertype)", "modifiers": "public static", "return": "Optional<Type>", "signature": "Optional<Type> findGenericParameter(Type type, Class<?> parameterizedSupertype)", "full_signature": "public static Optional<Type> findGenericParameter(Type type, Class<?> parameterizedSupertype)", "class_method_signature": "GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype)", "testcase": false, "constructor": false}, {"identifier": "findGenericParameter", "parameters": "(Type type, Class<?> parameterizedSupertype, int n)", "modifiers": "public static", "return": "Optional<Type>", "signature": "Optional<Type> findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)", "full_signature": "public static Optional<Type> findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)", "class_method_signature": "GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)", "testcase": false, "constructor": false}, {"identifier": "resolveType", "parameters": "(Type type, Type contextType)", "modifiers": "public static", "return": "Type", "signature": "Type resolveType(Type type, Type contextType)", "full_signature": "public static Type resolveType(Type type, Type contextType)", "class_method_signature": "GenericTypes.resolveType(Type type, Type contextType)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(Type type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArray(Type type)", "full_signature": "public static boolean isArray(Type type)", "class_method_signature": "GenericTypes.isArray(Type type)", "testcase": false, "constructor": false}, {"identifier": "arrayType", "parameters": "(Type type)", "modifiers": "public static", "return": "Type", "signature": "Type arrayType(Type type)", "full_signature": "public static Type arrayType(Type type)", "class_method_signature": "GenericTypes.arrayType(Type type)", "testcase": false, "constructor": false}, {"identifier": "resolveMapEntryType", "parameters": "(Type mapType)", "modifiers": "public static", "return": "Type", "signature": "Type resolveMapEntryType(Type mapType)", "full_signature": "public static Type resolveMapEntryType(Type mapType)", "class_method_signature": "GenericTypes.resolveMapEntryType(Type mapType)", "testcase": false, "constructor": false}, {"identifier": "resolveMapEntryType", "parameters": "(Type keyType, Type valueType)", "modifiers": "public static", "return": "Type", "signature": "Type resolveMapEntryType(Type keyType, Type valueType)", "full_signature": "public static Type resolveMapEntryType(Type keyType, Type valueType)", "class_method_signature": "GenericTypes.resolveMapEntryType(Type keyType, Type valueType)", "testcase": false, "constructor": false}, {"identifier": "parameterizeClass", "parameters": "(Class<?> clazz, Type... arguments)", "modifiers": "public static", "return": "Type", "signature": "Type parameterizeClass(Class<?> clazz, Type... arguments)", "full_signature": "public static Type parameterizeClass(Class<?> clazz, Type... arguments)", "class_method_signature": "GenericTypes.parameterizeClass(Class<?> clazz, Type... arguments)", "testcase": false, "constructor": false}, {"identifier": "box", "parameters": "(Type type)", "modifiers": "public static", "return": "Type", "signature": "Type box(Type type)", "full_signature": "public static Type box(Type type)", "class_method_signature": "GenericTypes.box(Type type)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java"}, "focal_method": {"identifier": "getErasedType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getErasedType(Type type) {\n        return GenericTypeReflector.erase(type);\n    }", "signature": "Class<?> getErasedType(Type type)", "full_signature": "public static Class<?> getErasedType(Type type)", "class_method_signature": "GenericTypes.getErasedType(Type type)", "testcase": false, "constructor": false, "invocations": ["erase"]}, "repository": {"repo_id": 229738, "url": "https://github.com/jdbi/jdbi", "stars": 1361, "created": "6/17/2009 4:36:36 PM +00:00", "updates": "2020-01-24T19:16:55+00:00", "fork": "False", "license": "licensed"}}