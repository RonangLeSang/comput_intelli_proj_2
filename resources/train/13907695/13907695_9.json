{"test_class": {"identifier": "SpriteBehaviorTemplateTest", "superclass": "", "interfaces": "", "fields": [], "file": "gameengine/src/test/java/de/mirkosertic/gameengine/sprite/SpriteBehaviorTemplateTest.java"}, "test_case": {"identifier": "testSerialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialize() throws Exception {\n        GameEventManager theEventManager = mock(GameEventManager.class);\n        GameObject theOwner = mock(GameObject.class);\n        GameScene theScene = mock(GameScene.class);\n        when(theOwner.getGameScene()).thenReturn(theScene);\n\n        SpriteBehaviorTemplate theTemplate = new SpriteBehaviorTemplate(theEventManager, theOwner);\n        Animation theOldAnimation = new Animation(\"Lala\");\n        Animation theOldAnimation2 = new Animation(\"Lala2\");\n        theTemplate.addAnimation(theOldAnimation);\n        theTemplate.addAnimation(theOldAnimation2);\n        theTemplate.currentAnimationProperty().set(theOldAnimation);\n\n        Map<String, Object> theData = theTemplate.serialize();\n        assertEquals(4, theData.size());\n        assertEquals(SpriteBehavior.TYPE, theData.get(SpriteBehavior.TYPE_ATTRIBUTE));\n        assertEquals(\"5\", theData.get(\"speed\"));\n        assertEquals(theOldAnimation.getUuid(), theData.get(\"currentAnimation\"));\n        List<Map<String, Object>> theAnimations = (List<Map<String, Object>>) theData.get(\"animations\");\n        assertEquals(2, theAnimations.size());\n        assertEquals(\"Lala\", Animation.deserialize(theAnimations.get(0)).getName());\n        assertEquals(\"Lala2\", Animation.deserialize(theAnimations.get(1)).getName());\n\n        theTemplate.currentAnimationProperty().set(null);\n        theData = theTemplate.serialize();\n        assertEquals(3, theData.size());\n        assertEquals(SpriteBehavior.TYPE, theData.get(SpriteBehavior.TYPE_ATTRIBUTE));\n        assertEquals(\"5\", theData.get(\"speed\"));\n        theAnimations = (List<Map<String, Object>>) theData.get(\"animations\");\n        assertEquals(2, theAnimations.size());\n        assertEquals(\"Lala\", Animation.deserialize(theAnimations.get(0)).getName());\n        assertEquals(\"Lala2\", Animation.deserialize(theAnimations.get(1)).getName());\n\n    }", "signature": "void testSerialize()", "full_signature": "@Test public void testSerialize()", "class_method_signature": "SpriteBehaviorTemplateTest.testSerialize()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getGameScene", "addAnimation", "addAnimation", "set", "currentAnimationProperty", "serialize", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "getUuid", "get", "get", "assertEquals", "size", "assertEquals", "getName", "deserialize", "get", "assertEquals", "getName", "deserialize", "get", "set", "currentAnimationProperty", "serialize", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "get", "assertEquals", "size", "assertEquals", "getName", "deserialize", "get", "assertEquals", "getName", "deserialize", "get"]}, "focal_class": {"identifier": "SpriteBehaviorTemplate", "superclass": "", "interfaces": "implements BehaviorTemplate<SpriteBehavior>, Sprite, Reflectable<SpriteClassInformation>", "fields": [{"original_string": "public static final BehaviorType TYPE = new BehaviorType(\"SpriteBehaviorTemplate\");", "modifier": "public static final", "type": "BehaviorType", "declarator": "TYPE = new BehaviorType(\"SpriteBehaviorTemplate\")", "var_name": "TYPE"}, {"original_string": "private static final SpriteClassInformation CIINSTANCE = new SpriteClassInformation();", "modifier": "private static final", "type": "SpriteClassInformation", "declarator": "CIINSTANCE = new SpriteClassInformation()", "var_name": "CIINSTANCE"}, {"original_string": "private final Property<Animation> currentAnimation;", "modifier": "private final", "type": "Property<Animation>", "declarator": "currentAnimation", "var_name": "currentAnimation"}, {"original_string": "private final Property<Integer> speed;", "modifier": "private final", "type": "Property<Integer>", "declarator": "speed", "var_name": "speed"}, {"original_string": "private final List<Animation> animations;", "modifier": "private final", "type": "List<Animation>", "declarator": "animations", "var_name": "animations"}, {"original_string": "private final GameObject owner;", "modifier": "private final", "type": "GameObject", "declarator": "owner", "var_name": "owner"}, {"original_string": "private final GameEventManager eventManager;", "modifier": "private final", "type": "GameEventManager", "declarator": "eventManager", "var_name": "eventManager"}], "methods": [{"identifier": "SpriteBehaviorTemplate", "parameters": "(GameEventManager aEventManager, GameObject aOwner)", "modifiers": "public", "return": "", "signature": " SpriteBehaviorTemplate(GameEventManager aEventManager, GameObject aOwner)", "full_signature": "public  SpriteBehaviorTemplate(GameEventManager aEventManager, GameObject aOwner)", "class_method_signature": "SpriteBehaviorTemplate.SpriteBehaviorTemplate(GameEventManager aEventManager, GameObject aOwner)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "BehaviorType", "signature": "BehaviorType getType()", "full_signature": "@Override public BehaviorType getType()", "class_method_signature": "SpriteBehaviorTemplate.getType()", "testcase": false, "constructor": false}, {"identifier": "getClassInformation", "parameters": "()", "modifiers": "@Override public", "return": "SpriteClassInformation", "signature": "SpriteClassInformation getClassInformation()", "full_signature": "@Override public SpriteClassInformation getClassInformation()", "class_method_signature": "SpriteBehaviorTemplate.getClassInformation()", "testcase": false, "constructor": false}, {"identifier": "getOwner", "parameters": "()", "modifiers": "@Override public", "return": "GameObject", "signature": "GameObject getOwner()", "full_signature": "@Override public GameObject getOwner()", "class_method_signature": "SpriteBehaviorTemplate.getOwner()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(GameObjectInstance aInstance, GameRuntime aGameRuntime)", "modifiers": "@Override public", "return": "SpriteBehavior", "signature": "SpriteBehavior create(GameObjectInstance aInstance, GameRuntime aGameRuntime)", "full_signature": "@Override public SpriteBehavior create(GameObjectInstance aInstance, GameRuntime aGameRuntime)", "class_method_signature": "SpriteBehaviorTemplate.create(GameObjectInstance aInstance, GameRuntime aGameRuntime)", "testcase": false, "constructor": false}, {"identifier": "currentAnimationProperty", "parameters": "()", "modifiers": "@Override public", "return": "Property<Animation>", "signature": "Property<Animation> currentAnimationProperty()", "full_signature": "@Override public Property<Animation> currentAnimationProperty()", "class_method_signature": "SpriteBehaviorTemplate.currentAnimationProperty()", "testcase": false, "constructor": false}, {"identifier": "speedProperty", "parameters": "()", "modifiers": "@Override public", "return": "Property<Integer>", "signature": "Property<Integer> speedProperty()", "full_signature": "@Override public Property<Integer> speedProperty()", "class_method_signature": "SpriteBehaviorTemplate.speedProperty()", "testcase": false, "constructor": false}, {"identifier": "addAnimation", "parameters": "(Animation aAnimation)", "modifiers": "public", "return": "void", "signature": "void addAnimation(Animation aAnimation)", "full_signature": "public void addAnimation(Animation aAnimation)", "class_method_signature": "SpriteBehaviorTemplate.addAnimation(Animation aAnimation)", "testcase": false, "constructor": false}, {"identifier": "getAnimationByUUID", "parameters": "(String aAnimationUUID)", "modifiers": "private", "return": "Animation", "signature": "Animation getAnimationByUUID(String aAnimationUUID)", "full_signature": "private Animation getAnimationByUUID(String aAnimationUUID)", "class_method_signature": "SpriteBehaviorTemplate.getAnimationByUUID(String aAnimationUUID)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> serialize()", "full_signature": "@Override public Map<String, Object> serialize()", "class_method_signature": "SpriteBehaviorTemplate.serialize()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void delete()", "full_signature": "@Override public void delete()", "class_method_signature": "SpriteBehaviorTemplate.delete()", "testcase": false, "constructor": false}, {"identifier": "getGameScene", "parameters": "()", "modifiers": "@Override public", "return": "GameScene", "signature": "GameScene getGameScene()", "full_signature": "@Override public GameScene getGameScene()", "class_method_signature": "SpriteBehaviorTemplate.getGameScene()", "testcase": false, "constructor": false}, {"identifier": "getAnimations", "parameters": "()", "modifiers": "@Override public", "return": "Animation[]", "signature": "Animation[] getAnimations()", "full_signature": "@Override public Animation[] getAnimations()", "class_method_signature": "SpriteBehaviorTemplate.getAnimations()", "testcase": false, "constructor": false}, {"identifier": "replaceAnimation", "parameters": "(Animation aOldAnimation, Animation aNewAnimation)", "modifiers": "public", "return": "void", "signature": "void replaceAnimation(Animation aOldAnimation, Animation aNewAnimation)", "full_signature": "public void replaceAnimation(Animation aOldAnimation, Animation aNewAnimation)", "class_method_signature": "SpriteBehaviorTemplate.replaceAnimation(Animation aOldAnimation, Animation aNewAnimation)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(GameEventManager aEventManager, GameObject aOwner, Map<String, Object> aSerializedData)", "modifiers": "public static", "return": "SpriteBehaviorTemplate", "signature": "SpriteBehaviorTemplate deserialize(GameEventManager aEventManager, GameObject aOwner, Map<String, Object> aSerializedData)", "full_signature": "public static SpriteBehaviorTemplate deserialize(GameEventManager aEventManager, GameObject aOwner, Map<String, Object> aSerializedData)", "class_method_signature": "SpriteBehaviorTemplate.deserialize(GameEventManager aEventManager, GameObject aOwner, Map<String, Object> aSerializedData)", "testcase": false, "constructor": false}], "file": "gameengine/src/main/java/de/mirkosertic/gameengine/sprite/SpriteBehaviorTemplate.java"}, "focal_method": {"identifier": "serialize", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "body": "@Override\n    public Map<String, Object> serialize() {\n        Map<String, Object> theResult = new HashMap<>();\n        theResult.put(SpriteBehavior.TYPE_ATTRIBUTE, SpriteBehavior.TYPE);\n        List<Map<String, Object>> theAnimations = new ArrayList<>();\n        for (Animation theAnimation : animations) {\n            theAnimations.add(theAnimation.serialize());\n        }\n        theResult.put(\"animations\", theAnimations);\n        if (!currentAnimation.isNull()) {\n            theResult.put(\"currentAnimation\", currentAnimation.get().getUuid());\n        }\n        theResult.put(\"speed\", Integer.toString(speed.get()));\n        return theResult;\n    }", "signature": "Map<String, Object> serialize()", "full_signature": "@Override public Map<String, Object> serialize()", "class_method_signature": "SpriteBehaviorTemplate.serialize()", "testcase": false, "constructor": false, "invocations": ["put", "add", "serialize", "put", "isNull", "put", "getUuid", "get", "put", "toString", "get"]}, "repository": {"repo_id": 13907695, "url": "https://github.com/mirkosertic/GameComposer", "stars": 57, "created": "10/27/2013 6:24:00 PM +00:00", "updates": "2019-12-24T13:09:01+00:00", "fork": "False", "license": "licensed"}}