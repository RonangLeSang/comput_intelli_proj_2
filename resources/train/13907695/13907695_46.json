{"test_class": {"identifier": "CollisionPositionTest", "superclass": "", "interfaces": "", "fields": [], "file": "gameengine/src/test/java/de/mirkosertic/gameengine/type/CollisionPositionTest.java"}, "test_case": {"identifier": "testDetectBottom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDetectBottom() throws Exception {\n        CollisionPosition theColPos = CollisionPosition.BOTTOM;\n        Position thePosition1 = new Position(10, 10);\n        Position thePosition2 = new Position(20, 20);\n        Position thePosition3 = new Position(20, 0);\n        assertFalse(theColPos.detect(thePosition1, thePosition1));\n        assertTrue(theColPos.detect(thePosition1, thePosition2));\n        assertFalse(theColPos.detect(thePosition2, thePosition3));\n    }", "signature": "void testDetectBottom()", "full_signature": "@Test public void testDetectBottom()", "class_method_signature": "CollisionPositionTest.testDetectBottom()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "detect", "assertTrue", "detect", "assertFalse", "detect"]}, "focal_class": {"identifier": "CollisionPosition", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final CollisionPosition EVERYWHERE = new CollisionPosition(\"EVERYWHERE\") {\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return true;\n        }\n    };", "modifier": "public static final", "type": "CollisionPosition", "declarator": "EVERYWHERE = new CollisionPosition(\"EVERYWHERE\") {\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return true;\n        }\n    }", "var_name": "EVERYWHERE"}, {"original_string": "public static final CollisionPosition TOP = new CollisionPosition(\"TOP\") {\n        // Test if instance2 is above instance 1\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return aInstance2.y < aInstance1.y;\n        }\n    };", "modifier": "public static final", "type": "CollisionPosition", "declarator": "TOP = new CollisionPosition(\"TOP\") {\n        // Test if instance2 is above instance 1\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return aInstance2.y < aInstance1.y;\n        }\n    }", "var_name": "TOP"}, {"original_string": "public static final CollisionPosition BOTTOM = new CollisionPosition(\"BOTTOM\") {\n        // Test if instance2 is below instance 1\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return aInstance2.y > aInstance1.y;\n        }\n    };", "modifier": "public static final", "type": "CollisionPosition", "declarator": "BOTTOM = new CollisionPosition(\"BOTTOM\") {\n        // Test if instance2 is below instance 1\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return aInstance2.y > aInstance1.y;\n        }\n    }", "var_name": "BOTTOM"}, {"original_string": "public static final CollisionPosition LEFT = new CollisionPosition(\"LEFT\") {\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return aInstance2.x < aInstance1.x;\n        }\n    };", "modifier": "public static final", "type": "CollisionPosition", "declarator": "LEFT = new CollisionPosition(\"LEFT\") {\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return aInstance2.x < aInstance1.x;\n        }\n    }", "var_name": "LEFT"}, {"original_string": "public static final CollisionPosition RIGHT = new CollisionPosition(\"RIGHT\") {\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return aInstance2.x > aInstance1.x;\n        }\n    };", "modifier": "public static final", "type": "CollisionPosition", "declarator": "RIGHT = new CollisionPosition(\"RIGHT\") {\n        @Override\n        public boolean detect(Position aInstance1, Position aInstance2) {\n            return aInstance2.x > aInstance1.x;\n        }\n    }", "var_name": "RIGHT"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "CollisionPosition", "parameters": "(String aName)", "modifiers": "public", "return": "", "signature": " CollisionPosition(String aName)", "full_signature": "public  CollisionPosition(String aName)", "class_method_signature": "CollisionPosition.CollisionPosition(String aName)", "testcase": false, "constructor": true}, {"identifier": "name", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String name()", "full_signature": "public String name()", "class_method_signature": "CollisionPosition.name()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CollisionPosition.toString()", "testcase": false, "constructor": false}, {"identifier": "detect", "parameters": "(Position aInstance1, Position aInstance2)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean detect(Position aInstance1, Position aInstance2)", "full_signature": "public abstract boolean detect(Position aInstance1, Position aInstance2)", "class_method_signature": "CollisionPosition.detect(Position aInstance1, Position aInstance2)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String aName)", "modifiers": "public static", "return": "CollisionPosition", "signature": "CollisionPosition valueOf(String aName)", "full_signature": "public static CollisionPosition valueOf(String aName)", "class_method_signature": "CollisionPosition.valueOf(String aName)", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "public static", "return": "CollisionPosition[]", "signature": "CollisionPosition[] values()", "full_signature": "public static CollisionPosition[] values()", "class_method_signature": "CollisionPosition.values()", "testcase": false, "constructor": false}], "file": "gameengine/src/main/java/de/mirkosertic/gameengine/type/CollisionPosition.java"}, "focal_method": {"identifier": "detect", "parameters": "(Position aInstance1, Position aInstance2)", "modifiers": "public abstract", "return": "boolean", "body": "public abstract boolean detect(Position aInstance1, Position aInstance2);", "signature": "boolean detect(Position aInstance1, Position aInstance2)", "full_signature": "public abstract boolean detect(Position aInstance1, Position aInstance2)", "class_method_signature": "CollisionPosition.detect(Position aInstance1, Position aInstance2)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 13907695, "url": "https://github.com/mirkosertic/GameComposer", "stars": 57, "created": "10/27/2013 6:24:00 PM +00:00", "updates": "2019-12-24T13:09:01+00:00", "fork": "False", "license": "licensed"}}