{"test_class": {"identifier": "MarkdownTxtmarkTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EOL = \"\\n\";", "modifier": "private static final", "type": "String", "declarator": "EOL = \"\\n\"", "var_name": "EOL"}], "file": "netbout-web/src/test/java/com/netbout/rest/MarkdownTxtmarkTest.java"}, "test_case": {"identifier": "handlesReferenceLinks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handlesReferenceLinks() throws Exception {\n        MatcherAssert.assertThat(\n            new MarkdownTxtmark().html(\n                // @checkstyle LineLengthCheck (1 line)\n                \"Reference-style: \\n![alt text][logo]\\n\\n[logo]: https://camo.githubusercontent.com/f60dcff129bbc252ab48a4bace2aa92cc982774a/687474703a2f2f696d672e7465616d65642e696f2f62746e2e737667\"\n            ),\n            Matchers.equalTo(\n                // @checkstyle LineLengthCheck (1 line)\n                \"<p>Reference-style:<br  />\\n<img src=\\\"https://camo.githubusercontent.com/f60dcff129bbc252ab48a4bace2aa92cc982774a/687474703a2f2f696d672e7465616d65642e696f2f62746e2e737667\\\" alt=\\\"alt text\\\" /><br  /></p>\\n\"\n            )\n        );\n    }", "signature": "void handlesReferenceLinks()", "full_signature": "@Test public void handlesReferenceLinks()", "class_method_signature": "MarkdownTxtmarkTest.handlesReferenceLinks()", "testcase": true, "constructor": false, "invocations": ["assertThat", "html", "equalTo"]}, "focal_class": {"identifier": "MarkdownTxtmark", "superclass": "", "interfaces": "implements Markdown", "fields": [{"original_string": "private static final Pattern LINK = Pattern.compile(\n        // @checkstyle LineLengthCheck (1 line)\n        \"(?<!\\\\]\\\\s{0,256}\\\\()(?<!\\\\]:\\\\s{0,256})(?<!=\\\")(https?:\\\\/\\\\/[a-zA-Z0-9-._~:\\\\?#@!$&'*+,;=%\\\\/]+[a-zA-Z0-9-_~#@$&'*+=%\\\\/])(?![\\\\w.]*\\\\]\\\\()\"\n    );", "modifier": "private static final", "type": "Pattern", "declarator": "LINK = Pattern.compile(\n        // @checkstyle LineLengthCheck (1 line)\n        \"(?<!\\\\]\\\\s{0,256}\\\\()(?<!\\\\]:\\\\s{0,256})(?<!=\\\")(https?:\\\\/\\\\/[a-zA-Z0-9-._~:\\\\?#@!$&'*+,;=%\\\\/]+[a-zA-Z0-9-_~#@$&'*+=%\\\\/])(?![\\\\w.]*\\\\]\\\\()\"\n    )", "var_name": "LINK"}, {"original_string": "private static final Pattern NEW_LINE = Pattern.compile(\n        \"^ {0,3}(\\\\S|(\\\\S.*\\\\S)) ?$\", Pattern.MULTILINE\n    );", "modifier": "private static final", "type": "Pattern", "declarator": "NEW_LINE = Pattern.compile(\n        \"^ {0,3}(\\\\S|(\\\\S.*\\\\S)) ?$\", Pattern.MULTILINE\n    )", "var_name": "NEW_LINE"}, {"original_string": "private static final String EOL = \"\\\\u000D\\\\u000A|[\\\\u000A\\\\u000B\\\\u000C\\\\u000D\\\\u0085\\\\u2028\\\\u2029]\";", "modifier": "private static final", "type": "String", "declarator": "EOL = \"\\\\u000D\\\\u000A|[\\\\u000A\\\\u000B\\\\u000C\\\\u000D\\\\u0085\\\\u2028\\\\u2029]\"", "var_name": "EOL"}, {"original_string": "private static final Pattern CODE_BLOCK_START = Pattern.compile(\n        String.format(\"<code>`(%s)?\", MarkdownTxtmark.EOL)\n    );", "modifier": "private static final", "type": "Pattern", "declarator": "CODE_BLOCK_START = Pattern.compile(\n        String.format(\"<code>`(%s)?\", MarkdownTxtmark.EOL)\n    )", "var_name": "CODE_BLOCK_START"}, {"original_string": "private static final Pattern CODE_BLOCK_END = Pattern.compile(\n        String.format(\"(%s)?</code>`\", MarkdownTxtmark.EOL)\n    );", "modifier": "private static final", "type": "Pattern", "declarator": "CODE_BLOCK_END = Pattern.compile(\n        String.format(\"(%s)?</code>`\", MarkdownTxtmark.EOL)\n    )", "var_name": "CODE_BLOCK_END"}], "methods": [{"identifier": "html", "parameters": "(@NotNull final String txt)", "modifiers": "@Override public", "return": "String", "signature": "String html(@NotNull final String txt)", "full_signature": "@Override public String html(@NotNull final String txt)", "class_method_signature": "MarkdownTxtmark.html(@NotNull final String txt)", "testcase": false, "constructor": false}, {"identifier": "formatLinks", "parameters": "(final String txt)", "modifiers": "private static", "return": "String", "signature": "String formatLinks(final String txt)", "full_signature": "private static String formatLinks(final String txt)", "class_method_signature": "MarkdownTxtmark.formatLinks(final String txt)", "testcase": false, "constructor": false}, {"identifier": "makeLineBreakExcludeCode", "parameters": "(final String txt,\n        final Iterator<String> markers)", "modifiers": "private static", "return": "String", "signature": "String makeLineBreakExcludeCode(final String txt,\n        final Iterator<String> markers)", "full_signature": "private static String makeLineBreakExcludeCode(final String txt,\n        final Iterator<String> markers)", "class_method_signature": "MarkdownTxtmark.makeLineBreakExcludeCode(final String txt,\n        final Iterator<String> markers)", "testcase": false, "constructor": false}, {"identifier": "makeLineBreak", "parameters": "(final String txt)", "modifiers": "private static", "return": "String", "signature": "String makeLineBreak(final String txt)", "full_signature": "private static String makeLineBreak(final String txt)", "class_method_signature": "MarkdownTxtmark.makeLineBreak(final String txt)", "testcase": false, "constructor": false}, {"identifier": "fixedCodeBlocks", "parameters": "(final String txt)", "modifiers": "private static", "return": "String", "signature": "String fixedCodeBlocks(final String txt)", "full_signature": "private static String fixedCodeBlocks(final String txt)", "class_method_signature": "MarkdownTxtmark.fixedCodeBlocks(final String txt)", "testcase": false, "constructor": false}], "file": "netbout-web/src/main/java/com/netbout/rest/MarkdownTxtmark.java"}, "focal_method": {"identifier": "html", "parameters": "(@NotNull final String txt)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String html(@NotNull final String txt) {\n        final Configuration conf = Configuration.builder()\n            .enableSafeMode()\n            .build();\n        return MarkdownTxtmark.fixedCodeBlocks(\n            Processor.process(\n                MarkdownTxtmark.formatLinks(\n                    MarkdownTxtmark.makeLineBreakExcludeCode(\n                        txt,\n                        Arrays.asList(\"```\", \"``\", \"`\").iterator()\n                    )\n                ),\n                conf\n            )\n        );\n    }", "signature": "String html(@NotNull final String txt)", "full_signature": "@Override public String html(@NotNull final String txt)", "class_method_signature": "MarkdownTxtmark.html(@NotNull final String txt)", "testcase": false, "constructor": false, "invocations": ["build", "enableSafeMode", "builder", "fixedCodeBlocks", "process", "formatLinks", "makeLineBreakExcludeCode", "iterator", "asList"]}, "repository": {"repo_id": 9580819, "url": "https://github.com/yegor256/netbout", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 37, "size": 18692, "license": "licensed"}}