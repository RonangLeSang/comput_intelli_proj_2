{"test_class": {"identifier": "DependencyInjectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DependencyInjector injector;", "modifier": "private", "type": "DependencyInjector", "declarator": "injector", "var_name": "injector"}], "file": "mvvmfx/src/test/java/de/saxsys/mvvmfx/internal/viewloader/DependencyInjectorTest.java"}, "test_case": {"identifier": "testGetInstanceOfExceptionBecauseOfParameterizedConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetInstanceOfExceptionBecauseOfParameterizedConstructor() {\n\t\ttry {\n\t\t\tExampleWithParamsConstructor instance = injector.getInstanceOf(ExampleWithParamsConstructor.class);\n\t\t\tfail(\"There should be an InstantiationException\");\n\t\t} catch (RuntimeException e) {\n\t\t\tAssert.assertTrue(e.getCause() instanceof InstantiationException);\n\t\t}\n\t}", "signature": "void testGetInstanceOfExceptionBecauseOfParameterizedConstructor()", "full_signature": "@Test public void testGetInstanceOfExceptionBecauseOfParameterizedConstructor()", "class_method_signature": "DependencyInjectorTest.testGetInstanceOfExceptionBecauseOfParameterizedConstructor()", "testcase": true, "constructor": false, "invocations": ["getInstanceOf", "fail", "assertTrue", "getCause"]}, "focal_class": {"identifier": "DependencyInjector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Callback<Class<?>, Object> customInjector;", "modifier": "private", "type": "Callback<Class<?>, Object>", "declarator": "customInjector", "var_name": "customInjector"}, {"original_string": "private static DependencyInjector singleton = new DependencyInjector();", "modifier": "private static", "type": "DependencyInjector", "declarator": "singleton = new DependencyInjector()", "var_name": "singleton"}], "methods": [{"identifier": "DependencyInjector", "parameters": "()", "modifiers": "", "return": "", "signature": " DependencyInjector()", "full_signature": "  DependencyInjector()", "class_method_signature": "DependencyInjector.DependencyInjector()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "DependencyInjector", "signature": "DependencyInjector getInstance()", "full_signature": "public static DependencyInjector getInstance()", "class_method_signature": "DependencyInjector.getInstance()", "testcase": false, "constructor": false}, {"identifier": "setCustomInjector", "parameters": "(Callback<Class<?>, Object> callback)", "modifiers": "public", "return": "void", "signature": "void setCustomInjector(Callback<Class<?>, Object> callback)", "full_signature": "public void setCustomInjector(Callback<Class<?>, Object> callback)", "class_method_signature": "DependencyInjector.setCustomInjector(Callback<Class<?>, Object> callback)", "testcase": false, "constructor": false}, {"identifier": "getInstanceOf", "parameters": "(Class<? extends T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getInstanceOf(Class<? extends T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getInstanceOf(Class<? extends T> type)", "class_method_signature": "DependencyInjector.getInstanceOf(Class<? extends T> type)", "testcase": false, "constructor": false}, {"identifier": "getCustomInjector", "parameters": "()", "modifiers": "", "return": "Callback<Class<?>, Object>", "signature": "Callback<Class<?>, Object> getCustomInjector()", "full_signature": " Callback<Class<?>, Object> getCustomInjector()", "class_method_signature": "DependencyInjector.getCustomInjector()", "testcase": false, "constructor": false}, {"identifier": "isCustomInjectorDefined", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isCustomInjectorDefined()", "full_signature": " boolean isCustomInjectorDefined()", "class_method_signature": "DependencyInjector.isCustomInjectorDefined()", "testcase": false, "constructor": false}], "file": "mvvmfx/src/main/java/de/saxsys/mvvmfx/internal/viewloader/DependencyInjector.java"}, "focal_method": {"identifier": "getInstanceOf", "parameters": "(Class<? extends T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic <T> T getInstanceOf(Class<? extends T> type) {\n\t\tif (isCustomInjectorDefined()) {\n\t\t\treturn (T) customInjector.call(type);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\t// use default creation\n\t\t\t\treturn type.newInstance();\n\t\t\t} catch (InstantiationException | IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(\"Can't create instance of type \" + type.getName() +\n\t\t\t\t\t\t\". Make sure that the class has a public no-arg constructor.\", e);\n\t\t\t}\n\t\t}\n\t}", "signature": "T getInstanceOf(Class<? extends T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getInstanceOf(Class<? extends T> type)", "class_method_signature": "DependencyInjector.getInstanceOf(Class<? extends T> type)", "testcase": false, "constructor": false, "invocations": ["isCustomInjectorDefined", "call", "newInstance", "getName"]}, "repository": {"repo_id": 12903179, "url": "https://github.com/sialcasa/mvvmFX", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 347, "size": 5545, "license": "licensed"}}