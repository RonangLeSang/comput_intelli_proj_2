{"test_class": {"identifier": "DelegateCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "mvvmfx/src/test/java/de/saxsys/mvvmfx/utils/commands/DelegateCommandTest.java"}, "test_case": {"identifier": "executeSynchronousFailed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void executeSynchronousFailed() throws Exception {\n\t\tBooleanProperty condition = new SimpleBooleanProperty(true);\n\t\tBooleanProperty called = new SimpleBooleanProperty();\n\t\tBooleanProperty succeeded = new SimpleBooleanProperty();\n\t\tBooleanProperty failed = new SimpleBooleanProperty();\n\t\tfinal String exceptionReason = \"Some reason\";\n\t\t\n\t\tDelegateCommand delegateCommand = new DelegateCommand(() -> new Action() {\n\t\t\t@Override\n\t\t\tprotected void action() {\n\t\t\t\tcalled.set(true);\n\t\t\t\tthrow new RuntimeException(exceptionReason);\n\t\t\t}\n\t\t}, condition);\n\t\t\n\t\tdelegateCommand.setOnSucceeded(workerStateEvent -> {\n\t\t\tsucceeded.set(true);\n\t\t});\n\t\t\n\t\tdelegateCommand.setOnFailed(workerStateEvent -> {\n\t\t\tfailed.set(true);\n\t\t});\n\t\t\n\t\t// given\n\t\tassertThat(called.get()).isFalse();\n\t\tassertThat(succeeded.get()).isFalse();\n\t\tassertThat(failed.get()).isFalse();\n\t\t\n\t\t// when\n\t\tdelegateCommand.execute();\n\t\t\n\t\t// then\n\t\tassertThat(called.get()).isTrue();\n\t\tassertThat(succeeded.get()).isFalse();\n\t\tassertThat(failed.get()).isTrue();\n\t\t\n\t\tassertThat(delegateCommand.exceptionProperty().get())\n\t\t\t\t.isNotNull()\n\t\t\t\t.isInstanceOf(RuntimeException.class)\n\t\t\t\t.hasMessage(exceptionReason);\n\t}", "signature": "void executeSynchronousFailed()", "full_signature": "@Test public void executeSynchronousFailed()", "class_method_signature": "DelegateCommandTest.executeSynchronousFailed()", "testcase": true, "constructor": false, "invocations": ["set", "setOnSucceeded", "set", "setOnFailed", "set", "isFalse", "assertThat", "get", "isFalse", "assertThat", "get", "isFalse", "assertThat", "get", "execute", "isTrue", "assertThat", "get", "isFalse", "assertThat", "get", "isTrue", "assertThat", "get", "hasMessage", "isInstanceOf", "isNotNull", "assertThat", "get", "exceptionProperty"]}, "focal_class": {"identifier": "DelegateCommand", "superclass": "extends Service<Void>", "interfaces": "implements Command", "fields": [{"original_string": "protected final Supplier<Action> actionSupplier;", "modifier": "protected final", "type": "Supplier<Action>", "declarator": "actionSupplier", "var_name": "actionSupplier"}, {"original_string": "protected boolean inBackground = false;", "modifier": "protected", "type": "boolean", "declarator": "inBackground = false", "var_name": "inBackground"}, {"original_string": "protected final ReadOnlyBooleanWrapper executable = new ReadOnlyBooleanWrapper(true);", "modifier": "protected final", "type": "ReadOnlyBooleanWrapper", "declarator": "executable = new ReadOnlyBooleanWrapper(true)", "var_name": "executable"}, {"original_string": "protected ReadOnlyBooleanWrapper notExecutable;", "modifier": "protected", "type": "ReadOnlyBooleanWrapper", "declarator": "notExecutable", "var_name": "notExecutable"}, {"original_string": "protected ReadOnlyBooleanWrapper notRunning;", "modifier": "protected", "type": "ReadOnlyBooleanWrapper", "declarator": "notRunning", "var_name": "notRunning"}, {"original_string": "private Property<Throwable> writableExceptionProperty;", "modifier": "private", "type": "Property<Throwable>", "declarator": "writableExceptionProperty", "var_name": "writableExceptionProperty"}, {"original_string": "Logger LOG = LoggerFactory.getLogger(DelegateCommand.class);", "modifier": "", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DelegateCommand.class)", "var_name": "LOG"}], "methods": [{"identifier": "DelegateCommand", "parameters": "(final Supplier<Action> actionSupplier)", "modifiers": "public", "return": "", "signature": " DelegateCommand(final Supplier<Action> actionSupplier)", "full_signature": "public  DelegateCommand(final Supplier<Action> actionSupplier)", "class_method_signature": "DelegateCommand.DelegateCommand(final Supplier<Action> actionSupplier)", "testcase": false, "constructor": true}, {"identifier": "DelegateCommand", "parameters": "(final Supplier<Action> actionSupplier, boolean inBackground)", "modifiers": "public", "return": "", "signature": " DelegateCommand(final Supplier<Action> actionSupplier, boolean inBackground)", "full_signature": "public  DelegateCommand(final Supplier<Action> actionSupplier, boolean inBackground)", "class_method_signature": "DelegateCommand.DelegateCommand(final Supplier<Action> actionSupplier, boolean inBackground)", "testcase": false, "constructor": true}, {"identifier": "DelegateCommand", "parameters": "(final Supplier<Action> actionSupplier, ObservableValue<Boolean> executableObservable)", "modifiers": "public", "return": "", "signature": " DelegateCommand(final Supplier<Action> actionSupplier, ObservableValue<Boolean> executableObservable)", "full_signature": "public  DelegateCommand(final Supplier<Action> actionSupplier, ObservableValue<Boolean> executableObservable)", "class_method_signature": "DelegateCommand.DelegateCommand(final Supplier<Action> actionSupplier, ObservableValue<Boolean> executableObservable)", "testcase": false, "constructor": true}, {"identifier": "DelegateCommand", "parameters": "(final Supplier<Action> actionSupplier, ObservableValue<Boolean> executableObservable,\n\t\t\tboolean inBackground)", "modifiers": "public", "return": "", "signature": " DelegateCommand(final Supplier<Action> actionSupplier, ObservableValue<Boolean> executableObservable,\n\t\t\tboolean inBackground)", "full_signature": "public  DelegateCommand(final Supplier<Action> actionSupplier, ObservableValue<Boolean> executableObservable,\n\t\t\tboolean inBackground)", "class_method_signature": "DelegateCommand.DelegateCommand(final Supplier<Action> actionSupplier, ObservableValue<Boolean> executableObservable,\n\t\t\tboolean inBackground)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "DelegateCommand.execute()", "testcase": false, "constructor": false}, {"identifier": "getStateObjectPropertyReadable", "parameters": "()", "modifiers": "private", "return": "ObjectProperty<State>", "signature": "ObjectProperty<State> getStateObjectPropertyReadable()", "full_signature": "private ObjectProperty<State> getStateObjectPropertyReadable()", "class_method_signature": "DelegateCommand.getStateObjectPropertyReadable()", "testcase": false, "constructor": false}, {"identifier": "getRunningPropertyReadable", "parameters": "()", "modifiers": "private", "return": "BooleanProperty", "signature": "BooleanProperty getRunningPropertyReadable()", "full_signature": "private BooleanProperty getRunningPropertyReadable()", "class_method_signature": "DelegateCommand.getRunningPropertyReadable()", "testcase": false, "constructor": false}, {"identifier": "callActionAndSynthesizeServiceRun", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void callActionAndSynthesizeServiceRun()", "full_signature": "protected void callActionAndSynthesizeServiceRun()", "class_method_signature": "DelegateCommand.callActionAndSynthesizeServiceRun()", "testcase": false, "constructor": false}, {"identifier": "createTask", "parameters": "()", "modifiers": "@Override protected", "return": "Task<Void>", "signature": "Task<Void> createTask()", "full_signature": "@Override protected Task<Void> createTask()", "class_method_signature": "DelegateCommand.createTask()", "testcase": false, "constructor": false}, {"identifier": "executableProperty", "parameters": "()", "modifiers": "@Override public", "return": "ReadOnlyBooleanProperty", "signature": "ReadOnlyBooleanProperty executableProperty()", "full_signature": "@Override public ReadOnlyBooleanProperty executableProperty()", "class_method_signature": "DelegateCommand.executableProperty()", "testcase": false, "constructor": false}, {"identifier": "isExecutable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isExecutable()", "full_signature": "@Override public boolean isExecutable()", "class_method_signature": "DelegateCommand.isExecutable()", "testcase": false, "constructor": false}, {"identifier": "notExecutableProperty", "parameters": "()", "modifiers": "@Override public final", "return": "ReadOnlyBooleanProperty", "signature": "ReadOnlyBooleanProperty notExecutableProperty()", "full_signature": "@Override public final ReadOnlyBooleanProperty notExecutableProperty()", "class_method_signature": "DelegateCommand.notExecutableProperty()", "testcase": false, "constructor": false}, {"identifier": "isNotExecutable", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isNotExecutable()", "full_signature": "@Override public final boolean isNotExecutable()", "class_method_signature": "DelegateCommand.isNotExecutable()", "testcase": false, "constructor": false}, {"identifier": "notRunningProperty", "parameters": "()", "modifiers": "@Override public final", "return": "ReadOnlyBooleanProperty", "signature": "ReadOnlyBooleanProperty notRunningProperty()", "full_signature": "@Override public final ReadOnlyBooleanProperty notRunningProperty()", "class_method_signature": "DelegateCommand.notRunningProperty()", "testcase": false, "constructor": false}, {"identifier": "isNotRunning", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isNotRunning()", "full_signature": "@Override public final boolean isNotRunning()", "class_method_signature": "DelegateCommand.isNotRunning()", "testcase": false, "constructor": false}, {"identifier": "createSynthesizedTask", "parameters": "()", "modifiers": "private", "return": "Task<Void>", "signature": "Task<Void> createSynthesizedTask()", "full_signature": "private Task<Void> createSynthesizedTask()", "class_method_signature": "DelegateCommand.createSynthesizedTask()", "testcase": false, "constructor": false}, {"identifier": "bindServiceExceptionToTaskException", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void bindServiceExceptionToTaskException()", "full_signature": "private void bindServiceExceptionToTaskException()", "class_method_signature": "DelegateCommand.bindServiceExceptionToTaskException()", "testcase": false, "constructor": false}, {"identifier": "unbindServiceExceptionFromTaskException", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unbindServiceExceptionFromTaskException()", "full_signature": "private void unbindServiceExceptionFromTaskException()", "class_method_signature": "DelegateCommand.unbindServiceExceptionFromTaskException()", "testcase": false, "constructor": false}, {"identifier": "setWritableExceptionProperty", "parameters": "(Action action)", "modifiers": "private", "return": "void", "signature": "void setWritableExceptionProperty(Action action)", "full_signature": "private void setWritableExceptionProperty(Action action)", "class_method_signature": "DelegateCommand.setWritableExceptionProperty(Action action)", "testcase": false, "constructor": false}, {"identifier": "setException", "parameters": "(Throwable throwable)", "modifiers": "private", "return": "void", "signature": "void setException(Throwable throwable)", "full_signature": "private void setException(Throwable throwable)", "class_method_signature": "DelegateCommand.setException(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "checkExceptionProperty", "parameters": "(ReadOnlyObjectProperty<Throwable> exceptionProperty)", "modifiers": "@SuppressWarnings(\"unchecked\") protected static", "return": "Property<Throwable>", "signature": "Property<Throwable> checkExceptionProperty(ReadOnlyObjectProperty<Throwable> exceptionProperty)", "full_signature": "@SuppressWarnings(\"unchecked\") protected static Property<Throwable> checkExceptionProperty(ReadOnlyObjectProperty<Throwable> exceptionProperty)", "class_method_signature": "DelegateCommand.checkExceptionProperty(ReadOnlyObjectProperty<Throwable> exceptionProperty)", "testcase": false, "constructor": false}, {"identifier": "getActionSupplier", "parameters": "()", "modifiers": "public", "return": "Supplier<Action>", "signature": "Supplier<Action> getActionSupplier()", "full_signature": "public Supplier<Action> getActionSupplier()", "class_method_signature": "DelegateCommand.getActionSupplier()", "testcase": false, "constructor": false}], "file": "mvvmfx/src/main/java/de/saxsys/mvvmfx/utils/commands/DelegateCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute() {\n\t\tif (!isExecutable()) {\n\t\t\tthrow new RuntimeException(\"The execute()-method of the command was called while it wasn't executable.\");\n\t\t} else {\n\t\t\tif (inBackground) {\n\t\t\t\tsuper.restart();\n\t\t\t} else {\n\t\t\t\t// When the command is not executed in background, we have to imitate a service execution, so the\n\t\t\t\t// service statemachine provides the\n\t\t\t\t// correct service state to the command.\n\t\t\t\tcallActionAndSynthesizeServiceRun();\n\t\t\t}\n\t\t}\n\t}", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "DelegateCommand.execute()", "testcase": false, "constructor": false, "invocations": ["isExecutable", "restart", "callActionAndSynthesizeServiceRun"]}, "repository": {"repo_id": 12903179, "url": "https://github.com/sialcasa/mvvmFX", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 347, "size": 5545, "license": "licensed"}}