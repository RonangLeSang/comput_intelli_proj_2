{"test_class": {"identifier": "ObservableRulesTest", "superclass": "", "interfaces": "", "fields": [], "file": "mvvmfx-validation/src/test/java/de/saxsys/mvvmfx/utils/validation/ObservableRulesTest.java"}, "test_case": {"identifier": "testNotNullOrEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNotNullOrEmpty() {\n\t\tStringProperty value = new SimpleStringProperty();\n\t\t\n\t\tfinal ObservableBooleanValue rule = ObservableRules.notEmpty(value);\n\t\t\n\t\tassertThat(rule.get()).isFalse();\n\t\t\n\t\tvalue.set(\"test\");\n\t\tassertThat(rule.get()).isTrue();\n\t\t\n\t\tvalue.set(\"\");\n\t\tassertThat(rule.get()).isFalse();\n\t\t\n\t\tvalue.set(\"   dds \");\n\t\tassertThat(rule.get()).isTrue();\n\t\t\n\t\tvalue.set(\"    \");\n\t\tassertThat(rule.get()).isFalse();\n\t\t\n\t\tvalue.set(\"1\");\n\t\tassertThat(rule.get()).isTrue();\n\t\t\n\t\tvalue.set(null);\n\t\tassertThat(rule.get()).isFalse();\n\t}", "signature": "void testNotNullOrEmpty()", "full_signature": "@Test public void testNotNullOrEmpty()", "class_method_signature": "ObservableRulesTest.testNotNullOrEmpty()", "testcase": true, "constructor": false, "invocations": ["notEmpty", "isFalse", "assertThat", "get", "set", "isTrue", "assertThat", "get", "set", "isFalse", "assertThat", "get", "set", "isTrue", "assertThat", "get", "set", "isFalse", "assertThat", "get", "set", "isTrue", "assertThat", "get", "set", "isFalse", "assertThat", "get"]}, "focal_class": {"identifier": "ObservableRules", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "fromPredicate", "parameters": "(ObservableValue<T> source, Predicate<T> predicate)", "modifiers": "public static", "return": "ObservableBooleanValue", "signature": "ObservableBooleanValue fromPredicate(ObservableValue<T> source, Predicate<T> predicate)", "full_signature": "public static ObservableBooleanValue fromPredicate(ObservableValue<T> source, Predicate<T> predicate)", "class_method_signature": "ObservableRules.fromPredicate(ObservableValue<T> source, Predicate<T> predicate)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(ObservableValue<String> source)", "modifiers": "public static", "return": "ObservableBooleanValue", "signature": "ObservableBooleanValue notEmpty(ObservableValue<String> source)", "full_signature": "public static ObservableBooleanValue notEmpty(ObservableValue<String> source)", "class_method_signature": "ObservableRules.notEmpty(ObservableValue<String> source)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(ObservableValue<String> source, Pattern pattern)", "modifiers": "public static", "return": "ObservableBooleanValue", "signature": "ObservableBooleanValue matches(ObservableValue<String> source, Pattern pattern)", "full_signature": "public static ObservableBooleanValue matches(ObservableValue<String> source, Pattern pattern)", "class_method_signature": "ObservableRules.matches(ObservableValue<String> source, Pattern pattern)", "testcase": false, "constructor": false}], "file": "mvvmfx-validation/src/main/java/de/saxsys/mvvmfx/utils/validation/ObservableRules.java"}, "focal_method": {"identifier": "notEmpty", "parameters": "(ObservableValue<String> source)", "modifiers": "public static", "return": "ObservableBooleanValue", "body": "public static ObservableBooleanValue notEmpty(ObservableValue<String> source) {\n\t\treturn Bindings.createBooleanBinding(() -> {\n\t\t\tfinal String s = source.getValue();\n\t\t\t\n\t\t\treturn s != null && !s.trim().isEmpty();\n\t\t}, source);\n\t}", "signature": "ObservableBooleanValue notEmpty(ObservableValue<String> source)", "full_signature": "public static ObservableBooleanValue notEmpty(ObservableValue<String> source)", "class_method_signature": "ObservableRules.notEmpty(ObservableValue<String> source)", "testcase": false, "constructor": false, "invocations": ["createBooleanBinding", "getValue", "isEmpty", "trim"]}, "repository": {"repo_id": 12903179, "url": "https://github.com/sialcasa/mvvmFX", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 347, "size": 5545, "license": "licensed"}}