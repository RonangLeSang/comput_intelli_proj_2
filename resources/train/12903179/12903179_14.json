{"test_class": {"identifier": "ResourceBundleInjectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResourceBundle resourceBundle;", "modifier": "private", "type": "ResourceBundle", "declarator": "resourceBundle", "var_name": "resourceBundle"}], "file": "mvvmfx/src/test/java/de/saxsys/mvvmfx/internal/viewloader/ResourceBundleInjectorTest.java"}, "test_case": {"identifier": "success_optionalAttributeIsTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void success_optionalAttributeIsTrue() {\n\t\tclass Example {\n\t\t\t@InjectResourceBundle(optional = true)\n\t\t\tResourceBundle resourceBundle;\n\t\t}\n\t\t\n\t\tExample example = new Example();\n\t\t\n\t\tResourceBundleInjector.injectResourceBundle(example, resourceBundle);\n\t\t\n\t\tassertThat(example.resourceBundle).isEqualTo(resourceBundle);\n\t}", "signature": "void success_optionalAttributeIsTrue()", "full_signature": "@Test public void success_optionalAttributeIsTrue()", "class_method_signature": "ResourceBundleInjectorTest.success_optionalAttributeIsTrue()", "testcase": true, "constructor": false, "invocations": ["injectResourceBundle", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ResourceBundleInjector", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "injectResourceBundle", "parameters": "(Object target, ResourceBundle resourceBundle)", "modifiers": "static", "return": "void", "signature": "void injectResourceBundle(Object target, ResourceBundle resourceBundle)", "full_signature": "static void injectResourceBundle(Object target, ResourceBundle resourceBundle)", "class_method_signature": "ResourceBundleInjector.injectResourceBundle(Object target, ResourceBundle resourceBundle)", "testcase": false, "constructor": false}], "file": "mvvmfx/src/main/java/de/saxsys/mvvmfx/internal/viewloader/ResourceBundleInjector.java"}, "focal_method": {"identifier": "injectResourceBundle", "parameters": "(Object target, ResourceBundle resourceBundle)", "modifiers": "static", "return": "void", "body": "static void injectResourceBundle(Object target, ResourceBundle resourceBundle) {\n\t\tfinal List<Field> fieldsWithAnnotation = ReflectionUtils\n\t\t\t\t.getFieldsWithAnnotation(target, InjectResourceBundle.class);\n\t\t\n\t\tfinal boolean notAssignableFieldPresent = fieldsWithAnnotation.stream()\n\t\t\t\t.anyMatch(field -> !field.getType().isAssignableFrom(ResourceBundle.class));\n\t\t\n\t\tif (notAssignableFieldPresent) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"The class [\"\n\t\t\t\t\t\t\t+ target\n\t\t\t\t\t\t\t+ \"] has at least one field with the annotation @InjectResourceBundle but the field is not of type ResourceBundle.\");\n\t\t}\n\t\t\n\t\t// check whether the user has provided any resourceBundle or not\n\t\tif (resourceBundle == null || resourceBundle.equals(EMPTY_RESOURCE_BUNDLE)) {\n\t\t\t\n\t\t\tif (!fieldsWithAnnotation.isEmpty()) {\n\t\t\t\t\n\t\t\t\tfinal boolean nonOptionalFieldsPresent = fieldsWithAnnotation.stream()\n\t\t\t\t\t\t.flatMap(field -> Arrays.stream(field.getAnnotationsByType(InjectResourceBundle.class)))\n\t\t\t\t\t\t.anyMatch(annotation -> !annotation.optional());\n\t\t\t\t\n\t\t\t\t// if all annotated fields are marked as \"optional\", no exception has to be thrown.\n\t\t\t\tif (nonOptionalFieldsPresent) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\"The class [\"\n\t\t\t\t\t\t\t\t\t+ target\n\t\t\t\t\t\t\t\t\t+ \"] expects a ResourceBundle to be injected but no ResourceBundle was defined while loading.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfieldsWithAnnotation\n\t\t\t\t\t.forEach(field -> {\n\t\t\t\t\t\tif (field.getType().isAssignableFrom(ResourceBundle.class)) {\n\t\t\t\t\t\t\tReflectionUtils.setField(field, target, resourceBundle);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\t\t\"The class [\"\n\t\t\t\t\t\t\t\t\t\t\t+ target\n\t\t\t\t\t\t\t\t\t\t\t+ \"] has a field with the @InjectResourceBundle annotation but the type of the field doesn't match ResourceBundle\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t}\n\t}", "signature": "void injectResourceBundle(Object target, ResourceBundle resourceBundle)", "full_signature": "static void injectResourceBundle(Object target, ResourceBundle resourceBundle)", "class_method_signature": "ResourceBundleInjector.injectResourceBundle(Object target, ResourceBundle resourceBundle)", "testcase": false, "constructor": false, "invocations": ["getFieldsWithAnnotation", "anyMatch", "stream", "isAssignableFrom", "getType", "equals", "isEmpty", "anyMatch", "flatMap", "stream", "stream", "getAnnotationsByType", "optional", "forEach", "isAssignableFrom", "getType", "setField"]}, "repository": {"repo_id": 12903179, "url": "https://github.com/sialcasa/mvvmFX", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 347, "size": 5545, "license": "licensed"}}