{"test_class": {"identifier": "PolyUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA_06 = 1e-06;", "modifier": "private static final", "type": "double", "declarator": "DELTA_06 = 1e-06", "var_name": "DELTA_06"}, {"original_string": "private static final double DELTA_03 = 1e-03;", "modifier": "private static final", "type": "double", "declarator": "DELTA_03 = 1e-03", "var_name": "DELTA_03"}, {"original_string": "private static final double DELTA_02 = 1e-02;", "modifier": "private static final", "type": "double", "declarator": "DELTA_02 = 1e-02", "var_name": "DELTA_02"}, {"original_string": "private static final double DELTA_01 = 1e-01;", "modifier": "private static final", "type": "double", "declarator": "DELTA_01 = 1e-01", "var_name": "DELTA_01"}], "file": "jdoris-core/src/test/java/org/jdoris/core/utils/PolyUtilsTest.java"}, "test_case": {"identifier": "testNormalize2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNormalize2() throws Exception {\n        double normValue1_EXPECTED = -2;\n        double normValue2_EXPECTED = -1.636363636363;\n        int min_int = 1;\n        int max_int = 100;\n        double min_double = 1.0;\n        double max_double = 100.;\n        Assert.assertEquals(normValue1_EXPECTED, PolyUtils.normalize2(1, min_int, max_int), DELTA_06);\n        Assert.assertEquals(normValue1_EXPECTED, PolyUtils.normalize2(1, min_double, max_double), DELTA_06);\n        Assert.assertEquals(normValue2_EXPECTED, PolyUtils.normalize2(10, min_int, max_int), DELTA_06);\n        Assert.assertEquals(normValue2_EXPECTED, PolyUtils.normalize2(10, min_double, max_double), DELTA_06);\n    }", "signature": "void testNormalize2()", "full_signature": "@Test public void testNormalize2()", "class_method_signature": "PolyUtilsTest.testNormalize2()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "normalize2", "assertEquals", "normalize2", "assertEquals", "normalize2", "assertEquals", "normalize2"]}, "focal_class": {"identifier": "PolyUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = (Logger) LoggerFactory.getLogger(PolyUtils.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = (Logger) LoggerFactory.getLogger(PolyUtils.class)", "var_name": "logger"}], "methods": [{"identifier": "normalize2", "parameters": "(double data, final int min, final int max)", "modifiers": "public static", "return": "double", "signature": "double normalize2(double data, final int min, final int max)", "full_signature": "public static double normalize2(double data, final int min, final int max)", "class_method_signature": "PolyUtils.normalize2(double data, final int min, final int max)", "testcase": false, "constructor": false}, {"identifier": "normalize2", "parameters": "(double data, final double min, final double max)", "modifiers": "public static", "return": "double", "signature": "double normalize2(double data, final double min, final double max)", "full_signature": "public static double normalize2(double data, final double min, final double max)", "class_method_signature": "PolyUtils.normalize2(double data, final double min, final double max)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(DoubleMatrix t)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix normalize(DoubleMatrix t)", "full_signature": "public static DoubleMatrix normalize(DoubleMatrix t)", "class_method_signature": "PolyUtils.normalize(DoubleMatrix t)", "testcase": false, "constructor": false}, {"identifier": "degreeFromCoefficients", "parameters": "(int numOfCoefficients)", "modifiers": "public static", "return": "int", "signature": "int degreeFromCoefficients(int numOfCoefficients)", "full_signature": "public static int degreeFromCoefficients(int numOfCoefficients)", "class_method_signature": "PolyUtils.degreeFromCoefficients(int numOfCoefficients)", "testcase": false, "constructor": false}, {"identifier": "numberOfCoefficients", "parameters": "(final int degree)", "modifiers": "public static", "return": "int", "signature": "int numberOfCoefficients(final int degree)", "full_signature": "public static int numberOfCoefficients(final int degree)", "class_method_signature": "PolyUtils.numberOfCoefficients(final int degree)", "testcase": false, "constructor": false}, {"identifier": "polyFitNormalized", "parameters": "(DoubleMatrix t, DoubleMatrix y, final int degree)", "modifiers": "public static", "return": "double[]", "signature": "double[] polyFitNormalized(DoubleMatrix t, DoubleMatrix y, final int degree)", "full_signature": "public static double[] polyFitNormalized(DoubleMatrix t, DoubleMatrix y, final int degree)", "class_method_signature": "PolyUtils.polyFitNormalized(DoubleMatrix t, DoubleMatrix y, final int degree)", "testcase": false, "constructor": false}, {"identifier": "polyFit2D", "parameters": "(final DoubleMatrix x, final DoubleMatrix y, final DoubleMatrix z, final int degree)", "modifiers": "public static", "return": "double[]", "signature": "double[] polyFit2D(final DoubleMatrix x, final DoubleMatrix y, final DoubleMatrix z, final int degree)", "full_signature": "public static double[] polyFit2D(final DoubleMatrix x, final DoubleMatrix y, final DoubleMatrix z, final int degree)", "class_method_signature": "PolyUtils.polyFit2D(final DoubleMatrix x, final DoubleMatrix y, final DoubleMatrix z, final int degree)", "testcase": false, "constructor": false}, {"identifier": "polyFit", "parameters": "(DoubleMatrix t, DoubleMatrix y, final int degree)", "modifiers": "public static", "return": "double[]", "signature": "double[] polyFit(DoubleMatrix t, DoubleMatrix y, final int degree)", "full_signature": "public static double[] polyFit(DoubleMatrix t, DoubleMatrix y, final int degree)", "class_method_signature": "PolyUtils.polyFit(DoubleMatrix t, DoubleMatrix y, final int degree)", "testcase": false, "constructor": false}, {"identifier": "polyVal1D", "parameters": "(double x, double[] coeffs)", "modifiers": "public static", "return": "double", "signature": "double polyVal1D(double x, double[] coeffs)", "full_signature": "public static double polyVal1D(double x, double[] coeffs)", "class_method_signature": "PolyUtils.polyVal1D(double x, double[] coeffs)", "testcase": false, "constructor": false}, {"identifier": "polyval", "parameters": "(final double[] x, final double[] y, final double coeff[], int degree)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] polyval(final double[] x, final double[] y, final double coeff[], int degree)", "full_signature": "public static double[][] polyval(final double[] x, final double[] y, final double coeff[], int degree)", "class_method_signature": "PolyUtils.polyval(final double[] x, final double[] y, final double coeff[], int degree)", "testcase": false, "constructor": false}, {"identifier": "polyval", "parameters": "(final DoubleMatrix x, final DoubleMatrix y, final DoubleMatrix coeff, int degree)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix polyval(final DoubleMatrix x, final DoubleMatrix y, final DoubleMatrix coeff, int degree)", "full_signature": "public static DoubleMatrix polyval(final DoubleMatrix x, final DoubleMatrix y, final DoubleMatrix coeff, int degree)", "class_method_signature": "PolyUtils.polyval(final DoubleMatrix x, final DoubleMatrix y, final DoubleMatrix coeff, int degree)", "testcase": false, "constructor": false}, {"identifier": "polyval", "parameters": "(final double x, final double y, final DoubleMatrix coeff, int degree)", "modifiers": "public static", "return": "double", "signature": "double polyval(final double x, final double y, final DoubleMatrix coeff, int degree)", "full_signature": "public static double polyval(final double x, final double y, final DoubleMatrix coeff, int degree)", "class_method_signature": "PolyUtils.polyval(final double x, final double y, final DoubleMatrix coeff, int degree)", "testcase": false, "constructor": false}, {"identifier": "polyval", "parameters": "(final double x, final double y, final double[] coeff)", "modifiers": "public static", "return": "double", "signature": "double polyval(final double x, final double y, final double[] coeff)", "full_signature": "public static double polyval(final double x, final double y, final double[] coeff)", "class_method_signature": "PolyUtils.polyval(final double x, final double y, final double[] coeff)", "testcase": false, "constructor": false}, {"identifier": "polyval", "parameters": "(final double x, final double y, final double[] coeff, int degree)", "modifiers": "public static", "return": "double", "signature": "double polyval(final double x, final double y, final double[] coeff, int degree)", "full_signature": "public static double polyval(final double x, final double y, final double[] coeff, int degree)", "class_method_signature": "PolyUtils.polyval(final double x, final double y, final double[] coeff, int degree)", "testcase": false, "constructor": false}], "file": "jdoris-core/src/main/java/org/jdoris/core/utils/PolyUtils.java"}, "focal_method": {"identifier": "normalize2", "parameters": "(double data, final int min, final int max)", "modifiers": "public static", "return": "double", "body": "public static double normalize2(double data, final int min, final int max) {\n        data -= (0.5 * (min + max));\n        data /= (0.25 * (max - min));\n        return data;\n    }", "signature": "double normalize2(double data, final int min, final int max)", "full_signature": "public static double normalize2(double data, final int min, final int max)", "class_method_signature": "PolyUtils.normalize2(double data, final int min, final int max)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1605107, "url": "https://github.com/ppolabs/jdoris", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 3997, "license": "licensed"}}