{"test_class": {"identifier": "LinearAlgebraUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DoubleMatrix A_15 = new DoubleMatrix(5, 1);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "A_15 = new DoubleMatrix(5, 1)", "var_name": "A_15"}, {"original_string": "private static DoubleMatrix A_15_SHIFT_EXPECTED = new DoubleMatrix(5, 1);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "A_15_SHIFT_EXPECTED = new DoubleMatrix(5, 1)", "var_name": "A_15_SHIFT_EXPECTED"}, {"original_string": "private static DoubleMatrix A_33 = new DoubleMatrix(3, 3);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "A_33 = new DoubleMatrix(3, 3)", "var_name": "A_33"}, {"original_string": "private static DoubleMatrix A_33_FLIP_EXPECTED = new DoubleMatrix(3, 3);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "A_33_FLIP_EXPECTED = new DoubleMatrix(3, 3)", "var_name": "A_33_FLIP_EXPECTED"}, {"original_string": "private static DoubleMatrix ATA_33_EXPECTED = new DoubleMatrix(3, 3);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "ATA_33_EXPECTED = new DoubleMatrix(3, 3)", "var_name": "ATA_33_EXPECTED"}, {"original_string": "private static DoubleMatrix A_PASCAL_22 = new DoubleMatrix(2, 2);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "A_PASCAL_22 = new DoubleMatrix(2, 2)", "var_name": "A_PASCAL_22"}, {"original_string": "private static DoubleMatrix A_PASCAL_33 = new DoubleMatrix(3, 3);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "A_PASCAL_33 = new DoubleMatrix(3, 3)", "var_name": "A_PASCAL_33"}, {"original_string": "private static ComplexDoubleMatrix A_PASCAL_22_CPLX;", "modifier": "private static", "type": "ComplexDoubleMatrix", "declarator": "A_PASCAL_22_CPLX", "var_name": "A_PASCAL_22_CPLX"}, {"original_string": "private static double[][] A_PASCAL_33_SQUARED = new double[3][3];", "modifier": "private static", "type": "double[][]", "declarator": "A_PASCAL_33_SQUARED = new double[3][3]", "var_name": "A_PASCAL_33_SQUARED"}, {"original_string": "private static final double[] X_22 = new double[]{3, 1};", "modifier": "private static final", "type": "double[]", "declarator": "X_22 = new double[]{3, 1}", "var_name": "X_22"}, {"original_string": "private static final double[] X_33 = new double[]{3, 1, 4};", "modifier": "private static final", "type": "double[]", "declarator": "X_33 = new double[]{3, 1, 4}", "var_name": "X_33"}, {"original_string": "private static final double[] SOL_22_EXPECTED = new double[]{5, -2};", "modifier": "private static final", "type": "double[]", "declarator": "SOL_22_EXPECTED = new double[]{5, -2}", "var_name": "SOL_22_EXPECTED"}, {"original_string": "private static final double[] SOL_33_EXPECTED = new double[]{10, -12, 5};", "modifier": "private static final", "type": "double[]", "declarator": "SOL_33_EXPECTED = new double[]{10, -12, 5}", "var_name": "SOL_33_EXPECTED"}, {"original_string": "private static final double[] SOL_33_EXPECTED_ABS = new double[]{10, 12, 5};", "modifier": "private static final", "type": "double[]", "declarator": "SOL_33_EXPECTED_ABS = new double[]{10, 12, 5}", "var_name": "SOL_33_EXPECTED_ABS"}, {"original_string": "private static final double DELTA = 1e-06;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 1e-06", "var_name": "DELTA"}, {"original_string": "private static DoubleMatrix A_PASCAL_33_CHOL_EXPECTED = new DoubleMatrix(3, 3);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "A_PASCAL_33_CHOL_EXPECTED = new DoubleMatrix(3, 3)", "var_name": "A_PASCAL_33_CHOL_EXPECTED"}, {"original_string": "private static DoubleMatrix A_PASCAL_33_CHOL_INV_EXPECTED = new DoubleMatrix(3, 3);", "modifier": "private static", "type": "DoubleMatrix", "declarator": "A_PASCAL_33_CHOL_INV_EXPECTED = new DoubleMatrix(3, 3)", "var_name": "A_PASCAL_33_CHOL_INV_EXPECTED"}, {"original_string": "private static ComplexDoubleMatrix A_PASCAL_22_CPLX_times2_EXPECTED = new ComplexDoubleMatrix(2, 2);", "modifier": "private static", "type": "ComplexDoubleMatrix", "declarator": "A_PASCAL_22_CPLX_times2_EXPECTED = new ComplexDoubleMatrix(2, 2)", "var_name": "A_PASCAL_22_CPLX_times2_EXPECTED"}], "file": "jdoris-core/src/test/java/org/jdoris/core/utils/LinearAlgebraUtilsTest.java"}, "test_case": {"identifier": "testSolve22", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSolve22() throws Exception {\n        double[] SOL_22_ACTUAL = LinearAlgebraUtils.solve22(A_PASCAL_22.toArray2(), X_22);\n        Assert.assertArrayEquals(SOL_22_EXPECTED, SOL_22_ACTUAL, DELTA);\n    }", "signature": "void testSolve22()", "full_signature": "@Test public void testSolve22()", "class_method_signature": "LinearAlgebraUtilsTest.testSolve22()", "testcase": true, "constructor": false, "invocations": ["solve22", "toArray2", "assertArrayEquals"]}, "focal_class": {"identifier": "LinearAlgebraUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = Logger.getLogger(LinearAlgebraUtils.class.getName());", "modifier": "static", "type": "Logger", "declarator": "logger = Logger.getLogger(LinearAlgebraUtils.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "solve22", "parameters": "(double[][] A, double[] y)", "modifiers": "public static", "return": "double[]", "signature": "double[] solve22(double[][] A, double[] y)", "full_signature": "public static double[] solve22(double[][] A, double[] y)", "class_method_signature": "LinearAlgebraUtils.solve22(double[][] A, double[] y)", "testcase": false, "constructor": false}, {"identifier": "solve33", "parameters": "(double[][] A, double[] rhs)", "modifiers": "public static", "return": "double[]", "signature": "double[] solve33(double[][] A, double[] rhs)", "full_signature": "public static double[] solve33(double[][] A, double[] rhs)", "class_method_signature": "LinearAlgebraUtils.solve33(double[][] A, double[] rhs)", "testcase": false, "constructor": false}, {"identifier": "absMatrix", "parameters": "(DoubleMatrix inMatrix)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix absMatrix(DoubleMatrix inMatrix)", "full_signature": "public static DoubleMatrix absMatrix(DoubleMatrix inMatrix)", "class_method_signature": "LinearAlgebraUtils.absMatrix(DoubleMatrix inMatrix)", "testcase": false, "constructor": false}, {"identifier": "absMatrix", "parameters": "(double[][] inMatrix)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] absMatrix(double[][] inMatrix)", "full_signature": "public static double[][] absMatrix(double[][] inMatrix)", "class_method_signature": "LinearAlgebraUtils.absMatrix(double[][] inMatrix)", "testcase": false, "constructor": false}, {"identifier": "matrixPower", "parameters": "(DoubleMatrix data, double scalar)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix matrixPower(DoubleMatrix data, double scalar)", "full_signature": "public static DoubleMatrix matrixPower(DoubleMatrix data, double scalar)", "class_method_signature": "LinearAlgebraUtils.matrixPower(DoubleMatrix data, double scalar)", "testcase": false, "constructor": false}, {"identifier": "matrixPower", "parameters": "(double[][] inMatrix, double scalar)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] matrixPower(double[][] inMatrix, double scalar)", "full_signature": "public static double[][] matrixPower(double[][] inMatrix, double scalar)", "class_method_signature": "LinearAlgebraUtils.matrixPower(double[][] inMatrix, double scalar)", "testcase": false, "constructor": false}, {"identifier": "invertChol_inplace", "parameters": "(double[][] inMatrix)", "modifiers": "public static", "return": "void", "signature": "void invertChol_inplace(double[][] inMatrix)", "full_signature": "public static void invertChol_inplace(double[][] inMatrix)", "class_method_signature": "LinearAlgebraUtils.invertChol_inplace(double[][] inMatrix)", "testcase": false, "constructor": false}, {"identifier": "invertChol", "parameters": "(double[][] inMatrix)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] invertChol(double[][] inMatrix)", "full_signature": "public static double[][] invertChol(double[][] inMatrix)", "class_method_signature": "LinearAlgebraUtils.invertChol(double[][] inMatrix)", "testcase": false, "constructor": false}, {"identifier": "invertChol_inplace", "parameters": "(DoubleMatrix inMatrix)", "modifiers": "public static", "return": "void", "signature": "void invertChol_inplace(DoubleMatrix inMatrix)", "full_signature": "public static void invertChol_inplace(DoubleMatrix inMatrix)", "class_method_signature": "LinearAlgebraUtils.invertChol_inplace(DoubleMatrix inMatrix)", "testcase": false, "constructor": false}, {"identifier": "invertChol", "parameters": "(DoubleMatrix inMatrix)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix invertChol(DoubleMatrix inMatrix)", "full_signature": "public static DoubleMatrix invertChol(DoubleMatrix inMatrix)", "class_method_signature": "LinearAlgebraUtils.invertChol(DoubleMatrix inMatrix)", "testcase": false, "constructor": false}, {"identifier": "dotmult", "parameters": "(ComplexDoubleMatrix A, ComplexDoubleMatrix B)", "modifiers": "public static", "return": "ComplexDoubleMatrix", "signature": "ComplexDoubleMatrix dotmult(ComplexDoubleMatrix A, ComplexDoubleMatrix B)", "full_signature": "public static ComplexDoubleMatrix dotmult(ComplexDoubleMatrix A, ComplexDoubleMatrix B)", "class_method_signature": "LinearAlgebraUtils.dotmult(ComplexDoubleMatrix A, ComplexDoubleMatrix B)", "testcase": false, "constructor": false}, {"identifier": "dotmult_inplace", "parameters": "(ComplexDoubleMatrix A, ComplexDoubleMatrix B)", "modifiers": "public static", "return": "void", "signature": "void dotmult_inplace(ComplexDoubleMatrix A, ComplexDoubleMatrix B)", "full_signature": "public static void dotmult_inplace(ComplexDoubleMatrix A, ComplexDoubleMatrix B)", "class_method_signature": "LinearAlgebraUtils.dotmult_inplace(ComplexDoubleMatrix A, ComplexDoubleMatrix B)", "testcase": false, "constructor": false}, {"identifier": "fliplr_inplace", "parameters": "(DoubleMatrix A)", "modifiers": "public static", "return": "void", "signature": "void fliplr_inplace(DoubleMatrix A)", "full_signature": "public static void fliplr_inplace(DoubleMatrix A)", "class_method_signature": "LinearAlgebraUtils.fliplr_inplace(DoubleMatrix A)", "testcase": false, "constructor": false}, {"identifier": "matTxmat", "parameters": "(DoubleMatrix matrix1, DoubleMatrix matrix2)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix matTxmat(DoubleMatrix matrix1, DoubleMatrix matrix2)", "full_signature": "public static DoubleMatrix matTxmat(DoubleMatrix matrix1, DoubleMatrix matrix2)", "class_method_signature": "LinearAlgebraUtils.matTxmat(DoubleMatrix matrix1, DoubleMatrix matrix2)", "testcase": false, "constructor": false}, {"identifier": "matTxmat", "parameters": "(ComplexDoubleMatrix matrix1, ComplexDoubleMatrix matrix2)", "modifiers": "public static", "return": "ComplexDoubleMatrix", "signature": "ComplexDoubleMatrix matTxmat(ComplexDoubleMatrix matrix1, ComplexDoubleMatrix matrix2)", "full_signature": "public static ComplexDoubleMatrix matTxmat(ComplexDoubleMatrix matrix1, ComplexDoubleMatrix matrix2)", "class_method_signature": "LinearAlgebraUtils.matTxmat(ComplexDoubleMatrix matrix1, ComplexDoubleMatrix matrix2)", "testcase": false, "constructor": false}, {"identifier": "wshift_inplace", "parameters": "(DoubleMatrix inVector, int n)", "modifiers": "public static", "return": "void", "signature": "void wshift_inplace(DoubleMatrix inVector, int n)", "full_signature": "public static void wshift_inplace(DoubleMatrix inVector, int n)", "class_method_signature": "LinearAlgebraUtils.wshift_inplace(DoubleMatrix inVector, int n)", "testcase": false, "constructor": false}, {"identifier": "wshift", "parameters": "(DoubleMatrix inMatrix, int n)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix wshift(DoubleMatrix inMatrix, int n)", "full_signature": "public static DoubleMatrix wshift(DoubleMatrix inMatrix, int n)", "class_method_signature": "LinearAlgebraUtils.wshift(DoubleMatrix inMatrix, int n)", "testcase": false, "constructor": false}, {"identifier": "setdata", "parameters": "(DoubleMatrix outMatrix, Window outWin, DoubleMatrix inMatrix, Window inWin)", "modifiers": "public static", "return": "void", "signature": "void setdata(DoubleMatrix outMatrix, Window outWin, DoubleMatrix inMatrix, Window inWin)", "full_signature": "public static void setdata(DoubleMatrix outMatrix, Window outWin, DoubleMatrix inMatrix, Window inWin)", "class_method_signature": "LinearAlgebraUtils.setdata(DoubleMatrix outMatrix, Window outWin, DoubleMatrix inMatrix, Window inWin)", "testcase": false, "constructor": false}, {"identifier": "setdata", "parameters": "(ComplexDoubleMatrix outMatrix, Window outWin, ComplexDoubleMatrix inMatrix, Window inWin)", "modifiers": "public static", "return": "void", "signature": "void setdata(ComplexDoubleMatrix outMatrix, Window outWin, ComplexDoubleMatrix inMatrix, Window inWin)", "full_signature": "public static void setdata(ComplexDoubleMatrix outMatrix, Window outWin, ComplexDoubleMatrix inMatrix, Window inWin)", "class_method_signature": "LinearAlgebraUtils.setdata(ComplexDoubleMatrix outMatrix, Window outWin, ComplexDoubleMatrix inMatrix, Window inWin)", "testcase": false, "constructor": false}, {"identifier": "setdata", "parameters": "(ComplexDoubleMatrix outMatrix, ComplexDoubleMatrix inMatrix, Window inWin)", "modifiers": "public static", "return": "void", "signature": "void setdata(ComplexDoubleMatrix outMatrix, ComplexDoubleMatrix inMatrix, Window inWin)", "full_signature": "public static void setdata(ComplexDoubleMatrix outMatrix, ComplexDoubleMatrix inMatrix, Window inWin)", "class_method_signature": "LinearAlgebraUtils.setdata(ComplexDoubleMatrix outMatrix, ComplexDoubleMatrix inMatrix, Window inWin)", "testcase": false, "constructor": false}, {"identifier": "setdata", "parameters": "(DoubleMatrix outMatrix, DoubleMatrix inMatrix, Window inWin)", "modifiers": "public static", "return": "void", "signature": "void setdata(DoubleMatrix outMatrix, DoubleMatrix inMatrix, Window inWin)", "full_signature": "public static void setdata(DoubleMatrix outMatrix, DoubleMatrix inMatrix, Window inWin)", "class_method_signature": "LinearAlgebraUtils.setdata(DoubleMatrix outMatrix, DoubleMatrix inMatrix, Window inWin)", "testcase": false, "constructor": false}, {"identifier": "chol_inplace", "parameters": "(double[][] inMatrix)", "modifiers": "public static", "return": "void", "signature": "void chol_inplace(double[][] inMatrix)", "full_signature": "public static void chol_inplace(double[][] inMatrix)", "class_method_signature": "LinearAlgebraUtils.chol_inplace(double[][] inMatrix)", "testcase": false, "constructor": false}, {"identifier": "chol_inplace", "parameters": "(DoubleMatrix inMatrix)", "modifiers": "public static", "return": "void", "signature": "void chol_inplace(DoubleMatrix inMatrix)", "full_signature": "public static void chol_inplace(DoubleMatrix inMatrix)", "class_method_signature": "LinearAlgebraUtils.chol_inplace(DoubleMatrix inMatrix)", "testcase": false, "constructor": false}, {"identifier": "invert_inplace", "parameters": "(double[][] inMatrix)", "modifiers": "public static", "return": "void", "signature": "void invert_inplace(double[][] inMatrix)", "full_signature": "public static void invert_inplace(double[][] inMatrix)", "class_method_signature": "LinearAlgebraUtils.invert_inplace(double[][] inMatrix)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "(double[][] inMatrix)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] invert(double[][] inMatrix)", "full_signature": "public static double[][] invert(double[][] inMatrix)", "class_method_signature": "LinearAlgebraUtils.invert(double[][] inMatrix)", "testcase": false, "constructor": false}, {"identifier": "invert_inplace", "parameters": "(DoubleMatrix inMatrix)", "modifiers": "public static", "return": "void", "signature": "void invert_inplace(DoubleMatrix inMatrix)", "full_signature": "public static void invert_inplace(DoubleMatrix inMatrix)", "class_method_signature": "LinearAlgebraUtils.invert_inplace(DoubleMatrix inMatrix)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "(DoubleMatrix inMatrix)", "modifiers": "public static", "return": "DoubleMatrix", "signature": "DoubleMatrix invert(DoubleMatrix inMatrix)", "full_signature": "public static DoubleMatrix invert(DoubleMatrix inMatrix)", "class_method_signature": "LinearAlgebraUtils.invert(DoubleMatrix inMatrix)", "testcase": false, "constructor": false}, {"identifier": "arrangeCholesky_inplace", "parameters": "(DoubleMatrix inMatrix)", "modifiers": "public static", "return": "void", "signature": "void arrangeCholesky_inplace(DoubleMatrix inMatrix)", "full_signature": "public static void arrangeCholesky_inplace(DoubleMatrix inMatrix)", "class_method_signature": "LinearAlgebraUtils.arrangeCholesky_inplace(DoubleMatrix inMatrix)", "testcase": false, "constructor": false}, {"identifier": "arrangeCholesky_inplace", "parameters": "(double[][] inArray)", "modifiers": "public static", "return": "void", "signature": "void arrangeCholesky_inplace(double[][] inArray)", "full_signature": "public static void arrangeCholesky_inplace(double[][] inArray)", "class_method_signature": "LinearAlgebraUtils.arrangeCholesky_inplace(double[][] inArray)", "testcase": false, "constructor": false}], "file": "jdoris-core/src/main/java/org/jdoris/core/utils/LinearAlgebraUtils.java"}, "focal_method": {"identifier": "solve22", "parameters": "(double[][] A, double[] y)", "modifiers": "public static", "return": "double[]", "body": "public static double[] solve22(double[][] A, double[] y) throws IllegalArgumentException {\n\n        double[] result = new double[2];\n\n        if (A[0].length != 2 || A.length != 2) {\n            throw new IllegalArgumentException(\"solve22: input: size of A not 22.\");\n        }\n        if (y.length != 2) {\n            throw new IllegalArgumentException(\"solve22: input: size y not 2x1.\");\n        }\n\n        // Direct Solution\n        result[1] = (y[0] - ((A[0][0] / A[1][0]) * y[1])) / (A[0][1] - ((A[0][0] * A[1][1]) / A[1][0]));\n        result[0] = (y[0] - A[0][1] * result[1]) / A[0][0];\n\n        return result;\n\n    }", "signature": "double[] solve22(double[][] A, double[] y)", "full_signature": "public static double[] solve22(double[][] A, double[] y)", "class_method_signature": "LinearAlgebraUtils.solve22(double[][] A, double[] y)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1605107, "url": "https://github.com/ppolabs/jdoris", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 3997, "license": "licensed"}}