{"test_class": {"identifier": "OrbitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = (Logger) LoggerFactory.getLogger(OrbitTest.class.getName());", "modifier": "static", "type": "Logger", "declarator": "logger = (Logger) LoggerFactory.getLogger(OrbitTest.class.getName())", "var_name": "logger"}, {"original_string": "private static final File resFile = new File(\"/d2/unit_test_data/test_cr.res\");", "modifier": "private static final", "type": "File", "declarator": "resFile = new File(\"/d2/unit_test_data/test_cr.res\")", "var_name": "resFile"}, {"original_string": "private static Orbit orbit_ACTUAL;", "modifier": "private static", "type": "Orbit", "declarator": "orbit_ACTUAL", "var_name": "orbit_ACTUAL"}, {"original_string": "private static final SLCImage slcimage = new SLCImage();", "modifier": "private static final", "type": "SLCImage", "declarator": "slcimage = new SLCImage()", "var_name": "slcimage"}, {"original_string": "private static final double[] crGEO_EXPECTED = new double[]{51.9903894167, 4.3896355000, 41.670};", "modifier": "private static final", "type": "double[]", "declarator": "crGEO_EXPECTED = new double[]{51.9903894167, 4.3896355000, 41.670}", "var_name": "crGEO_EXPECTED"}, {"original_string": "private static final Point crXYZ_EXPECTED = new Point(3.92428342070434e+06, 3.01243077763538e+05, 5.00217775318444e+06);", "modifier": "private static final", "type": "Point", "declarator": "crXYZ_EXPECTED = new Point(3.92428342070434e+06, 3.01243077763538e+05, 5.00217775318444e+06)", "var_name": "crXYZ_EXPECTED"}, {"original_string": "private static final Point pixelXYZ_EXPECTED = new Point(3924267.875114853, 301323.1099883879, 5002132.192287684);", "modifier": "private static final", "type": "Point", "declarator": "pixelXYZ_EXPECTED = new Point(3924267.875114853, 301323.1099883879, 5002132.192287684)", "var_name": "pixelXYZ_EXPECTED"}, {"original_string": "private static final Point pixel_EXPECTED = new Point(3615, 18094);", "modifier": "private static final", "type": "Point", "declarator": "pixel_EXPECTED = new Point(3615, 18094)", "var_name": "pixel_EXPECTED"}, {"original_string": "private static final Point subPixel_EXPECTED = new Point(3614.52218889146, 18093.3381301418, crGEO_EXPECTED[2]);", "modifier": "private static final", "type": "Point", "declarator": "subPixel_EXPECTED = new Point(3614.52218889146, 18093.3381301418, crGEO_EXPECTED[2])", "var_name": "subPixel_EXPECTED"}, {"original_string": "private static final Point pixelTime_EXPECTED = new Point(0.002864458452552312, 36487.95443126317);", "modifier": "private static final", "type": "Point", "declarator": "pixelTime_EXPECTED = new Point(0.002864458452552312, 36487.95443126317)", "var_name": "pixelTime_EXPECTED"}, {"original_string": "private static final Point satellitePos_EXPECTED = new Point(4440791.472772267, 685252.6420443446, 5570675.151783929);", "modifier": "private static final", "type": "Point", "declarator": "satellitePos_EXPECTED = new Point(4440791.472772267, 685252.6420443446, 5570675.151783929)", "var_name": "satellitePos_EXPECTED"}, {"original_string": "private static final Point satelliteVel_EXPECTED = new Point(5902.30491148681, -1209.304721400825, -4545.640621144265);", "modifier": "private static final", "type": "Point", "declarator": "satelliteVel_EXPECTED = new Point(5902.30491148681, -1209.304721400825, -4545.640621144265)", "var_name": "satelliteVel_EXPECTED"}, {"original_string": "private static final Point satelliteAcc_EXPECTED = new Point(-4.968594175395303, -1.60033695761798, -6.056842169973311);", "modifier": "private static final", "type": "Point", "declarator": "satelliteAcc_EXPECTED = new Point(-4.968594175395303, -1.60033695761798, -6.056842169973311)", "var_name": "satelliteAcc_EXPECTED"}, {"original_string": "private static final Point dSatCr_EXPECTED = crXYZ_EXPECTED.min(satellitePos_EXPECTED);", "modifier": "private static final", "type": "Point", "declarator": "dSatCr_EXPECTED = crXYZ_EXPECTED.min(satellitePos_EXPECTED)", "var_name": "dSatCr_EXPECTED"}, {"original_string": "double eq1Doppler_EXPECTED = -18565.30647325516;", "modifier": "", "type": "double", "declarator": "eq1Doppler_EXPECTED = -18565.30647325516", "var_name": "eq1Doppler_EXPECTED"}, {"original_string": "double eq2Range_EXPECTED = -6403789.885986328;", "modifier": "", "type": "double", "declarator": "eq2Range_EXPECTED = -6403789.885986328", "var_name": "eq2Range_EXPECTED"}, {"original_string": "double eq3Ellipsoid_EXPECTED = 1.309374277047581e-05;", "modifier": "", "type": "double", "declarator": "eq3Ellipsoid_EXPECTED = 1.309374277047581e-05", "var_name": "eq3Ellipsoid_EXPECTED"}, {"original_string": "private double earthRadius_EXPECTED = 6364903.80517952;", "modifier": "private", "type": "double", "declarator": "earthRadius_EXPECTED = 6364903.80517952", "var_name": "earthRadius_EXPECTED"}, {"original_string": "private double orbitRadius_EXPECTED = 7156998.09505499;", "modifier": "private", "type": "double", "declarator": "orbitRadius_EXPECTED = 7156998.09505499", "var_name": "orbitRadius_EXPECTED"}, {"original_string": "private double azimuthDelta_EXPECTED = 4.56746375292234;", "modifier": "private", "type": "double", "declarator": "azimuthDelta_EXPECTED = 4.56746375292234", "var_name": "azimuthDelta_EXPECTED"}, {"original_string": "private double azimuthResolution_EXPECTED = 5.73506731122275;", "modifier": "private", "type": "double", "declarator": "azimuthResolution_EXPECTED = 5.73506731122275", "var_name": "azimuthResolution_EXPECTED"}, {"original_string": "private static final double[][] stateVectors_EXPECTED =\n            {{36475.000, 4363915.965, 700783.482, 5629051.344},\n                    {36479.000, 4387741.287, 696016.877, 5611135.366},\n                    {36483.000, 4411488.063, 691224.377, 5593121.779},\n                    {36487.000, 4435155.866, 686406.111, 5575010.894},\n                    {36491.000, 4458744.274, 681562.209, 5556803.024},\n                    {36495.000, 4482252.861, 676692.800, 5538498.487}};", "modifier": "private static final", "type": "double[][]", "declarator": "stateVectors_EXPECTED =\n            {{36475.000, 4363915.965, 700783.482, 5629051.344},\n                    {36479.000, 4387741.287, 696016.877, 5611135.366},\n                    {36483.000, 4411488.063, 691224.377, 5593121.779},\n                    {36487.000, 4435155.866, 686406.111, 5575010.894},\n                    {36491.000, 4458744.274, 681562.209, 5556803.024},\n                    {36495.000, 4482252.861, 676692.800, 5538498.487}}", "var_name": "stateVectors_EXPECTED"}, {"original_string": "private static final int poly_degree_EXPECTED = 4;", "modifier": "private static final", "type": "int", "declarator": "poly_degree_EXPECTED = 4", "var_name": "poly_degree_EXPECTED"}, {"original_string": "private static final double[] orbitCoeff_X_EXPECTED =\n            {4435155.8664, 59070.440744, -248.11341149, -1.1048176795, 0.00081383788597};", "modifier": "private static final", "type": "double[]", "declarator": "orbitCoeff_X_EXPECTED =\n            {4435155.8664, 59070.440744, -248.11341149, -1.1048176795, 0.00081383788597}", "var_name": "orbitCoeff_X_EXPECTED"}, {"original_string": "private static final double[] orbitCoeff_Y_EXPECTED =\n            {686406.11108, -12077.763886, -80.113368056, 0.33709490661, 0};", "modifier": "private static final", "type": "double[]", "declarator": "orbitCoeff_Y_EXPECTED =\n            {686406.11108, -12077.763886, -80.113368056, 0.33709490661, 0}", "var_name": "orbitCoeff_Y_EXPECTED"}, {"original_string": "private static final double[] orbitCoeff_Z_EXPECTED =\n            {5575010.8939, -45398.575317, -303.07773437, 0.82183155403, 0.0056965888796};", "modifier": "private static final", "type": "double[]", "declarator": "orbitCoeff_Z_EXPECTED =\n            {5575010.8939, -45398.575317, -303.07773437, 0.82183155403, 0.0056965888796}", "var_name": "orbitCoeff_Z_EXPECTED"}, {"original_string": "private static final double eps_01 = 2E-01;", "modifier": "private static final", "type": "double", "declarator": "eps_01 = 2E-01", "var_name": "eps_01"}, {"original_string": "private static final double eps_03 = 1E-03;", "modifier": "private static final", "type": "double", "declarator": "eps_03 = 1E-03", "var_name": "eps_03"}, {"original_string": "private static final double eps_04 = 1E-04;", "modifier": "private static final", "type": "double", "declarator": "eps_04 = 1E-04", "var_name": "eps_04"}, {"original_string": "private static final double eps_05 = 1E-05;", "modifier": "private static final", "type": "double", "declarator": "eps_05 = 1E-05", "var_name": "eps_05"}, {"original_string": "private static final double eps_06 = 1E-06;", "modifier": "private static final", "type": "double", "declarator": "eps_06 = 1E-06", "var_name": "eps_06"}, {"original_string": "private static Point crSAR_EXPECTED = null;", "modifier": "private static", "type": "Point", "declarator": "crSAR_EXPECTED = null", "var_name": "crSAR_EXPECTED"}], "file": "jdoris-core/src/test/java/org/jdoris/core/OrbitTest.java"}, "test_case": {"identifier": "testEq2_Range", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEq2_Range() throws Exception {\n        Assert.assertEquals(eq2Range_EXPECTED, orbit_ACTUAL.eq2_Range(dSatCr_EXPECTED, pixelTime_EXPECTED.x), eps_03);\n    }", "signature": "void testEq2_Range()", "full_signature": "@Test public void testEq2_Range()", "class_method_signature": "OrbitTest.testEq2_Range()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "eq2_Range"]}, "focal_class": {"identifier": "Orbit", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = (Logger) LoggerFactory.getLogger(Orbit.class.getName());", "modifier": "static", "type": "Logger", "declarator": "logger = (Logger) LoggerFactory.getLogger(Orbit.class.getName())", "var_name": "logger"}, {"original_string": "private String interpMethod;", "modifier": "private", "type": "String", "declarator": "interpMethod", "var_name": "interpMethod"}, {"original_string": "private boolean isInterpolated = false;", "modifier": "private", "type": "boolean", "declarator": "isInterpolated = false", "var_name": "isInterpolated"}, {"original_string": "private boolean isPropagated = false;", "modifier": "private", "type": "boolean", "declarator": "isPropagated = false", "var_name": "isPropagated"}, {"original_string": "private int numStateVectors;", "modifier": "private", "type": "int", "declarator": "numStateVectors", "var_name": "numStateVectors"}, {"original_string": "private double[] time;", "modifier": "private", "type": "double[]", "declarator": "time", "var_name": "time"}, {"original_string": "private double[] data_X;", "modifier": "private", "type": "double[]", "declarator": "data_X", "var_name": "data_X"}, {"original_string": "private double[] data_Y;", "modifier": "private", "type": "double[]", "declarator": "data_Y", "var_name": "data_Y"}, {"original_string": "private double[] data_Z;", "modifier": "private", "type": "double[]", "declarator": "data_Z", "var_name": "data_Z"}, {"original_string": "private double[] coeff_X;", "modifier": "private", "type": "double[]", "declarator": "coeff_X", "var_name": "coeff_X"}, {"original_string": "private double[] coeff_Y;", "modifier": "private", "type": "double[]", "declarator": "coeff_Y", "var_name": "coeff_Y"}, {"original_string": "private double[] coeff_Z;", "modifier": "private", "type": "double[]", "declarator": "coeff_Z", "var_name": "coeff_Z"}, {"original_string": "private int poly_degree;", "modifier": "private", "type": "int", "declarator": "poly_degree", "var_name": "poly_degree"}, {"original_string": "private static final int MAXITER = 10;", "modifier": "private static final", "type": "int", "declarator": "MAXITER = 10", "var_name": "MAXITER"}, {"original_string": "private final static double CRITERPOS = Math.pow(10, -6);", "modifier": "private final static", "type": "double", "declarator": "CRITERPOS = Math.pow(10, -6)", "var_name": "CRITERPOS"}, {"original_string": "private final static double CRITERTIM = Math.pow(10, -10);", "modifier": "private final static", "type": "double", "declarator": "CRITERTIM = Math.pow(10, -10)", "var_name": "CRITERTIM"}, {"original_string": "private final static int refHeight = 0;", "modifier": "private final static", "type": "int", "declarator": "refHeight = 0", "var_name": "refHeight"}, {"original_string": "private final static double ell_a = Constants.WGS84_A;", "modifier": "private final static", "type": "double", "declarator": "ell_a = Constants.WGS84_A", "var_name": "ell_a"}, {"original_string": "private final static double ell_b = Constants.WGS84_B;", "modifier": "private final static", "type": "double", "declarator": "ell_b = Constants.WGS84_B", "var_name": "ell_b"}, {"original_string": "private final static double SOL = Constants.SOL;", "modifier": "private final static", "type": "double", "declarator": "SOL = Constants.SOL", "var_name": "SOL"}], "methods": [{"identifier": "Orbit", "parameters": "()", "modifiers": "public", "return": "", "signature": " Orbit()", "full_signature": "public  Orbit()", "class_method_signature": "Orbit.Orbit()", "testcase": false, "constructor": true}, {"identifier": "Orbit", "parameters": "(double[] timeVector, double[] xVector, double[] yVector, double[] zVector, int degree)", "modifiers": "public", "return": "", "signature": " Orbit(double[] timeVector, double[] xVector, double[] yVector, double[] zVector, int degree)", "full_signature": "public  Orbit(double[] timeVector, double[] xVector, double[] yVector, double[] zVector, int degree)", "class_method_signature": "Orbit.Orbit(double[] timeVector, double[] xVector, double[] yVector, double[] zVector, int degree)", "testcase": false, "constructor": true}, {"identifier": "Orbit", "parameters": "(double[][] stateVectors, int degree)", "modifiers": "public", "return": "", "signature": " Orbit(double[][] stateVectors, int degree)", "full_signature": "public  Orbit(double[][] stateVectors, int degree)", "class_method_signature": "Orbit.Orbit(double[][] stateVectors, int degree)", "testcase": false, "constructor": true}, {"identifier": "parseOrbit", "parameters": "(File file)", "modifiers": "public", "return": "void", "signature": "void parseOrbit(File file)", "full_signature": "public void parseOrbit(File file)", "class_method_signature": "Orbit.parseOrbit(File file)", "testcase": false, "constructor": false}, {"identifier": "Orbit", "parameters": "(MetadataElement nestMetadataElement, int degree)", "modifiers": "public", "return": "", "signature": " Orbit(MetadataElement nestMetadataElement, int degree)", "full_signature": "public  Orbit(MetadataElement nestMetadataElement, int degree)", "class_method_signature": "Orbit.Orbit(MetadataElement nestMetadataElement, int degree)", "testcase": false, "constructor": true}, {"identifier": "setOrbit", "parameters": "(double[][] stateVectors)", "modifiers": "public", "return": "void", "signature": "void setOrbit(double[][] stateVectors)", "full_signature": "public void setOrbit(double[][] stateVectors)", "class_method_signature": "Orbit.setOrbit(double[][] stateVectors)", "testcase": false, "constructor": false}, {"identifier": "computeCoefficients", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void computeCoefficients()", "full_signature": "private void computeCoefficients()", "class_method_signature": "Orbit.computeCoefficients()", "testcase": false, "constructor": false}, {"identifier": "computeCoefficients", "parameters": "(int degree)", "modifiers": "public", "return": "void", "signature": "void computeCoefficients(int degree)", "full_signature": "public void computeCoefficients(int degree)", "class_method_signature": "Orbit.computeCoefficients(int degree)", "testcase": false, "constructor": false}, {"identifier": "getKloKhi", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getKloKhi()", "full_signature": "private void getKloKhi()", "class_method_signature": "Orbit.getKloKhi()", "testcase": false, "constructor": false}, {"identifier": "lph2xyz", "parameters": "(final double line, final double pixel, final double height, final SLCImage slcimage)", "modifiers": "public", "return": "Point", "signature": "Point lph2xyz(final double line, final double pixel, final double height, final SLCImage slcimage)", "full_signature": "public Point lph2xyz(final double line, final double pixel, final double height, final SLCImage slcimage)", "class_method_signature": "Orbit.lph2xyz(final double line, final double pixel, final double height, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "lp2xyz", "parameters": "(final Point sarPixel, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "Point", "signature": "Point lp2xyz(final Point sarPixel, final SLCImage slcimage)", "full_signature": "public synchronized Point lp2xyz(final Point sarPixel, final SLCImage slcimage)", "class_method_signature": "Orbit.lp2xyz(final Point sarPixel, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "lp2xyz", "parameters": "(final double line, final double pixel, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "Point", "signature": "Point lp2xyz(final double line, final double pixel, final SLCImage slcimage)", "full_signature": "public synchronized Point lp2xyz(final double line, final double pixel, final SLCImage slcimage)", "class_method_signature": "Orbit.lp2xyz(final double line, final double pixel, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "xyz2orb", "parameters": "(final Point pointOnEllips, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "Point", "signature": "Point xyz2orb(final Point pointOnEllips, final SLCImage slcimage)", "full_signature": "public synchronized Point xyz2orb(final Point pointOnEllips, final SLCImage slcimage)", "class_method_signature": "Orbit.xyz2orb(final Point pointOnEllips, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "lp2orb", "parameters": "(final Point sarPixel, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "Point", "signature": "Point lp2orb(final Point sarPixel, final SLCImage slcimage)", "full_signature": "public synchronized Point lp2orb(final Point sarPixel, final SLCImage slcimage)", "class_method_signature": "Orbit.lp2orb(final Point sarPixel, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "xyz2t", "parameters": "(final Point pointOnEllips, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "Point", "signature": "Point xyz2t(final Point pointOnEllips, final SLCImage slcimage)", "full_signature": "public synchronized Point xyz2t(final Point pointOnEllips, final SLCImage slcimage)", "class_method_signature": "Orbit.xyz2t(final Point pointOnEllips, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "xyz2lp", "parameters": "(final Point pointOnEllips, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "Point", "signature": "Point xyz2lp(final Point pointOnEllips, final SLCImage slcimage)", "full_signature": "public synchronized Point xyz2lp(final Point pointOnEllips, final SLCImage slcimage)", "class_method_signature": "Orbit.xyz2lp(final Point pointOnEllips, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "ell2lp", "parameters": "(final double[] phi_lam_height, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "Point", "signature": "Point ell2lp(final double[] phi_lam_height, final SLCImage slcimage)", "full_signature": "public synchronized Point ell2lp(final double[] phi_lam_height, final SLCImage slcimage)", "class_method_signature": "Orbit.ell2lp(final double[] phi_lam_height, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "lp2ell", "parameters": "(final Point sarPixel, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "double[]", "signature": "double[] lp2ell(final Point sarPixel, final SLCImage slcimage)", "full_signature": "public synchronized double[] lp2ell(final Point sarPixel, final SLCImage slcimage)", "class_method_signature": "Orbit.lp2ell(final Point sarPixel, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "lph2ell", "parameters": "(final double line, final double pixel, final double height, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "double[]", "signature": "double[] lph2ell(final double line, final double pixel, final double height, final SLCImage slcimage)", "full_signature": "public synchronized double[] lph2ell(final double line, final double pixel, final double height, final SLCImage slcimage)", "class_method_signature": "Orbit.lph2ell(final double line, final double pixel, final double height, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "lph2ell", "parameters": "(final Point sarPixel, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "double[]", "signature": "double[] lph2ell(final Point sarPixel, final SLCImage slcimage)", "full_signature": "public synchronized double[] lph2ell(final Point sarPixel, final SLCImage slcimage)", "class_method_signature": "Orbit.lph2ell(final Point sarPixel, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "lph2ell", "parameters": "(final Point sarPixel, final double height, final SLCImage slcimage)", "modifiers": "public synchronized", "return": "double[]", "signature": "double[] lph2ell(final Point sarPixel, final double height, final SLCImage slcimage)", "full_signature": "public synchronized double[] lph2ell(final Point sarPixel, final double height, final SLCImage slcimage)", "class_method_signature": "Orbit.lph2ell(final Point sarPixel, final double height, final SLCImage slcimage)", "testcase": false, "constructor": false}, {"identifier": "computeBaseline", "parameters": "()", "modifiers": "@Deprecated public", "return": "void", "signature": "void computeBaseline()", "full_signature": "@Deprecated public void computeBaseline()", "class_method_signature": "Orbit.computeBaseline()", "testcase": false, "constructor": false}, {"identifier": "getXYZ", "parameters": "(final double azTime)", "modifiers": "public", "return": "Point", "signature": "Point getXYZ(final double azTime)", "full_signature": "public Point getXYZ(final double azTime)", "class_method_signature": "Orbit.getXYZ(final double azTime)", "testcase": false, "constructor": false}, {"identifier": "getXYZDot", "parameters": "(double azTime)", "modifiers": "public", "return": "Point", "signature": "Point getXYZDot(double azTime)", "full_signature": "public Point getXYZDot(double azTime)", "class_method_signature": "Orbit.getXYZDot(double azTime)", "testcase": false, "constructor": false}, {"identifier": "getXYZDotDot", "parameters": "(final double azTime)", "modifiers": "public", "return": "Point", "signature": "Point getXYZDotDot(final double azTime)", "full_signature": "public Point getXYZDotDot(final double azTime)", "class_method_signature": "Orbit.getXYZDotDot(final double azTime)", "testcase": false, "constructor": false}, {"identifier": "eq1_Doppler", "parameters": "(final Point satVelocity, final Point pointOnEllips)", "modifiers": "public", "return": "double", "signature": "double eq1_Doppler(final Point satVelocity, final Point pointOnEllips)", "full_signature": "public double eq1_Doppler(final Point satVelocity, final Point pointOnEllips)", "class_method_signature": "Orbit.eq1_Doppler(final Point satVelocity, final Point pointOnEllips)", "testcase": false, "constructor": false}, {"identifier": "eq1_Doppler_dt", "parameters": "(final Point pointEllipsSat, final Point satVelocity, final Point satAcceleration)", "modifiers": "private", "return": "double", "signature": "double eq1_Doppler_dt(final Point pointEllipsSat, final Point satVelocity, final Point satAcceleration)", "full_signature": "private double eq1_Doppler_dt(final Point pointEllipsSat, final Point satVelocity, final Point satAcceleration)", "class_method_signature": "Orbit.eq1_Doppler_dt(final Point pointEllipsSat, final Point satVelocity, final Point satAcceleration)", "testcase": false, "constructor": false}, {"identifier": "eq2_Range", "parameters": "(final Point pointEllipsSat, final double rgTime)", "modifiers": "public", "return": "double", "signature": "double eq2_Range(final Point pointEllipsSat, final double rgTime)", "full_signature": "public double eq2_Range(final Point pointEllipsSat, final double rgTime)", "class_method_signature": "Orbit.eq2_Range(final Point pointEllipsSat, final double rgTime)", "testcase": false, "constructor": false}, {"identifier": "eq3_Ellipsoid", "parameters": "(final Point pointOnEllips, final double height)", "modifiers": "public", "return": "double", "signature": "double eq3_Ellipsoid(final Point pointOnEllips, final double height)", "full_signature": "public double eq3_Ellipsoid(final Point pointOnEllips, final double height)", "class_method_signature": "Orbit.eq3_Ellipsoid(final Point pointOnEllips, final double height)", "testcase": false, "constructor": false}, {"identifier": "eq3_Ellipsoid", "parameters": "(final Point pointOnEllips)", "modifiers": "public", "return": "double", "signature": "double eq3_Ellipsoid(final Point pointOnEllips)", "full_signature": "public double eq3_Ellipsoid(final Point pointOnEllips)", "class_method_signature": "Orbit.eq3_Ellipsoid(final Point pointOnEllips)", "testcase": false, "constructor": false}, {"identifier": "eq3_Ellipsoid", "parameters": "(final Point pointOnEllips, final double semiMajorA, final double semiMinorB, final double height)", "modifiers": "public", "return": "double", "signature": "double eq3_Ellipsoid(final Point pointOnEllips, final double semiMajorA, final double semiMinorB, final double height)", "full_signature": "public double eq3_Ellipsoid(final Point pointOnEllips, final double semiMajorA, final double semiMinorB, final double height)", "class_method_signature": "Orbit.eq3_Ellipsoid(final Point pointOnEllips, final double semiMajorA, final double semiMinorB, final double height)", "testcase": false, "constructor": false}, {"identifier": "dumpOrbit", "parameters": "()", "modifiers": "public", "return": "Point[][]", "signature": "Point[][] dumpOrbit()", "full_signature": "public Point[][] dumpOrbit()", "class_method_signature": "Orbit.dumpOrbit()", "testcase": false, "constructor": false}, {"identifier": "showOrbit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void showOrbit()", "full_signature": "public void showOrbit()", "class_method_signature": "Orbit.showOrbit()", "testcase": false, "constructor": false}, {"identifier": "getNumStateVectors", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumStateVectors()", "full_signature": "public int getNumStateVectors()", "class_method_signature": "Orbit.getNumStateVectors()", "testcase": false, "constructor": false}, {"identifier": "getTime", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getTime()", "full_signature": "public double[] getTime()", "class_method_signature": "Orbit.getTime()", "testcase": false, "constructor": false}, {"identifier": "getData_X", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getData_X()", "full_signature": "public double[] getData_X()", "class_method_signature": "Orbit.getData_X()", "testcase": false, "constructor": false}, {"identifier": "getData_Y", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getData_Y()", "full_signature": "public double[] getData_Y()", "class_method_signature": "Orbit.getData_Y()", "testcase": false, "constructor": false}, {"identifier": "getData_Z", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getData_Z()", "full_signature": "public double[] getData_Z()", "class_method_signature": "Orbit.getData_Z()", "testcase": false, "constructor": false}, {"identifier": "getCoeff_X", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getCoeff_X()", "full_signature": "public double[] getCoeff_X()", "class_method_signature": "Orbit.getCoeff_X()", "testcase": false, "constructor": false}, {"identifier": "getCoeff_Y", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getCoeff_Y()", "full_signature": "public double[] getCoeff_Y()", "class_method_signature": "Orbit.getCoeff_Y()", "testcase": false, "constructor": false}, {"identifier": "getCoeff_Z", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getCoeff_Z()", "full_signature": "public double[] getCoeff_Z()", "class_method_signature": "Orbit.getCoeff_Z()", "testcase": false, "constructor": false}, {"identifier": "getPoly_degree", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPoly_degree()", "full_signature": "public int getPoly_degree()", "class_method_signature": "Orbit.getPoly_degree()", "testcase": false, "constructor": false}, {"identifier": "setPoly_degree", "parameters": "(int degree)", "modifiers": "public", "return": "void", "signature": "void setPoly_degree(int degree)", "full_signature": "public void setPoly_degree(int degree)", "class_method_signature": "Orbit.setPoly_degree(int degree)", "testcase": false, "constructor": false}, {"identifier": "isInterpolated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInterpolated()", "full_signature": "public boolean isInterpolated()", "class_method_signature": "Orbit.isInterpolated()", "testcase": false, "constructor": false}, {"identifier": "computeEarthRadius", "parameters": "(Point p, SLCImage metadata)", "modifiers": "public", "return": "double", "signature": "double computeEarthRadius(Point p, SLCImage metadata)", "full_signature": "public double computeEarthRadius(Point p, SLCImage metadata)", "class_method_signature": "Orbit.computeEarthRadius(Point p, SLCImage metadata)", "testcase": false, "constructor": false}, {"identifier": "computeOrbitRadius", "parameters": "(Point p, SLCImage metadata)", "modifiers": "public", "return": "double", "signature": "double computeOrbitRadius(Point p, SLCImage metadata)", "full_signature": "public double computeOrbitRadius(Point p, SLCImage metadata)", "class_method_signature": "Orbit.computeOrbitRadius(Point p, SLCImage metadata)", "testcase": false, "constructor": false}, {"identifier": "computeAzimuthDelta", "parameters": "(Point sarPixel, SLCImage metadata)", "modifiers": "public", "return": "double", "signature": "double computeAzimuthDelta(Point sarPixel, SLCImage metadata)", "full_signature": "public double computeAzimuthDelta(Point sarPixel, SLCImage metadata)", "class_method_signature": "Orbit.computeAzimuthDelta(Point sarPixel, SLCImage metadata)", "testcase": false, "constructor": false}, {"identifier": "computeAzimuthResolution", "parameters": "(Point sarPixel, SLCImage metadata)", "modifiers": "public", "return": "double", "signature": "double computeAzimuthResolution(Point sarPixel, SLCImage metadata)", "full_signature": "public double computeAzimuthResolution(Point sarPixel, SLCImage metadata)", "class_method_signature": "Orbit.computeAzimuthResolution(Point sarPixel, SLCImage metadata)", "testcase": false, "constructor": false}], "file": "jdoris-core/src/main/java/org/jdoris/core/Orbit.java"}, "focal_method": {"identifier": "eq2_Range", "parameters": "(final Point pointEllipsSat, final double rgTime)", "modifiers": "public", "return": "double", "body": "public double eq2_Range(final Point pointEllipsSat, final double rgTime) {\n        return pointEllipsSat.in(pointEllipsSat) - Math.pow(SOL * rgTime, 2);\n    }", "signature": "double eq2_Range(final Point pointEllipsSat, final double rgTime)", "full_signature": "public double eq2_Range(final Point pointEllipsSat, final double rgTime)", "class_method_signature": "Orbit.eq2_Range(final Point pointEllipsSat, final double rgTime)", "testcase": false, "constructor": false, "invocations": ["in", "pow"]}, "repository": {"repo_id": 1605107, "url": "https://github.com/ppolabs/jdoris", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 3997, "license": "licensed"}}