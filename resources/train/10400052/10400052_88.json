{"test_class": {"identifier": "ConvertTest", "superclass": "", "interfaces": "implements JSpecSupport", "fields": [], "file": "javalite-common/src/test/java/org/javalite/common/ConvertTest.java"}, "test_case": {"identifier": "shouldCovertToLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCovertToLong() {\n\n        //integer\n        Object object = Convert.toLong(1);\n        the(object).shouldBeA(Long.class);\n        a(object).shouldBeEqual(1);\n\n        //string\n        object = Convert.toLong(\"1\");\n        the(object).shouldBeA(Long.class);\n        a(object).shouldBeEqual(1);\n\n        //double\n        object = Convert.toLong(1d);\n        the(object).shouldBeA(Long.class);\n        a(object).shouldBeEqual(1);\n\n        //BigDecimal\n        object = Convert.toLong(new BigDecimal(1));\n        the(object).shouldBeA(Long.class);\n        a(object).shouldBeEqual(1);\n\n        //java.util.Date\n        Date date = new Date(1416127392928L);\n        object = Convert.toLong(date);\n        the(object).shouldBeA(Long.class);\n        a(object).shouldBeEqual(1416127392928L);\n\n    }", "signature": "void shouldCovertToLong()", "full_signature": "@Test public void shouldCovertToLong()", "class_method_signature": "ConvertTest.shouldCovertToLong()", "testcase": true, "constructor": false, "invocations": ["toLong", "shouldBeA", "the", "shouldBeEqual", "a", "toLong", "shouldBeA", "the", "shouldBeEqual", "a", "toLong", "shouldBeA", "the", "shouldBeEqual", "a", "toLong", "shouldBeA", "the", "shouldBeEqual", "a", "toLong", "shouldBeA", "the", "shouldBeEqual", "a"]}, "focal_class": {"identifier": "Convert", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThreadLocal<Calendar> THREADLOCAL_CAL_UTC = new ThreadLocal<Calendar>() {\n        @Override protected Calendar initialValue(){\n            return Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        }\n    };", "modifier": "private static final", "type": "ThreadLocal<Calendar>", "declarator": "THREADLOCAL_CAL_UTC = new ThreadLocal<Calendar>() {\n        @Override protected Calendar initialValue(){\n            return Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        }\n    }", "var_name": "THREADLOCAL_CAL_UTC"}, {"original_string": "private static final ThreadLocal<Calendar> THREADLOCAL_CAL_DEFAULT = new ThreadLocal<Calendar>() {\n        @Override protected Calendar initialValue(){\n            return Calendar.getInstance();\n        }\n    };", "modifier": "private static final", "type": "ThreadLocal<Calendar>", "declarator": "THREADLOCAL_CAL_DEFAULT = new ThreadLocal<Calendar>() {\n        @Override protected Calendar initialValue(){\n            return Calendar.getInstance();\n        }\n    }", "var_name": "THREADLOCAL_CAL_DEFAULT"}], "methods": [{"identifier": "Convert", "parameters": "()", "modifiers": "private", "return": "", "signature": " Convert()", "full_signature": "private  Convert()", "class_method_signature": "Convert.Convert()", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "(Object value)", "modifiers": "public static", "return": "String", "signature": "String toString(Object value)", "full_signature": "public static String toString(Object value)", "class_method_signature": "Convert.toString(Object value)", "testcase": false, "constructor": false}, {"identifier": "clobToString", "parameters": "(Clob clob)", "modifiers": "private static", "return": "String", "signature": "String clobToString(Clob clob)", "full_signature": "private static String clobToString(Clob clob)", "class_method_signature": "Convert.clobToString(Clob clob)", "testcase": false, "constructor": false}, {"identifier": "copyStream", "parameters": "(Reader r, Writer w)", "modifiers": "private static", "return": "void", "signature": "void copyStream(Reader r, Writer w)", "full_signature": "private static void copyStream(Reader r, Writer w)", "class_method_signature": "Convert.copyStream(Reader r, Writer w)", "testcase": false, "constructor": false}, {"identifier": "toBoolean", "parameters": "(Object value)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean toBoolean(Object value)", "full_signature": "public static Boolean toBoolean(Object value)", "class_method_signature": "Convert.toBoolean(Object value)", "testcase": false, "constructor": false}, {"identifier": "toSqlDate", "parameters": "(Object value)", "modifiers": "public static", "return": "java.sql.Date", "signature": "java.sql.Date toSqlDate(Object value)", "full_signature": "public static java.sql.Date toSqlDate(Object value)", "class_method_signature": "Convert.toSqlDate(Object value)", "testcase": false, "constructor": false}, {"identifier": "truncateToSqlDate", "parameters": "(Object value)", "modifiers": "public static", "return": "java.sql.Date", "signature": "java.sql.Date truncateToSqlDate(Object value)", "full_signature": "public static java.sql.Date truncateToSqlDate(Object value)", "class_method_signature": "Convert.truncateToSqlDate(Object value)", "testcase": false, "constructor": false}, {"identifier": "truncateToSqlDate", "parameters": "(long time)", "modifiers": "public static", "return": "java.sql.Date", "signature": "java.sql.Date truncateToSqlDate(long time)", "full_signature": "public static java.sql.Date truncateToSqlDate(long time)", "class_method_signature": "Convert.truncateToSqlDate(long time)", "testcase": false, "constructor": false}, {"identifier": "toIsoString", "parameters": "(java.util.Date date)", "modifiers": "public static", "return": "String", "signature": "String toIsoString(java.util.Date date)", "full_signature": "public static String toIsoString(java.util.Date date)", "class_method_signature": "Convert.toIsoString(java.util.Date date)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(Object value)", "modifiers": "public static", "return": "Double", "signature": "Double toDouble(Object value)", "full_signature": "public static Double toDouble(Object value)", "class_method_signature": "Convert.toDouble(Object value)", "testcase": false, "constructor": false}, {"identifier": "toTime", "parameters": "(Object value)", "modifiers": "public static", "return": "java.sql.Time", "signature": "java.sql.Time toTime(Object value)", "full_signature": "public static java.sql.Time toTime(Object value)", "class_method_signature": "Convert.toTime(Object value)", "testcase": false, "constructor": false}, {"identifier": "toTimestamp", "parameters": "(Object value)", "modifiers": "public static", "return": "java.sql.Timestamp", "signature": "java.sql.Timestamp toTimestamp(Object value)", "full_signature": "public static java.sql.Timestamp toTimestamp(Object value)", "class_method_signature": "Convert.toTimestamp(Object value)", "testcase": false, "constructor": false}, {"identifier": "toFloat", "parameters": "(Object value)", "modifiers": "public static", "return": "Float", "signature": "Float toFloat(Object value)", "full_signature": "public static Float toFloat(Object value)", "class_method_signature": "Convert.toFloat(Object value)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(Object value)", "modifiers": "public static", "return": "Long", "signature": "Long toLong(Object value)", "full_signature": "public static Long toLong(Object value)", "class_method_signature": "Convert.toLong(Object value)", "testcase": false, "constructor": false}, {"identifier": "toInteger", "parameters": "(Object value)", "modifiers": "public static", "return": "Integer", "signature": "Integer toInteger(Object value)", "full_signature": "public static Integer toInteger(Object value)", "class_method_signature": "Convert.toInteger(Object value)", "testcase": false, "constructor": false}, {"identifier": "toBigDecimal", "parameters": "(Object value)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal toBigDecimal(Object value)", "full_signature": "public static BigDecimal toBigDecimal(Object value)", "class_method_signature": "Convert.toBigDecimal(Object value)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(Object value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBytes(Object value)", "full_signature": "public static byte[] toBytes(Object value)", "class_method_signature": "Convert.toBytes(Object value)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(Blob blob)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBytes(Blob blob)", "full_signature": "public static byte[] toBytes(Blob blob)", "class_method_signature": "Convert.toBytes(Blob blob)", "testcase": false, "constructor": false}, {"identifier": "toShort", "parameters": "(Object value)", "modifiers": "public static", "return": "Short", "signature": "Short toShort(Object value)", "full_signature": "public static Short toShort(Object value)", "class_method_signature": "Convert.toShort(Object value)", "testcase": false, "constructor": false}], "file": "javalite-common/src/main/java/org/javalite/common/Convert.java"}, "focal_method": {"identifier": "toLong", "parameters": "(Object value)", "modifiers": "public static", "return": "Long", "body": "public static Long toLong(Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Long) {\n            return (Long) value;\n        } else if (value instanceof Number) {\n            return ((Number) value).longValue();\n        } else if (value instanceof java.util.Date) {\n            return ((java.util.Date) value).getTime();\n        } else {\n            try {\n                return Long.valueOf(value.toString().trim());\n            } catch (NumberFormatException e) {\n                throw new ConversionException(\"failed to convert: '\" + value + \"' to Long\", e);\n            }\n        }\n    }", "signature": "Long toLong(Object value)", "full_signature": "public static Long toLong(Object value)", "class_method_signature": "Convert.toLong(Object value)", "testcase": false, "constructor": false, "invocations": ["longValue", "getTime", "valueOf", "trim", "toString"]}, "repository": {"repo_id": 10400052, "url": "https://github.com/javalite/javalite", "stars": 704, "created": "5/31/2013 7:33:11 AM +00:00", "updates": "2020-01-19T17:40:37+00:00", "fork": "False", "license": "licensed"}}