{"test_class": {"identifier": "DefaultDialectTest", "superclass": "extends ActiveJDBCTest", "interfaces": "", "fields": [{"original_string": "private static Dialect dialect;", "modifier": "private static", "type": "Dialect", "declarator": "dialect", "var_name": "dialect"}], "file": "activejdbc/src/test/java/org/javalite/activejdbc/dialects/DefaultDialectTest.java"}, "test_case": {"identifier": "testCreateParametrizedInsert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateParametrizedInsert() {\n        a(dialect.insertParametrized(Person.getMetaModel(), Arrays.asList(\"name\"), false)).shouldBeEqual(\n                \"INSERT INTO people (name) VALUES (?)\");\n        a(dialect.insertParametrized(Person.getMetaModel(), Arrays.asList(\"name\", \"last_name\"), false)).shouldBeEqual(\n                \"INSERT INTO people (name, last_name) VALUES (?, ?)\");\n    }", "signature": "void testCreateParametrizedInsert()", "full_signature": "@Test public void testCreateParametrizedInsert()", "class_method_signature": "DefaultDialectTest.testCreateParametrizedInsert()", "testcase": true, "constructor": false, "invocations": ["shouldBeEqual", "a", "insertParametrized", "getMetaModel", "asList", "shouldBeEqual", "a", "insertParametrized", "getMetaModel", "asList"]}, "focal_class": {"identifier": "DefaultDialect", "superclass": "", "interfaces": "implements Dialect", "fields": [{"original_string": "private static Logger LOGGER = LoggerFactory.getLogger(DefaultDialect.class);", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DefaultDialect.class)", "var_name": "LOGGER"}, {"original_string": "protected static final Pattern ORDER_BY_PATTERN = Pattern.compile(\"^\\\\s*ORDER\\\\s+BY\",\n            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);", "modifier": "protected static final", "type": "Pattern", "declarator": "ORDER_BY_PATTERN = Pattern.compile(\"^\\\\s*ORDER\\\\s+BY\",\n            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)", "var_name": "ORDER_BY_PATTERN"}, {"original_string": "protected static final Pattern GROUP_BY_PATTERN = Pattern.compile(\"^\\\\s*GROUP\\\\s+BY\",\n            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);", "modifier": "protected static final", "type": "Pattern", "declarator": "GROUP_BY_PATTERN = Pattern.compile(\"^\\\\s*GROUP\\\\s+BY\",\n            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)", "var_name": "GROUP_BY_PATTERN"}], "methods": [{"identifier": "selectStar", "parameters": "(String table)", "modifiers": "@Override public", "return": "String", "signature": "String selectStar(String table)", "full_signature": "@Override public String selectStar(String table)", "class_method_signature": "DefaultDialect.selectStar(String table)", "testcase": false, "constructor": false}, {"identifier": "selectStar", "parameters": "(String table, String where)", "modifiers": "@Override public", "return": "String", "signature": "String selectStar(String table, String where)", "full_signature": "@Override public String selectStar(String table, String where)", "class_method_signature": "DefaultDialect.selectStar(String table, String where)", "testcase": false, "constructor": false}, {"identifier": "selectStarParametrized", "parameters": "(String table, String ... parameters)", "modifiers": "@Override public", "return": "String", "signature": "String selectStarParametrized(String table, String ... parameters)", "full_signature": "@Override public String selectStarParametrized(String table, String ... parameters)", "class_method_signature": "DefaultDialect.selectStarParametrized(String table, String ... parameters)", "testcase": false, "constructor": false}, {"identifier": "appendEmptyRow", "parameters": "(MetaModel metaModel, StringBuilder query)", "modifiers": "protected", "return": "void", "signature": "void appendEmptyRow(MetaModel metaModel, StringBuilder query)", "full_signature": "protected void appendEmptyRow(MetaModel metaModel, StringBuilder query)", "class_method_signature": "DefaultDialect.appendEmptyRow(MetaModel metaModel, StringBuilder query)", "testcase": false, "constructor": false}, {"identifier": "appendQuestions", "parameters": "(StringBuilder query, int count)", "modifiers": "protected", "return": "void", "signature": "void appendQuestions(StringBuilder query, int count)", "full_signature": "protected void appendQuestions(StringBuilder query, int count)", "class_method_signature": "DefaultDialect.appendQuestions(StringBuilder query, int count)", "testcase": false, "constructor": false}, {"identifier": "appendOrderBy", "parameters": "(StringBuilder query, List<String> orderBys)", "modifiers": "protected", "return": "void", "signature": "void appendOrderBy(StringBuilder query, List<String> orderBys)", "full_signature": "protected void appendOrderBy(StringBuilder query, List<String> orderBys)", "class_method_signature": "DefaultDialect.appendOrderBy(StringBuilder query, List<String> orderBys)", "testcase": false, "constructor": false}, {"identifier": "appendSubQuery", "parameters": "(StringBuilder queryBuilder, String subQuery)", "modifiers": "protected", "return": "void", "signature": "void appendSubQuery(StringBuilder queryBuilder, String subQuery)", "full_signature": "protected void appendSubQuery(StringBuilder queryBuilder, String subQuery)", "class_method_signature": "DefaultDialect.appendSubQuery(StringBuilder queryBuilder, String subQuery)", "testcase": false, "constructor": false}, {"identifier": "appendSelect", "parameters": "(StringBuilder queryBuilder, String tableName, String[] columns, String tableAlias, String subQuery, List<String> orderBys)", "modifiers": "protected", "return": "void", "signature": "void appendSelect(StringBuilder queryBuilder, String tableName, String[] columns, String tableAlias, String subQuery, List<String> orderBys)", "full_signature": "protected void appendSelect(StringBuilder queryBuilder, String tableName, String[] columns, String tableAlias, String subQuery, List<String> orderBys)", "class_method_signature": "DefaultDialect.appendSelect(StringBuilder queryBuilder, String tableName, String[] columns, String tableAlias, String subQuery, List<String> orderBys)", "testcase": false, "constructor": false}, {"identifier": "formSelect", "parameters": "(String tableName, String[] columns, String subQuery, List<String> orderBys, long limit, long offset)", "modifiers": "@Override public", "return": "String", "signature": "String formSelect(String tableName, String[] columns, String subQuery, List<String> orderBys, long limit, long offset)", "full_signature": "@Override public String formSelect(String tableName, String[] columns, String subQuery, List<String> orderBys, long limit, long offset)", "class_method_signature": "DefaultDialect.formSelect(String tableName, String[] columns, String subQuery, List<String> orderBys, long limit, long offset)", "testcase": false, "constructor": false}, {"identifier": "overrideDriverTypeConversion", "parameters": "(MetaModel mm, String attributeName, Object value)", "modifiers": "@Override public", "return": "Object", "signature": "Object overrideDriverTypeConversion(MetaModel mm, String attributeName, Object value)", "full_signature": "@Override public Object overrideDriverTypeConversion(MetaModel mm, String attributeName, Object value)", "class_method_signature": "DefaultDialect.overrideDriverTypeConversion(MetaModel mm, String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "selectCount", "parameters": "(String from)", "modifiers": "@Override public", "return": "String", "signature": "String selectCount(String from)", "full_signature": "@Override public String selectCount(String from)", "class_method_signature": "DefaultDialect.selectCount(String from)", "testcase": false, "constructor": false}, {"identifier": "selectCount", "parameters": "(String table, String where)", "modifiers": "@Override public", "return": "String", "signature": "String selectCount(String table, String where)", "full_signature": "@Override public String selectCount(String table, String where)", "class_method_signature": "DefaultDialect.selectCount(String table, String where)", "testcase": false, "constructor": false}, {"identifier": "selectExists", "parameters": "(MetaModel metaModel)", "modifiers": "@Override public", "return": "String", "signature": "String selectExists(MetaModel metaModel)", "full_signature": "@Override public String selectExists(MetaModel metaModel)", "class_method_signature": "DefaultDialect.selectExists(MetaModel metaModel)", "testcase": false, "constructor": false}, {"identifier": "selectManyToManyAssociation", "parameters": "(Many2ManyAssociation association, String sourceFkColumnName, int questionsCount)", "modifiers": "@Override public", "return": "String", "signature": "String selectManyToManyAssociation(Many2ManyAssociation association, String sourceFkColumnName, int questionsCount)", "full_signature": "@Override public String selectManyToManyAssociation(Many2ManyAssociation association, String sourceFkColumnName, int questionsCount)", "class_method_signature": "DefaultDialect.selectManyToManyAssociation(Many2ManyAssociation association, String sourceFkColumnName, int questionsCount)", "testcase": false, "constructor": false}, {"identifier": "insertManyToManyAssociation", "parameters": "(Many2ManyAssociation association)", "modifiers": "@Override public", "return": "String", "signature": "String insertManyToManyAssociation(Many2ManyAssociation association)", "full_signature": "@Override public String insertManyToManyAssociation(Many2ManyAssociation association)", "class_method_signature": "DefaultDialect.insertManyToManyAssociation(Many2ManyAssociation association)", "testcase": false, "constructor": false}, {"identifier": "insertParametrized", "parameters": "(MetaModel metaModel, List<String> columns, boolean containsId)", "modifiers": "@Override public", "return": "String", "signature": "String insertParametrized(MetaModel metaModel, List<String> columns, boolean containsId)", "full_signature": "@Override public String insertParametrized(MetaModel metaModel, List<String> columns, boolean containsId)", "class_method_signature": "DefaultDialect.insertParametrized(MetaModel metaModel, List<String> columns, boolean containsId)", "testcase": false, "constructor": false}, {"identifier": "deleteManyToManyAssociation", "parameters": "(Many2ManyAssociation association)", "modifiers": "@Override public", "return": "String", "signature": "String deleteManyToManyAssociation(Many2ManyAssociation association)", "full_signature": "@Override public String deleteManyToManyAssociation(Many2ManyAssociation association)", "class_method_signature": "DefaultDialect.deleteManyToManyAssociation(Many2ManyAssociation association)", "testcase": false, "constructor": false}, {"identifier": "appendValue", "parameters": "(StringBuilder query, Object value, String ... replacements)", "modifiers": "protected", "return": "void", "signature": "void appendValue(StringBuilder query, Object value, String ... replacements)", "full_signature": "protected void appendValue(StringBuilder query, Object value, String ... replacements)", "class_method_signature": "DefaultDialect.appendValue(StringBuilder query, Object value, String ... replacements)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(Object valueObject, String... replacements)", "modifiers": "protected", "return": "String", "signature": "String replace(Object valueObject, String... replacements)", "full_signature": "protected String replace(Object valueObject, String... replacements)", "class_method_signature": "DefaultDialect.replace(Object valueObject, String... replacements)", "testcase": false, "constructor": false}, {"identifier": "appendDate", "parameters": "(StringBuilder query, java.sql.Date value)", "modifiers": "protected", "return": "void", "signature": "void appendDate(StringBuilder query, java.sql.Date value)", "full_signature": "protected void appendDate(StringBuilder query, java.sql.Date value)", "class_method_signature": "DefaultDialect.appendDate(StringBuilder query, java.sql.Date value)", "testcase": false, "constructor": false}, {"identifier": "appendTime", "parameters": "(StringBuilder query, java.sql.Time value)", "modifiers": "protected", "return": "void", "signature": "void appendTime(StringBuilder query, java.sql.Time value)", "full_signature": "protected void appendTime(StringBuilder query, java.sql.Time value)", "class_method_signature": "DefaultDialect.appendTime(StringBuilder query, java.sql.Time value)", "testcase": false, "constructor": false}, {"identifier": "appendTimestamp", "parameters": "(StringBuilder query, java.sql.Timestamp value)", "modifiers": "protected", "return": "void", "signature": "void appendTimestamp(StringBuilder query, java.sql.Timestamp value)", "full_signature": "protected void appendTimestamp(StringBuilder query, java.sql.Timestamp value)", "class_method_signature": "DefaultDialect.appendTimestamp(StringBuilder query, java.sql.Timestamp value)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(MetaModel metaModel, Map<String, Object> attributes, String ... replacements)", "modifiers": "@Override public", "return": "String", "signature": "String insert(MetaModel metaModel, Map<String, Object> attributes, String ... replacements)", "full_signature": "@Override public String insert(MetaModel metaModel, Map<String, Object> attributes, String ... replacements)", "class_method_signature": "DefaultDialect.insert(MetaModel metaModel, Map<String, Object> attributes, String ... replacements)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(MetaModel metaModel, Map<String, Object> attributes, String ... replacements)", "modifiers": "@Override public", "return": "String", "signature": "String update(MetaModel metaModel, Map<String, Object> attributes, String ... replacements)", "full_signature": "@Override public String update(MetaModel metaModel, Map<String, Object> attributes, String ... replacements)", "class_method_signature": "DefaultDialect.update(MetaModel metaModel, Map<String, Object> attributes, String ... replacements)", "testcase": false, "constructor": false}], "file": "activejdbc/src/main/java/org/javalite/activejdbc/dialects/DefaultDialect.java"}, "focal_method": {"identifier": "insertParametrized", "parameters": "(MetaModel metaModel, List<String> columns, boolean containsId)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String insertParametrized(MetaModel metaModel, List<String> columns, boolean containsId) {\n        StringBuilder query = new StringBuilder().append(\"INSERT INTO \").append(metaModel.getTableName()).append(' ');\n        if (columns.isEmpty()) {\n            appendEmptyRow(metaModel, query);\n        } else {\n            boolean addIdGeneratorCode = (!containsId && metaModel.getIdGeneratorCode() != null);\n            query.append('(');\n            if (addIdGeneratorCode) {\n                query.append(metaModel.getIdName()).append(\", \");\n            }\n            join(query, columns, \", \");\n            query.append(\") VALUES (\");\n            if (addIdGeneratorCode) {\n                query.append(metaModel.getIdGeneratorCode()).append(\", \");\n            }\n            appendQuestions(query, columns.size());\n            query.append(')');\n        }\n        return query.toString();\n    }", "signature": "String insertParametrized(MetaModel metaModel, List<String> columns, boolean containsId)", "full_signature": "@Override public String insertParametrized(MetaModel metaModel, List<String> columns, boolean containsId)", "class_method_signature": "DefaultDialect.insertParametrized(MetaModel metaModel, List<String> columns, boolean containsId)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "getTableName", "isEmpty", "appendEmptyRow", "getIdGeneratorCode", "append", "append", "append", "getIdName", "join", "append", "append", "append", "getIdGeneratorCode", "appendQuestions", "size", "append", "toString"]}, "repository": {"repo_id": 10400052, "url": "https://github.com/javalite/javalite", "stars": 704, "created": "5/31/2013 7:33:11 AM +00:00", "updates": "2020-01-19T17:40:37+00:00", "fork": "False", "license": "licensed"}}