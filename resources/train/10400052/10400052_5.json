{"test_class": {"identifier": "ModelTest", "superclass": "extends ActiveJDBCTest", "interfaces": "", "fields": [{"original_string": "int counter = 0;", "modifier": "", "type": "int", "declarator": "counter = 0", "var_name": "counter"}], "file": "activejdbc/src/test/java/org/javalite/activejdbc/ModelTest.java"}, "test_case": {"identifier": "testModelFindOne", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testModelFindOne() {\n        deleteAndPopulateTable(\"people\");\n        Person person = Person.findFirst(\"id = 2\");\n        a(person).shouldNotBeNull();\n    }", "signature": "void testModelFindOne()", "full_signature": "@Test public void testModelFindOne()", "class_method_signature": "ModelTest.testModelFindOne()", "testcase": true, "constructor": false, "invocations": ["deleteAndPopulateTable", "findFirst", "shouldNotBeNull", "a"]}, "focal_class": {"identifier": "Model", "superclass": "extends CallbackSupport", "interfaces": "implements Externalizable, Validatable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Model.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Model.class)", "var_name": "LOGGER"}, {"original_string": "private Map<String, Object> attributes = new CaseInsensitiveMap<>();", "modifier": "private", "type": "Map<String, Object>", "declarator": "attributes = new CaseInsensitiveMap<>()", "var_name": "attributes"}, {"original_string": "private Set<String> dirtyAttributeNames = new CaseInsensitiveSet();", "modifier": "private", "type": "Set<String>", "declarator": "dirtyAttributeNames = new CaseInsensitiveSet()", "var_name": "dirtyAttributeNames"}, {"original_string": "private boolean frozen;", "modifier": "private", "type": "boolean", "declarator": "frozen", "var_name": "frozen"}, {"original_string": "private MetaModel metaModelLocal;", "modifier": "private", "type": "MetaModel", "declarator": "metaModelLocal", "var_name": "metaModelLocal"}, {"original_string": "private ModelRegistry modelRegistryLocal;", "modifier": "private", "type": "ModelRegistry", "declarator": "modelRegistryLocal", "var_name": "modelRegistryLocal"}, {"original_string": "private final Map<Class, Model> cachedParents = new HashMap<>();", "modifier": "private final", "type": "Map<Class, Model>", "declarator": "cachedParents = new HashMap<>()", "var_name": "cachedParents"}, {"original_string": "private final Map<Class, List<Model>> cachedChildren = new HashMap<>();", "modifier": "private final", "type": "Map<Class, List<Model>>", "declarator": "cachedChildren = new HashMap<>()", "var_name": "cachedChildren"}, {"original_string": "private boolean manageTime = true;", "modifier": "private", "type": "boolean", "declarator": "manageTime = true", "var_name": "manageTime"}, {"original_string": "private boolean compositeKeyPersisted;", "modifier": "private", "type": "boolean", "declarator": "compositeKeyPersisted", "var_name": "compositeKeyPersisted"}, {"original_string": "private Errors errors = new Errors();", "modifier": "private", "type": "Errors", "declarator": "errors = new Errors()", "var_name": "errors"}], "methods": [{"identifier": "Model", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Model()", "full_signature": "protected  Model()", "class_method_signature": "Model.Model()", "testcase": false, "constructor": true}, {"identifier": "Model", "parameters": "(MetaModel metaModel, ModelRegistry modelRegistry)", "modifiers": "protected", "return": "", "signature": " Model(MetaModel metaModel, ModelRegistry modelRegistry)", "full_signature": "protected  Model(MetaModel metaModel, ModelRegistry modelRegistry)", "class_method_signature": "Model.Model(MetaModel metaModel, ModelRegistry modelRegistry)", "testcase": false, "constructor": true}, {"identifier": "fireAfterLoad", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireAfterLoad()", "full_signature": "private void fireAfterLoad()", "class_method_signature": "Model.fireAfterLoad()", "testcase": false, "constructor": false}, {"identifier": "fireBeforeSave", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireBeforeSave()", "full_signature": "private void fireBeforeSave()", "class_method_signature": "Model.fireBeforeSave()", "testcase": false, "constructor": false}, {"identifier": "fireAfterSave", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireAfterSave()", "full_signature": "private void fireAfterSave()", "class_method_signature": "Model.fireAfterSave()", "testcase": false, "constructor": false}, {"identifier": "fireBeforeCreate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireBeforeCreate()", "full_signature": "private void fireBeforeCreate()", "class_method_signature": "Model.fireBeforeCreate()", "testcase": false, "constructor": false}, {"identifier": "fireAfterCreate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireAfterCreate()", "full_signature": "private void fireAfterCreate()", "class_method_signature": "Model.fireAfterCreate()", "testcase": false, "constructor": false}, {"identifier": "fireBeforeUpdate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireBeforeUpdate()", "full_signature": "private void fireBeforeUpdate()", "class_method_signature": "Model.fireBeforeUpdate()", "testcase": false, "constructor": false}, {"identifier": "fireAfterUpdate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireAfterUpdate()", "full_signature": "private void fireAfterUpdate()", "class_method_signature": "Model.fireAfterUpdate()", "testcase": false, "constructor": false}, {"identifier": "fireBeforeDelete", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireBeforeDelete()", "full_signature": "private void fireBeforeDelete()", "class_method_signature": "Model.fireBeforeDelete()", "testcase": false, "constructor": false}, {"identifier": "fireAfterDelete", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireAfterDelete()", "full_signature": "private void fireAfterDelete()", "class_method_signature": "Model.fireAfterDelete()", "testcase": false, "constructor": false}, {"identifier": "fireBeforeValidation", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireBeforeValidation()", "full_signature": "private void fireBeforeValidation()", "class_method_signature": "Model.fireBeforeValidation()", "testcase": false, "constructor": false}, {"identifier": "fireAfterValidation", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireAfterValidation()", "full_signature": "private void fireAfterValidation()", "class_method_signature": "Model.fireAfterValidation()", "testcase": false, "constructor": false}, {"identifier": "getMetaModel", "parameters": "()", "modifiers": "public static", "return": "MetaModel", "signature": "MetaModel getMetaModel()", "full_signature": "public static MetaModel getMetaModel()", "class_method_signature": "Model.getMetaModel()", "testcase": false, "constructor": false}, {"identifier": "metaModel", "parameters": "()", "modifiers": "public static", "return": "MetaModel", "signature": "MetaModel metaModel()", "full_signature": "public static MetaModel metaModel()", "class_method_signature": "Model.metaModel()", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> getAttributes()", "full_signature": "protected Map<String, Object> getAttributes()", "class_method_signature": "Model.getAttributes()", "testcase": false, "constructor": false}, {"identifier": "dirtyAttributeNames", "parameters": "()", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> dirtyAttributeNames()", "full_signature": "protected Set<String> dirtyAttributeNames()", "class_method_signature": "Model.dirtyAttributeNames()", "testcase": false, "constructor": false}, {"identifier": "fromMap", "parameters": "(Map input)", "modifiers": "public", "return": "T", "signature": "T fromMap(Map input)", "full_signature": "public T fromMap(Map input)", "class_method_signature": "Model.fromMap(Map input)", "testcase": false, "constructor": false}, {"identifier": "findOrCreateIt", "parameters": "(Object... namesAndValues)", "modifiers": "public static", "return": "T", "signature": "T findOrCreateIt(Object... namesAndValues)", "full_signature": "public static T findOrCreateIt(Object... namesAndValues)", "class_method_signature": "Model.findOrCreateIt(Object... namesAndValues)", "testcase": false, "constructor": false}, {"identifier": "findOrInit", "parameters": "(Object... namesAndValues)", "modifiers": "public static", "return": "T", "signature": "T findOrInit(Object... namesAndValues)", "full_signature": "public static T findOrInit(Object... namesAndValues)", "class_method_signature": "Model.findOrInit(Object... namesAndValues)", "testcase": false, "constructor": false}, {"identifier": "hydrate", "parameters": "(Map<String, Object> attributesMap, boolean fireAfterLoad)", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> hydrate(Map<String, Object> attributesMap, boolean fireAfterLoad)", "full_signature": "protected Set<String> hydrate(Map<String, Object> attributesMap, boolean fireAfterLoad)", "class_method_signature": "Model.hydrate(Map<String, Object> attributesMap, boolean fireAfterLoad)", "testcase": false, "constructor": false}, {"identifier": "willAttributeModifyModel", "parameters": "(String attributeName, Object newValue)", "modifiers": "private", "return": "boolean", "signature": "boolean willAttributeModifyModel(String attributeName, Object newValue)", "full_signature": "private boolean willAttributeModifyModel(String attributeName, Object newValue)", "class_method_signature": "Model.willAttributeModifyModel(String attributeName, Object newValue)", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(Object id)", "modifiers": "public", "return": "T", "signature": "T setId(Object id)", "full_signature": "public T setId(Object id)", "class_method_signature": "Model.setId(Object id)", "testcase": false, "constructor": false}, {"identifier": "setDate", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setDate(String attributeName, Object value)", "full_signature": "public T setDate(String attributeName, Object value)", "class_method_signature": "Model.setDate(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(String attributeName)", "modifiers": "public", "return": "java.sql.Date", "signature": "java.sql.Date getDate(String attributeName)", "full_signature": "public java.sql.Date getDate(String attributeName)", "class_method_signature": "Model.getDate(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String[] attributeNames, Object[] values)", "modifiers": "public", "return": "void", "signature": "void set(String[] attributeNames, Object[] values)", "full_signature": "public void set(String[] attributeNames, Object[] values)", "class_method_signature": "Model.set(String[] attributeNames, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T set(String attributeName, Object value)", "full_signature": "public T set(String attributeName, Object value)", "class_method_signature": "Model.set(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setRaw", "parameters": "(String attributeName, Object value)", "modifiers": "private", "return": "T", "signature": "T setRaw(String attributeName, Object value)", "full_signature": "private T setRaw(String attributeName, Object value)", "class_method_signature": "Model.setRaw(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "isModified", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isModified()", "full_signature": "public boolean isModified()", "class_method_signature": "Model.isModified()", "testcase": false, "constructor": false}, {"identifier": "isFrozen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFrozen()", "full_signature": "public boolean isFrozen()", "class_method_signature": "Model.isFrozen()", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean modified()", "full_signature": "public boolean modified()", "class_method_signature": "Model.modified()", "testcase": false, "constructor": false}, {"identifier": "attributeNames", "parameters": "()", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> attributeNames()", "full_signature": "public static Set<String> attributeNames()", "class_method_signature": "Model.attributeNames()", "testcase": false, "constructor": false}, {"identifier": "associations", "parameters": "()", "modifiers": "public static", "return": "List<Association>", "signature": "List<Association> associations()", "full_signature": "public static List<Association> associations()", "class_method_signature": "Model.associations()", "testcase": false, "constructor": false}, {"identifier": "isNew", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNew()", "full_signature": "public boolean isNew()", "class_method_signature": "Model.isNew()", "testcase": false, "constructor": false}, {"identifier": "frozen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean frozen()", "full_signature": "public boolean frozen()", "class_method_signature": "Model.frozen()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean delete()", "full_signature": "public boolean delete()", "class_method_signature": "Model.delete()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(boolean cascade)", "modifiers": "public", "return": "void", "signature": "void delete(boolean cascade)", "full_signature": "public void delete(boolean cascade)", "class_method_signature": "Model.delete(boolean cascade)", "testcase": false, "constructor": false}, {"identifier": "deleteCascade", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteCascade()", "full_signature": "public void deleteCascade()", "class_method_signature": "Model.deleteCascade()", "testcase": false, "constructor": false}, {"identifier": "deleteCascadeExcept", "parameters": "(Association... excludedAssociations)", "modifiers": "public", "return": "void", "signature": "void deleteCascadeExcept(Association... excludedAssociations)", "full_signature": "public void deleteCascadeExcept(Association... excludedAssociations)", "class_method_signature": "Model.deleteCascadeExcept(Association... excludedAssociations)", "testcase": false, "constructor": false}, {"identifier": "deleteMany2ManyDeep", "parameters": "(List<Many2ManyAssociation> many2ManyAssociations, Association... excludedAssociations)", "modifiers": "private", "return": "void", "signature": "void deleteMany2ManyDeep(List<Many2ManyAssociation> many2ManyAssociations, Association... excludedAssociations)", "full_signature": "private void deleteMany2ManyDeep(List<Many2ManyAssociation> many2ManyAssociations, Association... excludedAssociations)", "class_method_signature": "Model.deleteMany2ManyDeep(List<Many2ManyAssociation> many2ManyAssociations, Association... excludedAssociations)", "testcase": false, "constructor": false}, {"identifier": "deleteCascadeShallow", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteCascadeShallow()", "full_signature": "public void deleteCascadeShallow()", "class_method_signature": "Model.deleteCascadeShallow()", "testcase": false, "constructor": false}, {"identifier": "deleteJoinsForManyToMany", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteJoinsForManyToMany()", "full_signature": "private void deleteJoinsForManyToMany()", "class_method_signature": "Model.deleteJoinsForManyToMany()", "testcase": false, "constructor": false}, {"identifier": "deleteManyToManyLinks", "parameters": "(Many2ManyAssociation association)", "modifiers": "private", "return": "void", "signature": "void deleteManyToManyLinks(Many2ManyAssociation association)", "full_signature": "private void deleteManyToManyLinks(Many2ManyAssociation association)", "class_method_signature": "Model.deleteManyToManyLinks(Many2ManyAssociation association)", "testcase": false, "constructor": false}, {"identifier": "deleteOne2ManyChildrenShallow", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteOne2ManyChildrenShallow()", "full_signature": "private void deleteOne2ManyChildrenShallow()", "class_method_signature": "Model.deleteOne2ManyChildrenShallow()", "testcase": false, "constructor": false}, {"identifier": "deleteOne2ManyChildrenShallow", "parameters": "(OneToManyAssociation association)", "modifiers": "private", "return": "void", "signature": "void deleteOne2ManyChildrenShallow(OneToManyAssociation association)", "full_signature": "private void deleteOne2ManyChildrenShallow(OneToManyAssociation association)", "class_method_signature": "Model.deleteOne2ManyChildrenShallow(OneToManyAssociation association)", "testcase": false, "constructor": false}, {"identifier": "deletePolymorphicChildrenShallow", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deletePolymorphicChildrenShallow()", "full_signature": "private void deletePolymorphicChildrenShallow()", "class_method_signature": "Model.deletePolymorphicChildrenShallow()", "testcase": false, "constructor": false}, {"identifier": "deletePolymorphicChildrenShallow", "parameters": "(OneToManyPolymorphicAssociation association)", "modifiers": "private", "return": "void", "signature": "void deletePolymorphicChildrenShallow(OneToManyPolymorphicAssociation association)", "full_signature": "private void deletePolymorphicChildrenShallow(OneToManyPolymorphicAssociation association)", "class_method_signature": "Model.deletePolymorphicChildrenShallow(OneToManyPolymorphicAssociation association)", "testcase": false, "constructor": false}, {"identifier": "deleteChildrenDeep", "parameters": "(List<? extends Association> childAssociations, Association... excludedAssociations)", "modifiers": "private", "return": "void", "signature": "void deleteChildrenDeep(List<? extends Association> childAssociations, Association... excludedAssociations)", "full_signature": "private void deleteChildrenDeep(List<? extends Association> childAssociations, Association... excludedAssociations)", "class_method_signature": "Model.deleteChildrenDeep(List<? extends Association> childAssociations, Association... excludedAssociations)", "testcase": false, "constructor": false}, {"identifier": "deleteChildrenShallow", "parameters": "(Class<T> clazz)", "modifiers": "public", "return": "void", "signature": "void deleteChildrenShallow(Class<T> clazz)", "full_signature": "public void deleteChildrenShallow(Class<T> clazz)", "class_method_signature": "Model.deleteChildrenShallow(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String query, Object... params)", "modifiers": "public static", "return": "int", "signature": "int delete(String query, Object... params)", "full_signature": "public static int delete(String query, Object... params)", "class_method_signature": "Model.delete(String query, Object... params)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(Object id)", "modifiers": "public static", "return": "boolean", "signature": "boolean exists(Object id)", "full_signature": "public static boolean exists(Object id)", "class_method_signature": "Model.exists(Object id)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean exists()", "full_signature": "public boolean exists()", "class_method_signature": "Model.exists()", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int deleteAll()", "full_signature": "public static int deleteAll()", "class_method_signature": "Model.deleteAll()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String updates, String conditions, Object ... params)", "modifiers": "public static", "return": "int", "signature": "int update(String updates, String conditions, Object ... params)", "full_signature": "public static int update(String updates, String conditions, Object ... params)", "class_method_signature": "Model.update(String updates, String conditions, Object ... params)", "testcase": false, "constructor": false}, {"identifier": "updateAll", "parameters": "(String updates, Object ... params)", "modifiers": "public static", "return": "int", "signature": "int updateAll(String updates, Object ... params)", "full_signature": "public static int updateAll(String updates, Object ... params)", "class_method_signature": "Model.updateAll(String updates, Object ... params)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> toMap()", "full_signature": "public Map<String, Object> toMap()", "class_method_signature": "Model.toMap()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Model.toString()", "testcase": false, "constructor": false}, {"identifier": "fromXml", "parameters": "(String xml)", "modifiers": "public", "return": "void", "signature": "void fromXml(String xml)", "full_signature": "public void fromXml(String xml)", "class_method_signature": "Model.fromXml(String xml)", "testcase": false, "constructor": false}, {"identifier": "toXml", "parameters": "(boolean pretty, boolean declaration, String... attributeNames)", "modifiers": "public", "return": "String", "signature": "String toXml(boolean pretty, boolean declaration, String... attributeNames)", "full_signature": "public String toXml(boolean pretty, boolean declaration, String... attributeNames)", "class_method_signature": "Model.toXml(boolean pretty, boolean declaration, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "toXmlP", "parameters": "(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "modifiers": "protected", "return": "void", "signature": "void toXmlP(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "full_signature": "protected void toXmlP(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "class_method_signature": "Model.toXmlP(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "beforeClosingTag", "parameters": "(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "modifiers": "public", "return": "void", "signature": "void beforeClosingTag(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "full_signature": "public void beforeClosingTag(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "class_method_signature": "Model.beforeClosingTag(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(boolean pretty, String... attributeNames)", "modifiers": "public", "return": "String", "signature": "String toJson(boolean pretty, String... attributeNames)", "full_signature": "public String toJson(boolean pretty, String... attributeNames)", "class_method_signature": "Model.toJson(boolean pretty, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "toJsonP", "parameters": "(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "modifiers": "protected", "return": "void", "signature": "void toJsonP(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "full_signature": "protected void toJsonP(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "class_method_signature": "Model.toJsonP(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "beforeClosingBrace", "parameters": "(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "modifiers": "public", "return": "void", "signature": "void beforeClosingBrace(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "full_signature": "public void beforeClosingBrace(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "class_method_signature": "Model.beforeClosingBrace(StringBuilder sb, boolean pretty, String indent, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "attributeNamesLowerCased", "parameters": "()", "modifiers": "private", "return": "String[]", "signature": "String[] attributeNamesLowerCased()", "full_signature": "private String[] attributeNamesLowerCased()", "class_method_signature": "Model.attributeNamesLowerCased()", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "(Class<P> parentClass)", "modifiers": "public", "return": "P", "signature": "P parent(Class<P> parentClass)", "full_signature": "public P parent(Class<P> parentClass)", "class_method_signature": "Model.parent(Class<P> parentClass)", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "(Class<P> parentClass, boolean cache)", "modifiers": "public", "return": "P", "signature": "P parent(Class<P> parentClass, boolean cache)", "full_signature": "public P parent(Class<P> parentClass, boolean cache)", "class_method_signature": "Model.parent(Class<P> parentClass, boolean cache)", "testcase": false, "constructor": false}, {"identifier": "setCachedParent", "parameters": "(Model parent)", "modifiers": "protected", "return": "void", "signature": "void setCachedParent(Model parent)", "full_signature": "protected void setCachedParent(Model parent)", "class_method_signature": "Model.setCachedParent(Model parent)", "testcase": false, "constructor": false}, {"identifier": "setParents", "parameters": "(Model... parents)", "modifiers": "public", "return": "void", "signature": "void setParents(Model... parents)", "full_signature": "public void setParents(Model... parents)", "class_method_signature": "Model.setParents(Model... parents)", "testcase": false, "constructor": false}, {"identifier": "setParent", "parameters": "(Model parent)", "modifiers": "public", "return": "void", "signature": "void setParent(Model parent)", "full_signature": "public void setParent(Model parent)", "class_method_signature": "Model.setParent(Model parent)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(Model other)", "modifiers": "public", "return": "void", "signature": "void copyTo(Model other)", "full_signature": "public void copyTo(Model other)", "class_method_signature": "Model.copyTo(Model other)", "testcase": false, "constructor": false}, {"identifier": "copyFrom", "parameters": "(Model other)", "modifiers": "public", "return": "void", "signature": "void copyFrom(Model other)", "full_signature": "public void copyFrom(Model other)", "class_method_signature": "Model.copyFrom(Model other)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refresh()", "full_signature": "public void refresh()", "class_method_signature": "Model.refresh()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String attributeName)", "modifiers": "public", "return": "Object", "signature": "Object get(String attributeName)", "full_signature": "public Object get(String attributeName)", "class_method_signature": "Model.get(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getRaw", "parameters": "(String attributeName)", "modifiers": "private", "return": "Object", "signature": "Object getRaw(String attributeName)", "full_signature": "private Object getRaw(String attributeName)", "class_method_signature": "Model.getRaw(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "tryPolymorphicParent", "parameters": "(String parentTable)", "modifiers": "private", "return": "Object", "signature": "Object tryPolymorphicParent(String parentTable)", "full_signature": "private Object tryPolymorphicParent(String parentTable)", "class_method_signature": "Model.tryPolymorphicParent(String parentTable)", "testcase": false, "constructor": false}, {"identifier": "tryParent", "parameters": "(String parentTable)", "modifiers": "private", "return": "Object", "signature": "Object tryParent(String parentTable)", "full_signature": "private Object tryParent(String parentTable)", "class_method_signature": "Model.tryParent(String parentTable)", "testcase": false, "constructor": false}, {"identifier": "tryPolymorphicChildren", "parameters": "(String childTable)", "modifiers": "private", "return": "Object", "signature": "Object tryPolymorphicChildren(String childTable)", "full_signature": "private Object tryPolymorphicChildren(String childTable)", "class_method_signature": "Model.tryPolymorphicChildren(String childTable)", "testcase": false, "constructor": false}, {"identifier": "tryChildren", "parameters": "(String childTable)", "modifiers": "private", "return": "Object", "signature": "Object tryChildren(String childTable)", "full_signature": "private Object tryChildren(String childTable)", "class_method_signature": "Model.tryChildren(String childTable)", "testcase": false, "constructor": false}, {"identifier": "tryOther", "parameters": "(String otherTable)", "modifiers": "private", "return": "Object", "signature": "Object tryOther(String otherTable)", "full_signature": "private Object tryOther(String otherTable)", "class_method_signature": "Model.tryOther(String otherTable)", "testcase": false, "constructor": false}, {"identifier": "inferTargetMetaModel", "parameters": "(String targetTableName)", "modifiers": "private", "return": "MetaModel", "signature": "MetaModel inferTargetMetaModel(String targetTableName)", "full_signature": "private MetaModel inferTargetMetaModel(String targetTableName)", "class_method_signature": "Model.inferTargetMetaModel(String targetTableName)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(String attributeName)", "modifiers": "public", "return": "String", "signature": "String getString(String attributeName)", "full_signature": "public String getString(String attributeName)", "class_method_signature": "Model.getString(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(String attributeName)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBytes(String attributeName)", "full_signature": "public byte[] getBytes(String attributeName)", "class_method_signature": "Model.getBytes(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getBigDecimal", "parameters": "(String attributeName)", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getBigDecimal(String attributeName)", "full_signature": "public BigDecimal getBigDecimal(String attributeName)", "class_method_signature": "Model.getBigDecimal(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getInteger", "parameters": "(String attributeName)", "modifiers": "public", "return": "Integer", "signature": "Integer getInteger(String attributeName)", "full_signature": "public Integer getInteger(String attributeName)", "class_method_signature": "Model.getInteger(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(String attributeName)", "modifiers": "public", "return": "Long", "signature": "Long getLong(String attributeName)", "full_signature": "public Long getLong(String attributeName)", "class_method_signature": "Model.getLong(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(String attributeName)", "modifiers": "public", "return": "Short", "signature": "Short getShort(String attributeName)", "full_signature": "public Short getShort(String attributeName)", "class_method_signature": "Model.getShort(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getFloat", "parameters": "(String attributeName)", "modifiers": "public", "return": "Float", "signature": "Float getFloat(String attributeName)", "full_signature": "public Float getFloat(String attributeName)", "class_method_signature": "Model.getFloat(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getTime", "parameters": "(String attributeName)", "modifiers": "public", "return": "Time", "signature": "Time getTime(String attributeName)", "full_signature": "public Time getTime(String attributeName)", "class_method_signature": "Model.getTime(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "(String attributeName)", "modifiers": "public", "return": "Timestamp", "signature": "Timestamp getTimestamp(String attributeName)", "full_signature": "public Timestamp getTimestamp(String attributeName)", "class_method_signature": "Model.getTimestamp(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(String attributeName)", "modifiers": "public", "return": "Double", "signature": "Double getDouble(String attributeName)", "full_signature": "public Double getDouble(String attributeName)", "class_method_signature": "Model.getDouble(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "(String attributeName)", "modifiers": "public", "return": "Boolean", "signature": "Boolean getBoolean(String attributeName)", "full_signature": "public Boolean getBoolean(String attributeName)", "class_method_signature": "Model.getBoolean(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "setString", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setString(String attributeName, Object value)", "full_signature": "public T setString(String attributeName, Object value)", "class_method_signature": "Model.setString(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setBigDecimal", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setBigDecimal(String attributeName, Object value)", "full_signature": "public T setBigDecimal(String attributeName, Object value)", "class_method_signature": "Model.setBigDecimal(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setShort", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setShort(String attributeName, Object value)", "full_signature": "public T setShort(String attributeName, Object value)", "class_method_signature": "Model.setShort(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setInteger", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setInteger(String attributeName, Object value)", "full_signature": "public T setInteger(String attributeName, Object value)", "class_method_signature": "Model.setInteger(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setLong", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setLong(String attributeName, Object value)", "full_signature": "public T setLong(String attributeName, Object value)", "class_method_signature": "Model.setLong(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setFloat", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setFloat(String attributeName, Object value)", "full_signature": "public T setFloat(String attributeName, Object value)", "class_method_signature": "Model.setFloat(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setTime", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setTime(String attributeName, Object value)", "full_signature": "public T setTime(String attributeName, Object value)", "class_method_signature": "Model.setTime(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setTimestamp", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setTimestamp(String attributeName, Object value)", "full_signature": "public T setTimestamp(String attributeName, Object value)", "class_method_signature": "Model.setTimestamp(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setDouble", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setDouble(String attributeName, Object value)", "full_signature": "public T setDouble(String attributeName, Object value)", "class_method_signature": "Model.setDouble(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "setBoolean", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "T", "signature": "T setBoolean(String attributeName, Object value)", "full_signature": "public T setBoolean(String attributeName, Object value)", "class_method_signature": "Model.setBoolean(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "(Class<C> clazz)", "modifiers": "public", "return": "LazyList<C>", "signature": "LazyList<C> getAll(Class<C> clazz)", "full_signature": "public LazyList<C> getAll(Class<C> clazz)", "class_method_signature": "Model.getAll(Class<C> clazz)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<C> targetModelClass, String criteria, Object ... params)", "modifiers": "public", "return": "LazyList<C>", "signature": "LazyList<C> get(Class<C> targetModelClass, String criteria, Object ... params)", "full_signature": "public LazyList<C> get(Class<C> targetModelClass, String criteria, Object ... params)", "class_method_signature": "Model.get(Class<C> targetModelClass, String criteria, Object ... params)", "testcase": false, "constructor": false}, {"identifier": "validateNumericalityOf", "parameters": "(String... attributeNames)", "modifiers": "protected static", "return": "NumericValidationBuilder", "signature": "NumericValidationBuilder validateNumericalityOf(String... attributeNames)", "full_signature": "protected static NumericValidationBuilder validateNumericalityOf(String... attributeNames)", "class_method_signature": "Model.validateNumericalityOf(String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "addValidator", "parameters": "(Validator validator)", "modifiers": "public static", "return": "ValidationBuilder", "signature": "ValidationBuilder addValidator(Validator validator)", "full_signature": "public static ValidationBuilder addValidator(Validator validator)", "class_method_signature": "Model.addValidator(Validator validator)", "testcase": false, "constructor": false}, {"identifier": "addScope", "parameters": "(String name, String criteria)", "modifiers": "protected static", "return": "void", "signature": "void addScope(String name, String criteria)", "full_signature": "protected static void addScope(String name, String criteria)", "class_method_signature": "Model.addScope(String name, String criteria)", "testcase": false, "constructor": false}, {"identifier": "addError", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void addError(String key, String value)", "full_signature": "public void addError(String key, String value)", "class_method_signature": "Model.addError(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "removeValidator", "parameters": "(Validator validator)", "modifiers": "public static", "return": "void", "signature": "void removeValidator(Validator validator)", "full_signature": "public static void removeValidator(Validator validator)", "class_method_signature": "Model.removeValidator(Validator validator)", "testcase": false, "constructor": false}, {"identifier": "getValidators", "parameters": "(Class<? extends Model> clazz)", "modifiers": "public static", "return": "List<Validator>", "signature": "List<Validator> getValidators(Class<? extends Model> clazz)", "full_signature": "public static List<Validator> getValidators(Class<? extends Model> clazz)", "class_method_signature": "Model.getValidators(Class<? extends Model> clazz)", "testcase": false, "constructor": false}, {"identifier": "validateRegexpOf", "parameters": "(String attributeName, String pattern)", "modifiers": "protected static", "return": "ValidationBuilder", "signature": "ValidationBuilder validateRegexpOf(String attributeName, String pattern)", "full_signature": "protected static ValidationBuilder validateRegexpOf(String attributeName, String pattern)", "class_method_signature": "Model.validateRegexpOf(String attributeName, String pattern)", "testcase": false, "constructor": false}, {"identifier": "validateEmailOf", "parameters": "(String attributeName)", "modifiers": "protected static", "return": "ValidationBuilder", "signature": "ValidationBuilder validateEmailOf(String attributeName)", "full_signature": "protected static ValidationBuilder validateEmailOf(String attributeName)", "class_method_signature": "Model.validateEmailOf(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "validateRange", "parameters": "(String attributeName, Number min, Number max)", "modifiers": "protected static", "return": "ValidationBuilder", "signature": "ValidationBuilder validateRange(String attributeName, Number min, Number max)", "full_signature": "protected static ValidationBuilder validateRange(String attributeName, Number min, Number max)", "class_method_signature": "Model.validateRange(String attributeName, Number min, Number max)", "testcase": false, "constructor": false}, {"identifier": "validatePresenceOf", "parameters": "(String... attributeNames)", "modifiers": "protected static", "return": "ValidationBuilder", "signature": "ValidationBuilder validatePresenceOf(String... attributeNames)", "full_signature": "protected static ValidationBuilder validatePresenceOf(String... attributeNames)", "class_method_signature": "Model.validatePresenceOf(String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "validateWith", "parameters": "(Validator validator)", "modifiers": "protected static", "return": "ValidationBuilder", "signature": "ValidationBuilder validateWith(Validator validator)", "full_signature": "protected static ValidationBuilder validateWith(Validator validator)", "class_method_signature": "Model.validateWith(Validator validator)", "testcase": false, "constructor": false}, {"identifier": "convertWith", "parameters": "(Converter converter, String... attributeNames)", "modifiers": "protected static", "return": "void", "signature": "void convertWith(Converter converter, String... attributeNames)", "full_signature": "protected static void convertWith(Converter converter, String... attributeNames)", "class_method_signature": "Model.convertWith(Converter converter, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "dateFormat", "parameters": "(String pattern, String... attributeNames)", "modifiers": "protected static", "return": "void", "signature": "void dateFormat(String pattern, String... attributeNames)", "full_signature": "protected static void dateFormat(String pattern, String... attributeNames)", "class_method_signature": "Model.dateFormat(String pattern, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "dateFormat", "parameters": "(DateFormat format, String... attributeNames)", "modifiers": "protected static", "return": "void", "signature": "void dateFormat(DateFormat format, String... attributeNames)", "full_signature": "protected static void dateFormat(DateFormat format, String... attributeNames)", "class_method_signature": "Model.dateFormat(DateFormat format, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "timestampFormat", "parameters": "(String pattern, String... attributeNames)", "modifiers": "protected static", "return": "void", "signature": "void timestampFormat(String pattern, String... attributeNames)", "full_signature": "protected static void timestampFormat(String pattern, String... attributeNames)", "class_method_signature": "Model.timestampFormat(String pattern, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "timestampFormat", "parameters": "(DateFormat format, String... attributeNames)", "modifiers": "protected static", "return": "void", "signature": "void timestampFormat(DateFormat format, String... attributeNames)", "full_signature": "protected static void timestampFormat(DateFormat format, String... attributeNames)", "class_method_signature": "Model.timestampFormat(DateFormat format, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "blankToNull", "parameters": "(String... attributeNames)", "modifiers": "protected static", "return": "void", "signature": "void blankToNull(String... attributeNames)", "full_signature": "protected static void blankToNull(String... attributeNames)", "class_method_signature": "Model.blankToNull(String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "zeroToNull", "parameters": "(String... attributeNames)", "modifiers": "protected static", "return": "void", "signature": "void zeroToNull(String... attributeNames)", "full_signature": "protected static void zeroToNull(String... attributeNames)", "class_method_signature": "Model.zeroToNull(String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "belongsTo", "parameters": "(Class<? extends Model> targetClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean belongsTo(Class<? extends Model> targetClass)", "full_signature": "public static boolean belongsTo(Class<? extends Model> targetClass)", "class_method_signature": "Model.belongsTo(Class<? extends Model> targetClass)", "testcase": false, "constructor": false}, {"identifier": "callbackWith", "parameters": "(CallbackListener... listeners)", "modifiers": "public static", "return": "void", "signature": "void callbackWith(CallbackListener... listeners)", "full_signature": "public static void callbackWith(CallbackListener... listeners)", "class_method_signature": "Model.callbackWith(CallbackListener... listeners)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public boolean isValid()", "class_method_signature": "Model.isValid()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "Model.validate()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(boolean reset)", "modifiers": "public", "return": "void", "signature": "void validate(boolean reset)", "full_signature": "public void validate(boolean reset)", "class_method_signature": "Model.validate(boolean reset)", "testcase": false, "constructor": false}, {"identifier": "hasErrors", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasErrors()", "full_signature": "public boolean hasErrors()", "class_method_signature": "Model.hasErrors()", "testcase": false, "constructor": false}, {"identifier": "addFailedValidator", "parameters": "(Validator validator, String errorKey)", "modifiers": "public", "return": "void", "signature": "void addFailedValidator(Validator validator, String errorKey)", "full_signature": "public void addFailedValidator(Validator validator, String errorKey)", "class_method_signature": "Model.addFailedValidator(Validator validator, String errorKey)", "testcase": false, "constructor": false}, {"identifier": "errors", "parameters": "()", "modifiers": "public", "return": "Errors", "signature": "Errors errors()", "full_signature": "public Errors errors()", "class_method_signature": "Model.errors()", "testcase": false, "constructor": false}, {"identifier": "errors", "parameters": "(Locale locale)", "modifiers": "public", "return": "Errors", "signature": "Errors errors(Locale locale)", "full_signature": "public Errors errors(Locale locale)", "class_method_signature": "Model.errors(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Object... namesAndValues)", "modifiers": "public static", "return": "T", "signature": "T create(Object... namesAndValues)", "full_signature": "public static T create(Object... namesAndValues)", "class_method_signature": "Model.create(Object... namesAndValues)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Object... namesAndValues)", "modifiers": "public", "return": "T", "signature": "T set(Object... namesAndValues)", "full_signature": "public T set(Object... namesAndValues)", "class_method_signature": "Model.set(Object... namesAndValues)", "testcase": false, "constructor": false}, {"identifier": "createIt", "parameters": "(Object ... namesAndValues)", "modifiers": "public static", "return": "T", "signature": "T createIt(Object ... namesAndValues)", "full_signature": "public static T createIt(Object ... namesAndValues)", "class_method_signature": "Model.createIt(Object ... namesAndValues)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(Object id)", "modifiers": "public static", "return": "T", "signature": "T findById(Object id)", "full_signature": "public static T findById(Object id)", "class_method_signature": "Model.findById(Object id)", "testcase": false, "constructor": false}, {"identifier": "findByCompositeKeys", "parameters": "(Object... values)", "modifiers": "public static", "return": "T", "signature": "T findByCompositeKeys(Object... values)", "full_signature": "public static T findByCompositeKeys(Object... values)", "class_method_signature": "Model.findByCompositeKeys(Object... values)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(String subquery, Object... params)", "modifiers": "public static", "return": "LazyList<T>", "signature": "LazyList<T> where(String subquery, Object... params)", "full_signature": "public static LazyList<T> where(String subquery, Object... params)", "class_method_signature": "Model.where(String subquery, Object... params)", "testcase": false, "constructor": false}, {"identifier": "scopes", "parameters": "(String ... scopes)", "modifiers": "public static", "return": "ScopeBuilder<T>", "signature": "ScopeBuilder<T> scopes(String ... scopes)", "full_signature": "public static ScopeBuilder<T> scopes(String ... scopes)", "class_method_signature": "Model.scopes(String ... scopes)", "testcase": false, "constructor": false}, {"identifier": "scope", "parameters": "(String  scope)", "modifiers": "public static", "return": "ScopeBuilder<T>", "signature": "ScopeBuilder<T> scope(String  scope)", "full_signature": "public static ScopeBuilder<T> scope(String  scope)", "class_method_signature": "Model.scope(String  scope)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String subquery, Object... params)", "modifiers": "public static", "return": "LazyList<T>", "signature": "LazyList<T> find(String subquery, Object... params)", "full_signature": "public static LazyList<T> find(String subquery, Object... params)", "class_method_signature": "Model.find(String subquery, Object... params)", "testcase": false, "constructor": false}, {"identifier": "findFirst", "parameters": "(String subQuery, Object... params)", "modifiers": "public static", "return": "T", "signature": "T findFirst(String subQuery, Object... params)", "full_signature": "public static T findFirst(String subQuery, Object... params)", "class_method_signature": "Model.findFirst(String subQuery, Object... params)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(String subQuery, Object... params)", "modifiers": "public static", "return": "T", "signature": "T first(String subQuery, Object... params)", "full_signature": "public static T first(String subQuery, Object... params)", "class_method_signature": "Model.first(String subQuery, Object... params)", "testcase": false, "constructor": false}, {"identifier": "findWith", "parameters": "(final ModelListener listener, String query, Object ... params)", "modifiers": "public static", "return": "void", "signature": "void findWith(final ModelListener listener, String query, Object ... params)", "full_signature": "public static void findWith(final ModelListener listener, String query, Object ... params)", "class_method_signature": "Model.findWith(final ModelListener listener, String query, Object ... params)", "testcase": false, "constructor": false}, {"identifier": "findBySQL", "parameters": "(String fullQuery, Object... params)", "modifiers": "public static", "return": "LazyList<T>", "signature": "LazyList<T> findBySQL(String fullQuery, Object... params)", "full_signature": "public static LazyList<T> findBySQL(String fullQuery, Object... params)", "class_method_signature": "Model.findBySQL(String fullQuery, Object... params)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "public static", "return": "LazyList<T>", "signature": "LazyList<T> findAll()", "full_signature": "public static LazyList<T> findAll()", "class_method_signature": "Model.findAll()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Model child)", "modifiers": "public", "return": "void", "signature": "void add(Model child)", "full_signature": "public void add(Model child)", "class_method_signature": "Model.add(Model child)", "testcase": false, "constructor": false}, {"identifier": "addPolymorphicChild", "parameters": "(MetaModel metaModel, Model child)", "modifiers": "private", "return": "void", "signature": "void addPolymorphicChild(MetaModel metaModel, Model child)", "full_signature": "private void addPolymorphicChild(MetaModel metaModel, Model child)", "class_method_signature": "Model.addPolymorphicChild(MetaModel metaModel, Model child)", "testcase": false, "constructor": false}, {"identifier": "addOne2ManyChild", "parameters": "(MetaModel metaModel, Model child)", "modifiers": "private", "return": "void", "signature": "void addOne2ManyChild(MetaModel metaModel, Model child)", "full_signature": "private void addOne2ManyChild(MetaModel metaModel, Model child)", "class_method_signature": "Model.addOne2ManyChild(MetaModel metaModel, Model child)", "testcase": false, "constructor": false}, {"identifier": "addMany2ManyChild", "parameters": "(MetaModel metaModel, Model child, MetaModel childMetaModel)", "modifiers": "private", "return": "void", "signature": "void addMany2ManyChild(MetaModel metaModel, Model child, MetaModel childMetaModel)", "full_signature": "private void addMany2ManyChild(MetaModel metaModel, Model child, MetaModel childMetaModel)", "class_method_signature": "Model.addMany2ManyChild(MetaModel metaModel, Model child, MetaModel childMetaModel)", "testcase": false, "constructor": false}, {"identifier": "addModels", "parameters": "(List<T> models)", "modifiers": "public", "return": "void", "signature": "void addModels(List<T> models)", "full_signature": "public void addModels(List<T> models)", "class_method_signature": "Model.addModels(List<T> models)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Model child)", "modifiers": "public", "return": "int", "signature": "int remove(Model child)", "full_signature": "public int remove(Model child)", "class_method_signature": "Model.remove(Model child)", "testcase": false, "constructor": false}, {"identifier": "saveIt", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean saveIt()", "full_signature": "public boolean saveIt()", "class_method_signature": "Model.saveIt()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "Model.reset()", "testcase": false, "constructor": false}, {"identifier": "thaw", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void thaw()", "full_signature": "public void thaw()", "class_method_signature": "Model.thaw()", "testcase": false, "constructor": false}, {"identifier": "defrost", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void defrost()", "full_signature": "public void defrost()", "class_method_signature": "Model.defrost()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean save()", "full_signature": "public boolean save()", "class_method_signature": "Model.save()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public static", "return": "Long", "signature": "Long count()", "full_signature": "public static Long count()", "class_method_signature": "Model.count()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String query, Object... params)", "modifiers": "public static", "return": "Long", "signature": "Long count(String query, Object... params)", "full_signature": "public static Long count(String query, Object... params)", "class_method_signature": "Model.count(String query, Object... params)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean insert()", "full_signature": "public boolean insert()", "class_method_signature": "Model.insert()", "testcase": false, "constructor": false}, {"identifier": "doCreatedAt", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doCreatedAt()", "full_signature": "private void doCreatedAt()", "class_method_signature": "Model.doCreatedAt()", "testcase": false, "constructor": false}, {"identifier": "doUpdatedAt", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doUpdatedAt()", "full_signature": "private void doUpdatedAt()", "class_method_signature": "Model.doUpdatedAt()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean update()", "full_signature": "private boolean update()", "class_method_signature": "Model.update()", "testcase": false, "constructor": false}, {"identifier": "getAttributeValues", "parameters": "(Set<String> attributeNames)", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> getAttributeValues(Set<String> attributeNames)", "full_signature": "private List<Object> getAttributeValues(Set<String> attributeNames)", "class_method_signature": "Model.getAttributeValues(Set<String> attributeNames)", "testcase": false, "constructor": false}, {"identifier": "modelClass", "parameters": "()", "modifiers": "private static", "return": "Class<T>", "signature": "Class<T> modelClass()", "full_signature": "private static Class<T> modelClass()", "class_method_signature": "Model.modelClass()", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getTableName()", "full_signature": "public static String getTableName()", "class_method_signature": "Model.getTableName()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getId()", "full_signature": "public Object getId()", "class_method_signature": "Model.getId()", "testcase": false, "constructor": false}, {"identifier": "getIdName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIdName()", "full_signature": "public String getIdName()", "class_method_signature": "Model.getIdName()", "testcase": false, "constructor": false}, {"identifier": "getCompositeKeys", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getCompositeKeys()", "full_signature": "public String[] getCompositeKeys()", "class_method_signature": "Model.getCompositeKeys()", "testcase": false, "constructor": false}, {"identifier": "setChildren", "parameters": "(Class childClass, List<Model> children)", "modifiers": "protected", "return": "void", "signature": "void setChildren(Class childClass, List<Model> children)", "full_signature": "protected void setChildren(Class childClass, List<Model> children)", "class_method_signature": "Model.setChildren(Class childClass, List<Model> children)", "testcase": false, "constructor": false}, {"identifier": "manageTime", "parameters": "(boolean manage)", "modifiers": "public", "return": "void", "signature": "void manageTime(boolean manage)", "full_signature": "public void manageTime(boolean manage)", "class_method_signature": "Model.manageTime(boolean manage)", "testcase": false, "constructor": false}, {"identifier": "toInsert", "parameters": "(String ... replacements)", "modifiers": "public", "return": "String", "signature": "String toInsert(String ... replacements)", "full_signature": "public String toInsert(String ... replacements)", "class_method_signature": "Model.toInsert(String ... replacements)", "testcase": false, "constructor": false}, {"identifier": "toInsert", "parameters": "(Dialect dialect, String ... replacements)", "modifiers": "public", "return": "String", "signature": "String toInsert(Dialect dialect, String ... replacements)", "full_signature": "public String toInsert(Dialect dialect, String ... replacements)", "class_method_signature": "Model.toInsert(Dialect dialect, String ... replacements)", "testcase": false, "constructor": false}, {"identifier": "toUpdate", "parameters": "(String ... replacements)", "modifiers": "public", "return": "String", "signature": "String toUpdate(String ... replacements)", "full_signature": "public String toUpdate(String ... replacements)", "class_method_signature": "Model.toUpdate(String ... replacements)", "testcase": false, "constructor": false}, {"identifier": "toUpdate", "parameters": "(Dialect dialect, String ... replacements)", "modifiers": "public", "return": "String", "signature": "String toUpdate(Dialect dialect, String ... replacements)", "full_signature": "public String toUpdate(Dialect dialect, String ... replacements)", "class_method_signature": "Model.toUpdate(Dialect dialect, String ... replacements)", "testcase": false, "constructor": false}, {"identifier": "isCached", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isCached()", "full_signature": "public static boolean isCached()", "class_method_signature": "Model.isCached()", "testcase": false, "constructor": false}, {"identifier": "purgeCache", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void purgeCache()", "full_signature": "public static void purgeCache()", "class_method_signature": "Model.purgeCache()", "testcase": false, "constructor": false}, {"identifier": "getLongId", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getLongId()", "full_signature": "public Long getLongId()", "class_method_signature": "Model.getLongId()", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "Model.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@Override public void readExternal(ObjectInput in)", "class_method_signature": "Model.readExternal(ObjectInput in)", "testcase": false, "constructor": false}], "file": "activejdbc/src/main/java/org/javalite/activejdbc/Model.java"}, "focal_method": {"identifier": "findFirst", "parameters": "(String subQuery, Object... params)", "modifiers": "public static", "return": "T", "body": "public static <T extends Model> T findFirst(String subQuery, Object... params) {\n        return ModelDelegate.findFirst(Model.<T>modelClass(), subQuery, params);\n    }", "signature": "T findFirst(String subQuery, Object... params)", "full_signature": "public static T findFirst(String subQuery, Object... params)", "class_method_signature": "Model.findFirst(String subQuery, Object... params)", "testcase": false, "constructor": false, "invocations": ["findFirst", "modelClass"]}, "repository": {"repo_id": 10400052, "url": "https://github.com/javalite/javalite", "stars": 704, "created": "5/31/2013 7:33:11 AM +00:00", "updates": "2020-01-19T17:40:37+00:00", "fork": "False", "license": "licensed"}}