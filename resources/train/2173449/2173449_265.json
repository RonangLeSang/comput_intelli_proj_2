{"test_class": {"identifier": "MagicWandModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Product product;", "modifier": "private", "type": "Product", "declarator": "product", "var_name": "product"}, {"original_string": "private Band b1;", "modifier": "private", "type": "Band", "declarator": "b1", "var_name": "b1"}, {"original_string": "private Band b2;", "modifier": "private", "type": "Band", "declarator": "b2", "var_name": "b2"}, {"original_string": "private Band b3;", "modifier": "private", "type": "Band", "declarator": "b3", "var_name": "b3"}], "file": "beam/beam-visat-rcp/src/test/java/org/esa/beam/visat/actions/masktools/MagicWandModelTest.java"}, "test_case": {"identifier": "testClone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClone() throws Exception {\n        final MagicWandModel model = new MagicWandModel();\n        model.setTolerance(0.005);\n        model.setMinTolerance(0.0);\n        model.setMaxTolerance(0.01);\n        model.setNormalize(true);\n        model.setMode(MagicWandModel.Mode.PLUS);\n        model.addSpectrum(1, 2, 3, 4, 5, 6);\n        model.addSpectrum(2, 3, 4, 5, 6, 7);\n        model.setMode(MagicWandModel.Mode.MINUS);\n        model.addSpectrum(3, 4, 5, 6, 7, 8);\n        model.addSpectrum(4, 5, 6, 7, 8, 9);\n\n        final MagicWandModel modelCopy = model.clone();\n        assertEquals(model, modelCopy);\n    }", "signature": "void testClone()", "full_signature": "@Test public void testClone()", "class_method_signature": "MagicWandModelTest.testClone()", "testcase": true, "constructor": false, "invocations": ["setTolerance", "setMinTolerance", "setMaxTolerance", "setNormalize", "setMode", "addSpectrum", "addSpectrum", "setMode", "addSpectrum", "addSpectrum", "clone", "assertEquals"]}, "focal_class": {"identifier": "MagicWandModel", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "static final String MAGIC_WAND_MASK_NAME = \"magic_wand\";", "modifier": "static final", "type": "String", "declarator": "MAGIC_WAND_MASK_NAME = \"magic_wand\"", "var_name": "MAGIC_WAND_MASK_NAME"}, {"original_string": "private double tolerance;", "modifier": "private", "type": "double", "declarator": "tolerance", "var_name": "tolerance"}, {"original_string": "private double minTolerance;", "modifier": "private", "type": "double", "declarator": "minTolerance", "var_name": "minTolerance"}, {"original_string": "private double maxTolerance;", "modifier": "private", "type": "double", "declarator": "maxTolerance", "var_name": "maxTolerance"}, {"original_string": "private String[] bandNames;", "modifier": "private", "type": "String[]", "declarator": "bandNames", "var_name": "bandNames"}, {"original_string": "private Operator operator;", "modifier": "private", "type": "Operator", "declarator": "operator", "var_name": "operator"}, {"original_string": "private Method method;", "modifier": "private", "type": "Method", "declarator": "method", "var_name": "method"}, {"original_string": "private boolean normalize;", "modifier": "private", "type": "boolean", "declarator": "normalize", "var_name": "normalize"}, {"original_string": "private Mode mode;", "modifier": "private", "type": "Mode", "declarator": "mode", "var_name": "mode"}, {"original_string": "private ArrayList<double[]> plusSpectra;", "modifier": "private", "type": "ArrayList<double[]>", "declarator": "plusSpectra", "var_name": "plusSpectra"}, {"original_string": "private ArrayList<double[]> minusSpectra;", "modifier": "private", "type": "ArrayList<double[]>", "declarator": "minusSpectra", "var_name": "minusSpectra"}], "methods": [{"identifier": "MagicWandModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " MagicWandModel()", "full_signature": "public  MagicWandModel()", "class_method_signature": "MagicWandModel.MagicWandModel()", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@SuppressWarnings(\"CloneDoesntDeclareCloneNotSupportedException\") @Override public", "return": "MagicWandModel", "signature": "MagicWandModel clone()", "full_signature": "@SuppressWarnings(\"CloneDoesntDeclareCloneNotSupportedException\") @Override public MagicWandModel clone()", "class_method_signature": "MagicWandModel.clone()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(MagicWandModel other)", "modifiers": "public", "return": "void", "signature": "void set(MagicWandModel other)", "full_signature": "public void set(MagicWandModel other)", "class_method_signature": "MagicWandModel.set(MagicWandModel other)", "testcase": false, "constructor": false}, {"identifier": "addSpectrum", "parameters": "(double... spectrum)", "modifiers": "", "return": "void", "signature": "void addSpectrum(double... spectrum)", "full_signature": " void addSpectrum(double... spectrum)", "class_method_signature": "MagicWandModel.addSpectrum(double... spectrum)", "testcase": false, "constructor": false}, {"identifier": "clearSpectra", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clearSpectra()", "full_signature": " void clearSpectra()", "class_method_signature": "MagicWandModel.clearSpectra()", "testcase": false, "constructor": false}, {"identifier": "getBandNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getBandNames()", "full_signature": "public String[] getBandNames()", "class_method_signature": "MagicWandModel.getBandNames()", "testcase": false, "constructor": false}, {"identifier": "setBandNames", "parameters": "(String[] bandNames)", "modifiers": "public", "return": "void", "signature": "void setBandNames(String[] bandNames)", "full_signature": "public void setBandNames(String[] bandNames)", "class_method_signature": "MagicWandModel.setBandNames(String[] bandNames)", "testcase": false, "constructor": false}, {"identifier": "getMode", "parameters": "()", "modifiers": "public", "return": "Mode", "signature": "Mode getMode()", "full_signature": "public Mode getMode()", "class_method_signature": "MagicWandModel.getMode()", "testcase": false, "constructor": false}, {"identifier": "setMode", "parameters": "(Mode mode)", "modifiers": "public", "return": "void", "signature": "void setMode(Mode mode)", "full_signature": "public void setMode(Mode mode)", "class_method_signature": "MagicWandModel.setMode(Mode mode)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "Method", "signature": "Method getMethod()", "full_signature": "public Method getMethod()", "class_method_signature": "MagicWandModel.getMethod()", "testcase": false, "constructor": false}, {"identifier": "getOperator", "parameters": "()", "modifiers": "public", "return": "Operator", "signature": "Operator getOperator()", "full_signature": "public Operator getOperator()", "class_method_signature": "MagicWandModel.getOperator()", "testcase": false, "constructor": false}, {"identifier": "setOperator", "parameters": "(Operator operator)", "modifiers": "public", "return": "void", "signature": "void setOperator(Operator operator)", "full_signature": "public void setOperator(Operator operator)", "class_method_signature": "MagicWandModel.setOperator(Operator operator)", "testcase": false, "constructor": false}, {"identifier": "setMethod", "parameters": "(Method method)", "modifiers": "public", "return": "void", "signature": "void setMethod(Method method)", "full_signature": "public void setMethod(Method method)", "class_method_signature": "MagicWandModel.setMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "getTolerance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTolerance()", "full_signature": "public double getTolerance()", "class_method_signature": "MagicWandModel.getTolerance()", "testcase": false, "constructor": false}, {"identifier": "setTolerance", "parameters": "(double tolerance)", "modifiers": "public", "return": "void", "signature": "void setTolerance(double tolerance)", "full_signature": "public void setTolerance(double tolerance)", "class_method_signature": "MagicWandModel.setTolerance(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "getMinTolerance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMinTolerance()", "full_signature": "public double getMinTolerance()", "class_method_signature": "MagicWandModel.getMinTolerance()", "testcase": false, "constructor": false}, {"identifier": "setMinTolerance", "parameters": "(double minTolerance)", "modifiers": "public", "return": "void", "signature": "void setMinTolerance(double minTolerance)", "full_signature": "public void setMinTolerance(double minTolerance)", "class_method_signature": "MagicWandModel.setMinTolerance(double minTolerance)", "testcase": false, "constructor": false}, {"identifier": "getMaxTolerance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaxTolerance()", "full_signature": "public double getMaxTolerance()", "class_method_signature": "MagicWandModel.getMaxTolerance()", "testcase": false, "constructor": false}, {"identifier": "setMaxTolerance", "parameters": "(double maxTolerance)", "modifiers": "public", "return": "void", "signature": "void setMaxTolerance(double maxTolerance)", "full_signature": "public void setMaxTolerance(double maxTolerance)", "class_method_signature": "MagicWandModel.setMaxTolerance(double maxTolerance)", "testcase": false, "constructor": false}, {"identifier": "isNormalize", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNormalize()", "full_signature": "public boolean isNormalize()", "class_method_signature": "MagicWandModel.isNormalize()", "testcase": false, "constructor": false}, {"identifier": "setNormalize", "parameters": "(boolean normalize)", "modifiers": "public", "return": "void", "signature": "void setNormalize(boolean normalize)", "full_signature": "public void setNormalize(boolean normalize)", "class_method_signature": "MagicWandModel.setNormalize(boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getPlusSpectra", "parameters": "()", "modifiers": "public", "return": "List<double[]>", "signature": "List<double[]> getPlusSpectra()", "full_signature": "public List<double[]> getPlusSpectra()", "class_method_signature": "MagicWandModel.getPlusSpectra()", "testcase": false, "constructor": false}, {"identifier": "setPlusSpectra", "parameters": "(List<double[]> plusSpectra)", "modifiers": "", "return": "void", "signature": "void setPlusSpectra(List<double[]> plusSpectra)", "full_signature": " void setPlusSpectra(List<double[]> plusSpectra)", "class_method_signature": "MagicWandModel.setPlusSpectra(List<double[]> plusSpectra)", "testcase": false, "constructor": false}, {"identifier": "getMinusSpectra", "parameters": "()", "modifiers": "public", "return": "List<double[]>", "signature": "List<double[]> getMinusSpectra()", "full_signature": "public List<double[]> getMinusSpectra()", "class_method_signature": "MagicWandModel.getMinusSpectra()", "testcase": false, "constructor": false}, {"identifier": "setMinusSpectra", "parameters": "(List<double[]> minusSpectra)", "modifiers": "", "return": "void", "signature": "void setMinusSpectra(List<double[]> minusSpectra)", "full_signature": " void setMinusSpectra(List<double[]> minusSpectra)", "class_method_signature": "MagicWandModel.setMinusSpectra(List<double[]> minusSpectra)", "testcase": false, "constructor": false}, {"identifier": "getSpectralBands", "parameters": "(Product product)", "modifiers": "static", "return": "Band[]", "signature": "Band[] getSpectralBands(Product product)", "full_signature": "static Band[] getSpectralBands(Product product)", "class_method_signature": "MagicWandModel.getSpectralBands(Product product)", "testcase": false, "constructor": false}, {"identifier": "setMagicWandMask", "parameters": "(Product product, String expression)", "modifiers": "static", "return": "void", "signature": "void setMagicWandMask(Product product, String expression)", "full_signature": "static void setMagicWandMask(Product product, String expression)", "class_method_signature": "MagicWandModel.setMagicWandMask(Product product, String expression)", "testcase": false, "constructor": false}, {"identifier": "createExpression", "parameters": "(Band... spectralBands)", "modifiers": "", "return": "String", "signature": "String createExpression(Band... spectralBands)", "full_signature": " String createExpression(Band... spectralBands)", "class_method_signature": "MagicWandModel.createExpression(Band... spectralBands)", "testcase": false, "constructor": false}, {"identifier": "getDistancePart", "parameters": "(Band[] bands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "modifiers": "private static", "return": "String", "signature": "String getDistancePart(Band[] bands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "full_signature": "private static String getDistancePart(Band[] bands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "class_method_signature": "MagicWandModel.getDistancePart(Band[] bands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getAveragePart", "parameters": "(Band[] spectralBands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "modifiers": "private static", "return": "String", "signature": "String getAveragePart(Band[] spectralBands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "full_signature": "private static String getAveragePart(Band[] spectralBands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "class_method_signature": "MagicWandModel.getAveragePart(Band[] spectralBands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getLimitsPart", "parameters": "(Band[] spectralBands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "modifiers": "private static", "return": "String", "signature": "String getLimitsPart(Band[] spectralBands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "full_signature": "private static String getLimitsPart(Band[] spectralBands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "class_method_signature": "MagicWandModel.getLimitsPart(Band[] spectralBands, Operator operator, List<double[]> spectra, double tolerance, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getSpectrum", "parameters": "(double[] spectrum, boolean normalize)", "modifiers": "private static", "return": "double[]", "signature": "double[] getSpectrum(double[] spectrum, boolean normalize)", "full_signature": "private static double[] getSpectrum(double[] spectrum, boolean normalize)", "class_method_signature": "MagicWandModel.getSpectrum(double[] spectrum, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getAvgSpectrum", "parameters": "(int numBands, List<double[]> spectra, boolean normalize)", "modifiers": "private static", "return": "double[]", "signature": "double[] getAvgSpectrum(int numBands, List<double[]> spectra, boolean normalize)", "full_signature": "private static double[] getAvgSpectrum(int numBands, List<double[]> spectra, boolean normalize)", "class_method_signature": "MagicWandModel.getAvgSpectrum(int numBands, List<double[]> spectra, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getMinSpectrum", "parameters": "(int numBands, List<double[]> spectra, double tolerance, boolean normalize)", "modifiers": "private static", "return": "double[]", "signature": "double[] getMinSpectrum(int numBands, List<double[]> spectra, double tolerance, boolean normalize)", "full_signature": "private static double[] getMinSpectrum(int numBands, List<double[]> spectra, double tolerance, boolean normalize)", "class_method_signature": "MagicWandModel.getMinSpectrum(int numBands, List<double[]> spectra, double tolerance, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getMaxSpectrum", "parameters": "(int numBands, List<double[]> spectra, double tolerance, boolean normalize)", "modifiers": "private static", "return": "double[]", "signature": "double[] getMaxSpectrum(int numBands, List<double[]> spectra, double tolerance, boolean normalize)", "full_signature": "private static double[] getMaxSpectrum(int numBands, List<double[]> spectra, double tolerance, boolean normalize)", "class_method_signature": "MagicWandModel.getMaxSpectrum(int numBands, List<double[]> spectra, double tolerance, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getSpectrumValue", "parameters": "(double[] spectrum, int i, boolean normalize)", "modifiers": "private static", "return": "double", "signature": "double getSpectrumValue(double[] spectrum, int i, boolean normalize)", "full_signature": "private static double getSpectrumValue(double[] spectrum, int i, boolean normalize)", "class_method_signature": "MagicWandModel.getSpectrumValue(double[] spectrum, int i, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getDistanceSubPart", "parameters": "(Band[] bands, Operator operator, double[] spectrum, double tolerance, boolean normalize)", "modifiers": "private static", "return": "String", "signature": "String getDistanceSubPart(Band[] bands, Operator operator, double[] spectrum, double tolerance, boolean normalize)", "full_signature": "private static String getDistanceSubPart(Band[] bands, Operator operator, double[] spectrum, double tolerance, boolean normalize)", "class_method_signature": "MagicWandModel.getDistanceSubPart(Band[] bands, Operator operator, double[] spectrum, double tolerance, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "getLimitsSubPart", "parameters": "(Band[] bands, Operator operator, double[] minSpectrum, double[] maxSpectrum, boolean normalize)", "modifiers": "private static", "return": "String", "signature": "String getLimitsSubPart(Band[] bands, Operator operator, double[] minSpectrum, double[] maxSpectrum, boolean normalize)", "full_signature": "private static String getLimitsSubPart(Band[] bands, Operator operator, double[] minSpectrum, double[] maxSpectrum, boolean normalize)", "class_method_signature": "MagicWandModel.getLimitsSubPart(Band[] bands, Operator operator, double[] minSpectrum, double[] maxSpectrum, boolean normalize)", "testcase": false, "constructor": false}, {"identifier": "appendSpectrumBandNames", "parameters": "(Band[] bands, boolean normalize, StringBuilder arguments)", "modifiers": "private static", "return": "void", "signature": "void appendSpectrumBandNames(Band[] bands, boolean normalize, StringBuilder arguments)", "full_signature": "private static void appendSpectrumBandNames(Band[] bands, boolean normalize, StringBuilder arguments)", "class_method_signature": "MagicWandModel.appendSpectrumBandNames(Band[] bands, boolean normalize, StringBuilder arguments)", "testcase": false, "constructor": false}, {"identifier": "appendSpectrumBandValues", "parameters": "(double[] spectrum, StringBuilder arguments)", "modifiers": "private static", "return": "void", "signature": "void appendSpectrumBandValues(double[] spectrum, StringBuilder arguments)", "full_signature": "private static void appendSpectrumBandValues(double[] spectrum, StringBuilder arguments)", "class_method_signature": "MagicWandModel.appendSpectrumBandValues(double[] spectrum, StringBuilder arguments)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MagicWandModel.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MagicWandModel.hashCode()", "testcase": false, "constructor": false}, {"identifier": "fromXml", "parameters": "(String xml)", "modifiers": "public static", "return": "MagicWandModel", "signature": "MagicWandModel fromXml(String xml)", "full_signature": "public static MagicWandModel fromXml(String xml)", "class_method_signature": "MagicWandModel.fromXml(String xml)", "testcase": false, "constructor": false}, {"identifier": "toXml", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toXml()", "full_signature": "public String toXml()", "class_method_signature": "MagicWandModel.toXml()", "testcase": false, "constructor": false}, {"identifier": "createXStream", "parameters": "()", "modifiers": "private static", "return": "XStream", "signature": "XStream createXStream()", "full_signature": "private static XStream createXStream()", "class_method_signature": "MagicWandModel.createXStream()", "testcase": false, "constructor": false}], "file": "beam/beam-visat-rcp/src/main/java/org/esa/beam/visat/actions/masktools/MagicWandModel.java"}, "focal_method": {"identifier": "clone", "parameters": "()", "modifiers": "@SuppressWarnings(\"CloneDoesntDeclareCloneNotSupportedException\") @Override public", "return": "MagicWandModel", "body": "@SuppressWarnings(\"CloneDoesntDeclareCloneNotSupportedException\")\n    @Override\n    public MagicWandModel clone() {\n        try {\n            MagicWandModel clone = (MagicWandModel) super.clone();\n            clone.plusSpectra = new ArrayList<double[]>(plusSpectra);\n            clone.minusSpectra = new ArrayList<double[]>(minusSpectra);\n            return clone;\n        } catch (CloneNotSupportedException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "signature": "MagicWandModel clone()", "full_signature": "@SuppressWarnings(\"CloneDoesntDeclareCloneNotSupportedException\") @Override public MagicWandModel clone()", "class_method_signature": "MagicWandModel.clone()", "testcase": false, "constructor": false, "invocations": ["clone"]}, "repository": {"repo_id": 2173449, "url": "https://github.com/lveci/nest", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 20, "size": 177628, "license": "licensed"}}