{"test_class": {"identifier": "TimeStampExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "beam/beam-core/src/test/java/org/esa/beam/util/TimeStampExtractorTest.java"}, "test_case": {"identifier": "testExtractTimeStamps_8", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractTimeStamps_8() throws ParseException, ValidationException {\n        final TimeStampExtractor extractor = new TimeStampExtractor(\"yyyyMMdd_hhmmss\", \"*${endDate}*\");\n        ProductData.UTC[] dateRange = extractor.extractTimeStamps(\"MER_RR__2CNACR20070123_101652_000000072055_00008_25613_0000.nc\");\n        assertEquals(2, dateRange.length);\n        assertEquals(ProductData.UTC.parse(\"2007-01-23:10:16:52\", \"yyyy-MM-dd:HH:mm:ss\").getAsDate().getTime(), dateRange[0].getAsDate().getTime());\n        assertEquals(dateRange[0].getAsDate().getTime(), dateRange[1].getAsDate().getTime());\n    }", "signature": "void testExtractTimeStamps_8()", "full_signature": "@Test public void testExtractTimeStamps_8()", "class_method_signature": "TimeStampExtractorTest.testExtractTimeStamps_8()", "testcase": true, "constructor": false, "invocations": ["extractTimeStamps", "assertEquals", "assertEquals", "getTime", "getAsDate", "parse", "getTime", "getAsDate", "assertEquals", "getTime", "getAsDate", "getTime", "getAsDate"]}, "focal_class": {"identifier": "TimeStampExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LEGAL_DATE_TIME_CHAR_MATCHER = \"[yMdhms:_\\\\.-]+\";", "modifier": "private static final", "type": "String", "declarator": "LEGAL_DATE_TIME_CHAR_MATCHER = \"[yMdhms:_\\\\.-]+\"", "var_name": "LEGAL_DATE_TIME_CHAR_MATCHER"}, {"original_string": "private static final String LEGAL_FILENAME_CHAR_MATCHER = \"[\\\\?\\\\*\\\\w\\\\. -]*\";", "modifier": "private static final", "type": "String", "declarator": "LEGAL_FILENAME_CHAR_MATCHER = \"[\\\\?\\\\*\\\\w\\\\. -]*\"", "var_name": "LEGAL_FILENAME_CHAR_MATCHER"}, {"original_string": "private static final String START_DATE_PLACEHOLDER = \"${startDate}\";", "modifier": "private static final", "type": "String", "declarator": "START_DATE_PLACEHOLDER = \"${startDate}\"", "var_name": "START_DATE_PLACEHOLDER"}, {"original_string": "private static final String END_DATE_PLACEHOLDER = \"${endDate}\";", "modifier": "private static final", "type": "String", "declarator": "END_DATE_PLACEHOLDER = \"${endDate}\"", "var_name": "END_DATE_PLACEHOLDER"}, {"original_string": "private static final String START_DATE_MATCHER = \"(\\\\$\\\\{startDate\\\\})\";", "modifier": "private static final", "type": "String", "declarator": "START_DATE_MATCHER = \"(\\\\$\\\\{startDate\\\\})\"", "var_name": "START_DATE_MATCHER"}, {"original_string": "private static final String END_DATE_MATCHER = \"(\\\\$\\\\{endDate\\\\})\";", "modifier": "private static final", "type": "String", "declarator": "END_DATE_MATCHER = \"(\\\\$\\\\{endDate\\\\})\"", "var_name": "END_DATE_MATCHER"}, {"original_string": "private final String datePattern;", "modifier": "private final", "type": "String", "declarator": "datePattern", "var_name": "datePattern"}, {"original_string": "private final String filenamePattern;", "modifier": "private final", "type": "String", "declarator": "filenamePattern", "var_name": "filenamePattern"}, {"original_string": "private Map<DateType, Integer> startDateGroupIndices;", "modifier": "private", "type": "Map<DateType, Integer>", "declarator": "startDateGroupIndices", "var_name": "startDateGroupIndices"}, {"original_string": "private Map<DateType, Integer> stopDateGroupIndices;", "modifier": "private", "type": "Map<DateType, Integer>", "declarator": "stopDateGroupIndices", "var_name": "stopDateGroupIndices"}, {"original_string": "private TimeStampAccess timeStampAccess;", "modifier": "private", "type": "TimeStampAccess", "declarator": "timeStampAccess", "var_name": "timeStampAccess"}], "methods": [{"identifier": "TimeStampExtractor", "parameters": "(String dateInterpretationPattern, String filenameInterpretationPattern)", "modifiers": "public", "return": "", "signature": " TimeStampExtractor(String dateInterpretationPattern, String filenameInterpretationPattern)", "full_signature": "public  TimeStampExtractor(String dateInterpretationPattern, String filenameInterpretationPattern)", "class_method_signature": "TimeStampExtractor.TimeStampExtractor(String dateInterpretationPattern, String filenameInterpretationPattern)", "testcase": false, "constructor": true}, {"identifier": "extractTimeStamps", "parameters": "(String fileName)", "modifiers": "public", "return": "ProductData.UTC[]", "signature": "ProductData.UTC[] extractTimeStamps(String fileName)", "full_signature": "public ProductData.UTC[] extractTimeStamps(String fileName)", "class_method_signature": "TimeStampExtractor.extractTimeStamps(String fileName)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "TimeStampExtractor.init()", "testcase": false, "constructor": false}, {"identifier": "createGroupIndices", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createGroupIndices()", "full_signature": "private void createGroupIndices()", "class_method_signature": "TimeStampExtractor.createGroupIndices()", "testcase": false, "constructor": false}, {"identifier": "createGroupIndices", "parameters": "(int offset, int yearIndex, int monthIndex, int dayIndex, int hourIndex, int minuteIndex, int secondIndex, List<Integer> indices, Map<DateType, Integer> groupIndices)", "modifiers": "private", "return": "void", "signature": "void createGroupIndices(int offset, int yearIndex, int monthIndex, int dayIndex, int hourIndex, int minuteIndex, int secondIndex, List<Integer> indices, Map<DateType, Integer> groupIndices)", "full_signature": "private void createGroupIndices(int offset, int yearIndex, int monthIndex, int dayIndex, int hourIndex, int minuteIndex, int secondIndex, List<Integer> indices, Map<DateType, Integer> groupIndices)", "class_method_signature": "TimeStampExtractor.createGroupIndices(int offset, int yearIndex, int monthIndex, int dayIndex, int hourIndex, int minuteIndex, int secondIndex, List<Integer> indices, Map<DateType, Integer> groupIndices)", "testcase": false, "constructor": false}, {"identifier": "createTime", "parameters": "(Matcher matcher, Map<DateType, Integer> groupIndices)", "modifiers": "private", "return": "ProductData.UTC", "signature": "ProductData.UTC createTime(Matcher matcher, Map<DateType, Integer> groupIndices)", "full_signature": "private ProductData.UTC createTime(Matcher matcher, Map<DateType, Integer> groupIndices)", "class_method_signature": "TimeStampExtractor.createTime(Matcher matcher, Map<DateType, Integer> groupIndices)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(Matcher matcher, DateType dateType, Map<DateType, Integer> groupIndices)", "modifiers": "private", "return": "String", "signature": "String getString(Matcher matcher, DateType dateType, Map<DateType, Integer> groupIndices)", "full_signature": "private String getString(Matcher matcher, DateType dateType, Map<DateType, Integer> groupIndices)", "class_method_signature": "TimeStampExtractor.getString(Matcher matcher, DateType dateType, Map<DateType, Integer> groupIndices)", "testcase": false, "constructor": false}, {"identifier": "createPattern", "parameters": "(String yearGroup, String monthGroup, String dayGroup, String hourGroup, String minuteGroup, String secondGroup)", "modifiers": "private", "return": "String", "signature": "String createPattern(String yearGroup, String monthGroup, String dayGroup, String hourGroup, String minuteGroup, String secondGroup)", "full_signature": "private String createPattern(String yearGroup, String monthGroup, String dayGroup, String hourGroup, String minuteGroup, String secondGroup)", "class_method_signature": "TimeStampExtractor.createPattern(String yearGroup, String monthGroup, String dayGroup, String hourGroup, String minuteGroup, String secondGroup)", "testcase": false, "constructor": false}, {"identifier": "replaceSpecialSigns", "parameters": "(String string)", "modifiers": "private", "return": "String", "signature": "String replaceSpecialSigns(String string)", "full_signature": "private String replaceSpecialSigns(String string)", "class_method_signature": "TimeStampExtractor.replaceSpecialSigns(String string)", "testcase": false, "constructor": false}, {"identifier": "getDateMatcher", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getDateMatcher()", "full_signature": "private String getDateMatcher()", "class_method_signature": "TimeStampExtractor.getDateMatcher()", "testcase": false, "constructor": false}, {"identifier": "validateFileName", "parameters": "(Matcher matcher, String fileName)", "modifiers": "private", "return": "void", "signature": "void validateFileName(Matcher matcher, String fileName)", "full_signature": "private void validateFileName(Matcher matcher, String fileName)", "class_method_signature": "TimeStampExtractor.validateFileName(Matcher matcher, String fileName)", "testcase": false, "constructor": false}, {"identifier": "countOf", "parameters": "(String countString)", "modifiers": "private static", "return": "CountOf", "signature": "CountOf countOf(String countString)", "full_signature": "private static CountOf countOf(String countString)", "class_method_signature": "TimeStampExtractor.countOf(String countString)", "testcase": false, "constructor": false}], "file": "beam/beam-core/src/main/java/org/esa/beam/util/TimeStampExtractor.java"}, "focal_method": {"identifier": "extractTimeStamps", "parameters": "(String fileName)", "modifiers": "public", "return": "ProductData.UTC[]", "body": "public ProductData.UTC[] extractTimeStamps(String fileName) throws ValidationException {\n        final ProductData.UTC startTime = timeStampAccess.getStartTime(fileName);\n        final ProductData.UTC stopTime = timeStampAccess.getStopTime(fileName);\n        return new ProductData.UTC[]{startTime, stopTime};\n    }", "signature": "ProductData.UTC[] extractTimeStamps(String fileName)", "full_signature": "public ProductData.UTC[] extractTimeStamps(String fileName)", "class_method_signature": "TimeStampExtractor.extractTimeStamps(String fileName)", "testcase": false, "constructor": false, "invocations": ["getStartTime", "getStopTime"]}, "repository": {"repo_id": 2173449, "url": "https://github.com/lveci/nest", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 20, "size": 177628, "license": "licensed"}}