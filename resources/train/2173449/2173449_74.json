{"test_class": {"identifier": "NodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "beam/beam-gpf/src/test/java/org/esa/beam/framework/gpf/graph/NodeTest.java"}, "test_case": {"identifier": "testAddSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddSource() throws Exception {\n        final Node node = new Node(\"myId\", \"opName\");\n        node.addSource(new NodeSource(\"nodeName\", \"source1\"));\n        node.addSource(new NodeSource(\"anotherName\", \"source2\"));\n        node.addSource(new NodeSource(\"thirdName\", \"source3\"));\n\n        assertEquals(3, node.getSources().length);\n        assertEquals(\"nodeName\", node.getSources()[0].getName());\n        assertEquals(\"anotherName\", node.getSources()[1].getName());\n        assertEquals(\"thirdName\", node.getSources()[2].getName());\n\n    }", "signature": "void testAddSource()", "full_signature": "@Test public void testAddSource()", "class_method_signature": "NodeTest.testAddSource()", "testcase": true, "constructor": false, "invocations": ["addSource", "addSource", "addSource", "assertEquals", "getSources", "assertEquals", "getName", "getSources", "assertEquals", "getName", "getSources", "assertEquals", "getName", "getSources"]}, "focal_class": {"identifier": "Node", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private String operatorName;", "modifier": "private", "type": "String", "declarator": "operatorName", "var_name": "operatorName"}, {"original_string": "private SourceList sourceList;", "modifier": "private", "type": "SourceList", "declarator": "sourceList", "var_name": "sourceList"}, {"original_string": "private DomElement configuration;", "modifier": "private", "type": "DomElement", "declarator": "configuration", "var_name": "configuration"}], "methods": [{"identifier": "Node", "parameters": "()", "modifiers": "public", "return": "", "signature": " Node()", "full_signature": "public  Node()", "class_method_signature": "Node.Node()", "testcase": false, "constructor": true}, {"identifier": "Node", "parameters": "(String id, String operatorName)", "modifiers": "public", "return": "", "signature": " Node(String id, String operatorName)", "full_signature": "public  Node(String id, String operatorName)", "class_method_signature": "Node.Node(String id, String operatorName)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "Node.getId()", "testcase": false, "constructor": false}, {"identifier": "getOperatorName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOperatorName()", "full_signature": "public String getOperatorName()", "class_method_signature": "Node.getOperatorName()", "testcase": false, "constructor": false}, {"identifier": "addSource", "parameters": "(NodeSource source)", "modifiers": "public", "return": "void", "signature": "void addSource(NodeSource source)", "full_signature": "public void addSource(NodeSource source)", "class_method_signature": "Node.addSource(NodeSource source)", "testcase": false, "constructor": false}, {"identifier": "removeSource", "parameters": "(NodeSource source)", "modifiers": "public", "return": "void", "signature": "void removeSource(NodeSource source)", "full_signature": "public void removeSource(NodeSource source)", "class_method_signature": "Node.removeSource(NodeSource source)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "(int index)", "modifiers": "public", "return": "NodeSource", "signature": "NodeSource getSource(int index)", "full_signature": "public NodeSource getSource(int index)", "class_method_signature": "Node.getSource(int index)", "testcase": false, "constructor": false}, {"identifier": "getSources", "parameters": "()", "modifiers": "public", "return": "NodeSource[]", "signature": "NodeSource[] getSources()", "full_signature": "public NodeSource[] getSources()", "class_method_signature": "Node.getSources()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "DomElement", "signature": "DomElement getConfiguration()", "full_signature": "public DomElement getConfiguration()", "class_method_signature": "Node.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "setConfiguration", "parameters": "(DomElement configuration)", "modifiers": "public", "return": "void", "signature": "void setConfiguration(DomElement configuration)", "full_signature": "public void setConfiguration(DomElement configuration)", "class_method_signature": "Node.setConfiguration(DomElement configuration)", "testcase": false, "constructor": false}, {"identifier": "readResolve", "parameters": "()", "modifiers": "@SuppressWarnings({\"UnusedDeclaration\"}) private", "return": "Object", "signature": "Object readResolve()", "full_signature": "@SuppressWarnings({\"UnusedDeclaration\"}) private Object readResolve()", "class_method_signature": "Node.readResolve()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "Node.init()", "testcase": false, "constructor": false}], "file": "beam/beam-gpf/src/main/java/org/esa/beam/framework/gpf/graph/Node.java"}, "focal_method": {"identifier": "addSource", "parameters": "(NodeSource source)", "modifiers": "public", "return": "void", "body": "public void addSource(NodeSource source) {\n        sourceList.addSource(source);\n    }", "signature": "void addSource(NodeSource source)", "full_signature": "public void addSource(NodeSource source)", "class_method_signature": "Node.addSource(NodeSource source)", "testcase": false, "constructor": false, "invocations": ["addSource"]}, "repository": {"repo_id": 2173449, "url": "https://github.com/lveci/nest", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 20, "size": 177628, "license": "licensed"}}