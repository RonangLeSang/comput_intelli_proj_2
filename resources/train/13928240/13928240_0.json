{"test_class": {"identifier": "I18NextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = I18NextTest.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = I18NextTest.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private String mPreviousDefaultNamespace;", "modifier": "private", "type": "String", "declarator": "mPreviousDefaultNamespace", "var_name": "mPreviousDefaultNamespace"}, {"original_string": "private String mPreviousFallbackLanguage;", "modifier": "private", "type": "String", "declarator": "mPreviousFallbackLanguage", "var_name": "mPreviousFallbackLanguage"}], "file": "i18next-android/src/test/java/com/i18next/android/I18NextTest.java"}, "test_case": {"identifier": "shouldAcceptCandidateKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAcceptCandidateKey() {\n        String[] listKeyValid = {\"test.dot\", \"test.double.dot\", \"test.test_underscore\",\n                \"test.test_double_underscore\", \"test.test_double_underscore.dot\",\n                \"test.dot_double_underscore\", \"test.test2\"};\n        String[] listKeyInvalid = {\"test\", \"space not accepted\", \"double..dot\"};\n        for (String key : listKeyValid) {\n            assertTrue(\"The key '\" + key + \"' should be accepted as a valid key\",\n                    I18Next.isI18NextKeyCandidate(key));\n        }\n        for (String key : listKeyInvalid) {\n            assertFalse(\"The key '\" + key + \"' should not be accepted as a valid key\",\n                    I18Next.isI18NextKeyCandidate(key));\n        }\n    }", "signature": "void shouldAcceptCandidateKey()", "full_signature": "@Test public void shouldAcceptCandidateKey()", "class_method_signature": "I18NextTest.shouldAcceptCandidateKey()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isI18NextKeyCandidate", "assertFalse", "isI18NextKeyCandidate"]}, "focal_class": {"identifier": "I18Next", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = I18Next.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = I18Next.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private static final String PREF_KEY_I18N = \"i18n_json\";", "modifier": "private static final", "type": "String", "declarator": "PREF_KEY_I18N = \"i18n_json\"", "var_name": "PREF_KEY_I18N"}, {"original_string": "private static final String SEPARATOR_LANGUAGE_COUNTRY = \"_\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR_LANGUAGE_COUNTRY = \"_\"", "var_name": "SEPARATOR_LANGUAGE_COUNTRY"}, {"original_string": "private static final String WRONG_SEPARATOR_LANGUAGE_COUNTRY = \"_\";", "modifier": "private static final", "type": "String", "declarator": "WRONG_SEPARATOR_LANGUAGE_COUNTRY = \"_\"", "var_name": "WRONG_SEPARATOR_LANGUAGE_COUNTRY"}, {"original_string": "private static final String COMMA = \",\";", "modifier": "private static final", "type": "String", "declarator": "COMMA = \",\"", "var_name": "COMMA"}, {"original_string": "private Options mOptions = new Options();", "modifier": "private", "type": "Options", "declarator": "mOptions = new Options()", "var_name": "mOptions"}, {"original_string": "private JSONObject mRootObject = new JSONObject();", "modifier": "private", "type": "JSONObject", "declarator": "mRootObject = new JSONObject()", "var_name": "mRootObject"}], "methods": [{"identifier": "I18Next", "parameters": "()", "modifiers": "public", "return": "", "signature": " I18Next()", "full_signature": "public  I18Next()", "class_method_signature": "I18Next.I18Next()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "I18Next", "signature": "I18Next getInstance()", "full_signature": "public static I18Next getInstance()", "class_method_signature": "I18Next.getInstance()", "testcase": false, "constructor": false}, {"identifier": "loader", "parameters": "()", "modifiers": "public", "return": "Loader", "signature": "Loader loader()", "full_signature": "public Loader loader()", "class_method_signature": "I18Next.loader()", "testcase": false, "constructor": false}, {"identifier": "saveInPreference", "parameters": "(SharedPreferences sharedPreference)", "modifiers": "public", "return": "void", "signature": "void saveInPreference(SharedPreferences sharedPreference)", "full_signature": "public void saveInPreference(SharedPreferences sharedPreference)", "class_method_signature": "I18Next.saveInPreference(SharedPreferences sharedPreference)", "testcase": false, "constructor": false}, {"identifier": "loadFromPreference", "parameters": "(SharedPreferences sharedPreference)", "modifiers": "public", "return": "void", "signature": "void loadFromPreference(SharedPreferences sharedPreference)", "full_signature": "public void loadFromPreference(SharedPreferences sharedPreference)", "class_method_signature": "I18Next.loadFromPreference(SharedPreferences sharedPreference)", "testcase": false, "constructor": false}, {"identifier": "isI18NextKeyCandidate", "parameters": "(CharSequence key)", "modifiers": "public static", "return": "boolean", "signature": "boolean isI18NextKeyCandidate(CharSequence key)", "full_signature": "public static boolean isI18NextKeyCandidate(CharSequence key)", "class_method_signature": "I18Next.isI18NextKeyCandidate(CharSequence key)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "I18Next.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getOptions", "parameters": "()", "modifiers": "public", "return": "Options", "signature": "Options getOptions()", "full_signature": "public Options getOptions()", "class_method_signature": "I18Next.getOptions()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(String raw, Object... args)", "modifiers": "", "return": "void", "signature": "void log(String raw, Object... args)", "full_signature": " void log(String raw, Object... args)", "class_method_signature": "I18Next.log(String raw, Object... args)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(LogMode logMode, String raw, Object... args)", "modifiers": "", "return": "void", "signature": "void log(LogMode logMode, String raw, Object... args)", "full_signature": " void log(LogMode logMode, String raw, Object... args)", "class_method_signature": "I18Next.log(LogMode logMode, String raw, Object... args)", "testcase": false, "constructor": false}, {"identifier": "splitKeyPath", "parameters": "(String key)", "modifiers": "private", "return": "String[]", "signature": "String[] splitKeyPath(String key)", "full_signature": "private String[] splitKeyPath(String key)", "class_method_signature": "I18Next.splitKeyPath(String key)", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "(String key)", "modifiers": "private", "return": "String", "signature": "String getNamespace(String key)", "full_signature": "private String getNamespace(String key)", "class_method_signature": "I18Next.getNamespace(String key)", "testcase": false, "constructor": false}, {"identifier": "initDefaultNamespaceIfNeeded", "parameters": "(String nameSpace)", "modifiers": "private", "return": "void", "signature": "void initDefaultNamespaceIfNeeded(String nameSpace)", "full_signature": "private void initDefaultNamespaceIfNeeded(String nameSpace)", "class_method_signature": "I18Next.initDefaultNamespaceIfNeeded(String nameSpace)", "testcase": false, "constructor": false}, {"identifier": "t", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String t(String key)", "full_signature": "public String t(String key)", "class_method_signature": "I18Next.t(String key)", "testcase": false, "constructor": false}, {"identifier": "t", "parameters": "(String... keys)", "modifiers": "public", "return": "String", "signature": "String t(String... keys)", "full_signature": "public String t(String... keys)", "class_method_signature": "I18Next.t(String... keys)", "testcase": false, "constructor": false}, {"identifier": "t", "parameters": "(String key, Operation operation)", "modifiers": "public", "return": "String", "signature": "String t(String key, Operation operation)", "full_signature": "public String t(String key, Operation operation)", "class_method_signature": "I18Next.t(String key, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "t", "parameters": "(String[] keys, Operation operation)", "modifiers": "public", "return": "String", "signature": "String t(String[] keys, Operation operation)", "full_signature": "public String t(String[] keys, Operation operation)", "class_method_signature": "I18Next.t(String[] keys, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "transformRawValue", "parameters": "(Operation operation, String rawValue)", "modifiers": "private", "return": "String", "signature": "String transformRawValue(Operation operation, String rawValue)", "full_signature": "private String transformRawValue(Operation operation, String rawValue)", "class_method_signature": "I18Next.transformRawValue(Operation operation, String rawValue)", "testcase": false, "constructor": false}, {"identifier": "existValue", "parameters": "(String key)", "modifiers": "public", "return": "boolean", "signature": "boolean existValue(String key)", "full_signature": "public boolean existValue(String key)", "class_method_signature": "I18Next.existValue(String key)", "testcase": false, "constructor": false}, {"identifier": "getValueRaw", "parameters": "(String key, Operation operation)", "modifiers": "private", "return": "String", "signature": "String getValueRaw(String key, Operation operation)", "full_signature": "private String getValueRaw(String key, Operation operation)", "class_method_signature": "I18Next.getValueRaw(String key, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "getValueRawWithoutPreprocessing", "parameters": "(String namespace, String key)", "modifiers": "private", "return": "String", "signature": "String getValueRawWithoutPreprocessing(String namespace, String key)", "full_signature": "private String getValueRawWithoutPreprocessing(String namespace, String key)", "class_method_signature": "I18Next.getValueRawWithoutPreprocessing(String namespace, String key)", "testcase": false, "constructor": false}, {"identifier": "getValueRawByLanguageWithNamespace", "parameters": "(String lang, String namespace, String[] splitKeys)", "modifiers": "private", "return": "String", "signature": "String getValueRawByLanguageWithNamespace(String lang, String namespace, String[] splitKeys)", "full_signature": "private String getValueRawByLanguageWithNamespace(String lang, String namespace, String[] splitKeys)", "class_method_signature": "I18Next.getValueRawByLanguageWithNamespace(String lang, String namespace, String[] splitKeys)", "testcase": false, "constructor": false}, {"identifier": "getRootObjectByLang", "parameters": "(String lang)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject getRootObjectByLang(String lang)", "full_signature": "private JSONObject getRootObjectByLang(String lang)", "class_method_signature": "I18Next.getRootObjectByLang(String lang)", "testcase": false, "constructor": false}, {"identifier": "getConvertLang", "parameters": "(String lang)", "modifiers": "static", "return": "String", "signature": "String getConvertLang(String lang)", "full_signature": "static String getConvertLang(String lang)", "class_method_signature": "I18Next.getConvertLang(String lang)", "testcase": false, "constructor": false}, {"identifier": "getRawWithNestingReplaced", "parameters": "(String raw, Operation operation)", "modifiers": "private", "return": "String", "signature": "String getRawWithNestingReplaced(String raw, Operation operation)", "full_signature": "private String getRawWithNestingReplaced(String raw, Operation operation)", "class_method_signature": "I18Next.getRawWithNestingReplaced(String raw, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(String lang, String namespace, JSONObject json)", "modifiers": "private", "return": "void", "signature": "void load(String lang, String namespace, JSONObject json)", "full_signature": "private void load(String lang, String namespace, JSONObject json)", "class_method_signature": "I18Next.load(String lang, String namespace, JSONObject json)", "testcase": false, "constructor": false}, {"identifier": "equalsCharSequence", "parameters": "(CharSequence cs, CharSequence cs2)", "modifiers": "static", "return": "boolean", "signature": "boolean equalsCharSequence(CharSequence cs, CharSequence cs2)", "full_signature": "static boolean equalsCharSequence(CharSequence cs, CharSequence cs2)", "class_method_signature": "I18Next.equalsCharSequence(CharSequence cs, CharSequence cs2)", "testcase": false, "constructor": false}], "file": "i18next-android/src/main/java/com/i18next/android/I18Next.java"}, "focal_method": {"identifier": "isI18NextKeyCandidate", "parameters": "(CharSequence key)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isI18NextKeyCandidate(CharSequence key) {\n        if (key != null && key.length() > 0) {\n            return key.toString().matches(\"([a-z0-9]+((\\\\_)([a-z0-9]+))*)+((\\\\.)[a-z0-9]+((\\\\_)([a-z0-9]+))*)+\");\n        } else {\n            return false;\n        }\n    }", "signature": "boolean isI18NextKeyCandidate(CharSequence key)", "full_signature": "public static boolean isI18NextKeyCandidate(CharSequence key)", "class_method_signature": "I18Next.isI18NextKeyCandidate(CharSequence key)", "testcase": false, "constructor": false, "invocations": ["length", "matches", "toString"]}, "repository": {"repo_id": 13928240, "url": "https://github.com/i18next/i18next-android", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 31, "size": 460, "license": "licensed"}}