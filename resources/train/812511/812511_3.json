{"test_class": {"identifier": "CertificateUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String validCert1 =\n            \"-----BEGIN CERTIFICATE-----\\n\" +\n                    \"MIID+DCCAuCgAwIBAgIBKTANBgkqhkiG9w0BAQUFADB1MRMwEQYKCZImiZPyLGQB\\n\" +\n                    \"GRYDbmV0MRIwEAYKCZImiZPyLGQBGRYCRVMxDjAMBgNVBAoTBUVTbmV0MSAwHgYD\\n\" +\n                    \"VQQLExdDZXJ0aWZpY2F0ZSBBdXRob3JpdGllczEYMBYGA1UEAxMPRVNuZXQgUm9v\\n\" +\n                    \"dCBDQSAxMB4XDTAyMTIwNTA4MDAwMFoXDTEzMDEyNTA4MDAwMFowaTETMBEGCgmS\\n\" +\n                    \"JomT8ixkARkWA29yZzEYMBYGCgmSJomT8ixkARkWCERPRUdyaWRzMSAwHgYDVQQL\\n\" +\n                    \"ExdDZXJ0aWZpY2F0ZSBBdXRob3JpdGllczEWMBQGA1UEAxMNRE9FR3JpZHMgQ0Eg\\n\" +\n                    \"MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALT11iNho9sIPma1uJBv\\n\" +\n                    \"sprfLWoCbRlyooIVyJZx97wrBy7L22Me4iwt/1ki12QNbjHLyy5r2cmXHcqXCO26\\n\" +\n                    \"ZMy062DfkpkKSdR3wozhUZNIV0tUb0Bs1rJ5/vpxpUIYzX6PIXQurTeRq4Y49Nw1\\n\" +\n                    \"9l7VNlrd7Vz2tzyWNXk5JZr+Z+wIALJLnMUha7TIgM3Il1/6fSHBo83nfCWWknfS\\n\" +\n                    \"1oP4kGNDuHaTjFFbN5rOcs5v07O1lVED/WxXN76JzMWHbHBrhV0bLR4gg/DWl+9j\\n\" +\n                    \"DE7fqubRLXT2q9uw2Vqug9FvF6s8pqRAukp7TfhdzHuAE+pST8XGhFFaKfkRY3ev\\n\" +\n                    \"P0sCAwEAAaOBnjCBmzAOBgNVHQ8BAf8EBAMCAYYwEQYJYIZIAYb4QgEBBAQDAgCH\\n\" +\n                    \"MB0GA1UdDgQWBBTKGR0Sjm6kOF1C1DEOCNvZjRcNXTAfBgNVHSMEGDAWgBS8XU1I\\n\" +\n                    \"L/g1lFmrXIlLPtGyOhQB6jAPBgNVHRMBAf8EBTADAQH/MCUGA1UdEQQeMByBGkRP\\n\" +\n                    \"RUdyaWRzLUNBLTFAZG9lZ3JpZHMub3JnMA0GCSqGSIb3DQEBBQUAA4IBAQBk1Wsg\\n\" +\n                    \"Mup7f0IQ6Im3tDsSkE+ECKEy8NNJ//ja7RIxtSYKHDDiYuamHkMGCFlRUXxifn2R\\n\" +\n                    \"FkyfVAs607UfMuq8C88hNpxlU+UmAbYhfOVHrfpiCFkUDJxshQQ4kMEdHi+1A7Uo\\n\" +\n                    \"PGBnC8Bu2YoijG+FQKrbGx8W32QIEGf4li1Do7kuwEmrc+a65t4xxzuZtAB8lnuH\\n\" +\n                    \"/dCCGCQUiGYTX4sFc8luS4/y+B+DqHYEqgB/lMV9kQKAZkqKZ83XXS0G9950ZnBh\\n\" +\n                    \"h3f8awlzzcHQk3WCfLSCo1U+bf3ZRyFcZ4FGseebaCSEiSvjw6roSY0ZX39rpd9u\\n\" +\n                    \"mVBb8lZu09U9aRqL\\n\" +\n                    \"-----END CERTIFICATE-----\";", "modifier": "", "type": "String", "declarator": "validCert1 =\n            \"-----BEGIN CERTIFICATE-----\\n\" +\n                    \"MIID+DCCAuCgAwIBAgIBKTANBgkqhkiG9w0BAQUFADB1MRMwEQYKCZImiZPyLGQB\\n\" +\n                    \"GRYDbmV0MRIwEAYKCZImiZPyLGQBGRYCRVMxDjAMBgNVBAoTBUVTbmV0MSAwHgYD\\n\" +\n                    \"VQQLExdDZXJ0aWZpY2F0ZSBBdXRob3JpdGllczEYMBYGA1UEAxMPRVNuZXQgUm9v\\n\" +\n                    \"dCBDQSAxMB4XDTAyMTIwNTA4MDAwMFoXDTEzMDEyNTA4MDAwMFowaTETMBEGCgmS\\n\" +\n                    \"JomT8ixkARkWA29yZzEYMBYGCgmSJomT8ixkARkWCERPRUdyaWRzMSAwHgYDVQQL\\n\" +\n                    \"ExdDZXJ0aWZpY2F0ZSBBdXRob3JpdGllczEWMBQGA1UEAxMNRE9FR3JpZHMgQ0Eg\\n\" +\n                    \"MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALT11iNho9sIPma1uJBv\\n\" +\n                    \"sprfLWoCbRlyooIVyJZx97wrBy7L22Me4iwt/1ki12QNbjHLyy5r2cmXHcqXCO26\\n\" +\n                    \"ZMy062DfkpkKSdR3wozhUZNIV0tUb0Bs1rJ5/vpxpUIYzX6PIXQurTeRq4Y49Nw1\\n\" +\n                    \"9l7VNlrd7Vz2tzyWNXk5JZr+Z+wIALJLnMUha7TIgM3Il1/6fSHBo83nfCWWknfS\\n\" +\n                    \"1oP4kGNDuHaTjFFbN5rOcs5v07O1lVED/WxXN76JzMWHbHBrhV0bLR4gg/DWl+9j\\n\" +\n                    \"DE7fqubRLXT2q9uw2Vqug9FvF6s8pqRAukp7TfhdzHuAE+pST8XGhFFaKfkRY3ev\\n\" +\n                    \"P0sCAwEAAaOBnjCBmzAOBgNVHQ8BAf8EBAMCAYYwEQYJYIZIAYb4QgEBBAQDAgCH\\n\" +\n                    \"MB0GA1UdDgQWBBTKGR0Sjm6kOF1C1DEOCNvZjRcNXTAfBgNVHSMEGDAWgBS8XU1I\\n\" +\n                    \"L/g1lFmrXIlLPtGyOhQB6jAPBgNVHRMBAf8EBTADAQH/MCUGA1UdEQQeMByBGkRP\\n\" +\n                    \"RUdyaWRzLUNBLTFAZG9lZ3JpZHMub3JnMA0GCSqGSIb3DQEBBQUAA4IBAQBk1Wsg\\n\" +\n                    \"Mup7f0IQ6Im3tDsSkE+ECKEy8NNJ//ja7RIxtSYKHDDiYuamHkMGCFlRUXxifn2R\\n\" +\n                    \"FkyfVAs607UfMuq8C88hNpxlU+UmAbYhfOVHrfpiCFkUDJxshQQ4kMEdHi+1A7Uo\\n\" +\n                    \"PGBnC8Bu2YoijG+FQKrbGx8W32QIEGf4li1Do7kuwEmrc+a65t4xxzuZtAB8lnuH\\n\" +\n                    \"/dCCGCQUiGYTX4sFc8luS4/y+B+DqHYEqgB/lMV9kQKAZkqKZ83XXS0G9950ZnBh\\n\" +\n                    \"h3f8awlzzcHQk3WCfLSCo1U+bf3ZRyFcZ4FGseebaCSEiSvjw6roSY0ZX39rpd9u\\n\" +\n                    \"mVBb8lZu09U9aRqL\\n\" +\n                    \"-----END CERTIFICATE-----\"", "var_name": "validCert1"}, {"original_string": "String invalidCert1 =\n            \"MB0GA1UdDgQWBBTKGR0Sjm6kOF1C1DEOCNvZjRcNXTAfBgNVHSMEGDAWgBS8XU1I\\n\" +\n                    \"L/g1lFmrXIlLPtGyOhQB6jAPBgNVHRMBAf8EBTADAQH/MCUGA1UdEQQeMByBGkRP\\n\" +\n                    \"RUdyaWRzLUNBLTFAZG9lZ3JpZHMub3JnMA0GCSqGSIb3DQEBBQUAA4IBAQBk1Wsg\\n\" +\n                    \"Mup7f0IQ6Im3tDsSkE+ECKEy8NNJ//ja7RIxtSYKHDDiYuamHkMGCFlRUXxifn2R\\n\" +\n                    \"FkyfVAs607UfMuq8C88hNpxlU+UmAbYhfOVHrfpiCFkUDJxshQQ4kMEdHi+1A7Uo\\n\" +\n                    \"PGBnC8Bu2YoijG+FQKrbGx8W32QIEGf4li1Do7kuwEmrc+a65t4xxzuZtAB8lnuH\\n\" +\n                    \"/dCCGCQUiGYTX4sFc8luS4/y+B+DqHYEqgB/lMV9kQKAZkqKZ83XXS0G9950ZnBh\\n\" +\n                    \"h3f8awlzzcHQk3WCfLSCo1U+bf3ZRyFcZ4FGseebaCSEiSvjw6roSY0ZX39rpd9u\\n\" +\n                    \"mVBb8lZu09U9aRqL\\n\" +\n                    \"-----END CERTIFICATE-----\";", "modifier": "", "type": "String", "declarator": "invalidCert1 =\n            \"MB0GA1UdDgQWBBTKGR0Sjm6kOF1C1DEOCNvZjRcNXTAfBgNVHSMEGDAWgBS8XU1I\\n\" +\n                    \"L/g1lFmrXIlLPtGyOhQB6jAPBgNVHRMBAf8EBTADAQH/MCUGA1UdEQQeMByBGkRP\\n\" +\n                    \"RUdyaWRzLUNBLTFAZG9lZ3JpZHMub3JnMA0GCSqGSIb3DQEBBQUAA4IBAQBk1Wsg\\n\" +\n                    \"Mup7f0IQ6Im3tDsSkE+ECKEy8NNJ//ja7RIxtSYKHDDiYuamHkMGCFlRUXxifn2R\\n\" +\n                    \"FkyfVAs607UfMuq8C88hNpxlU+UmAbYhfOVHrfpiCFkUDJxshQQ4kMEdHi+1A7Uo\\n\" +\n                    \"PGBnC8Bu2YoijG+FQKrbGx8W32QIEGf4li1Do7kuwEmrc+a65t4xxzuZtAB8lnuH\\n\" +\n                    \"/dCCGCQUiGYTX4sFc8luS4/y+B+DqHYEqgB/lMV9kQKAZkqKZ83XXS0G9950ZnBh\\n\" +\n                    \"h3f8awlzzcHQk3WCfLSCo1U+bf3ZRyFcZ4FGseebaCSEiSvjw6roSY0ZX39rpd9u\\n\" +\n                    \"mVBb8lZu09U9aRqL\\n\" +\n                    \"-----END CERTIFICATE-----\"", "var_name": "invalidCert1"}, {"original_string": "String invalidCert2 =\n            \"-----BEGIN CERTIFICATE-----\\n\" +\n                    \"MIID+DCCAuCgAwIBAgIBKTANBgkqhkiG9w0BAQUFADB1MRMwEQYKCZImiZPyLGQB\\n\" +\n                    \"GRYDbmV0MRIwEAYKCZImiZPyLGQBGRYCRVMxDjAMBgNVBAoTBUVTbmV0MSAwHgYD\\n\" +\n                    \"VQQLExdDZXJ0aWZpY2F0ZSBBdXRob3JpdGllczEYMBYGA1UEAxMPRVNuZXQgUm9v\\n\" +\n                    \"dCBDQSAxMB4XDTAyMTIwNTA4MDAwMFoXDTEzMDEyNTA4MDAwMFowaTETMBEGCgmS\\n\" +\n                    \"JomT8ixkARkWA29yZzEYMBYGCgmSJomT8ixkARkWCERPRUdyaWRzMSAwHgYDVQQL\\n\" +\n                    \"ExdDZXJ0aWZpY2F0ZSBBdXRob3JpdGllczEWMBQGA1UEAxMNRE9FR3JpZHMgQ0Eg\\n\" +\n                    \"MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALT11iNho9sIPma1uJBv\\n\" +\n                    \"sprfLWoCbRlyooIVyJZx97wrBy7L22Me4iwt/1ki12QNbjHLyy5r2cmXHcqXCO26\\n\" +\n                    \"ZMy062DfkpkKSdR3wozhUZNIV0tUb0Bs1rJ5/vpxpUIYzX6PIXQurTeRq4Y49Nw1\\n\";", "modifier": "", "type": "String", "declarator": "invalidCert2 =\n            \"-----BEGIN CERTIFICATE-----\\n\" +\n                    \"MIID+DCCAuCgAwIBAgIBKTANBgkqhkiG9w0BAQUFADB1MRMwEQYKCZImiZPyLGQB\\n\" +\n                    \"GRYDbmV0MRIwEAYKCZImiZPyLGQBGRYCRVMxDjAMBgNVBAoTBUVTbmV0MSAwHgYD\\n\" +\n                    \"VQQLExdDZXJ0aWZpY2F0ZSBBdXRob3JpdGllczEYMBYGA1UEAxMPRVNuZXQgUm9v\\n\" +\n                    \"dCBDQSAxMB4XDTAyMTIwNTA4MDAwMFoXDTEzMDEyNTA4MDAwMFowaTETMBEGCgmS\\n\" +\n                    \"JomT8ixkARkWA29yZzEYMBYGCgmSJomT8ixkARkWCERPRUdyaWRzMSAwHgYDVQQL\\n\" +\n                    \"ExdDZXJ0aWZpY2F0ZSBBdXRob3JpdGllczEWMBQGA1UEAxMNRE9FR3JpZHMgQ0Eg\\n\" +\n                    \"MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALT11iNho9sIPma1uJBv\\n\" +\n                    \"sprfLWoCbRlyooIVyJZx97wrBy7L22Me4iwt/1ki12QNbjHLyy5r2cmXHcqXCO26\\n\" +\n                    \"ZMy062DfkpkKSdR3wozhUZNIV0tUb0Bs1rJ5/vpxpUIYzX6PIXQurTeRq4Y49Nw1\\n\"", "var_name": "invalidCert2"}, {"original_string": "String invalidCrl1 =\n            \"-----BEGIN X509 CRL-----\\n\" +\n                    \"MIIBLDCBljANBgkqhkiG9w0BAQQFADA9MREwDwYDVQQKEwh0ZXN0IENBMjESMBAG\\n\" +\n                    \"A1UECxMJc2ltcGxlIGNhMRQwEgYDVQQDEwtHbG9idXMgVGVzdBcNMDYwNTIzMDEy\\n\" +\n                    \"NjEwWhcNMDcwNTIzMDEyNjEwWjAoMBICAQIXDTA2MDUyMzAxMTM1MFowEgIBAxcN\";", "modifier": "", "type": "String", "declarator": "invalidCrl1 =\n            \"-----BEGIN X509 CRL-----\\n\" +\n                    \"MIIBLDCBljANBgkqhkiG9w0BAQQFADA9MREwDwYDVQQKEwh0ZXN0IENBMjESMBAG\\n\" +\n                    \"A1UECxMJc2ltcGxlIGNhMRQwEgYDVQQDEwtHbG9idXMgVGVzdBcNMDYwNTIzMDEy\\n\" +\n                    \"NjEwWhcNMDcwNTIzMDEyNjEwWjAoMBICAQIXDTA2MDUyMzAxMTM1MFowEgIBAxcN\"", "var_name": "invalidCrl1"}, {"original_string": "FileSetupUtil testCert1;", "modifier": "", "type": "FileSetupUtil", "declarator": "testCert1", "var_name": "testCert1"}, {"original_string": "FileSetupUtil testCert2;", "modifier": "", "type": "FileSetupUtil", "declarator": "testCert2", "var_name": "testCert2"}, {"original_string": "FileSetupUtil testCrl1;", "modifier": "", "type": "FileSetupUtil", "declarator": "testCrl1", "var_name": "testCrl1"}], "file": "ssl-proxies/src/test/java/org/globus/gsi/util/CertificateUtilTest.java"}, "test_case": {"identifier": "testToGlobusIdForReverseString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToGlobusIdForReverseString()\n    {\n        String dn =\n            CertificateUtil.toGlobusID(\"CN=DOEGrids CA 1, OU=Certificate Authorities, DC=DOEGrids, DC=org\",  false);\n        assertThat(dn, is(\"/DC=org/DC=DOEGrids/OU=Certificate Authorities/CN=DOEGrids CA 1\"));\n    }", "signature": "void testToGlobusIdForReverseString()", "full_signature": "@Test public void testToGlobusIdForReverseString()", "class_method_signature": "CertificateUtilTest.testToGlobusIdForReverseString()", "testcase": true, "constructor": false, "invocations": ["toGlobusID", "assertThat", "is"]}, "focal_class": {"identifier": "CertificateUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String provider;", "modifier": "private static", "type": "String", "declarator": "provider", "var_name": "provider"}, {"original_string": "private static Log logger;", "modifier": "private static", "type": "Log", "declarator": "logger", "var_name": "logger"}, {"original_string": "private static final Map<String, String> KEYWORD_MAP = new HashMap<String, String>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "KEYWORD_MAP = new HashMap<String, String>()", "var_name": "KEYWORD_MAP"}, {"original_string": "private static final Map<String, String> OID_MAP = new HashMap<String, String>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "OID_MAP = new HashMap<String, String>()", "var_name": "OID_MAP"}], "methods": [{"identifier": "CertificateUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " CertificateUtil()", "full_signature": "private  CertificateUtil()", "class_method_signature": "CertificateUtil.CertificateUtil()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void init()", "full_signature": "public static void init()", "class_method_signature": "CertificateUtil.init()", "testcase": false, "constructor": false}, {"identifier": "setProvider", "parameters": "(String providerName)", "modifiers": "public static", "return": "void", "signature": "void setProvider(String providerName)", "full_signature": "public static void setProvider(String providerName)", "class_method_signature": "CertificateUtil.setProvider(String providerName)", "testcase": false, "constructor": false}, {"identifier": "installSecureRandomProvider", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void installSecureRandomProvider()", "full_signature": "public static void installSecureRandomProvider()", "class_method_signature": "CertificateUtil.installSecureRandomProvider()", "testcase": false, "constructor": false}, {"identifier": "getCAPathConstraint", "parameters": "(TBSCertificateStructure crt)", "modifiers": "public static", "return": "int", "signature": "int getCAPathConstraint(TBSCertificateStructure crt)", "full_signature": "public static int getCAPathConstraint(TBSCertificateStructure crt)", "class_method_signature": "CertificateUtil.getCAPathConstraint(TBSCertificateStructure crt)", "testcase": false, "constructor": false}, {"identifier": "generateKeyPair", "parameters": "(String algorithm, int bits)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair generateKeyPair(String algorithm, int bits)", "full_signature": "public static KeyPair generateKeyPair(String algorithm, int bits)", "class_method_signature": "CertificateUtil.generateKeyPair(String algorithm, int bits)", "testcase": false, "constructor": false}, {"identifier": "getCertificateType", "parameters": "(\n            TBSCertificateStructure crt)", "modifiers": "public static", "return": "GSIConstants.CertificateType", "signature": "GSIConstants.CertificateType getCertificateType(\n            TBSCertificateStructure crt)", "full_signature": "public static GSIConstants.CertificateType getCertificateType(\n            TBSCertificateStructure crt)", "class_method_signature": "CertificateUtil.getCertificateType(\n            TBSCertificateStructure crt)", "testcase": false, "constructor": false}, {"identifier": "processCN", "parameters": "(\n            X509Extensions extensions, GSIConstants.CertificateType type, ASN1Sequence ava)", "modifiers": "private static", "return": "GSIConstants.CertificateType", "signature": "GSIConstants.CertificateType processCN(\n            X509Extensions extensions, GSIConstants.CertificateType type, ASN1Sequence ava)", "full_signature": "private static GSIConstants.CertificateType processCN(\n            X509Extensions extensions, GSIConstants.CertificateType type, ASN1Sequence ava)", "class_method_signature": "CertificateUtil.processCN(\n            X509Extensions extensions, GSIConstants.CertificateType type, ASN1Sequence ava)", "testcase": false, "constructor": false}, {"identifier": "processCriticalExtension", "parameters": "(X509Extension ext, boolean gsi4)", "modifiers": "private static", "return": "GSIConstants.CertificateType", "signature": "GSIConstants.CertificateType processCriticalExtension(X509Extension ext, boolean gsi4)", "full_signature": "private static GSIConstants.CertificateType processCriticalExtension(X509Extension ext, boolean gsi4)", "class_method_signature": "CertificateUtil.processCriticalExtension(X509Extension ext, boolean gsi4)", "testcase": false, "constructor": false}, {"identifier": "getBasicConstraints", "parameters": "(X509Extension ext)", "modifiers": "public static", "return": "BasicConstraints", "signature": "BasicConstraints getBasicConstraints(X509Extension ext)", "full_signature": "public static BasicConstraints getBasicConstraints(X509Extension ext)", "class_method_signature": "CertificateUtil.getBasicConstraints(X509Extension ext)", "testcase": false, "constructor": false}, {"identifier": "toASN1Primitive", "parameters": "(byte[] data)", "modifiers": "public static", "return": "ASN1Primitive", "signature": "ASN1Primitive toASN1Primitive(byte[] data)", "full_signature": "public static ASN1Primitive toASN1Primitive(byte[] data)", "class_method_signature": "CertificateUtil.toASN1Primitive(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getTBSCertificateStructure", "parameters": "(\n            X509Certificate cert)", "modifiers": "public static", "return": "TBSCertificateStructure", "signature": "TBSCertificateStructure getTBSCertificateStructure(\n            X509Certificate cert)", "full_signature": "public static TBSCertificateStructure getTBSCertificateStructure(\n            X509Certificate cert)", "class_method_signature": "CertificateUtil.getTBSCertificateStructure(\n            X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "getKeyUsage", "parameters": "(TBSCertificateStructure crt)", "modifiers": "public static", "return": "EnumSet<KeyUsage>", "signature": "EnumSet<KeyUsage> getKeyUsage(TBSCertificateStructure crt)", "full_signature": "public static EnumSet<KeyUsage> getKeyUsage(TBSCertificateStructure crt)", "class_method_signature": "CertificateUtil.getKeyUsage(TBSCertificateStructure crt)", "testcase": false, "constructor": false}, {"identifier": "getKeyUsage", "parameters": "(X509Extension ext)", "modifiers": "public static", "return": "EnumSet<KeyUsage>", "signature": "EnumSet<KeyUsage> getKeyUsage(X509Extension ext)", "full_signature": "public static EnumSet<KeyUsage> getKeyUsage(X509Extension ext)", "class_method_signature": "CertificateUtil.getKeyUsage(X509Extension ext)", "testcase": false, "constructor": false}, {"identifier": "getExtensionObject", "parameters": "(X509Extension ext)", "modifiers": "public static", "return": "ASN1Primitive", "signature": "ASN1Primitive getExtensionObject(X509Extension ext)", "full_signature": "public static ASN1Primitive getExtensionObject(X509Extension ext)", "class_method_signature": "CertificateUtil.getExtensionObject(X509Extension ext)", "testcase": false, "constructor": false}, {"identifier": "toGlobusID", "parameters": "(String dn)", "modifiers": "public static", "return": "String", "signature": "String toGlobusID(String dn)", "full_signature": "public static String toGlobusID(String dn)", "class_method_signature": "CertificateUtil.toGlobusID(String dn)", "testcase": false, "constructor": false}, {"identifier": "toGlobusID", "parameters": "(String dn, boolean noreverse)", "modifiers": "public static", "return": "String", "signature": "String toGlobusID(String dn, boolean noreverse)", "full_signature": "public static String toGlobusID(String dn, boolean noreverse)", "class_method_signature": "CertificateUtil.toGlobusID(String dn, boolean noreverse)", "testcase": false, "constructor": false}, {"identifier": "toGlobusID", "parameters": "(Principal name)", "modifiers": "public static", "return": "String", "signature": "String toGlobusID(Principal name)", "full_signature": "public static String toGlobusID(Principal name)", "class_method_signature": "CertificateUtil.toGlobusID(Principal name)", "testcase": false, "constructor": false}, {"identifier": "toGlobusID", "parameters": "(X500Principal principal)", "modifiers": "public static", "return": "String", "signature": "String toGlobusID(X500Principal principal)", "full_signature": "public static String toGlobusID(X500Principal principal)", "class_method_signature": "CertificateUtil.toGlobusID(X500Principal principal)", "testcase": false, "constructor": false}, {"identifier": "toPrincipal", "parameters": "(String globusID)", "modifiers": "public static", "return": "X500Principal", "signature": "X500Principal toPrincipal(String globusID)", "full_signature": "public static X500Principal toPrincipal(String globusID)", "class_method_signature": "CertificateUtil.toPrincipal(String globusID)", "testcase": false, "constructor": false}, {"identifier": "getCertPath", "parameters": "(X509Certificate[] certs)", "modifiers": "public static", "return": "CertPath", "signature": "CertPath getCertPath(X509Certificate[] certs)", "full_signature": "public static CertPath getCertPath(X509Certificate[] certs)", "class_method_signature": "CertificateUtil.getCertPath(X509Certificate[] certs)", "testcase": false, "constructor": false}], "file": "ssl-proxies/src/main/java/org/globus/gsi/util/CertificateUtil.java"}, "focal_method": {"identifier": "toGlobusID", "parameters": "(String dn)", "modifiers": "public static", "return": "String", "body": "public static String toGlobusID(String dn) {\n        return toGlobusID(dn, true);\n    }", "signature": "String toGlobusID(String dn)", "full_signature": "public static String toGlobusID(String dn)", "class_method_signature": "CertificateUtil.toGlobusID(String dn)", "testcase": false, "constructor": false, "invocations": ["toGlobusID"]}, "repository": {"repo_id": 812511, "url": "https://github.com/jglobus/JGlobus", "language": "Java", "is_fork": false, "fork_count": 44, "stargazer_count": 19, "size": 20212, "license": "licensed"}}