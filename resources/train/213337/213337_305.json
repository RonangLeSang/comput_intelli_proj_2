{"test_class": {"identifier": "StudyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Study d_orig;", "modifier": "private", "type": "Study", "declarator": "d_orig", "var_name": "d_orig"}, {"original_string": "private Study d_clone;", "modifier": "private", "type": "Study", "declarator": "d_clone", "var_name": "d_clone"}, {"original_string": "private Note d_note;", "modifier": "private", "type": "Note", "declarator": "d_note", "var_name": "d_note"}, {"original_string": "private Study d_empty;", "modifier": "private", "type": "Study", "declarator": "d_empty", "var_name": "d_empty"}], "file": "application/src/test/java/org/drugis/addis/entities/StudyTest.java"}, "test_case": {"identifier": "testDeepEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDeepEquals() {\n\t\t// Test ID\n\t\tStudy study1 = new Study(\"Title\", ExampleData.buildIndicationDepression());\n\t\tStudy study2 = new Study(\"Other Title\", ExampleData.buildIndicationDepression());\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy2.setName(\"Title\");\n\t\tassertTrue(study1.deepEquals(study2));\n\n\t\t// indication\n\t\tstudy2.setIndication(ExampleData.buildIndicationChronicHeartFailure());\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy2.setIndication(ExampleData.buildIndicationDepression());\n\n\t\t// characteristics\n\t\tstudy2.setCharacteristic(BasicStudyCharacteristic.TITLE, \"This is terrible\");\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy1.setCharacteristic(BasicStudyCharacteristic.TITLE, \"This is terrible\");\n\t\tassertTrue(study1.deepEquals(study2));\n\t\tstudy2.getNotes().add(new Note(Source.CLINICALTRIALS, \"Official title\"));\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy2.getNotes().clear();\n\n\t\t// endpoints\n\t\tstudy2.getEndpoints().add(new StudyOutcomeMeasure<Endpoint>(ExampleData.buildEndpointCgi()));\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy1.getEndpoints().add(new StudyOutcomeMeasure<Endpoint>(ExampleData.buildEndpointCgi()));\n\t\tassertTrue(study1.deepEquals(study2));\n\t\t// Here we might test if the equality is based on .equals or .deepEquals of Endpoint\n\n\t\t// adverseEvents\n\t\tstudy2.getAdverseEvents().add(new StudyOutcomeMeasure<AdverseEvent>(ExampleData.buildAdverseEventConvulsion()));\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy1.getAdverseEvents().add(new StudyOutcomeMeasure<AdverseEvent>(ExampleData.buildAdverseEventConvulsion()));\n\t\tassertTrue(study1.deepEquals(study2));\n\t\t// Here we might test if the equality is based on .equals or .deepEquals of AdverseEvent\n\n\t\t// populationCharacteristics\n\t\tstudy2.getPopulationChars().add(new StudyOutcomeMeasure<PopulationCharacteristic>(ExampleData.buildAgeVariable()));\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy1.getPopulationChars().add(new StudyOutcomeMeasure<PopulationCharacteristic>(ExampleData.buildAgeVariable()));\n\t\tassertTrue(study1.deepEquals(study2));\n\t\tstudy2.getPopulationChars().add(new StudyOutcomeMeasure<PopulationCharacteristic>(ExampleData.buildGenderVariable()));\n\t\t// Here we DO test if the equality is based on .equals or .deepEquals of PopulationCharacteristic\n\t\tPopulationCharacteristic pc = new PopulationCharacteristic(ExampleData.buildGenderVariable().getName(), new CategoricalVariableType(Arrays.asList((new String[] { \"Mars\", \"Venus\" }))));\n\t\tstudy1.getPopulationChars().add(new StudyOutcomeMeasure<PopulationCharacteristic>(pc));\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy1.getPopulationChars().clear();\n\t\tstudy1.getPopulationChars().addAll(Study.wrapVariables(Collections.<PopulationCharacteristic>emptyList()));\n\t\tstudy2.getPopulationChars().clear();\n\t\tstudy2.getPopulationChars().addAll(Study.wrapVariables(Collections.<PopulationCharacteristic>emptyList()));\n\t\tassertTrue(study1.deepEquals(study2));\n\n\t\tArm arm = new Arm(\"Arm1\", 9001);\n\t\tstudy2.getArms().add(arm);\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy1.getArms().add(arm);\n\t\tassertTrue(study1.deepEquals(study2));\n\n\t\tstudy1.getEpochs().add(new Epoch(\"Epoch1\", null));\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy2.getEpochs().add(new Epoch(\"Epoch1\", null));\n\t\tassertTrue(study1.deepEquals(study2));\n\n\t\tStudyActivity randomization1 = new StudyActivity(\"Dancing\", PredefinedActivity.RANDOMIZATION);\n\t\tStudyActivity randomization2 = new StudyActivity(\"Dancing\", PredefinedActivity.RANDOMIZATION);\n\t\tstudy1.getStudyActivities().add(randomization1);\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy2.getStudyActivities().add(randomization2);\n\t\tassertTrue(study1.deepEquals(study2));\n\n\t\tStudyActivity sa = new StudyActivity(\"Treatment\", new TreatmentActivity(new DrugTreatment(ExampleData.buildDrugCandesartan(),\n\t\t\t\tnew FixedDose(100, new DoseUnit(Domain.GRAM, ScaleModifier.MICRO, EntityUtil.createDuration(\"P1D\"))))));\n\t\tstudy1.getStudyActivities().add(sa);\n\t\tstudy2.getStudyActivities().add(sa);\n\n\t\tstudy1.setStudyActivityAt(arm, study1.getEpochs().get(0), randomization1);\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy2.setStudyActivityAt(arm, study2.getEpochs().get(0), randomization1);\n\t\tassertTrue(study1.deepEquals(study2));\n\n\t\tstudy1.setStudyActivityAt(arm, study1.getEpochs().get(0), sa);\n\t\tstudy2.setStudyActivityAt(arm, study1.getEpochs().get(0), sa);\n\n\t\tstudy1.setMeasurement(study1.findStudyOutcomeMeasure(ExampleData.buildAdverseEventConvulsion()), arm, new BasicRateMeasurement(50, 100));\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy2.setMeasurement(study2.findStudyOutcomeMeasure(ExampleData.buildAdverseEventConvulsion()), arm, new BasicRateMeasurement(50, 100));\n\t\tassertTrue(study1.deepEquals(study2));\n\n\t\tstudy1.getNotes().add(new Note(Source.MANUAL, \"testnote\"));\n\t\tassertFalse(study1.deepEquals(study2));\n\t\tstudy2.getNotes().add(new Note(Source.MANUAL, \"testnote\"));\n\t\tassertTrue(study1.deepEquals(study2));\n\t}", "signature": "void testDeepEquals()", "full_signature": "@Test public void testDeepEquals()", "class_method_signature": "StudyTest.testDeepEquals()", "testcase": true, "constructor": false, "invocations": ["buildIndicationDepression", "buildIndicationDepression", "assertFalse", "deepEquals", "setName", "assertTrue", "deepEquals", "setIndication", "buildIndicationChronicHeartFailure", "assertFalse", "deepEquals", "setIndication", "buildIndicationDepression", "setCharacteristic", "assertFalse", "deepEquals", "setCharacteristic", "assertTrue", "deepEquals", "add", "getNotes", "assertFalse", "deepEquals", "clear", "getNotes", "add", "getEndpoints", "buildEndpointCgi", "assertFalse", "deepEquals", "add", "getEndpoints", "buildEndpointCgi", "assertTrue", "deepEquals", "add", "getAdverseEvents", "buildAdverseEventConvulsion", "assertFalse", "deepEquals", "add", "getAdverseEvents", "buildAdverseEventConvulsion", "assertTrue", "deepEquals", "add", "getPopulationChars", "buildAgeVariable", "assertFalse", "deepEquals", "add", "getPopulationChars", "buildAgeVariable", "assertTrue", "deepEquals", "add", "getPopulationChars", "buildGenderVariable", "getName", "buildGenderVariable", "asList", "add", "getPopulationChars", "assertFalse", "deepEquals", "clear", "getPopulationChars", "addAll", "getPopulationChars", "wrapVariables", "emptyList", "clear", "getPopulationChars", "addAll", "getPopulationChars", "wrapVariables", "emptyList", "assertTrue", "deepEquals", "add", "getArms", "assertFalse", "deepEquals", "add", "getArms", "assertTrue", "deepEquals", "add", "getEpochs", "assertFalse", "deepEquals", "add", "getEpochs", "assertTrue", "deepEquals", "add", "getStudyActivities", "assertFalse", "deepEquals", "add", "getStudyActivities", "assertTrue", "deepEquals", "buildDrugCandesartan", "createDuration", "add", "getStudyActivities", "add", "getStudyActivities", "setStudyActivityAt", "get", "getEpochs", "assertFalse", "deepEquals", "setStudyActivityAt", "get", "getEpochs", "assertTrue", "deepEquals", "setStudyActivityAt", "get", "getEpochs", "setStudyActivityAt", "get", "getEpochs", "setMeasurement", "findStudyOutcomeMeasure", "buildAdverseEventConvulsion", "assertFalse", "deepEquals", "setMeasurement", "findStudyOutcomeMeasure", "buildAdverseEventConvulsion", "assertTrue", "deepEquals", "add", "getNotes", "assertFalse", "deepEquals", "add", "getNotes", "assertTrue", "deepEquals"]}, "focal_class": {"identifier": "Study", "superclass": "extends AbstractNamedEntity<Study>", "interfaces": "implements TypeWithNotes", "fields": [{"original_string": "public final static String PROPERTY_INDICATION = \"indication\";", "modifier": "public final static", "type": "String", "declarator": "PROPERTY_INDICATION = \"indication\"", "var_name": "PROPERTY_INDICATION"}, {"original_string": "public final static String PROPERTY_CHARACTERISTICS = \"characteristics\";", "modifier": "public final static", "type": "String", "declarator": "PROPERTY_CHARACTERISTICS = \"characteristics\"", "var_name": "PROPERTY_CHARACTERISTICS"}, {"original_string": "public final static String PROPERTY_ENDPOINTS = \"endpoints\";", "modifier": "public final static", "type": "String", "declarator": "PROPERTY_ENDPOINTS = \"endpoints\"", "var_name": "PROPERTY_ENDPOINTS"}, {"original_string": "public final static String PROPERTY_ADVERSE_EVENTS = \"adverseEvents\";", "modifier": "public final static", "type": "String", "declarator": "PROPERTY_ADVERSE_EVENTS = \"adverseEvents\"", "var_name": "PROPERTY_ADVERSE_EVENTS"}, {"original_string": "public final static String PROPERTY_POPULATION_CHARACTERISTICS = \"populationCharacteristics\";", "modifier": "public final static", "type": "String", "declarator": "PROPERTY_POPULATION_CHARACTERISTICS = \"populationCharacteristics\"", "var_name": "PROPERTY_POPULATION_CHARACTERISTICS"}, {"original_string": "public final static String PROPERTY_ARMS = \"arms\";", "modifier": "public final static", "type": "String", "declarator": "PROPERTY_ARMS = \"arms\"", "var_name": "PROPERTY_ARMS"}, {"original_string": "public final static String PROPERTY_EPOCHS = \"epochs\";", "modifier": "public final static", "type": "String", "declarator": "PROPERTY_EPOCHS = \"epochs\"", "var_name": "PROPERTY_EPOCHS"}, {"original_string": "public final static String PROPERTY_STUDY_ACTIVITIES = \"studyActivities\";", "modifier": "public final static", "type": "String", "declarator": "PROPERTY_STUDY_ACTIVITIES = \"studyActivities\"", "var_name": "PROPERTY_STUDY_ACTIVITIES"}, {"original_string": "private ObjectWithNotes<Indication> d_indication;", "modifier": "private", "type": "ObjectWithNotes<Indication>", "declarator": "d_indication", "var_name": "d_indication"}, {"original_string": "private CharacteristicsMap d_chars = new CharacteristicsMap();", "modifier": "private", "type": "CharacteristicsMap", "declarator": "d_chars = new CharacteristicsMap()", "var_name": "d_chars"}, {"original_string": "private final ObservableList<StudyOutcomeMeasure<? extends Variable>> d_outcomeMeasures = new ArrayListModel<StudyOutcomeMeasure<? extends Variable>>();", "modifier": "private final", "type": "ObservableList<StudyOutcomeMeasure<? extends Variable>>", "declarator": "d_outcomeMeasures = new ArrayListModel<StudyOutcomeMeasure<? extends Variable>>()", "var_name": "d_outcomeMeasures"}, {"original_string": "private final ObservableList<StudyOutcomeMeasure<Endpoint>> d_endpoints;", "modifier": "private final", "type": "ObservableList<StudyOutcomeMeasure<Endpoint>>", "declarator": "d_endpoints", "var_name": "d_endpoints"}, {"original_string": "private final ObservableList<StudyOutcomeMeasure<AdverseEvent>> d_adverseEvents;", "modifier": "private final", "type": "ObservableList<StudyOutcomeMeasure<AdverseEvent>>", "declarator": "d_adverseEvents", "var_name": "d_adverseEvents"}, {"original_string": "private final ObservableList<StudyOutcomeMeasure<PopulationCharacteristic>> d_populationChars;", "modifier": "private final", "type": "ObservableList<StudyOutcomeMeasure<PopulationCharacteristic>>", "declarator": "d_populationChars", "var_name": "d_populationChars"}, {"original_string": "private final ObservableList<Arm> d_arms = new ArrayListModel<Arm>();", "modifier": "private final", "type": "ObservableList<Arm>", "declarator": "d_arms = new ArrayListModel<Arm>()", "var_name": "d_arms"}, {"original_string": "private final ObservableList<Epoch> d_epochs = new ArrayListModel<Epoch>();", "modifier": "private final", "type": "ObservableList<Epoch>", "declarator": "d_epochs = new ArrayListModel<Epoch>()", "var_name": "d_epochs"}, {"original_string": "private final ObservableList<StudyActivity> d_studyActivities = new ArrayListModel<StudyActivity>();", "modifier": "private final", "type": "ObservableList<StudyActivity>", "declarator": "d_studyActivities = new ArrayListModel<StudyActivity>()", "var_name": "d_studyActivities"}, {"original_string": "private final Map<MeasurementKey, BasicMeasurement> d_measurements = new HashMap<MeasurementKey, BasicMeasurement>();", "modifier": "private final", "type": "Map<MeasurementKey, BasicMeasurement>", "declarator": "d_measurements = new HashMap<MeasurementKey, BasicMeasurement>()", "var_name": "d_measurements"}, {"original_string": "private final ObservableList<Note> d_notes = new ArrayListModel<Note>();", "modifier": "private final", "type": "ObservableList<Note>", "declarator": "d_notes = new ArrayListModel<Note>()", "var_name": "d_notes"}], "methods": [{"identifier": "Study", "parameters": "()", "modifiers": "public", "return": "", "signature": " Study()", "full_signature": "public  Study()", "class_method_signature": "Study.Study()", "testcase": false, "constructor": true}, {"identifier": "Study", "parameters": "(final String id, final Indication i)", "modifiers": "public", "return": "", "signature": " Study(final String id, final Indication i)", "full_signature": "public  Study(final String id, final Indication i)", "class_method_signature": "Study.Study(final String id, final Indication i)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(final Class<T> cls, final ObservableList<StudyOutcomeMeasure<? extends Variable>> list)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private", "return": "ObservableList<StudyOutcomeMeasure<T>>", "signature": "ObservableList<StudyOutcomeMeasure<T>> convert(final Class<T> cls, final ObservableList<StudyOutcomeMeasure<? extends Variable>> list)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private ObservableList<StudyOutcomeMeasure<T>> convert(final Class<T> cls, final ObservableList<StudyOutcomeMeasure<? extends Variable>> list)", "class_method_signature": "Study.convert(final Class<T> cls, final ObservableList<StudyOutcomeMeasure<? extends Variable>> list)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Study", "signature": "Study clone()", "full_signature": "@Override public Study clone()", "class_method_signature": "Study.clone()", "testcase": false, "constructor": false}, {"identifier": "replaceArm", "parameters": "(final Arm oldArm, final Arm newArm)", "modifiers": "public", "return": "void", "signature": "void replaceArm(final Arm oldArm, final Arm newArm)", "full_signature": "public void replaceArm(final Arm oldArm, final Arm newArm)", "class_method_signature": "Study.replaceArm(final Arm oldArm, final Arm newArm)", "testcase": false, "constructor": false}, {"identifier": "replaceEpoch", "parameters": "(final Epoch oldEpoch, final Epoch newEpoch)", "modifiers": "public", "return": "void", "signature": "void replaceEpoch(final Epoch oldEpoch, final Epoch newEpoch)", "full_signature": "public void replaceEpoch(final Epoch oldEpoch, final Epoch newEpoch)", "class_method_signature": "Study.replaceEpoch(final Epoch oldEpoch, final Epoch newEpoch)", "testcase": false, "constructor": false}, {"identifier": "replaceWhenTaken", "parameters": "(final StudyOutcomeMeasure<V> som,\n\t\t\tfinal WhenTaken oldWhenTaken, final WhenTaken newWhenTaken)", "modifiers": "public", "return": "void", "signature": "void replaceWhenTaken(final StudyOutcomeMeasure<V> som,\n\t\t\tfinal WhenTaken oldWhenTaken, final WhenTaken newWhenTaken)", "full_signature": "public void replaceWhenTaken(final StudyOutcomeMeasure<V> som,\n\t\t\tfinal WhenTaken oldWhenTaken, final WhenTaken newWhenTaken)", "class_method_signature": "Study.replaceWhenTaken(final StudyOutcomeMeasure<V> som,\n\t\t\tfinal WhenTaken oldWhenTaken, final WhenTaken newWhenTaken)", "testcase": false, "constructor": false}, {"identifier": "updateMeasurementKeys", "parameters": "(\n\t\t\tfinal StudyOutcomeMeasure<? extends V> oldSom, final StudyOutcomeMeasure<? extends V> newSom,\n\t\t\tfinal WhenTaken oldWhenTaken, final WhenTaken newWhenTaken)", "modifiers": "private", "return": "void", "signature": "void updateMeasurementKeys(\n\t\t\tfinal StudyOutcomeMeasure<? extends V> oldSom, final StudyOutcomeMeasure<? extends V> newSom,\n\t\t\tfinal WhenTaken oldWhenTaken, final WhenTaken newWhenTaken)", "full_signature": "private void updateMeasurementKeys(\n\t\t\tfinal StudyOutcomeMeasure<? extends V> oldSom, final StudyOutcomeMeasure<? extends V> newSom,\n\t\t\tfinal WhenTaken oldWhenTaken, final WhenTaken newWhenTaken)", "class_method_signature": "Study.updateMeasurementKeys(\n\t\t\tfinal StudyOutcomeMeasure<? extends V> oldSom, final StudyOutcomeMeasure<? extends V> newSom,\n\t\t\tfinal WhenTaken oldWhenTaken, final WhenTaken newWhenTaken)", "testcase": false, "constructor": false}, {"identifier": "transformMeasurementKeys", "parameters": "(final Transformer<MeasurementKey, MeasurementKey> transform)", "modifiers": "private", "return": "void", "signature": "void transformMeasurementKeys(final Transformer<MeasurementKey, MeasurementKey> transform)", "full_signature": "private void transformMeasurementKeys(final Transformer<MeasurementKey, MeasurementKey> transform)", "class_method_signature": "Study.transformMeasurementKeys(final Transformer<MeasurementKey, MeasurementKey> transform)", "testcase": false, "constructor": false}, {"identifier": "transformUsedBy", "parameters": "(final Transformer<UsedBy, UsedBy> transformer)", "modifiers": "private", "return": "void", "signature": "void transformUsedBy(final Transformer<UsedBy, UsedBy> transformer)", "full_signature": "private void transformUsedBy(final Transformer<UsedBy, UsedBy> transformer)", "class_method_signature": "Study.transformUsedBy(final Transformer<UsedBy, UsedBy> transformer)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(final ObservableList<T> target, final Collection<T> newValues)", "modifiers": "private static", "return": "void", "signature": "void replace(final ObservableList<T> target, final Collection<T> newValues)", "full_signature": "private static void replace(final ObservableList<T> target, final Collection<T> newValues)", "class_method_signature": "Study.replace(final ObservableList<T> target, final Collection<T> newValues)", "testcase": false, "constructor": false}, {"identifier": "cloneStudyOutcomeMeasures", "parameters": "(final List<StudyOutcomeMeasure<? extends Variable>> soms)", "modifiers": "private", "return": "List<StudyOutcomeMeasure<? extends Variable>>", "signature": "List<StudyOutcomeMeasure<? extends Variable>> cloneStudyOutcomeMeasures(final List<StudyOutcomeMeasure<? extends Variable>> soms)", "full_signature": "private List<StudyOutcomeMeasure<? extends Variable>> cloneStudyOutcomeMeasures(final List<StudyOutcomeMeasure<? extends Variable>> soms)", "class_method_signature": "Study.cloneStudyOutcomeMeasures(final List<StudyOutcomeMeasure<? extends Variable>> soms)", "testcase": false, "constructor": false}, {"identifier": "cloneCharacteristics", "parameters": "()", "modifiers": "private", "return": "CharacteristicsMap", "signature": "CharacteristicsMap cloneCharacteristics()", "full_signature": "private CharacteristicsMap cloneCharacteristics()", "class_method_signature": "Study.cloneCharacteristics()", "testcase": false, "constructor": false}, {"identifier": "getArms", "parameters": "()", "modifiers": "public", "return": "ObservableList<Arm>", "signature": "ObservableList<Arm> getArms()", "full_signature": "public ObservableList<Arm> getArms()", "class_method_signature": "Study.getArms()", "testcase": false, "constructor": false}, {"identifier": "getEpochs", "parameters": "()", "modifiers": "public", "return": "ObservableList<Epoch>", "signature": "ObservableList<Epoch> getEpochs()", "full_signature": "public ObservableList<Epoch> getEpochs()", "class_method_signature": "Study.getEpochs()", "testcase": false, "constructor": false}, {"identifier": "getStudyActivities", "parameters": "()", "modifiers": "public", "return": "ObservableList<StudyActivity>", "signature": "ObservableList<StudyActivity> getStudyActivities()", "full_signature": "public ObservableList<StudyActivity> getStudyActivities()", "class_method_signature": "Study.getStudyActivities()", "testcase": false, "constructor": false}, {"identifier": "setStudyActivityAt", "parameters": "(final Arm arm, final Epoch epoch, StudyActivity activity)", "modifiers": "public", "return": "void", "signature": "void setStudyActivityAt(final Arm arm, final Epoch epoch, StudyActivity activity)", "full_signature": "public void setStudyActivityAt(final Arm arm, final Epoch epoch, StudyActivity activity)", "class_method_signature": "Study.setStudyActivityAt(final Arm arm, final Epoch epoch, StudyActivity activity)", "testcase": false, "constructor": false}, {"identifier": "getStudyActivityAt", "parameters": "(final Arm arm, final Epoch epoch)", "modifiers": "public", "return": "StudyActivity", "signature": "StudyActivity getStudyActivityAt(final Arm arm, final Epoch epoch)", "full_signature": "public StudyActivity getStudyActivityAt(final Arm arm, final Epoch epoch)", "class_method_signature": "Study.getStudyActivityAt(final Arm arm, final Epoch epoch)", "testcase": false, "constructor": false}, {"identifier": "assertContains", "parameters": "(final ObservableList<E> list, final E item)", "modifiers": "private", "return": "void", "signature": "void assertContains(final ObservableList<E> list, final E item)", "full_signature": "private void assertContains(final ObservableList<E> list, final E item)", "class_method_signature": "Study.assertContains(final ObservableList<E> list, final E item)", "testcase": false, "constructor": false}, {"identifier": "clearStudyActivityAt", "parameters": "(final Arm arm, final Epoch epoch)", "modifiers": "private", "return": "void", "signature": "void clearStudyActivityAt(final Arm arm, final Epoch epoch)", "full_signature": "private void clearStudyActivityAt(final Arm arm, final Epoch epoch)", "class_method_signature": "Study.clearStudyActivityAt(final Arm arm, final Epoch epoch)", "testcase": false, "constructor": false}, {"identifier": "getTreatmentDefinitions", "parameters": "()", "modifiers": "public", "return": "Set<TreatmentDefinition>", "signature": "Set<TreatmentDefinition> getTreatmentDefinitions()", "full_signature": "public Set<TreatmentDefinition> getTreatmentDefinitions()", "class_method_signature": "Study.getTreatmentDefinitions()", "testcase": false, "constructor": false}, {"identifier": "getIndication", "parameters": "()", "modifiers": "public", "return": "Indication", "signature": "Indication getIndication()", "full_signature": "public Indication getIndication()", "class_method_signature": "Study.getIndication()", "testcase": false, "constructor": false}, {"identifier": "setIndication", "parameters": "(final Indication indication)", "modifiers": "public", "return": "void", "signature": "void setIndication(final Indication indication)", "full_signature": "public void setIndication(final Indication indication)", "class_method_signature": "Study.setIndication(final Indication indication)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Set<Entity>", "signature": "Set<Entity> getDependencies()", "full_signature": "@Override public Set<Entity> getDependencies()", "class_method_signature": "Study.getDependencies()", "testcase": false, "constructor": false}, {"identifier": "getCharacteristic", "parameters": "(final Characteristic c)", "modifiers": "public", "return": "Object", "signature": "Object getCharacteristic(final Characteristic c)", "full_signature": "public Object getCharacteristic(final Characteristic c)", "class_method_signature": "Study.getCharacteristic(final Characteristic c)", "testcase": false, "constructor": false}, {"identifier": "setCharacteristic", "parameters": "(final BasicStudyCharacteristic c, final Object val)", "modifiers": "public", "return": "void", "signature": "void setCharacteristic(final BasicStudyCharacteristic c, final Object val)", "full_signature": "public void setCharacteristic(final BasicStudyCharacteristic c, final Object val)", "class_method_signature": "Study.setCharacteristic(final BasicStudyCharacteristic c, final Object val)", "testcase": false, "constructor": false}, {"identifier": "getCharacteristicWithNotes", "parameters": "(final Characteristic c)", "modifiers": "public", "return": "ObjectWithNotes<?>", "signature": "ObjectWithNotes<?> getCharacteristicWithNotes(final Characteristic c)", "full_signature": "public ObjectWithNotes<?> getCharacteristicWithNotes(final Characteristic c)", "class_method_signature": "Study.getCharacteristicWithNotes(final Characteristic c)", "testcase": false, "constructor": false}, {"identifier": "setCharacteristicWithNotes", "parameters": "(final BasicStudyCharacteristic c, final ObjectWithNotes<?> val)", "modifiers": "public", "return": "void", "signature": "void setCharacteristicWithNotes(final BasicStudyCharacteristic c, final ObjectWithNotes<?> val)", "full_signature": "public void setCharacteristicWithNotes(final BasicStudyCharacteristic c, final ObjectWithNotes<?> val)", "class_method_signature": "Study.setCharacteristicWithNotes(final BasicStudyCharacteristic c, final ObjectWithNotes<?> val)", "testcase": false, "constructor": false}, {"identifier": "setCharacteristics", "parameters": "(final CharacteristicsMap m)", "modifiers": "public", "return": "void", "signature": "void setCharacteristics(final CharacteristicsMap m)", "full_signature": "public void setCharacteristics(final CharacteristicsMap m)", "class_method_signature": "Study.setCharacteristics(final CharacteristicsMap m)", "testcase": false, "constructor": false}, {"identifier": "getCharacteristics", "parameters": "()", "modifiers": "public", "return": "CharacteristicsMap", "signature": "CharacteristicsMap getCharacteristics()", "full_signature": "public CharacteristicsMap getCharacteristics()", "class_method_signature": "Study.getCharacteristics()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(final String name)", "modifiers": "public", "return": "void", "signature": "void setName(final String name)", "full_signature": "public void setName(final String name)", "class_method_signature": "Study.setName(final String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Study.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "Study.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Study.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final Study other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final Study other)", "full_signature": "@Override public int compareTo(final Study other)", "class_method_signature": "Study.compareTo(final Study other)", "testcase": false, "constructor": false}, {"identifier": "setMeasurement", "parameters": "(final StudyOutcomeMeasure<? extends Variable> som, final BasicMeasurement m)", "modifiers": "public", "return": "void", "signature": "void setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final BasicMeasurement m)", "full_signature": "public void setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final BasicMeasurement m)", "class_method_signature": "Study.setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final BasicMeasurement m)", "testcase": false, "constructor": false}, {"identifier": "setMeasurement", "parameters": "(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, final BasicMeasurement m)", "modifiers": "public", "return": "void", "signature": "void setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, final BasicMeasurement m)", "full_signature": "public void setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, final BasicMeasurement m)", "class_method_signature": "Study.setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, final BasicMeasurement m)", "testcase": false, "constructor": false}, {"identifier": "setMeasurement", "parameters": "(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, WhenTaken wt, final BasicMeasurement m)", "modifiers": "public", "return": "BasicMeasurement", "signature": "BasicMeasurement setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, WhenTaken wt, final BasicMeasurement m)", "full_signature": "public BasicMeasurement setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, WhenTaken wt, final BasicMeasurement m)", "class_method_signature": "Study.setMeasurement(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, WhenTaken wt, final BasicMeasurement m)", "testcase": false, "constructor": false}, {"identifier": "forceLegalArguments", "parameters": "(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, final Measurement m)", "modifiers": "private", "return": "void", "signature": "void forceLegalArguments(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, final Measurement m)", "full_signature": "private void forceLegalArguments(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, final Measurement m)", "class_method_signature": "Study.forceLegalArguments(final StudyOutcomeMeasure<? extends Variable> som, final Arm a, final Measurement m)", "testcase": false, "constructor": false}, {"identifier": "getMeasurement", "parameters": "(final StudyOutcomeMeasure<? extends Variable> som , final Arm a, final WhenTaken wt)", "modifiers": "public", "return": "BasicMeasurement", "signature": "BasicMeasurement getMeasurement(final StudyOutcomeMeasure<? extends Variable> som , final Arm a, final WhenTaken wt)", "full_signature": "public BasicMeasurement getMeasurement(final StudyOutcomeMeasure<? extends Variable> som , final Arm a, final WhenTaken wt)", "class_method_signature": "Study.getMeasurement(final StudyOutcomeMeasure<? extends Variable> som , final Arm a, final WhenTaken wt)", "testcase": false, "constructor": false}, {"identifier": "getMeasurement", "parameters": "(final StudyOutcomeMeasure<? extends Variable> som , final Arm a)", "modifiers": "public", "return": "BasicMeasurement", "signature": "BasicMeasurement getMeasurement(final StudyOutcomeMeasure<? extends Variable> som , final Arm a)", "full_signature": "public BasicMeasurement getMeasurement(final StudyOutcomeMeasure<? extends Variable> som , final Arm a)", "class_method_signature": "Study.getMeasurement(final StudyOutcomeMeasure<? extends Variable> som , final Arm a)", "testcase": false, "constructor": false}, {"identifier": "getMeasurement", "parameters": "(final Variable v, final Arm a, final WhenTaken wt)", "modifiers": "public", "return": "BasicMeasurement", "signature": "BasicMeasurement getMeasurement(final Variable v, final Arm a, final WhenTaken wt)", "full_signature": "public BasicMeasurement getMeasurement(final Variable v, final Arm a, final WhenTaken wt)", "class_method_signature": "Study.getMeasurement(final Variable v, final Arm a, final WhenTaken wt)", "testcase": false, "constructor": false}, {"identifier": "getMeasurement", "parameters": "(final Variable v, final Arm a)", "modifiers": "public", "return": "BasicMeasurement", "signature": "BasicMeasurement getMeasurement(final Variable v, final Arm a)", "full_signature": "public BasicMeasurement getMeasurement(final Variable v, final Arm a)", "class_method_signature": "Study.getMeasurement(final Variable v, final Arm a)", "testcase": false, "constructor": false}, {"identifier": "getMeasurement", "parameters": "(final Variable v)", "modifiers": "public", "return": "BasicMeasurement", "signature": "BasicMeasurement getMeasurement(final Variable v)", "full_signature": "public BasicMeasurement getMeasurement(final Variable v)", "class_method_signature": "Study.getMeasurement(final Variable v)", "testcase": false, "constructor": false}, {"identifier": "getOutcomeMeasures", "parameters": "()", "modifiers": "public", "return": "List<OutcomeMeasure>", "signature": "List<OutcomeMeasure> getOutcomeMeasures()", "full_signature": "public List<OutcomeMeasure> getOutcomeMeasures()", "class_method_signature": "Study.getOutcomeMeasures()", "testcase": false, "constructor": false}, {"identifier": "extractVariables", "parameters": "(final List<StudyOutcomeMeasure<T>> soms)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> extractVariables(final List<StudyOutcomeMeasure<T>> soms)", "full_signature": "public static List<T> extractVariables(final List<StudyOutcomeMeasure<T>> soms)", "class_method_signature": "Study.extractVariables(final List<StudyOutcomeMeasure<T>> soms)", "testcase": false, "constructor": false}, {"identifier": "getVariables", "parameters": "(final Class<? extends Variable> type)", "modifiers": "public", "return": "List<? extends Variable>", "signature": "List<? extends Variable> getVariables(final Class<? extends Variable> type)", "full_signature": "public List<? extends Variable> getVariables(final Class<? extends Variable> type)", "class_method_signature": "Study.getVariables(final Class<? extends Variable> type)", "testcase": false, "constructor": false}, {"identifier": "getStudyOutcomeMeasures", "parameters": "(final Class<T> type)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "ObservableList<StudyOutcomeMeasure<T>>", "signature": "ObservableList<StudyOutcomeMeasure<T>> getStudyOutcomeMeasures(final Class<T> type)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public ObservableList<StudyOutcomeMeasure<T>> getStudyOutcomeMeasures(final Class<T> type)", "class_method_signature": "Study.getStudyOutcomeMeasures(final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getStudyOutcomeMeasures", "parameters": "()", "modifiers": "public", "return": "ObservableList<StudyOutcomeMeasure<? extends Variable>>", "signature": "ObservableList<StudyOutcomeMeasure<? extends Variable>> getStudyOutcomeMeasures()", "full_signature": "public ObservableList<StudyOutcomeMeasure<? extends Variable>> getStudyOutcomeMeasures()", "class_method_signature": "Study.getStudyOutcomeMeasures()", "testcase": false, "constructor": false}, {"identifier": "addVariable", "parameters": "(final Variable om)", "modifiers": "public", "return": "void", "signature": "void addVariable(final Variable om)", "full_signature": "public void addVariable(final Variable om)", "class_method_signature": "Study.addVariable(final Variable om)", "testcase": false, "constructor": false}, {"identifier": "addVariable", "parameters": "(final Variable om, final WhenTaken wt)", "modifiers": "public", "return": "void", "signature": "void addVariable(final Variable om, final WhenTaken wt)", "full_signature": "public void addVariable(final Variable om, final WhenTaken wt)", "class_method_signature": "Study.addVariable(final Variable om, final WhenTaken wt)", "testcase": false, "constructor": false}, {"identifier": "removeOrphanMeasurements", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeOrphanMeasurements()", "full_signature": "private void removeOrphanMeasurements()", "class_method_signature": "Study.removeOrphanMeasurements()", "testcase": false, "constructor": false}, {"identifier": "buildDefaultMeasurement", "parameters": "(final Variable v, final Arm a)", "modifiers": "public", "return": "BasicMeasurement", "signature": "BasicMeasurement buildDefaultMeasurement(final Variable v, final Arm a)", "full_signature": "public BasicMeasurement buildDefaultMeasurement(final Variable v, final Arm a)", "class_method_signature": "Study.buildDefaultMeasurement(final Variable v, final Arm a)", "testcase": false, "constructor": false}, {"identifier": "orphanKey", "parameters": "(final MeasurementKey k)", "modifiers": "private", "return": "boolean", "signature": "boolean orphanKey(final MeasurementKey k)", "full_signature": "private boolean orphanKey(final MeasurementKey k)", "class_method_signature": "Study.orphanKey(final MeasurementKey k)", "testcase": false, "constructor": false}, {"identifier": "getSampleSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSampleSize()", "full_signature": "public int getSampleSize()", "class_method_signature": "Study.getSampleSize()", "testcase": false, "constructor": false}, {"identifier": "getMeasurements", "parameters": "()", "modifiers": "public", "return": "Map<MeasurementKey, BasicMeasurement>", "signature": "Map<MeasurementKey, BasicMeasurement> getMeasurements()", "full_signature": "public Map<MeasurementKey, BasicMeasurement> getMeasurements()", "class_method_signature": "Study.getMeasurements()", "testcase": false, "constructor": false}, {"identifier": "getIndicationWithNotes", "parameters": "()", "modifiers": "public", "return": "ObjectWithNotes<?>", "signature": "ObjectWithNotes<?> getIndicationWithNotes()", "full_signature": "public ObjectWithNotes<?> getIndicationWithNotes()", "class_method_signature": "Study.getIndicationWithNotes()", "testcase": false, "constructor": false}, {"identifier": "addStudyOutcomeMeasure", "parameters": "(final StudyOutcomeMeasure<?> value)", "modifiers": "public", "return": "void", "signature": "void addStudyOutcomeMeasure(final StudyOutcomeMeasure<?> value)", "full_signature": "public void addStudyOutcomeMeasure(final StudyOutcomeMeasure<?> value)", "class_method_signature": "Study.addStudyOutcomeMeasure(final StudyOutcomeMeasure<?> value)", "testcase": false, "constructor": false}, {"identifier": "getTreatment", "parameters": "(final Arm arm)", "modifiers": "public", "return": "TreatmentActivity", "signature": "TreatmentActivity getTreatment(final Arm arm)", "full_signature": "public TreatmentActivity getTreatment(final Arm arm)", "class_method_signature": "Study.getTreatment(final Arm arm)", "testcase": false, "constructor": false}, {"identifier": "getActivity", "parameters": "(final Arm arm)", "modifiers": "public", "return": "Activity", "signature": "Activity getActivity(final Arm arm)", "full_signature": "public Activity getActivity(final Arm arm)", "class_method_signature": "Study.getActivity(final Arm arm)", "testcase": false, "constructor": false}, {"identifier": "findTreatmentEpoch", "parameters": "()", "modifiers": "public", "return": "Epoch", "signature": "Epoch findTreatmentEpoch()", "full_signature": "public Epoch findTreatmentEpoch()", "class_method_signature": "Study.findTreatmentEpoch()", "testcase": false, "constructor": false}, {"identifier": "defaultMeasurementMoment", "parameters": "()", "modifiers": "public", "return": "WhenTaken", "signature": "WhenTaken defaultMeasurementMoment()", "full_signature": "public WhenTaken defaultMeasurementMoment()", "class_method_signature": "Study.defaultMeasurementMoment()", "testcase": false, "constructor": false}, {"identifier": "baselineMeasurementMoment", "parameters": "()", "modifiers": "public", "return": "WhenTaken", "signature": "WhenTaken baselineMeasurementMoment()", "full_signature": "public WhenTaken baselineMeasurementMoment()", "class_method_signature": "Study.baselineMeasurementMoment()", "testcase": false, "constructor": false}, {"identifier": "treatmentWhenTaken", "parameters": "(final RelativeTo relativeTo)", "modifiers": "private", "return": "WhenTaken", "signature": "WhenTaken treatmentWhenTaken(final RelativeTo relativeTo)", "full_signature": "private WhenTaken treatmentWhenTaken(final RelativeTo relativeTo)", "class_method_signature": "Study.treatmentWhenTaken(final RelativeTo relativeTo)", "testcase": false, "constructor": false}, {"identifier": "isTreatmentEpoch", "parameters": "(final Epoch epoch)", "modifiers": "private", "return": "boolean", "signature": "boolean isTreatmentEpoch(final Epoch epoch)", "full_signature": "private boolean isTreatmentEpoch(final Epoch epoch)", "class_method_signature": "Study.isTreatmentEpoch(final Epoch epoch)", "testcase": false, "constructor": false}, {"identifier": "findEpochWithActivity", "parameters": "(final Activity a)", "modifiers": "public", "return": "Epoch", "signature": "Epoch findEpochWithActivity(final Activity a)", "full_signature": "public Epoch findEpochWithActivity(final Activity a)", "class_method_signature": "Study.findEpochWithActivity(final Activity a)", "testcase": false, "constructor": false}, {"identifier": "isActivityEpoch", "parameters": "(final Epoch epoch, final Activity a)", "modifiers": "private", "return": "boolean", "signature": "boolean isActivityEpoch(final Epoch epoch, final Activity a)", "full_signature": "private boolean isActivityEpoch(final Epoch epoch, final Activity a)", "class_method_signature": "Study.isActivityEpoch(final Epoch epoch, final Activity a)", "testcase": false, "constructor": false}, {"identifier": "getTreatmentDefinition", "parameters": "(final Arm a)", "modifiers": "public", "return": "TreatmentDefinition", "signature": "TreatmentDefinition getTreatmentDefinition(final Arm a)", "full_signature": "public TreatmentDefinition getTreatmentDefinition(final Arm a)", "class_method_signature": "Study.getTreatmentDefinition(final Arm a)", "testcase": false, "constructor": false}, {"identifier": "buildTreatmentDefinition", "parameters": "(final TreatmentActivity activity)", "modifiers": "private static", "return": "TreatmentDefinition", "signature": "TreatmentDefinition buildTreatmentDefinition(final TreatmentActivity activity)", "full_signature": "private static TreatmentDefinition buildTreatmentDefinition(final TreatmentActivity activity)", "class_method_signature": "Study.buildTreatmentDefinition(final TreatmentActivity activity)", "testcase": false, "constructor": false}, {"identifier": "deepEquals", "parameters": "(final Entity obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deepEquals(final Entity obj)", "full_signature": "@Override public boolean deepEquals(final Entity obj)", "class_method_signature": "Study.deepEquals(final Entity obj)", "testcase": false, "constructor": false}, {"identifier": "findArm", "parameters": "(final String armName)", "modifiers": "public", "return": "Arm", "signature": "Arm findArm(final String armName)", "full_signature": "public Arm findArm(final String armName)", "class_method_signature": "Study.findArm(final String armName)", "testcase": false, "constructor": false}, {"identifier": "findEpoch", "parameters": "(final String epochName)", "modifiers": "public", "return": "Epoch", "signature": "Epoch findEpoch(final String epochName)", "full_signature": "public Epoch findEpoch(final String epochName)", "class_method_signature": "Study.findEpoch(final String epochName)", "testcase": false, "constructor": false}, {"identifier": "findStudyActivity", "parameters": "(final String activityName)", "modifiers": "public", "return": "StudyActivity", "signature": "StudyActivity findStudyActivity(final String activityName)", "full_signature": "public StudyActivity findStudyActivity(final String activityName)", "class_method_signature": "Study.findStudyActivity(final String activityName)", "testcase": false, "constructor": false}, {"identifier": "createAndAddArm", "parameters": "(final String name, final Integer size, final Drug drug, final AbstractDose dose)", "modifiers": "public", "return": "Arm", "signature": "Arm createAndAddArm(final String name, final Integer size, final Drug drug, final AbstractDose dose)", "full_signature": "public Arm createAndAddArm(final String name, final Integer size, final Drug drug, final AbstractDose dose)", "class_method_signature": "Study.createAndAddArm(final String name, final Integer size, final Drug drug, final AbstractDose dose)", "testcase": false, "constructor": false}, {"identifier": "getMeasuredTreatmentDefinitions", "parameters": "(final Variable v, final WhenTaken wt)", "modifiers": "public", "return": "Set<TreatmentDefinition>", "signature": "Set<TreatmentDefinition> getMeasuredTreatmentDefinitions(final Variable v, final WhenTaken wt)", "full_signature": "public Set<TreatmentDefinition> getMeasuredTreatmentDefinitions(final Variable v, final WhenTaken wt)", "class_method_signature": "Study.getMeasuredTreatmentDefinitions(final Variable v, final WhenTaken wt)", "testcase": false, "constructor": false}, {"identifier": "getMeasuredTreatmentDefinitions", "parameters": "(final Variable v)", "modifiers": "public", "return": "Set<TreatmentDefinition>", "signature": "Set<TreatmentDefinition> getMeasuredTreatmentDefinitions(final Variable v)", "full_signature": "public Set<TreatmentDefinition> getMeasuredTreatmentDefinitions(final Variable v)", "class_method_signature": "Study.getMeasuredTreatmentDefinitions(final Variable v)", "testcase": false, "constructor": false}, {"identifier": "getMeasuredArms", "parameters": "(final Variable v, final TreatmentDefinition d)", "modifiers": "public", "return": "ObservableList<Arm>", "signature": "ObservableList<Arm> getMeasuredArms(final Variable v, final TreatmentDefinition d)", "full_signature": "public ObservableList<Arm> getMeasuredArms(final Variable v, final TreatmentDefinition d)", "class_method_signature": "Study.getMeasuredArms(final Variable v, final TreatmentDefinition d)", "testcase": false, "constructor": false}, {"identifier": "getMeasuredArms", "parameters": "(final Variable v, final TreatmentDefinition d, final WhenTaken wt)", "modifiers": "public", "return": "ObservableList<Arm>", "signature": "ObservableList<Arm> getMeasuredArms(final Variable v, final TreatmentDefinition d, final WhenTaken wt)", "full_signature": "public ObservableList<Arm> getMeasuredArms(final Variable v, final TreatmentDefinition d, final WhenTaken wt)", "class_method_signature": "Study.getMeasuredArms(final Variable v, final TreatmentDefinition d, final WhenTaken wt)", "testcase": false, "constructor": false}, {"identifier": "isMeasured", "parameters": "(final Variable v, final TreatmentDefinition d, final WhenTaken wt)", "modifiers": "private", "return": "boolean", "signature": "boolean isMeasured(final Variable v, final TreatmentDefinition d, final WhenTaken wt)", "full_signature": "private boolean isMeasured(final Variable v, final TreatmentDefinition d, final WhenTaken wt)", "class_method_signature": "Study.isMeasured(final Variable v, final TreatmentDefinition d, final WhenTaken wt)", "testcase": false, "constructor": false}, {"identifier": "isMeasured", "parameters": "(final Variable v, final Arm a, final WhenTaken wt)", "modifiers": "public", "return": "boolean", "signature": "boolean isMeasured(final Variable v, final Arm a, final WhenTaken wt)", "full_signature": "public boolean isMeasured(final Variable v, final Arm a, final WhenTaken wt)", "class_method_signature": "Study.isMeasured(final Variable v, final Arm a, final WhenTaken wt)", "testcase": false, "constructor": false}, {"identifier": "isMeasured", "parameters": "(final Variable v, final Arm a)", "modifiers": "public", "return": "boolean", "signature": "boolean isMeasured(final Variable v, final Arm a)", "full_signature": "public boolean isMeasured(final Variable v, final Arm a)", "class_method_signature": "Study.isMeasured(final Variable v, final Arm a)", "testcase": false, "constructor": false}, {"identifier": "getArms", "parameters": "(final TreatmentDefinition d)", "modifiers": "private", "return": "ObservableList<Arm>", "signature": "ObservableList<Arm> getArms(final TreatmentDefinition d)", "full_signature": "private ObservableList<Arm> getArms(final TreatmentDefinition d)", "class_method_signature": "Study.getArms(final TreatmentDefinition d)", "testcase": false, "constructor": false}, {"identifier": "getEndpoints", "parameters": "()", "modifiers": "public", "return": "ObservableList<StudyOutcomeMeasure<Endpoint>>", "signature": "ObservableList<StudyOutcomeMeasure<Endpoint>> getEndpoints()", "full_signature": "public ObservableList<StudyOutcomeMeasure<Endpoint>> getEndpoints()", "class_method_signature": "Study.getEndpoints()", "testcase": false, "constructor": false}, {"identifier": "getAdverseEvents", "parameters": "()", "modifiers": "public", "return": "ObservableList<StudyOutcomeMeasure<AdverseEvent>>", "signature": "ObservableList<StudyOutcomeMeasure<AdverseEvent>> getAdverseEvents()", "full_signature": "public ObservableList<StudyOutcomeMeasure<AdverseEvent>> getAdverseEvents()", "class_method_signature": "Study.getAdverseEvents()", "testcase": false, "constructor": false}, {"identifier": "getPopulationChars", "parameters": "()", "modifiers": "public", "return": "ObservableList<StudyOutcomeMeasure<PopulationCharacteristic>>", "signature": "ObservableList<StudyOutcomeMeasure<PopulationCharacteristic>> getPopulationChars()", "full_signature": "public ObservableList<StudyOutcomeMeasure<PopulationCharacteristic>> getPopulationChars()", "class_method_signature": "Study.getPopulationChars()", "testcase": false, "constructor": false}, {"identifier": "wrapVariables", "parameters": "(final List<T> vars)", "modifiers": "public static", "return": "List<StudyOutcomeMeasure<T>>", "signature": "List<StudyOutcomeMeasure<T>> wrapVariables(final List<T> vars)", "full_signature": "public static List<StudyOutcomeMeasure<T>> wrapVariables(final List<T> vars)", "class_method_signature": "Study.wrapVariables(final List<T> vars)", "testcase": false, "constructor": false}, {"identifier": "getNotes", "parameters": "()", "modifiers": "@Override public", "return": "ObservableList<Note>", "signature": "ObservableList<Note> getNotes()", "full_signature": "@Override public ObservableList<Note> getNotes()", "class_method_signature": "Study.getNotes()", "testcase": false, "constructor": false}, {"identifier": "wrapVariable", "parameters": "(final T om)", "modifiers": "public static", "return": "StudyOutcomeMeasure<T>", "signature": "StudyOutcomeMeasure<T> wrapVariable(final T om)", "full_signature": "public static StudyOutcomeMeasure<T> wrapVariable(final T om)", "class_method_signature": "Study.wrapVariable(final T om)", "testcase": false, "constructor": false}, {"identifier": "findStudyOutcomeMeasure", "parameters": "(final T v)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "StudyOutcomeMeasure<T>", "signature": "StudyOutcomeMeasure<T> findStudyOutcomeMeasure(final T v)", "full_signature": "@SuppressWarnings(\"unchecked\") public StudyOutcomeMeasure<T> findStudyOutcomeMeasure(final T v)", "class_method_signature": "Study.findStudyOutcomeMeasure(final T v)", "testcase": false, "constructor": false}, {"identifier": "findMatchingArm", "parameters": "(TreatmentDefinition def)", "modifiers": "public", "return": "Arm", "signature": "Arm findMatchingArm(TreatmentDefinition def)", "full_signature": "public Arm findMatchingArm(TreatmentDefinition def)", "class_method_signature": "Study.findMatchingArm(TreatmentDefinition def)", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/entities/Study.java"}, "focal_method": {"identifier": "deepEquals", "parameters": "(final Entity obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean deepEquals(final Entity obj) {\n\t\tif (!equals(obj)) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Study other = (Study) obj;\n\t\treturn EntityUtil.deepEqual(other.getIndication(), getIndication())\n\t\t&& EntityUtil.deepEqual(other.getCharacteristics(), getCharacteristics())\n\t\t&& EntityUtil.deepEqual(Study.extractVariables(other.getEndpoints()), extractVariables(getEndpoints()))\n\t\t&& EntityUtil.deepEqual(Study.extractVariables(other.getAdverseEvents()), extractVariables(getAdverseEvents()))\n\t\t&& EntityUtil.deepEqual(Study.extractVariables(other.getPopulationChars()), extractVariables(getPopulationChars()))\n\t\t&& EntityUtil.deepEqual(other.getArms(), getArms())\n\t\t&& EntityUtil.deepEqual(other.getEpochs(), getEpochs())\n\t\t&& EntityUtil.deepEqual(other.getStudyActivities(), getStudyActivities())\n\t\t&& EntityUtil.deepEqual(other.getMeasurements(), getMeasurements())\n\t\t&& EqualsUtil.equal(other.getNotes(), getNotes());\n\t}", "signature": "boolean deepEquals(final Entity obj)", "full_signature": "@Override public boolean deepEquals(final Entity obj)", "class_method_signature": "Study.deepEquals(final Entity obj)", "testcase": false, "constructor": false, "invocations": ["equals", "deepEqual", "getIndication", "getIndication", "deepEqual", "getCharacteristics", "getCharacteristics", "deepEqual", "extractVariables", "getEndpoints", "extractVariables", "getEndpoints", "deepEqual", "extractVariables", "getAdverseEvents", "extractVariables", "getAdverseEvents", "deepEqual", "extractVariables", "getPopulationChars", "extractVariables", "getPopulationChars", "deepEqual", "getArms", "getArms", "deepEqual", "getEpochs", "getEpochs", "deepEqual", "getStudyActivities", "getStudyActivities", "deepEqual", "getMeasurements", "getMeasurements", "equal", "getNotes", "getNotes"]}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}