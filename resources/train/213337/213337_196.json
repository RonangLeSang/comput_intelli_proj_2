{"test_class": {"identifier": "BRATTableModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BRATTableModel<TreatmentDefinition, MetaBenefitRiskAnalysis> d_btmMeta;", "modifier": "private", "type": "BRATTableModel<TreatmentDefinition, MetaBenefitRiskAnalysis>", "declarator": "d_btmMeta", "var_name": "d_btmMeta"}, {"original_string": "private BRATTableModel<Arm, StudyBenefitRiskAnalysis> d_btmMockStudy;", "modifier": "private", "type": "BRATTableModel<Arm, StudyBenefitRiskAnalysis>", "declarator": "d_btmMockStudy", "var_name": "d_btmMockStudy"}, {"original_string": "private BRATTableModel<Arm, StudyBenefitRiskAnalysis> d_btmStudy;", "modifier": "private", "type": "BRATTableModel<Arm, StudyBenefitRiskAnalysis>", "declarator": "d_btmStudy", "var_name": "d_btmStudy"}, {"original_string": "private StudyBenefitRiskAnalysis d_sba;", "modifier": "private", "type": "StudyBenefitRiskAnalysis", "declarator": "d_sba", "var_name": "d_sba"}, {"original_string": "private Arm d_baseline;", "modifier": "private", "type": "Arm", "declarator": "d_baseline", "var_name": "d_baseline"}, {"original_string": "private Arm d_subject;", "modifier": "private", "type": "Arm", "declarator": "d_subject", "var_name": "d_subject"}, {"original_string": "private MetaBenefitRiskAnalysis d_mba;", "modifier": "private", "type": "MetaBenefitRiskAnalysis", "declarator": "d_mba", "var_name": "d_mba"}], "file": "application/src/test/java/org/drugis/addis/presentation/BRATTableModelTest.java"}, "test_case": {"identifier": "testColumnClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testColumnClasses() {\n\t\tassertEquals(String.class, d_btmMeta.getColumnClass(COLUMN_BR));\n\t\tassertEquals(Variable.class, d_btmMeta.getColumnClass(COLUMN_CRITERIA));\n\t\tassertEquals(VariableType.class, d_btmMeta.getColumnClass(COLUMN_OUTCOME_TYPE));\n\t\tassertEquals(Distribution.class, d_btmMeta.getColumnClass(COLUMN_BASELINE));\n\t\tassertEquals(Distribution.class, d_btmMeta.getColumnClass(COLUMN_SUBJECT));\n\t\tassertEquals(Distribution.class, d_btmStudy.getColumnClass(COLUMN_BASELINE));\n\t\tassertEquals(Distribution.class, d_btmStudy.getColumnClass(COLUMN_SUBJECT));\n\t\tassertEquals(BRATDifference.class, d_btmMeta.getColumnClass(COLUMN_DIFFERENCE));\n//\t\tassertEquals(Object.class, d_btmMockMeta.getColumnClass(COLUMN_FOREST)); should be a foresty thingy\n\t}", "signature": "void testColumnClasses()", "full_signature": "@Test public void testColumnClasses()", "class_method_signature": "BRATTableModelTest.testColumnClasses()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getColumnClass", "assertEquals", "getColumnClass", "assertEquals", "getColumnClass", "assertEquals", "getColumnClass", "assertEquals", "getColumnClass", "assertEquals", "getColumnClass", "assertEquals", "getColumnClass", "assertEquals", "getColumnClass"]}, "focal_class": {"identifier": "BRATTableModel", "superclass": "extends AbstractTableModel", "interfaces": "", "fields": [{"original_string": "public static final int COLUMN_BR = 0;", "modifier": "public static final", "type": "int", "declarator": "COLUMN_BR = 0", "var_name": "COLUMN_BR"}, {"original_string": "public static final int COLUMN_CRITERIA = 1;", "modifier": "public static final", "type": "int", "declarator": "COLUMN_CRITERIA = 1", "var_name": "COLUMN_CRITERIA"}, {"original_string": "public static final int COLUMN_OUTCOME_TYPE = 2;", "modifier": "public static final", "type": "int", "declarator": "COLUMN_OUTCOME_TYPE = 2", "var_name": "COLUMN_OUTCOME_TYPE"}, {"original_string": "public static final int COLUMN_BASELINE = 3;", "modifier": "public static final", "type": "int", "declarator": "COLUMN_BASELINE = 3", "var_name": "COLUMN_BASELINE"}, {"original_string": "public static final int COLUMN_SUBJECT = 4;", "modifier": "public static final", "type": "int", "declarator": "COLUMN_SUBJECT = 4", "var_name": "COLUMN_SUBJECT"}, {"original_string": "public static final int COLUMN_DIFFERENCE = 5;", "modifier": "public static final", "type": "int", "declarator": "COLUMN_DIFFERENCE = 5", "var_name": "COLUMN_DIFFERENCE"}, {"original_string": "public static final int COLUMN_FOREST = 6;", "modifier": "public static final", "type": "int", "declarator": "COLUMN_FOREST = 6", "var_name": "COLUMN_FOREST"}, {"original_string": "public static final int OFFSET_LOGAXIS = 0;", "modifier": "public static final", "type": "int", "declarator": "OFFSET_LOGAXIS = 0", "var_name": "OFFSET_LOGAXIS"}, {"original_string": "public static final int OFFSET_LINAXIS = 1;", "modifier": "public static final", "type": "int", "declarator": "OFFSET_LINAXIS = 1", "var_name": "OFFSET_LINAXIS"}, {"original_string": "private static final long serialVersionUID = 4201230853343429062L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4201230853343429062L", "var_name": "serialVersionUID"}, {"original_string": "private final AnalysisType d_analysis;", "modifier": "private final", "type": "AnalysisType", "declarator": "d_analysis", "var_name": "d_analysis"}, {"original_string": "private final Alternative d_subject;", "modifier": "private final", "type": "Alternative", "declarator": "d_subject", "var_name": "d_subject"}, {"original_string": "private LinearScale d_linScale;", "modifier": "private", "type": "LinearScale", "declarator": "d_linScale", "var_name": "d_linScale"}, {"original_string": "private LogScale d_logScale;", "modifier": "private", "type": "LogScale", "declarator": "d_logScale", "var_name": "d_logScale"}, {"original_string": "private LinearScale d_linScaleFull;", "modifier": "private", "type": "LinearScale", "declarator": "d_linScaleFull", "var_name": "d_linScaleFull"}, {"original_string": "private LogScale d_logScaleFull;", "modifier": "private", "type": "LogScale", "declarator": "d_logScaleFull", "var_name": "d_logScaleFull"}], "methods": [{"identifier": "BRATTableModel", "parameters": "(AnalysisType bean, Alternative subject)", "modifiers": "public", "return": "", "signature": " BRATTableModel(AnalysisType bean, Alternative subject)", "full_signature": "public  BRATTableModel(AnalysisType bean, Alternative subject)", "class_method_signature": "BRATTableModel.BRATTableModel(AnalysisType bean, Alternative subject)", "testcase": false, "constructor": true}, {"identifier": "calculateScales", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calculateScales()", "full_signature": "private void calculateScales()", "class_method_signature": "BRATTableModel.calculateScales()", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getColumnCount()", "full_signature": "@Override public int getColumnCount()", "class_method_signature": "BRATTableModel.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRowCount()", "full_signature": "@Override public int getRowCount()", "class_method_signature": "BRATTableModel.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "getValueAt", "parameters": "(int rowIndex, int columnIndex)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValueAt(int rowIndex, int columnIndex)", "full_signature": "@Override public Object getValueAt(int rowIndex, int columnIndex)", "class_method_signature": "BRATTableModel.getValueAt(int rowIndex, int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getBinnedScale", "parameters": "(Scale scale)", "modifiers": "private", "return": "BinnedScale", "signature": "BinnedScale getBinnedScale(Scale scale)", "full_signature": "private BinnedScale getBinnedScale(Scale scale)", "class_method_signature": "BRATTableModel.getBinnedScale(Scale scale)", "testcase": false, "constructor": false}, {"identifier": "getVariableType", "parameters": "(int rowIndex)", "modifiers": "private", "return": "VariableType", "signature": "VariableType getVariableType(int rowIndex)", "full_signature": "private VariableType getVariableType(int rowIndex)", "class_method_signature": "BRATTableModel.getVariableType(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "getCI", "parameters": "(Distribution difference)", "modifiers": "private", "return": "ConfidenceInterval", "signature": "ConfidenceInterval getCI(Distribution difference)", "full_signature": "private ConfidenceInterval getCI(Distribution difference)", "class_method_signature": "BRATTableModel.getCI(Distribution difference)", "testcase": false, "constructor": false}, {"identifier": "getDifference", "parameters": "(int rowIndex)", "modifiers": "private", "return": "BRATDifference", "signature": "BRATDifference getDifference(int rowIndex)", "full_signature": "private BRATDifference getDifference(int rowIndex)", "class_method_signature": "BRATTableModel.getDifference(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "getDifference", "parameters": "(OutcomeMeasure om)", "modifiers": "private", "return": "Distribution", "signature": "Distribution getDifference(OutcomeMeasure om)", "full_signature": "private Distribution getDifference(OutcomeMeasure om)", "class_method_signature": "BRATTableModel.getDifference(OutcomeMeasure om)", "testcase": false, "constructor": false}, {"identifier": "getMeasurement", "parameters": "(int rowIndex, Alternative a)", "modifiers": "private", "return": "Object", "signature": "Object getMeasurement(int rowIndex, Alternative a)", "full_signature": "private Object getMeasurement(int rowIndex, Alternative a)", "class_method_signature": "BRATTableModel.getMeasurement(int rowIndex, Alternative a)", "testcase": false, "constructor": false}, {"identifier": "getColumnName", "parameters": "(int column)", "modifiers": "@Override public", "return": "String", "signature": "String getColumnName(int column)", "full_signature": "@Override public String getColumnName(int column)", "class_method_signature": "BRATTableModel.getColumnName(int column)", "testcase": false, "constructor": false}, {"identifier": "getColumnClass", "parameters": "(int columnIndex)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getColumnClass(int columnIndex)", "full_signature": "@Override public Class<?> getColumnClass(int columnIndex)", "class_method_signature": "BRATTableModel.getColumnClass(int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getAlternativeDescription", "parameters": "(Alternative alternative)", "modifiers": "private", "return": "String", "signature": "String getAlternativeDescription(Alternative alternative)", "full_signature": "private String getAlternativeDescription(Alternative alternative)", "class_method_signature": "BRATTableModel.getAlternativeDescription(Alternative alternative)", "testcase": false, "constructor": false}, {"identifier": "getScale", "parameters": "(int rowIndex)", "modifiers": "private", "return": "Scale", "signature": "Scale getScale(int rowIndex)", "full_signature": "private Scale getScale(int rowIndex)", "class_method_signature": "BRATTableModel.getScale(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "getNiceLinearScale", "parameters": "()", "modifiers": "", "return": "LinearScale", "signature": "LinearScale getNiceLinearScale()", "full_signature": " LinearScale getNiceLinearScale()", "class_method_signature": "BRATTableModel.getNiceLinearScale()", "testcase": false, "constructor": false}, {"identifier": "getNiceLogScale", "parameters": "()", "modifiers": "", "return": "LogScale", "signature": "LogScale getNiceLogScale()", "full_signature": " LogScale getNiceLogScale()", "class_method_signature": "BRATTableModel.getNiceLogScale()", "testcase": false, "constructor": false}, {"identifier": "getFullLinearScale", "parameters": "()", "modifiers": "", "return": "LinearScale", "signature": "LinearScale getFullLinearScale()", "full_signature": " LinearScale getFullLinearScale()", "class_method_signature": "BRATTableModel.getFullLinearScale()", "testcase": false, "constructor": false}, {"identifier": "getFullLogScale", "parameters": "()", "modifiers": "", "return": "LogScale", "signature": "LogScale getFullLogScale()", "full_signature": " LogScale getFullLogScale()", "class_method_signature": "BRATTableModel.getFullLogScale()", "testcase": false, "constructor": false}, {"identifier": "getBaseline", "parameters": "()", "modifiers": "public", "return": "Alternative", "signature": "Alternative getBaseline()", "full_signature": "public Alternative getBaseline()", "class_method_signature": "BRATTableModel.getBaseline()", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "()", "modifiers": "public", "return": "Alternative", "signature": "Alternative getSubject()", "full_signature": "public Alternative getSubject()", "class_method_signature": "BRATTableModel.getSubject()", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/presentation/BRATTableModel.java"}, "focal_method": {"identifier": "getColumnClass", "parameters": "(int columnIndex)", "modifiers": "@Override public", "return": "Class<?>", "body": "@Override\n\tpublic Class<?> getColumnClass(int columnIndex) {\n\t\tswitch(columnIndex) {\n\t\t\tcase COLUMN_BR:\t\n\t\t\t\treturn String.class;\n\t\t\tcase COLUMN_CRITERIA:\n\t\t\t\treturn Variable.class;\n\t\t\tcase COLUMN_OUTCOME_TYPE:\n\t\t\t\treturn VariableType.class;\n\t\t\tcase COLUMN_BASELINE:\n\t\t\tcase COLUMN_SUBJECT:\n\t\t\t\treturn Distribution.class;\n\t\t\tcase COLUMN_DIFFERENCE:\n\t\t\t\treturn BRATDifference.class;\n\t\t\tcase COLUMN_FOREST:\n\t\t\t\treturn BRATForest.class;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}", "signature": "Class<?> getColumnClass(int columnIndex)", "full_signature": "@Override public Class<?> getColumnClass(int columnIndex)", "class_method_signature": "BRATTableModel.getColumnClass(int columnIndex)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}