{"test_class": {"identifier": "FrequencyMeasurementPresentationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PopulationCharacteristic d_variable;", "modifier": "private", "type": "PopulationCharacteristic", "declarator": "d_variable", "var_name": "d_variable"}, {"original_string": "private FrequencyMeasurement d_measurement;", "modifier": "private", "type": "FrequencyMeasurement", "declarator": "d_measurement", "var_name": "d_measurement"}, {"original_string": "private FrequencyMeasurementPresentation d_pm;", "modifier": "private", "type": "FrequencyMeasurementPresentation", "declarator": "d_pm", "var_name": "d_pm"}], "file": "application/src/test/java/org/drugis/addis/presentation/FrequencyMeasurementPresentationTest.java"}, "test_case": {"identifier": "testFireLabelFemaleChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFireLabelFemaleChanged() {\n\t\tAbstractValueModel lm = d_pm.getLabelModel();\n\t\tPropertyChangeListener mock = createMock(PropertyChangeListener.class);\n\t\tPropertyChangeEvent event = new PropertyChangeEvent(\n\t\t\t\tlm, \"value\", null, \"Male = N/A / Female = 100\");\n\t\tmock.propertyChange(JUnitUtil.eqPropertyChangeEvent(event));\n\t\texpectLastCall().anyTimes();\n\t\treplay(mock);\n\t\tPropertyChangeListener l = mock;\n\t\tlm.addPropertyChangeListener(l);\n\t\td_measurement.setFrequency(\"Female\", 100);\n\t\tverify(l);\n\t}", "signature": "void testFireLabelFemaleChanged()", "full_signature": "@Test public void testFireLabelFemaleChanged()", "class_method_signature": "FrequencyMeasurementPresentationTest.testFireLabelFemaleChanged()", "testcase": true, "constructor": false, "invocations": ["getLabelModel", "createMock", "propertyChange", "eqPropertyChangeEvent", "anyTimes", "expectLastCall", "replay", "addPropertyChangeListener", "setFrequency", "verify"]}, "focal_class": {"identifier": "FrequencyMeasurementPresentation", "superclass": "extends PresentationModel<FrequencyMeasurement>", "interfaces": "implements LabeledPresentation", "fields": [], "methods": [{"identifier": "FrequencyMeasurementPresentation", "parameters": "(FrequencyMeasurement bean)", "modifiers": "public", "return": "", "signature": " FrequencyMeasurementPresentation(FrequencyMeasurement bean)", "full_signature": "public  FrequencyMeasurementPresentation(FrequencyMeasurement bean)", "class_method_signature": "FrequencyMeasurementPresentation.FrequencyMeasurementPresentation(FrequencyMeasurement bean)", "testcase": false, "constructor": true}, {"identifier": "getFrequencyModel", "parameters": "(String category)", "modifiers": "public", "return": "AbstractValueModel", "signature": "AbstractValueModel getFrequencyModel(String category)", "full_signature": "public AbstractValueModel getFrequencyModel(String category)", "class_method_signature": "FrequencyMeasurementPresentation.getFrequencyModel(String category)", "testcase": false, "constructor": false}, {"identifier": "getLabelModel", "parameters": "()", "modifiers": "public", "return": "AbstractValueModel", "signature": "AbstractValueModel getLabelModel()", "full_signature": "public AbstractValueModel getLabelModel()", "class_method_signature": "FrequencyMeasurementPresentation.getLabelModel()", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/presentation/FrequencyMeasurementPresentation.java"}, "focal_method": {"identifier": "getLabelModel", "parameters": "()", "modifiers": "public", "return": "AbstractValueModel", "body": "public AbstractValueModel getLabelModel() {\n\t\treturn new DefaultLabelModel(getBean());\n\t}", "signature": "AbstractValueModel getLabelModel()", "full_signature": "public AbstractValueModel getLabelModel()", "class_method_signature": "FrequencyMeasurementPresentation.getLabelModel()", "testcase": false, "constructor": false, "invocations": ["getBean"]}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}