{"test_class": {"identifier": "CorrectedBasicRiskDifferenceTest", "superclass": "extends RelativeEffectTestBase", "interfaces": "", "fields": [{"original_string": "private BasicRiskDifference d_riskDifference;", "modifier": "private", "type": "BasicRiskDifference", "declarator": "d_riskDifference", "var_name": "d_riskDifference"}, {"original_string": "private Study d_study;", "modifier": "private", "type": "Study", "declarator": "d_study", "var_name": "d_study"}], "file": "application/src/test/java/org/drugis/addis/entities/relativeeffect/CorrectedBasicRiskDifferenceTest.java"}, "test_case": {"identifier": "testFullBaselineRateShouldBeDefined", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFullBaselineRateShouldBeDefined() {\n\t\tRateMeasurement base = new BasicRateMeasurement(100, 100);\n\t\tRateMeasurement subj = new BasicRateMeasurement(50, 100);\n\t\tCorrectedBasicRiskDifference or = new CorrectedBasicRiskDifference(base, subj);\n\t\tassertTrue(or.isDefined());\n\t}", "signature": "void testFullBaselineRateShouldBeDefined()", "full_signature": "@Test public void testFullBaselineRateShouldBeDefined()", "class_method_signature": "CorrectedBasicRiskDifferenceTest.testFullBaselineRateShouldBeDefined()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isDefined"]}, "focal_class": {"identifier": "CorrectedBasicRiskDifference", "superclass": "extends BasicRiskDifference", "interfaces": "implements\n\t\tRelativeEffect<RateMeasurement>", "fields": [], "methods": [{"identifier": "CorrectedBasicRiskDifference", "parameters": "(RateMeasurement baseline,\n\t\t\tRateMeasurement subject)", "modifiers": "public", "return": "", "signature": " CorrectedBasicRiskDifference(RateMeasurement baseline,\n\t\t\tRateMeasurement subject)", "full_signature": "public  CorrectedBasicRiskDifference(RateMeasurement baseline,\n\t\t\tRateMeasurement subject)", "class_method_signature": "CorrectedBasicRiskDifference.CorrectedBasicRiskDifference(RateMeasurement baseline,\n\t\t\tRateMeasurement subject)", "testcase": false, "constructor": true}, {"identifier": "CorrectedBasicRiskDifference", "parameters": "(BasicRiskDifference basicRiskDifference)", "modifiers": "public", "return": "", "signature": " CorrectedBasicRiskDifference(BasicRiskDifference basicRiskDifference)", "full_signature": "public  CorrectedBasicRiskDifference(BasicRiskDifference basicRiskDifference)", "class_method_signature": "CorrectedBasicRiskDifference.CorrectedBasicRiskDifference(BasicRiskDifference basicRiskDifference)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CorrectedBasicRiskDifference.getName()", "testcase": false, "constructor": false}, {"identifier": "isDefined", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDefined()", "full_signature": "@Override public boolean isDefined()", "class_method_signature": "CorrectedBasicRiskDifference.isDefined()", "testcase": false, "constructor": false}, {"identifier": "getA", "parameters": "()", "modifiers": "@Override protected", "return": "double", "signature": "double getA()", "full_signature": "@Override protected double getA()", "class_method_signature": "CorrectedBasicRiskDifference.getA()", "testcase": false, "constructor": false}, {"identifier": "getB", "parameters": "()", "modifiers": "@Override protected", "return": "double", "signature": "double getB()", "full_signature": "@Override protected double getB()", "class_method_signature": "CorrectedBasicRiskDifference.getB()", "testcase": false, "constructor": false}, {"identifier": "getC", "parameters": "()", "modifiers": "@Override protected", "return": "double", "signature": "double getC()", "full_signature": "@Override protected double getC()", "class_method_signature": "CorrectedBasicRiskDifference.getC()", "testcase": false, "constructor": false}, {"identifier": "getD", "parameters": "()", "modifiers": "@Override protected", "return": "double", "signature": "double getD()", "full_signature": "@Override protected double getD()", "class_method_signature": "CorrectedBasicRiskDifference.getD()", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/entities/relativeeffect/CorrectedBasicRiskDifference.java"}, "focal_method": {"identifier": "isDefined", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean isDefined() {\n\t\treturn super.isDefined() &&\n\t\t\t(getA() != 0.5 || getC() != 0.5) && \n\t\t\t(getB() != 0.5 || getD() != 0.5);\n\t}", "signature": "boolean isDefined()", "full_signature": "@Override public boolean isDefined()", "class_method_signature": "CorrectedBasicRiskDifference.isDefined()", "testcase": false, "constructor": false, "invocations": ["isDefined", "getA", "getC", "getB", "getD"]}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}