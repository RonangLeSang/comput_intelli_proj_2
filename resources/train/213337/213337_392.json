{"test_class": {"identifier": "BasicStandardisedMeanDifferenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double s_subjMean = 103;", "modifier": "private static final", "type": "double", "declarator": "s_subjMean = 103", "var_name": "s_subjMean"}, {"original_string": "private static final double s_baselMean = 100;", "modifier": "private static final", "type": "double", "declarator": "s_baselMean = 100", "var_name": "s_baselMean"}, {"original_string": "private static final double s_subjStdDev = 5.5;", "modifier": "private static final", "type": "double", "declarator": "s_subjStdDev = 5.5", "var_name": "s_subjStdDev"}, {"original_string": "private static final double s_baslStdDev = 4.5;", "modifier": "private static final", "type": "double", "declarator": "s_baslStdDev = 4.5", "var_name": "s_baslStdDev"}, {"original_string": "private static final int s_subjSize = 50;", "modifier": "private static final", "type": "int", "declarator": "s_subjSize = 50", "var_name": "s_subjSize"}, {"original_string": "private static final int s_baslSize = 50;", "modifier": "private static final", "type": "int", "declarator": "s_baslSize = 50", "var_name": "s_baslSize"}, {"original_string": "int d_sampleSize = s_subjSize + s_baslSize;", "modifier": "", "type": "int", "declarator": "d_sampleSize = s_subjSize + s_baslSize", "var_name": "d_sampleSize"}, {"original_string": "private BasicStandardisedMeanDifference d_smd;", "modifier": "private", "type": "BasicStandardisedMeanDifference", "declarator": "d_smd", "var_name": "d_smd"}, {"original_string": "private BasicContinuousMeasurement d_subject;", "modifier": "private", "type": "BasicContinuousMeasurement", "declarator": "d_subject", "var_name": "d_subject"}, {"original_string": "private BasicContinuousMeasurement d_baseline;", "modifier": "private", "type": "BasicContinuousMeasurement", "declarator": "d_baseline", "var_name": "d_baseline"}], "file": "application/src/test/java/org/drugis/addis/entities/relativeeffect/BasicStandardisedMeanDifferenceTest.java"}, "test_case": {"identifier": "testGetCohenVariance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetCohenVariance() {\n\t\tdouble expected = (double) d_sampleSize/((double) s_subjSize * (double) s_baslSize) \n\t\t\t\t\t\t\t+ square(d_smd.getCohenD()) / (2 * (double) d_sampleSize);\n\t\tassertEquals(expected, d_smd.getCohenVariance(), 0.0001);\n\t}", "signature": "void testGetCohenVariance()", "full_signature": "@Test public void testGetCohenVariance()", "class_method_signature": "BasicStandardisedMeanDifferenceTest.testGetCohenVariance()", "testcase": true, "constructor": false, "invocations": ["square", "getCohenD", "assertEquals", "getCohenVariance"]}, "focal_class": {"identifier": "BasicStandardisedMeanDifference", "superclass": "extends AbstractBasicRelativeEffect<ContinuousMeasurement>", "interfaces": "", "fields": [], "methods": [{"identifier": "BasicStandardisedMeanDifference", "parameters": "(ContinuousMeasurement baseline,\n\t\t\tContinuousMeasurement subject)", "modifiers": "public", "return": "", "signature": " BasicStandardisedMeanDifference(ContinuousMeasurement baseline,\n\t\t\tContinuousMeasurement subject)", "full_signature": "public  BasicStandardisedMeanDifference(ContinuousMeasurement baseline,\n\t\t\tContinuousMeasurement subject)", "class_method_signature": "BasicStandardisedMeanDifference.BasicStandardisedMeanDifference(ContinuousMeasurement baseline,\n\t\t\tContinuousMeasurement subject)", "testcase": false, "constructor": true}, {"identifier": "getMu", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double getMu()", "full_signature": "private double getMu()", "class_method_signature": "BasicStandardisedMeanDifference.getMu()", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getError()", "full_signature": "@Override public Double getError()", "class_method_signature": "BasicStandardisedMeanDifference.getError()", "testcase": false, "constructor": false}, {"identifier": "square", "parameters": "(double x)", "modifiers": "private", "return": "double", "signature": "double square(double x)", "full_signature": "private double square(double x)", "class_method_signature": "BasicStandardisedMeanDifference.square(double x)", "testcase": false, "constructor": false}, {"identifier": "getCohenD", "parameters": "()", "modifiers": "", "return": "double", "signature": "double getCohenD()", "full_signature": " double getCohenD()", "class_method_signature": "BasicStandardisedMeanDifference.getCohenD()", "testcase": false, "constructor": false}, {"identifier": "getCohenVariance", "parameters": "()", "modifiers": "", "return": "double", "signature": "double getCohenVariance()", "full_signature": " double getCohenVariance()", "class_method_signature": "BasicStandardisedMeanDifference.getCohenVariance()", "testcase": false, "constructor": false}, {"identifier": "getCorrectionJ", "parameters": "()", "modifiers": "", "return": "double", "signature": "double getCorrectionJ()", "full_signature": " double getCorrectionJ()", "class_method_signature": "BasicStandardisedMeanDifference.getCorrectionJ()", "testcase": false, "constructor": false}, {"identifier": "getPooledStdDev", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double getPooledStdDev()", "full_signature": "private double getPooledStdDev()", "class_method_signature": "BasicStandardisedMeanDifference.getPooledStdDev()", "testcase": false, "constructor": false}, {"identifier": "getDegreesOfFreedom", "parameters": "()", "modifiers": "@Override protected", "return": "Integer", "signature": "Integer getDegreesOfFreedom()", "full_signature": "@Override protected Integer getDegreesOfFreedom()", "class_method_signature": "BasicStandardisedMeanDifference.getDegreesOfFreedom()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "BasicStandardisedMeanDifference.getName()", "testcase": false, "constructor": false}, {"identifier": "getDistribution", "parameters": "()", "modifiers": "public", "return": "Distribution", "signature": "Distribution getDistribution()", "full_signature": "public Distribution getDistribution()", "class_method_signature": "BasicStandardisedMeanDifference.getDistribution()", "testcase": false, "constructor": false}, {"identifier": "getAxisType", "parameters": "()", "modifiers": "@Override public", "return": "AxisType", "signature": "AxisType getAxisType()", "full_signature": "@Override public AxisType getAxisType()", "class_method_signature": "BasicStandardisedMeanDifference.getAxisType()", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/entities/relativeeffect/BasicStandardisedMeanDifference.java"}, "focal_method": {"identifier": "getCohenVariance", "parameters": "()", "modifiers": "", "return": "double", "body": "double getCohenVariance() {\n\t\tdouble frac1 = (double) getSampleSize() / ((double) d_subject.getSampleSize() *\n\t\t\t\t(double) d_baseline.getSampleSize());\n\t\tdouble frac2 = square(getCohenD()) / (2D * (double) getSampleSize());\n\t\treturn (frac1 + frac2);\n\t}", "signature": "double getCohenVariance()", "full_signature": " double getCohenVariance()", "class_method_signature": "BasicStandardisedMeanDifference.getCohenVariance()", "testcase": false, "constructor": false, "invocations": ["getSampleSize", "getSampleSize", "getSampleSize", "square", "getCohenD", "getSampleSize"]}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}