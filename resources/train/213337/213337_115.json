{"test_class": {"identifier": "OptionsEnabledModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SelectableOptionsModel<String> d_select;", "modifier": "private", "type": "SelectableOptionsModel<String>", "declarator": "d_select", "var_name": "d_select"}, {"original_string": "private OptionsEnabledModel<String> d_enabled;", "modifier": "private", "type": "OptionsEnabledModel<String>", "declarator": "d_enabled", "var_name": "d_enabled"}], "file": "application/src/test/java/org/drugis/addis/presentation/wizard/OptionsEnabledModelTest.java"}, "test_case": {"identifier": "testUpdateOnSelection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUpdateOnSelection() {\n\t\td_enabled = new OptionsEnabledModel<String>(d_select, true) {\n\t\t\tpublic boolean optionShouldBeEnabled(String option) {\n\t\t\t\treturn d_select.getSelectedOptions().size() < 2 || d_select.getSelectedModel(option).getValue();\n\t\t\t}\n\t\t};\n\t\tValueHolder<Boolean> pick1Enabled = d_enabled.getEnabledModel(\"pick1\");\n\t\tValueHolder<Boolean> pick2Enabled = d_enabled.getEnabledModel(\"pick2\");\n\t\t\n\t\tPropertyChangeListener listener1 = EasyMock.createStrictMock(PropertyChangeListener.class);\n\t\tPropertyChangeListener listener2 = EasyMock.createStrictMock(PropertyChangeListener.class);\n\n\t\tlistener2.propertyChange(JUnitUtil.eqPropertyChangeEvent(new PropertyChangeEvent(pick2Enabled, \"value\", true, false)));\n\t\tEasyMock.replay(listener1, listener2);\n\t\t\n\t\tpick1Enabled.addValueChangeListener(listener1);\n\t\tpick2Enabled.addValueChangeListener(listener2);\n\t\t\n\t\td_select.getSelectedModel(\"pick1\").setValue(true);\n\t\td_select.getSelectedModel(\"icepick\").setValue(true);\n\t\tassertTrue(d_enabled.getEnabledModel(\"pick1\").getValue());\n\t\tassertFalse(d_enabled.getEnabledModel(\"pick2\").getValue());\n\t\tassertTrue(d_enabled.getEnabledModel(\"icepick\").getValue());\n\t\tassertNull(d_enabled.getEnabledModel(\"nonsense\"));\n\t\tEasyMock.verify(listener1, listener2);\n\t}", "signature": "void testUpdateOnSelection()", "full_signature": "@Test public void testUpdateOnSelection()", "class_method_signature": "OptionsEnabledModelTest.testUpdateOnSelection()", "testcase": true, "constructor": false, "invocations": ["size", "getSelectedOptions", "getValue", "getSelectedModel", "getEnabledModel", "getEnabledModel", "createStrictMock", "createStrictMock", "propertyChange", "eqPropertyChangeEvent", "replay", "addValueChangeListener", "addValueChangeListener", "setValue", "getSelectedModel", "setValue", "getSelectedModel", "assertTrue", "getValue", "getEnabledModel", "assertFalse", "getValue", "getEnabledModel", "assertTrue", "getValue", "getEnabledModel", "assertNull", "getEnabledModel", "verify"]}, "focal_class": {"identifier": "OptionsEnabledModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SelectableOptionsModel<E> d_selectModel;", "modifier": "private final", "type": "SelectableOptionsModel<E>", "declarator": "d_selectModel", "var_name": "d_selectModel"}, {"original_string": "private final ObservableList<Option<E>> d_options;", "modifier": "private final", "type": "ObservableList<Option<E>>", "declarator": "d_options", "var_name": "d_options"}, {"original_string": "private final List<Option<E>> d_enabled;", "modifier": "private final", "type": "List<Option<E>>", "declarator": "d_enabled", "var_name": "d_enabled"}], "methods": [{"identifier": "OptionsEnabledModel", "parameters": "(SelectableOptionsModel<E> selectModel, boolean listenToSelection)", "modifiers": "public", "return": "", "signature": " OptionsEnabledModel(SelectableOptionsModel<E> selectModel, boolean listenToSelection)", "full_signature": "public  OptionsEnabledModel(SelectableOptionsModel<E> selectModel, boolean listenToSelection)", "class_method_signature": "OptionsEnabledModel.OptionsEnabledModel(SelectableOptionsModel<E> selectModel, boolean listenToSelection)", "testcase": false, "constructor": true}, {"identifier": "intervalAdded", "parameters": "(int index0, int index1)", "modifiers": "private", "return": "void", "signature": "void intervalAdded(int index0, int index1)", "full_signature": "private void intervalAdded(int index0, int index1)", "class_method_signature": "OptionsEnabledModel.intervalAdded(int index0, int index1)", "testcase": false, "constructor": false}, {"identifier": "intervalRemoved", "parameters": "(int index0, int index1)", "modifiers": "private", "return": "void", "signature": "void intervalRemoved(int index0, int index1)", "full_signature": "private void intervalRemoved(int index0, int index1)", "class_method_signature": "OptionsEnabledModel.intervalRemoved(int index0, int index1)", "testcase": false, "constructor": false}, {"identifier": "optionShouldBeEnabled", "parameters": "(E option)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean optionShouldBeEnabled(E option)", "full_signature": "public abstract boolean optionShouldBeEnabled(E option)", "class_method_signature": "OptionsEnabledModel.optionShouldBeEnabled(E option)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void update()", "full_signature": "public void update()", "class_method_signature": "OptionsEnabledModel.update()", "testcase": false, "constructor": false}, {"identifier": "getEnabledModel", "parameters": "(E option)", "modifiers": "public", "return": "ValueHolder<Boolean>", "signature": "ValueHolder<Boolean> getEnabledModel(E option)", "full_signature": "public ValueHolder<Boolean> getEnabledModel(E option)", "class_method_signature": "OptionsEnabledModel.getEnabledModel(E option)", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/presentation/wizard/OptionsEnabledModel.java"}, "focal_method": {"identifier": "getEnabledModel", "parameters": "(E option)", "modifiers": "public", "return": "ValueHolder<Boolean>", "body": "public ValueHolder<Boolean> getEnabledModel(E option) {\n\t\tint idx = Collections.binarySearch(d_enabled, new Option<E>(option, false));\n\t\tif (idx >= 0) {\n\t\t\treturn d_enabled.get(idx).toggle;\n\t\t}\n\t\treturn null;\n\t}", "signature": "ValueHolder<Boolean> getEnabledModel(E option)", "full_signature": "public ValueHolder<Boolean> getEnabledModel(E option)", "class_method_signature": "OptionsEnabledModel.getEnabledModel(E option)", "testcase": false, "constructor": false, "invocations": ["binarySearch", "get"]}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}