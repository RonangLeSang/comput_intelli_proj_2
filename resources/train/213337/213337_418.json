{"test_class": {"identifier": "BasicContinuousMeasurementTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BasicContinuousMeasurement d_basicContinuousMeasurement;", "modifier": "private", "type": "BasicContinuousMeasurement", "declarator": "d_basicContinuousMeasurement", "var_name": "d_basicContinuousMeasurement"}], "file": "application/src/test/java/org/drugis/addis/entities/BasicContinuousMeasurementTest.java"}, "test_case": {"identifier": "testSetStdDev", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetStdDev() {\n\t\tJUnitUtil.testSetter(d_basicContinuousMeasurement, \n\t\t\t\tBasicContinuousMeasurement.PROPERTY_STDDEV, 0.1, 0.46);\n\t}", "signature": "void testSetStdDev()", "full_signature": "@Test public void testSetStdDev()", "class_method_signature": "BasicContinuousMeasurementTest.testSetStdDev()", "testcase": true, "constructor": false, "invocations": ["testSetter"]}, "focal_class": {"identifier": "BasicContinuousMeasurement", "superclass": "extends BasicMeasurement", "interfaces": "implements ContinuousMeasurement", "fields": [{"original_string": "private Double d_mean;", "modifier": "private", "type": "Double", "declarator": "d_mean", "var_name": "d_mean"}, {"original_string": "private Double d_stdDev;", "modifier": "private", "type": "Double", "declarator": "d_stdDev", "var_name": "d_stdDev"}], "methods": [{"identifier": "BasicContinuousMeasurement", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicContinuousMeasurement()", "full_signature": "public  BasicContinuousMeasurement()", "class_method_signature": "BasicContinuousMeasurement.BasicContinuousMeasurement()", "testcase": false, "constructor": true}, {"identifier": "BasicContinuousMeasurement", "parameters": "(Double mean, Double stdDev, Integer size)", "modifiers": "public", "return": "", "signature": " BasicContinuousMeasurement(Double mean, Double stdDev, Integer size)", "full_signature": "public  BasicContinuousMeasurement(Double mean, Double stdDev, Integer size)", "class_method_signature": "BasicContinuousMeasurement.BasicContinuousMeasurement(Double mean, Double stdDev, Integer size)", "testcase": false, "constructor": true}, {"identifier": "getMean", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getMean()", "full_signature": "public Double getMean()", "class_method_signature": "BasicContinuousMeasurement.getMean()", "testcase": false, "constructor": false}, {"identifier": "setMean", "parameters": "(Double mean)", "modifiers": "public", "return": "void", "signature": "void setMean(Double mean)", "full_signature": "public void setMean(Double mean)", "class_method_signature": "BasicContinuousMeasurement.setMean(Double mean)", "testcase": false, "constructor": false}, {"identifier": "getStdDev", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getStdDev()", "full_signature": "public Double getStdDev()", "class_method_signature": "BasicContinuousMeasurement.getStdDev()", "testcase": false, "constructor": false}, {"identifier": "setStdDev", "parameters": "(Double stdDev)", "modifiers": "public", "return": "void", "signature": "void setStdDev(Double stdDev)", "full_signature": "public void setStdDev(Double stdDev)", "class_method_signature": "BasicContinuousMeasurement.setStdDev(Double stdDev)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BasicContinuousMeasurement.toString()", "testcase": false, "constructor": false}, {"identifier": "conditionalFormat", "parameters": "(DecimalFormat df, Double mean)", "modifiers": "public", "return": "String", "signature": "String conditionalFormat(DecimalFormat df, Double mean)", "full_signature": "public String conditionalFormat(DecimalFormat df, Double mean)", "class_method_signature": "BasicContinuousMeasurement.conditionalFormat(DecimalFormat df, Double mean)", "testcase": false, "constructor": false}, {"identifier": "isOfType", "parameters": "(VariableType type)", "modifiers": "public", "return": "boolean", "signature": "boolean isOfType(VariableType type)", "full_signature": "public boolean isOfType(VariableType type)", "class_method_signature": "BasicContinuousMeasurement.isOfType(VariableType type)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "BasicContinuousMeasurement.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BasicContinuousMeasurement.hashCode()", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(Object x)", "modifiers": "private", "return": "int", "signature": "int hash(Object x)", "full_signature": "private int hash(Object x)", "class_method_signature": "BasicContinuousMeasurement.hash(Object x)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "BasicMeasurement", "signature": "BasicMeasurement clone()", "full_signature": "@Override public BasicMeasurement clone()", "class_method_signature": "BasicContinuousMeasurement.clone()", "testcase": false, "constructor": false}, {"identifier": "isComplete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isComplete()", "full_signature": "@Override public boolean isComplete()", "class_method_signature": "BasicContinuousMeasurement.isComplete()", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/entities/BasicContinuousMeasurement.java"}, "focal_method": {"identifier": "setStdDev", "parameters": "(Double stdDev)", "modifiers": "public", "return": "void", "body": "public void setStdDev(Double stdDev) {\n\t\tDouble oldVal = d_stdDev;\n\t\td_stdDev = stdDev;\n\t\tfirePropertyChange(PROPERTY_STDDEV, oldVal, d_stdDev);\n\t}", "signature": "void setStdDev(Double stdDev)", "full_signature": "public void setStdDev(Double stdDev)", "class_method_signature": "BasicContinuousMeasurement.setStdDev(Double stdDev)", "testcase": false, "constructor": false, "invocations": ["firePropertyChange"]}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}