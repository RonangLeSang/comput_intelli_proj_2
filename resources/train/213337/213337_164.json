{"test_class": {"identifier": "RiskScalePresentationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScaleCriterion d_criterion;", "modifier": "private", "type": "ScaleCriterion", "declarator": "d_criterion", "var_name": "d_criterion"}, {"original_string": "private RiskScalePresentation d_pm;", "modifier": "private", "type": "RiskScalePresentation", "declarator": "d_pm", "var_name": "d_pm"}], "file": "application/src/test/java/org/drugis/addis/presentation/RiskScalePresentationTest.java"}, "test_case": {"identifier": "testNNTLabelModelShouldGiveCorrectValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNNTLabelModelShouldGiveCorrectValue() {\n\t\tObject actual = d_pm.getModel(OddsRatioScalePresentation.PROPERTY_NNT_LABEL).getValue();\n\t\tObject expected = \"NNT\";\n\t\tassertEquals(expected, actual);\n\t}", "signature": "void testNNTLabelModelShouldGiveCorrectValue()", "full_signature": "@Test public void testNNTLabelModelShouldGiveCorrectValue()", "class_method_signature": "RiskScalePresentationTest.testNNTLabelModelShouldGiveCorrectValue()", "testcase": true, "constructor": false, "invocations": ["getValue", "getModel", "assertEquals"]}, "focal_class": {"identifier": "RiskScalePresentation", "superclass": "extends PresentationModel<ScaleCriterion>", "interfaces": "", "fields": [{"original_string": "public static final String PROPERTY_RISK = \"risk\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_RISK = \"risk\"", "var_name": "PROPERTY_RISK"}, {"original_string": "public static final String PROPERTY_RISK_DIFFERENCE = \"riskDifference\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_RISK_DIFFERENCE = \"riskDifference\"", "var_name": "PROPERTY_RISK_DIFFERENCE"}, {"original_string": "public static final String PROPERTY_NNT = \"numberNeededToTreat\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_NNT = \"numberNeededToTreat\"", "var_name": "PROPERTY_NNT"}, {"original_string": "public static final String PROPERTY_NNT_LABEL = \"numberNeededToTreatLabel\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_NNT_LABEL = \"numberNeededToTreatLabel\"", "var_name": "PROPERTY_NNT_LABEL"}], "methods": [{"identifier": "RiskScalePresentation", "parameters": "(ScaleCriterion criterion)", "modifiers": "public", "return": "", "signature": " RiskScalePresentation(ScaleCriterion criterion)", "full_signature": "public  RiskScalePresentation(ScaleCriterion criterion)", "class_method_signature": "RiskScalePresentation.RiskScalePresentation(ScaleCriterion criterion)", "testcase": false, "constructor": true}, {"identifier": "getModel", "parameters": "(String property)", "modifiers": "@Override public", "return": "AbstractValueModel", "signature": "AbstractValueModel getModel(String property)", "full_signature": "@Override public AbstractValueModel getModel(String property)", "class_method_signature": "RiskScalePresentation.getModel(String property)", "testcase": false, "constructor": false}, {"identifier": "getRisk", "parameters": "()", "modifiers": "protected", "return": "Interval<Double>", "signature": "Interval<Double> getRisk()", "full_signature": "protected Interval<Double> getRisk()", "class_method_signature": "RiskScalePresentation.getRisk()", "testcase": false, "constructor": false}, {"identifier": "getRiskDifference", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double getRiskDifference()", "full_signature": "protected double getRiskDifference()", "class_method_signature": "RiskScalePresentation.getRiskDifference()", "testcase": false, "constructor": false}, {"identifier": "getNumberNeededToTreat", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double getNumberNeededToTreat()", "full_signature": "protected double getNumberNeededToTreat()", "class_method_signature": "RiskScalePresentation.getNumberNeededToTreat()", "testcase": false, "constructor": false}, {"identifier": "getNumberNeededToTreatLabel", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getNumberNeededToTreatLabel()", "full_signature": "protected String getNumberNeededToTreatLabel()", "class_method_signature": "RiskScalePresentation.getNumberNeededToTreatLabel()", "testcase": false, "constructor": false}, {"identifier": "convertInterval", "parameters": "(fi.smaa.jsmaa.model.Interval interval)", "modifiers": "protected static", "return": "Interval<Double>", "signature": "Interval<Double> convertInterval(fi.smaa.jsmaa.model.Interval interval)", "full_signature": "protected static Interval<Double> convertInterval(fi.smaa.jsmaa.model.Interval interval)", "class_method_signature": "RiskScalePresentation.convertInterval(fi.smaa.jsmaa.model.Interval interval)", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/presentation/RiskScalePresentation.java"}, "focal_method": {"identifier": "getModel", "parameters": "(String property)", "modifiers": "@Override public", "return": "AbstractValueModel", "body": "@Override\n\tpublic AbstractValueModel getModel(String property) {\n\t\tif (property.equals(PROPERTY_RISK)) {\t\n\t\t\treturn new RiskValueModel();\n\t\t} else if (property.equals(PROPERTY_RISK_DIFFERENCE)) {\t\n\t\t\treturn new RiskDifferenceValueModel();\n\t\t} else if (property.equals(PROPERTY_NNT)) {\t\n\t\t\treturn new NNTValueModel();\n\t\t} else if (property.equals(PROPERTY_NNT_LABEL)) {\t\n\t\t\treturn new NNTLabelValueModel();\n\t\t}\n\t\treturn super.getModel(property);\n\t}", "signature": "AbstractValueModel getModel(String property)", "full_signature": "@Override public AbstractValueModel getModel(String property)", "class_method_signature": "RiskScalePresentation.getModel(String property)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "getModel"]}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}