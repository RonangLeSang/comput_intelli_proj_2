{"test_class": {"identifier": "CategoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TreatmentCategorization d_catz1;", "modifier": "private", "type": "TreatmentCategorization", "declarator": "d_catz1", "var_name": "d_catz1"}, {"original_string": "private TreatmentCategorization d_catz2;", "modifier": "private", "type": "TreatmentCategorization", "declarator": "d_catz2", "var_name": "d_catz2"}], "file": "application/src/test/java/org/drugis/addis/entities/treatment/CategoryTest.java"}, "test_case": {"identifier": "testMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMatch() {\n\t\tUnknownDose unknownDose = new UnknownDose();\n\t\tFixedDose fixedDose20 = new FixedDose(20.0, DoseUnit.createMilliGramsPerDay());\n\t\tFixedDose fixedDose25 = new FixedDose(25.0, DoseUnit.createMilliGramsPerDay());\n\t\tFlexibleDose flexDose20 = new FlexibleDose(0.0, 20.0, DoseUnit.createMilliGramsPerDay());\n\t\tFlexibleDose flexDose25 = new FlexibleDose(0.0, 25.0, DoseUnit.createMilliGramsPerDay());\n\n\t\tDrug fluox = ExampleData.buildDrugFluoxetine();\n\t\tDrug sertr = ExampleData.buildDrugSertraline();\n\n\t\tTreatmentCategorization catz1 = ExampleData.buildCategorizationFixedDose(fluox);\n\t\tCategory fixedCat = catz1.getCategories().get(0);\n\t\tassertTrue(fixedCat.match(fixedDose20));\n\t\tassertFalse(fixedCat.match(unknownDose));\n\t\tassertFalse(fixedCat.match(flexDose20));\n\n\t\tTreatmentCategorization catz2 = ExampleData.buildCategorizationKnownDose(fluox);\n\t\tCategory knownCat = catz2.getCategories().get(0);\n\t\tassertTrue(knownCat.match(fixedDose20));\n\t\tassertFalse(knownCat.match(unknownDose));\n\t\tassertTrue(knownCat.match(flexDose20));\n\n\t\tTreatmentCategorization catz3 = ExampleData.buildCategorizationUpto20mg(fluox);\n\t\tCategory upto20 = catz3.getCategories().get(0);\n\t\tassertTrue(upto20.match(fixedDose20));\n\t\tassertFalse(upto20.match(fixedDose25));\n\t\tassertFalse(upto20.match(unknownDose));\n\t\tassertTrue(upto20.match(flexDose20));\n\t\tassertFalse(upto20.match(flexDose25));\n\n\t\tassertTrue(fixedCat.match(new DrugTreatment(fluox, fixedDose20)));\n\t\tassertFalse(fixedCat.match(new DrugTreatment(fluox, flexDose20)));\n\t\tassertTrue(upto20.match(new DrugTreatment(fluox, flexDose20)));\n\t\tassertFalse(upto20.match(new DrugTreatment(fluox, fixedDose25)));\n\t\tassertFalse(fixedCat.match(new DrugTreatment(sertr, fixedDose20)));\n\t}", "signature": "void testMatch()", "full_signature": "@Test public void testMatch()", "class_method_signature": "CategoryTest.testMatch()", "testcase": true, "constructor": false, "invocations": ["createMilliGramsPerDay", "createMilliGramsPerDay", "createMilliGramsPerDay", "createMilliGramsPerDay", "buildDrugFluoxetine", "buildDrugSertraline", "buildCategorizationFixedDose", "get", "getCategories", "assertTrue", "match", "assertFalse", "match", "assertFalse", "match", "buildCategorizationKnownDose", "get", "getCategories", "assertTrue", "match", "assertFalse", "match", "assertTrue", "match", "buildCategorizationUpto20mg", "get", "getCategories", "assertTrue", "match", "assertFalse", "match", "assertFalse", "match", "assertTrue", "match", "assertFalse", "match", "assertTrue", "match", "assertFalse", "match", "assertTrue", "match", "assertFalse", "match", "assertFalse", "match"]}, "focal_class": {"identifier": "Category", "superclass": "extends AbstractEntity", "interfaces": "implements TypeWithName, Comparable<Category>", "fields": [{"original_string": "private TreatmentCategorization d_owner;", "modifier": "private", "type": "TreatmentCategorization", "declarator": "d_owner", "var_name": "d_owner"}, {"original_string": "private String d_name;", "modifier": "private", "type": "String", "declarator": "d_name", "var_name": "d_name"}], "methods": [{"identifier": "createTrivial", "parameters": "(Drug d)", "modifiers": "public static", "return": "Category", "signature": "Category createTrivial(Drug d)", "full_signature": "public static Category createTrivial(Drug d)", "class_method_signature": "Category.createTrivial(Drug d)", "testcase": false, "constructor": false}, {"identifier": "Category", "parameters": "(TreatmentCategorization owner)", "modifiers": "public", "return": "", "signature": " Category(TreatmentCategorization owner)", "full_signature": "public  Category(TreatmentCategorization owner)", "class_method_signature": "Category.Category(TreatmentCategorization owner)", "testcase": false, "constructor": true}, {"identifier": "Category", "parameters": "(TreatmentCategorization owner, final String name)", "modifiers": "public", "return": "", "signature": " Category(TreatmentCategorization owner, final String name)", "full_signature": "public  Category(TreatmentCategorization owner, final String name)", "class_method_signature": "Category.Category(TreatmentCategorization owner, final String name)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Category.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "Category.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getLabel", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLabel()", "full_signature": "@Override public String getLabel()", "class_method_signature": "Category.getLabel()", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Set<? extends Entity>", "signature": "Set<? extends Entity> getDependencies()", "full_signature": "@Override public Set<? extends Entity> getDependencies()", "class_method_signature": "Category.getDependencies()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "Category.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "deepEquals", "parameters": "(Entity obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deepEquals(Entity obj)", "full_signature": "@Override public boolean deepEquals(Entity obj)", "class_method_signature": "Category.deepEquals(Entity obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Category.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Category o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Category o)", "full_signature": "@Override public int compareTo(Category o)", "class_method_signature": "Category.compareTo(Category o)", "testcase": false, "constructor": false}, {"identifier": "getCategorization", "parameters": "()", "modifiers": "public", "return": "TreatmentCategorization", "signature": "TreatmentCategorization getCategorization()", "full_signature": "public TreatmentCategorization getCategorization()", "class_method_signature": "Category.getCategorization()", "testcase": false, "constructor": false}, {"identifier": "isTrivial", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTrivial()", "full_signature": "public boolean isTrivial()", "class_method_signature": "Category.isTrivial()", "testcase": false, "constructor": false}, {"identifier": "getDrug", "parameters": "()", "modifiers": "public", "return": "Drug", "signature": "Drug getDrug()", "full_signature": "public Drug getDrug()", "class_method_signature": "Category.getDrug()", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(DrugTreatment t)", "modifiers": "public", "return": "boolean", "signature": "boolean match(DrugTreatment t)", "full_signature": "public boolean match(DrugTreatment t)", "class_method_signature": "Category.match(DrugTreatment t)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(AbstractDose dose)", "modifiers": "public", "return": "boolean", "signature": "boolean match(AbstractDose dose)", "full_signature": "public boolean match(AbstractDose dose)", "class_method_signature": "Category.match(AbstractDose dose)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Category.toString()", "testcase": false, "constructor": false}, {"identifier": "getCriterionLabel", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCriterionLabel()", "full_signature": "public String getCriterionLabel()", "class_method_signature": "Category.getCriterionLabel()", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/drugis/addis/entities/treatment/Category.java"}, "focal_method": {"identifier": "match", "parameters": "(DrugTreatment t)", "modifiers": "public", "return": "boolean", "body": "public boolean match(DrugTreatment t) {\n\t\treturn getDrug().equals(t.getDrug()) && match(t.getDose());\n\t}", "signature": "boolean match(DrugTreatment t)", "full_signature": "public boolean match(DrugTreatment t)", "class_method_signature": "Category.match(DrugTreatment t)", "testcase": false, "constructor": false, "invocations": ["equals", "getDrug", "getDrug", "match", "getDose"]}, "repository": {"repo_id": 213337, "url": "https://github.com/drugis/addis", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 10, "size": 13133, "license": "licensed"}}