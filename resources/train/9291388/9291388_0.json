{"test_class": {"identifier": "ProgressButtonTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Activity activity;", "modifier": "private", "type": "Activity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private ProgressButton button;", "modifier": "private", "type": "ProgressButton", "declarator": "button", "var_name": "button"}], "file": "progressbutton/src/test/java/com/f2prateek/progressbutton/ProgressButtonTest.java"}, "test_case": {"identifier": "invalidProgressValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void invalidProgressValue() {\n    try {\n      button.setProgress(101);\n      fail(\"Setting progress > max should throw\");\n    } catch (IllegalArgumentException e) {\n    }\n  }", "signature": "void invalidProgressValue()", "full_signature": "@Test public void invalidProgressValue()", "class_method_signature": "ProgressButtonTest.invalidProgressValue()", "testcase": true, "constructor": false, "invocations": ["setProgress", "fail"]}, "focal_class": {"identifier": "ProgressButton", "superclass": "extends CompoundButton", "interfaces": "", "fields": [{"original_string": "private int mMax = 100;", "modifier": "private", "type": "int", "declarator": "mMax = 100", "var_name": "mMax"}, {"original_string": "private int mProgress = 0;", "modifier": "private", "type": "int", "declarator": "mProgress = 0", "var_name": "mProgress"}, {"original_string": "private Drawable mShadowDrawable;", "modifier": "private", "type": "Drawable", "declarator": "mShadowDrawable", "var_name": "mShadowDrawable"}, {"original_string": "private Drawable mUnpinnedDrawable;", "modifier": "private", "type": "Drawable", "declarator": "mUnpinnedDrawable", "var_name": "mUnpinnedDrawable"}, {"original_string": "private Drawable mPinnedDrawable;", "modifier": "private", "type": "Drawable", "declarator": "mPinnedDrawable", "var_name": "mPinnedDrawable"}, {"original_string": "private Paint mCirclePaint;", "modifier": "private", "type": "Paint", "declarator": "mCirclePaint", "var_name": "mCirclePaint"}, {"original_string": "private boolean mAnimating = false;", "modifier": "private", "type": "boolean", "declarator": "mAnimating = false", "var_name": "mAnimating"}, {"original_string": "private int mAnimationSpeed = 1;", "modifier": "private", "type": "int", "declarator": "mAnimationSpeed = 1", "var_name": "mAnimationSpeed"}, {"original_string": "private int mAnimationDelay = 50;", "modifier": "private", "type": "int", "declarator": "mAnimationDelay = 50", "var_name": "mAnimationDelay"}, {"original_string": "private int mAnimationStripWidth = 6;", "modifier": "private", "type": "int", "declarator": "mAnimationStripWidth = 6", "var_name": "mAnimationStripWidth"}, {"original_string": "private int mAnimationProgress = 0;", "modifier": "private", "type": "int", "declarator": "mAnimationProgress = 0", "var_name": "mAnimationProgress"}, {"original_string": "private Paint mProgressPaint;", "modifier": "private", "type": "Paint", "declarator": "mProgressPaint", "var_name": "mProgressPaint"}, {"original_string": "private Rect mTempRect = new Rect();", "modifier": "private", "type": "Rect", "declarator": "mTempRect = new Rect()", "var_name": "mTempRect"}, {"original_string": "private RectF mTempRectF = new RectF();", "modifier": "private", "type": "RectF", "declarator": "mTempRectF = new RectF()", "var_name": "mTempRectF"}, {"original_string": "private int mDrawableSize;", "modifier": "private", "type": "int", "declarator": "mDrawableSize", "var_name": "mDrawableSize"}, {"original_string": "private int mInnerSize;", "modifier": "private", "type": "int", "declarator": "mInnerSize", "var_name": "mInnerSize"}, {"original_string": "private Handler mAnimationHandler = new Handler() {\n    /**\n     * This is the code that will increment the progress variable\n     * and so spin the wheel\n     */\n    @Override public void handleMessage(Message msg) {\n      if (mAnimating) {\n        invalidate();\n        mAnimationProgress += mAnimationSpeed;\n        if (mAnimationProgress > mMax) {\n          mAnimationProgress = mProgress;\n        }\n        mAnimationHandler.sendEmptyMessageDelayed(0, mAnimationDelay);\n      }\n    }\n  };", "modifier": "private", "type": "Handler", "declarator": "mAnimationHandler = new Handler() {\n    /**\n     * This is the code that will increment the progress variable\n     * and so spin the wheel\n     */\n    @Override public void handleMessage(Message msg) {\n      if (mAnimating) {\n        invalidate();\n        mAnimationProgress += mAnimationSpeed;\n        if (mAnimationProgress > mMax) {\n          mAnimationProgress = mProgress;\n        }\n        mAnimationHandler.sendEmptyMessageDelayed(0, mAnimationDelay);\n      }\n    }\n  }", "var_name": "mAnimationHandler"}], "methods": [{"identifier": "ProgressButton", "parameters": "(Context context)", "modifiers": "public", "return": "", "signature": " ProgressButton(Context context)", "full_signature": "public  ProgressButton(Context context)", "class_method_signature": "ProgressButton.ProgressButton(Context context)", "testcase": false, "constructor": true}, {"identifier": "ProgressButton", "parameters": "(Context context, AttributeSet attrs)", "modifiers": "public", "return": "", "signature": " ProgressButton(Context context, AttributeSet attrs)", "full_signature": "public  ProgressButton(Context context, AttributeSet attrs)", "class_method_signature": "ProgressButton.ProgressButton(Context context, AttributeSet attrs)", "testcase": false, "constructor": true}, {"identifier": "ProgressButton", "parameters": "(Context context, AttributeSet attrs, int defStyle)", "modifiers": "public", "return": "", "signature": " ProgressButton(Context context, AttributeSet attrs, int defStyle)", "full_signature": "public  ProgressButton(Context context, AttributeSet attrs, int defStyle)", "class_method_signature": "ProgressButton.ProgressButton(Context context, AttributeSet attrs, int defStyle)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Context context, AttributeSet attrs, int defStyle)", "modifiers": "private", "return": "void", "signature": "void init(Context context, AttributeSet attrs, int defStyle)", "full_signature": "private void init(Context context, AttributeSet attrs, int defStyle)", "class_method_signature": "ProgressButton.init(Context context, AttributeSet attrs, int defStyle)", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMax()", "full_signature": "public int getMax()", "class_method_signature": "ProgressButton.getMax()", "testcase": false, "constructor": false}, {"identifier": "setMax", "parameters": "(int max)", "modifiers": "public", "return": "void", "signature": "void setMax(int max)", "full_signature": "public void setMax(int max)", "class_method_signature": "ProgressButton.setMax(int max)", "testcase": false, "constructor": false}, {"identifier": "getProgress", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getProgress()", "full_signature": "public int getProgress()", "class_method_signature": "ProgressButton.getProgress()", "testcase": false, "constructor": false}, {"identifier": "setProgress", "parameters": "(int progress)", "modifiers": "public", "return": "void", "signature": "void setProgress(int progress)", "full_signature": "public void setProgress(int progress)", "class_method_signature": "ProgressButton.setProgress(int progress)", "testcase": false, "constructor": false}, {"identifier": "setProgressAndMax", "parameters": "(int progress, int max)", "modifiers": "public", "return": "void", "signature": "void setProgressAndMax(int progress, int max)", "full_signature": "public void setProgressAndMax(int progress, int max)", "class_method_signature": "ProgressButton.setProgressAndMax(int progress, int max)", "testcase": false, "constructor": false}, {"identifier": "getProgressColor", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getProgressColor()", "full_signature": "public int getProgressColor()", "class_method_signature": "ProgressButton.getProgressColor()", "testcase": false, "constructor": false}, {"identifier": "setProgressColor", "parameters": "(int progressColor)", "modifiers": "public", "return": "void", "signature": "void setProgressColor(int progressColor)", "full_signature": "public void setProgressColor(int progressColor)", "class_method_signature": "ProgressButton.setProgressColor(int progressColor)", "testcase": false, "constructor": false}, {"identifier": "getCircleColor", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCircleColor()", "full_signature": "public int getCircleColor()", "class_method_signature": "ProgressButton.getCircleColor()", "testcase": false, "constructor": false}, {"identifier": "setCircleColor", "parameters": "(int circleColor)", "modifiers": "public", "return": "void", "signature": "void setCircleColor(int circleColor)", "full_signature": "public void setCircleColor(int circleColor)", "class_method_signature": "ProgressButton.setCircleColor(int circleColor)", "testcase": false, "constructor": false}, {"identifier": "getPinnedDrawable", "parameters": "()", "modifiers": "public", "return": "Drawable", "signature": "Drawable getPinnedDrawable()", "full_signature": "public Drawable getPinnedDrawable()", "class_method_signature": "ProgressButton.getPinnedDrawable()", "testcase": false, "constructor": false}, {"identifier": "setPinnedDrawable", "parameters": "(Drawable pinnedDrawable)", "modifiers": "public", "return": "void", "signature": "void setPinnedDrawable(Drawable pinnedDrawable)", "full_signature": "public void setPinnedDrawable(Drawable pinnedDrawable)", "class_method_signature": "ProgressButton.setPinnedDrawable(Drawable pinnedDrawable)", "testcase": false, "constructor": false}, {"identifier": "getUnpinnedDrawable", "parameters": "()", "modifiers": "public", "return": "Drawable", "signature": "Drawable getUnpinnedDrawable()", "full_signature": "public Drawable getUnpinnedDrawable()", "class_method_signature": "ProgressButton.getUnpinnedDrawable()", "testcase": false, "constructor": false}, {"identifier": "setUnpinnedDrawable", "parameters": "(Drawable unpinnedDrawable)", "modifiers": "public", "return": "void", "signature": "void setUnpinnedDrawable(Drawable unpinnedDrawable)", "full_signature": "public void setUnpinnedDrawable(Drawable unpinnedDrawable)", "class_method_signature": "ProgressButton.setUnpinnedDrawable(Drawable unpinnedDrawable)", "testcase": false, "constructor": false}, {"identifier": "getShadowDrawable", "parameters": "()", "modifiers": "public", "return": "Drawable", "signature": "Drawable getShadowDrawable()", "full_signature": "public Drawable getShadowDrawable()", "class_method_signature": "ProgressButton.getShadowDrawable()", "testcase": false, "constructor": false}, {"identifier": "setShadowDrawable", "parameters": "(Drawable shadowDrawable)", "modifiers": "public", "return": "void", "signature": "void setShadowDrawable(Drawable shadowDrawable)", "full_signature": "public void setShadowDrawable(Drawable shadowDrawable)", "class_method_signature": "ProgressButton.setShadowDrawable(Drawable shadowDrawable)", "testcase": false, "constructor": false}, {"identifier": "getInnerSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInnerSize()", "full_signature": "public int getInnerSize()", "class_method_signature": "ProgressButton.getInnerSize()", "testcase": false, "constructor": false}, {"identifier": "setInnerSize", "parameters": "(int innerSize)", "modifiers": "public", "return": "void", "signature": "void setInnerSize(int innerSize)", "full_signature": "public void setInnerSize(int innerSize)", "class_method_signature": "ProgressButton.setInnerSize(int innerSize)", "testcase": false, "constructor": false}, {"identifier": "isPinned", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPinned()", "full_signature": "public boolean isPinned()", "class_method_signature": "ProgressButton.isPinned()", "testcase": false, "constructor": false}, {"identifier": "setPinned", "parameters": "(boolean pinned)", "modifiers": "public", "return": "void", "signature": "void setPinned(boolean pinned)", "full_signature": "public void setPinned(boolean pinned)", "class_method_signature": "ProgressButton.setPinned(boolean pinned)", "testcase": false, "constructor": false}, {"identifier": "isAnimating", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAnimating()", "full_signature": "public boolean isAnimating()", "class_method_signature": "ProgressButton.isAnimating()", "testcase": false, "constructor": false}, {"identifier": "getAnimationSpeed", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAnimationSpeed()", "full_signature": "public int getAnimationSpeed()", "class_method_signature": "ProgressButton.getAnimationSpeed()", "testcase": false, "constructor": false}, {"identifier": "getAnimationDelay", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAnimationDelay()", "full_signature": "public int getAnimationDelay()", "class_method_signature": "ProgressButton.getAnimationDelay()", "testcase": false, "constructor": false}, {"identifier": "getAnimationStripWidth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAnimationStripWidth()", "full_signature": "public int getAnimationStripWidth()", "class_method_signature": "ProgressButton.getAnimationStripWidth()", "testcase": false, "constructor": false}, {"identifier": "setAnimationSpeed", "parameters": "(int animationSpeed)", "modifiers": "public", "return": "void", "signature": "void setAnimationSpeed(int animationSpeed)", "full_signature": "public void setAnimationSpeed(int animationSpeed)", "class_method_signature": "ProgressButton.setAnimationSpeed(int animationSpeed)", "testcase": false, "constructor": false}, {"identifier": "setAnimationDelay", "parameters": "(int animationDelay)", "modifiers": "public", "return": "void", "signature": "void setAnimationDelay(int animationDelay)", "full_signature": "public void setAnimationDelay(int animationDelay)", "class_method_signature": "ProgressButton.setAnimationDelay(int animationDelay)", "testcase": false, "constructor": false}, {"identifier": "setAnimationStripWidth", "parameters": "(int animationStripWidth)", "modifiers": "public", "return": "void", "signature": "void setAnimationStripWidth(int animationStripWidth)", "full_signature": "public void setAnimationStripWidth(int animationStripWidth)", "class_method_signature": "ProgressButton.setAnimationStripWidth(int animationStripWidth)", "testcase": false, "constructor": false}, {"identifier": "startAnimating", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startAnimating()", "full_signature": "public void startAnimating()", "class_method_signature": "ProgressButton.startAnimating()", "testcase": false, "constructor": false}, {"identifier": "stopAnimating", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopAnimating()", "full_signature": "public void stopAnimating()", "class_method_signature": "ProgressButton.stopAnimating()", "testcase": false, "constructor": false}, {"identifier": "onMeasure", "parameters": "(int widthMeasureSpec, int heightMeasureSpec)", "modifiers": "@Override protected", "return": "void", "signature": "void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "full_signature": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "class_method_signature": "ProgressButton.onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "testcase": false, "constructor": false}, {"identifier": "drawableStateChanged", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void drawableStateChanged()", "full_signature": "@Override protected void drawableStateChanged()", "class_method_signature": "ProgressButton.drawableStateChanged()", "testcase": false, "constructor": false}, {"identifier": "onDraw", "parameters": "(Canvas canvas)", "modifiers": "@Override protected", "return": "void", "signature": "void onDraw(Canvas canvas)", "full_signature": "@Override protected void onDraw(Canvas canvas)", "class_method_signature": "ProgressButton.onDraw(Canvas canvas)", "testcase": false, "constructor": false}, {"identifier": "onSaveInstanceState", "parameters": "()", "modifiers": "@Override public", "return": "Parcelable", "signature": "Parcelable onSaveInstanceState()", "full_signature": "@Override public Parcelable onSaveInstanceState()", "class_method_signature": "ProgressButton.onSaveInstanceState()", "testcase": false, "constructor": false}, {"identifier": "onRestoreInstanceState", "parameters": "(Parcelable state)", "modifiers": "@Override public", "return": "void", "signature": "void onRestoreInstanceState(Parcelable state)", "full_signature": "@Override public void onRestoreInstanceState(Parcelable state)", "class_method_signature": "ProgressButton.onRestoreInstanceState(Parcelable state)", "testcase": false, "constructor": false}], "file": "progressbutton/src/main/java/com/f2prateek/progressbutton/ProgressButton.java"}, "focal_method": {"identifier": "setProgress", "parameters": "(int progress)", "modifiers": "public", "return": "void", "body": "public void setProgress(int progress) {\n    if (progress > mMax || progress < 0) {\n      throw new IllegalArgumentException(\n          String.format(\"Progress (%d) must be between %d and %d\", progress, 0, mMax));\n    }\n    mProgress = progress;\n    invalidate();\n  }", "signature": "void setProgress(int progress)", "full_signature": "public void setProgress(int progress)", "class_method_signature": "ProgressButton.setProgress(int progress)", "testcase": false, "constructor": false, "invocations": ["format", "invalidate"]}, "repository": {"repo_id": 9291388, "url": "https://github.com/f2prateek/progressbutton", "language": "Java", "is_fork": false, "fork_count": 194, "stargazer_count": 631, "size": 1234, "license": "licensed"}}