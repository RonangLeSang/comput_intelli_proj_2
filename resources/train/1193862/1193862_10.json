{"test_class": {"identifier": "IdeaProfileExporterTest", "superclass": "", "interfaces": "", "fields": [], "file": "sonar-intellij-plugin/src/test/java/org/sonar/plugins/ideainspections/IdeaProfileExporterTest.java"}, "test_case": {"identifier": "exportParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void exportParameters()\n        throws IOException, SAXException\n    {\n        RulesProfile profile = RulesProfile.create(\"sonar way\", \"java\");\n        Rule         rule =\n            Rule.create(REPOSITORY_KEY, \"ConstantConditions\", \"ConstantConditions\").setConfigKey(\"ConstantConditions\");\n        rule.createParameter(\"SUGGEST_NULLABLE_ANNOTATIONS\");\n        rule.createParameter(\"message\");  // not set in the profile and no default value => not exported in checkstyle\n        rule.createParameter(\"DONT_REPORT_TRUE_ASSERT_STATEMENTS\");\n\n        profile.activateRule(rule, RulePriority.MAJOR).setParameter(\"DONT_REPORT_TRUE_ASSERT_STATEMENTS\", \"false\")\n                // todo remove this\n               .setParameter(\"SUGGEST_NULLABLE_ANNOTATIONS\", \"false\");\n\n        assertSimilar(exportProfile(profile), \"exportParameters.xml\");\n    }", "signature": "void exportParameters()", "full_signature": "@Test public void exportParameters()", "class_method_signature": "IdeaProfileExporterTest.exportParameters()", "testcase": true, "constructor": false, "invocations": ["create", "setConfigKey", "create", "createParameter", "createParameter", "createParameter", "setParameter", "setParameter", "activateRule", "assertSimilar", "exportProfile"]}, "focal_class": {"identifier": "IdeaProfileExporter", "superclass": "extends ProfileExporter", "interfaces": "", "fields": [], "methods": [{"identifier": "IdeaProfileExporter", "parameters": "(Configuration conf)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "", "signature": " IdeaProfileExporter(Configuration conf)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public  IdeaProfileExporter(Configuration conf)", "class_method_signature": "IdeaProfileExporter.IdeaProfileExporter(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "IdeaProfileExporter", "parameters": "()", "modifiers": "", "return": "", "signature": " IdeaProfileExporter()", "full_signature": "  IdeaProfileExporter()", "class_method_signature": "IdeaProfileExporter.IdeaProfileExporter()", "testcase": false, "constructor": true}, {"identifier": "exportProfile", "parameters": "(RulesProfile profile, Writer writer)", "modifiers": "public", "return": "void", "signature": "void exportProfile(RulesProfile profile, Writer writer)", "full_signature": "public void exportProfile(RulesProfile profile, Writer writer)", "class_method_signature": "IdeaProfileExporter.exportProfile(RulesProfile profile, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "appendXmlHeader", "parameters": "(Writer writer)", "modifiers": "private", "return": "void", "signature": "void appendXmlHeader(Writer writer)", "full_signature": "private void appendXmlHeader(Writer writer)", "class_method_signature": "IdeaProfileExporter.appendXmlHeader(Writer writer)", "testcase": false, "constructor": false}, {"identifier": "appendXmlFooter", "parameters": "(Writer writer)", "modifiers": "private", "return": "void", "signature": "void appendXmlFooter(Writer writer)", "full_signature": "private void appendXmlFooter(Writer writer)", "class_method_signature": "IdeaProfileExporter.appendXmlFooter(Writer writer)", "testcase": false, "constructor": false}, {"identifier": "appendRule", "parameters": "(Writer writer, Rule rule, boolean enabled, boolean close)", "modifiers": "private", "return": "void", "signature": "void appendRule(Writer writer, Rule rule, boolean enabled, boolean close)", "full_signature": "private void appendRule(Writer writer, Rule rule, boolean enabled, boolean close)", "class_method_signature": "IdeaProfileExporter.appendRule(Writer writer, Rule rule, boolean enabled, boolean close)", "testcase": false, "constructor": false}, {"identifier": "appendParameters", "parameters": "(Writer writer, ActiveRule activeRule)", "modifiers": "private", "return": "void", "signature": "void appendParameters(Writer writer, ActiveRule activeRule)", "full_signature": "private void appendParameters(Writer writer, ActiveRule activeRule)", "class_method_signature": "IdeaProfileExporter.appendParameters(Writer writer, ActiveRule activeRule)", "testcase": false, "constructor": false}, {"identifier": "appendAttribute", "parameters": "(Writer writer, String attr, String value)", "modifiers": "private", "return": "void", "signature": "void appendAttribute(Writer writer, String attr, String value)", "full_signature": "private void appendAttribute(Writer writer, String attr, String value)", "class_method_signature": "IdeaProfileExporter.appendAttribute(Writer writer, String attr, String value)", "testcase": false, "constructor": false}], "file": "sonar-intellij-plugin/src/main/java/org/sonar/plugins/ideainspections/IdeaProfileExporter.java"}, "focal_method": {"identifier": "exportProfile", "parameters": "(RulesProfile profile, Writer writer)", "modifiers": "public", "return": "void", "body": "public void exportProfile(RulesProfile profile, Writer writer)\n    {\n        try {\n            appendXmlHeader(writer);\n\n            SortedMap<String, Rule> defaultRules = new TreeMap<String, Rule>(DefaultRules.get());\n\n            for (ActiveRule activeRule : profile.getActiveRulesByRepository(REPOSITORY_KEY)) {\n                final Rule            rule = activeRule.getRule();\n                final boolean hasParameters= !rule.getParams().isEmpty();\n                if (defaultRules.remove(rule.getKey()) == null || hasParameters) {\n                    appendRule(writer, rule, true, !hasParameters);\n\n                    if (hasParameters) {\n                        appendParameters(writer, activeRule);\n                    }\n                }\n            }\n\n            for (Rule rule : defaultRules.values()) {\n                appendRule(writer, rule, false, true);\n            }\n\n            appendXmlFooter(writer);\n        }\n        catch (IOException e) {\n            throw new SonarException(\"Fail to export the profile \" + profile, e);\n        }\n    }", "signature": "void exportProfile(RulesProfile profile, Writer writer)", "full_signature": "public void exportProfile(RulesProfile profile, Writer writer)", "class_method_signature": "IdeaProfileExporter.exportProfile(RulesProfile profile, Writer writer)", "testcase": false, "constructor": false, "invocations": ["appendXmlHeader", "get", "getActiveRulesByRepository", "getRule", "isEmpty", "getParams", "remove", "getKey", "appendRule", "appendParameters", "values", "appendRule", "appendXmlFooter"]}, "repository": {"repo_id": 1193862, "url": "https://github.com/emiliolg/IdeaInspectionsSonar", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 505, "license": "licensed"}}