{"test_class": {"identifier": "FileEntryApiControllerTest", "superclass": "extends AbstractNGrinderTransactionalTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate FileEntryApiController fileEntryController;", "modifier": "@Autowired\n\tprivate", "type": "FileEntryApiController", "declarator": "fileEntryController", "var_name": "fileEntryController"}, {"original_string": "@Autowired\n\tprivate MockFileEntityRepository fileEntityRepository;", "modifier": "@Autowired\n\tprivate", "type": "MockFileEntityRepository", "declarator": "fileEntityRepository", "var_name": "fileEntityRepository"}, {"original_string": "@Autowired\n\tprivate Config config;", "modifier": "@Autowired\n\tprivate", "type": "Config", "declarator": "config", "var_name": "config"}], "file": "ngrinder-controller/src/test/java/org/ngrinder/script/controller/FileEntryApiControllerTest.java"}, "test_case": {"identifier": "testDownload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDownload() {\n\t\tString path = \"download-path\";\n\t\tString fileName = \"download_file.py\";\n\t\tfileEntryController.addFolder(getTestUser(), \"\", path);\n\t\tMap<String, Object> responseMap = fileEntryController.createScript(getTestUser(), path, new ScriptCreationParams(fileName, \"test.com\", null, \"jython\", false));\n\n\t\tFileEntry script = (FileEntry) responseMap.get(\"file\");\n\t\tscript.setContent(script.getContent() + \"#test comment\");\n\t\tfileEntryController.save(getTestUser(), new FileSaveParams(script, null, \"\", false));\n\n\t\tfileEntryController.createScript(getTestUser(), path, new ScriptCreationParams(fileName, \"\", null, \"\", false));\n\n\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n\t\tpath = path + \"/\" + fileName;\n\t\tfileEntryController.download(getTestUser(), path, response);\n\t}", "signature": "void testDownload()", "full_signature": "@Test public void testDownload()", "class_method_signature": "FileEntryApiControllerTest.testDownload()", "testcase": true, "constructor": false, "invocations": ["addFolder", "getTestUser", "createScript", "getTestUser", "get", "setContent", "getContent", "save", "getTestUser", "createScript", "getTestUser", "download", "getTestUser"]}, "focal_class": {"identifier": "FileEntryApiController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileEntryApiController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileEntryApiController.class)", "var_name": "LOG"}, {"original_string": "private static final Comparator<FileEntry> DIRECTORY_PRIORITY_FILE_ENTRY_COMPARATOR = (o1, o2) -> {\n\t\tif (o1.getFileType() == FileType.DIR && o2.getFileType() != FileType.DIR) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn (o1.getFileName().compareTo(o2.getFileName()));\n\t};", "modifier": "private static final", "type": "Comparator<FileEntry>", "declarator": "DIRECTORY_PRIORITY_FILE_ENTRY_COMPARATOR = (o1, o2) -> {\n\t\tif (o1.getFileType() == FileType.DIR && o2.getFileType() != FileType.DIR) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn (o1.getFileName().compareTo(o2.getFileName()));\n\t}", "var_name": "DIRECTORY_PRIORITY_FILE_ENTRY_COMPARATOR"}, {"original_string": "private final FileEntryService fileEntryService;", "modifier": "private final", "type": "FileEntryService", "declarator": "fileEntryService", "var_name": "fileEntryService"}, {"original_string": "private final ScriptHandlerFactory handlerFactory;", "modifier": "private final", "type": "ScriptHandlerFactory", "declarator": "handlerFactory", "var_name": "handlerFactory"}, {"original_string": "private final ScriptValidationService scriptValidationService;", "modifier": "private final", "type": "ScriptValidationService", "declarator": "scriptValidationService", "var_name": "scriptValidationService"}, {"original_string": "private final MessageSource messageSource;", "modifier": "private final", "type": "MessageSource", "declarator": "messageSource", "var_name": "messageSource"}, {"original_string": "private final UserContext userContext;", "modifier": "private final", "type": "UserContext", "declarator": "userContext", "var_name": "userContext"}, {"original_string": "private final GitHubFileEntryService gitHubFileEntryService;", "modifier": "private final", "type": "GitHubFileEntryService", "declarator": "gitHubFileEntryService", "var_name": "gitHubFileEntryService"}], "methods": [{"identifier": "getHandlers", "parameters": "()", "modifiers": "@GetMapping(\"/handlers\") public", "return": "List<ScriptHandler>", "signature": "List<ScriptHandler> getHandlers()", "full_signature": "@GetMapping(\"/handlers\") public List<ScriptHandler> getHandlers()", "class_method_signature": "FileEntryApiController.getHandlers()", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(User user, @RequestParam String query)", "modifiers": "@GetMapping(\"/search\") public", "return": "List<FileEntry>", "signature": "List<FileEntry> search(User user, @RequestParam String query)", "full_signature": "@GetMapping(\"/search\") public List<FileEntry> search(User user, @RequestParam String query)", "class_method_signature": "FileEntryApiController.search(User user, @RequestParam String query)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(User user, @RequestBody FileSaveParams fileSaveParams)", "modifiers": "@PostMapping(\"/save/**\") public", "return": "void", "signature": "void save(User user, @RequestBody FileSaveParams fileSaveParams)", "full_signature": "@PostMapping(\"/save/**\") public void save(User user, @RequestBody FileSaveParams fileSaveParams)", "class_method_signature": "FileEntryApiController.save(User user, @RequestBody FileSaveParams fileSaveParams)", "testcase": false, "constructor": false}, {"identifier": "getMessages", "parameters": "(String key)", "modifiers": "private", "return": "String", "signature": "String getMessages(String key)", "full_signature": "private String getMessages(String key)", "class_method_signature": "FileEntryApiController.getMessages(String key)", "testcase": false, "constructor": false}, {"identifier": "createScript", "parameters": "(User user,\n\t\t\t\t\t\t\t\t\t\t\t@RemainedPath String path,\n\t\t\t\t\t\t\t\t\t\t\t@RequestBody ScriptCreationParams scriptCreationParams)", "modifiers": "@PostMapping(value = \"/new/**\", params = \"type=script\") public", "return": "Map<String, Object>", "signature": "Map<String, Object> createScript(User user,\n\t\t\t\t\t\t\t\t\t\t\t@RemainedPath String path,\n\t\t\t\t\t\t\t\t\t\t\t@RequestBody ScriptCreationParams scriptCreationParams)", "full_signature": "@PostMapping(value = \"/new/**\", params = \"type=script\") public Map<String, Object> createScript(User user,\n\t\t\t\t\t\t\t\t\t\t\t@RemainedPath String path,\n\t\t\t\t\t\t\t\t\t\t\t@RequestBody ScriptCreationParams scriptCreationParams)", "class_method_signature": "FileEntryApiController.createScript(User user,\n\t\t\t\t\t\t\t\t\t\t\t@RemainedPath String path,\n\t\t\t\t\t\t\t\t\t\t\t@RequestBody ScriptCreationParams scriptCreationParams)", "testcase": false, "constructor": false}, {"identifier": "addFolder", "parameters": "(User user,\n\t\t\t\t\t\t\t@RemainedPath String path,\n\t\t\t\t\t\t\t@RequestBody String folderName)", "modifiers": "@PostMapping(value = \"/new/**\", params = \"type=folder\") public", "return": "void", "signature": "void addFolder(User user,\n\t\t\t\t\t\t\t@RemainedPath String path,\n\t\t\t\t\t\t\t@RequestBody String folderName)", "full_signature": "@PostMapping(value = \"/new/**\", params = \"type=folder\") public void addFolder(User user,\n\t\t\t\t\t\t\t@RemainedPath String path,\n\t\t\t\t\t\t\t@RequestBody String folderName)", "class_method_signature": "FileEntryApiController.addFolder(User user,\n\t\t\t\t\t\t\t@RemainedPath String path,\n\t\t\t\t\t\t\t@RequestBody String folderName)", "testcase": false, "constructor": false}, {"identifier": "getOne", "parameters": "(User user,\n\t\t\t\t\t\t\t\t\t  @RemainedPath String path,\n\t\t\t\t\t\t\t\t\t  @RequestParam(value = \"r\", required = false) Long revision)", "modifiers": "@GetMapping(\"/detail/**\") public", "return": "Map<String, Object>", "signature": "Map<String, Object> getOne(User user,\n\t\t\t\t\t\t\t\t\t  @RemainedPath String path,\n\t\t\t\t\t\t\t\t\t  @RequestParam(value = \"r\", required = false) Long revision)", "full_signature": "@GetMapping(\"/detail/**\") public Map<String, Object> getOne(User user,\n\t\t\t\t\t\t\t\t\t  @RemainedPath String path,\n\t\t\t\t\t\t\t\t\t  @RequestParam(value = \"r\", required = false) Long revision)", "class_method_signature": "FileEntryApiController.getOne(User user,\n\t\t\t\t\t\t\t\t\t  @RemainedPath String path,\n\t\t\t\t\t\t\t\t\t  @RequestParam(value = \"r\", required = false) Long revision)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(User user, @RequestBody List<String> paths)", "modifiers": "@DeleteMapping(\"/delete\") public", "return": "void", "signature": "void delete(User user, @RequestBody List<String> paths)", "full_signature": "@DeleteMapping(\"/delete\") public void delete(User user, @RequestBody List<String> paths)", "class_method_signature": "FileEntryApiController.delete(User user, @RequestBody List<String> paths)", "testcase": false, "constructor": false}, {"identifier": "uploadFile", "parameters": "(User user,\n\t\t\t\t\t\t\t @RemainedPath String path,\n\t\t\t\t\t\t\t @RequestParam String description,\n\t\t\t\t\t\t\t @RequestParam(\"uploadFile\") MultipartFile file)", "modifiers": "@PostMapping(\"/upload/**\") public", "return": "void", "signature": "void uploadFile(User user,\n\t\t\t\t\t\t\t @RemainedPath String path,\n\t\t\t\t\t\t\t @RequestParam String description,\n\t\t\t\t\t\t\t @RequestParam(\"uploadFile\") MultipartFile file)", "full_signature": "@PostMapping(\"/upload/**\") public void uploadFile(User user,\n\t\t\t\t\t\t\t @RemainedPath String path,\n\t\t\t\t\t\t\t @RequestParam String description,\n\t\t\t\t\t\t\t @RequestParam(\"uploadFile\") MultipartFile file)", "class_method_signature": "FileEntryApiController.uploadFile(User user,\n\t\t\t\t\t\t\t @RemainedPath String path,\n\t\t\t\t\t\t\t @RequestParam String description,\n\t\t\t\t\t\t\t @RequestParam(\"uploadFile\") MultipartFile file)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(User user, String path, String description, MultipartFile file)", "modifiers": "private", "return": "void", "signature": "void upload(User user, String path, String description, MultipartFile file)", "full_signature": "private void upload(User user, String path, String description, MultipartFile file)", "class_method_signature": "FileEntryApiController.upload(User user, String path, String description, MultipartFile file)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(User user, FileEntry fileEntry)", "modifiers": "@PostMapping({\"/\", \"\"}) public", "return": "void", "signature": "void create(User user, FileEntry fileEntry)", "full_signature": "@PostMapping({\"/\", \"\"}) public void create(User user, FileEntry fileEntry)", "class_method_signature": "FileEntryApiController.create(User user, FileEntry fileEntry)", "testcase": false, "constructor": false}, {"identifier": "uploadAPI", "parameters": "(User user,\n\t\t\t\t\t\t\t   @RemainedPath String path,\n\t\t\t\t\t\t\t   @RequestParam String description,\n\t\t\t\t\t\t\t   @RequestParam(\"uploadFile\") MultipartFile file)", "modifiers": "@PostMapping(value = \"/**\", params = \"action=upload\") public", "return": "void", "signature": "void uploadAPI(User user,\n\t\t\t\t\t\t\t   @RemainedPath String path,\n\t\t\t\t\t\t\t   @RequestParam String description,\n\t\t\t\t\t\t\t   @RequestParam(\"uploadFile\") MultipartFile file)", "full_signature": "@PostMapping(value = \"/**\", params = \"action=upload\") public void uploadAPI(User user,\n\t\t\t\t\t\t\t   @RemainedPath String path,\n\t\t\t\t\t\t\t   @RequestParam String description,\n\t\t\t\t\t\t\t   @RequestParam(\"uploadFile\") MultipartFile file)", "class_method_signature": "FileEntryApiController.uploadAPI(User user,\n\t\t\t\t\t\t\t   @RemainedPath String path,\n\t\t\t\t\t\t\t   @RequestParam String description,\n\t\t\t\t\t\t\t   @RequestParam(\"uploadFile\") MultipartFile file)", "testcase": false, "constructor": false}, {"identifier": "viewOne", "parameters": "(User user, @RemainedPath String path)", "modifiers": "@GetMapping(value = \"/**\", params = \"action=view\") public", "return": "FileEntry", "signature": "FileEntry viewOne(User user, @RemainedPath String path)", "full_signature": "@GetMapping(value = \"/**\", params = \"action=view\") public FileEntry viewOne(User user, @RemainedPath String path)", "class_method_signature": "FileEntryApiController.viewOne(User user, @RemainedPath String path)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "(User user)", "modifiers": "@GetMapping(value = {\"/**\", \"/\", \"\"}, params = \"action=all\") public", "return": "List<FileEntry>", "signature": "List<FileEntry> getAll(User user)", "full_signature": "@GetMapping(value = {\"/**\", \"/\", \"\"}, params = \"action=all\") public List<FileEntry> getAll(User user)", "class_method_signature": "FileEntryApiController.getAll(User user)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "(User user, @RemainedPath String path)", "modifiers": "@GetMapping({\"/**\", \"/\", \"\"}) public", "return": "List<FileEntry>", "signature": "List<FileEntry> getAll(User user, @RemainedPath String path)", "full_signature": "@GetMapping({\"/**\", \"/\", \"\"}) public List<FileEntry> getAll(User user, @RemainedPath String path)", "class_method_signature": "FileEntryApiController.getAll(User user, @RemainedPath String path)", "testcase": false, "constructor": false}, {"identifier": "deleteOne", "parameters": "(User user, @RemainedPath String path)", "modifiers": "@DeleteMapping(\"/**\") public", "return": "void", "signature": "void deleteOne(User user, @RemainedPath String path)", "full_signature": "@DeleteMapping(\"/**\") public void deleteOne(User user, @RemainedPath String path)", "class_method_signature": "FileEntryApiController.deleteOne(User user, @RemainedPath String path)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(User user, @RequestBody ScriptValidationParams scriptValidationParams)", "modifiers": "@PostMapping(\"/validate\") public", "return": "String", "signature": "String validate(User user, @RequestBody ScriptValidationParams scriptValidationParams)", "full_signature": "@PostMapping(\"/validate\") public String validate(User user, @RequestBody ScriptValidationParams scriptValidationParams)", "class_method_signature": "FileEntryApiController.validate(User user, @RequestBody ScriptValidationParams scriptValidationParams)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(User user, @RemainedPath String path, HttpServletResponse response)", "modifiers": "@GetMapping(\"/download/**\") public", "return": "void", "signature": "void download(User user, @RemainedPath String path, HttpServletResponse response)", "full_signature": "@GetMapping(\"/download/**\") public void download(User user, @RemainedPath String path, HttpServletResponse response)", "class_method_signature": "FileEntryApiController.download(User user, @RemainedPath String path, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getGitHubConfig", "parameters": "(User user)", "modifiers": "@GetMapping(\"/github-config\") public", "return": "Set<GitHubConfig>", "signature": "Set<GitHubConfig> getGitHubConfig(User user)", "full_signature": "@GetMapping(\"/github-config\") public Set<GitHubConfig> getGitHubConfig(User user)", "class_method_signature": "FileEntryApiController.getGitHubConfig(User user)", "testcase": false, "constructor": false}, {"identifier": "createGitHubConfig", "parameters": "(User user)", "modifiers": "@PostMapping(\"/github-config\") public", "return": "void", "signature": "void createGitHubConfig(User user)", "full_signature": "@PostMapping(\"/github-config\") public void createGitHubConfig(User user)", "class_method_signature": "FileEntryApiController.createGitHubConfig(User user)", "testcase": false, "constructor": false}, {"identifier": "getGitHubScripts", "parameters": "(User user, boolean refresh)", "modifiers": "@GetMapping(\"/github\") public", "return": "Map<String, List<GHTreeEntry>>", "signature": "Map<String, List<GHTreeEntry>> getGitHubScripts(User user, boolean refresh)", "full_signature": "@GetMapping(\"/github\") public Map<String, List<GHTreeEntry>> getGitHubScripts(User user, boolean refresh)", "class_method_signature": "FileEntryApiController.getGitHubScripts(User user, boolean refresh)", "testcase": false, "constructor": false}, {"identifier": "validateGithubConfig", "parameters": "(@RequestBody FileEntry fileEntry)", "modifiers": "@PostMapping(\"/github/validate\") public", "return": "void", "signature": "void validateGithubConfig(@RequestBody FileEntry fileEntry)", "full_signature": "@PostMapping(\"/github/validate\") public void validateGithubConfig(@RequestBody FileEntry fileEntry)", "class_method_signature": "FileEntryApiController.validateGithubConfig(@RequestBody FileEntry fileEntry)", "testcase": false, "constructor": false}], "file": "ngrinder-controller/src/main/java/org/ngrinder/script/controller/FileEntryApiController.java"}, "focal_method": {"identifier": "download", "parameters": "(User user, @RemainedPath String path, HttpServletResponse response)", "modifiers": "@GetMapping(\"/download/**\") public", "return": "void", "body": "@GetMapping(\"/download/**\")\n\tpublic void download(User user, @RemainedPath String path, HttpServletResponse response) {\n\t\tFileEntry fileEntry = fileEntryService.getOne(user, path);\n\t\tif (fileEntry == null) {\n\t\t\tLOG.error(\"{} requested to download not existing file entity {}\", user.getUserId(), path);\n\t\t\tthrow new NGrinderRuntimeException(\"download requested file not exists in file entity \" + path);\n\t\t}\n\n\t\tresponse.reset();\n\n\t\tresponse.setContentType(\"application/octet-stream; charset=UTF-8\");\n\t\tContentDisposition contentDisposition = ContentDisposition.builder(\"attachment\")\n\t\t\t.filename(fileEntry.getFileName(), StandardCharsets.UTF_8)\n\t\t\t.build();\n\t\tresponse.setHeader(\"Content-Disposition\", contentDisposition.toString());\n\t\tresponse.addHeader(\"Content-Length\", \"\" + fileEntry.getFileSize());\n\n\t\ttry (ByteArrayInputStream fis = new ByteArrayInputStream(fileEntry.getContentBytes());\n\t\t\tOutputStream os = new BufferedOutputStream(response.getOutputStream())) {\n\t\t\tIOUtils.copy(fis, os);\n\t\t} catch (IOException e) {\n\t\t\tthrow processException(\"error while download file\", e);\n\t\t}\n\t}", "signature": "void download(User user, @RemainedPath String path, HttpServletResponse response)", "full_signature": "@GetMapping(\"/download/**\") public void download(User user, @RemainedPath String path, HttpServletResponse response)", "class_method_signature": "FileEntryApiController.download(User user, @RemainedPath String path, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["getOne", "error", "getUserId", "reset", "setContentType", "build", "filename", "builder", "getFileName", "setHeader", "toString", "addHeader", "getFileSize", "getContentBytes", "getOutputStream", "copy", "processException"]}, "repository": {"repo_id": 4709330, "url": "https://github.com/naver/ngrinder", "stars": 1044, "created": "6/19/2012 4:14:15 AM +00:00", "updates": "2020-01-22T18:51:58+00:00", "fork": "False", "license": "licensed"}}