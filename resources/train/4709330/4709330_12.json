{"test_class": {"identifier": "DateUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "ngrinder-core/src/test/java/org/ngrinder/common/util/DateUtilsTest.java"}, "test_case": {"identifier": "testAddDay", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddDay() {\n\t\tDate newDate = DateUtils.addDay(new Date(), 5);\n\t\tassertThat(newDate, notNullValue());\n\t}", "signature": "void testAddDay()", "full_signature": "@Test public void testAddDay()", "class_method_signature": "DateUtilsTest.testAddDay()", "testcase": true, "constructor": false, "invocations": ["addDay", "assertThat", "notNullValue"]}, "focal_class": {"identifier": "DateUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CONSTANT_10 = 10;", "modifier": "private static final", "type": "int", "declarator": "CONSTANT_10 = 10", "var_name": "CONSTANT_10"}, {"original_string": "private static final int CONSTANT_24 = 24;", "modifier": "private static final", "type": "int", "declarator": "CONSTANT_24 = 24", "var_name": "CONSTANT_24"}, {"original_string": "private static final int CONSTANT_60 = 60;", "modifier": "private static final", "type": "int", "declarator": "CONSTANT_60 = 60", "var_name": "CONSTANT_60"}, {"original_string": "private static final int CONSTANT_1000 = 1000;", "modifier": "private static final", "type": "int", "declarator": "CONSTANT_1000 = 1000", "var_name": "CONSTANT_1000"}, {"original_string": "private static final int SS = CONSTANT_1000;", "modifier": "private static final", "type": "int", "declarator": "SS = CONSTANT_1000", "var_name": "SS"}, {"original_string": "private static final int MI = SS * CONSTANT_60;", "modifier": "private static final", "type": "int", "declarator": "MI = SS * CONSTANT_60", "var_name": "MI"}, {"original_string": "private static final int HH = MI * CONSTANT_60;", "modifier": "private static final", "type": "int", "declarator": "HH = MI * CONSTANT_60", "var_name": "HH"}, {"original_string": "private static final int DD = HH * CONSTANT_24;", "modifier": "private static final", "type": "int", "declarator": "DD = HH * CONSTANT_24", "var_name": "DD"}, {"original_string": "private static Map<String, String> timezoneIDMap;", "modifier": "private static", "type": "Map<String, String>", "declarator": "timezoneIDMap", "var_name": "timezoneIDMap"}], "methods": [{"identifier": "getCollectTimeInLong", "parameters": "(Date date)", "modifiers": "public static", "return": "long", "signature": "long getCollectTimeInLong(Date date)", "full_signature": "public static long getCollectTimeInLong(Date date)", "class_method_signature": "DateUtils.getCollectTimeInLong(Date date)", "testcase": false, "constructor": false}, {"identifier": "convertToServerDate", "parameters": "(String userTimeZone, Date userDate)", "modifiers": "public static", "return": "Date", "signature": "Date convertToServerDate(String userTimeZone, Date userDate)", "full_signature": "public static Date convertToServerDate(String userTimeZone, Date userDate)", "class_method_signature": "DateUtils.convertToServerDate(String userTimeZone, Date userDate)", "testcase": false, "constructor": false}, {"identifier": "convertToUserDate", "parameters": "(String userTimeZone, Date serverDate)", "modifiers": "public static", "return": "Date", "signature": "Date convertToUserDate(String userTimeZone, Date serverDate)", "full_signature": "public static Date convertToUserDate(String userTimeZone, Date serverDate)", "class_method_signature": "DateUtils.convertToUserDate(String userTimeZone, Date serverDate)", "testcase": false, "constructor": false}, {"identifier": "dateToString", "parameters": "(Date date)", "modifiers": "public static", "return": "String", "signature": "String dateToString(Date date)", "full_signature": "public static String dateToString(Date date)", "class_method_signature": "DateUtils.dateToString(Date date)", "testcase": false, "constructor": false}, {"identifier": "getFilteredTimeZoneMap", "parameters": "()", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getFilteredTimeZoneMap()", "full_signature": "public static Map<String, String> getFilteredTimeZoneMap()", "class_method_signature": "DateUtils.getFilteredTimeZoneMap()", "testcase": false, "constructor": false}, {"identifier": "toSimpleDate", "parameters": "(String strDate)", "modifiers": "public static", "return": "Date", "signature": "Date toSimpleDate(String strDate)", "full_signature": "public static Date toSimpleDate(String strDate)", "class_method_signature": "DateUtils.toSimpleDate(String strDate)", "testcase": false, "constructor": false}, {"identifier": "toDate", "parameters": "(String strDate)", "modifiers": "public static", "return": "Date", "signature": "Date toDate(String strDate)", "full_signature": "public static Date toDate(String strDate)", "class_method_signature": "DateUtils.toDate(String strDate)", "testcase": false, "constructor": false}, {"identifier": "addDay", "parameters": "(Date date, int days)", "modifiers": "public static", "return": "Date", "signature": "Date addDay(Date date, int days)", "full_signature": "public static Date addDay(Date date, int days)", "class_method_signature": "DateUtils.addDay(Date date, int days)", "testcase": false, "constructor": false}, {"identifier": "ms2Time", "parameters": "(long ms)", "modifiers": "public static", "return": "String", "signature": "String ms2Time(long ms)", "full_signature": "public static String ms2Time(long ms)", "class_method_signature": "DateUtils.ms2Time(long ms)", "testcase": false, "constructor": false}, {"identifier": "timeToMs", "parameters": "(int day, int hour, int min, int sec)", "modifiers": "public static", "return": "long", "signature": "long timeToMs(int day, int hour, int min, int sec)", "full_signature": "public static long timeToMs(int day, int hour, int min, int sec)", "class_method_signature": "DateUtils.timeToMs(int day, int hour, int min, int sec)", "testcase": false, "constructor": false}, {"identifier": "compareDateEndWithMinute", "parameters": "(Date d1, Date d2)", "modifiers": "public static", "return": "boolean", "signature": "boolean compareDateEndWithMinute(Date d1, Date d2)", "full_signature": "public static boolean compareDateEndWithMinute(Date d1, Date d2)", "class_method_signature": "DateUtils.compareDateEndWithMinute(Date d1, Date d2)", "testcase": false, "constructor": false}], "file": "ngrinder-core/src/main/java/org/ngrinder/common/util/DateUtils.java"}, "focal_method": {"identifier": "addDay", "parameters": "(Date date, int days)", "modifiers": "public static", "return": "Date", "body": "public static Date addDay(Date date, int days) {\n\t\tCalendar cal = new GregorianCalendar();\n\t\tcal.setTime(date);\n\t\tcal.add(Calendar.DAY_OF_YEAR, days);\n\t\treturn cal.getTime();\n\t}", "signature": "Date addDay(Date date, int days)", "full_signature": "public static Date addDay(Date date, int days)", "class_method_signature": "DateUtils.addDay(Date date, int days)", "testcase": false, "constructor": false, "invocations": ["setTime", "add", "getTime"]}, "repository": {"repo_id": 4709330, "url": "https://github.com/naver/ngrinder", "stars": 1044, "created": "6/19/2012 4:14:15 AM +00:00", "updates": "2020-01-22T18:51:58+00:00", "fork": "False", "license": "licensed"}}