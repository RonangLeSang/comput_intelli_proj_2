{"test_class": {"identifier": "SingleConsoleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "double errorCount = 0;", "modifier": "", "type": "double", "declarator": "errorCount = 0", "var_name": "errorCount"}, {"original_string": "public Date current = new Date();", "modifier": "public", "type": "Date", "declarator": "current = new Date()", "var_name": "current"}, {"original_string": "public boolean canceled = false;", "modifier": "public", "type": "boolean", "declarator": "canceled = false", "var_name": "canceled"}, {"original_string": "public double testCount = 10D;", "modifier": "public", "type": "double", "declarator": "testCount = 10D", "var_name": "testCount"}], "file": "ngrinder-core/src/test/java/net/grinder/SingleConsoleTest.java"}, "test_case": {"identifier": "testCurrentRunningTimeOverDuration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCurrentRunningTimeOverDuration() {\n\t\tSingleConsole singleConsole = new SingleConsole(getFreePort()) {\n\n\t\t\tpublic long getCurrentRunningTime() {\n\t\t\t\treturn new Date().getTime() - current.getTime();\n\t\t\t}\n\t\t};\n\t\tThreadUtils.sleep(200);\n\t\tassertThat(singleConsole.isCurrentRunningTimeOverDuration(1000), is(false));\n\t\tThreadUtils.sleep(800);\n\t\tassertThat(singleConsole.isCurrentRunningTimeOverDuration(1000), is(true));\n\t}", "signature": "void testCurrentRunningTimeOverDuration()", "full_signature": "@Test public void testCurrentRunningTimeOverDuration()", "class_method_signature": "SingleConsoleTest.testCurrentRunningTimeOverDuration()", "testcase": true, "constructor": false, "invocations": ["getFreePort", "getTime", "getTime", "sleep", "assertThat", "isCurrentRunningTimeOverDuration", "is", "sleep", "assertThat", "isCurrentRunningTimeOverDuration", "is"]}, "focal_class": {"identifier": "SingleConsole", "superclass": "extends AbstractSingleConsole", "interfaces": "implements Listener, SampleListener, AcceptDistFilesDigestListener", "fields": [{"original_string": "private static final String RESOURCE_CONSOLE = \"net.grinder.console.common.resources.Console\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_CONSOLE = \"net.grinder.console.common.resources.Console\"", "var_name": "RESOURCE_CONSOLE"}, {"original_string": "private Thread consoleFoundationThread;", "modifier": "private", "type": "Thread", "declarator": "consoleFoundationThread", "var_name": "consoleFoundationThread"}, {"original_string": "private ConsoleFoundationEx consoleFoundation;", "modifier": "private", "type": "ConsoleFoundationEx", "declarator": "consoleFoundation", "var_name": "consoleFoundation"}, {"original_string": "public static final Resources RESOURCE = new ResourcesImplementation(RESOURCE_CONSOLE);", "modifier": "public static final", "type": "Resources", "declarator": "RESOURCE = new ResourcesImplementation(RESOURCE_CONSOLE)", "var_name": "RESOURCE"}, {"original_string": "public static final Logger LOGGER = LoggerFactory.getLogger(\"console\");", "modifier": "public static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(\"console\")", "var_name": "LOGGER"}, {"original_string": "public static final String REPORT_DATA = \".data\";", "modifier": "public static final", "type": "String", "declarator": "REPORT_DATA = \".data\"", "var_name": "REPORT_DATA"}, {"original_string": "private static final String REPORT_CSV = \"output.csv\";", "modifier": "private static final", "type": "String", "declarator": "REPORT_CSV = \"output.csv\"", "var_name": "REPORT_CSV"}, {"original_string": "private static final int NUM_OF_SEND_FILE_DIGEST_THREAD = 3;", "modifier": "private static final", "type": "int", "declarator": "NUM_OF_SEND_FILE_DIGEST_THREAD = 3", "var_name": "NUM_OF_SEND_FILE_DIGEST_THREAD"}, {"original_string": "private final Condition eventSyncCondition = new Condition();", "modifier": "private final", "type": "Condition", "declarator": "eventSyncCondition = new Condition()", "var_name": "eventSyncCondition"}, {"original_string": "private ProcessReports[] processReports;", "modifier": "private", "type": "ProcessReports[]", "declarator": "processReports", "var_name": "processReports"}, {"original_string": "private CopyOnWriteArrayList<Set<String>> agentCachedDistFilesDigestList = new CopyOnWriteArrayList<>();", "modifier": "private", "type": "CopyOnWriteArrayList<Set<String>>", "declarator": "agentCachedDistFilesDigestList = new CopyOnWriteArrayList<>()", "var_name": "agentCachedDistFilesDigestList"}, {"original_string": "private boolean cancel = false;", "modifier": "private", "type": "boolean", "declarator": "cancel = false", "var_name": "cancel"}, {"original_string": "private double tpsValue = 0;", "modifier": "private", "type": "double", "declarator": "tpsValue = 0", "var_name": "tpsValue"}, {"original_string": "private double peakTpsForGraph = 0;", "modifier": "private", "type": "double", "declarator": "peakTpsForGraph = 0", "var_name": "peakTpsForGraph"}, {"original_string": "private SampleModel sampleModel;", "modifier": "private", "type": "SampleModel", "declarator": "sampleModel", "var_name": "sampleModel"}, {"original_string": "private SampleModelViews modelView;", "modifier": "private", "type": "SampleModelViews", "declarator": "modelView", "var_name": "modelView"}, {"original_string": "private long startTime = 0;", "modifier": "private", "type": "long", "declarator": "startTime = 0", "var_name": "startTime"}, {"original_string": "private long momentWhenTpsBeganToHaveVerySmall;", "modifier": "private", "type": "long", "declarator": "momentWhenTpsBeganToHaveVerySmall", "var_name": "momentWhenTpsBeganToHaveVerySmall"}, {"original_string": "private final ListenerSupport<ConsoleShutdownListener> shutdownListener = ListenerHelper.create();", "modifier": "private final", "type": "ListenerSupport<ConsoleShutdownListener>", "declarator": "shutdownListener = ListenerHelper.create()", "var_name": "shutdownListener"}, {"original_string": "private final ListenerSupport<SamplingLifeCycleListener> samplingLifeCycleListener = ListenerHelper.create();", "modifier": "private final", "type": "ListenerSupport<SamplingLifeCycleListener>", "declarator": "samplingLifeCycleListener = ListenerHelper.create()", "var_name": "samplingLifeCycleListener"}, {"original_string": "private final ListenerSupport<SamplingLifeCycleFollowUpListener> samplingLifeCycleFollowupListener = ListenerHelper\n\t\t\t.create();", "modifier": "private final", "type": "ListenerSupport<SamplingLifeCycleFollowUpListener>", "declarator": "samplingLifeCycleFollowupListener = ListenerHelper\n\t\t\t.create()", "var_name": "samplingLifeCycleFollowupListener"}, {"original_string": "public static final int MIN_SAMPLING_INTERVAL_TO_ACTIVATE_TPS_PER_TEST = 3000;", "modifier": "public static final", "type": "int", "declarator": "MIN_SAMPLING_INTERVAL_TO_ACTIVATE_TPS_PER_TEST = 3000", "var_name": "MIN_SAMPLING_INTERVAL_TO_ACTIVATE_TPS_PER_TEST"}, {"original_string": "private boolean capture = false;", "modifier": "private", "type": "boolean", "declarator": "capture = false", "var_name": "capture"}, {"original_string": "private File reportPath;", "modifier": "private", "type": "File", "declarator": "reportPath", "var_name": "reportPath"}, {"original_string": "private Map<String, Object> statisticData;", "modifier": "private", "type": "Map<String, Object>", "declarator": "statisticData", "var_name": "statisticData"}, {"original_string": "private boolean headerAdded = false;", "modifier": "private", "type": "boolean", "declarator": "headerAdded = false", "var_name": "headerAdded"}, {"original_string": "private GrinderProperties properties;", "modifier": "private", "type": "GrinderProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private Map<String, BufferedWriter> fileWriterMap = newHashMap();", "modifier": "private", "type": "Map<String, BufferedWriter>", "declarator": "fileWriterMap = newHashMap()", "var_name": "fileWriterMap"}, {"original_string": "private long samplingCount = 0;", "modifier": "private", "type": "long", "declarator": "samplingCount = 0", "var_name": "samplingCount"}, {"original_string": "private int runningThread = 0;", "modifier": "private", "type": "int", "declarator": "runningThread = 0", "var_name": "runningThread"}, {"original_string": "private int runningProcess = 0;", "modifier": "private", "type": "int", "declarator": "runningProcess = 0", "var_name": "runningProcess"}, {"original_string": "private int currentNotFinishedProcessCount = 0;", "modifier": "private", "type": "int", "declarator": "currentNotFinishedProcessCount = 0", "var_name": "currentNotFinishedProcessCount"}, {"original_string": "private static final int TOO_LOW_TPS_TIME = 60000;", "modifier": "private static final", "type": "int", "declarator": "TOO_LOW_TPS_TIME = 60000", "var_name": "TOO_LOW_TPS_TIME"}, {"original_string": "private static final int TOO_MANY_ERROR_TIME = 10000;", "modifier": "private static final", "type": "int", "declarator": "TOO_MANY_ERROR_TIME = 10000", "var_name": "TOO_MANY_ERROR_TIME"}, {"original_string": "private Map<Test, StatisticsSet> intervalStatisticMapPerTest = Collections\n\t\t\t.synchronizedMap(new LinkedHashMap<Test, StatisticsSet>());", "modifier": "private", "type": "Map<Test, StatisticsSet>", "declarator": "intervalStatisticMapPerTest = Collections\n\t\t\t.synchronizedMap(new LinkedHashMap<Test, StatisticsSet>())", "var_name": "intervalStatisticMapPerTest"}, {"original_string": "private Map<Test, StatisticsSet> accumulatedStatisticMapPerTest = Collections\n\t\t\t.synchronizedMap(new LinkedHashMap<Test, StatisticsSet>());", "modifier": "private", "type": "Map<Test, StatisticsSet>", "declarator": "accumulatedStatisticMapPerTest = Collections\n\t\t\t.synchronizedMap(new LinkedHashMap<Test, StatisticsSet>())", "var_name": "accumulatedStatisticMapPerTest"}, {"original_string": "private String cvsSeparator = \",\";", "modifier": "private", "type": "String", "declarator": "cvsSeparator = \",\"", "var_name": "cvsSeparator"}, {"original_string": "private ExpressionView[] expressionViews = null;", "modifier": "private", "type": "ExpressionView[]", "declarator": "expressionViews = null", "var_name": "expressionViews"}, {"original_string": "private Set<Entry<String, StatisticExpression>> statisticExpressionMap;", "modifier": "private", "type": "Set<Entry<String, StatisticExpression>>", "declarator": "statisticExpressionMap", "var_name": "statisticExpressionMap"}, {"original_string": "private long lastSamplingPeriod = 0;", "modifier": "private", "type": "long", "declarator": "lastSamplingPeriod = 0", "var_name": "lastSamplingPeriod"}, {"original_string": "private static final Set<String> INTERESTING_PER_TEST_STATISTICS = Sets.newHashSet(\"Errors\", \"TPS\",\n\t\t\t\"Mean_time_to_first_byte\", \"Mean_Test_Time_(ms)\");", "modifier": "private static final", "type": "Set<String>", "declarator": "INTERESTING_PER_TEST_STATISTICS = Sets.newHashSet(\"Errors\", \"TPS\",\n\t\t\t\"Mean_time_to_first_byte\", \"Mean_Test_Time_(ms)\")", "var_name": "INTERESTING_PER_TEST_STATISTICS"}, {"original_string": "private static final Set<String> INTERESTING_STATISTICS = Sets.newHashSet(\"Tests\", \"Errors\", \"TPS\",\n\t\t\t\"Response_bytes_per_second\", \"Mean_time_to_first_byte\", \"Peak_TPS\", \"Mean_Test_Time_(ms)\");", "modifier": "private static final", "type": "Set<String>", "declarator": "INTERESTING_STATISTICS = Sets.newHashSet(\"Tests\", \"Errors\", \"TPS\",\n\t\t\t\"Response_bytes_per_second\", \"Mean_time_to_first_byte\", \"Peak_TPS\", \"Mean_Test_Time_(ms)\")", "var_name": "INTERESTING_STATISTICS"}], "methods": [{"identifier": "SingleConsole", "parameters": "(int port)", "modifiers": "public", "return": "", "signature": " SingleConsole(int port)", "full_signature": "public  SingleConsole(int port)", "class_method_signature": "SingleConsole.SingleConsole(int port)", "testcase": false, "constructor": true}, {"identifier": "SingleConsole", "parameters": "(String ip, int port, ConsoleCommunicationSetting consoleCommunicationSetting,\n\t\t\t\t\t\t ConsoleProperties consoleProperties)", "modifiers": "public", "return": "", "signature": " SingleConsole(String ip, int port, ConsoleCommunicationSetting consoleCommunicationSetting,\n\t\t\t\t\t\t ConsoleProperties consoleProperties)", "full_signature": "public  SingleConsole(String ip, int port, ConsoleCommunicationSetting consoleCommunicationSetting,\n\t\t\t\t\t\t ConsoleProperties consoleProperties)", "class_method_signature": "SingleConsole.SingleConsole(String ip, int port, ConsoleCommunicationSetting consoleCommunicationSetting,\n\t\t\t\t\t\t ConsoleProperties consoleProperties)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(String ip, int port, ConsoleCommunicationSetting consoleCommunicationSetting,\n\t\t\t\t\t\tConsoleProperties consoleProperties)", "modifiers": "protected", "return": "void", "signature": "void init(String ip, int port, ConsoleCommunicationSetting consoleCommunicationSetting,\n\t\t\t\t\t\tConsoleProperties consoleProperties)", "full_signature": "protected void init(String ip, int port, ConsoleCommunicationSetting consoleCommunicationSetting,\n\t\t\t\t\t\tConsoleProperties consoleProperties)", "class_method_signature": "SingleConsole.init(String ip, int port, ConsoleCommunicationSetting consoleCommunicationSetting,\n\t\t\t\t\t\tConsoleProperties consoleProperties)", "testcase": false, "constructor": false}, {"identifier": "getConsolePort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getConsolePort()", "full_signature": "public int getConsolePort()", "class_method_signature": "SingleConsole.getConsolePort()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "SingleConsole.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "SingleConsole.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getAllAttachedAgentsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAllAttachedAgentsCount()", "full_signature": "public int getAllAttachedAgentsCount()", "class_method_signature": "SingleConsole.getAllAttachedAgentsCount()", "testcase": false, "constructor": false}, {"identifier": "getConsoleFoundation", "parameters": "()", "modifiers": "protected", "return": "ConsoleFoundationEx", "signature": "ConsoleFoundationEx getConsoleFoundation()", "full_signature": "protected ConsoleFoundationEx getConsoleFoundation()", "class_method_signature": "SingleConsole.getConsoleFoundation()", "testcase": false, "constructor": false}, {"identifier": "getAllAttachedAgents", "parameters": "()", "modifiers": "public", "return": "List<AgentIdentity>", "signature": "List<AgentIdentity> getAllAttachedAgents()", "full_signature": "public List<AgentIdentity> getAllAttachedAgents()", "class_method_signature": "SingleConsole.getAllAttachedAgents()", "testcase": false, "constructor": false}, {"identifier": "getConsoleComponent", "parameters": "(Class<T> componentType)", "modifiers": "public", "return": "T", "signature": "T getConsoleComponent(Class<T> componentType)", "full_signature": "public T getConsoleComponent(Class<T> componentType)", "class_method_signature": "SingleConsole.getConsoleComponent(Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "getConsoleProperties", "parameters": "()", "modifiers": "public", "return": "ConsoleProperties", "signature": "ConsoleProperties getConsoleProperties()", "full_signature": "public ConsoleProperties getConsoleProperties()", "class_method_signature": "SingleConsole.getConsoleProperties()", "testcase": false, "constructor": false}, {"identifier": "startTest", "parameters": "(GrinderProperties properties)", "modifiers": "public", "return": "long", "signature": "long startTest(GrinderProperties properties)", "full_signature": "public long startTest(GrinderProperties properties)", "class_method_signature": "SingleConsole.startTest(GrinderProperties properties)", "testcase": false, "constructor": false}, {"identifier": "setDistributionDirectory", "parameters": "(File filePath)", "modifiers": "public", "return": "void", "signature": "void setDistributionDirectory(File filePath)", "full_signature": "public void setDistributionDirectory(File filePath)", "class_method_signature": "SingleConsole.setDistributionDirectory(File filePath)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "SingleConsole.cancel()", "testcase": false, "constructor": false}, {"identifier": "shouldEnable", "parameters": "(FileDistribution fileDistribution)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldEnable(FileDistribution fileDistribution)", "full_signature": "private boolean shouldEnable(FileDistribution fileDistribution)", "class_method_signature": "SingleConsole.shouldEnable(FileDistribution fileDistribution)", "testcase": false, "constructor": false}, {"identifier": "distributeFiles", "parameters": "(File filePath, ListenerSupport<FileDistributionListener> listener, boolean safe)", "modifiers": "public", "return": "void", "signature": "void distributeFiles(File filePath, ListenerSupport<FileDistributionListener> listener, boolean safe)", "full_signature": "public void distributeFiles(File filePath, ListenerSupport<FileDistributionListener> listener, boolean safe)", "class_method_signature": "SingleConsole.distributeFiles(File filePath, ListenerSupport<FileDistributionListener> listener, boolean safe)", "testcase": false, "constructor": false}, {"identifier": "getConsoleIP", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getConsoleIP()", "full_signature": "public String getConsoleIP()", "class_method_signature": "SingleConsole.getConsoleIP()", "testcase": false, "constructor": false}, {"identifier": "onAcceptDistFilesDigestListener", "parameters": "(Set<String> distFilesDigest)", "modifiers": "@Override public", "return": "void", "signature": "void onAcceptDistFilesDigestListener(Set<String> distFilesDigest)", "full_signature": "@Override public void onAcceptDistFilesDigestListener(Set<String> distFilesDigest)", "class_method_signature": "SingleConsole.onAcceptDistFilesDigestListener(Set<String> distFilesDigest)", "testcase": false, "constructor": false}, {"identifier": "sendDistFilesDigestToAgents", "parameters": "(Set<String> distFilesDigest)", "modifiers": "public", "return": "void", "signature": "void sendDistFilesDigestToAgents(Set<String> distFilesDigest)", "full_signature": "public void sendDistFilesDigestToAgents(Set<String> distFilesDigest)", "class_method_signature": "SingleConsole.sendDistFilesDigestToAgents(Set<String> distFilesDigest)", "testcase": false, "constructor": false}, {"identifier": "distributeFiles", "parameters": "(ListenerSupport<FileDistributionListener> listener, final boolean safe)", "modifiers": "public", "return": "void", "signature": "void distributeFiles(ListenerSupport<FileDistributionListener> listener, final boolean safe)", "full_signature": "public void distributeFiles(ListenerSupport<FileDistributionListener> listener, final boolean safe)", "class_method_signature": "SingleConsole.distributeFiles(ListenerSupport<FileDistributionListener> listener, final boolean safe)", "testcase": false, "constructor": false}, {"identifier": "checkSafetyWithCacheState", "parameters": "(final FileDistribution fileDistribution,\n\t\t\t\t\t\t\t\t\t\t   final Condition cacheStateCondition, int fileCount)", "modifiers": "private", "return": "void", "signature": "void checkSafetyWithCacheState(final FileDistribution fileDistribution,\n\t\t\t\t\t\t\t\t\t\t   final Condition cacheStateCondition, int fileCount)", "full_signature": "private void checkSafetyWithCacheState(final FileDistribution fileDistribution,\n\t\t\t\t\t\t\t\t\t\t   final Condition cacheStateCondition, int fileCount)", "class_method_signature": "SingleConsole.checkSafetyWithCacheState(final FileDistribution fileDistribution,\n\t\t\t\t\t\t\t\t\t\t   final Condition cacheStateCondition, int fileCount)", "testcase": false, "constructor": false}, {"identifier": "waitUntilAgentPrepared", "parameters": "(int size)", "modifiers": "public", "return": "void", "signature": "void waitUntilAgentPrepared(int size)", "full_signature": "public void waitUntilAgentPrepared(int size)", "class_method_signature": "SingleConsole.waitUntilAgentPrepared(int size)", "testcase": false, "constructor": false}, {"identifier": "waitUntilAllAgentDisconnected", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void waitUntilAllAgentDisconnected()", "full_signature": "public void waitUntilAllAgentDisconnected()", "class_method_signature": "SingleConsole.waitUntilAllAgentDisconnected()", "testcase": false, "constructor": false}, {"identifier": "isAllTestFinished", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllTestFinished()", "full_signature": "public boolean isAllTestFinished()", "class_method_signature": "SingleConsole.isAllTestFinished()", "testcase": false, "constructor": false}, {"identifier": "setTpsValue", "parameters": "(double newValue)", "modifiers": "public", "return": "void", "signature": "void setTpsValue(double newValue)", "full_signature": "public void setTpsValue(double newValue)", "class_method_signature": "SingleConsole.setTpsValue(double newValue)", "testcase": false, "constructor": false}, {"identifier": "getTpsValues", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTpsValues()", "full_signature": "public double getTpsValues()", "class_method_signature": "SingleConsole.getTpsValues()", "testcase": false, "constructor": false}, {"identifier": "getCurrentRunningTime", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCurrentRunningTime()", "full_signature": "@Override public long getCurrentRunningTime()", "class_method_signature": "SingleConsole.getCurrentRunningTime()", "testcase": false, "constructor": false}, {"identifier": "getStatisticsIndexMap", "parameters": "()", "modifiers": "public", "return": "StatisticsIndexMap", "signature": "StatisticsIndexMap getStatisticsIndexMap()", "full_signature": "public StatisticsIndexMap getStatisticsIndexMap()", "class_method_signature": "SingleConsole.getStatisticsIndexMap()", "testcase": false, "constructor": false}, {"identifier": "getExpressionView", "parameters": "()", "modifiers": "public", "return": "ExpressionView[]", "signature": "ExpressionView[] getExpressionView()", "full_signature": "public ExpressionView[] getExpressionView()", "class_method_signature": "SingleConsole.getExpressionView()", "testcase": false, "constructor": false}, {"identifier": "getExpressionEntrySet", "parameters": "()", "modifiers": "public", "return": "Set<Entry<String, StatisticExpression>>", "signature": "Set<Entry<String, StatisticExpression>> getExpressionEntrySet()", "full_signature": "public Set<Entry<String, StatisticExpression>> getExpressionEntrySet()", "class_method_signature": "SingleConsole.getExpressionEntrySet()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final StatisticsSet intervalStatistics, final StatisticsSet cumulativeStatistics)", "modifiers": "@Override public", "return": "void", "signature": "void update(final StatisticsSet intervalStatistics, final StatisticsSet cumulativeStatistics)", "full_signature": "@Override public void update(final StatisticsSet intervalStatistics, final StatisticsSet cumulativeStatistics)", "class_method_signature": "SingleConsole.update(final StatisticsSet intervalStatistics, final StatisticsSet cumulativeStatistics)", "testcase": false, "constructor": false}, {"identifier": "writeIntervalSummaryDataPerTest", "parameters": "(Map<Test, StatisticsSet> intervalStatisticMapPerTest, boolean lastCall)", "modifiers": "private", "return": "void", "signature": "void writeIntervalSummaryDataPerTest(Map<Test, StatisticsSet> intervalStatisticMapPerTest, boolean lastCall)", "full_signature": "private void writeIntervalSummaryDataPerTest(Map<Test, StatisticsSet> intervalStatisticMapPerTest, boolean lastCall)", "class_method_signature": "SingleConsole.writeIntervalSummaryDataPerTest(Map<Test, StatisticsSet> intervalStatisticMapPerTest, boolean lastCall)", "testcase": false, "constructor": false}, {"identifier": "writeIntervalSummaryData", "parameters": "(StatisticsSet intervalStatistics, boolean firstCall)", "modifiers": "public", "return": "void", "signature": "void writeIntervalSummaryData(StatisticsSet intervalStatistics, boolean firstCall)", "full_signature": "public void writeIntervalSummaryData(StatisticsSet intervalStatistics, boolean firstCall)", "class_method_signature": "SingleConsole.writeIntervalSummaryData(StatisticsSet intervalStatistics, boolean firstCall)", "testcase": false, "constructor": false}, {"identifier": "writeIntervalCsvData", "parameters": "(StatisticsSet intervalStatistics)", "modifiers": "public", "return": "void", "signature": "void writeIntervalCsvData(StatisticsSet intervalStatistics)", "full_signature": "public void writeIntervalCsvData(StatisticsSet intervalStatistics)", "class_method_signature": "SingleConsole.writeIntervalCsvData(StatisticsSet intervalStatistics)", "testcase": false, "constructor": false}, {"identifier": "checkTooLowTps", "parameters": "(double tps)", "modifiers": "private", "return": "void", "signature": "void checkTooLowTps(double tps)", "full_signature": "private void checkTooLowTps(double tps)", "class_method_signature": "SingleConsole.checkTooLowTps(double tps)", "testcase": false, "constructor": false}, {"identifier": "isPerfTestInterestingStatistics", "parameters": "(String key)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPerfTestInterestingStatistics(String key)", "full_signature": "public static boolean isPerfTestInterestingStatistics(String key)", "class_method_signature": "SingleConsole.isPerfTestInterestingStatistics(String key)", "testcase": false, "constructor": false}, {"identifier": "isInterestingStatistics", "parameters": "(String key)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInterestingStatistics(String key)", "full_signature": "public static boolean isInterestingStatistics(String key)", "class_method_signature": "SingleConsole.isInterestingStatistics(String key)", "testcase": false, "constructor": false}, {"identifier": "updateStatistics", "parameters": "(StatisticsSet intervalStatistics, StatisticsSet accumulatedStatistics)", "modifiers": "protected", "return": "void", "signature": "void updateStatistics(StatisticsSet intervalStatistics, StatisticsSet accumulatedStatistics)", "full_signature": "protected void updateStatistics(StatisticsSet intervalStatistics, StatisticsSet accumulatedStatistics)", "class_method_signature": "SingleConsole.updateStatistics(StatisticsSet intervalStatistics, StatisticsSet accumulatedStatistics)", "testcase": false, "constructor": false}, {"identifier": "getCurrentExecutionCount", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCurrentExecutionCount()", "full_signature": "@Override public long getCurrentExecutionCount()", "class_method_signature": "SingleConsole.getCurrentExecutionCount()", "testcase": false, "constructor": false}, {"identifier": "getRealDoubleValue", "parameters": "(Double doubleValue)", "modifiers": "private static", "return": "Object", "signature": "Object getRealDoubleValue(Double doubleValue)", "full_signature": "private static Object getRealDoubleValue(Double doubleValue)", "class_method_signature": "SingleConsole.getRealDoubleValue(Double doubleValue)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "()", "modifiers": "public", "return": "ListenerSupport<ConsoleShutdownListener>", "signature": "ListenerSupport<ConsoleShutdownListener> getListeners()", "full_signature": "public ListenerSupport<ConsoleShutdownListener> getListeners()", "class_method_signature": "SingleConsole.getListeners()", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(ConsoleShutdownListener listener)", "modifiers": "public", "return": "void", "signature": "void addListener(ConsoleShutdownListener listener)", "full_signature": "public void addListener(ConsoleShutdownListener listener)", "class_method_signature": "SingleConsole.addListener(ConsoleShutdownListener listener)", "testcase": false, "constructor": false}, {"identifier": "addSamplingLifeCycleListener", "parameters": "(SamplingLifeCycleListener listener)", "modifiers": "public", "return": "void", "signature": "void addSamplingLifeCycleListener(SamplingLifeCycleListener listener)", "full_signature": "public void addSamplingLifeCycleListener(SamplingLifeCycleListener listener)", "class_method_signature": "SingleConsole.addSamplingLifeCycleListener(SamplingLifeCycleListener listener)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(ProcessReports[] processReports)", "modifiers": "@Override public", "return": "void", "signature": "void update(ProcessReports[] processReports)", "full_signature": "@Override public void update(ProcessReports[] processReports)", "class_method_signature": "SingleConsole.update(ProcessReports[] processReports)", "testcase": false, "constructor": false}, {"identifier": "checkExecutionErrors", "parameters": "(ProcessReports[] processReports)", "modifiers": "private", "return": "void", "signature": "void checkExecutionErrors(ProcessReports[] processReports)", "full_signature": "private void checkExecutionErrors(ProcessReports[] processReports)", "class_method_signature": "SingleConsole.checkExecutionErrors(ProcessReports[] processReports)", "testcase": false, "constructor": false}, {"identifier": "updateCurrentProcessAndThread", "parameters": "(ProcessReports[] processReports)", "modifiers": "private", "return": "void", "signature": "void updateCurrentProcessAndThread(ProcessReports[] processReports)", "full_signature": "private void updateCurrentProcessAndThread(ProcessReports[] processReports)", "class_method_signature": "SingleConsole.updateCurrentProcessAndThread(ProcessReports[] processReports)", "testcase": false, "constructor": false}, {"identifier": "writeReportData", "parameters": "(String name, String value)", "modifiers": "private", "return": "void", "signature": "void writeReportData(String name, String value)", "full_signature": "private void writeReportData(String name, String value)", "class_method_signature": "SingleConsole.writeReportData(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "writeCSVDataLine", "parameters": "(String line)", "modifiers": "private", "return": "void", "signature": "void writeCSVDataLine(String line)", "full_signature": "private void writeCSVDataLine(String line)", "class_method_signature": "SingleConsole.writeCSVDataLine(String line)", "testcase": false, "constructor": false}, {"identifier": "formatValue", "parameters": "(Object val)", "modifiers": "private", "return": "String", "signature": "String formatValue(Object val)", "full_signature": "private String formatValue(Object val)", "class_method_signature": "SingleConsole.formatValue(Object val)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsData", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getStatisticsData()", "full_signature": "public Map<String, Object> getStatisticsData()", "class_method_signature": "SingleConsole.getStatisticsData()", "testcase": false, "constructor": false}, {"identifier": "getNullStatisticsData", "parameters": "()", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> getNullStatisticsData()", "full_signature": "protected Map<String, Object> getNullStatisticsData()", "class_method_signature": "SingleConsole.getNullStatisticsData()", "testcase": false, "constructor": false}, {"identifier": "getReportPath", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getReportPath()", "full_signature": "@Override public File getReportPath()", "class_method_signature": "SingleConsole.getReportPath()", "testcase": false, "constructor": false}, {"identifier": "setReportPath", "parameters": "(File reportPath)", "modifiers": "public", "return": "void", "signature": "void setReportPath(File reportPath)", "full_signature": "public void setReportPath(File reportPath)", "class_method_signature": "SingleConsole.setReportPath(File reportPath)", "testcase": false, "constructor": false}, {"identifier": "sendStopMessageToAgents", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sendStopMessageToAgents()", "full_signature": "public void sendStopMessageToAgents()", "class_method_signature": "SingleConsole.sendStopMessageToAgents()", "testcase": false, "constructor": false}, {"identifier": "startSampling", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startSampling()", "full_signature": "public void startSampling()", "class_method_signature": "SingleConsole.startSampling()", "testcase": false, "constructor": false}, {"identifier": "unregisterSampling", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unregisterSampling()", "full_signature": "public void unregisterSampling()", "class_method_signature": "SingleConsole.unregisterSampling()", "testcase": false, "constructor": false}, {"identifier": "informTestSamplingStart", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void informTestSamplingStart()", "full_signature": "private void informTestSamplingStart()", "class_method_signature": "SingleConsole.informTestSamplingStart()", "testcase": false, "constructor": false}, {"identifier": "informTestSamplingEnd", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void informTestSamplingEnd()", "full_signature": "private void informTestSamplingEnd()", "class_method_signature": "SingleConsole.informTestSamplingEnd()", "testcase": false, "constructor": false}, {"identifier": "getGrinderProperties", "parameters": "()", "modifiers": "public", "return": "GrinderProperties", "signature": "GrinderProperties getGrinderProperties()", "full_signature": "public GrinderProperties getGrinderProperties()", "class_method_signature": "SingleConsole.getGrinderProperties()", "testcase": false, "constructor": false}, {"identifier": "hasTooManyError", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasTooManyError()", "full_signature": "public boolean hasTooManyError()", "class_method_signature": "SingleConsole.hasTooManyError()", "testcase": false, "constructor": false}, {"identifier": "hasNoPerformedTest", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNoPerformedTest()", "full_signature": "public boolean hasNoPerformedTest()", "class_method_signature": "SingleConsole.hasNoPerformedTest()", "testcase": false, "constructor": false}, {"identifier": "isCanceled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCanceled()", "full_signature": "public boolean isCanceled()", "class_method_signature": "SingleConsole.isCanceled()", "testcase": false, "constructor": false}, {"identifier": "isCurrentRunningTimeOverDuration", "parameters": "(long duration)", "modifiers": "public", "return": "boolean", "signature": "boolean isCurrentRunningTimeOverDuration(long duration)", "full_signature": "public boolean isCurrentRunningTimeOverDuration(long duration)", "class_method_signature": "SingleConsole.isCurrentRunningTimeOverDuration(long duration)", "testcase": false, "constructor": false}, {"identifier": "getPeakTpsForGraph", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getPeakTpsForGraph()", "full_signature": "@Override public double getPeakTpsForGraph()", "class_method_signature": "SingleConsole.getPeakTpsForGraph()", "testcase": false, "constructor": false}, {"identifier": "getSampleModel", "parameters": "()", "modifiers": "public", "return": "SampleModelImplementationEx", "signature": "SampleModelImplementationEx getSampleModel()", "full_signature": "public SampleModelImplementationEx getSampleModel()", "class_method_signature": "SingleConsole.getSampleModel()", "testcase": false, "constructor": false}, {"identifier": "setSampleModel", "parameters": "(SampleModel sampleModel)", "modifiers": "public", "return": "void", "signature": "void setSampleModel(SampleModel sampleModel)", "full_signature": "public void setSampleModel(SampleModel sampleModel)", "class_method_signature": "SingleConsole.setSampleModel(SampleModel sampleModel)", "testcase": false, "constructor": false}, {"identifier": "getRunningThread", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRunningThread()", "full_signature": "@Override public int getRunningThread()", "class_method_signature": "SingleConsole.getRunningThread()", "testcase": false, "constructor": false}, {"identifier": "getRunningProcess", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRunningProcess()", "full_signature": "@Override public int getRunningProcess()", "class_method_signature": "SingleConsole.getRunningProcess()", "testcase": false, "constructor": false}, {"identifier": "getAgentCachedDistFilesDigestList", "parameters": "()", "modifiers": "public", "return": "List<Set<String>>", "signature": "List<Set<String>> getAgentCachedDistFilesDigestList()", "full_signature": "public List<Set<String>> getAgentCachedDistFilesDigestList()", "class_method_signature": "SingleConsole.getAgentCachedDistFilesDigestList()", "testcase": false, "constructor": false}, {"identifier": "addSamplingLifeCycleFollowUpCycleListener", "parameters": "(SamplingLifeCycleFollowUpListener listener)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "void", "signature": "void addSamplingLifeCycleFollowUpCycleListener(SamplingLifeCycleFollowUpListener listener)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public void addSamplingLifeCycleFollowUpCycleListener(SamplingLifeCycleFollowUpListener listener)", "class_method_signature": "SingleConsole.addSamplingLifeCycleFollowUpCycleListener(SamplingLifeCycleFollowUpListener listener)", "testcase": false, "constructor": false}, {"identifier": "setCsvSeparator", "parameters": "(String csvSeparator)", "modifiers": "public", "return": "void", "signature": "void setCsvSeparator(String csvSeparator)", "full_signature": "public void setCsvSeparator(String csvSeparator)", "class_method_signature": "SingleConsole.setCsvSeparator(String csvSeparator)", "testcase": false, "constructor": false}], "file": "ngrinder-core/src/main/java/net/grinder/SingleConsole.java"}, "focal_method": {"identifier": "isCurrentRunningTimeOverDuration", "parameters": "(long duration)", "modifiers": "public", "return": "boolean", "body": "public boolean isCurrentRunningTimeOverDuration(long duration) {\n\t\treturn getCurrentRunningTime() > (duration);\n\t}", "signature": "boolean isCurrentRunningTimeOverDuration(long duration)", "full_signature": "public boolean isCurrentRunningTimeOverDuration(long duration)", "class_method_signature": "SingleConsole.isCurrentRunningTimeOverDuration(long duration)", "testcase": false, "constructor": false, "invocations": ["getCurrentRunningTime"]}, "repository": {"repo_id": 4709330, "url": "https://github.com/naver/ngrinder", "stars": 1044, "created": "6/19/2012 4:14:15 AM +00:00", "updates": "2020-01-22T18:51:58+00:00", "fork": "False", "license": "licensed"}}