{"test_class": {"identifier": "SpoonCodeInstrumentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SpoonCodeInstrument spoonCodeInstrument;", "modifier": "", "type": "SpoonCodeInstrument", "declarator": "spoonCodeInstrument", "var_name": "spoonCodeInstrument"}, {"original_string": "TreeView<TextFlow> spoonAST;", "modifier": "", "type": "TreeView<TextFlow>", "declarator": "spoonAST", "var_name": "spoonAST"}, {"original_string": "TextArea spoonCode;", "modifier": "", "type": "TextArea", "declarator": "spoonCode", "var_name": "spoonCode"}, {"original_string": "ComboBox<TreeLevel> treeLevel;", "modifier": "", "type": "ComboBox<TreeLevel>", "declarator": "treeLevel", "var_name": "treeLevel"}, {"original_string": "CheckBox hideImplicit;", "modifier": "", "type": "CheckBox", "declarator": "hideImplicit", "var_name": "hideImplicit"}], "file": "spoon-visualisation/src/test/java/spoon/visualisation/instrument/SpoonCodeInstrumentTest.java"}, "test_case": {"identifier": "testSaveText", "parameters": "(final FxRobot robot, @TempDir final Path tempDir)", "modifiers": "@Disabled(\"Does not work on headless servers\") @Test", "return": "void", "body": "@Disabled(\"Does not work on headless servers\")\n\t@Test\n\tvoid testSaveText(final FxRobot robot, @TempDir final Path tempDir) throws IOException {\n\t\tfinal Path path = tempDir.resolve(\"test.txt\");\n\t\tfinal File file = path.toFile();\n\t\tfinal FileChooser mockChooser = Mockito.mock(FileChooser.class);\n\n\t\tMockito.when(mockChooser.showSaveDialog(null)).thenReturn(file);\n\t\tspoonCodeInstrument.setFileChooser(mockChooser);\n\n\t\trobot.clickOn(spoonCode).write(\"class Foo { int i; }\");\n\t\twaitForTimeoutTransitions();\n\n\t\tfinal Button save = robot.lookup(\"#save\").query();\n\t\trobot.clickOn(save);\n\t\tWaitForAsyncUtils.waitForFxEvents();\n\n\t\tfinal List<String> lines = Files.readAllLines(path);\n\n\t\tassertThat(lines.size()).isEqualTo(3);\n\t\tassertThat(lines.get(0)).contains(\"CtClass\");\n\t\tassertThat(lines).noneMatch(l -> l.contains(\"TextFlow@\"));\n\t}", "signature": "void testSaveText(final FxRobot robot, @TempDir final Path tempDir)", "full_signature": "@Disabled(\"Does not work on headless servers\") @Test void testSaveText(final FxRobot robot, @TempDir final Path tempDir)", "class_method_signature": "SpoonCodeInstrumentTest.testSaveText(final FxRobot robot, @TempDir final Path tempDir)", "testcase": true, "constructor": false, "invocations": ["resolve", "toFile", "mock", "thenReturn", "when", "showSaveDialog", "setFileChooser", "write", "clickOn", "waitForTimeoutTransitions", "query", "lookup", "clickOn", "waitForFxEvents", "readAllLines", "isEqualTo", "assertThat", "size", "contains", "assertThat", "get", "noneMatch", "assertThat", "contains"]}, "focal_class": {"identifier": "SpoonCodeInstrument", "superclass": "extends JfxInstrument", "interfaces": "implements Initializable", "fields": [{"original_string": "@FXML private TextArea spoonCode;", "modifier": "@FXML private", "type": "TextArea", "declarator": "spoonCode", "var_name": "spoonCode"}, {"original_string": "@FXML private TreeView<TextFlow> spoonAST;", "modifier": "@FXML private", "type": "TreeView<TextFlow>", "declarator": "spoonAST", "var_name": "spoonAST"}, {"original_string": "@FXML private CheckBox hideImplicit;", "modifier": "@FXML private", "type": "CheckBox", "declarator": "hideImplicit", "var_name": "hideImplicit"}, {"original_string": "@FXML private ComboBox<TreeLevel> treeLevel;", "modifier": "@FXML private", "type": "ComboBox<TreeLevel>", "declarator": "treeLevel", "var_name": "treeLevel"}, {"original_string": "@FXML private Button save;", "modifier": "@FXML private", "type": "Button", "declarator": "save", "var_name": "save"}, {"original_string": "@FXML private VBox propPanel;", "modifier": "@FXML private", "type": "VBox", "declarator": "propPanel", "var_name": "propPanel"}, {"original_string": "@FXML private ScrollPane scrollPaneProps;", "modifier": "@FXML private", "type": "ScrollPane", "declarator": "scrollPaneProps", "var_name": "scrollPaneProps"}, {"original_string": "private FileChooser fileChooser;", "modifier": "private", "type": "FileChooser", "declarator": "fileChooser", "var_name": "fileChooser"}], "methods": [{"identifier": "initialize", "parameters": "(final URL url, final ResourceBundle res)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(final URL url, final ResourceBundle res)", "full_signature": "@Override public void initialize(final URL url, final ResourceBundle res)", "class_method_signature": "SpoonCodeInstrument.initialize(final URL url, final ResourceBundle res)", "testcase": false, "constructor": false}, {"identifier": "configureBindings", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void configureBindings()", "full_signature": "@Override protected void configureBindings()", "class_method_signature": "SpoonCodeInstrument.configureBindings()", "testcase": false, "constructor": false}, {"identifier": "getFileChooser", "parameters": "()", "modifiers": "", "return": "FileChooser", "signature": "FileChooser getFileChooser()", "full_signature": " FileChooser getFileChooser()", "class_method_signature": "SpoonCodeInstrument.getFileChooser()", "testcase": false, "constructor": false}, {"identifier": "setFileChooser", "parameters": "(final FileChooser fileChooser)", "modifiers": "", "return": "void", "signature": "void setFileChooser(final FileChooser fileChooser)", "full_signature": " void setFileChooser(final FileChooser fileChooser)", "class_method_signature": "SpoonCodeInstrument.setFileChooser(final FileChooser fileChooser)", "testcase": false, "constructor": false}, {"identifier": "cleanPropertiesPanel", "parameters": "()", "modifiers": "", "return": "void", "signature": "void cleanPropertiesPanel()", "full_signature": " void cleanPropertiesPanel()", "class_method_signature": "SpoonCodeInstrument.cleanPropertiesPanel()", "testcase": false, "constructor": false}, {"identifier": "updatePropertiesPanel", "parameters": "(final CtElement elt)", "modifiers": "", "return": "void", "signature": "void updatePropertiesPanel(final CtElement elt)", "full_signature": " void updatePropertiesPanel(final CtElement elt)", "class_method_signature": "SpoonCodeInstrument.updatePropertiesPanel(final CtElement elt)", "testcase": false, "constructor": false}, {"identifier": "createTitleText", "parameters": "(final String txt)", "modifiers": "", "return": "Text", "signature": "Text createTitleText(final String txt)", "full_signature": " Text createTitleText(final String txt)", "class_method_signature": "SpoonCodeInstrument.createTitleText(final String txt)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "(final Set<Pair<String, String>> props)", "modifiers": "", "return": "TableView<Pair<String, String>>", "signature": "TableView<Pair<String, String>> createTable(final Set<Pair<String, String>> props)", "full_signature": " TableView<Pair<String, String>> createTable(final Set<Pair<String, String>> props)", "class_method_signature": "SpoonCodeInstrument.createTable(final Set<Pair<String, String>> props)", "testcase": false, "constructor": false}, {"identifier": "getSpoonProperties", "parameters": "(final CtElement elt)", "modifiers": "", "return": "List<Pair<Class<?>, Set<Pair<String, String>>>>", "signature": "List<Pair<Class<?>, Set<Pair<String, String>>>> getSpoonProperties(final CtElement elt)", "full_signature": " List<Pair<Class<?>, Set<Pair<String, String>>>> getSpoonProperties(final CtElement elt)", "class_method_signature": "SpoonCodeInstrument.getSpoonProperties(final CtElement elt)", "testcase": false, "constructor": false}, {"identifier": "prettyPrintType", "parameters": "(final Type type)", "modifiers": "", "return": "String", "signature": "String prettyPrintType(final Type type)", "full_signature": " String prettyPrintType(final Type type)", "class_method_signature": "SpoonCodeInstrument.prettyPrintType(final Type type)", "testcase": false, "constructor": false}, {"identifier": "getUnqualifiedClassName", "parameters": "(final String qname)", "modifiers": "", "return": "String", "signature": "String getUnqualifiedClassName(final String qname)", "full_signature": " String getUnqualifiedClassName(final String qname)", "class_method_signature": "SpoonCodeInstrument.getUnqualifiedClassName(final String qname)", "testcase": false, "constructor": false}, {"identifier": "getAllSpoonInterfaces", "parameters": "(final Class<?> cl)", "modifiers": "", "return": "Stream<Class<?>>", "signature": "Stream<Class<?>> getAllSpoonInterfaces(final Class<?> cl)", "full_signature": " Stream<Class<?>> getAllSpoonInterfaces(final Class<?> cl)", "class_method_signature": "SpoonCodeInstrument.getAllSpoonInterfaces(final Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "getDirectSpoonInterfaces", "parameters": "(final Class<?> cl)", "modifiers": "", "return": "Stream<Class<?>>", "signature": "Stream<Class<?>> getDirectSpoonInterfaces(final Class<?> cl)", "full_signature": " Stream<Class<?>> getDirectSpoonInterfaces(final Class<?> cl)", "class_method_signature": "SpoonCodeInstrument.getDirectSpoonInterfaces(final Class<?> cl)", "testcase": false, "constructor": false}], "file": "spoon-visualisation/src/main/java/spoon/visualisation/instrument/SpoonCodeInstrument.java"}, "focal_method": {"identifier": "setFileChooser", "parameters": "(final FileChooser fileChooser)", "modifiers": "", "return": "void", "body": "void setFileChooser(final FileChooser fileChooser) {\n\t\tthis.fileChooser = fileChooser;\n\t}", "signature": "void setFileChooser(final FileChooser fileChooser)", "full_signature": " void setFileChooser(final FileChooser fileChooser)", "class_method_signature": "SpoonCodeInstrument.setFileChooser(final FileChooser fileChooser)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14176513, "url": "https://github.com/INRIA/spoon", "stars": 889, "created": "11/6/2013 3:29:59 PM +00:00", "updates": "2020-01-27T10:17:29+00:00", "fork": "False", "license": "licensed"}}