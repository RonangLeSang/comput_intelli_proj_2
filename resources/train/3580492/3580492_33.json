{"test_class": {"identifier": "TestBytesWritable", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/datasalt/pangool/io/TestBytesWritable.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToString() {\n    checkToString(new byte[]{0,1,2,0x10}, \"00 01 02 10\");\n    checkToString(new byte[]{-0x80, -0x7f, -0x1, -0x2, 1, 0},\n        \"80 81 ff fe 01 00\");\n  }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "TestBytesWritable.testToString()", "testcase": true, "constructor": false, "invocations": ["checkToString", "checkToString"]}, "focal_class": {"identifier": "BytesWritable", "superclass": "extends BinaryComparable", "interfaces": "implements WritableComparable<BinaryComparable>", "fields": [{"original_string": "private static final byte[] EMPTY_BYTES = {};", "modifier": "private static final", "type": "byte[]", "declarator": "EMPTY_BYTES = {}", "var_name": "EMPTY_BYTES"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private byte[] bytes;", "modifier": "private", "type": "byte[]", "declarator": "bytes", "var_name": "bytes"}], "methods": [{"identifier": "BytesWritable", "parameters": "()", "modifiers": "public", "return": "", "signature": " BytesWritable()", "full_signature": "public  BytesWritable()", "class_method_signature": "BytesWritable.BytesWritable()", "testcase": false, "constructor": true}, {"identifier": "BytesWritable", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "", "signature": " BytesWritable(byte[] bytes)", "full_signature": "public  BytesWritable(byte[] bytes)", "class_method_signature": "BytesWritable.BytesWritable(byte[] bytes)", "testcase": false, "constructor": true}, {"identifier": "getBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "public byte[] getBytes()", "class_method_signature": "BytesWritable.getBytes()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLength()", "full_signature": "public int getLength()", "class_method_signature": "BytesWritable.getLength()", "testcase": false, "constructor": false}, {"identifier": "setSize", "parameters": "(int size)", "modifiers": "public", "return": "void", "signature": "void setSize(int size)", "full_signature": "public void setSize(int size)", "class_method_signature": "BytesWritable.setSize(int size)", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCapacity()", "full_signature": "public int getCapacity()", "class_method_signature": "BytesWritable.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "setCapacity", "parameters": "(int new_cap)", "modifiers": "public", "return": "void", "signature": "void setCapacity(int new_cap)", "full_signature": "public void setCapacity(int new_cap)", "class_method_signature": "BytesWritable.setCapacity(int new_cap)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(BytesWritable newData)", "modifiers": "public", "return": "void", "signature": "void set(BytesWritable newData)", "full_signature": "public void set(BytesWritable newData)", "class_method_signature": "BytesWritable.set(BytesWritable newData)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(byte [] newArray, int size)", "modifiers": "public", "return": "void", "signature": "void replace(byte [] newArray, int size)", "full_signature": "public void replace(byte [] newArray, int size)", "class_method_signature": "BytesWritable.replace(byte [] newArray, int size)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(byte[] newData, int offset, int length)", "modifiers": "public", "return": "void", "signature": "void set(byte[] newData, int offset, int length)", "full_signature": "public void set(byte[] newData, int offset, int length)", "class_method_signature": "BytesWritable.set(byte[] newData, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "public void readFields(DataInput in)", "class_method_signature": "BytesWritable.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "public void write(DataOutput out)", "class_method_signature": "BytesWritable.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "BytesWritable.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object right_obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object right_obj)", "full_signature": "public boolean equals(Object right_obj)", "class_method_signature": "BytesWritable.equals(Object right_obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "BytesWritable.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/datasalt/pangool/io/BytesWritable.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String toString() {\n    StringBuffer sb = new StringBuffer(3*size);\n    for (int idx = 0; idx < size; idx++) {\n      // if not the first, put a blank separator in\n      if (idx != 0) {\n        sb.append(' ');\n      }\n      String num = Integer.toHexString(0xff & bytes[idx]);\n      // if it is only one digit, add a leading 0.\n      if (num.length() < 2) {\n        sb.append('0');\n      }\n      sb.append(num);\n    }\n    return sb.toString();\n  }", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "BytesWritable.toString()", "testcase": false, "constructor": false, "invocations": ["append", "toHexString", "length", "append", "append", "toString"]}, "repository": {"repo_id": 3580492, "url": "https://github.com/datasalt/pangool", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 58, "size": 24759, "license": "licensed"}}