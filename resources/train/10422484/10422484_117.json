{"test_class": {"identifier": "AHCRequestExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static int[] ports;", "modifier": "public static", "type": "int[]", "declarator": "ports", "var_name": "ports"}, {"original_string": "public static int port = findFreePort();", "modifier": "public static", "type": "int", "declarator": "port = findFreePort()", "var_name": "port"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(port);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(port)", "var_name": "wireMockRule"}, {"original_string": "AsyncHttpClient client;", "modifier": "", "type": "AsyncHttpClient", "declarator": "client", "var_name": "client"}], "file": "app/domain/src/test/java/org/greencheek/related/elastic/http/ahc/AHCRequestExecutorTest.java"}, "test_case": {"identifier": "testResponseBodyIsReturned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResponseBodyIsReturned() {\n        String response = \"<response>Some content</response>\";\n        stubFor(get(urlEqualTo(\"/my/resource\"))\n                .willReturn(aResponse().withFixedDelay(1000)\n                        .withStatus(200)\n                        .withHeader(\"Content-Type\", \"text/xml\")\n                        .withBody(response)));\n\n        HttpResult httpResult = AHCRequestExecutor.executeSearch(client, HttpMethod.GET,\"http://localhost:\"+port,\"/my/resource\",null);\n\n        assertTrue(httpResult.getStatus()== HttpSearchExecutionStatus.OK);\n\n        assertEquals(response,httpResult.getResult());\n    }", "signature": "void testResponseBodyIsReturned()", "full_signature": "@Test public void testResponseBodyIsReturned()", "class_method_signature": "AHCRequestExecutorTest.testResponseBodyIsReturned()", "testcase": true, "constructor": false, "invocations": ["stubFor", "willReturn", "get", "urlEqualTo", "withBody", "withHeader", "withStatus", "withFixedDelay", "aResponse", "executeSearch", "assertTrue", "getStatus", "assertEquals", "getResult"]}, "focal_class": {"identifier": "AHCRequestExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AHCRequestExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AHCRequestExecutor.class)", "var_name": "log"}], "methods": [{"identifier": "executeSearch", "parameters": "(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery)", "modifiers": "public static", "return": "HttpResult", "signature": "HttpResult executeSearch(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery)", "full_signature": "public static HttpResult executeSearch(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery)", "class_method_signature": "AHCRequestExecutor.executeSearch(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery)", "testcase": false, "constructor": false}], "file": "app/domain/src/main/java/org/greencheek/related/elastic/http/ahc/AHCRequestExecutor.java"}, "focal_method": {"identifier": "executeSearch", "parameters": "(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery)", "modifiers": "public static", "return": "HttpResult", "body": "public static HttpResult executeSearch(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery) {\n        RequestBuilder requestBuilder = new RequestBuilder(method.name());\n\n        log.debug(\"Executing request against host {} with path {}\",host,path);\n        if(searchQuery!=null) {\n            requestBuilder.setBody(searchQuery);\n        }\n\n        requestBuilder.setUrl(host + path);\n        try {\n            Response res = client.executeRequest(requestBuilder.build(),new AsyncCompletionHandlerBase()).get();\n            return new HttpResult(HttpSearchExecutionStatus.OK,res.getResponseBody());\n        } catch (Exception e) {\n            Throwable cause = e.getCause();\n            if(cause!=null) {\n                if(cause instanceof ConnectException)\n                {\n                    log.error(\"Unable to connect to {}\",host,e);\n                    return HttpResult.CONNECTION_FAILURE;\n                }\n                else if (cause instanceof TimeoutException) {\n                    log.error(\"Request timeout talking to {}\",host,e);\n                    return HttpResult.REQUEST_TIMEOUT_FAILURE;\n                }\n                else if (cause instanceof IOException && cause.getMessage().equalsIgnoreCase(\"closed\")) {\n                    log.warn(\"Unable to use client, client is closed\");\n                    return HttpResult.CLIENT_CLOSED;\n                }\n                else {\n                    log.error(\"Exception talking to {}\",host,e);\n                    return new HttpResult(HttpSearchExecutionStatus.REQUEST_FAILURE,null);\n                }\n            }\n            else {\n                if (e instanceof IOException && e.getMessage().equalsIgnoreCase(\"closed\")) {\n                    log.warn(\"Unable to use client, client is closed\");\n                    return HttpResult.CLIENT_CLOSED;\n                } else {\n                    log.error(\"Exception talking to {}\",host,e);\n                    return new HttpResult(HttpSearchExecutionStatus.REQUEST_FAILURE,null);\n                }\n            }\n        }\n    }", "signature": "HttpResult executeSearch(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery)", "full_signature": "public static HttpResult executeSearch(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery)", "class_method_signature": "AHCRequestExecutor.executeSearch(AsyncHttpClient client, HttpMethod method, String host,\n                                     String path, String searchQuery)", "testcase": false, "constructor": false, "invocations": ["name", "debug", "setBody", "setUrl", "get", "executeRequest", "build", "getResponseBody", "getCause", "error", "error", "equalsIgnoreCase", "getMessage", "warn", "error", "equalsIgnoreCase", "getMessage", "warn", "error"]}, "repository": {"repo_id": 10422484, "url": "https://github.com/tootedom/related", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 20852, "license": "licensed"}}