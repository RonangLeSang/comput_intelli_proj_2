{"test_class": {"identifier": "JodaISO8601UTCCurrentDateAndTimeFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ISO8601UTCCurrentDateAndTimeFormatter formatter = new JodaISO8601UTCCurrentDateAndTimeFormatter();", "modifier": "", "type": "ISO8601UTCCurrentDateAndTimeFormatter", "declarator": "formatter = new JodaISO8601UTCCurrentDateAndTimeFormatter()", "var_name": "formatter"}], "file": "app/core/indexing/src/test/java/org/greencheek/related/indexing/util/JodaISO8601UTCCurrentDateAndTimeFormatterTest.java"}, "test_case": {"identifier": "testParseDateToUTCTimeWithNoTimeZoneIsTakenAsUTC", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseDateToUTCTimeWithNoTimeZoneIsTakenAsUTC() {\n        assertEquals(\"2008-02-07T09:30:00.000Z\",formatter.formatToUTC(\"20080207T093000+0000\"));\n\n        assertEquals(\"2008-02-07T09:30:00.000Z\",formatter.formatToUTC(\"2008-02-07T09:30:00\"));\n\n        assertEquals(\"2008-02-07T09:30:00.000Z\",formatter.formatToUTC(\"2008-02-07T09:30:00+00:00\"));\n\n        assertEquals(\"2008-02-07T09:30:00.000Z\",formatter.formatToUTC(\"2008-02-07T09:30:00.000+00:00\"));\n\n        assertEquals(\"2008-02-07T09:30:00.000Z\",formatter.formatToUTC(\"2008-02-07T09:30:00+00:00\"));\n    }", "signature": "void testParseDateToUTCTimeWithNoTimeZoneIsTakenAsUTC()", "full_signature": "@Test public void testParseDateToUTCTimeWithNoTimeZoneIsTakenAsUTC()", "class_method_signature": "JodaISO8601UTCCurrentDateAndTimeFormatterTest.testParseDateToUTCTimeWithNoTimeZoneIsTakenAsUTC()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "formatToUTC", "assertEquals", "formatToUTC", "assertEquals", "formatToUTC", "assertEquals", "formatToUTC", "assertEquals", "formatToUTC"]}, "focal_class": {"identifier": "JodaISO8601UTCCurrentDateAndTimeFormatter", "superclass": "", "interfaces": "implements ISO8601UTCCurrentDateAndTimeFormatter", "fields": [{"original_string": "private final DateTimeFormatter formatter = ISODateTimeFormat.dateTime();", "modifier": "private final", "type": "DateTimeFormatter", "declarator": "formatter = ISODateTimeFormat.dateTime()", "var_name": "formatter"}, {"original_string": "private final DateTimeFormatter formatterUTCPrinter = ISODateTimeFormat.dateTime().withZoneUTC();", "modifier": "private final", "type": "DateTimeFormatter", "declarator": "formatterUTCPrinter = ISODateTimeFormat.dateTime().withZoneUTC()", "var_name": "formatterUTCPrinter"}, {"original_string": "private final DateTimeParser[] parsers = {\n            ISODateTimeFormat.dateTimeParser().getParser(),\n            ISODateTimeFormat.basicDateTime().getParser(),\n            ISODateTimeFormat.basicDateTimeNoMillis().getParser(),\n            ISODateTimeFormat.basicDate().getParser()\n            };", "modifier": "private final", "type": "DateTimeParser[]", "declarator": "parsers = {\n            ISODateTimeFormat.dateTimeParser().getParser(),\n            ISODateTimeFormat.basicDateTime().getParser(),\n            ISODateTimeFormat.basicDateTimeNoMillis().getParser(),\n            ISODateTimeFormat.basicDate().getParser()\n            }", "var_name": "parsers"}, {"original_string": "private final DateTimeFormatter formatterUTC = new DateTimeFormatterBuilder().append( null, parsers ).toFormatter().withZoneUTC();", "modifier": "private final", "type": "DateTimeFormatter", "declarator": "formatterUTC = new DateTimeFormatterBuilder().append( null, parsers ).toFormatter().withZoneUTC()", "var_name": "formatterUTC"}], "methods": [{"identifier": "getCurrentDay", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCurrentDay()", "full_signature": "@Override public String getCurrentDay()", "class_method_signature": "JodaISO8601UTCCurrentDateAndTimeFormatter.getCurrentDay()", "testcase": false, "constructor": false}, {"identifier": "formatToUTC", "parameters": "(String day)", "modifiers": "@Override public", "return": "String", "signature": "String formatToUTC(String day)", "full_signature": "@Override public String formatToUTC(String day)", "class_method_signature": "JodaISO8601UTCCurrentDateAndTimeFormatter.formatToUTC(String day)", "testcase": false, "constructor": false}], "file": "app/core/indexing/src/main/java/org/greencheek/related/indexing/util/JodaISO8601UTCCurrentDateAndTimeFormatter.java"}, "focal_method": {"identifier": "formatToUTC", "parameters": "(String day)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String formatToUTC(String day) {\n        StringBuilderWriter b = new StringBuilderWriter(24);\n        try {\n            formatterUTCPrinter.printTo(b,formatterUTC.parseDateTime(day));\n        } catch (IOException e) {\n            // this does not get thrown by the StringBuilder Appendable interface.\n        }\n        return b.toString();\n    }", "signature": "String formatToUTC(String day)", "full_signature": "@Override public String formatToUTC(String day)", "class_method_signature": "JodaISO8601UTCCurrentDateAndTimeFormatter.formatToUTC(String day)", "testcase": false, "constructor": false, "invocations": ["printTo", "parseDateTime", "toString"]}, "repository": {"repo_id": 10422484, "url": "https://github.com/tootedom/related", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 20852, "license": "licensed"}}