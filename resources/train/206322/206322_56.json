{"test_class": {"identifier": "MinijarFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File emptyFile;", "modifier": "private", "type": "File", "declarator": "emptyFile", "var_name": "emptyFile"}], "file": "maven-shade-plugin/src/test/java/org/apache/maven/plugins/shade/filter/MinijarFilterTest.java"}, "test_case": {"identifier": "finsishedShouldProduceMessageForClassesTotalNonZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void finsishedShouldProduceMessageForClassesTotalNonZero()\n    {\n        ArgumentCaptor<CharSequence> logCaptor = ArgumentCaptor.forClass( CharSequence.class );\n\n        Log log = mock( Log.class );\n\n        MinijarFilter m = new MinijarFilter( 1, 50, log );\n\n        m.finished();\n\n        verify( log, times( 1 ) ).info( logCaptor.capture() );\n\n        assertEquals( \"Minimized 51 -> 1 (1%)\", logCaptor.getValue() );\n\n    }", "signature": "void finsishedShouldProduceMessageForClassesTotalNonZero()", "full_signature": "@Test public void finsishedShouldProduceMessageForClassesTotalNonZero()", "class_method_signature": "MinijarFilterTest.finsishedShouldProduceMessageForClassesTotalNonZero()", "testcase": true, "constructor": false, "invocations": ["forClass", "mock", "finished", "info", "verify", "times", "capture", "assertEquals", "getValue"]}, "focal_class": {"identifier": "MinijarFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private Log log;", "modifier": "private", "type": "Log", "declarator": "log", "var_name": "log"}, {"original_string": "private Set<Clazz> removable;", "modifier": "private", "type": "Set<Clazz>", "declarator": "removable", "var_name": "removable"}, {"original_string": "private int classesKept;", "modifier": "private", "type": "int", "declarator": "classesKept", "var_name": "classesKept"}, {"original_string": "private int classesRemoved;", "modifier": "private", "type": "int", "declarator": "classesRemoved", "var_name": "classesRemoved"}], "methods": [{"identifier": "MinijarFilter", "parameters": "( int classesKept, int classesRemoved, Log log )", "modifiers": "", "return": "", "signature": " MinijarFilter( int classesKept, int classesRemoved, Log log )", "full_signature": "  MinijarFilter( int classesKept, int classesRemoved, Log log )", "class_method_signature": "MinijarFilter.MinijarFilter( int classesKept, int classesRemoved, Log log )", "testcase": false, "constructor": true}, {"identifier": "MinijarFilter", "parameters": "( MavenProject project, Log log )", "modifiers": "public", "return": "", "signature": " MinijarFilter( MavenProject project, Log log )", "full_signature": "public  MinijarFilter( MavenProject project, Log log )", "class_method_signature": "MinijarFilter.MinijarFilter( MavenProject project, Log log )", "testcase": false, "constructor": true}, {"identifier": "MinijarFilter", "parameters": "( MavenProject project, Log log, List<SimpleFilter> simpleFilters )", "modifiers": "public", "return": "", "signature": " MinijarFilter( MavenProject project, Log log, List<SimpleFilter> simpleFilters )", "full_signature": "public  MinijarFilter( MavenProject project, Log log, List<SimpleFilter> simpleFilters )", "class_method_signature": "MinijarFilter.MinijarFilter( MavenProject project, Log log, List<SimpleFilter> simpleFilters )", "testcase": false, "constructor": true}, {"identifier": "addDependencyToClasspath", "parameters": "( Clazzpath cp, Artifact dependency )", "modifiers": "private", "return": "ClazzpathUnit", "signature": "ClazzpathUnit addDependencyToClasspath( Clazzpath cp, Artifact dependency )", "full_signature": "private ClazzpathUnit addDependencyToClasspath( Clazzpath cp, Artifact dependency )", "class_method_signature": "MinijarFilter.addDependencyToClasspath( Clazzpath cp, Artifact dependency )", "testcase": false, "constructor": false}, {"identifier": "removePackages", "parameters": "( ClazzpathUnit artifactUnit )", "modifiers": "private", "return": "void", "signature": "void removePackages( ClazzpathUnit artifactUnit )", "full_signature": "private void removePackages( ClazzpathUnit artifactUnit )", "class_method_signature": "MinijarFilter.removePackages( ClazzpathUnit artifactUnit )", "testcase": false, "constructor": false}, {"identifier": "removePackages", "parameters": "( Set clazzes, Set<String> packageNames )", "modifiers": "@SuppressWarnings( \"rawtypes\" ) private", "return": "void", "signature": "void removePackages( Set clazzes, Set<String> packageNames )", "full_signature": "@SuppressWarnings( \"rawtypes\" ) private void removePackages( Set clazzes, Set<String> packageNames )", "class_method_signature": "MinijarFilter.removePackages( Set clazzes, Set<String> packageNames )", "testcase": false, "constructor": false}, {"identifier": "removeSpecificallyIncludedClasses", "parameters": "( MavenProject project, List<SimpleFilter> simpleFilters )", "modifiers": "private", "return": "void", "signature": "void removeSpecificallyIncludedClasses( MavenProject project, List<SimpleFilter> simpleFilters )", "full_signature": "private void removeSpecificallyIncludedClasses( MavenProject project, List<SimpleFilter> simpleFilters )", "class_method_signature": "MinijarFilter.removeSpecificallyIncludedClasses( MavenProject project, List<SimpleFilter> simpleFilters )", "testcase": false, "constructor": false}, {"identifier": "canFilter", "parameters": "( File jar )", "modifiers": "public", "return": "boolean", "signature": "boolean canFilter( File jar )", "full_signature": "public boolean canFilter( File jar )", "class_method_signature": "MinijarFilter.canFilter( File jar )", "testcase": false, "constructor": false}, {"identifier": "isFiltered", "parameters": "( String classFile )", "modifiers": "public", "return": "boolean", "signature": "boolean isFiltered( String classFile )", "full_signature": "public boolean isFiltered( String classFile )", "class_method_signature": "MinijarFilter.isFiltered( String classFile )", "testcase": false, "constructor": false}, {"identifier": "finished", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void finished()", "full_signature": "public void finished()", "class_method_signature": "MinijarFilter.finished()", "testcase": false, "constructor": false}], "file": "maven-shade-plugin/src/main/java/org/apache/maven/plugins/shade/filter/MinijarFilter.java"}, "focal_method": {"identifier": "finished", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void finished()\n    {\n        int classesTotal = classesRemoved + classesKept;\n        if ( classesTotal != 0 )\n        {\n            log.info( \"Minimized \" + classesTotal + \" -> \" + classesKept + \" (\" + 100 * classesKept / classesTotal\n                + \"%)\" );\n        }\n        else\n        {\n            log.info( \"Minimized \" + classesTotal + \" -> \" + classesKept );\n        }\n    }", "signature": "void finished()", "full_signature": "public void finished()", "class_method_signature": "MinijarFilter.finished()", "testcase": false, "constructor": false, "invocations": ["info", "info"]}, "repository": {"repo_id": 206322, "url": "https://github.com/apache/maven-plugins", "language": "Java", "is_fork": false, "fork_count": 281, "stargazer_count": 239, "size": 55676, "license": "licensed"}}