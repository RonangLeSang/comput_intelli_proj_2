{"test_class": {"identifier": "TestMatrix33", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "libraries/phyloviewer-common/src/test/java/org/iplantc/phyloviewer/shared/math/TestMatrix33.java"}, "test_case": {"identifier": "testDefaultConstruction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n\tpublic void testDefaultConstruction() {\n\t\tMatrix33 matrix = new Matrix33();\n\t\tassertTrue(1==matrix.get(0,0));\tassertTrue(0==matrix.get(0,1));\tassertTrue(0==matrix.get(0,2));\n\t\tassertTrue(0==matrix.get(1,0));\tassertTrue(1==matrix.get(1,1));\tassertTrue(0==matrix.get(1,2));\n\t\tassertTrue(0==matrix.get(2,0));\tassertTrue(0==matrix.get(2,1));\tassertTrue(1==matrix.get(2,2));\n\t}", "signature": "void testDefaultConstruction()", "full_signature": "@Test public void testDefaultConstruction()", "class_method_signature": "TestMatrix33.testDefaultConstruction()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "Matrix33", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[][] m=new double[3][3];", "modifier": "private", "type": "double[][]", "declarator": "m=new double[3][3]", "var_name": "m"}], "methods": [{"identifier": "Matrix33", "parameters": "()", "modifiers": "public", "return": "", "signature": " Matrix33()", "full_signature": "public  Matrix33()", "class_method_signature": "Matrix33.Matrix33()", "testcase": false, "constructor": true}, {"identifier": "Matrix33", "parameters": "(double m00, double m01, double m02, \n\t                double m10, double m11, double m12,\n\t                double m20, double m21, double m22)", "modifiers": "public", "return": "", "signature": " Matrix33(double m00, double m01, double m02, \n\t                double m10, double m11, double m12,\n\t                double m20, double m21, double m22)", "full_signature": "public  Matrix33(double m00, double m01, double m02, \n\t                double m10, double m11, double m12,\n\t                double m20, double m21, double m22)", "class_method_signature": "Matrix33.Matrix33(double m00, double m01, double m02, \n\t                double m10, double m11, double m12,\n\t                double m20, double m21, double m22)", "testcase": false, "constructor": true}, {"identifier": "makeTranslate", "parameters": "(double x, double y)", "modifiers": "public static", "return": "Matrix33", "signature": "Matrix33 makeTranslate(double x, double y)", "full_signature": "public static Matrix33 makeTranslate(double x, double y)", "class_method_signature": "Matrix33.makeTranslate(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "makeScale", "parameters": "(double sx, double sy )", "modifiers": "public static", "return": "Matrix33", "signature": "Matrix33 makeScale(double sx, double sy )", "full_signature": "public static Matrix33 makeScale(double sx, double sy )", "class_method_signature": "Matrix33.makeScale(double sx, double sy )", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(double m00, double m01, double m02, \n\t\t\t        double m10, double m11, double m12,\n\t\t\t        double m20, double m21, double m22 )", "modifiers": "public", "return": "void", "signature": "void set(double m00, double m01, double m02, \n\t\t\t        double m10, double m11, double m12,\n\t\t\t        double m20, double m21, double m22 )", "full_signature": "public void set(double m00, double m01, double m02, \n\t\t\t        double m10, double m11, double m12,\n\t\t\t        double m20, double m21, double m22 )", "class_method_signature": "Matrix33.set(double m00, double m01, double m02, \n\t\t\t        double m10, double m11, double m12,\n\t\t\t        double m20, double m21, double m22 )", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Vector2 vector)", "modifiers": "public", "return": "Vector2", "signature": "Vector2 transform(Vector2 vector)", "full_signature": "public Vector2 transform(Vector2 vector)", "class_method_signature": "Matrix33.transform(Vector2 vector)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Box2D box)", "modifiers": "public", "return": "Box2D", "signature": "Box2D transform(Box2D box)", "full_signature": "public Box2D transform(Box2D box)", "class_method_signature": "Matrix33.transform(Box2D box)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(Matrix33 rhs)", "modifiers": "public", "return": "Matrix33", "signature": "Matrix33 multiply(Matrix33 rhs)", "full_signature": "public Matrix33 multiply(Matrix33 rhs)", "class_method_signature": "Matrix33.multiply(Matrix33 rhs)", "testcase": false, "constructor": false}, {"identifier": "determinant", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double determinant()", "full_signature": "public double determinant()", "class_method_signature": "Matrix33.determinant()", "testcase": false, "constructor": false}, {"identifier": "inverse", "parameters": "()", "modifiers": "public", "return": "Matrix33", "signature": "Matrix33 inverse()", "full_signature": "public Matrix33 inverse()", "class_method_signature": "Matrix33.inverse()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int row, int col,double value)", "modifiers": "public", "return": "void", "signature": "void set(int row, int col,double value)", "full_signature": "public void set(int row, int col,double value)", "class_method_signature": "Matrix33.set(int row, int col,double value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int row, int col)", "modifiers": "public", "return": "double", "signature": "double get(int row, int col)", "full_signature": "public double get(int row, int col)", "class_method_signature": "Matrix33.get(int row, int col)", "testcase": false, "constructor": false}, {"identifier": "setTranslationX", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setTranslationX(double value)", "full_signature": "public void setTranslationX(double value)", "class_method_signature": "Matrix33.setTranslationX(double value)", "testcase": false, "constructor": false}, {"identifier": "setTranslationY", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setTranslationY(double value)", "full_signature": "public void setTranslationY(double value)", "class_method_signature": "Matrix33.setTranslationY(double value)", "testcase": false, "constructor": false}, {"identifier": "getTranslationX", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTranslationX()", "full_signature": "public double getTranslationX()", "class_method_signature": "Matrix33.getTranslationX()", "testcase": false, "constructor": false}, {"identifier": "getTranslationY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTranslationY()", "full_signature": "public double getTranslationY()", "class_method_signature": "Matrix33.getTranslationY()", "testcase": false, "constructor": false}, {"identifier": "getScaleX", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getScaleX()", "full_signature": "public double getScaleX()", "class_method_signature": "Matrix33.getScaleX()", "testcase": false, "constructor": false}, {"identifier": "getScaleY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getScaleY()", "full_signature": "public double getScaleY()", "class_method_signature": "Matrix33.getScaleY()", "testcase": false, "constructor": false}, {"identifier": "getShearX", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getShearX()", "full_signature": "public double getShearX()", "class_method_signature": "Matrix33.getShearX()", "testcase": false, "constructor": false}, {"identifier": "getShearY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getShearY()", "full_signature": "public double getShearY()", "class_method_signature": "Matrix33.getShearY()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Matrix33.toString()", "testcase": false, "constructor": false}], "file": "libraries/phyloviewer-common/src/main/java/org/iplantc/phyloviewer/shared/math/Matrix33.java"}, "focal_method": {"identifier": "get", "parameters": "(int row, int col)", "modifiers": "public", "return": "double", "body": "public double get(int row, int col) { return m[row][col]; }", "signature": "double get(int row, int col)", "full_signature": "public double get(int row, int col)", "class_method_signature": "Matrix33.get(int row, int col)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 726694, "url": "https://github.com/akubach/phyloviewer", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 22844, "license": "licensed"}}