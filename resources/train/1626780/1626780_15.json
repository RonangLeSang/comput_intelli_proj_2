{"test_class": {"identifier": "SchemaMigrationsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/ca/stellardrift/permissionsex/backend/file/SchemaMigrationsTest.java"}, "test_case": {"identifier": "testInitialToOne", "parameters": "(@TempDir Path tempFolder)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialToOne(@TempDir Path tempFolder) throws IOException {\n        final Path testFile = tempFolder.resolve(\"Test0to1.yml\");\n        ConfigurationLoader<ConfigurationNode> yamlLoader = YAMLConfigurationLoader.builder()\n                .setPath(testFile)\n                .setURL(getClass().getResource(\"test0to1.pre.yml\"))\n                .setFlowStyle(DumperOptions.FlowStyle.BLOCK)\n                .build();\n        ConfigurationNode node = yamlLoader.load();\n        SchemaMigrations.initialTo1().apply(node);\n        yamlLoader.save(node);\n        assertEquals(Resources.readLines(getClass().getResource(\"test0to1.post.yml\"), UTF_8), Files.readAllLines(testFile, UTF_8));\n    }", "signature": "void testInitialToOne(@TempDir Path tempFolder)", "full_signature": "@Test public void testInitialToOne(@TempDir Path tempFolder)", "class_method_signature": "SchemaMigrationsTest.testInitialToOne(@TempDir Path tempFolder)", "testcase": true, "constructor": false, "invocations": ["resolve", "build", "setFlowStyle", "setURL", "setPath", "builder", "getResource", "getClass", "load", "apply", "initialTo1", "save", "assertEquals", "readLines", "getResource", "getClass", "readAllLines"]}, "focal_class": {"identifier": "SchemaMigrations", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int LATEST_VERSION = 4;", "modifier": "public static final", "type": "int", "declarator": "LATEST_VERSION = 4", "var_name": "LATEST_VERSION"}, {"original_string": "private static final TransformAction MOVE_PREFIX_SUFFIX_ACTION = (nodePath, configurationNode) -> {\n        final ConfigurationNode prefixNode = configurationNode.getNode(\"prefix\");\n        if (!prefixNode.isVirtual()) {\n            configurationNode.getNode(\"options\", \"prefix\").setValue(prefixNode);\n            prefixNode.setValue(null);\n        }\n\n        final ConfigurationNode suffixNode = configurationNode.getNode(\"suffix\");\n        if (!suffixNode.isVirtual()) {\n            configurationNode.getNode(\"options\", \"suffix\").setValue(suffixNode);\n            suffixNode.setValue(null);\n        }\n\n        final ConfigurationNode defaultNode = configurationNode.getNode(\"default\");\n        if (!defaultNode.isVirtual()) {\n            configurationNode.getNode(\"options\", \"default\").setValue(defaultNode);\n            defaultNode.setValue(null);\n        }\n        return null;\n    };", "modifier": "private static final", "type": "TransformAction", "declarator": "MOVE_PREFIX_SUFFIX_ACTION = (nodePath, configurationNode) -> {\n        final ConfigurationNode prefixNode = configurationNode.getNode(\"prefix\");\n        if (!prefixNode.isVirtual()) {\n            configurationNode.getNode(\"options\", \"prefix\").setValue(prefixNode);\n            prefixNode.setValue(null);\n        }\n\n        final ConfigurationNode suffixNode = configurationNode.getNode(\"suffix\");\n        if (!suffixNode.isVirtual()) {\n            configurationNode.getNode(\"options\", \"suffix\").setValue(suffixNode);\n            suffixNode.setValue(null);\n        }\n\n        final ConfigurationNode defaultNode = configurationNode.getNode(\"default\");\n        if (!defaultNode.isVirtual()) {\n            configurationNode.getNode(\"options\", \"default\").setValue(defaultNode);\n            defaultNode.setValue(null);\n        }\n        return null;\n    }", "var_name": "MOVE_PREFIX_SUFFIX_ACTION"}], "methods": [{"identifier": "SchemaMigrations", "parameters": "()", "modifiers": "private", "return": "", "signature": " SchemaMigrations()", "full_signature": "private  SchemaMigrations()", "class_method_signature": "SchemaMigrations.SchemaMigrations()", "testcase": false, "constructor": true}, {"identifier": "tBuilder", "parameters": "()", "modifiers": "private static", "return": "ConfigurationTransformation.Builder", "signature": "ConfigurationTransformation.Builder tBuilder()", "full_signature": "private static ConfigurationTransformation.Builder tBuilder()", "class_method_signature": "SchemaMigrations.tBuilder()", "testcase": false, "constructor": false}, {"identifier": "versionedMigration", "parameters": "(final FormattedLogger logger)", "modifiers": "static", "return": "ConfigurationTransformation", "signature": "ConfigurationTransformation versionedMigration(final FormattedLogger logger)", "full_signature": "static ConfigurationTransformation versionedMigration(final FormattedLogger logger)", "class_method_signature": "SchemaMigrations.versionedMigration(final FormattedLogger logger)", "testcase": false, "constructor": false}, {"identifier": "threeToFour", "parameters": "()", "modifiers": "static", "return": "ConfigurationTransformation", "signature": "ConfigurationTransformation threeToFour()", "full_signature": "static ConfigurationTransformation threeToFour()", "class_method_signature": "SchemaMigrations.threeToFour()", "testcase": false, "constructor": false}, {"identifier": "twoTo3", "parameters": "()", "modifiers": "static", "return": "ConfigurationTransformation", "signature": "ConfigurationTransformation twoTo3()", "full_signature": "static ConfigurationTransformation twoTo3()", "class_method_signature": "SchemaMigrations.twoTo3()", "testcase": false, "constructor": false}, {"identifier": "oneTo2", "parameters": "(final FormattedLogger logger)", "modifiers": "static", "return": "ConfigurationTransformation", "signature": "ConfigurationTransformation oneTo2(final FormattedLogger logger)", "full_signature": "static ConfigurationTransformation oneTo2(final FormattedLogger logger)", "class_method_signature": "SchemaMigrations.oneTo2(final FormattedLogger logger)", "testcase": false, "constructor": false}, {"identifier": "initialTo1", "parameters": "()", "modifiers": "static", "return": "ConfigurationTransformation", "signature": "ConfigurationTransformation initialTo1()", "full_signature": "static ConfigurationTransformation initialTo1()", "class_method_signature": "SchemaMigrations.initialTo1()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ca/stellardrift/permissionsex/backend/file/SchemaMigrations.java"}, "focal_method": {"identifier": "initialTo1", "parameters": "()", "modifiers": "static", "return": "ConfigurationTransformation", "body": "static ConfigurationTransformation initialTo1() {\n        return ConfigurationTransformation.builder()\n                .addAction(new Object[]{WILDCARD_OBJECT, WILDCARD_OBJECT}, MOVE_PREFIX_SUFFIX_ACTION)\n                .addAction(new Object[]{WILDCARD_OBJECT, WILDCARD_OBJECT, \"worlds\", WILDCARD_OBJECT}, MOVE_PREFIX_SUFFIX_ACTION)\n                .build();\n    }", "signature": "ConfigurationTransformation initialTo1()", "full_signature": "static ConfigurationTransformation initialTo1()", "class_method_signature": "SchemaMigrations.initialTo1()", "testcase": false, "constructor": false, "invocations": ["build", "addAction", "addAction", "builder"]}, "repository": {"repo_id": 1626780, "url": "https://github.com/PEXPlugins/PermissionsEx", "stars": 411, "created": "4/17/2011 4:04:00 PM +00:00", "updates": "2020-01-27T02:54:45+00:00", "fork": "False", "license": "licensed"}}