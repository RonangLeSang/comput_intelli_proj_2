{"test_class": {"identifier": "ServletUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "magnolia-core/src/test/java/info/magnolia/cms/util/ServletUtilTest.java"}, "test_case": {"identifier": "testIsError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsError() {\n        MockHttpServletRequest mock = new MockHttpServletRequest();\n\n        assertFalse(ServletUtil.isError(mock));\n        assertFalse(ServletUtil.isForward(mock));\n        assertFalse(ServletUtil.isInclude(mock));\n\n        mock.setAttribute(ServletUtil.ERROR_REQUEST_STATUS_CODE_ATTRIBUTE, 500);\n        assertTrue(ServletUtil.isError(mock));\n        assertFalse(ServletUtil.isForward(mock));\n        assertFalse(ServletUtil.isInclude(mock));\n\n        mock.setAttribute(ServletUtil.FORWARD_REQUEST_URI_ATTRIBUTE, \"/test.html\");\n        assertTrue(ServletUtil.isError(mock));\n        assertTrue(ServletUtil.isForward(mock));\n        assertFalse(ServletUtil.isInclude(mock));\n\n        mock.setAttribute(ServletUtil.INCLUDE_REQUEST_URI_ATTRIBUTE, \"/test.jsp\");\n        assertTrue(ServletUtil.isError(mock));\n        assertFalse(ServletUtil.isForward(mock));\n        assertTrue(ServletUtil.isInclude(mock));\n    }", "signature": "void testIsError()", "full_signature": "@Test public void testIsError()", "class_method_signature": "ServletUtilTest.testIsError()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isError", "assertFalse", "isForward", "assertFalse", "isInclude", "setAttribute", "assertTrue", "isError", "assertFalse", "isForward", "assertFalse", "isInclude", "setAttribute", "assertTrue", "isError", "assertTrue", "isForward", "assertFalse", "isInclude", "setAttribute", "assertTrue", "isError", "assertFalse", "isForward", "assertTrue", "isInclude"]}, "focal_class": {"identifier": "ServletUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String FORWARD_REQUEST_URI_ATTRIBUTE = \"javax.servlet.forward.request_uri\";", "modifier": "public static final", "type": "String", "declarator": "FORWARD_REQUEST_URI_ATTRIBUTE = \"javax.servlet.forward.request_uri\"", "var_name": "FORWARD_REQUEST_URI_ATTRIBUTE"}, {"original_string": "public static final String FORWARD_QUERY_STRING_ATTRIBUTE = \"javax.servlet.forward.query_string\";", "modifier": "public static final", "type": "String", "declarator": "FORWARD_QUERY_STRING_ATTRIBUTE = \"javax.servlet.forward.query_string\"", "var_name": "FORWARD_QUERY_STRING_ATTRIBUTE"}, {"original_string": "public static final String INCLUDE_REQUEST_URI_ATTRIBUTE = \"javax.servlet.include.request_uri\";", "modifier": "public static final", "type": "String", "declarator": "INCLUDE_REQUEST_URI_ATTRIBUTE = \"javax.servlet.include.request_uri\"", "var_name": "INCLUDE_REQUEST_URI_ATTRIBUTE"}, {"original_string": "public static final String ERROR_REQUEST_STATUS_CODE_ATTRIBUTE = \"javax.servlet.error.status_code\";", "modifier": "public static final", "type": "String", "declarator": "ERROR_REQUEST_STATUS_CODE_ATTRIBUTE = \"javax.servlet.error.status_code\"", "var_name": "ERROR_REQUEST_STATUS_CODE_ATTRIBUTE"}], "methods": [{"identifier": "initParametersToMap", "parameters": "(ServletConfig config)", "modifiers": "public static", "return": "LinkedHashMap<String, String>", "signature": "LinkedHashMap<String, String> initParametersToMap(ServletConfig config)", "full_signature": "public static LinkedHashMap<String, String> initParametersToMap(ServletConfig config)", "class_method_signature": "ServletUtil.initParametersToMap(ServletConfig config)", "testcase": false, "constructor": false}, {"identifier": "initParametersToMap", "parameters": "(FilterConfig config)", "modifiers": "public static", "return": "LinkedHashMap<String, String>", "signature": "LinkedHashMap<String, String> initParametersToMap(FilterConfig config)", "full_signature": "public static LinkedHashMap<String, String> initParametersToMap(FilterConfig config)", "class_method_signature": "ServletUtil.initParametersToMap(FilterConfig config)", "testcase": false, "constructor": false}, {"identifier": "getWrappedRequest", "parameters": "(ServletRequest request, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getWrappedRequest(ServletRequest request, Class<T> clazz)", "full_signature": "public static T getWrappedRequest(ServletRequest request, Class<T> clazz)", "class_method_signature": "ServletUtil.getWrappedRequest(ServletRequest request, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "isMultipart", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMultipart(HttpServletRequest request)", "full_signature": "public static boolean isMultipart(HttpServletRequest request)", "class_method_signature": "ServletUtil.isMultipart(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isForward", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "boolean", "signature": "boolean isForward(HttpServletRequest request)", "full_signature": "public static boolean isForward(HttpServletRequest request)", "class_method_signature": "ServletUtil.isForward(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isInclude", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInclude(HttpServletRequest request)", "full_signature": "public static boolean isInclude(HttpServletRequest request)", "class_method_signature": "ServletUtil.isInclude(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isError", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "boolean", "signature": "boolean isError(HttpServletRequest request)", "full_signature": "public static boolean isError(HttpServletRequest request)", "class_method_signature": "ServletUtil.isError(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getDispatcherType", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "DispatcherType", "signature": "DispatcherType getDispatcherType(HttpServletRequest request)", "full_signature": "public static DispatcherType getDispatcherType(HttpServletRequest request)", "class_method_signature": "ServletUtil.getDispatcherType(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getOriginalRequestURI", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String getOriginalRequestURI(HttpServletRequest request)", "full_signature": "public static String getOriginalRequestURI(HttpServletRequest request)", "class_method_signature": "ServletUtil.getOriginalRequestURI(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getOriginalRequestURLIncludingQueryString", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String getOriginalRequestURLIncludingQueryString(HttpServletRequest request)", "full_signature": "public static String getOriginalRequestURLIncludingQueryString(HttpServletRequest request)", "class_method_signature": "ServletUtil.getOriginalRequestURLIncludingQueryString(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getRequestUri", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String getRequestUri(HttpServletRequest request)", "full_signature": "public static String getRequestUri(HttpServletRequest request)", "class_method_signature": "ServletUtil.getRequestUri(HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/cms/util/ServletUtil.java"}, "focal_method": {"identifier": "isError", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isError(HttpServletRequest request) {\n        return request.getAttribute(ERROR_REQUEST_STATUS_CODE_ATTRIBUTE) != null;\n    }", "signature": "boolean isError(HttpServletRequest request)", "full_signature": "public static boolean isError(HttpServletRequest request)", "class_method_signature": "ServletUtil.isError(HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["getAttribute"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}