{"test_class": {"identifier": "DefaultClassFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "magnolia-core/src/test/java/info/magnolia/objectfactory/DefaultClassFactoryTest.java"}, "test_case": {"identifier": "testCanInstantiateWithBestMatchingConstructorWhenTheSignatureIsMorePrecise", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCanInstantiateWithBestMatchingConstructorWhenTheSignatureIsMorePrecise() {\n        final DefaultClassFactory classFactory = new DefaultClassFactory();\n\n        try {\n            assertEquals(\"bingo7\", classFactory.newInstance(FooBar.class, arr(String.class, Long.class), \"bingo\", Long.valueOf(7)).getValue());\n        }\n        catch (MgnlInstantiationException e) {\n            fail(\"It should have used the more generic constructor <init>(String, Object)\");\n        }\n\n        // it does not work if the types are less precise\n        try {\n            assertEquals(\"bingo\", classFactory.newInstance(FooBar.class, arr(Object.class), \"bingo\").getValue());\n            fail(\"should have failed\");\n        }\n        catch (MgnlInstantiationException e) {\n            // this is what we want\n        }\n\n    }", "signature": "void testCanInstantiateWithBestMatchingConstructorWhenTheSignatureIsMorePrecise()", "full_signature": "@Test public void testCanInstantiateWithBestMatchingConstructorWhenTheSignatureIsMorePrecise()", "class_method_signature": "DefaultClassFactoryTest.testCanInstantiateWithBestMatchingConstructorWhenTheSignatureIsMorePrecise()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getValue", "newInstance", "arr", "valueOf", "fail", "assertEquals", "getValue", "newInstance", "arr", "fail"]}, "focal_class": {"identifier": "DefaultClassFactory", "superclass": "", "interfaces": "implements ClassFactory", "fields": [], "methods": [{"identifier": "forName", "parameters": "(String className)", "modifiers": "@Override public", "return": "Class<C>", "signature": "Class<C> forName(String className)", "full_signature": "@Override public Class<C> forName(String className)", "class_method_signature": "DefaultClassFactory.forName(String className)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final Class<T> c, final Class<?>[] argTypes, final Object... params)", "modifiers": "@Override public", "return": "T", "signature": "T newInstance(final Class<T> c, final Class<?>[] argTypes, final Object... params)", "full_signature": "@Override public T newInstance(final Class<T> c, final Class<?>[] argTypes, final Object... params)", "class_method_signature": "DefaultClassFactory.newInstance(final Class<T> c, final Class<?>[] argTypes, final Object... params)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final Class<T> c, final Object... params)", "modifiers": "@Override public", "return": "T", "signature": "T newInstance(final Class<T> c, final Object... params)", "full_signature": "@Override public T newInstance(final Class<T> c, final Object... params)", "class_method_signature": "DefaultClassFactory.newInstance(final Class<T> c, final Object... params)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> c, Object[] params, Invoker<T> invoker)", "modifiers": "private", "return": "T", "signature": "T newInstance(Class<T> c, Object[] params, Invoker<T> invoker)", "full_signature": "private T newInstance(Class<T> c, Object[] params, Invoker<T> invoker)", "class_method_signature": "DefaultClassFactory.newInstance(Class<T> c, Object[] params, Invoker<T> invoker)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/objectfactory/DefaultClassFactory.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final Class<T> c, final Class<?>[] argTypes, final Object... params)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T newInstance(final Class<T> c, final Class<?>[] argTypes, final Object... params) {\n        if (argTypes.length != params.length) {\n            throw new IllegalStateException(\"Argument types and values do not match! \" + Arrays.asList(argTypes) + \" / \" + Arrays.asList(params));\n        }\n\n        return newInstance(c, params, new Invoker<T>() {\n            @Override\n            public T invoke() throws InvocationTargetException, NoSuchMethodException, IllegalAccessException, InstantiationException {\n                return (T) ConstructorUtils.invokeConstructor(c, params, argTypes);\n            }\n        });\n    }", "signature": "T newInstance(final Class<T> c, final Class<?>[] argTypes, final Object... params)", "full_signature": "@Override public T newInstance(final Class<T> c, final Class<?>[] argTypes, final Object... params)", "class_method_signature": "DefaultClassFactory.newInstance(final Class<T> c, final Class<?>[] argTypes, final Object... params)", "testcase": false, "constructor": false, "invocations": ["asList", "asList", "newInstance", "invokeConstructor"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}