{"test_class": {"identifier": "VersionTest", "superclass": "", "interfaces": "", "fields": [], "file": "magnolia-core/src/test/java/info/magnolia/module/model/VersionTest.java"}, "test_case": {"identifier": "testShouldRejectInvalidCharsInClassifiers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldRejectInvalidCharsInClassifiers() {\n        try {\n            Version.parseVersion(\"3.0.0-/slash+plus\");\n            fail(\"should have failed\");\n        } catch (RuntimeException e) {\n            assertEquals(\"Invalid classifier: \\\"/slash+plus\\\" in version \\\"3.0.0-/slash+plus\\\"\", e.getMessage());\n        }\n    }", "signature": "void testShouldRejectInvalidCharsInClassifiers()", "full_signature": "@Test public void testShouldRejectInvalidCharsInClassifiers()", "class_method_signature": "VersionTest.testShouldRejectInvalidCharsInClassifiers()", "testcase": true, "constructor": false, "invocations": ["parseVersion", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "Version", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Version.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "log = org.slf4j.LoggerFactory.getLogger(Version.class)", "var_name": "log"}, {"original_string": "public static final Version UNDEFINED_FROM = new UndefinedEarlierVersion();", "modifier": "public static final", "type": "Version", "declarator": "UNDEFINED_FROM = new UndefinedEarlierVersion()", "var_name": "UNDEFINED_FROM"}, {"original_string": "public static final Version UNDEFINED_TO = new UndefinedLaterVersion();", "modifier": "public static final", "type": "Version", "declarator": "UNDEFINED_TO = new UndefinedLaterVersion()", "var_name": "UNDEFINED_TO"}, {"original_string": "public static final Version UNDEFINED_DEVELOPMENT_VERSION = new UndefinedDevelopmentVersion();", "modifier": "public static final", "type": "Version", "declarator": "UNDEFINED_DEVELOPMENT_VERSION = new UndefinedDevelopmentVersion()", "var_name": "UNDEFINED_DEVELOPMENT_VERSION"}, {"original_string": "private static final Pattern classifierValidation = Pattern.compile(\"[A-Za-z0-9-_]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "classifierValidation = Pattern.compile(\"[A-Za-z0-9-_]+\")", "var_name": "classifierValidation"}, {"original_string": "private final short major;", "modifier": "private final", "type": "short", "declarator": "major", "var_name": "major"}, {"original_string": "private final short minor;", "modifier": "private final", "type": "short", "declarator": "minor", "var_name": "minor"}, {"original_string": "private final short patch;", "modifier": "private final", "type": "short", "declarator": "patch", "var_name": "patch"}, {"original_string": "private final String classifier;", "modifier": "private final", "type": "String", "declarator": "classifier", "var_name": "classifier"}], "methods": [{"identifier": "Version", "parameters": "(int major, int minor, int patch)", "modifiers": "protected", "return": "", "signature": " Version(int major, int minor, int patch)", "full_signature": "protected  Version(int major, int minor, int patch)", "class_method_signature": "Version.Version(int major, int minor, int patch)", "testcase": false, "constructor": true}, {"identifier": "Version", "parameters": "(String versionStr)", "modifiers": "private", "return": "", "signature": " Version(String versionStr)", "full_signature": "private  Version(String versionStr)", "class_method_signature": "Version.Version(String versionStr)", "testcase": false, "constructor": true}, {"identifier": "parseVersion", "parameters": "(String versionStr)", "modifiers": "public static", "return": "Version", "signature": "Version parseVersion(String versionStr)", "full_signature": "public static Version parseVersion(String versionStr)", "class_method_signature": "Version.parseVersion(String versionStr)", "testcase": false, "constructor": false}, {"identifier": "parseVersion", "parameters": "(int major, int minor, int patch)", "modifiers": "public static", "return": "Version", "signature": "Version parseVersion(int major, int minor, int patch)", "full_signature": "public static Version parseVersion(int major, int minor, int patch)", "class_method_signature": "Version.parseVersion(int major, int minor, int patch)", "testcase": false, "constructor": false}, {"identifier": "isEquivalent", "parameters": "(final Version other)", "modifiers": "public", "return": "boolean", "signature": "boolean isEquivalent(final Version other)", "full_signature": "public boolean isEquivalent(final Version other)", "class_method_signature": "Version.isEquivalent(final Version other)", "testcase": false, "constructor": false}, {"identifier": "isStrictlyAfter", "parameters": "(final Version other)", "modifiers": "public", "return": "boolean", "signature": "boolean isStrictlyAfter(final Version other)", "full_signature": "public boolean isStrictlyAfter(final Version other)", "class_method_signature": "Version.isStrictlyAfter(final Version other)", "testcase": false, "constructor": false}, {"identifier": "isBeforeOrEquivalent", "parameters": "(final Version other)", "modifiers": "public", "return": "boolean", "signature": "boolean isBeforeOrEquivalent(final Version other)", "full_signature": "public boolean isBeforeOrEquivalent(final Version other)", "class_method_signature": "Version.isBeforeOrEquivalent(final Version other)", "testcase": false, "constructor": false}, {"identifier": "getMajor", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getMajor()", "full_signature": "public short getMajor()", "class_method_signature": "Version.getMajor()", "testcase": false, "constructor": false}, {"identifier": "getMinor", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getMinor()", "full_signature": "public short getMinor()", "class_method_signature": "Version.getMinor()", "testcase": false, "constructor": false}, {"identifier": "getPatch", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getPatch()", "full_signature": "public short getPatch()", "class_method_signature": "Version.getPatch()", "testcase": false, "constructor": false}, {"identifier": "getClassifier", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClassifier()", "full_signature": "public String getClassifier()", "class_method_signature": "Version.getClassifier()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Version.toString()", "testcase": false, "constructor": false}, {"identifier": "getShortFor", "parameters": "(String message, String versionStr, String input)", "modifiers": "private", "return": "short", "signature": "short getShortFor(String message, String versionStr, String input)", "full_signature": "private short getShortFor(String message, String versionStr, String input)", "class_method_signature": "Version.getShortFor(String message, String versionStr, String input)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Version.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Version.hashCode()", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/module/model/Version.java"}, "focal_method": {"identifier": "parseVersion", "parameters": "(String versionStr)", "modifiers": "public static", "return": "Version", "body": "public static Version parseVersion(String versionStr) {\n\n        versionStr = versionStr.trim();\n\n        log.debug(\"parsing version [{}]\", versionStr);\n\n        if (UndefinedDevelopmentVersion.isDevelopmentVersion(versionStr)) {\n            // development mode.\n            return UNDEFINED_DEVELOPMENT_VERSION;\n        }\n\n        return new Version(versionStr);\n    }", "signature": "Version parseVersion(String versionStr)", "full_signature": "public static Version parseVersion(String versionStr)", "class_method_signature": "Version.parseVersion(String versionStr)", "testcase": false, "constructor": false, "invocations": ["trim", "debug", "isDevelopmentVersion"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}