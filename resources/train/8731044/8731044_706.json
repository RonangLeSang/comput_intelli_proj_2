{"test_class": {"identifier": "DependencyLevelComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "magnolia-core/src/test/java/info/magnolia/module/model/reader/DependencyLevelComparatorTest.java"}, "test_case": {"identifier": "testCalcDependencyLevelDoesNotIgnoreRegisteredOptionalDependencies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalcDependencyLevelDoesNotIgnoreRegisteredOptionalDependencies() {\n        final ModuleDefinition modDefA = new ModuleDefinition(\"mod-a\", Version.parseVersion(\"1\"), \"fake.Module\", null);\n        final ModuleDefinition modDefB = new ModuleDefinition(\"mod-b\", Version.parseVersion(\"1\"), \"fake.Module\", null);\n        final ModuleDefinition modDefC = new ModuleDefinition(\"mod-c\", Version.parseVersion(\"1\"), \"fake.Module\", null);\n        final DependencyDefinition depOnA = new DependencyDefinition();\n        depOnA.setName(\"mod-a\");\n        depOnA.setVersion(\"1\");\n        depOnA.setOptional(true);\n        final DependencyDefinition depOnB = new DependencyDefinition();\n        depOnB.setName(\"mod-b\");\n        depOnB.setVersion(\"1\");\n        modDefB.addDependency(depOnA);\n        modDefC.addDependency(depOnA);\n        modDefC.addDependency(depOnB);\n\n        final Map<String, ModuleDefinition> map = new HashMap<String, ModuleDefinition>();\n        map.put(modDefA.getName(), modDefA);\n        map.put(modDefB.getName(), modDefB);\n        map.put(modDefC.getName(), modDefC);\n\n        final DependencyLevelComparator reg = new DependencyLevelComparator(map);\n\n        assertEquals(0, reg.calcDependencyDepth(modDefA));\n        assertEquals(1, reg.calcDependencyDepth(modDefB));\n        assertEquals(2, reg.calcDependencyDepth(modDefC));\n    }", "signature": "void testCalcDependencyLevelDoesNotIgnoreRegisteredOptionalDependencies()", "full_signature": "@Test public void testCalcDependencyLevelDoesNotIgnoreRegisteredOptionalDependencies()", "class_method_signature": "DependencyLevelComparatorTest.testCalcDependencyLevelDoesNotIgnoreRegisteredOptionalDependencies()", "testcase": true, "constructor": false, "invocations": ["parseVersion", "parseVersion", "parseVersion", "setName", "setVersion", "setOptional", "setName", "setVersion", "addDependency", "addDependency", "addDependency", "put", "getName", "put", "getName", "put", "getName", "assertEquals", "calcDependencyDepth", "assertEquals", "calcDependencyDepth", "assertEquals", "calcDependencyDepth"]}, "focal_class": {"identifier": "DependencyLevelComparator", "superclass": "", "interfaces": "implements Comparator<ModuleDefinition>", "fields": [{"original_string": "private final Map<String, ModuleDefinition> allKnownModulesDefinitions;", "modifier": "private final", "type": "Map<String, ModuleDefinition>", "declarator": "allKnownModulesDefinitions", "var_name": "allKnownModulesDefinitions"}], "methods": [{"identifier": "DependencyLevelComparator", "parameters": "(Map<String, ModuleDefinition> allKnownModulesDefinitions)", "modifiers": "", "return": "", "signature": " DependencyLevelComparator(Map<String, ModuleDefinition> allKnownModulesDefinitions)", "full_signature": "  DependencyLevelComparator(Map<String, ModuleDefinition> allKnownModulesDefinitions)", "class_method_signature": "DependencyLevelComparator.DependencyLevelComparator(Map<String, ModuleDefinition> allKnownModulesDefinitions)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(ModuleDefinition def1, ModuleDefinition def2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(ModuleDefinition def1, ModuleDefinition def2)", "full_signature": "@Override public int compare(ModuleDefinition def1, ModuleDefinition def2)", "class_method_signature": "DependencyLevelComparator.compare(ModuleDefinition def1, ModuleDefinition def2)", "testcase": false, "constructor": false}, {"identifier": "calcDependencyDepth", "parameters": "(ModuleDefinition def)", "modifiers": "protected", "return": "int", "signature": "int calcDependencyDepth(ModuleDefinition def)", "full_signature": "protected int calcDependencyDepth(ModuleDefinition def)", "class_method_signature": "DependencyLevelComparator.calcDependencyDepth(ModuleDefinition def)", "testcase": false, "constructor": false}, {"identifier": "calcDependencyLevel", "parameters": "(ModuleDefinition def)", "modifiers": "protected", "return": "int", "signature": "int calcDependencyLevel(ModuleDefinition def)", "full_signature": "protected int calcDependencyLevel(ModuleDefinition def)", "class_method_signature": "DependencyLevelComparator.calcDependencyLevel(ModuleDefinition def)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/module/model/reader/DependencyLevelComparator.java"}, "focal_method": {"identifier": "calcDependencyDepth", "parameters": "(ModuleDefinition def)", "modifiers": "protected", "return": "int", "body": "protected int calcDependencyDepth(ModuleDefinition def) {\n        if (def.getDependencies() == null || def.getDependencies().size() == 0) {\n            return 0;\n        }\n        final List<Integer> dependencyLevels = new ArrayList<Integer>();\n        for (final DependencyDefinition dep : def.getDependencies()) {\n            final ModuleDefinition depDef = allKnownModulesDefinitions.get(dep.getName());\n            if (depDef == null && !dep.isOptional()) {\n                throw new RuntimeException(\"Missing definition for module:\" + dep.getName());\n            } else if (depDef != null) {\n                dependencyLevels.add(Integer.valueOf(calcDependencyDepth(depDef)));\n            } else {\n                // optional dependency not present (will return 0 if no other dependencies add higher level)\n                dependencyLevels.add(-1);\n            }\n        }\n        return (Collections.max(dependencyLevels)).intValue() + 1;\n    }", "signature": "int calcDependencyDepth(ModuleDefinition def)", "full_signature": "protected int calcDependencyDepth(ModuleDefinition def)", "class_method_signature": "DependencyLevelComparator.calcDependencyDepth(ModuleDefinition def)", "testcase": false, "constructor": false, "invocations": ["getDependencies", "size", "getDependencies", "getDependencies", "get", "getName", "isOptional", "getName", "add", "valueOf", "calcDependencyDepth", "add", "intValue", "max"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}