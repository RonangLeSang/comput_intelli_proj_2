{"test_class": {"identifier": "PropertiesImportExportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PropertiesImportExport pie;", "modifier": "private", "type": "PropertiesImportExport", "declarator": "pie", "var_name": "pie"}], "file": "magnolia-core/src/test/java/info/magnolia/jcr/util/PropertiesImportExportTest.java"}, "test_case": {"identifier": "testExportsProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExportsProperties() throws RepositoryException {\n\n        MockNode node = new MockNode(\"nodename\");\n        node.setProperty(\"string-property\", \"string-value\");\n        node.setProperty(\"int-property\", 42);\n        node.setProperty(\"long-property\", 12);\n        Calendar date = Calendar.getInstance();\n        node.setProperty(\"date-property\", date);\n        node.setProperty(\"double-property\", 1.2345d);\n        node.setProperty(\"boolean-property\", true);\n        node.setProperty(\"path-property\", \"/some/path\", PropertyType.PATH);\n        node.setProperty(\"binary-property\", new BinaryValue(\"test string to be used as binary data its contents does not matter\"));\n\n        Properties p = pie.toProperties(node, new AbstractPredicate<Node>() {\n\n            @Override\n            public boolean evaluateTyped(Node node) {\n                return true;\n            }\n        });\n\n        assertFalse(p.isEmpty());\n        assertContains(p, \"/nodename.@type\", node.getPrimaryNodeType().getName());\n        assertContains(p, \"/nodename.@uuid\", node.getIdentifier());\n        assertContains(p, \"/nodename.string-property\", \"string-value\");\n        assertContains(p, \"/nodename.int-property\", \"42\");\n        assertContains(p, \"/nodename.long-property\", \"12\");\n        assertContains(p, \"/nodename.date-property\", \"date:\" + ISO8601.format(date));\n        assertContains(p, \"/nodename.double-property\", \"1.2345\");\n        assertContains(p, \"/nodename.boolean-property\", \"boolean:true\");\n        assertContains(p, \"/nodename.path-property\", \"/some/path\");\n        assertContains(p, \"/nodename.binary-property\", \"binary:test string to be used as binary data its contents does not matter\");\n    }", "signature": "void testExportsProperties()", "full_signature": "@Test public void testExportsProperties()", "class_method_signature": "PropertiesImportExportTest.testExportsProperties()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "getInstance", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "toProperties", "assertFalse", "isEmpty", "assertContains", "getName", "getPrimaryNodeType", "assertContains", "getIdentifier", "assertContains", "assertContains", "assertContains", "assertContains", "format", "assertContains", "assertContains", "assertContains", "assertContains"]}, "focal_class": {"identifier": "PropertiesImportExport", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createNodes", "parameters": "(Node root, String... properties)", "modifiers": "public", "return": "void", "signature": "void createNodes(Node root, String... properties)", "full_signature": "public void createNodes(Node root, String... properties)", "class_method_signature": "PropertiesImportExport.createNodes(Node root, String... properties)", "testcase": false, "constructor": false}, {"identifier": "createNodes", "parameters": "(Node root, InputStream propertiesStream)", "modifiers": "public", "return": "void", "signature": "void createNodes(Node root, InputStream propertiesStream)", "full_signature": "public void createNodes(Node root, InputStream propertiesStream)", "class_method_signature": "PropertiesImportExport.createNodes(Node root, InputStream propertiesStream)", "testcase": false, "constructor": false}, {"identifier": "keysToInnerFormat", "parameters": "(Properties properties)", "modifiers": "private", "return": "Properties", "signature": "Properties keysToInnerFormat(Properties properties)", "full_signature": "private Properties keysToInnerFormat(Properties properties)", "class_method_signature": "PropertiesImportExport.keysToInnerFormat(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "populateNode", "parameters": "(Node node, String name, String valueStr)", "modifiers": "protected", "return": "void", "signature": "void populateNode(Node node, String name, String valueStr)", "full_signature": "protected void populateNode(Node node, String name, String valueStr)", "class_method_signature": "PropertiesImportExport.populateNode(Node node, String name, String valueStr)", "testcase": false, "constructor": false}, {"identifier": "setIdentifier", "parameters": "(Node ignoredNode, String ignoredString)", "modifiers": "protected", "return": "void", "signature": "void setIdentifier(Node ignoredNode, String ignoredString)", "full_signature": "protected void setIdentifier(Node ignoredNode, String ignoredString)", "class_method_signature": "PropertiesImportExport.setIdentifier(Node ignoredNode, String ignoredString)", "testcase": false, "constructor": false}, {"identifier": "convertPropertyStringToObject", "parameters": "(String valueStr)", "modifiers": "protected", "return": "Object", "signature": "Object convertPropertyStringToObject(String valueStr)", "full_signature": "protected Object convertPropertyStringToObject(String valueStr)", "class_method_signature": "PropertiesImportExport.convertPropertyStringToObject(String valueStr)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String s, char ch)", "modifiers": "private static", "return": "boolean", "signature": "boolean contains(String s, char ch)", "full_signature": "private static boolean contains(String s, char ch)", "class_method_signature": "PropertiesImportExport.contains(String s, char ch)", "testcase": false, "constructor": false}, {"identifier": "toProperties", "parameters": "(Node node, final AbstractPredicate<Node> nodePredicate)", "modifiers": "public", "return": "Properties", "signature": "Properties toProperties(Node node, final AbstractPredicate<Node> nodePredicate)", "full_signature": "public Properties toProperties(Node node, final AbstractPredicate<Node> nodePredicate)", "class_method_signature": "PropertiesImportExport.toProperties(Node node, final AbstractPredicate<Node> nodePredicate)", "testcase": false, "constructor": false}, {"identifier": "appendNodeTypeAndIdentifier", "parameters": "(Node node, Properties out)", "modifiers": "private", "return": "void", "signature": "void appendNodeTypeAndIdentifier(Node node, Properties out)", "full_signature": "private void appendNodeTypeAndIdentifier(Node node, Properties out)", "class_method_signature": "PropertiesImportExport.appendNodeTypeAndIdentifier(Node node, Properties out)", "testcase": false, "constructor": false}, {"identifier": "appendNodeProperties", "parameters": "(Node node, Properties out)", "modifiers": "private", "return": "void", "signature": "void appendNodeProperties(Node node, Properties out)", "full_signature": "private void appendNodeProperties(Node node, Properties out)", "class_method_signature": "PropertiesImportExport.appendNodeProperties(Node node, Properties out)", "testcase": false, "constructor": false}, {"identifier": "getExportPath", "parameters": "(Node node)", "modifiers": "private", "return": "String", "signature": "String getExportPath(Node node)", "full_signature": "private String getExportPath(Node node)", "class_method_signature": "PropertiesImportExport.getExportPath(Node node)", "testcase": false, "constructor": false}, {"identifier": "getPropertyString", "parameters": "(Property property)", "modifiers": "private", "return": "String", "signature": "String getPropertyString(Property property)", "full_signature": "private String getPropertyString(Property property)", "class_method_signature": "PropertiesImportExport.getPropertyString(Property property)", "testcase": false, "constructor": false}, {"identifier": "convertBooleanToExportString", "parameters": "(boolean b)", "modifiers": "private", "return": "String", "signature": "String convertBooleanToExportString(boolean b)", "full_signature": "private String convertBooleanToExportString(boolean b)", "class_method_signature": "PropertiesImportExport.convertBooleanToExportString(boolean b)", "testcase": false, "constructor": false}, {"identifier": "convertBinaryToExportString", "parameters": "(Value value)", "modifiers": "private", "return": "String", "signature": "String convertBinaryToExportString(Value value)", "full_signature": "private String convertBinaryToExportString(Value value)", "class_method_signature": "PropertiesImportExport.convertBinaryToExportString(Value value)", "testcase": false, "constructor": false}, {"identifier": "convertCalendarToExportString", "parameters": "(Calendar calendar)", "modifiers": "private", "return": "String", "signature": "String convertCalendarToExportString(Calendar calendar)", "full_signature": "private String convertCalendarToExportString(Calendar calendar)", "class_method_signature": "PropertiesImportExport.convertCalendarToExportString(Calendar calendar)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/jcr/util/PropertiesImportExport.java"}, "focal_method": {"identifier": "toProperties", "parameters": "(Node node, final AbstractPredicate<Node> nodePredicate)", "modifiers": "public", "return": "Properties", "body": "public Properties toProperties(Node node, final AbstractPredicate<Node> nodePredicate) throws RepositoryException {\n        final Properties out = new OrderedProperties();\n        NodeUtil.visit(\n                node,\n                new NodeVisitor() {\n                    @Override\n                    public void visit(Node node) throws RepositoryException {\n                        appendNodeTypeAndIdentifier(node, out);\n                        appendNodeProperties(node, out);\n                    }\n                }, nodePredicate\n        );\n        return out;\n    }", "signature": "Properties toProperties(Node node, final AbstractPredicate<Node> nodePredicate)", "full_signature": "public Properties toProperties(Node node, final AbstractPredicate<Node> nodePredicate)", "class_method_signature": "PropertiesImportExport.toProperties(Node node, final AbstractPredicate<Node> nodePredicate)", "testcase": false, "constructor": false, "invocations": ["visit", "appendNodeTypeAndIdentifier", "appendNodeProperties"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}