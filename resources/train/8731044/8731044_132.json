{"test_class": {"identifier": "CopyGeneratorTest", "superclass": "extends RepositoryTestCase", "interfaces": "", "fields": [{"original_string": "protected static final String TEMPLATE_ID_VALUE = \"foo:/bar/baz\";", "modifier": "protected static final", "type": "String", "declarator": "TEMPLATE_ID_VALUE = \"foo:/bar/baz\"", "var_name": "TEMPLATE_ID_VALUE"}, {"original_string": "protected static final String USER_NAME = \"leobrouwer\";", "modifier": "protected static final", "type": "String", "declarator": "USER_NAME = \"leobrouwer\"", "var_name": "USER_NAME"}, {"original_string": "protected Session session;", "modifier": "protected", "type": "Session", "declarator": "session", "var_name": "session"}], "file": "magnolia-rendering/src/test/java/info/magnolia/rendering/generator/CopyGeneratorTest.java"}, "test_case": {"identifier": "testNestedNodesCreation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNestedNodesCreation() throws Exception {\n        //GIVEN\n        Node parent = session.getNode(\"/foo\");\n        AutoGenerationConfiguration config = mock(AutoGenerationConfiguration.class);\n\n        Map<String, Object> content = new HashMap<String, Object>();\n        Map<String, Object> firstNodeProps = new HashMap<String, Object>();\n        firstNodeProps.put(NODE_TYPE, NodeTypes.ContentNode.NAME);\n        firstNodeProps.put(TEMPLATE_ID, TEMPLATE_ID_VALUE);\n        firstNodeProps.put(\"anotherProp\", \"some value\");\n\n        Map<String, Object> nestedNodeProps = new HashMap<String, Object>();\n        nestedNodeProps.put(NODE_TYPE, NodeTypes.ContentNode.NAME);\n        nestedNodeProps.put(TEMPLATE_ID, TEMPLATE_ID_VALUE);\n        nestedNodeProps.put(\"someProp\", \"a different value\");\n\n        Map<String, Object> nestedSubNodeProps = new HashMap<String, Object>();\n        nestedSubNodeProps.put(NODE_TYPE, NodeTypes.ContentNode.NAME);\n        nestedSubNodeProps.put(TEMPLATE_ID, TEMPLATE_ID_VALUE);\n\n        nestedNodeProps.put(\"nestedSubNode-autogen\", nestedSubNodeProps);\n        firstNodeProps.put(\"nested-autogen\", nestedNodeProps);\n        content.put(\"autogen-foo\", firstNodeProps);\n\n        when(config.getContent()).thenReturn(content);\n\n        //WHEN\n        new CopyGenerator(parent).generate(config);\n\n        //THEN\n        Node newNode = session.getNode(\"/foo/autogen-foo\");\n        assertNodeAndMetaData(newNode, TEMPLATE_ID_VALUE, USER_NAME);\n        assertPropertyEquals(newNode, \"anotherProp\", \"some value\", PropertyType.STRING);\n\n        Node secondNode = session.getNode(\"/foo/autogen-foo/nested-autogen\");\n        assertNodeAndMetaData(secondNode, TEMPLATE_ID_VALUE, USER_NAME);\n        assertPropertyEquals(secondNode, \"someProp\", \"a different value\", PropertyType.STRING);\n\n        Node secondSubNode = session.getNode(\"/foo/autogen-foo/nested-autogen/nestedSubNode-autogen\");\n        assertNodeAndMetaData(secondSubNode, TEMPLATE_ID_VALUE, USER_NAME);\n\n    }", "signature": "void testNestedNodesCreation()", "full_signature": "@Test public void testNestedNodesCreation()", "class_method_signature": "CopyGeneratorTest.testNestedNodesCreation()", "testcase": true, "constructor": false, "invocations": ["getNode", "mock", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "thenReturn", "when", "getContent", "generate", "getNode", "assertNodeAndMetaData", "assertPropertyEquals", "getNode", "assertNodeAndMetaData", "assertPropertyEquals", "getNode", "assertNodeAndMetaData"]}, "focal_class": {"identifier": "CopyGenerator", "superclass": "", "interfaces": "implements Generator<AutoGenerationConfiguration>", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CopyGenerator.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CopyGenerator.class)", "var_name": "log"}, {"original_string": "private Node parent;", "modifier": "private", "type": "Node", "declarator": "parent", "var_name": "parent"}], "methods": [{"identifier": "CopyGenerator", "parameters": "(final Node parent)", "modifiers": "public", "return": "", "signature": " CopyGenerator(final Node parent)", "full_signature": "public  CopyGenerator(final Node parent)", "class_method_signature": "CopyGenerator.CopyGenerator(final Node parent)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(AutoGenerationConfiguration autoGenerationConfig)", "modifiers": "@Override public", "return": "void", "signature": "void generate(AutoGenerationConfiguration autoGenerationConfig)", "full_signature": "@Override public void generate(AutoGenerationConfiguration autoGenerationConfig)", "class_method_signature": "CopyGenerator.generate(AutoGenerationConfiguration autoGenerationConfig)", "testcase": false, "constructor": false}, {"identifier": "createNode", "parameters": "(Node parentNode, Map<String,Object> content)", "modifiers": "private", "return": "void", "signature": "void createNode(Node parentNode, Map<String,Object> content)", "full_signature": "private void createNode(Node parentNode, Map<String,Object> content)", "class_method_signature": "CopyGenerator.createNode(Node parentNode, Map<String,Object> content)", "testcase": false, "constructor": false}], "file": "magnolia-rendering/src/main/java/info/magnolia/rendering/generator/CopyGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(AutoGenerationConfiguration autoGenerationConfig)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void generate(AutoGenerationConfiguration autoGenerationConfig) throws RenderException {\n        if(autoGenerationConfig == null) {\n            throw new IllegalArgumentException(\"Expected an instance of AutoGenerationConfiguration but got null instead\");\n        }\n\n        createNode(parent, autoGenerationConfig.getContent());\n    }", "signature": "void generate(AutoGenerationConfiguration autoGenerationConfig)", "full_signature": "@Override public void generate(AutoGenerationConfiguration autoGenerationConfig)", "class_method_signature": "CopyGenerator.generate(AutoGenerationConfiguration autoGenerationConfig)", "testcase": false, "constructor": false, "invocations": ["createNode", "getContent"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}