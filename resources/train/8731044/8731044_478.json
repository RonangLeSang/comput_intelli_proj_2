{"test_class": {"identifier": "RuleTest", "superclass": "extends RepositoryTestCase", "interfaces": "", "fields": [], "file": "magnolia-core/src/test/java/info/magnolia/cms/util/RuleTest.java"}, "test_case": {"identifier": "testIsAllowedNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsAllowedNode() throws RepositoryException {\n        // GIVEN\n        Session session = MgnlContext.getJCRSession(RepositoryConstants.WEBSITE);\n        Node node =  session.getRootNode().addNode( \"page\", NodeTypes.Area.NAME);\n        String allowedTypes = \"mgnl:contentNode\";\n        Rule rule = new Rule(allowedTypes, \",\");\n\n        // WHEN\n        boolean allowed = rule.isAllowed(node);\n\n        // THEN\n        Assert.assertTrue(\"Should be allowd\", allowed);\n    }", "signature": "void testIsAllowedNode()", "full_signature": "@Test public void testIsAllowedNode()", "class_method_signature": "RuleTest.testIsAllowedNode()", "testcase": true, "constructor": false, "invocations": ["getJCRSession", "addNode", "getRootNode", "isAllowed", "assertTrue"]}, "focal_class": {"identifier": "Rule", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 222L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 222L", "var_name": "serialVersionUID"}, {"original_string": "private Set<String> allowedTypes = new HashSet<String>();", "modifier": "private", "type": "Set<String>", "declarator": "allowedTypes = new HashSet<String>()", "var_name": "allowedTypes"}, {"original_string": "private boolean reverse = false;", "modifier": "private", "type": "boolean", "declarator": "reverse = false", "var_name": "reverse"}], "methods": [{"identifier": "Rule", "parameters": "()", "modifiers": "public", "return": "", "signature": " Rule()", "full_signature": "public  Rule()", "class_method_signature": "Rule.Rule()", "testcase": false, "constructor": true}, {"identifier": "Rule", "parameters": "(String[] allowedTypes)", "modifiers": "public", "return": "", "signature": " Rule(String[] allowedTypes)", "full_signature": "public  Rule(String[] allowedTypes)", "class_method_signature": "Rule.Rule(String[] allowedTypes)", "testcase": false, "constructor": true}, {"identifier": "Rule", "parameters": "(String allowedTypes, String separator)", "modifiers": "public", "return": "", "signature": " Rule(String allowedTypes, String separator)", "full_signature": "public  Rule(String allowedTypes, String separator)", "class_method_signature": "Rule.Rule(String allowedTypes, String separator)", "testcase": false, "constructor": true}, {"identifier": "setAllowedTypes", "parameters": "(String[] types)", "modifiers": "public", "return": "void", "signature": "void setAllowedTypes(String[] types)", "full_signature": "public void setAllowedTypes(String[] types)", "class_method_signature": "Rule.setAllowedTypes(String[] types)", "testcase": false, "constructor": false}, {"identifier": "addAllowType", "parameters": "(String nodeType)", "modifiers": "public", "return": "void", "signature": "void addAllowType(String nodeType)", "full_signature": "public void addAllowType(String nodeType)", "class_method_signature": "Rule.addAllowType(String nodeType)", "testcase": false, "constructor": false}, {"identifier": "removeAllowType", "parameters": "(String nodeType)", "modifiers": "public", "return": "void", "signature": "void removeAllowType(String nodeType)", "full_signature": "public void removeAllowType(String nodeType)", "class_method_signature": "Rule.removeAllowType(String nodeType)", "testcase": false, "constructor": false}, {"identifier": "isAllowed", "parameters": "(String nodeType)", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowed(String nodeType)", "full_signature": "public boolean isAllowed(String nodeType)", "class_method_signature": "Rule.isAllowed(String nodeType)", "testcase": false, "constructor": false}, {"identifier": "isAllowed", "parameters": "(Node node)", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowed(Node node)", "full_signature": "public boolean isAllowed(Node node)", "class_method_signature": "Rule.isAllowed(Node node)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Rule.toString()", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reverse()", "full_signature": "public void reverse()", "class_method_signature": "Rule.reverse()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream ois)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream ois)", "full_signature": "private void readObject(ObjectInputStream ois)", "class_method_signature": "Rule.readObject(ObjectInputStream ois)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/cms/util/Rule.java"}, "focal_method": {"identifier": "isAllowed", "parameters": "(String nodeType)", "modifiers": "public", "return": "boolean", "body": "public boolean isAllowed(String nodeType) {\n        boolean allowed = this.allowedTypes.contains(nodeType);\n        if (this.reverse) {\n            return !allowed;\n        }\n\n        return allowed;\n\n    }", "signature": "boolean isAllowed(String nodeType)", "full_signature": "public boolean isAllowed(String nodeType)", "class_method_signature": "Rule.isAllowed(String nodeType)", "testcase": false, "constructor": false, "invocations": ["contains"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}