{"test_class": {"identifier": "HierarchyBasedI18nContentSupportTest", "superclass": "extends DefaultI18NContentSupportTest", "interfaces": "", "fields": [], "file": "magnolia-core/src/test/java/info/magnolia/cms/i18n/HierarchyBasedI18nContentSupportTest.java"}, "test_case": {"identifier": "testGetNodeDataEndlessLoop", "parameters": "()", "modifiers": "@Override @Test public", "return": "void", "body": "@Override\n    @Test\n    public void testGetNodeDataEndlessLoop() throws Exception {\n        HierarchyBasedI18nContentSupport defSupport = new HierarchyBasedI18nContentSupport();\n        defSupport.setEnabled(true);\n        defSupport.setFallbackLocale(DEFAULT_LOCALE);\n        defSupport.addLocale(new LocaleDefinition(\"de\", \"CH\", true));\n        defSupport.addLocale(new LocaleDefinition(\"it\", null, false));\n\n        Node node = new MockNode(\"foo\");\n        node = node.addNode(\"de\");\n        node = node.addNode(\"bar\");\n        MockContent content = new MockContent((MockNode) node);\n\n        // no language\n        NodeData defaultblah = content.setNodeData(\"blah\", \"val_blah\");\n        NodeData localized = defSupport.getNodeData(content, \"blah\");\n        assertEquals(defaultblah, localized);\n\n        // exact match doesn't exist, country_lang match doesn't exist, locale is country only\n        NodeData defaultFoo = content.setNodeData(\"foo\", \"val_foo\");\n        defSupport.setLocale(new Locale(\"de\"));\n        localized = defSupport.getNodeData(content, \"foo\");\n        assertEquals(defaultFoo, localized);\n\n        // exact match on the lang/country\n        node = new MockNode(\"de_CH\");\n        node = node.addNode(\"foo\");\n        node = node.addNode(\"bar\");\n        content = new MockContent((MockNode) node);\n\n        NodeData swissBlah = content.setNodeData(\"blah\", \"val_de_ch_blah\");\n        defSupport.setLocale(new Locale(\"de\", \"CH\"));\n        localized = defSupport.getNodeData(content, \"blah\");\n        assertEquals(swissBlah, localized);\n\n        // supported lang, but not country - should default to the same lang but with diff country\n        defSupport.setLocale(new Locale(\"de\", \"AT\"));\n        localized = defSupport.getNodeData(content, \"blah\");\n        assertEquals(swissBlah, localized);\n\n        // supported lang, but not w/o country code - should default to the same lang but with different country code\n        defSupport.setLocale(new Locale(\"de\"));\n        localized = defSupport.getNodeData(content, \"blah\");\n        assertEquals(swissBlah, localized);\n\n        //TODO what we should do when a Locale is not supported or disabled but the language tree exists anyway in the content repo?\n        //return null? return the fallback locale content? throw an exception?\n    }", "signature": "void testGetNodeDataEndlessLoop()", "full_signature": "@Override @Test public void testGetNodeDataEndlessLoop()", "class_method_signature": "HierarchyBasedI18nContentSupportTest.testGetNodeDataEndlessLoop()", "testcase": true, "constructor": false, "invocations": ["setEnabled", "setFallbackLocale", "addLocale", "addLocale", "addNode", "addNode", "setNodeData", "getNodeData", "assertEquals", "setNodeData", "setLocale", "getNodeData", "assertEquals", "addNode", "addNode", "setNodeData", "setLocale", "getNodeData", "assertEquals", "setLocale", "getNodeData", "assertEquals", "setLocale", "getNodeData", "assertEquals"]}, "focal_class": {"identifier": "HierarchyBasedI18nContentSupport", "superclass": "extends AbstractI18nContentSupport", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(HierarchyBasedI18nContentSupport.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(HierarchyBasedI18nContentSupport.class)", "var_name": "log"}], "methods": [{"identifier": "onDetermineLocale", "parameters": "()", "modifiers": "@Override protected", "return": "Locale", "signature": "Locale onDetermineLocale()", "full_signature": "@Override protected Locale onDetermineLocale()", "class_method_signature": "HierarchyBasedI18nContentSupport.onDetermineLocale()", "testcase": false, "constructor": false}, {"identifier": "toI18NURI", "parameters": "(String uri, Locale locale)", "modifiers": "@Override protected", "return": "String", "signature": "String toI18NURI(String uri, Locale locale)", "full_signature": "@Override protected String toI18NURI(String uri, Locale locale)", "class_method_signature": "HierarchyBasedI18nContentSupport.toI18NURI(String uri, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "toRawURI", "parameters": "(String i18nURI, Locale locale)", "modifiers": "@Override protected", "return": "String", "signature": "String toRawURI(String i18nURI, Locale locale)", "full_signature": "@Override protected String toRawURI(String i18nURI, Locale locale)", "class_method_signature": "HierarchyBasedI18nContentSupport.toRawURI(String i18nURI, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getNodeData", "parameters": "(Content node, String name)", "modifiers": "@Override public", "return": "NodeData", "signature": "NodeData getNodeData(Content node, String name)", "full_signature": "@Override public NodeData getNodeData(Content node, String name)", "class_method_signature": "HierarchyBasedI18nContentSupport.getNodeData(Content node, String name)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/cms/i18n/HierarchyBasedI18nContentSupport.java"}, "focal_method": {"identifier": "getNodeData", "parameters": "(Content node, String name)", "modifiers": "@Override public", "return": "NodeData", "body": "@Override\n    public NodeData getNodeData(Content node, String name) {\n        // return the node data\n        return node.getNodeData(name);\n    }", "signature": "NodeData getNodeData(Content node, String name)", "full_signature": "@Override public NodeData getNodeData(Content node, String name)", "class_method_signature": "HierarchyBasedI18nContentSupport.getNodeData(Content node, String name)", "testcase": false, "constructor": false, "invocations": ["getNodeData"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}