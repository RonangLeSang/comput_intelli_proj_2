{"test_class": {"identifier": "GuiceComponentProviderTest", "superclass": "extends AbstractMagnoliaTestCase", "interfaces": "", "fields": [{"original_string": "private MockContext mockContext;", "modifier": "private", "type": "MockContext", "declarator": "mockContext", "var_name": "mockContext"}], "file": "magnolia-core/src/test/java/info/magnolia/objectfactory/guice/GuiceComponentProviderTest.java"}, "test_case": {"identifier": "testGetComponentProvider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetComponentProvider() {\n        ComponentProviderConfiguration configuration = new ComponentProviderConfiguration();\n        GuiceComponentProvider p = createComponentProvider(configuration);\n        assertSame(p, p.getComponent(ComponentProvider.class));\n    }", "signature": "void testGetComponentProvider()", "full_signature": "@Test public void testGetComponentProvider()", "class_method_signature": "GuiceComponentProviderTest.testGetComponentProvider()", "testcase": true, "constructor": false, "invocations": ["createComponentProvider", "assertSame", "getComponent"]}, "focal_class": {"identifier": "GuiceComponentProvider", "superclass": "", "interfaces": "implements ComponentProvider", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(GuiceComponentProvider.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GuiceComponentProvider.class)", "var_name": "logger"}, {"original_string": "@Inject\n    private Injector injector;", "modifier": "@Inject\n    private", "type": "Injector", "declarator": "injector", "var_name": "injector"}, {"original_string": "private ObjectManufacturer manufacturer;", "modifier": "private", "type": "ObjectManufacturer", "declarator": "manufacturer", "var_name": "manufacturer"}, {"original_string": "private final Map<Class<?>, Class<?>> typeMappings;", "modifier": "private final", "type": "Map<Class<?>, Class<?>>", "declarator": "typeMappings", "var_name": "typeMappings"}, {"original_string": "private final GuiceComponentProvider parentComponentProvider;", "modifier": "private final", "type": "GuiceComponentProvider", "declarator": "parentComponentProvider", "var_name": "parentComponentProvider"}], "methods": [{"identifier": "GuiceComponentProvider", "parameters": "(Map<Class<?>, Class<?>> typeMappings, GuiceComponentProvider parentComponentProvider)", "modifiers": "public", "return": "", "signature": " GuiceComponentProvider(Map<Class<?>, Class<?>> typeMappings, GuiceComponentProvider parentComponentProvider)", "full_signature": "public  GuiceComponentProvider(Map<Class<?>, Class<?>> typeMappings, GuiceComponentProvider parentComponentProvider)", "class_method_signature": "GuiceComponentProvider.GuiceComponentProvider(Map<Class<?>, Class<?>> typeMappings, GuiceComponentProvider parentComponentProvider)", "testcase": false, "constructor": true}, {"identifier": "getImplementation", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "Class<? extends T>", "signature": "Class<? extends T> getImplementation(Class<T> type)", "full_signature": "@Override public Class<? extends T> getImplementation(Class<T> type)", "class_method_signature": "GuiceComponentProvider.getImplementation(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getSingleton", "parameters": "(Class<T> type)", "modifiers": "@Override @Deprecated public", "return": "T", "signature": "T getSingleton(Class<T> type)", "full_signature": "@Override @Deprecated public T getSingleton(Class<T> type)", "class_method_signature": "GuiceComponentProvider.getSingleton(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T getComponent(Class<T> type)", "full_signature": "@Override public T getComponent(Class<T> type)", "class_method_signature": "GuiceComponentProvider.getComponent(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> type, Object... parameters)", "modifiers": "@Override public", "return": "T", "signature": "T newInstance(Class<T> type, Object... parameters)", "full_signature": "@Override public T newInstance(Class<T> type, Object... parameters)", "class_method_signature": "GuiceComponentProvider.newInstance(Class<T> type, Object... parameters)", "testcase": false, "constructor": false}, {"identifier": "newInstanceWithParameterResolvers", "parameters": "(Class<T> type, ParameterResolver... parameterResolvers)", "modifiers": "@Override public", "return": "T", "signature": "T newInstanceWithParameterResolvers(Class<T> type, ParameterResolver... parameterResolvers)", "full_signature": "@Override public T newInstanceWithParameterResolvers(Class<T> type, ParameterResolver... parameterResolvers)", "class_method_signature": "GuiceComponentProvider.newInstanceWithParameterResolvers(Class<T> type, ParameterResolver... parameterResolvers)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(ParameterResolver[] array, ParameterResolver extra)", "modifiers": "private", "return": "ParameterResolver[]", "signature": "ParameterResolver[] concat(ParameterResolver[] array, ParameterResolver extra)", "full_signature": "private ParameterResolver[] concat(ParameterResolver[] array, ParameterResolver extra)", "class_method_signature": "GuiceComponentProvider.concat(ParameterResolver[] array, ParameterResolver extra)", "testcase": false, "constructor": false}, {"identifier": "getInjector", "parameters": "()", "modifiers": "public", "return": "Injector", "signature": "Injector getInjector()", "full_signature": "public Injector getInjector()", "class_method_signature": "GuiceComponentProvider.getInjector()", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "(Class<T> type)", "modifiers": "public", "return": "Provider<T>", "signature": "Provider<T> getProvider(Class<T> type)", "full_signature": "public Provider<T> getProvider(Class<T> type)", "class_method_signature": "GuiceComponentProvider.getProvider(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "injectMembers", "parameters": "(Object instance)", "modifiers": "public", "return": "void", "signature": "void injectMembers(Object instance)", "full_signature": "public void injectMembers(Object instance)", "class_method_signature": "GuiceComponentProvider.injectMembers(Object instance)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "GuiceComponentProvider.destroy()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "GuiceComponentProvider", "signature": "GuiceComponentProvider getParent()", "full_signature": "@Override public GuiceComponentProvider getParent()", "class_method_signature": "GuiceComponentProvider.getParent()", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/objectfactory/guice/GuiceComponentProvider.java"}, "focal_method": {"identifier": "getComponent", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T getComponent(Class<T> type) throws NoSuchComponentException{\n        if (!GuiceUtils.hasExplicitBindingFor(injector, type)) {\n            throw new NoSuchComponentException(\"No component configuration for type [\" + type.getName() + \"] found. Please add a configuration to your module descriptor.\");\n        }\n        return injector.getInstance(type);\n    }", "signature": "T getComponent(Class<T> type)", "full_signature": "@Override public T getComponent(Class<T> type)", "class_method_signature": "GuiceComponentProvider.getComponent(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["hasExplicitBindingFor", "getName", "getInstance"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}