{"test_class": {"identifier": "ModeDependentRenderExceptionHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RenderingContext renderingContext;", "modifier": "private", "type": "RenderingContext", "declarator": "renderingContext", "var_name": "renderingContext"}, {"original_string": "private AppendableWriter out;", "modifier": "private", "type": "AppendableWriter", "declarator": "out", "var_name": "out"}], "file": "magnolia-rendering/src/test/java/info/magnolia/rendering/engine/ModeDependentRenderExceptionHandlerTest.java"}, "test_case": {"identifier": "testOnlyExceptionGetsFlushedInAdminPreviewMode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnlyExceptionGetsFlushedInAdminPreviewMode() throws IOException {\n        // GIVEN\n        final RenderException ex = mock(RenderException.class);\n        final ServerConfiguration serverConfig = new ServerConfiguration();\n        serverConfig.setAdmin(true);\n\n        MgnlContext.getAggregationState().setPreviewMode(true);\n        ModeDependentRenderExceptionHandler handler = new ModeDependentRenderExceptionHandler(serverConfig);\n\n        // WHEN\n        handler.handleException(ex, renderingContext);\n\n        // THEN\n        verify(ex).printStackTrace((PrintWriter) any());\n        verify(out).flush();\n    }", "signature": "void testOnlyExceptionGetsFlushedInAdminPreviewMode()", "full_signature": "@Test public void testOnlyExceptionGetsFlushedInAdminPreviewMode()", "class_method_signature": "ModeDependentRenderExceptionHandlerTest.testOnlyExceptionGetsFlushedInAdminPreviewMode()", "testcase": true, "constructor": false, "invocations": ["mock", "setAdmin", "setPreviewMode", "getAggregationState", "handleException", "printStackTrace", "verify", "any", "flush", "verify"]}, "focal_class": {"identifier": "ModeDependentRenderExceptionHandler", "superclass": "", "interfaces": "implements RenderExceptionHandler", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(ModeDependentRenderExceptionHandler.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ModeDependentRenderExceptionHandler.class)", "var_name": "log"}, {"original_string": "public static final String RENDER_ERROR_MESSAGE_BEGIN =\n            \"<!-- ERROR MESSAGE STARTS HERE --><script language=javascript>//\\\"></script><script language=javascript>//\\'></script><script language=javascript>//\\\"></script><script language=javascript>//\\'></script></title></xmp></script></noscript></style></object></head></pre></table></form></table></table></table></a></u></i></b><div align=left style='background-color:#FFFF00; color:#FF0000; display:block; border-top:double; padding:2pt; font-size:medium; font-family:Arial,sans-serif; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; text-transform: none'><b style='font-size:medium'>Template Error!</b><pre><xmp>\";", "modifier": "public static final", "type": "String", "declarator": "RENDER_ERROR_MESSAGE_BEGIN =\n            \"<!-- ERROR MESSAGE STARTS HERE --><script language=javascript>//\\\"></script><script language=javascript>//\\'></script><script language=javascript>//\\\"></script><script language=javascript>//\\'></script></title></xmp></script></noscript></style></object></head></pre></table></form></table></table></table></a></u></i></b><div align=left style='background-color:#FFFF00; color:#FF0000; display:block; border-top:double; padding:2pt; font-size:medium; font-family:Arial,sans-serif; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; text-transform: none'><b style='font-size:medium'>Template Error!</b><pre><xmp>\"", "var_name": "RENDER_ERROR_MESSAGE_BEGIN"}, {"original_string": "public static final String RENDER_ERROR_MESSAGE_END = \"</xmp></pre></div></html>\";", "modifier": "public static final", "type": "String", "declarator": "RENDER_ERROR_MESSAGE_END = \"</xmp></pre></div></html>\"", "var_name": "RENDER_ERROR_MESSAGE_END"}, {"original_string": "private ServerConfiguration serverConfiguration;", "modifier": "private", "type": "ServerConfiguration", "declarator": "serverConfiguration", "var_name": "serverConfiguration"}], "methods": [{"identifier": "ModeDependentRenderExceptionHandler", "parameters": "(ServerConfiguration config)", "modifiers": "@Inject public", "return": "", "signature": " ModeDependentRenderExceptionHandler(ServerConfiguration config)", "full_signature": "@Inject public  ModeDependentRenderExceptionHandler(ServerConfiguration config)", "class_method_signature": "ModeDependentRenderExceptionHandler.ModeDependentRenderExceptionHandler(ServerConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "handleException", "parameters": "(RenderException renderException, RenderingContext renderingContext)", "modifiers": "@Override public", "return": "void", "signature": "void handleException(RenderException renderException, RenderingContext renderingContext)", "full_signature": "@Override public void handleException(RenderException renderException, RenderingContext renderingContext)", "class_method_signature": "ModeDependentRenderExceptionHandler.handleException(RenderException renderException, RenderingContext renderingContext)", "testcase": false, "constructor": false}, {"identifier": "getPrintWriterFor", "parameters": "(Writer out)", "modifiers": "private", "return": "PrintWriter", "signature": "PrintWriter getPrintWriterFor(Writer out)", "full_signature": "private PrintWriter getPrintWriterFor(Writer out)", "class_method_signature": "ModeDependentRenderExceptionHandler.getPrintWriterFor(Writer out)", "testcase": false, "constructor": false}, {"identifier": "inPublicMode", "parameters": "(String msg, RenderException renderException, PrintWriter out)", "modifiers": "protected", "return": "void", "signature": "void inPublicMode(String msg, RenderException renderException, PrintWriter out)", "full_signature": "protected void inPublicMode(String msg, RenderException renderException, PrintWriter out)", "class_method_signature": "ModeDependentRenderExceptionHandler.inPublicMode(String msg, RenderException renderException, PrintWriter out)", "testcase": false, "constructor": false}, {"identifier": "inEditMode", "parameters": "(String msg, RenderException renderException, PrintWriter out)", "modifiers": "protected", "return": "void", "signature": "void inEditMode(String msg, RenderException renderException, PrintWriter out)", "full_signature": "protected void inEditMode(String msg, RenderException renderException, PrintWriter out)", "class_method_signature": "ModeDependentRenderExceptionHandler.inEditMode(String msg, RenderException renderException, PrintWriter out)", "testcase": false, "constructor": false}], "file": "magnolia-rendering/src/main/java/info/magnolia/rendering/engine/ModeDependentRenderExceptionHandler.java"}, "focal_method": {"identifier": "handleException", "parameters": "(RenderException renderException, RenderingContext renderingContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handleException(RenderException renderException, RenderingContext renderingContext) {\n        String path;\n        try {\n            path = renderingContext.getCurrentContent().getPath();\n        }\n        catch (RepositoryException e) {\n            path = \"Can't read content\";\n        }\n        String id = renderingContext.getRenderableDefinition().getId();\n        PrintWriter out;\n        try {\n            out = getPrintWriterFor(renderingContext.getAppendable());\n            String msg = \"Error while rendering [\" + path + \"] with template [\"+id+\"]: \" + ExceptionUtils.getMessage(renderException);\n            if ( serverConfiguration.isAdmin() && !MgnlContext.getAggregationState().isPreviewMode()) {\n                inEditMode(msg, renderException, out);\n            } else {\n                inPublicMode(msg, renderException, out);\n            }\n        }\n        catch (IOException e) {\n            throw new RuntimeException(\"Can't log template exception.\", e);\n        }\n        out.flush();\n    }", "signature": "void handleException(RenderException renderException, RenderingContext renderingContext)", "full_signature": "@Override public void handleException(RenderException renderException, RenderingContext renderingContext)", "class_method_signature": "ModeDependentRenderExceptionHandler.handleException(RenderException renderException, RenderingContext renderingContext)", "testcase": false, "constructor": false, "invocations": ["getPath", "getCurrentContent", "getId", "getRenderableDefinition", "getPrintWriterFor", "getAppendable", "getMessage", "isAdmin", "isPreviewMode", "getAggregationState", "inEditMode", "inPublicMode", "flush"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}