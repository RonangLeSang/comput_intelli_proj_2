{"test_class": {"identifier": "ContentUtilTest", "superclass": "extends MgnlTestCase", "interfaces": "", "fields": [{"original_string": "private MockContent rootABC;", "modifier": "private", "type": "MockContent", "declarator": "rootABC", "var_name": "rootABC"}], "file": "magnolia-core/src/test/java/info/magnolia/cms/util/ContentUtilTest.java"}, "test_case": {"identifier": "testAsContentReturnsNullIfNodeIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsContentReturnsNullIfNodeIsNull() throws Exception{\n        // GIVEN\n        Node node = null;\n\n        // WHEN\n        Content content = ContentUtil.asContent(node);\n\n        // THEN\n        assertNull(content);\n    }", "signature": "void testAsContentReturnsNullIfNodeIsNull()", "full_signature": "@Test public void testAsContentReturnsNullIfNodeIsNull()", "class_method_signature": "ContentUtilTest.testAsContentReturnsNullIfNodeIsNull()", "testcase": true, "constructor": false, "invocations": ["asContent", "assertNull"]}, "focal_class": {"identifier": "ContentUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(ContentUtil.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ContentUtil.class)", "var_name": "log"}, {"original_string": "public static ContentFilter ALL_NODES_CONTENT_FILTER = new ContentFilter() {\n\n        @Override\n        public boolean accept(Content content) {\n            return true;\n        }\n    };", "modifier": "public static", "type": "ContentFilter", "declarator": "ALL_NODES_CONTENT_FILTER = new ContentFilter() {\n\n        @Override\n        public boolean accept(Content content) {\n            return true;\n        }\n    }", "var_name": "ALL_NODES_CONTENT_FILTER"}, {"original_string": "public static ContentFilter ALL_NODES_EXCEPT_JCR_CONTENT_FILTER = new ContentFilter() {\n\n        @Override\n        public boolean accept(Content content) {\n            return !content.getName().startsWith(\"jcr:\");\n        }\n    };", "modifier": "public static", "type": "ContentFilter", "declarator": "ALL_NODES_EXCEPT_JCR_CONTENT_FILTER = new ContentFilter() {\n\n        @Override\n        public boolean accept(Content content) {\n            return !content.getName().startsWith(\"jcr:\");\n        }\n    }", "var_name": "ALL_NODES_EXCEPT_JCR_CONTENT_FILTER"}, {"original_string": "public static ContentFilter EXCLUDE_META_DATA_CONTENT_FILTER = new ContentFilter() {\n        @Override\n        public boolean accept(Content content) {\n            return !content.getName().startsWith(\"jcr:\") && !content.isNodeType(ItemType.NT_METADATA);\n        }\n    };", "modifier": "public static", "type": "ContentFilter", "declarator": "EXCLUDE_META_DATA_CONTENT_FILTER = new ContentFilter() {\n        @Override\n        public boolean accept(Content content) {\n            return !content.getName().startsWith(\"jcr:\") && !content.isNodeType(ItemType.NT_METADATA);\n        }\n    }", "var_name": "EXCLUDE_META_DATA_CONTENT_FILTER"}, {"original_string": "public static ContentFilter MAGNOLIA_FILTER = new ContentFilter() {\n        @Override\n        public boolean accept(Content content) {\n\n            try {\n                String nodetype = content.getNodeType().getName();\n                // export only \"magnolia\" nodes\n                return nodetype.startsWith(\"mgnl:\");\n            }\n            catch (RepositoryException e) {\n                log.error(\"Unable to read nodetype for node {}\", content.getHandle());\n            }\n            return false;\n        }\n    };", "modifier": "public static", "type": "ContentFilter", "declarator": "MAGNOLIA_FILTER = new ContentFilter() {\n        @Override\n        public boolean accept(Content content) {\n\n            try {\n                String nodetype = content.getNodeType().getName();\n                // export only \"magnolia\" nodes\n                return nodetype.startsWith(\"mgnl:\");\n            }\n            catch (RepositoryException e) {\n                log.error(\"Unable to read nodetype for node {}\", content.getHandle());\n            }\n            return false;\n        }\n    }", "var_name": "MAGNOLIA_FILTER"}], "methods": [{"identifier": "getContent", "parameters": "(String repository, String path)", "modifiers": "public static", "return": "Content", "signature": "Content getContent(String repository, String path)", "full_signature": "public static Content getContent(String repository, String path)", "class_method_signature": "ContentUtil.getContent(String repository, String path)", "testcase": false, "constructor": false}, {"identifier": "getContentByUUID", "parameters": "(String repository, String uuid)", "modifiers": "public static", "return": "Content", "signature": "Content getContentByUUID(String repository, String uuid)", "full_signature": "public static Content getContentByUUID(String repository, String uuid)", "class_method_signature": "ContentUtil.getContentByUUID(String repository, String uuid)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(Content node, String name)", "modifiers": "public static", "return": "Content", "signature": "Content getContent(Content node, String name)", "full_signature": "public static Content getContent(Content node, String name)", "class_method_signature": "ContentUtil.getContent(Content node, String name)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateContent", "parameters": "(Content node, String name, ItemType contentType)", "modifiers": "public static", "return": "Content", "signature": "Content getOrCreateContent(Content node, String name, ItemType contentType)", "full_signature": "public static Content getOrCreateContent(Content node, String name, ItemType contentType)", "class_method_signature": "ContentUtil.getOrCreateContent(Content node, String name, ItemType contentType)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateContent", "parameters": "(Content node, String name, ItemType contentType, boolean save)", "modifiers": "public static", "return": "Content", "signature": "Content getOrCreateContent(Content node, String name, ItemType contentType, boolean save)", "full_signature": "public static Content getOrCreateContent(Content node, String name, ItemType contentType, boolean save)", "class_method_signature": "ContentUtil.getOrCreateContent(Content node, String name, ItemType contentType, boolean save)", "testcase": false, "constructor": false}, {"identifier": "getCaseInsensitive", "parameters": "(Content node, String name)", "modifiers": "public static", "return": "Content", "signature": "Content getCaseInsensitive(Content node, String name)", "full_signature": "public static Content getCaseInsensitive(Content node, String name)", "class_method_signature": "ContentUtil.getCaseInsensitive(Content node, String name)", "testcase": false, "constructor": false}, {"identifier": "collectAllChildren", "parameters": "(Content node)", "modifiers": "public static", "return": "List<Content>", "signature": "List<Content> collectAllChildren(Content node)", "full_signature": "public static List<Content> collectAllChildren(Content node)", "class_method_signature": "ContentUtil.collectAllChildren(Content node)", "testcase": false, "constructor": false}, {"identifier": "collectAllChildren", "parameters": "(Content node, ContentFilter filter)", "modifiers": "public static", "return": "List<Content>", "signature": "List<Content> collectAllChildren(Content node, ContentFilter filter)", "full_signature": "public static List<Content> collectAllChildren(Content node, ContentFilter filter)", "class_method_signature": "ContentUtil.collectAllChildren(Content node, ContentFilter filter)", "testcase": false, "constructor": false}, {"identifier": "collectAllChildren", "parameters": "(List<Content> nodes, Content node, ContentFilter filter)", "modifiers": "private static", "return": "List<Content>", "signature": "List<Content> collectAllChildren(List<Content> nodes, Content node, ContentFilter filter)", "full_signature": "private static List<Content> collectAllChildren(List<Content> nodes, Content node, ContentFilter filter)", "class_method_signature": "ContentUtil.collectAllChildren(List<Content> nodes, Content node, ContentFilter filter)", "testcase": false, "constructor": false}, {"identifier": "collectAllChildren", "parameters": "(Content node, ItemType type)", "modifiers": "public static", "return": "List<Content>", "signature": "List<Content> collectAllChildren(Content node, ItemType type)", "full_signature": "public static List<Content> collectAllChildren(Content node, ItemType type)", "class_method_signature": "ContentUtil.collectAllChildren(Content node, ItemType type)", "testcase": false, "constructor": false}, {"identifier": "getAllChildren", "parameters": "(Content node)", "modifiers": "public static", "return": "Collection<Content>", "signature": "Collection<Content> getAllChildren(Content node)", "full_signature": "public static Collection<Content> getAllChildren(Content node)", "class_method_signature": "ContentUtil.getAllChildren(Content node)", "testcase": false, "constructor": false}, {"identifier": "getAllChildren", "parameters": "(Content node, Comparator<Content> comp)", "modifiers": "public static", "return": "Collection<Content>", "signature": "Collection<Content> getAllChildren(Content node, Comparator<Content> comp)", "full_signature": "public static Collection<Content> getAllChildren(Content node, Comparator<Content> comp)", "class_method_signature": "ContentUtil.getAllChildren(Content node, Comparator<Content> comp)", "testcase": false, "constructor": false}, {"identifier": "collectAllChildren", "parameters": "(Content node, ItemType[] types)", "modifiers": "public static", "return": "List<Content>", "signature": "List<Content> collectAllChildren(Content node, ItemType[] types)", "full_signature": "public static List<Content> collectAllChildren(Content node, ItemType[] types)", "class_method_signature": "ContentUtil.collectAllChildren(Content node, ItemType[] types)", "testcase": false, "constructor": false}, {"identifier": "collectAllChildren", "parameters": "(List<Content> nodes, Content node, ItemType[] types)", "modifiers": "private static", "return": "List<Content>", "signature": "List<Content> collectAllChildren(List<Content> nodes, Content node, ItemType[] types)", "full_signature": "private static List<Content> collectAllChildren(List<Content> nodes, Content node, ItemType[] types)", "class_method_signature": "ContentUtil.collectAllChildren(List<Content> nodes, Content node, ItemType[] types)", "testcase": false, "constructor": false}, {"identifier": "getAncestorOfType", "parameters": "(final Content firstNode, final String nodeType)", "modifiers": "public static", "return": "Content", "signature": "Content getAncestorOfType(final Content firstNode, final String nodeType)", "full_signature": "public static Content getAncestorOfType(final Content firstNode, final String nodeType)", "class_method_signature": "ContentUtil.getAncestorOfType(final Content firstNode, final String nodeType)", "testcase": false, "constructor": false}, {"identifier": "orderBefore", "parameters": "(Content nodeToMove, String targetNodeName)", "modifiers": "public static", "return": "void", "signature": "void orderBefore(Content nodeToMove, String targetNodeName)", "full_signature": "public static void orderBefore(Content nodeToMove, String targetNodeName)", "class_method_signature": "ContentUtil.orderBefore(Content nodeToMove, String targetNodeName)", "testcase": false, "constructor": false}, {"identifier": "orderAfter", "parameters": "(Content nodeToMove, String targetNodeName)", "modifiers": "public static", "return": "void", "signature": "void orderAfter(Content nodeToMove, String targetNodeName)", "full_signature": "public static void orderAfter(Content nodeToMove, String targetNodeName)", "class_method_signature": "ContentUtil.orderAfter(Content nodeToMove, String targetNodeName)", "testcase": false, "constructor": false}, {"identifier": "orderNodes", "parameters": "(Content node, String[] nodes)", "modifiers": "public static", "return": "void", "signature": "void orderNodes(Content node, String[] nodes)", "full_signature": "public static void orderNodes(Content node, String[] nodes)", "class_method_signature": "ContentUtil.orderNodes(Content node, String[] nodes)", "testcase": false, "constructor": false}, {"identifier": "orderNodes", "parameters": "(Content node, Comparator<Content> comparator)", "modifiers": "public static", "return": "void", "signature": "void orderNodes(Content node, Comparator<Content> comparator)", "full_signature": "public static void orderNodes(Content node, Comparator<Content> comparator)", "class_method_signature": "ContentUtil.orderNodes(Content node, Comparator<Content> comparator)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Content node, Visitor visitor)", "modifiers": "public static", "return": "void", "signature": "void visit(Content node, Visitor visitor)", "full_signature": "public static void visit(Content node, Visitor visitor)", "class_method_signature": "ContentUtil.visit(Content node, Visitor visitor)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Content node, Visitor visitor, ContentFilter filter)", "modifiers": "public static", "return": "void", "signature": "void visit(Content node, Visitor visitor, ContentFilter filter)", "full_signature": "public static void visit(Content node, Visitor visitor, ContentFilter filter)", "class_method_signature": "ContentUtil.visit(Content node, Visitor visitor, ContentFilter filter)", "testcase": false, "constructor": false}, {"identifier": "createPath", "parameters": "(HierarchyManager hm, String path)", "modifiers": "public static", "return": "Content", "signature": "Content createPath(HierarchyManager hm, String path)", "full_signature": "public static Content createPath(HierarchyManager hm, String path)", "class_method_signature": "ContentUtil.createPath(HierarchyManager hm, String path)", "testcase": false, "constructor": false}, {"identifier": "createPath", "parameters": "(HierarchyManager hm, String path, boolean save)", "modifiers": "public static", "return": "Content", "signature": "Content createPath(HierarchyManager hm, String path, boolean save)", "full_signature": "public static Content createPath(HierarchyManager hm, String path, boolean save)", "class_method_signature": "ContentUtil.createPath(HierarchyManager hm, String path, boolean save)", "testcase": false, "constructor": false}, {"identifier": "createPath", "parameters": "(HierarchyManager hm, String path, ItemType type)", "modifiers": "public static", "return": "Content", "signature": "Content createPath(HierarchyManager hm, String path, ItemType type)", "full_signature": "public static Content createPath(HierarchyManager hm, String path, ItemType type)", "class_method_signature": "ContentUtil.createPath(HierarchyManager hm, String path, ItemType type)", "testcase": false, "constructor": false}, {"identifier": "createPath", "parameters": "(HierarchyManager hm, String path, ItemType type, boolean save)", "modifiers": "public static", "return": "Content", "signature": "Content createPath(HierarchyManager hm, String path, ItemType type, boolean save)", "full_signature": "public static Content createPath(HierarchyManager hm, String path, ItemType type, boolean save)", "class_method_signature": "ContentUtil.createPath(HierarchyManager hm, String path, ItemType type, boolean save)", "testcase": false, "constructor": false}, {"identifier": "createPath", "parameters": "(Content parent, String path, ItemType type)", "modifiers": "public static", "return": "Content", "signature": "Content createPath(Content parent, String path, ItemType type)", "full_signature": "public static Content createPath(Content parent, String path, ItemType type)", "class_method_signature": "ContentUtil.createPath(Content parent, String path, ItemType type)", "testcase": false, "constructor": false}, {"identifier": "createPath", "parameters": "(Content parent, String path, ItemType type, boolean save)", "modifiers": "public static", "return": "Content", "signature": "Content createPath(Content parent, String path, ItemType type, boolean save)", "full_signature": "public static Content createPath(Content parent, String path, ItemType type, boolean save)", "class_method_signature": "ContentUtil.createPath(Content parent, String path, ItemType type, boolean save)", "testcase": false, "constructor": false}, {"identifier": "uuid2path", "parameters": "(String repository, String uuid)", "modifiers": "public static", "return": "String", "signature": "String uuid2path(String repository, String uuid)", "full_signature": "public static String uuid2path(String repository, String uuid)", "class_method_signature": "ContentUtil.uuid2path(String repository, String uuid)", "testcase": false, "constructor": false}, {"identifier": "path2uuid", "parameters": "(String repository, String path)", "modifiers": "public static", "return": "String", "signature": "String path2uuid(String repository, String path)", "full_signature": "public static String path2uuid(String repository, String path)", "class_method_signature": "ContentUtil.path2uuid(String repository, String path)", "testcase": false, "constructor": false}, {"identifier": "deleteAndRemoveEmptyParents", "parameters": "(Content node)", "modifiers": "public static", "return": "void", "signature": "void deleteAndRemoveEmptyParents(Content node)", "full_signature": "public static void deleteAndRemoveEmptyParents(Content node)", "class_method_signature": "ContentUtil.deleteAndRemoveEmptyParents(Content node)", "testcase": false, "constructor": false}, {"identifier": "deleteAndRemoveEmptyParents", "parameters": "(Content node, int level)", "modifiers": "public static", "return": "void", "signature": "void deleteAndRemoveEmptyParents(Content node, int level)", "full_signature": "public static void deleteAndRemoveEmptyParents(Content node, int level)", "class_method_signature": "ContentUtil.deleteAndRemoveEmptyParents(Content node, int level)", "testcase": false, "constructor": false}, {"identifier": "copyInSession", "parameters": "(Content src, String dest)", "modifiers": "public static", "return": "void", "signature": "void copyInSession(Content src, String dest)", "full_signature": "public static void copyInSession(Content src, String dest)", "class_method_signature": "ContentUtil.copyInSession(Content src, String dest)", "testcase": false, "constructor": false}, {"identifier": "moveInSession", "parameters": "(Content src, String dest)", "modifiers": "public static", "return": "void", "signature": "void moveInSession(Content src, String dest)", "full_signature": "public static void moveInSession(Content src, String dest)", "class_method_signature": "ContentUtil.moveInSession(Content src, String dest)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(Content node, String newName)", "modifiers": "public static", "return": "void", "signature": "void rename(Content node, String newName)", "full_signature": "public static void rename(Content node, String newName)", "class_method_signature": "ContentUtil.rename(Content node, String newName)", "testcase": false, "constructor": false}, {"identifier": "changeNodeType", "parameters": "(Content node, ItemType newType, boolean replaceAll)", "modifiers": "public static", "return": "void", "signature": "void changeNodeType(Content node, ItemType newType, boolean replaceAll)", "full_signature": "public static void changeNodeType(Content node, ItemType newType, boolean replaceAll)", "class_method_signature": "ContentUtil.changeNodeType(Content node, ItemType newType, boolean replaceAll)", "testcase": false, "constructor": false}, {"identifier": "asContent", "parameters": "(Node content)", "modifiers": "public static", "return": "Content", "signature": "Content asContent(Node content)", "full_signature": "public static Content asContent(Node content)", "class_method_signature": "ContentUtil.asContent(Node content)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/cms/util/ContentUtil.java"}, "focal_method": {"identifier": "asContent", "parameters": "(Node content)", "modifiers": "public static", "return": "Content", "body": "public static Content asContent(Node content) {\n        if(content == null) {\n            return null;\n        }\n        return new DefaultContent(content);\n    }", "signature": "Content asContent(Node content)", "full_signature": "public static Content asContent(Node content)", "class_method_signature": "ContentUtil.asContent(Node content)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}