{"test_class": {"identifier": "MgnlUserManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "magnolia-core/src/test/java/info/magnolia/cms/security/MgnlUserManagerTest.java"}, "test_case": {"identifier": "testFindPrincipalNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindPrincipalNode() throws RepositoryException {\n        // GIVEN\n        final Session session = mock(Session.class);\n        final Workspace workspace = mock(Workspace.class);\n        final QueryManager qm = mock(QueryManager.class);\n        final Query query = mock(Query.class);\n        final QueryResult result = mock(QueryResult.class);\n        final NodeIterator nodeIterator = mock(NodeIterator.class);\n        final Node node = mock(Node.class);\n\n        when(session.getWorkspace()).thenReturn(workspace);\n        when(workspace.getQueryManager()).thenReturn(qm);\n        when(qm.createQuery(\"select * from [mgnl:user] where name() = 'test'\", Query.JCR_SQL2)).thenReturn(query);\n        when(query.execute()).thenReturn(result);\n        when(result.getNodes()).thenReturn(nodeIterator);\n        when(nodeIterator.hasNext()).thenReturn(true).thenReturn(false);\n        when(nodeIterator.nextNode()).thenReturn(node);\n        when(node.isNodeType(NodeTypes.User.NAME)).thenReturn(true);\n\n        MgnlUserManager um = new MgnlUserManager();\n        // Realm \"all\"\n        um.setRealmName(Realm.REALM_ALL.getName());\n\n        // WHEN\n        final Node principal = um.findPrincipalNode(\"test\", session);\n\n        // THEN\n        assertNotNull(principal);\n    }", "signature": "void testFindPrincipalNode()", "full_signature": "@Test public void testFindPrincipalNode()", "class_method_signature": "MgnlUserManagerTest.testFindPrincipalNode()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getWorkspace", "thenReturn", "when", "getQueryManager", "thenReturn", "when", "createQuery", "thenReturn", "when", "execute", "thenReturn", "when", "getNodes", "thenReturn", "thenReturn", "when", "hasNext", "thenReturn", "when", "nextNode", "thenReturn", "when", "isNodeType", "setRealmName", "getName", "findPrincipalNode", "assertNotNull"]}, "focal_class": {"identifier": "MgnlUserManager", "superclass": "extends RepositoryBackedSecurityManager", "interfaces": "implements UserManager", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MgnlUserManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MgnlUserManager.class)", "var_name": "log"}, {"original_string": "public static final String PROPERTY_EMAIL = \"email\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_EMAIL = \"email\"", "var_name": "PROPERTY_EMAIL"}, {"original_string": "public static final String PROPERTY_LANGUAGE = \"language\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_LANGUAGE = \"language\"", "var_name": "PROPERTY_LANGUAGE"}, {"original_string": "public static final String PROPERTY_LASTACCESS = \"lastaccess\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_LASTACCESS = \"lastaccess\"", "var_name": "PROPERTY_LASTACCESS"}, {"original_string": "public static final String PROPERTY_PASSWORD = \"pswd\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_PASSWORD = \"pswd\"", "var_name": "PROPERTY_PASSWORD"}, {"original_string": "public static final String PROPERTY_TITLE = \"title\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_TITLE = \"title\"", "var_name": "PROPERTY_TITLE"}, {"original_string": "public static final String PROPERTY_ENABLED = \"enabled\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_ENABLED = \"enabled\"", "var_name": "PROPERTY_ENABLED"}, {"original_string": "public static final String NODE_ACLUSERS = \"acl_users\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ACLUSERS = \"acl_users\"", "var_name": "NODE_ACLUSERS"}, {"original_string": "private String realmName;", "modifier": "private", "type": "String", "declarator": "realmName", "var_name": "realmName"}, {"original_string": "private boolean allowCrossRealmDuplicateNames = false;", "modifier": "private", "type": "boolean", "declarator": "allowCrossRealmDuplicateNames = false", "var_name": "allowCrossRealmDuplicateNames"}, {"original_string": "private int maxFailedLoginAttempts;", "modifier": "private", "type": "int", "declarator": "maxFailedLoginAttempts", "var_name": "maxFailedLoginAttempts"}, {"original_string": "private int lockTimePeriod;", "modifier": "private", "type": "int", "declarator": "lockTimePeriod", "var_name": "lockTimePeriod"}], "methods": [{"identifier": "MgnlUserManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " MgnlUserManager()", "full_signature": "public  MgnlUserManager()", "class_method_signature": "MgnlUserManager.MgnlUserManager()", "testcase": false, "constructor": true}, {"identifier": "setMaxFailedLoginAttempts", "parameters": "(int maxFailedLoginAttempts)", "modifiers": "@Override public", "return": "void", "signature": "void setMaxFailedLoginAttempts(int maxFailedLoginAttempts)", "full_signature": "@Override public void setMaxFailedLoginAttempts(int maxFailedLoginAttempts)", "class_method_signature": "MgnlUserManager.setMaxFailedLoginAttempts(int maxFailedLoginAttempts)", "testcase": false, "constructor": false}, {"identifier": "getMaxFailedLoginAttempts", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxFailedLoginAttempts()", "full_signature": "@Override public int getMaxFailedLoginAttempts()", "class_method_signature": "MgnlUserManager.getMaxFailedLoginAttempts()", "testcase": false, "constructor": false}, {"identifier": "getLockTimePeriod", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLockTimePeriod()", "full_signature": "@Override public int getLockTimePeriod()", "class_method_signature": "MgnlUserManager.getLockTimePeriod()", "testcase": false, "constructor": false}, {"identifier": "setLockTimePeriod", "parameters": "(int lockTimePeriod)", "modifiers": "@Override public", "return": "void", "signature": "void setLockTimePeriod(int lockTimePeriod)", "full_signature": "@Override public void setLockTimePeriod(int lockTimePeriod)", "class_method_signature": "MgnlUserManager.setLockTimePeriod(int lockTimePeriod)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(final User user, final String propertyName, final Value propertyValue)", "modifiers": "@Override public", "return": "User", "signature": "User setProperty(final User user, final String propertyName, final Value propertyValue)", "full_signature": "@Override public User setProperty(final User user, final String propertyName, final Value propertyValue)", "class_method_signature": "MgnlUserManager.setProperty(final User user, final String propertyName, final Value propertyValue)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(final User user, final String propertyName, final String propertyValue)", "modifiers": "@Override public", "return": "User", "signature": "User setProperty(final User user, final String propertyName, final String propertyValue)", "full_signature": "@Override public User setProperty(final User user, final String propertyName, final String propertyValue)", "class_method_signature": "MgnlUserManager.setProperty(final User user, final String propertyName, final String propertyValue)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Deprecated public", "return": "String", "signature": "String getName()", "full_signature": "@Deprecated public String getName()", "class_method_signature": "MgnlUserManager.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setName(String name)", "full_signature": "@Deprecated public void setName(String name)", "class_method_signature": "MgnlUserManager.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "setRealmName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setRealmName(String name)", "full_signature": "public void setRealmName(String name)", "class_method_signature": "MgnlUserManager.setRealmName(String name)", "testcase": false, "constructor": false}, {"identifier": "getRealmName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRealmName()", "full_signature": "public String getRealmName()", "class_method_signature": "MgnlUserManager.getRealmName()", "testcase": false, "constructor": false}, {"identifier": "setAllowCrossRealmDuplicateNames", "parameters": "(boolean allowCrossRealmDuplicateNames)", "modifiers": "public", "return": "void", "signature": "void setAllowCrossRealmDuplicateNames(boolean allowCrossRealmDuplicateNames)", "full_signature": "public void setAllowCrossRealmDuplicateNames(boolean allowCrossRealmDuplicateNames)", "class_method_signature": "MgnlUserManager.setAllowCrossRealmDuplicateNames(boolean allowCrossRealmDuplicateNames)", "testcase": false, "constructor": false}, {"identifier": "isAllowCrossRealmDuplicateNames", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowCrossRealmDuplicateNames()", "full_signature": "public boolean isAllowCrossRealmDuplicateNames()", "class_method_signature": "MgnlUserManager.isAllowCrossRealmDuplicateNames()", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(final String name)", "modifiers": "@Override public", "return": "User", "signature": "User getUser(final String name)", "full_signature": "@Override public User getUser(final String name)", "class_method_signature": "MgnlUserManager.getUser(final String name)", "testcase": false, "constructor": false}, {"identifier": "getUserById", "parameters": "(final String id)", "modifiers": "@Override public", "return": "User", "signature": "User getUserById(final String id)", "full_signature": "@Override public User getUserById(final String id)", "class_method_signature": "MgnlUserManager.getUserById(final String id)", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(Subject subject)", "modifiers": "@Override public", "return": "User", "signature": "User getUser(Subject subject)", "full_signature": "@Override public User getUser(Subject subject)", "class_method_signature": "MgnlUserManager.getUser(Subject subject)", "testcase": false, "constructor": false}, {"identifier": "findUserNode", "parameters": "(String realm, String name)", "modifiers": "@Deprecated protected", "return": "Content", "signature": "Content findUserNode(String realm, String name)", "full_signature": "@Deprecated protected Content findUserNode(String realm, String name)", "class_method_signature": "MgnlUserManager.findUserNode(String realm, String name)", "testcase": false, "constructor": false}, {"identifier": "findPrincipalNode", "parameters": "(String name, Session session)", "modifiers": "@Override protected", "return": "Node", "signature": "Node findPrincipalNode(String name, Session session)", "full_signature": "@Override protected Node findPrincipalNode(String name, Session session)", "class_method_signature": "MgnlUserManager.findPrincipalNode(String name, Session session)", "testcase": false, "constructor": false}, {"identifier": "getFromRepository", "parameters": "(String name)", "modifiers": "protected", "return": "User", "signature": "User getFromRepository(String name)", "full_signature": "protected User getFromRepository(String name)", "class_method_signature": "MgnlUserManager.getFromRepository(String name)", "testcase": false, "constructor": false}, {"identifier": "getSystemUser", "parameters": "()", "modifiers": "@Override public", "return": "User", "signature": "User getSystemUser()", "full_signature": "@Override public User getSystemUser()", "class_method_signature": "MgnlUserManager.getSystemUser()", "testcase": false, "constructor": false}, {"identifier": "getAnonymousUser", "parameters": "()", "modifiers": "@Override public", "return": "User", "signature": "User getAnonymousUser()", "full_signature": "@Override public User getAnonymousUser()", "class_method_signature": "MgnlUserManager.getAnonymousUser()", "testcase": false, "constructor": false}, {"identifier": "getAllUsers", "parameters": "()", "modifiers": "@Override public", "return": "Collection<User>", "signature": "Collection<User> getAllUsers()", "full_signature": "@Override public Collection<User> getAllUsers()", "class_method_signature": "MgnlUserManager.getAllUsers()", "testcase": false, "constructor": false}, {"identifier": "updateUserListWithAllChildren", "parameters": "(Node node, Collection<User> users)", "modifiers": "public", "return": "void", "signature": "void updateUserListWithAllChildren(Node node, Collection<User> users)", "full_signature": "public void updateUserListWithAllChildren(Node node, Collection<User> users)", "class_method_signature": "MgnlUserManager.updateUserListWithAllChildren(Node node, Collection<User> users)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(final String name, final String pw)", "modifiers": "@Override public", "return": "User", "signature": "User createUser(final String name, final String pw)", "full_signature": "@Override public User createUser(final String name, final String pw)", "class_method_signature": "MgnlUserManager.createUser(final String name, final String pw)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(final String path, final String name, final String pw)", "modifiers": "@Override public", "return": "User", "signature": "User createUser(final String path, final String name, final String pw)", "full_signature": "@Override public User createUser(final String path, final String name, final String pw)", "class_method_signature": "MgnlUserManager.createUser(final String path, final String name, final String pw)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(final User user, final String newPassword)", "modifiers": "@Override public", "return": "User", "signature": "User changePassword(final User user, final String newPassword)", "full_signature": "@Override public User changePassword(final User user, final String newPassword)", "class_method_signature": "MgnlUserManager.changePassword(final User user, final String newPassword)", "testcase": false, "constructor": false}, {"identifier": "setPasswordProperty", "parameters": "(Content userNode, String clearPassword)", "modifiers": "@Deprecated protected", "return": "void", "signature": "void setPasswordProperty(Content userNode, String clearPassword)", "full_signature": "@Deprecated protected void setPasswordProperty(Content userNode, String clearPassword)", "class_method_signature": "MgnlUserManager.setPasswordProperty(Content userNode, String clearPassword)", "testcase": false, "constructor": false}, {"identifier": "setPasswordProperty", "parameters": "(Node userNode, String clearPassword)", "modifiers": "protected", "return": "void", "signature": "void setPasswordProperty(Node userNode, String clearPassword)", "full_signature": "protected void setPasswordProperty(Node userNode, String clearPassword)", "class_method_signature": "MgnlUserManager.setPasswordProperty(Node userNode, String clearPassword)", "testcase": false, "constructor": false}, {"identifier": "encodePassword", "parameters": "(String clearPassword)", "modifiers": "protected", "return": "String", "signature": "String encodePassword(String clearPassword)", "full_signature": "protected String encodePassword(String clearPassword)", "class_method_signature": "MgnlUserManager.encodePassword(String clearPassword)", "testcase": false, "constructor": false}, {"identifier": "validateUsername", "parameters": "(String name)", "modifiers": "protected", "return": "void", "signature": "void validateUsername(String name)", "full_signature": "protected void validateUsername(String name)", "class_method_signature": "MgnlUserManager.validateUsername(String name)", "testcase": false, "constructor": false}, {"identifier": "createUserNode", "parameters": "(String name)", "modifiers": "protected", "return": "Content", "signature": "Content createUserNode(String name)", "full_signature": "protected Content createUserNode(String name)", "class_method_signature": "MgnlUserManager.createUserNode(String name)", "testcase": false, "constructor": false}, {"identifier": "getHierarchyManager", "parameters": "()", "modifiers": "protected", "return": "HierarchyManager", "signature": "HierarchyManager getHierarchyManager()", "full_signature": "protected HierarchyManager getHierarchyManager()", "class_method_signature": "MgnlUserManager.getHierarchyManager()", "testcase": false, "constructor": false}, {"identifier": "userInstance", "parameters": "(Content node)", "modifiers": "@Deprecated protected", "return": "MgnlUser", "signature": "MgnlUser userInstance(Content node)", "full_signature": "@Deprecated protected MgnlUser userInstance(Content node)", "class_method_signature": "MgnlUserManager.userInstance(Content node)", "testcase": false, "constructor": false}, {"identifier": "newUserInstance", "parameters": "(Content node)", "modifiers": "@Deprecated protected", "return": "User", "signature": "User newUserInstance(Content node)", "full_signature": "@Deprecated protected User newUserInstance(Content node)", "class_method_signature": "MgnlUserManager.newUserInstance(Content node)", "testcase": false, "constructor": false}, {"identifier": "addWrite", "parameters": "(String parentPath, String property, Node acls)", "modifiers": "private", "return": "Node", "signature": "Node addWrite(String parentPath, String property, Node acls)", "full_signature": "private Node addWrite(String parentPath, String property, Node acls)", "class_method_signature": "MgnlUserManager.addWrite(String parentPath, String property, Node acls)", "testcase": false, "constructor": false}, {"identifier": "updateLastAccessTimestamp", "parameters": "(final User user)", "modifiers": "@Override public", "return": "void", "signature": "void updateLastAccessTimestamp(final User user)", "full_signature": "@Override public void updateLastAccessTimestamp(final User user)", "class_method_signature": "MgnlUserManager.updateLastAccessTimestamp(final User user)", "testcase": false, "constructor": false}, {"identifier": "newUserInstance", "parameters": "(Node privilegedUserNode)", "modifiers": "protected", "return": "User", "signature": "User newUserInstance(Node privilegedUserNode)", "full_signature": "protected User newUserInstance(Node privilegedUserNode)", "class_method_signature": "MgnlUserManager.newUserInstance(Node privilegedUserNode)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryName", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getRepositoryName()", "full_signature": "@Override protected String getRepositoryName()", "class_method_signature": "MgnlUserManager.getRepositoryName()", "testcase": false, "constructor": false}, {"identifier": "getACLs", "parameters": "(final User user)", "modifiers": "@Override public", "return": "Map<String, ACL>", "signature": "Map<String, ACL> getACLs(final User user)", "full_signature": "@Override public Map<String, ACL> getACLs(final User user)", "class_method_signature": "MgnlUserManager.getACLs(final User user)", "testcase": false, "constructor": false}, {"identifier": "addRole", "parameters": "(User user, String roleName)", "modifiers": "@Override public", "return": "User", "signature": "User addRole(User user, String roleName)", "full_signature": "@Override public User addRole(User user, String roleName)", "class_method_signature": "MgnlUserManager.addRole(User user, String roleName)", "testcase": false, "constructor": false}, {"identifier": "collectUniquePropertyNames", "parameters": "(Node rootNode, String subnodeName, String repositoryName, boolean isDeep)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> collectUniquePropertyNames(Node rootNode, String subnodeName, String repositoryName, boolean isDeep)", "full_signature": "private Set<String> collectUniquePropertyNames(Node rootNode, String subnodeName, String repositoryName, boolean isDeep)", "class_method_signature": "MgnlUserManager.collectUniquePropertyNames(Node rootNode, String subnodeName, String repositoryName, boolean isDeep)", "testcase": false, "constructor": false}, {"identifier": "collectUniquePropertyNames", "parameters": "(final Node node, final String repositoryName, final String subnodeName, final Collection<String> set, final boolean isDeep)", "modifiers": "private", "return": "void", "signature": "void collectUniquePropertyNames(final Node node, final String repositoryName, final String subnodeName, final Collection<String> set, final boolean isDeep)", "full_signature": "private void collectUniquePropertyNames(final Node node, final String repositoryName, final String subnodeName, final Collection<String> set, final boolean isDeep)", "class_method_signature": "MgnlUserManager.collectUniquePropertyNames(final Node node, final String repositoryName, final String subnodeName, final Collection<String> set, final boolean isDeep)", "testcase": false, "constructor": false}, {"identifier": "addGroup", "parameters": "(User user, String groupName)", "modifiers": "@Override public", "return": "User", "signature": "User addGroup(User user, String groupName)", "full_signature": "@Override public User addGroup(User user, String groupName)", "class_method_signature": "MgnlUserManager.addGroup(User user, String groupName)", "testcase": false, "constructor": false}, {"identifier": "removeGroup", "parameters": "(User user, String groupName)", "modifiers": "@Override public", "return": "User", "signature": "User removeGroup(User user, String groupName)", "full_signature": "@Override public User removeGroup(User user, String groupName)", "class_method_signature": "MgnlUserManager.removeGroup(User user, String groupName)", "testcase": false, "constructor": false}, {"identifier": "removeRole", "parameters": "(User user, String roleName)", "modifiers": "@Override public", "return": "User", "signature": "User removeRole(User user, String roleName)", "full_signature": "@Override public User removeRole(User user, String roleName)", "class_method_signature": "MgnlUserManager.removeRole(User user, String roleName)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/cms/security/MgnlUserManager.java"}, "focal_method": {"identifier": "findPrincipalNode", "parameters": "(String name, Session session)", "modifiers": "@Override protected", "return": "Node", "body": "@Override\n    protected Node findPrincipalNode(String name, Session session) throws RepositoryException {\n        String realmName = getRealmName();\n        final String where;\n        // the all realm searches the repository\n        if (Realm.REALM_ALL.getName().equals(realmName)) {\n            where = \"where name() = '\" + name + \"'\";\n        } else {\n            // FIXME: DOUBLE CHECK THE QUERY FOR REALMS ... ISDESCENDANTNODE and NAME ....\n            where = \"where name() = '\" + name + \"' and isdescendantnode(['/\" + realmName + \"'])\";\n            //            where = \"where [jcr:path] = '/\" + realm + \"/\" + name + \"'\"\n            //            + \" or [jcr:path] like '/\" + realm + \"/%/\" + name + \"'\";\n        }\n\n        final String statement = \"select * from [\" + NodeTypes.User.NAME + \"] \" + where;\n\n        Query query = session.getWorkspace().getQueryManager().createQuery(statement, Query.JCR_SQL2);\n        NodeIterator iter = query.execute().getNodes();\n        Node user = null;\n        while (iter.hasNext()) {\n            Node node = iter.nextNode();\n            if (node.isNodeType(NodeTypes.User.NAME)) {\n                user = node;\n                break;\n            }\n        }\n        if (iter.hasNext()) {\n            log.error(\"More than one user found with name [{}] in realm [{}]\", name, realmName);\n        }\n        return user;\n    }", "signature": "Node findPrincipalNode(String name, Session session)", "full_signature": "@Override protected Node findPrincipalNode(String name, Session session)", "class_method_signature": "MgnlUserManager.findPrincipalNode(String name, Session session)", "testcase": false, "constructor": false, "invocations": ["getRealmName", "equals", "getName", "createQuery", "getQueryManager", "getWorkspace", "getNodes", "execute", "hasNext", "nextNode", "isNodeType", "hasNext", "error"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}