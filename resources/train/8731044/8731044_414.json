{"test_class": {"identifier": "WebXmlUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> MANDATORY_DISPATCHERS = Arrays.asList(\"REQUEST\", \"FORWARD\", \"INCLUDE\");", "modifier": "private static final", "type": "List<String>", "declarator": "MANDATORY_DISPATCHERS = Arrays.asList(\"REQUEST\", \"FORWARD\", \"INCLUDE\")", "var_name": "MANDATORY_DISPATCHERS"}, {"original_string": "private static final List<String> OPTIONAL_DISPATCHERS = Arrays.asList(\"ERROR\");", "modifier": "private static final", "type": "List<String>", "declarator": "OPTIONAL_DISPATCHERS = Arrays.asList(\"ERROR\")", "var_name": "OPTIONAL_DISPATCHERS"}], "file": "magnolia-core/src/test/java/info/magnolia/cms/util/WebXmlUtilTest.java"}, "test_case": {"identifier": "testFilterDispatcherChecksShouldFailIfIncludeIsMissing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFilterDispatcherChecksShouldFailIfIncludeIsMissing() {\n        WebXmlUtil util = new WebXmlUtil(getClass().getResourceAsStream(\"web_filterwrongdispatchers.xml\"));\n        assertEquals(-1, util.checkFilterDispatchersConfiguration(\"webxmltest.WithMissingInclude\", MANDATORY_DISPATCHERS, OPTIONAL_DISPATCHERS));\n    }", "signature": "void testFilterDispatcherChecksShouldFailIfIncludeIsMissing()", "full_signature": "@Test public void testFilterDispatcherChecksShouldFailIfIncludeIsMissing()", "class_method_signature": "WebXmlUtilTest.testFilterDispatcherChecksShouldFailIfIncludeIsMissing()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "assertEquals", "checkFilterDispatchersConfiguration"]}, "focal_class": {"identifier": "WebXmlUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Document doc;", "modifier": "private final", "type": "Document", "declarator": "doc", "var_name": "doc"}], "methods": [{"identifier": "WebXmlUtil", "parameters": "()", "modifiers": "public", "return": "", "signature": " WebXmlUtil()", "full_signature": "public  WebXmlUtil()", "class_method_signature": "WebXmlUtil.WebXmlUtil()", "testcase": false, "constructor": true}, {"identifier": "WebXmlUtil", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "", "signature": " WebXmlUtil(InputStream inputStream)", "full_signature": "public  WebXmlUtil(InputStream inputStream)", "class_method_signature": "WebXmlUtil.WebXmlUtil(InputStream inputStream)", "testcase": false, "constructor": true}, {"identifier": "isServletOrMappingRegistered", "parameters": "(String servletName)", "modifiers": "public", "return": "boolean", "signature": "boolean isServletOrMappingRegistered(String servletName)", "full_signature": "public boolean isServletOrMappingRegistered(String servletName)", "class_method_signature": "WebXmlUtil.isServletOrMappingRegistered(String servletName)", "testcase": false, "constructor": false}, {"identifier": "isServletRegistered", "parameters": "(String servletName)", "modifiers": "public", "return": "boolean", "signature": "boolean isServletRegistered(String servletName)", "full_signature": "public boolean isServletRegistered(String servletName)", "class_method_signature": "WebXmlUtil.isServletRegistered(String servletName)", "testcase": false, "constructor": false}, {"identifier": "isServletMappingRegistered", "parameters": "(String servletName)", "modifiers": "public", "return": "boolean", "signature": "boolean isServletMappingRegistered(String servletName)", "full_signature": "public boolean isServletMappingRegistered(String servletName)", "class_method_signature": "WebXmlUtil.isServletMappingRegistered(String servletName)", "testcase": false, "constructor": false}, {"identifier": "isServletMappingRegistered", "parameters": "(String servletName, String urlPattern)", "modifiers": "public", "return": "boolean", "signature": "boolean isServletMappingRegistered(String servletName, String urlPattern)", "full_signature": "public boolean isServletMappingRegistered(String servletName, String urlPattern)", "class_method_signature": "WebXmlUtil.isServletMappingRegistered(String servletName, String urlPattern)", "testcase": false, "constructor": false}, {"identifier": "getServletMappings", "parameters": "(String servletName)", "modifiers": "public", "return": "Collection", "signature": "Collection getServletMappings(String servletName)", "full_signature": "public Collection getServletMappings(String servletName)", "class_method_signature": "WebXmlUtil.getServletMappings(String servletName)", "testcase": false, "constructor": false}, {"identifier": "isFilterRegistered", "parameters": "(String filterClass)", "modifiers": "public", "return": "boolean", "signature": "boolean isFilterRegistered(String filterClass)", "full_signature": "public boolean isFilterRegistered(String filterClass)", "class_method_signature": "WebXmlUtil.isFilterRegistered(String filterClass)", "testcase": false, "constructor": false}, {"identifier": "areFilterDispatchersConfiguredProperly", "parameters": "(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "modifiers": "public", "return": "boolean", "signature": "boolean areFilterDispatchersConfiguredProperly(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "full_signature": "public boolean areFilterDispatchersConfiguredProperly(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "class_method_signature": "WebXmlUtil.areFilterDispatchersConfiguredProperly(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "testcase": false, "constructor": false}, {"identifier": "checkFilterDispatchersConfiguration", "parameters": "(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "modifiers": "public", "return": "int", "signature": "int checkFilterDispatchersConfiguration(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "full_signature": "public int checkFilterDispatchersConfiguration(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "class_method_signature": "WebXmlUtil.checkFilterDispatchersConfiguration(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "testcase": false, "constructor": false}, {"identifier": "isListenerRegistered", "parameters": "(String deprecatedListenerClass)", "modifiers": "public", "return": "boolean", "signature": "boolean isListenerRegistered(String deprecatedListenerClass)", "full_signature": "public boolean isListenerRegistered(String deprecatedListenerClass)", "class_method_signature": "WebXmlUtil.isListenerRegistered(String deprecatedListenerClass)", "testcase": false, "constructor": false}, {"identifier": "getFilterElement", "parameters": "(String filterClass)", "modifiers": "private", "return": "Element", "signature": "Element getFilterElement(String filterClass)", "full_signature": "private Element getFilterElement(String filterClass)", "class_method_signature": "WebXmlUtil.getFilterElement(String filterClass)", "testcase": false, "constructor": false}, {"identifier": "getElementsFromXPath", "parameters": "(String xpathExpr)", "modifiers": "private", "return": "List", "signature": "List getElementsFromXPath(String xpathExpr)", "full_signature": "private List getElementsFromXPath(String xpathExpr)", "class_method_signature": "WebXmlUtil.getElementsFromXPath(String xpathExpr)", "testcase": false, "constructor": false}, {"identifier": "getElementFromXPath", "parameters": "(String xpathExpr)", "modifiers": "private", "return": "Element", "signature": "Element getElementFromXPath(String xpathExpr)", "full_signature": "private Element getElementFromXPath(String xpathExpr)", "class_method_signature": "WebXmlUtil.getElementFromXPath(String xpathExpr)", "testcase": false, "constructor": false}, {"identifier": "xpathMatches", "parameters": "(String xpathExpr)", "modifiers": "private", "return": "boolean", "signature": "boolean xpathMatches(String xpathExpr)", "full_signature": "private boolean xpathMatches(String xpathExpr)", "class_method_signature": "WebXmlUtil.xpathMatches(String xpathExpr)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/cms/util/WebXmlUtil.java"}, "focal_method": {"identifier": "checkFilterDispatchersConfiguration", "parameters": "(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "modifiers": "public", "return": "int", "body": "public int checkFilterDispatchersConfiguration(String filterClass, List mandatoryDispatchers, List optionalDispatchers) {\n        final Element filterEl = getFilterElement(filterClass);\n        if (filterEl != null) {\n            final String filterName = filterEl.getTextNormalize();\n            final String filterMappingXPathExpr = \"/webxml:web-app/webxml:filter-mapping[webxml:filter-name='\" + filterName + \"']/webxml:dispatcher\";\n            final List dispatchersEl = getElementsFromXPath(filterMappingXPathExpr);\n            final List registeredDispatchers = new ArrayList();\n            final Iterator it = dispatchersEl.iterator();\n            while (it.hasNext()) {\n                final Element dispatcherEl = (Element) it.next();\n                registeredDispatchers.add(dispatcherEl.getTextNormalize());\n            }\n            registeredDispatchers.removeAll(optionalDispatchers);\n            if (CollectionUtils.isEqualCollection(mandatoryDispatchers, registeredDispatchers)) {\n                return 1;\n            } else if (CollectionUtils.isSubCollection(mandatoryDispatchers, registeredDispatchers)) {\n                return 0;\n            } else {\n                return -1;\n            }\n\n        }\n        return 1;\n    }", "signature": "int checkFilterDispatchersConfiguration(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "full_signature": "public int checkFilterDispatchersConfiguration(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "class_method_signature": "WebXmlUtil.checkFilterDispatchersConfiguration(String filterClass, List mandatoryDispatchers, List optionalDispatchers)", "testcase": false, "constructor": false, "invocations": ["getFilterElement", "getTextNormalize", "getElementsFromXPath", "iterator", "hasNext", "next", "add", "getTextNormalize", "removeAll", "isEqualCollection", "isSubCollection"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}