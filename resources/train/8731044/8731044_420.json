{"test_class": {"identifier": "WorkspaceXmlUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "magnolia-core/src/test/java/info/magnolia/cms/util/WorkspaceXmlUtilTest.java"}, "test_case": {"identifier": "testWorkspaceNamesWithNonNullExpectation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWorkspaceNamesWithNonNullExpectation() {\n        List<String> names = WorkspaceXmlUtil.getWorkspaceNames(\"/Workspace/SearchIndex/param[@name='textFilterClasses']/@value\", \".*\\\\.jackrabbit\\\\.extractor\\\\..*\");\n        assertEquals(\"Found incorrect amount of indexers\", 1, names.size());\n        assertTrue(names.get(0).contains(\"/outdated/workspace.xml\"));\n    }", "signature": "void testWorkspaceNamesWithNonNullExpectation()", "full_signature": "@Test public void testWorkspaceNamesWithNonNullExpectation()", "class_method_signature": "WorkspaceXmlUtilTest.testWorkspaceNamesWithNonNullExpectation()", "testcase": true, "constructor": false, "invocations": ["getWorkspaceNames", "assertEquals", "size", "assertTrue", "contains", "get"]}, "focal_class": {"identifier": "WorkspaceXmlUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(WorkspaceXmlUtil.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WorkspaceXmlUtil.class)", "var_name": "log"}], "methods": [{"identifier": "getWorkspaceNamesWithIndexer", "parameters": "()", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getWorkspaceNamesWithIndexer()", "full_signature": "public static List<String> getWorkspaceNamesWithIndexer()", "class_method_signature": "WorkspaceXmlUtil.getWorkspaceNamesWithIndexer()", "testcase": false, "constructor": false}, {"identifier": "getWorkspaceNamesMatching", "parameters": "(String xPathExpression)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getWorkspaceNamesMatching(String xPathExpression)", "full_signature": "public static List<String> getWorkspaceNamesMatching(String xPathExpression)", "class_method_signature": "WorkspaceXmlUtil.getWorkspaceNamesMatching(String xPathExpression)", "testcase": false, "constructor": false}, {"identifier": "getWorkspaceNames", "parameters": "(String xPathExpression, String expectation)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getWorkspaceNames(String xPathExpression, String expectation)", "full_signature": "public static List<String> getWorkspaceNames(String xPathExpression, String expectation)", "class_method_signature": "WorkspaceXmlUtil.getWorkspaceNames(String xPathExpression, String expectation)", "testcase": false, "constructor": false}, {"identifier": "getElementsFromXPath", "parameters": "(Document doc, String xpathExpr)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "List<Attribute>", "signature": "List<Attribute> getElementsFromXPath(Document doc, String xpathExpr)", "full_signature": "@SuppressWarnings(\"unchecked\") private static List<Attribute> getElementsFromXPath(Document doc, String xpathExpr)", "class_method_signature": "WorkspaceXmlUtil.getElementsFromXPath(Document doc, String xpathExpr)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/cms/util/WorkspaceXmlUtil.java"}, "focal_method": {"identifier": "getWorkspaceNames", "parameters": "(String xPathExpression, String expectation)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getWorkspaceNames(String xPathExpression, String expectation) {\n        final List<String> names = new ArrayList<String>();\n        final String dir = SystemProperty.getProperty(SystemProperty.MAGNOLIA_REPOSITORIES_HOME) + \"/magnolia/workspaces/\";\n        log.debug(\"Checking directory \" + dir);\n        final File sourceDir = new File(dir);\n        File[] files = sourceDir.listFiles();\n        if (files == null) {\n            // new repo\n            return names;\n        }\n        final SAXBuilder builder = new SAXBuilder();\n        for (File f : files) {\n            if (!f.isDirectory()) {\n                continue;\n            }\n            final File wks = new File(f, \"workspace.xml\");\n            if (!wks.exists() || !wks.canRead()) {\n                continue;\n            }\n            try {\n                log.debug(\"Analysing file \" + wks.getAbsolutePath());\n                // check for the xPathExpression in wks\n                final List<Attribute> list = getElementsFromXPath(builder.build(wks), xPathExpression);\n                if (expectation == null) {\n                    if (list.size() == 0) {\n                        names.add(wks.getAbsolutePath());\n                    }\n                } else {\n                    if (list.size() > 0 && list.get(0).getValue().matches(expectation)) {\n                        names.add(wks.getAbsolutePath());\n                    }\n                }\n            } catch (JDOMException e) {\n                throw new RuntimeException(e);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return names;\n    }", "signature": "List<String> getWorkspaceNames(String xPathExpression, String expectation)", "full_signature": "public static List<String> getWorkspaceNames(String xPathExpression, String expectation)", "class_method_signature": "WorkspaceXmlUtil.getWorkspaceNames(String xPathExpression, String expectation)", "testcase": false, "constructor": false, "invocations": ["getProperty", "debug", "listFiles", "isDirectory", "exists", "canRead", "debug", "getAbsolutePath", "getElementsFromXPath", "build", "size", "add", "getAbsolutePath", "size", "matches", "getValue", "get", "add", "getAbsolutePath"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}