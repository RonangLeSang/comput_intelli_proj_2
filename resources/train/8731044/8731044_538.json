{"test_class": {"identifier": "ContentSecurityFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpServletRequest request;", "modifier": "private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private HttpServletResponse response;", "modifier": "private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}], "file": "magnolia-core/src/test/java/info/magnolia/cms/security/ContentSecurityFilterTest.java"}, "test_case": {"identifier": "testIsAllowedForAnonymous", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsAllowedForAnonymous() throws Exception {\n        // GIVEN\n        when(MgnlContext.getUser().getName()).thenReturn(UserManager.ANONYMOUS_USER);\n        when(request.getMethod()).thenReturn(\"GET\");\n\n        final ContentSecurityFilter filter = new ContentSecurityFilter();\n\n        // WHEN\n        final boolean result = filter.isAllowed(request, response);\n\n        // THEN\n        assertEquals(false, result);\n        verify(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n    }", "signature": "void testIsAllowedForAnonymous()", "full_signature": "@Test public void testIsAllowedForAnonymous()", "class_method_signature": "ContentSecurityFilterTest.testIsAllowedForAnonymous()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getName", "getUser", "thenReturn", "when", "getMethod", "isAllowed", "assertEquals", "setStatus", "verify"]}, "focal_class": {"identifier": "ContentSecurityFilter", "superclass": "extends BaseSecurityFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "isAllowed", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAllowed(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@Override public boolean isAllowed(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "ContentSecurityFilter.isAllowed(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "magnolia-core/src/main/java/info/magnolia/cms/security/ContentSecurityFilter.java"}, "focal_method": {"identifier": "isAllowed", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isAllowed(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        final String repositoryName = MgnlContext.getAggregationState().getRepository();\n        final String handle = MgnlContext.getAggregationState().getHandle();\n        final boolean granted = PermissionUtil.isGranted(repositoryName, handle, Session.ACTION_READ);\n        if (!granted) {\n            final int statusCode = SecurityUtil.isAnonymous() ? HttpServletResponse.SC_UNAUTHORIZED : HttpServletResponse.SC_FORBIDDEN;\n            response.setStatus(statusCode);\n        }\n        return granted;\n    }", "signature": "boolean isAllowed(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@Override public boolean isAllowed(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "ContentSecurityFilter.isAllowed(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["getRepository", "getAggregationState", "getHandle", "getAggregationState", "isGranted", "isAnonymous", "setStatus"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}