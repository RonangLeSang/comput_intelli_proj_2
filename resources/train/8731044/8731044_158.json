{"test_class": {"identifier": "DefaultRenderingEngineTest", "superclass": "extends AbstractMagnoliaTestCase", "interfaces": "", "fields": [{"original_string": "private static final String FREEMARKER_RENDERER_TYPE = \"freemarker\";", "modifier": "private static final", "type": "String", "declarator": "FREEMARKER_RENDERER_TYPE = \"freemarker\"", "var_name": "FREEMARKER_RENDERER_TYPE"}], "file": "magnolia-rendering/src/test/java/info/magnolia/rendering/engine/DefaultRenderingEngineTest.java"}, "test_case": {"identifier": "testRenderThrowsRenderExceptionAndTheExceptionHandlerIsInvocedInCaseOfInternalIOException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRenderThrowsRenderExceptionAndTheExceptionHandlerIsInvocedInCaseOfInternalIOException() throws Exception {\n        // GIVEN\n        final Node content = new MockNode(\"parent\");\n\n        RendererRegistry rendererRegistry = new RendererRegistry();\n        TemplateDefinitionAssignment templateDefinitionAssignment = mock(TemplateDefinitionAssignment.class);\n        RenderingContext renderingCtx = mock(RenderingContext.class);\n        DefaultRenderingEngine renderingEngine =\n                createDefaultRenderingEngine(rendererRegistry, templateDefinitionAssignment, renderingCtx);\n\n        TemplateDefinition templateDefinition = mock(TemplateDefinition.class);\n        when(templateDefinitionAssignment.getAssignedTemplateDefinition(content)).thenReturn(templateDefinition);\n\n        Renderer freemarkerRenderer = mock(Renderer.class);\n        RendererProvider freemarkerRendererProvider = mock(RendererProvider.class);\n        when(freemarkerRendererProvider.getType()).thenReturn(FREEMARKER_RENDERER_TYPE);\n        when(freemarkerRendererProvider.getRenderer()).thenReturn(freemarkerRenderer);\n        rendererRegistry.register(freemarkerRendererProvider);\n\n        final StringBuilder builder = new StringBuilder();\n        OutputProvider builderWrapper = new AppendableOnlyOutputProvider(builder);\n        final AppendableWriter writer = new AppendableWriter(builder);\n        when(renderingCtx.getAppendable()).thenReturn(writer);\n        when(templateDefinition.getRenderType()).thenReturn(FREEMARKER_RENDERER_TYPE);\n        final RenderException renderException = new RenderException(\"oh - oh!\");\n        doThrow(renderException).when(freemarkerRenderer).render(renderingCtx, DefaultRenderingEngine.EMPTY_CONTEXT);\n        doThrow(new IOException()).when(renderingCtx).getAppendable();\n\n        // WHEN\n        renderingEngine.render(content, builderWrapper);\n\n        // THEN - no code here as we expect an Exception\n        verify(renderingCtx).handleException(renderException);\n    }", "signature": "void testRenderThrowsRenderExceptionAndTheExceptionHandlerIsInvocedInCaseOfInternalIOException()", "full_signature": "@Test public void testRenderThrowsRenderExceptionAndTheExceptionHandlerIsInvocedInCaseOfInternalIOException()", "class_method_signature": "DefaultRenderingEngineTest.testRenderThrowsRenderExceptionAndTheExceptionHandlerIsInvocedInCaseOfInternalIOException()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "createDefaultRenderingEngine", "mock", "thenReturn", "when", "getAssignedTemplateDefinition", "mock", "mock", "thenReturn", "when", "getType", "thenReturn", "when", "getRenderer", "register", "thenReturn", "when", "getAppendable", "thenReturn", "when", "getRenderType", "render", "when", "doThrow", "getAppendable", "when", "doThrow", "render", "handleException", "verify"]}, "focal_class": {"identifier": "DefaultRenderingEngine", "superclass": "", "interfaces": "implements RenderingEngine", "fields": [{"original_string": "protected static final Map<String, Object> EMPTY_CONTEXT = Collections.emptyMap();", "modifier": "protected static final", "type": "Map<String, Object>", "declarator": "EMPTY_CONTEXT = Collections.emptyMap()", "var_name": "EMPTY_CONTEXT"}, {"original_string": "private RendererRegistry rendererRegistry;", "modifier": "private", "type": "RendererRegistry", "declarator": "rendererRegistry", "var_name": "rendererRegistry"}, {"original_string": "private TemplateDefinitionAssignment templateDefinitionAssignment;", "modifier": "private", "type": "TemplateDefinitionAssignment", "declarator": "templateDefinitionAssignment", "var_name": "templateDefinitionAssignment"}, {"original_string": "private Provider<RenderingContext> renderingContextProvider;", "modifier": "private", "type": "Provider<RenderingContext>", "declarator": "renderingContextProvider", "var_name": "renderingContextProvider"}, {"original_string": "private RenderableVariationResolver variationResolver;", "modifier": "private", "type": "RenderableVariationResolver", "declarator": "variationResolver", "var_name": "variationResolver"}], "methods": [{"identifier": "DefaultRenderingEngine", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultRenderingEngine()", "full_signature": "protected  DefaultRenderingEngine()", "class_method_signature": "DefaultRenderingEngine.DefaultRenderingEngine()", "testcase": false, "constructor": true}, {"identifier": "DefaultRenderingEngine", "parameters": "(RendererRegistry rendererRegistry, TemplateDefinitionAssignment templateDefinitionAssignment, RenderableVariationResolver variationResolver, Provider<RenderingContext> renderingContextProvider)", "modifiers": "public", "return": "", "signature": " DefaultRenderingEngine(RendererRegistry rendererRegistry, TemplateDefinitionAssignment templateDefinitionAssignment, RenderableVariationResolver variationResolver, Provider<RenderingContext> renderingContextProvider)", "full_signature": "public  DefaultRenderingEngine(RendererRegistry rendererRegistry, TemplateDefinitionAssignment templateDefinitionAssignment, RenderableVariationResolver variationResolver, Provider<RenderingContext> renderingContextProvider)", "class_method_signature": "DefaultRenderingEngine.DefaultRenderingEngine(RendererRegistry rendererRegistry, TemplateDefinitionAssignment templateDefinitionAssignment, RenderableVariationResolver variationResolver, Provider<RenderingContext> renderingContextProvider)", "testcase": false, "constructor": true}, {"identifier": "render", "parameters": "(Node content, OutputProvider out)", "modifiers": "@Override public", "return": "void", "signature": "void render(Node content, OutputProvider out)", "full_signature": "@Override public void render(Node content, OutputProvider out)", "class_method_signature": "DefaultRenderingEngine.render(Node content, OutputProvider out)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(Node content, Map<String, Object> contextObjects, OutputProvider out)", "modifiers": "@Override public", "return": "void", "signature": "void render(Node content, Map<String, Object> contextObjects, OutputProvider out)", "full_signature": "@Override public void render(Node content, Map<String, Object> contextObjects, OutputProvider out)", "class_method_signature": "DefaultRenderingEngine.render(Node content, Map<String, Object> contextObjects, OutputProvider out)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(Node content, RenderableDefinition definition, Map<String, Object> contextObjects, OutputProvider out)", "modifiers": "@Override public", "return": "void", "signature": "void render(Node content, RenderableDefinition definition, Map<String, Object> contextObjects, OutputProvider out)", "full_signature": "@Override public void render(Node content, RenderableDefinition definition, Map<String, Object> contextObjects, OutputProvider out)", "class_method_signature": "DefaultRenderingEngine.render(Node content, RenderableDefinition definition, Map<String, Object> contextObjects, OutputProvider out)", "testcase": false, "constructor": false}, {"identifier": "getRenderableDefinitionFor", "parameters": "(Node content)", "modifiers": "protected", "return": "RenderableDefinition", "signature": "RenderableDefinition getRenderableDefinitionFor(Node content)", "full_signature": "protected RenderableDefinition getRenderableDefinitionFor(Node content)", "class_method_signature": "DefaultRenderingEngine.getRenderableDefinitionFor(Node content)", "testcase": false, "constructor": false}, {"identifier": "getRendererFor", "parameters": "(RenderableDefinition definition)", "modifiers": "protected", "return": "Renderer", "signature": "Renderer getRendererFor(RenderableDefinition definition)", "full_signature": "protected Renderer getRendererFor(RenderableDefinition definition)", "class_method_signature": "DefaultRenderingEngine.getRendererFor(RenderableDefinition definition)", "testcase": false, "constructor": false}, {"identifier": "getRenderingContext", "parameters": "()", "modifiers": "@Override public", "return": "RenderingContext", "signature": "RenderingContext getRenderingContext()", "full_signature": "@Override public RenderingContext getRenderingContext()", "class_method_signature": "DefaultRenderingEngine.getRenderingContext()", "testcase": false, "constructor": false}], "file": "magnolia-rendering/src/main/java/info/magnolia/rendering/engine/DefaultRenderingEngine.java"}, "focal_method": {"identifier": "render", "parameters": "(Node content, OutputProvider out)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void render(Node content, OutputProvider out) throws RenderException {\n        render(content, EMPTY_CONTEXT, out);\n    }", "signature": "void render(Node content, OutputProvider out)", "full_signature": "@Override public void render(Node content, OutputProvider out)", "class_method_signature": "DefaultRenderingEngine.render(Node content, OutputProvider out)", "testcase": false, "constructor": false, "invocations": ["render"]}, "repository": {"repo_id": 8731044, "url": "https://github.com/ekirkilevics/Magnolia", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 133884, "license": "licensed"}}