{"test_class": {"identifier": "Camera2SessionOptionUnpackerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Camera2SessionOptionUnpacker mUnpacker;", "modifier": "private", "type": "Camera2SessionOptionUnpacker", "declarator": "mUnpacker", "var_name": "mUnpacker"}], "file": "camera/camera-camera2/src/test/java/androidx/camera/camera2/impl/Camera2SessionOptionUnpackerTest.java"}, "test_case": {"identifier": "unpackerExtractsInteropCallbacks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unpackerExtractsInteropCallbacks() {\n        ImageCaptureConfig.Builder imageCaptureConfigBuilder = new ImageCaptureConfig.Builder();\n        CaptureCallback captureCallback = mock(CaptureCallback.class);\n        CameraDevice.StateCallback deviceCallback = mock(CameraDevice.StateCallback.class);\n        CameraCaptureSession.StateCallback sessionStateCallback =\n                mock(CameraCaptureSession.StateCallback.class);\n        CameraEventCallbacks cameraEventCallbacks = mock(CameraEventCallbacks.class);\n        when(cameraEventCallbacks.clone()).thenReturn(cameraEventCallbacks);\n\n        new Camera2Config.Extender(imageCaptureConfigBuilder)\n                .setSessionCaptureCallback(captureCallback)\n                .setDeviceStateCallback(deviceCallback)\n                .setSessionStateCallback(sessionStateCallback)\n                .setCameraEventCallback(cameraEventCallbacks);\n\n        SessionConfig.Builder sessionBuilder = new SessionConfig.Builder();\n        mUnpacker.unpack(imageCaptureConfigBuilder.build(), sessionBuilder);\n        SessionConfig sessionConfig = sessionBuilder.build();\n\n        CameraCaptureCallback interopCallback =\n                sessionConfig.getSingleCameraCaptureCallbacks().get(0);\n        assertThat(((CaptureCallbackContainer) interopCallback).getCaptureCallback())\n                .isEqualTo(captureCallback);\n        assertThat(sessionConfig.getSingleCameraCaptureCallbacks())\n                .containsExactly(interopCallback);\n        assertThat(sessionConfig.getRepeatingCameraCaptureCallbacks())\n                .containsExactly(interopCallback);\n        assertThat(sessionConfig.getDeviceStateCallbacks()).containsExactly(deviceCallback);\n        assertThat(sessionConfig.getSessionStateCallbacks())\n                .containsExactly(sessionStateCallback);\n        assertThat(\n                new Camera2Config(sessionConfig.getImplementationOptions()).getCameraEventCallback(\n                        null)).isEqualTo(cameraEventCallbacks);\n    }", "signature": "void unpackerExtractsInteropCallbacks()", "full_signature": "@Test public void unpackerExtractsInteropCallbacks()", "class_method_signature": "Camera2SessionOptionUnpackerTest.unpackerExtractsInteropCallbacks()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "thenReturn", "when", "clone", "setCameraEventCallback", "setSessionStateCallback", "setDeviceStateCallback", "setSessionCaptureCallback", "unpack", "build", "build", "get", "getSingleCameraCaptureCallbacks", "isEqualTo", "assertThat", "getCaptureCallback", "containsExactly", "assertThat", "getSingleCameraCaptureCallbacks", "containsExactly", "assertThat", "getRepeatingCameraCaptureCallbacks", "containsExactly", "assertThat", "getDeviceStateCallbacks", "containsExactly", "assertThat", "getSessionStateCallbacks", "isEqualTo", "assertThat", "getCameraEventCallback", "getImplementationOptions"]}, "focal_class": {"identifier": "Camera2SessionOptionUnpacker", "superclass": "", "interfaces": "implements SessionConfig.OptionUnpacker", "fields": [{"original_string": "static final Camera2SessionOptionUnpacker INSTANCE = new Camera2SessionOptionUnpacker();", "modifier": "static final", "type": "Camera2SessionOptionUnpacker", "declarator": "INSTANCE = new Camera2SessionOptionUnpacker()", "var_name": "INSTANCE"}], "methods": [{"identifier": "unpack", "parameters": "(UseCaseConfig<?> config, final SessionConfig.Builder builder)", "modifiers": "@Override public", "return": "void", "signature": "void unpack(UseCaseConfig<?> config, final SessionConfig.Builder builder)", "full_signature": "@Override public void unpack(UseCaseConfig<?> config, final SessionConfig.Builder builder)", "class_method_signature": "Camera2SessionOptionUnpacker.unpack(UseCaseConfig<?> config, final SessionConfig.Builder builder)", "testcase": false, "constructor": false}], "file": "camera/camera-camera2/src/main/java/androidx/camera/camera2/impl/Camera2SessionOptionUnpacker.java"}, "focal_method": {"identifier": "unpack", "parameters": "(UseCaseConfig<?> config, final SessionConfig.Builder builder)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void unpack(UseCaseConfig<?> config, final SessionConfig.Builder builder) {\n        SessionConfig defaultSessionConfig =\n                config.getDefaultSessionConfig(/*valueIfMissing=*/ null);\n\n        Config implOptions = OptionsBundle.emptyBundle();\n        int templateType = SessionConfig.defaultEmptySessionConfig().getTemplateType();\n\n        // Apply/extract defaults from session config\n        if (defaultSessionConfig != null) {\n            templateType = defaultSessionConfig.getTemplateType();\n            builder.addAllDeviceStateCallbacks(defaultSessionConfig.getDeviceStateCallbacks());\n            builder.addAllSessionStateCallbacks(defaultSessionConfig.getSessionStateCallbacks());\n            builder.addAllRepeatingCameraCaptureCallbacks(\n                    defaultSessionConfig.getRepeatingCameraCaptureCallbacks());\n            implOptions = defaultSessionConfig.getImplementationOptions();\n        }\n\n        // Set the any additional implementation options\n        builder.setImplementationOptions(implOptions);\n\n        // Get Camera2 extended options\n        final Camera2Config camera2Config = new Camera2Config(config);\n\n        // Apply template type\n        builder.setTemplateType(camera2Config.getCaptureRequestTemplate(templateType));\n\n        // Add extension callbacks\n        builder.addDeviceStateCallback(\n                camera2Config.getDeviceStateCallback(\n                        CameraDeviceStateCallbacks.createNoOpCallback()));\n        builder.addSessionStateCallback(\n                camera2Config.getSessionStateCallback(\n                        CameraCaptureSessionStateCallbacks.createNoOpCallback()));\n        builder.addCameraCaptureCallback(\n                CaptureCallbackContainer.create(\n                        camera2Config.getSessionCaptureCallback(\n                                Camera2CaptureCallbacks.createNoOpCallback())));\n\n        MutableOptionsBundle cameraEventConfig = MutableOptionsBundle.create();\n        cameraEventConfig.insertOption(Camera2Config.CAMERA_EVENT_CALLBACK_OPTION,\n                camera2Config.getCameraEventCallback(CameraEventCallbacks.createEmptyCallback()));\n        builder.addImplementationOptions(cameraEventConfig);\n\n        // Copy extension keys\n        Camera2Config.Builder configBuilder = new Camera2Config.Builder();\n        for (Option<?> option : camera2Config.getCaptureRequestOptions()) {\n            @SuppressWarnings(\"unchecked\")\n            // No way to get actual type info here, so treat as Object\n                    Option<Object> typeErasedOption = (Option<Object>) option;\n            @SuppressWarnings(\"unchecked\")\n            CaptureRequest.Key<Object> key = (CaptureRequest.Key<Object>) option.getToken();\n            configBuilder.setCaptureRequestOption(key,\n                    camera2Config.retrieveOption(typeErasedOption));\n        }\n        builder.addImplementationOptions(configBuilder.build());\n    }", "signature": "void unpack(UseCaseConfig<?> config, final SessionConfig.Builder builder)", "full_signature": "@Override public void unpack(UseCaseConfig<?> config, final SessionConfig.Builder builder)", "class_method_signature": "Camera2SessionOptionUnpacker.unpack(UseCaseConfig<?> config, final SessionConfig.Builder builder)", "testcase": false, "constructor": false, "invocations": ["getDefaultSessionConfig", "emptyBundle", "getTemplateType", "defaultEmptySessionConfig", "getTemplateType", "addAllDeviceStateCallbacks", "getDeviceStateCallbacks", "addAllSessionStateCallbacks", "getSessionStateCallbacks", "addAllRepeatingCameraCaptureCallbacks", "getRepeatingCameraCaptureCallbacks", "getImplementationOptions", "setImplementationOptions", "setTemplateType", "getCaptureRequestTemplate", "addDeviceStateCallback", "getDeviceStateCallback", "createNoOpCallback", "addSessionStateCallback", "getSessionStateCallback", "createNoOpCallback", "addCameraCaptureCallback", "create", "getSessionCaptureCallback", "createNoOpCallback", "create", "insertOption", "getCameraEventCallback", "createEmptyCallback", "addImplementationOptions", "getCaptureRequestOptions", "getToken", "setCaptureRequestOption", "retrieveOption", "addImplementationOptions", "build"]}, "repository": {"repo_id": 3978781, "url": "https://github.com/aosp-mirror/platform_frameworks_support", "language": "Java", "is_fork": false, "fork_count": 641, "stargazer_count": 1569, "size": 354693, "license": "licensed"}}