{"test_class": {"identifier": "ProcessingImageReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CAPTURE_ID_0 = 0;", "modifier": "private static final", "type": "int", "declarator": "CAPTURE_ID_0 = 0", "var_name": "CAPTURE_ID_0"}, {"original_string": "private static final int CAPTURE_ID_1 = 1;", "modifier": "private static final", "type": "int", "declarator": "CAPTURE_ID_1 = 1", "var_name": "CAPTURE_ID_1"}, {"original_string": "private static final int CAPTURE_ID_2 = 2;", "modifier": "private static final", "type": "int", "declarator": "CAPTURE_ID_2 = 2", "var_name": "CAPTURE_ID_2"}, {"original_string": "private static final int CAPTURE_ID_3 = 3;", "modifier": "private static final", "type": "int", "declarator": "CAPTURE_ID_3 = 3", "var_name": "CAPTURE_ID_3"}, {"original_string": "private static final long TIMESTAMP_0 = 0L;", "modifier": "private static final", "type": "long", "declarator": "TIMESTAMP_0 = 0L", "var_name": "TIMESTAMP_0"}, {"original_string": "private static final long TIMESTAMP_1 = 1000L;", "modifier": "private static final", "type": "long", "declarator": "TIMESTAMP_1 = 1000L", "var_name": "TIMESTAMP_1"}, {"original_string": "private static final long TIMESTAMP_2 = 2000L;", "modifier": "private static final", "type": "long", "declarator": "TIMESTAMP_2 = 2000L", "var_name": "TIMESTAMP_2"}, {"original_string": "private static final long TIMESTAMP_3 = 4000L;", "modifier": "private static final", "type": "long", "declarator": "TIMESTAMP_3 = 4000L", "var_name": "TIMESTAMP_3"}, {"original_string": "private static final CaptureProcessor NOOP_PROCESSOR = new CaptureProcessor() {\n        @Override\n        public void onOutputSurface(Surface surface, int imageFormat) {\n\n        }\n\n        @Override\n        public void process(ImageProxyBundle bundle) {\n\n        }\n\n        @Override\n        public void onResolutionUpdate(Size size) {\n\n        }\n    };", "modifier": "private static final", "type": "CaptureProcessor", "declarator": "NOOP_PROCESSOR = new CaptureProcessor() {\n        @Override\n        public void onOutputSurface(Surface surface, int imageFormat) {\n\n        }\n\n        @Override\n        public void process(ImageProxyBundle bundle) {\n\n        }\n\n        @Override\n        public void onResolutionUpdate(Size size) {\n\n        }\n    }", "var_name": "NOOP_PROCESSOR"}, {"original_string": "private final CaptureStage mCaptureStage0 = new FakeCaptureStage(CAPTURE_ID_0, null);", "modifier": "private final", "type": "CaptureStage", "declarator": "mCaptureStage0 = new FakeCaptureStage(CAPTURE_ID_0, null)", "var_name": "mCaptureStage0"}, {"original_string": "private final CaptureStage mCaptureStage1 = new FakeCaptureStage(CAPTURE_ID_1, null);", "modifier": "private final", "type": "CaptureStage", "declarator": "mCaptureStage1 = new FakeCaptureStage(CAPTURE_ID_1, null)", "var_name": "mCaptureStage1"}, {"original_string": "private final CaptureStage mCaptureStage2 = new FakeCaptureStage(CAPTURE_ID_2, null);", "modifier": "private final", "type": "CaptureStage", "declarator": "mCaptureStage2 = new FakeCaptureStage(CAPTURE_ID_2, null)", "var_name": "mCaptureStage2"}, {"original_string": "private final CaptureStage mCaptureStage3 = new FakeCaptureStage(CAPTURE_ID_3, null);", "modifier": "private final", "type": "CaptureStage", "declarator": "mCaptureStage3 = new FakeCaptureStage(CAPTURE_ID_3, null)", "var_name": "mCaptureStage3"}, {"original_string": "private final FakeImageReaderProxy mImageReaderProxy = new FakeImageReaderProxy(8);", "modifier": "private final", "type": "FakeImageReaderProxy", "declarator": "mImageReaderProxy = new FakeImageReaderProxy(8)", "var_name": "mImageReaderProxy"}, {"original_string": "private CaptureBundle mCaptureBundle;", "modifier": "private", "type": "CaptureBundle", "declarator": "mCaptureBundle", "var_name": "mCaptureBundle"}, {"original_string": "private Handler mMainHandler;", "modifier": "private", "type": "Handler", "declarator": "mMainHandler", "var_name": "mMainHandler"}], "file": "camera/camera-core/src/test/java/androidx/camera/core/ProcessingImageReaderTest.java"}, "test_case": {"identifier": "captureStageExceedMaxCaptureStage_setCaptureBundleThrowsException", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void captureStageExceedMaxCaptureStage_setCaptureBundleThrowsException() {\n        // Creates a ProcessingImageReader with maximum Image number.\n        ProcessingImageReader processingImageReader = new ProcessingImageReader(100, 100,\n                ImageFormat.YUV_420_888, 2, mMainHandler, mCaptureBundle,\n                mock(CaptureProcessor.class));\n\n        // Expects to throw exception when invoke the setCaptureBundle method with a\n        // CaptureBundle size greater than maximum image number.\n        processingImageReader.setCaptureBundle(\n                CaptureBundles.createCaptureBundle(mCaptureStage1, mCaptureStage2, mCaptureStage3));\n    }", "signature": "void captureStageExceedMaxCaptureStage_setCaptureBundleThrowsException()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void captureStageExceedMaxCaptureStage_setCaptureBundleThrowsException()", "class_method_signature": "ProcessingImageReaderTest.captureStageExceedMaxCaptureStage_setCaptureBundleThrowsException()", "testcase": true, "constructor": false, "invocations": ["mock", "setCaptureBundle", "createCaptureBundle"]}, "focal_class": {"identifier": "ProcessingImageReader", "superclass": "", "interfaces": "implements ImageReaderProxy", "fields": [{"original_string": "private static final String TAG = \"ProcessingImageReader\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"ProcessingImageReader\"", "var_name": "TAG"}, {"original_string": "private final Object mLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "mLock = new Object()", "var_name": "mLock"}, {"original_string": "private ImageReaderProxy.OnImageAvailableListener mTransformedListener =\n            new ImageReaderProxy.OnImageAvailableListener() {\n                @Override\n                public void onImageAvailable(ImageReaderProxy reader) {\n                    imageIncoming(reader);\n                }\n            };", "modifier": "private", "type": "ImageReaderProxy.OnImageAvailableListener", "declarator": "mTransformedListener =\n            new ImageReaderProxy.OnImageAvailableListener() {\n                @Override\n                public void onImageAvailable(ImageReaderProxy reader) {\n                    imageIncoming(reader);\n                }\n            }", "var_name": "mTransformedListener"}, {"original_string": "private ImageReader.OnImageAvailableListener mImageProcessedListener =\n            new ImageReader.OnImageAvailableListener() {\n                @Override\n                public void onImageAvailable(ImageReader reader) {\n                    // Callback the output OnImageAvailableListener.\n                    if (mHandler != null) {\n                        mHandler.post(\n                                new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        mListener.onImageAvailable(ProcessingImageReader.this);\n                                    }\n                                });\n                    } else {\n                        mListener.onImageAvailable(ProcessingImageReader.this);\n                    }\n                    // Resets SettableImageProxyBundle after the processor finishes processing.\n                    mSettableImageProxyBundle.reset();\n                    setupSettableImageProxyBundleCallbacks();\n                }\n            };", "modifier": "private", "type": "ImageReader.OnImageAvailableListener", "declarator": "mImageProcessedListener =\n            new ImageReader.OnImageAvailableListener() {\n                @Override\n                public void onImageAvailable(ImageReader reader) {\n                    // Callback the output OnImageAvailableListener.\n                    if (mHandler != null) {\n                        mHandler.post(\n                                new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        mListener.onImageAvailable(ProcessingImageReader.this);\n                                    }\n                                });\n                    } else {\n                        mListener.onImageAvailable(ProcessingImageReader.this);\n                    }\n                    // Resets SettableImageProxyBundle after the processor finishes processing.\n                    mSettableImageProxyBundle.reset();\n                    setupSettableImageProxyBundleCallbacks();\n                }\n            }", "var_name": "mImageProcessedListener"}, {"original_string": "private FutureCallback<List<ImageProxy>> mCaptureStageReadyCallback =\n            new FutureCallback<List<ImageProxy>>() {\n                @Override\n                public void onSuccess(@Nullable List<ImageProxy> imageProxyList) {\n                    mCaptureProcessor.process(mSettableImageProxyBundle);\n                }\n\n                @Override\n                public void onFailure(Throwable throwable) {\n\n                }\n            };", "modifier": "private", "type": "FutureCallback<List<ImageProxy>>", "declarator": "mCaptureStageReadyCallback =\n            new FutureCallback<List<ImageProxy>>() {\n                @Override\n                public void onSuccess(@Nullable List<ImageProxy> imageProxyList) {\n                    mCaptureProcessor.process(mSettableImageProxyBundle);\n                }\n\n                @Override\n                public void onFailure(Throwable throwable) {\n\n                }\n            }", "var_name": "mCaptureStageReadyCallback"}, {"original_string": "@GuardedBy(\"mLock\")\n    private boolean mClosed = false;", "modifier": "@GuardedBy(\"mLock\")\n    private", "type": "boolean", "declarator": "mClosed = false", "var_name": "mClosed"}, {"original_string": "@GuardedBy(\"mLock\")\n    private final ImageReaderProxy mInputImageReader;", "modifier": "@GuardedBy(\"mLock\")\n    private final", "type": "ImageReaderProxy", "declarator": "mInputImageReader", "var_name": "mInputImageReader"}, {"original_string": "@GuardedBy(\"mLock\")\n    private final ImageReader mOutputImageReader;", "modifier": "@GuardedBy(\"mLock\")\n    private final", "type": "ImageReader", "declarator": "mOutputImageReader", "var_name": "mOutputImageReader"}, {"original_string": "@GuardedBy(\"mLock\")\n    @Nullable\n    ImageReaderProxy.OnImageAvailableListener mListener;", "modifier": "@GuardedBy(\"mLock\")\n    @Nullable", "type": "ImageReaderProxy.OnImageAvailableListener", "declarator": "mListener", "var_name": "mListener"}, {"original_string": "@GuardedBy(\"mLock\")\n    @Nullable\n    Handler mHandler;", "modifier": "@GuardedBy(\"mLock\")\n    @Nullable", "type": "Handler", "declarator": "mHandler", "var_name": "mHandler"}, {"original_string": "@NonNull\n    CaptureProcessor mCaptureProcessor;", "modifier": "@NonNull", "type": "CaptureProcessor", "declarator": "mCaptureProcessor", "var_name": "mCaptureProcessor"}, {"original_string": "@GuardedBy(\"mLock\")\n    SettableImageProxyBundle mSettableImageProxyBundle = null;", "modifier": "@GuardedBy(\"mLock\")", "type": "SettableImageProxyBundle", "declarator": "mSettableImageProxyBundle = null", "var_name": "mSettableImageProxyBundle"}, {"original_string": "private final List<Integer> mCaptureIdList = new ArrayList<>();", "modifier": "private final", "type": "List<Integer>", "declarator": "mCaptureIdList = new ArrayList<>()", "var_name": "mCaptureIdList"}], "methods": [{"identifier": "ProcessingImageReader", "parameters": "(int width, int height, int format, int maxImages,\n            @Nullable Handler handler,\n            @NonNull CaptureBundle captureBundle, @NonNull CaptureProcessor captureProcessor)", "modifiers": "", "return": "", "signature": " ProcessingImageReader(int width, int height, int format, int maxImages,\n            @Nullable Handler handler,\n            @NonNull CaptureBundle captureBundle, @NonNull CaptureProcessor captureProcessor)", "full_signature": "  ProcessingImageReader(int width, int height, int format, int maxImages,\n            @Nullable Handler handler,\n            @NonNull CaptureBundle captureBundle, @NonNull CaptureProcessor captureProcessor)", "class_method_signature": "ProcessingImageReader.ProcessingImageReader(int width, int height, int format, int maxImages,\n            @Nullable Handler handler,\n            @NonNull CaptureBundle captureBundle, @NonNull CaptureProcessor captureProcessor)", "testcase": false, "constructor": true}, {"identifier": "ProcessingImageReader", "parameters": "(ImageReaderProxy imageReader, @Nullable Handler handler,\n            @NonNull CaptureBundle captureBundle,\n            @NonNull CaptureProcessor captureProcessor)", "modifiers": "", "return": "", "signature": " ProcessingImageReader(ImageReaderProxy imageReader, @Nullable Handler handler,\n            @NonNull CaptureBundle captureBundle,\n            @NonNull CaptureProcessor captureProcessor)", "full_signature": "  ProcessingImageReader(ImageReaderProxy imageReader, @Nullable Handler handler,\n            @NonNull CaptureBundle captureBundle,\n            @NonNull CaptureProcessor captureProcessor)", "class_method_signature": "ProcessingImageReader.ProcessingImageReader(ImageReaderProxy imageReader, @Nullable Handler handler,\n            @NonNull CaptureBundle captureBundle,\n            @NonNull CaptureProcessor captureProcessor)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(@Nullable Handler handler, @NonNull CaptureBundle captureBundle,\n            @NonNull CaptureProcessor captureProcessor)", "modifiers": "private", "return": "void", "signature": "void init(@Nullable Handler handler, @NonNull CaptureBundle captureBundle,\n            @NonNull CaptureProcessor captureProcessor)", "full_signature": "private void init(@Nullable Handler handler, @NonNull CaptureBundle captureBundle,\n            @NonNull CaptureProcessor captureProcessor)", "class_method_signature": "ProcessingImageReader.init(@Nullable Handler handler, @NonNull CaptureBundle captureBundle,\n            @NonNull CaptureProcessor captureProcessor)", "testcase": false, "constructor": false}, {"identifier": "acquireLatestImage", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "ImageProxy", "signature": "ImageProxy acquireLatestImage()", "full_signature": "@Override @Nullable public ImageProxy acquireLatestImage()", "class_method_signature": "ProcessingImageReader.acquireLatestImage()", "testcase": false, "constructor": false}, {"identifier": "acquireNextImage", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "ImageProxy", "signature": "ImageProxy acquireNextImage()", "full_signature": "@Override @Nullable public ImageProxy acquireNextImage()", "class_method_signature": "ProcessingImageReader.acquireNextImage()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ProcessingImageReader.close()", "testcase": false, "constructor": false}, {"identifier": "getHeight", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getHeight()", "full_signature": "@Override public int getHeight()", "class_method_signature": "ProcessingImageReader.getHeight()", "testcase": false, "constructor": false}, {"identifier": "getWidth", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getWidth()", "full_signature": "@Override public int getWidth()", "class_method_signature": "ProcessingImageReader.getWidth()", "testcase": false, "constructor": false}, {"identifier": "getImageFormat", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getImageFormat()", "full_signature": "@Override public int getImageFormat()", "class_method_signature": "ProcessingImageReader.getImageFormat()", "testcase": false, "constructor": false}, {"identifier": "getMaxImages", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxImages()", "full_signature": "@Override public int getMaxImages()", "class_method_signature": "ProcessingImageReader.getMaxImages()", "testcase": false, "constructor": false}, {"identifier": "getSurface", "parameters": "()", "modifiers": "@Override public", "return": "Surface", "signature": "Surface getSurface()", "full_signature": "@Override public Surface getSurface()", "class_method_signature": "ProcessingImageReader.getSurface()", "testcase": false, "constructor": false}, {"identifier": "setOnImageAvailableListener", "parameters": "(\n            @Nullable final ImageReaderProxy.OnImageAvailableListener listener,\n            @Nullable Handler handler)", "modifiers": "@Override public", "return": "void", "signature": "void setOnImageAvailableListener(\n            @Nullable final ImageReaderProxy.OnImageAvailableListener listener,\n            @Nullable Handler handler)", "full_signature": "@Override public void setOnImageAvailableListener(\n            @Nullable final ImageReaderProxy.OnImageAvailableListener listener,\n            @Nullable Handler handler)", "class_method_signature": "ProcessingImageReader.setOnImageAvailableListener(\n            @Nullable final ImageReaderProxy.OnImageAvailableListener listener,\n            @Nullable Handler handler)", "testcase": false, "constructor": false}, {"identifier": "setCaptureBundle", "parameters": "(@NonNull CaptureBundle captureBundle)", "modifiers": "public", "return": "void", "signature": "void setCaptureBundle(@NonNull CaptureBundle captureBundle)", "full_signature": "public void setCaptureBundle(@NonNull CaptureBundle captureBundle)", "class_method_signature": "ProcessingImageReader.setCaptureBundle(@NonNull CaptureBundle captureBundle)", "testcase": false, "constructor": false}, {"identifier": "getCameraCaptureCallback", "parameters": "()", "modifiers": "@Nullable", "return": "CameraCaptureCallback", "signature": "CameraCaptureCallback getCameraCaptureCallback()", "full_signature": "@Nullable CameraCaptureCallback getCameraCaptureCallback()", "class_method_signature": "ProcessingImageReader.getCameraCaptureCallback()", "testcase": false, "constructor": false}, {"identifier": "setupSettableImageProxyBundleCallbacks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setupSettableImageProxyBundleCallbacks()", "full_signature": " void setupSettableImageProxyBundleCallbacks()", "class_method_signature": "ProcessingImageReader.setupSettableImageProxyBundleCallbacks()", "testcase": false, "constructor": false}, {"identifier": "imageIncoming", "parameters": "(ImageReaderProxy imageReader)", "modifiers": "", "return": "void", "signature": "void imageIncoming(ImageReaderProxy imageReader)", "full_signature": " void imageIncoming(ImageReaderProxy imageReader)", "class_method_signature": "ProcessingImageReader.imageIncoming(ImageReaderProxy imageReader)", "testcase": false, "constructor": false}], "file": "camera/camera-core/src/main/java/androidx/camera/core/ProcessingImageReader.java"}, "focal_method": {"identifier": "setCaptureBundle", "parameters": "(@NonNull CaptureBundle captureBundle)", "modifiers": "public", "return": "void", "body": "public void setCaptureBundle(@NonNull CaptureBundle captureBundle) {\n        synchronized (mLock) {\n            if (captureBundle.getCaptureStages() != null) {\n                if (mInputImageReader.getMaxImages() < captureBundle.getCaptureStages().size()) {\n                    throw new IllegalArgumentException(\n                            \"CaptureBundle is lager than InputImageReader.\");\n                }\n\n                mCaptureIdList.clear();\n\n                for (CaptureStage captureStage : captureBundle.getCaptureStages()) {\n                    if (captureStage != null) {\n                        mCaptureIdList.add(captureStage.getId());\n                    }\n                }\n            }\n\n            mSettableImageProxyBundle = new SettableImageProxyBundle(mCaptureIdList);\n            setupSettableImageProxyBundleCallbacks();\n        }\n    }", "signature": "void setCaptureBundle(@NonNull CaptureBundle captureBundle)", "full_signature": "public void setCaptureBundle(@NonNull CaptureBundle captureBundle)", "class_method_signature": "ProcessingImageReader.setCaptureBundle(@NonNull CaptureBundle captureBundle)", "testcase": false, "constructor": false, "invocations": ["getCaptureStages", "getMaxImages", "size", "getCaptureStages", "clear", "getCaptureStages", "add", "getId", "setupSettableImageProxyBundleCallbacks"]}, "repository": {"repo_id": 3978781, "url": "https://github.com/aosp-mirror/platform_frameworks_support", "language": "Java", "is_fork": false, "fork_count": 641, "stargazer_count": 1569, "size": 354693, "license": "licensed"}}