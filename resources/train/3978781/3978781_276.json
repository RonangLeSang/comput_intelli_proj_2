{"test_class": {"identifier": "ForeignKeyBundleTest", "superclass": "", "interfaces": "", "fields": [], "file": "room/migration/src/test/java/androidx/room/migration/bundle/ForeignKeyBundleTest.java"}, "test_case": {"identifier": "schemaEquality_diffOnDelete_notEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void schemaEquality_diffOnDelete_notEqual() {\n        ForeignKeyBundle bundle = new ForeignKeyBundle(\"table\", \"onDelete2\",\n                \"onUpdate\", Arrays.asList(\"col1\", \"col2\"),\n                Arrays.asList(\"target1\", \"target2\"));\n        ForeignKeyBundle other = new ForeignKeyBundle(\"table\", \"onDelete\",\n                \"onUpdate\", Arrays.asList(\"col1\", \"col2\"),\n                Arrays.asList(\"target1\", \"target2\"));\n        assertThat(bundle.isSchemaEqual(other), is(false));\n    }", "signature": "void schemaEquality_diffOnDelete_notEqual()", "full_signature": "@Test public void schemaEquality_diffOnDelete_notEqual()", "class_method_signature": "ForeignKeyBundleTest.schemaEquality_diffOnDelete_notEqual()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "asList", "asList", "assertThat", "isSchemaEqual", "is"]}, "focal_class": {"identifier": "ForeignKeyBundle", "superclass": "", "interfaces": "implements SchemaEquality<ForeignKeyBundle>", "fields": [{"original_string": "@SerializedName(\"table\")\n    private String mTable;", "modifier": "@SerializedName(\"table\")\n    private", "type": "String", "declarator": "mTable", "var_name": "mTable"}, {"original_string": "@SerializedName(\"onDelete\")\n    private String mOnDelete;", "modifier": "@SerializedName(\"onDelete\")\n    private", "type": "String", "declarator": "mOnDelete", "var_name": "mOnDelete"}, {"original_string": "@SerializedName(\"onUpdate\")\n    private String mOnUpdate;", "modifier": "@SerializedName(\"onUpdate\")\n    private", "type": "String", "declarator": "mOnUpdate", "var_name": "mOnUpdate"}, {"original_string": "@SerializedName(\"columns\")\n    private List<String> mColumns;", "modifier": "@SerializedName(\"columns\")\n    private", "type": "List<String>", "declarator": "mColumns", "var_name": "mColumns"}, {"original_string": "@SerializedName(\"referencedColumns\")\n    private List<String> mReferencedColumns;", "modifier": "@SerializedName(\"referencedColumns\")\n    private", "type": "List<String>", "declarator": "mReferencedColumns", "var_name": "mReferencedColumns"}], "methods": [{"identifier": "ForeignKeyBundle", "parameters": "(String table, String onDelete, String onUpdate,\n            List<String> columns, List<String> referencedColumns)", "modifiers": "public", "return": "", "signature": " ForeignKeyBundle(String table, String onDelete, String onUpdate,\n            List<String> columns, List<String> referencedColumns)", "full_signature": "public  ForeignKeyBundle(String table, String onDelete, String onUpdate,\n            List<String> columns, List<String> referencedColumns)", "class_method_signature": "ForeignKeyBundle.ForeignKeyBundle(String table, String onDelete, String onUpdate,\n            List<String> columns, List<String> referencedColumns)", "testcase": false, "constructor": true}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTable()", "full_signature": "public String getTable()", "class_method_signature": "ForeignKeyBundle.getTable()", "testcase": false, "constructor": false}, {"identifier": "getOnDelete", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOnDelete()", "full_signature": "public String getOnDelete()", "class_method_signature": "ForeignKeyBundle.getOnDelete()", "testcase": false, "constructor": false}, {"identifier": "getOnUpdate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOnUpdate()", "full_signature": "public String getOnUpdate()", "class_method_signature": "ForeignKeyBundle.getOnUpdate()", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getColumns()", "full_signature": "public List<String> getColumns()", "class_method_signature": "ForeignKeyBundle.getColumns()", "testcase": false, "constructor": false}, {"identifier": "getReferencedColumns", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getReferencedColumns()", "full_signature": "public List<String> getReferencedColumns()", "class_method_signature": "ForeignKeyBundle.getReferencedColumns()", "testcase": false, "constructor": false}, {"identifier": "isSchemaEqual", "parameters": "(ForeignKeyBundle other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSchemaEqual(ForeignKeyBundle other)", "full_signature": "@Override public boolean isSchemaEqual(ForeignKeyBundle other)", "class_method_signature": "ForeignKeyBundle.isSchemaEqual(ForeignKeyBundle other)", "testcase": false, "constructor": false}], "file": "room/migration/src/main/java/androidx/room/migration/bundle/ForeignKeyBundle.java"}, "focal_method": {"identifier": "isSchemaEqual", "parameters": "(ForeignKeyBundle other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isSchemaEqual(ForeignKeyBundle other) {\n        if (mTable != null ? !mTable.equals(other.mTable) : other.mTable != null) return false;\n        if (mOnDelete != null ? !mOnDelete.equals(other.mOnDelete) : other.mOnDelete != null) {\n            return false;\n        }\n        if (mOnUpdate != null ? !mOnUpdate.equals(other.mOnUpdate) : other.mOnUpdate != null) {\n            return false;\n        }\n        // order matters\n        return mColumns.equals(other.mColumns) && mReferencedColumns.equals(\n                other.mReferencedColumns);\n    }", "signature": "boolean isSchemaEqual(ForeignKeyBundle other)", "full_signature": "@Override public boolean isSchemaEqual(ForeignKeyBundle other)", "class_method_signature": "ForeignKeyBundle.isSchemaEqual(ForeignKeyBundle other)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 3978781, "url": "https://github.com/aosp-mirror/platform_frameworks_support", "language": "Java", "is_fork": false, "fork_count": 641, "stargazer_count": 1569, "size": 354693, "license": "licensed"}}