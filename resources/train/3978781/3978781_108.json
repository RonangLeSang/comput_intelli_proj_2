{"test_class": {"identifier": "SupportedSurfaceCombinationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LEGACY_CAMERA_ID = \"0\";", "modifier": "private static final", "type": "String", "declarator": "LEGACY_CAMERA_ID = \"0\"", "var_name": "LEGACY_CAMERA_ID"}, {"original_string": "private static final String LIMITED_CAMERA_ID = \"1\";", "modifier": "private static final", "type": "String", "declarator": "LIMITED_CAMERA_ID = \"1\"", "var_name": "LIMITED_CAMERA_ID"}, {"original_string": "private static final String FULL_CAMERA_ID = \"2\";", "modifier": "private static final", "type": "String", "declarator": "FULL_CAMERA_ID = \"2\"", "var_name": "FULL_CAMERA_ID"}, {"original_string": "private static final String RAW_CAMERA_ID = \"3\";", "modifier": "private static final", "type": "String", "declarator": "RAW_CAMERA_ID = \"3\"", "var_name": "RAW_CAMERA_ID"}, {"original_string": "private static final String LEVEL3_CAMERA_ID = \"4\";", "modifier": "private static final", "type": "String", "declarator": "LEVEL3_CAMERA_ID = \"4\"", "var_name": "LEVEL3_CAMERA_ID"}, {"original_string": "private static final int DEFAULT_SENSOR_ORIENTATION = 90;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SENSOR_ORIENTATION = 90", "var_name": "DEFAULT_SENSOR_ORIENTATION"}, {"original_string": "private static final Rational ASPECT_RATIO_4_3 = new Rational(4, 3);", "modifier": "private static final", "type": "Rational", "declarator": "ASPECT_RATIO_4_3 = new Rational(4, 3)", "var_name": "ASPECT_RATIO_4_3"}, {"original_string": "private final Size mDisplaySize = new Size(1280, 720);", "modifier": "private final", "type": "Size", "declarator": "mDisplaySize = new Size(1280, 720)", "var_name": "mDisplaySize"}, {"original_string": "private final Size mAnalysisSize = new Size(640, 480);", "modifier": "private final", "type": "Size", "declarator": "mAnalysisSize = new Size(640, 480)", "var_name": "mAnalysisSize"}, {"original_string": "private final Size mPreviewSize = mDisplaySize;", "modifier": "private final", "type": "Size", "declarator": "mPreviewSize = mDisplaySize", "var_name": "mPreviewSize"}, {"original_string": "private final Size mRecordSize = new Size(3840, 2160);", "modifier": "private final", "type": "Size", "declarator": "mRecordSize = new Size(3840, 2160)", "var_name": "mRecordSize"}, {"original_string": "private final Size mMaximumSize = new Size(4032, 3024);", "modifier": "private final", "type": "Size", "declarator": "mMaximumSize = new Size(4032, 3024)", "var_name": "mMaximumSize"}, {"original_string": "private final Size mMaximumVideoSize = new Size(1920, 1080);", "modifier": "private final", "type": "Size", "declarator": "mMaximumVideoSize = new Size(1920, 1080)", "var_name": "mMaximumVideoSize"}, {"original_string": "private final CamcorderProfileHelper mMockCamcorderProfileHelper =\n            Mockito.mock(CamcorderProfileHelper.class);", "modifier": "private final", "type": "CamcorderProfileHelper", "declarator": "mMockCamcorderProfileHelper =\n            Mockito.mock(CamcorderProfileHelper.class)", "var_name": "mMockCamcorderProfileHelper"}, {"original_string": "private final int[] mSupportedFormats =\n            new int[]{\n                    ImageFormat.YUV_420_888,\n                    ImageFormatConstants.INTERNAL_DEFINED_IMAGE_FORMAT_JPEG,\n                    ImageFormatConstants.INTERNAL_DEFINED_IMAGE_FORMAT_PRIVATE\n            };", "modifier": "private final", "type": "int[]", "declarator": "mSupportedFormats =\n            new int[]{\n                    ImageFormat.YUV_420_888,\n                    ImageFormatConstants.INTERNAL_DEFINED_IMAGE_FORMAT_JPEG,\n                    ImageFormatConstants.INTERNAL_DEFINED_IMAGE_FORMAT_PRIVATE\n            }", "var_name": "mSupportedFormats"}, {"original_string": "private final int[] mSupportedFormatsWithRaw =\n            new int[]{\n                    ImageFormat.YUV_420_888,\n                    ImageFormatConstants.INTERNAL_DEFINED_IMAGE_FORMAT_JPEG,\n                    ImageFormatConstants.INTERNAL_DEFINED_IMAGE_FORMAT_PRIVATE,\n                    ImageFormat.RAW_SENSOR\n            };", "modifier": "private final", "type": "int[]", "declarator": "mSupportedFormatsWithRaw =\n            new int[]{\n                    ImageFormat.YUV_420_888,\n                    ImageFormatConstants.INTERNAL_DEFINED_IMAGE_FORMAT_JPEG,\n                    ImageFormatConstants.INTERNAL_DEFINED_IMAGE_FORMAT_PRIVATE,\n                    ImageFormat.RAW_SENSOR\n            }", "var_name": "mSupportedFormatsWithRaw"}, {"original_string": "private final Size[] mSupportedSizes =\n            new Size[]{\n                    new Size(4032, 3024),\n                    new Size(3840, 2160),\n                    new Size(1920, 1080),\n                    new Size(1280, 720),\n                    new Size(1280, 720), // duplicate the size since Nexus 5X emulator has the case.\n                    new Size(640, 480),\n                    new Size(320, 240),\n                    new Size(320, 180)\n            };", "modifier": "private final", "type": "Size[]", "declarator": "mSupportedSizes =\n            new Size[]{\n                    new Size(4032, 3024),\n                    new Size(3840, 2160),\n                    new Size(1920, 1080),\n                    new Size(1280, 720),\n                    new Size(1280, 720), // duplicate the size since Nexus 5X emulator has the case.\n                    new Size(640, 480),\n                    new Size(320, 240),\n                    new Size(320, 180)\n            }", "var_name": "mSupportedSizes"}, {"original_string": "private final Context mContext = RuntimeEnvironment.application.getApplicationContext();", "modifier": "private final", "type": "Context", "declarator": "mContext = RuntimeEnvironment.application.getApplicationContext()", "var_name": "mContext"}], "file": "camera/camera-camera2/src/test/java/androidx/camera/camera2/impl/SupportedSurfaceCombinationTest.java"}, "test_case": {"identifier": "transformSurfaceConfigWithYUVRecordSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void transformSurfaceConfigWithYUVRecordSize() {\n        setupCamera(/* supportsRaw= */ false);\n        SupportedSurfaceCombination supportedSurfaceCombination =\n                new SupportedSurfaceCombination(\n                        mContext, LEGACY_CAMERA_ID, mMockCamcorderProfileHelper);\n        SurfaceConfig surfaceConfig =\n                supportedSurfaceCombination.transformSurfaceConfig(\n                        ImageFormat.YUV_420_888, mRecordSize);\n        SurfaceConfig expectedSurfaceConfig =\n                SurfaceConfig.create(ConfigType.YUV, ConfigSize.RECORD);\n        assertEquals(expectedSurfaceConfig, surfaceConfig);\n    }", "signature": "void transformSurfaceConfigWithYUVRecordSize()", "full_signature": "@Test public void transformSurfaceConfigWithYUVRecordSize()", "class_method_signature": "SupportedSurfaceCombinationTest.transformSurfaceConfigWithYUVRecordSize()", "testcase": true, "constructor": false, "invocations": ["setupCamera", "transformSurfaceConfig", "create", "assertEquals"]}, "focal_class": {"identifier": "SupportedSurfaceCombination", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Size MAX_PREVIEW_SIZE = new Size(1920, 1080);", "modifier": "private static final", "type": "Size", "declarator": "MAX_PREVIEW_SIZE = new Size(1920, 1080)", "var_name": "MAX_PREVIEW_SIZE"}, {"original_string": "private static final Size DEFAULT_SIZE = new Size(640, 480);", "modifier": "private static final", "type": "Size", "declarator": "DEFAULT_SIZE = new Size(640, 480)", "var_name": "DEFAULT_SIZE"}, {"original_string": "private static final Size ZERO_SIZE = new Size(0, 0);", "modifier": "private static final", "type": "Size", "declarator": "ZERO_SIZE = new Size(0, 0)", "var_name": "ZERO_SIZE"}, {"original_string": "private static final Size QUALITY_2160P_SIZE = new Size(3840, 2160);", "modifier": "private static final", "type": "Size", "declarator": "QUALITY_2160P_SIZE = new Size(3840, 2160)", "var_name": "QUALITY_2160P_SIZE"}, {"original_string": "private static final Size QUALITY_1080P_SIZE = new Size(1920, 1080);", "modifier": "private static final", "type": "Size", "declarator": "QUALITY_1080P_SIZE = new Size(1920, 1080)", "var_name": "QUALITY_1080P_SIZE"}, {"original_string": "private static final Size QUALITY_720P_SIZE = new Size(1280, 720);", "modifier": "private static final", "type": "Size", "declarator": "QUALITY_720P_SIZE = new Size(1280, 720)", "var_name": "QUALITY_720P_SIZE"}, {"original_string": "private static final Size QUALITY_480P_SIZE = new Size(720, 480);", "modifier": "private static final", "type": "Size", "declarator": "QUALITY_480P_SIZE = new Size(720, 480)", "var_name": "QUALITY_480P_SIZE"}, {"original_string": "private final List<SurfaceCombination> mSurfaceCombinations = new ArrayList<>();", "modifier": "private final", "type": "List<SurfaceCombination>", "declarator": "mSurfaceCombinations = new ArrayList<>()", "var_name": "mSurfaceCombinations"}, {"original_string": "private final Map<Integer, Size> mMaxSizeCache = new HashMap<>();", "modifier": "private final", "type": "Map<Integer, Size>", "declarator": "mMaxSizeCache = new HashMap<>()", "var_name": "mMaxSizeCache"}, {"original_string": "private String mCameraId;", "modifier": "private", "type": "String", "declarator": "mCameraId", "var_name": "mCameraId"}, {"original_string": "private CameraCharacteristics mCharacteristics;", "modifier": "private", "type": "CameraCharacteristics", "declarator": "mCharacteristics", "var_name": "mCharacteristics"}, {"original_string": "private int mHardwareLevel = CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY;", "modifier": "private", "type": "int", "declarator": "mHardwareLevel = CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY", "var_name": "mHardwareLevel"}, {"original_string": "private boolean mIsRawSupported = false;", "modifier": "private", "type": "boolean", "declarator": "mIsRawSupported = false", "var_name": "mIsRawSupported"}, {"original_string": "private boolean mIsBurstCaptureSupported = false;", "modifier": "private", "type": "boolean", "declarator": "mIsBurstCaptureSupported = false", "var_name": "mIsBurstCaptureSupported"}, {"original_string": "private SurfaceSizeDefinition mSurfaceSizeDefinition;", "modifier": "private", "type": "SurfaceSizeDefinition", "declarator": "mSurfaceSizeDefinition", "var_name": "mSurfaceSizeDefinition"}, {"original_string": "private CamcorderProfileHelper mCamcorderProfileHelper;", "modifier": "private", "type": "CamcorderProfileHelper", "declarator": "mCamcorderProfileHelper", "var_name": "mCamcorderProfileHelper"}], "methods": [{"identifier": "SupportedSurfaceCombination", "parameters": "(\n            Context context, String cameraId, CamcorderProfileHelper camcorderProfileHelper)", "modifiers": "", "return": "", "signature": " SupportedSurfaceCombination(\n            Context context, String cameraId, CamcorderProfileHelper camcorderProfileHelper)", "full_signature": "  SupportedSurfaceCombination(\n            Context context, String cameraId, CamcorderProfileHelper camcorderProfileHelper)", "class_method_signature": "SupportedSurfaceCombination.SupportedSurfaceCombination(\n            Context context, String cameraId, CamcorderProfileHelper camcorderProfileHelper)", "testcase": false, "constructor": true}, {"identifier": "SupportedSurfaceCombination", "parameters": "()", "modifiers": "private", "return": "", "signature": " SupportedSurfaceCombination()", "full_signature": "private  SupportedSurfaceCombination()", "class_method_signature": "SupportedSurfaceCombination.SupportedSurfaceCombination()", "testcase": false, "constructor": true}, {"identifier": "getCameraId", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getCameraId()", "full_signature": " String getCameraId()", "class_method_signature": "SupportedSurfaceCombination.getCameraId()", "testcase": false, "constructor": false}, {"identifier": "isRawSupported", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isRawSupported()", "full_signature": " boolean isRawSupported()", "class_method_signature": "SupportedSurfaceCombination.isRawSupported()", "testcase": false, "constructor": false}, {"identifier": "isBurstCaptureSupported", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isBurstCaptureSupported()", "full_signature": " boolean isBurstCaptureSupported()", "class_method_signature": "SupportedSurfaceCombination.isBurstCaptureSupported()", "testcase": false, "constructor": false}, {"identifier": "checkSupported", "parameters": "(List<SurfaceConfig> surfaceConfigList)", "modifiers": "", "return": "boolean", "signature": "boolean checkSupported(List<SurfaceConfig> surfaceConfigList)", "full_signature": " boolean checkSupported(List<SurfaceConfig> surfaceConfigList)", "class_method_signature": "SupportedSurfaceCombination.checkSupported(List<SurfaceConfig> surfaceConfigList)", "testcase": false, "constructor": false}, {"identifier": "transformSurfaceConfig", "parameters": "(int imageFormat, Size size)", "modifiers": "", "return": "SurfaceConfig", "signature": "SurfaceConfig transformSurfaceConfig(int imageFormat, Size size)", "full_signature": " SurfaceConfig transformSurfaceConfig(int imageFormat, Size size)", "class_method_signature": "SupportedSurfaceCombination.transformSurfaceConfig(int imageFormat, Size size)", "testcase": false, "constructor": false}, {"identifier": "getSuggestedResolutions", "parameters": "(\n            List<UseCase> originalUseCases, List<UseCase> newUseCases)", "modifiers": "", "return": "Map<UseCase, Size>", "signature": "Map<UseCase, Size> getSuggestedResolutions(\n            List<UseCase> originalUseCases, List<UseCase> newUseCases)", "full_signature": " Map<UseCase, Size> getSuggestedResolutions(\n            List<UseCase> originalUseCases, List<UseCase> newUseCases)", "class_method_signature": "SupportedSurfaceCombination.getSuggestedResolutions(\n            List<UseCase> originalUseCases, List<UseCase> newUseCases)", "testcase": false, "constructor": false}, {"identifier": "requiresCorrectedAspectRatio", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean requiresCorrectedAspectRatio()", "full_signature": " boolean requiresCorrectedAspectRatio()", "class_method_signature": "SupportedSurfaceCombination.requiresCorrectedAspectRatio()", "testcase": false, "constructor": false}, {"identifier": "getCorrectedAspectRatio", "parameters": "(UseCaseConfig<?> useCaseConfig)", "modifiers": "", "return": "Rational", "signature": "Rational getCorrectedAspectRatio(UseCaseConfig<?> useCaseConfig)", "full_signature": " Rational getCorrectedAspectRatio(UseCaseConfig<?> useCaseConfig)", "class_method_signature": "SupportedSurfaceCombination.getCorrectedAspectRatio(UseCaseConfig<?> useCaseConfig)", "testcase": false, "constructor": false}, {"identifier": "getSurfaceSizeDefinition", "parameters": "()", "modifiers": "", "return": "SurfaceSizeDefinition", "signature": "SurfaceSizeDefinition getSurfaceSizeDefinition()", "full_signature": " SurfaceSizeDefinition getSurfaceSizeDefinition()", "class_method_signature": "SupportedSurfaceCombination.getSurfaceSizeDefinition()", "testcase": false, "constructor": false}, {"identifier": "fetchMaxSize", "parameters": "(int imageFormat)", "modifiers": "private", "return": "Size", "signature": "Size fetchMaxSize(int imageFormat)", "full_signature": "private Size fetchMaxSize(int imageFormat)", "class_method_signature": "SupportedSurfaceCombination.fetchMaxSize(int imageFormat)", "testcase": false, "constructor": false}, {"identifier": "getUseCasesPriorityOrder", "parameters": "(List<UseCase> newUseCases)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getUseCasesPriorityOrder(List<UseCase> newUseCases)", "full_signature": "private List<Integer> getUseCasesPriorityOrder(List<UseCase> newUseCases)", "class_method_signature": "SupportedSurfaceCombination.getUseCasesPriorityOrder(List<UseCase> newUseCases)", "testcase": false, "constructor": false}, {"identifier": "getSupportedOutputSizes", "parameters": "(UseCase useCase)", "modifiers": "private", "return": "List<Size>", "signature": "List<Size> getSupportedOutputSizes(UseCase useCase)", "full_signature": "private List<Size> getSupportedOutputSizes(UseCase useCase)", "class_method_signature": "SupportedSurfaceCombination.getSupportedOutputSizes(UseCase useCase)", "testcase": false, "constructor": false}, {"identifier": "rotateAspectRatioByRotation", "parameters": "(Rational aspectRatio, int targetRotation)", "modifiers": "private", "return": "Rational", "signature": "Rational rotateAspectRatioByRotation(Rational aspectRatio, int targetRotation)", "full_signature": "private Rational rotateAspectRatioByRotation(Rational aspectRatio, int targetRotation)", "class_method_signature": "SupportedSurfaceCombination.rotateAspectRatioByRotation(Rational aspectRatio, int targetRotation)", "testcase": false, "constructor": false}, {"identifier": "getAllPossibleSizeArrangements", "parameters": "(\n            List<List<Size>> supportedOutputSizesList)", "modifiers": "private", "return": "List<List<Size>>", "signature": "List<List<Size>> getAllPossibleSizeArrangements(\n            List<List<Size>> supportedOutputSizesList)", "full_signature": "private List<List<Size>> getAllPossibleSizeArrangements(\n            List<List<Size>> supportedOutputSizesList)", "class_method_signature": "SupportedSurfaceCombination.getAllPossibleSizeArrangements(\n            List<List<Size>> supportedOutputSizesList)", "testcase": false, "constructor": false}, {"identifier": "getAllOutputSizesByFormat", "parameters": "(int imageFormat)", "modifiers": "private", "return": "Size[]", "signature": "Size[] getAllOutputSizesByFormat(int imageFormat)", "full_signature": "private Size[] getAllOutputSizesByFormat(int imageFormat)", "class_method_signature": "SupportedSurfaceCombination.getAllOutputSizesByFormat(int imageFormat)", "testcase": false, "constructor": false}, {"identifier": "getMaxOutputSizeByFormat", "parameters": "(int imageFormat)", "modifiers": "", "return": "Size", "signature": "Size getMaxOutputSizeByFormat(int imageFormat)", "full_signature": " Size getMaxOutputSizeByFormat(int imageFormat)", "class_method_signature": "SupportedSurfaceCombination.getMaxOutputSizeByFormat(int imageFormat)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Context context)", "modifiers": "private", "return": "void", "signature": "void init(Context context)", "full_signature": "private void init(Context context)", "class_method_signature": "SupportedSurfaceCombination.init(Context context)", "testcase": false, "constructor": false}, {"identifier": "getLegacySupportedCombinationList", "parameters": "()", "modifiers": "", "return": "List<SurfaceCombination>", "signature": "List<SurfaceCombination> getLegacySupportedCombinationList()", "full_signature": " List<SurfaceCombination> getLegacySupportedCombinationList()", "class_method_signature": "SupportedSurfaceCombination.getLegacySupportedCombinationList()", "testcase": false, "constructor": false}, {"identifier": "getLimitedSupportedCombinationList", "parameters": "()", "modifiers": "", "return": "List<SurfaceCombination>", "signature": "List<SurfaceCombination> getLimitedSupportedCombinationList()", "full_signature": " List<SurfaceCombination> getLimitedSupportedCombinationList()", "class_method_signature": "SupportedSurfaceCombination.getLimitedSupportedCombinationList()", "testcase": false, "constructor": false}, {"identifier": "getFullSupportedCombinationList", "parameters": "()", "modifiers": "", "return": "List<SurfaceCombination>", "signature": "List<SurfaceCombination> getFullSupportedCombinationList()", "full_signature": " List<SurfaceCombination> getFullSupportedCombinationList()", "class_method_signature": "SupportedSurfaceCombination.getFullSupportedCombinationList()", "testcase": false, "constructor": false}, {"identifier": "getRAWSupportedCombinationList", "parameters": "()", "modifiers": "", "return": "List<SurfaceCombination>", "signature": "List<SurfaceCombination> getRAWSupportedCombinationList()", "full_signature": " List<SurfaceCombination> getRAWSupportedCombinationList()", "class_method_signature": "SupportedSurfaceCombination.getRAWSupportedCombinationList()", "testcase": false, "constructor": false}, {"identifier": "getBurstSupportedCombinationList", "parameters": "()", "modifiers": "", "return": "List<SurfaceCombination>", "signature": "List<SurfaceCombination> getBurstSupportedCombinationList()", "full_signature": " List<SurfaceCombination> getBurstSupportedCombinationList()", "class_method_signature": "SupportedSurfaceCombination.getBurstSupportedCombinationList()", "testcase": false, "constructor": false}, {"identifier": "getLevel3SupportedCombinationList", "parameters": "()", "modifiers": "", "return": "List<SurfaceCombination>", "signature": "List<SurfaceCombination> getLevel3SupportedCombinationList()", "full_signature": " List<SurfaceCombination> getLevel3SupportedCombinationList()", "class_method_signature": "SupportedSurfaceCombination.getLevel3SupportedCombinationList()", "testcase": false, "constructor": false}, {"identifier": "generateSupportedCombinationList", "parameters": "(CameraManager cameraManager)", "modifiers": "private", "return": "void", "signature": "void generateSupportedCombinationList(CameraManager cameraManager)", "full_signature": "private void generateSupportedCombinationList(CameraManager cameraManager)", "class_method_signature": "SupportedSurfaceCombination.generateSupportedCombinationList(CameraManager cameraManager)", "testcase": false, "constructor": false}, {"identifier": "checkCustomization", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkCustomization()", "full_signature": "private void checkCustomization()", "class_method_signature": "SupportedSurfaceCombination.checkCustomization()", "testcase": false, "constructor": false}, {"identifier": "generateSurfaceSizeDefinition", "parameters": "(WindowManager windowManager)", "modifiers": "private", "return": "void", "signature": "void generateSurfaceSizeDefinition(WindowManager windowManager)", "full_signature": "private void generateSurfaceSizeDefinition(WindowManager windowManager)", "class_method_signature": "SupportedSurfaceCombination.generateSurfaceSizeDefinition(WindowManager windowManager)", "testcase": false, "constructor": false}, {"identifier": "getPreviewSize", "parameters": "(WindowManager windowManager)", "modifiers": "private", "return": "Size", "signature": "Size getPreviewSize(WindowManager windowManager)", "full_signature": "private Size getPreviewSize(WindowManager windowManager)", "class_method_signature": "SupportedSurfaceCombination.getPreviewSize(WindowManager windowManager)", "testcase": false, "constructor": false}, {"identifier": "getRecordSize", "parameters": "()", "modifiers": "private", "return": "Size", "signature": "Size getRecordSize()", "full_signature": "private Size getRecordSize()", "class_method_signature": "SupportedSurfaceCombination.getRecordSize()", "testcase": false, "constructor": false}], "file": "camera/camera-camera2/src/main/java/androidx/camera/camera2/impl/SupportedSurfaceCombination.java"}, "focal_method": {"identifier": "transformSurfaceConfig", "parameters": "(int imageFormat, Size size)", "modifiers": "", "return": "SurfaceConfig", "body": "SurfaceConfig transformSurfaceConfig(int imageFormat, Size size) {\n        ConfigType configType;\n        ConfigSize configSize = ConfigSize.NOT_SUPPORT;\n\n        if (getAllOutputSizesByFormat(imageFormat) == null) {\n            throw new IllegalArgumentException(\n                    \"Can not get supported output size for the format: \" + imageFormat);\n        }\n\n        /**\n         * PRIV refers to any target whose available sizes are found using\n         * StreamConfigurationMap.getOutputSizes(Class) with no direct application-visible format,\n         * YUV refers to a target Surface using the ImageFormat.YUV_420_888 format, JPEG refers to\n         * the ImageFormat.JPEG format, and RAW refers to the ImageFormat.RAW_SENSOR format.\n         */\n        if (imageFormat == ImageFormat.YUV_420_888) {\n            configType = ConfigType.YUV;\n        } else if (imageFormat == ImageFormat.JPEG) {\n            configType = ConfigType.JPEG;\n        } else if (imageFormat == ImageFormat.RAW_SENSOR) {\n            configType = ConfigType.RAW;\n        } else {\n            configType = ConfigType.PRIV;\n        }\n\n        Size maxSize = fetchMaxSize(imageFormat);\n\n        // Compare with surface size definition to determine the surface configuration size\n        if (size.getWidth() * size.getHeight()\n                <= mSurfaceSizeDefinition.getAnalysisSize().getWidth()\n                * mSurfaceSizeDefinition.getAnalysisSize().getHeight()) {\n            configSize = ConfigSize.ANALYSIS;\n        } else if (size.getWidth() * size.getHeight()\n                <= mSurfaceSizeDefinition.getPreviewSize().getWidth()\n                * mSurfaceSizeDefinition.getPreviewSize().getHeight()) {\n            configSize = ConfigSize.PREVIEW;\n        } else if (size.getWidth() * size.getHeight()\n                <= mSurfaceSizeDefinition.getRecordSize().getWidth()\n                * mSurfaceSizeDefinition.getRecordSize().getHeight()) {\n            configSize = ConfigSize.RECORD;\n        } else if (size.getWidth() * size.getHeight() <= maxSize.getWidth() * maxSize.getHeight()) {\n            configSize = ConfigSize.MAXIMUM;\n        }\n\n        return SurfaceConfig.create(configType, configSize);\n    }", "signature": "SurfaceConfig transformSurfaceConfig(int imageFormat, Size size)", "full_signature": " SurfaceConfig transformSurfaceConfig(int imageFormat, Size size)", "class_method_signature": "SupportedSurfaceCombination.transformSurfaceConfig(int imageFormat, Size size)", "testcase": false, "constructor": false, "invocations": ["getAllOutputSizesByFormat", "fetchMaxSize", "getWidth", "getHeight", "getWidth", "getAnalysisSize", "getHeight", "getAnalysisSize", "getWidth", "getHeight", "getWidth", "getPreviewSize", "getHeight", "getPreviewSize", "getWidth", "getHeight", "getWidth", "getRecordSize", "getHeight", "getRecordSize", "getWidth", "getHeight", "getWidth", "getHeight", "create"]}, "repository": {"repo_id": 3978781, "url": "https://github.com/aosp-mirror/platform_frameworks_support", "language": "Java", "is_fork": false, "fork_count": 641, "stargazer_count": 1569, "size": 354693, "license": "licensed"}}