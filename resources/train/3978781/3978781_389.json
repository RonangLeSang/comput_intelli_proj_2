{"test_class": {"identifier": "MediatorLiveDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public InstantTaskExecutorRule mInstantTaskExecutorRule = new InstantTaskExecutorRule();", "modifier": "@Rule\n    public", "type": "InstantTaskExecutorRule", "declarator": "mInstantTaskExecutorRule = new InstantTaskExecutorRule()", "var_name": "mInstantTaskExecutorRule"}, {"original_string": "private LifecycleOwner mOwner;", "modifier": "private", "type": "LifecycleOwner", "declarator": "mOwner", "var_name": "mOwner"}, {"original_string": "private LifecycleRegistry mRegistry;", "modifier": "private", "type": "LifecycleRegistry", "declarator": "mRegistry", "var_name": "mRegistry"}, {"original_string": "private MediatorLiveData<String> mMediator;", "modifier": "private", "type": "MediatorLiveData<String>", "declarator": "mMediator", "var_name": "mMediator"}, {"original_string": "private LiveData<String> mSource;", "modifier": "private", "type": "LiveData<String>", "declarator": "mSource", "var_name": "mSource"}, {"original_string": "private boolean mSourceActive;", "modifier": "private", "type": "boolean", "declarator": "mSourceActive", "var_name": "mSourceActive"}], "file": "lifecycle/lifecycle-livedata/src/test/java/androidx/lifecycle/MediatorLiveDataTest.java"}, "test_case": {"identifier": "testAddSourceToInActive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddSourceToInActive() {\n        mSource.setValue(\"flatfoot\");\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);\n        Observer observer = mock(Observer.class);\n        mMediator.addSource(mSource, observer);\n        verify(observer, never()).onChanged(any());\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n        verify(observer).onChanged(\"flatfoot\");\n    }", "signature": "void testAddSourceToInActive()", "full_signature": "@Test public void testAddSourceToInActive()", "class_method_signature": "MediatorLiveDataTest.testAddSourceToInActive()", "testcase": true, "constructor": false, "invocations": ["setValue", "handleLifecycleEvent", "mock", "addSource", "onChanged", "verify", "never", "any", "handleLifecycleEvent", "onChanged", "verify"]}, "focal_class": {"identifier": "MediatorLiveData", "superclass": "extends MutableLiveData<T>", "interfaces": "", "fields": [{"original_string": "private SafeIterableMap<LiveData<?>, Source<?>> mSources = new SafeIterableMap<>();", "modifier": "private", "type": "SafeIterableMap<LiveData<?>, Source<?>>", "declarator": "mSources = new SafeIterableMap<>()", "var_name": "mSources"}], "methods": [{"identifier": "addSource", "parameters": "(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged)", "modifiers": "@MainThread public", "return": "void", "signature": "void addSource(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged)", "full_signature": "@MainThread public void addSource(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged)", "class_method_signature": "MediatorLiveData.addSource(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged)", "testcase": false, "constructor": false}, {"identifier": "removeSource", "parameters": "(@NonNull LiveData<S> toRemote)", "modifiers": "@MainThread public", "return": "void", "signature": "void removeSource(@NonNull LiveData<S> toRemote)", "full_signature": "@MainThread public void removeSource(@NonNull LiveData<S> toRemote)", "class_method_signature": "MediatorLiveData.removeSource(@NonNull LiveData<S> toRemote)", "testcase": false, "constructor": false}, {"identifier": "onActive", "parameters": "()", "modifiers": "@CallSuper @Override protected", "return": "void", "signature": "void onActive()", "full_signature": "@CallSuper @Override protected void onActive()", "class_method_signature": "MediatorLiveData.onActive()", "testcase": false, "constructor": false}, {"identifier": "onInactive", "parameters": "()", "modifiers": "@CallSuper @Override protected", "return": "void", "signature": "void onInactive()", "full_signature": "@CallSuper @Override protected void onInactive()", "class_method_signature": "MediatorLiveData.onInactive()", "testcase": false, "constructor": false}], "file": "lifecycle/lifecycle-livedata/src/main/java/androidx/lifecycle/MediatorLiveData.java"}, "focal_method": {"identifier": "addSource", "parameters": "(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged)", "modifiers": "@MainThread public", "return": "void", "body": "@MainThread\n    public <S> void addSource(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged) {\n        Source<S> e = new Source<>(source, onChanged);\n        Source<?> existing = mSources.putIfAbsent(source, e);\n        if (existing != null && existing.mObserver != onChanged) {\n            throw new IllegalArgumentException(\n                    \"This source was already added with the different observer\");\n        }\n        if (existing != null) {\n            return;\n        }\n        if (hasActiveObservers()) {\n            e.plug();\n        }\n    }", "signature": "void addSource(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged)", "full_signature": "@MainThread public void addSource(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged)", "class_method_signature": "MediatorLiveData.addSource(@NonNull LiveData<S> source, @NonNull Observer<? super S> onChanged)", "testcase": false, "constructor": false, "invocations": ["putIfAbsent", "hasActiveObservers", "plug"]}, "repository": {"repo_id": 3978781, "url": "https://github.com/aosp-mirror/platform_frameworks_support", "language": "Java", "is_fork": false, "fork_count": 641, "stargazer_count": 1569, "size": 354693, "license": "licensed"}}