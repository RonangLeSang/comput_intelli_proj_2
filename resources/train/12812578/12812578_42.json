{"test_class": {"identifier": "TemplateUtilsTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "public static final String BEAN_REF = \"com.test.MyBean\";", "modifier": "public static final", "type": "String", "declarator": "BEAN_REF = \"com.test.MyBean\"", "var_name": "BEAN_REF"}, {"original_string": "private static Logger log = LoggerFactory.getLogger(TemplateUtilsTest.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TemplateUtilsTest.class)", "var_name": "log"}], "file": "plugin-sdk/implementation/src/test/java/org/onehippo/cms7/essentials/dashboard/utils/TemplateUtilsTest.java"}, "test_case": {"identifier": "testJavaParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJavaParsing() throws Exception {\n\n        String result = TemplateUtils.injectTemplate(\"test_java_parsing.txt\", getContext().getPlaceholderData(), getClass());\n        final Object beansPackage = getContext().getPlaceholderData().get(\"beansPackage\");\n        assertTrue(result.contains((CharSequence) beansPackage));\n        log.info(\"{}\", result);\n    }", "signature": "void testJavaParsing()", "full_signature": "@Test public void testJavaParsing()", "class_method_signature": "TemplateUtilsTest.testJavaParsing()", "testcase": true, "constructor": false, "invocations": ["injectTemplate", "getPlaceholderData", "getContext", "getClass", "get", "getPlaceholderData", "getContext", "assertTrue", "contains", "info"]}, "focal_class": {"identifier": "TemplateUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(TemplateUtils.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TemplateUtils.class)", "var_name": "log"}], "methods": [{"identifier": "TemplateUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TemplateUtils()", "full_signature": "private  TemplateUtils()", "class_method_signature": "TemplateUtils.TemplateUtils()", "testcase": false, "constructor": true}, {"identifier": "parseBeanProperties", "parameters": "(final Path beanPath)", "modifiers": "public static", "return": "List<PropertyWrapper>", "signature": "List<PropertyWrapper> parseBeanProperties(final Path beanPath)", "full_signature": "public static List<PropertyWrapper> parseBeanProperties(final Path beanPath)", "class_method_signature": "TemplateUtils.parseBeanProperties(final Path beanPath)", "testcase": false, "constructor": false}, {"identifier": "extractPropertyName", "parameters": "(final String identifier)", "modifiers": "private static", "return": "String", "signature": "String extractPropertyName(final String identifier)", "full_signature": "private static String extractPropertyName(final String identifier)", "class_method_signature": "TemplateUtils.extractPropertyName(final String identifier)", "testcase": false, "constructor": false}, {"identifier": "validGetter", "parameters": "(final String identifier)", "modifiers": "private static", "return": "boolean", "signature": "boolean validGetter(final String identifier)", "full_signature": "private static boolean validGetter(final String identifier)", "class_method_signature": "TemplateUtils.validGetter(final String identifier)", "testcase": false, "constructor": false}, {"identifier": "replaceStringPlaceholders", "parameters": "(final String content, final Map<String, String> data)", "modifiers": "public static", "return": "String", "signature": "String replaceStringPlaceholders(final String content, final Map<String, String> data)", "full_signature": "public static String replaceStringPlaceholders(final String content, final Map<String, String> data)", "class_method_signature": "TemplateUtils.replaceStringPlaceholders(final String content, final Map<String, String> data)", "testcase": false, "constructor": false}, {"identifier": "replaceTemplateData", "parameters": "(final String content, final Map<String, Object> data)", "modifiers": "public static", "return": "String", "signature": "String replaceTemplateData(final String content, final Map<String, Object> data)", "full_signature": "public static String replaceTemplateData(final String content, final Map<String, Object> data)", "class_method_signature": "TemplateUtils.replaceTemplateData(final String content, final Map<String, Object> data)", "testcase": false, "constructor": false}, {"identifier": "injectTemplate", "parameters": "(final String templateName, final Map<String, Object> data, final Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String injectTemplate(final String templateName, final Map<String, Object> data, final Class<?> clazz)", "full_signature": "public static String injectTemplate(final String templateName, final Map<String, Object> data, final Class<?> clazz)", "class_method_signature": "TemplateUtils.injectTemplate(final String templateName, final Map<String, Object> data, final Class<?> clazz)", "testcase": false, "constructor": false}], "file": "plugin-sdk/implementation/src/main/java/org/onehippo/cms7/essentials/dashboard/utils/TemplateUtils.java"}, "focal_method": {"identifier": "injectTemplate", "parameters": "(final String templateName, final Map<String, Object> data, final Class<?> clazz)", "modifiers": "public static", "return": "String", "body": "public static String injectTemplate(final String templateName, final Map<String, Object> data, final Class<?> clazz) {\n        final InputStream stream = clazz.getClassLoader().getResourceAsStream(templateName);\n        if (stream == null) {\n            return null;\n        }\n        try {\n            final String content = GlobalUtils.readStreamAsText(stream);\n            return replaceTemplateData(content, data);\n        } catch (Exception e) {\n            log.error(\"Error processing template\", e);\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n        return null;\n\n    }", "signature": "String injectTemplate(final String templateName, final Map<String, Object> data, final Class<?> clazz)", "full_signature": "public static String injectTemplate(final String templateName, final Map<String, Object> data, final Class<?> clazz)", "class_method_signature": "TemplateUtils.injectTemplate(final String templateName, final Map<String, Object> data, final Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "readStreamAsText", "replaceTemplateData", "error", "closeQuietly"]}, "repository": {"repo_id": 12812578, "url": "https://github.com/onehippo/essentials", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 9, "size": 52784, "license": "licensed"}}