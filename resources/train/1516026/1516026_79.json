{"test_class": {"identifier": "CustomTranslationResolverImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CustomTranslationResolver customTranslationResolver;", "modifier": "private", "type": "CustomTranslationResolver", "declarator": "customTranslationResolver", "var_name": "customTranslationResolver"}, {"original_string": "@Mock\n    private CustomTranslationCacheService customTranslationCacheService;", "modifier": "@Mock\n    private", "type": "CustomTranslationCacheService", "declarator": "customTranslationCacheService", "var_name": "customTranslationCacheService"}], "file": "qcadoo-custom-translation/src/test/java/com/qcadoo/customTranslation/internal/CustomTranslationResolverImplTest.java"}, "test_case": {"identifier": "shouldRetrunTranslationWhenGetCustomTranslationIfCustomTranslationIsntNullArgsArentNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRetrunTranslationWhenGetCustomTranslationIfCustomTranslationIsntNullArgsArentNull() {\n        // given\n        String key = \"key\";\n        Locale locale = new Locale(\"pl\");\n        String[] args = { \"args\" };\n\n        String translation = \"translation\";\n\n        given(customTranslationCacheService.getCustomTranslation(key, locale.getLanguage())).willReturn(translation);\n\n        MessageFormat messageFormat = new MessageFormat(translation);\n\n        Object[] argsToUse = args;\n\n        translation = messageFormat.format(argsToUse);\n\n        // when\n        String result = customTranslationResolver.getCustomTranslation(key, locale, args);\n\n        // then\n        assertEquals(translation, result);\n    }", "signature": "void shouldRetrunTranslationWhenGetCustomTranslationIfCustomTranslationIsntNullArgsArentNull()", "full_signature": "@Test public void shouldRetrunTranslationWhenGetCustomTranslationIfCustomTranslationIsntNullArgsArentNull()", "class_method_signature": "CustomTranslationResolverImplTest.shouldRetrunTranslationWhenGetCustomTranslationIfCustomTranslationIsntNullArgsArentNull()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getCustomTranslation", "getLanguage", "format", "getCustomTranslation", "assertEquals"]}, "focal_class": {"identifier": "CustomTranslationResolverImpl", "superclass": "", "interfaces": "implements CustomTranslationResolver", "fields": [{"original_string": "@Autowired\n    private CustomTranslationCacheService customTranslationCacheService;", "modifier": "@Autowired\n    private", "type": "CustomTranslationCacheService", "declarator": "customTranslationCacheService", "var_name": "customTranslationCacheService"}], "methods": [{"identifier": "isCustomTranslationActive", "parameters": "(final String key, final Locale locale)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCustomTranslationActive(final String key, final Locale locale)", "full_signature": "@Override public boolean isCustomTranslationActive(final String key, final Locale locale)", "class_method_signature": "CustomTranslationResolverImpl.isCustomTranslationActive(final String key, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getCustomTranslation", "parameters": "(final String key, final Locale locale, final String[] args)", "modifiers": "@Override public", "return": "String", "signature": "String getCustomTranslation(final String key, final Locale locale, final String[] args)", "full_signature": "@Override public String getCustomTranslation(final String key, final Locale locale, final String[] args)", "class_method_signature": "CustomTranslationResolverImpl.getCustomTranslation(final String key, final Locale locale, final String[] args)", "testcase": false, "constructor": false}], "file": "qcadoo-custom-translation/src/main/java/com/qcadoo/customTranslation/internal/CustomTranslationResolverImpl.java"}, "focal_method": {"identifier": "getCustomTranslation", "parameters": "(final String key, final Locale locale, final String[] args)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getCustomTranslation(final String key, final Locale locale, final String[] args) {\n        String translation = customTranslationCacheService.getCustomTranslation(key, locale.getLanguage());\n\n        if (translation == null) {\n            return null;\n        } else {\n            translation = translation.replace(\"'\", \"''\");\n\n            Object[] argsToUse = args;\n\n            if (!ObjectUtils.isEmpty(argsToUse)) {\n                argsToUse = ArrayUtils.EMPTY_OBJECT_ARRAY;\n            }\n\n            MessageFormat messageFormat = new MessageFormat(translation);\n\n            return messageFormat.format(argsToUse);\n        }\n    }", "signature": "String getCustomTranslation(final String key, final Locale locale, final String[] args)", "full_signature": "@Override public String getCustomTranslation(final String key, final Locale locale, final String[] args)", "class_method_signature": "CustomTranslationResolverImpl.getCustomTranslation(final String key, final Locale locale, final String[] args)", "testcase": false, "constructor": false, "invocations": ["getCustomTranslation", "getLanguage", "replace", "isEmpty", "format"]}, "repository": {"repo_id": 1516026, "url": "https://github.com/qcadoo/qcadoo", "stars": 47, "created": "3/23/2011 12:07:38 PM +00:00", "updates": "2020-01-24T13:11:14+00:00", "fork": "False", "license": "licensed"}}