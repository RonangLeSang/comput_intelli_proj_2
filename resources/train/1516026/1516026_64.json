{"test_class": {"identifier": "CustomTranslationModelHooksTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CustomTranslationModelHooks customTranslationModelHooks;", "modifier": "private", "type": "CustomTranslationModelHooks", "declarator": "customTranslationModelHooks", "var_name": "customTranslationModelHooks"}, {"original_string": "@Mock\n    private CustomTranslationCacheService customTranslationCacheService;", "modifier": "@Mock\n    private", "type": "CustomTranslationCacheService", "declarator": "customTranslationCacheService", "var_name": "customTranslationCacheService"}, {"original_string": "@Mock\n    private PluginStateResolver pluginStateResolver;", "modifier": "@Mock\n    private", "type": "PluginStateResolver", "declarator": "pluginStateResolver", "var_name": "pluginStateResolver"}, {"original_string": "@Mock\n    private DataDefinition customTranslationDD;", "modifier": "@Mock\n    private", "type": "DataDefinition", "declarator": "customTranslationDD", "var_name": "customTranslationDD"}, {"original_string": "@Mock\n    private Entity customTranslation;", "modifier": "@Mock\n    private", "type": "Entity", "declarator": "customTranslation", "var_name": "customTranslation"}, {"original_string": "@Mock\n    private SearchCriteriaBuilder searchCriteriaBuilder;", "modifier": "@Mock\n    private", "type": "SearchCriteriaBuilder", "declarator": "searchCriteriaBuilder", "var_name": "searchCriteriaBuilder"}, {"original_string": "@Mock\n    private SearchResult searchResult;", "modifier": "@Mock\n    private", "type": "SearchResult", "declarator": "searchResult", "var_name": "searchResult"}, {"original_string": "@Mock\n    private List<Entity> customTranslations;", "modifier": "@Mock\n    private", "type": "List<Entity>", "declarator": "customTranslations", "var_name": "customTranslations"}], "file": "qcadoo-custom-translation/src/test/java/com/qcadoo/customTranslation/internal/hooks/CustomTranslationModelHooksTest.java"}, "test_case": {"identifier": "shouldReturnTrueWhenCheckIfCustomTranslationIsUniqueIfEntityIsntSaved", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnTrueWhenCheckIfCustomTranslationIsUniqueIfEntityIsntSaved() {\n        // given\n        given(customTranslation.getId()).willReturn(null);\n\n        given(customTranslation.getStringField(PLUGIN_IDENTIFIER)).willReturn(null);\n        given(customTranslation.getStringField(KEY)).willReturn(null);\n        given(customTranslation.getStringField(LOCALE)).willReturn(null);\n\n        given(customTranslationDD.find()).willReturn(searchCriteriaBuilder);\n        given(searchCriteriaBuilder.add(Mockito.any(SearchCriterion.class))).willReturn(searchCriteriaBuilder);\n        given(searchCriteriaBuilder.list()).willReturn(searchResult);\n        given(searchResult.getEntities()).willReturn(customTranslations);\n        given(customTranslations.isEmpty()).willReturn(true);\n\n        // when\n        boolean result = customTranslationModelHooks.checkIfCustomTranslationIsUnique(customTranslationDD, customTranslation);\n\n        // then\n        Assert.assertTrue(result);\n\n        verify(customTranslation, never()).addError(Mockito.any(FieldDefinition.class), Mockito.anyString());\n    }", "signature": "void shouldReturnTrueWhenCheckIfCustomTranslationIsUniqueIfEntityIsntSaved()", "full_signature": "@Test public void shouldReturnTrueWhenCheckIfCustomTranslationIsUniqueIfEntityIsntSaved()", "class_method_signature": "CustomTranslationModelHooksTest.shouldReturnTrueWhenCheckIfCustomTranslationIsUniqueIfEntityIsntSaved()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getId", "willReturn", "given", "getStringField", "willReturn", "given", "getStringField", "willReturn", "given", "getStringField", "willReturn", "given", "find", "willReturn", "given", "add", "any", "willReturn", "given", "list", "willReturn", "given", "getEntities", "willReturn", "given", "isEmpty", "checkIfCustomTranslationIsUnique", "assertTrue", "addError", "verify", "never", "any", "anyString"]}, "focal_class": {"identifier": "CustomTranslationModelHooks", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CustomTranslationCacheService customTranslationCacheService;", "modifier": "@Autowired\n    private", "type": "CustomTranslationCacheService", "declarator": "customTranslationCacheService", "var_name": "customTranslationCacheService"}, {"original_string": "@Autowired\n    private PluginStateResolver pluginStateResolver;", "modifier": "@Autowired\n    private", "type": "PluginStateResolver", "declarator": "pluginStateResolver", "var_name": "pluginStateResolver"}], "methods": [{"identifier": "checkIfCustomTranslationIsUnique", "parameters": "(final DataDefinition customTranslationDD, final Entity customTranslation)", "modifiers": "public", "return": "boolean", "signature": "boolean checkIfCustomTranslationIsUnique(final DataDefinition customTranslationDD, final Entity customTranslation)", "full_signature": "public boolean checkIfCustomTranslationIsUnique(final DataDefinition customTranslationDD, final Entity customTranslation)", "class_method_signature": "CustomTranslationModelHooks.checkIfCustomTranslationIsUnique(final DataDefinition customTranslationDD, final Entity customTranslation)", "testcase": false, "constructor": false}, {"identifier": "changeActiveState", "parameters": "(final DataDefinition customTranslationDD, final Entity customTranslation)", "modifiers": "public", "return": "void", "signature": "void changeActiveState(final DataDefinition customTranslationDD, final Entity customTranslation)", "full_signature": "public void changeActiveState(final DataDefinition customTranslationDD, final Entity customTranslation)", "class_method_signature": "CustomTranslationModelHooks.changeActiveState(final DataDefinition customTranslationDD, final Entity customTranslation)", "testcase": false, "constructor": false}, {"identifier": "updateCache", "parameters": "(final DataDefinition customTranslationDD, final Entity customTranslation)", "modifiers": "public", "return": "void", "signature": "void updateCache(final DataDefinition customTranslationDD, final Entity customTranslation)", "full_signature": "public void updateCache(final DataDefinition customTranslationDD, final Entity customTranslation)", "class_method_signature": "CustomTranslationModelHooks.updateCache(final DataDefinition customTranslationDD, final Entity customTranslation)", "testcase": false, "constructor": false}], "file": "qcadoo-custom-translation/src/main/java/com/qcadoo/customTranslation/internal/hooks/CustomTranslationModelHooks.java"}, "focal_method": {"identifier": "checkIfCustomTranslationIsUnique", "parameters": "(final DataDefinition customTranslationDD, final Entity customTranslation)", "modifiers": "public", "return": "boolean", "body": "public boolean checkIfCustomTranslationIsUnique(final DataDefinition customTranslationDD, final Entity customTranslation) {\n        String pluginIdentifier = customTranslation.getStringField(PLUGIN_IDENTIFIER);\n        String locale = customTranslation.getStringField(LOCALE);\n        String key = customTranslation.getStringField(KEY);\n\n        SearchCriteriaBuilder searchCriteriaBuilder = customTranslationDD.find()\n                .add(SearchRestrictions.eq(PLUGIN_IDENTIFIER, pluginIdentifier)).add(SearchRestrictions.eq(LOCALE, locale))\n                .add(SearchRestrictions.eq(KEY, key));\n\n        if (customTranslation.getId() != null) {\n            searchCriteriaBuilder.add(SearchRestrictions.ne(\"id\", customTranslation.getId()));\n        }\n\n        SearchResult searchResult = searchCriteriaBuilder.list();\n\n        if (!searchResult.getEntities().isEmpty()) {\n            customTranslation.addError(customTranslationDD.getField(KEY),\n                    \"customTranslation.customTranslation.error.customTranslationIsntUnique\");\n\n            return false;\n        }\n\n        return true;\n    }", "signature": "boolean checkIfCustomTranslationIsUnique(final DataDefinition customTranslationDD, final Entity customTranslation)", "full_signature": "public boolean checkIfCustomTranslationIsUnique(final DataDefinition customTranslationDD, final Entity customTranslation)", "class_method_signature": "CustomTranslationModelHooks.checkIfCustomTranslationIsUnique(final DataDefinition customTranslationDD, final Entity customTranslation)", "testcase": false, "constructor": false, "invocations": ["getStringField", "getStringField", "getStringField", "add", "add", "add", "find", "eq", "eq", "eq", "getId", "add", "ne", "getId", "list", "isEmpty", "getEntities", "addError", "getField"]}, "repository": {"repo_id": 1516026, "url": "https://github.com/qcadoo/qcadoo", "stars": 47, "created": "3/23/2011 12:07:38 PM +00:00", "updates": "2020-01-24T13:11:14+00:00", "fork": "False", "license": "licensed"}}