{"test_class": {"identifier": "MenuServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PLUGIN_IDENTIFIER = \"somePlugin\";", "modifier": "private static final", "type": "String", "declarator": "PLUGIN_IDENTIFIER = \"somePlugin\"", "var_name": "PLUGIN_IDENTIFIER"}, {"original_string": "private static final String DISABLED_PLUGIN_IDENTIFIER = \"someDisabledPlugin\";", "modifier": "private static final", "type": "String", "declarator": "DISABLED_PLUGIN_IDENTIFIER = \"someDisabledPlugin\"", "var_name": "DISABLED_PLUGIN_IDENTIFIER"}, {"original_string": "private static final String ROLE_VISIBLE = \"ROLE_VISIBLE\";", "modifier": "private static final", "type": "String", "declarator": "ROLE_VISIBLE = \"ROLE_VISIBLE\"", "var_name": "ROLE_VISIBLE"}, {"original_string": "private static final String ROLE_INVISIBLE = \"ROLE_INVISIBLE\";", "modifier": "private static final", "type": "String", "declarator": "ROLE_INVISIBLE = \"ROLE_INVISIBLE\"", "var_name": "ROLE_INVISIBLE"}, {"original_string": "private InternalMenuService menuService;", "modifier": "private", "type": "InternalMenuService", "declarator": "menuService", "var_name": "menuService"}, {"original_string": "@Mock\n    private MenuCrudService menuCrudService;", "modifier": "@Mock\n    private", "type": "MenuCrudService", "declarator": "menuCrudService", "var_name": "menuCrudService"}, {"original_string": "@Mock\n    private SecurityRolesService securityRolesService;", "modifier": "@Mock\n    private", "type": "SecurityRolesService", "declarator": "securityRolesService", "var_name": "securityRolesService"}, {"original_string": "@Mock\n    private SecurityViewDefinitionRoleResolver viewDefinitionRoleResolver;", "modifier": "@Mock\n    private", "type": "SecurityViewDefinitionRoleResolver", "declarator": "viewDefinitionRoleResolver", "var_name": "viewDefinitionRoleResolver"}, {"original_string": "@Mock\n    private TranslationUtilsService translationUtilsService;", "modifier": "@Mock\n    private", "type": "TranslationUtilsService", "declarator": "translationUtilsService", "var_name": "translationUtilsService"}, {"original_string": "@Mock\n    private ViewDefinitionService viewDefinitionService;", "modifier": "@Mock\n    private", "type": "ViewDefinitionService", "declarator": "viewDefinitionService", "var_name": "viewDefinitionService"}, {"original_string": "@Captor\n    private ArgumentCaptor<Entity> entityCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Entity>", "declarator": "entityCaptor", "var_name": "entityCaptor"}], "file": "qcadoo-view/src/test/java/com/qcadoo/view/internal/menu/MenuServiceImplTest.java"}, "test_case": {"identifier": "shouldCreateCategory", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void shouldCreateCategory() {\n        // given\n        MenuCategoryDefinition menuCategoryDefinition = new MenuCategoryDefinition(PLUGIN_IDENTIFIER, \"categoryName\",\n                ROLE_VISIBLE);\n        given(menuCrudService.getCategory(menuCategoryDefinition)).willReturn(null);\n\n        given(menuCrudService.createEntity(QcadooViewConstants.MODEL_CATEGORY)).willAnswer(new Answer<Entity>() {\n\n            @Override\n            public Entity answer(final InvocationOnMock invocation) throws Throwable {\n                DataDefinition dataDefinition = mock(DataDefinition.class);\n                return new DefaultEntity(dataDefinition);\n            }\n        });\n\n        given(menuCrudService.getTotalNumberOfCategories()).willReturn(3);\n\n        // when\n        menuService.createCategory(menuCategoryDefinition);\n\n        // then\n        verify(menuCrudService).save(entityCaptor.capture());\n        Entity savedItem = entityCaptor.getValue();\n        assertEquals(PLUGIN_IDENTIFIER, savedItem.getStringField(MenuCategoryFields.PLUGIN_IDENTIFIER));\n        assertEquals(\"categoryName\", savedItem.getStringField(MenuCategoryFields.NAME));\n        assertEquals(3, savedItem.getField(MenuCategoryFields.SUCCESSION));\n        assertEquals(ROLE_VISIBLE, savedItem.getStringField(MenuCategoryFields.AUTH_ROLE));\n    }", "signature": "void shouldCreateCategory()", "full_signature": "@Test public final void shouldCreateCategory()", "class_method_signature": "MenuServiceImplTest.shouldCreateCategory()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getCategory", "willAnswer", "given", "createEntity", "mock", "willReturn", "given", "getTotalNumberOfCategories", "createCategory", "save", "verify", "capture", "getValue", "assertEquals", "getStringField", "assertEquals", "getStringField", "assertEquals", "getField", "assertEquals", "getStringField"]}, "focal_class": {"identifier": "MenuServiceImpl", "superclass": "", "interfaces": "implements InternalMenuService", "fields": [{"original_string": "private static final String ADMINISTRATION_CATEGORY = \"administration\";", "modifier": "private static final", "type": "String", "declarator": "ADMINISTRATION_CATEGORY = \"administration\"", "var_name": "ADMINISTRATION_CATEGORY"}, {"original_string": "private static final String HOME_CATEGORY = \"home\";", "modifier": "private static final", "type": "String", "declarator": "HOME_CATEGORY = \"home\"", "var_name": "HOME_CATEGORY"}, {"original_string": "@Autowired\n    private MenuCrudService menuCrudService;", "modifier": "@Autowired\n    private", "type": "MenuCrudService", "declarator": "menuCrudService", "var_name": "menuCrudService"}, {"original_string": "@Autowired\n    private SecurityRolesService securityRolesService;", "modifier": "@Autowired\n    private", "type": "SecurityRolesService", "declarator": "securityRolesService", "var_name": "securityRolesService"}, {"original_string": "@Autowired\n    private SecurityViewDefinitionRoleResolver viewDefinitionRoleResolver;", "modifier": "@Autowired\n    private", "type": "SecurityViewDefinitionRoleResolver", "declarator": "viewDefinitionRoleResolver", "var_name": "viewDefinitionRoleResolver"}, {"original_string": "@Autowired\n    private TranslationUtilsService translationUtilsService;", "modifier": "@Autowired\n    private", "type": "TranslationUtilsService", "declarator": "translationUtilsService", "var_name": "translationUtilsService"}, {"original_string": "@Autowired\n    private ViewDefinitionService viewDefinitionService;", "modifier": "@Autowired\n    private", "type": "ViewDefinitionService", "declarator": "viewDefinitionService", "var_name": "viewDefinitionService"}], "methods": [{"identifier": "getMenu", "parameters": "(final Locale locale)", "modifiers": "@Override @Transactional(readOnly = true) @Monitorable public", "return": "MenuDefinition", "signature": "MenuDefinition getMenu(final Locale locale)", "full_signature": "@Override @Transactional(readOnly = true) @Monitorable public MenuDefinition getMenu(final Locale locale)", "class_method_signature": "MenuServiceImpl.getMenu(final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "buildCategoryWithItems", "parameters": "(final Entity menuCategory, final Locale locale)", "modifiers": "private", "return": "MenuItemsGroup", "signature": "MenuItemsGroup buildCategoryWithItems(final Entity menuCategory, final Locale locale)", "full_signature": "private MenuItemsGroup buildCategoryWithItems(final Entity menuCategory, final Locale locale)", "class_method_signature": "MenuServiceImpl.buildCategoryWithItems(final Entity menuCategory, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "buildMenuCategory", "parameters": "(final Entity menuCategory, final Locale locale)", "modifiers": "private", "return": "MenuItemsGroup", "signature": "MenuItemsGroup buildMenuCategory(final Entity menuCategory, final Locale locale)", "full_signature": "private MenuItemsGroup buildMenuCategory(final Entity menuCategory, final Locale locale)", "class_method_signature": "MenuServiceImpl.buildMenuCategory(final Entity menuCategory, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizationRole", "parameters": "(final String roleIdentifierOrNull)", "modifiers": "private", "return": "SecurityRole", "signature": "SecurityRole getAuthorizationRole(final String roleIdentifierOrNull)", "full_signature": "private SecurityRole getAuthorizationRole(final String roleIdentifierOrNull)", "class_method_signature": "MenuServiceImpl.getAuthorizationRole(final String roleIdentifierOrNull)", "testcase": false, "constructor": false}, {"identifier": "getItemLabel", "parameters": "(final Entity menuItem, final Locale locale)", "modifiers": "private", "return": "String", "signature": "String getItemLabel(final Entity menuItem, final Locale locale)", "full_signature": "private String getItemLabel(final Entity menuItem, final Locale locale)", "class_method_signature": "MenuServiceImpl.getItemLabel(final Entity menuItem, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "buildMenuItem", "parameters": "(final Entity menuItem, final Locale locale, final Entity menuView)", "modifiers": "private", "return": "MenuItem", "signature": "MenuItem buildMenuItem(final Entity menuItem, final Locale locale, final Entity menuView)", "full_signature": "private MenuItem buildMenuItem(final Entity menuItem, final Locale locale, final Entity menuView)", "class_method_signature": "MenuServiceImpl.buildMenuItem(final Entity menuItem, final Locale locale, final Entity menuView)", "testcase": false, "constructor": false}, {"identifier": "canAccessView", "parameters": "(final String pluginIdentifier, final String viewName)", "modifiers": "private", "return": "boolean", "signature": "boolean canAccessView(final String pluginIdentifier, final String viewName)", "full_signature": "private boolean canAccessView(final String pluginIdentifier, final String viewName)", "class_method_signature": "MenuServiceImpl.canAccessView(final String pluginIdentifier, final String viewName)", "testcase": false, "constructor": false}, {"identifier": "currentUserHasPrivilegesOf", "parameters": "(final String roleIdentifier)", "modifiers": "private", "return": "boolean", "signature": "boolean currentUserHasPrivilegesOf(final String roleIdentifier)", "full_signature": "private boolean currentUserHasPrivilegesOf(final String roleIdentifier)", "class_method_signature": "MenuServiceImpl.currentUserHasPrivilegesOf(final String roleIdentifier)", "testcase": false, "constructor": false}, {"identifier": "addView", "parameters": "(final MenuItemDefinition itemDefinition)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void addView(final MenuItemDefinition itemDefinition)", "full_signature": "@Override @Transactional public void addView(final MenuItemDefinition itemDefinition)", "class_method_signature": "MenuServiceImpl.addView(final MenuItemDefinition itemDefinition)", "testcase": false, "constructor": false}, {"identifier": "removeView", "parameters": "(final MenuItemDefinition itemDefinition)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void removeView(final MenuItemDefinition itemDefinition)", "full_signature": "@Override @Transactional public void removeView(final MenuItemDefinition itemDefinition)", "class_method_signature": "MenuServiceImpl.removeView(final MenuItemDefinition itemDefinition)", "testcase": false, "constructor": false}, {"identifier": "createCategory", "parameters": "(final MenuCategoryDefinition menuCategoryDefinition)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void createCategory(final MenuCategoryDefinition menuCategoryDefinition)", "full_signature": "@Override @Transactional public void createCategory(final MenuCategoryDefinition menuCategoryDefinition)", "class_method_signature": "MenuServiceImpl.createCategory(final MenuCategoryDefinition menuCategoryDefinition)", "testcase": false, "constructor": false}, {"identifier": "removeCategory", "parameters": "(final MenuCategoryDefinition menuCategoryDefinition)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void removeCategory(final MenuCategoryDefinition menuCategoryDefinition)", "full_signature": "@Override @Transactional public void removeCategory(final MenuCategoryDefinition menuCategoryDefinition)", "class_method_signature": "MenuServiceImpl.removeCategory(final MenuCategoryDefinition menuCategoryDefinition)", "testcase": false, "constructor": false}, {"identifier": "createItem", "parameters": "(final MenuItemDefinition itemDefinition)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void createItem(final MenuItemDefinition itemDefinition)", "full_signature": "@Override @Transactional public void createItem(final MenuItemDefinition itemDefinition)", "class_method_signature": "MenuServiceImpl.createItem(final MenuItemDefinition itemDefinition)", "testcase": false, "constructor": false}, {"identifier": "removeItem", "parameters": "(final MenuItemDefinition itemDefinition)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void removeItem(final MenuItemDefinition itemDefinition)", "full_signature": "@Override @Transactional public void removeItem(final MenuItemDefinition itemDefinition)", "class_method_signature": "MenuServiceImpl.removeItem(final MenuItemDefinition itemDefinition)", "testcase": false, "constructor": false}], "file": "qcadoo-view/src/main/java/com/qcadoo/view/internal/menu/MenuServiceImpl.java"}, "focal_method": {"identifier": "createCategory", "parameters": "(final MenuCategoryDefinition menuCategoryDefinition)", "modifiers": "@Override @Transactional public", "return": "void", "body": "@Override\n    @Transactional\n    public void createCategory(final MenuCategoryDefinition menuCategoryDefinition) {\n        Entity menuCategory = menuCrudService.getCategory(menuCategoryDefinition);\n        if (menuCategory != null) {\n            return;\n        }\n\n        menuCategory = menuCrudService.createEntity(QcadooViewConstants.MODEL_CATEGORY);\n        menuCategory.setField(MenuCategoryFields.PLUGIN_IDENTIFIER, menuCategoryDefinition.getPluginIdentifier());\n        menuCategory.setField(MenuCategoryFields.NAME, menuCategoryDefinition.getName());\n        menuCategory.setField(\"accessible\", true);\n        menuCategory.setField(MenuCategoryFields.SUCCESSION, menuCrudService.getTotalNumberOfCategories());\n        menuCategory.setField(MenuCategoryFields.AUTH_ROLE, menuCategoryDefinition.getAuthRole());\n        menuCrudService.save(menuCategory);\n    }", "signature": "void createCategory(final MenuCategoryDefinition menuCategoryDefinition)", "full_signature": "@Override @Transactional public void createCategory(final MenuCategoryDefinition menuCategoryDefinition)", "class_method_signature": "MenuServiceImpl.createCategory(final MenuCategoryDefinition menuCategoryDefinition)", "testcase": false, "constructor": false, "invocations": ["getCategory", "createEntity", "setField", "getPluginIdentifier", "setField", "getName", "setField", "setField", "getTotalNumberOfCategories", "setField", "getAuthRole", "save"]}, "repository": {"repo_id": 1516026, "url": "https://github.com/qcadoo/qcadoo", "stars": 47, "created": "3/23/2011 12:07:38 PM +00:00", "updates": "2020-01-24T13:11:14+00:00", "fork": "False", "license": "licensed"}}