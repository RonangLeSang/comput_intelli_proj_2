{"test_class": {"identifier": "UserRoleValidationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UserRoleValidationService userRoleValidationService;", "modifier": "private", "type": "UserRoleValidationService", "declarator": "userRoleValidationService", "var_name": "userRoleValidationService"}, {"original_string": "@Mock\n    private SecurityService securityService;", "modifier": "@Mock\n    private", "type": "SecurityService", "declarator": "securityService", "var_name": "securityService"}, {"original_string": "@Mock\n    private DataDefinition userDataDefMock;", "modifier": "@Mock\n    private", "type": "DataDefinition", "declarator": "userDataDefMock", "var_name": "userDataDefMock"}, {"original_string": "@Mock\n    private FieldDefinition userRoleFieldDefMock;", "modifier": "@Mock\n    private", "type": "FieldDefinition", "declarator": "userRoleFieldDefMock", "var_name": "userRoleFieldDefMock"}, {"original_string": "@Mock\n    private Entity userEntityMock, currentUserEntityMock, existingUserEntityMock, userGroupMock, existingUserGroupMock;", "modifier": "@Mock\n    private", "type": "Entity", "declarator": "userEntityMock", "var_name": "userEntityMock"}, {"original_string": "@Mock\n    private SecurityContext securityContext;", "modifier": "@Mock\n    private", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}], "file": "qcadoo-security/src/test/java/com/qcadoo/security/internal/validators/UserRoleValidationServiceTest.java"}, "test_case": {"identifier": "shouldMarkTransitionFromUserToSuperadminAsInvalid", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void shouldMarkTransitionFromUserToSuperadminAsInvalid() {\n        // given\n        stubSecurityContextWithAuthentication();\n        stubRoleTransition(ROLE_USER, ROLE_SUPERADMIN);\n\n        // when\n        final boolean isValid = userRoleValidationService.checkUserCreatingSuperadmin(userDataDefMock, userEntityMock);\n\n        // then\n        assertFalse(isValid);\n        verify(userEntityMock).addError(Mockito.eq(userRoleFieldDefMock), Mockito.anyString());\n    }", "signature": "void shouldMarkTransitionFromUserToSuperadminAsInvalid()", "full_signature": "@Test public final void shouldMarkTransitionFromUserToSuperadminAsInvalid()", "class_method_signature": "UserRoleValidationServiceTest.shouldMarkTransitionFromUserToSuperadminAsInvalid()", "testcase": true, "constructor": false, "invocations": ["stubSecurityContextWithAuthentication", "stubRoleTransition", "checkUserCreatingSuperadmin", "assertFalse", "addError", "verify", "eq", "anyString"]}, "focal_class": {"identifier": "UserRoleValidationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SecurityService securityService;", "modifier": "@Autowired\n    private", "type": "SecurityService", "declarator": "securityService", "var_name": "securityService"}], "methods": [{"identifier": "checkUserCreatingSuperadmin", "parameters": "(final DataDefinition dataDefinition, final Entity entity)", "modifiers": "public", "return": "boolean", "signature": "boolean checkUserCreatingSuperadmin(final DataDefinition dataDefinition, final Entity entity)", "full_signature": "public boolean checkUserCreatingSuperadmin(final DataDefinition dataDefinition, final Entity entity)", "class_method_signature": "UserRoleValidationService.checkUserCreatingSuperadmin(final DataDefinition dataDefinition, final Entity entity)", "testcase": false, "constructor": false}, {"identifier": "isCurrentUserShopOrSuperAdmin", "parameters": "(final DataDefinition userDataDefinition)", "modifiers": "private", "return": "boolean", "signature": "boolean isCurrentUserShopOrSuperAdmin(final DataDefinition userDataDefinition)", "full_signature": "private boolean isCurrentUserShopOrSuperAdmin(final DataDefinition userDataDefinition)", "class_method_signature": "UserRoleValidationService.isCurrentUserShopOrSuperAdmin(final DataDefinition userDataDefinition)", "testcase": false, "constructor": false}, {"identifier": "isCalledFromShop", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isCalledFromShop()", "full_signature": "private boolean isCalledFromShop()", "class_method_signature": "UserRoleValidationService.isCalledFromShop()", "testcase": false, "constructor": false}], "file": "qcadoo-security/src/main/java/com/qcadoo/security/internal/validators/UserRoleValidationService.java"}, "focal_method": {"identifier": "checkUserCreatingSuperadmin", "parameters": "(final DataDefinition dataDefinition, final Entity entity)", "modifiers": "public", "return": "boolean", "body": "public boolean checkUserCreatingSuperadmin(final DataDefinition dataDefinition, final Entity entity) {\n\n        Boolean isRoleSuperadminInNewGroup = securityService.hasRole(entity, QcadooSecurityConstants.ROLE_SUPERADMIN);\n        Boolean isRoleSuperadminInOldGroup = entity.getId() == null ? false : securityService.hasRole(\n                dataDefinition.get(entity.getId()), QcadooSecurityConstants.ROLE_SUPERADMIN);\n\n        if (Objects.equal(isRoleSuperadminInOldGroup, isRoleSuperadminInNewGroup)\n                || isCurrentUserShopOrSuperAdmin(dataDefinition)) {\n            return true;\n        }\n        entity.addError(dataDefinition.getField(UserFields.GROUP), \"qcadooUsers.validate.global.error.forbiddenRole\");\n        return false;\n    }", "signature": "boolean checkUserCreatingSuperadmin(final DataDefinition dataDefinition, final Entity entity)", "full_signature": "public boolean checkUserCreatingSuperadmin(final DataDefinition dataDefinition, final Entity entity)", "class_method_signature": "UserRoleValidationService.checkUserCreatingSuperadmin(final DataDefinition dataDefinition, final Entity entity)", "testcase": false, "constructor": false, "invocations": ["hasRole", "getId", "hasRole", "get", "getId", "equal", "isCurrentUserShopOrSuperAdmin", "addError", "getField"]}, "repository": {"repo_id": 1516026, "url": "https://github.com/qcadoo/qcadoo", "stars": 47, "created": "3/23/2011 12:07:38 PM +00:00", "updates": "2020-01-24T13:11:14+00:00", "fork": "False", "license": "licensed"}}