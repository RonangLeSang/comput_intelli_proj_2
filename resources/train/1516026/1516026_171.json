{"test_class": {"identifier": "EntityTreeImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataAccessService dataAccessService;", "modifier": "private", "type": "DataAccessService", "declarator": "dataAccessService", "var_name": "dataAccessService"}], "file": "qcadoo-model/src/test/java/com/qcadoo/model/internal/EntityTreeImplTest.java"}, "test_case": {"identifier": "shouldReturnCriteriaBuilder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnCriteriaBuilder() throws Exception {\n        // given\n        BelongsToType fieldType = mock(BelongsToType.class);\n        InternalDataDefinition dataDefinition = mock(InternalDataDefinition.class, RETURNS_DEEP_STUBS);\n        given(fieldType.getDataDefinition()).willReturn(dataDefinition);\n        FieldDefinition fieldDefinition = mock(FieldDefinition.class);\n        given(fieldDefinition.getType()).willReturn(fieldType);\n        given(fieldDefinition.getName()).willReturn(\"field\");\n        given(dataDefinition.getField(\"tree\")).willReturn(fieldDefinition);\n        SearchCriteriaBuilder searchCriteriaBuilder = mock(SearchCriteriaBuilder.class);\n        given(\n                dataDefinition.find().createAlias(fieldDefinition.getName(), fieldDefinition.getName())\n                        .add(SearchRestrictions.eq(fieldDefinition.getName() + \".id\", 1L))).willReturn(searchCriteriaBuilder);\n\n        EntityList list = new EntityListImpl(dataDefinition, \"tree\", 1L);\n\n        // then\n        assertEquals(searchCriteriaBuilder, list.find());\n    }", "signature": "void shouldReturnCriteriaBuilder()", "full_signature": "@Test public void shouldReturnCriteriaBuilder()", "class_method_signature": "EntityTreeImplTest.shouldReturnCriteriaBuilder()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "willReturn", "given", "getDataDefinition", "mock", "willReturn", "given", "getType", "willReturn", "given", "getName", "willReturn", "given", "getField", "mock", "willReturn", "given", "add", "createAlias", "find", "getName", "getName", "eq", "getName", "assertEquals", "find"]}, "focal_class": {"identifier": "EntityTreeImpl", "superclass": "extends AbstractList<Entity>", "interfaces": "implements EntityTree", "fields": [{"original_string": "private final DataDefinition dataDefinition;", "modifier": "private final", "type": "DataDefinition", "declarator": "dataDefinition", "var_name": "dataDefinition"}, {"original_string": "private final Long belongsToId;", "modifier": "private final", "type": "Long", "declarator": "belongsToId", "var_name": "belongsToId"}, {"original_string": "private final FieldDefinition joinFieldDefinition;", "modifier": "private final", "type": "FieldDefinition", "declarator": "joinFieldDefinition", "var_name": "joinFieldDefinition"}, {"original_string": "private List<Entity> entities = null;", "modifier": "private", "type": "List<Entity>", "declarator": "entities = null", "var_name": "entities"}, {"original_string": "private EntityTreeNodeImpl root = null;", "modifier": "private", "type": "EntityTreeNodeImpl", "declarator": "root = null", "var_name": "root"}], "methods": [{"identifier": "EntityTreeImpl", "parameters": "(final DataDefinition dataDefinition, final String joinFieldName, final Long belongsToId)", "modifiers": "public", "return": "", "signature": " EntityTreeImpl(final DataDefinition dataDefinition, final String joinFieldName, final Long belongsToId)", "full_signature": "public  EntityTreeImpl(final DataDefinition dataDefinition, final String joinFieldName, final Long belongsToId)", "class_method_signature": "EntityTreeImpl.EntityTreeImpl(final DataDefinition dataDefinition, final String joinFieldName, final Long belongsToId)", "testcase": false, "constructor": true}, {"identifier": "loadEntities", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadEntities()", "full_signature": "private void loadEntities()", "class_method_signature": "EntityTreeImpl.loadEntities()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "()", "modifiers": "@Override public", "return": "SearchCriteriaBuilder", "signature": "SearchCriteriaBuilder find()", "full_signature": "@Override public SearchCriteriaBuilder find()", "class_method_signature": "EntityTreeImpl.find()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int index)", "modifiers": "@Override public", "return": "Entity", "signature": "Entity get(final int index)", "full_signature": "@Override public Entity get(final int index)", "class_method_signature": "EntityTreeImpl.get(final int index)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "EntityTreeImpl.size()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "EntityTreeNodeImpl", "signature": "EntityTreeNodeImpl getRoot()", "full_signature": "@Override public EntityTreeNodeImpl getRoot()", "class_method_signature": "EntityTreeImpl.getRoot()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "EntityTreeImpl.toString()", "testcase": false, "constructor": false}], "file": "qcadoo-model/src/main/java/com/qcadoo/model/internal/EntityTreeImpl.java"}, "focal_method": {"identifier": "find", "parameters": "()", "modifiers": "@Override public", "return": "SearchCriteriaBuilder", "body": "@Override\n    public SearchCriteriaBuilder find() {\n        return dataDefinition.find().add(\n                SearchRestrictions.belongsTo(joinFieldDefinition.getName(),\n                        ((BelongsToType) joinFieldDefinition.getType()).getDataDefinition(), belongsToId));\n    }", "signature": "SearchCriteriaBuilder find()", "full_signature": "@Override public SearchCriteriaBuilder find()", "class_method_signature": "EntityTreeImpl.find()", "testcase": false, "constructor": false, "invocations": ["add", "find", "belongsTo", "getName", "getDataDefinition", "getType"]}, "repository": {"repo_id": 1516026, "url": "https://github.com/qcadoo/qcadoo", "stars": 47, "created": "3/23/2011 12:07:38 PM +00:00", "updates": "2020-01-24T13:11:14+00:00", "fork": "False", "license": "licensed"}}