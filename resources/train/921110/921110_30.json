{"test_class": {"identifier": "SignedHeaderAuthTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String USER_ID = \"spec-user\";", "modifier": "public static final", "type": "String", "declarator": "USER_ID = \"spec-user\"", "var_name": "USER_ID"}, {"original_string": "public static final String BODY = \"Spec Body\";", "modifier": "public static final", "type": "String", "declarator": "BODY = \"Spec Body\"", "var_name": "BODY"}, {"original_string": "public static final String HASHED_BODY = \"DFteJZPVv6WKdQmMqZUQUumUyRs=\";", "modifier": "public static final", "type": "String", "declarator": "HASHED_BODY = \"DFteJZPVv6WKdQmMqZUQUumUyRs=\"", "var_name": "HASHED_BODY"}, {"original_string": "public static final String TIMESTAMP_ISO8601 = \"2009-01-01T12:00:00Z\";", "modifier": "public static final", "type": "String", "declarator": "TIMESTAMP_ISO8601 = \"2009-01-01T12:00:00Z\"", "var_name": "TIMESTAMP_ISO8601"}, {"original_string": "public static final String PATH = \"/organizations/clownco\";", "modifier": "public static final", "type": "String", "declarator": "PATH = \"/organizations/clownco\"", "var_name": "PATH"}, {"original_string": "public static final String HASHED_CANONICAL_PATH = \"YtBWDn1blGGuFIuKksdwXzHU9oE=\";", "modifier": "public static final", "type": "String", "declarator": "HASHED_CANONICAL_PATH = \"YtBWDn1blGGuFIuKksdwXzHU9oE=\"", "var_name": "HASHED_CANONICAL_PATH"}, {"original_string": "public static final String REQUESTING_ACTOR_ID = \"c0f8a68c52bffa1020222a56b23cccfa\";", "modifier": "public static final", "type": "String", "declarator": "REQUESTING_ACTOR_ID = \"c0f8a68c52bffa1020222a56b23cccfa\"", "var_name": "REQUESTING_ACTOR_ID"}, {"original_string": "public static final String X_OPS_CONTENT_HASH = \"DFteJZPVv6WKdQmMqZUQUumUyRs=\";", "modifier": "public static final", "type": "String", "declarator": "X_OPS_CONTENT_HASH = \"DFteJZPVv6WKdQmMqZUQUumUyRs=\"", "var_name": "X_OPS_CONTENT_HASH"}, {"original_string": "public static final String[] X_OPS_AUTHORIZATION_LINES = new String[] {\n         \"jVHrNniWzpbez/eGWjFnO6lINRIuKOg40ZTIQudcFe47Z9e/HvrszfVXlKG4\",\n         \"NMzYZgyooSvU85qkIUmKuCqgG2AIlvYa2Q/2ctrMhoaHhLOCWWoqYNMaEqPc\",\n         \"3tKHE+CfvP+WuPdWk4jv4wpIkAz6ZLxToxcGhXmZbXpk56YTmqgBW2cbbw4O\",\n         \"IWPZDHSiPcw//AYNgW1CCDptt+UFuaFYbtqZegcBd2n/jzcWODA7zL4KWEUy\",\n         \"9q4rlh/+1tBReg60QdsmDRsw/cdO1GZrKtuCwbuD4+nbRdVBKv72rqHX9cu0\", \"utju9jzczCyB+sSAQWrxSsXB/b8vV2qs0l4VD2ML+w==\" };", "modifier": "public static final", "type": "String[]", "declarator": "X_OPS_AUTHORIZATION_LINES = new String[] {\n         \"jVHrNniWzpbez/eGWjFnO6lINRIuKOg40ZTIQudcFe47Z9e/HvrszfVXlKG4\",\n         \"NMzYZgyooSvU85qkIUmKuCqgG2AIlvYa2Q/2ctrMhoaHhLOCWWoqYNMaEqPc\",\n         \"3tKHE+CfvP+WuPdWk4jv4wpIkAz6ZLxToxcGhXmZbXpk56YTmqgBW2cbbw4O\",\n         \"IWPZDHSiPcw//AYNgW1CCDptt+UFuaFYbtqZegcBd2n/jzcWODA7zL4KWEUy\",\n         \"9q4rlh/+1tBReg60QdsmDRsw/cdO1GZrKtuCwbuD4+nbRdVBKv72rqHX9cu0\", \"utju9jzczCyB+sSAQWrxSsXB/b8vV2qs0l4VD2ML+w==\" }", "var_name": "X_OPS_AUTHORIZATION_LINES"}, {"original_string": "public static final Multimap<String, String> EXPECTED_SIGN_RESULT = ImmutableMultimap.<String, String> builder()\n         .put(\"X-Ops-Content-Hash\", X_OPS_CONTENT_HASH).put(\"X-Ops-Userid\", USER_ID).put(\"X-Ops-Sign\", \"version=1.0\")\n         .put(\"X-Ops-Authorization-1\", X_OPS_AUTHORIZATION_LINES[0])\n         .put(\"X-Ops-Authorization-2\", X_OPS_AUTHORIZATION_LINES[1])\n         .put(\"X-Ops-Authorization-3\", X_OPS_AUTHORIZATION_LINES[2])\n         .put(\"X-Ops-Authorization-4\", X_OPS_AUTHORIZATION_LINES[3])\n         .put(\"X-Ops-Authorization-5\", X_OPS_AUTHORIZATION_LINES[4])\n         .put(\"X-Ops-Authorization-6\", X_OPS_AUTHORIZATION_LINES[5]).put(\"X-Ops-Timestamp\", TIMESTAMP_ISO8601).build();", "modifier": "public static final", "type": "Multimap<String, String>", "declarator": "EXPECTED_SIGN_RESULT = ImmutableMultimap.<String, String> builder()\n         .put(\"X-Ops-Content-Hash\", X_OPS_CONTENT_HASH).put(\"X-Ops-Userid\", USER_ID).put(\"X-Ops-Sign\", \"version=1.0\")\n         .put(\"X-Ops-Authorization-1\", X_OPS_AUTHORIZATION_LINES[0])\n         .put(\"X-Ops-Authorization-2\", X_OPS_AUTHORIZATION_LINES[1])\n         .put(\"X-Ops-Authorization-3\", X_OPS_AUTHORIZATION_LINES[2])\n         .put(\"X-Ops-Authorization-4\", X_OPS_AUTHORIZATION_LINES[3])\n         .put(\"X-Ops-Authorization-5\", X_OPS_AUTHORIZATION_LINES[4])\n         .put(\"X-Ops-Authorization-6\", X_OPS_AUTHORIZATION_LINES[5]).put(\"X-Ops-Timestamp\", TIMESTAMP_ISO8601).build()", "var_name": "EXPECTED_SIGN_RESULT"}, {"original_string": "public static final String X_OPS_CONTENT_HASH_EMPTY = \"2jmj7l5rSw0yVb/vlWAYkK/YBwk=\";", "modifier": "public static final", "type": "String", "declarator": "X_OPS_CONTENT_HASH_EMPTY = \"2jmj7l5rSw0yVb/vlWAYkK/YBwk=\"", "var_name": "X_OPS_CONTENT_HASH_EMPTY"}, {"original_string": "public static final Multimap<String, String> EXPECTED_SIGN_RESULT_EMPTY = ImmutableMultimap\n         .<String, String> builder().put(\"X-Ops-Content-Hash\", X_OPS_CONTENT_HASH_EMPTY).put(\"X-Ops-Userid\", USER_ID)\n         .put(\"X-Ops-Sign\", \"version=1.0\")\n         .put(\"X-Ops-Authorization-1\", \"N6U75kopDK64cEFqrB6vw+PnubnXr0w5LQeXnIGNGLRP2LvifwIeisk7QxEx\")\n         .put(\"X-Ops-Authorization-2\", \"mtpQOWAw8HvnWErjzuk9AvUsqVmWpv14ficvkaD79qsPMvbje+aLcIrCGT1P\")\n         .put(\"X-Ops-Authorization-3\", \"3d2uvf4w7iqwzrIscPnkxLR6o6pymR90gvJXDPzV7Le0jbfD8kmZ8AAK0sGG\")\n         .put(\"X-Ops-Authorization-4\", \"09F1ftW80bLatJTA66Cw2wBz261r6x/abZhIKFJFDWLzyQGJ8ZNOkUrDDtgI\")\n         .put(\"X-Ops-Authorization-5\", \"svLVXpOJKZZfKunsElpWjjsyNt3k8vpI1Y4ANO8Eg2bmeCPeEK+YriGm5fbC\")\n         .put(\"X-Ops-Authorization-6\", \"DzWNPylHJqMeGKVYwGQKpg62QDfe5yXh3wZLiQcXow==\")\n         .put(\"X-Ops-Timestamp\", TIMESTAMP_ISO8601).build();", "modifier": "public static final", "type": "Multimap<String, String>", "declarator": "EXPECTED_SIGN_RESULT_EMPTY = ImmutableMultimap\n         .<String, String> builder().put(\"X-Ops-Content-Hash\", X_OPS_CONTENT_HASH_EMPTY).put(\"X-Ops-Userid\", USER_ID)\n         .put(\"X-Ops-Sign\", \"version=1.0\")\n         .put(\"X-Ops-Authorization-1\", \"N6U75kopDK64cEFqrB6vw+PnubnXr0w5LQeXnIGNGLRP2LvifwIeisk7QxEx\")\n         .put(\"X-Ops-Authorization-2\", \"mtpQOWAw8HvnWErjzuk9AvUsqVmWpv14ficvkaD79qsPMvbje+aLcIrCGT1P\")\n         .put(\"X-Ops-Authorization-3\", \"3d2uvf4w7iqwzrIscPnkxLR6o6pymR90gvJXDPzV7Le0jbfD8kmZ8AAK0sGG\")\n         .put(\"X-Ops-Authorization-4\", \"09F1ftW80bLatJTA66Cw2wBz261r6x/abZhIKFJFDWLzyQGJ8ZNOkUrDDtgI\")\n         .put(\"X-Ops-Authorization-5\", \"svLVXpOJKZZfKunsElpWjjsyNt3k8vpI1Y4ANO8Eg2bmeCPeEK+YriGm5fbC\")\n         .put(\"X-Ops-Authorization-6\", \"DzWNPylHJqMeGKVYwGQKpg62QDfe5yXh3wZLiQcXow==\")\n         .put(\"X-Ops-Timestamp\", TIMESTAMP_ISO8601).build()", "var_name": "EXPECTED_SIGN_RESULT_EMPTY"}, {"original_string": "public static String PUBLIC_KEY;", "modifier": "public static", "type": "String", "declarator": "PUBLIC_KEY", "var_name": "PUBLIC_KEY"}, {"original_string": "public static String PRIVATE_KEY;", "modifier": "public static", "type": "String", "declarator": "PRIVATE_KEY", "var_name": "PRIVATE_KEY"}, {"original_string": "private SignedHeaderAuth signing_obj;", "modifier": "private", "type": "SignedHeaderAuth", "declarator": "signing_obj", "var_name": "signing_obj"}], "file": "core/src/test/java/org/jclouds/chef/filters/SignedHeaderAuthTest.java"}, "test_case": {"identifier": "shouldGenerateTheCorrectStringToSignAndSignatureWithNoBody", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n   void shouldGenerateTheCorrectStringToSignAndSignatureWithNoBody() {\n\n      HttpRequest request = HttpRequest.builder().method(HttpMethod.DELETE).endpoint(\"http://localhost/\" + PATH)\n            .build();\n\n      request = signing_obj.filter(request);\n      Multimap<String, String> headersWithoutContentLength = LinkedHashMultimap.create(request.getHeaders());\n      assertEqualsNoOrder(headersWithoutContentLength.entries().toArray(), EXPECTED_SIGN_RESULT_EMPTY.entries()\n            .toArray());\n   }", "signature": "void shouldGenerateTheCorrectStringToSignAndSignatureWithNoBody()", "full_signature": "@Test void shouldGenerateTheCorrectStringToSignAndSignatureWithNoBody()", "class_method_signature": "SignedHeaderAuthTest.shouldGenerateTheCorrectStringToSignAndSignatureWithNoBody()", "testcase": true, "constructor": false, "invocations": ["build", "endpoint", "method", "builder", "filter", "create", "getHeaders", "assertEqualsNoOrder", "toArray", "entries", "toArray", "entries"]}, "focal_class": {"identifier": "SignedHeaderAuth", "superclass": "", "interfaces": "implements HttpRequestFilter", "fields": [{"original_string": "public static final String SIGNING_DESCRIPTION = \"version=1.0\";", "modifier": "public static final", "type": "String", "declarator": "SIGNING_DESCRIPTION = \"version=1.0\"", "var_name": "SIGNING_DESCRIPTION"}, {"original_string": "private final SignatureWire signatureWire;", "modifier": "private final", "type": "SignatureWire", "declarator": "signatureWire", "var_name": "signatureWire"}, {"original_string": "private final Supplier<Credentials> creds;", "modifier": "private final", "type": "Supplier<Credentials>", "declarator": "creds", "var_name": "creds"}, {"original_string": "private final Supplier<PrivateKey> supplyKey;", "modifier": "private final", "type": "Supplier<PrivateKey>", "declarator": "supplyKey", "var_name": "supplyKey"}, {"original_string": "private final Provider<String> timeStampProvider;", "modifier": "private final", "type": "Provider<String>", "declarator": "timeStampProvider", "var_name": "timeStampProvider"}, {"original_string": "private final String emptyStringHash;", "modifier": "private final", "type": "String", "declarator": "emptyStringHash", "var_name": "emptyStringHash"}, {"original_string": "private final HttpUtils utils;", "modifier": "private final", "type": "HttpUtils", "declarator": "utils", "var_name": "utils"}, {"original_string": "@Resource\n   @Named(Constants.LOGGER_SIGNATURE)\n   Logger signatureLog = Logger.NULL;", "modifier": "@Resource\n   @Named(Constants.LOGGER_SIGNATURE)", "type": "Logger", "declarator": "signatureLog = Logger.NULL", "var_name": "signatureLog"}], "methods": [{"identifier": "SignedHeaderAuth", "parameters": "(SignatureWire signatureWire, @org.jclouds.location.Provider Supplier<Credentials> creds,\n         Supplier<PrivateKey> supplyKey, @TimeStamp Provider<String> timeStampProvider, HttpUtils utils)", "modifiers": "@Inject public", "return": "", "signature": " SignedHeaderAuth(SignatureWire signatureWire, @org.jclouds.location.Provider Supplier<Credentials> creds,\n         Supplier<PrivateKey> supplyKey, @TimeStamp Provider<String> timeStampProvider, HttpUtils utils)", "full_signature": "@Inject public  SignedHeaderAuth(SignatureWire signatureWire, @org.jclouds.location.Provider Supplier<Credentials> creds,\n         Supplier<PrivateKey> supplyKey, @TimeStamp Provider<String> timeStampProvider, HttpUtils utils)", "class_method_signature": "SignedHeaderAuth.SignedHeaderAuth(SignatureWire signatureWire, @org.jclouds.location.Provider Supplier<Credentials> creds,\n         Supplier<PrivateKey> supplyKey, @TimeStamp Provider<String> timeStampProvider, HttpUtils utils)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(HttpRequest input)", "modifiers": "public", "return": "HttpRequest", "signature": "HttpRequest filter(HttpRequest input)", "full_signature": "public HttpRequest filter(HttpRequest input)", "class_method_signature": "SignedHeaderAuth.filter(HttpRequest input)", "testcase": false, "constructor": false}, {"identifier": "calculateAndReplaceAuthorizationHeaders", "parameters": "(HttpRequest request, String toSign)", "modifiers": "@VisibleForTesting", "return": "HttpRequest", "signature": "HttpRequest calculateAndReplaceAuthorizationHeaders(HttpRequest request, String toSign)", "full_signature": "@VisibleForTesting HttpRequest calculateAndReplaceAuthorizationHeaders(HttpRequest request, String toSign)", "class_method_signature": "SignedHeaderAuth.calculateAndReplaceAuthorizationHeaders(HttpRequest request, String toSign)", "testcase": false, "constructor": false}, {"identifier": "createStringToSign", "parameters": "(String request, String hashedPath, String contentHash, String timestamp)", "modifiers": "public", "return": "String", "signature": "String createStringToSign(String request, String hashedPath, String contentHash, String timestamp)", "full_signature": "public String createStringToSign(String request, String hashedPath, String contentHash, String timestamp)", "class_method_signature": "SignedHeaderAuth.createStringToSign(String request, String hashedPath, String contentHash, String timestamp)", "testcase": false, "constructor": false}, {"identifier": "hashPath", "parameters": "(String path)", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String hashPath(String path)", "full_signature": "@VisibleForTesting String hashPath(String path)", "class_method_signature": "SignedHeaderAuth.hashPath(String path)", "testcase": false, "constructor": false}, {"identifier": "canonicalPath", "parameters": "(String path)", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String canonicalPath(String path)", "full_signature": "@VisibleForTesting String canonicalPath(String path)", "class_method_signature": "SignedHeaderAuth.canonicalPath(String path)", "testcase": false, "constructor": false}, {"identifier": "hashBody", "parameters": "(Payload payload)", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String hashBody(Payload payload)", "full_signature": "@VisibleForTesting String hashBody(Payload payload)", "class_method_signature": "SignedHeaderAuth.hashBody(Payload payload)", "testcase": false, "constructor": false}, {"identifier": "useTheFilePartIfForm", "parameters": "(Payload payload)", "modifiers": "private", "return": "Payload", "signature": "Payload useTheFilePartIfForm(Payload payload)", "full_signature": "private Payload useTheFilePartIfForm(Payload payload)", "class_method_signature": "SignedHeaderAuth.useTheFilePartIfForm(Payload payload)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(String toSign)", "modifiers": "public", "return": "String", "signature": "String sign(String toSign)", "full_signature": "public String sign(String toSign)", "class_method_signature": "SignedHeaderAuth.sign(String toSign)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jclouds/chef/filters/SignedHeaderAuth.java"}, "focal_method": {"identifier": "filter", "parameters": "(HttpRequest input)", "modifiers": "public", "return": "HttpRequest", "body": "public HttpRequest filter(HttpRequest input) throws HttpException {\n      HttpRequest request = input.toBuilder().endpoint(input.getEndpoint().toString().replace(\"%3F\", \"?\")).build();\n      String contentHash = hashBody(request.getPayload());\n      Multimap<String, String> headers = ArrayListMultimap.create();\n      headers.put(\"X-Ops-Content-Hash\", contentHash);\n      String timestamp = timeStampProvider.get();\n      String toSign = createStringToSign(request.getMethod(), hashPath(request.getEndpoint().getPath()), contentHash,\n            timestamp);\n      headers.put(\"X-Ops-Userid\", creds.get().identity);\n      headers.put(\"X-Ops-Sign\", SIGNING_DESCRIPTION);\n      request = calculateAndReplaceAuthorizationHeaders(request, toSign);\n      headers.put(\"X-Ops-Timestamp\", timestamp);\n      utils.logRequest(signatureLog, request, \"<<\");\n\n      return request.toBuilder().replaceHeaders(headers).build();\n   }", "signature": "HttpRequest filter(HttpRequest input)", "full_signature": "public HttpRequest filter(HttpRequest input)", "class_method_signature": "SignedHeaderAuth.filter(HttpRequest input)", "testcase": false, "constructor": false, "invocations": ["build", "endpoint", "toBuilder", "replace", "toString", "getEndpoint", "hashBody", "getPayload", "create", "put", "get", "createStringToSign", "getMethod", "hashPath", "getPath", "getEndpoint", "put", "get", "put", "calculateAndReplaceAuthorizationHeaders", "put", "logRequest", "build", "replaceHeaders", "toBuilder"]}, "repository": {"repo_id": 921110, "url": "https://github.com/jclouds/legacy-jclouds-chef", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 30, "size": 975, "license": "licensed"}}