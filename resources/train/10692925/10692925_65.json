{"test_class": {"identifier": "StandardThreadExecutorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tooyoung-lang/src/test/java/cc/tooyoung/common/concurrent/StandardThreadExecutorTest.java"}, "test_case": {"identifier": "testStandardThreadExecutor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStandardThreadExecutor(){\n\t\tint minThread = 2;\n\t\tint maxThead = 10;\n\t\tStandardThreadExecutor executor = new StandardThreadExecutor(minThread,maxThead);\n\t\tfor(int i=0;i<minThread;i++){\n\t\t\texecutor.submit(new SleepTask(10000));\n\t\t}\n\t\tAssert.assertEquals(minThread,executor.getPoolSize());\n\t\tfor(int i=minThread;i<maxThead;i++){\n\t\t\texecutor.submit(new SleepTask(10000));\n\t\t}\n\t\tAssert.assertEquals(maxThead,executor.getPoolSize());\n\t\tfor(int i=0;i<maxThead;i++){\n\t\t\texecutor.submit(new SleepTask(10000));\n\t\t}\n\t\tAssert.assertEquals(maxThead,executor.getQueueSize());\n\t\ttry{\n\t\t\texecutor.submit(new SleepTask(10000));\n\t\t\tAssert.fail();\n\t\t}catch(RejectedExecutionException e){\n\t\t\tAssert.assertTrue(true);\n\t\t}\n\t}", "signature": "void testStandardThreadExecutor()", "full_signature": "@Test public void testStandardThreadExecutor()", "class_method_signature": "StandardThreadExecutorTest.testStandardThreadExecutor()", "testcase": true, "constructor": false, "invocations": ["submit", "assertEquals", "getPoolSize", "submit", "assertEquals", "getPoolSize", "submit", "assertEquals", "getQueueSize", "submit", "fail", "assertTrue"]}, "focal_class": {"identifier": "StandardThreadExecutor", "superclass": "extends java.util.concurrent.AbstractExecutorService", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_MIN_SPARE_THREADS = 2;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MIN_SPARE_THREADS = 2", "var_name": "DEFAULT_MIN_SPARE_THREADS"}, {"original_string": "public static final int DEFAULT_MAX_THREADS = 200;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MAX_THREADS = 200", "var_name": "DEFAULT_MAX_THREADS"}, {"original_string": "protected int threadPriority = Thread.NORM_PRIORITY;", "modifier": "protected", "type": "int", "declarator": "threadPriority = Thread.NORM_PRIORITY", "var_name": "threadPriority"}, {"original_string": "protected boolean daemon = true;", "modifier": "protected", "type": "boolean", "declarator": "daemon = true", "var_name": "daemon"}, {"original_string": "protected String namePrefix = \"weibo-exec-\";", "modifier": "protected", "type": "String", "declarator": "namePrefix = \"weibo-exec-\"", "var_name": "namePrefix"}, {"original_string": "protected int maxThreads = 200;", "modifier": "protected", "type": "int", "declarator": "maxThreads = 200", "var_name": "maxThreads"}, {"original_string": "protected int minSpareThreads = 2;", "modifier": "protected", "type": "int", "declarator": "minSpareThreads = 2", "var_name": "minSpareThreads"}, {"original_string": "protected int maxIdleTime = 60000;", "modifier": "protected", "type": "int", "declarator": "maxIdleTime = 60000", "var_name": "maxIdleTime"}, {"original_string": "protected ThreadPoolExecutor executor = null;", "modifier": "protected", "type": "ThreadPoolExecutor", "declarator": "executor = null", "var_name": "executor"}, {"original_string": "protected String name;", "modifier": "protected", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "protected AtomicInteger submittedTasksCount;", "modifier": "protected", "type": "AtomicInteger", "declarator": "submittedTasksCount", "var_name": "submittedTasksCount"}, {"original_string": "protected int taskQueueCapacity;", "modifier": "protected", "type": "int", "declarator": "taskQueueCapacity", "var_name": "taskQueueCapacity"}], "methods": [{"identifier": "StandardThreadExecutor", "parameters": "()", "modifiers": "public", "return": "", "signature": " StandardThreadExecutor()", "full_signature": "public  StandardThreadExecutor()", "class_method_signature": "StandardThreadExecutor.StandardThreadExecutor()", "testcase": false, "constructor": true}, {"identifier": "StandardThreadExecutor", "parameters": "(int minSpareThreads,int maxThreads)", "modifiers": "public", "return": "", "signature": " StandardThreadExecutor(int minSpareThreads,int maxThreads)", "full_signature": "public  StandardThreadExecutor(int minSpareThreads,int maxThreads)", "class_method_signature": "StandardThreadExecutor.StandardThreadExecutor(int minSpareThreads,int maxThreads)", "testcase": false, "constructor": true}, {"identifier": "StandardThreadExecutor", "parameters": "(int minSpareThreads,int maxThreads,int taskQueueCapacity)", "modifiers": "public", "return": "", "signature": " StandardThreadExecutor(int minSpareThreads,int maxThreads,int taskQueueCapacity)", "full_signature": "public  StandardThreadExecutor(int minSpareThreads,int maxThreads,int taskQueueCapacity)", "class_method_signature": "StandardThreadExecutor.StandardThreadExecutor(int minSpareThreads,int maxThreads,int taskQueueCapacity)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Runnable command)", "modifiers": "public", "return": "void", "signature": "void execute(Runnable command)", "full_signature": "public void execute(Runnable command)", "class_method_signature": "StandardThreadExecutor.execute(Runnable command)", "testcase": false, "constructor": false}, {"identifier": "getThreadPriority", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getThreadPriority()", "full_signature": "public int getThreadPriority()", "class_method_signature": "StandardThreadExecutor.getThreadPriority()", "testcase": false, "constructor": false}, {"identifier": "isDaemon", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDaemon()", "full_signature": "public boolean isDaemon()", "class_method_signature": "StandardThreadExecutor.isDaemon()", "testcase": false, "constructor": false}, {"identifier": "getNamePrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamePrefix()", "full_signature": "public String getNamePrefix()", "class_method_signature": "StandardThreadExecutor.getNamePrefix()", "testcase": false, "constructor": false}, {"identifier": "getMaxIdleTime", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxIdleTime()", "full_signature": "public int getMaxIdleTime()", "class_method_signature": "StandardThreadExecutor.getMaxIdleTime()", "testcase": false, "constructor": false}, {"identifier": "getMaxThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxThreads()", "full_signature": "public int getMaxThreads()", "class_method_signature": "StandardThreadExecutor.getMaxThreads()", "testcase": false, "constructor": false}, {"identifier": "getMinSpareThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinSpareThreads()", "full_signature": "public int getMinSpareThreads()", "class_method_signature": "StandardThreadExecutor.getMinSpareThreads()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "StandardThreadExecutor.getName()", "testcase": false, "constructor": false}, {"identifier": "setThreadPriority", "parameters": "(int threadPriority)", "modifiers": "public", "return": "void", "signature": "void setThreadPriority(int threadPriority)", "full_signature": "public void setThreadPriority(int threadPriority)", "class_method_signature": "StandardThreadExecutor.setThreadPriority(int threadPriority)", "testcase": false, "constructor": false}, {"identifier": "setDaemon", "parameters": "(boolean daemon)", "modifiers": "public", "return": "void", "signature": "void setDaemon(boolean daemon)", "full_signature": "public void setDaemon(boolean daemon)", "class_method_signature": "StandardThreadExecutor.setDaemon(boolean daemon)", "testcase": false, "constructor": false}, {"identifier": "setNamePrefix", "parameters": "(String namePrefix)", "modifiers": "public", "return": "void", "signature": "void setNamePrefix(String namePrefix)", "full_signature": "public void setNamePrefix(String namePrefix)", "class_method_signature": "StandardThreadExecutor.setNamePrefix(String namePrefix)", "testcase": false, "constructor": false}, {"identifier": "setMaxIdleTime", "parameters": "(int maxIdleTime)", "modifiers": "public", "return": "void", "signature": "void setMaxIdleTime(int maxIdleTime)", "full_signature": "public void setMaxIdleTime(int maxIdleTime)", "class_method_signature": "StandardThreadExecutor.setMaxIdleTime(int maxIdleTime)", "testcase": false, "constructor": false}, {"identifier": "setMaxThreads", "parameters": "(int maxThreads)", "modifiers": "public", "return": "void", "signature": "void setMaxThreads(int maxThreads)", "full_signature": "public void setMaxThreads(int maxThreads)", "class_method_signature": "StandardThreadExecutor.setMaxThreads(int maxThreads)", "testcase": false, "constructor": false}, {"identifier": "setMinSpareThreads", "parameters": "(int minSpareThreads)", "modifiers": "public", "return": "void", "signature": "void setMinSpareThreads(int minSpareThreads)", "full_signature": "public void setMinSpareThreads(int minSpareThreads)", "class_method_signature": "StandardThreadExecutor.setMinSpareThreads(int minSpareThreads)", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "StandardThreadExecutor.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getActiveCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getActiveCount()", "full_signature": "public int getActiveCount()", "class_method_signature": "StandardThreadExecutor.getActiveCount()", "testcase": false, "constructor": false}, {"identifier": "getSubmittedTasksCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSubmittedTasksCount()", "full_signature": "public int getSubmittedTasksCount()", "class_method_signature": "StandardThreadExecutor.getSubmittedTasksCount()", "testcase": false, "constructor": false}, {"identifier": "getCompletedTaskCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCompletedTaskCount()", "full_signature": "public long getCompletedTaskCount()", "class_method_signature": "StandardThreadExecutor.getCompletedTaskCount()", "testcase": false, "constructor": false}, {"identifier": "getCorePoolSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCorePoolSize()", "full_signature": "public int getCorePoolSize()", "class_method_signature": "StandardThreadExecutor.getCorePoolSize()", "testcase": false, "constructor": false}, {"identifier": "getLargestPoolSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLargestPoolSize()", "full_signature": "public int getLargestPoolSize()", "class_method_signature": "StandardThreadExecutor.getLargestPoolSize()", "testcase": false, "constructor": false}, {"identifier": "getPoolSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPoolSize()", "full_signature": "public int getPoolSize()", "class_method_signature": "StandardThreadExecutor.getPoolSize()", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueueSize()", "full_signature": "public int getQueueSize()", "class_method_signature": "StandardThreadExecutor.getQueueSize()", "testcase": false, "constructor": false}, {"identifier": "getQueueCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueueCapacity()", "full_signature": "public int getQueueCapacity()", "class_method_signature": "StandardThreadExecutor.getQueueCapacity()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "StandardThreadExecutor.shutdown()", "testcase": false, "constructor": false}, {"identifier": "shutdownNow", "parameters": "()", "modifiers": "@Override public", "return": "List<Runnable>", "signature": "List<Runnable> shutdownNow()", "full_signature": "@Override public List<Runnable> shutdownNow()", "class_method_signature": "StandardThreadExecutor.shutdownNow()", "testcase": false, "constructor": false}, {"identifier": "isShutdown", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isShutdown()", "full_signature": "@Override public boolean isShutdown()", "class_method_signature": "StandardThreadExecutor.isShutdown()", "testcase": false, "constructor": false}, {"identifier": "isTerminated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTerminated()", "full_signature": "@Override public boolean isTerminated()", "class_method_signature": "StandardThreadExecutor.isTerminated()", "testcase": false, "constructor": false}, {"identifier": "awaitTermination", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean awaitTermination(long timeout, TimeUnit unit)", "full_signature": "@Override public boolean awaitTermination(long timeout, TimeUnit unit)", "class_method_signature": "StandardThreadExecutor.awaitTermination(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}], "file": "tooyoung-lang/src/main/java/cc/tooyoung/common/concurrent/StandardThreadExecutor.java"}, "focal_method": {"identifier": "StandardThreadExecutor", "parameters": "()", "modifiers": "public", "return": "", "body": "public StandardThreadExecutor(){\n    \tthis(DEFAULT_MIN_SPARE_THREADS,DEFAULT_MAX_THREADS);\n    }", "signature": " StandardThreadExecutor()", "full_signature": "public  StandardThreadExecutor()", "class_method_signature": "StandardThreadExecutor.StandardThreadExecutor()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 10692925, "url": "https://github.com/yangwm/tooyoung", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 8, "size": 659, "license": "licensed"}}