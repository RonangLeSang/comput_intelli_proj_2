{"test_class": {"identifier": "ConfigReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final URI FB_LONGITUDE = new URIImpl(\"http://rdf.freebase.com/ns/location.geocode.longitude\");", "modifier": "private static final", "type": "URI", "declarator": "FB_LONGITUDE = new URIImpl(\"http://rdf.freebase.com/ns/location.geocode.longitude\")", "var_name": "FB_LONGITUDE"}, {"original_string": "private static final URI FB_LATITUDE = new URIImpl(\"http://rdf.freebase.com/ns/location.geocode.latitude\");", "modifier": "private static final", "type": "URI", "declarator": "FB_LATITUDE = new URIImpl(\"http://rdf.freebase.com/ns/location.geocode.latitude\")", "var_name": "FB_LATITUDE"}], "file": "sources/odcsft-application/src/test/java/cz/cuni/mff/odcleanstore/fusiontool/config/ConfigReaderTest.java"}, "test_case": {"identifier": "parsesFullConfigFile2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parsesFullConfigFile2() throws Exception {\n        // Arrange\n        File configFile = getResourceFile(\"/config/sample-config-full2.xml\");\n\n        // Act\n        Config config = ConfigReader.parseConfigXml(configFile);\n\n        // Assert\n        assertThat(config.getDataSources().size(), equalTo(2));\n        assertThat(config.getDataSources().get(0).getName(), nullValue());\n        assertThat(config.getDataSources().get(0).getType(), equalTo(EnumDataSourceType.SPARQL));\n        assertThat(config.getDataSources().get(0).getParams().get(ConfigParameters.DATA_SOURCE_SPARQL_RESULT_MAX_ROWS), equalTo(\"100000\"));\n\n        assertThat(config.getDataSources().get(1).getName(), nullValue());\n        assertThat(config.getDataSources().get(1).getType(), equalTo(EnumDataSourceType.SPARQL));\n        assertThat(config.getDataSources().get(1).getParams().get(ConfigParameters.DATA_SOURCE_SPARQL_RESULT_MAX_ROWS), equalTo(\"100000\"));\n\n        assertThat(config.getSameAsSources().size(), equalTo(1));\n        assertThat(config.getSameAsSources().get(0).getType(), equalTo(EnumDataSourceType.SPARQL));\n        assertThat(config.getSameAsSources().get(0).getName(), nullValue());\n        assertThat(config.getSameAsSources().get(0).getParams().get(ConfigParameters.DATA_SOURCE_SPARQL_ENDPOINT), equalTo(\"http://localhost:8890/sparql\"));\n        assertThat(config.getSameAsSources().get(0).getConstructQuery().trim(), equalTo(\"CONSTRUCT {?s owl:sameAs ?o} WHERE { ?s owl:sameAs ?o }\"));\n\n        assertThat(config.getRequiredClassOfProcessedResources(), nullValue());\n\n        assertThat(config.getDefaultResolutionStrategy(), notNullValue());\n        assertThat(config.getDefaultResolutionStrategy().getResolutionFunctionName(), equalTo(\"NONE\"));\n        assertThat(config.getDefaultResolutionStrategy().getAggregationErrorStrategy(), nullValue());\n        assertThat(config.getDefaultResolutionStrategy().getCardinality(), nullValue());\n        assertThat(config.getDefaultResolutionStrategy().getDependsOn(), nullValue());\n        assertThat(config.getDefaultResolutionStrategy().getParams(),\n                equalTo((Map<String, String>) ImmutableMap.of(\"name\", \"value\")));\n\n        assertThat(config.getOutputs().size(), equalTo(1));\n        assertThat(config.getOutputs().get(0).getName(), nullValue());\n        assertThat(config.getOutputs().get(0).getType(), equalTo(EnumOutputType.SPARQL));\n        assertThat(config.getOutputs().get(0).getMetadataContext(), nullValue());\n        assertThat(config.getOutputs().get(0).getDataContext(), nullValue());\n        assertThat(config.getOutputs().get(0).getParams().size(), equalTo(3));\n    }", "signature": "void parsesFullConfigFile2()", "full_signature": "@Test public void parsesFullConfigFile2()", "class_method_signature": "ConfigReaderTest.parsesFullConfigFile2()", "testcase": true, "constructor": false, "invocations": ["getResourceFile", "parseConfigXml", "assertThat", "size", "getDataSources", "equalTo", "assertThat", "getName", "get", "getDataSources", "nullValue", "assertThat", "getType", "get", "getDataSources", "equalTo", "assertThat", "get", "getParams", "get", "getDataSources", "equalTo", "assertThat", "getName", "get", "getDataSources", "nullValue", "assertThat", "getType", "get", "getDataSources", "equalTo", "assertThat", "get", "getParams", "get", "getDataSources", "equalTo", "assertThat", "size", "getSameAsSources", "equalTo", "assertThat", "getType", "get", "getSameAsSources", "equalTo", "assertThat", "getName", "get", "getSameAsSources", "nullValue", "assertThat", "get", "getParams", "get", "getSameAsSources", "equalTo", "assertThat", "trim", "getConstructQuery", "get", "getSameAsSources", "equalTo", "assertThat", "getRequiredClassOfProcessedResources", "nullValue", "assertThat", "getDefaultResolutionStrategy", "notNullValue", "assertThat", "getResolutionFunctionName", "getDefaultResolutionStrategy", "equalTo", "assertThat", "getAggregationErrorStrategy", "getDefaultResolutionStrategy", "nullValue", "assertThat", "getCardinality", "getDefaultResolutionStrategy", "nullValue", "assertThat", "getDependsOn", "getDefaultResolutionStrategy", "nullValue", "assertThat", "getParams", "getDefaultResolutionStrategy", "equalTo", "of", "assertThat", "size", "getOutputs", "equalTo", "assertThat", "getName", "get", "getOutputs", "nullValue", "assertThat", "getType", "get", "getOutputs", "equalTo", "assertThat", "getMetadataContext", "get", "getOutputs", "nullValue", "assertThat", "getDataContext", "get", "getOutputs", "nullValue", "assertThat", "size", "getParams", "get", "getOutputs", "equalTo"]}, "focal_class": {"identifier": "ConfigReader", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseConfigXml", "parameters": "(File configFile)", "modifiers": "public static", "return": "Config", "signature": "Config parseConfigXml(File configFile)", "full_signature": "public static Config parseConfigXml(File configFile)", "class_method_signature": "ConfigReader.parseConfigXml(File configFile)", "testcase": false, "constructor": false}, {"identifier": "parseConfigXmlImpl", "parameters": "(File configFile)", "modifiers": "private", "return": "Config", "signature": "Config parseConfigXmlImpl(File configFile)", "full_signature": "private Config parseConfigXmlImpl(File configFile)", "class_method_signature": "ConfigReader.parseConfigXmlImpl(File configFile)", "testcase": false, "constructor": false}, {"identifier": "extractPropertyResolutionStrategies", "parameters": "(\n            List<PropertyResolutionStrategyXml> propertyResolutionStrategies,\n            NamespacePrefixExpander prefixExpander)", "modifiers": "private", "return": "Map<URI, ResolutionStrategy>", "signature": "Map<URI, ResolutionStrategy> extractPropertyResolutionStrategies(\n            List<PropertyResolutionStrategyXml> propertyResolutionStrategies,\n            NamespacePrefixExpander prefixExpander)", "full_signature": "private Map<URI, ResolutionStrategy> extractPropertyResolutionStrategies(\n            List<PropertyResolutionStrategyXml> propertyResolutionStrategies,\n            NamespacePrefixExpander prefixExpander)", "class_method_signature": "ConfigReader.extractPropertyResolutionStrategies(\n            List<PropertyResolutionStrategyXml> propertyResolutionStrategies,\n            NamespacePrefixExpander prefixExpander)", "testcase": false, "constructor": false}, {"identifier": "extractResolutionStrategy", "parameters": "(ResolutionStrategyXml strategyXml, NamespacePrefixExpander prefixExpander)", "modifiers": "private", "return": "ResolutionStrategy", "signature": "ResolutionStrategy extractResolutionStrategy(ResolutionStrategyXml strategyXml, NamespacePrefixExpander prefixExpander)", "full_signature": "private ResolutionStrategy extractResolutionStrategy(ResolutionStrategyXml strategyXml, NamespacePrefixExpander prefixExpander)", "class_method_signature": "ConfigReader.extractResolutionStrategy(ResolutionStrategyXml strategyXml, NamespacePrefixExpander prefixExpander)", "testcase": false, "constructor": false}, {"identifier": "extractAllParams", "parameters": "(List<ParamXml> params)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> extractAllParams(List<ParamXml> params)", "full_signature": "private Map<String, String> extractAllParams(List<ParamXml> params)", "class_method_signature": "ConfigReader.extractAllParams(List<ParamXml> params)", "testcase": false, "constructor": false}, {"identifier": "extractPrefixes", "parameters": "(List<PrefixXml> prefixes)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> extractPrefixes(List<PrefixXml> prefixes)", "full_signature": "private Map<String, String> extractPrefixes(List<PrefixXml> prefixes)", "class_method_signature": "ConfigReader.extractPrefixes(List<PrefixXml> prefixes)", "testcase": false, "constructor": false}, {"identifier": "extractDataProcessingParams", "parameters": "(List<ParamXml> params, ConfigImpl config, NamespacePrefixExpander prefixExpander)", "modifiers": "private", "return": "void", "signature": "void extractDataProcessingParams(List<ParamXml> params, ConfigImpl config, NamespacePrefixExpander prefixExpander)", "full_signature": "private void extractDataProcessingParams(List<ParamXml> params, ConfigImpl config, NamespacePrefixExpander prefixExpander)", "class_method_signature": "ConfigReader.extractDataProcessingParams(List<ParamXml> params, ConfigImpl config, NamespacePrefixExpander prefixExpander)", "testcase": false, "constructor": false}, {"identifier": "extractDataSource", "parameters": "(DataSourceXml dataSourceXml)", "modifiers": "private", "return": "DataSourceConfig", "signature": "DataSourceConfig extractDataSource(DataSourceXml dataSourceXml)", "full_signature": "private DataSourceConfig extractDataSource(DataSourceXml dataSourceXml)", "class_method_signature": "ConfigReader.extractDataSource(DataSourceXml dataSourceXml)", "testcase": false, "constructor": false}, {"identifier": "extractConstructSource", "parameters": "(ConstructSourceXml constructSourceXml)", "modifiers": "private", "return": "ConstructSourceConfig", "signature": "ConstructSourceConfig extractConstructSource(ConstructSourceXml constructSourceXml)", "full_signature": "private ConstructSourceConfig extractConstructSource(ConstructSourceXml constructSourceXml)", "class_method_signature": "ConfigReader.extractConstructSource(ConstructSourceXml constructSourceXml)", "testcase": false, "constructor": false}, {"identifier": "extractOutput", "parameters": "(OutputXml outputXml)", "modifiers": "private", "return": "Output", "signature": "Output extractOutput(OutputXml outputXml)", "full_signature": "private Output extractOutput(OutputXml outputXml)", "class_method_signature": "ConfigReader.extractOutput(OutputXml outputXml)", "testcase": false, "constructor": false}, {"identifier": "validateOutputParam", "parameters": "(String key, String value, Output output)", "modifiers": "private", "return": "void", "signature": "void validateOutputParam(String key, String value, Output output)", "full_signature": "private void validateOutputParam(String key, String value, Output output)", "class_method_signature": "ConfigReader.validateOutputParam(String key, String value, Output output)", "testcase": false, "constructor": false}, {"identifier": "convertToLong", "parameters": "(String str, String errorMessage)", "modifiers": "private", "return": "long", "signature": "long convertToLong(String str, String errorMessage)", "full_signature": "private long convertToLong(String str, String errorMessage)", "class_method_signature": "ConfigReader.convertToLong(String str, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "convertToURI", "parameters": "(String str, String errorMessage)", "modifiers": "private", "return": "URI", "signature": "URI convertToURI(String str, String errorMessage)", "full_signature": "private URI convertToURI(String str, String errorMessage)", "class_method_signature": "ConfigReader.convertToURI(String str, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "extractGraphRestriction", "parameters": "(RestrictionXml restrictionXml)", "modifiers": "private", "return": "SparqlRestriction", "signature": "SparqlRestriction extractGraphRestriction(RestrictionXml restrictionXml)", "full_signature": "private SparqlRestriction extractGraphRestriction(RestrictionXml restrictionXml)", "class_method_signature": "ConfigReader.extractGraphRestriction(RestrictionXml restrictionXml)", "testcase": false, "constructor": false}, {"identifier": "extractRestriction", "parameters": "(RestrictionXml restrictionXml, String defaultVarName)", "modifiers": "private", "return": "SparqlRestriction", "signature": "SparqlRestriction extractRestriction(RestrictionXml restrictionXml, String defaultVarName)", "full_signature": "private SparqlRestriction extractRestriction(RestrictionXml restrictionXml, String defaultVarName)", "class_method_signature": "ConfigReader.extractRestriction(RestrictionXml restrictionXml, String defaultVarName)", "testcase": false, "constructor": false}, {"identifier": "preprocessGroupGraphPattern", "parameters": "(String groupGraphPattern)", "modifiers": "private", "return": "String", "signature": "String preprocessGroupGraphPattern(String groupGraphPattern)", "full_signature": "private String preprocessGroupGraphPattern(String groupGraphPattern)", "class_method_signature": "ConfigReader.preprocessGroupGraphPattern(String groupGraphPattern)", "testcase": false, "constructor": false}, {"identifier": "ConfigReader", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConfigReader()", "full_signature": "private  ConfigReader()", "class_method_signature": "ConfigReader.ConfigReader()", "testcase": false, "constructor": true}], "file": "sources/odcsft-application/src/main/java/cz/cuni/mff/odcleanstore/fusiontool/config/ConfigReader.java"}, "focal_method": {"identifier": "parseConfigXml", "parameters": "(File configFile)", "modifiers": "public static", "return": "Config", "body": "public static Config parseConfigXml(File configFile) throws InvalidInputException {\n        ConfigReader instance = new ConfigReader();\n        return instance.parseConfigXmlImpl(configFile);\n    }", "signature": "Config parseConfigXml(File configFile)", "full_signature": "public static Config parseConfigXml(File configFile)", "class_method_signature": "ConfigReader.parseConfigXml(File configFile)", "testcase": false, "constructor": false, "invocations": ["parseConfigXmlImpl"]}, "repository": {"repo_id": 8147920, "url": "https://github.com/mifeet/LD-FusionTool", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 1520, "license": "licensed"}}