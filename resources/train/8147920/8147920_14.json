{"test_class": {"identifier": "ResourceDescriptionConflictResolverImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ValueFactory VF = ValueFactoryImpl.getInstance();", "modifier": "private static final", "type": "ValueFactory", "declarator": "VF = ValueFactoryImpl.getInstance()", "var_name": "VF"}, {"original_string": "private static final Supplier<List<MockResolvedStatement>> LIST_SUPPLIER = new Supplier<List<MockResolvedStatement>>() {\n        @Override\n        public List<MockResolvedStatement> get() {\n            return new ArrayList<>();\n        }\n    };", "modifier": "private static final", "type": "Supplier<List<MockResolvedStatement>>", "declarator": "LIST_SUPPLIER = new Supplier<List<MockResolvedStatement>>() {\n        @Override\n        public List<MockResolvedStatement> get() {\n            return new ArrayList<>();\n        }\n    }", "var_name": "LIST_SUPPLIER"}, {"original_string": "private static final URI RESOURCE_DESCRIPTION_URI = createHttpUri(\"resourceDescriptionProperty\");", "modifier": "private static final", "type": "URI", "declarator": "RESOURCE_DESCRIPTION_URI = createHttpUri(\"resourceDescriptionProperty\")", "var_name": "RESOURCE_DESCRIPTION_URI"}, {"original_string": "private UriMappingImpl uriMapping;", "modifier": "private", "type": "UriMappingImpl", "declarator": "uriMapping", "var_name": "uriMapping"}], "file": "sources/odcsft-conflict-resolution/src/test/java/cz/cuni/mff/odcleanstore/fusiontool/conflictresolution/impl/ResourceDescriptionConflictResolverImplTest.java"}, "test_case": {"identifier": "choosesBestStatementForDependentProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void choosesBestStatementForDependentProperties() throws Exception {\n        // Arrange\n        Resource resource = createHttpUri(\"sx\");\n        Collection<Statement> testInput = ImmutableList.of(\n                createHttpStatement(\"sa\", \"d1\", \"oa1\", \"good\"),\n                createHttpStatement(\"sa\", \"d1\", \"oa1\", \"bad\"),\n                createHttpStatement(\"sa\", \"d2\", \"oa2\", \"good\"),\n                createHttpStatement(\"sb\", \"d1\", \"ob1\", \"good\"),\n                createHttpStatement(\"sb\", \"d2\", \"ob2\", \"good\"));\n        ConflictResolutionPolicy conflictResolutionPolicy = ConflictResolutionPolicyBuilder.newPolicy()\n                .with(createHttpUri(\"d1\"), resolutionStrategyWithDependsOn(createHttpUri(\"d2\")))\n                .build();\n        ResolutionFunction resolutionFunction = MockNoneResolutionFunctionWithQuality.newResolutionFunction()\n                .withQuality(createHttpUri(\"good\"), 0.9)\n                .withQuality(createHttpUri(\"bad\"), 0.2);\n        ResourceDescriptionConflictResolver resolver = createResolver(conflictResolutionPolicy, resolutionFunction);\n\n        // Act\n        Collection<ResolvedStatement> result = resolver.resolveConflicts(new ResourceDescriptionImpl(resource, testInput));\n\n        // Assert\n        Collection<Statement> expectedStatements = ImmutableList.of(\n                createHttpStatement(\"sx\", \"d1\", \"ob1\"),\n                createHttpStatement(\"sx\", \"d2\", \"ob2\"));\n        assertThat(result, hasSize(expectedStatements.size()));\n        for (Statement expectedStatement : expectedStatements) {\n            assertThat(result, hasItem(resolvedStatementMatchesStatement(expectedStatement)));\n        }\n    }", "signature": "void choosesBestStatementForDependentProperties()", "full_signature": "@Test public void choosesBestStatementForDependentProperties()", "class_method_signature": "ResourceDescriptionConflictResolverImplTest.choosesBestStatementForDependentProperties()", "testcase": true, "constructor": false, "invocations": ["createHttpUri", "of", "createHttpStatement", "createHttpStatement", "createHttpStatement", "createHttpStatement", "createHttpStatement", "build", "with", "newPolicy", "createHttpUri", "resolutionStrategyWithDependsOn", "createHttpUri", "withQuality", "withQuality", "newResolutionFunction", "createHttpUri", "createHttpUri", "createResolver", "resolveConflicts", "of", "createHttpStatement", "createHttpStatement", "assertThat", "hasSize", "size", "assertThat", "hasItem", "resolvedStatementMatchesStatement"]}, "focal_class": {"identifier": "ResourceDescriptionConflictResolverImpl", "superclass": "", "interfaces": "implements ResourceDescriptionConflictResolver", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ResourceDescriptionConflictResolverImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ResourceDescriptionConflictResolverImpl.class)", "var_name": "LOG"}, {"original_string": "public static final ResolutionStrategy DEFAULT_RESOLUTION_STRATEGY = new ResolutionStrategyImpl(\n            AllResolution.getName(),\n            EnumCardinality.MANYVALUED,\n            EnumAggregationErrorStrategy.RETURN_ALL);", "modifier": "public static final", "type": "ResolutionStrategy", "declarator": "DEFAULT_RESOLUTION_STRATEGY = new ResolutionStrategyImpl(\n            AllResolution.getName(),\n            EnumCardinality.MANYVALUED,\n            EnumAggregationErrorStrategy.RETURN_ALL)", "var_name": "DEFAULT_RESOLUTION_STRATEGY"}, {"original_string": "public static final String DEFAULT_RESOLVED_GRAPHS_URI_PREFIX = ODCS.NAMESPACE + \"cr/\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_RESOLVED_GRAPHS_URI_PREFIX = ODCS.NAMESPACE + \"cr/\"", "var_name": "DEFAULT_RESOLVED_GRAPHS_URI_PREFIX"}, {"original_string": "private static final ValueFactory VF = ValueFactoryImpl.getInstance();", "modifier": "private static final", "type": "ValueFactory", "declarator": "VF = ValueFactoryImpl.getInstance()", "var_name": "VF"}, {"original_string": "private static final SortedListModelFactory SORTED_LIST_MODEL_FACTORY = new SortedListModelFactory();", "modifier": "private static final", "type": "SortedListModelFactory", "declarator": "SORTED_LIST_MODEL_FACTORY = new SortedListModelFactory()", "var_name": "SORTED_LIST_MODEL_FACTORY"}, {"original_string": "private final Model metadataModel;", "modifier": "private final", "type": "Model", "declarator": "metadataModel", "var_name": "metadataModel"}, {"original_string": "private final UriMapping uriMapping;", "modifier": "private final", "type": "UriMapping", "declarator": "uriMapping", "var_name": "uriMapping"}, {"original_string": "private final ConflictResolutionPolicy effectiveResolutionPolicy;", "modifier": "private final", "type": "ConflictResolutionPolicy", "declarator": "effectiveResolutionPolicy", "var_name": "effectiveResolutionPolicy"}, {"original_string": "private final ResolutionFunctionRegistry resolutionFunctionRegistry;", "modifier": "private final", "type": "ResolutionFunctionRegistry", "declarator": "resolutionFunctionRegistry", "var_name": "resolutionFunctionRegistry"}, {"original_string": "private final NestedResourceDescriptionQualityCalculator nestedResourceDescriptionQualityCalculator;", "modifier": "private final", "type": "NestedResourceDescriptionQualityCalculator", "declarator": "nestedResourceDescriptionQualityCalculator", "var_name": "nestedResourceDescriptionQualityCalculator"}, {"original_string": "private final ResolvedStatementFactoryImpl resolvedStatementFactory;", "modifier": "private final", "type": "ResolvedStatementFactoryImpl", "declarator": "resolvedStatementFactory", "var_name": "resolvedStatementFactory"}, {"original_string": "private final AlternativeUriNavigator dependentPropertyMapping;", "modifier": "private final", "type": "AlternativeUriNavigator", "declarator": "dependentPropertyMapping", "var_name": "dependentPropertyMapping"}], "methods": [{"identifier": "ResourceDescriptionConflictResolverImpl", "parameters": "(\n            ResolutionFunctionRegistry resolutionFunctionRegistry,\n            ConflictResolutionPolicy conflictResolutionPolicy,\n            UriMapping uriMapping,\n            Model metadata,\n            String resolvedGraphsURIPrefix, // TODO: replace with UriGenerator class generating uris both for contexts and generated dependent resources\n            NestedResourceDescriptionQualityCalculator nestedResourceDescriptionQualityCalculator)", "modifiers": "public", "return": "", "signature": " ResourceDescriptionConflictResolverImpl(\n            ResolutionFunctionRegistry resolutionFunctionRegistry,\n            ConflictResolutionPolicy conflictResolutionPolicy,\n            UriMapping uriMapping,\n            Model metadata,\n            String resolvedGraphsURIPrefix, // TODO: replace with UriGenerator class generating uris both for contexts and generated dependent resources\n            NestedResourceDescriptionQualityCalculator nestedResourceDescriptionQualityCalculator)", "full_signature": "public  ResourceDescriptionConflictResolverImpl(\n            ResolutionFunctionRegistry resolutionFunctionRegistry,\n            ConflictResolutionPolicy conflictResolutionPolicy,\n            UriMapping uriMapping,\n            Model metadata,\n            String resolvedGraphsURIPrefix, // TODO: replace with UriGenerator class generating uris both for contexts and generated dependent resources\n            NestedResourceDescriptionQualityCalculator nestedResourceDescriptionQualityCalculator)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.ResourceDescriptionConflictResolverImpl(\n            ResolutionFunctionRegistry resolutionFunctionRegistry,\n            ConflictResolutionPolicy conflictResolutionPolicy,\n            UriMapping uriMapping,\n            Model metadata,\n            String resolvedGraphsURIPrefix, // TODO: replace with UriGenerator class generating uris both for contexts and generated dependent resources\n            NestedResourceDescriptionQualityCalculator nestedResourceDescriptionQualityCalculator)", "testcase": false, "constructor": true}, {"identifier": "resolveConflicts", "parameters": "(ResourceDescription resourceDescription)", "modifiers": "@Override public", "return": "Collection<ResolvedStatement>", "signature": "Collection<ResolvedStatement> resolveConflicts(ResourceDescription resourceDescription)", "full_signature": "@Override public Collection<ResolvedStatement> resolveConflicts(ResourceDescription resourceDescription)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.resolveConflicts(ResourceDescription resourceDescription)", "testcase": false, "constructor": false}, {"identifier": "resolveResource", "parameters": "(\n            Map<URI, List<Statement>> statementsToResolveByProperty,\n            Resource canonicalResource,\n            ResolvedResult totalResult,\n            ConflictClustersMap conflictClustersMap,\n            Set<Resource> resolvedResources)", "modifiers": "private", "return": "Collection<ResolvedStatement>", "signature": "Collection<ResolvedStatement> resolveResource(\n            Map<URI, List<Statement>> statementsToResolveByProperty,\n            Resource canonicalResource,\n            ResolvedResult totalResult,\n            ConflictClustersMap conflictClustersMap,\n            Set<Resource> resolvedResources)", "full_signature": "private Collection<ResolvedStatement> resolveResource(\n            Map<URI, List<Statement>> statementsToResolveByProperty,\n            Resource canonicalResource,\n            ResolvedResult totalResult,\n            ConflictClustersMap conflictClustersMap,\n            Set<Resource> resolvedResources)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.resolveResource(\n            Map<URI, List<Statement>> statementsToResolveByProperty,\n            Resource canonicalResource,\n            ResolvedResult totalResult,\n            ConflictClustersMap conflictClustersMap,\n            Set<Resource> resolvedResources)", "testcase": false, "constructor": false}, {"identifier": "resolveResourceDependentProperties", "parameters": "(\n            Map<URI, List<Statement>> statementsToResolveByProperty,\n            Resource canonicalResource,\n            List<URI> dependentProperties,\n            ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult,\n            Set<Resource> resolvedResources)", "modifiers": "private", "return": "Collection<ResolvedStatement>", "signature": "Collection<ResolvedStatement> resolveResourceDependentProperties(\n            Map<URI, List<Statement>> statementsToResolveByProperty,\n            Resource canonicalResource,\n            List<URI> dependentProperties,\n            ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult,\n            Set<Resource> resolvedResources)", "full_signature": "private Collection<ResolvedStatement> resolveResourceDependentProperties(\n            Map<URI, List<Statement>> statementsToResolveByProperty,\n            Resource canonicalResource,\n            List<URI> dependentProperties,\n            ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult,\n            Set<Resource> resolvedResources)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.resolveResourceDependentProperties(\n            Map<URI, List<Statement>> statementsToResolveByProperty,\n            Resource canonicalResource,\n            List<URI> dependentProperties,\n            ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult,\n            Set<Resource> resolvedResources)", "testcase": false, "constructor": false}, {"identifier": "resolveConflictCluster", "parameters": "(\n            Model conflictClusterToResolve,\n            Resource canonicalSubject,\n            URI canonicalProperty,\n            Collection<Statement> conflictingMappedStatements,\n            ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult,\n            Set<Resource> resolvedResources)", "modifiers": "private", "return": "Collection<ResolvedStatement>", "signature": "Collection<ResolvedStatement> resolveConflictCluster(\n            Model conflictClusterToResolve,\n            Resource canonicalSubject,\n            URI canonicalProperty,\n            Collection<Statement> conflictingMappedStatements,\n            ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult,\n            Set<Resource> resolvedResources)", "full_signature": "private Collection<ResolvedStatement> resolveConflictCluster(\n            Model conflictClusterToResolve,\n            Resource canonicalSubject,\n            URI canonicalProperty,\n            Collection<Statement> conflictingMappedStatements,\n            ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult,\n            Set<Resource> resolvedResources)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.resolveConflictCluster(\n            Model conflictClusterToResolve,\n            Resource canonicalSubject,\n            URI canonicalProperty,\n            Collection<Statement> conflictingMappedStatements,\n            ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult,\n            Set<Resource> resolvedResources)", "testcase": false, "constructor": false}, {"identifier": "generateUniqueUri", "parameters": "()", "modifiers": "private", "return": "URI", "signature": "URI generateUniqueUri()", "full_signature": "private URI generateUniqueUri()", "class_method_signature": "ResourceDescriptionConflictResolverImpl.generateUniqueUri()", "testcase": false, "constructor": false}, {"identifier": "createMappedModel", "parameters": "(Iterable<Statement> statements)", "modifiers": "private", "return": "Model", "signature": "Model createMappedModel(Iterable<Statement> statements)", "full_signature": "private Model createMappedModel(Iterable<Statement> statements)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.createMappedModel(Iterable<Statement> statements)", "testcase": false, "constructor": false}, {"identifier": "getResolutionFunction", "parameters": "(\n            ResolutionStrategy resolutionStrategy, ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult, Set<Resource> resolvedResources)", "modifiers": "protected", "return": "ResolutionFunction", "signature": "ResolutionFunction getResolutionFunction(\n            ResolutionStrategy resolutionStrategy, ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult, Set<Resource> resolvedResources)", "full_signature": "protected ResolutionFunction getResolutionFunction(\n            ResolutionStrategy resolutionStrategy, ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult, Set<Resource> resolvedResources)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.getResolutionFunction(\n            ResolutionStrategy resolutionStrategy, ConflictClustersMap conflictClustersMap,\n            ResolvedResult totalResult, Set<Resource> resolvedResources)", "testcase": false, "constructor": false}, {"identifier": "getResolutionStrategy", "parameters": "(URI canonicalProperty)", "modifiers": "private", "return": "ResolutionStrategy", "signature": "ResolutionStrategy getResolutionStrategy(URI canonicalProperty)", "full_signature": "private ResolutionStrategy getResolutionStrategy(URI canonicalProperty)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.getResolutionStrategy(URI canonicalProperty)", "testcase": false, "constructor": false}, {"identifier": "getDependentProperties", "parameters": "(URI property)", "modifiers": "private", "return": "List<URI>", "signature": "List<URI> getDependentProperties(URI property)", "full_signature": "private List<URI> getDependentProperties(URI property)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.getDependentProperties(URI property)", "testcase": false, "constructor": false}, {"identifier": "logStarted", "parameters": "(int inputStatementCount)", "modifiers": "private", "return": "long", "signature": "long logStarted(int inputStatementCount)", "full_signature": "private long logStarted(int inputStatementCount)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.logStarted(int inputStatementCount)", "testcase": false, "constructor": false}, {"identifier": "logFinished", "parameters": "(long startTime, int inputStatementCount, ResolvedResult result)", "modifiers": "private", "return": "void", "signature": "void logFinished(long startTime, int inputStatementCount, ResolvedResult result)", "full_signature": "private void logFinished(long startTime, int inputStatementCount, ResolvedResult result)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.logFinished(long startTime, int inputStatementCount, ResolvedResult result)", "testcase": false, "constructor": false}], "file": "sources/odcsft-conflict-resolution/src/main/java/cz/cuni/mff/odcleanstore/fusiontool/conflictresolution/impl/ResourceDescriptionConflictResolverImpl.java"}, "focal_method": {"identifier": "resolveConflicts", "parameters": "(ResourceDescription resourceDescription)", "modifiers": "@Override public", "return": "Collection<ResolvedStatement>", "body": "@Override\n    public Collection<ResolvedStatement> resolveConflicts(ResourceDescription resourceDescription) throws ConflictResolutionException {\n        int inputStatementCount = resourceDescription.getDescribingStatements().size();\n        long startTime = logStarted(inputStatementCount);\n\n        ConflictClustersMap conflictClustersMap = ConflictClustersMap.fromCollection(resourceDescription.getDescribingStatements(), uriMapping);\n        ResolvedResult totalResult = new ResolvedResult();\n\n        Resource canonicalResource = uriMapping.mapResource(resourceDescription.getResource());\n        Collection<ResolvedStatement> resourceResolvedStatements = resolveResource(\n                conflictClustersMap.getResourceStatementsMap(canonicalResource),\n                canonicalResource,\n                totalResult,\n                conflictClustersMap,\n                new HashSet<Resource>(1));\n        totalResult.addToResult(resourceResolvedStatements);\n\n        logFinished(startTime, inputStatementCount, totalResult);\n        return totalResult.getResult();\n    }", "signature": "Collection<ResolvedStatement> resolveConflicts(ResourceDescription resourceDescription)", "full_signature": "@Override public Collection<ResolvedStatement> resolveConflicts(ResourceDescription resourceDescription)", "class_method_signature": "ResourceDescriptionConflictResolverImpl.resolveConflicts(ResourceDescription resourceDescription)", "testcase": false, "constructor": false, "invocations": ["size", "getDescribingStatements", "logStarted", "fromCollection", "getDescribingStatements", "mapResource", "getResource", "resolveResource", "getResourceStatementsMap", "addToResult", "logFinished", "getResult"]}, "repository": {"repo_id": 8147920, "url": "https://github.com/mifeet/LD-FusionTool", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 1520, "license": "licensed"}}