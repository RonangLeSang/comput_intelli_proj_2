{"test_class": {"identifier": "SimpleRestInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AtmosphereFramework framework;", "modifier": "private", "type": "AtmosphereFramework", "declarator": "framework", "var_name": "framework"}, {"original_string": "private AtmosphereConfig config;", "modifier": "private", "type": "AtmosphereConfig", "declarator": "config", "var_name": "config"}], "file": "modules/cpr/src/test/java/org/atmosphere/interceptor/SimpleRestInterceptorTest.java"}, "test_case": {"identifier": "testParsingWithTextData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParsingWithTextData() throws Exception {\n        final String data = \"{\\\"id\\\": \\\"123\\\", \\\"type\\\" : \\\"text/plain\\\"}\"\n                + \"This is just a plain text\";\n        Reader r = new StringReader(data);\n\n        JSONObject jsonpart = SimpleRestInterceptor.parseJsonPart(r);\n\n        Map<String, Object> expectedHeaders = new HashMap<String, Object>();\n        expectedHeaders.put(\"id\", \"123\");\n        expectedHeaders.put(\"type\", \"text/plain\");\n        verify(jsonpart, r, expectedHeaders, \"This is just a plain text\");\n    }", "signature": "void testParsingWithTextData()", "full_signature": "@Test public void testParsingWithTextData()", "class_method_signature": "SimpleRestInterceptorTest.testParsingWithTextData()", "testcase": true, "constructor": false, "invocations": ["parseJsonPart", "put", "put", "verify"]}, "focal_class": {"identifier": "SimpleRestInterceptor", "superclass": "extends AtmosphereInterceptorAdapter", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleRestInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleRestInterceptor.class)", "var_name": "LOG"}, {"original_string": "public final static String PROTOCOL_DETACHED_KEY = \"atmosphere.simple-rest.protocol.detached\";", "modifier": "public final static", "type": "String", "declarator": "PROTOCOL_DETACHED_KEY = \"atmosphere.simple-rest.protocol.detached\"", "var_name": "PROTOCOL_DETACHED_KEY"}, {"original_string": "public final static String X_ATMOSPHERE_SIMPLE_REST_PROTOCOL_DETACHED = \"X-Atmosphere-SimpleRestProtocolDetached\";", "modifier": "public final static", "type": "String", "declarator": "X_ATMOSPHERE_SIMPLE_REST_PROTOCOL_DETACHED = \"X-Atmosphere-SimpleRestProtocolDetached\"", "var_name": "X_ATMOSPHERE_SIMPLE_REST_PROTOCOL_DETACHED"}, {"original_string": "public final static String X_REQUEST_KEY = \"X-Request-Key\";", "modifier": "public final static", "type": "String", "declarator": "X_REQUEST_KEY = \"X-Request-Key\"", "var_name": "X_REQUEST_KEY"}, {"original_string": "protected final static String REQUEST_DISPATCHED = \"request.dispatched\";", "modifier": "protected final static", "type": "String", "declarator": "REQUEST_DISPATCHED = \"request.dispatched\"", "var_name": "REQUEST_DISPATCHED"}, {"original_string": "protected final static String REQUEST_ID = \"request.id\";", "modifier": "protected final static", "type": "String", "declarator": "REQUEST_ID = \"request.id\"", "var_name": "REQUEST_ID"}, {"original_string": "private final static String HEARTBEAT_BROADCASTER_NAME = \"/simple-rest.heartbeat\";", "modifier": "private final static", "type": "String", "declarator": "HEARTBEAT_BROADCASTER_NAME = \"/simple-rest.heartbeat\"", "var_name": "HEARTBEAT_BROADCASTER_NAME"}, {"original_string": "private final static String HEARTBEAT_SCHEDULED = \"heatbeat.scheduled\";", "modifier": "private final static", "type": "String", "declarator": "HEARTBEAT_SCHEDULED = \"heatbeat.scheduled\"", "var_name": "HEARTBEAT_SCHEDULED"}, {"original_string": "private final static String HEARTBEAT_TEMPLATE = \"{\\\"heartbeat\\\": \\\"%s\\\", \\\"time\\\": %d}\";", "modifier": "private final static", "type": "String", "declarator": "HEARTBEAT_TEMPLATE = \"{\\\"heartbeat\\\": \\\"%s\\\", \\\"time\\\": %d}\"", "var_name": "HEARTBEAT_TEMPLATE"}, {"original_string": "private final static long DEFAULT_HEARTBEAT_INTERVAL = 60;", "modifier": "private final static", "type": "long", "declarator": "DEFAULT_HEARTBEAT_INTERVAL = 60", "var_name": "DEFAULT_HEARTBEAT_INTERVAL"}, {"original_string": "private Map<String, AtmosphereResponse> suspendedResponses = new HashMap<String, AtmosphereResponse>();", "modifier": "private", "type": "Map<String, AtmosphereResponse>", "declarator": "suspendedResponses = new HashMap<String, AtmosphereResponse>()", "var_name": "suspendedResponses"}, {"original_string": "private ChunkConcatReaderPool readerPool = new ChunkConcatReaderPool();", "modifier": "private", "type": "ChunkConcatReaderPool", "declarator": "readerPool = new ChunkConcatReaderPool()", "var_name": "readerPool"}, {"original_string": "private Broadcaster heartbeat;", "modifier": "private", "type": "Broadcaster", "declarator": "heartbeat", "var_name": "heartbeat"}, {"original_string": "private boolean heartbeatScheduled;", "modifier": "private", "type": "boolean", "declarator": "heartbeatScheduled", "var_name": "heartbeatScheduled"}, {"original_string": "private final AsyncIOInterceptor interceptor = new Interceptor();", "modifier": "private final", "type": "AsyncIOInterceptor", "declarator": "interceptor = new Interceptor()", "var_name": "interceptor"}], "methods": [{"identifier": "SimpleRestInterceptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleRestInterceptor()", "full_signature": "public  SimpleRestInterceptor()", "class_method_signature": "SimpleRestInterceptor.SimpleRestInterceptor()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(AtmosphereConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void configure(AtmosphereConfig config)", "full_signature": "@Override public void configure(AtmosphereConfig config)", "class_method_signature": "SimpleRestInterceptor.configure(AtmosphereConfig config)", "testcase": false, "constructor": false}, {"identifier": "inspect", "parameters": "(final AtmosphereResource r)", "modifiers": "@Override public", "return": "Action", "signature": "Action inspect(final AtmosphereResource r)", "full_signature": "@Override public Action inspect(final AtmosphereResource r)", "class_method_signature": "SimpleRestInterceptor.inspect(final AtmosphereResource r)", "testcase": false, "constructor": false}, {"identifier": "getHeartbeatBroadcasterName", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getHeartbeatBroadcasterName()", "full_signature": "protected String getHeartbeatBroadcasterName()", "class_method_signature": "SimpleRestInterceptor.getHeartbeatBroadcasterName()", "testcase": false, "constructor": false}, {"identifier": "getHeartbeatTemplate", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getHeartbeatTemplate()", "full_signature": "protected String getHeartbeatTemplate()", "class_method_signature": "SimpleRestInterceptor.getHeartbeatTemplate()", "testcase": false, "constructor": false}, {"identifier": "getHeartbeatTemplateArguments", "parameters": "()", "modifiers": "protected", "return": "Object[]", "signature": "Object[] getHeartbeatTemplateArguments()", "full_signature": "protected Object[] getHeartbeatTemplateArguments()", "class_method_signature": "SimpleRestInterceptor.getHeartbeatTemplateArguments()", "testcase": false, "constructor": false}, {"identifier": "createAtmosphereRequest", "parameters": "(AtmosphereRequest request, String body)", "modifiers": "protected", "return": "AtmosphereRequest", "signature": "AtmosphereRequest createAtmosphereRequest(AtmosphereRequest request, String body)", "full_signature": "protected AtmosphereRequest createAtmosphereRequest(AtmosphereRequest request, String body)", "class_method_signature": "SimpleRestInterceptor.createAtmosphereRequest(AtmosphereRequest request, String body)", "testcase": false, "constructor": false}, {"identifier": "createResponse", "parameters": "(AtmosphereResponse response, byte[] payload)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] createResponse(AtmosphereResponse response, byte[] payload)", "full_signature": "protected byte[] createResponse(AtmosphereResponse response, byte[] payload)", "class_method_signature": "SimpleRestInterceptor.createResponse(AtmosphereResponse response, byte[] payload)", "testcase": false, "constructor": false}, {"identifier": "scheduleHeartbeat", "parameters": "(AtmosphereResource r)", "modifiers": "private", "return": "void", "signature": "void scheduleHeartbeat(AtmosphereResource r)", "full_signature": "private void scheduleHeartbeat(AtmosphereResource r)", "class_method_signature": "SimpleRestInterceptor.scheduleHeartbeat(AtmosphereResource r)", "testcase": false, "constructor": false}, {"identifier": "isLastResponse", "parameters": "(AtmosphereRequest request, AtmosphereResponse response)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isLastResponse(AtmosphereRequest request, AtmosphereResponse response)", "full_signature": "protected static boolean isLastResponse(AtmosphereRequest request, AtmosphereResponse response)", "class_method_signature": "SimpleRestInterceptor.isLastResponse(AtmosphereRequest request, AtmosphereResponse response)", "testcase": false, "constructor": false}, {"identifier": "attachWriter", "parameters": "(final AtmosphereResource r)", "modifiers": "private", "return": "void", "signature": "void attachWriter(final AtmosphereResource r)", "full_signature": "private void attachWriter(final AtmosphereResource r)", "class_method_signature": "SimpleRestInterceptor.attachWriter(final AtmosphereResource r)", "testcase": false, "constructor": false}, {"identifier": "isJSONObject", "parameters": "(byte[] b)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isJSONObject(byte[] b)", "full_signature": "protected static boolean isJSONObject(byte[] b)", "class_method_signature": "SimpleRestInterceptor.isJSONObject(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "quote", "parameters": "(byte[] b)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] quote(byte[] b)", "full_signature": "protected static byte[] quote(byte[] b)", "class_method_signature": "SimpleRestInterceptor.quote(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "parseJsonPart", "parameters": "(Reader reader)", "modifiers": "protected static", "return": "JSONObject", "signature": "JSONObject parseJsonPart(Reader reader)", "full_signature": "protected static JSONObject parseJsonPart(Reader reader)", "class_method_signature": "SimpleRestInterceptor.parseJsonPart(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(JSONObject obj, String key)", "modifiers": "protected static", "return": "String", "signature": "String getString(JSONObject obj, String key)", "full_signature": "protected static String getString(JSONObject obj, String key)", "class_method_signature": "SimpleRestInterceptor.getString(JSONObject obj, String key)", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "(JSONObject obj, String key)", "modifiers": "protected static", "return": "boolean", "signature": "boolean getBoolean(JSONObject obj, String key)", "full_signature": "protected static boolean getBoolean(JSONObject obj, String key)", "class_method_signature": "SimpleRestInterceptor.getBoolean(JSONObject obj, String key)", "testcase": false, "constructor": false}], "file": "modules/cpr/src/main/java/org/atmosphere/interceptor/SimpleRestInterceptor.java"}, "focal_method": {"identifier": "parseJsonPart", "parameters": "(Reader reader)", "modifiers": "protected static", "return": "JSONObject", "body": "protected static JSONObject parseJsonPart(Reader reader) throws JSONException {\n        return (JSONObject)(new JSONTokener(reader).nextValue());\n    }", "signature": "JSONObject parseJsonPart(Reader reader)", "full_signature": "protected static JSONObject parseJsonPart(Reader reader)", "class_method_signature": "SimpleRestInterceptor.parseJsonPart(Reader reader)", "testcase": false, "constructor": false, "invocations": ["nextValue"]}, "repository": {"repo_id": 749137, "url": "https://github.com/Atmosphere/atmosphere", "language": "Java", "is_fork": false, "fork_count": 738, "stargazer_count": 3439, "size": 111504, "license": "licensed"}}