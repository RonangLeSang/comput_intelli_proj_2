{"test_class": {"identifier": "TypeDescriptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final TypeDescriptors TYPES = new TypeDescriptors(member -> {\n        int mod = member.getModifiers();\n        return !(member.isSynthetic() || Modifier.isAbstract(mod) || Modifier.isStatic(mod));\n    });", "modifier": "static final", "type": "TypeDescriptors", "declarator": "TYPES = new TypeDescriptors(member -> {\n        int mod = member.getModifiers();\n        return !(member.isSynthetic() || Modifier.isAbstract(mod) || Modifier.isStatic(mod));\n    })", "var_name": "TYPES"}, {"original_string": "@SuppressWarnings(\"unused\")\n    static final Map<String, Integer> MAP = new HashMap<>();", "modifier": "@SuppressWarnings(\"unused\")\n    static final", "type": "Map<String, Integer>", "declarator": "MAP = new HashMap<>()", "var_name": "MAP"}, {"original_string": "static final TypeDescriptors STATIC_FIELDS =\n            new TypeDescriptors(input -> Modifier.isStatic(input.getModifiers()));", "modifier": "static final", "type": "TypeDescriptors", "declarator": "STATIC_FIELDS =\n            new TypeDescriptors(input -> Modifier.isStatic(input.getModifiers()))", "var_name": "STATIC_FIELDS"}, {"original_string": "private NestedParametrizedType<String> nestedParametrizedType;", "modifier": "private", "type": "NestedParametrizedType<String>", "declarator": "nestedParametrizedType", "var_name": "nestedParametrizedType"}], "file": "javersion-reflect/src/test/java/org/javersion/reflect/TypeDescriptorTest.java"}, "test_case": {"identifier": "Unmodifiable_Fields", "parameters": "()", "modifiers": "@Test(expected=RuntimeException.class) public", "return": "void", "body": "@Test(expected=RuntimeException.class)\n    public void Unmodifiable_Fields() {\n        TYPES.get(ArrayList.class).getFields().remove(\"elementData\");\n    }", "signature": "void Unmodifiable_Fields()", "full_signature": "@Test(expected=RuntimeException.class) public void Unmodifiable_Fields()", "class_method_signature": "TypeDescriptorTest.Unmodifiable_Fields()", "testcase": true, "constructor": false, "invocations": ["remove", "getFields", "get"]}, "focal_class": {"identifier": "TypeDescriptor", "superclass": "", "interfaces": "implements ElementDescriptor", "fields": [{"original_string": "public static final BiMap<Class<?>, Class<?>> WRAPPER_TO_PRIMITIVE;", "modifier": "public static final", "type": "BiMap<Class<?>, Class<?>>", "declarator": "WRAPPER_TO_PRIMITIVE", "var_name": "WRAPPER_TO_PRIMITIVE"}, {"original_string": "protected final TypeToken<?> typeToken;", "modifier": "protected final", "type": "TypeToken<?>", "declarator": "typeToken", "var_name": "typeToken"}, {"original_string": "protected final TypeDescriptors typeDescriptors;", "modifier": "protected final", "type": "TypeDescriptors", "declarator": "typeDescriptors", "var_name": "typeDescriptors"}, {"original_string": "private static final Pattern DUPLICATE_OWNER_NAME = Pattern.compile(\"([^, <>$]+)\\\\.(\\\\1\\\\$)\");", "modifier": "private static final", "type": "Pattern", "declarator": "DUPLICATE_OWNER_NAME = Pattern.compile(\"([^, <>$]+)\\\\.(\\\\1\\\\$)\")", "var_name": "DUPLICATE_OWNER_NAME"}], "methods": [{"identifier": "TypeDescriptor", "parameters": "(TypeDescriptors typeDescriptors, TypeToken<?> typeToken)", "modifiers": "public", "return": "", "signature": " TypeDescriptor(TypeDescriptors typeDescriptors, TypeToken<?> typeToken)", "full_signature": "public  TypeDescriptor(TypeDescriptors typeDescriptors, TypeToken<?> typeToken)", "class_method_signature": "TypeDescriptor.TypeDescriptor(TypeDescriptors typeDescriptors, TypeToken<?> typeToken)", "testcase": false, "constructor": true}, {"identifier": "getAnnotations", "parameters": "()", "modifiers": "public", "return": "List<Annotation>", "signature": "List<Annotation> getAnnotations()", "full_signature": "public List<Annotation> getAnnotations()", "class_method_signature": "TypeDescriptor.getAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(Class<A> annotationClass)", "modifiers": "public", "return": "A", "signature": "A getAnnotation(Class<A> annotationClass)", "full_signature": "public A getAnnotation(Class<A> annotationClass)", "class_method_signature": "TypeDescriptor.getAnnotation(Class<A> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(Class<A> annotationClass)", "modifiers": "public", "return": "boolean", "signature": "boolean hasAnnotation(Class<A> annotationClass)", "full_signature": "public boolean hasAnnotation(Class<A> annotationClass)", "class_method_signature": "TypeDescriptor.hasAnnotation(Class<A> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "equalTo", "parameters": "(TypeDescriptor type)", "modifiers": "public", "return": "boolean", "signature": "boolean equalTo(TypeDescriptor type)", "full_signature": "public boolean equalTo(TypeDescriptor type)", "class_method_signature": "TypeDescriptor.equalTo(TypeDescriptor type)", "testcase": false, "constructor": false}, {"identifier": "equalTo", "parameters": "(Class<?> type)", "modifiers": "public", "return": "boolean", "signature": "boolean equalTo(Class<?> type)", "full_signature": "public boolean equalTo(Class<?> type)", "class_method_signature": "TypeDescriptor.equalTo(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "()", "modifiers": "public", "return": "Map<String, FieldDescriptor>", "signature": "Map<String, FieldDescriptor> getFields()", "full_signature": "public Map<String, FieldDescriptor> getFields()", "class_method_signature": "TypeDescriptor.getFields()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "TypeDescriptor.getName()", "testcase": false, "constructor": false}, {"identifier": "getSimpleName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSimpleName()", "full_signature": "public String getSimpleName()", "class_method_signature": "TypeDescriptor.getSimpleName()", "testcase": false, "constructor": false}, {"identifier": "getSimpleName", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "String", "signature": "String getSimpleName(Class<?> cls)", "full_signature": "public static String getSimpleName(Class<?> cls)", "class_method_signature": "TypeDescriptor.getSimpleName(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getConstructors", "parameters": "()", "modifiers": "public", "return": "Map<ConstructorSignature, ConstructorDescriptor>", "signature": "Map<ConstructorSignature, ConstructorDescriptor> getConstructors()", "full_signature": "public Map<ConstructorSignature, ConstructorDescriptor> getConstructors()", "class_method_signature": "TypeDescriptor.getConstructors()", "testcase": false, "constructor": false}, {"identifier": "getMethods", "parameters": "()", "modifiers": "public", "return": "Map<MethodSignature, MethodDescriptor>", "signature": "Map<MethodSignature, MethodDescriptor> getMethods()", "full_signature": "public Map<MethodSignature, MethodDescriptor> getMethods()", "class_method_signature": "TypeDescriptor.getMethods()", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "Map<String, BeanProperty>", "signature": "Map<String, BeanProperty> getProperties()", "full_signature": "public Map<String, BeanProperty> getProperties()", "class_method_signature": "TypeDescriptor.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getMethodDescriptor", "parameters": "(Method method)", "modifiers": "private", "return": "MethodDescriptor", "signature": "MethodDescriptor getMethodDescriptor(Method method)", "full_signature": "private MethodDescriptor getMethodDescriptor(Method method)", "class_method_signature": "TypeDescriptor.getMethodDescriptor(Method method)", "testcase": false, "constructor": false}, {"identifier": "hasField", "parameters": "(String fieldName)", "modifiers": "public", "return": "boolean", "signature": "boolean hasField(String fieldName)", "full_signature": "public boolean hasField(String fieldName)", "class_method_signature": "TypeDescriptor.hasField(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(String name)", "modifiers": "public", "return": "FieldDescriptor", "signature": "FieldDescriptor getField(String name)", "full_signature": "public FieldDescriptor getField(String name)", "class_method_signature": "TypeDescriptor.getField(String name)", "testcase": false, "constructor": false}, {"identifier": "resolveGenericParameter", "parameters": "(Class<?> genericClass, int genericParam)", "modifiers": "public", "return": "TypeDescriptor", "signature": "TypeDescriptor resolveGenericParameter(Class<?> genericClass, int genericParam)", "full_signature": "public TypeDescriptor resolveGenericParameter(Class<?> genericClass, int genericParam)", "class_method_signature": "TypeDescriptor.resolveGenericParameter(Class<?> genericClass, int genericParam)", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getRawType()", "full_signature": "public Class<?> getRawType()", "class_method_signature": "TypeDescriptor.getRawType()", "testcase": false, "constructor": false}, {"identifier": "getTypeToken", "parameters": "()", "modifiers": "public", "return": "TypeToken<?>", "signature": "TypeToken<?> getTypeToken()", "full_signature": "public TypeToken<?> getTypeToken()", "class_method_signature": "TypeDescriptor.getTypeToken()", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveOrWrapper", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPrimitiveOrWrapper()", "full_signature": "public boolean isPrimitiveOrWrapper()", "class_method_signature": "TypeDescriptor.isPrimitiveOrWrapper()", "testcase": false, "constructor": false}, {"identifier": "isSuperTypeOf", "parameters": "(TypeDescriptor type)", "modifiers": "public", "return": "boolean", "signature": "boolean isSuperTypeOf(TypeDescriptor type)", "full_signature": "public boolean isSuperTypeOf(TypeDescriptor type)", "class_method_signature": "TypeDescriptor.isSuperTypeOf(TypeDescriptor type)", "testcase": false, "constructor": false}, {"identifier": "isSuperTypeOf", "parameters": "(Class<?> clazz)", "modifiers": "public", "return": "boolean", "signature": "boolean isSuperTypeOf(Class<?> clazz)", "full_signature": "public boolean isSuperTypeOf(Class<?> clazz)", "class_method_signature": "TypeDescriptor.isSuperTypeOf(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isSubTypeOf", "parameters": "(TypeDescriptor type)", "modifiers": "public", "return": "boolean", "signature": "boolean isSubTypeOf(TypeDescriptor type)", "full_signature": "public boolean isSubTypeOf(TypeDescriptor type)", "class_method_signature": "TypeDescriptor.isSubTypeOf(TypeDescriptor type)", "testcase": false, "constructor": false}, {"identifier": "isSubTypeOf", "parameters": "(Class<?> clazz)", "modifiers": "public", "return": "boolean", "signature": "boolean isSubTypeOf(Class<?> clazz)", "full_signature": "public boolean isSubTypeOf(Class<?> clazz)", "class_method_signature": "TypeDescriptor.isSubTypeOf(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isEnum", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnum()", "full_signature": "public boolean isEnum()", "class_method_signature": "TypeDescriptor.isEnum()", "testcase": false, "constructor": false}, {"identifier": "getDefaultConstructor", "parameters": "()", "modifiers": "public", "return": "ConstructorDescriptor", "signature": "ConstructorDescriptor getDefaultConstructor()", "full_signature": "public ConstructorDescriptor getDefaultConstructor()", "class_method_signature": "TypeDescriptor.getDefaultConstructor()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object newInstance()", "full_signature": "public Object newInstance()", "class_method_signature": "TypeDescriptor.newInstance()", "testcase": false, "constructor": false}, {"identifier": "getTypeDescriptors", "parameters": "()", "modifiers": "public", "return": "TypeDescriptors", "signature": "TypeDescriptors getTypeDescriptors()", "full_signature": "public TypeDescriptors getTypeDescriptors()", "class_method_signature": "TypeDescriptor.getTypeDescriptors()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public final boolean equals(Object obj)", "class_method_signature": "TypeDescriptor.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "TypeDescriptor.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TypeDescriptor.toString()", "testcase": false, "constructor": false}, {"identifier": "collectFields", "parameters": "(Class<?> clazz, Map<String, FieldDescriptor> allFields)", "modifiers": "private", "return": "void", "signature": "void collectFields(Class<?> clazz, Map<String, FieldDescriptor> allFields)", "full_signature": "private void collectFields(Class<?> clazz, Map<String, FieldDescriptor> allFields)", "class_method_signature": "TypeDescriptor.collectFields(Class<?> clazz, Map<String, FieldDescriptor> allFields)", "testcase": false, "constructor": false}, {"identifier": "collectMethods", "parameters": "(Class<?> clazz, Map<MethodSignature, MethodDescriptor> allMethods)", "modifiers": "private", "return": "void", "signature": "void collectMethods(Class<?> clazz, Map<MethodSignature, MethodDescriptor> allMethods)", "full_signature": "private void collectMethods(Class<?> clazz, Map<MethodSignature, MethodDescriptor> allMethods)", "class_method_signature": "TypeDescriptor.collectMethods(Class<?> clazz, Map<MethodSignature, MethodDescriptor> allMethods)", "testcase": false, "constructor": false}, {"identifier": "isAbstract", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAbstract()", "full_signature": "public boolean isAbstract()", "class_method_signature": "TypeDescriptor.isAbstract()", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isArray()", "full_signature": "public boolean isArray()", "class_method_signature": "TypeDescriptor.isArray()", "testcase": false, "constructor": false}, {"identifier": "getComponentType", "parameters": "()", "modifiers": "public", "return": "TypeDescriptor", "signature": "TypeDescriptor getComponentType()", "full_signature": "public TypeDescriptor getComponentType()", "class_method_signature": "TypeDescriptor.getComponentType()", "testcase": false, "constructor": false}], "file": "javersion-reflect/src/main/java/org/javersion/reflect/TypeDescriptor.java"}, "focal_method": {"identifier": "getFields", "parameters": "()", "modifiers": "public", "return": "Map<String, FieldDescriptor>", "body": "public Map<String, FieldDescriptor> getFields() {\n        Map<String, FieldDescriptor> result = new HashMap<>();\n        collectFields(typeToken.getRawType(), result);\n        return ImmutableSortedMap.copyOf(result);\n    }", "signature": "Map<String, FieldDescriptor> getFields()", "full_signature": "public Map<String, FieldDescriptor> getFields()", "class_method_signature": "TypeDescriptor.getFields()", "testcase": false, "constructor": false, "invocations": ["collectFields", "getRawType", "copyOf"]}, "repository": {"repo_id": 13512175, "url": "https://github.com/ssaarela/javersion", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 42, "size": 2109, "license": "licensed"}}