{"test_class": {"identifier": "CheckTest", "superclass": "", "interfaces": "", "fields": [], "file": "javersion-util/src/test/java/org/javersion/util/CheckTest.java"}, "test_case": {"identifier": "notNullOrEmptyMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void notNullOrEmptyMap() {\n        Map<String, String> input = com.google.common.collect.ImmutableMap.of(\"key\", \"value\");\n        Map<String, String> result = Check.notNullOrEmpty(input, \"field\");\n        assertThat(result).isEqualTo(input);\n    }", "signature": "void notNullOrEmptyMap()", "full_signature": "@Test public void notNullOrEmptyMap()", "class_method_signature": "CheckTest.notNullOrEmptyMap()", "testcase": true, "constructor": false, "invocations": ["of", "notNullOrEmpty", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "Check", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String NOT_NULL_FMT = \"%s should not be null\";", "modifier": "public static final", "type": "String", "declarator": "NOT_NULL_FMT = \"%s should not be null\"", "var_name": "NOT_NULL_FMT"}, {"original_string": "public static final String NOT_EMPTY_FMT = \"%s should not be empty\";", "modifier": "public static final", "type": "String", "declarator": "NOT_EMPTY_FMT = \"%s should not be empty\"", "var_name": "NOT_EMPTY_FMT"}, {"original_string": "public static final Predicate<Boolean> IS_TRUE = v -> v;", "modifier": "public static final", "type": "Predicate<Boolean>", "declarator": "IS_TRUE = v -> v", "var_name": "IS_TRUE"}, {"original_string": "public static final Predicate<Object> NOT_NULL = v -> v != null;", "modifier": "public static final", "type": "Predicate<Object>", "declarator": "NOT_NULL = v -> v != null", "var_name": "NOT_NULL"}, {"original_string": "public static final Predicate<String> NOT_EMPTY_STRING = s -> !s.isEmpty();", "modifier": "public static final", "type": "Predicate<String>", "declarator": "NOT_EMPTY_STRING = s -> !s.isEmpty()", "var_name": "NOT_EMPTY_STRING"}, {"original_string": "public static final Predicate<Iterable<?>> NOT_EMPTY_ITERABLE = i -> i.iterator().hasNext();", "modifier": "public static final", "type": "Predicate<Iterable<?>>", "declarator": "NOT_EMPTY_ITERABLE = i -> i.iterator().hasNext()", "var_name": "NOT_EMPTY_ITERABLE"}, {"original_string": "public static final Predicate<Collection<?>> NOT_EMPTY_COLLECTION = c -> !c.isEmpty();", "modifier": "public static final", "type": "Predicate<Collection<?>>", "declarator": "NOT_EMPTY_COLLECTION = c -> !c.isEmpty()", "var_name": "NOT_EMPTY_COLLECTION"}, {"original_string": "public static final Predicate<Map<?, ?>> NOT_EMPTY_MAP = m -> !m.isEmpty();", "modifier": "public static final", "type": "Predicate<Map<?, ?>>", "declarator": "NOT_EMPTY_MAP = m -> !m.isEmpty()", "var_name": "NOT_EMPTY_MAP"}], "methods": [{"identifier": "Check", "parameters": "()", "modifiers": "private", "return": "", "signature": " Check()", "full_signature": "private  Check()", "class_method_signature": "Check.Check()", "testcase": false, "constructor": true}, {"identifier": "notNull", "parameters": "(T object, String fieldName)", "modifiers": "@Nonnull public static", "return": "T", "signature": "T notNull(T object, String fieldName)", "full_signature": "@Nonnull public static T notNull(T object, String fieldName)", "class_method_signature": "Check.notNull(T object, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNullOrEmpty", "parameters": "(String string, String fieldName)", "modifiers": "@Nonnull public static", "return": "String", "signature": "String notNullOrEmpty(String string, String fieldName)", "full_signature": "@Nonnull public static String notNullOrEmpty(String string, String fieldName)", "class_method_signature": "Check.notNullOrEmpty(String string, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNullOrEmpty", "parameters": "(I iterable, String fieldName)", "modifiers": "@Nonnull public static", "return": "I", "signature": "I notNullOrEmpty(I iterable, String fieldName)", "full_signature": "@Nonnull public static I notNullOrEmpty(I iterable, String fieldName)", "class_method_signature": "Check.notNullOrEmpty(I iterable, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNullOrEmpty", "parameters": "(C collection, String fieldName)", "modifiers": "@Nonnull public static", "return": "C", "signature": "C notNullOrEmpty(C collection, String fieldName)", "full_signature": "@Nonnull public static C notNullOrEmpty(C collection, String fieldName)", "class_method_signature": "Check.notNullOrEmpty(C collection, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNullOrEmpty", "parameters": "(M map, String fieldName)", "modifiers": "@Nonnull public static", "return": "M", "signature": "M notNullOrEmpty(M map, String fieldName)", "full_signature": "@Nonnull public static M notNullOrEmpty(M map, String fieldName)", "class_method_signature": "Check.notNullOrEmpty(M map, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(boolean expression, String message)", "modifiers": "public static", "return": "void", "signature": "void that(boolean expression, String message)", "full_signature": "public static void that(boolean expression, String message)", "class_method_signature": "Check.that(boolean expression, String message)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(boolean expression, String messageFormat, Object arg1)", "modifiers": "public static", "return": "void", "signature": "void that(boolean expression, String messageFormat, Object arg1)", "full_signature": "public static void that(boolean expression, String messageFormat, Object arg1)", "class_method_signature": "Check.that(boolean expression, String messageFormat, Object arg1)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(boolean expression, String messageFormat, Object arg1, Object arg2)", "modifiers": "public static", "return": "void", "signature": "void that(boolean expression, String messageFormat, Object arg1, Object arg2)", "full_signature": "public static void that(boolean expression, String messageFormat, Object arg1, Object arg2)", "class_method_signature": "Check.that(boolean expression, String messageFormat, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(boolean expression, String messageFormat, Object arg1, Object arg2, Object arg3, Object... rest)", "modifiers": "public static", "return": "void", "signature": "void that(boolean expression, String messageFormat, Object arg1, Object arg2, Object arg3, Object... rest)", "full_signature": "public static void that(boolean expression, String messageFormat, Object arg1, Object arg2, Object arg3, Object... rest)", "class_method_signature": "Check.that(boolean expression, String messageFormat, Object arg1, Object arg2, Object arg3, Object... rest)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(T value, Predicate<? super T> predicate, String message)", "modifiers": "public static", "return": "T", "signature": "T that(T value, Predicate<? super T> predicate, String message)", "full_signature": "public static T that(T value, Predicate<? super T> predicate, String message)", "class_method_signature": "Check.that(T value, Predicate<? super T> predicate, String message)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(T value, Predicate<? super T> predicate, String messageFormat, Object arg1)", "modifiers": "public static", "return": "T", "signature": "T that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1)", "full_signature": "public static T that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1)", "class_method_signature": "Check.that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(T value, Predicate<? super T> predicate, String messageFormat, Object arg1, Object arg2)", "modifiers": "public static", "return": "T", "signature": "T that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1, Object arg2)", "full_signature": "public static T that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1, Object arg2)", "class_method_signature": "Check.that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1, Object arg2)", "testcase": false, "constructor": false}, {"identifier": "that", "parameters": "(T value, Predicate<? super T> predicate, String messageFormat, Object arg1, Object arg2, Object arg3, Object... rest)", "modifiers": "public static", "return": "T", "signature": "T that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1, Object arg2, Object arg3, Object... rest)", "full_signature": "public static T that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1, Object arg2, Object arg3, Object... rest)", "class_method_signature": "Check.that(T value, Predicate<? super T> predicate, String messageFormat, Object arg1, Object arg2, Object arg3, Object... rest)", "testcase": false, "constructor": false}], "file": "javersion-util/src/main/java/org/javersion/util/Check.java"}, "focal_method": {"identifier": "notNullOrEmpty", "parameters": "(String string, String fieldName)", "modifiers": "@Nonnull public static", "return": "String", "body": "@Nonnull\n    public static String notNullOrEmpty(String string, String fieldName) {\n        notNull(string, fieldName);\n        return that(string, NOT_EMPTY_STRING, NOT_EMPTY_FMT, fieldName);\n    }", "signature": "String notNullOrEmpty(String string, String fieldName)", "full_signature": "@Nonnull public static String notNullOrEmpty(String string, String fieldName)", "class_method_signature": "Check.notNullOrEmpty(String string, String fieldName)", "testcase": false, "constructor": false, "invocations": ["notNull", "that"]}, "repository": {"repo_id": 13512175, "url": "https://github.com/ssaarela/javersion", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 42, "size": 2109, "license": "licensed"}}