{"test_class": {"identifier": "SimpleVersionGraphTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<Revision> EMPTY_REVISIONS = setOf();", "modifier": "private static final", "type": "Set<Revision>", "declarator": "EMPTY_REVISIONS = setOf()", "var_name": "EMPTY_REVISIONS"}, {"original_string": "private static final Map<String, String> EMPTY_PROPERTIES = mapOf();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "EMPTY_PROPERTIES = mapOf()", "var_name": "EMPTY_PROPERTIES"}, {"original_string": "private static final String ALT_BRANCH = \"alt-branch\";", "modifier": "private static final", "type": "String", "declarator": "ALT_BRANCH = \"alt-branch\"", "var_name": "ALT_BRANCH"}, {"original_string": "private static final Revision[] REV = new Revision[50];", "modifier": "private static final", "type": "Revision[]", "declarator": "REV = new Revision[50]", "var_name": "REV"}, {"original_string": "public static List<VersionExpectation> EXPECTATIONS;", "modifier": "public static", "type": "List<VersionExpectation>", "declarator": "EXPECTATIONS", "var_name": "EXPECTATIONS"}, {"original_string": "public static Function<VersionExpectation, SimpleVersion> getVersion = new Function<VersionExpectation, SimpleVersion>() {\n        @Override\n        public SimpleVersion apply(VersionExpectation input) {\n            return input.version;\n        }\n    };", "modifier": "public static", "type": "Function<VersionExpectation, SimpleVersion>", "declarator": "getVersion = new Function<VersionExpectation, SimpleVersion>() {\n        @Override\n        public SimpleVersion apply(VersionExpectation input) {\n            return input.version;\n        }\n    }", "var_name": "getVersion"}], "file": "javersion-core/src/test/java/org/javersion/core/SimpleVersionGraphTest.java"}, "test_case": {"identifier": "duplicate_revision_throws_exception", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void duplicate_revision_throws_exception() {\n        Revision rev = new Revision();\n        SimpleVersion v1 = builder(rev).build();\n        SimpleVersion v2 = new Builder(rev).build();\n\n        init(asList(v1, v2));\n    }", "signature": "void duplicate_revision_throws_exception()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void duplicate_revision_throws_exception()", "class_method_signature": "SimpleVersionGraphTest.duplicate_revision_throws_exception()", "testcase": true, "constructor": false, "invocations": ["build", "builder", "build", "init", "asList"]}, "focal_class": {"identifier": "SimpleVersionGraph", "superclass": "extends AbstractVersionGraph<String, String, String, SimpleVersionGraph, SimpleVersionGraph.Builder>", "interfaces": "", "fields": [], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "public static", "return": "SimpleVersionGraph", "signature": "SimpleVersionGraph init()", "full_signature": "public static SimpleVersionGraph init()", "class_method_signature": "SimpleVersionGraph.init()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Version<String, String, String>... versions)", "modifiers": "public static", "return": "SimpleVersionGraph", "signature": "SimpleVersionGraph init(Version<String, String, String>... versions)", "full_signature": "public static SimpleVersionGraph init(Version<String, String, String>... versions)", "class_method_signature": "SimpleVersionGraph.init(Version<String, String, String>... versions)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Iterable<? extends Version<String, String, String>> versions)", "modifiers": "public static", "return": "SimpleVersionGraph", "signature": "SimpleVersionGraph init(Iterable<? extends Version<String, String, String>> versions)", "full_signature": "public static SimpleVersionGraph init(Iterable<? extends Version<String, String, String>> versions)", "class_method_signature": "SimpleVersionGraph.init(Iterable<? extends Version<String, String, String>> versions)", "testcase": false, "constructor": false}, {"identifier": "SimpleVersionGraph", "parameters": "()", "modifiers": "private", "return": "", "signature": " SimpleVersionGraph()", "full_signature": "private  SimpleVersionGraph()", "class_method_signature": "SimpleVersionGraph.SimpleVersionGraph()", "testcase": false, "constructor": true}, {"identifier": "SimpleVersionGraph", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " SimpleVersionGraph(Builder builder)", "full_signature": "private  SimpleVersionGraph(Builder builder)", "class_method_signature": "SimpleVersionGraph.SimpleVersionGraph(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "@Override protected Builder newBuilder()", "class_method_signature": "SimpleVersionGraph.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "newEmptyBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "Builder", "signature": "Builder newEmptyBuilder()", "full_signature": "@Override protected Builder newEmptyBuilder()", "class_method_signature": "SimpleVersionGraph.newEmptyBuilder()", "testcase": false, "constructor": false}], "file": "javersion-core/src/main/java/org/javersion/core/SimpleVersionGraph.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "public static", "return": "SimpleVersionGraph", "body": "public static SimpleVersionGraph init() {\n        return new SimpleVersionGraph();\n    }", "signature": "SimpleVersionGraph init()", "full_signature": "public static SimpleVersionGraph init()", "class_method_signature": "SimpleVersionGraph.init()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 13512175, "url": "https://github.com/ssaarela/javersion", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 42, "size": 2109, "license": "licensed"}}