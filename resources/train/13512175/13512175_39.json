{"test_class": {"identifier": "OptimizedGraphTest", "superclass": "", "interfaces": "", "fields": [], "file": "javersion-core/src/test/java/org/javersion/core/OptimizedGraphTest.java"}, "test_case": {"identifier": "performance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void performance() {\n        int COUNT = 10000;\n        Set<Revision> revisions = Sets.newHashSetWithExpectedSize(COUNT);\n        SimpleVersionGraph versionGraph = SimpleVersionGraph.init();\n        Revision prev = null;\n        for (int i=0; i<COUNT;i++) {\n            SimpleVersion.Builder versionBuilder = new SimpleVersion.Builder()\n                    .changeset(mapOf(\"key\", Integer.toString(i)));\n            if (prev != null) {\n                versionBuilder.parents(prev);\n            }\n            versionGraph = versionGraph.commit(versionBuilder.build());\n            prev = versionGraph.getTip().getRevision();\n            revisions.add(prev);\n        }\n        System.out.println(\"begin \" + COUNT);\n\n        long time, ts = System.currentTimeMillis();\n        SimpleVersionGraph optimizedGraph = versionGraph.optimize(versionGraph.getTip().revision).getGraph();\n        time = System.currentTimeMillis() - ts;\n        System.out.println(\"keep tip only: \" + time);\n\n        assertThat(optimizedGraph.getTip().getProperties()).isEqualTo(mapOf(\"key\", Integer.toString(COUNT - 1)));\n        assertThat(Lists.newArrayList(optimizedGraph.getVersionNodes())).hasSize(1);\n\n        ts = System.currentTimeMillis();\n        optimizedGraph = versionGraph.optimize(revisions).getGraph();\n        time = System.currentTimeMillis() - ts;\n        System.out.println(\"keep all revisions: \" + time);\n\n        assertThat(optimizedGraph.getTip().getProperties()).isEqualTo(mapOf(\"key\", Integer.toString(COUNT - 1)));\n        assertThat(Lists.newArrayList(optimizedGraph.getVersionNodes())).hasSize(COUNT);\n\n        System.out.flush();\n    }", "signature": "void performance()", "full_signature": "@Test public void performance()", "class_method_signature": "OptimizedGraphTest.performance()", "testcase": true, "constructor": false, "invocations": ["newHashSetWithExpectedSize", "init", "changeset", "mapOf", "toString", "parents", "commit", "build", "getRevision", "getTip", "add", "println", "currentTimeMillis", "getGraph", "optimize", "getTip", "currentTimeMillis", "println", "isEqualTo", "assertThat", "getProperties", "getTip", "mapOf", "toString", "hasSize", "assertThat", "newArrayList", "getVersionNodes", "currentTimeMillis", "getGraph", "optimize", "currentTimeMillis", "println", "isEqualTo", "assertThat", "getProperties", "getTip", "mapOf", "toString", "hasSize", "assertThat", "newArrayList", "getVersionNodes", "flush"]}, "focal_class": {"identifier": "OptimizedGraph", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final G graph;", "modifier": "private final", "type": "G", "declarator": "graph", "var_name": "graph"}, {"original_string": "private final List<Revision> keptRevisions;", "modifier": "private final", "type": "List<Revision>", "declarator": "keptRevisions", "var_name": "keptRevisions"}, {"original_string": "private final List<Revision> squashedRevisions;", "modifier": "private final", "type": "List<Revision>", "declarator": "squashedRevisions", "var_name": "squashedRevisions"}], "methods": [{"identifier": "OptimizedGraph", "parameters": "(G graph, List<Revision> keptRevisions, List<Revision> squashedRevisions)", "modifiers": "", "return": "", "signature": " OptimizedGraph(G graph, List<Revision> keptRevisions, List<Revision> squashedRevisions)", "full_signature": "  OptimizedGraph(G graph, List<Revision> keptRevisions, List<Revision> squashedRevisions)", "class_method_signature": "OptimizedGraph.OptimizedGraph(G graph, List<Revision> keptRevisions, List<Revision> squashedRevisions)", "testcase": false, "constructor": true}, {"identifier": "getGraph", "parameters": "()", "modifiers": "public", "return": "G", "signature": "G getGraph()", "full_signature": "public G getGraph()", "class_method_signature": "OptimizedGraph.getGraph()", "testcase": false, "constructor": false}, {"identifier": "getSquashedRevisions", "parameters": "()", "modifiers": "public", "return": "List<Revision>", "signature": "List<Revision> getSquashedRevisions()", "full_signature": "public List<Revision> getSquashedRevisions()", "class_method_signature": "OptimizedGraph.getSquashedRevisions()", "testcase": false, "constructor": false}, {"identifier": "getKeptRevisions", "parameters": "()", "modifiers": "public", "return": "List<Revision>", "signature": "List<Revision> getKeptRevisions()", "full_signature": "public List<Revision> getKeptRevisions()", "class_method_signature": "OptimizedGraph.getKeptRevisions()", "testcase": false, "constructor": false}], "file": "javersion-core/src/main/java/org/javersion/core/OptimizedGraph.java"}, "focal_method": {"identifier": "getGraph", "parameters": "()", "modifiers": "public", "return": "G", "body": "public G getGraph() {\n        return graph;\n    }", "signature": "G getGraph()", "full_signature": "public G getGraph()", "class_method_signature": "OptimizedGraph.getGraph()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 13512175, "url": "https://github.com/ssaarela/javersion", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 42, "size": 2109, "license": "licensed"}}