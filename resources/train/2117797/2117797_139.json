{"test_class": {"identifier": "YAMLConverterTest", "superclass": "extends MockTestBase", "interfaces": "", "fields": [{"original_string": "private static final String CRYPTIC_MESSAGE = \"Hello SpaceBoy ! This is Ground Control. Transmission test : 0123456789. You'll get it on base 64.\";", "modifier": "private static final", "type": "String", "declarator": "CRYPTIC_MESSAGE = \"Hello SpaceBoy ! This is Ground Control. Transmission test : 0123456789. You'll get it on base 64.\"", "var_name": "CRYPTIC_MESSAGE"}, {"original_string": "private static final byte[] CRYPTIC_MESSAGE_AS_BYTES = YAMLConverterTest.CRYPTIC_MESSAGE.getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "CRYPTIC_MESSAGE_AS_BYTES = YAMLConverterTest.CRYPTIC_MESSAGE.getBytes()", "var_name": "CRYPTIC_MESSAGE_AS_BYTES"}, {"original_string": "private static final String CRYPTIC_MESSAGE_AS_BASE64 = new String(SafeBase64.encode(YAMLConverterTest.CRYPTIC_MESSAGE_AS_BYTES, true));", "modifier": "private static final", "type": "String", "declarator": "CRYPTIC_MESSAGE_AS_BASE64 = new String(SafeBase64.encode(YAMLConverterTest.CRYPTIC_MESSAGE_AS_BYTES, true))", "var_name": "CRYPTIC_MESSAGE_AS_BASE64"}, {"original_string": "private static final String strYAMLTest = \"date: !!timestamp 2002-02-02T22:22:22Z\\n\" + \"version: 1\\n\" + \"stateful: !!bool true\\n\" + \"pi: 3.14116\\n\" + \"empty: \\\"\\\"\\n\" + \"null: \\n\" + \"mainactor: \\n\" + \"    - id: \\\"007\\\"\\n\" + \"actors: \\n\" + \"    - \\\"laurel\\\"\\n\" + \"    - \\\"hardy\\\"\\n\" + \"    - \\\"john\\\"\\n\" + \"bdata: !!binary SGVsbG8gU3BhY2VCb3kgISBUaGlzIGlzIEdyb3VuZCBDb250cm9sLiBUcmFuc21pc3Npb24gdGVzdCA6IDAxMjM0NTY3ODkuIFlvdSdsbCBnZXQgaXQgb24gYmFzZSA2NC4=\\n\" + \"frac: 0.3333333333333333\\n\" + \"hex: 255\\n\" + \"int_val: 7927940\\n\" + \"null_vall: ~\\n\" + \"sequence: \\n\" + \"    - annotation: {state: \\\"speaking\\\"}\\n\" + \"    - directive: {settings: {snd.btn.2: \\\"blonk\\\"}, disable: [\\\"earMove\\\"]}\\n\"\n\t\t\t+ \"    - scene: {genre: net.violet.tts.en, text: \\\"\\\\tHello \\\\\\\"Space Boy\\\\\\\"\\\\nCome Here !\\\", options: {voice: \\\"\\\"}}\\n\";", "modifier": "private static final", "type": "String", "declarator": "strYAMLTest = \"date: !!timestamp 2002-02-02T22:22:22Z\\n\" + \"version: 1\\n\" + \"stateful: !!bool true\\n\" + \"pi: 3.14116\\n\" + \"empty: \\\"\\\"\\n\" + \"null: \\n\" + \"mainactor: \\n\" + \"    - id: \\\"007\\\"\\n\" + \"actors: \\n\" + \"    - \\\"laurel\\\"\\n\" + \"    - \\\"hardy\\\"\\n\" + \"    - \\\"john\\\"\\n\" + \"bdata: !!binary SGVsbG8gU3BhY2VCb3kgISBUaGlzIGlzIEdyb3VuZCBDb250cm9sLiBUcmFuc21pc3Npb24gdGVzdCA6IDAxMjM0NTY3ODkuIFlvdSdsbCBnZXQgaXQgb24gYmFzZSA2NC4=\\n\" + \"frac: 0.3333333333333333\\n\" + \"hex: 255\\n\" + \"int_val: 7927940\\n\" + \"null_vall: ~\\n\" + \"sequence: \\n\" + \"    - annotation: {state: \\\"speaking\\\"}\\n\" + \"    - directive: {settings: {snd.btn.2: \\\"blonk\\\"}, disable: [\\\"earMove\\\"]}\\n\"\n\t\t\t+ \"    - scene: {genre: net.violet.tts.en, text: \\\"\\\\tHello \\\\\\\"Space Boy\\\\\\\"\\\\nCome Here !\\\", options: {voice: \\\"\\\"}}\\n\"", "var_name": "strYAMLTest"}, {"original_string": "private static final String YAML_ACTORS_LIST = \"- \\\"laurel\\\"\\n\" + \"- \\\"hardy\\\"\\n\" + \"- \\\"john\\\"\\n\";", "modifier": "private static final", "type": "String", "declarator": "YAML_ACTORS_LIST = \"- \\\"laurel\\\"\\n\" + \"- \\\"hardy\\\"\\n\" + \"- \\\"john\\\"\\n\"", "var_name": "YAML_ACTORS_LIST"}], "file": "net.violet.platform/src/test/java/net/violet/platform/api/converters/YAMLConverterTest.java"}, "test_case": {"identifier": "testconvertBinaryToYAML", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testconvertBinaryToYAML() throws ConversionException {\n\t\tfinal Converter yamlConverter = ConverterFactory.YAML;\n\t\tfinal String YAMLBinary = yamlConverter.convertTo(YAMLConverterTest.CRYPTIC_MESSAGE_AS_BYTES);\n\t\tSystem.out.println(YAMLBinary);\n\t}", "signature": "void testconvertBinaryToYAML()", "full_signature": "@Test public void testconvertBinaryToYAML()", "class_method_signature": "YAMLConverterTest.testconvertBinaryToYAML()", "testcase": true, "constructor": false, "invocations": ["convertTo", "println"]}, "focal_class": {"identifier": "YAMLConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(YAMLConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(YAMLConverter.class)", "var_name": "LOGGER"}, {"original_string": "public static final String YAML_FORMAT = \"yaml\";", "modifier": "public static final", "type": "String", "declarator": "YAML_FORMAT = \"yaml\"", "var_name": "YAML_FORMAT"}, {"original_string": "private static final Yaml YAML;", "modifier": "private static final", "type": "Yaml", "declarator": "YAML", "var_name": "YAML"}], "methods": [{"identifier": "getFormatName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFormatName()", "full_signature": "public String getFormatName()", "class_method_signature": "YAMLConverter.getFormatName()", "testcase": false, "constructor": false}, {"identifier": "convertFrom", "parameters": "(String inYAMLString)", "modifiers": "public", "return": "T", "signature": "T convertFrom(String inYAMLString)", "full_signature": "public T convertFrom(String inYAMLString)", "class_method_signature": "YAMLConverter.convertFrom(String inYAMLString)", "testcase": false, "constructor": false}, {"identifier": "convertFrom", "parameters": "(Reader inReader)", "modifiers": "public", "return": "T", "signature": "T convertFrom(Reader inReader)", "full_signature": "public T convertFrom(Reader inReader)", "class_method_signature": "YAMLConverter.convertFrom(Reader inReader)", "testcase": false, "constructor": false}, {"identifier": "convertTo", "parameters": "(Object inPojo)", "modifiers": "public", "return": "String", "signature": "String convertTo(Object inPojo)", "full_signature": "public String convertTo(Object inPojo)", "class_method_signature": "YAMLConverter.convertTo(Object inPojo)", "testcase": false, "constructor": false}, {"identifier": "convertTo", "parameters": "(Object inPojo, Writer file_name)", "modifiers": "public", "return": "void", "signature": "void convertTo(Object inPojo, Writer file_name)", "full_signature": "public void convertTo(Object inPojo, Writer file_name)", "class_method_signature": "YAMLConverter.convertTo(Object inPojo, Writer file_name)", "testcase": false, "constructor": false}, {"identifier": "convertTo", "parameters": "(Object inPojo, boolean inOption)", "modifiers": "public", "return": "String", "signature": "String convertTo(Object inPojo, boolean inOption)", "full_signature": "public String convertTo(Object inPojo, boolean inOption)", "class_method_signature": "YAMLConverter.convertTo(Object inPojo, boolean inOption)", "testcase": false, "constructor": false}], "file": "net.violet.platform/src/main/java/net/violet/platform/api/converters/YAMLConverter.java"}, "focal_method": {"identifier": "convertTo", "parameters": "(Object inPojo)", "modifiers": "public", "return": "String", "body": "public String convertTo(Object inPojo) throws ConversionException {\n\t\ttry {\n\t\t\treturn YAMLConverter.YAML.dump(inPojo);\n\t\t} catch (final Exception e) {\n\t\t\tfinal String strErrorMessage = \"Conversion of \" + inPojo + \" (\" + inPojo.getClass().getName() + \") to YAML failed !\\n\" + e.getMessage();\n\t\t\tYAMLConverter.LOGGER.error(strErrorMessage, e);\n\t\t\tthrow new ConversionException(e, strErrorMessage);\n\t\t}\n\t}", "signature": "String convertTo(Object inPojo)", "full_signature": "public String convertTo(Object inPojo)", "class_method_signature": "YAMLConverter.convertTo(Object inPojo)", "testcase": false, "constructor": false, "invocations": ["dump", "getName", "getClass", "getMessage", "error"]}, "repository": {"repo_id": 2117797, "url": "https://github.com/nguillaumin/nabaztag-server", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 17, "size": 20908, "license": "licensed"}}