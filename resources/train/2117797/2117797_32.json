{"test_class": {"identifier": "AirMessageFactoryTest", "superclass": "extends MockTestBase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(AirMessageFactoryTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(AirMessageFactoryTest.class)", "var_name": "LOGGER"}], "file": "net.violet.platform/src/test/java/net/violet/platform/message/application/factories/AirMessageFactoryTest.java"}, "test_case": {"identifier": "getBadMessageTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getBadMessageTest() {\n\t\tfinal Subscription theSubscription = new SubscriptionMock(1, Factories.APPLICATION.findByName(\"net.violet.air\"), getKowalskyObject());\n\n\t\tfinal Source source = new SourceMock(8205, \"air.paris.today\", 9);\n\n\t\t// Creates the settings\n\t\tfinal Map<String, Object> theSettings = new HashMap<String, Object>();\n\t\ttheSettings.put(AirHandler.LANGUAGE_SETTING, \"fr-FR\");\n\t\ttheSettings.put(AirHandler.SOURCE_SETTING, source.getSource_path());\n\t\ttheSubscription.setSettings(theSettings);\n\n\t\tfinal CCalendar theDeliveryDate = new CCalendar(false);\n\t\ttheDeliveryDate.setTimeMYSQL(\"08:00:00\");\n\n\t\tfinal AirMessageFactory factory = (AirMessageFactory) AbstractMessageFactory.getFactoryByApplication(theSubscription.getApplication());\n\n\t\ttry {\n\t\t\tfinal SubscriptionData theSubscriptionData = SubscriptionData.getData(theSubscription);\n\t\t\tfinal SubscriptionSchedulingData theScheduling = SubscriptionSchedulingData.create(theSubscriptionData, SchedulingType.SCHEDULING_TYPE.Ambiant);\n\t\t\tfinal Message2Send message = factory.getMessage(new MessageProcessUnit(theScheduling, theDeliveryDate, null) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void runWhenSuccessful() {\n\t\t\t\t}\n\t\t\t}).get(0);\n\n\t\t\tAssert.assertEquals(Constantes.QUEUE_TTL_SERVICE, message.getTTL());\n\t\t\tAssert.assertEquals(AirMessageFactory.TITLE, message.getTitle());\n\t\t\tAssert.assertEquals(Palette.RANDOM, message.getColorPal());\n\t\t\tAssert.assertEquals(theSubscriptionData, message.getSubscription());\n\t\t\tAssert.assertEquals(MessageSignature.AIR_SIGNATURE, message.getSignature());\n\t\t\tAssert.assertEquals(theSubscription.getObject(), message.getRecipient());\n\t\t\tAssert.assertEquals(JabberMessageFactory.IDLE_MODE, message.getMode());\n\t\t\tfinal Files[] theFiles = message.getBody();\n\t\t\tAssert.assertEquals(1, theFiles.length);\n\t\t\tAssert.assertEquals(\"broadcast/broad/config/air/fr/quality/bad.mp3\", theFiles[0].getPath());\n\n\t\t\tfinal MessageDraft messageDraft = message.generateMessageDraft();\n\t\t\tAssert.assertEquals(theDeliveryDate, messageDraft.getDeliveryDate());\n\n\t\t} catch (final Exception e) {\n\t\t\tAirMessageFactoryTest.LOGGER.fatal(e, e);\n\t\t\tAssert.fail(e.toString());\n\t\t}\n\t}", "signature": "void getBadMessageTest()", "full_signature": "@Test public void getBadMessageTest()", "class_method_signature": "AirMessageFactoryTest.getBadMessageTest()", "testcase": true, "constructor": false, "invocations": ["findByName", "getKowalskyObject", "put", "put", "getSource_path", "setSettings", "setTimeMYSQL", "getFactoryByApplication", "getApplication", "getData", "create", "get", "getMessage", "assertEquals", "getTTL", "assertEquals", "getTitle", "assertEquals", "getColorPal", "assertEquals", "getSubscription", "assertEquals", "getSignature", "assertEquals", "getObject", "getRecipient", "assertEquals", "getMode", "getBody", "assertEquals", "assertEquals", "getPath", "generateMessageDraft", "assertEquals", "getDeliveryDate", "fatal", "fail", "toString"]}, "focal_class": {"identifier": "AirMessageFactory", "superclass": "extends AbstractMessageFactory", "interfaces": "", "fields": [{"original_string": "protected static final String TITLE = \"Service Air\";", "modifier": "protected static final", "type": "String", "declarator": "TITLE = \"Service Air\"", "var_name": "TITLE"}], "methods": [{"identifier": "getMessage", "parameters": "(MessageProcessUnit inUnit)", "modifiers": "@Override public", "return": "List<Message2Send>", "signature": "List<Message2Send> getMessage(MessageProcessUnit inUnit)", "full_signature": "@Override public List<Message2Send> getMessage(MessageProcessUnit inUnit)", "class_method_signature": "AirMessageFactory.getMessage(MessageProcessUnit inUnit)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "@Override protected", "return": "Message.SOURCE", "signature": "Message.SOURCE getSource()", "full_signature": "@Override protected Message.SOURCE getSource()", "class_method_signature": "AirMessageFactory.getSource()", "testcase": false, "constructor": false}], "file": "net.violet.platform/src/main/java/net/violet/platform/message/application/factories/AirMessageFactory.java"}, "focal_method": {"identifier": "getMessage", "parameters": "(MessageProcessUnit inUnit)", "modifiers": "@Override public", "return": "List<Message2Send>", "body": "@Override\n\tpublic List<Message2Send> getMessage(MessageProcessUnit inUnit) {\n\n\t\treturn Collections.singletonList((Message2Send) new Message2Send(inUnit.get(), inUnit.getProcessConditioner()) {\n\n\t\t\t@Override\n\t\t\tprotected String getTitle() {\n\t\t\t\treturn AirMessageFactory.TITLE;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected MessageSignature getSignature() {\n\t\t\t\treturn MessageSignature.AIR_SIGNATURE;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected Files[] getBody() {\n\t\t\t\tfinal Map<String, Object> theSettings = getSubscription().getSettings();\n\n\t\t\t\tif ((theSettings != null) && !theSettings.isEmpty() && theSettings.containsKey(AirHandler.SOURCE_SETTING) && theSettings.containsKey(AirHandler.LANGUAGE_SETTING)) {\n\t\t\t\t\tfinal String sourcePath = theSettings.get(AirHandler.SOURCE_SETTING).toString();\n\t\t\t\t\tfinal Source source = Factories.SOURCE.findByPath(sourcePath);\n\n\t\t\t\t\tif (source != null) {\n\t\t\t\t\t\tfinal long val = source.getSource_val();\n\t\t\t\t\t\tfinal Lang theLang = Factories.LANG.findByIsoCode(theSettings.get(AirHandler.LANGUAGE_SETTING).toString());\n\t\t\t\t\t\tfinal STATES theState;\n\n\t\t\t\t\t\tif (val == 6) {\n\t\t\t\t\t\t\ttheState = AirMessageFactory.STATES.MIDDLE;\n\t\t\t\t\t\t} else if (val == 9) {\n\t\t\t\t\t\t\ttheState = AirMessageFactory.STATES.BAD;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttheState = AirMessageFactory.STATES.GOOD;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn new Files[] { Factories.CONFIG_FILES.findAllByServiceAndLang(SERVICES.AIR, theLang).get(theState.toString()).get(0).getFiles() };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t});\n\t}", "signature": "List<Message2Send> getMessage(MessageProcessUnit inUnit)", "full_signature": "@Override public List<Message2Send> getMessage(MessageProcessUnit inUnit)", "class_method_signature": "AirMessageFactory.getMessage(MessageProcessUnit inUnit)", "testcase": false, "constructor": false, "invocations": ["singletonList", "get", "getProcessConditioner", "getSettings", "getSubscription", "isEmpty", "containsKey", "containsKey", "toString", "get", "findByPath", "getSource_val", "findByIsoCode", "toString", "get", "getFiles", "get", "get", "findAllByServiceAndLang", "toString"]}, "repository": {"repo_id": 2117797, "url": "https://github.com/nguillaumin/nabaztag-server", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 17, "size": 20908, "license": "licensed"}}