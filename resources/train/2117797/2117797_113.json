{"test_class": {"identifier": "DailyHandlerTest", "superclass": "extends MockTestBase", "interfaces": "", "fields": [], "file": "net.violet.platform/src/test/java/net/violet/platform/schedulers/DailyHandlerTest.java"}, "test_case": {"identifier": "invalidDayTest", "parameters": "()", "modifiers": "@Test(expected = InvalidSettingException.class) public", "return": "void", "body": "@Test(expected = InvalidSettingException.class)\n\tpublic void invalidDayTest() throws MissingSettingException, InvalidSettingException {\n\t\tfinal VObjectData theObject = VObjectData.getData(getKowalskyObject());\n\n\t\tfinal Map<String, Object> settings = new HashMap<String, Object>();\n\t\tsettings.put(\"invalid\", null);\n\n\t\tnew DailyHandler().checkSettings(theObject, settings, null);\n\t}", "signature": "void invalidDayTest()", "full_signature": "@Test(expected = InvalidSettingException.class) public void invalidDayTest()", "class_method_signature": "DailyHandlerTest.invalidDayTest()", "testcase": true, "constructor": false, "invocations": ["getData", "getKowalskyObject", "put", "checkSettings"]}, "focal_class": {"identifier": "DailyHandler", "superclass": "", "interfaces": "implements SchedulingHandler", "fields": [], "methods": [{"identifier": "generateSettings", "parameters": "(VObjectData object, Map<String, Object> settings, String callerKey)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> generateSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "full_signature": "public Map<String, String> generateSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "class_method_signature": "DailyHandler.generateSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "testcase": false, "constructor": false}, {"identifier": "checkSettings", "parameters": "(VObjectData object, Map<String, Object> settings, String callerKey)", "modifiers": "public", "return": "void", "signature": "void checkSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "full_signature": "public void checkSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "class_method_signature": "DailyHandler.checkSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "testcase": false, "constructor": false}, {"identifier": "isAtomValid", "parameters": "(Object atom)", "modifiers": "protected", "return": "boolean", "signature": "boolean isAtomValid(Object atom)", "full_signature": "protected boolean isAtomValid(Object atom)", "class_method_signature": "DailyHandler.isAtomValid(Object atom)", "testcase": false, "constructor": false}, {"identifier": "generateSchedulingAtom", "parameters": "(Map<String, SubscriptionSchedulingSettingsData> settings, Weekday day)", "modifiers": "protected", "return": "SchedulingAtom", "signature": "SchedulingAtom generateSchedulingAtom(Map<String, SubscriptionSchedulingSettingsData> settings, Weekday day)", "full_signature": "protected SchedulingAtom generateSchedulingAtom(Map<String, SubscriptionSchedulingSettingsData> settings, Weekday day)", "class_method_signature": "DailyHandler.generateSchedulingAtom(Map<String, SubscriptionSchedulingSettingsData> settings, Weekday day)", "testcase": false, "constructor": false}, {"identifier": "deleteElements", "parameters": "(SubscriptionSchedulingData scheduling)", "modifiers": "public", "return": "void", "signature": "void deleteElements(SubscriptionSchedulingData scheduling)", "full_signature": "public void deleteElements(SubscriptionSchedulingData scheduling)", "class_method_signature": "DailyHandler.deleteElements(SubscriptionSchedulingData scheduling)", "testcase": false, "constructor": false}, {"identifier": "executeWhenDone", "parameters": "(SubscriptionSchedulingData scheduling)", "modifiers": "public", "return": "void", "signature": "void executeWhenDone(SubscriptionSchedulingData scheduling)", "full_signature": "public void executeWhenDone(SubscriptionSchedulingData scheduling)", "class_method_signature": "DailyHandler.executeWhenDone(SubscriptionSchedulingData scheduling)", "testcase": false, "constructor": false}, {"identifier": "getSchedulingInformation", "parameters": "(SubscriptionSchedulingData scheduling, APICaller caller)", "modifiers": "public", "return": "SchedulingInformationMap", "signature": "SchedulingInformationMap getSchedulingInformation(SubscriptionSchedulingData scheduling, APICaller caller)", "full_signature": "public SchedulingInformationMap getSchedulingInformation(SubscriptionSchedulingData scheduling, APICaller caller)", "class_method_signature": "DailyHandler.getSchedulingInformation(SubscriptionSchedulingData scheduling, APICaller caller)", "testcase": false, "constructor": false}], "file": "net.violet.platform/src/main/java/net/violet/platform/schedulers/DailyHandler.java"}, "focal_method": {"identifier": "checkSettings", "parameters": "(VObjectData object, Map<String, Object> settings, String callerKey)", "modifiers": "public", "return": "void", "body": "public void checkSettings(VObjectData object, Map<String, Object> settings, String callerKey) throws MissingSettingException, InvalidSettingException {\n\t\tif (settings.isEmpty()) {\n\t\t\tthrow new MissingSettingException(\"scheduling\");\n\t\t}\n\n\t\tfor (final Entry<String, Object> anEntry : settings.entrySet()) {\n\t\t\tif (!DailyHandler.Weekday.isValidLabel(anEntry.getKey())) {\n\t\t\t\tthrow new InvalidSettingException(\"day\", anEntry.getKey());\n\t\t\t}\n\n\t\t\tfinal Object atom = anEntry.getValue();\n\t\t\tif ((atom != null) && !isAtomValid(atom)) {\n\t\t\t\tthrow new InvalidSettingException(\"atom\", String.valueOf(atom));\n\t\t\t}\n\t\t}\n\n\t}", "signature": "void checkSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "full_signature": "public void checkSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "class_method_signature": "DailyHandler.checkSettings(VObjectData object, Map<String, Object> settings, String callerKey)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "entrySet", "isValidLabel", "getKey", "getKey", "getValue", "isAtomValid", "valueOf"]}, "repository": {"repo_id": 2117797, "url": "https://github.com/nguillaumin/nabaztag-server", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 17, "size": 20908, "license": "licensed"}}