{"test_class": {"identifier": "FeedsToolsTest", "superclass": "", "interfaces": "", "fields": [], "file": "net.violet.platform/src/test/java/net/violet/platform/feeds/FeedsToolsTest.java"}, "test_case": {"identifier": "extractLanguageTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void extractLanguageTest() {\n\t\tAssert.assertEquals(\"fr-FR\", FeedsTools.extractFeedLanguage(\"http://www.lesinrocks.com/xml/rss/podcast.xml\").getLang_iso_code());\n\t}", "signature": "void extractLanguageTest()", "full_signature": "@Test public void extractLanguageTest()", "class_method_signature": "FeedsToolsTest.extractLanguageTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getLang_iso_code", "extractFeedLanguage"]}, "focal_class": {"identifier": "FeedsTools", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern EXTENSION_MATCHER = Pattern.compile(\".*\\\\.m(?:p(?:3|4)|4a)$\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "EXTENSION_MATCHER = Pattern.compile(\".*\\\\.m(?:p(?:3|4)|4a)$\", Pattern.CASE_INSENSITIVE)", "var_name": "EXTENSION_MATCHER"}], "methods": [{"identifier": "extractEnclosureUrl", "parameters": "(SyndEntry entry)", "modifiers": "public static", "return": "String", "signature": "String extractEnclosureUrl(SyndEntry entry)", "full_signature": "public static String extractEnclosureUrl(SyndEntry entry)", "class_method_signature": "FeedsTools.extractEnclosureUrl(SyndEntry entry)", "testcase": false, "constructor": false}, {"identifier": "isFeedValid", "parameters": "(String url, String username, String password)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFeedValid(String url, String username, String password)", "full_signature": "public static boolean isFeedValid(String url, String username, String password)", "class_method_signature": "FeedsTools.isFeedValid(String url, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "extractFeedLanguage", "parameters": "(String url)", "modifiers": "public static", "return": "TtsLangData", "signature": "TtsLangData extractFeedLanguage(String url)", "full_signature": "public static TtsLangData extractFeedLanguage(String url)", "class_method_signature": "FeedsTools.extractFeedLanguage(String url)", "testcase": false, "constructor": false}, {"identifier": "getUsedFullActionByType", "parameters": "(int type)", "modifiers": "public static", "return": "Set<VAction>", "signature": "Set<VAction> getUsedFullActionByType(int type)", "full_signature": "public static Set<VAction> getUsedFullActionByType(int type)", "class_method_signature": "FeedsTools.getUsedFullActionByType(int type)", "testcase": false, "constructor": false}], "file": "net.violet.platform/src/main/java/net/violet/platform/feeds/FeedsTools.java"}, "focal_method": {"identifier": "extractFeedLanguage", "parameters": "(String url)", "modifiers": "public static", "return": "TtsLangData", "body": "public static TtsLangData extractFeedLanguage(String url) {\n\t\tfinal ConnectionsManager manager = new ConnectionsManager(1);\n\t\tConnection connection = null;\n\n\t\ttry {\n\t\t\tconnection = manager.openConnection(new ConnectionConfiguration(url));\n\t\t\tfinal InputStream theInputStream = connection.getInputStream();\n\n\t\t\tfinal SyndFeed feed = new SyndFeedInput().build(new XmlReader(theInputStream));\n\n\t\t\tif (feed.getLanguage() != null) {\n\t\t\t\tfinal TtsLangData theLang = TtsLangData.getDefaultTtsLanguage(feed.getLanguage());\n\t\t\t\tif (theLang != null) {\n\t\t\t\t\treturn theLang;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (final Exception e) {\n\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\tconnection.close();\n\t\t\t}\n\t\t\tmanager.shutdown();\n\t\t}\n\n\t\treturn TtsLangData.findByISOCode(\"en-US\");\n\t}", "signature": "TtsLangData extractFeedLanguage(String url)", "full_signature": "public static TtsLangData extractFeedLanguage(String url)", "class_method_signature": "FeedsTools.extractFeedLanguage(String url)", "testcase": false, "constructor": false, "invocations": ["openConnection", "getInputStream", "build", "getLanguage", "getDefaultTtsLanguage", "getLanguage", "close", "shutdown", "findByISOCode"]}, "repository": {"repo_id": 2117797, "url": "https://github.com/nguillaumin/nabaztag-server", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 17, "size": 20908, "license": "licensed"}}