{"test_class": {"identifier": "UsageGraphTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/runtime/src/test/java/org/apache/polygene/runtime/composite/UsageGraphTest.java"}, "test_case": {"identifier": "whenAskingForDependencyGivenThatGraphContainsCyclicDepThenDetectTheError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenAskingForDependencyGivenThatGraphContainsCyclicDepThenDetectTheError()\n        throws Exception\n    {\n        Thing thing1 = new Thing();\n        Thing thing2 = new Thing();\n        Thing thing3 = new Thing();\n        Thing thing4 = new Thing();\n        Thing thing5 = new Thing();\n        Thing thing6 = new Thing();\n        Thing thing7 = new Thing();\n        thing1.uses.add( thing3 );\n        thing2.uses.add( thing3 );\n        thing3.uses.add( thing4 );\n        thing4.uses.add( thing5 );\n        thing5.uses.add( thing1 );      // <-- Cyclic\n        thing1.uses.add( thing6 );\n        thing7.uses.add( thing1 );\n        thing7.uses.add( thing2 );\n        thing7.uses.add( thing4 );\n        List<Thing> data = new ArrayList<Thing>();\n        data.add( thing7 );\n        data.add( thing4 );\n        data.add( thing1 );\n        data.add( thing3 );\n        data.add( thing6 );\n        data.add( thing5 );\n        data.add( thing2 );\n        randomize( data );\n        UsageGraph<Thing> deps = new UsageGraph<Thing>( data, new Userator(), false );\n        try\n        {\n            List<Thing> resolved = deps.resolveOrder();\n            fail( \"Cyclic Dependency Not Detected.\" );\n        }\n        catch( BindingException e )\n        {\n            // Expected!\n        }\n    }", "signature": "void whenAskingForDependencyGivenThatGraphContainsCyclicDepThenDetectTheError()", "full_signature": "@Test public void whenAskingForDependencyGivenThatGraphContainsCyclicDepThenDetectTheError()", "class_method_signature": "UsageGraphTest.whenAskingForDependencyGivenThatGraphContainsCyclicDepThenDetectTheError()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "randomize", "resolveOrder", "fail"]}, "focal_class": {"identifier": "UsageGraph", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Collection<K> data;", "modifier": "private final", "type": "Collection<K>", "declarator": "data", "var_name": "data"}, {"original_string": "private final Use<K> use;", "modifier": "private final", "type": "Use<K>", "declarator": "use", "var_name": "use"}, {"original_string": "private final boolean allowCyclic;", "modifier": "private final", "type": "boolean", "declarator": "allowCyclic", "var_name": "allowCyclic"}, {"original_string": "private List<K> resolved;", "modifier": "private", "type": "List<K>", "declarator": "resolved", "var_name": "resolved"}, {"original_string": "private HashMap<K, List<K>> transitive;", "modifier": "private", "type": "HashMap<K, List<K>>", "declarator": "transitive", "var_name": "transitive"}], "methods": [{"identifier": "UsageGraph", "parameters": "( Collection<K> data, Use<K> use, boolean allowCyclic )", "modifiers": "public", "return": "", "signature": " UsageGraph( Collection<K> data, Use<K> use, boolean allowCyclic )", "full_signature": "public  UsageGraph( Collection<K> data, Use<K> use, boolean allowCyclic )", "class_method_signature": "UsageGraph.UsageGraph( Collection<K> data, Use<K> use, boolean allowCyclic )", "testcase": false, "constructor": true}, {"identifier": "transitiveUse", "parameters": "( K source, K other )", "modifiers": "public", "return": "boolean", "signature": "boolean transitiveUse( K source, K other )", "full_signature": "public boolean transitiveUse( K source, K other )", "class_method_signature": "UsageGraph.transitiveUse( K source, K other )", "testcase": false, "constructor": false}, {"identifier": "checkCyclic", "parameters": "( List<K> visited, K sourceItem, K used )", "modifiers": "private", "return": "void", "signature": "void checkCyclic( List<K> visited, K sourceItem, K used )", "full_signature": "private void checkCyclic( List<K> visited, K sourceItem, K used )", "class_method_signature": "UsageGraph.checkCyclic( List<K> visited, K sourceItem, K used )", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void invalidate()", "full_signature": "public void invalidate()", "class_method_signature": "UsageGraph.invalidate()", "testcase": false, "constructor": false}, {"identifier": "resolveOrder", "parameters": "()", "modifiers": "public", "return": "List<K>", "signature": "List<K> resolveOrder()", "full_signature": "public List<K> resolveOrder()", "class_method_signature": "UsageGraph.resolveOrder()", "testcase": false, "constructor": false}, {"identifier": "buildUsageGraph", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildUsageGraph()", "full_signature": "private void buildUsageGraph()", "class_method_signature": "UsageGraph.buildUsageGraph()", "testcase": false, "constructor": false}], "file": "core/runtime/src/main/java/org/apache/polygene/runtime/composite/UsageGraph.java"}, "focal_method": {"identifier": "resolveOrder", "parameters": "()", "modifiers": "public", "return": "List<K>", "body": "public List<K> resolveOrder()\n        throws BindingException\n    {\n        if( resolved == null )\n        {\n            buildUsageGraph();\n            resolved = new LinkedList<>();\n            for( K item : data )\n            {\n                int pos = resolved.size();\n                for( K entry : resolved )\n                {\n                    if( transitiveUse( entry, item ) )\n                    {\n                        pos = resolved.indexOf( entry );\n                        break;\n                    }\n                }\n                resolved.add( pos, item );\n            }\n        }\n        return resolved;\n    }", "signature": "List<K> resolveOrder()", "full_signature": "public List<K> resolveOrder()", "class_method_signature": "UsageGraph.resolveOrder()", "testcase": false, "constructor": false, "invocations": ["buildUsageGraph", "size", "transitiveUse", "indexOf", "add"]}, "repository": {"repo_id": 1116314, "url": "https://github.com/Qi4j/qi4j-sdk", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 74, "size": 35964, "license": "licensed"}}