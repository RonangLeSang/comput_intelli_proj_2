{"test_class": {"identifier": "PropertyMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Method MAP_TO_TYPE;", "modifier": "private final static", "type": "Method", "declarator": "MAP_TO_TYPE", "var_name": "MAP_TO_TYPE"}], "file": "core/api/src/test/java/org/apache/polygene/api/composite/PropertyMapperTest.java"}, "test_case": {"identifier": "testMappingOfDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMappingOfDouble()\n        throws Exception\n    {\n        assertThat( mapToType( null, Double.class, \"5.1234\" ), equalTo( 5.1234 ) );\n        assertThat( mapToType( null, Double.class, \"5876328476.623823\" ), equalTo( 5876328476.623823 ) );\n        assertThat( mapToType( null, Double.class, \"5\" ).getClass(), equalTo( Double.class ) );\n    }", "signature": "void testMappingOfDouble()", "full_signature": "@Test public void testMappingOfDouble()", "class_method_signature": "PropertyMapperTest.testMappingOfDouble()", "testcase": true, "constructor": false, "invocations": ["assertThat", "mapToType", "equalTo", "assertThat", "mapToType", "equalTo", "assertThat", "getClass", "mapToType", "equalTo"]}, "focal_class": {"identifier": "PropertyMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Map<Type, MappingStrategy> STRATEGY;", "modifier": "private final static", "type": "Map<Type, MappingStrategy>", "declarator": "STRATEGY", "var_name": "STRATEGY"}], "methods": [{"identifier": "map", "parameters": "( Properties props, Composite composite )", "modifiers": "public static", "return": "void", "signature": "void map( Properties props, Composite composite )", "full_signature": "public static void map( Properties props, Composite composite )", "class_method_signature": "PropertyMapper.map( Properties props, Composite composite )", "testcase": false, "constructor": false}, {"identifier": "mapToType", "parameters": "( Composite composite, Type propertyType, Object value )", "modifiers": "@SuppressWarnings( \"raw\" ) private static", "return": "Object", "signature": "Object mapToType( Composite composite, Type propertyType, Object value )", "full_signature": "@SuppressWarnings( \"raw\" ) private static Object mapToType( Composite composite, Type propertyType, Object value )", "class_method_signature": "PropertyMapper.mapToType( Composite composite, Type propertyType, Object value )", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "( InputStream propertyInputStream, Composite composite )", "modifiers": "public static", "return": "void", "signature": "void map( InputStream propertyInputStream, Composite composite )", "full_signature": "public static void map( InputStream propertyInputStream, Composite composite )", "class_method_signature": "PropertyMapper.map( InputStream propertyInputStream, Composite composite )", "testcase": false, "constructor": false}, {"identifier": "toJavaProperties", "parameters": "( final Composite composite )", "modifiers": "public static", "return": "Properties", "signature": "Properties toJavaProperties( final Composite composite )", "full_signature": "public static Properties toJavaProperties( final Composite composite )", "class_method_signature": "PropertyMapper.toJavaProperties( final Composite composite )", "testcase": false, "constructor": false}, {"identifier": "tokenize", "parameters": "( String valueString, boolean mapSyntax, TokenizerCallback callback )", "modifiers": "private static", "return": "void", "signature": "void tokenize( String valueString, boolean mapSyntax, TokenizerCallback callback )", "full_signature": "private static void tokenize( String valueString, boolean mapSyntax, TokenizerCallback callback )", "class_method_signature": "PropertyMapper.tokenize( String valueString, boolean mapSyntax, TokenizerCallback callback )", "testcase": false, "constructor": false}, {"identifier": "resolveQuotes", "parameters": "( String valueString,\n                                      TokenizerCallback callback,\n                                      char[] data,\n                                      int pos, char quote\n    )", "modifiers": "private static", "return": "int", "signature": "int resolveQuotes( String valueString,\n                                      TokenizerCallback callback,\n                                      char[] data,\n                                      int pos, char quote\n    )", "full_signature": "private static int resolveQuotes( String valueString,\n                                      TokenizerCallback callback,\n                                      char[] data,\n                                      int pos, char quote\n    )", "class_method_signature": "PropertyMapper.resolveQuotes( String valueString,\n                                      TokenizerCallback callback,\n                                      char[] data,\n                                      int pos, char quote\n    )", "testcase": false, "constructor": false}, {"identifier": "PropertyMapper", "parameters": "()", "modifiers": "private", "return": "", "signature": " PropertyMapper()", "full_signature": "private  PropertyMapper()", "class_method_signature": "PropertyMapper.PropertyMapper()", "testcase": false, "constructor": true}], "file": "core/api/src/main/java/org/apache/polygene/api/composite/PropertyMapper.java"}, "focal_method": {"identifier": "mapToType", "parameters": "( Composite composite, Type propertyType, Object value )", "modifiers": "@SuppressWarnings( \"raw\" ) private static", "return": "Object", "body": "@SuppressWarnings( \"raw\" )\n    private static Object mapToType( Composite composite, Type propertyType, Object value )\n    {\n        final String stringValue = value.toString();\n        MappingStrategy strategy;\n        if( propertyType instanceof Class )\n        {\n            Class type = (Class) propertyType;\n            if( type.isArray() )\n            {\n                strategy = STRATEGY.get( Array.class );\n            }\n            else if( Enum.class.isAssignableFrom( Classes.RAW_CLASS.apply( propertyType ) ) )\n            {\n                strategy = STRATEGY.get( Enum.class );\n            }\n            else\n            {\n                strategy = STRATEGY.get( type );\n            }\n            if( strategy == null ) // If null, try with the ValueComposite Mapper...\n            {\n                strategy = STRATEGY.get( ValueComposite.class );\n            }\n        }\n        else if( propertyType instanceof ParameterizedType )\n        {\n            ParameterizedType type = ( (ParameterizedType) propertyType );\n\n            if( type.getRawType() instanceof Class )\n            {\n                Class clazz = (Class) type.getRawType();\n                if( List.class.isAssignableFrom( clazz ) )\n                {\n                    strategy = STRATEGY.get( List.class );\n                }\n                else if( Set.class.isAssignableFrom( clazz ) )\n                {\n                    strategy = STRATEGY.get( Set.class );\n                }\n                else if( Map.class.isAssignableFrom( clazz ) )\n                {\n                    strategy = STRATEGY.get( Map.class );\n                }\n                else\n                {\n                    throw new IllegalArgumentException( propertyType + \" is not supported.\" );\n                }\n            }\n            else\n            {\n                throw new IllegalArgumentException( propertyType + \" is not supported.\" );\n            }\n        }\n        else\n        {\n            throw new IllegalArgumentException( propertyType + \" is not supported.\" );\n        }\n\n        if( strategy == null )\n        {\n            throw new IllegalArgumentException( propertyType + \" is not supported.\" );\n        }\n\n        return strategy.map( composite, propertyType, stringValue );\n    }", "signature": "Object mapToType( Composite composite, Type propertyType, Object value )", "full_signature": "@SuppressWarnings( \"raw\" ) private static Object mapToType( Composite composite, Type propertyType, Object value )", "class_method_signature": "PropertyMapper.mapToType( Composite composite, Type propertyType, Object value )", "testcase": false, "constructor": false, "invocations": ["toString", "isArray", "get", "isAssignableFrom", "apply", "get", "get", "get", "getRawType", "getRawType", "isAssignableFrom", "get", "isAssignableFrom", "get", "isAssignableFrom", "get", "map"]}, "repository": {"repo_id": 1116314, "url": "https://github.com/Qi4j/qi4j-sdk", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 74, "size": 35964, "license": "licensed"}}