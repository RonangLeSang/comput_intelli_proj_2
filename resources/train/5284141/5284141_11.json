{"test_class": {"identifier": "PathHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "common-frontend/src/test/java/org/ow2/mind/PathHelperTest.java"}, "test_case": {"identifier": "testToAbsolute", "parameters": "()", "modifiers": "@Test(groups = {\"functional\"}) public", "return": "void", "body": "@Test(groups = {\"functional\"})\n  public void testToAbsolute() throws Exception {\n    assertEquals(\"foo/bar.txt\", toAbsolute(\"foo\", \"./bar.txt\"));\n    assertEquals(\"foo/bar.txt\", toAbsolute(\"foo\", \"bar.txt\"));\n    assertEquals(\"foo/bar.txt\", toAbsolute(\"foo/\", \"./bar.txt\"));\n    assertEquals(\"foo/toto/bar.txt\", toAbsolute(\"foo\", \"toto/bar.txt\"));\n    assertEquals(\"foo/toto/bar.txt\", toAbsolute(\"foo\", \"./toto/bar.txt\"));\n    assertEquals(\"foo/toto/bar.txt\", toAbsolute(\"foo/toto\", \"bar.txt\"));\n    assertEquals(\"foo/toto/bar.txt\", toAbsolute(\"foo/toto\", \"./bar.txt\"));\n    assertEquals(\"foo/titi/bar.txt\", toAbsolute(\"foo/toto\", \"../titi/bar.txt\"));\n\n    assertEquals(\"bar.txt\", toAbsolute(\"foo/\", \"../bar.txt\"));\n    assertEquals(\"bar.txt\", toAbsolute(\"foo/\", \"./../bar.txt\"));\n\n    assertEquals(\"toto/bar.txt\", toAbsolute(\"foo/\", \"../toto/bar.txt\"));\n    assertEquals(\"toto/bar.txt\", toAbsolute(\"foo/\", \"./../toto/bar.txt\"));\n\n    assertEquals(\"toto/bar.txt\", toAbsolute(\"foo/titi\", \"../../toto/bar.txt\"));\n\n    testFaultyToAbsolute(\"foo\", \"../../bar.txt\");\n    testFaultyToAbsolute(\"foo\", \"./../../bar.txt\");\n    testFaultyToAbsolute(\"/\", \"../bar.txt\");\n    testFaultyToAbsolute(\"\", \"../bar.txt\");\n\n  }", "signature": "void testToAbsolute()", "full_signature": "@Test(groups = {\"functional\"}) public void testToAbsolute()", "class_method_signature": "PathHelperTest.testToAbsolute()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "assertEquals", "toAbsolute", "testFaultyToAbsolute", "testFaultyToAbsolute", "testFaultyToAbsolute", "testFaultyToAbsolute"]}, "focal_class": {"identifier": "PathHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String   PATH_REGEXP  = \"((\\\\./)?(\\\\.\\\\./)*|/)\\\\w+(/\\\\w+)*(\\\\.\\\\w+)?\";", "modifier": "public static final", "type": "String", "declarator": "PATH_REGEXP  = \"((\\\\./)?(\\\\.\\\\./)*|/)\\\\w+(/\\\\w+)*(\\\\.\\\\w+)?\"", "var_name": "PATH_REGEXP"}, {"original_string": "private static final Pattern PATH_PATTERN = Pattern.compile(PATH_REGEXP);", "modifier": "private static final", "type": "Pattern", "declarator": "PATH_PATTERN = Pattern.compile(PATH_REGEXP)", "var_name": "PATH_PATTERN"}], "methods": [{"identifier": "PathHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " PathHelper()", "full_signature": "private  PathHelper()", "class_method_signature": "PathHelper.PathHelper()", "testcase": false, "constructor": true}, {"identifier": "isValid", "parameters": "(final String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(final String path)", "full_signature": "public static boolean isValid(final String path)", "class_method_signature": "PathHelper.isValid(final String path)", "testcase": false, "constructor": false}, {"identifier": "isRelative", "parameters": "(final String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRelative(final String path)", "full_signature": "public static boolean isRelative(final String path)", "class_method_signature": "PathHelper.isRelative(final String path)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "(final String path)", "modifiers": "public static", "return": "String", "signature": "String getParent(final String path)", "full_signature": "public static String getParent(final String path)", "class_method_signature": "PathHelper.getParent(final String path)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(final String path)", "modifiers": "public static", "return": "String", "signature": "String getFileName(final String path)", "full_signature": "public static String getFileName(final String path)", "class_method_signature": "PathHelper.getFileName(final String path)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(final String path)", "modifiers": "public static", "return": "String", "signature": "String getExtension(final String path)", "full_signature": "public static String getExtension(final String path)", "class_method_signature": "PathHelper.getExtension(final String path)", "testcase": false, "constructor": false}, {"identifier": "removeExtension", "parameters": "(final String path)", "modifiers": "public static", "return": "String", "signature": "String removeExtension(final String path)", "full_signature": "public static String removeExtension(final String path)", "class_method_signature": "PathHelper.removeExtension(final String path)", "testcase": false, "constructor": false}, {"identifier": "replaceExtension", "parameters": "(final String path, String extension)", "modifiers": "public static", "return": "String", "signature": "String replaceExtension(final String path, String extension)", "full_signature": "public static String replaceExtension(final String path, String extension)", "class_method_signature": "PathHelper.replaceExtension(final String path, String extension)", "testcase": false, "constructor": false}, {"identifier": "toAbsolute", "parameters": "(String dirName, String path)", "modifiers": "public static", "return": "String", "signature": "String toAbsolute(String dirName, String path)", "full_signature": "public static String toAbsolute(String dirName, String path)", "class_method_signature": "PathHelper.toAbsolute(String dirName, String path)", "testcase": false, "constructor": false}, {"identifier": "fullyQualifiedNameToDirName", "parameters": "(\n      final String fullyQualifiedName)", "modifiers": "public static", "return": "String", "signature": "String fullyQualifiedNameToDirName(\n      final String fullyQualifiedName)", "full_signature": "public static String fullyQualifiedNameToDirName(\n      final String fullyQualifiedName)", "class_method_signature": "PathHelper.fullyQualifiedNameToDirName(\n      final String fullyQualifiedName)", "testcase": false, "constructor": false}, {"identifier": "packageNameToDirName", "parameters": "(final String packageName)", "modifiers": "public static", "return": "String", "signature": "String packageNameToDirName(final String packageName)", "full_signature": "public static String packageNameToDirName(final String packageName)", "class_method_signature": "PathHelper.packageNameToDirName(final String packageName)", "testcase": false, "constructor": false}, {"identifier": "fullyQualifiedNameToAbsolute", "parameters": "(\n      final String fullyQualifiedName, final String path)", "modifiers": "public static", "return": "String", "signature": "String fullyQualifiedNameToAbsolute(\n      final String fullyQualifiedName, final String path)", "full_signature": "public static String fullyQualifiedNameToAbsolute(\n      final String fullyQualifiedName, final String path)", "class_method_signature": "PathHelper.fullyQualifiedNameToAbsolute(\n      final String fullyQualifiedName, final String path)", "testcase": false, "constructor": false}, {"identifier": "packageNameToAbsolute", "parameters": "(final String packageName,\n      final String path)", "modifiers": "public static", "return": "String", "signature": "String packageNameToAbsolute(final String packageName,\n      final String path)", "full_signature": "public static String packageNameToAbsolute(final String packageName,\n      final String path)", "class_method_signature": "PathHelper.packageNameToAbsolute(final String packageName,\n      final String path)", "testcase": false, "constructor": false}, {"identifier": "fullyQualifiedNameToPath", "parameters": "(\n      final String fullyQualifiedName, final String extension)", "modifiers": "public static", "return": "String", "signature": "String fullyQualifiedNameToPath(\n      final String fullyQualifiedName, final String extension)", "full_signature": "public static String fullyQualifiedNameToPath(\n      final String fullyQualifiedName, final String extension)", "class_method_signature": "PathHelper.fullyQualifiedNameToPath(\n      final String fullyQualifiedName, final String extension)", "testcase": false, "constructor": false}, {"identifier": "fullyQualifiedNameToPath", "parameters": "(\n      final String fullyQualifiedName, final String suffix,\n      final String extension)", "modifiers": "public static", "return": "String", "signature": "String fullyQualifiedNameToPath(\n      final String fullyQualifiedName, final String suffix,\n      final String extension)", "full_signature": "public static String fullyQualifiedNameToPath(\n      final String fullyQualifiedName, final String suffix,\n      final String extension)", "class_method_signature": "PathHelper.fullyQualifiedNameToPath(\n      final String fullyQualifiedName, final String suffix,\n      final String extension)", "testcase": false, "constructor": false}], "file": "common-frontend/src/main/java/org/ow2/mind/PathHelper.java"}, "focal_method": {"identifier": "toAbsolute", "parameters": "(String dirName, String path)", "modifiers": "public static", "return": "String", "body": "public static String toAbsolute(String dirName, String path)\n      throws InvalidRelativPathException {\n    if (!isRelative(path)) return path;\n\n    // remove '/' at the end of dirName if any\n    if (dirName.endsWith(\"/\"))\n      dirName = dirName.substring(0, dirName.length() - 1);\n\n    if (!path.startsWith(\"../\")) {\n      if (path.startsWith(\"./\")) path = path.substring(2);\n      if (!path.startsWith(\"../\")) {\n        // path is a relative path that do not starts by \"./\" or \"../\"\n        return dirName + \"/\" + path;\n      }\n    }\n\n    assert path.startsWith(\"../\");\n    final int lastSlash = dirName.lastIndexOf('/');\n    if (lastSlash <= 0) {\n      if (path.startsWith(\"../../\") || dirName.length() == 0) {\n        throw new InvalidRelativPathException(\"Invalid relative path \\\"\" + path\n            + \"\\\" for directory \\\"\" + dirName + \"\\\".\");\n      }\n      return (dirName.startsWith(\"/\")) ? \"/\" + path.substring(3) : path\n          .substring(3);\n    }\n    return toAbsolute(dirName.substring(0, lastSlash), \"./\" + path.substring(3));\n  }", "signature": "String toAbsolute(String dirName, String path)", "full_signature": "public static String toAbsolute(String dirName, String path)", "class_method_signature": "PathHelper.toAbsolute(String dirName, String path)", "testcase": false, "constructor": false, "invocations": ["isRelative", "endsWith", "substring", "length", "startsWith", "startsWith", "substring", "startsWith", "startsWith", "lastIndexOf", "startsWith", "length", "startsWith", "substring", "substring", "toAbsolute", "substring", "substring"]}, "repository": {"repo_id": 5284141, "url": "https://github.com/MIND-Tools/mind-compiler", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 6362, "license": "licensed"}}