{"test_class": {"identifier": "SortedVectorTest", "superclass": "extends MockedStaticInitializers", "interfaces": "", "fields": [{"original_string": "private SortedVector collection;", "modifier": "private", "type": "SortedVector", "declarator": "collection", "var_name": "collection"}], "file": "TantalumCore/src/test/java/org/tantalum/util/SortedVectorTest.java"}, "test_case": {"identifier": "sequenceTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sequenceTest() {\n        System.out.println(\"testSequence\");\n        SortedVector instance = new SortedVector(new Comparator() {\n            public int compare(Object o1, Object o2) {\n                return ((Integer) o1).intValue() - ((Integer) o2).intValue();\n            }\n        });\n        Object o_1 = new Integer(10);\n        Object o_2 = new Integer(20);\n        Object o_3 = new Integer(50);\n        Object o_4 = new Integer(40);\n        Object o_5 = new Integer(30);\n        instance.addElement(o_1);\n        instance.addElement(o_2);\n        instance.addElement(o_3);\n        instance.addElement(o_4);\n        instance.addElement(o_5);\n\n        Integer[] expected = {new Integer(10), new Integer(20), new Integer(30), new Integer(40), new Integer(50)};\n        for (int i = 0; i < instance.size(); i++) {\n            assertEquals(\"sequence test \" + (i + 1), expected[i], (Integer) instance.elementAt(i));\n        }\n    }", "signature": "void sequenceTest()", "full_signature": "@Test public void sequenceTest()", "class_method_signature": "SortedVectorTest.sequenceTest()", "testcase": true, "constructor": false, "invocations": ["println", "intValue", "intValue", "addElement", "addElement", "addElement", "addElement", "addElement", "size", "assertEquals", "elementAt"]}, "focal_class": {"identifier": "SortedVector", "superclass": "extends Vector", "interfaces": "", "fields": [{"original_string": "private final Comparator comparator;", "modifier": "private final", "type": "Comparator", "declarator": "comparator", "var_name": "comparator"}], "methods": [{"identifier": "SortedVector", "parameters": "(final Comparator comparator)", "modifiers": "public", "return": "", "signature": " SortedVector(final Comparator comparator)", "full_signature": "public  SortedVector(final Comparator comparator)", "class_method_signature": "SortedVector.SortedVector(final Comparator comparator)", "testcase": false, "constructor": true}, {"identifier": "addElement", "parameters": "(final Object o)", "modifiers": "public synchronized", "return": "void", "signature": "void addElement(final Object o)", "full_signature": "public synchronized void addElement(final Object o)", "class_method_signature": "SortedVector.addElement(final Object o)", "testcase": false, "constructor": false}, {"identifier": "insertElementAt", "parameters": "(Object o, int index)", "modifiers": "public final", "return": "void", "signature": "void insertElementAt(Object o, int index)", "full_signature": "public final void insertElementAt(Object o, int index)", "class_method_signature": "SortedVector.insertElementAt(Object o, int index)", "testcase": false, "constructor": false}, {"identifier": "setElementAt", "parameters": "(Object o, int index)", "modifiers": "public final", "return": "void", "signature": "void setElementAt(Object o, int index)", "full_signature": "public final void setElementAt(Object o, int index)", "class_method_signature": "SortedVector.setElementAt(Object o, int index)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "SortedVector.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "SortedVector.hashCode()", "testcase": false, "constructor": false}], "file": "TantalumCore/src/main/java/org/tantalum/util/SortedVector.java"}, "focal_method": {"identifier": "addElement", "parameters": "(final Object o)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void addElement(final Object o) {\n        int insertIndex = size(); /* Future index of o in the SortedVector? */\n        /* Finding the index */\n        for (int i = size() - 1; i >= 0; i--) {\n            if (comparator.compare(o, elementAt(i)) < 0) {\n                insertIndex--;\n            } else {\n                break;\n            }\n        }\n\n        /* Inserting the object */\n        if (insertIndex == size()) {\n            super.addElement(o);\n        } else {\n            super.insertElementAt(o, insertIndex);\n        }\n    }", "signature": "void addElement(final Object o)", "full_signature": "public synchronized void addElement(final Object o)", "class_method_signature": "SortedVector.addElement(final Object o)", "testcase": false, "constructor": false, "invocations": ["size", "size", "compare", "elementAt", "size", "addElement", "insertElementAt"]}, "repository": {"repo_id": 8648747, "url": "https://github.com/TantalumMobile/Tantalum", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 13, "size": 116403, "license": "licensed"}}