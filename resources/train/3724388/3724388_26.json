{"test_class": {"identifier": "AnimationImageSequenceNameFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File TEMP_DIR = new File(System.getProperty(\"java.io.tmpdir\"));", "modifier": "private static final", "type": "File", "declarator": "TEMP_DIR = new File(System.getProperty(\"java.io.tmpdir\"))", "var_name": "TEMP_DIR"}, {"original_string": "private Mockery mockContext;", "modifier": "private", "type": "Mockery", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "private Animation animation;", "modifier": "private", "type": "Animation", "declarator": "animation", "var_name": "animation"}], "file": "Animator/src/test/java/au/gov/ga/worldwind/animator/application/render/AnimationImageSequenceNameFactoryTest.java"}, "test_case": {"identifier": "testCreateImageSequenceNameWithBlankFrameName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateImageSequenceNameWithBlankFrameName()\n\t{\n\t\tsetAnimationFrameCount(10);\n\t\tassertEquals(\"frame13\", AnimationImageSequenceNameFactory.createImageSequenceName(animation, 13, null));\n\t}", "signature": "void testCreateImageSequenceNameWithBlankFrameName()", "full_signature": "@Test public void testCreateImageSequenceNameWithBlankFrameName()", "class_method_signature": "AnimationImageSequenceNameFactoryTest.testCreateImageSequenceNameWithBlankFrameName()", "testcase": true, "constructor": false, "invocations": ["setAnimationFrameCount", "assertEquals", "createImageSequenceName"]}, "focal_class": {"identifier": "AnimationImageSequenceNameFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_FRAME_NAME = \"frame\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FRAME_NAME = \"frame\"", "var_name": "DEFAULT_FRAME_NAME"}], "methods": [{"identifier": "AnimationImageSequenceNameFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " AnimationImageSequenceNameFactory()", "full_signature": "private  AnimationImageSequenceNameFactory()", "class_method_signature": "AnimationImageSequenceNameFactory.AnimationImageSequenceNameFactory()", "testcase": false, "constructor": true}, {"identifier": "createImageSequenceFileName", "parameters": "(Animation animation, int frame, String frameName)", "modifiers": "public static", "return": "String", "signature": "String createImageSequenceFileName(Animation animation, int frame, String frameName)", "full_signature": "public static String createImageSequenceFileName(Animation animation, int frame, String frameName)", "class_method_signature": "AnimationImageSequenceNameFactory.createImageSequenceFileName(Animation animation, int frame, String frameName)", "testcase": false, "constructor": false}, {"identifier": "createImageSequenceName", "parameters": "(Animation animation, int frame, String frameName)", "modifiers": "public static", "return": "String", "signature": "String createImageSequenceName(Animation animation, int frame, String frameName)", "full_signature": "public static String createImageSequenceName(Animation animation, int frame, String frameName)", "class_method_signature": "AnimationImageSequenceNameFactory.createImageSequenceName(Animation animation, int frame, String frameName)", "testcase": false, "constructor": false}, {"identifier": "createImageSequenceFile", "parameters": "(Animation animation, int frame, String frameName, File outputDir)", "modifiers": "public static", "return": "File", "signature": "File createImageSequenceFile(Animation animation, int frame, String frameName, File outputDir)", "full_signature": "public static File createImageSequenceFile(Animation animation, int frame, String frameName, File outputDir)", "class_method_signature": "AnimationImageSequenceNameFactory.createImageSequenceFile(Animation animation, int frame, String frameName, File outputDir)", "testcase": false, "constructor": false}, {"identifier": "createStereoImageSequenceFile", "parameters": "(Animation animation, int frame, String frameName, File outputDir, Eye eye)", "modifiers": "public static", "return": "File", "signature": "File createStereoImageSequenceFile(Animation animation, int frame, String frameName, File outputDir, Eye eye)", "full_signature": "public static File createStereoImageSequenceFile(Animation animation, int frame, String frameName, File outputDir, Eye eye)", "class_method_signature": "AnimationImageSequenceNameFactory.createStereoImageSequenceFile(Animation animation, int frame, String frameName, File outputDir, Eye eye)", "testcase": false, "constructor": false}, {"identifier": "createImageSequenceName", "parameters": "(int sequenceNumber, String prefix, int padTo)", "modifiers": "private static", "return": "String", "signature": "String createImageSequenceName(int sequenceNumber, String prefix, int padTo)", "full_signature": "private static String createImageSequenceName(int sequenceNumber, String prefix, int padTo)", "class_method_signature": "AnimationImageSequenceNameFactory.createImageSequenceName(int sequenceNumber, String prefix, int padTo)", "testcase": false, "constructor": false}], "file": "Animator/src/main/java/au/gov/ga/worldwind/animator/application/render/AnimationImageSequenceNameFactory.java"}, "focal_method": {"identifier": "createImageSequenceName", "parameters": "(Animation animation, int frame, String frameName)", "modifiers": "public static", "return": "String", "body": "public static String createImageSequenceName(Animation animation, int frame, String frameName)\n\t{\n\t\tValidate.notNull(animation, \"An animation is required\");\n\t\treturn createImageSequenceName(frame, \n\t\t\t\t\t\t\t\t\t   Util.isBlank(frameName) ? DEFAULT_FRAME_NAME : frameName, \n\t\t\t\t\t\t\t\t\t   String.valueOf(animation.getFrameCount()).length());\n\t}", "signature": "String createImageSequenceName(Animation animation, int frame, String frameName)", "full_signature": "public static String createImageSequenceName(Animation animation, int frame, String frameName)", "class_method_signature": "AnimationImageSequenceNameFactory.createImageSequenceName(Animation animation, int frame, String frameName)", "testcase": false, "constructor": false, "invocations": ["notNull", "createImageSequenceName", "isBlank", "length", "valueOf", "getFrameCount"]}, "repository": {"repo_id": 3724388, "url": "https://github.com/GeoscienceAustralia/ga-worldwind-suite", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 36, "size": 278479, "license": "licensed"}}