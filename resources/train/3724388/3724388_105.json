{"test_class": {"identifier": "IOUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "Common/src/test/java/au/gov/ga/worldwind/common/util/IOUtilTest.java"}, "test_case": {"identifier": "testReadByteBufferWrapperWithNativeFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReadByteBufferWrapperWithNativeFormat() throws Exception\n\t{\n\t\tBufferWrapper bufferWrapper = IOUtil.readByteBuffer(getClass().getResource(\"bytes.out\"), AVKey.INT8, AVKey.LITTLE_ENDIAN);\n\t\t\n\t\tassertNotNull(bufferWrapper);\n\t\tassertEquals(5, bufferWrapper.getSizeInBytes());\n\t\t\n\t\tassertEquals(1, bufferWrapper.getInt(0));\n\t\tassertEquals(2, bufferWrapper.getInt(1));\n\t\tassertEquals(3, bufferWrapper.getInt(2));\n\t\tassertEquals(4, bufferWrapper.getInt(3));\n\t\tassertEquals(5, bufferWrapper.getInt(4));\n\t}", "signature": "void testReadByteBufferWrapperWithNativeFormat()", "full_signature": "@Test public void testReadByteBufferWrapperWithNativeFormat()", "class_method_signature": "IOUtilTest.testReadByteBufferWrapperWithNativeFormat()", "testcase": true, "constructor": false, "invocations": ["readByteBuffer", "getResource", "getClass", "assertNotNull", "assertEquals", "getSizeInBytes", "assertEquals", "getInt", "assertEquals", "getInt", "assertEquals", "getInt", "assertEquals", "getInt", "assertEquals", "getInt"]}, "focal_class": {"identifier": "IOUtil", "superclass": "extends WWIO", "interfaces": "", "fields": [], "methods": [{"identifier": "readStreamToStringKeepingNewlines", "parameters": "(InputStream stream, String encoding)", "modifiers": "public static", "return": "String", "signature": "String readStreamToStringKeepingNewlines(InputStream stream, String encoding)", "full_signature": "public static String readStreamToStringKeepingNewlines(InputStream stream, String encoding)", "class_method_signature": "IOUtil.readStreamToStringKeepingNewlines(InputStream stream, String encoding)", "testcase": false, "constructor": false}, {"identifier": "readByteBuffer", "parameters": "(URL url)", "modifiers": "public static", "return": "ByteBuffer", "signature": "ByteBuffer readByteBuffer(URL url)", "full_signature": "public static ByteBuffer readByteBuffer(URL url)", "class_method_signature": "IOUtil.readByteBuffer(URL url)", "testcase": false, "constructor": false}, {"identifier": "readByteBuffer", "parameters": "(URL url, String pixelType, String byteOrder)", "modifiers": "public static", "return": "BufferWrapper", "signature": "BufferWrapper readByteBuffer(URL url, String pixelType, String byteOrder)", "full_signature": "public static BufferWrapper readByteBuffer(URL url, String pixelType, String byteOrder)", "class_method_signature": "IOUtil.readByteBuffer(URL url, String pixelType, String byteOrder)", "testcase": false, "constructor": false}, {"identifier": "readByteBuffer", "parameters": "(InputStream is, String pixelType, String byteOrder)", "modifiers": "public static", "return": "BufferWrapper", "signature": "BufferWrapper readByteBuffer(InputStream is, String pixelType, String byteOrder)", "full_signature": "public static BufferWrapper readByteBuffer(InputStream is, String pixelType, String byteOrder)", "class_method_signature": "IOUtil.readByteBuffer(InputStream is, String pixelType, String byteOrder)", "testcase": false, "constructor": false}], "file": "Common/src/main/java/au/gov/ga/worldwind/common/util/IOUtil.java"}, "focal_method": {"identifier": "readByteBuffer", "parameters": "(URL url)", "modifiers": "public static", "return": "ByteBuffer", "body": "public static ByteBuffer readByteBuffer(URL url) throws IOException\n\t{\n\t\tByteBuffer byteBuffer = null;\n\t\tif (URLUtil.isForResourceWithExtension(url, \"zip\"))\n\t\t{\n\t\t\t//try opening the file as a zip file; if this fails, log a warning and read file directly into the buffer\n\t\t\tInputStream is = null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tis = url.openStream();\n\t\t\t\tZipRetriever zr = new ZipRetriever(url);\n\t\t\t\tbyteBuffer = zr.readZipStream(is, url);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tString message = \"Error loading zip file at '\" + url + \"': \" + e.getLocalizedMessage();\n\t\t\t\tLogging.logger().warning(message);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tif (is != null)\n\t\t\t\t\tis.close();\n\t\t\t}\n\t\t}\n\t\tif (byteBuffer == null)\n\t\t{\n\t\t\tbyteBuffer = readURLContentToBuffer(url);\n\t\t}\n\t\treturn byteBuffer;\n\t}", "signature": "ByteBuffer readByteBuffer(URL url)", "full_signature": "public static ByteBuffer readByteBuffer(URL url)", "class_method_signature": "IOUtil.readByteBuffer(URL url)", "testcase": false, "constructor": false, "invocations": ["isForResourceWithExtension", "openStream", "readZipStream", "getLocalizedMessage", "warning", "logger", "close", "readURLContentToBuffer"]}, "repository": {"repo_id": 3724388, "url": "https://github.com/GeoscienceAustralia/ga-worldwind-suite", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 36, "size": 278479, "license": "licensed"}}