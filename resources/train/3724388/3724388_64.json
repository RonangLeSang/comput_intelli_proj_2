{"test_class": {"identifier": "EditableParameterInputVerifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JTextField textField;", "modifier": "private", "type": "JTextField", "declarator": "textField", "var_name": "textField"}, {"original_string": "private EditableParameterInputVerifier classToBeTested;", "modifier": "private", "type": "EditableParameterInputVerifier", "declarator": "classToBeTested", "var_name": "classToBeTested"}, {"original_string": "private boolean result;", "modifier": "private", "type": "boolean", "declarator": "result", "var_name": "result"}], "file": "Animator/src/test/java/au/gov/ga/worldwind/animator/panels/objectproperties/EditableParameterInputVerifierTest.java"}, "test_case": {"identifier": "testWithUnboundParameterEmptyString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWithUnboundParameterEmptyString()\n\t{\n\t\tinitialiseWithUnboundParameter();\n\t\tsetTextValue(\"\");\n\t\t\n\t\tresult = classToBeTested.verify(textField);\n\t\t\n\t\tassertFieldMarkedInvalid();\n\t}", "signature": "void testWithUnboundParameterEmptyString()", "full_signature": "@Test public void testWithUnboundParameterEmptyString()", "class_method_signature": "EditableParameterInputVerifierTest.testWithUnboundParameterEmptyString()", "testcase": true, "constructor": false, "invocations": ["initialiseWithUnboundParameter", "setTextValue", "verify", "assertFieldMarkedInvalid"]}, "focal_class": {"identifier": "EditableParameterInputVerifier", "superclass": "extends InputVerifier", "interfaces": "", "fields": [{"original_string": "private Parameter parameterToVerifyAgainst;", "modifier": "private", "type": "Parameter", "declarator": "parameterToVerifyAgainst", "var_name": "parameterToVerifyAgainst"}], "methods": [{"identifier": "EditableParameterInputVerifier", "parameters": "(Parameter parameterToVerifyAgainst)", "modifiers": "public", "return": "", "signature": " EditableParameterInputVerifier(Parameter parameterToVerifyAgainst)", "full_signature": "public  EditableParameterInputVerifier(Parameter parameterToVerifyAgainst)", "class_method_signature": "EditableParameterInputVerifier.EditableParameterInputVerifier(Parameter parameterToVerifyAgainst)", "testcase": false, "constructor": true}, {"identifier": "verify", "parameters": "(JComponent input)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean verify(JComponent input)", "full_signature": "@Override public boolean verify(JComponent input)", "class_method_signature": "EditableParameterInputVerifier.verify(JComponent input)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(String currentValue)", "modifiers": "private", "return": "boolean", "signature": "boolean isNumeric(String currentValue)", "full_signature": "private boolean isNumeric(String currentValue)", "class_method_signature": "EditableParameterInputVerifier.isNumeric(String currentValue)", "testcase": false, "constructor": false}, {"identifier": "markAsInvalid", "parameters": "(JComponent input)", "modifiers": "private", "return": "void", "signature": "void markAsInvalid(JComponent input)", "full_signature": "private void markAsInvalid(JComponent input)", "class_method_signature": "EditableParameterInputVerifier.markAsInvalid(JComponent input)", "testcase": false, "constructor": false}, {"identifier": "markAsValid", "parameters": "(JComponent input)", "modifiers": "private", "return": "void", "signature": "void markAsValid(JComponent input)", "full_signature": "private void markAsValid(JComponent input)", "class_method_signature": "EditableParameterInputVerifier.markAsValid(JComponent input)", "testcase": false, "constructor": false}, {"identifier": "isBoundParameter", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isBoundParameter()", "full_signature": "private boolean isBoundParameter()", "class_method_signature": "EditableParameterInputVerifier.isBoundParameter()", "testcase": false, "constructor": false}, {"identifier": "getParameterMaxValue", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double getParameterMaxValue()", "full_signature": "private double getParameterMaxValue()", "class_method_signature": "EditableParameterInputVerifier.getParameterMaxValue()", "testcase": false, "constructor": false}, {"identifier": "getParameterMinValue", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double getParameterMinValue()", "full_signature": "private double getParameterMinValue()", "class_method_signature": "EditableParameterInputVerifier.getParameterMinValue()", "testcase": false, "constructor": false}], "file": "Animator/src/main/java/au/gov/ga/worldwind/animator/panels/objectproperties/EditableParameterInputVerifier.java"}, "focal_method": {"identifier": "verify", "parameters": "(JComponent input)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean verify(JComponent input)\n\t{\n\t\t// Only apply verification to text fields\n\t\tif (!(input instanceof JTextField))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tString textValue = ((JTextField)input).getText();\n\t\tif (!isNumeric(textValue))\n\t\t{\n\t\t\tmarkAsInvalid(input);\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (isBoundParameter())\n\t\t{\n\t\t\tdouble doubleValue = Double.parseDouble(textValue); \n\t\t\tif (doubleValue < getParameterMinValue() || doubleValue > getParameterMaxValue())\n\t\t\t{\n\t\t\t\tmarkAsInvalid(input);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmarkAsValid(input);\n\t\treturn true;\n\t}", "signature": "boolean verify(JComponent input)", "full_signature": "@Override public boolean verify(JComponent input)", "class_method_signature": "EditableParameterInputVerifier.verify(JComponent input)", "testcase": false, "constructor": false, "invocations": ["getText", "isNumeric", "markAsInvalid", "isBoundParameter", "parseDouble", "getParameterMinValue", "getParameterMaxValue", "markAsInvalid", "markAsValid"]}, "repository": {"repo_id": 3724388, "url": "https://github.com/GeoscienceAustralia/ga-worldwind-suite", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 36, "size": 278479, "license": "licensed"}}