{"test_class": {"identifier": "SGridVolumeDataProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final URL ASCII_FILE = SGridVolumeDataProviderTest.class.getClassLoader().getResource(\"au/gov/ga/worldwind/common/layers/model/gocad/sgrid/test_sgrid_ascii.sg\");", "modifier": "private static final", "type": "URL", "declarator": "ASCII_FILE = SGridVolumeDataProviderTest.class.getClassLoader().getResource(\"au/gov/ga/worldwind/common/layers/model/gocad/sgrid/test_sgrid_ascii.sg\")", "var_name": "ASCII_FILE"}, {"original_string": "private static final URL ASCII_ZIP_FILE = SGridVolumeDataProviderTest.class.getClassLoader().getResource(\"au/gov/ga/worldwind/common/layers/model/gocad/sgrid/test_sgrid_ascii.zip\");", "modifier": "private static final", "type": "URL", "declarator": "ASCII_ZIP_FILE = SGridVolumeDataProviderTest.class.getClassLoader().getResource(\"au/gov/ga/worldwind/common/layers/model/gocad/sgrid/test_sgrid_ascii.zip\")", "var_name": "ASCII_ZIP_FILE"}, {"original_string": "private static final URL BINARY_FILE = SGridVolumeDataProviderTest.class.getClassLoader().getResource(\"au/gov/ga/worldwind/common/layers/model/gocad/sgrid/test_sgrid_binary.sg\");", "modifier": "private static final", "type": "URL", "declarator": "BINARY_FILE = SGridVolumeDataProviderTest.class.getClassLoader().getResource(\"au/gov/ga/worldwind/common/layers/model/gocad/sgrid/test_sgrid_binary.sg\")", "var_name": "BINARY_FILE"}, {"original_string": "private Mockery mockContext;", "modifier": "private", "type": "Mockery", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "private SGridVolumeDataProvider classUnderTest;", "modifier": "private", "type": "SGridVolumeDataProvider", "declarator": "classUnderTest", "var_name": "classUnderTest"}, {"original_string": "private VolumeLayer parentLayer;", "modifier": "private", "type": "VolumeLayer", "declarator": "parentLayer", "var_name": "parentLayer"}], "file": "Common/src/test/java/au/gov/ga/worldwind/common/layers/volume/SGridVolumeDataProviderTest.java"}, "test_case": {"identifier": "testBasicReadAsciiFormatFromZip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBasicReadAsciiFormatFromZip() throws Exception\n\t{\n\t\tboolean result = classUnderTest.doLoadData(ASCII_ZIP_FILE, parentLayer);\n\t\t\n\t\tassertBasicProperties(result);\n\t}", "signature": "void testBasicReadAsciiFormatFromZip()", "full_signature": "@Test public void testBasicReadAsciiFormatFromZip()", "class_method_signature": "SGridVolumeDataProviderTest.testBasicReadAsciiFormatFromZip()", "testcase": true, "constructor": false, "invocations": ["doLoadData", "assertBasicProperties"]}, "focal_class": {"identifier": "SGridVolumeDataProvider", "superclass": "extends AbstractVolumeDataProvider", "interfaces": "", "fields": [{"original_string": "private final static Pattern paintedVariablePattern = Pattern.compile(\"\\\\*painted\\\\*variable:\\\\s*(.*?)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "paintedVariablePattern = Pattern.compile(\"\\\\*painted\\\\*variable:\\\\s*(.*?)\\\\s*\")", "var_name": "paintedVariablePattern"}, {"original_string": "private final static Pattern axisPattern = Pattern\n\t\t\t.compile(\"AXIS_(\\\\S+)\\\\s+([\\\\d.\\\\-]+)\\\\s+([\\\\d.\\\\-]+)\\\\s+([\\\\d.\\\\-]+).*\");", "modifier": "private final static", "type": "Pattern", "declarator": "axisPattern = Pattern\n\t\t\t.compile(\"AXIS_(\\\\S+)\\\\s+([\\\\d.\\\\-]+)\\\\s+([\\\\d.\\\\-]+)\\\\s+([\\\\d.\\\\-]+).*\")", "var_name": "axisPattern"}, {"original_string": "private final static Pattern asciiDataFilePattern = Pattern.compile(\"ASCII_DATA_FILE\\\\s+(.*?)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "asciiDataFilePattern = Pattern.compile(\"ASCII_DATA_FILE\\\\s+(.*?)\\\\s*\")", "var_name": "asciiDataFilePattern"}, {"original_string": "private final static Pattern pointsOffsetPattern = Pattern.compile(\"POINTS_OFFSET\\\\s+(\\\\d+)\");", "modifier": "private final static", "type": "Pattern", "declarator": "pointsOffsetPattern = Pattern.compile(\"POINTS_OFFSET\\\\s+(\\\\d+)\")", "var_name": "pointsOffsetPattern"}, {"original_string": "private final static Pattern pointsFilePattern = Pattern.compile(\"POINTS_FILE\\\\s+([^\\\\s]*)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "pointsFilePattern = Pattern.compile(\"POINTS_FILE\\\\s+([^\\\\s]*)\\\\s*\")", "var_name": "pointsFilePattern"}, {"original_string": "private final static Pattern flagsOffsetPattern = Pattern.compile(\"FLAGS_OFFSET\\\\s+(\\\\d+)\");", "modifier": "private final static", "type": "Pattern", "declarator": "flagsOffsetPattern = Pattern.compile(\"FLAGS_OFFSET\\\\s+(\\\\d+)\")", "var_name": "flagsOffsetPattern"}, {"original_string": "private final static Pattern flagsFilePattern = Pattern.compile(\"FLAGS_FILE\\\\s+([^\\\\s]*)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "flagsFilePattern = Pattern.compile(\"FLAGS_FILE\\\\s+([^\\\\s]*)\\\\s*\")", "var_name": "flagsFilePattern"}, {"original_string": "private final static Pattern propertyDefinition = Pattern.compile(\"(?:PROPERTY|PROP_).*?(\\\\d).*\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertyDefinition = Pattern.compile(\"(?:PROPERTY|PROP_).*?(\\\\d).*\")", "var_name": "propertyDefinition"}, {"original_string": "private final static Pattern propertyNamePattern = Pattern.compile(\"PROPERTY\\\\s+(\\\\d+)\\\\s+\\\"?(.*?)\\\"?\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertyNamePattern = Pattern.compile(\"PROPERTY\\\\s+(\\\\d+)\\\\s+\\\"?(.*?)\\\"?\\\\s*\")", "var_name": "propertyNamePattern"}, {"original_string": "private final static Pattern propertyOffsetPattern = Pattern.compile(\"PROP_OFFSET\\\\s+(\\\\d+)\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertyOffsetPattern = Pattern.compile(\"PROP_OFFSET\\\\s+(\\\\d+)\")", "var_name": "propertyOffsetPattern"}, {"original_string": "private final static Pattern propertyAlignmentPattern = Pattern.compile(\"PROP_ALIGNMENT.+?(CELLS|POINTS)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertyAlignmentPattern = Pattern.compile(\"PROP_ALIGNMENT.+?(CELLS|POINTS)\\\\s*\")", "var_name": "propertyAlignmentPattern"}, {"original_string": "private final static Pattern propertyFilePattern = Pattern.compile(\"PROP_FILE\\\\s+(\\\\d+)\\\\s+([^\\\\s]*)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertyFilePattern = Pattern.compile(\"PROP_FILE\\\\s+(\\\\d+)\\\\s+([^\\\\s]*)\\\\s*\")", "var_name": "propertyFilePattern"}, {"original_string": "private final static Pattern propertyFormatPattern = Pattern.compile(\"PROP_FORMAT\\\\s+(\\\\d+)\\\\s+([^\\\\s]*)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertyFormatPattern = Pattern.compile(\"PROP_FORMAT\\\\s+(\\\\d+)\\\\s+([^\\\\s]*)\\\\s*\")", "var_name": "propertyFormatPattern"}, {"original_string": "private final static Pattern propertySizePattern = Pattern.compile(\"PROP_ESIZE\\\\s+(\\\\d+)\\\\s+([^\\\\s]*)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertySizePattern = Pattern.compile(\"PROP_ESIZE\\\\s+(\\\\d+)\\\\s+([^\\\\s]*)\\\\s*\")", "var_name": "propertySizePattern"}, {"original_string": "private final static Pattern propertyTypePattern = Pattern.compile(\"PROP_ETYPE\\\\s+(\\\\d+)\\\\s+([^\\\\s]*)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertyTypePattern = Pattern.compile(\"PROP_ETYPE\\\\s+(\\\\d+)\\\\s+([^\\\\s]*)\\\\s*\")", "var_name": "propertyTypePattern"}, {"original_string": "private final static Pattern propertyNoDataPattern = Pattern\n\t\t\t.compile(\"PROP_NO_DATA_VALUE\\\\s+(\\\\d+)\\\\s+([\\\\d.\\\\-]+)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "propertyNoDataPattern = Pattern\n\t\t\t.compile(\"PROP_NO_DATA_VALUE\\\\s+(\\\\d+)\\\\s+([\\\\d.\\\\-]+)\\\\s*\")", "var_name": "propertyNoDataPattern"}, {"original_string": "private VolumeLayer layer;", "modifier": "private", "type": "VolumeLayer", "declarator": "layer", "var_name": "layer"}, {"original_string": "private String asciiDataFile;", "modifier": "private", "type": "String", "declarator": "asciiDataFile", "var_name": "asciiDataFile"}, {"original_string": "private String pointsDataFile;", "modifier": "private", "type": "String", "declarator": "pointsDataFile", "var_name": "pointsDataFile"}, {"original_string": "private int pointsOffset = 0;", "modifier": "private", "type": "int", "declarator": "pointsOffset = 0", "var_name": "pointsOffset"}, {"original_string": "private String flagsDataFile;", "modifier": "private", "type": "String", "declarator": "flagsDataFile", "var_name": "flagsDataFile"}, {"original_string": "private int flagsOffset = 0;", "modifier": "private", "type": "int", "declarator": "flagsOffset = 0", "var_name": "flagsOffset"}, {"original_string": "private String paintedVariableName;", "modifier": "private", "type": "String", "declarator": "paintedVariableName", "var_name": "paintedVariableName"}, {"original_string": "private List<GocadPropertyDefinition> properties;", "modifier": "private", "type": "List<GocadPropertyDefinition>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private GocadPropertyDefinition paintedProperty;", "modifier": "private", "type": "GocadPropertyDefinition", "declarator": "paintedProperty", "var_name": "paintedProperty"}, {"original_string": "private double[] zValues;", "modifier": "private", "type": "double[]", "declarator": "zValues", "var_name": "zValues"}, {"original_string": "private NavigableMap<Double, Integer> zSlices;", "modifier": "private", "type": "NavigableMap<Double, Integer>", "declarator": "zSlices", "var_name": "zSlices"}], "methods": [{"identifier": "doLoadData", "parameters": "(URL url, VolumeLayer layer)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean doLoadData(URL url, VolumeLayer layer)", "full_signature": "@Override protected boolean doLoadData(URL url, VolumeLayer layer)", "class_method_signature": "SGridVolumeDataProvider.doLoadData(URL url, VolumeLayer layer)", "testcase": false, "constructor": false}, {"identifier": "readSGridData", "parameters": "(Object source)", "modifiers": "private", "return": "void", "signature": "void readSGridData(Object source)", "full_signature": "private void readSGridData(Object source)", "class_method_signature": "SGridVolumeDataProvider.readSGridData(Object source)", "testcase": false, "constructor": false}, {"identifier": "readAsciiDataFile", "parameters": "(Object source)", "modifiers": "private", "return": "void", "signature": "void readAsciiDataFile(Object source)", "full_signature": "private void readAsciiDataFile(Object source)", "class_method_signature": "SGridVolumeDataProvider.readAsciiDataFile(Object source)", "testcase": false, "constructor": false}, {"identifier": "putDataValue", "parameters": "(int positionIndex, float value)", "modifiers": "private", "return": "boolean", "signature": "boolean putDataValue(int positionIndex, float value)", "full_signature": "private boolean putDataValue(int positionIndex, float value)", "class_method_signature": "SGridVolumeDataProvider.putDataValue(int positionIndex, float value)", "testcase": false, "constructor": false}, {"identifier": "readBinaryDataFile", "parameters": "(Object source)", "modifiers": "private", "return": "void", "signature": "void readBinaryDataFile(Object source)", "full_signature": "private void readBinaryDataFile(Object source)", "class_method_signature": "SGridVolumeDataProvider.readBinaryDataFile(Object source)", "testcase": false, "constructor": false}, {"identifier": "createAsciiLineMatchingPattern", "parameters": "(GocadPropertyDefinition paintedProperty)", "modifiers": "private", "return": "Pattern", "signature": "Pattern createAsciiLineMatchingPattern(GocadPropertyDefinition paintedProperty)", "full_signature": "private Pattern createAsciiLineMatchingPattern(GocadPropertyDefinition paintedProperty)", "class_method_signature": "SGridVolumeDataProvider.createAsciiLineMatchingPattern(GocadPropertyDefinition paintedProperty)", "testcase": false, "constructor": false}, {"identifier": "initialiseDataVariables", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialiseDataVariables()", "full_signature": "private void initialiseDataVariables()", "class_method_signature": "SGridVolumeDataProvider.initialiseDataVariables()", "testcase": false, "constructor": false}, {"identifier": "validatePaintedPropertyAvailable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validatePaintedPropertyAvailable()", "full_signature": "private void validatePaintedPropertyAvailable()", "class_method_signature": "SGridVolumeDataProvider.validatePaintedPropertyAvailable()", "testcase": false, "constructor": false}, {"identifier": "validateDataFileSpecified", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateDataFileSpecified()", "full_signature": "private void validateDataFileSpecified()", "class_method_signature": "SGridVolumeDataProvider.validateDataFileSpecified()", "testcase": false, "constructor": false}, {"identifier": "validateNonZeroDimensions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateNonZeroDimensions()", "full_signature": "private void validateNonZeroDimensions()", "class_method_signature": "SGridVolumeDataProvider.validateNonZeroDimensions()", "testcase": false, "constructor": false}, {"identifier": "validateDataFileLoadedCorrectly", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateDataFileLoadedCorrectly()", "full_signature": "private void validateDataFileLoadedCorrectly()", "class_method_signature": "SGridVolumeDataProvider.validateDataFileLoadedCorrectly()", "testcase": false, "constructor": false}, {"identifier": "openSource", "parameters": "(URL url)", "modifiers": "private", "return": "Object", "signature": "Object openSource(URL url)", "full_signature": "private Object openSource(URL url)", "class_method_signature": "SGridVolumeDataProvider.openSource(URL url)", "testcase": false, "constructor": false}, {"identifier": "openSGridHeaderStream", "parameters": "(Object source)", "modifiers": "private", "return": "InputStream", "signature": "InputStream openSGridHeaderStream(Object source)", "full_signature": "private InputStream openSGridHeaderStream(Object source)", "class_method_signature": "SGridVolumeDataProvider.openSGridHeaderStream(Object source)", "testcase": false, "constructor": false}, {"identifier": "openSGridDataStream", "parameters": "(Object source, String file)", "modifiers": "private", "return": "InputStream", "signature": "InputStream openSGridDataStream(Object source, String file)", "full_signature": "private InputStream openSGridDataStream(Object source, String file)", "class_method_signature": "SGridVolumeDataProvider.openSGridDataStream(Object source, String file)", "testcase": false, "constructor": false}, {"identifier": "closeSource", "parameters": "(Object source)", "modifiers": "private", "return": "void", "signature": "void closeSource(Object source)", "full_signature": "private void closeSource(Object source)", "class_method_signature": "SGridVolumeDataProvider.closeSource(Object source)", "testcase": false, "constructor": false}, {"identifier": "updateSectorToIncludePosition", "parameters": "(Position position)", "modifiers": "private", "return": "void", "signature": "void updateSectorToIncludePosition(Position position)", "full_signature": "private void updateSectorToIncludePosition(Position position)", "class_method_signature": "SGridVolumeDataProvider.updateSectorToIncludePosition(Position position)", "testcase": false, "constructor": false}, {"identifier": "correctForReversedAxes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void correctForReversedAxes()", "full_signature": "private void correctForReversedAxes()", "class_method_signature": "SGridVolumeDataProvider.correctForReversedAxes()", "testcase": false, "constructor": false}, {"identifier": "totalNumberOfPositions", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int totalNumberOfPositions()", "full_signature": "private int totalNumberOfPositions()", "class_method_signature": "SGridVolumeDataProvider.totalNumberOfPositions()", "testcase": false, "constructor": false}, {"identifier": "totalNumberDataPoints", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int totalNumberDataPoints()", "full_signature": "private int totalNumberDataPoints()", "class_method_signature": "SGridVolumeDataProvider.totalNumberDataPoints()", "testcase": false, "constructor": false}, {"identifier": "getPaintedProperty", "parameters": "()", "modifiers": "private", "return": "GocadPropertyDefinition", "signature": "GocadPropertyDefinition getPaintedProperty()", "full_signature": "private GocadPropertyDefinition getPaintedProperty()", "class_method_signature": "SGridVolumeDataProvider.getPaintedProperty()", "testcase": false, "constructor": false}, {"identifier": "parseHeaderFile", "parameters": "(Object source)", "modifiers": "private", "return": "void", "signature": "void parseHeaderFile(Object source)", "full_signature": "private void parseHeaderFile(Object source)", "class_method_signature": "SGridVolumeDataProvider.parseHeaderFile(Object source)", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String line)", "modifiers": "private", "return": "void", "signature": "void parseLine(String line)", "full_signature": "private void parseLine(String line)", "class_method_signature": "SGridVolumeDataProvider.parseLine(String line)", "testcase": false, "constructor": false}, {"identifier": "parsePropertyDefinition", "parameters": "(String line, int definitionIndex)", "modifiers": "private", "return": "void", "signature": "void parsePropertyDefinition(String line, int definitionIndex)", "full_signature": "private void parsePropertyDefinition(String line, int definitionIndex)", "class_method_signature": "SGridVolumeDataProvider.parsePropertyDefinition(String line, int definitionIndex)", "testcase": false, "constructor": false}, {"identifier": "getSliceElevationPercent", "parameters": "(double slice)", "modifiers": "@Override public", "return": "double", "signature": "double getSliceElevationPercent(double slice)", "full_signature": "@Override public double getSliceElevationPercent(double slice)", "class_method_signature": "SGridVolumeDataProvider.getSliceElevationPercent(double slice)", "testcase": false, "constructor": false}, {"identifier": "getElevationPercentSlice", "parameters": "(double elevationPercent)", "modifiers": "@Override public", "return": "double", "signature": "double getElevationPercentSlice(double elevationPercent)", "full_signature": "@Override public double getElevationPercentSlice(double elevationPercent)", "class_method_signature": "SGridVolumeDataProvider.getElevationPercentSlice(double elevationPercent)", "testcase": false, "constructor": false}, {"identifier": "getZSubsamples", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getZSubsamples()", "full_signature": "@Override public int getZSubsamples()", "class_method_signature": "SGridVolumeDataProvider.getZSubsamples()", "testcase": false, "constructor": false}], "file": "Common/src/main/java/au/gov/ga/worldwind/common/layers/volume/SGridVolumeDataProvider.java"}, "focal_method": {"identifier": "doLoadData", "parameters": "(URL url, VolumeLayer layer)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n\tprotected boolean doLoadData(URL url, VolumeLayer layer)\n\t{\n\t\tthis.layer = layer;\n\n\t\tObject source = null;\n\t\ttry\n\t\t{\n\t\t\tsource = openSource(url);\n\t\t\tif (source == null)\n\t\t\t{\n\t\t\t\tthrow new IOException(\"Unable to load SGrid from URL \" + url);\n\t\t\t}\n\n\t\t\tparseHeaderFile(source);\n\n\t\t\tvalidatePaintedPropertyAvailable();\n\t\t\tvalidateDataFileSpecified();\n\t\t\tvalidateNonZeroDimensions();\n\n\t\t\treadSGridData(source);\n\n\t\t\tvalidateDataFileLoadedCorrectly();\n\n\t\t\tcorrectForReversedAxes();\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tcloseSource(source);\n\t\t}\n\n\t\tlayer.dataAvailable(this);\n\t\treturn true;\n\t}", "signature": "boolean doLoadData(URL url, VolumeLayer layer)", "full_signature": "@Override protected boolean doLoadData(URL url, VolumeLayer layer)", "class_method_signature": "SGridVolumeDataProvider.doLoadData(URL url, VolumeLayer layer)", "testcase": false, "constructor": false, "invocations": ["openSource", "parseHeaderFile", "validatePaintedPropertyAvailable", "validateDataFileSpecified", "validateNonZeroDimensions", "readSGridData", "validateDataFileLoadedCorrectly", "correctForReversedAxes", "printStackTrace", "closeSource", "dataAvailable"]}, "repository": {"repo_id": 3724388, "url": "https://github.com/GeoscienceAustralia/ga-worldwind-suite", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 36, "size": 278479, "license": "licensed"}}