{"test_class": {"identifier": "SiriClientSubscriptionManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SiriClientSubscriptionManager _manager;", "modifier": "private", "type": "SiriClientSubscriptionManager", "declarator": "_manager", "var_name": "_manager"}, {"original_string": "private CheckStatusManager _checkStatusManager;", "modifier": "private", "type": "CheckStatusManager", "declarator": "_checkStatusManager", "var_name": "_checkStatusManager"}, {"original_string": "private HeartbeatManager _heartbeatManager;", "modifier": "private", "type": "HeartbeatManager", "declarator": "_heartbeatManager", "var_name": "_heartbeatManager"}, {"original_string": "private InitiateSubscriptionsManager _initiateSubscriptionsManager;", "modifier": "private", "type": "InitiateSubscriptionsManager", "declarator": "_initiateSubscriptionsManager", "var_name": "_initiateSubscriptionsManager"}, {"original_string": "private TerminateSubscriptionsManager _terminateSubscriptionsManager;", "modifier": "private", "type": "TerminateSubscriptionsManager", "declarator": "_terminateSubscriptionsManager", "var_name": "_terminateSubscriptionsManager"}, {"original_string": "private SchedulingService _schedulingService;", "modifier": "private", "type": "SchedulingService", "declarator": "_schedulingService", "var_name": "_schedulingService"}], "file": "onebusaway-siri-core/src/test/java/org/onebusaway/siri/core/subscriptions/client/SiriClientSubscriptionManagerTest.java"}, "test_case": {"identifier": "testCheckStatusTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCheckStatusTask() {\n\n    SubscriptionResponseStructure response = new SubscriptionResponseStructure();\n    StatusResponseStructure status = new StatusResponseStructure();\n    SubscriptionId subscriptionId = new SubscriptionId(\"subscriberA\",\n        \"subscriptionB\");\n    ESiriModuleType moduleType = ESiriModuleType.VEHICLE_MONITORING;\n    SiriClientRequest originalSubscriptionRequest = new SiriClientRequest();\n    originalSubscriptionRequest.setTargetUrl(\"http://localhost/\");\n    originalSubscriptionRequest.setCheckStatusInterval(30);\n\n    _manager.upgradePendingSubscription(response, status, subscriptionId,\n        moduleType, originalSubscriptionRequest);\n\n    /**\n     * Verify that the expiration task is scheduled properly\n     */\n    ArgumentCaptor<ClientSubscriptionChannel> captor = ArgumentCaptor.forClass(ClientSubscriptionChannel.class);\n    Mockito.verify(_checkStatusManager).resetCheckStatusTask(captor.capture(),\n        Mockito.eq(30));\n\n    ClientSubscriptionChannel channel = captor.getValue();\n    assertNull(channel.getCheckStatusUrl());\n  }", "signature": "void testCheckStatusTask()", "full_signature": "@Test public void testCheckStatusTask()", "class_method_signature": "SiriClientSubscriptionManagerTest.testCheckStatusTask()", "testcase": true, "constructor": false, "invocations": ["setTargetUrl", "setCheckStatusInterval", "upgradePendingSubscription", "forClass", "resetCheckStatusTask", "verify", "capture", "eq", "getValue", "assertNull", "getCheckStatusUrl"]}, "focal_class": {"identifier": "SiriClientSubscriptionManager", "superclass": "", "interfaces": "implements StatusProviderService", "fields": [{"original_string": "private static Logger _log = LoggerFactory.getLogger(SiriClientSubscriptionManager.class);", "modifier": "private static", "type": "Logger", "declarator": "_log = LoggerFactory.getLogger(SiriClientSubscriptionManager.class)", "var_name": "_log"}, {"original_string": "private ConcurrentMap<String, ClientSubscriptionChannel> _activeChannels = new ConcurrentHashMap<String, ClientSubscriptionChannel>();", "modifier": "private", "type": "ConcurrentMap<String, ClientSubscriptionChannel>", "declarator": "_activeChannels = new ConcurrentHashMap<String, ClientSubscriptionChannel>()", "var_name": "_activeChannels"}, {"original_string": "private ConcurrentMap<SubscriptionId, ClientSubscriptionInstance> _activeSubscriptions = new ConcurrentHashMap<SubscriptionId, ClientSubscriptionInstance>();", "modifier": "private", "type": "ConcurrentMap<SubscriptionId, ClientSubscriptionInstance>", "declarator": "_activeSubscriptions = new ConcurrentHashMap<SubscriptionId, ClientSubscriptionInstance>()", "var_name": "_activeSubscriptions"}, {"original_string": "private SchedulingService _schedulingService;", "modifier": "private", "type": "SchedulingService", "declarator": "_schedulingService", "var_name": "_schedulingService"}, {"original_string": "private InitiateSubscriptionsManager _initiateSubscriptionsManager;", "modifier": "private", "type": "InitiateSubscriptionsManager", "declarator": "_initiateSubscriptionsManager", "var_name": "_initiateSubscriptionsManager"}, {"original_string": "private CheckStatusManager _checkStatusManager;", "modifier": "private", "type": "CheckStatusManager", "declarator": "_checkStatusManager", "var_name": "_checkStatusManager"}, {"original_string": "private HeartbeatManager _heartbeatManager;", "modifier": "private", "type": "HeartbeatManager", "declarator": "_heartbeatManager", "var_name": "_heartbeatManager"}, {"original_string": "private TerminateSubscriptionsManager _terminateSubscriptionsManager;", "modifier": "private", "type": "TerminateSubscriptionsManager", "declarator": "_terminateSubscriptionsManager", "var_name": "_terminateSubscriptionsManager"}], "methods": [{"identifier": "setSchedulingService", "parameters": "(SchedulingService schedulingService)", "modifiers": "@Inject public", "return": "void", "signature": "void setSchedulingService(SchedulingService schedulingService)", "full_signature": "@Inject public void setSchedulingService(SchedulingService schedulingService)", "class_method_signature": "SiriClientSubscriptionManager.setSchedulingService(SchedulingService schedulingService)", "testcase": false, "constructor": false}, {"identifier": "setInitiateSubscriptionManager", "parameters": "(\n      InitiateSubscriptionsManager initiateSubscriptionsManager)", "modifiers": "@Inject", "return": "void", "signature": "void setInitiateSubscriptionManager(\n      InitiateSubscriptionsManager initiateSubscriptionsManager)", "full_signature": "@Inject void setInitiateSubscriptionManager(\n      InitiateSubscriptionsManager initiateSubscriptionsManager)", "class_method_signature": "SiriClientSubscriptionManager.setInitiateSubscriptionManager(\n      InitiateSubscriptionsManager initiateSubscriptionsManager)", "testcase": false, "constructor": false}, {"identifier": "setCheckStatusManager", "parameters": "(CheckStatusManager checkStatusManager)", "modifiers": "@Inject", "return": "void", "signature": "void setCheckStatusManager(CheckStatusManager checkStatusManager)", "full_signature": "@Inject void setCheckStatusManager(CheckStatusManager checkStatusManager)", "class_method_signature": "SiriClientSubscriptionManager.setCheckStatusManager(CheckStatusManager checkStatusManager)", "testcase": false, "constructor": false}, {"identifier": "setHeartbeatManager", "parameters": "(HeartbeatManager heartbeatManager)", "modifiers": "@Inject public", "return": "void", "signature": "void setHeartbeatManager(HeartbeatManager heartbeatManager)", "full_signature": "@Inject public void setHeartbeatManager(HeartbeatManager heartbeatManager)", "class_method_signature": "SiriClientSubscriptionManager.setHeartbeatManager(HeartbeatManager heartbeatManager)", "testcase": false, "constructor": false}, {"identifier": "setTerminateSubscriptionsManager", "parameters": "(\n      TerminateSubscriptionsManager terminateSubscriptionsManager)", "modifiers": "@Inject", "return": "void", "signature": "void setTerminateSubscriptionsManager(\n      TerminateSubscriptionsManager terminateSubscriptionsManager)", "full_signature": "@Inject void setTerminateSubscriptionsManager(\n      TerminateSubscriptionsManager terminateSubscriptionsManager)", "class_method_signature": "SiriClientSubscriptionManager.setTerminateSubscriptionsManager(\n      TerminateSubscriptionsManager terminateSubscriptionsManager)", "testcase": false, "constructor": false}, {"identifier": "registerPendingSubscription", "parameters": "(SiriClientRequest request,\n      SubscriptionRequest subscriptionRequest)", "modifiers": "public", "return": "void", "signature": "void registerPendingSubscription(SiriClientRequest request,\n      SubscriptionRequest subscriptionRequest)", "full_signature": "public void registerPendingSubscription(SiriClientRequest request,\n      SubscriptionRequest subscriptionRequest)", "class_method_signature": "SiriClientSubscriptionManager.registerPendingSubscription(SiriClientRequest request,\n      SubscriptionRequest subscriptionRequest)", "testcase": false, "constructor": false}, {"identifier": "clearPendingSubscription", "parameters": "(SiriClientRequest request,\n      SubscriptionRequest subscriptionRequest)", "modifiers": "public", "return": "void", "signature": "void clearPendingSubscription(SiriClientRequest request,\n      SubscriptionRequest subscriptionRequest)", "full_signature": "public void clearPendingSubscription(SiriClientRequest request,\n      SubscriptionRequest subscriptionRequest)", "class_method_signature": "SiriClientSubscriptionManager.clearPendingSubscription(SiriClientRequest request,\n      SubscriptionRequest subscriptionRequest)", "testcase": false, "constructor": false}, {"identifier": "handleSubscriptionResponse", "parameters": "(SubscriptionResponseStructure response)", "modifiers": "public", "return": "void", "signature": "void handleSubscriptionResponse(SubscriptionResponseStructure response)", "full_signature": "public void handleSubscriptionResponse(SubscriptionResponseStructure response)", "class_method_signature": "SiriClientSubscriptionManager.handleSubscriptionResponse(SubscriptionResponseStructure response)", "testcase": false, "constructor": false}, {"identifier": "isSubscriptionActive", "parameters": "(SubscriptionId subscriptionId)", "modifiers": "public", "return": "boolean", "signature": "boolean isSubscriptionActive(SubscriptionId subscriptionId)", "full_signature": "public boolean isSubscriptionActive(SubscriptionId subscriptionId)", "class_method_signature": "SiriClientSubscriptionManager.isSubscriptionActive(SubscriptionId subscriptionId)", "testcase": false, "constructor": false}, {"identifier": "isSubscriptionActiveForModuleDelivery", "parameters": "(\n      AbstractServiceDeliveryStructure moduleDelivery)", "modifiers": "public", "return": "boolean", "signature": "boolean isSubscriptionActiveForModuleDelivery(\n      AbstractServiceDeliveryStructure moduleDelivery)", "full_signature": "public boolean isSubscriptionActiveForModuleDelivery(\n      AbstractServiceDeliveryStructure moduleDelivery)", "class_method_signature": "SiriClientSubscriptionManager.isSubscriptionActiveForModuleDelivery(\n      AbstractServiceDeliveryStructure moduleDelivery)", "testcase": false, "constructor": false}, {"identifier": "recordServiceDeliveryStatistics", "parameters": "(ServiceDelivery serviceDelivery)", "modifiers": "public", "return": "void", "signature": "void recordServiceDeliveryStatistics(ServiceDelivery serviceDelivery)", "full_signature": "public void recordServiceDeliveryStatistics(ServiceDelivery serviceDelivery)", "class_method_signature": "SiriClientSubscriptionManager.recordServiceDeliveryStatistics(ServiceDelivery serviceDelivery)", "testcase": false, "constructor": false}, {"identifier": "getChannelInfoForServiceDelivery", "parameters": "(\n      ServiceDelivery serviceDelivery)", "modifiers": "public", "return": "SiriChannelInfo", "signature": "SiriChannelInfo getChannelInfoForServiceDelivery(\n      ServiceDelivery serviceDelivery)", "full_signature": "public SiriChannelInfo getChannelInfoForServiceDelivery(\n      ServiceDelivery serviceDelivery)", "class_method_signature": "SiriClientSubscriptionManager.getChannelInfoForServiceDelivery(\n      ServiceDelivery serviceDelivery)", "testcase": false, "constructor": false}, {"identifier": "handleTerminateSubscriptionResponse", "parameters": "(\n      TerminateSubscriptionResponseStructure response)", "modifiers": "public", "return": "void", "signature": "void handleTerminateSubscriptionResponse(\n      TerminateSubscriptionResponseStructure response)", "full_signature": "public void handleTerminateSubscriptionResponse(\n      TerminateSubscriptionResponseStructure response)", "class_method_signature": "SiriClientSubscriptionManager.handleTerminateSubscriptionResponse(\n      TerminateSubscriptionResponseStructure response)", "testcase": false, "constructor": false}, {"identifier": "terminateAllSubscriptions", "parameters": "(\n      boolean waitForTerminateSubscriptionResponseOnExit)", "modifiers": "public", "return": "void", "signature": "void terminateAllSubscriptions(\n      boolean waitForTerminateSubscriptionResponseOnExit)", "full_signature": "public void terminateAllSubscriptions(\n      boolean waitForTerminateSubscriptionResponseOnExit)", "class_method_signature": "SiriClientSubscriptionManager.terminateAllSubscriptions(\n      boolean waitForTerminateSubscriptionResponseOnExit)", "testcase": false, "constructor": false}, {"identifier": "handleCheckStatusNotification", "parameters": "(\n      CheckStatusResponseStructure response)", "modifiers": "public", "return": "void", "signature": "void handleCheckStatusNotification(\n      CheckStatusResponseStructure response)", "full_signature": "public void handleCheckStatusNotification(\n      CheckStatusResponseStructure response)", "class_method_signature": "SiriClientSubscriptionManager.handleCheckStatusNotification(\n      CheckStatusResponseStructure response)", "testcase": false, "constructor": false}, {"identifier": "handleHeartbeatNotification", "parameters": "(\n      HeartbeatNotificationStructure heartbeat)", "modifiers": "public", "return": "void", "signature": "void handleHeartbeatNotification(\n      HeartbeatNotificationStructure heartbeat)", "full_signature": "public void handleHeartbeatNotification(\n      HeartbeatNotificationStructure heartbeat)", "class_method_signature": "SiriClientSubscriptionManager.handleHeartbeatNotification(\n      HeartbeatNotificationStructure heartbeat)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(Map<String, String> status)", "modifiers": "@Override public", "return": "void", "signature": "void getStatus(Map<String, String> status)", "full_signature": "@Override public void getStatus(Map<String, String> status)", "class_method_signature": "SiriClientSubscriptionManager.getStatus(Map<String, String> status)", "testcase": false, "constructor": false}, {"identifier": "upgradePendingSubscription", "parameters": "(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest)", "modifiers": "synchronized", "return": "void", "signature": "void upgradePendingSubscription(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest)", "full_signature": "synchronized void upgradePendingSubscription(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest)", "class_method_signature": "SiriClientSubscriptionManager.upgradePendingSubscription(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest)", "testcase": false, "constructor": false}, {"identifier": "getModuleTypeForSubscriptionId", "parameters": "(SubscriptionId subId)", "modifiers": "", "return": "ESiriModuleType", "signature": "ESiriModuleType getModuleTypeForSubscriptionId(SubscriptionId subId)", "full_signature": " ESiriModuleType getModuleTypeForSubscriptionId(SubscriptionId subId)", "class_method_signature": "SiriClientSubscriptionManager.getModuleTypeForSubscriptionId(SubscriptionId subId)", "testcase": false, "constructor": false}, {"identifier": "requestSubscriptionTerminationAndResubscription", "parameters": "(\n      SubscriptionId subscriptionId)", "modifiers": "", "return": "void", "signature": "void requestSubscriptionTerminationAndResubscription(\n      SubscriptionId subscriptionId)", "full_signature": " void requestSubscriptionTerminationAndResubscription(\n      SubscriptionId subscriptionId)", "class_method_signature": "SiriClientSubscriptionManager.requestSubscriptionTerminationAndResubscription(\n      SubscriptionId subscriptionId)", "testcase": false, "constructor": false}, {"identifier": "removeSubscription", "parameters": "(SubscriptionId subscriptionId)", "modifiers": "synchronized", "return": "void", "signature": "void removeSubscription(SubscriptionId subscriptionId)", "full_signature": "synchronized void removeSubscription(SubscriptionId subscriptionId)", "class_method_signature": "SiriClientSubscriptionManager.removeSubscription(SubscriptionId subscriptionId)", "testcase": false, "constructor": false}, {"identifier": "handleChannelDisconnectAndReconnect", "parameters": "(ClientSubscriptionChannel channel)", "modifiers": "", "return": "void", "signature": "void handleChannelDisconnectAndReconnect(ClientSubscriptionChannel channel)", "full_signature": " void handleChannelDisconnectAndReconnect(ClientSubscriptionChannel channel)", "class_method_signature": "SiriClientSubscriptionManager.handleChannelDisconnectAndReconnect(ClientSubscriptionChannel channel)", "testcase": false, "constructor": false}, {"identifier": "updateChannelWithClientRequest", "parameters": "(\n      ClientSubscriptionChannel channel, SiriClientRequest request,\n      SubscriptionResponseStructure response)", "modifiers": "private", "return": "void", "signature": "void updateChannelWithClientRequest(\n      ClientSubscriptionChannel channel, SiriClientRequest request,\n      SubscriptionResponseStructure response)", "full_signature": "private void updateChannelWithClientRequest(\n      ClientSubscriptionChannel channel, SiriClientRequest request,\n      SubscriptionResponseStructure response)", "class_method_signature": "SiriClientSubscriptionManager.updateChannelWithClientRequest(\n      ClientSubscriptionChannel channel, SiriClientRequest request,\n      SubscriptionResponseStructure response)", "testcase": false, "constructor": false}, {"identifier": "getChannelForServer", "parameters": "(\n      String address, ESiriVersion targetVersion)", "modifiers": "private synchronized", "return": "ClientSubscriptionChannel", "signature": "ClientSubscriptionChannel getChannelForServer(\n      String address, ESiriVersion targetVersion)", "full_signature": "private synchronized ClientSubscriptionChannel getChannelForServer(\n      String address, ESiriVersion targetVersion)", "class_method_signature": "SiriClientSubscriptionManager.getChannelForServer(\n      String address, ESiriVersion targetVersion)", "testcase": false, "constructor": false}, {"identifier": "getSubscriptionInstancesForServiceDelivery", "parameters": "(\n      ServiceDelivery serviceDelivery)", "modifiers": "private", "return": "Set<ClientSubscriptionInstance>", "signature": "Set<ClientSubscriptionInstance> getSubscriptionInstancesForServiceDelivery(\n      ServiceDelivery serviceDelivery)", "full_signature": "private Set<ClientSubscriptionInstance> getSubscriptionInstancesForServiceDelivery(\n      ServiceDelivery serviceDelivery)", "class_method_signature": "SiriClientSubscriptionManager.getSubscriptionInstancesForServiceDelivery(\n      ServiceDelivery serviceDelivery)", "testcase": false, "constructor": false}, {"identifier": "registerSubscriptionExpirationTask", "parameters": "(\n      SubscriptionId subscriptionId, StatusResponseStructure status,\n      SiriClientRequest originalSubscriptionRequest)", "modifiers": "private", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> registerSubscriptionExpirationTask(\n      SubscriptionId subscriptionId, StatusResponseStructure status,\n      SiriClientRequest originalSubscriptionRequest)", "full_signature": "private ScheduledFuture<?> registerSubscriptionExpirationTask(\n      SubscriptionId subscriptionId, StatusResponseStructure status,\n      SiriClientRequest originalSubscriptionRequest)", "class_method_signature": "SiriClientSubscriptionManager.registerSubscriptionExpirationTask(\n      SubscriptionId subscriptionId, StatusResponseStructure status,\n      SiriClientRequest originalSubscriptionRequest)", "testcase": false, "constructor": false}], "file": "onebusaway-siri-core/src/main/java/org/onebusaway/siri/core/subscriptions/client/SiriClientSubscriptionManager.java"}, "focal_method": {"identifier": "upgradePendingSubscription", "parameters": "(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest)", "modifiers": "synchronized", "return": "void", "body": "synchronized void upgradePendingSubscription(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest) {\n\n    _log.info(\"upgrade pending subscription: {}\", originalSubscriptionRequest);\n\n    ClientSubscriptionChannel channel = getChannelForServer(\n        originalSubscriptionRequest.getTargetUrl(),\n        originalSubscriptionRequest.getTargetVersion());\n\n    ScheduledFuture<?> expiration = registerSubscriptionExpirationTask(\n        subscriptionId, status, originalSubscriptionRequest);\n\n    /**\n     * Create the actual subscription instance\n     */\n\n    ClientSubscriptionInstance instance = new ClientSubscriptionInstance(\n        channel, subscriptionId, originalSubscriptionRequest, moduleType,\n        expiration);\n\n    ClientSubscriptionInstance existing = _activeSubscriptions.put(\n        subscriptionId, instance);\n\n    if (existing != null) {\n      _log.info(\"overwriting existing subscription: \" + subscriptionId);\n    }\n\n    Set<SubscriptionId> channelSubscriptions = channel.getSubscriptions();\n    channelSubscriptions.add(subscriptionId);\n\n    updateChannelWithClientRequest(channel, originalSubscriptionRequest,\n        response);\n  }", "signature": "void upgradePendingSubscription(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest)", "full_signature": "synchronized void upgradePendingSubscription(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest)", "class_method_signature": "SiriClientSubscriptionManager.upgradePendingSubscription(\n      SubscriptionResponseStructure response, StatusResponseStructure status,\n      SubscriptionId subscriptionId, ESiriModuleType moduleType,\n      SiriClientRequest originalSubscriptionRequest)", "testcase": false, "constructor": false, "invocations": ["info", "getChannelForServer", "getTargetUrl", "getTargetVersion", "registerSubscriptionExpirationTask", "put", "info", "getSubscriptions", "add", "updateChannelWithClientRequest"]}, "repository": {"repo_id": 3425475, "url": "https://github.com/OneBusAway/onebusaway-siri", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 2171, "license": "licensed"}}