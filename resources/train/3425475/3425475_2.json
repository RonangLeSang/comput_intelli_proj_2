{"test_class": {"identifier": "HeartbeatManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HeartbeatManager _manager;", "modifier": "private", "type": "HeartbeatManager", "declarator": "_manager", "var_name": "_manager"}, {"original_string": "private SchedulingService _schedulingService;", "modifier": "private", "type": "SchedulingService", "declarator": "_schedulingService", "var_name": "_schedulingService"}, {"original_string": "private SiriClientSubscriptionManager _subscriptionManager;", "modifier": "private", "type": "SiriClientSubscriptionManager", "declarator": "_subscriptionManager", "var_name": "_subscriptionManager"}], "file": "onebusaway-siri-core/src/test/java/org/onebusaway/siri/core/subscriptions/client/HeartbeatManagerTest.java"}, "test_case": {"identifier": "testResetHeartbeat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testResetHeartbeat() {\n\n    ClientSubscriptionChannel channel = new ClientSubscriptionChannel(\n        \"http://localhost/\", ESiriVersion.V1_3);\n\n    Mockito.when(_schedulingService.getResponseTimeout()).thenReturn(10);\n\n    _manager.resetHeartbeat(channel, 30);\n\n    assertEquals(30, channel.getHeartbeatInterval());\n\n    /**\n     * The heartbeat task is schedule for the hearbeat interval (30 secs) + the\n     * response timeout (10 secs).\n     */\n    Mockito.verify(_schedulingService).schedule(Mockito.any(Runnable.class),\n        Mockito.eq(40L), Mockito.eq(TimeUnit.SECONDS));\n  }", "signature": "void testResetHeartbeat()", "full_signature": "@Test public void testResetHeartbeat()", "class_method_signature": "HeartbeatManagerTest.testResetHeartbeat()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getResponseTimeout", "resetHeartbeat", "assertEquals", "getHeartbeatInterval", "schedule", "verify", "any", "eq", "eq"]}, "focal_class": {"identifier": "HeartbeatManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger _log = LoggerFactory.getLogger(HeartbeatManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "_log = LoggerFactory.getLogger(HeartbeatManager.class)", "var_name": "_log"}, {"original_string": "private SchedulingService _schedulingService;", "modifier": "private", "type": "SchedulingService", "declarator": "_schedulingService", "var_name": "_schedulingService"}, {"original_string": "private SiriClientSubscriptionManager _subscriptionManager;", "modifier": "private", "type": "SiriClientSubscriptionManager", "declarator": "_subscriptionManager", "var_name": "_subscriptionManager"}], "methods": [{"identifier": "setSchedulingService", "parameters": "(SchedulingService schedulingService)", "modifiers": "@Inject public", "return": "void", "signature": "void setSchedulingService(SchedulingService schedulingService)", "full_signature": "@Inject public void setSchedulingService(SchedulingService schedulingService)", "class_method_signature": "HeartbeatManager.setSchedulingService(SchedulingService schedulingService)", "testcase": false, "constructor": false}, {"identifier": "setSubscriptionManager", "parameters": "(\n      SiriClientSubscriptionManager subscriptionManager)", "modifiers": "@Inject public", "return": "void", "signature": "void setSubscriptionManager(\n      SiriClientSubscriptionManager subscriptionManager)", "full_signature": "@Inject public void setSubscriptionManager(\n      SiriClientSubscriptionManager subscriptionManager)", "class_method_signature": "HeartbeatManager.setSubscriptionManager(\n      SiriClientSubscriptionManager subscriptionManager)", "testcase": false, "constructor": false}, {"identifier": "resetHeartbeat", "parameters": "(ClientSubscriptionChannel channel,\n      int heartbeatInterval)", "modifiers": "public", "return": "void", "signature": "void resetHeartbeat(ClientSubscriptionChannel channel,\n      int heartbeatInterval)", "full_signature": "public void resetHeartbeat(ClientSubscriptionChannel channel,\n      int heartbeatInterval)", "class_method_signature": "HeartbeatManager.resetHeartbeat(ClientSubscriptionChannel channel,\n      int heartbeatInterval)", "testcase": false, "constructor": false}], "file": "onebusaway-siri-core/src/main/java/org/onebusaway/siri/core/subscriptions/client/HeartbeatManager.java"}, "focal_method": {"identifier": "resetHeartbeat", "parameters": "(ClientSubscriptionChannel channel,\n      int heartbeatInterval)", "modifiers": "public", "return": "void", "body": "public void resetHeartbeat(ClientSubscriptionChannel channel,\n      int heartbeatInterval) {\n\n    synchronized (channel) {\n\n      channel.setHeartbeatInterval(heartbeatInterval);\n\n      ScheduledFuture<?> heartbeatTask = channel.getHeartbeatTask();\n      if (heartbeatTask != null) {\n        heartbeatTask.cancel(true);\n        channel.setHeartbeatTask(null);\n      }\n\n      if (heartbeatInterval > 0) {\n        HeartbeatTimeoutTask task = new HeartbeatTimeoutTask(\n            _subscriptionManager, channel);\n\n        /**\n         * Note that we add the response timeout to the heartbeat interval to\n         * add a little wiggle room in case the response is delayed\n         */\n        long interval = heartbeatInterval\n            + _schedulingService.getResponseTimeout();\n        heartbeatTask = _schedulingService.schedule(task, interval,\n            TimeUnit.SECONDS);\n        channel.setHeartbeatTask(heartbeatTask);\n      }\n    }\n  }", "signature": "void resetHeartbeat(ClientSubscriptionChannel channel,\n      int heartbeatInterval)", "full_signature": "public void resetHeartbeat(ClientSubscriptionChannel channel,\n      int heartbeatInterval)", "class_method_signature": "HeartbeatManager.resetHeartbeat(ClientSubscriptionChannel channel,\n      int heartbeatInterval)", "testcase": false, "constructor": false, "invocations": ["setHeartbeatInterval", "getHeartbeatTask", "cancel", "setHeartbeatTask", "getResponseTimeout", "schedule", "setHeartbeatTask"]}, "repository": {"repo_id": 3425475, "url": "https://github.com/OneBusAway/onebusaway-siri", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 6, "size": 2171, "license": "licensed"}}