{"test_class": {"identifier": "ServiceHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/i5/las2peer/execution/ServiceHelperTest.java"}, "test_case": {"identifier": "testExceptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExceptions() throws SecurityException, IllegalArgumentException, IllegalAccessException,\n\t\t\tInvocationTargetException, InternalSecurityException {\n\t\tTestService testee = new TestService();\n\n\t\ttry {\n\t\t\tServiceHelper.execute(testee, \"privateMethod\");\n\t\t\tfail(\"ServiceMethodNotFoundException expected\");\n\t\t} catch (ServiceMethodNotFoundException e) {\n\t\t}\n\n\t\ttry {\n\t\t\tServiceHelper.execute(testee, \"protectedMethod\");\n\t\t\tfail(\"ServiceMethodNotFoundException expected\");\n\t\t} catch (ServiceMethodNotFoundException e) {\n\t\t}\n\t\ttry {\n\t\t\tServiceHelper.execute(testee, \"staticMethod\");\n\t\t\tfail(\"ServiceMethodNotFoundException expected\");\n\t\t} catch (ServiceMethodNotFoundException e) {\n\t\t}\n\t}", "signature": "void testExceptions()", "full_signature": "@Test public void testExceptions()", "class_method_signature": "ServiceHelperTest.testExceptions()", "testcase": true, "constructor": false, "invocations": ["execute", "fail", "execute", "fail", "execute", "fail"]}, "focal_class": {"identifier": "ServiceHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getWrapperClass", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getWrapperClass(Class<?> c)", "full_signature": "public static Class<?> getWrapperClass(Class<?> c)", "class_method_signature": "ServiceHelper.getWrapperClass(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "isWrapperClass", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWrapperClass(Class<?> c)", "full_signature": "public static boolean isWrapperClass(Class<?> c)", "class_method_signature": "ServiceHelper.isWrapperClass(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "isSubclass", "parameters": "(Class<?> subClass, Class<?> superClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubclass(Class<?> subClass, Class<?> superClass)", "full_signature": "public static boolean isSubclass(Class<?> subClass, Class<?> superClass)", "class_method_signature": "ServiceHelper.isSubclass(Class<?> subClass, Class<?> superClass)", "testcase": false, "constructor": false}, {"identifier": "getUnwrappedClass", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getUnwrappedClass(Class<?> c)", "full_signature": "public static Class<?> getUnwrappedClass(Class<?> c)", "class_method_signature": "ServiceHelper.getUnwrappedClass(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Service service, String method)", "modifiers": "public static", "return": "Object", "signature": "Object execute(Service service, String method)", "full_signature": "public static Object execute(Service service, String method)", "class_method_signature": "ServiceHelper.execute(Service service, String method)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Service service, String method, Object... parameters)", "modifiers": "public static", "return": "Object", "signature": "Object execute(Service service, String method, Object... parameters)", "full_signature": "public static Object execute(Service service, String method, Object... parameters)", "class_method_signature": "ServiceHelper.execute(Service service, String method, Object... parameters)", "testcase": false, "constructor": false}, {"identifier": "searchMethod", "parameters": "(Class<? extends Service> serviceClass, String methodName, Object[] params)", "modifiers": "public static", "return": "Method", "signature": "Method searchMethod(Class<? extends Service> serviceClass, String methodName, Object[] params)", "full_signature": "public static Method searchMethod(Class<? extends Service> serviceClass, String methodName, Object[] params)", "class_method_signature": "ServiceHelper.searchMethod(Class<? extends Service> serviceClass, String methodName, Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameterString", "parameters": "(Object[] params)", "modifiers": "public static", "return": "String", "signature": "String getParameterString(Object[] params)", "full_signature": "public static String getParameterString(Object[] params)", "class_method_signature": "ServiceHelper.getParameterString(Object[] params)", "testcase": false, "constructor": false}], "file": "core/src/main/java/i5/las2peer/execution/ServiceHelper.java"}, "focal_method": {"identifier": "execute", "parameters": "(Service service, String method)", "modifiers": "public static", "return": "Object", "body": "public static Object execute(Service service, String method) throws ServiceMethodNotFoundException,\n\t\t\tIllegalArgumentException, IllegalAccessException, InvocationTargetException {\n\t\treturn execute(service, method, new Object[0]);\n\t}", "signature": "Object execute(Service service, String method)", "full_signature": "public static Object execute(Service service, String method)", "class_method_signature": "ServiceHelper.execute(Service service, String method)", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 10359213, "url": "https://github.com/rwth-acis/las2peer", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 31, "size": 40269, "license": "licensed"}}