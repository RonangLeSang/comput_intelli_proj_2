{"test_class": {"identifier": "SimpleValueTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "value/src/it/functional/src/test/java/com/google/auto/value/SimpleValueTypeTest.java"}, "test_case": {"identifier": "testNestedValueType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNestedValueType() {\n    ImmutableMap<Integer, String> numberNames = ImmutableMap.of(1, \"un\", 2, \"deux\");\n    NestedValueType.Nested nested = NestedValueType.Nested.create(numberNames);\n    assertEquals(numberNames, nested.numberNames());\n  }", "signature": "void testNestedValueType()", "full_signature": "@Test public void testNestedValueType()", "class_method_signature": "SimpleValueTypeTest.testNestedValueType()", "testcase": true, "constructor": false, "invocations": ["of", "create", "assertEquals", "numberNames"]}, "focal_class": {"identifier": "SimpleValueType", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "string", "parameters": "()", "modifiers": "@Nullable public abstract", "return": "String", "signature": "String string()", "full_signature": "@Nullable public abstract String string()", "class_method_signature": "SimpleValueType.string()", "testcase": false, "constructor": false}, {"identifier": "integer", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int integer()", "full_signature": "public abstract int integer()", "class_method_signature": "SimpleValueType.integer()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "()", "modifiers": "public abstract", "return": "Map<String, Long>", "signature": "Map<String, Long> map()", "full_signature": "public abstract Map<String, Long> map()", "class_method_signature": "SimpleValueType.map()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n      @Nullable String string, int integer, Map<String, Long> map)", "modifiers": "public static", "return": "SimpleValueType", "signature": "SimpleValueType create(\n      @Nullable String string, int integer, Map<String, Long> map)", "full_signature": "public static SimpleValueType create(\n      @Nullable String string, int integer, Map<String, Long> map)", "class_method_signature": "SimpleValueType.create(\n      @Nullable String string, int integer, Map<String, Long> map)", "testcase": false, "constructor": false}], "file": "value/src/it/functional/src/main/java/com/google/auto/value/SimpleValueType.java"}, "focal_method": {"identifier": "create", "parameters": "(\n      @Nullable String string, int integer, Map<String, Long> map)", "modifiers": "public static", "return": "SimpleValueType", "body": "public static SimpleValueType create(\n      @Nullable String string, int integer, Map<String, Long> map) {\n    // The subclass AutoValue_SimpleValueType is created by the annotation processor that is\n    // triggered by the presence of the @AutoValue annotation. It has a constructor for each\n    // of the abstract getter methods here, in order. The constructor stashes the values here\n    // in private final fields, and each method is implemented to return the value of the\n    // corresponding field.\n    return new AutoValue_SimpleValueType(string, integer, map);\n  }", "signature": "SimpleValueType create(\n      @Nullable String string, int integer, Map<String, Long> map)", "full_signature": "public static SimpleValueType create(\n      @Nullable String string, int integer, Map<String, Long> map)", "class_method_signature": "SimpleValueType.create(\n      @Nullable String string, int integer, Map<String, Long> map)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10230369, "url": "https://github.com/google/auto", "stars": 8408, "created": "5/22/2013 9:41:56 PM +00:00", "updates": "2020-01-27T16:25:00+00:00", "fork": "False", "license": "licensed"}}