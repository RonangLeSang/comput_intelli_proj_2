{"test_class": {"identifier": "AnnotationMirrorsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public CompilationRule compilationRule = new CompilationRule();", "modifier": "@Rule public", "type": "CompilationRule", "declarator": "compilationRule = new CompilationRule()", "var_name": "compilationRule"}, {"original_string": "private Elements elements;", "modifier": "private", "type": "Elements", "declarator": "elements", "var_name": "elements"}], "file": "common/src/test/java/com/google/auto/common/AnnotationMirrorsTest.java"}, "test_case": {"identifier": "testGetValueEntryFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testGetValueEntryFailure() {\n    try {\n      AnnotationMirrors.getAnnotationValue(annotationOn(TestClassBlah.class), \"a\");\n    } catch (IllegalArgumentException e) {\n      assertThat(e)\n          .hasMessageThat()\n          .isEqualTo(\n              \"@com.google.auto.common.AnnotationMirrorsTest.Outer does not define an element a()\");\n      return;\n    }\n    fail(\"Should have thrown.\");\n  }", "signature": "void testGetValueEntryFailure()", "full_signature": "@Test public void testGetValueEntryFailure()", "class_method_signature": "AnnotationMirrorsTest.testGetValueEntryFailure()", "testcase": true, "constructor": false, "invocations": ["getAnnotationValue", "annotationOn", "isEqualTo", "hasMessageThat", "assertThat", "fail"]}, "focal_class": {"identifier": "AnnotationMirrors", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Equivalence<AnnotationMirror> ANNOTATION_MIRROR_EQUIVALENCE =\n      new Equivalence<AnnotationMirror>() {\n        @Override\n        protected boolean doEquivalent(AnnotationMirror left, AnnotationMirror right) {\n          return MoreTypes.equivalence().equivalent(left.getAnnotationType(),\n              right.getAnnotationType()) && AnnotationValues.equivalence().pairwise().equivalent(\n              getAnnotationValuesWithDefaults(left).values(),\n              getAnnotationValuesWithDefaults(right).values());\n        }\n        @Override\n        protected int doHash(AnnotationMirror annotation) {\n          DeclaredType type = annotation.getAnnotationType();\n          Iterable<AnnotationValue> annotationValues =\n              getAnnotationValuesWithDefaults(annotation).values();\n          return Arrays.hashCode(new int[] {MoreTypes.equivalence().hash(type),\n              AnnotationValues.equivalence().pairwise().hash(annotationValues)});\n        }\n    };", "modifier": "private static final", "type": "Equivalence<AnnotationMirror>", "declarator": "ANNOTATION_MIRROR_EQUIVALENCE =\n      new Equivalence<AnnotationMirror>() {\n        @Override\n        protected boolean doEquivalent(AnnotationMirror left, AnnotationMirror right) {\n          return MoreTypes.equivalence().equivalent(left.getAnnotationType(),\n              right.getAnnotationType()) && AnnotationValues.equivalence().pairwise().equivalent(\n              getAnnotationValuesWithDefaults(left).values(),\n              getAnnotationValuesWithDefaults(right).values());\n        }\n        @Override\n        protected int doHash(AnnotationMirror annotation) {\n          DeclaredType type = annotation.getAnnotationType();\n          Iterable<AnnotationValue> annotationValues =\n              getAnnotationValuesWithDefaults(annotation).values();\n          return Arrays.hashCode(new int[] {MoreTypes.equivalence().hash(type),\n              AnnotationValues.equivalence().pairwise().hash(annotationValues)});\n        }\n    }", "var_name": "ANNOTATION_MIRROR_EQUIVALENCE"}], "methods": [{"identifier": "equivalence", "parameters": "()", "modifiers": "public static", "return": "Equivalence<AnnotationMirror>", "signature": "Equivalence<AnnotationMirror> equivalence()", "full_signature": "public static Equivalence<AnnotationMirror> equivalence()", "class_method_signature": "AnnotationMirrors.equivalence()", "testcase": false, "constructor": false}, {"identifier": "getAnnotationValuesWithDefaults", "parameters": "(\n      AnnotationMirror annotation)", "modifiers": "public static", "return": "ImmutableMap<ExecutableElement, AnnotationValue>", "signature": "ImmutableMap<ExecutableElement, AnnotationValue> getAnnotationValuesWithDefaults(\n      AnnotationMirror annotation)", "full_signature": "public static ImmutableMap<ExecutableElement, AnnotationValue> getAnnotationValuesWithDefaults(\n      AnnotationMirror annotation)", "class_method_signature": "AnnotationMirrors.getAnnotationValuesWithDefaults(\n      AnnotationMirror annotation)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationValue", "parameters": "(\n      AnnotationMirror annotationMirror, String elementName)", "modifiers": "public static", "return": "AnnotationValue", "signature": "AnnotationValue getAnnotationValue(\n      AnnotationMirror annotationMirror, String elementName)", "full_signature": "public static AnnotationValue getAnnotationValue(\n      AnnotationMirror annotationMirror, String elementName)", "class_method_signature": "AnnotationMirrors.getAnnotationValue(\n      AnnotationMirror annotationMirror, String elementName)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationElementAndValue", "parameters": "(\n      AnnotationMirror annotationMirror, final String elementName)", "modifiers": "public static", "return": "Map.Entry<ExecutableElement, AnnotationValue>", "signature": "Map.Entry<ExecutableElement, AnnotationValue> getAnnotationElementAndValue(\n      AnnotationMirror annotationMirror, final String elementName)", "full_signature": "public static Map.Entry<ExecutableElement, AnnotationValue> getAnnotationElementAndValue(\n      AnnotationMirror annotationMirror, final String elementName)", "class_method_signature": "AnnotationMirrors.getAnnotationElementAndValue(\n      AnnotationMirror annotationMirror, final String elementName)", "testcase": false, "constructor": false}, {"identifier": "getAnnotatedAnnotations", "parameters": "(Element element,\n      final Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "ImmutableSet<? extends AnnotationMirror>", "signature": "ImmutableSet<? extends AnnotationMirror> getAnnotatedAnnotations(Element element,\n      final Class<? extends Annotation> annotationType)", "full_signature": "public static ImmutableSet<? extends AnnotationMirror> getAnnotatedAnnotations(Element element,\n      final Class<? extends Annotation> annotationType)", "class_method_signature": "AnnotationMirrors.getAnnotatedAnnotations(Element element,\n      final Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "AnnotationMirrors", "parameters": "()", "modifiers": "private", "return": "", "signature": " AnnotationMirrors()", "full_signature": "private  AnnotationMirrors()", "class_method_signature": "AnnotationMirrors.AnnotationMirrors()", "testcase": false, "constructor": true}], "file": "common/src/main/java/com/google/auto/common/AnnotationMirrors.java"}, "focal_method": {"identifier": "getAnnotationValue", "parameters": "(\n      AnnotationMirror annotationMirror, String elementName)", "modifiers": "public static", "return": "AnnotationValue", "body": "public static AnnotationValue getAnnotationValue(\n      AnnotationMirror annotationMirror, String elementName) {\n    return getAnnotationElementAndValue(annotationMirror, elementName).getValue();\n  }", "signature": "AnnotationValue getAnnotationValue(\n      AnnotationMirror annotationMirror, String elementName)", "full_signature": "public static AnnotationValue getAnnotationValue(\n      AnnotationMirror annotationMirror, String elementName)", "class_method_signature": "AnnotationMirrors.getAnnotationValue(\n      AnnotationMirror annotationMirror, String elementName)", "testcase": false, "constructor": false, "invocations": ["getValue", "getAnnotationElementAndValue"]}, "repository": {"repo_id": 10230369, "url": "https://github.com/google/auto", "stars": 8408, "created": "5/22/2013 9:41:56 PM +00:00", "updates": "2020-01-27T16:25:00+00:00", "fork": "False", "license": "licensed"}}