{"test_class": {"identifier": "ImmutableMapSerializerExtensionTest", "superclass": "extends CompilationAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final String FUNCTION_WITH_EXCEPTIONS =\n      \"com.google.auto.value.extension.serializable.serializer.runtime.FunctionWithExceptions\";", "modifier": "private static final", "type": "String", "declarator": "FUNCTION_WITH_EXCEPTIONS =\n      \"com.google.auto.value.extension.serializable.serializer.runtime.FunctionWithExceptions\"", "var_name": "FUNCTION_WITH_EXCEPTIONS"}, {"original_string": "private static final String IMMUTABLE_MAP = \"com.google.common.collect.ImmutableMap\";", "modifier": "private static final", "type": "String", "declarator": "IMMUTABLE_MAP = \"com.google.common.collect.ImmutableMap\"", "var_name": "IMMUTABLE_MAP"}, {"original_string": "private static final String INTEGER = \"java.lang.Integer\";", "modifier": "private static final", "type": "String", "declarator": "INTEGER = \"java.lang.Integer\"", "var_name": "INTEGER"}, {"original_string": "private static final String STRING = \"java.lang.String\";", "modifier": "private static final", "type": "String", "declarator": "STRING = \"java.lang.String\"", "var_name": "STRING"}, {"original_string": "private ImmutableMapSerializerExtension extension;", "modifier": "private", "type": "ImmutableMapSerializerExtension", "declarator": "extension", "var_name": "extension"}, {"original_string": "private FakeSerializerFactory fakeSerializerFactory;", "modifier": "private", "type": "FakeSerializerFactory", "declarator": "fakeSerializerFactory", "var_name": "fakeSerializerFactory"}], "file": "value/src/test/java/com/google/auto/value/extension/serializable/serializer/impl/ImmutableMapSerializerExtensionTest.java"}, "test_case": {"identifier": "getSerializer_immutableMap_serializerReturned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getSerializer_immutableMap_serializerReturned() {\n    TypeMirror typeMirror = typeMirrorOf(ImmutableMap.class);\n\n    Serializer actualSerializer =\n        extension.getSerializer(typeMirror, fakeSerializerFactory, mockProcessingEnvironment).get();\n\n    assertThat(actualSerializer.getClass().getName())\n        .contains(\"ImmutableMapSerializerExtension$ImmutableMapSerializer\");\n  }", "signature": "void getSerializer_immutableMap_serializerReturned()", "full_signature": "@Test public void getSerializer_immutableMap_serializerReturned()", "class_method_signature": "ImmutableMapSerializerExtensionTest.getSerializer_immutableMap_serializerReturned()", "testcase": true, "constructor": false, "invocations": ["typeMirrorOf", "get", "getSerializer", "contains", "assertThat", "getName", "getClass"]}, "focal_class": {"identifier": "ImmutableMapSerializerExtension", "superclass": "", "interfaces": "implements SerializerExtension", "fields": [], "methods": [{"identifier": "ImmutableMapSerializerExtension", "parameters": "()", "modifiers": "public", "return": "", "signature": " ImmutableMapSerializerExtension()", "full_signature": "public  ImmutableMapSerializerExtension()", "class_method_signature": "ImmutableMapSerializerExtension.ImmutableMapSerializerExtension()", "testcase": false, "constructor": true}, {"identifier": "getSerializer", "parameters": "(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)", "modifiers": "@Override public", "return": "Optional<Serializer>", "signature": "Optional<Serializer> getSerializer(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)", "full_signature": "@Override public Optional<Serializer> getSerializer(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)", "class_method_signature": "ImmutableMapSerializerExtension.getSerializer(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)", "testcase": false, "constructor": false}, {"identifier": "isImmutableMap", "parameters": "(TypeMirror type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isImmutableMap(TypeMirror type)", "full_signature": "private static boolean isImmutableMap(TypeMirror type)", "class_method_signature": "ImmutableMapSerializerExtension.isImmutableMap(TypeMirror type)", "testcase": false, "constructor": false}, {"identifier": "getKeyType", "parameters": "(TypeMirror type)", "modifiers": "private static", "return": "TypeMirror", "signature": "TypeMirror getKeyType(TypeMirror type)", "full_signature": "private static TypeMirror getKeyType(TypeMirror type)", "class_method_signature": "ImmutableMapSerializerExtension.getKeyType(TypeMirror type)", "testcase": false, "constructor": false}, {"identifier": "getValueType", "parameters": "(TypeMirror type)", "modifiers": "private static", "return": "TypeMirror", "signature": "TypeMirror getValueType(TypeMirror type)", "full_signature": "private static TypeMirror getValueType(TypeMirror type)", "class_method_signature": "ImmutableMapSerializerExtension.getValueType(TypeMirror type)", "testcase": false, "constructor": false}], "file": "value/src/main/java/com/google/auto/value/extension/serializable/serializer/impl/ImmutableMapSerializerExtension.java"}, "focal_method": {"identifier": "getSerializer", "parameters": "(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)", "modifiers": "@Override public", "return": "Optional<Serializer>", "body": "@Override\n  public Optional<Serializer> getSerializer(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv) {\n    if (!isImmutableMap(typeMirror)) {\n      return Optional.empty();\n    }\n\n    // Extract the K, V of ImmutableMap<K, V>.\n    TypeMirror keyType = getKeyType(typeMirror);\n    TypeMirror valueType = getValueType(typeMirror);\n    Serializer keyTypeSerializer = factory.getSerializer(keyType);\n    Serializer valueTypeSerializer = factory.getSerializer(valueType);\n\n    // We don't need this serializer if the K and V of ImmutableMap<K, V> are serializable.\n    if (keyTypeSerializer.isIdentity() && valueTypeSerializer.isIdentity()) {\n      return Optional.empty();\n    }\n\n    return Optional.of(\n        new ImmutableMapSerializer(\n            keyType, valueType, keyTypeSerializer, valueTypeSerializer, processingEnv));\n  }", "signature": "Optional<Serializer> getSerializer(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)", "full_signature": "@Override public Optional<Serializer> getSerializer(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)", "class_method_signature": "ImmutableMapSerializerExtension.getSerializer(\n      TypeMirror typeMirror, SerializerFactory factory, ProcessingEnvironment processingEnv)", "testcase": false, "constructor": false, "invocations": ["isImmutableMap", "empty", "getKeyType", "getValueType", "getSerializer", "getSerializer", "isIdentity", "isIdentity", "empty", "of"]}, "repository": {"repo_id": 10230369, "url": "https://github.com/google/auto", "stars": 8408, "created": "5/22/2013 9:41:56 PM +00:00", "updates": "2020-01-27T16:25:00+00:00", "fork": "False", "license": "licensed"}}