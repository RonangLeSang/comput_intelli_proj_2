{"test_class": {"identifier": "SimpleServiceLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "value/src/test/java/com/google/auto/value/processor/SimpleServiceLoaderTest.java"}, "test_case": {"identifier": "loadOnce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void loadOnce() throws Exception {\n    ClassLoader loader =\n        loaderForJarWithEntries(\n            CharSequence.class.getName(), String.class.getName(), StringBuilder.class.getName());\n\n    ImmutableList<CharSequence> providers = SimpleServiceLoader.load(CharSequence.class, loader);\n\n    // The provider entry for java.lang.String should have caused us to call new String(), which\n    // will produce this \"\" in the providers.\n    assertThat(providers).contains(\"\");\n    List<Class<?>> classes = providers.stream().map(Object::getClass).collect(toList());\n    assertThat(classes).containsExactly(String.class, StringBuilder.class).inOrder();\n  }", "signature": "void loadOnce()", "full_signature": "@Test public void loadOnce()", "class_method_signature": "SimpleServiceLoaderTest.loadOnce()", "testcase": true, "constructor": false, "invocations": ["loaderForJarWithEntries", "getName", "getName", "getName", "load", "contains", "assertThat", "collect", "map", "stream", "toList", "inOrder", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "SimpleServiceLoader", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SimpleServiceLoader", "parameters": "()", "modifiers": "private", "return": "", "signature": " SimpleServiceLoader()", "full_signature": "private  SimpleServiceLoader()", "class_method_signature": "SimpleServiceLoader.SimpleServiceLoader()", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(Class<? extends T> service, ClassLoader loader)", "modifiers": "public static", "return": "ImmutableList<T>", "signature": "ImmutableList<T> load(Class<? extends T> service, ClassLoader loader)", "full_signature": "public static ImmutableList<T> load(Class<? extends T> service, ClassLoader loader)", "class_method_signature": "SimpleServiceLoader.load(Class<? extends T> service, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "providersFromUrl", "parameters": "(\n      URL resourceUrl, Class<T> service, ClassLoader loader)", "modifiers": "private static", "return": "ImmutableList<T>", "signature": "ImmutableList<T> providersFromUrl(\n      URL resourceUrl, Class<T> service, ClassLoader loader)", "full_signature": "private static ImmutableList<T> providersFromUrl(\n      URL resourceUrl, Class<T> service, ClassLoader loader)", "class_method_signature": "SimpleServiceLoader.providersFromUrl(\n      URL resourceUrl, Class<T> service, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "parseClassName", "parameters": "(String line)", "modifiers": "private static", "return": "Optional<String>", "signature": "Optional<String> parseClassName(String line)", "full_signature": "private static Optional<String> parseClassName(String line)", "class_method_signature": "SimpleServiceLoader.parseClassName(String line)", "testcase": false, "constructor": false}], "file": "value/src/main/java/com/google/auto/value/processor/SimpleServiceLoader.java"}, "focal_method": {"identifier": "load", "parameters": "(Class<? extends T> service, ClassLoader loader)", "modifiers": "public static", "return": "ImmutableList<T>", "body": "public static <T> ImmutableList<T> load(Class<? extends T> service, ClassLoader loader) {\n    String resourceName = \"META-INF/services/\" + service.getName();\n    List<URL> resourceUrls;\n    try {\n      resourceUrls = Collections.list(loader.getResources(resourceName));\n    } catch (IOException e) {\n      throw new ServiceConfigurationError(\"Could not look up \" + resourceName, e);\n    }\n    ImmutableList.Builder<T> providers = ImmutableList.builder();\n    for (URL resourceUrl : resourceUrls) {\n      try {\n        providers.addAll(providersFromUrl(resourceUrl, service, loader));\n      } catch (IOException e) {\n        throw new ServiceConfigurationError(\"Could not read \" + resourceUrl, e);\n      }\n    }\n    return providers.build();\n  }", "signature": "ImmutableList<T> load(Class<? extends T> service, ClassLoader loader)", "full_signature": "public static ImmutableList<T> load(Class<? extends T> service, ClassLoader loader)", "class_method_signature": "SimpleServiceLoader.load(Class<? extends T> service, ClassLoader loader)", "testcase": false, "constructor": false, "invocations": ["getName", "list", "getResources", "builder", "addAll", "providersFromUrl", "build"]}, "repository": {"repo_id": 10230369, "url": "https://github.com/google/auto", "stars": 8408, "created": "5/22/2013 9:41:56 PM +00:00", "updates": "2020-01-27T16:25:00+00:00", "fork": "False", "license": "licensed"}}