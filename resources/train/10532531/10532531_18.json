{"test_class": {"identifier": "TokenNameTest", "superclass": "", "interfaces": "", "fields": [], "file": "guacamole-ext/src/test/java/org/apache/guacamole/token/TokenNameTest.java"}, "test_case": {"identifier": "testCanonicalize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCanonicalize() {\n        assertEquals(\"A\", TokenName.canonicalize(\"a\"));\n        assertEquals(\"B\", TokenName.canonicalize(\"b\"));\n        assertEquals(\"1\", TokenName.canonicalize(\"1\"));\n        assertEquals(\"SOME_URL\", TokenName.canonicalize(\"someURL\"));\n        assertEquals(\"LOWERCASE_WITH_DASHES\", TokenName.canonicalize(\"lowercase-with-dashes\"));\n        assertEquals(\"HEADLESS_CAMEL_CASE\", TokenName.canonicalize(\"headlessCamelCase\"));\n        assertEquals(\"CAMEL_CASE\", TokenName.canonicalize(\"CamelCase\"));\n        assertEquals(\"CAMEL_CASE\", TokenName.canonicalize(\"CamelCase\"));\n        assertEquals(\"LOWERCASE_WITH_UNDERSCORES\", TokenName.canonicalize(\"lowercase_with_underscores\"));\n        assertEquals(\"UPPERCASE_WITH_UNDERSCORES\", TokenName.canonicalize(\"UPPERCASE_WITH_UNDERSCORES\"));\n        assertEquals(\"A_VERY_INCONSISTENT_MIX_OF_ALL_STYLES\", TokenName.canonicalize(\"aVery-INCONSISTENTMix_ofAllStyles\"));\n        assertEquals(\"ABC_123_DEF_456\", TokenName.canonicalize(\"abc123def456\"));\n        assertEquals(\"ABC_123_DEF_456\", TokenName.canonicalize(\"ABC123DEF456\"));\n        assertEquals(\"WORD_A_WORD_AB_WORD_ABC_WORD\", TokenName.canonicalize(\"WordAWordABWordABCWord\"));\n        \n        assertEquals(\"AUTH_ATTRIBUTE\", TokenName.canonicalize(\"Attribute\", \"AUTH_\"));\n        assertEquals(\"auth_SOMETHING\", TokenName.canonicalize(\"Something\", \"auth_\"));\n    }", "signature": "void testCanonicalize()", "full_signature": "@Test public void testCanonicalize()", "class_method_signature": "TokenNameTest.testCanonicalize()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize", "assertEquals", "canonicalize"]}, "focal_class": {"identifier": "TokenName", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern STRING_NAME_GROUPING = Pattern.compile(\n\n        // \"Camel\" word groups\n        \"\\\\p{javaUpperCase}\\\\p{javaLowerCase}+\"\n\n        // Groups of digits\n        + \"|[0-9]+\"\n\n        // Groups of uppercase letters, excluding the uppercase letter\n        // which begins a following \"Camel\" group\n        + \"|\\\\p{javaUpperCase}+(?!\\\\p{javaLowerCase})\"\n\n        // Groups of lowercase letters which match no other pattern\n        + \"|\\\\p{javaLowerCase}+\"\n\n        // Groups of word characters letters which match no other pattern\n        + \"|\\\\b\\\\w+\\\\b\"\n\n    );", "modifier": "private static final", "type": "Pattern", "declarator": "STRING_NAME_GROUPING = Pattern.compile(\n\n        // \"Camel\" word groups\n        \"\\\\p{javaUpperCase}\\\\p{javaLowerCase}+\"\n\n        // Groups of digits\n        + \"|[0-9]+\"\n\n        // Groups of uppercase letters, excluding the uppercase letter\n        // which begins a following \"Camel\" group\n        + \"|\\\\p{javaUpperCase}+(?!\\\\p{javaLowerCase})\"\n\n        // Groups of lowercase letters which match no other pattern\n        + \"|\\\\p{javaLowerCase}+\"\n\n        // Groups of word characters letters which match no other pattern\n        + \"|\\\\b\\\\w+\\\\b\"\n\n    )", "var_name": "STRING_NAME_GROUPING"}], "methods": [{"identifier": "TokenName", "parameters": "()", "modifiers": "private", "return": "", "signature": " TokenName()", "full_signature": "private  TokenName()", "class_method_signature": "TokenName.TokenName()", "testcase": false, "constructor": true}, {"identifier": "canonicalize", "parameters": "(final String name, final String prefix)", "modifiers": "public static", "return": "String", "signature": "String canonicalize(final String name, final String prefix)", "full_signature": "public static String canonicalize(final String name, final String prefix)", "class_method_signature": "TokenName.canonicalize(final String name, final String prefix)", "testcase": false, "constructor": false}, {"identifier": "canonicalize", "parameters": "(final String name)", "modifiers": "public static", "return": "String", "signature": "String canonicalize(final String name)", "full_signature": "public static String canonicalize(final String name)", "class_method_signature": "TokenName.canonicalize(final String name)", "testcase": false, "constructor": false}], "file": "guacamole-ext/src/main/java/org/apache/guacamole/token/TokenName.java"}, "focal_method": {"identifier": "canonicalize", "parameters": "(final String name, final String prefix)", "modifiers": "public static", "return": "String", "body": "public static String canonicalize(final String name, final String prefix) {\n\n        // If even one logical word grouping cannot be found, default to\n        // simply converting the string to uppercase and adding the\n        // prefix\n        Matcher groupMatcher = STRING_NAME_GROUPING.matcher(name);\n        if (!groupMatcher.find())\n            return prefix + name.toUpperCase();\n\n        // Split the given name into logical word groups, separated by\n        // underscores and converted to uppercase\n        StringBuilder builder = new StringBuilder(prefix);\n        builder.append(groupMatcher.group(0).toUpperCase());\n\n        while (groupMatcher.find()) {\n            builder.append(\"_\");\n            builder.append(groupMatcher.group(0).toUpperCase());\n        }\n\n        return builder.toString();\n\n    }", "signature": "String canonicalize(final String name, final String prefix)", "full_signature": "public static String canonicalize(final String name, final String prefix)", "class_method_signature": "TokenName.canonicalize(final String name, final String prefix)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "toUpperCase", "append", "toUpperCase", "group", "find", "append", "append", "toUpperCase", "group", "toString"]}, "repository": {"repo_id": 10532531, "url": "https://github.com/glyptodon/guacamole-client", "language": "Java", "is_fork": false, "fork_count": 288, "stargazer_count": 1005, "size": 19362, "license": "licensed"}}