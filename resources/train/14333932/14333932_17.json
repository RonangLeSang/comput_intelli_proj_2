{"test_class": {"identifier": "ByValueAscComparatorTest", "superclass": "extends OryxTest", "interfaces": "", "fields": [], "file": "als-common/src/test/java/com/cloudera/oryx/als/common/ByValueAscComparatorTest.java"}, "test_case": {"identifier": "testSameValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSameValue() {\n    NumericIDValue a = new NumericIDValue(1L, 2.0f);\n    NumericIDValue b = new NumericIDValue(5L, 2.0f);\n    assertTrue(ByValueAscComparator.INSTANCE.compare(a, b) > 0);\n    assertTrue(ByValueAscComparator.INSTANCE.compare(b, a) < 0);\n    assertEquals(0, ByValueAscComparator.INSTANCE.compare(a, a));\n  }", "signature": "void testSameValue()", "full_signature": "@Test public void testSameValue()", "class_method_signature": "ByValueAscComparatorTest.testSameValue()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "compare", "assertTrue", "compare", "assertEquals", "compare"]}, "focal_class": {"identifier": "ByValueAscComparator", "superclass": "", "interfaces": "implements Comparator<NumericIDValue>, Serializable", "fields": [{"original_string": "static final Comparator<NumericIDValue> INSTANCE = new ByValueAscComparator();", "modifier": "static final", "type": "Comparator<NumericIDValue>", "declarator": "INSTANCE = new ByValueAscComparator()", "var_name": "INSTANCE"}], "methods": [{"identifier": "ByValueAscComparator", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByValueAscComparator()", "full_signature": "private  ByValueAscComparator()", "class_method_signature": "ByValueAscComparator.ByValueAscComparator()", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(NumericIDValue a, NumericIDValue b)", "modifiers": "@Override public", "return": "int", "signature": "int compare(NumericIDValue a, NumericIDValue b)", "full_signature": "@Override public int compare(NumericIDValue a, NumericIDValue b)", "class_method_signature": "ByValueAscComparator.compare(NumericIDValue a, NumericIDValue b)", "testcase": false, "constructor": false}], "file": "als-common/src/main/java/com/cloudera/oryx/als/common/ByValueAscComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(NumericIDValue a, NumericIDValue b)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compare(NumericIDValue a, NumericIDValue b) {\n    float aValue = a.getValue();\n    float bValue = b.getValue();\n    if (aValue < bValue) {\n      return -1;\n    }\n    if (aValue > bValue) {\n      return 1;\n    }\n    // Break ties by item ID, *de*scending. It's rare but at least gives predictable ordering.\n    long aItem = a.getID();\n    long bItem = b.getID();\n    if (aItem > bItem) {\n      return -1;\n    }\n    if (aItem < bItem) {\n      return 1;\n    }\n    return 0;\n  }", "signature": "int compare(NumericIDValue a, NumericIDValue b)", "full_signature": "@Override public int compare(NumericIDValue a, NumericIDValue b)", "class_method_signature": "ByValueAscComparator.compare(NumericIDValue a, NumericIDValue b)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "getID", "getID"]}, "repository": {"repo_id": 14333932, "url": "https://github.com/apsaltis/oryx", "language": "Java", "is_fork": false, "fork_count": 382, "stargazer_count": 7, "size": 64, "license": "licensed"}}