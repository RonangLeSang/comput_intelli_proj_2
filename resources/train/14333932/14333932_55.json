{"test_class": {"identifier": "APISettingsTest", "superclass": "extends OryxTest", "interfaces": "", "fields": [], "file": "common/src/test/java/com/cloudera/oryx/common/settings/APISettingsTest.java"}, "test_case": {"identifier": "testHost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHost() {\n    String validHost = \"example.com\";\n    assertEquals(validHost, APISettings.checkHost(validHost));\n  }", "signature": "void testHost()", "full_signature": "@Test public void testHost()", "class_method_signature": "APISettingsTest.testHost()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "checkHost"]}, "focal_class": {"identifier": "APISettings", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String API_PATH = \"api\";", "modifier": "private static final", "type": "String", "declarator": "API_PATH = \"api\"", "var_name": "API_PATH"}, {"original_string": "private static final String HOST_STR_PARAM = \"host\";", "modifier": "private static final", "type": "String", "declarator": "HOST_STR_PARAM = \"host\"", "var_name": "HOST_STR_PARAM"}, {"original_string": "private static final String PORT_INT_PARAM = \"port\";", "modifier": "private static final", "type": "String", "declarator": "PORT_INT_PARAM = \"port\"", "var_name": "PORT_INT_PARAM"}, {"original_string": "private static final String SECURE_PORT_INT_PARAM = \"secure-port\";", "modifier": "private static final", "type": "String", "declarator": "SECURE_PORT_INT_PARAM = \"secure-port\"", "var_name": "SECURE_PORT_INT_PARAM"}, {"original_string": "private static final String USER_NAME_STR_PARAM = \"user-name\";", "modifier": "private static final", "type": "String", "declarator": "USER_NAME_STR_PARAM = \"user-name\"", "var_name": "USER_NAME_STR_PARAM"}, {"original_string": "private static final String PASSWORD_STR_PARAM = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD_STR_PARAM = \"password\"", "var_name": "PASSWORD_STR_PARAM"}, {"original_string": "private static final String KEYSTORE_FILE_STR_PARAM = \"keystore-file\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_FILE_STR_PARAM = \"keystore-file\"", "var_name": "KEYSTORE_FILE_STR_PARAM"}, {"original_string": "private static final String KEYSTORE_PASSWORD_STR_PARAM = \"keystore-password\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_PASSWORD_STR_PARAM = \"keystore-password\"", "var_name": "KEYSTORE_PASSWORD_STR_PARAM"}, {"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private final int securePort;", "modifier": "private final", "type": "int", "declarator": "securePort", "var_name": "securePort"}, {"original_string": "private final String userName;", "modifier": "private final", "type": "String", "declarator": "userName", "var_name": "userName"}, {"original_string": "private final String password;", "modifier": "private final", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private final File keystoreFile;", "modifier": "private final", "type": "File", "declarator": "keystoreFile", "var_name": "keystoreFile"}, {"original_string": "private final String keystorePassword;", "modifier": "private final", "type": "String", "declarator": "keystorePassword", "var_name": "keystorePassword"}], "methods": [{"identifier": "create", "parameters": "(Config config)", "modifiers": "public static", "return": "APISettings", "signature": "APISettings create(Config config)", "full_signature": "public static APISettings create(Config config)", "class_method_signature": "APISettings.create(Config config)", "testcase": false, "constructor": false}, {"identifier": "checkHost", "parameters": "(String host)", "modifiers": "static", "return": "String", "signature": "String checkHost(String host)", "full_signature": "static String checkHost(String host)", "class_method_signature": "APISettings.checkHost(String host)", "testcase": false, "constructor": false}, {"identifier": "checkPort", "parameters": "(int port)", "modifiers": "static", "return": "int", "signature": "int checkPort(int port)", "full_signature": "static int checkPort(int port)", "class_method_signature": "APISettings.checkPort(int port)", "testcase": false, "constructor": false}, {"identifier": "APISettings", "parameters": "(String host, int port, int securePort, Config config)", "modifiers": "private", "return": "", "signature": " APISettings(String host, int port, int securePort, Config config)", "full_signature": "private  APISettings(String host, int port, int securePort, Config config)", "class_method_signature": "APISettings.APISettings(String host, int port, int securePort, Config config)", "testcase": false, "constructor": true}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "APISettings.getHost()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "APISettings.getPort()", "testcase": false, "constructor": false}, {"identifier": "getSecurePort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSecurePort()", "full_signature": "public int getSecurePort()", "class_method_signature": "APISettings.getSecurePort()", "testcase": false, "constructor": false}, {"identifier": "isSecure", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSecure()", "full_signature": "public boolean isSecure()", "class_method_signature": "APISettings.isSecure()", "testcase": false, "constructor": false}, {"identifier": "getKeystoreFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getKeystoreFile()", "full_signature": "public File getKeystoreFile()", "class_method_signature": "APISettings.getKeystoreFile()", "testcase": false, "constructor": false}, {"identifier": "getKeystorePassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKeystorePassword()", "full_signature": "public String getKeystorePassword()", "class_method_signature": "APISettings.getKeystorePassword()", "testcase": false, "constructor": false}, {"identifier": "getUserName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUserName()", "full_signature": "public String getUserName()", "class_method_signature": "APISettings.getUserName()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "APISettings.getPassword()", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/cloudera/oryx/common/settings/APISettings.java"}, "focal_method": {"identifier": "checkHost", "parameters": "(String host)", "modifiers": "static", "return": "String", "body": "static String checkHost(String host) {\n    Preconditions.checkArgument(host == null || (!host.startsWith(\"http://\") && !host.startsWith(\"https://\")),\n        \"host should not include a URI scheme: %s\", host);\n    return host;\n  }", "signature": "String checkHost(String host)", "full_signature": "static String checkHost(String host)", "class_method_signature": "APISettings.checkHost(String host)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "startsWith", "startsWith"]}, "repository": {"repo_id": 14333932, "url": "https://github.com/apsaltis/oryx", "language": "Java", "is_fork": false, "fork_count": 382, "stargazer_count": 7, "size": 64, "license": "licensed"}}