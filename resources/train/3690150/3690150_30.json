{"test_class": {"identifier": "FragmentFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FragmentFactory factory;", "modifier": "", "type": "FragmentFactory", "declarator": "factory", "var_name": "factory"}], "file": "api/src/test/java/org/openmrs/ui/framework/fragment/FragmentFactoryTest.java"}, "test_case": {"identifier": "process_shouldSetCustomModelProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void process_shouldSetCustomModelProperties() throws Exception {\n        PageContext pageContext = buildPageContext();\n\n        FragmentRequest fragmentRequest = new FragmentRequest(\"somemodule\", \"groovy\");\n        FragmentContext fragmentContext = new FragmentContext(fragmentRequest, pageContext);\n\n        String result = factory.process(fragmentContext);\n        Assert.assertThat(result, new Contains(\"Testing Success!!!\"));\n    }", "signature": "void process_shouldSetCustomModelProperties()", "full_signature": "@Test public void process_shouldSetCustomModelProperties()", "class_method_signature": "FragmentFactoryTest.process_shouldSetCustomModelProperties()", "testcase": true, "constructor": false, "invocations": ["buildPageContext", "process", "assertThat"]}, "focal_class": {"identifier": "FragmentFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Map<String, FragmentControllerProvider> controllerProviders;", "modifier": "private static", "type": "Map<String, FragmentControllerProvider>", "declarator": "controllerProviders", "var_name": "controllerProviders"}, {"original_string": "private static Map<String, FragmentViewProvider> viewProviders;", "modifier": "private static", "type": "Map<String, FragmentViewProvider>", "declarator": "viewProviders", "var_name": "viewProviders"}, {"original_string": "protected final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "@Autowired\n\tApplicationContext applicationContext;", "modifier": "@Autowired", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@Autowired\n\tConversionService conversionService;", "modifier": "@Autowired", "type": "ConversionService", "declarator": "conversionService", "var_name": "conversionService"}, {"original_string": "@Autowired\n\tMessageSource messageSource;", "modifier": "@Autowired", "type": "MessageSource", "declarator": "messageSource", "var_name": "messageSource"}, {"original_string": "@Autowired\n    FormatterService formatterService;", "modifier": "@Autowired", "type": "FormatterService", "declarator": "formatterService", "var_name": "formatterService"}, {"original_string": "@Autowired\n\tExtensionManager extensionManager;", "modifier": "@Autowired", "type": "ExtensionManager", "declarator": "extensionManager", "var_name": "extensionManager"}, {"original_string": "@Autowired\n\tSessionFactory sessionFactory;", "modifier": "@Autowired", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "@Autowired(required = false)\n\tServletContext servletContext;", "modifier": "@Autowired(required = false)", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "@Autowired(required = false)\n\tList<FragmentActionInterceptor> fragmentActionInterceptors;", "modifier": "@Autowired(required = false)", "type": "List<FragmentActionInterceptor>", "declarator": "fragmentActionInterceptors", "var_name": "fragmentActionInterceptors"}, {"original_string": "@Autowired(required = false)\n\tList<FragmentRequestMapper> requestMappers;", "modifier": "@Autowired(required = false)", "type": "List<FragmentRequestMapper>", "declarator": "requestMappers", "var_name": "requestMappers"}, {"original_string": "@Autowired(required = false)\n    List<FragmentModelConfigurator> modelConfigurators;", "modifier": "@Autowired(required = false)", "type": "List<FragmentModelConfigurator>", "declarator": "modelConfigurators", "var_name": "modelConfigurators"}, {"original_string": "@Autowired(required = false)\n    List<PossibleFragmentControllerArgumentProvider> possibleFragmentControllerArgumentProviders;", "modifier": "@Autowired(required = false)", "type": "List<PossibleFragmentControllerArgumentProvider>", "declarator": "possibleFragmentControllerArgumentProviders", "var_name": "possibleFragmentControllerArgumentProviders"}, {"original_string": "@Autowired(required = false)\n    List<PossibleFragmentActionArgumentProvider> possibleFragmentActionArgumentProviders;", "modifier": "@Autowired(required = false)", "type": "List<PossibleFragmentActionArgumentProvider>", "declarator": "possibleFragmentActionArgumentProviders", "var_name": "possibleFragmentActionArgumentProviders"}, {"original_string": "private boolean developmentMode = false;", "modifier": "private", "type": "boolean", "declarator": "developmentMode = false", "var_name": "developmentMode"}, {"original_string": "private Map<String, FragmentView> viewCache = new HashMap<String, FragmentView>();", "modifier": "private", "type": "Map<String, FragmentView>", "declarator": "viewCache = new HashMap<String, FragmentView>()", "var_name": "viewCache"}, {"original_string": "private EmptyFragmentController emptyController = new EmptyFragmentController();", "modifier": "private", "type": "EmptyFragmentController", "declarator": "emptyController = new EmptyFragmentController()", "var_name": "emptyController"}], "methods": [{"identifier": "FragmentFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " FragmentFactory()", "full_signature": "public  FragmentFactory()", "class_method_signature": "FragmentFactory.FragmentFactory()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(FragmentContext context)", "modifiers": "public", "return": "String", "signature": "String process(FragmentContext context)", "full_signature": "public String process(FragmentContext context)", "class_method_signature": "FragmentFactory.process(FragmentContext context)", "testcase": false, "constructor": false}, {"identifier": "configureModel", "parameters": "(FragmentContext fragmentContext)", "modifiers": "private", "return": "void", "signature": "void configureModel(FragmentContext fragmentContext)", "full_signature": "private void configureModel(FragmentContext fragmentContext)", "class_method_signature": "FragmentFactory.configureModel(FragmentContext fragmentContext)", "testcase": false, "constructor": false}, {"identifier": "applyDefaultConfiguration", "parameters": "(FragmentContext context)", "modifiers": "private", "return": "void", "signature": "void applyDefaultConfiguration(FragmentContext context)", "full_signature": "private void applyDefaultConfiguration(FragmentContext context)", "class_method_signature": "FragmentFactory.applyDefaultConfiguration(FragmentContext context)", "testcase": false, "constructor": false}, {"identifier": "processThisFragment", "parameters": "(FragmentContext context)", "modifiers": "private", "return": "String", "signature": "String processThisFragment(FragmentContext context)", "full_signature": "private String processThisFragment(FragmentContext context)", "class_method_signature": "FragmentFactory.processThisFragment(FragmentContext context)", "testcase": false, "constructor": false}, {"identifier": "avoidDuplicateDecoration", "parameters": "(FragmentRequest replacement, FragmentRequest original)", "modifiers": "private", "return": "void", "signature": "void avoidDuplicateDecoration(FragmentRequest replacement, FragmentRequest original)", "full_signature": "private void avoidDuplicateDecoration(FragmentRequest replacement, FragmentRequest original)", "class_method_signature": "FragmentFactory.avoidDuplicateDecoration(FragmentRequest replacement, FragmentRequest original)", "testcase": false, "constructor": false}, {"identifier": "handleRequestWithController", "parameters": "(FragmentContext context)", "modifiers": "private", "return": "Object", "signature": "Object handleRequestWithController(FragmentContext context)", "full_signature": "private Object handleRequestWithController(FragmentContext context)", "class_method_signature": "FragmentFactory.handleRequestWithController(FragmentContext context)", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "(FragmentRequest request, String viewName)", "modifiers": "", "return": "FragmentView", "signature": "FragmentView getView(FragmentRequest request, String viewName)", "full_signature": " FragmentView getView(FragmentRequest request, String viewName)", "class_method_signature": "FragmentFactory.getView(FragmentRequest request, String viewName)", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "(String providerName, String fragmentName)", "modifiers": "public", "return": "Object", "signature": "Object getController(String providerName, String fragmentName)", "full_signature": "public Object getController(String providerName, String fragmentName)", "class_method_signature": "FragmentFactory.getController(String providerName, String fragmentName)", "testcase": false, "constructor": false}, {"identifier": "mapFragmentProviderAndId", "parameters": "(FragmentRequest request)", "modifiers": "private", "return": "FragmentRequest", "signature": "FragmentRequest mapFragmentProviderAndId(FragmentRequest request)", "full_signature": "private FragmentRequest mapFragmentProviderAndId(FragmentRequest request)", "class_method_signature": "FragmentFactory.mapFragmentProviderAndId(FragmentRequest request)", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "(FragmentRequest request)", "modifiers": "", "return": "Object", "signature": "Object getController(FragmentRequest request)", "full_signature": " Object getController(FragmentRequest request)", "class_method_signature": "FragmentFactory.getController(FragmentRequest request)", "testcase": false, "constructor": false}, {"identifier": "isDevelopmentMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDevelopmentMode()", "full_signature": "public boolean isDevelopmentMode()", "class_method_signature": "FragmentFactory.isDevelopmentMode()", "testcase": false, "constructor": false}, {"identifier": "setDevelopmentMode", "parameters": "(boolean developmentMode)", "modifiers": "public", "return": "void", "signature": "void setDevelopmentMode(boolean developmentMode)", "full_signature": "public void setDevelopmentMode(boolean developmentMode)", "class_method_signature": "FragmentFactory.setDevelopmentMode(boolean developmentMode)", "testcase": false, "constructor": false}, {"identifier": "getControllerProviders", "parameters": "()", "modifiers": "public", "return": "Map<String, FragmentControllerProvider>", "signature": "Map<String, FragmentControllerProvider> getControllerProviders()", "full_signature": "public Map<String, FragmentControllerProvider> getControllerProviders()", "class_method_signature": "FragmentFactory.getControllerProviders()", "testcase": false, "constructor": false}, {"identifier": "setControllerProviders", "parameters": "(Map<String, FragmentControllerProvider> newControllerProviders)", "modifiers": "public", "return": "void", "signature": "void setControllerProviders(Map<String, FragmentControllerProvider> newControllerProviders)", "full_signature": "public void setControllerProviders(Map<String, FragmentControllerProvider> newControllerProviders)", "class_method_signature": "FragmentFactory.setControllerProviders(Map<String, FragmentControllerProvider> newControllerProviders)", "testcase": false, "constructor": false}, {"identifier": "setAdditionalControllerProviders", "parameters": "(Map<String, FragmentControllerProvider> additional)", "modifiers": "public", "return": "void", "signature": "void setAdditionalControllerProviders(Map<String, FragmentControllerProvider> additional)", "full_signature": "public void setAdditionalControllerProviders(Map<String, FragmentControllerProvider> additional)", "class_method_signature": "FragmentFactory.setAdditionalControllerProviders(Map<String, FragmentControllerProvider> additional)", "testcase": false, "constructor": false}, {"identifier": "addControllerProvider", "parameters": "(String key, FragmentControllerProvider provider)", "modifiers": "public", "return": "void", "signature": "void addControllerProvider(String key, FragmentControllerProvider provider)", "full_signature": "public void addControllerProvider(String key, FragmentControllerProvider provider)", "class_method_signature": "FragmentFactory.addControllerProvider(String key, FragmentControllerProvider provider)", "testcase": false, "constructor": false}, {"identifier": "getViewProviders", "parameters": "()", "modifiers": "public", "return": "Map<String, FragmentViewProvider>", "signature": "Map<String, FragmentViewProvider> getViewProviders()", "full_signature": "public Map<String, FragmentViewProvider> getViewProviders()", "class_method_signature": "FragmentFactory.getViewProviders()", "testcase": false, "constructor": false}, {"identifier": "setViewProviders", "parameters": "(Map<String, FragmentViewProvider> newViewProviders)", "modifiers": "public", "return": "void", "signature": "void setViewProviders(Map<String, FragmentViewProvider> newViewProviders)", "full_signature": "public void setViewProviders(Map<String, FragmentViewProvider> newViewProviders)", "class_method_signature": "FragmentFactory.setViewProviders(Map<String, FragmentViewProvider> newViewProviders)", "testcase": false, "constructor": false}, {"identifier": "setAdditionalViewProviders", "parameters": "(Map<String, FragmentViewProvider> additional)", "modifiers": "public", "return": "void", "signature": "void setAdditionalViewProviders(Map<String, FragmentViewProvider> additional)", "full_signature": "public void setAdditionalViewProviders(Map<String, FragmentViewProvider> additional)", "class_method_signature": "FragmentFactory.setAdditionalViewProviders(Map<String, FragmentViewProvider> additional)", "testcase": false, "constructor": false}, {"identifier": "addViewProvider", "parameters": "(String key, FragmentViewProvider provider)", "modifiers": "public", "return": "void", "signature": "void addViewProvider(String key, FragmentViewProvider provider)", "full_signature": "public void addViewProvider(String key, FragmentViewProvider provider)", "class_method_signature": "FragmentFactory.addViewProvider(String key, FragmentViewProvider provider)", "testcase": false, "constructor": false}, {"identifier": "invokeFragmentAction", "parameters": "(String providerName, String fragmentName, String action, HttpServletRequest httpRequest, HttpServletResponse httpServletResponse)", "modifiers": "public", "return": "Object", "signature": "Object invokeFragmentAction(String providerName, String fragmentName, String action, HttpServletRequest httpRequest, HttpServletResponse httpServletResponse)", "full_signature": "public Object invokeFragmentAction(String providerName, String fragmentName, String action, HttpServletRequest httpRequest, HttpServletResponse httpServletResponse)", "class_method_signature": "FragmentFactory.invokeFragmentAction(String providerName, String fragmentName, String action, HttpServletRequest httpRequest, HttpServletResponse httpServletResponse)", "testcase": false, "constructor": false}, {"identifier": "describeParamsForErrorMessage", "parameters": "(Method method, Object[] params)", "modifiers": "private", "return": "String", "signature": "String describeParamsForErrorMessage(Method method, Object[] params)", "full_signature": "private String describeParamsForErrorMessage(Method method, Object[] params)", "class_method_signature": "FragmentFactory.describeParamsForErrorMessage(Method method, Object[] params)", "testcase": false, "constructor": false}, {"identifier": "fragmentExists", "parameters": "(String providerName, String fragmentName)", "modifiers": "public", "return": "boolean", "signature": "boolean fragmentExists(String providerName, String fragmentName)", "full_signature": "public boolean fragmentExists(String providerName, String fragmentName)", "class_method_signature": "FragmentFactory.fragmentExists(String providerName, String fragmentName)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object obs, Class<T> toType)", "modifiers": "public", "return": "T", "signature": "T convert(Object obs, Class<T> toType)", "full_signature": "public T convert(Object obs, Class<T> toType)", "class_method_signature": "FragmentFactory.convert(Object obs, Class<T> toType)", "testcase": false, "constructor": false}, {"identifier": "getSpringBeansOfType", "parameters": "(Class<T> ofType)", "modifiers": "public", "return": "Map<String, T>", "signature": "Map<String, T> getSpringBeansOfType(Class<T> ofType)", "full_signature": "public Map<String, T> getSpringBeansOfType(Class<T> ofType)", "class_method_signature": "FragmentFactory.getSpringBeansOfType(Class<T> ofType)", "testcase": false, "constructor": false}, {"identifier": "getMessageSource", "parameters": "()", "modifiers": "public", "return": "MessageSource", "signature": "MessageSource getMessageSource()", "full_signature": "public MessageSource getMessageSource()", "class_method_signature": "FragmentFactory.getMessageSource()", "testcase": false, "constructor": false}, {"identifier": "getExtensionManager", "parameters": "()", "modifiers": "public", "return": "ExtensionManager", "signature": "ExtensionManager getExtensionManager()", "full_signature": "public ExtensionManager getExtensionManager()", "class_method_signature": "FragmentFactory.getExtensionManager()", "testcase": false, "constructor": false}, {"identifier": "getConversionService", "parameters": "()", "modifiers": "public", "return": "ConversionService", "signature": "ConversionService getConversionService()", "full_signature": "public ConversionService getConversionService()", "class_method_signature": "FragmentFactory.getConversionService()", "testcase": false, "constructor": false}, {"identifier": "getFormatterService", "parameters": "()", "modifiers": "public", "return": "FormatterService", "signature": "FormatterService getFormatterService()", "full_signature": "public FormatterService getFormatterService()", "class_method_signature": "FragmentFactory.getFormatterService()", "testcase": false, "constructor": false}, {"identifier": "getServletContext", "parameters": "()", "modifiers": "public", "return": "ServletContext", "signature": "ServletContext getServletContext()", "full_signature": "public ServletContext getServletContext()", "class_method_signature": "FragmentFactory.getServletContext()", "testcase": false, "constructor": false}, {"identifier": "getModelConfigurators", "parameters": "()", "modifiers": "public", "return": "List<FragmentModelConfigurator>", "signature": "List<FragmentModelConfigurator> getModelConfigurators()", "full_signature": "public List<FragmentModelConfigurator> getModelConfigurators()", "class_method_signature": "FragmentFactory.getModelConfigurators()", "testcase": false, "constructor": false}, {"identifier": "setModelConfigurators", "parameters": "(List<FragmentModelConfigurator> modelConfigurators)", "modifiers": "public", "return": "void", "signature": "void setModelConfigurators(List<FragmentModelConfigurator> modelConfigurators)", "full_signature": "public void setModelConfigurators(List<FragmentModelConfigurator> modelConfigurators)", "class_method_signature": "FragmentFactory.setModelConfigurators(List<FragmentModelConfigurator> modelConfigurators)", "testcase": false, "constructor": false}, {"identifier": "setPossibleFragmentControllerArgumentProviders", "parameters": "(List<PossibleFragmentControllerArgumentProvider> possibleFragmentControllerArgumentProviders)", "modifiers": "public", "return": "void", "signature": "void setPossibleFragmentControllerArgumentProviders(List<PossibleFragmentControllerArgumentProvider> possibleFragmentControllerArgumentProviders)", "full_signature": "public void setPossibleFragmentControllerArgumentProviders(List<PossibleFragmentControllerArgumentProvider> possibleFragmentControllerArgumentProviders)", "class_method_signature": "FragmentFactory.setPossibleFragmentControllerArgumentProviders(List<PossibleFragmentControllerArgumentProvider> possibleFragmentControllerArgumentProviders)", "testcase": false, "constructor": false}, {"identifier": "setPossibleFragmentActionArgumentProviders", "parameters": "(List<PossibleFragmentActionArgumentProvider> possibleFragmentActionArgumentProviders)", "modifiers": "public", "return": "void", "signature": "void setPossibleFragmentActionArgumentProviders(List<PossibleFragmentActionArgumentProvider> possibleFragmentActionArgumentProviders)", "full_signature": "public void setPossibleFragmentActionArgumentProviders(List<PossibleFragmentActionArgumentProvider> possibleFragmentActionArgumentProviders)", "class_method_signature": "FragmentFactory.setPossibleFragmentActionArgumentProviders(List<PossibleFragmentActionArgumentProvider> possibleFragmentActionArgumentProviders)", "testcase": false, "constructor": false}, {"identifier": "setSessionFactory", "parameters": "(SessionFactory sessionFactory)", "modifiers": "public", "return": "void", "signature": "void setSessionFactory(SessionFactory sessionFactory)", "full_signature": "public void setSessionFactory(SessionFactory sessionFactory)", "class_method_signature": "FragmentFactory.setSessionFactory(SessionFactory sessionFactory)", "testcase": false, "constructor": false}, {"identifier": "getRequestMappers", "parameters": "()", "modifiers": "public", "return": "List<FragmentRequestMapper>", "signature": "List<FragmentRequestMapper> getRequestMappers()", "full_signature": "public List<FragmentRequestMapper> getRequestMappers()", "class_method_signature": "FragmentFactory.getRequestMappers()", "testcase": false, "constructor": false}, {"identifier": "setRequestMappers", "parameters": "(List<FragmentRequestMapper> requestMappers)", "modifiers": "public", "return": "void", "signature": "void setRequestMappers(List<FragmentRequestMapper> requestMappers)", "full_signature": "public void setRequestMappers(List<FragmentRequestMapper> requestMappers)", "class_method_signature": "FragmentFactory.setRequestMappers(List<FragmentRequestMapper> requestMappers)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/ui/framework/fragment/FragmentFactory.java"}, "focal_method": {"identifier": "process", "parameters": "(FragmentContext context)", "modifiers": "public", "return": "String", "body": "public String process(FragmentContext context) throws PageAction {\n\t\tif (context.getRequestDepth() > 100)\n\t\t\tthrow new UiFrameworkException(\"Fragment inclusion > 100 levels deep. Check your code for infinite loops.\");\n\t\tlong startTime = System.currentTimeMillis();\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"processing \" + context.getRequest());\n\t\t}\n\t\t// before using the fragment request, apply any fragment mappers\n\t\tcontext.setRequest(mapFragmentProviderAndId(context.getRequest()));\n\n\t\tapplyDefaultConfiguration(context);\n        configureModel(context);\n\t\t// it's possible someone has pre-requested that this fragment be decorated\n\t\tif (context.getRequest().getConfiguration().containsKey(\"decorator\")) {\n\t\t\tString decoratorProvider = (String) context.getRequest().getConfiguration().get(\"decoratorProvider\");\n\t\t\tif (decoratorProvider == null) {\n\t\t\t\tdecoratorProvider = \"*\";\n\t\t\t}\n\t\t\tString decoratorName = \"decorator/\" + context.getRequest().getConfiguration().get(\"decorator\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> decoratorConfigurationMap = (Map<String, Object>) context.getRequest().getConfiguration()\n\t\t\t        .get(\"decoratorConfig\");\n\t\t\tFragmentConfiguration decoratorConfiguration = new FragmentConfiguration(decoratorConfigurationMap);\n\t\t\tFragmentRequest decorator = new FragmentRequest(decoratorProvider, decoratorName, decoratorConfiguration);\n\t\t\tcontext.setDecorateWith(decorator);\n\t\t}\n\t\tString result = processThisFragment(context);\n\t\tif (context.getDecorateWith() == null)\n\t\t\treturn result;\n\t\tFragmentRequest decoratorRequest = context.getDecorateWith();\n\t\tdecoratorRequest.getConfiguration().put(\"content\", result);\n\t\tdecoratorRequest.getConfiguration().put(\"contentFragmentId\", context.getRequest().getConfiguration().get(\"id\"));\n\t\tFragmentContext decoratorContext = new FragmentContext(decoratorRequest, context);\n        String ret = process(decoratorContext);\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"\\thandled \" + context.getRequest() + \" in \" + (System.currentTimeMillis() - startTime) + \" ms\");\n\t\t}\n\t\treturn ret;\n\t}", "signature": "String process(FragmentContext context)", "full_signature": "public String process(FragmentContext context)", "class_method_signature": "FragmentFactory.process(FragmentContext context)", "testcase": false, "constructor": false, "invocations": ["getRequestDepth", "currentTimeMillis", "isDebugEnabled", "debug", "getRequest", "setRequest", "mapFragmentProviderAndId", "getRequest", "applyDefaultConfiguration", "configureModel", "containsKey", "getConfiguration", "getRequest", "get", "getConfiguration", "getRequest", "get", "getConfiguration", "getRequest", "get", "getConfiguration", "getRequest", "setDecorateWith", "processThisFragment", "getDecorateWith", "getDecorateWith", "put", "getConfiguration", "put", "getConfiguration", "get", "getConfiguration", "getRequest", "process", "isDebugEnabled", "debug", "getRequest", "currentTimeMillis"]}, "repository": {"repo_id": 3690150, "url": "https://github.com/openmrs/openmrs-module-uiframework", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 12, "size": 1405, "license": "licensed"}}