{"test_class": {"identifier": "PageFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "PageFactory factory;", "modifier": "", "type": "PageFactory", "declarator": "factory", "var_name": "factory"}], "file": "api/src/test/java/org/openmrs/ui/framework/page/PageFactoryTest.java"}, "test_case": {"identifier": "getController_shouldGetAControllerFromAnyProviderIfNoneSpecified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getController_shouldGetAControllerFromAnyProviderIfNoneSpecified() throws Exception {\n\t\tAssert.assertNotNull(factory.getController(pageRequest(\"*\", \"somepage\")));\n\t\tAssert.assertNotNull(factory.getController(pageRequest(\"*\", \"otherpage\")));\n\t\tAssert.assertNull(factory.getController(pageRequest(\"*\", \"nothingwiththisname\")));\n\t}", "signature": "void getController_shouldGetAControllerFromAnyProviderIfNoneSpecified()", "full_signature": "@Test public void getController_shouldGetAControllerFromAnyProviderIfNoneSpecified()", "class_method_signature": "PageFactoryTest.getController_shouldGetAControllerFromAnyProviderIfNoneSpecified()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getController", "pageRequest", "assertNotNull", "getController", "pageRequest", "assertNull", "getController", "pageRequest"]}, "focal_class": {"identifier": "PageFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Map<String, PageControllerProvider> controllerProviders;", "modifier": "private static", "type": "Map<String, PageControllerProvider>", "declarator": "controllerProviders", "var_name": "controllerProviders"}, {"original_string": "private static Map<String, PageViewProvider> viewProviders;", "modifier": "private static", "type": "Map<String, PageViewProvider>", "declarator": "viewProviders", "var_name": "viewProviders"}, {"original_string": "protected final Logger log = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "@Autowired\n\tApplicationContext applicationContext;", "modifier": "@Autowired", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@Autowired\n\tMessageSource messageSource;", "modifier": "@Autowired", "type": "MessageSource", "declarator": "messageSource", "var_name": "messageSource"}, {"original_string": "@Autowired\n\t@Qualifier(\"coreFragmentFactory\")\n\tFragmentFactory fragmentFactory;", "modifier": "@Autowired\n\t@Qualifier(\"coreFragmentFactory\")", "type": "FragmentFactory", "declarator": "fragmentFactory", "var_name": "fragmentFactory"}, {"original_string": "@Autowired(required=false)\n\tList<PageRequestMapper> requestMappers;", "modifier": "@Autowired(required=false)", "type": "List<PageRequestMapper>", "declarator": "requestMappers", "var_name": "requestMappers"}, {"original_string": "@Autowired\n\tExtensionManager extensionManager;", "modifier": "@Autowired", "type": "ExtensionManager", "declarator": "extensionManager", "var_name": "extensionManager"}, {"original_string": "@Autowired\n\tConversionService conversionService;", "modifier": "@Autowired", "type": "ConversionService", "declarator": "conversionService", "var_name": "conversionService"}, {"original_string": "@Autowired(required = false)\n\tList<PageRequestInterceptor> pageRequestInterceptors;", "modifier": "@Autowired(required = false)", "type": "List<PageRequestInterceptor>", "declarator": "pageRequestInterceptors", "var_name": "pageRequestInterceptors"}, {"original_string": "@Autowired(required = false)\n\tList<PageModelConfigurator> modelConfigurators;", "modifier": "@Autowired(required = false)", "type": "List<PageModelConfigurator>", "declarator": "modelConfigurators", "var_name": "modelConfigurators"}, {"original_string": "@Autowired(required = false)\n\tList<PossiblePageControllerArgumentProvider> possiblePageControllerArgumentProviders;", "modifier": "@Autowired(required = false)", "type": "List<PossiblePageControllerArgumentProvider>", "declarator": "possiblePageControllerArgumentProviders", "var_name": "possiblePageControllerArgumentProviders"}, {"original_string": "private EmptyPageController emptyController = new EmptyPageController();", "modifier": "private", "type": "EmptyPageController", "declarator": "emptyController = new EmptyPageController()", "var_name": "emptyController"}], "methods": [{"identifier": "handle", "parameters": "(PageRequest request)", "modifiers": "public", "return": "String", "signature": "String handle(PageRequest request)", "full_signature": "public String handle(PageRequest request)", "class_method_signature": "PageFactory.handle(PageRequest request)", "testcase": false, "constructor": false}, {"identifier": "overridePageProviderAndName", "parameters": "(PageRequest request)", "modifiers": "private", "return": "void", "signature": "void overridePageProviderAndName(PageRequest request)", "full_signature": "private void overridePageProviderAndName(PageRequest request)", "class_method_signature": "PageFactory.overridePageProviderAndName(PageRequest request)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(PageContext context)", "modifiers": "public", "return": "String", "signature": "String process(PageContext context)", "full_signature": "public String process(PageContext context)", "class_method_signature": "PageFactory.process(PageContext context)", "testcase": false, "constructor": false}, {"identifier": "processThisFragment", "parameters": "(PageContext context)", "modifiers": "private", "return": "String", "signature": "String processThisFragment(PageContext context)", "full_signature": "private String processThisFragment(PageContext context)", "class_method_signature": "PageFactory.processThisFragment(PageContext context)", "testcase": false, "constructor": false}, {"identifier": "handleRequestWithController", "parameters": "(PageContext context)", "modifiers": "private", "return": "Object", "signature": "Object handleRequestWithController(PageContext context)", "full_signature": "private Object handleRequestWithController(PageContext context)", "class_method_signature": "PageFactory.handleRequestWithController(PageContext context)", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "(PageRequest request)", "modifiers": "", "return": "Object", "signature": "Object getController(PageRequest request)", "full_signature": " Object getController(PageRequest request)", "class_method_signature": "PageFactory.getController(PageRequest request)", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "(String providerName, String pageName)", "modifiers": "private", "return": "Object", "signature": "Object getController(String providerName, String pageName)", "full_signature": "private Object getController(String providerName, String pageName)", "class_method_signature": "PageFactory.getController(String providerName, String pageName)", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "(String viewProviderAndName, PageRequest request)", "modifiers": "", "return": "PageView", "signature": "PageView getView(String viewProviderAndName, PageRequest request)", "full_signature": " PageView getView(String viewProviderAndName, PageRequest request)", "class_method_signature": "PageFactory.getView(String viewProviderAndName, PageRequest request)", "testcase": false, "constructor": false}, {"identifier": "getControllerProviders", "parameters": "()", "modifiers": "public", "return": "Map<String, PageControllerProvider>", "signature": "Map<String, PageControllerProvider> getControllerProviders()", "full_signature": "public Map<String, PageControllerProvider> getControllerProviders()", "class_method_signature": "PageFactory.getControllerProviders()", "testcase": false, "constructor": false}, {"identifier": "setControllerProviders", "parameters": "(Map<String, PageControllerProvider> newControllerProviders)", "modifiers": "public", "return": "void", "signature": "void setControllerProviders(Map<String, PageControllerProvider> newControllerProviders)", "full_signature": "public void setControllerProviders(Map<String, PageControllerProvider> newControllerProviders)", "class_method_signature": "PageFactory.setControllerProviders(Map<String, PageControllerProvider> newControllerProviders)", "testcase": false, "constructor": false}, {"identifier": "setAdditionalControllerProviders", "parameters": "(Map<String, PageControllerProvider> additional)", "modifiers": "public", "return": "void", "signature": "void setAdditionalControllerProviders(Map<String, PageControllerProvider> additional)", "full_signature": "public void setAdditionalControllerProviders(Map<String, PageControllerProvider> additional)", "class_method_signature": "PageFactory.setAdditionalControllerProviders(Map<String, PageControllerProvider> additional)", "testcase": false, "constructor": false}, {"identifier": "addControllerProvider", "parameters": "(String key, PageControllerProvider provider)", "modifiers": "public", "return": "void", "signature": "void addControllerProvider(String key, PageControllerProvider provider)", "full_signature": "public void addControllerProvider(String key, PageControllerProvider provider)", "class_method_signature": "PageFactory.addControllerProvider(String key, PageControllerProvider provider)", "testcase": false, "constructor": false}, {"identifier": "getViewProviders", "parameters": "()", "modifiers": "public", "return": "Map<String, PageViewProvider>", "signature": "Map<String, PageViewProvider> getViewProviders()", "full_signature": "public Map<String, PageViewProvider> getViewProviders()", "class_method_signature": "PageFactory.getViewProviders()", "testcase": false, "constructor": false}, {"identifier": "setViewProviders", "parameters": "(Map<String, PageViewProvider> newViewProviders)", "modifiers": "public", "return": "void", "signature": "void setViewProviders(Map<String, PageViewProvider> newViewProviders)", "full_signature": "public void setViewProviders(Map<String, PageViewProvider> newViewProviders)", "class_method_signature": "PageFactory.setViewProviders(Map<String, PageViewProvider> newViewProviders)", "testcase": false, "constructor": false}, {"identifier": "setAdditionalViewProviders", "parameters": "(Map<String, PageViewProvider> additional)", "modifiers": "public", "return": "void", "signature": "void setAdditionalViewProviders(Map<String, PageViewProvider> additional)", "full_signature": "public void setAdditionalViewProviders(Map<String, PageViewProvider> additional)", "class_method_signature": "PageFactory.setAdditionalViewProviders(Map<String, PageViewProvider> additional)", "testcase": false, "constructor": false}, {"identifier": "addViewProvider", "parameters": "(String key, PageViewProvider provider)", "modifiers": "public", "return": "void", "signature": "void addViewProvider(String key, PageViewProvider provider)", "full_signature": "public void addViewProvider(String key, PageViewProvider provider)", "class_method_signature": "PageFactory.addViewProvider(String key, PageViewProvider provider)", "testcase": false, "constructor": false}, {"identifier": "getRequestMappers", "parameters": "()", "modifiers": "public", "return": "List<PageRequestMapper>", "signature": "List<PageRequestMapper> getRequestMappers()", "full_signature": "public List<PageRequestMapper> getRequestMappers()", "class_method_signature": "PageFactory.getRequestMappers()", "testcase": false, "constructor": false}, {"identifier": "setRequestMappers", "parameters": "(List<PageRequestMapper> requestMappers)", "modifiers": "public", "return": "void", "signature": "void setRequestMappers(List<PageRequestMapper> requestMappers)", "full_signature": "public void setRequestMappers(List<PageRequestMapper> requestMappers)", "class_method_signature": "PageFactory.setRequestMappers(List<PageRequestMapper> requestMappers)", "testcase": false, "constructor": false}, {"identifier": "getConversionService", "parameters": "()", "modifiers": "public", "return": "ConversionService", "signature": "ConversionService getConversionService()", "full_signature": "public ConversionService getConversionService()", "class_method_signature": "PageFactory.getConversionService()", "testcase": false, "constructor": false}, {"identifier": "getModelConfigurators", "parameters": "()", "modifiers": "public", "return": "List<PageModelConfigurator>", "signature": "List<PageModelConfigurator> getModelConfigurators()", "full_signature": "public List<PageModelConfigurator> getModelConfigurators()", "class_method_signature": "PageFactory.getModelConfigurators()", "testcase": false, "constructor": false}, {"identifier": "setModelConfigurators", "parameters": "(List<PageModelConfigurator> modelConfigurators)", "modifiers": "public", "return": "void", "signature": "void setModelConfigurators(List<PageModelConfigurator> modelConfigurators)", "full_signature": "public void setModelConfigurators(List<PageModelConfigurator> modelConfigurators)", "class_method_signature": "PageFactory.setModelConfigurators(List<PageModelConfigurator> modelConfigurators)", "testcase": false, "constructor": false}, {"identifier": "setPossiblePageControllerArgumentProviders", "parameters": "(List<PossiblePageControllerArgumentProvider> possiblePageControllerArgumentProviders)", "modifiers": "public", "return": "void", "signature": "void setPossiblePageControllerArgumentProviders(List<PossiblePageControllerArgumentProvider> possiblePageControllerArgumentProviders)", "full_signature": "public void setPossiblePageControllerArgumentProviders(List<PossiblePageControllerArgumentProvider> possiblePageControllerArgumentProviders)", "class_method_signature": "PageFactory.setPossiblePageControllerArgumentProviders(List<PossiblePageControllerArgumentProvider> possiblePageControllerArgumentProviders)", "testcase": false, "constructor": false}, {"identifier": "setPageRequestInterceptors", "parameters": "(List<PageRequestInterceptor> pageRequestInterceptors)", "modifiers": "public", "return": "void", "signature": "void setPageRequestInterceptors(List<PageRequestInterceptor> pageRequestInterceptors)", "full_signature": "public void setPageRequestInterceptors(List<PageRequestInterceptor> pageRequestInterceptors)", "class_method_signature": "PageFactory.setPageRequestInterceptors(List<PageRequestInterceptor> pageRequestInterceptors)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/ui/framework/page/PageFactory.java"}, "focal_method": {"identifier": "getController", "parameters": "(PageRequest request)", "modifiers": "", "return": "Object", "body": "Object getController(PageRequest request) {\n\t\treturn getController(request.getMappedProviderName(), request.getMappedPageName());\n\t}", "signature": "Object getController(PageRequest request)", "full_signature": " Object getController(PageRequest request)", "class_method_signature": "PageFactory.getController(PageRequest request)", "testcase": false, "constructor": false, "invocations": ["getController", "getMappedProviderName", "getMappedPageName"]}, "repository": {"repo_id": 3690150, "url": "https://github.com/openmrs/openmrs-module-uiframework", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 12, "size": 1405, "license": "licensed"}}