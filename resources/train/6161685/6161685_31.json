{"test_class": {"identifier": "JacksonPersonalGenomeConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PersonalGenomeConverter converter;", "modifier": "private", "type": "PersonalGenomeConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private static JsonFactory jsonFactory;", "modifier": "private static", "type": "JsonFactory", "declarator": "jsonFactory", "var_name": "jsonFactory"}], "file": "client/src/test/java/com/github/heuermh/personalgenome/client/converter/JacksonPersonalGenomeConverterTest.java"}, "test_case": {"identifier": "testParseAncestryFlat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseAncestryFlat() {\n        InputStream inputStream = getClass().getResourceAsStream(\"ancestryFlat.json\");\n        Ancestry ancestry = converter.parseAncestry(inputStream);\n        assertNotNull(ancestry);\n        assertEquals(\"7ad467ea509080fb\", ancestry.getProfileId());\n        assertEquals(\"Total\", ancestry.getLabel());\n        assertEquals(1.0d, ancestry.getProportion(), 0.1d);\n        assertEquals(0.0d, ancestry.getUnassigned(), 0.1d);\n        assertNotNull(ancestry.getSubPopulations());\n        assertTrue(ancestry.getSubPopulations().isEmpty());\n    }", "signature": "void testParseAncestryFlat()", "full_signature": "@Test public void testParseAncestryFlat()", "class_method_signature": "JacksonPersonalGenomeConverterTest.testParseAncestryFlat()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "parseAncestry", "assertNotNull", "assertEquals", "getProfileId", "assertEquals", "getLabel", "assertEquals", "getProportion", "assertEquals", "getUnassigned", "assertNotNull", "getSubPopulations", "assertTrue", "isEmpty", "getSubPopulations"]}, "focal_class": {"identifier": "JacksonPersonalGenomeConverter", "superclass": "", "interfaces": "implements PersonalGenomeConverter", "fields": [{"original_string": "private final JsonFactory jsonFactory;", "modifier": "private final", "type": "JsonFactory", "declarator": "jsonFactory", "var_name": "jsonFactory"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(JacksonPersonalGenomeConverter.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JacksonPersonalGenomeConverter.class)", "var_name": "logger"}], "methods": [{"identifier": "JacksonPersonalGenomeConverter", "parameters": "(final JsonFactory jsonFactory)", "modifiers": "public", "return": "", "signature": " JacksonPersonalGenomeConverter(final JsonFactory jsonFactory)", "full_signature": "public  JacksonPersonalGenomeConverter(final JsonFactory jsonFactory)", "class_method_signature": "JacksonPersonalGenomeConverter.JacksonPersonalGenomeConverter(final JsonFactory jsonFactory)", "testcase": false, "constructor": true}, {"identifier": "parseException", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "PersonalGenomeClientException", "signature": "PersonalGenomeClientException parseException(final InputStream inputStream)", "full_signature": "@Override public PersonalGenomeClientException parseException(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseException(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseUser", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "User", "signature": "User parseUser(final InputStream inputStream)", "full_signature": "@Override public User parseUser(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseUser(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseNames", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "UserName", "signature": "UserName parseNames(final InputStream inputStream)", "full_signature": "@Override public UserName parseNames(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseNames(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseHaplogroups", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "Haplogroup", "signature": "Haplogroup parseHaplogroups(final InputStream inputStream)", "full_signature": "@Override public Haplogroup parseHaplogroups(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseHaplogroups(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseGenotypes", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "Genotype", "signature": "Genotype parseGenotypes(final InputStream inputStream)", "full_signature": "@Override public Genotype parseGenotypes(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseGenotypes(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseGenomes", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "Genome", "signature": "Genome parseGenomes(final InputStream inputStream)", "full_signature": "@Override public Genome parseGenomes(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseGenomes(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseSubPopulation", "parameters": "(final String id, final List<Ancestry> ancestries, final JsonParser parser)", "modifiers": "", "return": "List<Ancestry>", "signature": "List<Ancestry> parseSubPopulation(final String id, final List<Ancestry> ancestries, final JsonParser parser)", "full_signature": " List<Ancestry> parseSubPopulation(final String id, final List<Ancestry> ancestries, final JsonParser parser)", "class_method_signature": "JacksonPersonalGenomeConverter.parseSubPopulation(final String id, final List<Ancestry> ancestries, final JsonParser parser)", "testcase": false, "constructor": false}, {"identifier": "parseAncestry", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "Ancestry", "signature": "Ancestry parseAncestry(final InputStream inputStream)", "full_signature": "@Override public Ancestry parseAncestry(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseAncestry(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseNeanderthalProportion", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "double", "signature": "double parseNeanderthalProportion(final InputStream inputStream)", "full_signature": "@Override public double parseNeanderthalProportion(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseNeanderthalProportion(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseRelatives", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "List<Relative>", "signature": "List<Relative> parseRelatives(final InputStream inputStream)", "full_signature": "@Override public List<Relative> parseRelatives(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseRelatives(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseRisks", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "List<Risk>", "signature": "List<Risk> parseRisks(final InputStream inputStream)", "full_signature": "@Override public List<Risk> parseRisks(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseRisks(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseCarriers", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "List<Carrier>", "signature": "List<Carrier> parseCarriers(final InputStream inputStream)", "full_signature": "@Override public List<Carrier> parseCarriers(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseCarriers(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseDrugResponses", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "List<DrugResponse>", "signature": "List<DrugResponse> parseDrugResponses(final InputStream inputStream)", "full_signature": "@Override public List<DrugResponse> parseDrugResponses(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseDrugResponses(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parseTraits", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "List<Trait>", "signature": "List<Trait> parseTraits(final InputStream inputStream)", "full_signature": "@Override public List<Trait> parseTraits(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseTraits(final InputStream inputStream)", "testcase": false, "constructor": false}], "file": "client/src/main/java/com/github/heuermh/personalgenome/client/converter/JacksonPersonalGenomeConverter.java"}, "focal_method": {"identifier": "parseAncestry", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "Ancestry", "body": "@Override\n    public Ancestry parseAncestry(final InputStream inputStream) {\n        checkNotNull(inputStream);\n        JsonParser parser = null;\n        try {\n            parser = jsonFactory.createParser(inputStream);\n            parser.nextToken();\n\n            String id = null;\n            String label = null;\n            double proportion = 0.0d;\n            double unassigned = 0.0d;\n            List<Ancestry> subPopulations = new ArrayList<Ancestry>();\n            while (parser.nextToken() != JsonToken.END_OBJECT) {\n                String field = parser.getCurrentName();\n                parser.nextToken();\n\n                if (\"id\".equals(field)) {\n                    id = parser.getText();\n                }\n                else if (\"ancestry\".equals(field)) {\n                    while (parser.nextToken() != JsonToken.END_OBJECT) {\n                        String ancestryField = parser.getCurrentName();\n                        parser.nextToken();\n\n                        if (\"label\".equals(ancestryField)) {\n                            label = parser.getText();\n                        }\n                        else if (\"proportion\".equals(ancestryField)) {\n                            proportion = Double.parseDouble(parser.getText());\n                        }\n                        else if (\"unassigned\".equals(ancestryField)) {\n                            unassigned = Double.parseDouble(parser.getText());\n                        }\n                        else if (\"sub_populations\".equals(ancestryField)) {\n                            subPopulations = parseSubPopulation(id, subPopulations, parser);\n                        }\n                    }\n                }\n            }\n            return new Ancestry(id, label, proportion, unassigned, subPopulations);\n        }\n        catch (IOException e) {\n            logger.warn(\"could not parse ancestry\", e);\n        }\n        finally {\n            try {\n                inputStream.close();\n            }\n            catch (Exception e) {\n                // ignored\n            }\n            try {\n                parser.close();\n            }\n            catch (Exception e) {\n                // ignored\n            }\n        }\n        return null;\n    }", "signature": "Ancestry parseAncestry(final InputStream inputStream)", "full_signature": "@Override public Ancestry parseAncestry(final InputStream inputStream)", "class_method_signature": "JacksonPersonalGenomeConverter.parseAncestry(final InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "createParser", "nextToken", "nextToken", "getCurrentName", "nextToken", "equals", "getText", "equals", "nextToken", "getCurrentName", "nextToken", "equals", "getText", "equals", "parseDouble", "getText", "equals", "parseDouble", "getText", "equals", "parseSubPopulation", "warn", "close", "close"]}, "repository": {"repo_id": 6161685, "url": "https://github.com/heuermh/personal-genome-client", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 17783, "license": "licensed"}}