{"test_class": {"identifier": "ScribePersonalGenomeClientTest", "superclass": "extends AbstractPersonalGenomeClientTest", "interfaces": "", "fields": [{"original_string": "private ScribePersonalGenomeClient scribeClient;", "modifier": "private", "type": "ScribePersonalGenomeClient", "declarator": "scribeClient", "var_name": "scribeClient"}, {"original_string": "@Mock\n    private OAuthService service;", "modifier": "@Mock\n    private", "type": "OAuthService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private Token accessToken;", "modifier": "@Mock\n    private", "type": "Token", "declarator": "accessToken", "var_name": "accessToken"}, {"original_string": "@Mock\n    private PersonalGenomeConverter converter;", "modifier": "@Mock\n    private", "type": "PersonalGenomeConverter", "declarator": "converter", "var_name": "converter"}], "file": "client/src/test/java/com/github/heuermh/personalgenome/client/scribe/ScribePersonalGenomeClientTest.java"}, "test_case": {"identifier": "testCreateAndSignRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateAndSignRequest() {\n        OAuthRequest request = scribeClient.createAndSignRequest(\"http://localhost\");\n        assertNotNull(request);\n        assertTrue(request.getHeaders().containsKey(\"Authorization\"));\n        verify(service).signRequest(eq(accessToken), any(OAuthRequest.class));\n    }", "signature": "void testCreateAndSignRequest()", "full_signature": "@Test public void testCreateAndSignRequest()", "class_method_signature": "ScribePersonalGenomeClientTest.testCreateAndSignRequest()", "testcase": true, "constructor": false, "invocations": ["createAndSignRequest", "assertNotNull", "assertTrue", "containsKey", "getHeaders", "signRequest", "verify", "eq", "any"]}, "focal_class": {"identifier": "ScribePersonalGenomeClient", "superclass": "", "interfaces": "implements PersonalGenomeClient", "fields": [{"original_string": "private final Token accessToken;", "modifier": "private final", "type": "Token", "declarator": "accessToken", "var_name": "accessToken"}, {"original_string": "private final OAuthService service;", "modifier": "private final", "type": "OAuthService", "declarator": "service", "var_name": "service"}, {"original_string": "private final PersonalGenomeConverter converter;", "modifier": "private final", "type": "PersonalGenomeConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(ScribePersonalGenomeClient.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ScribePersonalGenomeClient.class)", "var_name": "logger"}, {"original_string": "private static final String USER_URL = \"https://api.23andme.com/1/user\";", "modifier": "private static final", "type": "String", "declarator": "USER_URL = \"https://api.23andme.com/1/user\"", "var_name": "USER_URL"}, {"original_string": "private static final String NAMES_URL = \"https://api.23andme.com/1/names/%s/\";", "modifier": "private static final", "type": "String", "declarator": "NAMES_URL = \"https://api.23andme.com/1/names/%s/\"", "var_name": "NAMES_URL"}, {"original_string": "private static final String HAPLOGROUPS_URL = \"https://api.23andme.com/1/haplogroups/%s/\";", "modifier": "private static final", "type": "String", "declarator": "HAPLOGROUPS_URL = \"https://api.23andme.com/1/haplogroups/%s/\"", "var_name": "HAPLOGROUPS_URL"}, {"original_string": "private static final String GENOTYPE_URL = \"https://api.23andme.com/1/genotype/%s/?locations=%s\";", "modifier": "private static final", "type": "String", "declarator": "GENOTYPE_URL = \"https://api.23andme.com/1/genotype/%s/?locations=%s\"", "var_name": "GENOTYPE_URL"}, {"original_string": "private static final String GENOMES_URL = \"https://api.23andme.com/1/genomes/%s/\";", "modifier": "private static final", "type": "String", "declarator": "GENOMES_URL = \"https://api.23andme.com/1/genomes/%s/\"", "var_name": "GENOMES_URL"}, {"original_string": "private static final String ANCESTRY_URL = \"https://api.23andme.com/1/ancestry/%s/?threshold=%f\";", "modifier": "private static final", "type": "String", "declarator": "ANCESTRY_URL = \"https://api.23andme.com/1/ancestry/%s/?threshold=%f\"", "var_name": "ANCESTRY_URL"}, {"original_string": "private static final String NEANDERTHAL_URL = \"https://api.23andme.com/1/neanderthal/%s/\";", "modifier": "private static final", "type": "String", "declarator": "NEANDERTHAL_URL = \"https://api.23andme.com/1/neanderthal/%s/\"", "var_name": "NEANDERTHAL_URL"}, {"original_string": "private static final String RELATIVES_URL = \"https://api.23andme.com/1/relatives/%s/?limit=%f&offset=%f\";", "modifier": "private static final", "type": "String", "declarator": "RELATIVES_URL = \"https://api.23andme.com/1/relatives/%s/?limit=%f&offset=%f\"", "var_name": "RELATIVES_URL"}, {"original_string": "private static final String RISKS_URL = \"https://api.23andme.com/1/risks/%s/\";", "modifier": "private static final", "type": "String", "declarator": "RISKS_URL = \"https://api.23andme.com/1/risks/%s/\"", "var_name": "RISKS_URL"}, {"original_string": "private static final String CARRIERS_URL = \"https://api.23andme.com/1/carriers/%s/\";", "modifier": "private static final", "type": "String", "declarator": "CARRIERS_URL = \"https://api.23andme.com/1/carriers/%s/\"", "var_name": "CARRIERS_URL"}, {"original_string": "private static final String DRUG_RESPONSES_URL = \"https://api.23andme.com/1/drug_responses/%s/\";", "modifier": "private static final", "type": "String", "declarator": "DRUG_RESPONSES_URL = \"https://api.23andme.com/1/drug_responses/%s/\"", "var_name": "DRUG_RESPONSES_URL"}, {"original_string": "private static final String TRAITS_URL = \"https://api.23andme.com/1/traits/%s/\";", "modifier": "private static final", "type": "String", "declarator": "TRAITS_URL = \"https://api.23andme.com/1/traits/%s/\"", "var_name": "TRAITS_URL"}], "methods": [{"identifier": "ScribePersonalGenomeClient", "parameters": "(final Token accessToken, final OAuthService service, final PersonalGenomeConverter converter)", "modifiers": "public", "return": "", "signature": " ScribePersonalGenomeClient(final Token accessToken, final OAuthService service, final PersonalGenomeConverter converter)", "full_signature": "public  ScribePersonalGenomeClient(final Token accessToken, final OAuthService service, final PersonalGenomeConverter converter)", "class_method_signature": "ScribePersonalGenomeClient.ScribePersonalGenomeClient(final Token accessToken, final OAuthService service, final PersonalGenomeConverter converter)", "testcase": false, "constructor": true}, {"identifier": "user", "parameters": "()", "modifiers": "@Override public", "return": "User", "signature": "User user()", "full_signature": "@Override public User user()", "class_method_signature": "ScribePersonalGenomeClient.user()", "testcase": false, "constructor": false}, {"identifier": "names", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "UserName", "signature": "UserName names(final String profileId)", "full_signature": "@Override public UserName names(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.names(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "haplogroups", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "Haplogroup", "signature": "Haplogroup haplogroups(final String profileId)", "full_signature": "@Override public Haplogroup haplogroups(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.haplogroups(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "genotypes", "parameters": "(final String profileId, final String... locations)", "modifiers": "@Override public", "return": "Genotype", "signature": "Genotype genotypes(final String profileId, final String... locations)", "full_signature": "@Override public Genotype genotypes(final String profileId, final String... locations)", "class_method_signature": "ScribePersonalGenomeClient.genotypes(final String profileId, final String... locations)", "testcase": false, "constructor": false}, {"identifier": "genotypes", "parameters": "(final String profileId, final Iterable<String> locations)", "modifiers": "@Override public", "return": "Genotype", "signature": "Genotype genotypes(final String profileId, final Iterable<String> locations)", "full_signature": "@Override public Genotype genotypes(final String profileId, final Iterable<String> locations)", "class_method_signature": "ScribePersonalGenomeClient.genotypes(final String profileId, final Iterable<String> locations)", "testcase": false, "constructor": false}, {"identifier": "genotypesWithScope", "parameters": "(final String profileId, final String scope)", "modifiers": "", "return": "Genotype", "signature": "Genotype genotypesWithScope(final String profileId, final String scope)", "full_signature": " Genotype genotypesWithScope(final String profileId, final String scope)", "class_method_signature": "ScribePersonalGenomeClient.genotypesWithScope(final String profileId, final String scope)", "testcase": false, "constructor": false}, {"identifier": "genome", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "Genome", "signature": "Genome genome(final String profileId)", "full_signature": "@Override public Genome genome(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.genome(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "ancestry", "parameters": "(final String profileId, final double threshold)", "modifiers": "@Override public", "return": "Ancestry", "signature": "Ancestry ancestry(final String profileId, final double threshold)", "full_signature": "@Override public Ancestry ancestry(final String profileId, final double threshold)", "class_method_signature": "ScribePersonalGenomeClient.ancestry(final String profileId, final double threshold)", "testcase": false, "constructor": false}, {"identifier": "neanderthalProportion", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "double", "signature": "double neanderthalProportion(final String profileId)", "full_signature": "@Override public double neanderthalProportion(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.neanderthalProportion(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "relatives", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "Iterator<Relative>", "signature": "Iterator<Relative> relatives(final String profileId)", "full_signature": "@Override public Iterator<Relative> relatives(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.relatives(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "relatives", "parameters": "(final String profileId, final int offset, final int limit)", "modifiers": "@Override public", "return": "List<Relative>", "signature": "List<Relative> relatives(final String profileId, final int offset, final int limit)", "full_signature": "@Override public List<Relative> relatives(final String profileId, final int offset, final int limit)", "class_method_signature": "ScribePersonalGenomeClient.relatives(final String profileId, final int offset, final int limit)", "testcase": false, "constructor": false}, {"identifier": "risks", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "List<Risk>", "signature": "List<Risk> risks(final String profileId)", "full_signature": "@Override public List<Risk> risks(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.risks(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "carriers", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "List<Carrier>", "signature": "List<Carrier> carriers(final String profileId)", "full_signature": "@Override public List<Carrier> carriers(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.carriers(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "drugResponses", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "List<DrugResponse>", "signature": "List<DrugResponse> drugResponses(final String profileId)", "full_signature": "@Override public List<DrugResponse> drugResponses(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.drugResponses(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "traits", "parameters": "(final String profileId)", "modifiers": "@Override public", "return": "List<Trait>", "signature": "List<Trait> traits(final String profileId)", "full_signature": "@Override public List<Trait> traits(final String profileId)", "class_method_signature": "ScribePersonalGenomeClient.traits(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "createAndSignRequest", "parameters": "(final String url)", "modifiers": "", "return": "OAuthRequest", "signature": "OAuthRequest createAndSignRequest(final String url)", "full_signature": " OAuthRequest createAndSignRequest(final String url)", "class_method_signature": "ScribePersonalGenomeClient.createAndSignRequest(final String url)", "testcase": false, "constructor": false}], "file": "client/src/main/java/com/github/heuermh/personalgenome/client/scribe/ScribePersonalGenomeClient.java"}, "focal_method": {"identifier": "createAndSignRequest", "parameters": "(final String url)", "modifiers": "", "return": "OAuthRequest", "body": "OAuthRequest createAndSignRequest(final String url) {\n        OAuthRequest request = new OAuthRequest(Verb.GET, url);\n        request.addHeader(\"Authorization\", String.format(\"Bearer %s\", accessToken.getToken()));\n        service.signRequest(accessToken, request);\n        return request;\n    }", "signature": "OAuthRequest createAndSignRequest(final String url)", "full_signature": " OAuthRequest createAndSignRequest(final String url)", "class_method_signature": "ScribePersonalGenomeClient.createAndSignRequest(final String url)", "testcase": false, "constructor": false, "invocations": ["addHeader", "format", "getToken", "signRequest"]}, "repository": {"repo_id": 6161685, "url": "https://github.com/heuermh/personal-genome-client", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 17783, "license": "licensed"}}