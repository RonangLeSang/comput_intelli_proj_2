{"test_class": {"identifier": "TestIndexMasterObserver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HBaseTestingUtility UTIL = new HBaseTestingUtility();", "modifier": "private static", "type": "HBaseTestingUtility", "declarator": "UTIL = new HBaseTestingUtility()", "var_name": "UTIL"}], "file": "secondaryindex/src/test/java/org/apache/hadoop/hbase/index/coprocessor/master/TestIndexMasterObserver.java"}, "test_case": {"identifier": "testCreateIndexTableWhenExistedTableDeleteFailed", "parameters": "()", "modifiers": "@Test(timeout = 180000) public", "return": "void", "body": "@Test(timeout = 180000)\n  public void testCreateIndexTableWhenExistedTableDeleteFailed() throws Exception {\n    HBaseAdmin admin = UTIL.getHBaseAdmin();\n    IndexedHTableDescriptor iHtd =\n        createIndexedHTableDescriptor(\"testCreateIndexTableWhenExistedTableDeleteFailed\", \"cf\",\n          \"index_name\", \"cf\", \"cq\");\n    char c = 'A';\n    byte[][] split = new byte[20][];\n    for (int i = 0; i < 20; i++) {\n      byte[] b = { (byte) c };\n      split[i] = b;\n      c++;\n    }\n    admin.createTable(iHtd, split);\n    admin.disableTable(\"testCreateIndexTableWhenExistedTableDeleteFailed\");\n    admin.deleteTable(\"testCreateIndexTableWhenExistedTableDeleteFailed\");\n    IndexMasterObserver ms = Mockito.mock(IndexMasterObserver.class);\n    Mockito\n        .doThrow(new RuntimeException())\n        .when(ms)\n        .preCreateTable((ObserverContext<MasterCoprocessorEnvironment>) Mockito.anyObject(),\n          (HTableDescriptor) Mockito.anyObject(), (HRegionInfo[]) Mockito.anyObject());\n    try {\n      admin.createTable(iHtd);\n    } catch (IOException e) {\n\n    }\n  }", "signature": "void testCreateIndexTableWhenExistedTableDeleteFailed()", "full_signature": "@Test(timeout = 180000) public void testCreateIndexTableWhenExistedTableDeleteFailed()", "class_method_signature": "TestIndexMasterObserver.testCreateIndexTableWhenExistedTableDeleteFailed()", "testcase": true, "constructor": false, "invocations": ["getHBaseAdmin", "createIndexedHTableDescriptor", "createTable", "disableTable", "deleteTable", "mock", "preCreateTable", "when", "doThrow", "anyObject", "anyObject", "anyObject", "createTable"]}, "focal_class": {"identifier": "IndexMasterObserver", "superclass": "extends BaseMasterObserver", "interfaces": "implements MasterObserverExt", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(IndexMasterObserver.class.getName());", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(IndexMasterObserver.class.getName())", "var_name": "LOG"}], "methods": [{"identifier": "preCreateTable", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "modifiers": "@Override public", "return": "void", "signature": "void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "full_signature": "@Override public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "class_method_signature": "IndexMasterObserver.preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "testcase": false, "constructor": false}, {"identifier": "postModifyTableHandler", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName, HTableDescriptor htd)", "modifiers": "@Override public", "return": "void", "signature": "void postModifyTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName, HTableDescriptor htd)", "full_signature": "@Override public void postModifyTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName, HTableDescriptor htd)", "class_method_signature": "IndexMasterObserver.postModifyTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName, HTableDescriptor htd)", "testcase": false, "constructor": false}, {"identifier": "checkColumnsForValidityAndConsistency", "parameters": "(HTableDescriptor desc,\n      IndexSpecification iSpec, Map<Column, Pair<ValueType, Integer>> indexColDetails)", "modifiers": "private", "return": "void", "signature": "void checkColumnsForValidityAndConsistency(HTableDescriptor desc,\n      IndexSpecification iSpec, Map<Column, Pair<ValueType, Integer>> indexColDetails)", "full_signature": "private void checkColumnsForValidityAndConsistency(HTableDescriptor desc,\n      IndexSpecification iSpec, Map<Column, Pair<ValueType, Integer>> indexColDetails)", "class_method_signature": "IndexMasterObserver.checkColumnsForValidityAndConsistency(HTableDescriptor desc,\n      IndexSpecification iSpec, Map<Column, Pair<ValueType, Integer>> indexColDetails)", "testcase": false, "constructor": false}, {"identifier": "checkEndsWithIndexSuffix", "parameters": "(String tableName)", "modifiers": "private", "return": "void", "signature": "void checkEndsWithIndexSuffix(String tableName)", "full_signature": "private void checkEndsWithIndexSuffix(String tableName)", "class_method_signature": "IndexMasterObserver.checkEndsWithIndexSuffix(String tableName)", "testcase": false, "constructor": false}, {"identifier": "disableAndDeleteTable", "parameters": "(MasterServices master, String tableName)", "modifiers": "private", "return": "void", "signature": "void disableAndDeleteTable(MasterServices master, String tableName)", "full_signature": "private void disableAndDeleteTable(MasterServices master, String tableName)", "class_method_signature": "IndexMasterObserver.disableAndDeleteTable(MasterServices master, String tableName)", "testcase": false, "constructor": false}, {"identifier": "postCreateTableHandler", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "modifiers": "@Override public", "return": "void", "signature": "void postCreateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "full_signature": "@Override public void postCreateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "class_method_signature": "IndexMasterObserver.postCreateTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "testcase": false, "constructor": false}, {"identifier": "createSecondaryIndexTable", "parameters": "(IndexedHTableDescriptor iDesc, byte[][] splitKeys,\n      MasterServices master, boolean disableTable)", "modifiers": "private", "return": "void", "signature": "void createSecondaryIndexTable(IndexedHTableDescriptor iDesc, byte[][] splitKeys,\n      MasterServices master, boolean disableTable)", "full_signature": "private void createSecondaryIndexTable(IndexedHTableDescriptor iDesc, byte[][] splitKeys,\n      MasterServices master, boolean disableTable)", "class_method_signature": "IndexMasterObserver.createSecondaryIndexTable(IndexedHTableDescriptor iDesc, byte[][] splitKeys,\n      MasterServices master, boolean disableTable)", "testcase": false, "constructor": false}, {"identifier": "getHRegionInfos", "parameters": "(HTableDescriptor hTableDescriptor, byte[][] splitKeys)", "modifiers": "private", "return": "HRegionInfo[]", "signature": "HRegionInfo[] getHRegionInfos(HTableDescriptor hTableDescriptor, byte[][] splitKeys)", "full_signature": "private HRegionInfo[] getHRegionInfos(HTableDescriptor hTableDescriptor, byte[][] splitKeys)", "class_method_signature": "IndexMasterObserver.getHRegionInfos(HTableDescriptor hTableDescriptor, byte[][] splitKeys)", "testcase": false, "constructor": false}, {"identifier": "preAssign", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri)", "modifiers": "@Override public", "return": "void", "signature": "void preAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri)", "full_signature": "@Override public void preAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri)", "class_method_signature": "IndexMasterObserver.preAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri)", "testcase": false, "constructor": false}, {"identifier": "postAssign", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo regionInfo)", "modifiers": "@Override public", "return": "void", "signature": "void postAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo regionInfo)", "full_signature": "@Override public void postAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo regionInfo)", "class_method_signature": "IndexMasterObserver.postAssign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo regionInfo)", "testcase": false, "constructor": false}, {"identifier": "preUnassign", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri,\n      boolean force)", "modifiers": "@Override public", "return": "void", "signature": "void preUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri,\n      boolean force)", "full_signature": "@Override public void preUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri,\n      boolean force)", "class_method_signature": "IndexMasterObserver.preUnassign(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri,\n      boolean force)", "testcase": false, "constructor": false}, {"identifier": "preMove", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri,\n      ServerName srcServer, ServerName destServer)", "modifiers": "@Override public", "return": "void", "signature": "void preMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri,\n      ServerName srcServer, ServerName destServer)", "full_signature": "@Override public void preMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri,\n      ServerName srcServer, ServerName destServer)", "class_method_signature": "IndexMasterObserver.preMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo hri,\n      ServerName srcServer, ServerName destServer)", "testcase": false, "constructor": false}, {"identifier": "checkRegionInTransition", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HRegionInfo hri)", "modifiers": "private", "return": "boolean", "signature": "boolean checkRegionInTransition(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HRegionInfo hri)", "full_signature": "private boolean checkRegionInTransition(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HRegionInfo hri)", "class_method_signature": "IndexMasterObserver.checkRegionInTransition(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HRegionInfo hri)", "testcase": false, "constructor": false}, {"identifier": "postMove", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo regionInfo,\n      ServerName srcServer, ServerName destServer)", "modifiers": "@Override public", "return": "void", "signature": "void postMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo regionInfo,\n      ServerName srcServer, ServerName destServer)", "full_signature": "@Override public void postMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo regionInfo,\n      ServerName srcServer, ServerName destServer)", "class_method_signature": "IndexMasterObserver.postMove(ObserverContext<MasterCoprocessorEnvironment> ctx, HRegionInfo regionInfo,\n      ServerName srcServer, ServerName destServer)", "testcase": false, "constructor": false}, {"identifier": "postDisableTableHandler", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "modifiers": "@Override public", "return": "void", "signature": "void postDisableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "full_signature": "@Override public void postDisableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "class_method_signature": "IndexMasterObserver.postDisableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "testcase": false, "constructor": false}, {"identifier": "clearRegionPlans", "parameters": "(HMaster master, String tableName)", "modifiers": "private", "return": "void", "signature": "void clearRegionPlans(HMaster master, String tableName)", "full_signature": "private void clearRegionPlans(HMaster master, String tableName)", "class_method_signature": "IndexMasterObserver.clearRegionPlans(HMaster master, String tableName)", "testcase": false, "constructor": false}, {"identifier": "postEnableTableHandler", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "modifiers": "@Override public", "return": "void", "signature": "void postEnableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "full_signature": "@Override public void postEnableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "class_method_signature": "IndexMasterObserver.postEnableTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "testcase": false, "constructor": false}, {"identifier": "waitUntilTableDisabled", "parameters": "(long timeout, String tableName, ZKTable zk)", "modifiers": "private", "return": "boolean", "signature": "boolean waitUntilTableDisabled(long timeout, String tableName, ZKTable zk)", "full_signature": "private boolean waitUntilTableDisabled(long timeout, String tableName, ZKTable zk)", "class_method_signature": "IndexMasterObserver.waitUntilTableDisabled(long timeout, String tableName, ZKTable zk)", "testcase": false, "constructor": false}, {"identifier": "waitUntilTableEnabled", "parameters": "(long timeout, String tableName, ZKTable zk)", "modifiers": "private", "return": "boolean", "signature": "boolean waitUntilTableEnabled(long timeout, String tableName, ZKTable zk)", "full_signature": "private boolean waitUntilTableEnabled(long timeout, String tableName, ZKTable zk)", "class_method_signature": "IndexMasterObserver.waitUntilTableEnabled(long timeout, String tableName, ZKTable zk)", "testcase": false, "constructor": false}, {"identifier": "postDeleteTableHandler", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "modifiers": "@Override public", "return": "void", "signature": "void postDeleteTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "full_signature": "@Override public void postDeleteTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "class_method_signature": "IndexMasterObserver.postDeleteTableHandler(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      byte[] tableName)", "testcase": false, "constructor": false}, {"identifier": "preMasterInitialization", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx)", "modifiers": "@Override public", "return": "void", "signature": "void preMasterInitialization(ObserverContext<MasterCoprocessorEnvironment> ctx)", "full_signature": "@Override public void preMasterInitialization(ObserverContext<MasterCoprocessorEnvironment> ctx)", "class_method_signature": "IndexMasterObserver.preMasterInitialization(ObserverContext<MasterCoprocessorEnvironment> ctx)", "testcase": false, "constructor": false}, {"identifier": "getTableInfoPath", "parameters": "(final FileSystem fs, final Path tabledir)", "modifiers": "public static", "return": "FileStatus", "signature": "FileStatus getTableInfoPath(final FileSystem fs, final Path tabledir)", "full_signature": "public static FileStatus getTableInfoPath(final FileSystem fs, final Path tabledir)", "class_method_signature": "IndexMasterObserver.getTableInfoPath(final FileSystem fs, final Path tabledir)", "testcase": false, "constructor": false}], "file": "secondaryindex/src/main/java/org/apache/hadoop/hbase/index/coprocessor/master/IndexMasterObserver.java"}, "focal_method": {"identifier": "preCreateTable", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions) throws IOException {\n    LOG.info(\"Entered into preCreateTable.\");\n    MasterServices master = ctx.getEnvironment().getMasterServices();\n    if (desc instanceof IndexedHTableDescriptor) {\n      Map<Column, Pair<ValueType, Integer>> indexColDetails =\n          new HashMap<Column, Pair<ValueType, Integer>>();\n      String tableName = desc.getNameAsString();\n      checkEndsWithIndexSuffix(tableName);\n      String indexTableName = IndexUtils.getIndexTableName(tableName);\n      List<IndexSpecification> indices = ((IndexedHTableDescriptor) desc).getIndices();\n      // Even if indices list is empty,it will create index table also.\n      if (indices.isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Empty indices. Index table may not created\"\n              + \" if master goes down in between user table creation\");\n        }\n      }\n      LOG.trace(\"Checking whether column families in \"\n          + \"index specification are in actual table column familes.\");\n      for (IndexSpecification iSpec : indices) {\n        checkColumnsForValidityAndConsistency(desc, iSpec, indexColDetails);\n      }\n      LOG.trace(\"Column families in index specifications \" + \"are in actual table column familes.\");\n\n      boolean isTableExists = MetaReader.tableExists(master.getCatalogTracker(), tableName);\n      boolean isIndexTableExists =\n          MetaReader.tableExists(master.getCatalogTracker(), indexTableName);\n\n      if (isTableExists && isIndexTableExists) {\n        throw new TableExistsException(\"Table \" + tableName + \" already exist.\");\n      } else if (isIndexTableExists) {\n        disableAndDeleteTable(master, indexTableName);\n      }\n    }\n    LOG.info(\"Exiting from preCreateTable.\");\n  }", "signature": "void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "full_signature": "@Override public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "class_method_signature": "IndexMasterObserver.preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "testcase": false, "constructor": false, "invocations": ["info", "getMasterServices", "getEnvironment", "getNameAsString", "checkEndsWithIndexSuffix", "getIndexTableName", "getIndices", "isEmpty", "isDebugEnabled", "debug", "trace", "checkColumnsForValidityAndConsistency", "trace", "tableExists", "getCatalogTracker", "tableExists", "getCatalogTracker", "disableAndDeleteTable", "info"]}, "repository": {"repo_id": 11974846, "url": "https://github.com/Huawei-Hadoop/hindex", "language": "Java", "is_fork": false, "fork_count": 290, "stargazer_count": 575, "size": 10123, "license": "licensed"}}