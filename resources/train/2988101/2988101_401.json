{"test_class": {"identifier": "TestConnectBroker", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TEST_STORE_PATH = \"src/test/resources/packages/store\";", "modifier": "public static final", "type": "String", "declarator": "TEST_STORE_PATH = \"src/test/resources/packages/store\"", "var_name": "TEST_STORE_PATH"}, {"original_string": "public static final String TEST_LOCAL_ONLY_PATH = TEST_STORE_PATH + \"/local-only\";", "modifier": "public static final", "type": "String", "declarator": "TEST_LOCAL_ONLY_PATH = TEST_STORE_PATH + \"/local-only\"", "var_name": "TEST_LOCAL_ONLY_PATH"}, {"original_string": "public static final File testStore = new File(TEST_STORE_PATH);", "modifier": "public static final", "type": "File", "declarator": "testStore = new File(TEST_STORE_PATH)", "var_name": "testStore"}, {"original_string": "public static final File nuxeoHome = new File(FeaturesRunner.getBuildDirectory() + \"/launcher\");", "modifier": "public static final", "type": "File", "declarator": "nuxeoHome = new File(FeaturesRunner.getBuildDirectory() + \"/launcher\")", "var_name": "nuxeoHome"}, {"original_string": "protected ConnectBroker connectBroker;", "modifier": "protected", "type": "ConnectBroker", "declarator": "connectBroker", "var_name": "connectBroker"}, {"original_string": "private Environment environment;", "modifier": "private", "type": "Environment", "declarator": "environment", "var_name": "environment"}, {"original_string": "@Inject\n    LogCaptureFeature.Result logCaptureResult;", "modifier": "@Inject", "type": "LogCaptureFeature.Result", "declarator": "logCaptureResult", "var_name": "logCaptureResult"}, {"original_string": "@Inject\n    protected ServletContainerFeature servletContainerFeature;", "modifier": "@Inject\n    protected", "type": "ServletContainerFeature", "declarator": "servletContainerFeature", "var_name": "servletContainerFeature"}], "file": "modules/runtime/nuxeo-connect-standalone/src/test/java/org/nuxeo/launcher/connect/TestConnectBroker.java"}, "test_case": {"identifier": "testIsRemotePackageId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsRemotePackageId() throws Exception {\n        assertThat(connectBroker.isRemotePackageId(\"A-1.0.0\")).isTrue();\n        assertThat(connectBroker.isRemotePackageId(\"B-1.0.1-SNAPSHOT\")).isTrue();\n        assertThat(connectBroker.isRemotePackageId(\"studioA-1.0.0\")).isTrue();\n        assertThat(connectBroker.isRemotePackageId(\"hfA-1.0.8\")).isTrue();\n\n        // Packages in path \"$TEST_STORE_PATH/local-only\" are not available in remote (local-only)\n        assertThat(connectBroker.isRemotePackageId(\"E-1.0.1\")).isFalse();\n        assertThat(connectBroker.isRemotePackageId(\"F.1.0.0-SNAPSHOT\")).isFalse();\n        assertThat(connectBroker.isRemotePackageId(\"K.1.0.0-SNAPSHOT\")).isFalse();\n        assertThat(connectBroker.isRemotePackageId(\"unknown-package\")).isFalse();\n        assertThat(connectBroker.isRemotePackageId(\"NXP-24507-A-1.0.0\")).isFalse();\n        assertThat(connectBroker.isRemotePackageId(\"NXP-24507-B-1.0.0\")).isFalse();\n    }", "signature": "void testIsRemotePackageId()", "full_signature": "@Test public void testIsRemotePackageId()", "class_method_signature": "TestConnectBroker.testIsRemotePackageId()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isRemotePackageId", "isTrue", "assertThat", "isRemotePackageId", "isTrue", "assertThat", "isRemotePackageId", "isTrue", "assertThat", "isRemotePackageId", "isFalse", "assertThat", "isRemotePackageId", "isFalse", "assertThat", "isRemotePackageId", "isFalse", "assertThat", "isRemotePackageId", "isFalse", "assertThat", "isRemotePackageId", "isFalse", "assertThat", "isRemotePackageId", "isFalse", "assertThat", "isRemotePackageId"]}, "focal_class": {"identifier": "ConnectBroker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(ConnectBroker.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(ConnectBroker.class)", "var_name": "log"}, {"original_string": "public static final String[] POSITIVE_ANSWERS = { \"true\", \"yes\", \"y\" };", "modifier": "public static final", "type": "String[]", "declarator": "POSITIVE_ANSWERS = { \"true\", \"yes\", \"y\" }", "var_name": "POSITIVE_ANSWERS"}, {"original_string": "protected static final String LAUNCHER_CHANGED_PROPERTY = \"launcher.changed\";", "modifier": "protected static final", "type": "String", "declarator": "LAUNCHER_CHANGED_PROPERTY = \"launcher.changed\"", "var_name": "LAUNCHER_CHANGED_PROPERTY"}, {"original_string": "private Environment env;", "modifier": "private", "type": "Environment", "declarator": "env", "var_name": "env"}, {"original_string": "private StandaloneUpdateService service;", "modifier": "private", "type": "StandaloneUpdateService", "declarator": "service", "var_name": "service"}, {"original_string": "private CallbackHolder cbHolder;", "modifier": "private", "type": "CallbackHolder", "declarator": "cbHolder", "var_name": "cbHolder"}, {"original_string": "private CommandSetInfo cset = new CommandSetInfo();", "modifier": "private", "type": "CommandSetInfo", "declarator": "cset = new CommandSetInfo()", "var_name": "cset"}, {"original_string": "private String targetPlatform;", "modifier": "private", "type": "String", "declarator": "targetPlatform", "var_name": "targetPlatform"}, {"original_string": "private String relax = OPTION_RELAX_DEFAULT;", "modifier": "private", "type": "String", "declarator": "relax = OPTION_RELAX_DEFAULT", "var_name": "relax"}, {"original_string": "public static final String OPTION_RELAX_DEFAULT = \"ask\";", "modifier": "public static final", "type": "String", "declarator": "OPTION_RELAX_DEFAULT = \"ask\"", "var_name": "OPTION_RELAX_DEFAULT"}, {"original_string": "private String accept = OPTION_ACCEPT_DEFAULT;", "modifier": "private", "type": "String", "declarator": "accept = OPTION_ACCEPT_DEFAULT", "var_name": "accept"}, {"original_string": "private boolean allowSNAPSHOT = CUDFHelper.defaultAllowSNAPSHOT;", "modifier": "private", "type": "boolean", "declarator": "allowSNAPSHOT = CUDFHelper.defaultAllowSNAPSHOT", "var_name": "allowSNAPSHOT"}, {"original_string": "private Path pendingFile;", "modifier": "private", "type": "Path", "declarator": "pendingFile", "var_name": "pendingFile"}, {"original_string": "public static final String OPTION_ACCEPT_DEFAULT = \"ask\";", "modifier": "public static final", "type": "String", "declarator": "OPTION_ACCEPT_DEFAULT = \"ask\"", "var_name": "OPTION_ACCEPT_DEFAULT"}], "methods": [{"identifier": "ConnectBroker", "parameters": "(Environment env)", "modifiers": "public", "return": "", "signature": " ConnectBroker(Environment env)", "full_signature": "public  ConnectBroker(Environment env)", "class_method_signature": "ConnectBroker.ConnectBroker(Environment env)", "testcase": false, "constructor": true}, {"identifier": "getPendingFile", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getPendingFile()", "full_signature": "public Path getPendingFile()", "class_method_signature": "ConnectBroker.getPendingFile()", "testcase": false, "constructor": false}, {"identifier": "setPendingFile", "parameters": "(Path pendingFile)", "modifiers": "public", "return": "void", "signature": "void setPendingFile(Path pendingFile)", "full_signature": "public void setPendingFile(Path pendingFile)", "class_method_signature": "ConnectBroker.setPendingFile(Path pendingFile)", "testcase": false, "constructor": false}, {"identifier": "getCLID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCLID()", "full_signature": "public String getCLID()", "class_method_signature": "ConnectBroker.getCLID()", "testcase": false, "constructor": false}, {"identifier": "setCLID", "parameters": "(String file)", "modifiers": "public", "return": "void", "signature": "void setCLID(String file)", "full_signature": "public void setCLID(String file)", "class_method_signature": "ConnectBroker.setCLID(String file)", "testcase": false, "constructor": false}, {"identifier": "saveCLID", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void saveCLID()", "full_signature": "public void saveCLID()", "class_method_signature": "ConnectBroker.saveCLID()", "testcase": false, "constructor": false}, {"identifier": "getUpdateService", "parameters": "()", "modifiers": "public", "return": "StandaloneUpdateService", "signature": "StandaloneUpdateService getUpdateService()", "full_signature": "public StandaloneUpdateService getUpdateService()", "class_method_signature": "ConnectBroker.getUpdateService()", "testcase": false, "constructor": false}, {"identifier": "getPackageManager", "parameters": "()", "modifiers": "public", "return": "PackageManager", "signature": "PackageManager getPackageManager()", "full_signature": "public PackageManager getPackageManager()", "class_method_signature": "ConnectBroker.getPackageManager()", "testcase": false, "constructor": false}, {"identifier": "refreshCache", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refreshCache()", "full_signature": "public void refreshCache()", "class_method_signature": "ConnectBroker.refreshCache()", "testcase": false, "constructor": false}, {"identifier": "getCommandSet", "parameters": "()", "modifiers": "public", "return": "CommandSetInfo", "signature": "CommandSetInfo getCommandSet()", "full_signature": "public CommandSetInfo getCommandSet()", "class_method_signature": "ConnectBroker.getCommandSet()", "testcase": false, "constructor": false}, {"identifier": "getInstalledPackageByName", "parameters": "(String pkgName)", "modifiers": "protected", "return": "LocalPackage", "signature": "LocalPackage getInstalledPackageByName(String pkgName)", "full_signature": "protected LocalPackage getInstalledPackageByName(String pkgName)", "class_method_signature": "ConnectBroker.getInstalledPackageByName(String pkgName)", "testcase": false, "constructor": false}, {"identifier": "isInstalledPackage", "parameters": "(String pkgName)", "modifiers": "protected", "return": "boolean", "signature": "boolean isInstalledPackage(String pkgName)", "full_signature": "protected boolean isInstalledPackage(String pkgName)", "class_method_signature": "ConnectBroker.isInstalledPackage(String pkgName)", "testcase": false, "constructor": false}, {"identifier": "isLocalPackageId", "parameters": "(String pkgId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isLocalPackageId(String pkgId)", "full_signature": "protected boolean isLocalPackageId(String pkgId)", "class_method_signature": "ConnectBroker.isLocalPackageId(String pkgId)", "testcase": false, "constructor": false}, {"identifier": "isRemotePackageId", "parameters": "(String pkgId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isRemotePackageId(String pkgId)", "full_signature": "protected boolean isRemotePackageId(String pkgId)", "class_method_signature": "ConnectBroker.isRemotePackageId(String pkgId)", "testcase": false, "constructor": false}, {"identifier": "getBestIdForNameInList", "parameters": "(String pkgName, List<? extends Package> pkgList)", "modifiers": "protected", "return": "String", "signature": "String getBestIdForNameInList(String pkgName, List<? extends Package> pkgList)", "full_signature": "protected String getBestIdForNameInList(String pkgName, List<? extends Package> pkgList)", "class_method_signature": "ConnectBroker.getBestIdForNameInList(String pkgName, List<? extends Package> pkgList)", "testcase": false, "constructor": false}, {"identifier": "getLocalPackageIdFromName", "parameters": "(String pkgName)", "modifiers": "protected", "return": "String", "signature": "String getLocalPackageIdFromName(String pkgName)", "full_signature": "protected String getLocalPackageIdFromName(String pkgName)", "class_method_signature": "ConnectBroker.getLocalPackageIdFromName(String pkgName)", "testcase": false, "constructor": false}, {"identifier": "getAllLocalPackageIdsFromName", "parameters": "(String pkgName)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getAllLocalPackageIdsFromName(String pkgName)", "full_signature": "protected List<String> getAllLocalPackageIdsFromName(String pkgName)", "class_method_signature": "ConnectBroker.getAllLocalPackageIdsFromName(String pkgName)", "testcase": false, "constructor": false}, {"identifier": "getInstalledPackageIdFromName", "parameters": "(String pkgName)", "modifiers": "protected", "return": "String", "signature": "String getInstalledPackageIdFromName(String pkgName)", "full_signature": "protected String getInstalledPackageIdFromName(String pkgName)", "class_method_signature": "ConnectBroker.getInstalledPackageIdFromName(String pkgName)", "testcase": false, "constructor": false}, {"identifier": "getRemotePackageIdFromName", "parameters": "(String pkgName)", "modifiers": "protected", "return": "String", "signature": "String getRemotePackageIdFromName(String pkgName)", "full_signature": "protected String getRemotePackageIdFromName(String pkgName)", "class_method_signature": "ConnectBroker.getRemotePackageIdFromName(String pkgName)", "testcase": false, "constructor": false}, {"identifier": "getRemotePackageId", "parameters": "(String pkgNameOrId)", "modifiers": "protected", "return": "String", "signature": "String getRemotePackageId(String pkgNameOrId)", "full_signature": "protected String getRemotePackageId(String pkgNameOrId)", "class_method_signature": "ConnectBroker.getRemotePackageId(String pkgNameOrId)", "testcase": false, "constructor": false}, {"identifier": "getLocalPackage", "parameters": "(String pkgIdOrName)", "modifiers": "protected", "return": "LocalPackage", "signature": "LocalPackage getLocalPackage(String pkgIdOrName)", "full_signature": "protected LocalPackage getLocalPackage(String pkgIdOrName)", "class_method_signature": "ConnectBroker.getLocalPackage(String pkgIdOrName)", "testcase": false, "constructor": false}, {"identifier": "getLocalPackageFile", "parameters": "(String pkgFile)", "modifiers": "protected", "return": "File", "signature": "File getLocalPackageFile(String pkgFile)", "full_signature": "protected File getLocalPackageFile(String pkgFile)", "class_method_signature": "ConnectBroker.getLocalPackageFile(String pkgFile)", "testcase": false, "constructor": false}, {"identifier": "getLocalPackageFileId", "parameters": "(File pkgFile)", "modifiers": "protected", "return": "String", "signature": "String getLocalPackageFileId(File pkgFile)", "full_signature": "protected String getLocalPackageFileId(File pkgFile)", "class_method_signature": "ConnectBroker.getLocalPackageFileId(File pkgFile)", "testcase": false, "constructor": false}, {"identifier": "isLocalPackageFile", "parameters": "(String pkgFile)", "modifiers": "protected", "return": "boolean", "signature": "boolean isLocalPackageFile(String pkgFile)", "full_signature": "protected boolean isLocalPackageFile(String pkgFile)", "class_method_signature": "ConnectBroker.isLocalPackageFile(String pkgFile)", "testcase": false, "constructor": false}, {"identifier": "getPkgList", "parameters": "()", "modifiers": "public", "return": "List<LocalPackage>", "signature": "List<LocalPackage> getPkgList()", "full_signature": "public List<LocalPackage> getPkgList()", "class_method_signature": "ConnectBroker.getPkgList()", "testcase": false, "constructor": false}, {"identifier": "pkgList", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pkgList()", "full_signature": "public void pkgList()", "class_method_signature": "ConnectBroker.pkgList()", "testcase": false, "constructor": false}, {"identifier": "pkgListAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pkgListAll()", "full_signature": "public void pkgListAll()", "class_method_signature": "ConnectBroker.pkgListAll()", "testcase": false, "constructor": false}, {"identifier": "getPrivateOrSubscriptionTag", "parameters": "(DownloadablePackage pkg)", "modifiers": "private", "return": "String", "signature": "String getPrivateOrSubscriptionTag(DownloadablePackage pkg)", "full_signature": "private String getPrivateOrSubscriptionTag(DownloadablePackage pkg)", "class_method_signature": "ConnectBroker.getPrivateOrSubscriptionTag(DownloadablePackage pkg)", "testcase": false, "constructor": false}, {"identifier": "pkgList", "parameters": "(List<? extends DownloadablePackage> packagesList)", "modifiers": "public", "return": "void", "signature": "void pkgList(List<? extends DownloadablePackage> packagesList)", "full_signature": "public void pkgList(List<? extends DownloadablePackage> packagesList)", "class_method_signature": "ConnectBroker.pkgList(List<? extends DownloadablePackage> packagesList)", "testcase": false, "constructor": false}, {"identifier": "performTask", "parameters": "(Task task)", "modifiers": "protected", "return": "void", "signature": "void performTask(Task task)", "full_signature": "protected void performTask(Task task)", "class_method_signature": "ConnectBroker.performTask(Task task)", "testcase": false, "constructor": false}, {"identifier": "pkgReset", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean pkgReset()", "full_signature": "public boolean pkgReset()", "class_method_signature": "ConnectBroker.pkgReset()", "testcase": false, "constructor": false}, {"identifier": "pkgPurge", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean pkgPurge()", "full_signature": "public boolean pkgPurge()", "class_method_signature": "ConnectBroker.pkgPurge()", "testcase": false, "constructor": false}, {"identifier": "pkgUninstall", "parameters": "(List<String> packageIdsToRemove)", "modifiers": "public", "return": "boolean", "signature": "boolean pkgUninstall(List<String> packageIdsToRemove)", "full_signature": "public boolean pkgUninstall(List<String> packageIdsToRemove)", "class_method_signature": "ConnectBroker.pkgUninstall(List<String> packageIdsToRemove)", "testcase": false, "constructor": false}, {"identifier": "pkgUninstall", "parameters": "(String pkgId)", "modifiers": "public", "return": "LocalPackage", "signature": "LocalPackage pkgUninstall(String pkgId)", "full_signature": "public LocalPackage pkgUninstall(String pkgId)", "class_method_signature": "ConnectBroker.pkgUninstall(String pkgId)", "testcase": false, "constructor": false}, {"identifier": "pkgRemove", "parameters": "(List<String> pkgsToRemove)", "modifiers": "public", "return": "boolean", "signature": "boolean pkgRemove(List<String> pkgsToRemove)", "full_signature": "public boolean pkgRemove(List<String> pkgsToRemove)", "class_method_signature": "ConnectBroker.pkgRemove(List<String> pkgsToRemove)", "testcase": false, "constructor": false}, {"identifier": "pkgRemove", "parameters": "(String pkgId)", "modifiers": "public", "return": "LocalPackage", "signature": "LocalPackage pkgRemove(String pkgId)", "full_signature": "public LocalPackage pkgRemove(String pkgId)", "class_method_signature": "ConnectBroker.pkgRemove(String pkgId)", "testcase": false, "constructor": false}, {"identifier": "pkgAdd", "parameters": "(List<String> pkgsToAdd, boolean ignoreMissing)", "modifiers": "public", "return": "boolean", "signature": "boolean pkgAdd(List<String> pkgsToAdd, boolean ignoreMissing)", "full_signature": "public boolean pkgAdd(List<String> pkgsToAdd, boolean ignoreMissing)", "class_method_signature": "ConnectBroker.pkgAdd(List<String> pkgsToAdd, boolean ignoreMissing)", "testcase": false, "constructor": false}, {"identifier": "pkgAdd", "parameters": "(String packageFileName, boolean ignoreMissing)", "modifiers": "public", "return": "LocalPackage", "signature": "LocalPackage pkgAdd(String packageFileName, boolean ignoreMissing)", "full_signature": "public LocalPackage pkgAdd(String packageFileName, boolean ignoreMissing)", "class_method_signature": "ConnectBroker.pkgAdd(String packageFileName, boolean ignoreMissing)", "testcase": false, "constructor": false}, {"identifier": "pkgInstall", "parameters": "(List<String> packageIdsToInstall, boolean ignoreMissing)", "modifiers": "public", "return": "boolean", "signature": "boolean pkgInstall(List<String> packageIdsToInstall, boolean ignoreMissing)", "full_signature": "public boolean pkgInstall(List<String> packageIdsToInstall, boolean ignoreMissing)", "class_method_signature": "ConnectBroker.pkgInstall(List<String> packageIdsToInstall, boolean ignoreMissing)", "testcase": false, "constructor": false}, {"identifier": "persistCommand", "parameters": "(String command)", "modifiers": "protected", "return": "void", "signature": "void persistCommand(String command)", "full_signature": "protected void persistCommand(String command)", "class_method_signature": "ConnectBroker.persistCommand(String command)", "testcase": false, "constructor": false}, {"identifier": "isRestartRequired", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isRestartRequired()", "full_signature": "protected boolean isRestartRequired()", "class_method_signature": "ConnectBroker.isRestartRequired()", "testcase": false, "constructor": false}, {"identifier": "pkgInstall", "parameters": "(String pkgId, boolean ignoreMissing)", "modifiers": "public", "return": "LocalPackage", "signature": "LocalPackage pkgInstall(String pkgId, boolean ignoreMissing)", "full_signature": "public LocalPackage pkgInstall(String pkgId, boolean ignoreMissing)", "class_method_signature": "ConnectBroker.pkgInstall(String pkgId, boolean ignoreMissing)", "testcase": false, "constructor": false}, {"identifier": "listPending", "parameters": "(File commandsFile)", "modifiers": "public", "return": "boolean", "signature": "boolean listPending(File commandsFile)", "full_signature": "public boolean listPending(File commandsFile)", "class_method_signature": "ConnectBroker.listPending(File commandsFile)", "testcase": false, "constructor": false}, {"identifier": "executePending", "parameters": "(File commandsFile, boolean doExecute, boolean useResolver, boolean ignoreMissing)", "modifiers": "public", "return": "boolean", "signature": "boolean executePending(File commandsFile, boolean doExecute, boolean useResolver, boolean ignoreMissing)", "full_signature": "public boolean executePending(File commandsFile, boolean doExecute, boolean useResolver, boolean ignoreMissing)", "class_method_signature": "ConnectBroker.executePending(File commandsFile, boolean doExecute, boolean useResolver, boolean ignoreMissing)", "testcase": false, "constructor": false}, {"identifier": "downloadPackages", "parameters": "(List<String> packagesToDownload)", "modifiers": "@SuppressWarnings(\"unused\") protected", "return": "boolean", "signature": "boolean downloadPackages(List<String> packagesToDownload)", "full_signature": "@SuppressWarnings(\"unused\") protected boolean downloadPackages(List<String> packagesToDownload)", "class_method_signature": "ConnectBroker.downloadPackages(List<String> packagesToDownload)", "testcase": false, "constructor": false}, {"identifier": "pkgRequest", "parameters": "(List<String> pkgsToAdd, List<String> pkgsToInstall, List<String> pkgsToUninstall,\n            List<String> pkgsToRemove, boolean keepExisting, boolean ignoreMissing)", "modifiers": "public", "return": "boolean", "signature": "boolean pkgRequest(List<String> pkgsToAdd, List<String> pkgsToInstall, List<String> pkgsToUninstall,\n            List<String> pkgsToRemove, boolean keepExisting, boolean ignoreMissing)", "full_signature": "public boolean pkgRequest(List<String> pkgsToAdd, List<String> pkgsToInstall, List<String> pkgsToUninstall,\n            List<String> pkgsToRemove, boolean keepExisting, boolean ignoreMissing)", "class_method_signature": "ConnectBroker.pkgRequest(List<String> pkgsToAdd, List<String> pkgsToInstall, List<String> pkgsToUninstall,\n            List<String> pkgsToRemove, boolean keepExisting, boolean ignoreMissing)", "testcase": false, "constructor": false}, {"identifier": "pkgRequest", "parameters": "(List<String> pkgsToAdd, List<String> pkgsToInstall, List<String> pkgsToUninstall,\n            List<String> pkgsToRemove, boolean keepExisting, boolean ignoreMissing, boolean upgradeMode)", "modifiers": "public", "return": "boolean", "signature": "boolean pkgRequest(List<String> pkgsToAdd, List<String> pkgsToInstall, List<String> pkgsToUninstall,\n            List<String> pkgsToRemove, boolean keepExisting, boolean ignoreMissing, boolean upgradeMode)", "full_signature": "public boolean pkgRequest(List<String> pkgsToAdd, List<String> pkgsToInstall, List<String> pkgsToUninstall,\n            List<String> pkgsToRemove, boolean keepExisting, boolean ignoreMissing, boolean upgradeMode)", "class_method_signature": "ConnectBroker.pkgRequest(List<String> pkgsToAdd, List<String> pkgsToInstall, List<String> pkgsToUninstall,\n            List<String> pkgsToRemove, boolean keepExisting, boolean ignoreMissing, boolean upgradeMode)", "testcase": false, "constructor": false}, {"identifier": "checkLocalPackagesAndAddLocalFiles", "parameters": "(List<String> pkgsToInstall, boolean upgradeMode,\n            boolean ignoreMissing, List<String> namesOrIdsToInstall, Set<String> localSnapshotsToUninstall,\n            Set<String> localSnapshotsToReplace, Set<String> localSnapshotsToMaybeReplace)", "modifiers": "private", "return": "boolean", "signature": "boolean checkLocalPackagesAndAddLocalFiles(List<String> pkgsToInstall, boolean upgradeMode,\n            boolean ignoreMissing, List<String> namesOrIdsToInstall, Set<String> localSnapshotsToUninstall,\n            Set<String> localSnapshotsToReplace, Set<String> localSnapshotsToMaybeReplace)", "full_signature": "private boolean checkLocalPackagesAndAddLocalFiles(List<String> pkgsToInstall, boolean upgradeMode,\n            boolean ignoreMissing, List<String> namesOrIdsToInstall, Set<String> localSnapshotsToUninstall,\n            Set<String> localSnapshotsToReplace, Set<String> localSnapshotsToMaybeReplace)", "class_method_signature": "ConnectBroker.checkLocalPackagesAndAddLocalFiles(List<String> pkgsToInstall, boolean upgradeMode,\n            boolean ignoreMissing, List<String> namesOrIdsToInstall, Set<String> localSnapshotsToUninstall,\n            Set<String> localSnapshotsToReplace, Set<String> localSnapshotsToMaybeReplace)", "testcase": false, "constructor": false}, {"identifier": "pkgSet", "parameters": "(List<String> pkgList, boolean ignoreMissing)", "modifiers": "public", "return": "boolean", "signature": "boolean pkgSet(List<String> pkgList, boolean ignoreMissing)", "full_signature": "public boolean pkgSet(List<String> pkgList, boolean ignoreMissing)", "class_method_signature": "ConnectBroker.pkgSet(List<String> pkgList, boolean ignoreMissing)", "testcase": false, "constructor": false}, {"identifier": "readConsole", "parameters": "(String message, String defaultValue, Object... objects)", "modifiers": "protected", "return": "String", "signature": "String readConsole(String message, String defaultValue, Object... objects)", "full_signature": "protected String readConsole(String message, String defaultValue, Object... objects)", "class_method_signature": "ConnectBroker.readConsole(String message, String defaultValue, Object... objects)", "testcase": false, "constructor": false}, {"identifier": "parseAnswer", "parameters": "(String answer)", "modifiers": "public static", "return": "String", "signature": "String parseAnswer(String answer)", "full_signature": "public static String parseAnswer(String answer)", "class_method_signature": "ConnectBroker.parseAnswer(String answer)", "testcase": false, "constructor": false}, {"identifier": "pkgHotfix", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean pkgHotfix()", "full_signature": "public boolean pkgHotfix()", "class_method_signature": "ConnectBroker.pkgHotfix()", "testcase": false, "constructor": false}, {"identifier": "pkgUpgrade", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean pkgUpgrade()", "full_signature": "public boolean pkgUpgrade()", "class_method_signature": "ConnectBroker.pkgUpgrade()", "testcase": false, "constructor": false}, {"identifier": "setRelax", "parameters": "(String relaxValue)", "modifiers": "public", "return": "void", "signature": "void setRelax(String relaxValue)", "full_signature": "public void setRelax(String relaxValue)", "class_method_signature": "ConnectBroker.setRelax(String relaxValue)", "testcase": false, "constructor": false}, {"identifier": "setAccept", "parameters": "(String acceptValue)", "modifiers": "public", "return": "void", "signature": "void setAccept(String acceptValue)", "full_signature": "public void setAccept(String acceptValue)", "class_method_signature": "ConnectBroker.setAccept(String acceptValue)", "testcase": false, "constructor": false}, {"identifier": "newPackageInfo", "parameters": "(CommandInfo cmdInfo, Package pkg)", "modifiers": "private", "return": "PackageInfo", "signature": "PackageInfo newPackageInfo(CommandInfo cmdInfo, Package pkg)", "full_signature": "private PackageInfo newPackageInfo(CommandInfo cmdInfo, Package pkg)", "class_method_signature": "ConnectBroker.newPackageInfo(CommandInfo cmdInfo, Package pkg)", "testcase": false, "constructor": false}, {"identifier": "pkgShow", "parameters": "(List<String> packages)", "modifiers": "public", "return": "boolean", "signature": "boolean pkgShow(List<String> packages)", "full_signature": "public boolean pkgShow(List<String> packages)", "class_method_signature": "ConnectBroker.pkgShow(List<String> packages)", "testcase": false, "constructor": false}, {"identifier": "appendIfNotEmpty", "parameters": "(StringBuilder sb, String label, Object[] array)", "modifiers": "private", "return": "void", "signature": "void appendIfNotEmpty(StringBuilder sb, String label, Object[] array)", "full_signature": "private void appendIfNotEmpty(StringBuilder sb, String label, Object[] array)", "class_method_signature": "ConnectBroker.appendIfNotEmpty(StringBuilder sb, String label, Object[] array)", "testcase": false, "constructor": false}, {"identifier": "appendIfNotEmpty", "parameters": "(StringBuilder sb, String label, String value)", "modifiers": "private", "return": "void", "signature": "void appendIfNotEmpty(StringBuilder sb, String label, String value)", "full_signature": "private void appendIfNotEmpty(StringBuilder sb, String label, String value)", "class_method_signature": "ConnectBroker.appendIfNotEmpty(StringBuilder sb, String label, String value)", "testcase": false, "constructor": false}, {"identifier": "findPackage", "parameters": "(String pkg)", "modifiers": "protected", "return": "Package", "signature": "Package findPackage(String pkg)", "full_signature": "protected Package findPackage(String pkg)", "class_method_signature": "ConnectBroker.findPackage(String pkg)", "testcase": false, "constructor": false}, {"identifier": "setAllowSNAPSHOT", "parameters": "(boolean allow)", "modifiers": "public", "return": "void", "signature": "void setAllowSNAPSHOT(boolean allow)", "full_signature": "public void setAllowSNAPSHOT(boolean allow)", "class_method_signature": "ConnectBroker.setAllowSNAPSHOT(boolean allow)", "testcase": false, "constructor": false}], "file": "modules/runtime/nuxeo-connect-standalone/src/main/java/org/nuxeo/launcher/connect/ConnectBroker.java"}, "focal_method": {"identifier": "isRemotePackageId", "parameters": "(String pkgId)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isRemotePackageId(String pkgId) {\n        return PackageUtils.isValidPackageId(pkgId) && getPackageManager().getRemotePackage(pkgId) != null;\n    }", "signature": "boolean isRemotePackageId(String pkgId)", "full_signature": "protected boolean isRemotePackageId(String pkgId)", "class_method_signature": "ConnectBroker.isRemotePackageId(String pkgId)", "testcase": false, "constructor": false, "invocations": ["isValidPackageId", "getRemotePackage", "getPackageManager"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}