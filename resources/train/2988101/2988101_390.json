{"test_class": {"identifier": "TestPeriodAndDuration", "superclass": "", "interfaces": "", "fields": [], "file": "modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/utils/TestPeriodAndDuration.java"}, "test_case": {"identifier": "testTemporalAmountGetUnits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTemporalAmountGetUnits() {\n        assertEquals(List.of(YEARS, MONTHS, DAYS, SECONDS, NANOS), PeriodAndDuration.ZERO.getUnits());\n    }", "signature": "void testTemporalAmountGetUnits()", "full_signature": "@Test public void testTemporalAmountGetUnits()", "class_method_signature": "TestPeriodAndDuration.testTemporalAmountGetUnits()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "of", "getUnits"]}, "focal_class": {"identifier": "PeriodAndDuration", "superclass": "", "interfaces": "implements TemporalAmount", "fields": [{"original_string": "public static final PeriodAndDuration ZERO = new PeriodAndDuration(Period.ZERO, Duration.ZERO);", "modifier": "public static final", "type": "PeriodAndDuration", "declarator": "ZERO = new PeriodAndDuration(Period.ZERO, Duration.ZERO)", "var_name": "ZERO"}, {"original_string": "protected static final List<TemporalUnit> UNITS = List.of(YEARS, MONTHS, DAYS, SECONDS, NANOS);", "modifier": "protected static final", "type": "List<TemporalUnit>", "declarator": "UNITS = List.of(YEARS, MONTHS, DAYS, SECONDS, NANOS)", "var_name": "UNITS"}, {"original_string": "protected static final Pattern PATTERN = Pattern.compile(\"([-+]?)P\" //\n            + \"(?:([-+]?[0-9]+)Y)?\" //\n            + \"(?:([-+]?[0-9]+)M)?\" //\n            + \"(?:([-+]?[0-9]+)D)?\" //\n            + \"(T\" //\n            + \"(?:([-+]?[0-9]+)H)?\" //\n            + \"(?:([-+]?[0-9]+)M)?\" //\n            + \"(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?\" //\n            + \")?\", //\n            Pattern.CASE_INSENSITIVE);", "modifier": "protected static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(\"([-+]?)P\" //\n            + \"(?:([-+]?[0-9]+)Y)?\" //\n            + \"(?:([-+]?[0-9]+)M)?\" //\n            + \"(?:([-+]?[0-9]+)D)?\" //\n            + \"(T\" //\n            + \"(?:([-+]?[0-9]+)H)?\" //\n            + \"(?:([-+]?[0-9]+)M)?\" //\n            + \"(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?\" //\n            + \")?\", //\n            Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN"}, {"original_string": "protected static final int SECONDS_PER_MINUTE = 60;", "modifier": "protected static final", "type": "int", "declarator": "SECONDS_PER_MINUTE = 60", "var_name": "SECONDS_PER_MINUTE"}, {"original_string": "protected static final int SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;", "modifier": "protected static final", "type": "int", "declarator": "SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE", "var_name": "SECONDS_PER_HOUR"}, {"original_string": "public final Period period;", "modifier": "public final", "type": "Period", "declarator": "period", "var_name": "period"}, {"original_string": "public final Duration duration;", "modifier": "public final", "type": "Duration", "declarator": "duration", "var_name": "duration"}], "methods": [{"identifier": "PeriodAndDuration", "parameters": "(Period period, Duration duration)", "modifiers": "public", "return": "", "signature": " PeriodAndDuration(Period period, Duration duration)", "full_signature": "public  PeriodAndDuration(Period period, Duration duration)", "class_method_signature": "PeriodAndDuration.PeriodAndDuration(Period period, Duration duration)", "testcase": false, "constructor": true}, {"identifier": "PeriodAndDuration", "parameters": "(Period period)", "modifiers": "public", "return": "", "signature": " PeriodAndDuration(Period period)", "full_signature": "public  PeriodAndDuration(Period period)", "class_method_signature": "PeriodAndDuration.PeriodAndDuration(Period period)", "testcase": false, "constructor": true}, {"identifier": "PeriodAndDuration", "parameters": "(Duration duration)", "modifiers": "public", "return": "", "signature": " PeriodAndDuration(Duration duration)", "full_signature": "public  PeriodAndDuration(Duration duration)", "class_method_signature": "PeriodAndDuration.PeriodAndDuration(Duration duration)", "testcase": false, "constructor": true}, {"identifier": "getUnits", "parameters": "()", "modifiers": "@Override public", "return": "List<TemporalUnit>", "signature": "List<TemporalUnit> getUnits()", "full_signature": "@Override public List<TemporalUnit> getUnits()", "class_method_signature": "PeriodAndDuration.getUnits()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(TemporalUnit unit)", "modifiers": "@Override public", "return": "long", "signature": "long get(TemporalUnit unit)", "full_signature": "@Override public long get(TemporalUnit unit)", "class_method_signature": "PeriodAndDuration.get(TemporalUnit unit)", "testcase": false, "constructor": false}, {"identifier": "addTo", "parameters": "(Temporal temporal)", "modifiers": "@Override public", "return": "Temporal", "signature": "Temporal addTo(Temporal temporal)", "full_signature": "@Override public Temporal addTo(Temporal temporal)", "class_method_signature": "PeriodAndDuration.addTo(Temporal temporal)", "testcase": false, "constructor": false}, {"identifier": "subtractFrom", "parameters": "(Temporal temporal)", "modifiers": "@Override public", "return": "Temporal", "signature": "Temporal subtractFrom(Temporal temporal)", "full_signature": "@Override public Temporal subtractFrom(Temporal temporal)", "class_method_signature": "PeriodAndDuration.subtractFrom(Temporal temporal)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String text)", "modifiers": "public static", "return": "PeriodAndDuration", "signature": "PeriodAndDuration parse(String text)", "full_signature": "public static PeriodAndDuration parse(String text)", "class_method_signature": "PeriodAndDuration.parse(String text)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String string, String text, String errorText)", "modifiers": "protected static", "return": "int", "signature": "int parseInt(String string, String text, String errorText)", "full_signature": "protected static int parseInt(String string, String text, String errorText)", "class_method_signature": "PeriodAndDuration.parseInt(String string, String text, String errorText)", "testcase": false, "constructor": false}, {"identifier": "parseNumber", "parameters": "(String string, int multiplier, String text, String errorText)", "modifiers": "protected static", "return": "long", "signature": "long parseNumber(String string, int multiplier, String text, String errorText)", "full_signature": "protected static long parseNumber(String string, int multiplier, String text, String errorText)", "class_method_signature": "PeriodAndDuration.parseNumber(String string, int multiplier, String text, String errorText)", "testcase": false, "constructor": false}, {"identifier": "parseFraction", "parameters": "(String string, int sign, String text)", "modifiers": "protected static", "return": "int", "signature": "int parseFraction(String string, int sign, String text)", "full_signature": "protected static int parseFraction(String string, int sign, String text)", "class_method_signature": "PeriodAndDuration.parseFraction(String string, int sign, String text)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PeriodAndDuration.toString()", "testcase": false, "constructor": false}], "file": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/utils/PeriodAndDuration.java"}, "focal_method": {"identifier": "getUnits", "parameters": "()", "modifiers": "@Override public", "return": "List<TemporalUnit>", "body": "@Override\n    public List<TemporalUnit> getUnits() {\n        return UNITS;\n    }", "signature": "List<TemporalUnit> getUnits()", "full_signature": "@Override public List<TemporalUnit> getUnits()", "class_method_signature": "PeriodAndDuration.getUnits()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}