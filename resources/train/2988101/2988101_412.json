{"test_class": {"identifier": "TestMemPubSubProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    protected PubSubService pubSubService;", "modifier": "@Inject\n    protected", "type": "PubSubService", "declarator": "pubSubService", "var_name": "pubSubService"}, {"original_string": "protected List<String> messages = new CopyOnWriteArrayList<>();", "modifier": "protected", "type": "List<String>", "declarator": "messages = new CopyOnWriteArrayList<>()", "var_name": "messages"}, {"original_string": "protected volatile CountDownLatch messageReceivedLatch;", "modifier": "protected volatile", "type": "CountDownLatch", "declarator": "messageReceivedLatch", "var_name": "messageReceivedLatch"}], "file": "modules/runtime/nuxeo-runtime-pubsub/src/test/java/org/nuxeo/runtime/pubsub/TestMemPubSubProvider.java"}, "test_case": {"identifier": "testPublish", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPublish() throws Exception {\n        messageReceivedLatch = new CountDownLatch(1);\n        BiConsumer<String, byte[]> subscriber = this::subscriber;\n        pubSubService.registerSubscriber(\"topicTest\", subscriber);\n        pubSubService.publish(\"topicTest\", \"foo\".getBytes(UTF_8));\n        if (!messageReceivedLatch.await(5, TimeUnit.SECONDS)) {\n            fail(\"message not received in 5s\");\n        }\n        assertEquals(Collections.singletonList(\"topicTest=foo\"), messages);\n\n        // with subscriber unregistered it receives nothing anymore\n        pubSubService.unregisterSubscriber(\"topicTest\", subscriber);\n        messages.clear();\n        pubSubService.publish(\"topicTest\", \"bar\".getBytes(UTF_8));\n        Thread.sleep(500);\n        assertEquals(Collections.emptyList(), messages);\n    }", "signature": "void testPublish()", "full_signature": "@Test public void testPublish()", "class_method_signature": "TestMemPubSubProvider.testPublish()", "testcase": true, "constructor": false, "invocations": ["registerSubscriber", "publish", "getBytes", "await", "fail", "assertEquals", "singletonList", "unregisterSubscriber", "clear", "publish", "getBytes", "sleep", "assertEquals", "emptyList"]}, "focal_class": {"identifier": "MemPubSubProvider", "superclass": "extends AbstractPubSubProvider", "interfaces": "", "fields": [{"original_string": "private final Log log = LogFactory.getLog(MemPubSubProvider.class);", "modifier": "private final", "type": "Log", "declarator": "log = LogFactory.getLog(MemPubSubProvider.class)", "var_name": "log"}], "methods": [{"identifier": "initialize", "parameters": "(Map<String, String> options, Map<String, List<BiConsumer<String, byte[]>>> subscribers)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(Map<String, String> options, Map<String, List<BiConsumer<String, byte[]>>> subscribers)", "full_signature": "@Override public void initialize(Map<String, String> options, Map<String, List<BiConsumer<String, byte[]>>> subscribers)", "class_method_signature": "MemPubSubProvider.initialize(Map<String, String> options, Map<String, List<BiConsumer<String, byte[]>>> subscribers)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MemPubSubProvider.close()", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String topic, byte[] message)", "modifiers": "@Override public", "return": "void", "signature": "void publish(String topic, byte[] message)", "full_signature": "@Override public void publish(String topic, byte[] message)", "class_method_signature": "MemPubSubProvider.publish(String topic, byte[] message)", "testcase": false, "constructor": false}], "file": "modules/runtime/nuxeo-runtime-pubsub/src/main/java/org/nuxeo/runtime/pubsub/MemPubSubProvider.java"}, "focal_method": {"identifier": "publish", "parameters": "(String topic, byte[] message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void publish(String topic, byte[] message) {\n        localPublish(topic, message);\n    }", "signature": "void publish(String topic, byte[] message)", "full_signature": "@Override public void publish(String topic, byte[] message)", "class_method_signature": "MemPubSubProvider.publish(String topic, byte[] message)", "testcase": false, "constructor": false, "invocations": ["localPublish"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}