{"test_class": {"identifier": "TestEmbeddedFunctions", "superclass": "", "interfaces": "", "fields": [], "file": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql-extensions/src/test/java/org/nuxeo/ecm/core/storage/sql/db/TestEmbeddedFunctions.java"}, "test_case": {"identifier": "testParseFullText", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseFullText() {\n        checkParseFullText(\"brown dog fail fox jump lazy over quick\",\n                \"The quick brown fox jumps over the lazy dog -- and fails!\");\n        checkParseFullText(\"aime cafe jure pas\", \"J'aime PAS le caf\\u00e9, je te jure.\");\n        checkParseFullText(\"007 bond jame thx1138\", \"James Bond 007 && THX1138\");\n    }", "signature": "void testParseFullText()", "full_signature": "@Test public void testParseFullText()", "class_method_signature": "TestEmbeddedFunctions.testParseFullText()", "testcase": true, "constructor": false, "invocations": ["checkParseFullText", "checkParseFullText", "checkParseFullText"]}, "focal_class": {"identifier": "EmbeddedFunctions", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String READ = \"Read\";", "modifier": "protected static final", "type": "String", "declarator": "READ = \"Read\"", "var_name": "READ"}, {"original_string": "protected static final String READ_VERSION = \"ReadVersion\";", "modifier": "protected static final", "type": "String", "declarator": "READ_VERSION = \"ReadVersion\"", "var_name": "READ_VERSION"}, {"original_string": "private static final Pattern wordPattern = Pattern.compile(\"[\\\\s\\\\p{Punct}]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "wordPattern = Pattern.compile(\"[\\\\s\\\\p{Punct}]+\")", "var_name": "wordPattern"}, {"original_string": "private static final String UNACCENTED = \"aaaaaaaceeeeiiii\\u00f0nooooo\\u00f7ouuuuy\\u00fey\";", "modifier": "private static final", "type": "String", "declarator": "UNACCENTED = \"aaaaaaaceeeeiiii\\u00f0nooooo\\u00f7ouuuuy\\u00fey\"", "var_name": "UNACCENTED"}, {"original_string": "private static final String STOPWORDS = \"a an are and as at be by for from how \"\n            + \"i in is it of on or that the this to was what when where who will with \"\n            + \"car donc est il ils je la le les mais ni nous or ou pour tu un une vous \" + \"www com net org\";", "modifier": "private static final", "type": "String", "declarator": "STOPWORDS = \"a an are and as at be by for from how \"\n            + \"i in is it of on or that the this to was what when where who will with \"\n            + \"car donc est il ils je la le les mais ni nous or ou pour tu un une vous \" + \"www com net org\"", "var_name": "STOPWORDS"}, {"original_string": "private static final Set<String> stopWords = new HashSet<>(split(STOPWORDS, ' '));", "modifier": "private static final", "type": "Set<String>", "declarator": "stopWords = new HashSet<>(split(STOPWORDS, ' '))", "var_name": "stopWords"}], "methods": [{"identifier": "isLogEnabled", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean isLogEnabled()", "full_signature": "private static boolean isLogEnabled()", "class_method_signature": "EmbeddedFunctions.isLogEnabled()", "testcase": false, "constructor": false}, {"identifier": "logDebug", "parameters": "(String message)", "modifiers": "private static", "return": "void", "signature": "void logDebug(String message)", "full_signature": "private static void logDebug(String message)", "class_method_signature": "EmbeddedFunctions.logDebug(String message)", "testcase": false, "constructor": false}, {"identifier": "isInTree", "parameters": "(Serializable id, Serializable baseId)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInTree(Serializable id, Serializable baseId)", "full_signature": "public static boolean isInTree(Serializable id, Serializable baseId)", "class_method_signature": "EmbeddedFunctions.isInTree(Serializable id, Serializable baseId)", "testcase": false, "constructor": false}, {"identifier": "isInTree", "parameters": "(Connection conn, Serializable id, Serializable baseId)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInTree(Connection conn, Serializable id, Serializable baseId)", "full_signature": "public static boolean isInTree(Connection conn, Serializable id, Serializable baseId)", "class_method_signature": "EmbeddedFunctions.isInTree(Connection conn, Serializable id, Serializable baseId)", "testcase": false, "constructor": false}, {"identifier": "isAccessAllowed", "parameters": "(Serializable id, Set<String> principals, Set<String> permissions)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean isAccessAllowed(Serializable id, Set<String> principals, Set<String> permissions)", "full_signature": "@Deprecated public static boolean isAccessAllowed(Serializable id, Set<String> principals, Set<String> permissions)", "class_method_signature": "EmbeddedFunctions.isAccessAllowed(Serializable id, Set<String> principals, Set<String> permissions)", "testcase": false, "constructor": false}, {"identifier": "isAccessAllowed", "parameters": "(Connection conn, Serializable id, Set<String> principals,\n            Set<String> permissions)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean isAccessAllowed(Connection conn, Serializable id, Set<String> principals,\n            Set<String> permissions)", "full_signature": "@Deprecated public static boolean isAccessAllowed(Connection conn, Serializable id, Set<String> principals,\n            Set<String> permissions)", "class_method_signature": "EmbeddedFunctions.isAccessAllowed(Connection conn, Serializable id, Set<String> principals,\n            Set<String> permissions)", "testcase": false, "constructor": false}, {"identifier": "isAccessAllowed", "parameters": "(Connection conn, Serializable id, Set<String> principals,\n            Set<String> permissions, boolean disableVersionACL, boolean disableReadVersionPermission)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAccessAllowed(Connection conn, Serializable id, Set<String> principals,\n            Set<String> permissions, boolean disableVersionACL, boolean disableReadVersionPermission)", "full_signature": "public static boolean isAccessAllowed(Connection conn, Serializable id, Set<String> principals,\n            Set<String> permissions, boolean disableVersionACL, boolean disableReadVersionPermission)", "class_method_signature": "EmbeddedFunctions.isAccessAllowed(Connection conn, Serializable id, Set<String> principals,\n            Set<String> permissions, boolean disableVersionACL, boolean disableReadVersionPermission)", "testcase": false, "constructor": false}, {"identifier": "getRowInfo", "parameters": "(PreparedStatement psHier, PreparedStatement psVer, Serializable id)", "modifiers": "protected static", "return": "RowInfo", "signature": "RowInfo getRowInfo(PreparedStatement psHier, PreparedStatement psVer, Serializable id)", "full_signature": "protected static RowInfo getRowInfo(PreparedStatement psHier, PreparedStatement psVer, Serializable id)", "class_method_signature": "EmbeddedFunctions.getRowInfo(PreparedStatement psHier, PreparedStatement psVer, Serializable id)", "testcase": false, "constructor": false}, {"identifier": "getAccess", "parameters": "(PreparedStatement psAcl, Serializable id, Set<String> principals,\n            Set<String> permissions, boolean replaceReadVersionPermission)", "modifiers": "protected static", "return": "Boolean", "signature": "Boolean getAccess(PreparedStatement psAcl, Serializable id, Set<String> principals,\n            Set<String> permissions, boolean replaceReadVersionPermission)", "full_signature": "protected static Boolean getAccess(PreparedStatement psAcl, Serializable id, Set<String> principals,\n            Set<String> permissions, boolean replaceReadVersionPermission)", "class_method_signature": "EmbeddedFunctions.getAccess(PreparedStatement psAcl, Serializable id, Set<String> principals,\n            Set<String> permissions, boolean replaceReadVersionPermission)", "testcase": false, "constructor": false}, {"identifier": "parseFullText", "parameters": "(String string1, String string2)", "modifiers": "@Deprecated(since = \"11.1\") public static", "return": "String", "signature": "String parseFullText(String string1, String string2)", "full_signature": "@Deprecated(since = \"11.1\") public static String parseFullText(String string1, String string2)", "class_method_signature": "EmbeddedFunctions.parseFullText(String string1, String string2)", "testcase": false, "constructor": false}, {"identifier": "parseFullText", "parameters": "(String string)", "modifiers": "@Deprecated(since = \"11.1\") protected static", "return": "Set<String>", "signature": "Set<String> parseFullText(String string)", "full_signature": "@Deprecated(since = \"11.1\") protected static Set<String> parseFullText(String string)", "class_method_signature": "EmbeddedFunctions.parseFullText(String string)", "testcase": false, "constructor": false}, {"identifier": "matchesFullText", "parameters": "(String fulltext, String query)", "modifiers": "@Deprecated(since = \"11.1\") protected static", "return": "boolean", "signature": "boolean matchesFullText(String fulltext, String query)", "full_signature": "@Deprecated(since = \"11.1\") protected static boolean matchesFullText(String fulltext, String query)", "class_method_signature": "EmbeddedFunctions.matchesFullText(String fulltext, String query)", "testcase": false, "constructor": false}, {"identifier": "parseWord", "parameters": "(String string)", "modifiers": "@Deprecated(since = \"11.1\") public static final", "return": "String", "signature": "String parseWord(String string)", "full_signature": "@Deprecated(since = \"11.1\") public static final String parseWord(String string)", "class_method_signature": "EmbeddedFunctions.parseWord(String string)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> split(String string)", "full_signature": "public static Set<String> split(String string)", "class_method_signature": "EmbeddedFunctions.split(String string)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, char sep)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> split(String string, char sep)", "full_signature": "public static Set<String> split(String string, char sep)", "class_method_signature": "EmbeddedFunctions.split(String string, char sep)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection<String> strings, char sep)", "modifiers": "@Deprecated(since = \"11.1\") private static final", "return": "String", "signature": "String join(Collection<String> strings, char sep)", "full_signature": "@Deprecated(since = \"11.1\") private static final String join(Collection<String> strings, char sep)", "class_method_signature": "EmbeddedFunctions.join(Collection<String> strings, char sep)", "testcase": false, "constructor": false}], "file": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql-extensions/src/main/java/org/nuxeo/ecm/core/storage/sql/db/EmbeddedFunctions.java"}, "focal_method": {"identifier": "parseFullText", "parameters": "(String string1, String string2)", "modifiers": "@Deprecated(since = \"11.1\") public static", "return": "String", "body": "@Deprecated(since = \"11.1\")\n    public static String parseFullText(String string1, String string2) {\n        Set<String> set = new HashSet<>();\n        set.addAll(parseFullText(string1));\n        set.addAll(parseFullText(string2));\n        List<String> words = new ArrayList<>(set);\n        Collections.sort(words);\n        return join(words, ' ');\n    }", "signature": "String parseFullText(String string1, String string2)", "full_signature": "@Deprecated(since = \"11.1\") public static String parseFullText(String string1, String string2)", "class_method_signature": "EmbeddedFunctions.parseFullText(String string1, String string2)", "testcase": false, "constructor": false, "invocations": ["addAll", "parseFullText", "addAll", "parseFullText", "sort", "join"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}