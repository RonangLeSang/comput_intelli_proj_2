{"test_class": {"identifier": "AppendCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tmp = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tmp = new TemporaryFolder()", "var_name": "tmp"}, {"original_string": "private CommandContext ctx;", "modifier": "private", "type": "CommandContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private ObjectMapper om;", "modifier": "private", "type": "ObjectMapper", "declarator": "om", "var_name": "om"}], "file": "modules/runtime/nuxeo-runtime-deploy/src/test/java/org/nuxeo/runtime/deployment/preprocessor/install/commands/AppendCommandTest.java"}, "test_case": {"identifier": "testJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJson() throws Exception {\n        File dest = tmp.newFile(\"dst.json\");\n        File src1 = tmp.newFile(\"src1.json\");\n\n        FileUtils.writeStringToFile(dest, \"{}\", UTF_8);\n        FileUtils.writeStringToFile(src1, \"{\\\"key1\\\":\\\"value1\\\"}\", UTF_8);\n        append(src1, dest);\n\n        ObjectNode json = om.readValue(dest, ObjectNode.class);\n        assertEquals(\"value1\", json.get(\"key1\").asText());\n\n        File src2 = tmp.newFile(\"src2.JSON\");\n        FileUtils.writeStringToFile(src2, \"{\\\"key1\\\":\\\"override\\\", \\\"key2\\\":\\\"value2\\\"}\", UTF_8);\n        append(src2, dest);\n\n        json = om.readValue(dest, ObjectNode.class);\n        assertEquals(\"override\", json.get(\"key1\").asText());\n        assertEquals(\"value2\", json.get(\"key2\").asText());\n    }", "signature": "void testJson()", "full_signature": "@Test public void testJson()", "class_method_signature": "AppendCommandTest.testJson()", "testcase": true, "constructor": false, "invocations": ["newFile", "newFile", "writeStringToFile", "writeStringToFile", "append", "readValue", "assertEquals", "asText", "get", "newFile", "writeStringToFile", "append", "readValue", "assertEquals", "asText", "get", "assertEquals", "asText", "get"]}, "focal_class": {"identifier": "AppendCommand", "superclass": "", "interfaces": "implements Command", "fields": [{"original_string": "protected final Path src;", "modifier": "protected final", "type": "Path", "declarator": "src", "var_name": "src"}, {"original_string": "protected final Path dst;", "modifier": "protected final", "type": "Path", "declarator": "dst", "var_name": "dst"}, {"original_string": "protected final boolean addNewLine;", "modifier": "protected final", "type": "boolean", "declarator": "addNewLine", "var_name": "addNewLine"}, {"original_string": "protected final FileNamePattern pattern;", "modifier": "protected final", "type": "FileNamePattern", "declarator": "pattern", "var_name": "pattern"}], "methods": [{"identifier": "AppendCommand", "parameters": "(Path src, Path dst, boolean addNewLine, FileNamePattern pattern)", "modifiers": "public", "return": "", "signature": " AppendCommand(Path src, Path dst, boolean addNewLine, FileNamePattern pattern)", "full_signature": "public  AppendCommand(Path src, Path dst, boolean addNewLine, FileNamePattern pattern)", "class_method_signature": "AppendCommand.AppendCommand(Path src, Path dst, boolean addNewLine, FileNamePattern pattern)", "testcase": false, "constructor": true}, {"identifier": "AppendCommand", "parameters": "(Path src, Path dst)", "modifiers": "public", "return": "", "signature": " AppendCommand(Path src, Path dst)", "full_signature": "public  AppendCommand(Path src, Path dst)", "class_method_signature": "AppendCommand.AppendCommand(Path src, Path dst)", "testcase": false, "constructor": true}, {"identifier": "exec", "parameters": "(CommandContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void exec(CommandContext ctx)", "full_signature": "@Override public void exec(CommandContext ctx)", "class_method_signature": "AppendCommand.exec(CommandContext ctx)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AppendCommand.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(CommandContext ctx)", "modifiers": "@Override public", "return": "String", "signature": "String toString(CommandContext ctx)", "full_signature": "@Override public String toString(CommandContext ctx)", "class_method_signature": "AppendCommand.toString(CommandContext ctx)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(File srcFile, File dstFile, boolean appendNewLine)", "modifiers": "private", "return": "void", "signature": "void append(File srcFile, File dstFile, boolean appendNewLine)", "full_signature": "private void append(File srcFile, File dstFile, boolean appendNewLine)", "class_method_signature": "AppendCommand.append(File srcFile, File dstFile, boolean appendNewLine)", "testcase": false, "constructor": false}], "file": "modules/runtime/nuxeo-runtime-deploy/src/main/java/org/nuxeo/runtime/deployment/preprocessor/install/commands/AppendCommand.java"}, "focal_method": {"identifier": "append", "parameters": "(File srcFile, File dstFile, boolean appendNewLine)", "modifiers": "private", "return": "void", "body": "private void append(File srcFile, File dstFile, boolean appendNewLine) throws IOException {\n        String srcExt = FileUtils.getFileExtension(srcFile.getName());\n        String dstExt = FileUtils.getFileExtension(dstFile.getName());\n        boolean isDstEmpty = dstFile.length() == 0; // file empty or doesn't exists\n        if (!isDstEmpty && StringUtils.equalsIgnoreCase(srcExt, dstExt) && \"json\".equalsIgnoreCase(srcExt)) {\n            // merge the json\n            ObjectMapper m = new ObjectMapper();\n            ObjectNode destNode = m.readValue(dstFile, ObjectNode.class);\n            ObjectNode srcNode = m.readValue(srcFile, ObjectNode.class);\n            destNode.setAll(srcNode);\n            m.writeValue(dstFile, destNode);\n        } else {\n            try (InputStream in = new FileInputStream(srcFile);\n                    OutputStream out = new BufferedOutputStream(new FileOutputStream(dstFile, true))) {\n                if (appendNewLine) {\n                    out.write(System.getProperty(\"line.separator\").getBytes());\n                }\n                IOUtils.copy(in, out);\n            }\n        }\n    }", "signature": "void append(File srcFile, File dstFile, boolean appendNewLine)", "full_signature": "private void append(File srcFile, File dstFile, boolean appendNewLine)", "class_method_signature": "AppendCommand.append(File srcFile, File dstFile, boolean appendNewLine)", "testcase": false, "constructor": false, "invocations": ["getFileExtension", "getName", "getFileExtension", "getName", "length", "equalsIgnoreCase", "equalsIgnoreCase", "readValue", "readValue", "setAll", "writeValue", "write", "getBytes", "getProperty", "copy"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}