{"test_class": {"identifier": "TestDocumentPathCodec", "superclass": "", "interfaces": "", "fields": [], "file": "modules/platform/nuxeo-platform-url-core/src/test/java/org/nuxeo/ecm/platform/url/codec/TestDocumentPathCodec.java"}, "test_case": {"identifier": "testGetUrlWithoutPathRef", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUrlWithoutPathRef() {\n        DocumentPathCodec codec = new DocumentPathCodec();\n        DocumentLocation docLoc = new DocumentLocationImpl(\"demo\", null);\n        Map<String, String> params = new HashMap<>();\n        params.put(\"tabId\", \"TAB_CONTENT\");\n        DocumentView docView = new DocumentViewImpl(docLoc, \"view_documents\", params);\n\n        String url = \"nxpath/demo@view_documents?tabId=TAB_CONTENT\";\n        assertEquals(url, codec.getUrlFromDocumentView(docView));\n    }", "signature": "void testGetUrlWithoutPathRef()", "full_signature": "@Test public void testGetUrlWithoutPathRef()", "class_method_signature": "TestDocumentPathCodec.testGetUrlWithoutPathRef()", "testcase": true, "constructor": false, "invocations": ["put", "assertEquals", "getUrlFromDocumentView"]}, "focal_class": {"identifier": "DocumentPathCodec", "superclass": "extends AbstractDocumentViewCodec", "interfaces": "", "fields": [{"original_string": "public static final int URL_MAX_LENGTH = 2000;", "modifier": "public static final", "type": "int", "declarator": "URL_MAX_LENGTH = 2000", "var_name": "URL_MAX_LENGTH"}, {"original_string": "public static final String PREFIX = \"nxpath\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX = \"nxpath\"", "var_name": "PREFIX"}, {"original_string": "public static final String URL_PATTERN = \"/\" // slash\n            + \"([\\\\w\\\\.]+)\" // server name (group 1)\n            + \"(?:/(.*))?\" // path (group 2) (optional)\n            + \"@([\\\\w\\\\-\\\\.;=]+)\" // view id (group 3)\n            + \"/?\" // final slash (optional)\n            + \"(?:\\\\?(.*)?)?\";", "modifier": "public static final", "type": "String", "declarator": "URL_PATTERN = \"/\" // slash\n            + \"([\\\\w\\\\.]+)\" // server name (group 1)\n            + \"(?:/(.*))?\" // path (group 2) (optional)\n            + \"@([\\\\w\\\\-\\\\.;=]+)\" // view id (group 3)\n            + \"/?\" // final slash (optional)\n            + \"(?:\\\\?(.*)?)?\"", "var_name": "URL_PATTERN"}, {"original_string": "private static final Log log = LogFactory.getLog(DocumentPathCodec.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(DocumentPathCodec.class)", "var_name": "log"}], "methods": [{"identifier": "DocumentPathCodec", "parameters": "()", "modifiers": "public", "return": "", "signature": " DocumentPathCodec()", "full_signature": "public  DocumentPathCodec()", "class_method_signature": "DocumentPathCodec.DocumentPathCodec()", "testcase": false, "constructor": true}, {"identifier": "DocumentPathCodec", "parameters": "(String prefix)", "modifiers": "public", "return": "", "signature": " DocumentPathCodec(String prefix)", "full_signature": "public  DocumentPathCodec(String prefix)", "class_method_signature": "DocumentPathCodec.DocumentPathCodec(String prefix)", "testcase": false, "constructor": true}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "DocumentPathCodec.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getUrlFromDocumentView", "parameters": "(DocumentView docView)", "modifiers": "@Override public", "return": "String", "signature": "String getUrlFromDocumentView(DocumentView docView)", "full_signature": "@Override public String getUrlFromDocumentView(DocumentView docView)", "class_method_signature": "DocumentPathCodec.getUrlFromDocumentView(DocumentView docView)", "testcase": false, "constructor": false}, {"identifier": "getDocumentViewFromUrl", "parameters": "(String url)", "modifiers": "@Override public", "return": "DocumentView", "signature": "DocumentView getDocumentViewFromUrl(String url)", "full_signature": "@Override public DocumentView getDocumentViewFromUrl(String url)", "class_method_signature": "DocumentPathCodec.getDocumentViewFromUrl(String url)", "testcase": false, "constructor": false}], "file": "modules/platform/nuxeo-platform-url-core/src/main/java/org/nuxeo/ecm/platform/url/codec/DocumentPathCodec.java"}, "focal_method": {"identifier": "getUrlFromDocumentView", "parameters": "(DocumentView docView)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getUrlFromDocumentView(DocumentView docView) {\n        // Use DocumentIdCodec if the document is a version\n        if (\"true\".equals(docView.getParameter(\"version\"))) {\n            if (docView.getDocumentLocation().getIdRef() != null) {\n                DocumentIdCodec idCodec = new DocumentIdCodec();\n                return idCodec.getUrlFromDocumentView(docView);\n            }\n        }\n\n        DocumentLocation docLoc = docView.getDocumentLocation();\n        if (docLoc != null) {\n            List<String> items = new ArrayList<>();\n            items.add(getPrefix());\n            items.add(docLoc.getServerName());\n            PathRef docRef = docLoc.getPathRef();\n\n            if (docRef != null) {\n                // this is a path, get rid of leading slash\n                String path = docRef.toString();\n                if (path.startsWith(\"/\")) {\n                    path = path.substring(1);\n                }\n                if (path.length() > 0) {\n                    items.add(URIUtils.quoteURIPathComponent(path, false));\n                }\n            }\n\n            String uri = String.join(\"/\", items);\n            String viewId = docView.getViewId();\n            if (viewId != null) {\n                uri += \"@\" + viewId;\n            }\n\n            String uriWithParam = URIUtils.addParametersToURIQuery(uri, docView.getParameters());\n\n            // If the URL with the Path codec is to long, it use the URL with\n            // the Id Codec.\n            if (uriWithParam.length() > URL_MAX_LENGTH) {\n\n                // If the DocumentLocation did not contains the document Id, it\n                // use the Path Codec even if the Url is too long for IE.\n                if (null == docView.getDocumentLocation().getIdRef()) {\n                    log.error(\"The DocumentLocation did not contains the RefId.\");\n                    return uriWithParam;\n                }\n\n                DocumentIdCodec idCodec = new DocumentIdCodec();\n                return idCodec.getUrlFromDocumentView(docView);\n\n            } else {\n                return uriWithParam;\n            }\n        }\n        return null;\n    }", "signature": "String getUrlFromDocumentView(DocumentView docView)", "full_signature": "@Override public String getUrlFromDocumentView(DocumentView docView)", "class_method_signature": "DocumentPathCodec.getUrlFromDocumentView(DocumentView docView)", "testcase": false, "constructor": false, "invocations": ["equals", "getParameter", "getIdRef", "getDocumentLocation", "getUrlFromDocumentView", "getDocumentLocation", "add", "getPrefix", "add", "getServerName", "getPathRef", "toString", "startsWith", "substring", "length", "add", "quoteURIPathComponent", "join", "getViewId", "addParametersToURIQuery", "getParameters", "length", "getIdRef", "getDocumentLocation", "error", "getUrlFromDocumentView"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}