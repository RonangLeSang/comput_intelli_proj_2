{"test_class": {"identifier": "TestNuxeoAuthenticationFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String EVENT_LOGIN_SUCCESS = \"loginSuccess\";", "modifier": "protected static final", "type": "String", "declarator": "EVENT_LOGIN_SUCCESS = \"loginSuccess\"", "var_name": "EVENT_LOGIN_SUCCESS"}, {"original_string": "protected static final String EVENT_LOGOUT = \"logout\";", "modifier": "protected static final", "type": "String", "declarator": "EVENT_LOGOUT = \"logout\"", "var_name": "EVENT_LOGOUT"}, {"original_string": "protected static final String SCHEME = \"http\";", "modifier": "protected static final", "type": "String", "declarator": "SCHEME = \"http\"", "var_name": "SCHEME"}, {"original_string": "protected static final String HOST = \"localhost\";", "modifier": "protected static final", "type": "String", "declarator": "HOST = \"localhost\"", "var_name": "HOST"}, {"original_string": "protected static final int PORT = 8080;", "modifier": "protected static final", "type": "int", "declarator": "PORT = 8080", "var_name": "PORT"}, {"original_string": "protected static final String CONTEXT = \"/nuxeo\";", "modifier": "protected static final", "type": "String", "declarator": "CONTEXT = \"/nuxeo\"", "var_name": "CONTEXT"}, {"original_string": "@Mock\n    @RuntimeService\n    protected UserManager userManager;", "modifier": "@Mock\n    @RuntimeService\n    protected", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "@Mock\n    @RuntimeService\n    protected EventProducer eventProducer;", "modifier": "@Mock\n    @RuntimeService\n    protected", "type": "EventProducer", "declarator": "eventProducer", "var_name": "eventProducer"}, {"original_string": "protected NuxeoAuthenticationFilter filter;", "modifier": "protected", "type": "NuxeoAuthenticationFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "protected DummyFilterChain chain;", "modifier": "protected", "type": "DummyFilterChain", "declarator": "chain", "var_name": "chain"}, {"original_string": "protected ArgumentCaptor<Event> eventCaptor;", "modifier": "protected", "type": "ArgumentCaptor<Event>", "declarator": "eventCaptor", "var_name": "eventCaptor"}], "file": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/ui/web/auth/TestNuxeoAuthenticationFilter.java"}, "test_case": {"identifier": "testAuthPluginFormLogoutInvalidCallbackURL", "parameters": "()", "modifiers": "@Test @Deploy(\"org.nuxeo.ecm.platform.web.common.test:OSGI-INF/test-authchain-dummy-form.xml\") public", "return": "void", "body": "@Test\n    @Deploy(\"org.nuxeo.ecm.platform.web.common.test:OSGI-INF/test-authchain-dummy-form.xml\")\n    public void testAuthPluginFormLogoutInvalidCallbackURL() throws Exception {\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        HttpServletResponse response = mock(HttpServletResponse.class);\n        HttpSession session = mock(HttpSession.class);\n        Map<String, Object> sessionAttributes = mockSessionAttributes(session);\n        initAuthPluginFormLogoutRequest(request, session, sessionAttributes);\n\n        // set the callbackURL parameter to an invalid URL\n        when(request.getParameter(eq(CALLBACK_URL_PARAMETER))).thenReturn(\"http://example.com/redirect\");\n\n        filter.doFilter(request, response, chain);\n\n        // chain not called, as we redirect instead\n        assertFalse(chain.called);\n\n        // logout event\n        checkEvents(EVENT_LOGOUT);\n\n        // cached auth has been removed\n        checkNoCachedUser(sessionAttributes);\n\n        // redirect was called. home.html is the default LoginScreenHelper startup page\n        verify(response).sendRedirect(eq(\"http://localhost:8080/nuxeo/home.html\"));\n    }", "signature": "void testAuthPluginFormLogoutInvalidCallbackURL()", "full_signature": "@Test @Deploy(\"org.nuxeo.ecm.platform.web.common.test:OSGI-INF/test-authchain-dummy-form.xml\") public void testAuthPluginFormLogoutInvalidCallbackURL()", "class_method_signature": "TestNuxeoAuthenticationFilter.testAuthPluginFormLogoutInvalidCallbackURL()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mockSessionAttributes", "initAuthPluginFormLogoutRequest", "thenReturn", "when", "getParameter", "eq", "doFilter", "assertFalse", "checkEvents", "checkNoCachedUser", "sendRedirect", "verify", "eq"]}, "focal_class": {"identifier": "NuxeoAuthenticationFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final Log log = LogFactory.getLog(NuxeoAuthenticationFilter.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(NuxeoAuthenticationFilter.class)", "var_name": "log"}, {"original_string": "@Deprecated\n    public static final String DEFAULT_START_PAGE = \"nxstartup.faces\";", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "DEFAULT_START_PAGE = \"nxstartup.faces\"", "var_name": "DEFAULT_START_PAGE"}, {"original_string": "public static final String LOGIN_DOMAIN = \"nuxeo-ecm-web\";", "modifier": "public static final", "type": "String", "declarator": "LOGIN_DOMAIN = \"nuxeo-ecm-web\"", "var_name": "LOGIN_DOMAIN"}, {"original_string": "protected static final String XMLHTTP_REQUEST_TYPE = \"XMLHttpRequest\";", "modifier": "protected static final", "type": "String", "declarator": "XMLHTTP_REQUEST_TYPE = \"XMLHttpRequest\"", "var_name": "XMLHTTP_REQUEST_TYPE"}, {"original_string": "protected static final String LOGIN_CATEGORY = \"NuxeoAuthentication\";", "modifier": "protected static final", "type": "String", "declarator": "LOGIN_CATEGORY = \"NuxeoAuthentication\"", "var_name": "LOGIN_CATEGORY"}, {"original_string": "protected static final Principal DIRECTORY_ERROR_PRINCIPAL = new PrincipalImpl(\"__DIRECTORY_ERROR__\\0\\0\\0\");", "modifier": "protected static final", "type": "Principal", "declarator": "DIRECTORY_ERROR_PRINCIPAL = new PrincipalImpl(\"__DIRECTORY_ERROR__\\0\\0\\0\")", "var_name": "DIRECTORY_ERROR_PRINCIPAL"}, {"original_string": "protected static final String INDEX_JSP = \"index.jsp\";", "modifier": "protected static final", "type": "String", "declarator": "INDEX_JSP = \"index.jsp\"", "var_name": "INDEX_JSP"}, {"original_string": "protected static final String SLASH_INDEX_JSP = \"/\" + INDEX_JSP;", "modifier": "protected static final", "type": "String", "declarator": "SLASH_INDEX_JSP = \"/\" + INDEX_JSP", "var_name": "SLASH_INDEX_JSP"}, {"original_string": "protected static final String CONVERSATION_ID = \"conversationId\";", "modifier": "protected static final", "type": "String", "declarator": "CONVERSATION_ID = \"conversationId\"", "var_name": "CONVERSATION_ID"}, {"original_string": "protected volatile PluggableAuthenticationService service;", "modifier": "protected volatile", "type": "PluggableAuthenticationService", "declarator": "service", "var_name": "service"}, {"original_string": "protected ReentrantReadWriteLock unAuthenticatedURLPrefixLock = new ReentrantReadWriteLock();", "modifier": "protected", "type": "ReentrantReadWriteLock", "declarator": "unAuthenticatedURLPrefixLock = new ReentrantReadWriteLock()", "var_name": "unAuthenticatedURLPrefixLock"}, {"original_string": "protected List<String> unAuthenticatedURLPrefix;", "modifier": "protected", "type": "List<String>", "declarator": "unAuthenticatedURLPrefix", "var_name": "unAuthenticatedURLPrefix"}, {"original_string": "protected final MetricRegistry registry = SharedMetricRegistries.getOrCreate(MetricsService.class.getName());", "modifier": "protected final", "type": "MetricRegistry", "declarator": "registry = SharedMetricRegistries.getOrCreate(MetricsService.class.getName())", "var_name": "registry"}, {"original_string": "protected final Timer requestTimer = registry.timer(\n            MetricRegistry.name(\"nuxeo\", \"web\", \"authentication\", \"requests\", \"timer\"));", "modifier": "protected final", "type": "Timer", "declarator": "requestTimer = registry.timer(\n            MetricRegistry.name(\"nuxeo\", \"web\", \"authentication\", \"requests\", \"timer\"))", "var_name": "requestTimer"}, {"original_string": "protected final Counter concurrentCount = registry.counter(\n            MetricRegistry.name(\"nuxeo\", \"web\", \"authentication\", \"requests\", \"concurrency\"));", "modifier": "protected final", "type": "Counter", "declarator": "concurrentCount = registry.counter(\n            MetricRegistry.name(\"nuxeo\", \"web\", \"authentication\", \"requests\", \"concurrency\"))", "var_name": "concurrentCount"}, {"original_string": "protected final Counter concurrentMaxCount = registry.counter(\n            MetricRegistry.name(\"nuxeo\", \"web\", \"authentication\", \"requests\", \"concurrency\", \"max\"));", "modifier": "protected final", "type": "Counter", "declarator": "concurrentMaxCount = registry.counter(\n            MetricRegistry.name(\"nuxeo\", \"web\", \"authentication\", \"requests\", \"concurrency\", \"max\"))", "var_name": "concurrentMaxCount"}, {"original_string": "protected final Counter loginCount = registry.counter(\n            MetricRegistry.name(\"nuxeo\", \"web\", \"authentication\", \"logged-users\"));", "modifier": "protected final", "type": "Counter", "declarator": "loginCount = registry.counter(\n            MetricRegistry.name(\"nuxeo\", \"web\", \"authentication\", \"logged-users\"))", "var_name": "loginCount"}], "methods": [{"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "NuxeoAuthenticationFilter.destroy()", "testcase": false, "constructor": false}, {"identifier": "sendAuthenticationEvent", "parameters": "(UserIdentificationInfo userInfo, String eventId, String comment)", "modifiers": "protected static", "return": "boolean", "signature": "boolean sendAuthenticationEvent(UserIdentificationInfo userInfo, String eventId, String comment)", "full_signature": "protected static boolean sendAuthenticationEvent(UserIdentificationInfo userInfo, String eventId, String comment)", "class_method_signature": "NuxeoAuthenticationFilter.sendAuthenticationEvent(UserIdentificationInfo userInfo, String eventId, String comment)", "testcase": false, "constructor": false}, {"identifier": "logAuthenticationAttempt", "parameters": "(UserIdentificationInfo userInfo, boolean success)", "modifiers": "protected", "return": "boolean", "signature": "boolean logAuthenticationAttempt(UserIdentificationInfo userInfo, boolean success)", "full_signature": "protected boolean logAuthenticationAttempt(UserIdentificationInfo userInfo, boolean success)", "class_method_signature": "NuxeoAuthenticationFilter.logAuthenticationAttempt(UserIdentificationInfo userInfo, boolean success)", "testcase": false, "constructor": false}, {"identifier": "logLogout", "parameters": "(UserIdentificationInfo userInfo)", "modifiers": "protected", "return": "boolean", "signature": "boolean logLogout(UserIdentificationInfo userInfo)", "full_signature": "protected boolean logLogout(UserIdentificationInfo userInfo)", "class_method_signature": "NuxeoAuthenticationFilter.logLogout(UserIdentificationInfo userInfo)", "testcase": false, "constructor": false}, {"identifier": "doAuthenticate", "parameters": "(CachableUserIdentificationInfo cachableUserIdent,\n            HttpServletRequest httpRequest)", "modifiers": "protected", "return": "Principal", "signature": "Principal doAuthenticate(CachableUserIdentificationInfo cachableUserIdent,\n            HttpServletRequest httpRequest)", "full_signature": "protected Principal doAuthenticate(CachableUserIdentificationInfo cachableUserIdent,\n            HttpServletRequest httpRequest)", "class_method_signature": "NuxeoAuthenticationFilter.doAuthenticate(CachableUserIdentificationInfo cachableUserIdent,\n            HttpServletRequest httpRequest)", "testcase": false, "constructor": false}, {"identifier": "switchUser", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "protected", "return": "boolean", "signature": "boolean switchUser(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "protected boolean switchUser(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "NuxeoAuthenticationFilter.switchUser(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@Override public", "return": "void", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "NuxeoAuthenticationFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "doFilterInternal", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "public", "return": "void", "signature": "void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "public void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "NuxeoAuthenticationFilter.doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "getAuthenticator", "parameters": "(CachableUserIdentificationInfo ci)", "modifiers": "public", "return": "NuxeoAuthenticationPlugin", "signature": "NuxeoAuthenticationPlugin getAuthenticator(CachableUserIdentificationInfo ci)", "full_signature": "public NuxeoAuthenticationPlugin getAuthenticator(CachableUserIdentificationInfo ci)", "class_method_signature": "NuxeoAuthenticationFilter.getAuthenticator(CachableUserIdentificationInfo ci)", "testcase": false, "constructor": false}, {"identifier": "retrieveIdentityFromCache", "parameters": "(HttpServletRequest httpRequest)", "modifiers": "protected static", "return": "CachableUserIdentificationInfo", "signature": "CachableUserIdentificationInfo retrieveIdentityFromCache(HttpServletRequest httpRequest)", "full_signature": "protected static CachableUserIdentificationInfo retrieveIdentityFromCache(HttpServletRequest httpRequest)", "class_method_signature": "NuxeoAuthenticationFilter.retrieveIdentityFromCache(HttpServletRequest httpRequest)", "testcase": false, "constructor": false}, {"identifier": "getAnonymousId", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getAnonymousId()", "full_signature": "protected String getAnonymousId()", "class_method_signature": "NuxeoAuthenticationFilter.getAnonymousId()", "testcase": false, "constructor": false}, {"identifier": "doInitIfNeeded", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void doInitIfNeeded()", "full_signature": "protected void doInitIfNeeded()", "class_method_signature": "NuxeoAuthenticationFilter.doInitIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FilterConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void init(FilterConfig config)", "full_signature": "@Override public void init(FilterConfig config)", "class_method_signature": "NuxeoAuthenticationFilter.init(FilterConfig config)", "testcase": false, "constructor": false}, {"identifier": "saveRequestedURLBeforeRedirect", "parameters": "(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "modifiers": "public", "return": "boolean", "signature": "boolean saveRequestedURLBeforeRedirect(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "full_signature": "public boolean saveRequestedURLBeforeRedirect(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "class_method_signature": "NuxeoAuthenticationFilter.saveRequestedURLBeforeRedirect(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "getRequestedUrl", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String getRequestedUrl(HttpServletRequest request)", "full_signature": "public static String getRequestedUrl(HttpServletRequest request)", "class_method_signature": "NuxeoAuthenticationFilter.getRequestedUrl(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getSavedRequestedURL", "parameters": "(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "modifiers": "protected static", "return": "String", "signature": "String getSavedRequestedURL(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "full_signature": "protected static String getSavedRequestedURL(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "class_method_signature": "NuxeoAuthenticationFilter.getSavedRequestedURL(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "isStartPageValid", "parameters": "(String startPage)", "modifiers": "protected", "return": "boolean", "signature": "boolean isStartPageValid(String startPage)", "full_signature": "protected boolean isStartPageValid(String startPage)", "class_method_signature": "NuxeoAuthenticationFilter.isStartPageValid(String startPage)", "testcase": false, "constructor": false}, {"identifier": "handleLogout", "parameters": "(ServletRequest request, ServletResponse response,\n            CachableUserIdentificationInfo cachedUserInfo)", "modifiers": "protected", "return": "boolean", "signature": "boolean handleLogout(ServletRequest request, ServletResponse response,\n            CachableUserIdentificationInfo cachedUserInfo)", "full_signature": "protected boolean handleLogout(ServletRequest request, ServletResponse response,\n            CachableUserIdentificationInfo cachedUserInfo)", "class_method_signature": "NuxeoAuthenticationFilter.handleLogout(ServletRequest request, ServletResponse response,\n            CachableUserIdentificationInfo cachedUserInfo)", "testcase": false, "constructor": false}, {"identifier": "getLogoutRedirectURL", "parameters": "(String callbackURL, String baseURL, Map<String, String> parameters)", "modifiers": "protected", "return": "String", "signature": "String getLogoutRedirectURL(String callbackURL, String baseURL, Map<String, String> parameters)", "full_signature": "protected String getLogoutRedirectURL(String callbackURL, String baseURL, Map<String, String> parameters)", "class_method_signature": "NuxeoAuthenticationFilter.getLogoutRedirectURL(String callbackURL, String baseURL, Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "isCallbackURLValid", "parameters": "(String callbackURL, String baseURL)", "modifiers": "protected", "return": "boolean", "signature": "boolean isCallbackURLValid(String callbackURL, String baseURL)", "full_signature": "protected boolean isCallbackURLValid(String callbackURL, String baseURL)", "class_method_signature": "NuxeoAuthenticationFilter.isCallbackURLValid(String callbackURL, String baseURL)", "testcase": false, "constructor": false}, {"identifier": "initUnAuthenticatedURLPrefix", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initUnAuthenticatedURLPrefix()", "full_signature": "protected void initUnAuthenticatedURLPrefix()", "class_method_signature": "NuxeoAuthenticationFilter.initUnAuthenticatedURLPrefix()", "testcase": false, "constructor": false}, {"identifier": "bypassAuth", "parameters": "(HttpServletRequest httpRequest)", "modifiers": "protected", "return": "boolean", "signature": "boolean bypassAuth(HttpServletRequest httpRequest)", "full_signature": "protected boolean bypassAuth(HttpServletRequest httpRequest)", "class_method_signature": "NuxeoAuthenticationFilter.bypassAuth(HttpServletRequest httpRequest)", "testcase": false, "constructor": false}, {"identifier": "getRequestedPage", "parameters": "(ServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String getRequestedPage(ServletRequest request)", "full_signature": "public static String getRequestedPage(ServletRequest request)", "class_method_signature": "NuxeoAuthenticationFilter.getRequestedPage(ServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getRequestedPage", "parameters": "(HttpServletRequest httpRequest)", "modifiers": "protected static", "return": "String", "signature": "String getRequestedPage(HttpServletRequest httpRequest)", "full_signature": "protected static String getRequestedPage(HttpServletRequest httpRequest)", "class_method_signature": "NuxeoAuthenticationFilter.getRequestedPage(HttpServletRequest httpRequest)", "testcase": false, "constructor": false}, {"identifier": "handleLoginPrompt", "parameters": "(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "modifiers": "protected", "return": "boolean", "signature": "boolean handleLoginPrompt(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "full_signature": "protected boolean handleLoginPrompt(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "class_method_signature": "NuxeoAuthenticationFilter.handleLoginPrompt(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "handleLogin", "parameters": "(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "modifiers": "protected", "return": "boolean", "signature": "boolean handleLogin(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "full_signature": "protected boolean handleLogin(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "class_method_signature": "NuxeoAuthenticationFilter.handleLogin(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "buildUnauthorizedResponse", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "protected", "return": "void", "signature": "void buildUnauthorizedResponse(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "protected void buildUnauthorizedResponse(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "NuxeoAuthenticationFilter.buildUnauthorizedResponse(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "handleRetrieveIdentity", "parameters": "(HttpServletRequest httpRequest,\n            HttpServletResponse httpResponse)", "modifiers": "protected", "return": "UserIdentificationInfo", "signature": "UserIdentificationInfo handleRetrieveIdentity(HttpServletRequest httpRequest,\n            HttpServletResponse httpResponse)", "full_signature": "protected UserIdentificationInfo handleRetrieveIdentity(HttpServletRequest httpRequest,\n            HttpServletResponse httpResponse)", "class_method_signature": "NuxeoAuthenticationFilter.handleRetrieveIdentity(HttpServletRequest httpRequest,\n            HttpServletResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "needSessionSaving", "parameters": "(UserIdentificationInfo userInfo)", "modifiers": "protected", "return": "boolean", "signature": "boolean needSessionSaving(UserIdentificationInfo userInfo)", "full_signature": "protected boolean needSessionSaving(UserIdentificationInfo userInfo)", "class_method_signature": "NuxeoAuthenticationFilter.needSessionSaving(UserIdentificationInfo userInfo)", "testcase": false, "constructor": false}, {"identifier": "loginAs", "parameters": "(String username)", "modifiers": "public static", "return": "NuxeoLoginContext", "signature": "NuxeoLoginContext loginAs(String username)", "full_signature": "public static NuxeoLoginContext loginAs(String username)", "class_method_signature": "NuxeoAuthenticationFilter.loginAs(String username)", "testcase": false, "constructor": false}, {"identifier": "createPrincipal", "parameters": "(String username)", "modifiers": "protected static", "return": "NuxeoPrincipal", "signature": "NuxeoPrincipal createPrincipal(String username)", "full_signature": "protected static NuxeoPrincipal createPrincipal(String username)", "class_method_signature": "NuxeoAuthenticationFilter.createPrincipal(String username)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalCheckingAuth", "parameters": "(UserIdentificationInfo userIdent, HttpServletRequest request)", "modifiers": "protected", "return": "Principal", "signature": "Principal getPrincipalCheckingAuth(UserIdentificationInfo userIdent, HttpServletRequest request)", "full_signature": "protected Principal getPrincipalCheckingAuth(UserIdentificationInfo userIdent, HttpServletRequest request)", "class_method_signature": "NuxeoAuthenticationFilter.getPrincipalCheckingAuth(UserIdentificationInfo userIdent, HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/ui/web/auth/NuxeoAuthenticationFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        try (Timer.Context contextTimer = requestTimer.time()) {\n            concurrentCount.inc();\n            if (concurrentCount.getCount() > concurrentMaxCount.getCount()) {\n                concurrentMaxCount.inc();\n            }\n            try {\n                doInitIfNeeded();\n                doFilterInternal(request, response, chain);\n            } finally {\n                LoginComponent.clearPrincipalStack();\n                concurrentCount.dec();\n            }\n        }\n    }", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "NuxeoAuthenticationFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false, "invocations": ["time", "inc", "getCount", "getCount", "inc", "doInitIfNeeded", "doFilterInternal", "clearPrincipalStack", "dec"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}