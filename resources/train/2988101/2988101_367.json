{"test_class": {"identifier": "TestIdUtils", "superclass": "", "interfaces": "", "fields": [], "file": "modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/utils/TestIdUtils.java"}, "test_case": {"identifier": "testGenerateIdAccentsSeparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateIdAccentsSeparator() {\n        String s = \"C'est l'\\u00E9t\\u00E9 !\";\n        assertEquals(\"c-est-l-ete\", IdUtils.generateId(s, \"-\", true, 100));\n        assertEquals(\"c_est_l_ete\", IdUtils.generateId(s, \"_\", true, 100));\n    }", "signature": "void testGenerateIdAccentsSeparator()", "full_signature": "@Test public void testGenerateIdAccentsSeparator()", "class_method_signature": "TestIdUtils.testGenerateIdAccentsSeparator()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "generateId", "assertEquals", "generateId"]}, "focal_class": {"identifier": "IdUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String WORD_SPLITTING_REGEXP = \"[^a-zA-Z0-9]+\";", "modifier": "private static final", "type": "String", "declarator": "WORD_SPLITTING_REGEXP = \"[^a-zA-Z0-9]+\"", "var_name": "WORD_SPLITTING_REGEXP"}, {"original_string": "public static final String UUID_TYPE_4_REGEXP = \"[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}\";", "modifier": "public static final", "type": "String", "declarator": "UUID_TYPE_4_REGEXP = \"[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}\"", "var_name": "UUID_TYPE_4_REGEXP"}, {"original_string": "private static final Random RANDOM = new SecureRandom();", "modifier": "private static final", "type": "Random", "declarator": "RANDOM = new SecureRandom()", "var_name": "RANDOM"}], "methods": [{"identifier": "IdUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " IdUtils()", "full_signature": "private  IdUtils()", "class_method_signature": "IdUtils.IdUtils()", "testcase": false, "constructor": true}, {"identifier": "generateStringId", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String generateStringId()", "full_signature": "public static String generateStringId()", "class_method_signature": "IdUtils.generateStringId()", "testcase": false, "constructor": false}, {"identifier": "generateLongId", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long generateLongId()", "full_signature": "public static long generateLongId()", "class_method_signature": "IdUtils.generateLongId()", "testcase": false, "constructor": false}, {"identifier": "generateId", "parameters": "(String s, String wordSeparator, boolean lower, int maxChars)", "modifiers": "public static", "return": "String", "signature": "String generateId(String s, String wordSeparator, boolean lower, int maxChars)", "full_signature": "public static String generateId(String s, String wordSeparator, boolean lower, int maxChars)", "class_method_signature": "IdUtils.generateId(String s, String wordSeparator, boolean lower, int maxChars)", "testcase": false, "constructor": false}, {"identifier": "isValidUUID", "parameters": "(String uuid)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidUUID(String uuid)", "full_signature": "public static boolean isValidUUID(String uuid)", "class_method_signature": "IdUtils.isValidUUID(String uuid)", "testcase": false, "constructor": false}], "file": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/utils/IdUtils.java"}, "focal_method": {"identifier": "generateId", "parameters": "(String s, String wordSeparator, boolean lower, int maxChars)", "modifiers": "public static", "return": "String", "body": "public static String generateId(String s, String wordSeparator, boolean lower, int maxChars) {\n        s = StringUtils.toAscii(s);\n        s = s.trim();\n        if (lower) {\n            s = s.toLowerCase();\n        }\n        String[] words = s.split(WORD_SPLITTING_REGEXP);\n        // remove blank chars from words, did not get why they're not filtered\n        List<String> wordsList = new ArrayList<>();\n        for (String word : words) {\n            if (word != null && word.length() > 0) {\n                wordsList.add(word);\n            }\n        }\n        if (wordsList.isEmpty()) {\n            return generateStringId();\n        }\n        StringBuilder sb = new StringBuilder();\n        String id;\n        if (maxChars > 0) {\n            // be sure at least one word is used\n            sb.append(wordsList.get(0));\n            for (int i = 1; i < wordsList.size(); i++) {\n                String newWord = wordsList.get(i);\n                if (sb.length() + newWord.length() > maxChars) {\n                    break;\n                } else {\n                    sb.append(wordSeparator).append(newWord);\n                }\n            }\n            id = sb.toString();\n            id = id.substring(0, Math.min(id.length(), maxChars));\n        } else {\n            id = String.join(wordSeparator, wordsList);\n        }\n\n        return id;\n    }", "signature": "String generateId(String s, String wordSeparator, boolean lower, int maxChars)", "full_signature": "public static String generateId(String s, String wordSeparator, boolean lower, int maxChars)", "class_method_signature": "IdUtils.generateId(String s, String wordSeparator, boolean lower, int maxChars)", "testcase": false, "constructor": false, "invocations": ["toAscii", "trim", "toLowerCase", "split", "length", "add", "isEmpty", "generateStringId", "append", "get", "size", "get", "length", "length", "append", "append", "toString", "substring", "min", "length", "join"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}