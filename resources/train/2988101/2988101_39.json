{"test_class": {"identifier": "TestJenaGraph", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JenaGraph graph;", "modifier": "private", "type": "JenaGraph", "declarator": "graph", "var_name": "graph"}, {"original_string": "private List<Statement> statements;", "modifier": "private", "type": "List<Statement>", "declarator": "statements", "var_name": "statements"}, {"original_string": "private String namespace;", "modifier": "private", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private Resource doc1;", "modifier": "private", "type": "Resource", "declarator": "doc1", "var_name": "doc1"}, {"original_string": "private Resource doc2;", "modifier": "private", "type": "Resource", "declarator": "doc2", "var_name": "doc2"}, {"original_string": "private QNameResource isBasedOn;", "modifier": "private", "type": "QNameResource", "declarator": "isBasedOn", "var_name": "isBasedOn"}, {"original_string": "private QNameResource references;", "modifier": "private", "type": "QNameResource", "declarator": "references", "var_name": "references"}], "file": "modules/platform/nuxeo-platform-relations/nuxeo-platform-relations-jena-plugin/src/test/java/org/nuxeo/ecm/platform/relations/jena/TestJenaGraph.java"}, "test_case": {"identifier": "testGetGraph", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetGraph() {\n        Model jenaGraph = graph.openGraph().getGraph();\n        Map<String, String> map = jenaGraph.getNsPrefixMap();\n        assertEquals(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\", map.get(\"rdf\"));\n        assertEquals(\"http://purl.org/dc/terms/\", map.get(\"dcterms\"));\n    }", "signature": "void testGetGraph()", "full_signature": "@Test public void testGetGraph()", "class_method_signature": "TestJenaGraph.testGetGraph()", "testcase": true, "constructor": false, "invocations": ["getGraph", "openGraph", "getNsPrefixMap", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "JenaGraph", "superclass": "", "interfaces": "implements Graph", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Log log = LogFactory.getLog(JenaGraph.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(JenaGraph.class)", "var_name": "log"}, {"original_string": "private transient Model memoryGraph;", "modifier": "private transient", "type": "Model", "declarator": "memoryGraph", "var_name": "memoryGraph"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String backend = \"memory\";", "modifier": "private", "type": "String", "declarator": "backend = \"memory\"", "var_name": "backend"}, {"original_string": "private String datasource;", "modifier": "private", "type": "String", "declarator": "datasource", "var_name": "datasource"}, {"original_string": "private String databaseType;", "modifier": "private", "type": "String", "declarator": "databaseType", "var_name": "databaseType"}, {"original_string": "private boolean databaseDoCompressUri;", "modifier": "private", "type": "boolean", "declarator": "databaseDoCompressUri", "var_name": "databaseDoCompressUri"}, {"original_string": "private boolean databaseTransactionEnabled;", "modifier": "private", "type": "boolean", "declarator": "databaseTransactionEnabled", "var_name": "databaseTransactionEnabled"}, {"original_string": "private Map<String, String> namespaces = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "namespaces = new HashMap<>()", "var_name": "namespaces"}], "methods": [{"identifier": "openGraph", "parameters": "()", "modifiers": "protected", "return": "GraphConnection", "signature": "GraphConnection openGraph()", "full_signature": "protected GraphConnection openGraph()", "class_method_signature": "JenaGraph.openGraph()", "testcase": false, "constructor": false}, {"identifier": "openGraph", "parameters": "(boolean forceReload)", "modifiers": "@SuppressWarnings(\"resource\") // baseConnection and wrappedConnection closed by GraphConnection.close protected synchronized", "return": "GraphConnection", "signature": "GraphConnection openGraph(boolean forceReload)", "full_signature": "@SuppressWarnings(\"resource\") // baseConnection and wrappedConnection closed by GraphConnection.close protected synchronized GraphConnection openGraph(boolean forceReload)", "class_method_signature": "JenaGraph.openGraph(boolean forceReload)", "testcase": false, "constructor": false}, {"identifier": "getJenaNode", "parameters": "(Node nuxNode)", "modifiers": "private static", "return": "com.hp.hpl.jena.graph.Node", "signature": "com.hp.hpl.jena.graph.Node getJenaNode(Node nuxNode)", "full_signature": "private static com.hp.hpl.jena.graph.Node getJenaNode(Node nuxNode)", "class_method_signature": "JenaGraph.getJenaNode(Node nuxNode)", "testcase": false, "constructor": false}, {"identifier": "getNXRelationsNode", "parameters": "(com.hp.hpl.jena.graph.Node jenaNodeInst)", "modifiers": "private", "return": "Node", "signature": "Node getNXRelationsNode(com.hp.hpl.jena.graph.Node jenaNodeInst)", "full_signature": "private Node getNXRelationsNode(com.hp.hpl.jena.graph.Node jenaNodeInst)", "class_method_signature": "JenaGraph.getNXRelationsNode(com.hp.hpl.jena.graph.Node jenaNodeInst)", "testcase": false, "constructor": false}, {"identifier": "getJenaSelector", "parameters": "(Model graph, Statement nuxStatement)", "modifiers": "private static", "return": "SimpleSelector", "signature": "SimpleSelector getJenaSelector(Model graph, Statement nuxStatement)", "full_signature": "private static SimpleSelector getJenaSelector(Model graph, Statement nuxStatement)", "class_method_signature": "JenaGraph.getJenaSelector(Model graph, Statement nuxStatement)", "testcase": false, "constructor": false}, {"identifier": "getNXRelationsStatement", "parameters": "(Model graph, com.hp.hpl.jena.rdf.model.Statement jenaStatement)", "modifiers": "private", "return": "Statement", "signature": "Statement getNXRelationsStatement(Model graph, com.hp.hpl.jena.rdf.model.Statement jenaStatement)", "full_signature": "private Statement getNXRelationsStatement(Model graph, com.hp.hpl.jena.rdf.model.Statement jenaStatement)", "class_method_signature": "JenaGraph.getNXRelationsStatement(Model graph, com.hp.hpl.jena.rdf.model.Statement jenaStatement)", "testcase": false, "constructor": false}, {"identifier": "getNXRelationsStatements", "parameters": "(Model graph,\n            List<com.hp.hpl.jena.rdf.model.Statement> jenaStatements)", "modifiers": "private", "return": "List<Statement>", "signature": "List<Statement> getNXRelationsStatements(Model graph,\n            List<com.hp.hpl.jena.rdf.model.Statement> jenaStatements)", "full_signature": "private List<Statement> getNXRelationsStatements(Model graph,\n            List<com.hp.hpl.jena.rdf.model.Statement> jenaStatements)", "class_method_signature": "JenaGraph.getNXRelationsStatements(Model graph,\n            List<com.hp.hpl.jena.rdf.model.Statement> jenaStatements)", "testcase": false, "constructor": false}, {"identifier": "setDescription", "parameters": "(GraphDescription graphDescription)", "modifiers": "@Override public", "return": "void", "signature": "void setDescription(GraphDescription graphDescription)", "full_signature": "@Override public void setDescription(GraphDescription graphDescription)", "class_method_signature": "JenaGraph.setDescription(GraphDescription graphDescription)", "testcase": false, "constructor": false}, {"identifier": "setOptions", "parameters": "(Map<String, String> options)", "modifiers": "protected", "return": "void", "signature": "void setOptions(Map<String, String> options)", "full_signature": "protected void setOptions(Map<String, String> options)", "class_method_signature": "JenaGraph.setOptions(Map<String, String> options)", "testcase": false, "constructor": false}, {"identifier": "setNamespaces", "parameters": "(Map<String, String> namespaces)", "modifiers": "public", "return": "void", "signature": "void setNamespaces(Map<String, String> namespaces)", "full_signature": "public void setNamespaces(Map<String, String> namespaces)", "class_method_signature": "JenaGraph.setNamespaces(Map<String, String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getNamespaces()", "full_signature": "@Override public Map<String, String> getNamespaces()", "class_method_signature": "JenaGraph.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "void", "signature": "void add(Statement statement)", "full_signature": "@Override public void add(Statement statement)", "class_method_signature": "JenaGraph.add(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(List<Statement> statements)", "modifiers": "@Override public", "return": "void", "signature": "void add(List<Statement> statements)", "full_signature": "@Override public void add(List<Statement> statements)", "class_method_signature": "JenaGraph.add(List<Statement> statements)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Statement statement)", "full_signature": "@Override public void remove(Statement statement)", "class_method_signature": "JenaGraph.remove(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(List<Statement> statements)", "modifiers": "@Override public", "return": "void", "signature": "void remove(List<Statement> statements)", "full_signature": "@Override public void remove(List<Statement> statements)", "class_method_signature": "JenaGraph.remove(List<Statement> statements)", "testcase": false, "constructor": false}, {"identifier": "getStatements", "parameters": "()", "modifiers": "@Override public", "return": "List<Statement>", "signature": "List<Statement> getStatements()", "full_signature": "@Override public List<Statement> getStatements()", "class_method_signature": "JenaGraph.getStatements()", "testcase": false, "constructor": false}, {"identifier": "getStatements", "parameters": "(Node subject, Node predicate, Node object)", "modifiers": "@Override public", "return": "List<Statement>", "signature": "List<Statement> getStatements(Node subject, Node predicate, Node object)", "full_signature": "@Override public List<Statement> getStatements(Node subject, Node predicate, Node object)", "class_method_signature": "JenaGraph.getStatements(Node subject, Node predicate, Node object)", "testcase": false, "constructor": false}, {"identifier": "getStatements", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "List<Statement>", "signature": "List<Statement> getStatements(Statement statement)", "full_signature": "@Override public List<Statement> getStatements(Statement statement)", "class_method_signature": "JenaGraph.getStatements(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "getSubjects", "parameters": "(Node predicate, Node object)", "modifiers": "@Override public", "return": "List<Node>", "signature": "List<Node> getSubjects(Node predicate, Node object)", "full_signature": "@Override public List<Node> getSubjects(Node predicate, Node object)", "class_method_signature": "JenaGraph.getSubjects(Node predicate, Node object)", "testcase": false, "constructor": false}, {"identifier": "getPredicates", "parameters": "(Node subject, Node object)", "modifiers": "@Override public", "return": "List<Node>", "signature": "List<Node> getPredicates(Node subject, Node object)", "full_signature": "@Override public List<Node> getPredicates(Node subject, Node object)", "class_method_signature": "JenaGraph.getPredicates(Node subject, Node object)", "testcase": false, "constructor": false}, {"identifier": "getObjects", "parameters": "(Node subject, Node predicate)", "modifiers": "@Override public", "return": "List<Node>", "signature": "List<Node> getObjects(Node subject, Node predicate)", "full_signature": "@Override public List<Node> getObjects(Node subject, Node predicate)", "class_method_signature": "JenaGraph.getObjects(Node subject, Node predicate)", "testcase": false, "constructor": false}, {"identifier": "hasStatement", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasStatement(Statement statement)", "full_signature": "@Override public boolean hasStatement(Statement statement)", "class_method_signature": "JenaGraph.hasStatement(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "hasResource", "parameters": "(Resource resource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasResource(Resource resource)", "full_signature": "@Override public boolean hasResource(Resource resource)", "class_method_signature": "JenaGraph.hasResource(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long size()", "full_signature": "@Override public Long size()", "class_method_signature": "JenaGraph.size()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "JenaGraph.clear()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(String queryString, String language, String baseURI)", "modifiers": "@Override public", "return": "QueryResult", "signature": "QueryResult query(String queryString, String language, String baseURI)", "full_signature": "@Override public QueryResult query(String queryString, String language, String baseURI)", "class_method_signature": "JenaGraph.query(String queryString, String language, String baseURI)", "testcase": false, "constructor": false}, {"identifier": "queryCount", "parameters": "(String queryString, String language, String baseURI)", "modifiers": "@Override public", "return": "int", "signature": "int queryCount(String queryString, String language, String baseURI)", "full_signature": "@Override public int queryCount(String queryString, String language, String baseURI)", "class_method_signature": "JenaGraph.queryCount(String queryString, String language, String baseURI)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InputStream in, String lang, String base)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InputStream in, String lang, String base)", "full_signature": "@Override public boolean read(InputStream in, String lang, String base)", "class_method_signature": "JenaGraph.read(InputStream in, String lang, String base)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String path, String lang, String base)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(String path, String lang, String base)", "full_signature": "@Override public boolean read(String path, String lang, String base)", "class_method_signature": "JenaGraph.read(String path, String lang, String base)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream out, String lang, String base)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(OutputStream out, String lang, String base)", "full_signature": "@Override public boolean write(OutputStream out, String lang, String base)", "class_method_signature": "JenaGraph.write(OutputStream out, String lang, String base)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String path, String lang, String base)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(String path, String lang, String base)", "full_signature": "@Override public boolean write(String path, String lang, String base)", "class_method_signature": "JenaGraph.write(String path, String lang, String base)", "testcase": false, "constructor": false}], "file": "modules/platform/nuxeo-platform-relations/nuxeo-platform-relations-jena-plugin/src/main/java/org/nuxeo/ecm/platform/relations/jena/JenaGraph.java"}, "focal_method": {"identifier": "openGraph", "parameters": "()", "modifiers": "protected", "return": "GraphConnection", "body": "protected GraphConnection openGraph() {\n        return openGraph(false);\n    }", "signature": "GraphConnection openGraph()", "full_signature": "protected GraphConnection openGraph()", "class_method_signature": "JenaGraph.openGraph()", "testcase": false, "constructor": false, "invocations": ["openGraph"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}