{"test_class": {"identifier": "TestHtmlSanitizerServiceImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String BAD_HTML = \"<b>foo<script>bar</script></b>\";", "modifier": "public static final", "type": "String", "declarator": "BAD_HTML = \"<b>foo<script>bar</script></b>\"", "var_name": "BAD_HTML"}, {"original_string": "public static final String SANITIZED_HTML = \"<b>foo</b>\";", "modifier": "public static final", "type": "String", "declarator": "SANITIZED_HTML = \"<b>foo</b>\"", "var_name": "SANITIZED_HTML"}, {"original_string": "public static final String XML = \"<b>caf\\u00e9</b>\";", "modifier": "public static final", "type": "String", "declarator": "XML = \"<b>caf\\u00e9</b>\"", "var_name": "XML"}, {"original_string": "public static final String SANITIZED_XML = \"<b>caf\\u00e9</b>\";", "modifier": "public static final", "type": "String", "declarator": "SANITIZED_XML = \"<b>caf\\u00e9</b>\"", "var_name": "SANITIZED_XML"}, {"original_string": "public static final String NORMAL_TEXT = \"Caf\\u00e9 < Tea\";", "modifier": "public static final", "type": "String", "declarator": "NORMAL_TEXT = \"Caf\\u00e9 < Tea\"", "var_name": "NORMAL_TEXT"}, {"original_string": "public static final String MARKDOWN_TEXT = \"Caf\\u00e9 < Tea\";", "modifier": "public static final", "type": "String", "declarator": "MARKDOWN_TEXT = \"Caf\\u00e9 < Tea\"", "var_name": "MARKDOWN_TEXT"}, {"original_string": "public static final String WIKI_MARKUP = \"<script></script>[image:http://server/path/image.jpg My Image]\";", "modifier": "public static final", "type": "String", "declarator": "WIKI_MARKUP = \"<script></script>[image:http://server/path/image.jpg My Image]\"", "var_name": "WIKI_MARKUP"}, {"original_string": "public static final String BAD_HTML5 =\n            \"<video id=\\\"test\\\"><source src=\\\"test\\\" type=\\\"video/mp4\\\"/><img src=\\\"file://wrongpath\\\"/></video>\";", "modifier": "public static final", "type": "String", "declarator": "BAD_HTML5 =\n            \"<video id=\\\"test\\\"><source src=\\\"test\\\" type=\\\"video/mp4\\\"/><img src=\\\"file://wrongpath\\\"/></video>\"", "var_name": "BAD_HTML5"}, {"original_string": "public static final String SANITIZED_HTML5 = \"<video id=\\\"test\\\"><source src=\\\"test\\\" type=\\\"video/mp4\\\" /><img /></video>\";", "modifier": "public static final", "type": "String", "declarator": "SANITIZED_HTML5 = \"<video id=\\\"test\\\"><source src=\\\"test\\\" type=\\\"video/mp4\\\" /><img /></video>\"", "var_name": "SANITIZED_HTML5"}, {"original_string": "@Inject\n    CoreSession session;", "modifier": "@Inject", "type": "CoreSession", "declarator": "session", "var_name": "session"}], "file": "modules/platform/nuxeo-platform-htmlsanitizer/src/test/java/org/nuxeo/ecm/platform/htmlsanitizer/TestHtmlSanitizerServiceImpl.java"}, "test_case": {"identifier": "sanitizeKeepLinkTargetBlank", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sanitizeKeepLinkTargetBlank() throws Exception {\n        String html = \"<a href=\\\"foo\\\" target=\\\"_blank\\\">link</a>\";\n        String expected = \"<a href=\\\"foo\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">link</a>\";\n        HtmlSanitizerService service = Framework.getService(HtmlSanitizerService.class);\n        String res = service.sanitizeString(html, null);\n        assertEquals(expected, res);\n    }", "signature": "void sanitizeKeepLinkTargetBlank()", "full_signature": "@Test public void sanitizeKeepLinkTargetBlank()", "class_method_signature": "TestHtmlSanitizerServiceImpl.sanitizeKeepLinkTargetBlank()", "testcase": true, "constructor": false, "invocations": ["getService", "sanitizeString", "assertEquals"]}, "focal_class": {"identifier": "HtmlSanitizerServiceImpl", "superclass": "extends DefaultComponent", "interfaces": "implements HtmlSanitizerService", "fields": [{"original_string": "private static final Log log = LogFactory.getLog(HtmlSanitizerServiceImpl.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(HtmlSanitizerServiceImpl.class)", "var_name": "log"}, {"original_string": "public static final String ANTISAMY_XP = \"antisamy\";", "modifier": "public static final", "type": "String", "declarator": "ANTISAMY_XP = \"antisamy\"", "var_name": "ANTISAMY_XP"}, {"original_string": "public static final String SANITIZER_XP = \"sanitizer\";", "modifier": "public static final", "type": "String", "declarator": "SANITIZER_XP = \"sanitizer\"", "var_name": "SANITIZER_XP"}, {"original_string": "public LinkedList<HtmlSanitizerAntiSamyDescriptor> allPolicies = new LinkedList<>();", "modifier": "public", "type": "LinkedList<HtmlSanitizerAntiSamyDescriptor>", "declarator": "allPolicies = new LinkedList<>()", "var_name": "allPolicies"}, {"original_string": "public PolicyFactory policy;", "modifier": "public", "type": "PolicyFactory", "declarator": "policy", "var_name": "policy"}, {"original_string": "public List<HtmlSanitizerDescriptor> allSanitizers = new ArrayList<>(1);", "modifier": "public", "type": "List<HtmlSanitizerDescriptor>", "declarator": "allSanitizers = new ArrayList<>(1)", "var_name": "allSanitizers"}, {"original_string": "public List<HtmlSanitizerDescriptor> sanitizers = new ArrayList<>(1);", "modifier": "public", "type": "List<HtmlSanitizerDescriptor>", "declarator": "sanitizers = new ArrayList<>(1)", "var_name": "sanitizers"}], "methods": [{"identifier": "registerContribution", "parameters": "(Object contribution, String extensionPoint, ComponentInstance contributor)", "modifiers": "@Override public", "return": "void", "signature": "void registerContribution(Object contribution, String extensionPoint, ComponentInstance contributor)", "full_signature": "@Override public void registerContribution(Object contribution, String extensionPoint, ComponentInstance contributor)", "class_method_signature": "HtmlSanitizerServiceImpl.registerContribution(Object contribution, String extensionPoint, ComponentInstance contributor)", "testcase": false, "constructor": false}, {"identifier": "unregisterContribution", "parameters": "(Object contribution, String extensionPoint, ComponentInstance contributor)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterContribution(Object contribution, String extensionPoint, ComponentInstance contributor)", "full_signature": "@Override public void unregisterContribution(Object contribution, String extensionPoint, ComponentInstance contributor)", "class_method_signature": "HtmlSanitizerServiceImpl.unregisterContribution(Object contribution, String extensionPoint, ComponentInstance contributor)", "testcase": false, "constructor": false}, {"identifier": "addAntiSamy", "parameters": "(HtmlSanitizerAntiSamyDescriptor desc)", "modifiers": "protected", "return": "void", "signature": "void addAntiSamy(HtmlSanitizerAntiSamyDescriptor desc)", "full_signature": "protected void addAntiSamy(HtmlSanitizerAntiSamyDescriptor desc)", "class_method_signature": "HtmlSanitizerServiceImpl.addAntiSamy(HtmlSanitizerAntiSamyDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "removeAntiSamy", "parameters": "(HtmlSanitizerAntiSamyDescriptor desc)", "modifiers": "protected", "return": "void", "signature": "void removeAntiSamy(HtmlSanitizerAntiSamyDescriptor desc)", "full_signature": "protected void removeAntiSamy(HtmlSanitizerAntiSamyDescriptor desc)", "class_method_signature": "HtmlSanitizerServiceImpl.removeAntiSamy(HtmlSanitizerAntiSamyDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "refreshPolicy", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void refreshPolicy()", "full_signature": "protected void refreshPolicy()", "class_method_signature": "HtmlSanitizerServiceImpl.refreshPolicy()", "testcase": false, "constructor": false}, {"identifier": "initializeBuilder", "parameters": "(HtmlPolicyBuilder builder)", "modifiers": "protected", "return": "void", "signature": "void initializeBuilder(HtmlPolicyBuilder builder)", "full_signature": "protected void initializeBuilder(HtmlPolicyBuilder builder)", "class_method_signature": "HtmlSanitizerServiceImpl.initializeBuilder(HtmlPolicyBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "addSanitizer", "parameters": "(HtmlSanitizerDescriptor desc)", "modifiers": "protected", "return": "void", "signature": "void addSanitizer(HtmlSanitizerDescriptor desc)", "full_signature": "protected void addSanitizer(HtmlSanitizerDescriptor desc)", "class_method_signature": "HtmlSanitizerServiceImpl.addSanitizer(HtmlSanitizerDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "removeSanitizer", "parameters": "(HtmlSanitizerDescriptor desc)", "modifiers": "protected", "return": "void", "signature": "void removeSanitizer(HtmlSanitizerDescriptor desc)", "full_signature": "protected void removeSanitizer(HtmlSanitizerDescriptor desc)", "class_method_signature": "HtmlSanitizerServiceImpl.removeSanitizer(HtmlSanitizerDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "refreshSanitizers", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void refreshSanitizers()", "full_signature": "protected void refreshSanitizers()", "class_method_signature": "HtmlSanitizerServiceImpl.refreshSanitizers()", "testcase": false, "constructor": false}, {"identifier": "getSanitizers", "parameters": "()", "modifiers": "protected", "return": "List<HtmlSanitizerDescriptor>", "signature": "List<HtmlSanitizerDescriptor> getSanitizers()", "full_signature": "protected List<HtmlSanitizerDescriptor> getSanitizers()", "class_method_signature": "HtmlSanitizerServiceImpl.getSanitizers()", "testcase": false, "constructor": false}, {"identifier": "sanitizeDocument", "parameters": "(DocumentModel doc)", "modifiers": "@Override public", "return": "void", "signature": "void sanitizeDocument(DocumentModel doc)", "full_signature": "@Override public void sanitizeDocument(DocumentModel doc)", "class_method_signature": "HtmlSanitizerServiceImpl.sanitizeDocument(DocumentModel doc)", "testcase": false, "constructor": false}, {"identifier": "sanitizeString", "parameters": "(String string, String info)", "modifiers": "@Override public", "return": "String", "signature": "String sanitizeString(String string, String info)", "full_signature": "@Override public String sanitizeString(String string, String info)", "class_method_signature": "HtmlSanitizerServiceImpl.sanitizeString(String string, String info)", "testcase": false, "constructor": false}], "file": "modules/platform/nuxeo-platform-htmlsanitizer/src/main/java/org/nuxeo/ecm/platform/htmlsanitizer/HtmlSanitizerServiceImpl.java"}, "focal_method": {"identifier": "sanitizeString", "parameters": "(String string, String info)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String sanitizeString(String string, String info) {\n        if (policy == null) {\n            log.error(\"Cannot sanitize, no policy registered\");\n            return string;\n        }\n        return policy.sanitize(string);\n    }", "signature": "String sanitizeString(String string, String info)", "full_signature": "@Override public String sanitizeString(String string, String info)", "class_method_signature": "HtmlSanitizerServiceImpl.sanitizeString(String string, String info)", "testcase": false, "constructor": false, "invocations": ["error", "sanitize"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}