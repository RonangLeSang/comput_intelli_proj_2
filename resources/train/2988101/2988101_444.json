{"test_class": {"identifier": "TestArrayProperty", "superclass": "extends AbstractTestProperty", "interfaces": "", "fields": [], "file": "modules/core/nuxeo-core-api/src/test/java/org/nuxeo/ecm/core/api/model/impl/TestArrayProperty.java"}, "test_case": {"identifier": "testCollectionOfIntOnLongProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectionOfIntOnLongProperty() {\n        ArrayProperty property = getArrayProperty(LongType.INSTANCE);\n        property.setValue(Arrays.asList(1, 2, 3));\n        assertArrayEquals(new Long[] { 1L, 2L, 3L }, (Long[]) property.getValue());\n    }", "signature": "void testCollectionOfIntOnLongProperty()", "full_signature": "@Test public void testCollectionOfIntOnLongProperty()", "class_method_signature": "TestArrayProperty.testCollectionOfIntOnLongProperty()", "testcase": true, "constructor": false, "invocations": ["getArrayProperty", "setValue", "asList", "assertArrayEquals", "getValue"]}, "focal_class": {"identifier": "ArrayProperty", "superclass": "extends ScalarProperty", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 0L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 0L", "var_name": "serialVersionUID"}, {"original_string": "private boolean[] childDirty = null;", "modifier": "private", "type": "boolean[]", "declarator": "childDirty = null", "var_name": "childDirty"}], "methods": [{"identifier": "ArrayProperty", "parameters": "(Property parent, Field field, int flags)", "modifiers": "public", "return": "", "signature": " ArrayProperty(Property parent, Field field, int flags)", "full_signature": "public  ArrayProperty(Property parent, Field field, int flags)", "class_method_signature": "ArrayProperty.ArrayProperty(Property parent, Field field, int flags)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "ListType", "signature": "ListType getType()", "full_signature": "@Override public ListType getType()", "class_method_signature": "ArrayProperty.getType()", "testcase": false, "constructor": false}, {"identifier": "isContainer", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isContainer()", "full_signature": "@Override public boolean isContainer()", "class_method_signature": "ArrayProperty.isContainer()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(Object value)", "full_signature": "@Override public void setValue(Object value)", "class_method_signature": "ArrayProperty.setValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "isSameValue", "parameters": "(Serializable value1, Serializable value2)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isSameValue(Serializable value1, Serializable value2)", "full_signature": "@Override protected boolean isSameValue(Serializable value1, Serializable value2)", "class_method_signature": "ArrayProperty.isSameValue(Serializable value1, Serializable value2)", "testcase": false, "constructor": false}, {"identifier": "isNormalized", "parameters": "(Object value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNormalized(Object value)", "full_signature": "@Override public boolean isNormalized(Object value)", "class_method_signature": "ArrayProperty.isNormalized(Object value)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(Object value)", "modifiers": "@Override public", "return": "Serializable", "signature": "Serializable normalize(Object value)", "full_signature": "@Override public Serializable normalize(Object value)", "class_method_signature": "ArrayProperty.normalize(Object value)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Collection<?> value)", "modifiers": "protected", "return": "Serializable", "signature": "Serializable convert(Collection<?> value)", "full_signature": "protected Serializable convert(Collection<?> value)", "class_method_signature": "ArrayProperty.convert(Collection<?> value)", "testcase": false, "constructor": false}, {"identifier": "convertTo", "parameters": "(Serializable value, Class<T> toType)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T convertTo(Serializable value, Class<T> toType)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T convertTo(Serializable value, Class<T> toType)", "class_method_signature": "ArrayProperty.convertTo(Serializable value, Class<T> toType)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object newInstance()", "full_signature": "@Override public Object newInstance()", "class_method_signature": "ArrayProperty.newInstance()", "testcase": false, "constructor": false}, {"identifier": "getChildDirty", "parameters": "()", "modifiers": "protected", "return": "boolean[]", "signature": "boolean[] getChildDirty()", "full_signature": "protected boolean[] getChildDirty()", "class_method_signature": "ArrayProperty.getChildDirty()", "testcase": false, "constructor": false}, {"identifier": "isDirty", "parameters": "(int index)", "modifiers": "public", "return": "boolean", "signature": "boolean isDirty(int index)", "full_signature": "public boolean isDirty(int index)", "class_method_signature": "ArrayProperty.isDirty(int index)", "testcase": false, "constructor": false}, {"identifier": "clearDirtyFlags", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearDirtyFlags()", "full_signature": "@Override public void clearDirtyFlags()", "class_method_signature": "ArrayProperty.clearDirtyFlags()", "testcase": false, "constructor": false}], "file": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/model/impl/ArrayProperty.java"}, "focal_method": {"identifier": "setValue", "parameters": "(Object value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setValue(Object value) throws PropertyException {\n        // this code manage dirty status for the arrayproperty and its childs values\n        // it checks whether the property changed, or their index changed\n        if (value == null) {\n            childDirty = new boolean[0];\n            super.setValue(null);\n        } else {\n            Object[] oldValues = (Object[]) internalGetValue();\n            boolean[] oldChildDirty = getChildDirty();\n            super.setValue(value);\n            Object[] newValues = (Object[]) internalGetValue();\n            boolean[] newChildDirty = new boolean[newValues != null ? newValues.length : 0];\n            for (int i = 0; i < newChildDirty.length; i++) {\n                Object newValue = newValues[i]; // NOSONAR\n                if (oldValues == null || i >= oldValues.length) {\n                    newChildDirty[i] = true;\n                } else {\n                    Object oldValue = oldValues[i];\n                    if (!((newValue == null && oldValue == null) || (newValue != null && newValue.equals(oldValue)))) {\n                        newChildDirty[i] = true;\n                    } else {\n                        newChildDirty[i] = false || oldChildDirty[i];\n                    }\n                }\n            }\n            childDirty = newChildDirty;\n        }\n    }", "signature": "void setValue(Object value)", "full_signature": "@Override public void setValue(Object value)", "class_method_signature": "ArrayProperty.setValue(Object value)", "testcase": false, "constructor": false, "invocations": ["setValue", "internalGetValue", "getChildDirty", "setValue", "internalGetValue", "equals"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}