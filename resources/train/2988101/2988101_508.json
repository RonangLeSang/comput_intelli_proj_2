{"test_class": {"identifier": "DateParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/core/nuxeo-core-schema/src/test/java/org/nuxeo/ecm/core/schema/utils/DateParserTest.java"}, "test_case": {"identifier": "parseTimeZone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseTimeZone() throws Exception {\n        Calendar cal = DateParser.parse(\"2012-11-29T13:15:18.176Z\");\n        assertEquals(13, cal.get(Calendar.HOUR_OF_DAY));\n\n        cal = DateParser.parse(\"2012-11-29T13:15:18.176+0100\");\n        assertEquals(12, cal.get(Calendar.HOUR_OF_DAY));\n\n        cal = DateParser.parse(\"2012-11-29T13:15:18.176+01:00\");\n        assertEquals(12, cal.get(Calendar.HOUR_OF_DAY));\n\n        cal = DateParser.parse(\"2012-11-29T13:15:18.176+01\");\n        assertEquals(12, cal.get(Calendar.HOUR_OF_DAY));\n\n        cal = DateParser.parse(\"2012-11-29T13:15:18.176-0100\");\n        assertEquals(14, cal.get(Calendar.HOUR_OF_DAY));\n    }", "signature": "void parseTimeZone()", "full_signature": "@Test public void parseTimeZone()", "class_method_signature": "DateParserTest.parseTimeZone()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "get", "parse", "assertEquals", "get", "parse", "assertEquals", "get", "parse", "assertEquals", "get", "parse", "assertEquals", "get"]}, "focal_class": {"identifier": "DateParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String W3C_DATE_FORMAT = \"%04d-%02d-%02dT%02d:%02d:%02d.%03dZ\";", "modifier": "public static final", "type": "String", "declarator": "W3C_DATE_FORMAT = \"%04d-%02d-%02dT%02d:%02d:%02d.%03dZ\"", "var_name": "W3C_DATE_FORMAT"}], "methods": [{"identifier": "parse", "parameters": "(String str)", "modifiers": "public static", "return": "Calendar", "signature": "Calendar parse(String str)", "full_signature": "public static Calendar parse(String str)", "class_method_signature": "DateParser.parse(String str)", "testcase": false, "constructor": false}, {"identifier": "parseW3CDateTime", "parameters": "(String str)", "modifiers": "public static", "return": "Date", "signature": "Date parseW3CDateTime(String str)", "full_signature": "public static Date parseW3CDateTime(String str)", "class_method_signature": "DateParser.parseW3CDateTime(String str)", "testcase": false, "constructor": false}, {"identifier": "formatW3CDateTime", "parameters": "(Date date)", "modifiers": "public static", "return": "String", "signature": "String formatW3CDateTime(Date date)", "full_signature": "public static String formatW3CDateTime(Date date)", "class_method_signature": "DateParser.formatW3CDateTime(Date date)", "testcase": false, "constructor": false}, {"identifier": "formatW3CDateTime", "parameters": "(Calendar calendar)", "modifiers": "public static", "return": "String", "signature": "String formatW3CDateTime(Calendar calendar)", "full_signature": "public static String formatW3CDateTime(Calendar calendar)", "class_method_signature": "DateParser.formatW3CDateTime(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "readYear", "parameters": "(Calendar cal, String str, int off)", "modifiers": "private final static", "return": "int", "signature": "int readYear(Calendar cal, String str, int off)", "full_signature": "private final static int readYear(Calendar cal, String str, int off)", "class_method_signature": "DateParser.readYear(Calendar cal, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "readMonth", "parameters": "(Calendar cal, String str, int off)", "modifiers": "private final static", "return": "int", "signature": "int readMonth(Calendar cal, String str, int off)", "full_signature": "private final static int readMonth(Calendar cal, String str, int off)", "class_method_signature": "DateParser.readMonth(Calendar cal, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "readDay", "parameters": "(Calendar cal, String str, int off)", "modifiers": "private final static", "return": "int", "signature": "int readDay(Calendar cal, String str, int off)", "full_signature": "private final static int readDay(Calendar cal, String str, int off)", "class_method_signature": "DateParser.readDay(Calendar cal, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "readHours", "parameters": "(Calendar cal, String str, int off)", "modifiers": "private final static", "return": "int", "signature": "int readHours(Calendar cal, String str, int off)", "full_signature": "private final static int readHours(Calendar cal, String str, int off)", "class_method_signature": "DateParser.readHours(Calendar cal, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "readMinutes", "parameters": "(Calendar cal, String str, int off)", "modifiers": "private final static", "return": "int", "signature": "int readMinutes(Calendar cal, String str, int off)", "full_signature": "private final static int readMinutes(Calendar cal, String str, int off)", "class_method_signature": "DateParser.readMinutes(Calendar cal, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "readSeconds", "parameters": "(Calendar cal, String str, int off)", "modifiers": "private final static", "return": "int", "signature": "int readSeconds(Calendar cal, String str, int off)", "full_signature": "private final static int readSeconds(Calendar cal, String str, int off)", "class_method_signature": "DateParser.readSeconds(Calendar cal, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "readMilliseconds", "parameters": "(Calendar cal, String str, int off)", "modifiers": "private final static", "return": "int", "signature": "int readMilliseconds(Calendar cal, String str, int off)", "full_signature": "private final static int readMilliseconds(Calendar cal, String str, int off)", "class_method_signature": "DateParser.readMilliseconds(Calendar cal, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "isChar", "parameters": "(char c, String str, int off)", "modifiers": "private static final", "return": "boolean", "signature": "boolean isChar(char c, String str, int off)", "full_signature": "private static final boolean isChar(char c, String str, int off)", "class_method_signature": "DateParser.isChar(char c, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "readCharOpt", "parameters": "(char c, Calendar cal, String str, int off)", "modifiers": "private static final", "return": "int", "signature": "int readCharOpt(char c, Calendar cal, String str, int off)", "full_signature": "private static final int readCharOpt(char c, Calendar cal, String str, int off)", "class_method_signature": "DateParser.readCharOpt(char c, Calendar cal, String str, int off)", "testcase": false, "constructor": false}, {"identifier": "readTimeZone", "parameters": "(Calendar cal, String str, int off)", "modifiers": "private final static", "return": "boolean", "signature": "boolean readTimeZone(Calendar cal, String str, int off)", "full_signature": "private final static boolean readTimeZone(Calendar cal, String str, int off)", "class_method_signature": "DateParser.readTimeZone(Calendar cal, String str, int off)", "testcase": false, "constructor": false}], "file": "modules/core/nuxeo-core-schema/src/main/java/org/nuxeo/ecm/core/schema/utils/DateParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String str)", "modifiers": "public static", "return": "Calendar", "body": "public static Calendar parse(String str) throws ParseException {\n        if (str == null) {\n            return null;\n        }\n        Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"UTC\"));\n        cal.clear();\n        int len = str.length();\n        if (len == 0) { // empty string\n            // TODO throw error?\n            return cal;\n        }\n        int i = 0;\n        i = readYear(cal, str, i);\n        i = readCharOpt('-', cal, str, i);\n        if (i == -1) {\n            return cal;\n        }\n        i = readMonth(cal, str, i);\n        i = readCharOpt('-', cal, str, i);\n        if (i == -1) {\n            return cal;\n        }\n        i = readDay(cal, str, i);\n        i = readCharOpt('T', cal, str, i);\n        if (i == -1) {\n            return cal;\n        }\n        i = readHours(cal, str, i);\n        i = readCharOpt(':', cal, str, i);\n        if (i == -1) {\n            return cal;\n        }\n        i = readMinutes(cal, str, i);\n        if (isChar(':', str, i)) {\n            i = readSeconds(cal, str, i + 1);\n            if (isChar('.', str, i)) {\n                i = readMilliseconds(cal, str, i + 1);\n            }\n        }\n        if (i > -1) {\n            readTimeZone(cal, str, i);\n        }\n        return cal;\n    }", "signature": "Calendar parse(String str)", "full_signature": "public static Calendar parse(String str)", "class_method_signature": "DateParser.parse(String str)", "testcase": false, "constructor": false, "invocations": ["getTimeZone", "clear", "length", "readYear", "readCharOpt", "readMonth", "readCharOpt", "readDay", "readCharOpt", "readHours", "readCharOpt", "readMinutes", "isChar", "readSeconds", "isChar", "readMilliseconds", "readTimeZone"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}