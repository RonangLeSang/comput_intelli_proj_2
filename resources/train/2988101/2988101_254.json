{"test_class": {"identifier": "TestLDAPFilterBuilder", "superclass": "extends LDAPDirectoryTestCase", "interfaces": "", "fields": [{"original_string": "protected static final String USER_DIR = \"userDirectory\";", "modifier": "protected static final", "type": "String", "declarator": "USER_DIR = \"userDirectory\"", "var_name": "USER_DIR"}, {"original_string": "@Inject\n    protected DirectoryService directoryService;", "modifier": "@Inject\n    protected", "type": "DirectoryService", "declarator": "directoryService", "var_name": "directoryService"}], "file": "modules/platform/nuxeo-platform-directory/nuxeo-platform-directory-ldap/src/test/java/org/nuxeo/ecm/directory/ldap/TestLDAPFilterBuilder.java"}, "test_case": {"identifier": "testQueryBuilderLike", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueryBuilderLike() throws Exception {\n        try (Session session = getSession()) {\n            QueryBuilder queryBuilder = //\n                    new QueryBuilder().predicate(Predicates.like(\"firstName\", \"foobar\"))\n                                      .and(Predicates.like(\"firstName\", \"foo%bar\"))\n                                      .and(Predicates.like(\"firstName\", \"foo_bar\"))\n                                      .and(Predicates.like(\"firstName\", \"foo\\\\%bar\"))\n                                      .and(Predicates.like(\"firstName\", \"foo\\\\_bar\"))\n                                      .and(Predicates.like(\"firstName\", \"foo\\\\\\\\bar\"));\n            LDAPFilterBuilder builder = new LDAPFilterBuilder(getDirectory());\n            builder.walk(queryBuilder.predicate());\n            assertEquals(\"(&\" //\n                    + \"(givenName={0})\" //\n                    + \"(givenName={1}*{2})\" //\n                    + \"(givenName={3})\" //\n                    + \"(givenName={4})\" //\n                    + \"(givenName={5})\" //\n                    + \"(givenName={6})\" //\n                    + \")\", //\n                    builder.filter.toString());\n            assertEqualsNormalized(Arrays.asList( //\n                    \"foobar\", //\n                    \"foo\", \"bar\", //\n                    \"foo_bar\", // bare underscore is not interpreted as a wildcard\n                    \"foo%bar\",\n                    \"foo_bar\",\n                    \"foo\\\\bar\"\n            ), builder.params.stream().collect(toList()));\n        }\n    }", "signature": "void testQueryBuilderLike()", "full_signature": "@Test public void testQueryBuilderLike()", "class_method_signature": "TestLDAPFilterBuilder.testQueryBuilderLike()", "testcase": true, "constructor": false, "invocations": ["getSession", "and", "and", "and", "and", "and", "predicate", "like", "like", "like", "like", "like", "like", "getDirectory", "walk", "predicate", "assertEquals", "toString", "assertEqualsNormalized", "asList", "collect", "stream", "toList"]}, "focal_class": {"identifier": "LDAPFilterBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String DATE_CAST = \"DATE\";", "modifier": "protected static final", "type": "String", "declarator": "DATE_CAST = \"DATE\"", "var_name": "DATE_CAST"}, {"original_string": "protected final LDAPDirectory directory;", "modifier": "protected final", "type": "LDAPDirectory", "declarator": "directory", "var_name": "directory"}, {"original_string": "public StringBuilder filter = new StringBuilder();", "modifier": "public", "type": "StringBuilder", "declarator": "filter = new StringBuilder()", "var_name": "filter"}, {"original_string": "public int paramIndex = 0;", "modifier": "public", "type": "int", "declarator": "paramIndex = 0", "var_name": "paramIndex"}, {"original_string": "public final List<Serializable> params = new ArrayList<>();", "modifier": "public final", "type": "List<Serializable>", "declarator": "params = new ArrayList<>()", "var_name": "params"}], "methods": [{"identifier": "LDAPFilterBuilder", "parameters": "(LDAPDirectory directory)", "modifiers": "public", "return": "", "signature": " LDAPFilterBuilder(LDAPDirectory directory)", "full_signature": "public  LDAPFilterBuilder(LDAPDirectory directory)", "class_method_signature": "LDAPFilterBuilder.LDAPFilterBuilder(LDAPDirectory directory)", "testcase": false, "constructor": true}, {"identifier": "walk", "parameters": "(Expression expression)", "modifiers": "public", "return": "void", "signature": "void walk(Expression expression)", "full_signature": "public void walk(Expression expression)", "class_method_signature": "LDAPFilterBuilder.walk(Expression expression)", "testcase": false, "constructor": false}, {"identifier": "walkExpression", "parameters": "(Expression expr)", "modifiers": "public", "return": "void", "signature": "void walkExpression(Expression expr)", "full_signature": "public void walkExpression(Expression expr)", "class_method_signature": "LDAPFilterBuilder.walkExpression(Expression expr)", "testcase": false, "constructor": false}, {"identifier": "checkDateLiteralForCast", "parameters": "(Operator op, Operand value, String name)", "modifiers": "protected", "return": "void", "signature": "void checkDateLiteralForCast(Operator op, Operand value, String name)", "full_signature": "protected void checkDateLiteralForCast(Operator op, Operand value, String name)", "class_method_signature": "LDAPFilterBuilder.checkDateLiteralForCast(Operator op, Operand value, String name)", "testcase": false, "constructor": false}, {"identifier": "checkDateLiteralForCast", "parameters": "(Operand value, String name)", "modifiers": "protected", "return": "void", "signature": "void checkDateLiteralForCast(Operand value, String name)", "full_signature": "protected void checkDateLiteralForCast(Operand value, String name)", "class_method_signature": "LDAPFilterBuilder.checkDateLiteralForCast(Operand value, String name)", "testcase": false, "constructor": false}, {"identifier": "walkNot", "parameters": "(Operand value)", "modifiers": "public", "return": "void", "signature": "void walkNot(Operand value)", "full_signature": "public void walkNot(Operand value)", "class_method_signature": "LDAPFilterBuilder.walkNot(Operand value)", "testcase": false, "constructor": false}, {"identifier": "walkIsNull", "parameters": "(Operand value)", "modifiers": "public", "return": "void", "signature": "void walkIsNull(Operand value)", "full_signature": "public void walkIsNull(Operand value)", "class_method_signature": "LDAPFilterBuilder.walkIsNull(Operand value)", "testcase": false, "constructor": false}, {"identifier": "walkIsNotNull", "parameters": "(Operand value)", "modifiers": "public", "return": "void", "signature": "void walkIsNotNull(Operand value)", "full_signature": "public void walkIsNotNull(Operand value)", "class_method_signature": "LDAPFilterBuilder.walkIsNotNull(Operand value)", "testcase": false, "constructor": false}, {"identifier": "walkAndMultiExpression", "parameters": "(MultiExpression expr)", "modifiers": "public", "return": "void", "signature": "void walkAndMultiExpression(MultiExpression expr)", "full_signature": "public void walkAndMultiExpression(MultiExpression expr)", "class_method_signature": "LDAPFilterBuilder.walkAndMultiExpression(MultiExpression expr)", "testcase": false, "constructor": false}, {"identifier": "walkAnd", "parameters": "(Expression expr)", "modifiers": "public", "return": "void", "signature": "void walkAnd(Expression expr)", "full_signature": "public void walkAnd(Expression expr)", "class_method_signature": "LDAPFilterBuilder.walkAnd(Expression expr)", "testcase": false, "constructor": false}, {"identifier": "walkOrMultiExpression", "parameters": "(MultiExpression expr)", "modifiers": "public", "return": "void", "signature": "void walkOrMultiExpression(MultiExpression expr)", "full_signature": "public void walkOrMultiExpression(MultiExpression expr)", "class_method_signature": "LDAPFilterBuilder.walkOrMultiExpression(MultiExpression expr)", "testcase": false, "constructor": false}, {"identifier": "walkOr", "parameters": "(Expression expr)", "modifiers": "public", "return": "void", "signature": "void walkOr(Expression expr)", "full_signature": "public void walkOr(Expression expr)", "class_method_signature": "LDAPFilterBuilder.walkOr(Expression expr)", "testcase": false, "constructor": false}, {"identifier": "walkMulti", "parameters": "(String op, List<? extends Operand> values)", "modifiers": "protected", "return": "void", "signature": "void walkMulti(String op, List<? extends Operand> values)", "full_signature": "protected void walkMulti(String op, List<? extends Operand> values)", "class_method_signature": "LDAPFilterBuilder.walkMulti(String op, List<? extends Operand> values)", "testcase": false, "constructor": false}, {"identifier": "walkEq", "parameters": "(Operand lvalue, Operand rvalue)", "modifiers": "public", "return": "void", "signature": "void walkEq(Operand lvalue, Operand rvalue)", "full_signature": "public void walkEq(Operand lvalue, Operand rvalue)", "class_method_signature": "LDAPFilterBuilder.walkEq(Operand lvalue, Operand rvalue)", "testcase": false, "constructor": false}, {"identifier": "walkNotEq", "parameters": "(Operand lvalue, Operand rvalue)", "modifiers": "public", "return": "void", "signature": "void walkNotEq(Operand lvalue, Operand rvalue)", "full_signature": "public void walkNotEq(Operand lvalue, Operand rvalue)", "class_method_signature": "LDAPFilterBuilder.walkNotEq(Operand lvalue, Operand rvalue)", "testcase": false, "constructor": false}, {"identifier": "walkLt", "parameters": "(Operand lvalue, Operand rvalue)", "modifiers": "public", "return": "void", "signature": "void walkLt(Operand lvalue, Operand rvalue)", "full_signature": "public void walkLt(Operand lvalue, Operand rvalue)", "class_method_signature": "LDAPFilterBuilder.walkLt(Operand lvalue, Operand rvalue)", "testcase": false, "constructor": false}, {"identifier": "walkGt", "parameters": "(Operand lvalue, Operand rvalue)", "modifiers": "public", "return": "void", "signature": "void walkGt(Operand lvalue, Operand rvalue)", "full_signature": "public void walkGt(Operand lvalue, Operand rvalue)", "class_method_signature": "LDAPFilterBuilder.walkGt(Operand lvalue, Operand rvalue)", "testcase": false, "constructor": false}, {"identifier": "walkLtEq", "parameters": "(Operand lvalue, Operand rvalue)", "modifiers": "public", "return": "void", "signature": "void walkLtEq(Operand lvalue, Operand rvalue)", "full_signature": "public void walkLtEq(Operand lvalue, Operand rvalue)", "class_method_signature": "LDAPFilterBuilder.walkLtEq(Operand lvalue, Operand rvalue)", "testcase": false, "constructor": false}, {"identifier": "walkGtEq", "parameters": "(Operand lvalue, Operand rvalue)", "modifiers": "public", "return": "void", "signature": "void walkGtEq(Operand lvalue, Operand rvalue)", "full_signature": "public void walkGtEq(Operand lvalue, Operand rvalue)", "class_method_signature": "LDAPFilterBuilder.walkGtEq(Operand lvalue, Operand rvalue)", "testcase": false, "constructor": false}, {"identifier": "walkBinOp", "parameters": "(String op, Operand lvalue, Operand rvalue)", "modifiers": "protected", "return": "void", "signature": "void walkBinOp(String op, Operand lvalue, Operand rvalue)", "full_signature": "protected void walkBinOp(String op, Operand lvalue, Operand rvalue)", "class_method_signature": "LDAPFilterBuilder.walkBinOp(String op, Operand lvalue, Operand rvalue)", "testcase": false, "constructor": false}, {"identifier": "makeBoolean", "parameters": "(Operand rvalue)", "modifiers": "protected", "return": "Operand", "signature": "Operand makeBoolean(Operand rvalue)", "full_signature": "protected Operand makeBoolean(Operand rvalue)", "class_method_signature": "LDAPFilterBuilder.makeBoolean(Operand rvalue)", "testcase": false, "constructor": false}, {"identifier": "walkBetween", "parameters": "(Operand lvalue, Operand rvalue, boolean positive)", "modifiers": "public", "return": "void", "signature": "void walkBetween(Operand lvalue, Operand rvalue, boolean positive)", "full_signature": "public void walkBetween(Operand lvalue, Operand rvalue, boolean positive)", "class_method_signature": "LDAPFilterBuilder.walkBetween(Operand lvalue, Operand rvalue, boolean positive)", "testcase": false, "constructor": false}, {"identifier": "walkIn", "parameters": "(Operand lvalue, Operand rvalue, boolean positive)", "modifiers": "public", "return": "void", "signature": "void walkIn(Operand lvalue, Operand rvalue, boolean positive)", "full_signature": "public void walkIn(Operand lvalue, Operand rvalue, boolean positive)", "class_method_signature": "LDAPFilterBuilder.walkIn(Operand lvalue, Operand rvalue, boolean positive)", "testcase": false, "constructor": false}, {"identifier": "walkLike", "parameters": "(Operand lvalue, Operand rvalue, boolean positive, boolean caseInsensitive)", "modifiers": "public", "return": "void", "signature": "void walkLike(Operand lvalue, Operand rvalue, boolean positive, boolean caseInsensitive)", "full_signature": "public void walkLike(Operand lvalue, Operand rvalue, boolean positive, boolean caseInsensitive)", "class_method_signature": "LDAPFilterBuilder.walkLike(Operand lvalue, Operand rvalue, boolean positive, boolean caseInsensitive)", "testcase": false, "constructor": false}, {"identifier": "walkLikeWildcard", "parameters": "(String like)", "modifiers": "public", "return": "void", "signature": "void walkLikeWildcard(String like)", "full_signature": "public void walkLikeWildcard(String like)", "class_method_signature": "LDAPFilterBuilder.walkLikeWildcard(String like)", "testcase": false, "constructor": false}, {"identifier": "walkOperand", "parameters": "(Operand operand)", "modifiers": "public", "return": "void", "signature": "void walkOperand(Operand operand)", "full_signature": "public void walkOperand(Operand operand)", "class_method_signature": "LDAPFilterBuilder.walkOperand(Operand operand)", "testcase": false, "constructor": false}, {"identifier": "walkLiteral", "parameters": "(Operand operand)", "modifiers": "public", "return": "void", "signature": "void walkLiteral(Operand operand)", "full_signature": "public void walkLiteral(Operand operand)", "class_method_signature": "LDAPFilterBuilder.walkLiteral(Operand operand)", "testcase": false, "constructor": false}, {"identifier": "walkBooleanLiteral", "parameters": "(BooleanLiteral lit)", "modifiers": "public", "return": "void", "signature": "void walkBooleanLiteral(BooleanLiteral lit)", "full_signature": "public void walkBooleanLiteral(BooleanLiteral lit)", "class_method_signature": "LDAPFilterBuilder.walkBooleanLiteral(BooleanLiteral lit)", "testcase": false, "constructor": false}, {"identifier": "walkDateLiteral", "parameters": "(DateLiteral lit)", "modifiers": "public", "return": "void", "signature": "void walkDateLiteral(DateLiteral lit)", "full_signature": "public void walkDateLiteral(DateLiteral lit)", "class_method_signature": "LDAPFilterBuilder.walkDateLiteral(DateLiteral lit)", "testcase": false, "constructor": false}, {"identifier": "walkDoubleLiteral", "parameters": "(DoubleLiteral lit)", "modifiers": "public", "return": "void", "signature": "void walkDoubleLiteral(DoubleLiteral lit)", "full_signature": "public void walkDoubleLiteral(DoubleLiteral lit)", "class_method_signature": "LDAPFilterBuilder.walkDoubleLiteral(DoubleLiteral lit)", "testcase": false, "constructor": false}, {"identifier": "walkIntegerLiteral", "parameters": "(IntegerLiteral lit)", "modifiers": "public", "return": "void", "signature": "void walkIntegerLiteral(IntegerLiteral lit)", "full_signature": "public void walkIntegerLiteral(IntegerLiteral lit)", "class_method_signature": "LDAPFilterBuilder.walkIntegerLiteral(IntegerLiteral lit)", "testcase": false, "constructor": false}, {"identifier": "walkStringLiteral", "parameters": "(StringLiteral lit)", "modifiers": "public", "return": "void", "signature": "void walkStringLiteral(StringLiteral lit)", "full_signature": "public void walkStringLiteral(StringLiteral lit)", "class_method_signature": "LDAPFilterBuilder.walkStringLiteral(StringLiteral lit)", "testcase": false, "constructor": false}, {"identifier": "addFilterParam", "parameters": "(Serializable value)", "modifiers": "protected", "return": "void", "signature": "void addFilterParam(Serializable value)", "full_signature": "protected void addFilterParam(Serializable value)", "class_method_signature": "LDAPFilterBuilder.addFilterParam(Serializable value)", "testcase": false, "constructor": false}, {"identifier": "walkFunction", "parameters": "(Function func)", "modifiers": "public", "return": "Object", "signature": "Object walkFunction(Function func)", "full_signature": "public Object walkFunction(Function func)", "class_method_signature": "LDAPFilterBuilder.walkFunction(Function func)", "testcase": false, "constructor": false}, {"identifier": "walkReference", "parameters": "(Operand value)", "modifiers": "public", "return": "Field", "signature": "Field walkReference(Operand value)", "full_signature": "public Field walkReference(Operand value)", "class_method_signature": "LDAPFilterBuilder.walkReference(Operand value)", "testcase": false, "constructor": false}], "file": "modules/platform/nuxeo-platform-directory/nuxeo-platform-directory-ldap/src/main/java/org/nuxeo/ecm/directory/ldap/LDAPFilterBuilder.java"}, "focal_method": {"identifier": "walk", "parameters": "(Expression expression)", "modifiers": "public", "return": "void", "body": "public void walk(Expression expression) {\n        if (expression instanceof MultiExpression && ((MultiExpression) expression).predicates.isEmpty()) {\n            // special-case empty query\n            return;\n        } else {\n            walkExpression(expression);\n        }\n    }", "signature": "void walk(Expression expression)", "full_signature": "public void walk(Expression expression)", "class_method_signature": "LDAPFilterBuilder.walk(Expression expression)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "walkExpression"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}