{"test_class": {"identifier": "TestBlobsExtractor", "superclass": "", "interfaces": "", "fields": [], "file": "modules/core/nuxeo-core-api/src/test/java/org/nuxeo/ecm/core/utils/TestBlobsExtractor.java"}, "test_case": {"identifier": "testGetBlobsPropertiesSimpleBlob", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBlobsPropertiesSimpleBlob() throws Exception {\n        DocumentModel doc = new DocumentModelImpl(\"/\", \"doc\", \"SimpleBlobDocument\");\n        Blob blob = createBlob(\"test.pdf\");\n        doc.setPropertyValue(\"simpleblob:blob\", (Serializable) blob);\n\n        List<Property> blobs = new BlobsExtractor().getBlobsProperties(doc);\n        assertEquals(1, blobs.size());\n        assertEquals(\"test.pdf\", ((Blob) blobs.get(0).getValue()).getFilename());\n    }", "signature": "void testGetBlobsPropertiesSimpleBlob()", "full_signature": "@Test public void testGetBlobsPropertiesSimpleBlob()", "class_method_signature": "TestBlobsExtractor.testGetBlobsPropertiesSimpleBlob()", "testcase": true, "constructor": false, "invocations": ["createBlob", "setPropertyValue", "getBlobsProperties", "assertEquals", "size", "assertEquals", "getFilename", "getValue", "get"]}, "focal_class": {"identifier": "BlobsExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final Map<String, List<String>> docBlobPaths = new ConcurrentHashMap<>();", "modifier": "protected final", "type": "Map<String, List<String>>", "declarator": "docBlobPaths = new ConcurrentHashMap<>()", "var_name": "docBlobPaths"}, {"original_string": "private Set<String> includedPaths;", "modifier": "private", "type": "Set<String>", "declarator": "includedPaths", "var_name": "includedPaths"}, {"original_string": "private Set<String> excludedPaths;", "modifier": "private", "type": "Set<String>", "declarator": "excludedPaths", "var_name": "excludedPaths"}, {"original_string": "private boolean allBlobs;", "modifier": "private", "type": "boolean", "declarator": "allBlobs", "var_name": "allBlobs"}, {"original_string": "private boolean isDefaultConfiguration = true;", "modifier": "private", "type": "boolean", "declarator": "isDefaultConfiguration = true", "var_name": "isDefaultConfiguration"}], "methods": [{"identifier": "setExtractorProperties", "parameters": "(Set<String> includedPaths, Set<String> excludedPaths, boolean allBlobs)", "modifiers": "public", "return": "void", "signature": "void setExtractorProperties(Set<String> includedPaths, Set<String> excludedPaths, boolean allBlobs)", "full_signature": "public void setExtractorProperties(Set<String> includedPaths, Set<String> excludedPaths, boolean allBlobs)", "class_method_signature": "BlobsExtractor.setExtractorProperties(Set<String> includedPaths, Set<String> excludedPaths, boolean allBlobs)", "testcase": false, "constructor": false}, {"identifier": "isInterestingPath", "parameters": "(String path)", "modifiers": "protected", "return": "boolean", "signature": "boolean isInterestingPath(String path)", "full_signature": "protected boolean isInterestingPath(String path)", "class_method_signature": "BlobsExtractor.isInterestingPath(String path)", "testcase": false, "constructor": false}, {"identifier": "normalizePaths", "parameters": "(Set<String> paths)", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> normalizePaths(Set<String> paths)", "full_signature": "protected Set<String> normalizePaths(Set<String> paths)", "class_method_signature": "BlobsExtractor.normalizePaths(Set<String> paths)", "testcase": false, "constructor": false}, {"identifier": "getBlobs", "parameters": "(DocumentModel doc)", "modifiers": "public", "return": "List<Blob>", "signature": "List<Blob> getBlobs(DocumentModel doc)", "full_signature": "public List<Blob> getBlobs(DocumentModel doc)", "class_method_signature": "BlobsExtractor.getBlobs(DocumentModel doc)", "testcase": false, "constructor": false}, {"identifier": "getBlobsProperties", "parameters": "(DocumentModel doc)", "modifiers": "public", "return": "List<Property>", "signature": "List<Property> getBlobsProperties(DocumentModel doc)", "full_signature": "public List<Property> getBlobsProperties(DocumentModel doc)", "class_method_signature": "BlobsExtractor.getBlobsProperties(DocumentModel doc)", "testcase": false, "constructor": false}, {"identifier": "getBlobPaths", "parameters": "(DocumentType documentType)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getBlobPaths(DocumentType documentType)", "full_signature": "public List<String> getBlobPaths(DocumentType documentType)", "class_method_signature": "BlobsExtractor.getBlobPaths(DocumentType documentType)", "testcase": false, "constructor": false}, {"identifier": "findBlobsProperties", "parameters": "(Property property, List<String> split, List<Property> properties)", "modifiers": "protected", "return": "void", "signature": "void findBlobsProperties(Property property, List<String> split, List<Property> properties)", "full_signature": "protected void findBlobsProperties(Property property, List<String> split, List<Property> properties)", "class_method_signature": "BlobsExtractor.findBlobsProperties(Property property, List<String> split, List<Property> properties)", "testcase": false, "constructor": false}, {"identifier": "findBlobPaths", "parameters": "(ComplexType complexType, String path, Schema schema, List<String> paths)", "modifiers": "protected", "return": "void", "signature": "void findBlobPaths(ComplexType complexType, String path, Schema schema, List<String> paths)", "full_signature": "protected void findBlobPaths(ComplexType complexType, String path, Schema schema, List<String> paths)", "class_method_signature": "BlobsExtractor.findBlobPaths(ComplexType complexType, String path, Schema schema, List<String> paths)", "testcase": false, "constructor": false}], "file": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/utils/BlobsExtractor.java"}, "focal_method": {"identifier": "getBlobsProperties", "parameters": "(DocumentModel doc)", "modifiers": "public", "return": "List<Property>", "body": "public List<Property> getBlobsProperties(DocumentModel doc) {\n        List<Property> properties = new ArrayList<>();\n        for (String path : getBlobPaths(doc.getDocumentType())) {\n            if (!isInterestingPath(path)) {\n                continue;\n            }\n            List<String> split = Arrays.asList(path.split(\"/[*]/\"));\n            if (split.isEmpty()) {\n                throw new IllegalStateException(\"Path detected not well-formed: \" + path);\n            }\n            Property property = doc.getProperty(split.get(0));\n            List<String> subPath = split.subList(1, split.size());\n            findBlobsProperties(property, subPath, properties);\n        }\n        return properties;\n    }", "signature": "List<Property> getBlobsProperties(DocumentModel doc)", "full_signature": "public List<Property> getBlobsProperties(DocumentModel doc)", "class_method_signature": "BlobsExtractor.getBlobsProperties(DocumentModel doc)", "testcase": false, "constructor": false, "invocations": ["getBlobPaths", "getDocumentType", "isInterestingPath", "asList", "split", "isEmpty", "getProperty", "get", "subList", "size", "findBlobsProperties"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}