{"test_class": {"identifier": "TestTagsMigrator", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final int NDOCS = 100;", "modifier": "protected static final", "type": "int", "declarator": "NDOCS = 100", "var_name": "NDOCS"}, {"original_string": "protected static final int TAGS_PER_DOC = 5;", "modifier": "protected static final", "type": "int", "declarator": "TAGS_PER_DOC = 5", "var_name": "TAGS_PER_DOC"}, {"original_string": "@Inject\n    protected CoreSession session;", "modifier": "@Inject\n    protected", "type": "CoreSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Inject\n    protected MigrationService migrationService;", "modifier": "@Inject\n    protected", "type": "MigrationService", "declarator": "migrationService", "var_name": "migrationService"}, {"original_string": "@Inject\n    protected NotificationManager notificationManager;", "modifier": "@Inject\n    protected", "type": "NotificationManager", "declarator": "notificationManager", "var_name": "notificationManager"}, {"original_string": "@Inject\n    protected CoreFeature coreFeature;", "modifier": "@Inject\n    protected", "type": "CoreFeature", "declarator": "coreFeature", "var_name": "coreFeature"}], "file": "modules/platform/nuxeo-platform-tag-service/nuxeo-platform-tag-core/src/test/java/org/nuxeo/ecm/platform/tag/TestTagsMigrator.java"}, "test_case": {"identifier": "testProbe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProbe() {\n        @SuppressWarnings(\"deprecation\")\n        TagService relationTagService = new RelationTagService();\n        TagService facetedTagService = new FacetedTagService();\n\n        DocumentModel doc1 = session.createDocumentModel(\"/\", \"doc1\", \"File\");\n        doc1 = session.createDocument(doc1);\n        DocumentModel doc2 = session.createDocumentModel(\"/\", \"doc2\", \"File\");\n        doc2 = session.createDocument(doc2);\n        session.save();\n\n        // no tags, detected as already migrated\n        Migrator migrator = new TagsMigrator();\n        assertEquals(MIGRATION_STATE_FACETS, migrator.probeState());\n\n        // just a relation-based tag, detected as not migrated\n        relationTagService.tag(session, doc1.getId(), \"foo\");\n        assertEquals(MIGRATION_STATE_RELATIONS, migrator.probeState());\n\n        // both a relation-based tag and a facet-based tag, detected as not migrated\n        facetedTagService.tag(session, doc2.getId(), \"bar\");\n        assertEquals(MIGRATION_STATE_RELATIONS, migrator.probeState());\n\n        // just a faceted-based tag, detected as migrated\n        relationTagService.untag(session, doc1.getId(), \"foo\");\n        assertEquals(MIGRATION_STATE_FACETS, migrator.probeState());\n    }", "signature": "void testProbe()", "full_signature": "@Test public void testProbe()", "class_method_signature": "TestTagsMigrator.testProbe()", "testcase": true, "constructor": false, "invocations": ["createDocumentModel", "createDocument", "createDocumentModel", "createDocument", "save", "assertEquals", "probeState", "tag", "getId", "assertEquals", "probeState", "tag", "getId", "assertEquals", "probeState", "untag", "getId", "assertEquals", "probeState"]}, "focal_class": {"identifier": "TagsMigrator", "superclass": "extends AbstractRepositoryMigrator", "interfaces": "", "fields": [{"original_string": "private static final Log log = LogFactory.getLog(TagsMigrator.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(TagsMigrator.class)", "var_name": "log"}, {"original_string": "protected static final String QUERY_TAGGING = \"SELECT ecm:uuid, relation:source, ecm:name, dc:creator FROM Tagging WHERE ecm:isProxy = 0\";", "modifier": "protected static final", "type": "String", "declarator": "QUERY_TAGGING = \"SELECT ecm:uuid, relation:source, ecm:name, dc:creator FROM Tagging WHERE ecm:isProxy = 0\"", "var_name": "QUERY_TAGGING"}, {"original_string": "protected static final int BATCH_SIZE = 50;", "modifier": "protected static final", "type": "int", "declarator": "BATCH_SIZE = 50", "var_name": "BATCH_SIZE"}], "methods": [{"identifier": "notifyStatusChange", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void notifyStatusChange()", "full_signature": "@Override public void notifyStatusChange()", "class_method_signature": "TagsMigrator.notifyStatusChange()", "testcase": false, "constructor": false}, {"identifier": "probeState", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String probeState()", "full_signature": "@Override public String probeState()", "class_method_signature": "TagsMigrator.probeState()", "testcase": false, "constructor": false}, {"identifier": "probeSession", "parameters": "(CoreSession session)", "modifiers": "@Override protected", "return": "String", "signature": "String probeSession(CoreSession session)", "full_signature": "@Override protected String probeSession(CoreSession session)", "class_method_signature": "TagsMigrator.probeSession(CoreSession session)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(String step, MigrationContext migrationContext)", "modifiers": "@Override public", "return": "void", "signature": "void run(String step, MigrationContext migrationContext)", "full_signature": "@Override public void run(String step, MigrationContext migrationContext)", "class_method_signature": "TagsMigrator.run(String step, MigrationContext migrationContext)", "testcase": false, "constructor": false}, {"identifier": "migrateSession", "parameters": "(String step, MigrationContext migrationContext, CoreSession session)", "modifiers": "@Override protected", "return": "void", "signature": "void migrateSession(String step, MigrationContext migrationContext, CoreSession session)", "full_signature": "@Override protected void migrateSession(String step, MigrationContext migrationContext, CoreSession session)", "class_method_signature": "TagsMigrator.migrateSession(String step, MigrationContext migrationContext, CoreSession session)", "testcase": false, "constructor": false}, {"identifier": "removeDocument", "parameters": "(CoreSession session, String docId)", "modifiers": "protected", "return": "void", "signature": "void removeDocument(CoreSession session, String docId)", "full_signature": "protected void removeDocument(CoreSession session, String docId)", "class_method_signature": "TagsMigrator.removeDocument(CoreSession session, String docId)", "testcase": false, "constructor": false}, {"identifier": "addTags", "parameters": "(CoreSession session, String docId, Set<Tag> tags)", "modifiers": "protected", "return": "void", "signature": "void addTags(CoreSession session, String docId, Set<Tag> tags)", "full_signature": "protected void addTags(CoreSession session, String docId, Set<Tag> tags)", "class_method_signature": "TagsMigrator.addTags(CoreSession session, String docId, Set<Tag> tags)", "testcase": false, "constructor": false}, {"identifier": "addTags", "parameters": "(DocumentModel doc, Set<Tag> tags)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void addTags(DocumentModel doc, Set<Tag> tags)", "full_signature": "@SuppressWarnings(\"unchecked\") protected void addTags(DocumentModel doc, Set<Tag> tags)", "class_method_signature": "TagsMigrator.addTags(DocumentModel doc, Set<Tag> tags)", "testcase": false, "constructor": false}], "file": "modules/platform/nuxeo-platform-tag-service/nuxeo-platform-tag-core/src/main/java/org/nuxeo/ecm/platform/tag/TagsMigrator.java"}, "focal_method": {"identifier": "probeState", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String probeState() {\n        List<String> repositoryNames = Framework.getService(RepositoryService.class).getRepositoryNames();\n        if (repositoryNames.stream().map(this::probeRepository).anyMatch(isEqual(MIGRATION_STATE_RELATIONS))) {\n            return MIGRATION_STATE_RELATIONS;\n        }\n        return MIGRATION_STATE_FACETS;\n    }", "signature": "String probeState()", "full_signature": "@Override public String probeState()", "class_method_signature": "TagsMigrator.probeState()", "testcase": false, "constructor": false, "invocations": ["getRepositoryNames", "getService", "anyMatch", "map", "stream", "isEqual"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}