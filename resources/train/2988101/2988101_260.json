{"test_class": {"identifier": "TestJWTAuthenticator", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String USERNAME = \"bob\";", "modifier": "protected static final", "type": "String", "declarator": "USERNAME = \"bob\"", "var_name": "USERNAME"}, {"original_string": "protected static final String BEARER_SP = \"Bearer \";", "modifier": "protected static final", "type": "String", "declarator": "BEARER_SP = \"Bearer \"", "var_name": "BEARER_SP"}, {"original_string": "protected static final String ACCESS_TOKEN = \"access_token\";", "modifier": "protected static final", "type": "String", "declarator": "ACCESS_TOKEN = \"access_token\"", "var_name": "ACCESS_TOKEN"}, {"original_string": "@Inject\n    protected JWTService service;", "modifier": "@Inject\n    protected", "type": "JWTService", "declarator": "service", "var_name": "service"}], "file": "modules/platform/login/nuxeo-platform-login-jwt/src/test/java/org/nuxeo/ecm/jwt/TestJWTAuthenticator.java"}, "test_case": {"identifier": "testCorruptedTicket", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorruptedTicket() throws Exception {\n        JWTAuthenticator auth = new JWTAuthenticator();\n        HttpServletRequest request = mock(HttpServletRequest.class);\n        HttpServletResponse response = mock(HttpServletResponse.class);\n\n        // test with invalid Bearer token\n        when(request.getHeader(eq(AUTHORIZATION))).thenReturn(BEARER_SP + \"foobar\");\n\n        UserIdentificationInfo uii = auth.handleRetrieveIdentity(request, response);\n\n        // auth plugin fails\n        assertNull(uii);\n    }", "signature": "void testCorruptedTicket()", "full_signature": "@Test public void testCorruptedTicket()", "class_method_signature": "TestJWTAuthenticator.testCorruptedTicket()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getHeader", "eq", "handleRetrieveIdentity", "assertNull"]}, "focal_class": {"identifier": "JWTAuthenticator", "superclass": "", "interfaces": "implements NuxeoAuthenticationPlugin", "fields": [{"original_string": "private static final Log log = LogFactory.getLog(JWTAuthenticator.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(JWTAuthenticator.class)", "var_name": "log"}, {"original_string": "protected static final String BEARER_SP = \"Bearer \";", "modifier": "protected static final", "type": "String", "declarator": "BEARER_SP = \"Bearer \"", "var_name": "BEARER_SP"}, {"original_string": "protected static final String ACCESS_TOKEN = \"access_token\";", "modifier": "protected static final", "type": "String", "declarator": "ACCESS_TOKEN = \"access_token\"", "var_name": "ACCESS_TOKEN"}], "methods": [{"identifier": "initPlugin", "parameters": "(Map<String, String> parameters)", "modifiers": "@Override public", "return": "void", "signature": "void initPlugin(Map<String, String> parameters)", "full_signature": "@Override public void initPlugin(Map<String, String> parameters)", "class_method_signature": "JWTAuthenticator.initPlugin(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "getUnAuthenticatedURLPrefix", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getUnAuthenticatedURLPrefix()", "full_signature": "@Override public List<String> getUnAuthenticatedURLPrefix()", "class_method_signature": "JWTAuthenticator.getUnAuthenticatedURLPrefix()", "testcase": false, "constructor": false}, {"identifier": "needLoginPrompt", "parameters": "(HttpServletRequest httpRequest)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean needLoginPrompt(HttpServletRequest httpRequest)", "full_signature": "@Override public Boolean needLoginPrompt(HttpServletRequest httpRequest)", "class_method_signature": "JWTAuthenticator.needLoginPrompt(HttpServletRequest httpRequest)", "testcase": false, "constructor": false}, {"identifier": "handleLoginPrompt", "parameters": "(HttpServletRequest httpRequest, HttpServletResponse httpResponse, String baseURL)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean handleLoginPrompt(HttpServletRequest httpRequest, HttpServletResponse httpResponse, String baseURL)", "full_signature": "@Override public Boolean handleLoginPrompt(HttpServletRequest httpRequest, HttpServletResponse httpResponse, String baseURL)", "class_method_signature": "JWTAuthenticator.handleLoginPrompt(HttpServletRequest httpRequest, HttpServletResponse httpResponse, String baseURL)", "testcase": false, "constructor": false}, {"identifier": "handleRetrieveIdentity", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@Override public", "return": "UserIdentificationInfo", "signature": "UserIdentificationInfo handleRetrieveIdentity(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@Override public UserIdentificationInfo handleRetrieveIdentity(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "JWTAuthenticator.handleRetrieveIdentity(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "retrieveToken", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "String", "signature": "String retrieveToken(HttpServletRequest request)", "full_signature": "protected String retrieveToken(HttpServletRequest request)", "class_method_signature": "JWTAuthenticator.retrieveToken(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getRequestPath", "parameters": "(HttpServletRequest request)", "modifiers": "protected static", "return": "String", "signature": "String getRequestPath(HttpServletRequest request)", "full_signature": "protected static String getRequestPath(HttpServletRequest request)", "class_method_signature": "JWTAuthenticator.getRequestPath(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isEqualOrPathPrefix", "parameters": "(String path, String prefix)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isEqualOrPathPrefix(String path, String prefix)", "full_signature": "protected static boolean isEqualOrPathPrefix(String path, String prefix)", "class_method_signature": "JWTAuthenticator.isEqualOrPathPrefix(String path, String prefix)", "testcase": false, "constructor": false}], "file": "modules/platform/login/nuxeo-platform-login-jwt/src/main/java/org/nuxeo/ecm/jwt/JWTAuthenticator.java"}, "focal_method": {"identifier": "handleRetrieveIdentity", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@Override public", "return": "UserIdentificationInfo", "body": "@Override\n    public UserIdentificationInfo handleRetrieveIdentity(HttpServletRequest request, HttpServletResponse response) {\n        String token = retrieveToken(request);\n        if (token == null) {\n            log.trace(\"No JWT token\");\n            return null;\n        }\n        JWTService service = Framework.getService(JWTService.class);\n        Map<String, Object> claims = service.verifyToken(token);\n        if (claims == null) {\n            log.trace(\"JWT token invalid\");\n            return null;\n        }\n        Object sub = claims.get(CLAIM_SUBJECT);\n        if (!(sub instanceof String)) {\n            log.trace(\"JWT token contains non-String subject claim\");\n            return null;\n        }\n        String username = (String) sub;\n        if (log.isTraceEnabled()) {\n            log.trace(\"JWT token valid for username: \" + username);\n        }\n        // check Audience\n        Object aud = claims.get(CLAIM_AUDIENCE);\n        if (aud != null) {\n            if (!(aud instanceof String)) {\n                log.trace(\"JWT token contains non-String audience claim\");\n                return null;\n            }\n            String audience = StringUtils.strip((String) aud, \"/\");\n            String path = getRequestPath(request);\n            if (!isEqualOrPathPrefix(path, audience)) {\n                if (log.isTraceEnabled()) {\n                    log.trace(\"JWT token for audience: \" + audience + \" but used with path: \" + path);\n                }\n                return null;\n            }\n        }\n        return new UserIdentificationInfo(username);\n    }", "signature": "UserIdentificationInfo handleRetrieveIdentity(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@Override public UserIdentificationInfo handleRetrieveIdentity(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "JWTAuthenticator.handleRetrieveIdentity(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["retrieveToken", "trace", "getService", "verifyToken", "trace", "get", "trace", "isTraceEnabled", "trace", "get", "trace", "strip", "getRequestPath", "isEqualOrPathPrefix", "isTraceEnabled", "trace"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}