{"test_class": {"identifier": "AddPermissionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final String USER = \"user\";", "modifier": "protected final", "type": "String", "declarator": "USER = \"user\"", "var_name": "USER"}, {"original_string": "protected final String GROUP = \"group\";", "modifier": "protected final", "type": "String", "declarator": "GROUP = \"group\"", "var_name": "GROUP"}, {"original_string": "protected final String UNKNOWN = \"unknown\";", "modifier": "protected final", "type": "String", "declarator": "UNKNOWN = \"unknown\"", "var_name": "UNKNOWN"}, {"original_string": "@Inject\n    protected AutomationService automationService;", "modifier": "@Inject\n    protected", "type": "AutomationService", "declarator": "automationService", "var_name": "automationService"}, {"original_string": "@Inject\n    protected CoreSession session;", "modifier": "@Inject\n    protected", "type": "CoreSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n    @RuntimeService\n    protected AdministratorGroupsProvider administratorGroupsProvider;", "modifier": "@Mock\n    @RuntimeService\n    protected", "type": "AdministratorGroupsProvider", "declarator": "administratorGroupsProvider", "var_name": "administratorGroupsProvider"}, {"original_string": "@Mock\n    @RuntimeService\n    protected UserManager userManager;", "modifier": "@Mock\n    @RuntimeService\n    protected", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "protected OperationContext ctx;", "modifier": "protected", "type": "OperationContext", "declarator": "ctx", "var_name": "ctx"}], "file": "modules/platform/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/AddPermissionTest.java"}, "test_case": {"identifier": "shouldAddPermissionForUsersOnlyWhenUsingEmailAndUsersParametersCombined", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAddPermissionForUsersOnlyWhenUsingEmailAndUsersParametersCombined() throws OperationException {\n        DocumentModel doc = session.getDocument(new PathRef(\"/src\"));\n        assertNotNull(doc.getACP());\n        assertNull(doc.getACP().getACL(\"local\"));\n\n        List<String> users = Arrays.asList(\"existingUser1\", \"existingUser2\");\n        when(userManager.getUserModel(\"existingUser1\")).thenReturn(SimpleDocumentModel.ofSchemas(\"user\"));\n        when(userManager.getUserModel(\"existingUser2\")).thenReturn(SimpleDocumentModel.ofSchemas(\"user\"));\n\n        ctx.setInput(doc);\n        Map<String, Object> params = getParametersForAddOperation(null, users, \"user@nuxeo.com\", \"Write\", null, null,\n                new GregorianCalendar(2018, 8, 8), false, false, null);\n\n        automationService.run(ctx, AddPermission.ID, params);\n\n        verifyUserOrGroup(\"existingUser1\", USER);\n        verifyUserOrGroup(\"existingUser2\", USER);\n        verifyNoMoreInteractions(userManager);\n\n        ACL acl = doc.getACP().getACL(\"local\");\n        assertNotNull(acl);\n        assertEquals(2, acl.size());\n\n        assertExpectedPermissions(acl, params, \"existingUser1\");\n        assertExpectedPermissions(acl, params, \"existingUser2\");\n    }", "signature": "void shouldAddPermissionForUsersOnlyWhenUsingEmailAndUsersParametersCombined()", "full_signature": "@Test public void shouldAddPermissionForUsersOnlyWhenUsingEmailAndUsersParametersCombined()", "class_method_signature": "AddPermissionTest.shouldAddPermissionForUsersOnlyWhenUsingEmailAndUsersParametersCombined()", "testcase": true, "constructor": false, "invocations": ["getDocument", "assertNotNull", "getACP", "assertNull", "getACL", "getACP", "asList", "thenReturn", "when", "getUserModel", "ofSchemas", "thenReturn", "when", "getUserModel", "ofSchemas", "setInput", "getParametersForAddOperation", "run", "verifyUserOrGroup", "verifyUserOrGroup", "verifyNoMoreInteractions", "getACL", "getACP", "assertNotNull", "assertEquals", "size", "assertExpectedPermissions", "assertExpectedPermissions"]}, "focal_class": {"identifier": "AddPermission", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ID = \"Document.AddPermission\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"Document.AddPermission\"", "var_name": "ID"}, {"original_string": "public static final String NOTIFY_KEY = \"notify\";", "modifier": "public static final", "type": "String", "declarator": "NOTIFY_KEY = \"notify\"", "var_name": "NOTIFY_KEY"}, {"original_string": "public static final String COMMENT_KEY = \"comment\";", "modifier": "public static final", "type": "String", "declarator": "COMMENT_KEY = \"comment\"", "var_name": "COMMENT_KEY"}, {"original_string": "public static final String ALLOW_VIRTUAL_USER = \"nuxeo.automation.allowVirtualUser\";", "modifier": "public static final", "type": "String", "declarator": "ALLOW_VIRTUAL_USER = \"nuxeo.automation.allowVirtualUser\"", "var_name": "ALLOW_VIRTUAL_USER"}, {"original_string": "@Context\n    protected CoreSession session;", "modifier": "@Context\n    protected", "type": "CoreSession", "declarator": "session", "var_name": "session"}, {"original_string": "@Param(name = \"users\", required = false, alias = \"users\", description = \"ACE target set of users and/or groups.\")\n    protected StringList users;", "modifier": "@Param(name = \"users\", required = false, alias = \"users\", description = \"ACE target set of users and/or groups.\")\n    protected", "type": "StringList", "declarator": "users", "var_name": "users"}, {"original_string": "@Deprecated\n    @Param(name = \"username\", required = false, alias = \"user\", description = \"ACE target user/group.\")\n    protected String user;", "modifier": "@Deprecated\n    @Param(name = \"username\", required = false, alias = \"user\", description = \"ACE target user/group.\")\n    protected", "type": "String", "declarator": "user", "var_name": "user"}, {"original_string": "@Param(name = \"email\", required = false, description = \"ACE target user/group.\")\n    protected String email;", "modifier": "@Param(name = \"email\", required = false, description = \"ACE target user/group.\")\n    protected", "type": "String", "declarator": "email", "var_name": "email"}, {"original_string": "@Param(name = \"permission\", description = \"ACE permission.\")\n    protected String permission;", "modifier": "@Param(name = \"permission\", description = \"ACE permission.\")\n    protected", "type": "String", "declarator": "permission", "var_name": "permission"}, {"original_string": "@Param(name = \"acl\", required = false, values = { ACL.LOCAL_ACL }, description = \"ACL name.\")\n    protected String aclName = ACL.LOCAL_ACL;", "modifier": "@Param(name = \"acl\", required = false, values = { ACL.LOCAL_ACL }, description = \"ACL name.\")\n    protected", "type": "String", "declarator": "aclName = ACL.LOCAL_ACL", "var_name": "aclName"}, {"original_string": "@Param(name = \"begin\", required = false, description = \"ACE begin date.\")\n    protected Calendar begin;", "modifier": "@Param(name = \"begin\", required = false, description = \"ACE begin date.\")\n    protected", "type": "Calendar", "declarator": "begin", "var_name": "begin"}, {"original_string": "@Param(name = \"end\", required = false, description = \"ACE end date.\")\n    protected Calendar end;", "modifier": "@Param(name = \"end\", required = false, description = \"ACE end date.\")\n    protected", "type": "Calendar", "declarator": "end", "var_name": "end"}, {"original_string": "@Param(name = \"blockInheritance\", required = false, description = \"Block inheritance or not.\")\n    protected boolean blockInheritance = false;", "modifier": "@Param(name = \"blockInheritance\", required = false, description = \"Block inheritance or not.\")\n    protected", "type": "boolean", "declarator": "blockInheritance = false", "var_name": "blockInheritance"}, {"original_string": "@Param(name = \"notify\", required = false, description = \"Notify the user or not\")\n    protected boolean notify = false;", "modifier": "@Param(name = \"notify\", required = false, description = \"Notify the user or not\")\n    protected", "type": "boolean", "declarator": "notify = false", "var_name": "notify"}, {"original_string": "@Param(name = \"comment\", required = false, description = \"Comment\")\n    protected String comment;", "modifier": "@Param(name = \"comment\", required = false, description = \"Comment\")\n    protected", "type": "String", "declarator": "comment", "var_name": "comment"}], "methods": [{"identifier": "run", "parameters": "(DocumentModel doc)", "modifiers": "@OperationMethod(collector = DocumentModelCollector.class) public", "return": "DocumentModel", "signature": "DocumentModel run(DocumentModel doc)", "full_signature": "@OperationMethod(collector = DocumentModelCollector.class) public DocumentModel run(DocumentModel doc)", "class_method_signature": "AddPermission.run(DocumentModel doc)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(DocumentRef docRef)", "modifiers": "@OperationMethod(collector = DocumentModelCollector.class) public", "return": "DocumentModel", "signature": "DocumentModel run(DocumentRef docRef)", "full_signature": "@OperationMethod(collector = DocumentModelCollector.class) public DocumentModel run(DocumentRef docRef)", "class_method_signature": "AddPermission.run(DocumentRef docRef)", "testcase": false, "constructor": false}, {"identifier": "addPermission", "parameters": "(DocumentModel doc)", "modifiers": "protected", "return": "void", "signature": "void addPermission(DocumentModel doc)", "full_signature": "protected void addPermission(DocumentModel doc)", "class_method_signature": "AddPermission.addPermission(DocumentModel doc)", "testcase": false, "constructor": false}, {"identifier": "validateParameters", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void validateParameters()", "full_signature": "protected void validateParameters()", "class_method_signature": "AddPermission.validateParameters()", "testcase": false, "constructor": false}, {"identifier": "ensureUserListIsUsed", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void ensureUserListIsUsed()", "full_signature": "protected void ensureUserListIsUsed()", "class_method_signature": "AddPermission.ensureUserListIsUsed()", "testcase": false, "constructor": false}], "file": "modules/platform/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/AddPermission.java"}, "focal_method": {"identifier": "run", "parameters": "(DocumentModel doc)", "modifiers": "@OperationMethod(collector = DocumentModelCollector.class) public", "return": "DocumentModel", "body": "@OperationMethod(collector = DocumentModelCollector.class)\n    public DocumentModel run(DocumentModel doc) {\n        validateParameters();\n        addPermission(doc);\n        return doc;\n    }", "signature": "DocumentModel run(DocumentModel doc)", "full_signature": "@OperationMethod(collector = DocumentModelCollector.class) public DocumentModel run(DocumentModel doc)", "class_method_signature": "AddPermission.run(DocumentModel doc)", "testcase": false, "constructor": false, "invocations": ["validateParameters", "addPermission"]}, "repository": {"repo_id": 2988101, "url": "https://github.com/nuxeo/nuxeo", "stars": 339, "created": "12/15/2011 2:35:41 PM +00:00", "updates": "2020-01-27T16:52:27+00:00", "fork": "False", "license": "licensed"}}