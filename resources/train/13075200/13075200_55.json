{"test_class": {"identifier": "TestAbstractGroups", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProctorResult proctorResult;", "modifier": "private", "type": "ProctorResult", "declarator": "proctorResult", "var_name": "proctorResult"}, {"original_string": "private AbstractGroups emptyGroup;", "modifier": "private", "type": "AbstractGroups", "declarator": "emptyGroup", "var_name": "emptyGroup"}, {"original_string": "private AbstractGroups sampleGroups;", "modifier": "private", "type": "AbstractGroups", "declarator": "sampleGroups", "var_name": "sampleGroups"}], "file": "proctor-consumer/src/test/java/com/indeed/proctor/consumer/TestAbstractGroups.java"}, "test_case": {"identifier": "testGetLoggingTestNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLoggingTestNames() {\n        assertThat(Sets.newHashSet(sampleGroups.getLoggingTestNames()))\n                .containsExactlyInAnyOrder(CONTROL_SELECTED_TEST.getName(), GROUP1_SELECTED_TEST.getName(), GROUP_WITH_FALLBACK_TEST.getName(), MISSING_DEFINITION_TEST.getName());\n    }", "signature": "void testGetLoggingTestNames()", "full_signature": "@Test public void testGetLoggingTestNames()", "class_method_signature": "TestAbstractGroups.testGetLoggingTestNames()", "testcase": true, "constructor": false, "invocations": ["containsExactlyInAnyOrder", "assertThat", "newHashSet", "getLoggingTestNames", "getName", "getName", "getName", "getName"]}, "focal_class": {"identifier": "AbstractGroups", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(AbstractGroups.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(AbstractGroups.class)", "var_name": "LOGGER"}, {"original_string": "private final ProctorResult proctorResult;", "modifier": "private final", "type": "ProctorResult", "declarator": "proctorResult", "var_name": "proctorResult"}, {"original_string": "protected static final char GROUPS_SEPARATOR = ',';", "modifier": "protected static final", "type": "char", "declarator": "GROUPS_SEPARATOR = ','", "var_name": "GROUPS_SEPARATOR"}, {"original_string": "protected static final char ALLOCATION_GROUP_SEPARATOR = ':';", "modifier": "protected static final", "type": "char", "declarator": "ALLOCATION_GROUP_SEPARATOR = ':'", "var_name": "ALLOCATION_GROUP_SEPARATOR"}, {"original_string": "protected static final char TESTNAME_BUCKET_CONNECTOR = '-';", "modifier": "protected static final", "type": "char", "declarator": "TESTNAME_BUCKET_CONNECTOR = '-'", "var_name": "TESTNAME_BUCKET_CONNECTOR"}], "methods": [{"identifier": "AbstractGroups", "parameters": "(final ProctorResult proctorResult)", "modifiers": "protected", "return": "", "signature": " AbstractGroups(final ProctorResult proctorResult)", "full_signature": "protected  AbstractGroups(final ProctorResult proctorResult)", "class_method_signature": "AbstractGroups.AbstractGroups(final ProctorResult proctorResult)", "testcase": false, "constructor": true}, {"identifier": "overrideDeterminedBucketValue", "parameters": "(final String testName, @Nonnull final TestBucket determinedBucket)", "modifiers": "protected", "return": "int", "signature": "int overrideDeterminedBucketValue(final String testName, @Nonnull final TestBucket determinedBucket)", "full_signature": "protected int overrideDeterminedBucketValue(final String testName, @Nonnull final TestBucket determinedBucket)", "class_method_signature": "AbstractGroups.overrideDeterminedBucketValue(final String testName, @Nonnull final TestBucket determinedBucket)", "testcase": false, "constructor": false}, {"identifier": "isBucketActive", "parameters": "(final String testName, final int value)", "modifiers": "@Deprecated // used from generated code protected", "return": "boolean", "signature": "boolean isBucketActive(final String testName, final int value)", "full_signature": "@Deprecated // used from generated code protected boolean isBucketActive(final String testName, final int value)", "class_method_signature": "AbstractGroups.isBucketActive(final String testName, final int value)", "testcase": false, "constructor": false}, {"identifier": "isBucketActive", "parameters": "(final String testName, final int value, final int defaultValue)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBucketActive(final String testName, final int value, final int defaultValue)", "full_signature": "protected boolean isBucketActive(final String testName, final int value, final int defaultValue)", "class_method_signature": "AbstractGroups.isBucketActive(final String testName, final int value, final int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final String testName, final int defaultValue)", "modifiers": "protected", "return": "int", "signature": "int getValue(final String testName, final int defaultValue)", "full_signature": "protected int getValue(final String testName, final int defaultValue)", "class_method_signature": "AbstractGroups.getValue(final String testName, final int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getActiveBucket", "parameters": "(final String testName)", "modifiers": "protected final", "return": "Optional<TestBucket>", "signature": "Optional<TestBucket> getActiveBucket(final String testName)", "full_signature": "protected final Optional<TestBucket> getActiveBucket(final String testName)", "class_method_signature": "AbstractGroups.getActiveBucket(final String testName)", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "(final String testName)", "modifiers": "@Deprecated @Nonnull // used from generated code protected", "return": "Payload", "signature": "Payload getPayload(final String testName)", "full_signature": "@Deprecated @Nonnull // used from generated code protected Payload getPayload(final String testName)", "class_method_signature": "AbstractGroups.getPayload(final String testName)", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "(final String testName, @Nonnull final Bucket<?> fallbackBucket)", "modifiers": "@Nonnull // used from generated code protected", "return": "Payload", "signature": "Payload getPayload(final String testName, @Nonnull final Bucket<?> fallbackBucket)", "full_signature": "@Nonnull // used from generated code protected Payload getPayload(final String testName, @Nonnull final Bucket<?> fallbackBucket)", "class_method_signature": "AbstractGroups.getPayload(final String testName, @Nonnull final Bucket<?> fallbackBucket)", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "(final String testName, final int fallbackBucketValue)", "modifiers": "final", "return": "Payload", "signature": "Payload getPayload(final String testName, final int fallbackBucketValue)", "full_signature": "final Payload getPayload(final String testName, final int fallbackBucketValue)", "class_method_signature": "AbstractGroups.getPayload(final String testName, final int fallbackBucketValue)", "testcase": false, "constructor": false}, {"identifier": "getTestBucketForBucket", "parameters": "(final String testName, final Bucket<?> targetBucket)", "modifiers": "@CheckForNull // used in generated code protected final", "return": "TestBucket", "signature": "TestBucket getTestBucketForBucket(final String testName, final Bucket<?> targetBucket)", "full_signature": "@CheckForNull // used in generated code protected final TestBucket getTestBucketForBucket(final String testName, final Bucket<?> targetBucket)", "class_method_signature": "AbstractGroups.getTestBucketForBucket(final String testName, final Bucket<?> targetBucket)", "testcase": false, "constructor": false}, {"identifier": "getTestBucketWithValue", "parameters": "(final String testName, final int bucketValue)", "modifiers": "@CheckForNull final", "return": "TestBucket", "signature": "TestBucket getTestBucketWithValue(final String testName, final int bucketValue)", "full_signature": "@CheckForNull final TestBucket getTestBucketWithValue(final String testName, final int bucketValue)", "class_method_signature": "AbstractGroups.getTestBucketWithValue(final String testName, final int bucketValue)", "testcase": false, "constructor": false}, {"identifier": "toLongString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toLongString()", "full_signature": "public String toLongString()", "class_method_signature": "AbstractGroups.toLongString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override @Deprecated public", "return": "String", "signature": "String toString()", "full_signature": "@Override @Deprecated public String toString()", "class_method_signature": "AbstractGroups.toString()", "testcase": false, "constructor": false}, {"identifier": "toLoggingString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toLoggingString()", "full_signature": "public String toLoggingString()", "class_method_signature": "AbstractGroups.toLoggingString()", "testcase": false, "constructor": false}, {"identifier": "buildTestGroupString", "parameters": "()", "modifiers": "@Deprecated public final", "return": "StringBuilder", "signature": "StringBuilder buildTestGroupString()", "full_signature": "@Deprecated public final StringBuilder buildTestGroupString()", "class_method_signature": "AbstractGroups.buildTestGroupString()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "protected boolean isEmpty()", "class_method_signature": "AbstractGroups.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "appendTestGroups", "parameters": "(final StringBuilder sb)", "modifiers": "public final", "return": "void", "signature": "void appendTestGroups(final StringBuilder sb)", "full_signature": "public final void appendTestGroups(final StringBuilder sb)", "class_method_signature": "AbstractGroups.appendTestGroups(final StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendTestGroups", "parameters": "(final StringBuilder sb, final char separator)", "modifiers": "public", "return": "void", "signature": "void appendTestGroups(final StringBuilder sb, final char separator)", "full_signature": "public void appendTestGroups(final StringBuilder sb, final char separator)", "class_method_signature": "AbstractGroups.appendTestGroups(final StringBuilder sb, final char separator)", "testcase": false, "constructor": false}, {"identifier": "getLoggingTestNames", "parameters": "()", "modifiers": "protected final", "return": "List<String>", "signature": "List<String> getLoggingTestNames()", "full_signature": "protected final List<String> getLoggingTestNames()", "class_method_signature": "AbstractGroups.getLoggingTestNames()", "testcase": false, "constructor": false}, {"identifier": "appendTestGroupsWithoutAllocations", "parameters": "(final StringBuilder sb, final char separator, final List<String> testNames)", "modifiers": "protected final", "return": "void", "signature": "void appendTestGroupsWithoutAllocations(final StringBuilder sb, final char separator, final List<String> testNames)", "full_signature": "protected final void appendTestGroupsWithoutAllocations(final StringBuilder sb, final char separator, final List<String> testNames)", "class_method_signature": "AbstractGroups.appendTestGroupsWithoutAllocations(final StringBuilder sb, final char separator, final List<String> testNames)", "testcase": false, "constructor": false}, {"identifier": "appendTestGroupsWithAllocations", "parameters": "(final StringBuilder sb, final char separator, final List<String> testNames)", "modifiers": "protected final", "return": "void", "signature": "void appendTestGroupsWithAllocations(final StringBuilder sb, final char separator, final List<String> testNames)", "full_signature": "protected final void appendTestGroupsWithAllocations(final StringBuilder sb, final char separator, final List<String> testNames)", "class_method_signature": "AbstractGroups.appendTestGroupsWithAllocations(final StringBuilder sb, final char separator, final List<String> testNames)", "testcase": false, "constructor": false}, {"identifier": "getJavaScriptConfig", "parameters": "()", "modifiers": "public final", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getJavaScriptConfig()", "full_signature": "public final Map<String, Integer> getJavaScriptConfig()", "class_method_signature": "AbstractGroups.getJavaScriptConfig()", "testcase": false, "constructor": false}, {"identifier": "getJavaScriptConfig", "parameters": "(final E[] tests)", "modifiers": "@Deprecated public", "return": "List<List<Object>>", "signature": "List<List<Object>> getJavaScriptConfig(final E[] tests)", "full_signature": "@Deprecated public List<List<Object>> getJavaScriptConfig(final E[] tests)", "class_method_signature": "AbstractGroups.getJavaScriptConfig(final E[] tests)", "testcase": false, "constructor": false}, {"identifier": "getAsProctorResult", "parameters": "()", "modifiers": "public", "return": "ProctorResult", "signature": "ProctorResult getAsProctorResult()", "full_signature": "public ProctorResult getAsProctorResult()", "class_method_signature": "AbstractGroups.getAsProctorResult()", "testcase": false, "constructor": false}, {"identifier": "getRawProctorResult", "parameters": "()", "modifiers": "public", "return": "ProctorResult", "signature": "ProctorResult getRawProctorResult()", "full_signature": "public ProctorResult getRawProctorResult()", "class_method_signature": "AbstractGroups.getRawProctorResult()", "testcase": false, "constructor": false}, {"identifier": "getProctorResult", "parameters": "()", "modifiers": "@Deprecated public", "return": "ProctorResult", "signature": "ProctorResult getProctorResult()", "full_signature": "@Deprecated public ProctorResult getProctorResult()", "class_method_signature": "AbstractGroups.getProctorResult()", "testcase": false, "constructor": false}], "file": "proctor-consumer/src/main/java/com/indeed/proctor/consumer/AbstractGroups.java"}, "focal_method": {"identifier": "getLoggingTestNames", "parameters": "()", "modifiers": "protected final", "return": "List<String>", "body": "protected final List<String> getLoggingTestNames() {\n        final Map<String, ConsumableTestDefinition> testDefinitions = proctorResult.getTestDefinitions();\n        // following lines should preserve the order in the map to ensure logging values are stable\n        // declaring SortedMap variable here to ensure compiler error happens if proctorResult map is changed.\n        final Map<String, TestBucket> buckets = proctorResult.getBuckets();\n        return buckets.keySet().stream()\n                .filter(testBucket -> {\n                    final ConsumableTestDefinition consumableTestDefinition = testDefinitions.get(testBucket);\n                    // fallback to non-silent when test definition is not available\n                    return (consumableTestDefinition == null) || !consumableTestDefinition.getSilent();\n                })\n                // call to getValuePrivate() to allow overrides of getActiveBucket\n                .filter(testName -> getValue(testName, -1) >= 0)\n                .collect(Collectors.toList());\n    }", "signature": "List<String> getLoggingTestNames()", "full_signature": "protected final List<String> getLoggingTestNames()", "class_method_signature": "AbstractGroups.getLoggingTestNames()", "testcase": false, "constructor": false, "invocations": ["getTestDefinitions", "getBuckets", "collect", "filter", "filter", "stream", "keySet", "get", "getSilent", "getValue", "toList"]}, "repository": {"repo_id": 13075200, "url": "https://github.com/indeedeng/proctor", "language": "Java", "is_fork": false, "fork_count": 88, "stargazer_count": 347, "size": 4699, "license": "licensed"}}