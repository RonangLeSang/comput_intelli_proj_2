{"test_class": {"identifier": "PropNogoodsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IntVar[] vars;", "modifier": "", "type": "IntVar[]", "declarator": "vars", "var_name": "vars"}, {"original_string": "PropNogoods PNG;", "modifier": "", "type": "PropNogoods", "declarator": "PNG", "var_name": "PNG"}, {"original_string": "int[] lits;", "modifier": "", "type": "int[]", "declarator": "lits", "var_name": "lits"}], "file": "solver/src/test/java/org/chocosolver/solver/constraints/nary/sat/PropNogoodsTest.java"}, "test_case": {"identifier": "testDoReduce2", "parameters": "()", "modifiers": "@Test(groups=\"1s\", timeOut=60000) public", "return": "void", "body": "@Test(groups=\"1s\", timeOut=60000)\n    public void testDoReduce2() throws Exception {\n        PNG.doReduce(0);\n        Assert.assertFalse(vars[0].contains(0));\n    }", "signature": "void testDoReduce2()", "full_signature": "@Test(groups=\"1s\", timeOut=60000) public void testDoReduce2()", "class_method_signature": "PropNogoodsTest.testDoReduce2()", "testcase": true, "constructor": false, "invocations": ["doReduce", "assertFalse", "contains"]}, "focal_class": {"identifier": "PropNogoods", "superclass": "extends Propagator<Variable>", "interfaces": "", "fields": [{"original_string": "private static final int NO_ENTRY = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "NO_ENTRY = Integer.MAX_VALUE", "var_name": "NO_ENTRY"}, {"original_string": "private static final long BITOP = 1L << 33L;", "modifier": "private static final", "type": "long", "declarator": "BITOP = 1L << 33L", "var_name": "BITOP"}, {"original_string": "private static final long FRONTIER = BITOP - Integer.MAX_VALUE;", "modifier": "private static final", "type": "long", "declarator": "FRONTIER = BITOP - Integer.MAX_VALUE", "var_name": "FRONTIER"}, {"original_string": "private SatSolver sat_;", "modifier": "private", "type": "SatSolver", "declarator": "sat_", "var_name": "sat_"}, {"original_string": "private TLongIntHashMap[] vv2lit;", "modifier": "private", "type": "TLongIntHashMap[]", "declarator": "vv2lit", "var_name": "vv2lit"}, {"original_string": "private int[] var2pos;", "modifier": "private", "type": "int[]", "declarator": "var2pos", "var_name": "var2pos"}, {"original_string": "private int[] lit2pos;", "modifier": "private", "type": "int[]", "declarator": "lit2pos", "var_name": "lit2pos"}, {"original_string": "private long[] lit2val;", "modifier": "private", "type": "long[]", "declarator": "lit2val", "var_name": "lit2val"}, {"original_string": "private IStateInt sat_trail_;", "modifier": "private", "type": "IStateInt", "declarator": "sat_trail_", "var_name": "sat_trail_"}, {"original_string": "private TIntList early_deductions_;", "modifier": "private", "type": "TIntList", "declarator": "early_deductions_", "var_name": "early_deductions_"}, {"original_string": "private BitSet test_eq;", "modifier": "private", "type": "BitSet", "declarator": "test_eq", "var_name": "test_eq"}, {"original_string": "private Deque<Variable> fp;", "modifier": "private", "type": "Deque<Variable>", "declarator": "fp", "var_name": "fp"}, {"original_string": "private TIntObjectHashMap<ArrayList<Clause>> inClauses;", "modifier": "private", "type": "TIntObjectHashMap<ArrayList<Clause>>", "declarator": "inClauses", "var_name": "inClauses"}, {"original_string": "private ArrayList<Variable> add_var;", "modifier": "private", "type": "ArrayList<Variable>", "declarator": "add_var", "var_name": "add_var"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}], "methods": [{"identifier": "PropNogoods", "parameters": "(Model model)", "modifiers": "public", "return": "", "signature": " PropNogoods(Model model)", "full_signature": "public  PropNogoods(Model model)", "class_method_signature": "PropNogoods.PropNogoods(Model model)", "testcase": false, "constructor": true}, {"identifier": "propagate", "parameters": "(int evtmask)", "modifiers": "@Override public", "return": "void", "signature": "void propagate(int evtmask)", "full_signature": "@Override public void propagate(int evtmask)", "class_method_signature": "PropNogoods.propagate(int evtmask)", "testcase": false, "constructor": false}, {"identifier": "propagate", "parameters": "(int idxVarInProp, int mask)", "modifiers": "@Override public", "return": "void", "signature": "void propagate(int idxVarInProp, int mask)", "full_signature": "@Override public void propagate(int idxVarInProp, int mask)", "class_method_signature": "PropNogoods.propagate(int idxVarInProp, int mask)", "testcase": false, "constructor": false}, {"identifier": "doVariableBound", "parameters": "(Variable var)", "modifiers": "private", "return": "void", "signature": "void doVariableBound(Variable var)", "full_signature": "private void doVariableBound(Variable var)", "class_method_signature": "PropNogoods.doVariableBound(Variable var)", "testcase": false, "constructor": false}, {"identifier": "doVariableBound", "parameters": "(IntVar var)", "modifiers": "private", "return": "void", "signature": "void doVariableBound(IntVar var)", "full_signature": "private void doVariableBound(IntVar var)", "class_method_signature": "PropNogoods.doVariableBound(IntVar var)", "testcase": false, "constructor": false}, {"identifier": "doVariableBound", "parameters": "(SetVar var)", "modifiers": "private", "return": "void", "signature": "void doVariableBound(SetVar var)", "full_signature": "private void doVariableBound(SetVar var)", "class_method_signature": "PropNogoods.doVariableBound(SetVar var)", "testcase": false, "constructor": false}, {"identifier": "isEntailed", "parameters": "()", "modifiers": "@Override public", "return": "ESat", "signature": "ESat isEntailed()", "full_signature": "@Override public ESat isEntailed()", "class_method_signature": "PropNogoods.isEntailed()", "testcase": false, "constructor": false}, {"identifier": "impliesEntailed", "parameters": "(TIntList lits)", "modifiers": "private", "return": "boolean", "signature": "boolean impliesEntailed(TIntList lits)", "full_signature": "private boolean impliesEntailed(TIntList lits)", "class_method_signature": "PropNogoods.impliesEntailed(TIntList lits)", "testcase": false, "constructor": false}, {"identifier": "clauseEntailed", "parameters": "(ArrayList<Clause> clauses)", "modifiers": "private", "return": "boolean", "signature": "boolean clauseEntailed(ArrayList<Clause> clauses)", "full_signature": "private boolean clauseEntailed(ArrayList<Clause> clauses)", "class_method_signature": "PropNogoods.clauseEntailed(ArrayList<Clause> clauses)", "testcase": false, "constructor": false}, {"identifier": "iseq", "parameters": "(long v)", "modifiers": "static", "return": "boolean", "signature": "boolean iseq(long v)", "full_signature": "static boolean iseq(long v)", "class_method_signature": "PropNogoods.iseq(long v)", "testcase": false, "constructor": false}, {"identifier": "leq", "parameters": "(int v)", "modifiers": "static", "return": "long", "signature": "long leq(int v)", "full_signature": "static long leq(int v)", "class_method_signature": "PropNogoods.leq(int v)", "testcase": false, "constructor": false}, {"identifier": "ivalue", "parameters": "(long v)", "modifiers": "static", "return": "int", "signature": "int ivalue(long v)", "full_signature": "static int ivalue(long v)", "class_method_signature": "PropNogoods.ivalue(long v)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initialize()", "full_signature": "public void initialize()", "class_method_signature": "PropNogoods.initialize()", "testcase": false, "constructor": false}, {"identifier": "Literal", "parameters": "(IntVar ivar, int value, boolean eq)", "modifiers": "public", "return": "int", "signature": "int Literal(IntVar ivar, int value, boolean eq)", "full_signature": "public int Literal(IntVar ivar, int value, boolean eq)", "class_method_signature": "PropNogoods.Literal(IntVar ivar, int value, boolean eq)", "testcase": false, "constructor": false}, {"identifier": "Literal", "parameters": "(SetVar svar, int value, boolean in)", "modifiers": "public", "return": "int", "signature": "int Literal(SetVar svar, int value, boolean in)", "full_signature": "public int Literal(SetVar svar, int value, boolean in)", "class_method_signature": "PropNogoods.Literal(SetVar svar, int value, boolean in)", "testcase": false, "constructor": false}, {"identifier": "VariableBound", "parameters": "(int index, boolean sign)", "modifiers": "", "return": "void", "signature": "void VariableBound(int index, boolean sign)", "full_signature": " void VariableBound(int index, boolean sign)", "class_method_signature": "PropNogoods.VariableBound(int index, boolean sign)", "testcase": false, "constructor": false}, {"identifier": "doReduce", "parameters": "(int lit)", "modifiers": "", "return": "void", "signature": "void doReduce(int lit)", "full_signature": " void doReduce(int lit)", "class_method_signature": "PropNogoods.doReduce(int lit)", "testcase": false, "constructor": false}, {"identifier": "doReduce", "parameters": "(IntVar ivar, boolean sign, long value)", "modifiers": "private", "return": "void", "signature": "void doReduce(IntVar ivar, boolean sign, long value)", "full_signature": "private void doReduce(IntVar ivar, boolean sign, long value)", "class_method_signature": "PropNogoods.doReduce(IntVar ivar, boolean sign, long value)", "testcase": false, "constructor": false}, {"identifier": "doReduce", "parameters": "(SetVar svar, boolean sign, long value)", "modifiers": "private", "return": "void", "signature": "void doReduce(SetVar svar, boolean sign, long value)", "full_signature": "private void doReduce(SetVar svar, boolean sign, long value)", "class_method_signature": "PropNogoods.doReduce(SetVar svar, boolean sign, long value)", "testcase": false, "constructor": false}, {"identifier": "declareDomainNogood", "parameters": "(IntVar var)", "modifiers": "", "return": "boolean", "signature": "boolean declareDomainNogood(IntVar var)", "full_signature": " boolean declareDomainNogood(IntVar var)", "class_method_signature": "PropNogoods.declareDomainNogood(IntVar var)", "testcase": false, "constructor": false}, {"identifier": "addNogood", "parameters": "(int p)", "modifiers": "@SuppressWarnings(\"unused\") public", "return": "boolean", "signature": "boolean addNogood(int p)", "full_signature": "@SuppressWarnings(\"unused\") public boolean addNogood(int p)", "class_method_signature": "PropNogoods.addNogood(int p)", "testcase": false, "constructor": false}, {"identifier": "addNogood", "parameters": "(TIntList lits)", "modifiers": "@SuppressWarnings(\"unused\") public", "return": "boolean", "signature": "boolean addNogood(TIntList lits)", "full_signature": "@SuppressWarnings(\"unused\") public boolean addNogood(TIntList lits)", "class_method_signature": "PropNogoods.addNogood(TIntList lits)", "testcase": false, "constructor": false}, {"identifier": "addLearnt", "parameters": "(int... lits)", "modifiers": "public", "return": "void", "signature": "void addLearnt(int... lits)", "full_signature": "public void addLearnt(int... lits)", "class_method_signature": "PropNogoods.addLearnt(int... lits)", "testcase": false, "constructor": false}, {"identifier": "storeEarlyDeductions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void storeEarlyDeductions()", "full_signature": "private void storeEarlyDeductions()", "class_method_signature": "PropNogoods.storeEarlyDeductions()", "testcase": false, "constructor": false}, {"identifier": "applyEarlyDeductions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void applyEarlyDeductions()", "full_signature": "private void applyEarlyDeductions()", "class_method_signature": "PropNogoods.applyEarlyDeductions()", "testcase": false, "constructor": false}], "file": "solver/src/main/java/org/chocosolver/solver/constraints/nary/sat/PropNogoods.java"}, "focal_method": {"identifier": "doReduce", "parameters": "(int lit)", "modifiers": "", "return": "void", "body": "void doReduce(int lit) throws ContradictionException {\n        int var = var(lit);\n        long value = lit2val[var];\n        Variable avar = vars[lit2pos[var]];\n        if (VariableUtils.isInt(avar)) {\n            doReduce((IntVar) avar, sign(lit), value);\n        } else if (VariableUtils.isSet(avar)) {\n            doReduce((SetVar) avar, sign(lit), value);\n        }\n    }", "signature": "void doReduce(int lit)", "full_signature": " void doReduce(int lit)", "class_method_signature": "PropNogoods.doReduce(int lit)", "testcase": false, "constructor": false, "invocations": ["var", "isInt", "doReduce", "sign", "isSet", "doReduce", "sign"]}, "repository": {"repo_id": 2708082, "url": "https://github.com/chocoteam/choco-solver", "stars": 448, "created": "11/4/2011 9:09:18 AM +00:00", "updates": "2020-01-22T12:32:22+00:00", "fork": "False", "license": "licensed"}}