{"test_class": {"identifier": "IntIterableRangeSetTest", "superclass": "", "interfaces": "", "fields": [], "file": "solver/src/test/java/org/chocosolver/util/objects/setDataStructures/iterable/IntIterableRangeSetTest.java"}, "test_case": {"identifier": "testRemoveBetween1", "parameters": "()", "modifiers": "@Test(groups = \"1s\", timeOut = 60000) public", "return": "void", "body": "@Test(groups = \"1s\", timeOut = 60000)\n    public void testRemoveBetween1() {\n        IntIterableRangeSet is = new IntIterableRangeSet();\n        is.ELEMENTS = new int[]{1, 5, 10, 15, 20, 20, 25, 30, 32, 32, 35, 40};\n        is.SIZE = 12;\n        is.CARDINALITY = 25;\n        Assert.assertTrue(is.removeBetween(35, 40));\n        Assert.assertEquals(is.CARDINALITY, 19);\n        Assert.assertEquals(is.SIZE, 10);\n        Assert.assertEquals(Arrays.copyOf(is.ELEMENTS, is.SIZE), new int[]{1, 5, 10, 15, 20, 20, 25, 30, 32, 32});\n        Assert.assertTrue(is.removeBetween(1, 5));\n        Assert.assertEquals(is.CARDINALITY, 14);\n        Assert.assertEquals(is.SIZE, 8);\n        Assert.assertEquals(Arrays.copyOf(is.ELEMENTS, is.SIZE), new int[]{10, 15, 20, 20, 25, 30, 32, 32});\n        Assert.assertTrue(is.removeBetween(29, 30));\n        Assert.assertEquals(is.CARDINALITY, 12);\n        Assert.assertEquals(is.SIZE, 8);\n        Assert.assertEquals(Arrays.copyOf(is.ELEMENTS, is.SIZE), new int[]{10, 15, 20, 20, 25, 28, 32, 32});\n        Assert.assertTrue(is.removeBetween(10, 12));\n        Assert.assertEquals(is.CARDINALITY, 9);\n        Assert.assertEquals(is.SIZE, 8);\n        Assert.assertEquals(Arrays.copyOf(is.ELEMENTS, is.SIZE), new int[]{13, 15, 20, 20, 25, 28, 32, 32});\n        Assert.assertTrue(is.removeBetween(26, 27));\n        Assert.assertEquals(is.CARDINALITY, 7);\n        Assert.assertEquals(is.SIZE, 10);\n        Assert.assertEquals(Arrays.copyOf(is.ELEMENTS, is.SIZE), new int[]{13, 15, 20, 20, 25, 25, 28, 28, 32, 32});\n        Assert.assertTrue(is.removeBetween(20, 20));\n        Assert.assertEquals(is.CARDINALITY, 6);\n        Assert.assertEquals(is.SIZE, 8);\n        Assert.assertEquals(Arrays.copyOf(is.ELEMENTS, is.SIZE), new int[]{13, 15, 25, 25, 28, 28, 32, 32});\n    }", "signature": "void testRemoveBetween1()", "full_signature": "@Test(groups = \"1s\", timeOut = 60000) public void testRemoveBetween1()", "class_method_signature": "IntIterableRangeSetTest.testRemoveBetween1()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "removeBetween", "assertEquals", "assertEquals", "assertEquals", "copyOf", "assertTrue", "removeBetween", "assertEquals", "assertEquals", "assertEquals", "copyOf", "assertTrue", "removeBetween", "assertEquals", "assertEquals", "assertEquals", "copyOf", "assertTrue", "removeBetween", "assertEquals", "assertEquals", "assertEquals", "copyOf", "assertTrue", "removeBetween", "assertEquals", "assertEquals", "assertEquals", "copyOf", "assertTrue", "removeBetween", "assertEquals", "assertEquals", "assertEquals", "copyOf"]}, "focal_class": {"identifier": "IntIterableRangeSet", "superclass": "", "interfaces": "implements IntIterableSet", "fields": [{"original_string": "public static final int MIN = Integer.MAX_VALUE / -2;", "modifier": "public static final", "type": "int", "declarator": "MIN = Integer.MAX_VALUE / -2", "var_name": "MIN"}, {"original_string": "public static final int MAX = Integer.MAX_VALUE / 2;", "modifier": "public static final", "type": "int", "declarator": "MAX = Integer.MAX_VALUE / 2", "var_name": "MAX"}, {"original_string": "protected int[] ELEMENTS;", "modifier": "protected", "type": "int[]", "declarator": "ELEMENTS", "var_name": "ELEMENTS"}, {"original_string": "protected int SIZE;", "modifier": "protected", "type": "int", "declarator": "SIZE", "var_name": "SIZE"}, {"original_string": "protected int CARDINALITY;", "modifier": "protected", "type": "int", "declarator": "CARDINALITY", "var_name": "CARDINALITY"}, {"original_string": "private ISetIterator iter;", "modifier": "private", "type": "ISetIterator", "declarator": "iter", "var_name": "iter"}, {"original_string": "private boolean lock;", "modifier": "private", "type": "boolean", "declarator": "lock", "var_name": "lock"}], "methods": [{"identifier": "checkInvariants", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkInvariants()", "full_signature": "private void checkInvariants()", "class_method_signature": "IntIterableRangeSet.checkInvariants()", "testcase": false, "constructor": false}, {"identifier": "IntIterableRangeSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntIterableRangeSet()", "full_signature": "public  IntIterableRangeSet()", "class_method_signature": "IntIterableRangeSet.IntIterableRangeSet()", "testcase": false, "constructor": true}, {"identifier": "IntIterableRangeSet", "parameters": "(int a, int b)", "modifiers": "public", "return": "", "signature": " IntIterableRangeSet(int a, int b)", "full_signature": "public  IntIterableRangeSet(int a, int b)", "class_method_signature": "IntIterableRangeSet.IntIterableRangeSet(int a, int b)", "testcase": false, "constructor": true}, {"identifier": "IntIterableRangeSet", "parameters": "(int e)", "modifiers": "public", "return": "", "signature": " IntIterableRangeSet(int e)", "full_signature": "public  IntIterableRangeSet(int e)", "class_method_signature": "IntIterableRangeSet.IntIterableRangeSet(int e)", "testcase": false, "constructor": true}, {"identifier": "IntIterableRangeSet", "parameters": "(int[] values)", "modifiers": "public", "return": "", "signature": " IntIterableRangeSet(int[] values)", "full_signature": "public  IntIterableRangeSet(int[] values)", "class_method_signature": "IntIterableRangeSet.IntIterableRangeSet(int[] values)", "testcase": false, "constructor": true}, {"identifier": "IntIterableRangeSet", "parameters": "(IntVar var)", "modifiers": "public", "return": "", "signature": " IntIterableRangeSet(IntVar var)", "full_signature": "public  IntIterableRangeSet(IntVar var)", "class_method_signature": "IntIterableRangeSet.IntIterableRangeSet(IntVar var)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IntIterableRangeSet.toString()", "testcase": false, "constructor": false}, {"identifier": "toSmartString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toSmartString()", "full_signature": "public String toSmartString()", "class_method_signature": "IntIterableRangeSet.toSmartString()", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void lock()", "full_signature": "public void lock()", "class_method_signature": "IntIterableRangeSet.lock()", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unlock()", "full_signature": "public void unlock()", "class_method_signature": "IntIterableRangeSet.unlock()", "testcase": false, "constructor": false}, {"identifier": "getNbRanges", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNbRanges()", "full_signature": "public int getNbRanges()", "class_method_signature": "IntIterableRangeSet.getNbRanges()", "testcase": false, "constructor": false}, {"identifier": "cardinality", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int cardinality()", "full_signature": "public int cardinality()", "class_method_signature": "IntIterableRangeSet.cardinality()", "testcase": false, "constructor": false}, {"identifier": "minOfRange", "parameters": "(int r)", "modifiers": "public", "return": "int", "signature": "int minOfRange(int r)", "full_signature": "public int minOfRange(int r)", "class_method_signature": "IntIterableRangeSet.minOfRange(int r)", "testcase": false, "constructor": false}, {"identifier": "maxOfRange", "parameters": "(int r)", "modifiers": "public", "return": "int", "signature": "int maxOfRange(int r)", "full_signature": "public int maxOfRange(int r)", "class_method_signature": "IntIterableRangeSet.maxOfRange(int r)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int min()", "full_signature": "@Override public int min()", "class_method_signature": "IntIterableRangeSet.min()", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int max()", "full_signature": "@Override public int max()", "class_method_signature": "IntIterableRangeSet.max()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(int e)", "full_signature": "@Override public boolean add(int e)", "class_method_signature": "IntIterableRangeSet.add(int e)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(int... values)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(int... values)", "full_signature": "@Override public boolean addAll(int... values)", "class_method_signature": "IntIterableRangeSet.addAll(int... values)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(IntIterableSet set)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(IntIterableSet set)", "full_signature": "@Override public boolean addAll(IntIterableSet set)", "class_method_signature": "IntIterableRangeSet.addAll(IntIterableSet set)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(IntVar var)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(IntVar var)", "full_signature": "public boolean addAll(IntVar var)", "class_method_signature": "IntIterableRangeSet.addAll(IntVar var)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(IntIterableRangeSet set)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(IntIterableRangeSet set)", "full_signature": "public boolean addAll(IntIterableRangeSet set)", "class_method_signature": "IntIterableRangeSet.addAll(IntIterableRangeSet set)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(IntIterableSet set)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(IntIterableSet set)", "full_signature": "@Override public boolean retainAll(IntIterableSet set)", "class_method_signature": "IntIterableRangeSet.retainAll(IntIterableSet set)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(IntIterableRangeSet set)", "modifiers": "public", "return": "boolean", "signature": "boolean retainAll(IntIterableRangeSet set)", "full_signature": "public boolean retainAll(IntIterableRangeSet set)", "class_method_signature": "IntIterableRangeSet.retainAll(IntIterableRangeSet set)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(int e)", "full_signature": "@Override public boolean remove(int e)", "class_method_signature": "IntIterableRangeSet.remove(int e)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(IntIterableSet set)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(IntIterableSet set)", "full_signature": "@Override public boolean removeAll(IntIterableSet set)", "class_method_signature": "IntIterableRangeSet.removeAll(IntIterableSet set)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(IntIterableRangeSet set)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAll(IntIterableRangeSet set)", "full_signature": "public boolean removeAll(IntIterableRangeSet set)", "class_method_signature": "IntIterableRangeSet.removeAll(IntIterableRangeSet set)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "IntIterableRangeSet.clear()", "testcase": false, "constructor": false}, {"identifier": "getSetType", "parameters": "()", "modifiers": "@Override public", "return": "SetType", "signature": "SetType getSetType()", "full_signature": "@Override public SetType getSetType()", "class_method_signature": "IntIterableRangeSet.getSetType()", "testcase": false, "constructor": false}, {"identifier": "addBetween", "parameters": "(int a, int b)", "modifiers": "public", "return": "boolean", "signature": "boolean addBetween(int a, int b)", "full_signature": "public boolean addBetween(int a, int b)", "class_method_signature": "IntIterableRangeSet.addBetween(int a, int b)", "testcase": false, "constructor": false}, {"identifier": "removeBetween", "parameters": "(int f, int t)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeBetween(int f, int t)", "full_signature": "@Override public boolean removeBetween(int f, int t)", "class_method_signature": "IntIterableRangeSet.removeBetween(int f, int t)", "testcase": false, "constructor": false}, {"identifier": "retainBetween", "parameters": "(int f, int t)", "modifiers": "public", "return": "boolean", "signature": "boolean retainBetween(int f, int t)", "full_signature": "public boolean retainBetween(int f, int t)", "class_method_signature": "IntIterableRangeSet.retainBetween(int f, int t)", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "(int e)", "modifiers": "@Override public", "return": "int", "signature": "int nextValue(int e)", "full_signature": "@Override public int nextValue(int e)", "class_method_signature": "IntIterableRangeSet.nextValue(int e)", "testcase": false, "constructor": false}, {"identifier": "nextValueOut", "parameters": "(int e)", "modifiers": "@Override public", "return": "int", "signature": "int nextValueOut(int e)", "full_signature": "@Override public int nextValueOut(int e)", "class_method_signature": "IntIterableRangeSet.nextValueOut(int e)", "testcase": false, "constructor": false}, {"identifier": "previousValue", "parameters": "(int e)", "modifiers": "@Override public", "return": "int", "signature": "int previousValue(int e)", "full_signature": "@Override public int previousValue(int e)", "class_method_signature": "IntIterableRangeSet.previousValue(int e)", "testcase": false, "constructor": false}, {"identifier": "previousValueOut", "parameters": "(int e)", "modifiers": "@Override public", "return": "int", "signature": "int previousValueOut(int e)", "full_signature": "@Override public int previousValueOut(int e)", "class_method_signature": "IntIterableRangeSet.previousValueOut(int e)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(int o)", "full_signature": "@Override public boolean contains(int o)", "class_method_signature": "IntIterableRangeSet.contains(int o)", "testcase": false, "constructor": false}, {"identifier": "duplicate", "parameters": "()", "modifiers": "@Override public", "return": "IntIterableRangeSet", "signature": "IntIterableRangeSet duplicate()", "full_signature": "@Override public IntIterableRangeSet duplicate()", "class_method_signature": "IntIterableRangeSet.duplicate()", "testcase": false, "constructor": false}, {"identifier": "copyFrom", "parameters": "(IntIterableRangeSet me)", "modifiers": "public", "return": "IntIterableRangeSet", "signature": "IntIterableRangeSet copyFrom(IntIterableRangeSet me)", "full_signature": "public IntIterableRangeSet copyFrom(IntIterableRangeSet me)", "class_method_signature": "IntIterableRangeSet.copyFrom(IntIterableRangeSet me)", "testcase": false, "constructor": false}, {"identifier": "copyFrom", "parameters": "(IntVar var)", "modifiers": "public", "return": "void", "signature": "void copyFrom(IntVar var)", "full_signature": "public void copyFrom(IntVar var)", "class_method_signature": "IntIterableRangeSet.copyFrom(IntVar var)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "IntIterableRangeSet.size()", "testcase": false, "constructor": false}, {"identifier": "newIterator", "parameters": "()", "modifiers": "@Override public", "return": "ISetIterator", "signature": "ISetIterator newIterator()", "full_signature": "@Override public ISetIterator newIterator()", "class_method_signature": "IntIterableRangeSet.newIterator()", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(int x)", "modifiers": "public", "return": "void", "signature": "void plus(int x)", "full_signature": "public void plus(int x)", "class_method_signature": "IntIterableRangeSet.plus(int x)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "ISetIterator", "signature": "ISetIterator iterator()", "full_signature": "@Override public ISetIterator iterator()", "class_method_signature": "IntIterableRangeSet.iterator()", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(int x)", "modifiers": "public", "return": "void", "signature": "void minus(int x)", "full_signature": "public void minus(int x)", "class_method_signature": "IntIterableRangeSet.minus(int x)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(int x)", "modifiers": "public", "return": "void", "signature": "void times(int x)", "full_signature": "public void times(int x)", "class_method_signature": "IntIterableRangeSet.times(int x)", "testcase": false, "constructor": false}, {"identifier": "rangeOf", "parameters": "(int x)", "modifiers": "public", "return": "int", "signature": "int rangeOf(int x)", "full_signature": "public int rangeOf(int x)", "class_method_signature": "IntIterableRangeSet.rangeOf(int x)", "testcase": false, "constructor": false}, {"identifier": "rangeOf", "parameters": "(int x, int fromIndex, int toIndex)", "modifiers": "protected", "return": "int", "signature": "int rangeOf(int x, int fromIndex, int toIndex)", "full_signature": "protected int rangeOf(int x, int fromIndex, int toIndex)", "class_method_signature": "IntIterableRangeSet.rangeOf(int x, int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "grow", "parameters": "(int minCapacity)", "modifiers": "", "return": "void", "signature": "void grow(int minCapacity)", "full_signature": " void grow(int minCapacity)", "class_method_signature": "IntIterableRangeSet.grow(int minCapacity)", "testcase": false, "constructor": false}, {"identifier": "pushRange", "parameters": "(int lb, int ub)", "modifiers": "", "return": "void", "signature": "void pushRange(int lb, int ub)", "full_signature": " void pushRange(int lb, int ub)", "class_method_signature": "IntIterableRangeSet.pushRange(int lb, int ub)", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void compact()", "full_signature": "public void compact()", "class_method_signature": "IntIterableRangeSet.compact()", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "()", "modifiers": "public", "return": "IntIterableRangeSet", "signature": "IntIterableRangeSet flip()", "full_signature": "public IntIterableRangeSet flip()", "class_method_signature": "IntIterableRangeSet.flip()", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "(int lb, int ub)", "modifiers": "public", "return": "IntIterableRangeSet", "signature": "IntIterableRangeSet flip(int lb, int ub)", "full_signature": "public IntIterableRangeSet flip(int lb, int ub)", "class_method_signature": "IntIterableRangeSet.flip(int lb, int ub)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(int lb, int ub)", "modifiers": "@SuppressWarnings(\"Duplicates\") public", "return": "boolean", "signature": "boolean intersect(int lb, int ub)", "full_signature": "@SuppressWarnings(\"Duplicates\") public boolean intersect(int lb, int ub)", "class_method_signature": "IntIterableRangeSet.intersect(int lb, int ub)", "testcase": false, "constructor": false}, {"identifier": "intersectDichot", "parameters": "(int lb, int ub)", "modifiers": "@SuppressWarnings(\"Duplicates\") public", "return": "boolean", "signature": "boolean intersectDichot(int lb, int ub)", "full_signature": "@SuppressWarnings(\"Duplicates\") public boolean intersectDichot(int lb, int ub)", "class_method_signature": "IntIterableRangeSet.intersectDichot(int lb, int ub)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(IntIterableRangeSet set)", "modifiers": "@SuppressWarnings(\"Duplicates\") public", "return": "boolean", "signature": "boolean intersect(IntIterableRangeSet set)", "full_signature": "@SuppressWarnings(\"Duplicates\") public boolean intersect(IntIterableRangeSet set)", "class_method_signature": "IntIterableRangeSet.intersect(IntIterableRangeSet set)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(IntVar var)", "modifiers": "@SuppressWarnings(\"Duplicates\") public", "return": "boolean", "signature": "boolean intersect(IntVar var)", "full_signature": "@SuppressWarnings(\"Duplicates\") public boolean intersect(IntVar var)", "class_method_signature": "IntIterableRangeSet.intersect(IntVar var)", "testcase": false, "constructor": false}, {"identifier": "forEachValueIn", "parameters": "(IntConsumer c)", "modifiers": "public", "return": "void", "signature": "void forEachValueIn(IntConsumer c)", "full_signature": "public void forEachValueIn(IntConsumer c)", "class_method_signature": "IntIterableRangeSet.forEachValueIn(IntConsumer c)", "testcase": false, "constructor": false}, {"identifier": "forEachValueOut", "parameters": "(IntConsumer c)", "modifiers": "public", "return": "void", "signature": "void forEachValueOut(IntConsumer c)", "full_signature": "public void forEachValueOut(IntConsumer c)", "class_method_signature": "IntIterableRangeSet.forEachValueOut(IntConsumer c)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] toArray()", "full_signature": "public int[] toArray()", "class_method_signature": "IntIterableRangeSet.toArray()", "testcase": false, "constructor": false}], "file": "solver/src/main/java/org/chocosolver/util/objects/setDataStructures/iterable/IntIterableRangeSet.java"}, "focal_method": {"identifier": "removeBetween", "parameters": "(int f, int t)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean removeBetween(int f, int t) {\n        if (lock) {\n            throw new IllegalStateException(\"This set is immutable\");\n        }\n        boolean rem = false;\n        if (f > t) {\n            throw new IllegalArgumentException(\"Cannot remove from empty range [\" + f + \",\" + t + \"]\");\n        }\n        int rf = rangeOf(f);\n        if (rf < 0) {\n            // find closest after\n            rf *= -1;\n            if (rf > SIZE >> 1) {\n                return false;\n            }\n            f = ELEMENTS[(rf - 1) << 1];\n        }\n        assert rf > 0;\n        int rt = rangeOf(t, (rf - 1) << 1, SIZE);\n        if (rt < 0) {\n            // find closest range before\n            rt = -rt - 1;\n            if (rt < 1) {\n                return false;\n            }\n            t = ELEMENTS[((rt - 1) << 1) + 1];\n        }\n        assert rt > 0;\n        int i = (rf - 1) << 1;\n        int j = (rt - 1) << 1;\n        if (rf <= rt) {\n            int dcard = -(f - ELEMENTS[i] + ELEMENTS[j + 1] - t);\n            dcard += ELEMENTS[i + 1] - ELEMENTS[i] + 1;\n            if (rf < rt) {\n                for (int k = i + 2; k <= j + 1; k += 2) {\n                    dcard += ELEMENTS[k + 1] - ELEMENTS[k] + 1;\n                }\n                // remove useless range\n                System.arraycopy(ELEMENTS, j + 1, ELEMENTS, i + 1, SIZE - (j + 1));\n                SIZE -= (rt - rf) << 1;\n            }\n            CARDINALITY -= dcard;\n            int c = ELEMENTS[i] == f ? 1 : 0;\n            c += ELEMENTS[i + 1] == t ? 2 : 0;\n            switch (c) {\n                case 0: // split the range into two ranges\n                    grow(SIZE + 2);\n                    System.arraycopy(ELEMENTS, i, ELEMENTS, i + 2, SIZE - i);\n                    ELEMENTS[i + 1] = f - 1;\n                    ELEMENTS[i + 2] = t + 1;\n                    SIZE += 2;\n                    break;\n                case 1: // update the lower bound of the range\n                    ELEMENTS[i] = t + 1;\n                    break;\n                case 2: // update the upper bound of the range\n                    ELEMENTS[i + 1] = f - 1;\n                    break;\n                case 3: // remove the range\n                    if (i < SIZE - 2) {\n                        System.arraycopy(ELEMENTS, i + 2, ELEMENTS, i, SIZE - (i + 2));\n                    }\n                    SIZE -= 2;\n                    break;\n            }\n            rem = true;\n        }\n        return rem;\n    }", "signature": "boolean removeBetween(int f, int t)", "full_signature": "@Override public boolean removeBetween(int f, int t)", "class_method_signature": "IntIterableRangeSet.removeBetween(int f, int t)", "testcase": false, "constructor": false, "invocations": ["rangeOf", "rangeOf", "arraycopy", "grow", "arraycopy", "arraycopy"]}, "repository": {"repo_id": 2708082, "url": "https://github.com/chocoteam/choco-solver", "stars": 448, "created": "11/4/2011 9:09:18 AM +00:00", "updates": "2020-01-22T12:32:22+00:00", "fork": "False", "license": "licensed"}}