{"test_class": {"identifier": "BoolVarImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BoolVarImpl var;", "modifier": "", "type": "BoolVarImpl", "declarator": "var", "var_name": "var"}], "file": "solver/src/test/java/org/chocosolver/solver/variables/impl/BoolVarImplTest.java"}, "test_case": {"identifier": "testUpdateLowerBound", "parameters": "()", "modifiers": "@Test(groups=\"1s\", timeOut=60000) public", "return": "void", "body": "@Test(groups=\"1s\", timeOut=60000)\n    public void testUpdateLowerBound() throws Exception {\n        setUp();\n        Assert.assertFalse(var.updateLowerBound(-6, Cause.Null));\n        Assert.assertTrue(var.updateLowerBound(1, Cause.Null));\n        Assert.assertTrue(var.contains(1));\n        Assert.assertFalse(var.contains(-2));\n\n    }", "signature": "void testUpdateLowerBound()", "full_signature": "@Test(groups=\"1s\", timeOut=60000) public void testUpdateLowerBound()", "class_method_signature": "BoolVarImplTest.testUpdateLowerBound()", "testcase": true, "constructor": false, "invocations": ["setUp", "assertFalse", "updateLowerBound", "assertTrue", "updateLowerBound", "assertTrue", "contains", "assertFalse", "contains"]}, "focal_class": {"identifier": "BoolVarImpl", "superclass": "extends AbstractVariable", "interfaces": "implements BoolVar", "fields": [{"original_string": "private int mValue;", "modifier": "private", "type": "int", "declarator": "mValue", "var_name": "mValue"}, {"original_string": "private IOperation status = () -> mValue = kUNDEF;", "modifier": "private", "type": "IOperation", "declarator": "status = () -> mValue = kUNDEF", "var_name": "status"}, {"original_string": "private IEnumDelta delta = NoDelta.singleton;", "modifier": "private", "type": "IEnumDelta", "declarator": "delta = NoDelta.singleton", "var_name": "delta"}, {"original_string": "private DisposableValueIterator _viterator;", "modifier": "private", "type": "DisposableValueIterator", "declarator": "_viterator", "var_name": "_viterator"}, {"original_string": "private DisposableRangeIterator _riterator;", "modifier": "private", "type": "DisposableRangeIterator", "declarator": "_riterator", "var_name": "_riterator"}, {"original_string": "private IntVarValueIterator _javaIterator;", "modifier": "private", "type": "IntVarValueIterator", "declarator": "_javaIterator", "var_name": "_javaIterator"}, {"original_string": "private boolean reactOnRemoval = false;", "modifier": "private", "type": "boolean", "declarator": "reactOnRemoval = false", "var_name": "reactOnRemoval"}, {"original_string": "private BoolVar not;", "modifier": "private", "type": "BoolVar", "declarator": "not", "var_name": "not"}, {"original_string": "private boolean isNot = false;", "modifier": "private", "type": "boolean", "declarator": "isNot = false", "var_name": "isNot"}, {"original_string": "private SignedLiteral.Boolean literal = null;", "modifier": "private", "type": "SignedLiteral.Boolean", "declarator": "literal = null", "var_name": "literal"}], "methods": [{"identifier": "BoolVarImpl", "parameters": "(String name, Model model)", "modifiers": "public", "return": "", "signature": " BoolVarImpl(String name, Model model)", "full_signature": "public  BoolVarImpl(String name, Model model)", "class_method_signature": "BoolVarImpl.BoolVarImpl(String name, Model model)", "testcase": false, "constructor": true}, {"identifier": "removeValue", "parameters": "(int value, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeValue(int value, ICause cause)", "full_signature": "@Override public boolean removeValue(int value, ICause cause)", "class_method_signature": "BoolVarImpl.removeValue(int value, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "removeValues", "parameters": "(IntIterableSet values, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeValues(IntIterableSet values, ICause cause)", "full_signature": "@Override public boolean removeValues(IntIterableSet values, ICause cause)", "class_method_signature": "BoolVarImpl.removeValues(IntIterableSet values, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "removeAllValuesBut", "parameters": "(IntIterableSet values, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAllValuesBut(IntIterableSet values, ICause cause)", "full_signature": "@Override public boolean removeAllValuesBut(IntIterableSet values, ICause cause)", "class_method_signature": "BoolVarImpl.removeAllValuesBut(IntIterableSet values, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "removeInterval", "parameters": "(int from, int to, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeInterval(int from, int to, ICause cause)", "full_signature": "@Override public boolean removeInterval(int from, int to, ICause cause)", "class_method_signature": "BoolVarImpl.removeInterval(int from, int to, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "instantiateTo", "parameters": "(int value, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean instantiateTo(int value, ICause cause)", "full_signature": "@Override public boolean instantiateTo(int value, ICause cause)", "class_method_signature": "BoolVarImpl.instantiateTo(int value, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "updateLowerBound", "parameters": "(int value, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateLowerBound(int value, ICause cause)", "full_signature": "@Override public boolean updateLowerBound(int value, ICause cause)", "class_method_signature": "BoolVarImpl.updateLowerBound(int value, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "updateUpperBound", "parameters": "(int value, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateUpperBound(int value, ICause cause)", "full_signature": "@Override public boolean updateUpperBound(int value, ICause cause)", "class_method_signature": "BoolVarImpl.updateUpperBound(int value, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "updateBounds", "parameters": "(int lb, int ub, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateBounds(int lb, int ub, ICause cause)", "full_signature": "@Override public boolean updateBounds(int lb, int ub, ICause cause)", "class_method_signature": "BoolVarImpl.updateBounds(int lb, int ub, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "setToTrue", "parameters": "(ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setToTrue(ICause cause)", "full_signature": "@Override public boolean setToTrue(ICause cause)", "class_method_signature": "BoolVarImpl.setToTrue(ICause cause)", "testcase": false, "constructor": false}, {"identifier": "setToFalse", "parameters": "(ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setToFalse(ICause cause)", "full_signature": "@Override public boolean setToFalse(ICause cause)", "class_method_signature": "BoolVarImpl.setToFalse(ICause cause)", "testcase": false, "constructor": false}, {"identifier": "isInstantiated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInstantiated()", "full_signature": "@Override public boolean isInstantiated()", "class_method_signature": "BoolVarImpl.isInstantiated()", "testcase": false, "constructor": false}, {"identifier": "isInstantiatedTo", "parameters": "(int aValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInstantiatedTo(int aValue)", "full_signature": "@Override public boolean isInstantiatedTo(int aValue)", "class_method_signature": "BoolVarImpl.isInstantiatedTo(int aValue)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int aValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(int aValue)", "full_signature": "@Override public boolean contains(int aValue)", "class_method_signature": "BoolVarImpl.contains(int aValue)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getValue()", "full_signature": "@Override public int getValue()", "class_method_signature": "BoolVarImpl.getValue()", "testcase": false, "constructor": false}, {"identifier": "getBooleanValue", "parameters": "()", "modifiers": "@Override public", "return": "ESat", "signature": "ESat getBooleanValue()", "full_signature": "@Override public ESat getBooleanValue()", "class_method_signature": "BoolVarImpl.getBooleanValue()", "testcase": false, "constructor": false}, {"identifier": "getLB", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLB()", "full_signature": "@Override public int getLB()", "class_method_signature": "BoolVarImpl.getLB()", "testcase": false, "constructor": false}, {"identifier": "getUB", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getUB()", "full_signature": "@Override public int getUB()", "class_method_signature": "BoolVarImpl.getUB()", "testcase": false, "constructor": false}, {"identifier": "getDomainSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDomainSize()", "full_signature": "@Override public int getDomainSize()", "class_method_signature": "BoolVarImpl.getDomainSize()", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRange()", "full_signature": "@Override public int getRange()", "class_method_signature": "BoolVarImpl.getRange()", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "signature": "int nextValue(int v)", "full_signature": "@Override public int nextValue(int v)", "class_method_signature": "BoolVarImpl.nextValue(int v)", "testcase": false, "constructor": false}, {"identifier": "nextValueOut", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "signature": "int nextValueOut(int v)", "full_signature": "@Override public int nextValueOut(int v)", "class_method_signature": "BoolVarImpl.nextValueOut(int v)", "testcase": false, "constructor": false}, {"identifier": "previousValue", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "signature": "int previousValue(int v)", "full_signature": "@Override public int previousValue(int v)", "class_method_signature": "BoolVarImpl.previousValue(int v)", "testcase": false, "constructor": false}, {"identifier": "previousValueOut", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "signature": "int previousValueOut(int v)", "full_signature": "@Override public int previousValueOut(int v)", "class_method_signature": "BoolVarImpl.previousValueOut(int v)", "testcase": false, "constructor": false}, {"identifier": "hasEnumeratedDomain", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasEnumeratedDomain()", "full_signature": "@Override public boolean hasEnumeratedDomain()", "class_method_signature": "BoolVarImpl.hasEnumeratedDomain()", "testcase": false, "constructor": false}, {"identifier": "getDelta", "parameters": "()", "modifiers": "@Override public", "return": "IEnumDelta", "signature": "IEnumDelta getDelta()", "full_signature": "@Override public IEnumDelta getDelta()", "class_method_signature": "BoolVarImpl.getDelta()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BoolVarImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "createDelta", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void createDelta()", "full_signature": "@Override public void createDelta()", "class_method_signature": "BoolVarImpl.createDelta()", "testcase": false, "constructor": false}, {"identifier": "monitorDelta", "parameters": "(ICause propagator)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "IIntDeltaMonitor", "signature": "IIntDeltaMonitor monitorDelta(ICause propagator)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public IIntDeltaMonitor monitorDelta(ICause propagator)", "class_method_signature": "BoolVarImpl.monitorDelta(ICause propagator)", "testcase": false, "constructor": false}, {"identifier": "getTypeAndKind", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTypeAndKind()", "full_signature": "@Override public int getTypeAndKind()", "class_method_signature": "BoolVarImpl.getTypeAndKind()", "testcase": false, "constructor": false}, {"identifier": "createScheduler", "parameters": "()", "modifiers": "@Override protected", "return": "EvtScheduler", "signature": "EvtScheduler createScheduler()", "full_signature": "@Override protected EvtScheduler createScheduler()", "class_method_signature": "BoolVarImpl.createScheduler()", "testcase": false, "constructor": false}, {"identifier": "getValueIterator", "parameters": "(boolean bottomUp)", "modifiers": "@Override public", "return": "DisposableValueIterator", "signature": "DisposableValueIterator getValueIterator(boolean bottomUp)", "full_signature": "@Override public DisposableValueIterator getValueIterator(boolean bottomUp)", "class_method_signature": "BoolVarImpl.getValueIterator(boolean bottomUp)", "testcase": false, "constructor": false}, {"identifier": "getRangeIterator", "parameters": "(boolean bottomUp)", "modifiers": "@Override public", "return": "DisposableRangeIterator", "signature": "DisposableRangeIterator getRangeIterator(boolean bottomUp)", "full_signature": "@Override public DisposableRangeIterator getRangeIterator(boolean bottomUp)", "class_method_signature": "BoolVarImpl.getRangeIterator(boolean bottomUp)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Integer>", "signature": "Iterator<Integer> iterator()", "full_signature": "@Override public Iterator<Integer> iterator()", "class_method_signature": "BoolVarImpl.iterator()", "testcase": false, "constructor": false}, {"identifier": "_setNot", "parameters": "(BoolVar neg)", "modifiers": "@Override public", "return": "void", "signature": "void _setNot(BoolVar neg)", "full_signature": "@Override public void _setNot(BoolVar neg)", "class_method_signature": "BoolVarImpl._setNot(BoolVar neg)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "()", "modifiers": "@Override public", "return": "BoolVar", "signature": "BoolVar not()", "full_signature": "@Override public BoolVar not()", "class_method_signature": "BoolVarImpl.not()", "testcase": false, "constructor": false}, {"identifier": "hasNot", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNot()", "full_signature": "@Override public boolean hasNot()", "class_method_signature": "BoolVarImpl.hasNot()", "testcase": false, "constructor": false}, {"identifier": "isLit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLit()", "full_signature": "@Override public boolean isLit()", "class_method_signature": "BoolVarImpl.isLit()", "testcase": false, "constructor": false}, {"identifier": "isNot", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNot()", "full_signature": "@Override public boolean isNot()", "class_method_signature": "BoolVarImpl.isNot()", "testcase": false, "constructor": false}, {"identifier": "setNot", "parameters": "(boolean isNot)", "modifiers": "@Override public", "return": "void", "signature": "void setNot(boolean isNot)", "full_signature": "@Override public void setNot(boolean isNot)", "class_method_signature": "BoolVarImpl.setNot(boolean isNot)", "testcase": false, "constructor": false}, {"identifier": "createLit", "parameters": "(IntIterableRangeSet rootDomain)", "modifiers": "@Override public", "return": "void", "signature": "void createLit(IntIterableRangeSet rootDomain)", "full_signature": "@Override public void createLit(IntIterableRangeSet rootDomain)", "class_method_signature": "BoolVarImpl.createLit(IntIterableRangeSet rootDomain)", "testcase": false, "constructor": false}, {"identifier": "getLit", "parameters": "()", "modifiers": "@Override public", "return": "SignedLiteral", "signature": "SignedLiteral getLit()", "full_signature": "@Override public SignedLiteral getLit()", "class_method_signature": "BoolVarImpl.getLit()", "testcase": false, "constructor": false}], "file": "solver/src/main/java/org/chocosolver/solver/variables/impl/BoolVarImpl.java"}, "focal_method": {"identifier": "updateLowerBound", "parameters": "(int value, ICause cause)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean updateLowerBound(int value, ICause cause) throws ContradictionException {\n        assert cause != null;\n        return value > kFALSE && instantiateTo(value, cause);\n    }", "signature": "boolean updateLowerBound(int value, ICause cause)", "full_signature": "@Override public boolean updateLowerBound(int value, ICause cause)", "class_method_signature": "BoolVarImpl.updateLowerBound(int value, ICause cause)", "testcase": false, "constructor": false, "invocations": ["instantiateTo"]}, "repository": {"repo_id": 2708082, "url": "https://github.com/chocoteam/choco-solver", "stars": 448, "created": "11/4/2011 9:09:18 AM +00:00", "updates": "2020-01-22T12:32:22+00:00", "fork": "False", "license": "licensed"}}