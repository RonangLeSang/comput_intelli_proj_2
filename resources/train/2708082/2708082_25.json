{"test_class": {"identifier": "SatSolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SatSolver sat;", "modifier": "private", "type": "SatSolver", "declarator": "sat", "var_name": "sat"}, {"original_string": "private int a, b, c, d;", "modifier": "private", "type": "int", "declarator": "a", "var_name": "a"}], "file": "sat/src/test/java/org/chocosolver/sat/SatSolverTest.java"}, "test_case": {"identifier": "testNbclauses", "parameters": "()", "modifiers": "@Test(groups = \"1s\") public", "return": "void", "body": "@Test(groups = \"1s\")\n    public void testNbclauses() throws Exception {\n\n    }", "signature": "void testNbclauses()", "full_signature": "@Test(groups = \"1s\") public void testNbclauses()", "class_method_signature": "SatSolverTest.testNbclauses()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "SatSolver", "superclass": "", "interfaces": "implements SatFactory", "fields": [{"original_string": "private static final int kUndefinedLiteral = -2;", "modifier": "private static final", "type": "int", "declarator": "kUndefinedLiteral = -2", "var_name": "kUndefinedLiteral"}, {"original_string": "public boolean ok_;", "modifier": "public", "type": "boolean", "declarator": "ok_", "var_name": "ok_"}, {"original_string": "public ArrayList<Clause> clauses;", "modifier": "public", "type": "ArrayList<Clause>", "declarator": "clauses", "var_name": "clauses"}, {"original_string": "public ArrayList<Clause> learnts;", "modifier": "public", "type": "ArrayList<Clause>", "declarator": "learnts", "var_name": "learnts"}, {"original_string": "private TIntObjectHashMap<ArrayList<Watcher>> watches_;", "modifier": "private", "type": "TIntObjectHashMap<ArrayList<Watcher>>", "declarator": "watches_", "var_name": "watches_"}, {"original_string": "public TIntObjectHashMap<TIntArrayList> implies_;", "modifier": "public", "type": "TIntObjectHashMap<TIntArrayList>", "declarator": "implies_", "var_name": "implies_"}, {"original_string": "TIntObjectHashMap<Boolean> assignment_;", "modifier": "", "type": "TIntObjectHashMap<Boolean>", "declarator": "assignment_", "var_name": "assignment_"}, {"original_string": "TIntArrayList trail_;", "modifier": "", "type": "TIntArrayList", "declarator": "trail_", "var_name": "trail_"}, {"original_string": "TIntArrayList trail_markers_;", "modifier": "", "type": "TIntArrayList", "declarator": "trail_markers_", "var_name": "trail_markers_"}, {"original_string": "int qhead_;", "modifier": "", "type": "int", "declarator": "qhead_", "var_name": "qhead_"}, {"original_string": "int num_vars_;", "modifier": "", "type": "int", "declarator": "num_vars_", "var_name": "num_vars_"}, {"original_string": "private TIntArrayList temporary_add_vector_;", "modifier": "private", "type": "TIntArrayList", "declarator": "temporary_add_vector_", "var_name": "temporary_add_vector_"}, {"original_string": "public TIntArrayList touched_variables_;", "modifier": "public", "type": "TIntArrayList", "declarator": "touched_variables_", "var_name": "touched_variables_"}], "methods": [{"identifier": "SatSolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " SatSolver()", "full_signature": "public  SatSolver()", "class_method_signature": "SatSolver.SatSolver()", "testcase": false, "constructor": true}, {"identifier": "_me", "parameters": "()", "modifiers": "@Override public", "return": "SatSolver", "signature": "SatSolver _me()", "full_signature": "@Override public SatSolver _me()", "class_method_signature": "SatSolver._me()", "testcase": false, "constructor": false}, {"identifier": "newVariable", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int newVariable()", "full_signature": "public int newVariable()", "class_method_signature": "SatSolver.newVariable()", "testcase": false, "constructor": false}, {"identifier": "addClause", "parameters": "(TIntList ps)", "modifiers": "public", "return": "boolean", "signature": "boolean addClause(TIntList ps)", "full_signature": "public boolean addClause(TIntList ps)", "class_method_signature": "SatSolver.addClause(TIntList ps)", "testcase": false, "constructor": false}, {"identifier": "learnClause", "parameters": "(int... ps)", "modifiers": "public", "return": "boolean", "signature": "boolean learnClause(int... ps)", "full_signature": "public boolean learnClause(int... ps)", "class_method_signature": "SatSolver.learnClause(int... ps)", "testcase": false, "constructor": false}, {"identifier": "addEmptyClause", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean addEmptyClause()", "full_signature": " boolean addEmptyClause()", "class_method_signature": "SatSolver.addEmptyClause()", "testcase": false, "constructor": false}, {"identifier": "addClause", "parameters": "(int l)", "modifiers": "public", "return": "boolean", "signature": "boolean addClause(int l)", "full_signature": "public boolean addClause(int l)", "class_method_signature": "SatSolver.addClause(int l)", "testcase": false, "constructor": false}, {"identifier": "addClause", "parameters": "(int p, int q)", "modifiers": "", "return": "boolean", "signature": "boolean addClause(int p, int q)", "full_signature": " boolean addClause(int p, int q)", "class_method_signature": "SatSolver.addClause(int p, int q)", "testcase": false, "constructor": false}, {"identifier": "addClause", "parameters": "(int p, int q, int r)", "modifiers": "", "return": "boolean", "signature": "boolean addClause(int p, int q, int r)", "full_signature": " boolean addClause(int p, int q, int r)", "class_method_signature": "SatSolver.addClause(int p, int q, int r)", "testcase": false, "constructor": false}, {"identifier": "initPropagator", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean initPropagator()", "full_signature": " boolean initPropagator()", "class_method_signature": "SatSolver.initPropagator()", "testcase": false, "constructor": false}, {"identifier": "cancelUntil", "parameters": "(int level)", "modifiers": "public", "return": "void", "signature": "void cancelUntil(int level)", "full_signature": "public void cancelUntil(int level)", "class_method_signature": "SatSolver.cancelUntil(int level)", "testcase": false, "constructor": false}, {"identifier": "trailMarker", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int trailMarker()", "full_signature": "public int trailMarker()", "class_method_signature": "SatSolver.trailMarker()", "testcase": false, "constructor": false}, {"identifier": "valueVar", "parameters": "(int x)", "modifiers": "", "return": "Boolean", "signature": "Boolean valueVar(int x)", "full_signature": " Boolean valueVar(int x)", "class_method_signature": "SatSolver.valueVar(int x)", "testcase": false, "constructor": false}, {"identifier": "valueLit", "parameters": "(int l)", "modifiers": "", "return": "Boolean", "signature": "Boolean valueLit(int l)", "full_signature": " Boolean valueLit(int l)", "class_method_signature": "SatSolver.valueLit(int l)", "testcase": false, "constructor": false}, {"identifier": "nClauses", "parameters": "()", "modifiers": "", "return": "int", "signature": "int nClauses()", "full_signature": " int nClauses()", "class_method_signature": "SatSolver.nClauses()", "testcase": false, "constructor": false}, {"identifier": "nLearnt", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int nLearnt()", "full_signature": "public int nLearnt()", "class_method_signature": "SatSolver.nLearnt()", "testcase": false, "constructor": false}, {"identifier": "propagateOneLiteral", "parameters": "(int lit)", "modifiers": "public", "return": "boolean", "signature": "boolean propagateOneLiteral(int lit)", "full_signature": "public boolean propagateOneLiteral(int lit)", "class_method_signature": "SatSolver.propagateOneLiteral(int lit)", "testcase": false, "constructor": false}, {"identifier": "incrementVariableCounter", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int incrementVariableCounter()", "full_signature": "private int incrementVariableCounter()", "class_method_signature": "SatSolver.incrementVariableCounter()", "testcase": false, "constructor": false}, {"identifier": "pushTrailMarker", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void pushTrailMarker()", "full_signature": "private void pushTrailMarker()", "class_method_signature": "SatSolver.pushTrailMarker()", "testcase": false, "constructor": false}, {"identifier": "uncheckedEnqueue", "parameters": "(int l)", "modifiers": "", "return": "void", "signature": "void uncheckedEnqueue(int l)", "full_signature": " void uncheckedEnqueue(int l)", "class_method_signature": "SatSolver.uncheckedEnqueue(int l)", "testcase": false, "constructor": false}, {"identifier": "dynUncheckedEnqueue", "parameters": "(int l)", "modifiers": "private", "return": "void", "signature": "void dynUncheckedEnqueue(int l)", "full_signature": "private void dynUncheckedEnqueue(int l)", "class_method_signature": "SatSolver.dynUncheckedEnqueue(int l)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(int l)", "modifiers": "private", "return": "boolean", "signature": "boolean enqueue(int l)", "full_signature": "private boolean enqueue(int l)", "class_method_signature": "SatSolver.enqueue(int l)", "testcase": false, "constructor": false}, {"identifier": "attachClause", "parameters": "(Clause cr)", "modifiers": "private", "return": "void", "signature": "void attachClause(Clause cr)", "full_signature": "private void attachClause(Clause cr)", "class_method_signature": "SatSolver.attachClause(Clause cr)", "testcase": false, "constructor": false}, {"identifier": "detachLearnt", "parameters": "(int ci)", "modifiers": "public", "return": "void", "signature": "void detachLearnt(int ci)", "full_signature": "public void detachLearnt(int ci)", "class_method_signature": "SatSolver.detachLearnt(int ci)", "testcase": false, "constructor": false}, {"identifier": "propagate", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean propagate()", "full_signature": " boolean propagate()", "class_method_signature": "SatSolver.propagate()", "testcase": false, "constructor": false}, {"identifier": "propagateClauses", "parameters": "(int p)", "modifiers": "private", "return": "boolean", "signature": "boolean propagateClauses(int p)", "full_signature": "private boolean propagateClauses(int p)", "class_method_signature": "SatSolver.propagateClauses(int p)", "testcase": false, "constructor": false}, {"identifier": "propagateImplies", "parameters": "(int p)", "modifiers": "private", "return": "boolean", "signature": "boolean propagateImplies(int p)", "full_signature": "private boolean propagateImplies(int p)", "class_method_signature": "SatSolver.propagateImplies(int p)", "testcase": false, "constructor": false}, {"identifier": "makeLiteral", "parameters": "(int var, boolean sign)", "modifiers": "public static", "return": "int", "signature": "int makeLiteral(int var, boolean sign)", "full_signature": "public static int makeLiteral(int var, boolean sign)", "class_method_signature": "SatSolver.makeLiteral(int var, boolean sign)", "testcase": false, "constructor": false}, {"identifier": "negated", "parameters": "(int l)", "modifiers": "public static", "return": "int", "signature": "int negated(int l)", "full_signature": "public static int negated(int l)", "class_method_signature": "SatSolver.negated(int l)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(int l)", "modifiers": "public static", "return": "boolean", "signature": "boolean sign(int l)", "full_signature": "public static boolean sign(int l)", "class_method_signature": "SatSolver.sign(int l)", "testcase": false, "constructor": false}, {"identifier": "var", "parameters": "(int l)", "modifiers": "public static", "return": "int", "signature": "int var(int l)", "full_signature": "public static int var(int l)", "class_method_signature": "SatSolver.var(int l)", "testcase": false, "constructor": false}, {"identifier": "makeBoolean", "parameters": "(boolean b)", "modifiers": "private static", "return": "Boolean", "signature": "Boolean makeBoolean(boolean b)", "full_signature": "private static Boolean makeBoolean(boolean b)", "class_method_signature": "SatSolver.makeBoolean(boolean b)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(Boolean a, boolean b)", "modifiers": "private static", "return": "Boolean", "signature": "Boolean xor(Boolean a, boolean b)", "full_signature": "private static Boolean xor(Boolean a, boolean b)", "class_method_signature": "SatSolver.xor(Boolean a, boolean b)", "testcase": false, "constructor": false}, {"identifier": "copyFrom", "parameters": "(SatSolver o)", "modifiers": "public", "return": "void", "signature": "void copyFrom(SatSolver o)", "full_signature": "public void copyFrom(SatSolver o)", "class_method_signature": "SatSolver.copyFrom(SatSolver o)", "testcase": false, "constructor": false}, {"identifier": "nbclauses", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long nbclauses()", "full_signature": "public long nbclauses()", "class_method_signature": "SatSolver.nbclauses()", "testcase": false, "constructor": false}, {"identifier": "numvars", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long numvars()", "full_signature": "public long numvars()", "class_method_signature": "SatSolver.numvars()", "testcase": false, "constructor": false}], "file": "sat/src/main/java/org/chocosolver/sat/SatSolver.java"}, "focal_method": {"identifier": "nbclauses", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long nbclauses() {\n        return clauses.size() + learnts.size() + implies_.size() / 2;\n    }", "signature": "long nbclauses()", "full_signature": "public long nbclauses()", "class_method_signature": "SatSolver.nbclauses()", "testcase": false, "constructor": false, "invocations": ["size", "size", "size"]}, "repository": {"repo_id": 2708082, "url": "https://github.com/chocoteam/choco-solver", "stars": 448, "created": "11/4/2011 9:09:18 AM +00:00", "updates": "2020-01-22T12:32:22+00:00", "fork": "False", "license": "licensed"}}