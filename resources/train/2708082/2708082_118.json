{"test_class": {"identifier": "LeqViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Model model;", "modifier": "", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "IntVar x;", "modifier": "", "type": "IntVar", "declarator": "x", "var_name": "x"}, {"original_string": "BoolVar b;", "modifier": "", "type": "BoolVar", "declarator": "b", "var_name": "b"}], "file": "solver/src/test/java/org/chocosolver/solver/variables/view/LeqViewTest.java"}, "test_case": {"identifier": "testNextValue2", "parameters": "()", "modifiers": "@Test(groups = \"1s\") public", "return": "void", "body": "@Test(groups = \"1s\")\n    public void testNextValue2() throws ContradictionException {\n        x.updateUpperBound(3, Cause.Null);\n        Assert.assertEquals(b.nextValue(-1), 1);\n        Assert.assertEquals(b.nextValue(0), 1);\n        Assert.assertEquals(b.nextValue(1), Integer.MAX_VALUE);\n    }", "signature": "void testNextValue2()", "full_signature": "@Test(groups = \"1s\") public void testNextValue2()", "class_method_signature": "LeqViewTest.testNextValue2()", "testcase": true, "constructor": false, "invocations": ["updateUpperBound", "assertEquals", "nextValue", "assertEquals", "nextValue", "assertEquals", "nextValue"]}, "focal_class": {"identifier": "LeqView", "superclass": "extends IntBoolView", "interfaces": "", "fields": [], "methods": [{"identifier": "LeqView", "parameters": "(final IntVar var, final int cste)", "modifiers": "public", "return": "", "signature": " LeqView(final IntVar var, final int cste)", "full_signature": "public  LeqView(final IntVar var, final int cste)", "class_method_signature": "LeqView.LeqView(final IntVar var, final int cste)", "testcase": false, "constructor": true}, {"identifier": "getBooleanValue", "parameters": "()", "modifiers": "@Override public", "return": "ESat", "signature": "ESat getBooleanValue()", "full_signature": "@Override public ESat getBooleanValue()", "class_method_signature": "LeqView.getBooleanValue()", "testcase": false, "constructor": false}, {"identifier": "instantiateTo", "parameters": "(int value, ICause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean instantiateTo(int value, ICause cause)", "full_signature": "@Override public boolean instantiateTo(int value, ICause cause)", "class_method_signature": "LeqView.instantiateTo(int value, ICause cause)", "testcase": false, "constructor": false}, {"identifier": "getDomainSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDomainSize()", "full_signature": "@Override public int getDomainSize()", "class_method_signature": "LeqView.getDomainSize()", "testcase": false, "constructor": false}, {"identifier": "isInstantiated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInstantiated()", "full_signature": "@Override public boolean isInstantiated()", "class_method_signature": "LeqView.isInstantiated()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(int value)", "full_signature": "@Override public boolean contains(int value)", "class_method_signature": "LeqView.contains(int value)", "testcase": false, "constructor": false}, {"identifier": "isInstantiatedTo", "parameters": "(int value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInstantiatedTo(int value)", "full_signature": "@Override public boolean isInstantiatedTo(int value)", "class_method_signature": "LeqView.isInstantiatedTo(int value)", "testcase": false, "constructor": false}, {"identifier": "getLB", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLB()", "full_signature": "@Override public int getLB()", "class_method_signature": "LeqView.getLB()", "testcase": false, "constructor": false}, {"identifier": "getUB", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getUB()", "full_signature": "@Override public int getUB()", "class_method_signature": "LeqView.getUB()", "testcase": false, "constructor": false}, {"identifier": "nextValue", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "signature": "int nextValue(int v)", "full_signature": "@Override public int nextValue(int v)", "class_method_signature": "LeqView.nextValue(int v)", "testcase": false, "constructor": false}, {"identifier": "nextValueOut", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "signature": "int nextValueOut(int v)", "full_signature": "@Override public int nextValueOut(int v)", "class_method_signature": "LeqView.nextValueOut(int v)", "testcase": false, "constructor": false}, {"identifier": "previousValue", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "signature": "int previousValue(int v)", "full_signature": "@Override public int previousValue(int v)", "class_method_signature": "LeqView.previousValue(int v)", "testcase": false, "constructor": false}, {"identifier": "previousValueOut", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "signature": "int previousValueOut(int v)", "full_signature": "@Override public int previousValueOut(int v)", "class_method_signature": "LeqView.previousValueOut(int v)", "testcase": false, "constructor": false}, {"identifier": "justifyEvent", "parameters": "(IntEventType mask, int one, int two, int three)", "modifiers": "@Override public", "return": "void", "signature": "void justifyEvent(IntEventType mask, int one, int two, int three)", "full_signature": "@Override public void justifyEvent(IntEventType mask, int one, int two, int three)", "class_method_signature": "LeqView.justifyEvent(IntEventType mask, int one, int two, int three)", "testcase": false, "constructor": false}, {"identifier": "explain", "parameters": "(int p, ExplanationForSignedClause explanation)", "modifiers": "@Override public", "return": "void", "signature": "void explain(int p, ExplanationForSignedClause explanation)", "full_signature": "@Override public void explain(int p, ExplanationForSignedClause explanation)", "class_method_signature": "LeqView.explain(int p, ExplanationForSignedClause explanation)", "testcase": false, "constructor": false}], "file": "solver/src/main/java/org/chocosolver/solver/variables/view/LeqView.java"}, "focal_method": {"identifier": "nextValue", "parameters": "(int v)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int nextValue(int v) {\n        if (v < 0 && contains(0)) {\n            return 0;\n        }\n        return v <= 0 && contains(1) ? 1 : Integer.MAX_VALUE;\n    }", "signature": "int nextValue(int v)", "full_signature": "@Override public int nextValue(int v)", "class_method_signature": "LeqView.nextValue(int v)", "testcase": false, "constructor": false, "invocations": ["contains", "contains"]}, "repository": {"repo_id": 2708082, "url": "https://github.com/chocoteam/choco-solver", "stars": 448, "created": "11/4/2011 9:09:18 AM +00:00", "updates": "2020-01-22T12:32:22+00:00", "fork": "False", "license": "licensed"}}