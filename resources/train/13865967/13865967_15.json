{"test_class": {"identifier": "ZipkinEmitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ZipkinSpanCollector zipkinSpanCollector;", "modifier": "@Mock\n    private", "type": "ZipkinSpanCollector", "declarator": "zipkinSpanCollector", "var_name": "zipkinSpanCollector"}, {"original_string": "@Mock\n    private ZipkinData zipkinData;", "modifier": "@Mock\n    private", "type": "ZipkinData", "declarator": "zipkinData", "var_name": "zipkinData"}, {"original_string": "@Mock\n    private Clock zipkinClock;", "modifier": "@Mock\n    private", "type": "Clock", "declarator": "zipkinClock", "var_name": "zipkinClock"}, {"original_string": "private ZipkinEmitter victim;", "modifier": "private", "type": "ZipkinEmitter", "declarator": "victim", "var_name": "victim"}, {"original_string": "private int serviceIPv4 = 2130706433;", "modifier": "private", "type": "int", "declarator": "serviceIPv4 = 2130706433", "var_name": "serviceIPv4"}, {"original_string": "private String serviceName = \"Service Name\";", "modifier": "private", "type": "String", "declarator": "serviceName = \"Service Name\"", "var_name": "serviceName"}, {"original_string": "private String spanName = \"Span Name\";", "modifier": "private", "type": "String", "declarator": "spanName = \"Span Name\"", "var_name": "spanName"}, {"original_string": "private long traceId = 123456789;", "modifier": "private", "type": "long", "declarator": "traceId = 123456789", "var_name": "traceId"}, {"original_string": "private long spanId = 987654321;", "modifier": "private", "type": "long", "declarator": "spanId = 987654321", "var_name": "spanId"}, {"original_string": "private short port = 9101;", "modifier": "private", "type": "short", "declarator": "port = 9101", "var_name": "port"}, {"original_string": "private Endpoint endpoint = new Endpoint(serviceIPv4, port, serviceName);", "modifier": "private", "type": "Endpoint", "declarator": "endpoint = new Endpoint(serviceIPv4, port, serviceName)", "var_name": "endpoint"}, {"original_string": "private long timestampMillis = 327;", "modifier": "private", "type": "long", "declarator": "timestampMillis = 327", "var_name": "timestampMillis"}, {"original_string": "private long timestampMicros = TimeUnit.MILLISECONDS.toMicros(timestampMillis);", "modifier": "private", "type": "long", "declarator": "timestampMicros = TimeUnit.MILLISECONDS.toMicros(timestampMillis)", "var_name": "timestampMicros"}, {"original_string": "private String key = \"key\";", "modifier": "private", "type": "String", "declarator": "key = \"key\"", "var_name": "key"}], "file": "cougar-framework/cougar-zipkin-common/src/test/java/com/betfair/cougar/modules/zipkin/impl/ZipkinEmitterTest.java"}, "test_case": {"identifier": "emitAnnotation_OnShortOverload_ShouldEmitAnnotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emitAnnotation_OnShortOverload_ShouldEmitAnnotation() {\n\n        short value = 327;\n        ByteBuffer wrappedValue = ByteBuffer.allocate(Short.SIZE / 8).putShort(value);\n        wrappedValue.flip();\n\n        BinaryAnnotation binaryAnnotation = new BinaryAnnotation(key, wrappedValue, AnnotationType.I16);\n        binaryAnnotation.setHost(endpoint);\n        List<Annotation> annotations = Collections.emptyList();\n\n        Span expectedSpan = new Span(traceId, spanName, spanId, annotations, Lists.newArrayList(binaryAnnotation));\n        expectedSpan.setParent_id(0);\n\n        victim.emitAnnotation(zipkinData, key, value);\n\n        verify(zipkinSpanCollector).collect(expectedSpan);\n    }", "signature": "void emitAnnotation_OnShortOverload_ShouldEmitAnnotation()", "full_signature": "@Test public void emitAnnotation_OnShortOverload_ShouldEmitAnnotation()", "class_method_signature": "ZipkinEmitterTest.emitAnnotation_OnShortOverload_ShouldEmitAnnotation()", "testcase": true, "constructor": false, "invocations": ["putShort", "allocate", "flip", "setHost", "emptyList", "newArrayList", "setParent_id", "emitAnnotation", "collect", "verify"]}, "focal_class": {"identifier": "ZipkinEmitter", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ZipkinEmitter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ZipkinEmitter.class)", "var_name": "LOGGER"}, {"original_string": "private int serviceIPv4;", "modifier": "private", "type": "int", "declarator": "serviceIPv4", "var_name": "serviceIPv4"}, {"original_string": "private String serviceName;", "modifier": "private", "type": "String", "declarator": "serviceName", "var_name": "serviceName"}, {"original_string": "private ZipkinSpanCollector zipkinSpanCollector;", "modifier": "private", "type": "ZipkinSpanCollector", "declarator": "zipkinSpanCollector", "var_name": "zipkinSpanCollector"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private BlockingQueue<?> zipkinSpanCollectorInternalQueue;", "modifier": "private", "type": "BlockingQueue<?>", "declarator": "zipkinSpanCollectorInternalQueue", "var_name": "zipkinSpanCollectorInternalQueue"}], "methods": [{"identifier": "ZipkinEmitter", "parameters": "(@Nonnull String serviceName, @Nonnull ZipkinSpanCollector zipkinSpanCollector,\n                         @Nonnull Clock clock)", "modifiers": "public", "return": "", "signature": " ZipkinEmitter(@Nonnull String serviceName, @Nonnull ZipkinSpanCollector zipkinSpanCollector,\n                         @Nonnull Clock clock)", "full_signature": "public  ZipkinEmitter(@Nonnull String serviceName, @Nonnull ZipkinSpanCollector zipkinSpanCollector,\n                         @Nonnull Clock clock)", "class_method_signature": "ZipkinEmitter.ZipkinEmitter(@Nonnull String serviceName, @Nonnull ZipkinSpanCollector zipkinSpanCollector,\n                         @Nonnull Clock clock)", "testcase": false, "constructor": true}, {"identifier": "ZipkinEmitter", "parameters": "(@Nonnull String serviceName, @Nonnull ZipkinSpanCollector zipkinSpanCollector,\n                         @Nonnull Clock clock, int serviceIPv4)", "modifiers": "public", "return": "", "signature": " ZipkinEmitter(@Nonnull String serviceName, @Nonnull ZipkinSpanCollector zipkinSpanCollector,\n                         @Nonnull Clock clock, int serviceIPv4)", "full_signature": "public  ZipkinEmitter(@Nonnull String serviceName, @Nonnull ZipkinSpanCollector zipkinSpanCollector,\n                         @Nonnull Clock clock, int serviceIPv4)", "class_method_signature": "ZipkinEmitter.ZipkinEmitter(@Nonnull String serviceName, @Nonnull ZipkinSpanCollector zipkinSpanCollector,\n                         @Nonnull Clock clock, int serviceIPv4)", "testcase": false, "constructor": true}, {"identifier": "emitServerReceive", "parameters": "(@Nonnull ZipkinData zipkinData)", "modifiers": "public", "return": "void", "signature": "void emitServerReceive(@Nonnull ZipkinData zipkinData)", "full_signature": "public void emitServerReceive(@Nonnull ZipkinData zipkinData)", "class_method_signature": "ZipkinEmitter.emitServerReceive(@Nonnull ZipkinData zipkinData)", "testcase": false, "constructor": false}, {"identifier": "emitServerSend", "parameters": "(@Nonnull ZipkinData zipkinData)", "modifiers": "public", "return": "void", "signature": "void emitServerSend(@Nonnull ZipkinData zipkinData)", "full_signature": "public void emitServerSend(@Nonnull ZipkinData zipkinData)", "class_method_signature": "ZipkinEmitter.emitServerSend(@Nonnull ZipkinData zipkinData)", "testcase": false, "constructor": false}, {"identifier": "emitClientSend", "parameters": "(@Nonnull ZipkinData zipkinData)", "modifiers": "public", "return": "void", "signature": "void emitClientSend(@Nonnull ZipkinData zipkinData)", "full_signature": "public void emitClientSend(@Nonnull ZipkinData zipkinData)", "class_method_signature": "ZipkinEmitter.emitClientSend(@Nonnull ZipkinData zipkinData)", "testcase": false, "constructor": false}, {"identifier": "emitClientReceive", "parameters": "(@Nonnull ZipkinData zipkinData)", "modifiers": "public", "return": "void", "signature": "void emitClientReceive(@Nonnull ZipkinData zipkinData)", "full_signature": "public void emitClientReceive(@Nonnull ZipkinData zipkinData)", "class_method_signature": "ZipkinEmitter.emitClientReceive(@Nonnull ZipkinData zipkinData)", "testcase": false, "constructor": false}, {"identifier": "buildAnnotationsStore", "parameters": "(@Nonnull ZipkinData zipkinData)", "modifiers": "@Nonnull public", "return": "ZipkinAnnotationsStore", "signature": "ZipkinAnnotationsStore buildAnnotationsStore(@Nonnull ZipkinData zipkinData)", "full_signature": "@Nonnull public ZipkinAnnotationsStore buildAnnotationsStore(@Nonnull ZipkinData zipkinData)", "class_method_signature": "ZipkinEmitter.buildAnnotationsStore(@Nonnull ZipkinData zipkinData)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotations", "parameters": "(@Nonnull ZipkinAnnotationsStore zipkinAnnotationsStore)", "modifiers": "public", "return": "void", "signature": "void emitAnnotations(@Nonnull ZipkinAnnotationsStore zipkinAnnotationsStore)", "full_signature": "public void emitAnnotations(@Nonnull ZipkinAnnotationsStore zipkinAnnotationsStore)", "class_method_signature": "ZipkinEmitter.emitAnnotations(@Nonnull ZipkinAnnotationsStore zipkinAnnotationsStore)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "modifiers": "public", "return": "void", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String key, @Nonnull String value)", "modifiers": "public", "return": "void", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, @Nonnull String value)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, @Nonnull String value)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, @Nonnull String value)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String key, short value)", "modifiers": "public", "return": "void", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, short value)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, short value)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, short value)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String key, int value)", "modifiers": "public", "return": "void", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, int value)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, int value)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, int value)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String key, long value)", "modifiers": "public", "return": "void", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, long value)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, long value)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, long value)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String key, double value)", "modifiers": "public", "return": "void", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, double value)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, double value)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, double value)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String key, boolean value)", "modifiers": "public", "return": "void", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, boolean value)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, boolean value)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, boolean value)", "testcase": false, "constructor": false}, {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String key, byte[] value)", "modifiers": "public", "return": "void", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, byte[] value)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, byte[] value)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "prepareEmission", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "modifiers": "@Nonnull private", "return": "ZipkinAnnotationsStore", "signature": "ZipkinAnnotationsStore prepareEmission(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "full_signature": "@Nonnull private ZipkinAnnotationsStore prepareEmission(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "class_method_signature": "ZipkinEmitter.prepareEmission(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "testcase": false, "constructor": false}, {"identifier": "generateEndpoint", "parameters": "(@Nonnull ZipkinData zipkinData)", "modifiers": "@Nonnull private", "return": "Endpoint", "signature": "Endpoint generateEndpoint(@Nonnull ZipkinData zipkinData)", "full_signature": "@Nonnull private Endpoint generateEndpoint(@Nonnull ZipkinData zipkinData)", "class_method_signature": "ZipkinEmitter.generateEndpoint(@Nonnull ZipkinData zipkinData)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "ZipkinEmitter.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "getCurrentQueueSize", "parameters": "()", "modifiers": "@ManagedAttribute public", "return": "int", "signature": "int getCurrentQueueSize()", "full_signature": "@ManagedAttribute public int getCurrentQueueSize()", "class_method_signature": "ZipkinEmitter.getCurrentQueueSize()", "testcase": false, "constructor": false}, {"identifier": "getRemainingQueueCapacity", "parameters": "()", "modifiers": "@ManagedAttribute public", "return": "int", "signature": "int getRemainingQueueCapacity()", "full_signature": "@ManagedAttribute public int getRemainingQueueCapacity()", "class_method_signature": "ZipkinEmitter.getRemainingQueueCapacity()", "testcase": false, "constructor": false}], "file": "cougar-framework/cougar-zipkin-common/src/main/java/com/betfair/cougar/modules/zipkin/impl/ZipkinEmitter.java"}, "focal_method": {"identifier": "emitAnnotation", "parameters": "(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "modifiers": "public", "return": "void", "body": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String s) {\n        long timestampMillis = clock.millis();\n        long timestampMicros = TimeUnit.MILLISECONDS.toMicros(timestampMillis);\n\n        ZipkinAnnotationsStore store = prepareEmission(zipkinData, s).addAnnotation(timestampMicros, s);\n        emitAnnotations(store);\n    }", "signature": "void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "full_signature": "public void emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "class_method_signature": "ZipkinEmitter.emitAnnotation(@Nonnull ZipkinData zipkinData, @Nonnull String s)", "testcase": false, "constructor": false, "invocations": ["millis", "toMicros", "addAnnotation", "prepareEmission", "emitAnnotations"]}, "repository": {"repo_id": 13865967, "url": "https://github.com/betfair/cougar", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 25, "size": 49594, "license": "licensed"}}