{"test_class": {"identifier": "ServiceRegistrationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServiceRegistration cut = new ServiceRegistration();", "modifier": "private", "type": "ServiceRegistration", "declarator": "cut = new ServiceRegistration()", "var_name": "cut"}, {"original_string": "private Set<BindingDescriptor> bindingDescriptorSet = new HashSet<BindingDescriptor>();", "modifier": "private", "type": "Set<BindingDescriptor>", "declarator": "bindingDescriptorSet = new HashSet<BindingDescriptor>()", "var_name": "bindingDescriptorSet"}, {"original_string": "@Mock\n    private ExecutableResolver executableResolver;", "modifier": "@Mock\n    private", "type": "ExecutableResolver", "declarator": "executableResolver", "var_name": "executableResolver"}, {"original_string": "@Mock\n    private Service service;", "modifier": "@Mock\n    private", "type": "Service", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private ServiceDefinition serviceDefinition;", "modifier": "@Mock\n    private", "type": "ServiceDefinition", "declarator": "serviceDefinition", "var_name": "serviceDefinition"}, {"original_string": "@Mock\n    private EventTransport eventTransport;", "modifier": "@Mock\n    private", "type": "EventTransport", "declarator": "eventTransport", "var_name": "eventTransport"}, {"original_string": "@Mock\n    private ExecutionContext executionContext;", "modifier": "@Mock\n    private", "type": "ExecutionContext", "declarator": "executionContext", "var_name": "executionContext"}, {"original_string": "@Mock\n    private ContainerAwareExecutionVenue ev;", "modifier": "@Mock\n    private", "type": "ContainerAwareExecutionVenue", "declarator": "ev", "var_name": "ev"}, {"original_string": "@Mock\n    private CompoundExecutableResolver compoundExecutableResolver;", "modifier": "@Mock\n    private", "type": "CompoundExecutableResolver", "declarator": "compoundExecutableResolver", "var_name": "compoundExecutableResolver"}], "file": "cougar-framework/cougar-core-impl/src/test/java/com/betfair/cougar/core/impl/ev/ServiceRegistrationTest.java"}, "test_case": {"identifier": "testIntroductionToEV", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIntroductionToEV() {\n        OperationDefinition[] opDefs = new OperationDefinition[] {\n            new SimpleOperationDefinition(\n                    new OperationKey(new ServiceVersion(\"v1.0\"), \"testService\", \"event\", OperationKey.Type.Event), null, null)\n        };\n        when(serviceDefinition.getOperationDefinitions(any(OperationKey.Type.class))).thenReturn(opDefs);\n\n\n        cut.introduceServiceToEV(ev, ev, compoundExecutableResolver);\n        verify((ServiceRegistrar)ev).registerService(eq((String) null), eq(serviceDefinition), eq(service), eq(compoundExecutableResolver));\n\n        ArgumentCaptor<OperationKey> keyCaptor = ArgumentCaptor.forClass(OperationKey.class);\n        verify(ev).execute(any(ExecutionContext.class), keyCaptor.capture(), any(Object[].class), any(ExecutionObserver.class), eq(DefaultTimeConstraints.NO_CONSTRAINTS));\n        assertTrue(keyCaptor.getValue().getType() == OperationKey.Type.Event);\n    }", "signature": "void testIntroductionToEV()", "full_signature": "@Test public void testIntroductionToEV()", "class_method_signature": "ServiceRegistrationTest.testIntroductionToEV()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getOperationDefinitions", "any", "introduceServiceToEV", "registerService", "verify", "eq", "eq", "eq", "eq", "forClass", "execute", "verify", "any", "capture", "any", "any", "eq", "assertTrue", "getType", "getValue"]}, "focal_class": {"identifier": "ServiceRegistration", "superclass": "extends AbstractServiceRegistration", "interfaces": "", "fields": [{"original_string": "private Set<EventTransport> eventTransports;", "modifier": "private", "type": "Set<EventTransport>", "declarator": "eventTransports", "var_name": "eventTransports"}], "methods": [{"identifier": "introduceServiceToEV", "parameters": "(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver)", "modifiers": "@Override public", "return": "void", "signature": "void introduceServiceToEV(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver)", "full_signature": "@Override public void introduceServiceToEV(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver)", "class_method_signature": "ServiceRegistration.introduceServiceToEV(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver)", "testcase": false, "constructor": false}, {"identifier": "introduceServiceToTransports", "parameters": "(Iterator<? extends BindingDescriptorRegistrationListener> transports)", "modifiers": "public", "return": "void", "signature": "void introduceServiceToTransports(Iterator<? extends BindingDescriptorRegistrationListener> transports)", "full_signature": "public void introduceServiceToTransports(Iterator<? extends BindingDescriptorRegistrationListener> transports)", "class_method_signature": "ServiceRegistration.introduceServiceToTransports(Iterator<? extends BindingDescriptorRegistrationListener> transports)", "testcase": false, "constructor": false}, {"identifier": "setEventTransports", "parameters": "(Set<EventTransport> eventTransportSet)", "modifiers": "public", "return": "void", "signature": "void setEventTransports(Set<EventTransport> eventTransportSet)", "full_signature": "public void setEventTransports(Set<EventTransport> eventTransportSet)", "class_method_signature": "ServiceRegistration.setEventTransports(Set<EventTransport> eventTransportSet)", "testcase": false, "constructor": false}], "file": "cougar-framework/cougar-core-impl/src/main/java/com/betfair/cougar/core/impl/ev/ServiceRegistration.java"}, "focal_method": {"identifier": "introduceServiceToEV", "parameters": "(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void introduceServiceToEV(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver) {\n        super.introduceServiceToEV(ev, serviceRegistrar, compoundExecutableResolver);\n\n        //Subscribe to the app for event publication on all event transports (if present)\n        if (eventTransports != null && !eventTransports.isEmpty()) {\n            for (final EventTransport eventTransport : eventTransports) {\n                for (OperationDefinition opDef : getServiceDefinition().getOperationDefinitions(OperationKey.Type.Event)) {\n                    ev.execute(eventTransport.getExecutionContext(), opDef.getOperationKey(), new Object[0], new ExecutionObserver() {\n                        @Override\n                        public void onResult(ExecutionResult result) {\n                            eventTransport.publish((Event)result.getResult());\n                        }\n                    }, DefaultTimeConstraints.NO_CONSTRAINTS);\n                }\n            }\n        }\n    }", "signature": "void introduceServiceToEV(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver)", "full_signature": "@Override public void introduceServiceToEV(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver)", "class_method_signature": "ServiceRegistration.introduceServiceToEV(ExecutionVenue ev, ServiceRegistrar serviceRegistrar, CompoundExecutableResolver compoundExecutableResolver)", "testcase": false, "constructor": false, "invocations": ["introduceServiceToEV", "isEmpty", "getOperationDefinitions", "getServiceDefinition", "execute", "getExecutionContext", "getOperationKey", "publish", "getResult"]}, "repository": {"repo_id": 13865967, "url": "https://github.com/betfair/cougar", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 25, "size": 49594, "license": "licensed"}}