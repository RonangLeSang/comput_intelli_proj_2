{"test_class": {"identifier": "StaticFileUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/util/src/test/java/org/openstack/atlas/util/staticutils/StaticFileUtilsTest.java"}, "test_case": {"identifier": "testGetDateStringFromFileNameWhenInvalidFileName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDateStringFromFileNameWhenInvalidFileName() {\n        String absoluteFileName = \"/var/log/zxtm/rotated/new-access_log.aggregated\";\n        boolean expectedException = false;\n        try {\n            StaticFileUtils.getDateStringFromFileName(absoluteFileName);\n        } catch (IllegalArgumentException e) {\n            expectedException = true;\n        }\n        Assert.assertEquals(true, expectedException);\n    }", "signature": "void testGetDateStringFromFileNameWhenInvalidFileName()", "full_signature": "@Test public void testGetDateStringFromFileNameWhenInvalidFileName()", "class_method_signature": "StaticFileUtilsTest.testGetDateStringFromFileNameWhenInvalidFileName()", "testcase": true, "constructor": false, "invocations": ["getDateStringFromFileName", "assertEquals"]}, "focal_class": {"identifier": "StaticFileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(StaticFileUtils.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(StaticFileUtils.class)", "var_name": "LOG"}, {"original_string": "public static DateFormat filedf = new SimpleDateFormat(\"yyyyMMddHH\");", "modifier": "public static", "type": "DateFormat", "declarator": "filedf = new SimpleDateFormat(\"yyyyMMddHH\")", "var_name": "filedf"}, {"original_string": "public static DateFormat jobdf = new SimpleDateFormat(\"yyyyMMdd-HHmmss\");", "modifier": "public static", "type": "DateFormat", "declarator": "jobdf = new SimpleDateFormat(\"yyyyMMdd-HHmmss\")", "var_name": "jobdf"}, {"original_string": "private static final int DEFAULT_BUFFSIZE = 1024 * 256;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_BUFFSIZE = 1024 * 256", "var_name": "DEFAULT_BUFFSIZE"}, {"original_string": "private static final Random rnd = new Random();", "modifier": "private static final", "type": "Random", "declarator": "rnd = new Random()", "var_name": "rnd"}, {"original_string": "private static final String MD5 = \"MD5\";", "modifier": "private static final", "type": "String", "declarator": "MD5 = \"MD5\"", "var_name": "MD5"}], "methods": [{"identifier": "generateRandomBase", "parameters": "()", "modifiers": "public static synchronized", "return": "String", "signature": "String generateRandomBase()", "full_signature": "public static synchronized String generateRandomBase()", "class_method_signature": "StaticFileUtils.generateRandomBase()", "testcase": false, "constructor": false}, {"identifier": "expandUser", "parameters": "(String pathIn)", "modifiers": "public static", "return": "String", "signature": "String expandUser(String pathIn)", "full_signature": "public static String expandUser(String pathIn)", "class_method_signature": "StaticFileUtils.expandUser(String pathIn)", "testcase": false, "constructor": false}, {"identifier": "openDataOutputStreamFile", "parameters": "(String fileName)", "modifiers": "public static", "return": "DataOutputStream", "signature": "DataOutputStream openDataOutputStreamFile(String fileName)", "full_signature": "public static DataOutputStream openDataOutputStreamFile(String fileName)", "class_method_signature": "StaticFileUtils.openDataOutputStreamFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "openDataInputStreamFile", "parameters": "(String fileName)", "modifiers": "public static", "return": "DataInputStream", "signature": "DataInputStream openDataInputStreamFile(String fileName)", "full_signature": "public static DataInputStream openDataInputStreamFile(String fileName)", "class_method_signature": "StaticFileUtils.openDataInputStreamFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "openDataOutputStreamFile", "parameters": "(String fileName, int buffsize)", "modifiers": "public static", "return": "DataOutputStream", "signature": "DataOutputStream openDataOutputStreamFile(String fileName, int buffsize)", "full_signature": "public static DataOutputStream openDataOutputStreamFile(String fileName, int buffsize)", "class_method_signature": "StaticFileUtils.openDataOutputStreamFile(String fileName, int buffsize)", "testcase": false, "constructor": false}, {"identifier": "openDataInputStreamFile", "parameters": "(String fileName, int buffsize)", "modifiers": "public static", "return": "DataInputStream", "signature": "DataInputStream openDataInputStreamFile(String fileName, int buffsize)", "full_signature": "public static DataInputStream openDataInputStreamFile(String fileName, int buffsize)", "class_method_signature": "StaticFileUtils.openDataInputStreamFile(String fileName, int buffsize)", "testcase": false, "constructor": false}, {"identifier": "readFile", "parameters": "(File file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readFile(File file)", "full_signature": "public static byte[] readFile(File file)", "class_method_signature": "StaticFileUtils.readFile(File file)", "testcase": false, "constructor": false}, {"identifier": "readFile", "parameters": "(String fileName)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readFile(String fileName)", "full_signature": "public static byte[] readFile(String fileName)", "class_method_signature": "StaticFileUtils.readFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "copyStreams", "parameters": "(InputStream is, OutputStream os, PrintStream ps, long isSize, int buffsize)", "modifiers": "public static", "return": "void", "signature": "void copyStreams(InputStream is, OutputStream os, PrintStream ps, long isSize, int buffsize)", "full_signature": "public static void copyStreams(InputStream is, OutputStream os, PrintStream ps, long isSize, int buffsize)", "class_method_signature": "StaticFileUtils.copyStreams(InputStream is, OutputStream os, PrintStream ps, long isSize, int buffsize)", "testcase": false, "constructor": false}, {"identifier": "copyStreams", "parameters": "(InputStream is, OutputStream os, PrintStream ps, int buffsize)", "modifiers": "public static", "return": "void", "signature": "void copyStreams(InputStream is, OutputStream os, PrintStream ps, int buffsize)", "full_signature": "public static void copyStreams(InputStream is, OutputStream os, PrintStream ps, int buffsize)", "class_method_signature": "StaticFileUtils.copyStreams(InputStream is, OutputStream os, PrintStream ps, int buffsize)", "testcase": false, "constructor": false}, {"identifier": "openOutputFile", "parameters": "(String fileName)", "modifiers": "public static", "return": "OutputStream", "signature": "OutputStream openOutputFile(String fileName)", "full_signature": "public static OutputStream openOutputFile(String fileName)", "class_method_signature": "StaticFileUtils.openOutputFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "openOutputFile", "parameters": "(String fileName, int buffsize)", "modifiers": "public static", "return": "OutputStream", "signature": "OutputStream openOutputFile(String fileName, int buffsize)", "full_signature": "public static OutputStream openOutputFile(String fileName, int buffsize)", "class_method_signature": "StaticFileUtils.openOutputFile(String fileName, int buffsize)", "testcase": false, "constructor": false}, {"identifier": "openInputFile", "parameters": "(String fileName)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream openInputFile(String fileName)", "full_signature": "public static InputStream openInputFile(String fileName)", "class_method_signature": "StaticFileUtils.openInputFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "openInputFile", "parameters": "(String fileName, int buffsize)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream openInputFile(String fileName, int buffsize)", "full_signature": "public static InputStream openInputFile(String fileName, int buffsize)", "class_method_signature": "StaticFileUtils.openInputFile(String fileName, int buffsize)", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getWorkingDirectory()", "full_signature": "public static String getWorkingDirectory()", "class_method_signature": "StaticFileUtils.getWorkingDirectory()", "testcase": false, "constructor": false}, {"identifier": "joinPath", "parameters": "(List<String> paths)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> joinPath(List<String> paths)", "full_signature": "public static List<String> joinPath(List<String> paths)", "class_method_signature": "StaticFileUtils.joinPath(List<String> paths)", "testcase": false, "constructor": false}, {"identifier": "splitPathList", "parameters": "(String pathName)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> splitPathList(String pathName)", "full_signature": "public static List<String> splitPathList(String pathName)", "class_method_signature": "StaticFileUtils.splitPathList(String pathName)", "testcase": false, "constructor": false}, {"identifier": "splitPath", "parameters": "(String pathName)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitPath(String pathName)", "full_signature": "public static String[] splitPath(String pathName)", "class_method_signature": "StaticFileUtils.splitPath(String pathName)", "testcase": false, "constructor": false}, {"identifier": "joinPath", "parameters": "(String firstPart, String secondPart)", "modifiers": "public static", "return": "String", "signature": "String joinPath(String firstPart, String secondPart)", "full_signature": "public static String joinPath(String firstPart, String secondPart)", "class_method_signature": "StaticFileUtils.joinPath(String firstPart, String secondPart)", "testcase": false, "constructor": false}, {"identifier": "joinPath", "parameters": "(String[] firstPart, String[] secondPart)", "modifiers": "public static", "return": "String[]", "signature": "String[] joinPath(String[] firstPart, String[] secondPart)", "full_signature": "public static String[] joinPath(String[] firstPart, String[] secondPart)", "class_method_signature": "StaticFileUtils.joinPath(String[] firstPart, String[] secondPart)", "testcase": false, "constructor": false}, {"identifier": "splitPathToString", "parameters": "(List<String> pathComps)", "modifiers": "public static", "return": "String", "signature": "String splitPathToString(List<String> pathComps)", "full_signature": "public static String splitPathToString(List<String> pathComps)", "class_method_signature": "StaticFileUtils.splitPathToString(List<String> pathComps)", "testcase": false, "constructor": false}, {"identifier": "splitPathToString", "parameters": "(String[] splitPath)", "modifiers": "public static", "return": "String", "signature": "String splitPathToString(String[] splitPath)", "full_signature": "public static String splitPathToString(String[] splitPath)", "class_method_signature": "StaticFileUtils.splitPathToString(String[] splitPath)", "testcase": false, "constructor": false}, {"identifier": "rebaseSplitPath", "parameters": "(String srcBase, String srcPath, String dstBase)", "modifiers": "public static", "return": "String", "signature": "String rebaseSplitPath(String srcBase, String srcPath, String dstBase)", "full_signature": "public static String rebaseSplitPath(String srcBase, String srcPath, String dstBase)", "class_method_signature": "StaticFileUtils.rebaseSplitPath(String srcBase, String srcPath, String dstBase)", "testcase": false, "constructor": false}, {"identifier": "rebaseSplitPath", "parameters": "(String[] srcBase, String[] srcPath, String[] dstBase)", "modifiers": "public static", "return": "String[]", "signature": "String[] rebaseSplitPath(String[] srcBase, String[] srcPath, String[] dstBase)", "full_signature": "public static String[] rebaseSplitPath(String[] srcBase, String[] srcPath, String[] dstBase)", "class_method_signature": "StaticFileUtils.rebaseSplitPath(String[] srcBase, String[] srcPath, String[] dstBase)", "testcase": false, "constructor": false}, {"identifier": "stripBeginingPath", "parameters": "(String[] splitPath, int nTimes)", "modifiers": "public static", "return": "String[]", "signature": "String[] stripBeginingPath(String[] splitPath, int nTimes)", "full_signature": "public static String[] stripBeginingPath(String[] splitPath, int nTimes)", "class_method_signature": "StaticFileUtils.stripBeginingPath(String[] splitPath, int nTimes)", "testcase": false, "constructor": false}, {"identifier": "directoryNameFromFullPath", "parameters": "(String fullFilePath)", "modifiers": "public static", "return": "String", "signature": "String directoryNameFromFullPath(String fullFilePath)", "full_signature": "public static String directoryNameFromFullPath(String fullFilePath)", "class_method_signature": "StaticFileUtils.directoryNameFromFullPath(String fullFilePath)", "testcase": false, "constructor": false}, {"identifier": "stripDirectoryFromFileName", "parameters": "(String fullFilePath)", "modifiers": "public static", "return": "String", "signature": "String stripDirectoryFromFileName(String fullFilePath)", "full_signature": "public static String stripDirectoryFromFileName(String fullFilePath)", "class_method_signature": "StaticFileUtils.stripDirectoryFromFileName(String fullFilePath)", "testcase": false, "constructor": false}, {"identifier": "pathTail", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String pathTail(String path)", "full_signature": "public static String pathTail(String path)", "class_method_signature": "StaticFileUtils.pathTail(String path)", "testcase": false, "constructor": false}, {"identifier": "stripEndPath", "parameters": "(String[] splitPath, int nTimes)", "modifiers": "public static", "return": "String[]", "signature": "String[] stripEndPath(String[] splitPath, int nTimes)", "full_signature": "public static String[] stripEndPath(String[] splitPath, int nTimes)", "class_method_signature": "StaticFileUtils.stripEndPath(String[] splitPath, int nTimes)", "testcase": false, "constructor": false}, {"identifier": "listDir", "parameters": "(String filePath)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> listDir(String filePath)", "full_signature": "public static List<String> listDir(String filePath)", "class_method_signature": "StaticFileUtils.listDir(String filePath)", "testcase": false, "constructor": false}, {"identifier": "readInputStream", "parameters": "(InputStream fis, int buffSize)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readInputStream(InputStream fis, int buffSize)", "full_signature": "public static byte[] readInputStream(InputStream fis, int buffSize)", "class_method_signature": "StaticFileUtils.readInputStream(InputStream fis, int buffSize)", "testcase": false, "constructor": false}, {"identifier": "readInputStream", "parameters": "(InputStream fis)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readInputStream(InputStream fis)", "full_signature": "public static byte[] readInputStream(InputStream fis)", "class_method_signature": "StaticFileUtils.readInputStream(InputStream fis)", "testcase": false, "constructor": false}, {"identifier": "computeCrc", "parameters": "(InputStream fis)", "modifiers": "public static", "return": "long", "signature": "long computeCrc(InputStream fis)", "full_signature": "public static long computeCrc(InputStream fis)", "class_method_signature": "StaticFileUtils.computeCrc(InputStream fis)", "testcase": false, "constructor": false}, {"identifier": "mkParentDir", "parameters": "(String filePath)", "modifiers": "public static", "return": "void", "signature": "void mkParentDir(String filePath)", "full_signature": "public static void mkParentDir(String filePath)", "class_method_signature": "StaticFileUtils.mkParentDir(String filePath)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "(String propertiesPath)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadProperties(String propertiesPath)", "full_signature": "public static Properties loadProperties(String propertiesPath)", "class_method_signature": "StaticFileUtils.loadProperties(String propertiesPath)", "testcase": false, "constructor": false}, {"identifier": "sanitizeDir", "parameters": "(String dir)", "modifiers": "public static", "return": "String", "signature": "String sanitizeDir(String dir)", "full_signature": "public static String sanitizeDir(String dir)", "class_method_signature": "StaticFileUtils.sanitizeDir(String dir)", "testcase": false, "constructor": false}, {"identifier": "getLocalCachedFiles", "parameters": "(String cacheLocation)", "modifiers": "public static", "return": "Map<String, List>", "signature": "Map<String, List> getLocalCachedFiles(String cacheLocation)", "full_signature": "public static Map<String, List> getLocalCachedFiles(String cacheLocation)", "class_method_signature": "StaticFileUtils.getLocalCachedFiles(String cacheLocation)", "testcase": false, "constructor": false}, {"identifier": "getLogFileTime", "parameters": "(String absoluteFileName)", "modifiers": "public static", "return": "String", "signature": "String getLogFileTime(String absoluteFileName)", "full_signature": "public static String getLogFileTime(String absoluteFileName)", "class_method_signature": "StaticFileUtils.getLogFileTime(String absoluteFileName)", "testcase": false, "constructor": false}, {"identifier": "deleteLocalFile", "parameters": "(String fileName)", "modifiers": "public static", "return": "void", "signature": "void deleteLocalFile(String fileName)", "full_signature": "public static void deleteLocalFile(String fileName)", "class_method_signature": "StaticFileUtils.deleteLocalFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "deleteFilesOlderThanNDays", "parameters": "(String location, int nDays)", "modifiers": "public static", "return": "void", "signature": "void deleteFilesOlderThanNDays(String location, int nDays)", "full_signature": "public static void deleteFilesOlderThanNDays(String location, int nDays)", "class_method_signature": "StaticFileUtils.deleteFilesOlderThanNDays(String location, int nDays)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String location, long purgeTime)", "modifiers": "public static", "return": "void", "signature": "void delete(String location, long purgeTime)", "full_signature": "public static void delete(String location, long purgeTime)", "class_method_signature": "StaticFileUtils.delete(String location, long purgeTime)", "testcase": false, "constructor": false}, {"identifier": "getDateFromFileName", "parameters": "(String fileName)", "modifiers": "public static", "return": "Date", "signature": "Date getDateFromFileName(String fileName)", "full_signature": "public static Date getDateFromFileName(String fileName)", "class_method_signature": "StaticFileUtils.getDateFromFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getDateStringFromFileName", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String getDateStringFromFileName(String fileName)", "full_signature": "public static String getDateStringFromFileName(String fileName)", "class_method_signature": "StaticFileUtils.getDateStringFromFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getNewestFile", "parameters": "(List<String> fileNames)", "modifiers": "public static", "return": "String", "signature": "String getNewestFile(List<String> fileNames)", "full_signature": "public static String getNewestFile(List<String> fileNames)", "class_method_signature": "StaticFileUtils.getNewestFile(List<String> fileNames)", "testcase": false, "constructor": false}, {"identifier": "getTotalTimeTaken", "parameters": "(String dateStart)", "modifiers": "public static", "return": "String", "signature": "String getTotalTimeTaken(String dateStart)", "full_signature": "public static String getTotalTimeTaken(String dateStart)", "class_method_signature": "StaticFileUtils.getTotalTimeTaken(String dateStart)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(String dateString, DateFormat format)", "modifiers": "public static", "return": "Date", "signature": "Date getDate(String dateString, DateFormat format)", "full_signature": "public static Date getDate(String dateString, DateFormat format)", "class_method_signature": "StaticFileUtils.getDate(String dateString, DateFormat format)", "testcase": false, "constructor": false}, {"identifier": "getMonthYearFromFileDate", "parameters": "(String dateString)", "modifiers": "public static", "return": "String", "signature": "String getMonthYearFromFileDate(String dateString)", "full_signature": "public static String getMonthYearFromFileDate(String dateString)", "class_method_signature": "StaticFileUtils.getMonthYearFromFileDate(String dateString)", "testcase": false, "constructor": false}, {"identifier": "inputStreamToBufferedReader", "parameters": "(InputStream is)", "modifiers": "public static", "return": "BufferedReader", "signature": "BufferedReader inputStreamToBufferedReader(InputStream is)", "full_signature": "public static BufferedReader inputStreamToBufferedReader(InputStream is)", "class_method_signature": "StaticFileUtils.inputStreamToBufferedReader(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getRnd", "parameters": "()", "modifiers": "public static", "return": "Random", "signature": "Random getRnd()", "full_signature": "public static Random getRnd()", "class_method_signature": "StaticFileUtils.getRnd()", "testcase": false, "constructor": false}, {"identifier": "isSymLink", "parameters": "(String filePath)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSymLink(String filePath)", "full_signature": "public static boolean isSymLink(String filePath)", "class_method_signature": "StaticFileUtils.isSymLink(String filePath)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Closeable stream)", "modifiers": "public static", "return": "void", "signature": "void close(Closeable stream)", "full_signature": "public static void close(Closeable stream)", "class_method_signature": "StaticFileUtils.close(Closeable stream)", "testcase": false, "constructor": false}, {"identifier": "inputStreamToBufferedReader", "parameters": "(InputStream is, int buffSize)", "modifiers": "public static", "return": "BufferedReader", "signature": "BufferedReader inputStreamToBufferedReader(InputStream is, int buffSize)", "full_signature": "public static BufferedReader inputStreamToBufferedReader(InputStream is, int buffSize)", "class_method_signature": "StaticFileUtils.inputStreamToBufferedReader(InputStream is, int buffSize)", "testcase": false, "constructor": false}, {"identifier": "mergePathString", "parameters": "(String... pathArray)", "modifiers": "public static", "return": "String", "signature": "String mergePathString(String... pathArray)", "full_signature": "public static String mergePathString(String... pathArray)", "class_method_signature": "StaticFileUtils.mergePathString(String... pathArray)", "testcase": false, "constructor": false}, {"identifier": "openRandomReadFile", "parameters": "(String filePath)", "modifiers": "public static", "return": "RandomAccessFile", "signature": "RandomAccessFile openRandomReadFile(String filePath)", "full_signature": "public static RandomAccessFile openRandomReadFile(String filePath)", "class_method_signature": "StaticFileUtils.openRandomReadFile(String filePath)", "testcase": false, "constructor": false}, {"identifier": "fileSize", "parameters": "(String filePath)", "modifiers": "public static", "return": "long", "signature": "long fileSize(String filePath)", "full_signature": "public static long fileSize(String filePath)", "class_method_signature": "StaticFileUtils.fileSize(String filePath)", "testcase": false, "constructor": false}, {"identifier": "drainInputStream", "parameters": "(InputStream is)", "modifiers": "public static", "return": "void", "signature": "void drainInputStream(InputStream is)", "full_signature": "public static void drainInputStream(InputStream is)", "class_method_signature": "StaticFileUtils.drainInputStream(InputStream is)", "testcase": false, "constructor": false}], "file": "common/util/src/main/java/org/openstack/atlas/util/staticutils/StaticFileUtils.java"}, "focal_method": {"identifier": "getDateStringFromFileName", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "body": "public static String getDateStringFromFileName(String fileName) {\n        // /var/log/zxtm/rotated/2011021513-access_log.aggregated\n        int start = fileName.lastIndexOf(\"/\");\n        fileName = fileName.substring(start + 1, fileName.length());\n        String arr[] = fileName.split(\"-\");\n        String dateString = arr[0];\n        if (!dateString.matches(\"\\\\d{10}\")) {\n            throw new IllegalArgumentException(\"File names must be in the following format: 'yyyyMMddHH-access_log.aggregated' eg. 2011021513-access_log.aggregated\");\n        }\n        return dateString;\n    }", "signature": "String getDateStringFromFileName(String fileName)", "full_signature": "public static String getDateStringFromFileName(String fileName)", "class_method_signature": "StaticFileUtils.getDateStringFromFileName(String fileName)", "testcase": false, "constructor": false, "invocations": ["lastIndexOf", "substring", "length", "split", "matches"]}, "repository": {"repo_id": 2038852, "url": "https://github.com/rackerlabs/atlas-lb", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 21, "size": 126552, "license": "licensed"}}