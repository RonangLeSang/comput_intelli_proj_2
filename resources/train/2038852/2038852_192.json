{"test_class": {"identifier": "HostNameVerifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HostNameVerifier hostNameVerifier;", "modifier": "private", "type": "HostNameVerifier", "declarator": "hostNameVerifier", "var_name": "hostNameVerifier"}], "file": "api/common-api/src/test/java/org/openstack/atlas/api/validation/verifiers/HostNameVerifierTest.java"}, "test_case": {"identifier": "passCase9", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void passCase9() {\n        VerifierResult result = hostNameVerifier.verify(\"hostname1.com\");\n        Assert.assertTrue(result.passed());\n    }", "signature": "void passCase9()", "full_signature": "@Test public void passCase9()", "class_method_signature": "HostNameVerifierTest.passCase9()", "testcase": true, "constructor": false, "invocations": ["verify", "assertTrue", "passed"]}, "focal_class": {"identifier": "HostNameVerifier", "superclass": "", "interfaces": "implements Verifier<String>", "fields": [], "methods": [{"identifier": "verify", "parameters": "(String hostName)", "modifiers": "@Override public", "return": "VerifierResult", "signature": "VerifierResult verify(String hostName)", "full_signature": "@Override public VerifierResult verify(String hostName)", "class_method_signature": "HostNameVerifier.verify(String hostName)", "testcase": false, "constructor": false}], "file": "api/common-api/src/main/java/org/openstack/atlas/api/validation/verifiers/HostNameVerifier.java"}, "focal_method": {"identifier": "verify", "parameters": "(String hostName)", "modifiers": "@Override public", "return": "VerifierResult", "body": "@Override\n    public VerifierResult verify(String hostName) {\n        List<ValidationResult> validationResults = new ArrayList<ValidationResult>();\n        String hostNameRegex = \"^(([a-zA-Z0-9\\\\*]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])$\";\n\n        try {\n            Pattern p = Pattern.compile(hostNameRegex);\n            Matcher m = p.matcher(hostName);\n            boolean matchFound = m.matches();\n\n            if (matchFound) {\n                return new VerifierResult(true);\n            } else if (!matchFound) {\n                validationResults.add(new ValidationResult(false, \"Must provide a valid host name\"));\n                return new VerifierResult(false, validationResults);\n            }\n\n        } catch (PatternSyntaxException exception) {\n            validationResults.add(new ValidationResult(false, \"Must provide a valid host name\"));\n            return new VerifierResult(false, validationResults);\n        }\n\n        return new VerifierResult(true, validationResults);\n    }", "signature": "VerifierResult verify(String hostName)", "full_signature": "@Override public VerifierResult verify(String hostName)", "class_method_signature": "HostNameVerifier.verify(String hostName)", "testcase": false, "constructor": false, "invocations": ["compile", "matcher", "matches", "add", "add"]}, "repository": {"repo_id": 2038852, "url": "https://github.com/rackerlabs/atlas-lb", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 21, "size": 126552, "license": "licensed"}}