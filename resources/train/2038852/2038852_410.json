{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/ca/rsa/src/test/java/org/openstack/atlas/util/ca/StringUtilsTest.java"}, "test_case": {"identifier": "testEscape_html", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEscape_html() {\n        System.out.println(\"escape_html\");\n        String html = \"<html>\\\"Tom & Jerry\\\"\\n</html>\";\n        String expResult = \"&lt;html&gt;&quot;Tom&nbsp;&amp;&nbsp;Jerry&quot;<br/>&lt;/html&gt;\";\n        String result = StringUtils.escape_html(html);\n        assertEquals(expResult, result);\n    }", "signature": "void testEscape_html()", "full_signature": "@Test public void testEscape_html()", "class_method_signature": "StringUtilsTest.testEscape_html()", "testcase": true, "constructor": false, "invocations": ["println", "escape_html", "assertEquals"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String USASCII = \"US-ASCII\";", "modifier": "private static final", "type": "String", "declarator": "USASCII = \"US-ASCII\"", "var_name": "USASCII"}], "methods": [{"identifier": "displayParsedInt", "parameters": "(String strIn)", "modifiers": "public static", "return": "String", "signature": "String displayParsedInt(String strIn)", "full_signature": "public static String displayParsedInt(String strIn)", "class_method_signature": "StringUtils.displayParsedInt(String strIn)", "testcase": false, "constructor": false}, {"identifier": "escape_html", "parameters": "(String html)", "modifiers": "public static", "return": "String", "signature": "String escape_html(String html)", "full_signature": "public static String escape_html(String html)", "class_method_signature": "StringUtils.escape_html(String html)", "testcase": false, "constructor": false}, {"identifier": "getEST", "parameters": "(Throwable th)", "modifiers": "public static", "return": "String", "signature": "String getEST(Throwable th)", "full_signature": "public static String getEST(Throwable th)", "class_method_signature": "StringUtils.getEST(Throwable th)", "testcase": false, "constructor": false}, {"identifier": "getExtendedStackTrace", "parameters": "(Throwable th)", "modifiers": "public static", "return": "String", "signature": "String getExtendedStackTrace(Throwable th)", "full_signature": "public static String getExtendedStackTrace(Throwable th)", "class_method_signature": "StringUtils.getExtendedStackTrace(Throwable th)", "testcase": false, "constructor": false}, {"identifier": "joinString", "parameters": "(Collection<T> objects, String delim)", "modifiers": "public static", "return": "String", "signature": "String joinString(Collection<T> objects, String delim)", "full_signature": "public static String joinString(Collection<T> objects, String delim)", "class_method_signature": "StringUtils.joinString(Collection<T> objects, String delim)", "testcase": false, "constructor": false}, {"identifier": "asciiString", "parameters": "(byte[] asciiBytes)", "modifiers": "public static", "return": "String", "signature": "String asciiString(byte[] asciiBytes)", "full_signature": "public static String asciiString(byte[] asciiBytes)", "class_method_signature": "StringUtils.asciiString(byte[] asciiBytes)", "testcase": false, "constructor": false}, {"identifier": "asciiBytes", "parameters": "(String asciiStr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] asciiBytes(String asciiStr)", "full_signature": "public static byte[] asciiBytes(String asciiStr)", "class_method_signature": "StringUtils.asciiBytes(String asciiStr)", "testcase": false, "constructor": false}, {"identifier": "strEquals", "parameters": "(String a, String b)", "modifiers": "public static", "return": "boolean", "signature": "boolean strEquals(String a, String b)", "full_signature": "public static boolean strEquals(String a, String b)", "class_method_signature": "StringUtils.strEquals(String a, String b)", "testcase": false, "constructor": false}, {"identifier": "lineWrap", "parameters": "(String strIn,int cols)", "modifiers": "public static", "return": "String", "signature": "String lineWrap(String strIn,int cols)", "full_signature": "public static String lineWrap(String strIn,int cols)", "class_method_signature": "StringUtils.lineWrap(String strIn,int cols)", "testcase": false, "constructor": false}], "file": "common/ca/rsa/src/main/java/org/openstack/atlas/util/ca/StringUtils.java"}, "focal_method": {"identifier": "escape_html", "parameters": "(String html)", "modifiers": "public static", "return": "String", "body": "public static String escape_html(String html) {\n        StringBuilder sb = new StringBuilder();\n        char ch;\n        int len = html.length();\n        int i;\n        for (i = 0; i < len; i++) {\n            ch = html.charAt(i);\n            switch (ch) {\n                case ' ':\n                    sb.append(\"&nbsp;\");\n                    break;\n                case '<':\n                    sb.append(\"&lt;\");\n                    break;\n                case '>':\n                    sb.append(\"&gt;\");\n                    break;\n                case '\"':\n                    sb.append(\"&quot;\");\n                    break;\n                case '&':\n                    sb.append(\"&amp;\");\n                    break;\n                case '\\n':\n                    sb.append(\"<br/>\");\n                    break;\n                default:\n                    sb.append(ch);\n                    break;\n            }\n        }\n        return sb.toString();\n    }", "signature": "String escape_html(String html)", "full_signature": "public static String escape_html(String html)", "class_method_signature": "StringUtils.escape_html(String html)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "append", "append", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 2038852, "url": "https://github.com/rackerlabs/atlas-lb", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 21, "size": 126552, "license": "licensed"}}