{"test_class": {"identifier": "IdentityResponseWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Response responseMock;", "modifier": "@Mock", "type": "Response", "declarator": "responseMock", "var_name": "responseMock"}, {"original_string": "IdentityFault ifault;", "modifier": "", "type": "IdentityFault", "declarator": "ifault", "var_name": "ifault"}], "file": "rest-clients/auth/src/test/java/org/openstack/atlas/restclients/auth/wrapper/IdentityResponseWrapperTest.java"}, "test_case": {"identifier": "shouldReturnIdentityFault501", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnIdentityFault501() throws IOException, IdentityFault {\n        BadRequestFault rf = new BadRequestFault();\n        rf.setCode(501);\n        rf.setMessage(\"fault\");\n        rf.setDetails(\"details\");\n        Mockito.when(responseMock.readEntity((Class<Object>) Matchers.any())).thenReturn(rf);\n        Mockito.when(responseMock.getStatus()).thenReturn(IdentityConstants.NOT_IMPLMENTED);\n        Assert.assertEquals(IdentityConstants.NOT_IMPLMENTED, IdentityResponseWrapper.buildFaultMessage(responseMock).getCode());\n    }", "signature": "void shouldReturnIdentityFault501()", "full_signature": "@Test public void shouldReturnIdentityFault501()", "class_method_signature": "IdentityResponseWrapperTest.shouldReturnIdentityFault501()", "testcase": true, "constructor": false, "invocations": ["setCode", "setMessage", "setDetails", "thenReturn", "when", "readEntity", "any", "thenReturn", "when", "getStatus", "assertEquals", "getCode", "buildFaultMessage"]}, "focal_class": {"identifier": "IdentityResponseWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog(IdentityResponseWrapper.class);", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog(IdentityResponseWrapper.class)", "var_name": "logger"}], "methods": [{"identifier": "buildFaultMessage", "parameters": "(Response response)", "modifiers": "public static", "return": "IdentityFault", "signature": "IdentityFault buildFaultMessage(Response response)", "full_signature": "public static IdentityFault buildFaultMessage(Response response)", "class_method_signature": "IdentityResponseWrapper.buildFaultMessage(Response response)", "testcase": false, "constructor": false}, {"identifier": "processIdentityFault", "parameters": "(org.openstack.identity.client.faults.IdentityFault e)", "modifiers": "private static", "return": "IdentityFault", "signature": "IdentityFault processIdentityFault(org.openstack.identity.client.faults.IdentityFault e)", "full_signature": "private static IdentityFault processIdentityFault(org.openstack.identity.client.faults.IdentityFault e)", "class_method_signature": "IdentityResponseWrapper.processIdentityFault(org.openstack.identity.client.faults.IdentityFault e)", "testcase": false, "constructor": false}], "file": "rest-clients/auth/src/main/java/org/openstack/atlas/restclients/auth/wrapper/IdentityResponseWrapper.java"}, "focal_method": {"identifier": "buildFaultMessage", "parameters": "(Response response)", "modifiers": "public static", "return": "IdentityFault", "body": "public static IdentityFault buildFaultMessage(Response response) throws IdentityFault {\n        //TODO: this can be better\n        if (response != null) {\n            logger.info(\"ResponseWrapper, response status code is: \" + response.getStatus());\n            try {\n                if (response.getStatus() == IdentityConstants.BAD_REQUEST) {\n                    BadRequestFault e = response.readEntity(BadRequestFault.class);\n                        return processIdentityFault(e);\n                }\n                if (response.getStatus() == IdentityConstants.UNAUTHORIZED) {\n                    UnauthorizedFault e = response.readEntity(UnauthorizedFault.class);\n                    return new IdentityFault(e.getMessage(), e.getDetails(), e.getCode());\n                }\n                if (response.getStatus() == IdentityConstants.FORBIDDEN) {\n                    UserDisabledFault udf = response.readEntity(UserDisabledFault.class);\n                    if (udf != null) {\n                        return processIdentityFault(udf);\n                    } else {\n                        ForbiddenFault e = response.readEntity(ForbiddenFault.class);\n                        return processIdentityFault(e);\n                    }\n                }\n                if (response.getStatus() == IdentityConstants.NOT_FOUND) {\n                    ItemNotFoundFault e = response.readEntity(ItemNotFoundFault.class);\n                    return processIdentityFault(e);\n                }\n                if (response.getStatus() == IdentityConstants.NOT_PERMITTED) {\n                    return new IdentityFault(\"Operation not allowed\", \"The requested resource or operation could not be found\", IdentityConstants.NOT_PERMITTED);\n                }\n                if (response.getStatus() == IdentityConstants.NAME_CONFLICT) {\n                    TenantConflictFault e = response.readEntity(TenantConflictFault.class);\n                    return processIdentityFault(e);\n                }\n                if (response.getStatus() == IdentityConstants.SERVICE_UNAVAILABLE) {\n                    ServiceUnavailableFault e = response.readEntity(ServiceUnavailableFault.class);\n                    return processIdentityFault(e);\n                }\n                if (response.getStatus() == IdentityConstants.NOT_IMPLMENTED) {\n                    BadRequestFault e = response.readEntity(BadRequestFault.class);\n                    return processIdentityFault(e);\n                }\n                if (response.getStatus() == IdentityConstants.AUTH_FAULT) {\n                    org.openstack.identity.client.faults.IdentityFault e = response.readEntity(org.openstack.identity.client.faults.IdentityFault.class);\n                    return processIdentityFault(e);\n                }\n            } catch (Exception ex) {\n                logger.error(\"Exception was thrown for response with status: \" + response.getStatus());\n                if (ex instanceof UnsupportedOperationException) {\n                    throw new IdentityFault(\"There was an error communicating with the auth service...\", ex.getLocalizedMessage(), response.getStatus());\n                }\n                logger.error(\"Exception was thrown and could not be handled by the client. Response status code: \" + response.getStatus());\n                throw new IdentityFault(ex.getMessage(), ex.getLocalizedMessage(), response.getStatus());\n            }\n        }\n        return new IdentityFault(\"Unable to process request.\", \"There was an unexpected error communicating with the auth service.\", IdentityConstants.AUTH_FAULT);\n    }", "signature": "IdentityFault buildFaultMessage(Response response)", "full_signature": "public static IdentityFault buildFaultMessage(Response response)", "class_method_signature": "IdentityResponseWrapper.buildFaultMessage(Response response)", "testcase": false, "constructor": false, "invocations": ["info", "getStatus", "getStatus", "readEntity", "processIdentityFault", "getStatus", "readEntity", "getMessage", "getDetails", "getCode", "getStatus", "readEntity", "processIdentityFault", "readEntity", "processIdentityFault", "getStatus", "readEntity", "processIdentityFault", "getStatus", "getStatus", "readEntity", "processIdentityFault", "getStatus", "readEntity", "processIdentityFault", "getStatus", "readEntity", "processIdentityFault", "getStatus", "readEntity", "processIdentityFault", "error", "getStatus", "getLocalizedMessage", "getStatus", "error", "getStatus", "getMessage", "getLocalizedMessage", "getStatus"]}, "repository": {"repo_id": 2038852, "url": "https://github.com/rackerlabs/atlas-lb", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 21, "size": 126552, "license": "licensed"}}