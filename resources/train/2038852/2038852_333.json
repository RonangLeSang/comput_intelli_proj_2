{"test_class": {"identifier": "StaticStringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/util/src/test/java/org/openstack/atlas/util/staticutils/StaticStringUtilsTest.java"}, "test_case": {"identifier": "testLpadLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLpadLong() {\n        assertEquals(StaticStringUtils.lpadLong(123L, \"0\", 10), \"0000000123\");\n        assertEquals(StaticStringUtils.lpadLong(123L, \"*\", 5), \"**123\");\n        assertEquals(StaticStringUtils.lpadLong(123L, \"*\", 1), \"123\");\n    }", "signature": "void testLpadLong()", "full_signature": "@Test public void testLpadLong()", "class_method_signature": "StaticStringUtilsTest.testLpadLong()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "lpadLong", "assertEquals", "lpadLong", "assertEquals", "lpadLong"]}, "focal_class": {"identifier": "StaticStringUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "lpadLong", "parameters": "(long val, String pad, int npad)", "modifiers": "public static", "return": "String", "signature": "String lpadLong(long val, String pad, int npad)", "full_signature": "public static String lpadLong(long val, String pad, int npad)", "class_method_signature": "StaticStringUtils.lpadLong(long val, String pad, int npad)", "testcase": false, "constructor": false}, {"identifier": "lpad", "parameters": "(String val, String pad, int npad)", "modifiers": "public static", "return": "String", "signature": "String lpad(String val, String pad, int npad)", "full_signature": "public static String lpad(String val, String pad, int npad)", "class_method_signature": "StaticStringUtils.lpad(String val, String pad, int npad)", "testcase": false, "constructor": false}, {"identifier": "getExtendedStackTrace", "parameters": "(Throwable th)", "modifiers": "public static", "return": "String", "signature": "String getExtendedStackTrace(Throwable th)", "full_signature": "public static String getExtendedStackTrace(Throwable th)", "class_method_signature": "StaticStringUtils.getExtendedStackTrace(Throwable th)", "testcase": false, "constructor": false}, {"identifier": "mapToString", "parameters": "(Map<K, V> map, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String mapToString(Map<K, V> map, String delimiter)", "full_signature": "public static String mapToString(Map<K, V> map, String delimiter)", "class_method_signature": "StaticStringUtils.mapToString(Map<K, V> map, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "collectionToString", "parameters": "(Collection<T> collection, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String collectionToString(Collection<T> collection, String delimiter)", "full_signature": "public static String collectionToString(Collection<T> collection, String delimiter)", "class_method_signature": "StaticStringUtils.collectionToString(Collection<T> collection, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(String stringIn, int maxLen)", "modifiers": "public static", "return": "String", "signature": "String truncate(String stringIn, int maxLen)", "full_signature": "public static String truncate(String stringIn, int maxLen)", "class_method_signature": "StaticStringUtils.truncate(String stringIn, int maxLen)", "testcase": false, "constructor": false}, {"identifier": "mapToString", "parameters": "(Map<K, V> mapIn)", "modifiers": "public static", "return": "String", "signature": "String mapToString(Map<K, V> mapIn)", "full_signature": "public static String mapToString(Map<K, V> mapIn)", "class_method_signature": "StaticStringUtils.mapToString(Map<K, V> mapIn)", "testcase": false, "constructor": false}, {"identifier": "stripCRLF", "parameters": "(String line)", "modifiers": "public static", "return": "String", "signature": "String stripCRLF(String line)", "full_signature": "public static String stripCRLF(String line)", "class_method_signature": "StaticStringUtils.stripCRLF(String line)", "testcase": false, "constructor": false}, {"identifier": "stripBlankArgs", "parameters": "(String line)", "modifiers": "public static", "return": "String[]", "signature": "String[] stripBlankArgs(String line)", "full_signature": "public static String[] stripBlankArgs(String line)", "class_method_signature": "StaticStringUtils.stripBlankArgs(String line)", "testcase": false, "constructor": false}, {"identifier": "argMapper", "parameters": "(String[] args)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> argMapper(String[] args)", "full_signature": "public static Map<String, String> argMapper(String[] args)", "class_method_signature": "StaticStringUtils.argMapper(String[] args)", "testcase": false, "constructor": false}, {"identifier": "stripKwArgs", "parameters": "(String[] args)", "modifiers": "public static", "return": "String[]", "signature": "String[] stripKwArgs(String[] args)", "full_signature": "public static String[] stripKwArgs(String[] args)", "class_method_signature": "StaticStringUtils.stripKwArgs(String[] args)", "testcase": false, "constructor": false}, {"identifier": "justOneCR", "parameters": "(String strIn)", "modifiers": "public static", "return": "String", "signature": "String justOneCR(String strIn)", "full_signature": "public static String justOneCR(String strIn)", "class_method_signature": "StaticStringUtils.justOneCR(String strIn)", "testcase": false, "constructor": false}, {"identifier": "showDiff", "parameters": "(String a, String b)", "modifiers": "public static", "return": "String", "signature": "String showDiff(String a, String b)", "full_signature": "public static String showDiff(String a, String b)", "class_method_signature": "StaticStringUtils.showDiff(String a, String b)", "testcase": false, "constructor": false}], "file": "common/util/src/main/java/org/openstack/atlas/util/staticutils/StaticStringUtils.java"}, "focal_method": {"identifier": "lpadLong", "parameters": "(long val, String pad, int npad)", "modifiers": "public static", "return": "String", "body": "public static String lpadLong(long val, String pad, int npad) {\n        return lpad(Long.toString(val), pad, npad);\n    }", "signature": "String lpadLong(long val, String pad, int npad)", "full_signature": "public static String lpadLong(long val, String pad, int npad)", "class_method_signature": "StaticStringUtils.lpadLong(long val, String pad, int npad)", "testcase": false, "constructor": false, "invocations": ["lpad", "toString"]}, "repository": {"repo_id": 2038852, "url": "https://github.com/rackerlabs/atlas-lb", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 21, "size": 126552, "license": "licensed"}}