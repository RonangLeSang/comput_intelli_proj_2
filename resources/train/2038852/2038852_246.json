{"test_class": {"identifier": "DeleteAccessListListenerTest", "superclass": "extends STMTestBase", "interfaces": "", "fields": [{"original_string": "private Integer LOAD_BALANCER_ID;", "modifier": "private", "type": "Integer", "declarator": "LOAD_BALANCER_ID", "var_name": "LOAD_BALANCER_ID"}, {"original_string": "private Integer ACCOUNT_ID;", "modifier": "private", "type": "Integer", "declarator": "ACCOUNT_ID", "var_name": "ACCOUNT_ID"}, {"original_string": "private String USERNAME = \"SOME_USERNAME\";", "modifier": "private", "type": "String", "declarator": "USERNAME = \"SOME_USERNAME\"", "var_name": "USERNAME"}, {"original_string": "private Integer ACCESS_LIST_ID = 15;", "modifier": "private", "type": "Integer", "declarator": "ACCESS_LIST_ID = 15", "var_name": "ACCESS_LIST_ID"}, {"original_string": "private Set<AccessList> accessLists;", "modifier": "private", "type": "Set<AccessList>", "declarator": "accessLists", "var_name": "accessLists"}, {"original_string": "private List<Integer> deletionList;", "modifier": "private", "type": "List<Integer>", "declarator": "deletionList", "var_name": "deletionList"}, {"original_string": "@Mock\n    private ObjectMessage objectMessage;", "modifier": "@Mock\n    private", "type": "ObjectMessage", "declarator": "objectMessage", "var_name": "objectMessage"}, {"original_string": "@Mock\n    private LoadBalancerService loadBalancerService;", "modifier": "@Mock\n    private", "type": "LoadBalancerService", "declarator": "loadBalancerService", "var_name": "loadBalancerService"}, {"original_string": "@Mock\n    private NotificationService notificationService;", "modifier": "@Mock\n    private", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}, {"original_string": "@Mock\n    private ReverseProxyLoadBalancerStmService reverseProxyLoadBalancerStmService;", "modifier": "@Mock\n    private", "type": "ReverseProxyLoadBalancerStmService", "declarator": "reverseProxyLoadBalancerStmService", "var_name": "reverseProxyLoadBalancerStmService"}, {"original_string": "@Mock\n    private LoadBalancerStatusHistoryService loadBalancerStatusHistoryService;", "modifier": "@Mock\n    private", "type": "LoadBalancerStatusHistoryService", "declarator": "loadBalancerStatusHistoryService", "var_name": "loadBalancerStatusHistoryService"}, {"original_string": "@Mock\n    private AccessListService accessListService;", "modifier": "@Mock\n    private", "type": "AccessListService", "declarator": "accessListService", "var_name": "accessListService"}, {"original_string": "@Mock\n    private RestApiConfiguration config;", "modifier": "@Mock\n    private", "type": "RestApiConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private DeleteAccessListListener deleteAccessListListener;", "modifier": "private", "type": "DeleteAccessListListener", "declarator": "deleteAccessListListener", "var_name": "deleteAccessListListener"}], "file": "api/common-api/src/test/java/org/openstack/atlas/api/async/DeleteAccessListListenerTest.java"}, "test_case": {"identifier": "testDeleteAccessListItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteAccessListItem() throws Exception {\n        when(objectMessage.getObject()).thenReturn(lb);\n        when(loadBalancerService.getWithUserPages(LOAD_BALANCER_ID, ACCOUNT_ID)).thenReturn(lb);\n        when(config.getString(Matchers.<ConfigurationKey>any())).thenReturn(\"REST\");\n\n\n        deleteAccessListListener.doOnMessage(objectMessage);\n\n        verify(reverseProxyLoadBalancerStmService).deleteAccessList(lb, deletionList);\n        verify(notificationService).saveAccessListEvent(eq(USERNAME), eq(ACCOUNT_ID), eq(LOAD_BALANCER_ID), eq(ACCESS_LIST_ID), anyString(), anyString(), eq(EventType.DELETE_ACCESS_LIST), eq(CategoryType.DELETE), eq(EventSeverity.INFO));\n        Assert.assertEquals(lb.getStatus(), LoadBalancerStatus.ACTIVE);\n        verify(loadBalancerService).update(lb);\n        verify(loadBalancerStatusHistoryService).save(ACCOUNT_ID, LOAD_BALANCER_ID, LoadBalancerStatus.ACTIVE);\n    }", "signature": "void testDeleteAccessListItem()", "full_signature": "@Test public void testDeleteAccessListItem()", "class_method_signature": "DeleteAccessListListenerTest.testDeleteAccessListItem()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getObject", "thenReturn", "when", "getWithUserPages", "thenReturn", "when", "getString", "any", "doOnMessage", "deleteAccessList", "verify", "saveAccessListEvent", "verify", "eq", "eq", "eq", "eq", "anyString", "anyString", "eq", "eq", "eq", "assertEquals", "getStatus", "update", "verify", "save", "verify"]}, "focal_class": {"identifier": "DeleteAccessListListener", "superclass": "extends BaseListener", "interfaces": "", "fields": [], "methods": [{"identifier": "doOnMessage", "parameters": "(Message message)", "modifiers": "@Override public", "return": "void", "signature": "void doOnMessage(Message message)", "full_signature": "@Override public void doOnMessage(Message message)", "class_method_signature": "DeleteAccessListListener.doOnMessage(Message message)", "testcase": false, "constructor": false}, {"identifier": "sendErrorToEventResource", "parameters": "(LoadBalancer lb, Set<AccessList> accessLists)", "modifiers": "private", "return": "void", "signature": "void sendErrorToEventResource(LoadBalancer lb, Set<AccessList> accessLists)", "full_signature": "private void sendErrorToEventResource(LoadBalancer lb, Set<AccessList> accessLists)", "class_method_signature": "DeleteAccessListListener.sendErrorToEventResource(LoadBalancer lb, Set<AccessList> accessLists)", "testcase": false, "constructor": false}, {"identifier": "createAtomErrorSummary", "parameters": "(AccessList accessListItem)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder createAtomErrorSummary(AccessList accessListItem)", "full_signature": "private StringBuilder createAtomErrorSummary(AccessList accessListItem)", "class_method_signature": "DeleteAccessListListener.createAtomErrorSummary(AccessList accessListItem)", "testcase": false, "constructor": false}], "file": "api/common-api/src/main/java/org/openstack/atlas/api/async/DeleteAccessListListener.java"}, "focal_method": {"identifier": "doOnMessage", "parameters": "(Message message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doOnMessage(Message message) throws Exception {\n        LOG.debug(\"Entering \" + getClass());\n        LOG.debug(message);\n        LoadBalancer queueLb = getLoadbalancerFromMessage(message);\n        LoadBalancer dbLoadBalancer;\n\n        try {\n            dbLoadBalancer = loadBalancerService.getWithUserPages(queueLb.getId(), queueLb.getAccountId());\n        } catch (EntityNotFoundException ex) {\n            String alertDescription = String.format(\"Load balancer '%d' not found in database.\", queueLb.getId());\n            notificationService.saveAlert(queueLb.getAccountId(), queueLb.getId(), ex, DATABASE_FAILURE.name(), alertDescription);\n            sendErrorToEventResource(queueLb, queueLb.getAccessLists());\n            return;\n        }\n\n        List<Integer> accessListsToDelete = new ArrayList<Integer>();\n        for (AccessList item : queueLb.getAccessLists()) {\n            accessListsToDelete.add(item.getId());\n        }\n\n        try {\n            if (isRestAdapter()) {\n                LOG.debug(String.format(\"Deleting access list for load balancer '%s' in STM...\", dbLoadBalancer.getId()));\n                reverseProxyLoadBalancerStmService.deleteAccessList(dbLoadBalancer, accessListsToDelete);\n                LOG.debug(String.format(\"Access list successfully deleted for load balancer '%s' in Zeus.\", dbLoadBalancer.getId()));\n            } else {\n                LOG.debug(String.format(\"Deleting access list for load balancer '%s' in ZXTM...\", dbLoadBalancer.getId()));\n                reverseProxyLoadBalancerService.deleteAccessList(dbLoadBalancer.getId(), dbLoadBalancer.getAccountId());\n                LOG.debug(String.format(\"Access list successfully deleted for load balancer '%s' in Zeus.\", dbLoadBalancer.getId()));\n            }\n        } catch (Exception e) {\n            loadBalancerService.setStatus(dbLoadBalancer, LoadBalancerStatus.ERROR);\n            String alertDescription = String.format(\"Error deleting access list in Zeus for loadbalancer '%d'.\", queueLb.getId());\n            LOG.error(alertDescription, e);\n            notificationService.saveAlert(dbLoadBalancer.getAccountId(), dbLoadBalancer.getId(), e, ZEUS_FAILURE.name(), alertDescription);\n            sendErrorToEventResource(queueLb, queueLb.getAccessLists());\n\n            return;\n        }\n\n        String atomTitle = \"Network Item Successfully Deleted\";\n        for (Integer id : accessListsToDelete) {\n            String atomSummary = String.format(\"Network Item '%d' successfully deleted\", id);\n            notificationService.saveAccessListEvent(queueLb.getUserName(), queueLb.getAccountId(), queueLb.getId(), id, atomTitle, atomSummary, DELETE_ACCESS_LIST, DELETE, INFO);\n            LOG.debug(String.format(\"Removing access list item '%d' from database...\", id));\n        }\n        Set<AccessList> saveList = new HashSet<AccessList>();\n        for (AccessList item : dbLoadBalancer.getAccessLists()) {\n            if (!accessListsToDelete.contains(item.getId())) {\n                saveList.add(item);\n            }\n        }\n\n        dbLoadBalancer.setAccessLists(saveList);\n        dbLoadBalancer.setStatus(LoadBalancerStatus.ACTIVE);\n        loadBalancerService.update(dbLoadBalancer);\n\n        //Set status record\n        loadBalancerStatusHistoryService.save(dbLoadBalancer.getAccountId(), dbLoadBalancer.getId(), LoadBalancerStatus.ACTIVE);\n    }", "signature": "void doOnMessage(Message message)", "full_signature": "@Override public void doOnMessage(Message message)", "class_method_signature": "DeleteAccessListListener.doOnMessage(Message message)", "testcase": false, "constructor": false, "invocations": ["debug", "getClass", "debug", "getLoadbalancerFromMessage", "getWithUserPages", "getId", "getAccountId", "format", "getId", "saveAlert", "getAccountId", "getId", "name", "sendErrorToEventResource", "getAccessLists", "getAccessLists", "add", "getId", "isRestAdapter", "debug", "format", "getId", "deleteAccessList", "debug", "format", "getId", "debug", "format", "getId", "deleteAccessList", "getId", "getAccountId", "debug", "format", "getId", "setStatus", "format", "getId", "error", "saveAlert", "getAccountId", "getId", "name", "sendErrorToEventResource", "getAccessLists", "format", "saveAccessListEvent", "getUserName", "getAccountId", "getId", "debug", "format", "getAccessLists", "contains", "getId", "add", "setAccessLists", "setStatus", "update", "save", "getAccountId", "getId"]}, "repository": {"repo_id": 2038852, "url": "https://github.com/rackerlabs/atlas-lb", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 21, "size": 126552, "license": "licensed"}}