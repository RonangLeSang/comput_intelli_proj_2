{"test_class": {"identifier": "AcceptTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/common-api/src/test/java/org/openstack/atlas/api/filters/helpers/AcceptTypeTest.java"}, "test_case": {"identifier": "qParamShouldReturnNullWhenNoQparamisInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void qParamShouldReturnNullWhenNoQparamisInvalid() {\n        Assert.assertNull(AcceptType.getQfromString(\"Nothing here\"));\n        Assert.assertNull(AcceptType.getQfromString(\"q = this is not a q param\"));\n        Assert.assertNull(AcceptType.getQfromString(\"q = 3.22  this is also not a q param\"));\n    }", "signature": "void qParamShouldReturnNullWhenNoQparamisInvalid()", "full_signature": "@Test public void qParamShouldReturnNullWhenNoQparamisInvalid()", "class_method_signature": "AcceptTypeTest.qParamShouldReturnNullWhenNoQparamisInvalid()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getQfromString", "assertNull", "getQfromString", "assertNull", "getQfromString"]}, "focal_class": {"identifier": "AcceptType", "superclass": "", "interfaces": "implements Comparable<AcceptType>", "fields": [{"original_string": "private MediaType mediaType;", "modifier": "private", "type": "MediaType", "declarator": "mediaType", "var_name": "mediaType"}, {"original_string": "private double q = 1.0;", "modifier": "private", "type": "double", "declarator": "q = 1.0", "var_name": "q"}, {"original_string": "private List<String> acceptExtensions = new ArrayList<String>();", "modifier": "private", "type": "List<String>", "declarator": "acceptExtensions = new ArrayList<String>()", "var_name": "acceptExtensions"}, {"original_string": "private static final Pattern qRe = Pattern.compile(\"^\\\\s*[qQ]\\\\s*=\\\\s*([0-9]+\\\\.?[0-9]*)\\\\s*$\");", "modifier": "private static final", "type": "Pattern", "declarator": "qRe = Pattern.compile(\"^\\\\s*[qQ]\\\\s*=\\\\s*([0-9]+\\\\.?[0-9]*)\\\\s*$\")", "var_name": "qRe"}], "methods": [{"identifier": "AcceptType", "parameters": "()", "modifiers": "public", "return": "", "signature": " AcceptType()", "full_signature": "public  AcceptType()", "class_method_signature": "AcceptType.AcceptType()", "testcase": false, "constructor": true}, {"identifier": "getMediaType", "parameters": "()", "modifiers": "public", "return": "MediaType", "signature": "MediaType getMediaType()", "full_signature": "public MediaType getMediaType()", "class_method_signature": "AcceptType.getMediaType()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(String strIn)", "modifiers": "public static", "return": "AcceptType", "signature": "AcceptType newInstance(String strIn)", "full_signature": "public static AcceptType newInstance(String strIn)", "class_method_signature": "AcceptType.newInstance(String strIn)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "AcceptType.toString()", "testcase": false, "constructor": false}, {"identifier": "isAcceptableMedia", "parameters": "(AcceptType requested, AcceptType offerd)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAcceptableMedia(AcceptType requested, AcceptType offerd)", "full_signature": "public static boolean isAcceptableMedia(AcceptType requested, AcceptType offerd)", "class_method_signature": "AcceptType.isAcceptableMedia(AcceptType requested, AcceptType offerd)", "testcase": false, "constructor": false}, {"identifier": "mediaMatch", "parameters": "(AcceptType t, AcceptType o)", "modifiers": "public static", "return": "boolean", "signature": "boolean mediaMatch(AcceptType t, AcceptType o)", "full_signature": "public static boolean mediaMatch(AcceptType t, AcceptType o)", "class_method_signature": "AcceptType.mediaMatch(AcceptType t, AcceptType o)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(AcceptType o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(AcceptType o)", "full_signature": "@Override public int compareTo(AcceptType o)", "class_method_signature": "AcceptType.compareTo(AcceptType o)", "testcase": false, "constructor": false}, {"identifier": "setMediaType", "parameters": "(MediaType mediaType)", "modifiers": "public", "return": "void", "signature": "void setMediaType(MediaType mediaType)", "full_signature": "public void setMediaType(MediaType mediaType)", "class_method_signature": "AcceptType.setMediaType(MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "getQ", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getQ()", "full_signature": "public double getQ()", "class_method_signature": "AcceptType.getQ()", "testcase": false, "constructor": false}, {"identifier": "setQ", "parameters": "(double q)", "modifiers": "public", "return": "void", "signature": "void setQ(double q)", "full_signature": "public void setQ(double q)", "class_method_signature": "AcceptType.setQ(double q)", "testcase": false, "constructor": false}, {"identifier": "getAcceptExtensions", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAcceptExtensions()", "full_signature": "public List<String> getAcceptExtensions()", "class_method_signature": "AcceptType.getAcceptExtensions()", "testcase": false, "constructor": false}, {"identifier": "setAcceptExtensions", "parameters": "(List<String> acceptExtensions)", "modifiers": "public", "return": "void", "signature": "void setAcceptExtensions(List<String> acceptExtensions)", "full_signature": "public void setAcceptExtensions(List<String> acceptExtensions)", "class_method_signature": "AcceptType.setAcceptExtensions(List<String> acceptExtensions)", "testcase": false, "constructor": false}, {"identifier": "getQfromString", "parameters": "(String strIn)", "modifiers": "public static", "return": "Double", "signature": "Double getQfromString(String strIn)", "full_signature": "public static Double getQfromString(String strIn)", "class_method_signature": "AcceptType.getQfromString(String strIn)", "testcase": false, "constructor": false}], "file": "api/common-api/src/main/java/org/openstack/atlas/api/filters/helpers/AcceptType.java"}, "focal_method": {"identifier": "getQfromString", "parameters": "(String strIn)", "modifiers": "public static", "return": "Double", "body": "public static Double getQfromString(String strIn) {\n        Matcher matcher = qRe.matcher(strIn);\n        if (!matcher.find()) {\n            return null;\n        }\n        return Double.parseDouble(matcher.group(1));\n    }", "signature": "Double getQfromString(String strIn)", "full_signature": "public static Double getQfromString(String strIn)", "class_method_signature": "AcceptType.getQfromString(String strIn)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "parseDouble", "group"]}, "repository": {"repo_id": 2038852, "url": "https://github.com/rackerlabs/atlas-lb", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 21, "size": 126552, "license": "licensed"}}