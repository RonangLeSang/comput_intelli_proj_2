{"test_class": {"identifier": "IPv4Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String invalidgoogleIpv4 = \"www.google.com\";", "modifier": "private final", "type": "String", "declarator": "invalidgoogleIpv4 = \"www.google.com\"", "var_name": "invalidgoogleIpv4"}, {"original_string": "private final String invalidOctetRangeIpv4 = \"192.168.3.510\";", "modifier": "private final", "type": "String", "declarator": "invalidOctetRangeIpv4 = \"192.168.3.510\"", "var_name": "invalidOctetRangeIpv4"}, {"original_string": "private final String notEnoughOctetsIpv4 = \"129.168.3\";", "modifier": "private final", "type": "String", "declarator": "notEnoughOctetsIpv4 = \"129.168.3\"", "var_name": "notEnoughOctetsIpv4"}, {"original_string": "private final String tooManyOctetsIpv4 = \"192.168.3.51.32\";", "modifier": "private final", "type": "String", "declarator": "tooManyOctetsIpv4 = \"192.168.3.51.32\"", "var_name": "tooManyOctetsIpv4"}, {"original_string": "private final String validIpv4 = \"192.168.3.51\";", "modifier": "private final", "type": "String", "declarator": "validIpv4 = \"192.168.3.51\"", "var_name": "validIpv4"}, {"original_string": "private final byte[] expected_ipv4bytes = {-64, -88, 3, 51};", "modifier": "private final", "type": "byte[]", "declarator": "expected_ipv4bytes = {-64, -88, 3, 51}", "var_name": "expected_ipv4bytes"}, {"original_string": "private final String expected_ipv4 = \"192.168.3.51\";", "modifier": "private final", "type": "String", "declarator": "expected_ipv4 = \"192.168.3.51\"", "var_name": "expected_ipv4"}, {"original_string": "private final String left_uncompressed = \"\";", "modifier": "private final", "type": "String", "declarator": "left_uncompressed = \"\"", "var_name": "left_uncompressed"}, {"original_string": "private final String left_compressed = \"\";", "modifier": "private final", "type": "String", "declarator": "left_compressed = \"\"", "var_name": "left_compressed"}], "file": "common/util/src/test/java/org/openstack/atlas/util/ip/IPv4Test.java"}, "test_case": {"identifier": "shouldRejectGoogleAddress", "parameters": "()", "modifiers": "@Test(expected = IPStringConversionException.class) public", "return": "void", "body": "@Test(expected = IPStringConversionException.class)\n    public void shouldRejectGoogleAddress() throws IPStringConversionException {\n        IPv4 ipv4 = new IPv4(invalidgoogleIpv4);\n        ipv4.getBytes();\n    }", "signature": "void shouldRejectGoogleAddress()", "full_signature": "@Test(expected = IPStringConversionException.class) public void shouldRejectGoogleAddress()", "class_method_signature": "IPv4Test.shouldRejectGoogleAddress()", "testcase": true, "constructor": false, "invocations": ["getBytes"]}, "focal_class": {"identifier": "IPv4", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String ip;", "modifier": "private", "type": "String", "declarator": "ip", "var_name": "ip"}], "methods": [{"identifier": "bytes2IpString", "parameters": "(byte[] in)", "modifiers": "public static", "return": "String", "signature": "String bytes2IpString(byte[] in)", "full_signature": "public static String bytes2IpString(byte[] in)", "class_method_signature": "IPv4.bytes2IpString(byte[] in)", "testcase": false, "constructor": false}, {"identifier": "IPv4", "parameters": "()", "modifiers": "public", "return": "", "signature": " IPv4()", "full_signature": "public  IPv4()", "class_method_signature": "IPv4.IPv4()", "testcase": false, "constructor": true}, {"identifier": "setIp", "parameters": "(String ip)", "modifiers": "public", "return": "void", "signature": "void setIp(String ip)", "full_signature": "public void setIp(String ip)", "class_method_signature": "IPv4.setIp(String ip)", "testcase": false, "constructor": false}, {"identifier": "setIp", "parameters": "(byte[] in)", "modifiers": "public", "return": "void", "signature": "void setIp(byte[] in)", "full_signature": "public void setIp(byte[] in)", "class_method_signature": "IPv4.setIp(byte[] in)", "testcase": false, "constructor": false}, {"identifier": "IPv4", "parameters": "(String ip)", "modifiers": "public", "return": "", "signature": " IPv4(String ip)", "full_signature": "public  IPv4(String ip)", "class_method_signature": "IPv4.IPv4(String ip)", "testcase": false, "constructor": true}, {"identifier": "IPv4", "parameters": "(byte[] in)", "modifiers": "public", "return": "", "signature": " IPv4(byte[] in)", "full_signature": "public  IPv4(byte[] in)", "class_method_signature": "IPv4.IPv4(byte[] in)", "testcase": false, "constructor": true}, {"identifier": "getIp", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIp()", "full_signature": "public String getIp()", "class_method_signature": "IPv4.getIp()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getString()", "full_signature": "public String getString()", "class_method_signature": "IPv4.getString()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "public byte[] getBytes()", "class_method_signature": "IPv4.getBytes()", "testcase": false, "constructor": false}], "file": "common/util/src/main/java/org/openstack/atlas/util/ip/IPv4.java"}, "focal_method": {"identifier": "getBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] getBytes() throws IPStringConversionException {\n        byte[] out = new byte[4];\n        int octet;\n        int i;\n\n        if (ip == null) {\n            throw new IPStringConversionException(\"Error ip address is null\");\n        }\n\n        String ippatternstr = \"^([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})$\";\n        Pattern ipPattern = Pattern.compile(ippatternstr);\n        Matcher ipMatch = ipPattern.matcher(ip);\n        if (ipMatch.find()) {\n            for (i = 1; i <= 4; i++) {\n                try {\n                    octet = Integer.parseInt(ipMatch.group(i));\n                } catch (NumberFormatException e) {\n                    String format = \"Error ipv4 octet[%d] is not a valid integer in ip %s\";\n                    String msg = String.format(format, i, ip);\n                    throw new IPStringConversionException(msg);\n                }\n                if (octet < 0 || octet > 255) {\n                    String format = \"Error ipv4 octet[%d](%d) is not in range 0 - 255 in ip %s\";\n                    String msg = String.format(format, i, octet, ip);\n                    throw new IPStringConversionException(msg);\n                }\n                out[i - 1] = BitConverters.int2ubyte((int) (octet % 256));\n            }\n        } else {\n            String err = String.format(\"Error %s is not a valid IPv4 string\", ip);\n            throw new IPStringConversionException(err);\n        }\n\n        return out;\n    }", "signature": "byte[] getBytes()", "full_signature": "public byte[] getBytes()", "class_method_signature": "IPv4.getBytes()", "testcase": false, "constructor": false, "invocations": ["compile", "matcher", "find", "parseInt", "group", "format", "format", "int2ubyte", "format"]}, "repository": {"repo_id": 2038852, "url": "https://github.com/rackerlabs/atlas-lb", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 21, "size": 126552, "license": "licensed"}}