{"test_class": {"identifier": "ThriftTransportKeyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String primary = \"accumulo\";", "modifier": "private static final", "type": "String", "declarator": "primary = \"accumulo\"", "var_name": "primary"}], "file": "core/src/test/java/org/apache/accumulo/core/clientImpl/ThriftTransportKeyTest.java"}, "test_case": {"identifier": "testSimpleEquivalence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSimpleEquivalence() {\n    ClientContext clientCtx = createMock(ClientContext.class);\n\n    expect(clientCtx.getClientSslParams()).andReturn(null).anyTimes();\n    expect(clientCtx.getSaslParams()).andReturn(null).anyTimes();\n\n    replay(clientCtx);\n\n    ThriftTransportKey ttk =\n        new ThriftTransportKey(HostAndPort.fromParts(\"localhost\", 9999), 120 * 1000, clientCtx);\n\n    assertEquals(\"Normal ThriftTransportKey doesn't equal itself\", ttk, ttk);\n  }", "signature": "void testSimpleEquivalence()", "full_signature": "@Test public void testSimpleEquivalence()", "class_method_signature": "ThriftTransportKeyTest.testSimpleEquivalence()", "testcase": true, "constructor": false, "invocations": ["createMock", "anyTimes", "andReturn", "expect", "getClientSslParams", "anyTimes", "andReturn", "expect", "getSaslParams", "replay", "fromParts", "assertEquals"]}, "focal_class": {"identifier": "ThriftTransportKey", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HostAndPort server;", "modifier": "private final", "type": "HostAndPort", "declarator": "server", "var_name": "server"}, {"original_string": "private final long timeout;", "modifier": "private final", "type": "long", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "private final SslConnectionParams sslParams;", "modifier": "private final", "type": "SslConnectionParams", "declarator": "sslParams", "var_name": "sslParams"}, {"original_string": "private final SaslConnectionParams saslParams;", "modifier": "private final", "type": "SaslConnectionParams", "declarator": "saslParams", "var_name": "saslParams"}, {"original_string": "private int hash = -1;", "modifier": "private", "type": "int", "declarator": "hash = -1", "var_name": "hash"}], "methods": [{"identifier": "ThriftTransportKey", "parameters": "(HostAndPort server, long timeout, ClientContext context)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " ThriftTransportKey(HostAndPort server, long timeout, ClientContext context)", "full_signature": "@VisibleForTesting public  ThriftTransportKey(HostAndPort server, long timeout, ClientContext context)", "class_method_signature": "ThriftTransportKey.ThriftTransportKey(HostAndPort server, long timeout, ClientContext context)", "testcase": false, "constructor": true}, {"identifier": "ThriftTransportKey", "parameters": "(HostAndPort server, long timeout, SslConnectionParams sslParams,\n      SaslConnectionParams saslParams)", "modifiers": "", "return": "", "signature": " ThriftTransportKey(HostAndPort server, long timeout, SslConnectionParams sslParams,\n      SaslConnectionParams saslParams)", "full_signature": "  ThriftTransportKey(HostAndPort server, long timeout, SslConnectionParams sslParams,\n      SaslConnectionParams saslParams)", "class_method_signature": "ThriftTransportKey.ThriftTransportKey(HostAndPort server, long timeout, SslConnectionParams sslParams,\n      SaslConnectionParams saslParams)", "testcase": false, "constructor": true}, {"identifier": "getServer", "parameters": "()", "modifiers": "", "return": "HostAndPort", "signature": "HostAndPort getServer()", "full_signature": " HostAndPort getServer()", "class_method_signature": "ThriftTransportKey.getServer()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getTimeout()", "full_signature": " long getTimeout()", "class_method_signature": "ThriftTransportKey.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "isSsl", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSsl()", "full_signature": "public boolean isSsl()", "class_method_signature": "ThriftTransportKey.isSsl()", "testcase": false, "constructor": false}, {"identifier": "isSasl", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSasl()", "full_signature": "public boolean isSasl()", "class_method_signature": "ThriftTransportKey.isSasl()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ThriftTransportKey.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "precomputeHashCode", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void precomputeHashCode()", "full_signature": "public final void precomputeHashCode()", "class_method_signature": "ThriftTransportKey.precomputeHashCode()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ThriftTransportKey.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ThriftTransportKey.toString()", "testcase": false, "constructor": false}, {"identifier": "getSslParams", "parameters": "()", "modifiers": "public", "return": "SslConnectionParams", "signature": "SslConnectionParams getSslParams()", "full_signature": "public SslConnectionParams getSslParams()", "class_method_signature": "ThriftTransportKey.getSslParams()", "testcase": false, "constructor": false}, {"identifier": "getSaslParams", "parameters": "()", "modifiers": "public", "return": "SaslConnectionParams", "signature": "SaslConnectionParams getSaslParams()", "full_signature": "public SaslConnectionParams getSaslParams()", "class_method_signature": "ThriftTransportKey.getSaslParams()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/clientImpl/ThriftTransportKey.java"}, "focal_method": {"identifier": "getSaslParams", "parameters": "()", "modifiers": "public", "return": "SaslConnectionParams", "body": "public SaslConnectionParams getSaslParams() {\n    return saslParams;\n  }", "signature": "SaslConnectionParams getSaslParams()", "full_signature": "public SaslConnectionParams getSaslParams()", "class_method_signature": "ThriftTransportKey.getSaslParams()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}