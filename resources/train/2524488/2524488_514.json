{"test_class": {"identifier": "ProblemReportingIteratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TableId TABLE_ID = TableId.of(\"table\");", "modifier": "private static final", "type": "TableId", "declarator": "TABLE_ID = TableId.of(\"table\")", "var_name": "TABLE_ID"}, {"original_string": "private static final String RESOURCE = \"resource\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE = \"resource\"", "var_name": "RESOURCE"}, {"original_string": "private InterruptibleIterator ii;", "modifier": "private", "type": "InterruptibleIterator", "declarator": "ii", "var_name": "ii"}, {"original_string": "private ProblemReportingIterator pri;", "modifier": "private", "type": "ProblemReportingIterator", "declarator": "pri", "var_name": "pri"}], "file": "server/base/src/test/java/org/apache/accumulo/server/problems/ProblemReportingIteratorTest.java"}, "test_case": {"identifier": "testSetInterruptFlag", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetInterruptFlag() {\n    AtomicBoolean flag = new AtomicBoolean(true);\n    ii.setInterruptFlag(flag);\n    replay(ii);\n    pri.setInterruptFlag(flag);\n    verify(ii);\n  }", "signature": "void testSetInterruptFlag()", "full_signature": "@Test public void testSetInterruptFlag()", "class_method_signature": "ProblemReportingIteratorTest.testSetInterruptFlag()", "testcase": true, "constructor": false, "invocations": ["setInterruptFlag", "replay", "setInterruptFlag", "verify"]}, "focal_class": {"identifier": "ProblemReportingIterator", "superclass": "", "interfaces": "implements InterruptibleIterator", "fields": [{"original_string": "private final SortedKeyValueIterator<Key,Value> source;", "modifier": "private final", "type": "SortedKeyValueIterator<Key,Value>", "declarator": "source", "var_name": "source"}, {"original_string": "private boolean sawError = false;", "modifier": "private", "type": "boolean", "declarator": "sawError = false", "var_name": "sawError"}, {"original_string": "private final boolean continueOnError;", "modifier": "private final", "type": "boolean", "declarator": "continueOnError", "var_name": "continueOnError"}, {"original_string": "private String resource;", "modifier": "private", "type": "String", "declarator": "resource", "var_name": "resource"}, {"original_string": "private TableId tableId;", "modifier": "private", "type": "TableId", "declarator": "tableId", "var_name": "tableId"}, {"original_string": "private final ServerContext context;", "modifier": "private final", "type": "ServerContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "ProblemReportingIterator", "parameters": "(ServerContext context, TableId tableId, String resource,\n      boolean continueOnError, SortedKeyValueIterator<Key,Value> source)", "modifiers": "public", "return": "", "signature": " ProblemReportingIterator(ServerContext context, TableId tableId, String resource,\n      boolean continueOnError, SortedKeyValueIterator<Key,Value> source)", "full_signature": "public  ProblemReportingIterator(ServerContext context, TableId tableId, String resource,\n      boolean continueOnError, SortedKeyValueIterator<Key,Value> source)", "class_method_signature": "ProblemReportingIterator.ProblemReportingIterator(ServerContext context, TableId tableId, String resource,\n      boolean continueOnError, SortedKeyValueIterator<Key,Value> source)", "testcase": false, "constructor": true}, {"identifier": "deepCopy", "parameters": "(IteratorEnvironment env)", "modifiers": "@Override public", "return": "SortedKeyValueIterator<Key,Value>", "signature": "SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env)", "full_signature": "@Override public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env)", "class_method_signature": "ProblemReportingIterator.deepCopy(IteratorEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "getTopKey", "parameters": "()", "modifiers": "@Override public", "return": "Key", "signature": "Key getTopKey()", "full_signature": "@Override public Key getTopKey()", "class_method_signature": "ProblemReportingIterator.getTopKey()", "testcase": false, "constructor": false}, {"identifier": "getTopValue", "parameters": "()", "modifiers": "@Override public", "return": "Value", "signature": "Value getTopValue()", "full_signature": "@Override public Value getTopValue()", "class_method_signature": "ProblemReportingIterator.getTopValue()", "testcase": false, "constructor": false}, {"identifier": "hasTop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasTop()", "full_signature": "@Override public boolean hasTop()", "class_method_signature": "ProblemReportingIterator.hasTop()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,\n      IteratorEnvironment env)", "modifiers": "@Override public", "return": "void", "signature": "void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,\n      IteratorEnvironment env)", "full_signature": "@Override public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,\n      IteratorEnvironment env)", "class_method_signature": "ProblemReportingIterator.init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,\n      IteratorEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void next()", "full_signature": "@Override public void next()", "class_method_signature": "ProblemReportingIterator.next()", "testcase": false, "constructor": false}, {"identifier": "seek", "parameters": "(Range range, Collection<ByteSequence> columnFamilies, boolean inclusive)", "modifiers": "@Override public", "return": "void", "signature": "void seek(Range range, Collection<ByteSequence> columnFamilies, boolean inclusive)", "full_signature": "@Override public void seek(Range range, Collection<ByteSequence> columnFamilies, boolean inclusive)", "class_method_signature": "ProblemReportingIterator.seek(Range range, Collection<ByteSequence> columnFamilies, boolean inclusive)", "testcase": false, "constructor": false}, {"identifier": "sawError", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean sawError()", "full_signature": "public boolean sawError()", "class_method_signature": "ProblemReportingIterator.sawError()", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResource()", "full_signature": "public String getResource()", "class_method_signature": "ProblemReportingIterator.getResource()", "testcase": false, "constructor": false}, {"identifier": "setInterruptFlag", "parameters": "(AtomicBoolean flag)", "modifiers": "@Override public", "return": "void", "signature": "void setInterruptFlag(AtomicBoolean flag)", "full_signature": "@Override public void setInterruptFlag(AtomicBoolean flag)", "class_method_signature": "ProblemReportingIterator.setInterruptFlag(AtomicBoolean flag)", "testcase": false, "constructor": false}], "file": "server/base/src/main/java/org/apache/accumulo/server/problems/ProblemReportingIterator.java"}, "focal_method": {"identifier": "setInterruptFlag", "parameters": "(AtomicBoolean flag)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void setInterruptFlag(AtomicBoolean flag) {\n    ((InterruptibleIterator) source).setInterruptFlag(flag);\n  }", "signature": "void setInterruptFlag(AtomicBoolean flag)", "full_signature": "@Override public void setInterruptFlag(AtomicBoolean flag)", "class_method_signature": "ProblemReportingIterator.setInterruptFlag(AtomicBoolean flag)", "testcase": false, "constructor": false, "invocations": ["setInterruptFlag"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}