{"test_class": {"identifier": "DateFormatSupplierTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/accumulo/core/util/format/DateFormatSupplierTest.java"}, "test_case": {"identifier": "testCreateSimpleFormatSupplier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateSimpleFormatSupplier() {\n    final String format = DateFormatSupplier.HUMAN_READABLE_FORMAT;\n    DateFormatSupplier supplierA = DateFormatSupplier.createSimpleFormatSupplier(format);\n    DateFormatSupplier supplierB = DateFormatSupplier.createSimpleFormatSupplier(format);\n    assertSuppliersIndependent(supplierA, supplierB);\n\n    // since dfA and dfB come from different suppliers, altering the TimeZone on one does not affect\n    // the other\n    supplierA.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final DateFormat dfA = supplierA.get();\n\n    supplierB.setTimeZone(TimeZone.getTimeZone(\"EST\"));\n    final DateFormat dfB = supplierB.get();\n\n    final String resultA = dfA.format(new Date(0));\n    assertEquals(\"1970/01/01 00:00:00.000\", resultA);\n\n    final String resultB = dfB.format(new Date(0));\n    assertEquals(\"1969/12/31 19:00:00.000\", resultB);\n\n    assertTrue(!resultA.equals(resultB));\n\n  }", "signature": "void testCreateSimpleFormatSupplier()", "full_signature": "@Test public void testCreateSimpleFormatSupplier()", "class_method_signature": "DateFormatSupplierTest.testCreateSimpleFormatSupplier()", "testcase": true, "constructor": false, "invocations": ["createSimpleFormatSupplier", "createSimpleFormatSupplier", "assertSuppliersIndependent", "setTimeZone", "getTimeZone", "get", "setTimeZone", "getTimeZone", "get", "format", "assertEquals", "format", "assertEquals", "assertTrue", "equals"]}, "focal_class": {"identifier": "DateFormatSupplier", "superclass": "extends ThreadLocal<DateFormat>", "interfaces": "implements Supplier<DateFormat>", "fields": [{"original_string": "private TimeZone timeZone;", "modifier": "private", "type": "TimeZone", "declarator": "timeZone", "var_name": "timeZone"}, {"original_string": "public static final String HUMAN_READABLE_FORMAT = \"yyyy/MM/dd HH:mm:ss.SSS\";", "modifier": "public static final", "type": "String", "declarator": "HUMAN_READABLE_FORMAT = \"yyyy/MM/dd HH:mm:ss.SSS\"", "var_name": "HUMAN_READABLE_FORMAT"}], "methods": [{"identifier": "DateFormatSupplier", "parameters": "()", "modifiers": "public", "return": "", "signature": " DateFormatSupplier()", "full_signature": "public  DateFormatSupplier()", "class_method_signature": "DateFormatSupplier.DateFormatSupplier()", "testcase": false, "constructor": true}, {"identifier": "DateFormatSupplier", "parameters": "(TimeZone timeZone)", "modifiers": "public", "return": "", "signature": " DateFormatSupplier(TimeZone timeZone)", "full_signature": "public  DateFormatSupplier(TimeZone timeZone)", "class_method_signature": "DateFormatSupplier.DateFormatSupplier(TimeZone timeZone)", "testcase": false, "constructor": true}, {"identifier": "getTimeZone", "parameters": "()", "modifiers": "public", "return": "TimeZone", "signature": "TimeZone getTimeZone()", "full_signature": "public TimeZone getTimeZone()", "class_method_signature": "DateFormatSupplier.getTimeZone()", "testcase": false, "constructor": false}, {"identifier": "setTimeZone", "parameters": "(TimeZone timeZone)", "modifiers": "public", "return": "void", "signature": "void setTimeZone(TimeZone timeZone)", "full_signature": "public void setTimeZone(TimeZone timeZone)", "class_method_signature": "DateFormatSupplier.setTimeZone(TimeZone timeZone)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "DateFormat", "signature": "DateFormat get()", "full_signature": "@Override public DateFormat get()", "class_method_signature": "DateFormatSupplier.get()", "testcase": false, "constructor": false}, {"identifier": "createDefaultFormatSupplier", "parameters": "()", "modifiers": "public static", "return": "DateFormatSupplier", "signature": "DateFormatSupplier createDefaultFormatSupplier()", "full_signature": "public static DateFormatSupplier createDefaultFormatSupplier()", "class_method_signature": "DateFormatSupplier.createDefaultFormatSupplier()", "testcase": false, "constructor": false}, {"identifier": "createSimpleFormatSupplier", "parameters": "(final String dateFormat)", "modifiers": "public static", "return": "DateFormatSupplier", "signature": "DateFormatSupplier createSimpleFormatSupplier(final String dateFormat)", "full_signature": "public static DateFormatSupplier createSimpleFormatSupplier(final String dateFormat)", "class_method_signature": "DateFormatSupplier.createSimpleFormatSupplier(final String dateFormat)", "testcase": false, "constructor": false}, {"identifier": "createSimpleFormatSupplier", "parameters": "(final String dateFormat,\n      final TimeZone timeZone)", "modifiers": "public static", "return": "DateFormatSupplier", "signature": "DateFormatSupplier createSimpleFormatSupplier(final String dateFormat,\n      final TimeZone timeZone)", "full_signature": "public static DateFormatSupplier createSimpleFormatSupplier(final String dateFormat,\n      final TimeZone timeZone)", "class_method_signature": "DateFormatSupplier.createSimpleFormatSupplier(final String dateFormat,\n      final TimeZone timeZone)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/util/format/DateFormatSupplier.java"}, "focal_method": {"identifier": "createSimpleFormatSupplier", "parameters": "(final String dateFormat)", "modifiers": "public static", "return": "DateFormatSupplier", "body": "public static DateFormatSupplier createSimpleFormatSupplier(final String dateFormat) {\n    return new DateFormatSupplier() {\n      @Override\n      protected SimpleDateFormat initialValue() {\n        return new SimpleDateFormat(dateFormat);\n      }\n    };\n  }", "signature": "DateFormatSupplier createSimpleFormatSupplier(final String dateFormat)", "full_signature": "public static DateFormatSupplier createSimpleFormatSupplier(final String dateFormat)", "class_method_signature": "DateFormatSupplier.createSimpleFormatSupplier(final String dateFormat)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}