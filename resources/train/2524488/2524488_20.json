{"test_class": {"identifier": "ShellUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder folder =\n      new TemporaryFolder(new File(System.getProperty(\"user.dir\") + \"/target\"));", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "folder =\n      new TemporaryFolder(new File(System.getProperty(\"user.dir\") + \"/target\"))", "var_name": "folder"}, {"original_string": "private static final String FILEDATA = \"line1\\n\\nline2\";", "modifier": "private static final", "type": "String", "declarator": "FILEDATA = \"line1\\n\\nline2\"", "var_name": "FILEDATA"}, {"original_string": "private static final String B64_FILEDATA =\n      Base64.getEncoder().encodeToString(\"line1\".getBytes(UTF_8)) + \"\\n\\n\"\n          + Base64.getEncoder().encodeToString(\"line2\".getBytes(UTF_8));", "modifier": "private static final", "type": "String", "declarator": "B64_FILEDATA =\n      Base64.getEncoder().encodeToString(\"line1\".getBytes(UTF_8)) + \"\\n\\n\"\n          + Base64.getEncoder().encodeToString(\"line2\".getBytes(UTF_8))", "var_name": "B64_FILEDATA"}], "file": "shell/src/test/java/org/apache/accumulo/shell/ShellUtilTest.java"}, "test_case": {"identifier": "testWithDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWithDecode() throws IOException {\n    File testFile = new File(folder.getRoot(), \"testFileWithDecode.txt\");\n    FileUtils.writeStringToFile(testFile, B64_FILEDATA, UTF_8);\n    List<Text> output = ShellUtil.scanFile(testFile.getAbsolutePath(), true);\n    assertEquals(List.of(new Text(\"line1\"), new Text(\"line2\")), output);\n  }", "signature": "void testWithDecode()", "full_signature": "@Test public void testWithDecode()", "class_method_signature": "ShellUtilTest.testWithDecode()", "testcase": true, "constructor": false, "invocations": ["getRoot", "writeStringToFile", "scanFile", "getAbsolutePath", "assertEquals", "of"]}, "focal_class": {"identifier": "ShellUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "scanFile", "parameters": "(String filename, boolean decode)", "modifiers": "@SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"app is run in same security context as user providing the filename\") public static", "return": "List<Text>", "signature": "List<Text> scanFile(String filename, boolean decode)", "full_signature": "@SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"app is run in same security context as user providing the filename\") public static List<Text> scanFile(String filename, boolean decode)", "class_method_signature": "ShellUtil.scanFile(String filename, boolean decode)", "testcase": false, "constructor": false}, {"identifier": "parseMapOpt", "parameters": "(CommandLine cl, Option opt)", "modifiers": "public static", "return": "Map<String,String>", "signature": "Map<String,String> parseMapOpt(CommandLine cl, Option opt)", "full_signature": "public static Map<String,String> parseMapOpt(CommandLine cl, Option opt)", "class_method_signature": "ShellUtil.parseMapOpt(CommandLine cl, Option opt)", "testcase": false, "constructor": false}], "file": "shell/src/main/java/org/apache/accumulo/shell/ShellUtil.java"}, "focal_method": {"identifier": "scanFile", "parameters": "(String filename, boolean decode)", "modifiers": "@SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"app is run in same security context as user providing the filename\") public static", "return": "List<Text>", "body": "@SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\",\n      justification = \"app is run in same security context as user providing the filename\")\n  public static List<Text> scanFile(String filename, boolean decode) throws IOException {\n    String line;\n    List<Text> result = new ArrayList<>();\n    try (Scanner file = new Scanner(new File(filename), UTF_8)) {\n      while (file.hasNextLine()) {\n        line = file.nextLine();\n        if (!line.isEmpty()) {\n          result.add(decode ? new Text(Base64.getDecoder().decode(line)) : new Text(line));\n        }\n      }\n    }\n    return result;\n  }", "signature": "List<Text> scanFile(String filename, boolean decode)", "full_signature": "@SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"app is run in same security context as user providing the filename\") public static List<Text> scanFile(String filename, boolean decode)", "class_method_signature": "ShellUtil.scanFile(String filename, boolean decode)", "testcase": false, "constructor": false, "invocations": ["hasNextLine", "nextLine", "isEmpty", "add", "decode", "getDecoder"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}