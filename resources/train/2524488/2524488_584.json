{"test_class": {"identifier": "ZooAuthenticationKeyDistributorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_HMAC_ALGORITHM = \"HmacSHA1\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_HMAC_ALGORITHM = \"HmacSHA1\"", "var_name": "DEFAULT_HMAC_ALGORITHM"}, {"original_string": "private static final int KEY_LENGTH = 64;", "modifier": "private static final", "type": "int", "declarator": "KEY_LENGTH = 64", "var_name": "KEY_LENGTH"}, {"original_string": "private static KeyGenerator keyGen;", "modifier": "private static", "type": "KeyGenerator", "declarator": "keyGen", "var_name": "keyGen"}, {"original_string": "private ZooReaderWriter zrw;", "modifier": "private", "type": "ZooReaderWriter", "declarator": "zrw", "var_name": "zrw"}, {"original_string": "private String baseNode = Constants.ZDELEGATION_TOKEN_KEYS;", "modifier": "private", "type": "String", "declarator": "baseNode = Constants.ZDELEGATION_TOKEN_KEYS", "var_name": "baseNode"}], "file": "server/base/src/test/java/org/apache/accumulo/server/security/delegation/ZooAuthenticationKeyDistributorTest.java"}, "test_case": {"identifier": "testInitializeCreatesParentNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInitializeCreatesParentNode() throws Exception {\n    ZooAuthenticationKeyDistributor distributor =\n        new ZooAuthenticationKeyDistributor(zrw, baseNode);\n\n    // Attempt to create the directory and fail\n    expect(zrw.exists(baseNode)).andReturn(false);\n    expect(zrw.putPrivatePersistentData(eq(baseNode), anyObject(), eq(NodeExistsPolicy.FAIL)))\n        .andReturn(true);\n\n    replay(zrw);\n\n    distributor.initialize();\n\n    verify(zrw);\n  }", "signature": "void testInitializeCreatesParentNode()", "full_signature": "@Test public void testInitializeCreatesParentNode()", "class_method_signature": "ZooAuthenticationKeyDistributorTest.testInitializeCreatesParentNode()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "exists", "andReturn", "expect", "putPrivatePersistentData", "eq", "anyObject", "eq", "replay", "initialize", "verify"]}, "focal_class": {"identifier": "ZooAuthenticationKeyDistributor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ZooAuthenticationKeyDistributor.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ZooAuthenticationKeyDistributor.class)", "var_name": "log"}, {"original_string": "private final ZooReaderWriter zk;", "modifier": "private final", "type": "ZooReaderWriter", "declarator": "zk", "var_name": "zk"}, {"original_string": "private final String baseNode;", "modifier": "private final", "type": "String", "declarator": "baseNode", "var_name": "baseNode"}, {"original_string": "private AtomicBoolean initialized = new AtomicBoolean(false);", "modifier": "private", "type": "AtomicBoolean", "declarator": "initialized = new AtomicBoolean(false)", "var_name": "initialized"}], "methods": [{"identifier": "ZooAuthenticationKeyDistributor", "parameters": "(ZooReaderWriter zk, String baseNode)", "modifiers": "public", "return": "", "signature": " ZooAuthenticationKeyDistributor(ZooReaderWriter zk, String baseNode)", "full_signature": "public  ZooAuthenticationKeyDistributor(ZooReaderWriter zk, String baseNode)", "class_method_signature": "ZooAuthenticationKeyDistributor.ZooAuthenticationKeyDistributor(ZooReaderWriter zk, String baseNode)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void initialize()", "full_signature": "public synchronized void initialize()", "class_method_signature": "ZooAuthenticationKeyDistributor.initialize()", "testcase": false, "constructor": false}, {"identifier": "getCurrentKeys", "parameters": "()", "modifiers": "public", "return": "List<AuthenticationKey>", "signature": "List<AuthenticationKey> getCurrentKeys()", "full_signature": "public List<AuthenticationKey> getCurrentKeys()", "class_method_signature": "ZooAuthenticationKeyDistributor.getCurrentKeys()", "testcase": false, "constructor": false}, {"identifier": "advertise", "parameters": "(AuthenticationKey newKey)", "modifiers": "public synchronized", "return": "void", "signature": "void advertise(AuthenticationKey newKey)", "full_signature": "public synchronized void advertise(AuthenticationKey newKey)", "class_method_signature": "ZooAuthenticationKeyDistributor.advertise(AuthenticationKey newKey)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(AuthenticationKey key)", "modifiers": "public synchronized", "return": "void", "signature": "void remove(AuthenticationKey key)", "full_signature": "public synchronized void remove(AuthenticationKey key)", "class_method_signature": "ZooAuthenticationKeyDistributor.remove(AuthenticationKey key)", "testcase": false, "constructor": false}, {"identifier": "qualifyPath", "parameters": "(String keyId)", "modifiers": "", "return": "String", "signature": "String qualifyPath(String keyId)", "full_signature": " String qualifyPath(String keyId)", "class_method_signature": "ZooAuthenticationKeyDistributor.qualifyPath(String keyId)", "testcase": false, "constructor": false}, {"identifier": "qualifyPath", "parameters": "(AuthenticationKey key)", "modifiers": "", "return": "String", "signature": "String qualifyPath(AuthenticationKey key)", "full_signature": " String qualifyPath(AuthenticationKey key)", "class_method_signature": "ZooAuthenticationKeyDistributor.qualifyPath(AuthenticationKey key)", "testcase": false, "constructor": false}], "file": "server/base/src/main/java/org/apache/accumulo/server/security/delegation/ZooAuthenticationKeyDistributor.java"}, "focal_method": {"identifier": "initialize", "parameters": "()", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void initialize() throws KeeperException, InterruptedException {\n    if (initialized.get()) {\n      return;\n    }\n\n    if (zk.exists(baseNode)) {\n      List<ACL> acls = zk.getACL(baseNode, new Stat());\n      if (acls.size() == 1) {\n        ACL actualAcl = acls.get(0), expectedAcl = ZooUtil.PRIVATE.get(0);\n        Id actualId = actualAcl.getId();\n        // The expected outcome from ZooUtil.PRIVATE\n        if (actualAcl.getPerms() == expectedAcl.getPerms() && actualId.getScheme().equals(\"digest\")\n            && actualId.getId().startsWith(\"accumulo:\")) {\n          initialized.set(true);\n          return;\n        }\n      } else {\n        log.error(\"Saw more than one ACL on the node\");\n      }\n\n      log.error(\"Expected {} to have ACLs {} but was {}\", baseNode, ZooUtil.PRIVATE, acls);\n      throw new IllegalStateException(\n          \"Delegation token secret key node in ZooKeeper is not protected.\");\n    } else {\n      if (!zk.putPrivatePersistentData(baseNode, new byte[0], NodeExistsPolicy.FAIL)) {\n        throw new AssertionError(\"Got false from putPrivatePersistentData method\");\n      }\n    }\n\n    initialized.set(true);\n  }", "signature": "void initialize()", "full_signature": "public synchronized void initialize()", "class_method_signature": "ZooAuthenticationKeyDistributor.initialize()", "testcase": false, "constructor": false, "invocations": ["get", "exists", "getACL", "size", "get", "get", "getId", "getPerms", "getPerms", "equals", "getScheme", "startsWith", "getId", "set", "error", "error", "putPrivatePersistentData", "set"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}