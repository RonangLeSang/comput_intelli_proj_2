{"test_class": {"identifier": "ConfigurationTypeHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/accumulo/core/conf/ConfigurationTypeHelperTest.java"}, "test_case": {"identifier": "testGetFixedMemoryAsBytesFailureCases2", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testGetFixedMemoryAsBytesFailureCases2() {\n    ConfigurationTypeHelper.getFixedMemoryAsBytes(\"FooBar\");\n  }", "signature": "void testGetFixedMemoryAsBytesFailureCases2()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testGetFixedMemoryAsBytesFailureCases2()", "class_method_signature": "ConfigurationTypeHelperTest.testGetFixedMemoryAsBytesFailureCases2()", "testcase": true, "constructor": false, "invocations": ["getFixedMemoryAsBytes"]}, "focal_class": {"identifier": "ConfigurationTypeHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ConfigurationTypeHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConfigurationTypeHelper.class)", "var_name": "log"}, {"original_string": "private static Map<String,Class<?>> loaded = Collections.synchronizedMap(new HashMap<>());", "modifier": "private static", "type": "Map<String,Class<?>>", "declarator": "loaded = Collections.synchronizedMap(new HashMap<>())", "var_name": "loaded"}], "methods": [{"identifier": "getFixedMemoryAsBytes", "parameters": "(String str)", "modifiers": "public static", "return": "long", "signature": "long getFixedMemoryAsBytes(String str)", "full_signature": "public static long getFixedMemoryAsBytes(String str)", "class_method_signature": "ConfigurationTypeHelper.getFixedMemoryAsBytes(String str)", "testcase": false, "constructor": false}, {"identifier": "getMemoryAsBytes", "parameters": "(String str)", "modifiers": "public static", "return": "long", "signature": "long getMemoryAsBytes(String str)", "full_signature": "public static long getMemoryAsBytes(String str)", "class_method_signature": "ConfigurationTypeHelper.getMemoryAsBytes(String str)", "testcase": false, "constructor": false}, {"identifier": "getTimeInMillis", "parameters": "(String str)", "modifiers": "public static", "return": "long", "signature": "long getTimeInMillis(String str)", "full_signature": "public static long getTimeInMillis(String str)", "class_method_signature": "ConfigurationTypeHelper.getTimeInMillis(String str)", "testcase": false, "constructor": false}, {"identifier": "getFraction", "parameters": "(String str)", "modifiers": "public static", "return": "double", "signature": "double getFraction(String str)", "full_signature": "public static double getFraction(String str)", "class_method_signature": "ConfigurationTypeHelper.getFraction(String str)", "testcase": false, "constructor": false}, {"identifier": "getClassInstance", "parameters": "(String context, String clazzName, Class<T> base,\n      T defaultInstance)", "modifiers": "public static", "return": "T", "signature": "T getClassInstance(String context, String clazzName, Class<T> base,\n      T defaultInstance)", "full_signature": "public static T getClassInstance(String context, String clazzName, Class<T> base,\n      T defaultInstance)", "class_method_signature": "ConfigurationTypeHelper.getClassInstance(String context, String clazzName, Class<T> base,\n      T defaultInstance)", "testcase": false, "constructor": false}, {"identifier": "getClassInstance", "parameters": "(String context, String clazzName, Class<T> base)", "modifiers": "public static", "return": "T", "signature": "T getClassInstance(String context, String clazzName, Class<T> base)", "full_signature": "public static T getClassInstance(String context, String clazzName, Class<T> base)", "class_method_signature": "ConfigurationTypeHelper.getClassInstance(String context, String clazzName, Class<T> base)", "testcase": false, "constructor": false}, {"identifier": "getNumThreads", "parameters": "(String threads)", "modifiers": "public static", "return": "int", "signature": "int getNumThreads(String threads)", "full_signature": "public static int getNumThreads(String threads)", "class_method_signature": "ConfigurationTypeHelper.getNumThreads(String threads)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/conf/ConfigurationTypeHelper.java"}, "focal_method": {"identifier": "getFixedMemoryAsBytes", "parameters": "(String str)", "modifiers": "public static", "return": "long", "body": "public static long getFixedMemoryAsBytes(String str) {\n    char lastChar = str.charAt(str.length() - 1);\n\n    if (lastChar == 'b') {\n      log.warn(\n          \"The 'b' in {} is being considered as bytes. Setting memory by bits is not supported\",\n          str);\n    }\n    try {\n      int multiplier;\n      switch (Character.toUpperCase(lastChar)) {\n        case 'G':\n          multiplier = 30;\n          break;\n        case 'M':\n          multiplier = 20;\n          break;\n        case 'K':\n          multiplier = 10;\n          break;\n        case 'B':\n          multiplier = 0;\n          break;\n        default:\n          return Long.parseLong(str);\n      }\n      return Long.parseLong(str.substring(0, str.length() - 1)) << multiplier;\n    } catch (Exception ex) {\n      throw new IllegalArgumentException(\n          \"The value '\" + str + \"' is not a valid memory setting. A valid value would a number \"\n              + \"possibly followed by an optional 'G', 'M', 'K', or 'B'.\");\n    }\n  }", "signature": "long getFixedMemoryAsBytes(String str)", "full_signature": "public static long getFixedMemoryAsBytes(String str)", "class_method_signature": "ConfigurationTypeHelper.getFixedMemoryAsBytes(String str)", "testcase": false, "constructor": false, "invocations": ["charAt", "length", "warn", "toUpperCase", "parseLong", "parseLong", "substring", "length"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}