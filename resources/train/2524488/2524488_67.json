{"test_class": {"identifier": "ConditionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ByteSequence EMPTY = new ArrayByteSequence(new byte[0]);", "modifier": "private static final", "type": "ByteSequence", "declarator": "EMPTY = new ArrayByteSequence(new byte[0])", "var_name": "EMPTY"}, {"original_string": "private static final String FAMILY = \"family\";", "modifier": "private static final", "type": "String", "declarator": "FAMILY = \"family\"", "var_name": "FAMILY"}, {"original_string": "private static final String QUALIFIER = \"qualifier\";", "modifier": "private static final", "type": "String", "declarator": "QUALIFIER = \"qualifier\"", "var_name": "QUALIFIER"}, {"original_string": "private static final String VISIBILITY = \"visibility\";", "modifier": "private static final", "type": "String", "declarator": "VISIBILITY = \"visibility\"", "var_name": "VISIBILITY"}, {"original_string": "private static final String VALUE = \"value\";", "modifier": "private static final", "type": "String", "declarator": "VALUE = \"value\"", "var_name": "VALUE"}, {"original_string": "private static final IteratorSetting[] ITERATORS = {new IteratorSetting(1, \"first\", \"someclass\"),\n      new IteratorSetting(2, \"second\", \"someotherclass\"),\n      new IteratorSetting(3, \"third\", \"yetanotherclass\")};", "modifier": "private static final", "type": "IteratorSetting[]", "declarator": "ITERATORS = {new IteratorSetting(1, \"first\", \"someclass\"),\n      new IteratorSetting(2, \"second\", \"someotherclass\"),\n      new IteratorSetting(3, \"third\", \"yetanotherclass\")}", "var_name": "ITERATORS"}, {"original_string": "private Condition c;", "modifier": "private", "type": "Condition", "declarator": "c", "var_name": "c"}], "file": "core/src/test/java/org/apache/accumulo/core/data/ConditionTest.java"}, "test_case": {"identifier": "testSetIterators_DuplicateName", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testSetIterators_DuplicateName() {\n    IteratorSetting[] iterators = {new IteratorSetting(1, \"first\", \"someclass\"),\n        new IteratorSetting(2, \"second\", \"someotherclass\"),\n        new IteratorSetting(3, \"first\", \"yetanotherclass\")};\n    c.setIterators(iterators);\n  }", "signature": "void testSetIterators_DuplicateName()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testSetIterators_DuplicateName()", "class_method_signature": "ConditionTest.testSetIterators_DuplicateName()", "testcase": true, "constructor": false, "invocations": ["setIterators"]}, "focal_class": {"identifier": "Condition", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ByteSequence cf;", "modifier": "private", "type": "ByteSequence", "declarator": "cf", "var_name": "cf"}, {"original_string": "private ByteSequence cq;", "modifier": "private", "type": "ByteSequence", "declarator": "cq", "var_name": "cq"}, {"original_string": "private ByteSequence cv;", "modifier": "private", "type": "ByteSequence", "declarator": "cv", "var_name": "cv"}, {"original_string": "private ByteSequence val;", "modifier": "private", "type": "ByteSequence", "declarator": "val", "var_name": "val"}, {"original_string": "private Long ts;", "modifier": "private", "type": "Long", "declarator": "ts", "var_name": "ts"}, {"original_string": "private IteratorSetting[] iterators = new IteratorSetting[0];", "modifier": "private", "type": "IteratorSetting[]", "declarator": "iterators = new IteratorSetting[0]", "var_name": "iterators"}, {"original_string": "private static final ByteSequence EMPTY = new ArrayByteSequence(new byte[0]);", "modifier": "private static final", "type": "ByteSequence", "declarator": "EMPTY = new ArrayByteSequence(new byte[0])", "var_name": "EMPTY"}], "methods": [{"identifier": "Condition", "parameters": "(CharSequence cf, CharSequence cq)", "modifiers": "public", "return": "", "signature": " Condition(CharSequence cf, CharSequence cq)", "full_signature": "public  Condition(CharSequence cf, CharSequence cq)", "class_method_signature": "Condition.Condition(CharSequence cf, CharSequence cq)", "testcase": false, "constructor": true}, {"identifier": "Condition", "parameters": "(byte[] cf, byte[] cq)", "modifiers": "public", "return": "", "signature": " Condition(byte[] cf, byte[] cq)", "full_signature": "public  Condition(byte[] cf, byte[] cq)", "class_method_signature": "Condition.Condition(byte[] cf, byte[] cq)", "testcase": false, "constructor": true}, {"identifier": "Condition", "parameters": "(Text cf, Text cq)", "modifiers": "public", "return": "", "signature": " Condition(Text cf, Text cq)", "full_signature": "public  Condition(Text cf, Text cq)", "class_method_signature": "Condition.Condition(Text cf, Text cq)", "testcase": false, "constructor": true}, {"identifier": "Condition", "parameters": "(ByteSequence cf, ByteSequence cq)", "modifiers": "public", "return": "", "signature": " Condition(ByteSequence cf, ByteSequence cq)", "full_signature": "public  Condition(ByteSequence cf, ByteSequence cq)", "class_method_signature": "Condition.Condition(ByteSequence cf, ByteSequence cq)", "testcase": false, "constructor": true}, {"identifier": "getFamily", "parameters": "()", "modifiers": "public", "return": "ByteSequence", "signature": "ByteSequence getFamily()", "full_signature": "public ByteSequence getFamily()", "class_method_signature": "Condition.getFamily()", "testcase": false, "constructor": false}, {"identifier": "getQualifier", "parameters": "()", "modifiers": "public", "return": "ByteSequence", "signature": "ByteSequence getQualifier()", "full_signature": "public ByteSequence getQualifier()", "class_method_signature": "Condition.getQualifier()", "testcase": false, "constructor": false}, {"identifier": "setTimestamp", "parameters": "(long ts)", "modifiers": "public", "return": "Condition", "signature": "Condition setTimestamp(long ts)", "full_signature": "public Condition setTimestamp(long ts)", "class_method_signature": "Condition.setTimestamp(long ts)", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getTimestamp()", "full_signature": "public Long getTimestamp()", "class_method_signature": "Condition.getTimestamp()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(CharSequence value)", "modifiers": "public", "return": "Condition", "signature": "Condition setValue(CharSequence value)", "full_signature": "public Condition setValue(CharSequence value)", "class_method_signature": "Condition.setValue(CharSequence value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(byte[] value)", "modifiers": "public", "return": "Condition", "signature": "Condition setValue(byte[] value)", "full_signature": "public Condition setValue(byte[] value)", "class_method_signature": "Condition.setValue(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(Text value)", "modifiers": "public", "return": "Condition", "signature": "Condition setValue(Text value)", "full_signature": "public Condition setValue(Text value)", "class_method_signature": "Condition.setValue(Text value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(ByteSequence value)", "modifiers": "public", "return": "Condition", "signature": "Condition setValue(ByteSequence value)", "full_signature": "public Condition setValue(ByteSequence value)", "class_method_signature": "Condition.setValue(ByteSequence value)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "ByteSequence", "signature": "ByteSequence getValue()", "full_signature": "public ByteSequence getValue()", "class_method_signature": "Condition.getValue()", "testcase": false, "constructor": false}, {"identifier": "setVisibility", "parameters": "(ColumnVisibility cv)", "modifiers": "public", "return": "Condition", "signature": "Condition setVisibility(ColumnVisibility cv)", "full_signature": "public Condition setVisibility(ColumnVisibility cv)", "class_method_signature": "Condition.setVisibility(ColumnVisibility cv)", "testcase": false, "constructor": false}, {"identifier": "getVisibility", "parameters": "()", "modifiers": "public", "return": "ByteSequence", "signature": "ByteSequence getVisibility()", "full_signature": "public ByteSequence getVisibility()", "class_method_signature": "Condition.getVisibility()", "testcase": false, "constructor": false}, {"identifier": "setIterators", "parameters": "(IteratorSetting... iterators)", "modifiers": "public", "return": "Condition", "signature": "Condition setIterators(IteratorSetting... iterators)", "full_signature": "public Condition setIterators(IteratorSetting... iterators)", "class_method_signature": "Condition.setIterators(IteratorSetting... iterators)", "testcase": false, "constructor": false}, {"identifier": "getIterators", "parameters": "()", "modifiers": "public", "return": "IteratorSetting[]", "signature": "IteratorSetting[] getIterators()", "full_signature": "public IteratorSetting[] getIterators()", "class_method_signature": "Condition.getIterators()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Condition.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Condition.hashCode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/data/Condition.java"}, "focal_method": {"identifier": "setIterators", "parameters": "(IteratorSetting... iterators)", "modifiers": "public", "return": "Condition", "body": "public Condition setIterators(IteratorSetting... iterators) {\n    checkArgument(iterators != null, \"iterators is null\");\n\n    if (iterators.length > 1) {\n      HashSet<String> names = new HashSet<>();\n      HashSet<Integer> prios = new HashSet<>();\n\n      for (IteratorSetting iteratorSetting : iterators) {\n        if (!names.add(iteratorSetting.getName()))\n          throw new IllegalArgumentException(\n              \"iterator name used more than once \" + iteratorSetting.getName());\n        if (!prios.add(iteratorSetting.getPriority()))\n          throw new IllegalArgumentException(\n              \"iterator priority used more than once \" + iteratorSetting.getPriority());\n      }\n    }\n\n    this.iterators = iterators;\n    return this;\n  }", "signature": "Condition setIterators(IteratorSetting... iterators)", "full_signature": "public Condition setIterators(IteratorSetting... iterators)", "class_method_signature": "Condition.setIterators(IteratorSetting... iterators)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "add", "getName", "getName", "add", "getPriority", "getPriority"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}