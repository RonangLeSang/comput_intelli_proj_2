{"test_class": {"identifier": "HexFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "HexFormatter formatter;", "modifier": "", "type": "HexFormatter", "declarator": "formatter", "var_name": "formatter"}, {"original_string": "Map<Key,Value> data;", "modifier": "", "type": "Map<Key,Value>", "declarator": "data", "var_name": "data"}], "file": "core/src/test/java/org/apache/accumulo/core/util/format/HexFormatterTest.java"}, "test_case": {"identifier": "testInterpretBadRow0", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testInterpretBadRow0() {\n    formatter.interpretRow(new Text(\"!\"));\n  }", "signature": "void testInterpretBadRow0()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testInterpretBadRow0()", "class_method_signature": "HexFormatterTest.testInterpretBadRow0()", "testcase": true, "constructor": false, "invocations": ["interpretRow"]}, "focal_class": {"identifier": "HexFormatter", "superclass": "", "interfaces": "implements Formatter, ScanInterpreter", "fields": [{"original_string": "private char[] chars =\n      {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};", "modifier": "private", "type": "char[]", "declarator": "chars =\n      {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}", "var_name": "chars"}, {"original_string": "private Iterator<Entry<Key,Value>> iter;", "modifier": "private", "type": "Iterator<Entry<Key,Value>>", "declarator": "iter", "var_name": "iter"}, {"original_string": "private FormatterConfig config;", "modifier": "private", "type": "FormatterConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "toHex", "parameters": "(StringBuilder sb, byte[] bin)", "modifiers": "private", "return": "void", "signature": "void toHex(StringBuilder sb, byte[] bin)", "full_signature": "private void toHex(StringBuilder sb, byte[] bin)", "class_method_signature": "HexFormatter.toHex(StringBuilder sb, byte[] bin)", "testcase": false, "constructor": false}, {"identifier": "fromChar", "parameters": "(char b)", "modifiers": "private", "return": "int", "signature": "int fromChar(char b)", "full_signature": "private int fromChar(char b)", "class_method_signature": "HexFormatter.fromChar(char b)", "testcase": false, "constructor": false}, {"identifier": "toBinary", "parameters": "(String hex)", "modifiers": "private", "return": "byte[]", "signature": "byte[] toBinary(String hex)", "full_signature": "private byte[] toBinary(String hex)", "class_method_signature": "HexFormatter.toBinary(String hex)", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "HexFormatter.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String next()", "full_signature": "@Override public String next()", "class_method_signature": "HexFormatter.next()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void remove()", "full_signature": "@Override public void remove()", "class_method_signature": "HexFormatter.remove()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(Iterable<Entry<Key,Value>> scanner, FormatterConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(Iterable<Entry<Key,Value>> scanner, FormatterConfig config)", "full_signature": "@Override public void initialize(Iterable<Entry<Key,Value>> scanner, FormatterConfig config)", "class_method_signature": "HexFormatter.initialize(Iterable<Entry<Key,Value>> scanner, FormatterConfig config)", "testcase": false, "constructor": false}, {"identifier": "interpretRow", "parameters": "(Text row)", "modifiers": "@Override public", "return": "Text", "signature": "Text interpretRow(Text row)", "full_signature": "@Override public Text interpretRow(Text row)", "class_method_signature": "HexFormatter.interpretRow(Text row)", "testcase": false, "constructor": false}, {"identifier": "interpretBeginRow", "parameters": "(Text row)", "modifiers": "@Override public", "return": "Text", "signature": "Text interpretBeginRow(Text row)", "full_signature": "@Override public Text interpretBeginRow(Text row)", "class_method_signature": "HexFormatter.interpretBeginRow(Text row)", "testcase": false, "constructor": false}, {"identifier": "interpretEndRow", "parameters": "(Text row)", "modifiers": "@Override public", "return": "Text", "signature": "Text interpretEndRow(Text row)", "full_signature": "@Override public Text interpretEndRow(Text row)", "class_method_signature": "HexFormatter.interpretEndRow(Text row)", "testcase": false, "constructor": false}, {"identifier": "interpretColumnFamily", "parameters": "(Text cf)", "modifiers": "@Override public", "return": "Text", "signature": "Text interpretColumnFamily(Text cf)", "full_signature": "@Override public Text interpretColumnFamily(Text cf)", "class_method_signature": "HexFormatter.interpretColumnFamily(Text cf)", "testcase": false, "constructor": false}, {"identifier": "interpretColumnQualifier", "parameters": "(Text cq)", "modifiers": "@Override public", "return": "Text", "signature": "Text interpretColumnQualifier(Text cq)", "full_signature": "@Override public Text interpretColumnQualifier(Text cq)", "class_method_signature": "HexFormatter.interpretColumnQualifier(Text cq)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/util/format/HexFormatter.java"}, "focal_method": {"identifier": "interpretRow", "parameters": "(Text row)", "modifiers": "@Override public", "return": "Text", "body": "@Override\n  public Text interpretRow(Text row) {\n    return new Text(toBinary(row.toString()));\n  }", "signature": "Text interpretRow(Text row)", "full_signature": "@Override public Text interpretRow(Text row)", "class_method_signature": "HexFormatter.interpretRow(Text row)", "testcase": false, "constructor": false, "invocations": ["toBinary", "toString"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}