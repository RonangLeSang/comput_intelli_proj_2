{"test_class": {"identifier": "AccumuloReplicaSystemTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/tserver/src/test/java/org/apache/accumulo/tserver/replication/AccumuloReplicaSystemTest.java"}, "test_case": {"identifier": "dontSendEmptyDataToPeer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void dontSendEmptyDataToPeer() throws Exception {\n    Client replClient = createMock(Client.class);\n    AccumuloReplicaSystem ars = createMock(AccumuloReplicaSystem.class);\n    WalEdits edits = new WalEdits(Collections.emptyList());\n    WalReplication walReplication = new WalReplication(edits, 0, 0, 0);\n\n    ReplicationTarget target = new ReplicationTarget(\"peer\", \"2\", TableId.of(\"1\"));\n    DataInputStream input = null;\n    Path p = new Path(\"/accumulo/wals/tserver+port/\" + UUID.randomUUID());\n    Status status = null;\n    long sizeLimit = Long.MAX_VALUE;\n    String remoteTableId = target.getRemoteIdentifier();\n    TCredentials tcreds = null;\n    Set<Integer> tids = new HashSet<>();\n\n    WalClientExecReturn walClientExec = ars.new WalClientExecReturn(target, input, p, status,\n        sizeLimit, remoteTableId, tcreds, tids);\n\n    expect(ars.getWalEdits(target, input, p, status, sizeLimit, tids)).andReturn(walReplication);\n\n    replay(replClient, ars);\n\n    ReplicationStats stats = walClientExec.execute(replClient);\n\n    verify(replClient, ars);\n\n    assertEquals(new ReplicationStats(0L, 0L, 0L), stats);\n  }", "signature": "void dontSendEmptyDataToPeer()", "full_signature": "@Test public void dontSendEmptyDataToPeer()", "class_method_signature": "AccumuloReplicaSystemTest.dontSendEmptyDataToPeer()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "emptyList", "of", "randomUUID", "getRemoteIdentifier", "andReturn", "expect", "getWalEdits", "replay", "execute", "verify", "assertEquals"]}, "focal_class": {"identifier": "AccumuloReplicaSystem", "superclass": "", "interfaces": "implements ReplicaSystem", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AccumuloReplicaSystem.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AccumuloReplicaSystem.class)", "var_name": "log"}, {"original_string": "private static final String RFILE_SUFFIX = \".\" + RFile.EXTENSION;", "modifier": "private static final", "type": "String", "declarator": "RFILE_SUFFIX = \".\" + RFile.EXTENSION", "var_name": "RFILE_SUFFIX"}, {"original_string": "private String instanceName, zookeepers;", "modifier": "private", "type": "String", "declarator": "instanceName", "var_name": "instanceName"}, {"original_string": "private AccumuloConfiguration conf;", "modifier": "private", "type": "AccumuloConfiguration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private ServerContext context;", "modifier": "private", "type": "ServerContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "setConf", "parameters": "(AccumuloConfiguration conf)", "modifiers": "protected", "return": "void", "signature": "void setConf(AccumuloConfiguration conf)", "full_signature": "protected void setConf(AccumuloConfiguration conf)", "class_method_signature": "AccumuloReplicaSystem.setConf(AccumuloConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "buildConfiguration", "parameters": "(String instanceName, String zookeepers)", "modifiers": "public static", "return": "String", "signature": "String buildConfiguration(String instanceName, String zookeepers)", "full_signature": "public static String buildConfiguration(String instanceName, String zookeepers)", "class_method_signature": "AccumuloReplicaSystem.buildConfiguration(String instanceName, String zookeepers)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(ServerContext context, String configuration)", "modifiers": "@Override public", "return": "void", "signature": "void configure(ServerContext context, String configuration)", "full_signature": "@Override public void configure(ServerContext context, String configuration)", "class_method_signature": "AccumuloReplicaSystem.configure(ServerContext context, String configuration)", "testcase": false, "constructor": false}, {"identifier": "replicate", "parameters": "(final Path p, final Status status, final ReplicationTarget target,\n      final ReplicaSystemHelper helper)", "modifiers": "@SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"path provided by admin\") @Override public", "return": "Status", "signature": "Status replicate(final Path p, final Status status, final ReplicationTarget target,\n      final ReplicaSystemHelper helper)", "full_signature": "@SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"path provided by admin\") @Override public Status replicate(final Path p, final Status status, final ReplicationTarget target,\n      final ReplicaSystemHelper helper)", "class_method_signature": "AccumuloReplicaSystem.replicate(final Path p, final Status status, final ReplicationTarget target,\n      final ReplicaSystemHelper helper)", "testcase": false, "constructor": false}, {"identifier": "_replicate", "parameters": "(final Path p, final Status status, final ReplicationTarget target,\n      final ReplicaSystemHelper helper, final AccumuloConfiguration localConf,\n      final ClientContext peerContext, final UserGroupInformation accumuloUgi)", "modifiers": "private", "return": "Status", "signature": "Status _replicate(final Path p, final Status status, final ReplicationTarget target,\n      final ReplicaSystemHelper helper, final AccumuloConfiguration localConf,\n      final ClientContext peerContext, final UserGroupInformation accumuloUgi)", "full_signature": "private Status _replicate(final Path p, final Status status, final ReplicationTarget target,\n      final ReplicaSystemHelper helper, final AccumuloConfiguration localConf,\n      final ClientContext peerContext, final UserGroupInformation accumuloUgi)", "class_method_signature": "AccumuloReplicaSystem._replicate(final Path p, final Status status, final ReplicationTarget target,\n      final ReplicaSystemHelper helper, final AccumuloConfiguration localConf,\n      final ClientContext peerContext, final UserGroupInformation accumuloUgi)", "testcase": false, "constructor": false}, {"identifier": "replicateRFiles", "parameters": "(ClientContext peerContext, final HostAndPort peerTserver,\n      final ReplicationTarget target, final Path p, final Status status, long timeout)", "modifiers": "protected", "return": "Status", "signature": "Status replicateRFiles(ClientContext peerContext, final HostAndPort peerTserver,\n      final ReplicationTarget target, final Path p, final Status status, long timeout)", "full_signature": "protected Status replicateRFiles(ClientContext peerContext, final HostAndPort peerTserver,\n      final ReplicationTarget target, final Path p, final Status status, long timeout)", "class_method_signature": "AccumuloReplicaSystem.replicateRFiles(ClientContext peerContext, final HostAndPort peerTserver,\n      final ReplicationTarget target, final Path p, final Status status, long timeout)", "testcase": false, "constructor": false}, {"identifier": "replicateLogs", "parameters": "(ClientContext peerContext, final HostAndPort peerTserver,\n      final ReplicationTarget target, final Path p, final Status status, final long sizeLimit,\n      final String remoteTableId, final TCredentials tcreds, final ReplicaSystemHelper helper,\n      final UserGroupInformation accumuloUgi, long timeout)", "modifiers": "protected", "return": "Status", "signature": "Status replicateLogs(ClientContext peerContext, final HostAndPort peerTserver,\n      final ReplicationTarget target, final Path p, final Status status, final long sizeLimit,\n      final String remoteTableId, final TCredentials tcreds, final ReplicaSystemHelper helper,\n      final UserGroupInformation accumuloUgi, long timeout)", "full_signature": "protected Status replicateLogs(ClientContext peerContext, final HostAndPort peerTserver,\n      final ReplicationTarget target, final Path p, final Status status, final long sizeLimit,\n      final String remoteTableId, final TCredentials tcreds, final ReplicaSystemHelper helper,\n      final UserGroupInformation accumuloUgi, long timeout)", "class_method_signature": "AccumuloReplicaSystem.replicateLogs(ClientContext peerContext, final HostAndPort peerTserver,\n      final ReplicationTarget target, final Path p, final Status status, final long sizeLimit,\n      final String remoteTableId, final TCredentials tcreds, final ReplicaSystemHelper helper,\n      final UserGroupInformation accumuloUgi, long timeout)", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "(AccumuloConfiguration localConf, ReplicationTarget target)", "modifiers": "protected", "return": "String", "signature": "String getPassword(AccumuloConfiguration localConf, ReplicationTarget target)", "full_signature": "protected String getPassword(AccumuloConfiguration localConf, ReplicationTarget target)", "class_method_signature": "AccumuloReplicaSystem.getPassword(AccumuloConfiguration localConf, ReplicationTarget target)", "testcase": false, "constructor": false}, {"identifier": "getKeytab", "parameters": "(AccumuloConfiguration localConf, ReplicationTarget target)", "modifiers": "protected", "return": "String", "signature": "String getKeytab(AccumuloConfiguration localConf, ReplicationTarget target)", "full_signature": "protected String getKeytab(AccumuloConfiguration localConf, ReplicationTarget target)", "class_method_signature": "AccumuloReplicaSystem.getKeytab(AccumuloConfiguration localConf, ReplicationTarget target)", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "(AccumuloConfiguration localConf, ReplicationTarget target)", "modifiers": "protected", "return": "String", "signature": "String getPrincipal(AccumuloConfiguration localConf, ReplicationTarget target)", "full_signature": "protected String getPrincipal(AccumuloConfiguration localConf, ReplicationTarget target)", "class_method_signature": "AccumuloReplicaSystem.getPrincipal(AccumuloConfiguration localConf, ReplicationTarget target)", "testcase": false, "constructor": false}, {"identifier": "getContextForPeer", "parameters": "(AccumuloConfiguration localConf,\n      ReplicationTarget target, String principal, AuthenticationToken token)", "modifiers": "protected", "return": "ClientContext", "signature": "ClientContext getContextForPeer(AccumuloConfiguration localConf,\n      ReplicationTarget target, String principal, AuthenticationToken token)", "full_signature": "protected ClientContext getContextForPeer(AccumuloConfiguration localConf,\n      ReplicationTarget target, String principal, AuthenticationToken token)", "class_method_signature": "AccumuloReplicaSystem.getContextForPeer(AccumuloConfiguration localConf,\n      ReplicationTarget target, String principal, AuthenticationToken token)", "testcase": false, "constructor": false}, {"identifier": "consumeWalPrefix", "parameters": "(ReplicationTarget target, DataInputStream wal,\n      Status status)", "modifiers": "protected", "return": "Set<Integer>", "signature": "Set<Integer> consumeWalPrefix(ReplicationTarget target, DataInputStream wal,\n      Status status)", "full_signature": "protected Set<Integer> consumeWalPrefix(ReplicationTarget target, DataInputStream wal,\n      Status status)", "class_method_signature": "AccumuloReplicaSystem.consumeWalPrefix(ReplicationTarget target, DataInputStream wal,\n      Status status)", "testcase": false, "constructor": false}, {"identifier": "getWalStream", "parameters": "(Path p, FSDataInputStream input)", "modifiers": "public", "return": "DataInputStream", "signature": "DataInputStream getWalStream(Path p, FSDataInputStream input)", "full_signature": "public DataInputStream getWalStream(Path p, FSDataInputStream input)", "class_method_signature": "AccumuloReplicaSystem.getWalStream(Path p, FSDataInputStream input)", "testcase": false, "constructor": false}, {"identifier": "getWalEdits", "parameters": "(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids)", "modifiers": "protected", "return": "WalReplication", "signature": "WalReplication getWalEdits(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids)", "full_signature": "protected WalReplication getWalEdits(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids)", "class_method_signature": "AccumuloReplicaSystem.getWalEdits(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids)", "testcase": false, "constructor": false}, {"identifier": "writeValueAvoidingReplicationCycles", "parameters": "(DataOutputStream out, LogFileValue value,\n      ReplicationTarget target)", "modifiers": "protected", "return": "long", "signature": "long writeValueAvoidingReplicationCycles(DataOutputStream out, LogFileValue value,\n      ReplicationTarget target)", "full_signature": "protected long writeValueAvoidingReplicationCycles(DataOutputStream out, LogFileValue value,\n      ReplicationTarget target)", "class_method_signature": "AccumuloReplicaSystem.writeValueAvoidingReplicationCycles(DataOutputStream out, LogFileValue value,\n      ReplicationTarget target)", "testcase": false, "constructor": false}], "file": "server/tserver/src/main/java/org/apache/accumulo/tserver/replication/AccumuloReplicaSystem.java"}, "focal_method": {"identifier": "getWalEdits", "parameters": "(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids)", "modifiers": "protected", "return": "WalReplication", "body": "protected WalReplication getWalEdits(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids) throws IOException {\n    WalEdits edits = new WalEdits();\n    edits.edits = new ArrayList<>();\n    long size = 0L;\n    long entriesConsumed = 0L;\n    long numUpdates = 0L;\n    LogFileKey key = new LogFileKey();\n    LogFileValue value = new LogFileValue();\n\n    while (size < sizeLimit) {\n      try {\n        key.readFields(wal);\n        value.readFields(wal);\n      } catch (EOFException e) {\n        log.debug(\"Caught EOFException reading {}\", p);\n        if (status.getInfiniteEnd() && status.getClosed()) {\n          log.debug(\"{} is closed and has unknown length, assuming entire file has been consumed\",\n              p);\n          entriesConsumed = Long.MAX_VALUE;\n        }\n        break;\n      }\n\n      entriesConsumed++;\n\n      switch (key.event) {\n        case DEFINE_TABLET:\n          // For new DEFINE_TABLETs, we also need to record the new tids we see\n          if (target.getSourceTableId().equals(key.tablet.tableId())) {\n            desiredTids.add(key.tabletId);\n          }\n          break;\n        case MUTATION:\n        case MANY_MUTATIONS:\n          // Only write out mutations for tids that are for the desired tablet\n          if (desiredTids.contains(key.tabletId)) {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            DataOutputStream out = new DataOutputStream(baos);\n\n            key.write(out);\n\n            // Only write out the mutations that don't have the given ReplicationTarget\n            // as a replicate source (this prevents infinite replication loops: a->b, b->a, repeat)\n            numUpdates += writeValueAvoidingReplicationCycles(out, value, target);\n\n            out.flush();\n            byte[] data = baos.toByteArray();\n            size += data.length;\n            edits.addToEdits(ByteBuffer.wrap(data));\n          }\n          break;\n        default:\n          log.trace(\"Ignorning WAL entry which doesn't contain mutations,\"\n              + \" should not have received such entries\");\n          break;\n      }\n    }\n\n    return new WalReplication(edits, size, entriesConsumed, numUpdates);\n  }", "signature": "WalReplication getWalEdits(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids)", "full_signature": "protected WalReplication getWalEdits(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids)", "class_method_signature": "AccumuloReplicaSystem.getWalEdits(ReplicationTarget target, DataInputStream wal, Path p,\n      Status status, long sizeLimit, Set<Integer> desiredTids)", "testcase": false, "constructor": false, "invocations": ["readFields", "readFields", "debug", "getInfiniteEnd", "getClosed", "debug", "equals", "getSourceTableId", "tableId", "add", "contains", "write", "writeValueAvoidingReplicationCycles", "flush", "toByteArray", "addToEdits", "wrap", "trace"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}