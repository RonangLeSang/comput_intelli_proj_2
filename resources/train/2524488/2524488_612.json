{"test_class": {"identifier": "StatusCombinerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StatusCombiner combiner;", "modifier": "private", "type": "StatusCombiner", "declarator": "combiner", "var_name": "combiner"}, {"original_string": "private Key key;", "modifier": "private", "type": "Key", "declarator": "key", "var_name": "key"}, {"original_string": "private Status.Builder builder;", "modifier": "private", "type": "Status.Builder", "declarator": "builder", "var_name": "builder"}], "file": "server/base/src/test/java/org/apache/accumulo/server/replication/StatusCombinerTest.java"}, "test_case": {"identifier": "commutativeWithMultipleUpdates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void commutativeWithMultipleUpdates() {\n    Status newFile = StatusUtil.fileCreated(100), update1 = StatusUtil.ingestedUntil(100),\n        update2 = StatusUtil.ingestedUntil(200), repl1 = StatusUtil.replicated(50),\n        repl2 = StatusUtil.replicated(150);\n\n    Status order1 = combiner.typedReduce(key,\n        Arrays.asList(newFile, update1, repl1, update2, repl2).iterator());\n\n    // Got all replication updates before ingest updates\n    Status permutation = combiner.typedReduce(key,\n        Arrays.asList(newFile, repl1, update1, repl2, update2).iterator());\n\n    assertEquals(order1, permutation);\n\n    // All replications before updates\n    permutation = combiner.typedReduce(key,\n        Arrays.asList(newFile, repl1, repl2, update1, update2).iterator());\n\n    assertEquals(order1, permutation);\n\n    // All updates before replications\n    permutation = combiner.typedReduce(key,\n        Arrays.asList(newFile, update1, update2, repl1, repl2, update1, update2).iterator());\n\n    assertEquals(order1, permutation);\n  }", "signature": "void commutativeWithMultipleUpdates()", "full_signature": "@Test public void commutativeWithMultipleUpdates()", "class_method_signature": "StatusCombinerTest.commutativeWithMultipleUpdates()", "testcase": true, "constructor": false, "invocations": ["fileCreated", "ingestedUntil", "ingestedUntil", "replicated", "replicated", "typedReduce", "iterator", "asList", "typedReduce", "iterator", "asList", "assertEquals", "typedReduce", "iterator", "asList", "assertEquals", "typedReduce", "iterator", "asList", "assertEquals"]}, "focal_class": {"identifier": "StatusCombiner", "superclass": "extends TypedValueCombiner<Status>", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(StatusCombiner.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(StatusCombiner.class)", "var_name": "log"}], "methods": [{"identifier": "describeOptions", "parameters": "()", "modifiers": "@Override public", "return": "IteratorOptions", "signature": "IteratorOptions describeOptions()", "full_signature": "@Override public IteratorOptions describeOptions()", "class_method_signature": "StatusCombiner.describeOptions()", "testcase": false, "constructor": false}, {"identifier": "validateOptions", "parameters": "(Map<String,String> options)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean validateOptions(Map<String,String> options)", "full_signature": "@Override public boolean validateOptions(Map<String,String> options)", "class_method_signature": "StatusCombiner.validateOptions(Map<String,String> options)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,\n      IteratorEnvironment env)", "modifiers": "@Override public", "return": "void", "signature": "void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,\n      IteratorEnvironment env)", "full_signature": "@Override public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,\n      IteratorEnvironment env)", "class_method_signature": "StatusCombiner.init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options,\n      IteratorEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "typedReduce", "parameters": "(Key key, Iterator<Status> iter)", "modifiers": "@Override public", "return": "Status", "signature": "Status typedReduce(Key key, Iterator<Status> iter)", "full_signature": "@Override public Status typedReduce(Key key, Iterator<Status> iter)", "class_method_signature": "StatusCombiner.typedReduce(Key key, Iterator<Status> iter)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(Builder combined, Status status)", "modifiers": "public", "return": "void", "signature": "void combine(Builder combined, Status status)", "full_signature": "public void combine(Builder combined, Status status)", "class_method_signature": "StatusCombiner.combine(Builder combined, Status status)", "testcase": false, "constructor": false}, {"identifier": "builderToString", "parameters": "(Builder builder)", "modifiers": "private", "return": "String", "signature": "String builderToString(Builder builder)", "full_signature": "private String builderToString(Builder builder)", "class_method_signature": "StatusCombiner.builderToString(Builder builder)", "testcase": false, "constructor": false}], "file": "server/base/src/main/java/org/apache/accumulo/server/replication/StatusCombiner.java"}, "focal_method": {"identifier": "typedReduce", "parameters": "(Key key, Iterator<Status> iter)", "modifiers": "@Override public", "return": "Status", "body": "@Override\n  public Status typedReduce(Key key, Iterator<Status> iter) {\n    Builder combined = null;\n\n    while (iter.hasNext()) {\n      Status status = iter.next();\n\n      // Avoid creation of a new builder and message when we only have one\n      // message to reduce\n      if (combined == null) {\n        if (iter.hasNext()) {\n          combined = Status.newBuilder();\n        } else {\n          if (log.isTraceEnabled()) {\n            log.trace(\"Returned single value: {} {}\", key.toStringNoTruncate(),\n                ProtobufUtil.toString(status));\n          }\n          return status;\n        }\n      }\n\n      // Add the new message in with the previous message(s)\n      combine(combined, status);\n    }\n\n    if (log.isTraceEnabled()) {\n      log.trace(\"Combined: {} {}\", key.toStringNoTruncate(),\n          ProtobufUtil.toString(combined.build()));\n    }\n\n    return combined.build();\n  }", "signature": "Status typedReduce(Key key, Iterator<Status> iter)", "full_signature": "@Override public Status typedReduce(Key key, Iterator<Status> iter)", "class_method_signature": "StatusCombiner.typedReduce(Key key, Iterator<Status> iter)", "testcase": false, "constructor": false, "invocations": ["hasNext", "next", "hasNext", "newBuilder", "isTraceEnabled", "trace", "toStringNoTruncate", "toString", "combine", "isTraceEnabled", "trace", "toStringNoTruncate", "toString", "build", "build"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}