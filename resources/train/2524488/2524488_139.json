{"test_class": {"identifier": "ArrayByteSequenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ArrayByteSequence abs;", "modifier": "", "type": "ArrayByteSequence", "declarator": "abs", "var_name": "abs"}, {"original_string": "byte[] data;", "modifier": "", "type": "byte[]", "declarator": "data", "var_name": "data"}], "file": "core/src/test/java/org/apache/accumulo/core/data/ArrayByteSequenceTest.java"}, "test_case": {"identifier": "testInvalidSubsequence3", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testInvalidSubsequence3() {\n    abs.subSequence(0, 10);\n  }", "signature": "void testInvalidSubsequence3()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testInvalidSubsequence3()", "class_method_signature": "ArrayByteSequenceTest.testInvalidSubsequence3()", "testcase": true, "constructor": false, "invocations": ["subSequence"]}, "focal_class": {"identifier": "ArrayByteSequence", "superclass": "extends ByteSequence", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "protected byte[] data;", "modifier": "protected", "type": "byte[]", "declarator": "data", "var_name": "data"}, {"original_string": "protected int offset;", "modifier": "protected", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "protected int length;", "modifier": "protected", "type": "int", "declarator": "length", "var_name": "length"}], "methods": [{"identifier": "ArrayByteSequence", "parameters": "(byte[] data)", "modifiers": "public", "return": "", "signature": " ArrayByteSequence(byte[] data)", "full_signature": "public  ArrayByteSequence(byte[] data)", "class_method_signature": "ArrayByteSequence.ArrayByteSequence(byte[] data)", "testcase": false, "constructor": true}, {"identifier": "ArrayByteSequence", "parameters": "(byte[] data, int offset, int length)", "modifiers": "public", "return": "", "signature": " ArrayByteSequence(byte[] data, int offset, int length)", "full_signature": "public  ArrayByteSequence(byte[] data, int offset, int length)", "class_method_signature": "ArrayByteSequence.ArrayByteSequence(byte[] data, int offset, int length)", "testcase": false, "constructor": true}, {"identifier": "ArrayByteSequence", "parameters": "(String s)", "modifiers": "public", "return": "", "signature": " ArrayByteSequence(String s)", "full_signature": "public  ArrayByteSequence(String s)", "class_method_signature": "ArrayByteSequence.ArrayByteSequence(String s)", "testcase": false, "constructor": true}, {"identifier": "ArrayByteSequence", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "", "signature": " ArrayByteSequence(ByteBuffer buffer)", "full_signature": "public  ArrayByteSequence(ByteBuffer buffer)", "class_method_signature": "ArrayByteSequence.ArrayByteSequence(ByteBuffer buffer)", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "(ByteSequence bs)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] copy(ByteSequence bs)", "full_signature": "private static byte[] copy(ByteSequence bs)", "class_method_signature": "ArrayByteSequence.copy(ByteSequence bs)", "testcase": false, "constructor": false}, {"identifier": "ArrayByteSequence", "parameters": "(ByteSequence byteSequence)", "modifiers": "public", "return": "", "signature": " ArrayByteSequence(ByteSequence byteSequence)", "full_signature": "public  ArrayByteSequence(ByteSequence byteSequence)", "class_method_signature": "ArrayByteSequence.ArrayByteSequence(ByteSequence byteSequence)", "testcase": false, "constructor": true}, {"identifier": "byteAt", "parameters": "(int i)", "modifiers": "@Override public", "return": "byte", "signature": "byte byteAt(int i)", "full_signature": "@Override public byte byteAt(int i)", "class_method_signature": "ArrayByteSequence.byteAt(int i)", "testcase": false, "constructor": false}, {"identifier": "getBackingArray", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getBackingArray()", "full_signature": "@Override public byte[] getBackingArray()", "class_method_signature": "ArrayByteSequence.getBackingArray()", "testcase": false, "constructor": false}, {"identifier": "isBackedByArray", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBackedByArray()", "full_signature": "@Override public boolean isBackedByArray()", "class_method_signature": "ArrayByteSequence.isBackedByArray()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "ArrayByteSequence.length()", "testcase": false, "constructor": false}, {"identifier": "offset", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int offset()", "full_signature": "@Override public int offset()", "class_method_signature": "ArrayByteSequence.offset()", "testcase": false, "constructor": false}, {"identifier": "subSequence", "parameters": "(int start, int end)", "modifiers": "@Override public", "return": "ByteSequence", "signature": "ByteSequence subSequence(int start, int end)", "full_signature": "@Override public ByteSequence subSequence(int start, int end)", "class_method_signature": "ArrayByteSequence.subSequence(int start, int end)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] toArray()", "full_signature": "@Override public byte[] toArray()", "class_method_signature": "ArrayByteSequence.toArray()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ArrayByteSequence.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/data/ArrayByteSequence.java"}, "focal_method": {"identifier": "subSequence", "parameters": "(int start, int end)", "modifiers": "@Override public", "return": "ByteSequence", "body": "@Override\n  public ByteSequence subSequence(int start, int end) {\n\n    if (start > end || start < 0 || end > length) {\n      throw new IllegalArgumentException(\"Bad start and/end start = \" + start + \" end=\" + end\n          + \" offset=\" + offset + \" length=\" + length);\n    }\n\n    return new ArrayByteSequence(data, offset + start, end - start);\n  }", "signature": "ByteSequence subSequence(int start, int end)", "full_signature": "@Override public ByteSequence subSequence(int start, int end)", "class_method_signature": "ArrayByteSequence.subSequence(int start, int end)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}