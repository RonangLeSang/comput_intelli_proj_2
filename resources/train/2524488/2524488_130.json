{"test_class": {"identifier": "RangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/accumulo/core/data/RangeTest.java"}, "test_case": {"identifier": "testThrift_Check", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testThrift_Check() {\n    Range r =\n        new Range(new Key(new Text(\"soup\")), true, false, new Key(new Text(\"nuts\")), true, false);\n    TRange tr = r.toThrift();\n    try {\n      @SuppressWarnings(\"unused\")\n      Range r2 = new Range(tr);\n      fail(\"Thrift constructor allowed invalid range\");\n    } catch (IllegalArgumentException exc) {\n      /* good! */\n    }\n  }", "signature": "void testThrift_Check()", "full_signature": "@Test public void testThrift_Check()", "class_method_signature": "RangeTest.testThrift_Check()", "testcase": true, "constructor": false, "invocations": ["toThrift", "fail"]}, "focal_class": {"identifier": "Range", "superclass": "", "interfaces": "implements WritableComparable<Range>", "fields": [{"original_string": "private Key start;", "modifier": "private", "type": "Key", "declarator": "start", "var_name": "start"}, {"original_string": "private Key stop;", "modifier": "private", "type": "Key", "declarator": "stop", "var_name": "stop"}, {"original_string": "private boolean startKeyInclusive;", "modifier": "private", "type": "boolean", "declarator": "startKeyInclusive", "var_name": "startKeyInclusive"}, {"original_string": "private boolean stopKeyInclusive;", "modifier": "private", "type": "boolean", "declarator": "stopKeyInclusive", "var_name": "stopKeyInclusive"}, {"original_string": "private boolean infiniteStartKey;", "modifier": "private", "type": "boolean", "declarator": "infiniteStartKey", "var_name": "infiniteStartKey"}, {"original_string": "private boolean infiniteStopKey;", "modifier": "private", "type": "boolean", "declarator": "infiniteStopKey", "var_name": "infiniteStopKey"}], "methods": [{"identifier": "Range", "parameters": "()", "modifiers": "public", "return": "", "signature": " Range()", "full_signature": "public  Range()", "class_method_signature": "Range.Range()", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(Key startKey, Key endKey)", "modifiers": "public", "return": "", "signature": " Range(Key startKey, Key endKey)", "full_signature": "public  Range(Key startKey, Key endKey)", "class_method_signature": "Range.Range(Key startKey, Key endKey)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(CharSequence row)", "modifiers": "public", "return": "", "signature": " Range(CharSequence row)", "full_signature": "public  Range(CharSequence row)", "class_method_signature": "Range.Range(CharSequence row)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(Text row)", "modifiers": "public", "return": "", "signature": " Range(Text row)", "full_signature": "public  Range(Text row)", "class_method_signature": "Range.Range(Text row)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(Text startRow, Text endRow)", "modifiers": "public", "return": "", "signature": " Range(Text startRow, Text endRow)", "full_signature": "public  Range(Text startRow, Text endRow)", "class_method_signature": "Range.Range(Text startRow, Text endRow)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(CharSequence startRow, CharSequence endRow)", "modifiers": "public", "return": "", "signature": " Range(CharSequence startRow, CharSequence endRow)", "full_signature": "public  Range(CharSequence startRow, CharSequence endRow)", "class_method_signature": "Range.Range(CharSequence startRow, CharSequence endRow)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(Text startRow, boolean startRowInclusive, Text endRow, boolean endRowInclusive)", "modifiers": "public", "return": "", "signature": " Range(Text startRow, boolean startRowInclusive, Text endRow, boolean endRowInclusive)", "full_signature": "public  Range(Text startRow, boolean startRowInclusive, Text endRow, boolean endRowInclusive)", "class_method_signature": "Range.Range(Text startRow, boolean startRowInclusive, Text endRow, boolean endRowInclusive)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(CharSequence startRow, boolean startRowInclusive, CharSequence endRow,\n      boolean endRowInclusive)", "modifiers": "public", "return": "", "signature": " Range(CharSequence startRow, boolean startRowInclusive, CharSequence endRow,\n      boolean endRowInclusive)", "full_signature": "public  Range(CharSequence startRow, boolean startRowInclusive, CharSequence endRow,\n      boolean endRowInclusive)", "class_method_signature": "Range.Range(CharSequence startRow, boolean startRowInclusive, CharSequence endRow,\n      boolean endRowInclusive)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(Key startKey, boolean startKeyInclusive, Key endKey, boolean endKeyInclusive)", "modifiers": "public", "return": "", "signature": " Range(Key startKey, boolean startKeyInclusive, Key endKey, boolean endKeyInclusive)", "full_signature": "public  Range(Key startKey, boolean startKeyInclusive, Key endKey, boolean endKeyInclusive)", "class_method_signature": "Range.Range(Key startKey, boolean startKeyInclusive, Key endKey, boolean endKeyInclusive)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(Range range)", "modifiers": "public", "return": "", "signature": " Range(Range range)", "full_signature": "public  Range(Range range)", "class_method_signature": "Range.Range(Range range)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(Key start, Key stop, boolean startKeyInclusive, boolean stopKeyInclusive,\n      boolean infiniteStartKey, boolean infiniteStopKey)", "modifiers": "public", "return": "", "signature": " Range(Key start, Key stop, boolean startKeyInclusive, boolean stopKeyInclusive,\n      boolean infiniteStartKey, boolean infiniteStopKey)", "full_signature": "public  Range(Key start, Key stop, boolean startKeyInclusive, boolean stopKeyInclusive,\n      boolean infiniteStartKey, boolean infiniteStopKey)", "class_method_signature": "Range.Range(Key start, Key stop, boolean startKeyInclusive, boolean stopKeyInclusive,\n      boolean infiniteStartKey, boolean infiniteStopKey)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(Key start, boolean startKeyInclusive, boolean infiniteStartKey, Key stop,\n      boolean stopKeyInclusive, boolean infiniteStopKey)", "modifiers": "protected", "return": "", "signature": " Range(Key start, boolean startKeyInclusive, boolean infiniteStartKey, Key stop,\n      boolean stopKeyInclusive, boolean infiniteStopKey)", "full_signature": "protected  Range(Key start, boolean startKeyInclusive, boolean infiniteStartKey, Key stop,\n      boolean stopKeyInclusive, boolean infiniteStopKey)", "class_method_signature": "Range.Range(Key start, boolean startKeyInclusive, boolean infiniteStartKey, Key stop,\n      boolean stopKeyInclusive, boolean infiniteStopKey)", "testcase": false, "constructor": true}, {"identifier": "Range", "parameters": "(TRange trange)", "modifiers": "public", "return": "", "signature": " Range(TRange trange)", "full_signature": "public  Range(TRange trange)", "class_method_signature": "Range.Range(TRange trange)", "testcase": false, "constructor": true}, {"identifier": "getStartKey", "parameters": "()", "modifiers": "public", "return": "Key", "signature": "Key getStartKey()", "full_signature": "public Key getStartKey()", "class_method_signature": "Range.getStartKey()", "testcase": false, "constructor": false}, {"identifier": "beforeStartKey", "parameters": "(Key key)", "modifiers": "public", "return": "boolean", "signature": "boolean beforeStartKey(Key key)", "full_signature": "public boolean beforeStartKey(Key key)", "class_method_signature": "Range.beforeStartKey(Key key)", "testcase": false, "constructor": false}, {"identifier": "beforeStartKeyImpl", "parameters": "(Key key)", "modifiers": "private", "return": "boolean", "signature": "boolean beforeStartKeyImpl(Key key)", "full_signature": "private boolean beforeStartKeyImpl(Key key)", "class_method_signature": "Range.beforeStartKeyImpl(Key key)", "testcase": false, "constructor": false}, {"identifier": "getEndKey", "parameters": "()", "modifiers": "public", "return": "Key", "signature": "Key getEndKey()", "full_signature": "public Key getEndKey()", "class_method_signature": "Range.getEndKey()", "testcase": false, "constructor": false}, {"identifier": "afterEndKey", "parameters": "(Key key)", "modifiers": "public", "return": "boolean", "signature": "boolean afterEndKey(Key key)", "full_signature": "public boolean afterEndKey(Key key)", "class_method_signature": "Range.afterEndKey(Key key)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Range.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Range.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Range otherRange)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Range otherRange)", "full_signature": "public boolean equals(Range otherRange)", "class_method_signature": "Range.equals(Range otherRange)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Range o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Range o)", "full_signature": "@Override public int compareTo(Range o)", "class_method_signature": "Range.compareTo(Range o)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Key key)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(Key key)", "full_signature": "public boolean contains(Key key)", "class_method_signature": "Range.contains(Key key)", "testcase": false, "constructor": false}, {"identifier": "mergeOverlapping", "parameters": "(Collection<Range> ranges)", "modifiers": "public static", "return": "List<Range>", "signature": "List<Range> mergeOverlapping(Collection<Range> ranges)", "full_signature": "public static List<Range> mergeOverlapping(Collection<Range> ranges)", "class_method_signature": "Range.mergeOverlapping(Collection<Range> ranges)", "testcase": false, "constructor": false}, {"identifier": "clip", "parameters": "(Range range)", "modifiers": "public", "return": "Range", "signature": "Range clip(Range range)", "full_signature": "public Range clip(Range range)", "class_method_signature": "Range.clip(Range range)", "testcase": false, "constructor": false}, {"identifier": "clip", "parameters": "(Range range, boolean returnNullIfDisjoint)", "modifiers": "public", "return": "Range", "signature": "Range clip(Range range, boolean returnNullIfDisjoint)", "full_signature": "public Range clip(Range range, boolean returnNullIfDisjoint)", "class_method_signature": "Range.clip(Range range, boolean returnNullIfDisjoint)", "testcase": false, "constructor": false}, {"identifier": "bound", "parameters": "(Column min, Column max)", "modifiers": "public", "return": "Range", "signature": "Range bound(Column min, Column max)", "full_signature": "public Range bound(Column min, Column max)", "class_method_signature": "Range.bound(Column min, Column max)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Range.toString()", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "Range.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "Range.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "isStartKeyInclusive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStartKeyInclusive()", "full_signature": "public boolean isStartKeyInclusive()", "class_method_signature": "Range.isStartKeyInclusive()", "testcase": false, "constructor": false}, {"identifier": "isEndKeyInclusive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEndKeyInclusive()", "full_signature": "public boolean isEndKeyInclusive()", "class_method_signature": "Range.isEndKeyInclusive()", "testcase": false, "constructor": false}, {"identifier": "toThrift", "parameters": "()", "modifiers": "public", "return": "TRange", "signature": "TRange toThrift()", "full_signature": "public TRange toThrift()", "class_method_signature": "Range.toThrift()", "testcase": false, "constructor": false}, {"identifier": "isInfiniteStartKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInfiniteStartKey()", "full_signature": "public boolean isInfiniteStartKey()", "class_method_signature": "Range.isInfiniteStartKey()", "testcase": false, "constructor": false}, {"identifier": "isInfiniteStopKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInfiniteStopKey()", "full_signature": "public boolean isInfiniteStopKey()", "class_method_signature": "Range.isInfiniteStopKey()", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(Text row)", "modifiers": "public static", "return": "Range", "signature": "Range exact(Text row)", "full_signature": "public static Range exact(Text row)", "class_method_signature": "Range.exact(Text row)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(Text row, Text cf)", "modifiers": "public static", "return": "Range", "signature": "Range exact(Text row, Text cf)", "full_signature": "public static Range exact(Text row, Text cf)", "class_method_signature": "Range.exact(Text row, Text cf)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(Text row, Text cf, Text cq)", "modifiers": "public static", "return": "Range", "signature": "Range exact(Text row, Text cf, Text cq)", "full_signature": "public static Range exact(Text row, Text cf, Text cq)", "class_method_signature": "Range.exact(Text row, Text cf, Text cq)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(Text row, Text cf, Text cq, Text cv)", "modifiers": "public static", "return": "Range", "signature": "Range exact(Text row, Text cf, Text cq, Text cv)", "full_signature": "public static Range exact(Text row, Text cf, Text cq, Text cv)", "class_method_signature": "Range.exact(Text row, Text cf, Text cq, Text cv)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(Text row, Text cf, Text cq, Text cv, long ts)", "modifiers": "public static", "return": "Range", "signature": "Range exact(Text row, Text cf, Text cq, Text cv, long ts)", "full_signature": "public static Range exact(Text row, Text cf, Text cq, Text cv, long ts)", "class_method_signature": "Range.exact(Text row, Text cf, Text cq, Text cv, long ts)", "testcase": false, "constructor": false}, {"identifier": "followingPrefix", "parameters": "(Text prefix)", "modifiers": "public static", "return": "Text", "signature": "Text followingPrefix(Text prefix)", "full_signature": "public static Text followingPrefix(Text prefix)", "class_method_signature": "Range.followingPrefix(Text prefix)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(Text rowPrefix)", "modifiers": "public static", "return": "Range", "signature": "Range prefix(Text rowPrefix)", "full_signature": "public static Range prefix(Text rowPrefix)", "class_method_signature": "Range.prefix(Text rowPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(Text row, Text cfPrefix)", "modifiers": "public static", "return": "Range", "signature": "Range prefix(Text row, Text cfPrefix)", "full_signature": "public static Range prefix(Text row, Text cfPrefix)", "class_method_signature": "Range.prefix(Text row, Text cfPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(Text row, Text cf, Text cqPrefix)", "modifiers": "public static", "return": "Range", "signature": "Range prefix(Text row, Text cf, Text cqPrefix)", "full_signature": "public static Range prefix(Text row, Text cf, Text cqPrefix)", "class_method_signature": "Range.prefix(Text row, Text cf, Text cqPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(Text row, Text cf, Text cq, Text cvPrefix)", "modifiers": "public static", "return": "Range", "signature": "Range prefix(Text row, Text cf, Text cq, Text cvPrefix)", "full_signature": "public static Range prefix(Text row, Text cf, Text cq, Text cvPrefix)", "class_method_signature": "Range.prefix(Text row, Text cf, Text cq, Text cvPrefix)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(CharSequence row)", "modifiers": "public static", "return": "Range", "signature": "Range exact(CharSequence row)", "full_signature": "public static Range exact(CharSequence row)", "class_method_signature": "Range.exact(CharSequence row)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(CharSequence row, CharSequence cf)", "modifiers": "public static", "return": "Range", "signature": "Range exact(CharSequence row, CharSequence cf)", "full_signature": "public static Range exact(CharSequence row, CharSequence cf)", "class_method_signature": "Range.exact(CharSequence row, CharSequence cf)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(CharSequence row, CharSequence cf, CharSequence cq)", "modifiers": "public static", "return": "Range", "signature": "Range exact(CharSequence row, CharSequence cf, CharSequence cq)", "full_signature": "public static Range exact(CharSequence row, CharSequence cf, CharSequence cq)", "class_method_signature": "Range.exact(CharSequence row, CharSequence cf, CharSequence cq)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(CharSequence row, CharSequence cf, CharSequence cq, CharSequence cv)", "modifiers": "public static", "return": "Range", "signature": "Range exact(CharSequence row, CharSequence cf, CharSequence cq, CharSequence cv)", "full_signature": "public static Range exact(CharSequence row, CharSequence cf, CharSequence cq, CharSequence cv)", "class_method_signature": "Range.exact(CharSequence row, CharSequence cf, CharSequence cq, CharSequence cv)", "testcase": false, "constructor": false}, {"identifier": "exact", "parameters": "(CharSequence row, CharSequence cf, CharSequence cq, CharSequence cv,\n      long ts)", "modifiers": "public static", "return": "Range", "signature": "Range exact(CharSequence row, CharSequence cf, CharSequence cq, CharSequence cv,\n      long ts)", "full_signature": "public static Range exact(CharSequence row, CharSequence cf, CharSequence cq, CharSequence cv,\n      long ts)", "class_method_signature": "Range.exact(CharSequence row, CharSequence cf, CharSequence cq, CharSequence cv,\n      long ts)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(CharSequence rowPrefix)", "modifiers": "public static", "return": "Range", "signature": "Range prefix(CharSequence rowPrefix)", "full_signature": "public static Range prefix(CharSequence rowPrefix)", "class_method_signature": "Range.prefix(CharSequence rowPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(CharSequence row, CharSequence cfPrefix)", "modifiers": "public static", "return": "Range", "signature": "Range prefix(CharSequence row, CharSequence cfPrefix)", "full_signature": "public static Range prefix(CharSequence row, CharSequence cfPrefix)", "class_method_signature": "Range.prefix(CharSequence row, CharSequence cfPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(CharSequence row, CharSequence cf, CharSequence cqPrefix)", "modifiers": "public static", "return": "Range", "signature": "Range prefix(CharSequence row, CharSequence cf, CharSequence cqPrefix)", "full_signature": "public static Range prefix(CharSequence row, CharSequence cf, CharSequence cqPrefix)", "class_method_signature": "Range.prefix(CharSequence row, CharSequence cf, CharSequence cqPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(CharSequence row, CharSequence cf, CharSequence cq,\n      CharSequence cvPrefix)", "modifiers": "public static", "return": "Range", "signature": "Range prefix(CharSequence row, CharSequence cf, CharSequence cq,\n      CharSequence cvPrefix)", "full_signature": "public static Range prefix(CharSequence row, CharSequence cf, CharSequence cq,\n      CharSequence cvPrefix)", "class_method_signature": "Range.prefix(CharSequence row, CharSequence cf, CharSequence cq,\n      CharSequence cvPrefix)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/data/Range.java"}, "focal_method": {"identifier": "toThrift", "parameters": "()", "modifiers": "public", "return": "TRange", "body": "public TRange toThrift() {\n    return new TRange(start == null ? null : start.toThrift(),\n        stop == null ? null : stop.toThrift(), startKeyInclusive, stopKeyInclusive,\n        infiniteStartKey, infiniteStopKey);\n  }", "signature": "TRange toThrift()", "full_signature": "public TRange toThrift()", "class_method_signature": "Range.toThrift()", "testcase": false, "constructor": false, "invocations": ["toThrift", "toThrift"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}