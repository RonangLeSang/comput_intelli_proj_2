{"test_class": {"identifier": "MetadataTimeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MetadataTime m1234 = new MetadataTime(1234, TimeType.MILLIS);", "modifier": "private static final", "type": "MetadataTime", "declarator": "m1234 = new MetadataTime(1234, TimeType.MILLIS)", "var_name": "m1234"}, {"original_string": "private static final MetadataTime m5678 = new MetadataTime(5678, TimeType.MILLIS);", "modifier": "private static final", "type": "MetadataTime", "declarator": "m5678 = new MetadataTime(5678, TimeType.MILLIS)", "var_name": "m5678"}, {"original_string": "private static final MetadataTime l1234 = new MetadataTime(1234, TimeType.LOGICAL);", "modifier": "private static final", "type": "MetadataTime", "declarator": "l1234 = new MetadataTime(1234, TimeType.LOGICAL)", "var_name": "l1234"}, {"original_string": "private static final MetadataTime l5678 = new MetadataTime(5678, TimeType.LOGICAL);", "modifier": "private static final", "type": "MetadataTime", "declarator": "l5678 = new MetadataTime(5678, TimeType.LOGICAL)", "var_name": "l5678"}], "file": "core/src/test/java/org/apache/accumulo/core/metadata/schema/MetadataTimeTest.java"}, "test_case": {"identifier": "testenCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testenCode() {\n    assertEquals(\"M21\", new MetadataTime(21, TimeType.MILLIS).encode());\n    assertEquals(\"L45678\", new MetadataTime(45678, TimeType.LOGICAL).encode());\n  }", "signature": "void testenCode()", "full_signature": "@Test public void testenCode()", "class_method_signature": "MetadataTimeTest.testenCode()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "encode", "assertEquals", "encode"]}, "focal_class": {"identifier": "MetadataTime", "superclass": "", "interfaces": "implements Comparable<MetadataTime>", "fields": [{"original_string": "private final long time;", "modifier": "private final", "type": "long", "declarator": "time", "var_name": "time"}, {"original_string": "private final TimeType type;", "modifier": "private final", "type": "TimeType", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "MetadataTime", "parameters": "(long time, TimeType type)", "modifiers": "public", "return": "", "signature": " MetadataTime(long time, TimeType type)", "full_signature": "public  MetadataTime(long time, TimeType type)", "class_method_signature": "MetadataTime.MetadataTime(long time, TimeType type)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String timestr)", "modifiers": "public static", "return": "MetadataTime", "signature": "MetadataTime parse(String timestr)", "full_signature": "public static MetadataTime parse(String timestr)", "class_method_signature": "MetadataTime.parse(String timestr)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(char code)", "modifiers": "public static", "return": "TimeType", "signature": "TimeType getType(char code)", "full_signature": "public static TimeType getType(char code)", "class_method_signature": "MetadataTime.getType(char code)", "testcase": false, "constructor": false}, {"identifier": "getCode", "parameters": "(TimeType type)", "modifiers": "public static", "return": "char", "signature": "char getCode(TimeType type)", "full_signature": "public static char getCode(TimeType type)", "class_method_signature": "MetadataTime.getCode(TimeType type)", "testcase": false, "constructor": false}, {"identifier": "getCode", "parameters": "()", "modifiers": "public", "return": "char", "signature": "char getCode()", "full_signature": "public char getCode()", "class_method_signature": "MetadataTime.getCode()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encode()", "full_signature": "public String encode()", "class_method_signature": "MetadataTime.encode()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "TimeType", "signature": "TimeType getType()", "full_signature": "public TimeType getType()", "class_method_signature": "MetadataTime.getType()", "testcase": false, "constructor": false}, {"identifier": "getTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTime()", "full_signature": "public long getTime()", "class_method_signature": "MetadataTime.getTime()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MetadataTime.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MetadataTime.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(MetadataTime mtime)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(MetadataTime mtime)", "full_signature": "@Override public int compareTo(MetadataTime mtime)", "class_method_signature": "MetadataTime.compareTo(MetadataTime mtime)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/metadata/schema/MetadataTime.java"}, "focal_method": {"identifier": "encode", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String encode() {\n    return \"\" + getCode() + time;\n  }", "signature": "String encode()", "full_signature": "public String encode()", "class_method_signature": "MetadataTime.encode()", "testcase": false, "constructor": false, "invocations": ["getCode"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}