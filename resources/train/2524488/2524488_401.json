{"test_class": {"identifier": "RelativeKeyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ArrayList<Key> expectedKeys;", "modifier": "private static", "type": "ArrayList<Key>", "declarator": "expectedKeys", "var_name": "expectedKeys"}, {"original_string": "private static ArrayList<Value> expectedValues;", "modifier": "private static", "type": "ArrayList<Value>", "declarator": "expectedValues", "var_name": "expectedValues"}, {"original_string": "private static ArrayList<Integer> expectedPositions;", "modifier": "private static", "type": "ArrayList<Integer>", "declarator": "expectedPositions", "var_name": "expectedPositions"}, {"original_string": "private static ByteArrayOutputStream baos;", "modifier": "private static", "type": "ByteArrayOutputStream", "declarator": "baos", "var_name": "baos"}, {"original_string": "private DataInputStream in;", "modifier": "private", "type": "DataInputStream", "declarator": "in", "var_name": "in"}], "file": "core/src/test/java/org/apache/accumulo/core/file/rfile/RelativeKeyTest.java"}, "test_case": {"identifier": "testCommonPrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCommonPrefix() {\n    // exact matches\n    ArrayByteSequence exact = new ArrayByteSequence(\"abc\");\n    assertEquals(-1, RelativeKey.getCommonPrefix(exact, exact));\n    assertEquals(-1, commonPrefixHelper(\"\", \"\"));\n    assertEquals(-1, commonPrefixHelper(\"a\", \"a\"));\n    assertEquals(-1, commonPrefixHelper(\"aa\", \"aa\"));\n    assertEquals(-1, commonPrefixHelper(\"aaa\", \"aaa\"));\n    assertEquals(-1, commonPrefixHelper(\"abab\", \"abab\"));\n    assertEquals(-1,\n        commonPrefixHelper(new String(\"aaa\"), new ArrayByteSequence(\"aaa\").toString()));\n    assertEquals(-1,\n        commonPrefixHelper(\"abababababab\".substring(3, 6), \"ccababababcc\".substring(3, 6)));\n\n    // no common prefix\n    assertEquals(0, commonPrefixHelper(\"\", \"a\"));\n    assertEquals(0, commonPrefixHelper(\"a\", \"\"));\n    assertEquals(0, commonPrefixHelper(\"a\", \"b\"));\n    assertEquals(0, commonPrefixHelper(\"aaaa\", \"bbbb\"));\n\n    // some common prefix\n    assertEquals(1, commonPrefixHelper(\"a\", \"ab\"));\n    assertEquals(1, commonPrefixHelper(\"ab\", \"ac\"));\n    assertEquals(1, commonPrefixHelper(\"ab\", \"ac\"));\n    assertEquals(2, commonPrefixHelper(\"aa\", \"aaaa\"));\n    assertEquals(4, commonPrefixHelper(\"aaaaa\", \"aaaab\"));\n  }", "signature": "void testCommonPrefix()", "full_signature": "@Test public void testCommonPrefix()", "class_method_signature": "RelativeKeyTest.testCommonPrefix()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getCommonPrefix", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "toString", "assertEquals", "commonPrefixHelper", "substring", "substring", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper", "assertEquals", "commonPrefixHelper"]}, "focal_class": {"identifier": "RelativeKey", "superclass": "", "interfaces": "implements Writable", "fields": [{"original_string": "private static final byte BIT = 0x01;", "modifier": "private static final", "type": "byte", "declarator": "BIT = 0x01", "var_name": "BIT"}, {"original_string": "private Key key;", "modifier": "private", "type": "Key", "declarator": "key", "var_name": "key"}, {"original_string": "private Key prevKey;", "modifier": "private", "type": "Key", "declarator": "prevKey", "var_name": "prevKey"}, {"original_string": "private byte fieldsSame;", "modifier": "private", "type": "byte", "declarator": "fieldsSame", "var_name": "fieldsSame"}, {"original_string": "private byte fieldsPrefixed;", "modifier": "private", "type": "byte", "declarator": "fieldsPrefixed", "var_name": "fieldsPrefixed"}, {"original_string": "private static final byte ROW_SAME = BIT << 0;", "modifier": "private static final", "type": "byte", "declarator": "ROW_SAME = BIT << 0", "var_name": "ROW_SAME"}, {"original_string": "private static final byte CF_SAME = BIT << 1;", "modifier": "private static final", "type": "byte", "declarator": "CF_SAME = BIT << 1", "var_name": "CF_SAME"}, {"original_string": "private static final byte CQ_SAME = BIT << 2;", "modifier": "private static final", "type": "byte", "declarator": "CQ_SAME = BIT << 2", "var_name": "CQ_SAME"}, {"original_string": "private static final byte CV_SAME = BIT << 3;", "modifier": "private static final", "type": "byte", "declarator": "CV_SAME = BIT << 3", "var_name": "CV_SAME"}, {"original_string": "private static final byte TS_SAME = BIT << 4;", "modifier": "private static final", "type": "byte", "declarator": "TS_SAME = BIT << 4", "var_name": "TS_SAME"}, {"original_string": "private static final byte DELETED = BIT << 5;", "modifier": "private static final", "type": "byte", "declarator": "DELETED = BIT << 5", "var_name": "DELETED"}, {"original_string": "private static final byte PREFIX_COMPRESSION_ENABLED = (byte) (BIT << 7);", "modifier": "private static final", "type": "byte", "declarator": "PREFIX_COMPRESSION_ENABLED = (byte) (BIT << 7)", "var_name": "PREFIX_COMPRESSION_ENABLED"}, {"original_string": "private static final byte ROW_COMMON_PREFIX = BIT << 0;", "modifier": "private static final", "type": "byte", "declarator": "ROW_COMMON_PREFIX = BIT << 0", "var_name": "ROW_COMMON_PREFIX"}, {"original_string": "private static final byte CF_COMMON_PREFIX = BIT << 1;", "modifier": "private static final", "type": "byte", "declarator": "CF_COMMON_PREFIX = BIT << 1", "var_name": "CF_COMMON_PREFIX"}, {"original_string": "private static final byte CQ_COMMON_PREFIX = BIT << 2;", "modifier": "private static final", "type": "byte", "declarator": "CQ_COMMON_PREFIX = BIT << 2", "var_name": "CQ_COMMON_PREFIX"}, {"original_string": "private static final byte CV_COMMON_PREFIX = BIT << 3;", "modifier": "private static final", "type": "byte", "declarator": "CV_COMMON_PREFIX = BIT << 3", "var_name": "CV_COMMON_PREFIX"}, {"original_string": "private static final byte TS_DIFF = BIT << 4;", "modifier": "private static final", "type": "byte", "declarator": "TS_DIFF = BIT << 4", "var_name": "TS_DIFF"}, {"original_string": "int rowCommonPrefixLen;", "modifier": "", "type": "int", "declarator": "rowCommonPrefixLen", "var_name": "rowCommonPrefixLen"}, {"original_string": "int cfCommonPrefixLen;", "modifier": "", "type": "int", "declarator": "cfCommonPrefixLen", "var_name": "cfCommonPrefixLen"}, {"original_string": "int cqCommonPrefixLen;", "modifier": "", "type": "int", "declarator": "cqCommonPrefixLen", "var_name": "cqCommonPrefixLen"}, {"original_string": "int cvCommonPrefixLen;", "modifier": "", "type": "int", "declarator": "cvCommonPrefixLen", "var_name": "cvCommonPrefixLen"}, {"original_string": "long tsDiff;", "modifier": "", "type": "long", "declarator": "tsDiff", "var_name": "tsDiff"}], "methods": [{"identifier": "RelativeKey", "parameters": "()", "modifiers": "public", "return": "", "signature": " RelativeKey()", "full_signature": "public  RelativeKey()", "class_method_signature": "RelativeKey.RelativeKey()", "testcase": false, "constructor": true}, {"identifier": "RelativeKey", "parameters": "(Key prevKey, Key key)", "modifiers": "public", "return": "", "signature": " RelativeKey(Key prevKey, Key key)", "full_signature": "public  RelativeKey(Key prevKey, Key key)", "class_method_signature": "RelativeKey.RelativeKey(Key prevKey, Key key)", "testcase": false, "constructor": true}, {"identifier": "getCommonPrefix", "parameters": "(ByteSequence prev, ByteSequence cur)", "modifiers": "static", "return": "int", "signature": "int getCommonPrefix(ByteSequence prev, ByteSequence cur)", "full_signature": "static int getCommonPrefix(ByteSequence prev, ByteSequence cur)", "class_method_signature": "RelativeKey.getCommonPrefix(ByteSequence prev, ByteSequence cur)", "testcase": false, "constructor": false}, {"identifier": "setPrevKey", "parameters": "(Key pk)", "modifiers": "public", "return": "void", "signature": "void setPrevKey(Key pk)", "full_signature": "public void setPrevKey(Key pk)", "class_method_signature": "RelativeKey.setPrevKey(Key pk)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "RelativeKey.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "fastSkip", "parameters": "(DataInput in, Key seekKey, MutableByteSequence value, Key prevKey,\n      Key currKey, int entriesLeft)", "modifiers": "public static", "return": "SkippR", "signature": "SkippR fastSkip(DataInput in, Key seekKey, MutableByteSequence value, Key prevKey,\n      Key currKey, int entriesLeft)", "full_signature": "public static SkippR fastSkip(DataInput in, Key seekKey, MutableByteSequence value, Key prevKey,\n      Key currKey, int entriesLeft)", "class_method_signature": "RelativeKey.fastSkip(DataInput in, Key seekKey, MutableByteSequence value, Key prevKey,\n      Key currKey, int entriesLeft)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(DataInput in, MutableByteSequence mbseq)", "modifiers": "private static", "return": "void", "signature": "void read(DataInput in, MutableByteSequence mbseq)", "full_signature": "private static void read(DataInput in, MutableByteSequence mbseq)", "class_method_signature": "RelativeKey.read(DataInput in, MutableByteSequence mbseq)", "testcase": false, "constructor": false}, {"identifier": "readValue", "parameters": "(DataInput in, MutableByteSequence mbseq)", "modifiers": "private static", "return": "void", "signature": "void readValue(DataInput in, MutableByteSequence mbseq)", "full_signature": "private static void readValue(DataInput in, MutableByteSequence mbseq)", "class_method_signature": "RelativeKey.readValue(DataInput in, MutableByteSequence mbseq)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(DataInput in, MutableByteSequence mbseqDestination, int len)", "modifiers": "private static", "return": "void", "signature": "void read(DataInput in, MutableByteSequence mbseqDestination, int len)", "full_signature": "private static void read(DataInput in, MutableByteSequence mbseqDestination, int len)", "class_method_signature": "RelativeKey.read(DataInput in, MutableByteSequence mbseqDestination, int len)", "testcase": false, "constructor": false}, {"identifier": "readPrefix", "parameters": "(DataInput in, ByteSequence prefixSource)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] readPrefix(DataInput in, ByteSequence prefixSource)", "full_signature": "private static byte[] readPrefix(DataInput in, ByteSequence prefixSource)", "class_method_signature": "RelativeKey.readPrefix(DataInput in, ByteSequence prefixSource)", "testcase": false, "constructor": false}, {"identifier": "readPrefix", "parameters": "(DataInput in, MutableByteSequence dest, ByteSequence prefixSource)", "modifiers": "private static", "return": "void", "signature": "void readPrefix(DataInput in, MutableByteSequence dest, ByteSequence prefixSource)", "full_signature": "private static void readPrefix(DataInput in, MutableByteSequence dest, ByteSequence prefixSource)", "class_method_signature": "RelativeKey.readPrefix(DataInput in, MutableByteSequence dest, ByteSequence prefixSource)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(DataInput in)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] read(DataInput in)", "full_signature": "private static byte[] read(DataInput in)", "class_method_signature": "RelativeKey.read(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "Key", "signature": "Key getKey()", "full_signature": "public Key getKey()", "class_method_signature": "RelativeKey.getKey()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out, ByteSequence bs)", "modifiers": "private static", "return": "void", "signature": "void write(DataOutput out, ByteSequence bs)", "full_signature": "private static void write(DataOutput out, ByteSequence bs)", "class_method_signature": "RelativeKey.write(DataOutput out, ByteSequence bs)", "testcase": false, "constructor": false}, {"identifier": "writePrefix", "parameters": "(DataOutput out, ByteSequence bs, int commonPrefixLength)", "modifiers": "private static", "return": "void", "signature": "void writePrefix(DataOutput out, ByteSequence bs, int commonPrefixLength)", "full_signature": "private static void writePrefix(DataOutput out, ByteSequence bs, int commonPrefixLength)", "class_method_signature": "RelativeKey.writePrefix(DataOutput out, ByteSequence bs, int commonPrefixLength)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "RelativeKey.write(DataOutput out)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/accumulo/core/file/rfile/RelativeKey.java"}, "focal_method": {"identifier": "getCommonPrefix", "parameters": "(ByteSequence prev, ByteSequence cur)", "modifiers": "static", "return": "int", "body": "static int getCommonPrefix(ByteSequence prev, ByteSequence cur) {\n    if (prev == cur)\n      return -1; // infinite... exact match\n\n    int prevLen = prev.length();\n    int curLen = cur.length();\n    int maxChecks = Math.min(prevLen, curLen);\n    int common = 0;\n    while (common < maxChecks) {\n      int a = prev.byteAt(common) & 0xff;\n      int b = cur.byteAt(common) & 0xff;\n      if (a != b)\n        return common;\n      common++;\n    }\n    // no differences found\n    // either exact or matches the part checked, so if they are the same length, they are an exact\n    // match,\n    // and if not, then they have a common prefix over all the checks we've done\n    return prevLen == curLen ? -1 : maxChecks;\n  }", "signature": "int getCommonPrefix(ByteSequence prev, ByteSequence cur)", "full_signature": "static int getCommonPrefix(ByteSequence prev, ByteSequence cur)", "class_method_signature": "RelativeKey.getCommonPrefix(ByteSequence prev, ByteSequence cur)", "testcase": false, "constructor": false, "invocations": ["length", "length", "min", "byteAt", "byteAt"]}, "repository": {"repo_id": 2524488, "url": "https://github.com/apache/accumulo", "stars": 779, "created": "10/6/2011 7:00:09 AM +00:00", "updates": "2020-01-24T17:34:30+00:00", "fork": "False", "license": "licensed"}}