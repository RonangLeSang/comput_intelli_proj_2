{"test_class": {"identifier": "LogUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "jstorm-core/src/test/java/com/alibaba/jstorm/utils/LogUtilsTest.java"}, "test_case": {"identifier": "testSetLogBackLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetLogBackLevel() throws Exception {\n        assertEquals(true,  LogUtils.setLogBackLevel(null,   null));      // Set ROOT logger level to 'OFF'\n        assertEquals(true,  LogUtils.setLogBackLevel(null,   \"TRACE\"));   // Set ROOT logger level to TRACE\n        assertEquals(true,  LogUtils.setLogBackLevel(\".\",    \"DEBUG\"));\n        assertEquals(true,  LogUtils.setLogBackLevel(null,   \"INFO\"));\n        assertEquals(true,  LogUtils.setLogBackLevel(null,   \"WARN\"));\n        assertEquals(false, LogUtils.setLogBackLevel(null,   \"WARNING\")); // No such log level\n        assertEquals(false, LogUtils.setLogBackLevel(null,   \"\"));        // No such log level\n        assertEquals(false, LogUtils.setLogBackLevel(null,   \"-\"));       // No such log level\n        assertEquals(true,  LogUtils.setLogBackLevel(\"org.\", \"DEBUG\"));\n    }", "signature": "void testSetLogBackLevel()", "full_signature": "@Test public void testSetLogBackLevel()", "class_method_signature": "LogUtilsTest.testSetLogBackLevel()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "setLogBackLevel", "assertEquals", "setLogBackLevel", "assertEquals", "setLogBackLevel", "assertEquals", "setLogBackLevel", "assertEquals", "setLogBackLevel", "assertEquals", "setLogBackLevel", "assertEquals", "setLogBackLevel", "assertEquals", "setLogBackLevel", "assertEquals", "setLogBackLevel"]}, "focal_class": {"identifier": "LogUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LogUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LogUtils.class)", "var_name": "LOG"}, {"original_string": "public static final String LOGBACK_CLASSIC = \"ch.qos.logback.classic\";", "modifier": "public static final", "type": "String", "declarator": "LOGBACK_CLASSIC = \"ch.qos.logback.classic\"", "var_name": "LOGBACK_CLASSIC"}, {"original_string": "public static final String LOGBACK_CLASSIC_LOGGER = \"ch.qos.logback.classic.Logger\";", "modifier": "public static final", "type": "String", "declarator": "LOGBACK_CLASSIC_LOGGER = \"ch.qos.logback.classic.Logger\"", "var_name": "LOGBACK_CLASSIC_LOGGER"}, {"original_string": "public static final String LOGBACK_CLASSIC_LEVEL = \"ch.qos.logback.classic.Level\";", "modifier": "public static final", "type": "String", "declarator": "LOGBACK_CLASSIC_LEVEL = \"ch.qos.logback.classic.Level\"", "var_name": "LOGBACK_CLASSIC_LEVEL"}, {"original_string": "public static final String LOG4J_CLASSIC = \"org.apache.log4j\";", "modifier": "public static final", "type": "String", "declarator": "LOG4J_CLASSIC = \"org.apache.log4j\"", "var_name": "LOG4J_CLASSIC"}, {"original_string": "public static final String LOG4J_CLASSIC_LOGGER = \"org.apache.log4j.Logger\";", "modifier": "public static final", "type": "String", "declarator": "LOG4J_CLASSIC_LOGGER = \"org.apache.log4j.Logger\"", "var_name": "LOG4J_CLASSIC_LOGGER"}, {"original_string": "public static final String LOG4J_CLASSIC_LEVEL = \"org.apache.log4j.Level\";", "modifier": "public static final", "type": "String", "declarator": "LOG4J_CLASSIC_LEVEL = \"org.apache.log4j.Level\"", "var_name": "LOG4J_CLASSIC_LEVEL"}, {"original_string": "public static Long lastChangeTS = 0L;", "modifier": "public static", "type": "Long", "declarator": "lastChangeTS = 0L", "var_name": "lastChangeTS"}], "methods": [{"identifier": "LogUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " LogUtils()", "full_signature": "private  LogUtils()", "class_method_signature": "LogUtils.LogUtils()", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(Map conf)", "modifiers": "public static", "return": "void", "signature": "void update(Map conf)", "full_signature": "public static void update(Map conf)", "class_method_signature": "LogUtils.update(Map conf)", "testcase": false, "constructor": false}, {"identifier": "updateLogLevel", "parameters": "(Map<String, String> logLevelConfig)", "modifiers": "private static", "return": "void", "signature": "void updateLogLevel(Map<String, String> logLevelConfig)", "full_signature": "private static void updateLogLevel(Map<String, String> logLevelConfig)", "class_method_signature": "LogUtils.updateLogLevel(Map<String, String> logLevelConfig)", "testcase": false, "constructor": false}, {"identifier": "setLogBackLevel", "parameters": "(String loggerName, String logLevel)", "modifiers": "public static", "return": "boolean", "signature": "boolean setLogBackLevel(String loggerName, String logLevel)", "full_signature": "public static boolean setLogBackLevel(String loggerName, String logLevel)", "class_method_signature": "LogUtils.setLogBackLevel(String loggerName, String logLevel)", "testcase": false, "constructor": false}, {"identifier": "setLog4jLevel", "parameters": "(String loggerName, String logLevel)", "modifiers": "public static", "return": "boolean", "signature": "boolean setLog4jLevel(String loggerName, String logLevel)", "full_signature": "public static boolean setLog4jLevel(String loggerName, String logLevel)", "class_method_signature": "LogUtils.setLog4jLevel(String loggerName, String logLevel)", "testcase": false, "constructor": false}, {"identifier": "getFieldVaulue", "parameters": "(String fullClassName, String fieldName)", "modifiers": "private static", "return": "Object", "signature": "Object getFieldVaulue(String fullClassName, String fieldName)", "full_signature": "private static Object getFieldVaulue(String fullClassName, String fieldName)", "class_method_signature": "LogUtils.getFieldVaulue(String fullClassName, String fieldName)", "testcase": false, "constructor": false}], "file": "jstorm-core/src/main/java/com/alibaba/jstorm/utils/LogUtils.java"}, "focal_method": {"identifier": "setLogBackLevel", "parameters": "(String loggerName, String logLevel)", "modifiers": "public static", "return": "boolean", "body": "public static boolean setLogBackLevel(String loggerName, String logLevel) {\n        String logLevelUpper = (logLevel == null) ? \"OFF\" : logLevel.toUpperCase();\n        try {\n            Package logbackPackage = Package.getPackage(LOGBACK_CLASSIC);\n            if (logbackPackage == null) {\n                LOG.warn(\"Logback is not in the classpath!\");\n                return false;\n            }\n\n            // Use ROOT logger if given logger name is blank.\n            if ((loggerName == null) || loggerName.trim().isEmpty()) {\n                loggerName = (String) getFieldVaulue(LOGBACK_CLASSIC_LOGGER, \"ROOT_LOGGER_NAME\");\n            }\n\n            // Obtain logger by the name\n            Logger loggerObtained = LoggerFactory.getLogger(loggerName);\n            if (loggerObtained == null) {\n                // I don't know if this case occurs\n                LOG.warn(\"No logger for the name: {}\", loggerName);\n                return false;\n            }\n\n            Object logLevelObj = getFieldVaulue(LOGBACK_CLASSIC_LEVEL, logLevelUpper);\n            if (logLevelObj == null) {\n                LOG.warn(\"No such log level: {}\", logLevelUpper);\n                return false;\n            }\n\n            Class<?>[] paramTypes = {logLevelObj.getClass()};\n            Object[] params = {logLevelObj};\n\n            Class<?> clz = Class.forName(LOGBACK_CLASSIC_LOGGER);\n            Method method = clz.getMethod(\"setLevel\", paramTypes);\n            method.invoke(loggerObtained, params);\n\n            LOG.info(\"LogBack level set to {} for the logger '{}'\", logLevelUpper, loggerName);\n            return true;\n        } catch (NoClassDefFoundError e) {\n            LOG.warn(\"Couldn't set logback level to {} for the logger '{}'\", logLevelUpper, loggerName, e);\n            return false;\n        } catch (Exception e) {\n            LOG.warn(\"Couldn't set logback level to {} for the logger '{}'\", logLevelUpper, loggerName, e);\n            return false;\n        }\n    }", "signature": "boolean setLogBackLevel(String loggerName, String logLevel)", "full_signature": "public static boolean setLogBackLevel(String loggerName, String logLevel)", "class_method_signature": "LogUtils.setLogBackLevel(String loggerName, String logLevel)", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "getPackage", "warn", "isEmpty", "trim", "getFieldVaulue", "getLogger", "warn", "getFieldVaulue", "warn", "getClass", "forName", "getMethod", "invoke", "info", "warn", "warn"]}, "repository": {"repo_id": 12554530, "url": "https://github.com/alibaba/jstorm", "language": "Java", "is_fork": false, "fork_count": 1890, "stargazer_count": 3938, "size": 107798, "license": "licensed"}}