{"test_class": {"identifier": "ErrorCreationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ErrorCreationService errorCreationService;", "modifier": "private", "type": "ErrorCreationService", "declarator": "errorCreationService", "var_name": "errorCreationService"}, {"original_string": "@Mock\n    private ValidationChecks validationChecks;", "modifier": "@Mock\n    private", "type": "ValidationChecks", "declarator": "validationChecks", "var_name": "validationChecks"}], "file": "goci-data-services/goci-data-validation-services/src/test/java/uk/ac/ebi/spot/goci/service/ErrorCreationServiceTest.java"}, "test_case": {"identifier": "testCheckOrAndOrRecip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckOrAndOrRecip() throws Exception {\n\n        when(validationChecks.checkOrAndOrRecip((float) 0.22, (float) 0.66)).thenReturn(null);\n        ValidationError error1 = errorCreationService.checkOrAndOrRecip((float) 0.22, (float) 0.66);\n        assertThat(error1).extracting(\"field\", \"error\", \"warning\")\n                .contains(null, null, false);\n\n        when(validationChecks.checkOrAndOrRecip((float) 1.23, null)).thenReturn(null);\n        ValidationError error2 = errorCreationService.checkOrAndOrRecip((float) 1.23, null);\n        assertThat(error2).extracting(\"field\", \"error\", \"warning\").contains(null, null, false);\n\n        when(validationChecks.checkOrAndOrRecip(null, null)).thenReturn(\"OR value is empty\");\n        ValidationError error3 = errorCreationService.checkOrAndOrRecip(null, null);\n        assertThat(error3).extracting(\"field\", \"error\", \"warning\")\n                .contains(\"OR and OR reciprocal\", \"OR value is empty\", false);\n\n        when(validationChecks.checkOrAndOrRecip((float) 0.22, null)).thenReturn(\n                \"OR value is less than 1 and no OR reciprocal value entered\");\n        ValidationError error4 = errorCreationService.checkOrAndOrRecip((float) 0.22, null);\n        assertThat(error4).extracting(\"field\", \"error\", \"warning\")\n                .contains(\"OR and OR reciprocal\", \"OR value is less than 1 and no OR reciprocal value entered\", false);\n    }", "signature": "void testCheckOrAndOrRecip()", "full_signature": "@Test public void testCheckOrAndOrRecip()", "class_method_signature": "ErrorCreationServiceTest.testCheckOrAndOrRecip()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "checkOrAndOrRecip", "checkOrAndOrRecip", "contains", "extracting", "assertThat", "thenReturn", "when", "checkOrAndOrRecip", "checkOrAndOrRecip", "contains", "extracting", "assertThat", "thenReturn", "when", "checkOrAndOrRecip", "checkOrAndOrRecip", "contains", "extracting", "assertThat", "thenReturn", "when", "checkOrAndOrRecip", "checkOrAndOrRecip", "contains", "extracting", "assertThat"]}, "focal_class": {"identifier": "ErrorCreationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ValidationChecks validationChecks;", "modifier": "private", "type": "ValidationChecks", "declarator": "validationChecks", "var_name": "validationChecks"}], "methods": [{"identifier": "ErrorCreationService", "parameters": "(ValidationChecks validationChecks)", "modifiers": "@Autowired public", "return": "", "signature": " ErrorCreationService(ValidationChecks validationChecks)", "full_signature": "@Autowired public  ErrorCreationService(ValidationChecks validationChecks)", "class_method_signature": "ErrorCreationService.ErrorCreationService(ValidationChecks validationChecks)", "testcase": false, "constructor": true}, {"identifier": "checkSnpValueIsPresent", "parameters": "(String snp)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkSnpValueIsPresent(String snp)", "full_signature": "public ValidationError checkSnpValueIsPresent(String snp)", "class_method_signature": "ErrorCreationService.checkSnpValueIsPresent(String snp)", "testcase": false, "constructor": false}, {"identifier": "checkStrongestAlleleValueIsPresent", "parameters": "(String allele)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkStrongestAlleleValueIsPresent(String allele)", "full_signature": "public ValidationError checkStrongestAlleleValueIsPresent(String allele)", "class_method_signature": "ErrorCreationService.checkStrongestAlleleValueIsPresent(String allele)", "testcase": false, "constructor": false}, {"identifier": "checkSnpType", "parameters": "(String type)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkSnpType(String type)", "full_signature": "public ValidationError checkSnpType(String type)", "class_method_signature": "ErrorCreationService.checkSnpType(String type)", "testcase": false, "constructor": false}, {"identifier": "checkOrIsPresent", "parameters": "(Float or)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkOrIsPresent(Float or)", "full_signature": "public ValidationError checkOrIsPresent(Float or)", "class_method_signature": "ErrorCreationService.checkOrIsPresent(Float or)", "testcase": false, "constructor": false}, {"identifier": "checkOrRecipIsPresentAndLessThanOne", "parameters": "(Float orPerCopyRecip)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkOrRecipIsPresentAndLessThanOne(Float orPerCopyRecip)", "full_signature": "public ValidationError checkOrRecipIsPresentAndLessThanOne(Float orPerCopyRecip)", "class_method_signature": "ErrorCreationService.checkOrRecipIsPresentAndLessThanOne(Float orPerCopyRecip)", "testcase": false, "constructor": false}, {"identifier": "checkOrAndOrRecip", "parameters": "(Float or, Float orPerCopyRecip)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkOrAndOrRecip(Float or, Float orPerCopyRecip)", "full_signature": "public ValidationError checkOrAndOrRecip(Float or, Float orPerCopyRecip)", "class_method_signature": "ErrorCreationService.checkOrAndOrRecip(Float or, Float orPerCopyRecip)", "testcase": false, "constructor": false}, {"identifier": "checkBetaValuesIsEmpty", "parameters": "(Float beta)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkBetaValuesIsEmpty(Float beta)", "full_signature": "public ValidationError checkBetaValuesIsEmpty(Float beta)", "class_method_signature": "ErrorCreationService.checkBetaValuesIsEmpty(Float beta)", "testcase": false, "constructor": false}, {"identifier": "checkBetaUnitIsEmpty", "parameters": "(String unit)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkBetaUnitIsEmpty(String unit)", "full_signature": "public ValidationError checkBetaUnitIsEmpty(String unit)", "class_method_signature": "ErrorCreationService.checkBetaUnitIsEmpty(String unit)", "testcase": false, "constructor": false}, {"identifier": "checkBetaDirectionIsEmpty", "parameters": "(String direction)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkBetaDirectionIsEmpty(String direction)", "full_signature": "public ValidationError checkBetaDirectionIsEmpty(String direction)", "class_method_signature": "ErrorCreationService.checkBetaDirectionIsEmpty(String direction)", "testcase": false, "constructor": false}, {"identifier": "checkBetaIsPresentAndIsNotNegative", "parameters": "(Float beta)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkBetaIsPresentAndIsNotNegative(Float beta)", "full_signature": "public ValidationError checkBetaIsPresentAndIsNotNegative(Float beta)", "class_method_signature": "ErrorCreationService.checkBetaIsPresentAndIsNotNegative(Float beta)", "testcase": false, "constructor": false}, {"identifier": "checkBetaUnitIsPresent", "parameters": "(String unit)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkBetaUnitIsPresent(String unit)", "full_signature": "public ValidationError checkBetaUnitIsPresent(String unit)", "class_method_signature": "ErrorCreationService.checkBetaUnitIsPresent(String unit)", "testcase": false, "constructor": false}, {"identifier": "checkBetaDirectionIsPresent", "parameters": "(String direction)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkBetaDirectionIsPresent(String direction)", "full_signature": "public ValidationError checkBetaDirectionIsPresent(String direction)", "class_method_signature": "ErrorCreationService.checkBetaDirectionIsPresent(String direction)", "testcase": false, "constructor": false}, {"identifier": "checkOrEmpty", "parameters": "(Float or)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkOrEmpty(Float or)", "full_signature": "public ValidationError checkOrEmpty(Float or)", "class_method_signature": "ErrorCreationService.checkOrEmpty(Float or)", "testcase": false, "constructor": false}, {"identifier": "checkOrRecipEmpty", "parameters": "(Float orRecip)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkOrRecipEmpty(Float orRecip)", "full_signature": "public ValidationError checkOrRecipEmpty(Float orRecip)", "class_method_signature": "ErrorCreationService.checkOrRecipEmpty(Float orRecip)", "testcase": false, "constructor": false}, {"identifier": "checkOrPerCopyRecipRangeIsEmpty", "parameters": "(String recipRange)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkOrPerCopyRecipRangeIsEmpty(String recipRange)", "full_signature": "public ValidationError checkOrPerCopyRecipRangeIsEmpty(String recipRange)", "class_method_signature": "ErrorCreationService.checkOrPerCopyRecipRangeIsEmpty(String recipRange)", "testcase": false, "constructor": false}, {"identifier": "checkRangeIsEmpty", "parameters": "(String range)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkRangeIsEmpty(String range)", "full_signature": "public ValidationError checkRangeIsEmpty(String range)", "class_method_signature": "ErrorCreationService.checkRangeIsEmpty(String range)", "testcase": false, "constructor": false}, {"identifier": "checkStandardErrorIsEmpty", "parameters": "(Float standardError)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkStandardErrorIsEmpty(Float standardError)", "full_signature": "public ValidationError checkStandardErrorIsEmpty(Float standardError)", "class_method_signature": "ErrorCreationService.checkStandardErrorIsEmpty(Float standardError)", "testcase": false, "constructor": false}, {"identifier": "checkDescriptionIsEmpty", "parameters": "(String description)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkDescriptionIsEmpty(String description)", "full_signature": "public ValidationError checkDescriptionIsEmpty(String description)", "class_method_signature": "ErrorCreationService.checkDescriptionIsEmpty(String description)", "testcase": false, "constructor": false}, {"identifier": "checkMantissaIsLessThan10", "parameters": "(Integer mantissa)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkMantissaIsLessThan10(Integer mantissa)", "full_signature": "public ValidationError checkMantissaIsLessThan10(Integer mantissa)", "class_method_signature": "ErrorCreationService.checkMantissaIsLessThan10(Integer mantissa)", "testcase": false, "constructor": false}, {"identifier": "checkExponentIsPresentAndNegative", "parameters": "(Integer exponent)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkExponentIsPresentAndNegative(Integer exponent)", "full_signature": "public ValidationError checkExponentIsPresentAndNegative(Integer exponent)", "class_method_signature": "ErrorCreationService.checkExponentIsPresentAndNegative(Integer exponent)", "testcase": false, "constructor": false}, {"identifier": "checkGene", "parameters": "(String gene, String eRelease)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkGene(String gene, String eRelease)", "full_signature": "public ValidationError checkGene(String gene, String eRelease)", "class_method_signature": "ErrorCreationService.checkGene(String gene, String eRelease)", "testcase": false, "constructor": false}, {"identifier": "checkRiskAllele", "parameters": "(String riskAllele)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkRiskAllele(String riskAllele)", "full_signature": "public ValidationError checkRiskAllele(String riskAllele)", "class_method_signature": "ErrorCreationService.checkRiskAllele(String riskAllele)", "testcase": false, "constructor": false}, {"identifier": "checkSnp", "parameters": "(String snp, String eRelease)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkSnp(String snp, String eRelease)", "full_signature": "public ValidationError checkSnp(String snp, String eRelease)", "class_method_signature": "ErrorCreationService.checkSnp(String snp, String eRelease)", "testcase": false, "constructor": false}, {"identifier": "checkAssociationRiskFrequency", "parameters": "(String riskFrequency)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkAssociationRiskFrequency(String riskFrequency)", "full_signature": "public ValidationError checkAssociationRiskFrequency(String riskFrequency)", "class_method_signature": "ErrorCreationService.checkAssociationRiskFrequency(String riskFrequency)", "testcase": false, "constructor": false}, {"identifier": "checkAlleleRiskFrequency", "parameters": "(String riskFrequency)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkAlleleRiskFrequency(String riskFrequency)", "full_signature": "public ValidationError checkAlleleRiskFrequency(String riskFrequency)", "class_method_signature": "ErrorCreationService.checkAlleleRiskFrequency(String riskFrequency)", "testcase": false, "constructor": false}, {"identifier": "checkRangeIsPresent", "parameters": "(String range)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkRangeIsPresent(String range)", "full_signature": "public ValidationError checkRangeIsPresent(String range)", "class_method_signature": "ErrorCreationService.checkRangeIsPresent(String range)", "testcase": false, "constructor": false}, {"identifier": "checkOrPerCopyRecipRangeIsPresent", "parameters": "(String orPerCopyRecipRange)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkOrPerCopyRecipRangeIsPresent(String orPerCopyRecipRange)", "full_signature": "public ValidationError checkOrPerCopyRecipRangeIsPresent(String orPerCopyRecipRange)", "class_method_signature": "ErrorCreationService.checkOrPerCopyRecipRangeIsPresent(String orPerCopyRecipRange)", "testcase": false, "constructor": false}, {"identifier": "checkSnpGeneLocation", "parameters": "(String snp, String gene, String eRelease)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkSnpGeneLocation(String snp, String gene, String eRelease)", "full_signature": "public ValidationError checkSnpGeneLocation(String snp, String gene, String eRelease)", "class_method_signature": "ErrorCreationService.checkSnpGeneLocation(String snp, String gene, String eRelease)", "testcase": false, "constructor": false}, {"identifier": "checkSnpSynthax", "parameters": "(String snp, String delimiter)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkSnpSynthax(String snp, String delimiter)", "full_signature": "public ValidationError checkSnpSynthax(String snp, String delimiter)", "class_method_signature": "ErrorCreationService.checkSnpSynthax(String snp, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "checkRiskAlleleSynthax", "parameters": "(String allele, String delimiter)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkRiskAlleleSynthax(String allele, String delimiter)", "full_signature": "public ValidationError checkRiskAlleleSynthax(String allele, String delimiter)", "class_method_signature": "ErrorCreationService.checkRiskAlleleSynthax(String allele, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "checkGeneSynthax", "parameters": "(String gene, String delimiter)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkGeneSynthax(String gene, String delimiter)", "full_signature": "public ValidationError checkGeneSynthax(String gene, String delimiter)", "class_method_signature": "ErrorCreationService.checkGeneSynthax(String gene, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "checkSnpStatusIsPresent", "parameters": "(Boolean genomeWide, Boolean limitedList)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError checkSnpStatusIsPresent(Boolean genomeWide, Boolean limitedList)", "full_signature": "public ValidationError checkSnpStatusIsPresent(Boolean genomeWide, Boolean limitedList)", "class_method_signature": "ErrorCreationService.checkSnpStatusIsPresent(Boolean genomeWide, Boolean limitedList)", "testcase": false, "constructor": false}], "file": "goci-data-services/goci-data-validation-services/src/main/java/uk/ac/ebi/spot/goci/service/ErrorCreationService.java"}, "focal_method": {"identifier": "checkOrAndOrRecip", "parameters": "(Float or, Float orPerCopyRecip)", "modifiers": "public", "return": "ValidationError", "body": "public ValidationError checkOrAndOrRecip(Float or, Float orPerCopyRecip){\n        String errorMessage = validationChecks.checkOrAndOrRecip(or, orPerCopyRecip);\n        return ErrorProcessingService.createError(errorMessage, \"OR and OR reciprocal\", false);\n    }", "signature": "ValidationError checkOrAndOrRecip(Float or, Float orPerCopyRecip)", "full_signature": "public ValidationError checkOrAndOrRecip(Float or, Float orPerCopyRecip)", "class_method_signature": "ErrorCreationService.checkOrAndOrRecip(Float or, Float orPerCopyRecip)", "testcase": false, "constructor": false, "invocations": ["checkOrAndOrRecip", "createError"]}, "repository": {"repo_id": 2995118, "url": "https://github.com/EBISPOT/goci", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 16, "size": 147335, "license": "licensed"}}