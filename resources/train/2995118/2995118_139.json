{"test_class": {"identifier": "AssociationControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@Mock\n    private AssociationRepository associationRepository;", "modifier": "@Mock\n    private", "type": "AssociationRepository", "declarator": "associationRepository", "var_name": "associationRepository"}, {"original_string": "@Mock\n    private StudyRepository studyRepository;", "modifier": "@Mock\n    private", "type": "StudyRepository", "declarator": "studyRepository", "var_name": "studyRepository"}, {"original_string": "@Mock\n    private EfoTraitRepository efoTraitRepository;", "modifier": "@Mock\n    private", "type": "EfoTraitRepository", "declarator": "efoTraitRepository", "var_name": "efoTraitRepository"}, {"original_string": "@Mock\n    private AssociationDownloadService associationDownloadService;", "modifier": "@Mock\n    private", "type": "AssociationDownloadService", "declarator": "associationDownloadService", "var_name": "associationDownloadService"}, {"original_string": "@Mock\n    private SnpAssociationTableViewService snpAssociationTableViewService;", "modifier": "@Mock\n    private", "type": "SnpAssociationTableViewService", "declarator": "snpAssociationTableViewService", "var_name": "snpAssociationTableViewService"}, {"original_string": "@Mock\n    private SingleSnpMultiSnpAssociationService singleSnpMultiSnpAssociationService;", "modifier": "@Mock\n    private", "type": "SingleSnpMultiSnpAssociationService", "declarator": "singleSnpMultiSnpAssociationService", "var_name": "singleSnpMultiSnpAssociationService"}, {"original_string": "@Mock\n    private SnpInteractionAssociationService snpInteractionAssociationService;", "modifier": "@Mock\n    private", "type": "SnpInteractionAssociationService", "declarator": "snpInteractionAssociationService", "var_name": "snpInteractionAssociationService"}, {"original_string": "@Mock\n    private CheckEfoTermAssignmentService checkEfoTermAssignmentService;", "modifier": "@Mock\n    private", "type": "CheckEfoTermAssignmentService", "declarator": "checkEfoTermAssignmentService", "var_name": "checkEfoTermAssignmentService"}, {"original_string": "@Mock\n    private AssociationOperationsService associationOperationsService;", "modifier": "@Mock\n    private", "type": "AssociationOperationsService", "declarator": "associationOperationsService", "var_name": "associationOperationsService"}, {"original_string": "@Mock\n    private MappingService mappingService;", "modifier": "@Mock\n    private", "type": "MappingService", "declarator": "mappingService", "var_name": "mappingService"}, {"original_string": "@Mock\n    private AssociationUploadService associationUploadService;", "modifier": "@Mock\n    private", "type": "AssociationUploadService", "declarator": "associationUploadService", "var_name": "associationUploadService"}, {"original_string": "@Mock\n    private CurrentUserDetailsService currentUserDetailsService;", "modifier": "@Mock\n    private", "type": "CurrentUserDetailsService", "declarator": "currentUserDetailsService", "var_name": "currentUserDetailsService"}, {"original_string": "@Mock\n    private AssociationValidationReportService associationValidationReportService;", "modifier": "@Mock\n    private", "type": "AssociationValidationReportService", "declarator": "associationValidationReportService", "var_name": "associationValidationReportService"}, {"original_string": "@Mock\n    private AssociationDeletionService associationDeletionService;", "modifier": "@Mock\n    private", "type": "AssociationDeletionService", "declarator": "associationDeletionService", "var_name": "associationDeletionService"}, {"original_string": "@Mock\n    private AssociationEventsViewService associationsEventsViewService;", "modifier": "@Mock\n    private", "type": "AssociationEventsViewService", "declarator": "associationsEventsViewService", "var_name": "associationsEventsViewService"}, {"original_string": "@Mock\n    private StudyAssociationBatchDeletionEventService studyAssociationBatchDeletionEventService;", "modifier": "@Mock\n    private", "type": "StudyAssociationBatchDeletionEventService", "declarator": "studyAssociationBatchDeletionEventService", "var_name": "studyAssociationBatchDeletionEventService"}, {"original_string": "@Mock\n    private EnsemblRestTemplateService ensemblRestTemplateService;", "modifier": "@Mock\n    private", "type": "EnsemblRestTemplateService", "declarator": "ensemblRestTemplateService", "var_name": "ensemblRestTemplateService"}, {"original_string": "@Mock\n    private CheckMappingService checkMappingService;", "modifier": "@Mock\n    private", "type": "CheckMappingService", "declarator": "checkMappingService", "var_name": "checkMappingService"}, {"original_string": "@Mock\n    private MapCatalogService mapCatalogService;", "modifier": "@Mock\n    private", "type": "MapCatalogService", "declarator": "mapCatalogService", "var_name": "mapCatalogService"}, {"original_string": "@Mock\n    private AssociationService associationService;", "modifier": "@Mock\n    private", "type": "AssociationService", "declarator": "associationService", "var_name": "associationService"}, {"original_string": "private static final SecureUser SECURE_USER =\n            new SecureUserBuilder().setId(564L).setEmail(\"test@test.com\").setPasswordHash(\"738274$$\").build();", "modifier": "private static final", "type": "SecureUser", "declarator": "SECURE_USER =\n            new SecureUserBuilder().setId(564L).setEmail(\"test@test.com\").setPasswordHash(\"738274$$\").build()", "var_name": "SECURE_USER"}, {"original_string": "private static final Study STUDY = new StudyBuilder().setId(1234L).build();", "modifier": "private static final", "type": "Study", "declarator": "STUDY = new StudyBuilder().setId(1234L).build()", "var_name": "STUDY"}, {"original_string": "private static final Association ASSOCIATION =\n            new AssociationBuilder().setId(100L)\n                    .setStudy(STUDY)\n                    .build();", "modifier": "private static final", "type": "Association", "declarator": "ASSOCIATION =\n            new AssociationBuilder().setId(100L)\n                    .setStudy(STUDY)\n                    .build()", "var_name": "ASSOCIATION"}, {"original_string": "private static final Association EDITED_ASSOCIATION =\n            new AssociationBuilder()\n                    .setStudy(STUDY)\n                    .build();", "modifier": "private static final", "type": "Association", "declarator": "EDITED_ASSOCIATION =\n            new AssociationBuilder()\n                    .setStudy(STUDY)\n                    .build()", "var_name": "EDITED_ASSOCIATION"}], "file": "goci-interfaces/goci-curation/src/test/java/uk/ac/ebi/spot/goci/curation/controller/AssociationControllerTest.java"}, "test_case": {"identifier": "handleFileUploadException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleFileUploadException() throws Exception {\n\n    }", "signature": "void handleFileUploadException()", "full_signature": "@Test public void handleFileUploadException()", "class_method_signature": "AssociationControllerTest.handleFileUploadException()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "AssociationController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AssociationRepository associationRepository;", "modifier": "private", "type": "AssociationRepository", "declarator": "associationRepository", "var_name": "associationRepository"}, {"original_string": "private StudyRepository studyRepository;", "modifier": "private", "type": "StudyRepository", "declarator": "studyRepository", "var_name": "studyRepository"}, {"original_string": "private EfoTraitRepository efoTraitRepository;", "modifier": "private", "type": "EfoTraitRepository", "declarator": "efoTraitRepository", "var_name": "efoTraitRepository"}, {"original_string": "private AssociationDownloadService associationDownloadService;", "modifier": "private", "type": "AssociationDownloadService", "declarator": "associationDownloadService", "var_name": "associationDownloadService"}, {"original_string": "private SnpAssociationTableViewService snpAssociationTableViewService;", "modifier": "private", "type": "SnpAssociationTableViewService", "declarator": "snpAssociationTableViewService", "var_name": "snpAssociationTableViewService"}, {"original_string": "private SingleSnpMultiSnpAssociationService singleSnpMultiSnpAssociationService;", "modifier": "private", "type": "SingleSnpMultiSnpAssociationService", "declarator": "singleSnpMultiSnpAssociationService", "var_name": "singleSnpMultiSnpAssociationService"}, {"original_string": "private SnpInteractionAssociationService snpInteractionAssociationService;", "modifier": "private", "type": "SnpInteractionAssociationService", "declarator": "snpInteractionAssociationService", "var_name": "snpInteractionAssociationService"}, {"original_string": "private CheckEfoTermAssignmentService checkEfoTermAssignmentService;", "modifier": "private", "type": "CheckEfoTermAssignmentService", "declarator": "checkEfoTermAssignmentService", "var_name": "checkEfoTermAssignmentService"}, {"original_string": "private AssociationOperationsService associationOperationsService;", "modifier": "private", "type": "AssociationOperationsService", "declarator": "associationOperationsService", "var_name": "associationOperationsService"}, {"original_string": "private AssociationUploadService associationUploadService;", "modifier": "private", "type": "AssociationUploadService", "declarator": "associationUploadService", "var_name": "associationUploadService"}, {"original_string": "private CurrentUserDetailsService currentUserDetailsService;", "modifier": "private", "type": "CurrentUserDetailsService", "declarator": "currentUserDetailsService", "var_name": "currentUserDetailsService"}, {"original_string": "private AssociationValidationReportService associationValidationReportService;", "modifier": "private", "type": "AssociationValidationReportService", "declarator": "associationValidationReportService", "var_name": "associationValidationReportService"}, {"original_string": "private AssociationDeletionService associationDeletionService;", "modifier": "private", "type": "AssociationDeletionService", "declarator": "associationDeletionService", "var_name": "associationDeletionService"}, {"original_string": "private EventsViewService eventsViewService;", "modifier": "private", "type": "EventsViewService", "declarator": "eventsViewService", "var_name": "eventsViewService"}, {"original_string": "private StudyAssociationBatchDeletionEventService studyAssociationBatchDeletionEventService;", "modifier": "private", "type": "StudyAssociationBatchDeletionEventService", "declarator": "studyAssociationBatchDeletionEventService", "var_name": "studyAssociationBatchDeletionEventService"}, {"original_string": "private AssociationService associationService;", "modifier": "private", "type": "AssociationService", "declarator": "associationService", "var_name": "associationService"}, {"original_string": "private EnsemblRestTemplateService ensemblRestTemplateService;", "modifier": "private", "type": "EnsemblRestTemplateService", "declarator": "ensemblRestTemplateService", "var_name": "ensemblRestTemplateService"}, {"original_string": "private CheckMappingService checkMappingService;", "modifier": "private", "type": "CheckMappingService", "declarator": "checkMappingService", "var_name": "checkMappingService"}, {"original_string": "private MapCatalogService mapCatalogService;", "modifier": "private", "type": "MapCatalogService", "declarator": "mapCatalogService", "var_name": "mapCatalogService"}, {"original_string": "private static final int MAX_PAGE_ITEM_DISPLAY = 100;", "modifier": "private static final", "type": "int", "declarator": "MAX_PAGE_ITEM_DISPLAY = 100", "var_name": "MAX_PAGE_ITEM_DISPLAY"}, {"original_string": "@Value(\"${collection.sizelimit}\")\n    private int collectionLimit;", "modifier": "@Value(\"${collection.sizelimit}\")\n    private", "type": "int", "declarator": "collectionLimit", "var_name": "collectionLimit"}, {"original_string": "private final ExecutorService executorService;", "modifier": "private final", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}], "methods": [{"identifier": "getLog", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger getLog()", "full_signature": "protected Logger getLog()", "class_method_signature": "AssociationController.getLog()", "testcase": false, "constructor": false}, {"identifier": "initBinder", "parameters": "(WebDataBinder dataBinder)", "modifiers": "@InitBinder(value={\"snpAssociationStandardMultiForm\", \"snpAssociationInteractionForm\"}) public", "return": "void", "signature": "void initBinder(WebDataBinder dataBinder)", "full_signature": "@InitBinder(value={\"snpAssociationStandardMultiForm\", \"snpAssociationInteractionForm\"}) public void initBinder(WebDataBinder dataBinder)", "class_method_signature": "AssociationController.initBinder(WebDataBinder dataBinder)", "testcase": false, "constructor": false}, {"identifier": "AssociationController", "parameters": "(AssociationRepository associationRepository,\n                                 StudyRepository studyRepository,\n                                 EfoTraitRepository efoTraitRepository,\n                                 AssociationDownloadService associationDownloadService,\n                                 SnpAssociationTableViewService snpAssociationTableViewService,\n                                 SingleSnpMultiSnpAssociationService singleSnpMultiSnpAssociationService,\n                                 SnpInteractionAssociationService snpInteractionAssociationService,\n                                 CheckEfoTermAssignmentService checkEfoTermAssignmentService,\n                                 AssociationOperationsService associationOperationsService,\n                                 AssociationUploadService associationUploadService,\n                                 CurrentUserDetailsService currentUserDetailsService,\n                                 AssociationValidationReportService associationValidationReportService,\n                                 AssociationDeletionService associationDeletionService,\n                                 @Qualifier(\"associationEventsViewService\") EventsViewService eventsViewService,\n                                 StudyAssociationBatchDeletionEventService studyAssociationBatchDeletionEventService,\n                                 EnsemblRestTemplateService ensemblRestTemplateService,\n                                 CheckMappingService checkMappingService,\n                                 MapCatalogService mapCatalogService,\n                                 AssociationService associationService)", "modifiers": "@Autowired public", "return": "", "signature": " AssociationController(AssociationRepository associationRepository,\n                                 StudyRepository studyRepository,\n                                 EfoTraitRepository efoTraitRepository,\n                                 AssociationDownloadService associationDownloadService,\n                                 SnpAssociationTableViewService snpAssociationTableViewService,\n                                 SingleSnpMultiSnpAssociationService singleSnpMultiSnpAssociationService,\n                                 SnpInteractionAssociationService snpInteractionAssociationService,\n                                 CheckEfoTermAssignmentService checkEfoTermAssignmentService,\n                                 AssociationOperationsService associationOperationsService,\n                                 AssociationUploadService associationUploadService,\n                                 CurrentUserDetailsService currentUserDetailsService,\n                                 AssociationValidationReportService associationValidationReportService,\n                                 AssociationDeletionService associationDeletionService,\n                                 @Qualifier(\"associationEventsViewService\") EventsViewService eventsViewService,\n                                 StudyAssociationBatchDeletionEventService studyAssociationBatchDeletionEventService,\n                                 EnsemblRestTemplateService ensemblRestTemplateService,\n                                 CheckMappingService checkMappingService,\n                                 MapCatalogService mapCatalogService,\n                                 AssociationService associationService)", "full_signature": "@Autowired public  AssociationController(AssociationRepository associationRepository,\n                                 StudyRepository studyRepository,\n                                 EfoTraitRepository efoTraitRepository,\n                                 AssociationDownloadService associationDownloadService,\n                                 SnpAssociationTableViewService snpAssociationTableViewService,\n                                 SingleSnpMultiSnpAssociationService singleSnpMultiSnpAssociationService,\n                                 SnpInteractionAssociationService snpInteractionAssociationService,\n                                 CheckEfoTermAssignmentService checkEfoTermAssignmentService,\n                                 AssociationOperationsService associationOperationsService,\n                                 AssociationUploadService associationUploadService,\n                                 CurrentUserDetailsService currentUserDetailsService,\n                                 AssociationValidationReportService associationValidationReportService,\n                                 AssociationDeletionService associationDeletionService,\n                                 @Qualifier(\"associationEventsViewService\") EventsViewService eventsViewService,\n                                 StudyAssociationBatchDeletionEventService studyAssociationBatchDeletionEventService,\n                                 EnsemblRestTemplateService ensemblRestTemplateService,\n                                 CheckMappingService checkMappingService,\n                                 MapCatalogService mapCatalogService,\n                                 AssociationService associationService)", "class_method_signature": "AssociationController.AssociationController(AssociationRepository associationRepository,\n                                 StudyRepository studyRepository,\n                                 EfoTraitRepository efoTraitRepository,\n                                 AssociationDownloadService associationDownloadService,\n                                 SnpAssociationTableViewService snpAssociationTableViewService,\n                                 SingleSnpMultiSnpAssociationService singleSnpMultiSnpAssociationService,\n                                 SnpInteractionAssociationService snpInteractionAssociationService,\n                                 CheckEfoTermAssignmentService checkEfoTermAssignmentService,\n                                 AssociationOperationsService associationOperationsService,\n                                 AssociationUploadService associationUploadService,\n                                 CurrentUserDetailsService currentUserDetailsService,\n                                 AssociationValidationReportService associationValidationReportService,\n                                 AssociationDeletionService associationDeletionService,\n                                 @Qualifier(\"associationEventsViewService\") EventsViewService eventsViewService,\n                                 StudyAssociationBatchDeletionEventService studyAssociationBatchDeletionEventService,\n                                 EnsemblRestTemplateService ensemblRestTemplateService,\n                                 CheckMappingService checkMappingService,\n                                 MapCatalogService mapCatalogService,\n                                 AssociationService associationService)", "testcase": false, "constructor": true}, {"identifier": "viewStudySnps", "parameters": "(Model model,\n                                @PathVariable Long studyId,\n                                @RequestParam(required = false) Long associationId,\n                                @RequestParam(defaultValue = \"1\", required = false) Integer page)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String viewStudySnps(Model model,\n                                @PathVariable Long studyId,\n                                @RequestParam(required = false) Long associationId,\n                                @RequestParam(defaultValue = \"1\", required = false) Integer page)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String viewStudySnps(Model model,\n                                @PathVariable Long studyId,\n                                @RequestParam(required = false) Long associationId,\n                                @RequestParam(defaultValue = \"1\", required = false) Integer page)", "class_method_signature": "AssociationController.viewStudySnps(Model model,\n                                @PathVariable Long studyId,\n                                @RequestParam(required = false) Long associationId,\n                                @RequestParam(defaultValue = \"1\", required = false) Integer page)", "testcase": false, "constructor": false}, {"identifier": "constructPageSpecification", "parameters": "(int pageIndex)", "modifiers": "private", "return": "Pageable", "signature": "Pageable constructPageSpecification(int pageIndex)", "full_signature": "private Pageable constructPageSpecification(int pageIndex)", "class_method_signature": "AssociationController.constructPageSpecification(int pageIndex)", "testcase": false, "constructor": false}, {"identifier": "getAssociationEvents", "parameters": "(Model model, @PathVariable Long studyId)", "modifiers": "@RequestMapping(value = \"studies/{studyId}/association_tracking\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String getAssociationEvents(Model model, @PathVariable Long studyId)", "full_signature": "@RequestMapping(value = \"studies/{studyId}/association_tracking\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String getAssociationEvents(Model model, @PathVariable Long studyId)", "class_method_signature": "AssociationController.getAssociationEvents(Model model, @PathVariable Long studyId)", "testcase": false, "constructor": false}, {"identifier": "uploadStudySnps", "parameters": "(@RequestParam(\"file\") MultipartFile file,\n                                    @PathVariable Long studyId,\n                                    Model model,\n                                    HttpServletRequest request,\n                                    HttpSession session)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/upload\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) public", "return": "Callable<String>", "signature": "Callable<String> uploadStudySnps(@RequestParam(\"file\") MultipartFile file,\n                                    @PathVariable Long studyId,\n                                    Model model,\n                                    HttpServletRequest request,\n                                    HttpSession session)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/upload\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) public Callable<String> uploadStudySnps(@RequestParam(\"file\") MultipartFile file,\n                                    @PathVariable Long studyId,\n                                    Model model,\n                                    HttpServletRequest request,\n                                    HttpSession session)", "class_method_signature": "AssociationController.uploadStudySnps(@RequestParam(\"file\") MultipartFile file,\n                                    @PathVariable Long studyId,\n                                    Model model,\n                                    HttpServletRequest request,\n                                    HttpSession session)", "testcase": false, "constructor": false}, {"identifier": "addStandardSnpsView", "parameters": "(Model model,\n                                      @PathVariable Long studyId,\n                                      @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_standard\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String addStandardSnpsView(Model model,\n                                      @PathVariable Long studyId,\n                                      @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_standard\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String addStandardSnpsView(Model model,\n                                      @PathVariable Long studyId,\n                                      @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.addStandardSnpsView(Model model,\n                                      @PathVariable Long studyId,\n                                      @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "addMultiSnpsView", "parameters": "(Model model,\n                                   @PathVariable Long studyId,\n                                   @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String addMultiSnpsView(Model model,\n                                   @PathVariable Long studyId,\n                                   @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String addMultiSnpsView(Model model,\n                                   @PathVariable Long studyId,\n                                   @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.addMultiSnpsView(Model model,\n                                   @PathVariable Long studyId,\n                                   @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "addSnpInteractionView", "parameters": "(Model model,\n                                        @PathVariable Long studyId,\n                                        @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String addSnpInteractionView(Model model,\n                                        @PathVariable Long studyId,\n                                        @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String addSnpInteractionView(Model model,\n                                        @PathVariable Long studyId,\n                                        @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.addSnpInteractionView(Model model,\n                                        @PathVariable Long studyId,\n                                        @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "addRows", "parameters": "(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                          Model model,\n                          @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", params = {\"addRows\"}) public", "return": "String", "signature": "String addRows(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                          Model model,\n                          @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", params = {\"addRows\"}) public String addRows(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                          Model model,\n                          @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.addRows(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                          Model model,\n                          @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "addRows", "parameters": "(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                          Model model,\n                          @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", params = {\"addCols\"}) public", "return": "String", "signature": "String addRows(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                          Model model,\n                          @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", params = {\"addCols\"}) public String addRows(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                          Model model,\n                          @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.addRows(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                          Model model,\n                          @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "addRow", "parameters": "(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                         Model model,\n                         @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", params = {\"addRow\"}) public", "return": "String", "signature": "String addRow(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                         Model model,\n                         @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", params = {\"addRow\"}) public String addRow(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                         Model model,\n                         @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.addRow(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                         Model model,\n                         @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "addCol", "parameters": "(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                         Model model,\n                         @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", params = {\"addCol\"}) public", "return": "String", "signature": "String addCol(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                         Model model,\n                         @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", params = {\"addCol\"}) public String addCol(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                         Model model,\n                         @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.addCol(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                         Model model,\n                         @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "removeRow", "parameters": "(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                            HttpServletRequest req,\n                            Model model,\n                            @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", params = {\"removeRow\"}) public", "return": "String", "signature": "String removeRow(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                            HttpServletRequest req,\n                            Model model,\n                            @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", params = {\"removeRow\"}) public String removeRow(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                            HttpServletRequest req,\n                            Model model,\n                            @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.removeRow(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                            HttpServletRequest req,\n                            Model model,\n                            @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "removeCol", "parameters": "(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                            HttpServletRequest req,\n                            Model model,\n                            @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", params = {\"removeCol\"}) public", "return": "String", "signature": "String removeCol(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                            HttpServletRequest req,\n                            Model model,\n                            @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", params = {\"removeCol\"}) public String removeCol(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                            HttpServletRequest req,\n                            Model model,\n                            @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "class_method_signature": "AssociationController.removeCol(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                            HttpServletRequest req,\n                            Model model,\n                            @PathVariable Long studyId, @RequestParam(required = true) String measurementType)", "testcase": false, "constructor": false}, {"identifier": "addStandardSnps", "parameters": "(@ModelAttribute(\"form\") @Valid SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                  BindingResult bindingResult,\n                                  @PathVariable Long studyId,\n                                  Model model,\n                                  @RequestParam(required = true) String measurementType,\n                                  HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_standard\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) public", "return": "String", "signature": "String addStandardSnps(@ModelAttribute(\"form\") @Valid SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                  BindingResult bindingResult,\n                                  @PathVariable Long studyId,\n                                  Model model,\n                                  @RequestParam(required = true) String measurementType,\n                                  HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_standard\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) public String addStandardSnps(@ModelAttribute(\"form\") @Valid SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                  BindingResult bindingResult,\n                                  @PathVariable Long studyId,\n                                  Model model,\n                                  @RequestParam(required = true) String measurementType,\n                                  HttpServletRequest request)", "class_method_signature": "AssociationController.addStandardSnps(@ModelAttribute(\"form\") @Valid SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                  BindingResult bindingResult,\n                                  @PathVariable Long studyId,\n                                  Model model,\n                                  @RequestParam(required = true) String measurementType,\n                                  HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "addMultiSnps", "parameters": "(@ModelAttribute(\"form\") @Valid SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                               BindingResult bindingResult,\n                               @PathVariable Long studyId,\n                               Model model,\n                               @RequestParam(required = true) String measurementType,\n                               HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) public", "return": "String", "signature": "String addMultiSnps(@ModelAttribute(\"form\") @Valid SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                               BindingResult bindingResult,\n                               @PathVariable Long studyId,\n                               Model model,\n                               @RequestParam(required = true) String measurementType,\n                               HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_multi\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) public String addMultiSnps(@ModelAttribute(\"form\") @Valid SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                               BindingResult bindingResult,\n                               @PathVariable Long studyId,\n                               Model model,\n                               @RequestParam(required = true) String measurementType,\n                               HttpServletRequest request)", "class_method_signature": "AssociationController.addMultiSnps(@ModelAttribute(\"form\") @Valid SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                               BindingResult bindingResult,\n                               @PathVariable Long studyId,\n                               Model model,\n                               @RequestParam(required = true) String measurementType,\n                               HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "addSnpInteraction", "parameters": "(@ModelAttribute(\"form\") @Valid SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                    BindingResult bindingResult,\n                                    @PathVariable Long studyId,\n                                    Model model,\n                                    @RequestParam(required = true) String measurementType, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) public", "return": "String", "signature": "String addSnpInteraction(@ModelAttribute(\"form\") @Valid SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                    BindingResult bindingResult,\n                                    @PathVariable Long studyId,\n                                    Model model,\n                                    @RequestParam(required = true) String measurementType, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/add_interaction\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) public String addSnpInteraction(@ModelAttribute(\"form\") @Valid SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                    BindingResult bindingResult,\n                                    @PathVariable Long studyId,\n                                    Model model,\n                                    @RequestParam(required = true) String measurementType, HttpServletRequest request)", "class_method_signature": "AssociationController.addSnpInteraction(@ModelAttribute(\"form\") @Valid SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                    BindingResult bindingResult,\n                                    @PathVariable Long studyId,\n                                    Model model,\n                                    @RequestParam(required = true) String measurementType, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "viewAssociation", "parameters": "(Model model, @PathVariable Long associationId)", "modifiers": "@RequestMapping(value = \"/associations/{associationId}\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String viewAssociation(Model model, @PathVariable Long associationId)", "full_signature": "@RequestMapping(value = \"/associations/{associationId}\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String viewAssociation(Model model, @PathVariable Long associationId)", "class_method_signature": "AssociationController.viewAssociation(Model model, @PathVariable Long associationId)", "testcase": false, "constructor": false}, {"identifier": "editAssociation", "parameters": "(@ModelAttribute SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                  @ModelAttribute SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                  @PathVariable Long associationId,\n                                  @RequestParam(value = \"associationtype\", required = true) String associationType,\n                                  Model model, HttpServletRequest request,\n                                  RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(value = \"/associations/{associationId}\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) // TODO COULD REFACTOR TO JUST USE SUPERCLASS AS METHOD PARAMETER public", "return": "String", "signature": "String editAssociation(@ModelAttribute SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                  @ModelAttribute SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                  @PathVariable Long associationId,\n                                  @RequestParam(value = \"associationtype\", required = true) String associationType,\n                                  Model model, HttpServletRequest request,\n                                  RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(value = \"/associations/{associationId}\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.POST) // TODO COULD REFACTOR TO JUST USE SUPERCLASS AS METHOD PARAMETER public String editAssociation(@ModelAttribute SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                  @ModelAttribute SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                  @PathVariable Long associationId,\n                                  @RequestParam(value = \"associationtype\", required = true) String associationType,\n                                  Model model, HttpServletRequest request,\n                                  RedirectAttributes redirectAttributes)", "class_method_signature": "AssociationController.editAssociation(@ModelAttribute SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                  @ModelAttribute SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                  @PathVariable Long associationId,\n                                  @RequestParam(value = \"associationtype\", required = true) String associationType,\n                                  Model model, HttpServletRequest request,\n                                  RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "addRowEditMode", "parameters": "(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                 Model model,\n                                 @PathVariable Long associationId)", "modifiers": "@RequestMapping(value = \"/associations/{associationId}\", params = {\"addRow\"}) public", "return": "String", "signature": "String addRowEditMode(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                 Model model,\n                                 @PathVariable Long associationId)", "full_signature": "@RequestMapping(value = \"/associations/{associationId}\", params = {\"addRow\"}) public String addRowEditMode(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                 Model model,\n                                 @PathVariable Long associationId)", "class_method_signature": "AssociationController.addRowEditMode(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                 Model model,\n                                 @PathVariable Long associationId)", "testcase": false, "constructor": false}, {"identifier": "addColEditMode", "parameters": "(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                 Model model,\n                                 @PathVariable Long associationId)", "modifiers": "@RequestMapping(value = \"/associations/{associationId}\", params = {\"addCol\"}) public", "return": "String", "signature": "String addColEditMode(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                 Model model,\n                                 @PathVariable Long associationId)", "full_signature": "@RequestMapping(value = \"/associations/{associationId}\", params = {\"addCol\"}) public String addColEditMode(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                 Model model,\n                                 @PathVariable Long associationId)", "class_method_signature": "AssociationController.addColEditMode(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                 Model model,\n                                 @PathVariable Long associationId)", "testcase": false, "constructor": false}, {"identifier": "removeRowEditMode", "parameters": "(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                    HttpServletRequest req,\n                                    Model model,\n                                    @PathVariable Long associationId)", "modifiers": "@RequestMapping(value = \"/associations/{associationId}\", params = {\"removeRow\"}) public", "return": "String", "signature": "String removeRowEditMode(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                    HttpServletRequest req,\n                                    Model model,\n                                    @PathVariable Long associationId)", "full_signature": "@RequestMapping(value = \"/associations/{associationId}\", params = {\"removeRow\"}) public String removeRowEditMode(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                    HttpServletRequest req,\n                                    Model model,\n                                    @PathVariable Long associationId)", "class_method_signature": "AssociationController.removeRowEditMode(SnpAssociationStandardMultiForm snpAssociationStandardMultiForm,\n                                    HttpServletRequest req,\n                                    Model model,\n                                    @PathVariable Long associationId)", "testcase": false, "constructor": false}, {"identifier": "removeColEditMode", "parameters": "(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                    HttpServletRequest req,\n                                    Model model,\n                                    @PathVariable Long associationId)", "modifiers": "@RequestMapping(value = \"/associations/{associationId}\", params = {\"removeCol\"}) public", "return": "String", "signature": "String removeColEditMode(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                    HttpServletRequest req,\n                                    Model model,\n                                    @PathVariable Long associationId)", "full_signature": "@RequestMapping(value = \"/associations/{associationId}\", params = {\"removeCol\"}) public String removeColEditMode(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                    HttpServletRequest req,\n                                    Model model,\n                                    @PathVariable Long associationId)", "class_method_signature": "AssociationController.removeColEditMode(SnpAssociationInteractionForm snpAssociationInteractionForm,\n                                    HttpServletRequest req,\n                                    Model model,\n                                    @PathVariable Long associationId)", "testcase": false, "constructor": false}, {"identifier": "deleteAllAssociations", "parameters": "(@PathVariable Long studyId, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/delete_all\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String deleteAllAssociations(@PathVariable Long studyId, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/delete_all\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String deleteAllAssociations(@PathVariable Long studyId, HttpServletRequest request)", "class_method_signature": "AssociationController.deleteAllAssociations(@PathVariable Long studyId, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "deleteChecked", "parameters": "(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                      HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/delete_checked\", produces = MediaType.APPLICATION_JSON_VALUE, method = RequestMethod.GET) public @ResponseBody", "return": "Map<String, String>", "signature": "Map<String, String> deleteChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                      HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/delete_checked\", produces = MediaType.APPLICATION_JSON_VALUE, method = RequestMethod.GET) public @ResponseBody Map<String, String> deleteChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                      HttpServletRequest request)", "class_method_signature": "AssociationController.deleteChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                      HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "approveSnpAssociation", "parameters": "(@PathVariable Long associationId,\n                                        RedirectAttributes redirectAttributes,\n                                        HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"associations/{associationId}/approve\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String approveSnpAssociation(@PathVariable Long associationId,\n                                        RedirectAttributes redirectAttributes,\n                                        HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"associations/{associationId}/approve\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String approveSnpAssociation(@PathVariable Long associationId,\n                                        RedirectAttributes redirectAttributes,\n                                        HttpServletRequest request)", "class_method_signature": "AssociationController.approveSnpAssociation(@PathVariable Long associationId,\n                                        RedirectAttributes redirectAttributes,\n                                        HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "unapproveSnpAssociation", "parameters": "(@PathVariable Long associationId, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"associations/{associationId}/unapprove\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String unapproveSnpAssociation(@PathVariable Long associationId, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"associations/{associationId}/unapprove\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String unapproveSnpAssociation(@PathVariable Long associationId, HttpServletRequest request)", "class_method_signature": "AssociationController.unapproveSnpAssociation(@PathVariable Long associationId, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "approveChecked", "parameters": "(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                       HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/approve_checked\", produces = MediaType.APPLICATION_JSON_VALUE, method = RequestMethod.GET) public @ResponseBody", "return": "Map<String, String>", "signature": "Map<String, String> approveChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                       HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/approve_checked\", produces = MediaType.APPLICATION_JSON_VALUE, method = RequestMethod.GET) public @ResponseBody Map<String, String> approveChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                       HttpServletRequest request)", "class_method_signature": "AssociationController.approveChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                       HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "unapproveChecked", "parameters": "(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                         HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/unapprove_checked\", produces = MediaType.APPLICATION_JSON_VALUE, method = RequestMethod.GET) public @ResponseBody", "return": "Map<String, String>", "signature": "Map<String, String> unapproveChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                         HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/unapprove_checked\", produces = MediaType.APPLICATION_JSON_VALUE, method = RequestMethod.GET) public @ResponseBody Map<String, String> unapproveChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                         HttpServletRequest request)", "class_method_signature": "AssociationController.unapproveChecked(@RequestParam(value = \"associationIds[]\") String[] associationsIds,\n                                         HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "approveAll", "parameters": "(@PathVariable Long studyId,\n                             RedirectAttributes redirectAttributes,\n                             HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/approve_all\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String approveAll(@PathVariable Long studyId,\n                             RedirectAttributes redirectAttributes,\n                             HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/approve_all\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String approveAll(@PathVariable Long studyId,\n                             RedirectAttributes redirectAttributes,\n                             HttpServletRequest request)", "class_method_signature": "AssociationController.approveAll(@PathVariable Long studyId,\n                             RedirectAttributes redirectAttributes,\n                             HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "validateUnapproved", "parameters": "(@PathVariable Long studyId,\n                                         RedirectAttributes redirectAttributes,\n                                         Model model,\n                                         HttpServletRequest request,\n                                         HttpSession session)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/validate_unapproved\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "Callable<String>", "signature": "Callable<String> validateUnapproved(@PathVariable Long studyId,\n                                         RedirectAttributes redirectAttributes,\n                                         Model model,\n                                         HttpServletRequest request,\n                                         HttpSession session)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/validate_unapproved\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public Callable<String> validateUnapproved(@PathVariable Long studyId,\n                                         RedirectAttributes redirectAttributes,\n                                         Model model,\n                                         HttpServletRequest request,\n                                         HttpSession session)", "class_method_signature": "AssociationController.validateUnapproved(@PathVariable Long studyId,\n                                         RedirectAttributes redirectAttributes,\n                                         Model model,\n                                         HttpServletRequest request,\n                                         HttpSession session)", "testcase": false, "constructor": false}, {"identifier": "downloadStudySnps", "parameters": "(HttpServletResponse response, @PathVariable Long studyId)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/download\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "void", "signature": "void downloadStudySnps(HttpServletResponse response, @PathVariable Long studyId)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/download\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public void downloadStudySnps(HttpServletResponse response, @PathVariable Long studyId)", "class_method_signature": "AssociationController.downloadStudySnps(HttpServletResponse response, @PathVariable Long studyId)", "testcase": false, "constructor": false}, {"identifier": "applyStudyEFOtraitToSnps", "parameters": "(Model model, @PathVariable Long studyId,\n                                           @RequestParam(value = \"e\",\n                                                   required = false,\n                                                   defaultValue = \"false\") boolean existing,\n                                           @RequestParam(value = \"o\",\n                                                   required = false,\n                                                   defaultValue = \"true\") boolean overwrite)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/applyefotraits\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String applyStudyEFOtraitToSnps(Model model, @PathVariable Long studyId,\n                                           @RequestParam(value = \"e\",\n                                                   required = false,\n                                                   defaultValue = \"false\") boolean existing,\n                                           @RequestParam(value = \"o\",\n                                                   required = false,\n                                                   defaultValue = \"true\") boolean overwrite)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/applyefotraits\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String applyStudyEFOtraitToSnps(Model model, @PathVariable Long studyId,\n                                           @RequestParam(value = \"e\",\n                                                   required = false,\n                                                   defaultValue = \"false\") boolean existing,\n                                           @RequestParam(value = \"o\",\n                                                   required = false,\n                                                   defaultValue = \"true\") boolean overwrite)", "class_method_signature": "AssociationController.applyStudyEFOtraitToSnps(Model model, @PathVariable Long studyId,\n                                           @RequestParam(value = \"e\",\n                                                   required = false,\n                                                   defaultValue = \"false\") boolean existing,\n                                           @RequestParam(value = \"o\",\n                                                   required = false,\n                                                   defaultValue = \"true\") boolean overwrite)", "testcase": false, "constructor": false}, {"identifier": "forceMapping", "parameters": "(@PathVariable Long associationId, RedirectAttributes redirectAttributes,\n                               HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/associations/{associationId}/force_mapping\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String forceMapping(@PathVariable Long associationId, RedirectAttributes redirectAttributes,\n                               HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/associations/{associationId}/force_mapping\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String forceMapping(@PathVariable Long associationId, RedirectAttributes redirectAttributes,\n                               HttpServletRequest request)", "class_method_signature": "AssociationController.forceMapping(@PathVariable Long associationId, RedirectAttributes redirectAttributes,\n                               HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleDataIntegrityException", "parameters": "(DataIntegrityException dataIntegrityException)", "modifiers": "@ExceptionHandler(DataIntegrityException.class) public", "return": "String", "signature": "String handleDataIntegrityException(DataIntegrityException dataIntegrityException)", "full_signature": "@ExceptionHandler(DataIntegrityException.class) public String handleDataIntegrityException(DataIntegrityException dataIntegrityException)", "class_method_signature": "AssociationController.handleDataIntegrityException(DataIntegrityException dataIntegrityException)", "testcase": false, "constructor": false}, {"identifier": "handleInvalidFormatExceptionAndInvalidOperationException", "parameters": "()", "modifiers": "@ExceptionHandler({SheetProcessingException.class}) public", "return": "String", "signature": "String handleInvalidFormatExceptionAndInvalidOperationException()", "full_signature": "@ExceptionHandler({SheetProcessingException.class}) public String handleInvalidFormatExceptionAndInvalidOperationException()", "class_method_signature": "AssociationController.handleInvalidFormatExceptionAndInvalidOperationException()", "testcase": false, "constructor": false}, {"identifier": "handleIOException", "parameters": "()", "modifiers": "@ExceptionHandler({IOException.class}) public", "return": "String", "signature": "String handleIOException()", "full_signature": "@ExceptionHandler({IOException.class}) public String handleIOException()", "class_method_signature": "AssociationController.handleIOException()", "testcase": false, "constructor": false}, {"identifier": "handleFileUploadException", "parameters": "()", "modifiers": "@ExceptionHandler({FileUploadException.class}) public", "return": "String", "signature": "String handleFileUploadException()", "full_signature": "@ExceptionHandler({FileUploadException.class}) public String handleFileUploadException()", "class_method_signature": "AssociationController.handleFileUploadException()", "testcase": false, "constructor": false}, {"identifier": "handleFileNotFound", "parameters": "()", "modifiers": "@ExceptionHandler({FileNotFoundException.class}) public", "return": "String", "signature": "String handleFileNotFound()", "full_signature": "@ExceptionHandler({FileNotFoundException.class}) public String handleFileNotFound()", "class_method_signature": "AssociationController.handleFileNotFound()", "testcase": false, "constructor": false}, {"identifier": "populateEfoTraits", "parameters": "()", "modifiers": "@ModelAttribute(\"efoTraits\") public", "return": "List<EfoTrait>", "signature": "List<EfoTrait> populateEfoTraits()", "full_signature": "@ModelAttribute(\"efoTraits\") public List<EfoTrait> populateEfoTraits()", "class_method_signature": "AssociationController.populateEfoTraits()", "testcase": false, "constructor": false}, {"identifier": "sortByTraitAsc", "parameters": "()", "modifiers": "private", "return": "Sort", "signature": "Sort sortByTraitAsc()", "full_signature": "private Sort sortByTraitAsc()", "class_method_signature": "AssociationController.sortByTraitAsc()", "testcase": false, "constructor": false}, {"identifier": "performUpload", "parameters": "(Model model, HttpSession session, MultipartFile file, SecureUser user, Study study)", "modifiers": "@Async private", "return": "void", "signature": "void performUpload(Model model, HttpSession session, MultipartFile file, SecureUser user, Study study)", "full_signature": "@Async private void performUpload(Model model, HttpSession session, MultipartFile file, SecureUser user, Study study)", "class_method_signature": "AssociationController.performUpload(Model model, HttpSession session, MultipartFile file, SecureUser user, Study study)", "testcase": false, "constructor": false}, {"identifier": "performValidation", "parameters": "(Model model, HttpSession session, Study study, SecureUser user)", "modifiers": "@Async private", "return": "void", "signature": "void performValidation(Model model, HttpSession session, Study study, SecureUser user)", "full_signature": "@Async private void performValidation(Model model, HttpSession session, Study study, SecureUser user)", "class_method_signature": "AssociationController.performValidation(Model model, HttpSession session, Study study, SecureUser user)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void destroy()", "full_signature": "@PreDestroy public void destroy()", "class_method_signature": "AssociationController.destroy()", "testcase": false, "constructor": false}, {"identifier": "checkUploadStatus", "parameters": "(HttpSession session)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/status\", method = RequestMethod.GET) public @ResponseBody", "return": "boolean", "signature": "boolean checkUploadStatus(HttpSession session)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/status\", method = RequestMethod.GET) public @ResponseBody boolean checkUploadStatus(HttpSession session)", "class_method_signature": "AssociationController.checkUploadStatus(HttpSession session)", "testcase": false, "constructor": false}, {"identifier": "getUploadResult", "parameters": "(@PathVariable Long studyId, HttpSession session, Model model)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/getUploadResults\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String getUploadResult(@PathVariable Long studyId, HttpSession session, Model model)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/getUploadResults\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String getUploadResult(@PathVariable Long studyId, HttpSession session, Model model)", "class_method_signature": "AssociationController.getUploadResult(@PathVariable Long studyId, HttpSession session, Model model)", "testcase": false, "constructor": false}, {"identifier": "getValidationResult", "parameters": "(@PathVariable Long studyId, HttpSession session, Model model, RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(value = \"/studies/{studyId}/associations/getValidationResults\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public", "return": "String", "signature": "String getValidationResult(@PathVariable Long studyId, HttpSession session, Model model, RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(value = \"/studies/{studyId}/associations/getValidationResults\", produces = MediaType.TEXT_HTML_VALUE, method = RequestMethod.GET) public String getValidationResult(@PathVariable Long studyId, HttpSession session, Model model, RedirectAttributes redirectAttributes)", "class_method_signature": "AssociationController.getValidationResult(@PathVariable Long studyId, HttpSession session, Model model, RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}], "file": "goci-interfaces/goci-curation/src/main/java/uk/ac/ebi/spot/goci/curation/controller/AssociationController.java"}, "focal_method": {"identifier": "handleFileUploadException", "parameters": "()", "modifiers": "@ExceptionHandler({FileUploadException.class}) public", "return": "String", "body": "@ExceptionHandler({FileUploadException.class})\n    public String handleFileUploadException() {\n        return \"error_pages/empty_snpfile_upload_warning\";\n    }", "signature": "String handleFileUploadException()", "full_signature": "@ExceptionHandler({FileUploadException.class}) public String handleFileUploadException()", "class_method_signature": "AssociationController.handleFileUploadException()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2995118, "url": "https://github.com/EBISPOT/goci", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 16, "size": 147335, "license": "licensed"}}