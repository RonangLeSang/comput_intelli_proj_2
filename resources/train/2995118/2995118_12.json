{"test_class": {"identifier": "AssociationFileUploadServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private UploadSheetProcessorBuilder uploadSheetProcessorBuilder;", "modifier": "@Mock\n    private", "type": "UploadSheetProcessorBuilder", "declarator": "uploadSheetProcessorBuilder", "var_name": "uploadSheetProcessorBuilder"}, {"original_string": "@Mock\n    private AssociationRowProcessor associationRowProcessor;", "modifier": "@Mock\n    private", "type": "AssociationRowProcessor", "declarator": "associationRowProcessor", "var_name": "associationRowProcessor"}, {"original_string": "@Mock\n    private ValidationService validationService;", "modifier": "@Mock\n    private", "type": "ValidationService", "declarator": "validationService", "var_name": "validationService"}, {"original_string": "@Mock\n    private SheetCreationService sheetCreationService;", "modifier": "@Mock\n    private", "type": "SheetCreationService", "declarator": "sheetCreationService", "var_name": "sheetCreationService"}, {"original_string": "@Mock\n    private UploadSheetProcessor uploadSheetProcessor;", "modifier": "@Mock\n    private", "type": "UploadSheetProcessor", "declarator": "uploadSheetProcessor", "var_name": "uploadSheetProcessor"}, {"original_string": "@Mock\n    private EnsemblRestTemplateService ensemblRestTemplateService;", "modifier": "@Mock\n    private", "type": "EnsemblRestTemplateService", "declarator": "ensemblRestTemplateService", "var_name": "ensemblRestTemplateService"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private AssociationFileUploadService associationFileUploadService;", "modifier": "private", "type": "AssociationFileUploadService", "declarator": "associationFileUploadService", "var_name": "associationFileUploadService"}], "file": "goci-data-services/goci-association-upload-services/src/test/java/uk/ac/ebi/spot/goci/service/AssociationFileUploadServiceTest.java"}, "test_case": {"identifier": "processAndValidateNonexistentAssociationFile", "parameters": "()", "modifiers": "@Test(expected = FileNotFoundException.class) public", "return": "void", "body": "@Test(expected = FileNotFoundException.class)\n    public void processAndValidateNonexistentAssociationFile() throws Exception {\n        File fileDoesNotExist = new File(\"test\");\n        associationFileUploadService.processAndValidateAssociationFile(fileDoesNotExist, \"full\");\n    }", "signature": "void processAndValidateNonexistentAssociationFile()", "full_signature": "@Test(expected = FileNotFoundException.class) public void processAndValidateNonexistentAssociationFile()", "class_method_signature": "AssociationFileUploadServiceTest.processAndValidateNonexistentAssociationFile()", "testcase": true, "constructor": false, "invocations": ["processAndValidateAssociationFile"]}, "focal_class": {"identifier": "AssociationFileUploadService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UploadSheetProcessorBuilder uploadSheetProcessorBuilder;", "modifier": "private", "type": "UploadSheetProcessorBuilder", "declarator": "uploadSheetProcessorBuilder", "var_name": "uploadSheetProcessorBuilder"}, {"original_string": "private AssociationRowProcessor associationRowProcessor;", "modifier": "private", "type": "AssociationRowProcessor", "declarator": "associationRowProcessor", "var_name": "associationRowProcessor"}, {"original_string": "private ValidationService validationService;", "modifier": "private", "type": "ValidationService", "declarator": "validationService", "var_name": "validationService"}, {"original_string": "private SheetCreationService sheetCreationService;", "modifier": "private", "type": "SheetCreationService", "declarator": "sheetCreationService", "var_name": "sheetCreationService"}, {"original_string": "private EnsemblRestTemplateService ensemblRestTemplateService;", "modifier": "private", "type": "EnsemblRestTemplateService", "declarator": "ensemblRestTemplateService", "var_name": "ensemblRestTemplateService"}, {"original_string": "private Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}], "methods": [{"identifier": "getLog", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger getLog()", "full_signature": "protected Logger getLog()", "class_method_signature": "AssociationFileUploadService.getLog()", "testcase": false, "constructor": false}, {"identifier": "AssociationFileUploadService", "parameters": "(UploadSheetProcessorBuilder uploadSheetProcessorBuilder,\n                                        AssociationRowProcessor associationRowProcessor,\n                                        ValidationService validationService,\n                                        SheetCreationService sheetCreationService,\n                                        EnsemblRestTemplateService ensemblRestTemplateService)", "modifiers": "@Autowired public", "return": "", "signature": " AssociationFileUploadService(UploadSheetProcessorBuilder uploadSheetProcessorBuilder,\n                                        AssociationRowProcessor associationRowProcessor,\n                                        ValidationService validationService,\n                                        SheetCreationService sheetCreationService,\n                                        EnsemblRestTemplateService ensemblRestTemplateService)", "full_signature": "@Autowired public  AssociationFileUploadService(UploadSheetProcessorBuilder uploadSheetProcessorBuilder,\n                                        AssociationRowProcessor associationRowProcessor,\n                                        ValidationService validationService,\n                                        SheetCreationService sheetCreationService,\n                                        EnsemblRestTemplateService ensemblRestTemplateService)", "class_method_signature": "AssociationFileUploadService.AssociationFileUploadService(UploadSheetProcessorBuilder uploadSheetProcessorBuilder,\n                                        AssociationRowProcessor associationRowProcessor,\n                                        ValidationService validationService,\n                                        SheetCreationService sheetCreationService,\n                                        EnsemblRestTemplateService ensemblRestTemplateService)", "testcase": false, "constructor": true}, {"identifier": "processAndValidateAssociationFile", "parameters": "(File file, String validationLevel)", "modifiers": "public", "return": "ValidationSummary", "signature": "ValidationSummary processAndValidateAssociationFile(File file, String validationLevel)", "full_signature": "public ValidationSummary processAndValidateAssociationFile(File file, String validationLevel)", "class_method_signature": "AssociationFileUploadService.processAndValidateAssociationFile(File file, String validationLevel)", "testcase": false, "constructor": false}, {"identifier": "createRowValidationSummary", "parameters": "(AssociationUploadRow row, String eRelease)", "modifiers": "private", "return": "RowValidationSummary", "signature": "RowValidationSummary createRowValidationSummary(AssociationUploadRow row, String eRelease)", "full_signature": "private RowValidationSummary createRowValidationSummary(AssociationUploadRow row, String eRelease)", "class_method_signature": "AssociationFileUploadService.createRowValidationSummary(AssociationUploadRow row, String eRelease)", "testcase": false, "constructor": false}, {"identifier": "createAssociationSummary", "parameters": "(AssociationUploadRow row, String validationLevel, String eRelease)", "modifiers": "private", "return": "AssociationSummary", "signature": "AssociationSummary createAssociationSummary(AssociationUploadRow row, String validationLevel, String eRelease)", "full_signature": "private AssociationSummary createAssociationSummary(AssociationUploadRow row, String validationLevel, String eRelease)", "class_method_signature": "AssociationFileUploadService.createAssociationSummary(AssociationUploadRow row, String validationLevel, String eRelease)", "testcase": false, "constructor": false}], "file": "goci-data-services/goci-association-upload-services/src/main/java/uk/ac/ebi/spot/goci/service/AssociationFileUploadService.java"}, "focal_method": {"identifier": "processAndValidateAssociationFile", "parameters": "(File file, String validationLevel)", "modifiers": "public", "return": "ValidationSummary", "body": "public ValidationSummary processAndValidateAssociationFile(File file, String validationLevel)\n            throws FileNotFoundException, SheetProcessingException {\n\n        ValidationSummary validationSummary = new ValidationSummary();\n        Collection<RowValidationSummary> rowValidationSummaries = new ArrayList<>();\n        Collection<AssociationSummary> associationSummaries = new ArrayList<>();\n        Collection<AssociationUploadRow> fileRows = new ArrayList<>();\n\n        if (file.exists()) {\n            // Create sheet\n            XSSFSheet sheet = null;\n            try {\n                // Create a sheet for reading\n                sheet = sheetCreationService.createSheet(file.getAbsolutePath());\n\n\n                // Process file, depending on validation level, into a generic row object\n                UploadSheetProcessor uploadSheetProcessor = uploadSheetProcessorBuilder.buildProcessor(validationLevel);\n                fileRows = uploadSheetProcessor.readSheetRows(sheet);\n            }\n            catch (InvalidFormatException | InvalidOperationException | IOException | NullPointerException e) {\n                getLog().error(\"File: \" + file.getName() + \" cannot be processed\", e);\n                file.delete();\n                throw new SheetProcessingException(\"File: \" + file.getName() + \" cannot be processed\", e);\n            }\n        }\n        else {\n            getLog().error(\"File: \" + file.getName() + \" cannot be found\");\n            throw new FileNotFoundException(\"File does not exist\");\n        }\n\n        String eRelease = ensemblRestTemplateService.getRelease();\n        // Error check each row\n        if (!fileRows.isEmpty()) {\n            // Check for missing values and syntax errors that would prevent code creating an association\n            for (AssociationUploadRow row : fileRows) {\n                getLog().info(\"Syntax checking row: \" + row.getRowNumber() + \" of file, \" + file.getAbsolutePath());\n                RowValidationSummary rowValidationSummary = createRowValidationSummary(row, eRelease);\n\n                // Only store summary if there is an error\n                if (!rowValidationSummary.getErrors().isEmpty()) {\n                    rowValidationSummaries.add(rowValidationSummary);\n                }\n            }\n\n            if (rowValidationSummaries.isEmpty()) {\n                //Proceed to carry out full checks of values\n                fileRows.forEach(row -> {\n                    associationSummaries.add(createAssociationSummary(row, validationLevel, eRelease));\n                });\n            }\n        }\n\n\n        validationSummary.setAssociationSummaries(associationSummaries);\n        validationSummary.setRowValidationSummaries(rowValidationSummaries);\n        return validationSummary;\n    }", "signature": "ValidationSummary processAndValidateAssociationFile(File file, String validationLevel)", "full_signature": "public ValidationSummary processAndValidateAssociationFile(File file, String validationLevel)", "class_method_signature": "AssociationFileUploadService.processAndValidateAssociationFile(File file, String validationLevel)", "testcase": false, "constructor": false, "invocations": ["exists", "createSheet", "getAbsolutePath", "buildProcessor", "readSheetRows", "error", "getLog", "getName", "delete", "getName", "error", "getLog", "getName", "getRelease", "isEmpty", "info", "getLog", "getRowNumber", "getAbsolutePath", "createRowValidationSummary", "isEmpty", "getErrors", "add", "isEmpty", "forEach", "add", "createAssociationSummary", "setAssociationSummaries", "setRowValidationSummaries"]}, "repository": {"repo_id": 2995118, "url": "https://github.com/EBISPOT/goci", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 16, "size": 147335, "license": "licensed"}}