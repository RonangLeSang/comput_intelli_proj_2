{"test_class": {"identifier": "TestSpecificCompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TestSpecificCompiler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TestSpecificCompiler.class)", "var_name": "LOG"}, {"original_string": "@Rule\n  public TemporaryFolder OUTPUT_DIR = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "OUTPUT_DIR = new TemporaryFolder()", "var_name": "OUTPUT_DIR"}, {"original_string": "@Rule\n  public TestName name = new TestName();", "modifier": "@Rule\n  public", "type": "TestName", "declarator": "name = new TestName()", "var_name": "name"}, {"original_string": "private File outputFile;", "modifier": "private", "type": "File", "declarator": "outputFile", "var_name": "outputFile"}, {"original_string": "private File src = new File(\"src/test/resources/simple_record.avsc\");", "modifier": "private", "type": "File", "declarator": "src = new File(\"src/test/resources/simple_record.avsc\")", "var_name": "src"}], "file": "lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java"}, "test_case": {"identifier": "testJavaUnboxDateTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testJavaUnboxDateTime() throws Exception {\n    SpecificCompiler compiler = createCompiler();\n\n    Schema dateSchema = LogicalTypes.date().addToSchema(Schema.create(Schema.Type.INT));\n    Schema timeSchema = LogicalTypes.timeMillis().addToSchema(Schema.create(Schema.Type.INT));\n    Schema timestampSchema = LogicalTypes.timestampMillis().addToSchema(Schema.create(Schema.Type.LONG));\n    // Date/time types should always use upper level java classes, even though\n    // their underlying representations are primitive types\n    Assert.assertEquals(\"Should use java.time.LocalDate for date type\", \"java.time.LocalDate\",\n        compiler.javaUnbox(dateSchema, false));\n    Assert.assertEquals(\"Should use java.time.LocalTime for time-millis type\", \"java.time.LocalTime\",\n        compiler.javaUnbox(timeSchema, false));\n    Assert.assertEquals(\"Should use java.time.Instant for timestamp-millis type\", \"java.time.Instant\",\n        compiler.javaUnbox(timestampSchema, false));\n  }", "signature": "void testJavaUnboxDateTime()", "full_signature": "@Test public void testJavaUnboxDateTime()", "class_method_signature": "TestSpecificCompiler.testJavaUnboxDateTime()", "testcase": true, "constructor": false, "invocations": ["createCompiler", "addToSchema", "date", "create", "addToSchema", "timeMillis", "create", "addToSchema", "timestampMillis", "create", "assertEquals", "javaUnbox", "assertEquals", "javaUnbox", "assertEquals", "javaUnbox"]}, "focal_class": {"identifier": "SpecificCompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int JVM_METHOD_ARG_LIMIT = 255;", "modifier": "private static final", "type": "int", "declarator": "JVM_METHOD_ARG_LIMIT = 255", "var_name": "JVM_METHOD_ARG_LIMIT"}, {"original_string": "protected static final int MAX_FIELD_PARAMETER_UNIT_COUNT = JVM_METHOD_ARG_LIMIT - 1;", "modifier": "protected static final", "type": "int", "declarator": "MAX_FIELD_PARAMETER_UNIT_COUNT = JVM_METHOD_ARG_LIMIT - 1", "var_name": "MAX_FIELD_PARAMETER_UNIT_COUNT"}, {"original_string": "private final SpecificData specificData = new SpecificData();", "modifier": "private final", "type": "SpecificData", "declarator": "specificData = new SpecificData()", "var_name": "specificData"}, {"original_string": "private final Set<Schema> queue = new HashSet<>();", "modifier": "private final", "type": "Set<Schema>", "declarator": "queue = new HashSet<>()", "var_name": "queue"}, {"original_string": "private Protocol protocol;", "modifier": "private", "type": "Protocol", "declarator": "protocol", "var_name": "protocol"}, {"original_string": "private VelocityEngine velocityEngine;", "modifier": "private", "type": "VelocityEngine", "declarator": "velocityEngine", "var_name": "velocityEngine"}, {"original_string": "private String templateDir;", "modifier": "private", "type": "String", "declarator": "templateDir", "var_name": "templateDir"}, {"original_string": "private FieldVisibility fieldVisibility = FieldVisibility.PRIVATE;", "modifier": "private", "type": "FieldVisibility", "declarator": "fieldVisibility = FieldVisibility.PRIVATE", "var_name": "fieldVisibility"}, {"original_string": "private boolean createOptionalGetters = false;", "modifier": "private", "type": "boolean", "declarator": "createOptionalGetters = false", "var_name": "createOptionalGetters"}, {"original_string": "private boolean gettersReturnOptional = false;", "modifier": "private", "type": "boolean", "declarator": "gettersReturnOptional = false", "var_name": "gettersReturnOptional"}, {"original_string": "private boolean optionalGettersForNullableFieldsOnly = false;", "modifier": "private", "type": "boolean", "declarator": "optionalGettersForNullableFieldsOnly = false", "var_name": "optionalGettersForNullableFieldsOnly"}, {"original_string": "private boolean createSetters = true;", "modifier": "private", "type": "boolean", "declarator": "createSetters = true", "var_name": "createSetters"}, {"original_string": "private boolean createAllArgsConstructor = true;", "modifier": "private", "type": "boolean", "declarator": "createAllArgsConstructor = true", "var_name": "createAllArgsConstructor"}, {"original_string": "private String outputCharacterEncoding;", "modifier": "private", "type": "String", "declarator": "outputCharacterEncoding", "var_name": "outputCharacterEncoding"}, {"original_string": "private boolean enableDecimalLogicalType = false;", "modifier": "private", "type": "boolean", "declarator": "enableDecimalLogicalType = false", "var_name": "enableDecimalLogicalType"}, {"original_string": "private String suffix = \".java\";", "modifier": "private", "type": "String", "declarator": "suffix = \".java\"", "var_name": "suffix"}, {"original_string": "private List<Object> additionalVelocityTools = Collections.emptyList();", "modifier": "private", "type": "List<Object>", "declarator": "additionalVelocityTools = Collections.emptyList()", "var_name": "additionalVelocityTools"}, {"original_string": "private static final Set<String> ACCESSOR_MUTATOR_RESERVED_WORDS = new HashSet<>(\n      Arrays.asList(\"class\", \"schema\", \"classSchema\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "ACCESSOR_MUTATOR_RESERVED_WORDS = new HashSet<>(\n      Arrays.asList(\"class\", \"schema\", \"classSchema\"))", "var_name": "ACCESSOR_MUTATOR_RESERVED_WORDS"}, {"original_string": "private static final Set<String> ERROR_RESERVED_WORDS = new HashSet<>(Arrays.asList(\"message\", \"cause\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "ERROR_RESERVED_WORDS = new HashSet<>(Arrays.asList(\"message\", \"cause\"))", "var_name": "ERROR_RESERVED_WORDS"}, {"original_string": "private static final String FILE_HEADER = \"/**\\n\" + \" * Autogenerated by Avro\\n\" + \" *\\n\"\n      + \" * DO NOT EDIT DIRECTLY\\n\" + \" */\\n\";", "modifier": "private static final", "type": "String", "declarator": "FILE_HEADER = \"/**\\n\" + \" * Autogenerated by Avro\\n\" + \" *\\n\"\n      + \" * DO NOT EDIT DIRECTLY\\n\" + \" */\\n\"", "var_name": "FILE_HEADER"}, {"original_string": "private StringType stringType = StringType.CharSequence;", "modifier": "private", "type": "StringType", "declarator": "stringType = StringType.CharSequence", "var_name": "stringType"}, {"original_string": "private static final Schema NULL_SCHEMA = Schema.create(Schema.Type.NULL);", "modifier": "private static final", "type": "Schema", "declarator": "NULL_SCHEMA = Schema.create(Schema.Type.NULL)", "var_name": "NULL_SCHEMA"}, {"original_string": "int maxStringChars = 8192;", "modifier": "", "type": "int", "declarator": "maxStringChars = 8192", "var_name": "maxStringChars"}], "methods": [{"identifier": "addLogicalTypeConversions", "parameters": "(SpecificData specificData)", "modifiers": "", "return": "void", "signature": "void addLogicalTypeConversions(SpecificData specificData)", "full_signature": " void addLogicalTypeConversions(SpecificData specificData)", "class_method_signature": "SpecificCompiler.addLogicalTypeConversions(SpecificData specificData)", "testcase": false, "constructor": false}, {"identifier": "isCreateAllArgsConstructor", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCreateAllArgsConstructor()", "full_signature": "public boolean isCreateAllArgsConstructor()", "class_method_signature": "SpecificCompiler.isCreateAllArgsConstructor()", "testcase": false, "constructor": false}, {"identifier": "SpecificCompiler", "parameters": "(Protocol protocol)", "modifiers": "public", "return": "", "signature": " SpecificCompiler(Protocol protocol)", "full_signature": "public  SpecificCompiler(Protocol protocol)", "class_method_signature": "SpecificCompiler.SpecificCompiler(Protocol protocol)", "testcase": false, "constructor": true}, {"identifier": "SpecificCompiler", "parameters": "(Schema schema)", "modifiers": "public", "return": "", "signature": " SpecificCompiler(Schema schema)", "full_signature": "public  SpecificCompiler(Schema schema)", "class_method_signature": "SpecificCompiler.SpecificCompiler(Schema schema)", "testcase": false, "constructor": true}, {"identifier": "SpecificCompiler", "parameters": "()", "modifiers": "", "return": "", "signature": " SpecificCompiler()", "full_signature": "  SpecificCompiler()", "class_method_signature": "SpecificCompiler.SpecificCompiler()", "testcase": false, "constructor": true}, {"identifier": "setAdditionalVelocityTools", "parameters": "(List<Object> additionalVelocityTools)", "modifiers": "public", "return": "void", "signature": "void setAdditionalVelocityTools(List<Object> additionalVelocityTools)", "full_signature": "public void setAdditionalVelocityTools(List<Object> additionalVelocityTools)", "class_method_signature": "SpecificCompiler.setAdditionalVelocityTools(List<Object> additionalVelocityTools)", "testcase": false, "constructor": false}, {"identifier": "setTemplateDir", "parameters": "(String templateDir)", "modifiers": "public", "return": "void", "signature": "void setTemplateDir(String templateDir)", "full_signature": "public void setTemplateDir(String templateDir)", "class_method_signature": "SpecificCompiler.setTemplateDir(String templateDir)", "testcase": false, "constructor": false}, {"identifier": "setSuffix", "parameters": "(String suffix)", "modifiers": "public", "return": "void", "signature": "void setSuffix(String suffix)", "full_signature": "public void setSuffix(String suffix)", "class_method_signature": "SpecificCompiler.setSuffix(String suffix)", "testcase": false, "constructor": false}, {"identifier": "deprecatedFields", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean deprecatedFields()", "full_signature": "public boolean deprecatedFields()", "class_method_signature": "SpecificCompiler.deprecatedFields()", "testcase": false, "constructor": false}, {"identifier": "publicFields", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean publicFields()", "full_signature": "public boolean publicFields()", "class_method_signature": "SpecificCompiler.publicFields()", "testcase": false, "constructor": false}, {"identifier": "privateFields", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean privateFields()", "full_signature": "public boolean privateFields()", "class_method_signature": "SpecificCompiler.privateFields()", "testcase": false, "constructor": false}, {"identifier": "setFieldVisibility", "parameters": "(FieldVisibility fieldVisibility)", "modifiers": "public", "return": "void", "signature": "void setFieldVisibility(FieldVisibility fieldVisibility)", "full_signature": "public void setFieldVisibility(FieldVisibility fieldVisibility)", "class_method_signature": "SpecificCompiler.setFieldVisibility(FieldVisibility fieldVisibility)", "testcase": false, "constructor": false}, {"identifier": "isCreateSetters", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCreateSetters()", "full_signature": "public boolean isCreateSetters()", "class_method_signature": "SpecificCompiler.isCreateSetters()", "testcase": false, "constructor": false}, {"identifier": "setCreateSetters", "parameters": "(boolean createSetters)", "modifiers": "public", "return": "void", "signature": "void setCreateSetters(boolean createSetters)", "full_signature": "public void setCreateSetters(boolean createSetters)", "class_method_signature": "SpecificCompiler.setCreateSetters(boolean createSetters)", "testcase": false, "constructor": false}, {"identifier": "isCreateOptionalGetters", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCreateOptionalGetters()", "full_signature": "public boolean isCreateOptionalGetters()", "class_method_signature": "SpecificCompiler.isCreateOptionalGetters()", "testcase": false, "constructor": false}, {"identifier": "setCreateOptionalGetters", "parameters": "(boolean createOptionalGetters)", "modifiers": "public", "return": "void", "signature": "void setCreateOptionalGetters(boolean createOptionalGetters)", "full_signature": "public void setCreateOptionalGetters(boolean createOptionalGetters)", "class_method_signature": "SpecificCompiler.setCreateOptionalGetters(boolean createOptionalGetters)", "testcase": false, "constructor": false}, {"identifier": "isGettersReturnOptional", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGettersReturnOptional()", "full_signature": "public boolean isGettersReturnOptional()", "class_method_signature": "SpecificCompiler.isGettersReturnOptional()", "testcase": false, "constructor": false}, {"identifier": "setGettersReturnOptional", "parameters": "(boolean gettersReturnOptional)", "modifiers": "public", "return": "void", "signature": "void setGettersReturnOptional(boolean gettersReturnOptional)", "full_signature": "public void setGettersReturnOptional(boolean gettersReturnOptional)", "class_method_signature": "SpecificCompiler.setGettersReturnOptional(boolean gettersReturnOptional)", "testcase": false, "constructor": false}, {"identifier": "isOptionalGettersForNullableFieldsOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOptionalGettersForNullableFieldsOnly()", "full_signature": "public boolean isOptionalGettersForNullableFieldsOnly()", "class_method_signature": "SpecificCompiler.isOptionalGettersForNullableFieldsOnly()", "testcase": false, "constructor": false}, {"identifier": "setOptionalGettersForNullableFieldsOnly", "parameters": "(boolean optionalGettersForNullableFieldsOnly)", "modifiers": "public", "return": "void", "signature": "void setOptionalGettersForNullableFieldsOnly(boolean optionalGettersForNullableFieldsOnly)", "full_signature": "public void setOptionalGettersForNullableFieldsOnly(boolean optionalGettersForNullableFieldsOnly)", "class_method_signature": "SpecificCompiler.setOptionalGettersForNullableFieldsOnly(boolean optionalGettersForNullableFieldsOnly)", "testcase": false, "constructor": false}, {"identifier": "setEnableDecimalLogicalType", "parameters": "(boolean enableDecimalLogicalType)", "modifiers": "public", "return": "void", "signature": "void setEnableDecimalLogicalType(boolean enableDecimalLogicalType)", "full_signature": "public void setEnableDecimalLogicalType(boolean enableDecimalLogicalType)", "class_method_signature": "SpecificCompiler.setEnableDecimalLogicalType(boolean enableDecimalLogicalType)", "testcase": false, "constructor": false}, {"identifier": "addCustomConversion", "parameters": "(Class<?> conversionClass)", "modifiers": "public", "return": "void", "signature": "void addCustomConversion(Class<?> conversionClass)", "full_signature": "public void addCustomConversion(Class<?> conversionClass)", "class_method_signature": "SpecificCompiler.addCustomConversion(Class<?> conversionClass)", "testcase": false, "constructor": false}, {"identifier": "getUsedConversionClasses", "parameters": "(Schema schema)", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getUsedConversionClasses(Schema schema)", "full_signature": "public Collection<String> getUsedConversionClasses(Schema schema)", "class_method_signature": "SpecificCompiler.getUsedConversionClasses(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getClassNamesOfPrimitiveFields", "parameters": "(Schema schema)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getClassNamesOfPrimitiveFields(Schema schema)", "full_signature": "private Set<String> getClassNamesOfPrimitiveFields(Schema schema)", "class_method_signature": "SpecificCompiler.getClassNamesOfPrimitiveFields(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getClassNamesOfPrimitiveFields", "parameters": "(Schema schema, Set<String> result, Set<Schema> seenSchemas)", "modifiers": "private", "return": "void", "signature": "void getClassNamesOfPrimitiveFields(Schema schema, Set<String> result, Set<Schema> seenSchemas)", "full_signature": "private void getClassNamesOfPrimitiveFields(Schema schema, Set<String> result, Set<Schema> seenSchemas)", "class_method_signature": "SpecificCompiler.getClassNamesOfPrimitiveFields(Schema schema, Set<String> result, Set<Schema> seenSchemas)", "testcase": false, "constructor": false}, {"identifier": "initializeVelocity", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeVelocity()", "full_signature": "private void initializeVelocity()", "class_method_signature": "SpecificCompiler.initializeVelocity()", "testcase": false, "constructor": false}, {"identifier": "initializeSpecificData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeSpecificData()", "full_signature": "private void initializeSpecificData()", "class_method_signature": "SpecificCompiler.initializeSpecificData()", "testcase": false, "constructor": false}, {"identifier": "compileProtocol", "parameters": "(File src, File dest)", "modifiers": "public static", "return": "void", "signature": "void compileProtocol(File src, File dest)", "full_signature": "public static void compileProtocol(File src, File dest)", "class_method_signature": "SpecificCompiler.compileProtocol(File src, File dest)", "testcase": false, "constructor": false}, {"identifier": "compileProtocol", "parameters": "(File[] srcFiles, File dest)", "modifiers": "public static", "return": "void", "signature": "void compileProtocol(File[] srcFiles, File dest)", "full_signature": "public static void compileProtocol(File[] srcFiles, File dest)", "class_method_signature": "SpecificCompiler.compileProtocol(File[] srcFiles, File dest)", "testcase": false, "constructor": false}, {"identifier": "compileSchema", "parameters": "(File src, File dest)", "modifiers": "public static", "return": "void", "signature": "void compileSchema(File src, File dest)", "full_signature": "public static void compileSchema(File src, File dest)", "class_method_signature": "SpecificCompiler.compileSchema(File src, File dest)", "testcase": false, "constructor": false}, {"identifier": "compileSchema", "parameters": "(File[] srcFiles, File dest)", "modifiers": "public static", "return": "void", "signature": "void compileSchema(File[] srcFiles, File dest)", "full_signature": "public static void compileSchema(File[] srcFiles, File dest)", "class_method_signature": "SpecificCompiler.compileSchema(File[] srcFiles, File dest)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(Schema schema)", "modifiers": "private", "return": "void", "signature": "void enqueue(Schema schema)", "full_signature": "private void enqueue(Schema schema)", "class_method_signature": "SpecificCompiler.enqueue(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "()", "modifiers": "", "return": "Collection<OutputFile>", "signature": "Collection<OutputFile> compile()", "full_signature": " Collection<OutputFile> compile()", "class_method_signature": "SpecificCompiler.compile()", "testcase": false, "constructor": false}, {"identifier": "compileToDestination", "parameters": "(File src, File dst)", "modifiers": "public", "return": "void", "signature": "void compileToDestination(File src, File dst)", "full_signature": "public void compileToDestination(File src, File dst)", "class_method_signature": "SpecificCompiler.compileToDestination(File src, File dst)", "testcase": false, "constructor": false}, {"identifier": "renderTemplate", "parameters": "(String templateName, VelocityContext context)", "modifiers": "private", "return": "String", "signature": "String renderTemplate(String templateName, VelocityContext context)", "full_signature": "private String renderTemplate(String templateName, VelocityContext context)", "class_method_signature": "SpecificCompiler.renderTemplate(String templateName, VelocityContext context)", "testcase": false, "constructor": false}, {"identifier": "compileInterface", "parameters": "(Protocol protocol)", "modifiers": "", "return": "OutputFile", "signature": "OutputFile compileInterface(Protocol protocol)", "full_signature": " OutputFile compileInterface(Protocol protocol)", "class_method_signature": "SpecificCompiler.compileInterface(Protocol protocol)", "testcase": false, "constructor": false}, {"identifier": "makePath", "parameters": "(String name, String space)", "modifiers": "", "return": "String", "signature": "String makePath(String name, String space)", "full_signature": " String makePath(String name, String space)", "class_method_signature": "SpecificCompiler.makePath(String name, String space)", "testcase": false, "constructor": false}, {"identifier": "calcAllArgConstructorParameterUnits", "parameters": "(Schema record)", "modifiers": "protected", "return": "int", "signature": "int calcAllArgConstructorParameterUnits(Schema record)", "full_signature": "protected int calcAllArgConstructorParameterUnits(Schema record)", "class_method_signature": "SpecificCompiler.calcAllArgConstructorParameterUnits(Schema record)", "testcase": false, "constructor": false}, {"identifier": "validateRecordForCompilation", "parameters": "(Schema record)", "modifiers": "protected", "return": "void", "signature": "void validateRecordForCompilation(Schema record)", "full_signature": "protected void validateRecordForCompilation(Schema record)", "class_method_signature": "SpecificCompiler.validateRecordForCompilation(Schema record)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(Schema schema)", "modifiers": "", "return": "OutputFile", "signature": "OutputFile compile(Schema schema)", "full_signature": " OutputFile compile(Schema schema)", "class_method_signature": "SpecificCompiler.compile(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "setStringType", "parameters": "(StringType t)", "modifiers": "public", "return": "void", "signature": "void setStringType(StringType t)", "full_signature": "public void setStringType(StringType t)", "class_method_signature": "SpecificCompiler.setStringType(StringType t)", "testcase": false, "constructor": false}, {"identifier": "addStringType", "parameters": "(Protocol p)", "modifiers": "private", "return": "Protocol", "signature": "Protocol addStringType(Protocol p)", "full_signature": "private Protocol addStringType(Protocol p)", "class_method_signature": "SpecificCompiler.addStringType(Protocol p)", "testcase": false, "constructor": false}, {"identifier": "addStringType", "parameters": "(Schema s)", "modifiers": "private", "return": "Schema", "signature": "Schema addStringType(Schema s)", "full_signature": "private Schema addStringType(Schema s)", "class_method_signature": "SpecificCompiler.addStringType(Schema s)", "testcase": false, "constructor": false}, {"identifier": "addStringType", "parameters": "(Schema s, Map<Schema, Schema> seen)", "modifiers": "private", "return": "Schema", "signature": "Schema addStringType(Schema s, Map<Schema, Schema> seen)", "full_signature": "private Schema addStringType(Schema s, Map<Schema, Schema> seen)", "class_method_signature": "SpecificCompiler.addStringType(Schema s, Map<Schema, Schema> seen)", "testcase": false, "constructor": false}, {"identifier": "getStringType", "parameters": "(Schema s)", "modifiers": "public", "return": "String", "signature": "String getStringType(Schema s)", "full_signature": "public String getStringType(Schema s)", "class_method_signature": "SpecificCompiler.getStringType(Schema s)", "testcase": false, "constructor": false}, {"identifier": "getStringType", "parameters": "(Object overrideClassProperty)", "modifiers": "private", "return": "String", "signature": "String getStringType(Object overrideClassProperty)", "full_signature": "private String getStringType(Object overrideClassProperty)", "class_method_signature": "SpecificCompiler.getStringType(Object overrideClassProperty)", "testcase": false, "constructor": false}, {"identifier": "isStringable", "parameters": "(Schema schema)", "modifiers": "public", "return": "boolean", "signature": "boolean isStringable(Schema schema)", "full_signature": "public boolean isStringable(Schema schema)", "class_method_signature": "SpecificCompiler.isStringable(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "javaType", "parameters": "(Schema schema)", "modifiers": "public", "return": "String", "signature": "String javaType(Schema schema)", "full_signature": "public String javaType(Schema schema)", "class_method_signature": "SpecificCompiler.javaType(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "javaType", "parameters": "(Schema schema, boolean checkConvertedLogicalType)", "modifiers": "private", "return": "String", "signature": "String javaType(Schema schema, boolean checkConvertedLogicalType)", "full_signature": "private String javaType(Schema schema, boolean checkConvertedLogicalType)", "class_method_signature": "SpecificCompiler.javaType(Schema schema, boolean checkConvertedLogicalType)", "testcase": false, "constructor": false}, {"identifier": "getConvertedLogicalType", "parameters": "(Schema schema)", "modifiers": "private", "return": "String", "signature": "String getConvertedLogicalType(Schema schema)", "full_signature": "private String getConvertedLogicalType(Schema schema)", "class_method_signature": "SpecificCompiler.getConvertedLogicalType(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "generateSetterCode", "parameters": "(Schema schema, String name, String pname)", "modifiers": "public", "return": "String", "signature": "String generateSetterCode(Schema schema, String name, String pname)", "full_signature": "public String generateSetterCode(Schema schema, String name, String pname)", "class_method_signature": "SpecificCompiler.generateSetterCode(Schema schema, String name, String pname)", "testcase": false, "constructor": false}, {"identifier": "javaUnbox", "parameters": "(Schema schema)", "modifiers": "@Deprecated public", "return": "String", "signature": "String javaUnbox(Schema schema)", "full_signature": "@Deprecated public String javaUnbox(Schema schema)", "class_method_signature": "SpecificCompiler.javaUnbox(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "javaUnbox", "parameters": "(Schema schema, boolean unboxNullToVoid)", "modifiers": "public", "return": "String", "signature": "String javaUnbox(Schema schema, boolean unboxNullToVoid)", "full_signature": "public String javaUnbox(Schema schema, boolean unboxNullToVoid)", "class_method_signature": "SpecificCompiler.javaUnbox(Schema schema, boolean unboxNullToVoid)", "testcase": false, "constructor": false}, {"identifier": "indent", "parameters": "(int n)", "modifiers": "public", "return": "String", "signature": "String indent(int n)", "full_signature": "public String indent(int n)", "class_method_signature": "SpecificCompiler.indent(int n)", "testcase": false, "constructor": false}, {"identifier": "getNonNullIndex", "parameters": "(Schema s)", "modifiers": "public", "return": "int", "signature": "int getNonNullIndex(Schema s)", "full_signature": "public int getNonNullIndex(Schema s)", "class_method_signature": "SpecificCompiler.getNonNullIndex(Schema s)", "testcase": false, "constructor": false}, {"identifier": "isCustomCodable", "parameters": "(Schema schema)", "modifiers": "public", "return": "boolean", "signature": "boolean isCustomCodable(Schema schema)", "full_signature": "public boolean isCustomCodable(Schema schema)", "class_method_signature": "SpecificCompiler.isCustomCodable(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "isCustomCodable", "parameters": "(Schema schema, Set<Schema> seen)", "modifiers": "private", "return": "boolean", "signature": "boolean isCustomCodable(Schema schema, Set<Schema> seen)", "full_signature": "private boolean isCustomCodable(Schema schema, Set<Schema> seen)", "class_method_signature": "SpecificCompiler.isCustomCodable(Schema schema, Set<Schema> seen)", "testcase": false, "constructor": false}, {"identifier": "hasLogicalTypeField", "parameters": "(Schema schema)", "modifiers": "public", "return": "boolean", "signature": "boolean hasLogicalTypeField(Schema schema)", "full_signature": "public boolean hasLogicalTypeField(Schema schema)", "class_method_signature": "SpecificCompiler.hasLogicalTypeField(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "conversionInstance", "parameters": "(Schema schema)", "modifiers": "public", "return": "String", "signature": "String conversionInstance(Schema schema)", "full_signature": "public String conversionInstance(Schema schema)", "class_method_signature": "SpecificCompiler.conversionInstance(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "javaAnnotations", "parameters": "(JsonProperties props)", "modifiers": "public", "return": "String[]", "signature": "String[] javaAnnotations(JsonProperties props)", "full_signature": "public String[] javaAnnotations(JsonProperties props)", "class_method_signature": "SpecificCompiler.javaAnnotations(JsonProperties props)", "testcase": false, "constructor": false}, {"identifier": "javaSplit", "parameters": "(String s)", "modifiers": "public", "return": "String", "signature": "String javaSplit(String s)", "full_signature": "public String javaSplit(String s)", "class_method_signature": "SpecificCompiler.javaSplit(String s)", "testcase": false, "constructor": false}, {"identifier": "javaEscape", "parameters": "(String o)", "modifiers": "public static", "return": "String", "signature": "String javaEscape(String o)", "full_signature": "public static String javaEscape(String o)", "class_method_signature": "SpecificCompiler.javaEscape(String o)", "testcase": false, "constructor": false}, {"identifier": "escapeForJavadoc", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String escapeForJavadoc(String s)", "full_signature": "public static String escapeForJavadoc(String s)", "class_method_signature": "SpecificCompiler.escapeForJavadoc(String s)", "testcase": false, "constructor": false}, {"identifier": "nullToEmpty", "parameters": "(String x)", "modifiers": "public static", "return": "String", "signature": "String nullToEmpty(String x)", "full_signature": "public static String nullToEmpty(String x)", "class_method_signature": "SpecificCompiler.nullToEmpty(String x)", "testcase": false, "constructor": false}, {"identifier": "mangle", "parameters": "(String word)", "modifiers": "public static", "return": "String", "signature": "String mangle(String word)", "full_signature": "public static String mangle(String word)", "class_method_signature": "SpecificCompiler.mangle(String word)", "testcase": false, "constructor": false}, {"identifier": "mangle", "parameters": "(String word, boolean isError)", "modifiers": "public static", "return": "String", "signature": "String mangle(String word, boolean isError)", "full_signature": "public static String mangle(String word, boolean isError)", "class_method_signature": "SpecificCompiler.mangle(String word, boolean isError)", "testcase": false, "constructor": false}, {"identifier": "mangle", "parameters": "(String word, Set<String> reservedWords)", "modifiers": "public static", "return": "String", "signature": "String mangle(String word, Set<String> reservedWords)", "full_signature": "public static String mangle(String word, Set<String> reservedWords)", "class_method_signature": "SpecificCompiler.mangle(String word, Set<String> reservedWords)", "testcase": false, "constructor": false}, {"identifier": "mangle", "parameters": "(String word, Set<String> reservedWords, boolean isMethod)", "modifiers": "public static", "return": "String", "signature": "String mangle(String word, Set<String> reservedWords, boolean isMethod)", "full_signature": "public static String mangle(String word, Set<String> reservedWords, boolean isMethod)", "class_method_signature": "SpecificCompiler.mangle(String word, Set<String> reservedWords, boolean isMethod)", "testcase": false, "constructor": false}, {"identifier": "fingerprint64", "parameters": "(Schema schema)", "modifiers": "public static", "return": "long", "signature": "long fingerprint64(Schema schema)", "full_signature": "public static long fingerprint64(Schema schema)", "class_method_signature": "SpecificCompiler.fingerprint64(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "generateGetMethod", "parameters": "(Schema schema, Field field)", "modifiers": "public static", "return": "String", "signature": "String generateGetMethod(Schema schema, Field field)", "full_signature": "public static String generateGetMethod(Schema schema, Field field)", "class_method_signature": "SpecificCompiler.generateGetMethod(Schema schema, Field field)", "testcase": false, "constructor": false}, {"identifier": "generateGetOptionalMethod", "parameters": "(Schema schema, Field field)", "modifiers": "public static", "return": "String", "signature": "String generateGetOptionalMethod(Schema schema, Field field)", "full_signature": "public static String generateGetOptionalMethod(Schema schema, Field field)", "class_method_signature": "SpecificCompiler.generateGetOptionalMethod(Schema schema, Field field)", "testcase": false, "constructor": false}, {"identifier": "generateSetMethod", "parameters": "(Schema schema, Field field)", "modifiers": "public static", "return": "String", "signature": "String generateSetMethod(Schema schema, Field field)", "full_signature": "public static String generateSetMethod(Schema schema, Field field)", "class_method_signature": "SpecificCompiler.generateSetMethod(Schema schema, Field field)", "testcase": false, "constructor": false}, {"identifier": "generateHasMethod", "parameters": "(Schema schema, Field field)", "modifiers": "public static", "return": "String", "signature": "String generateHasMethod(Schema schema, Field field)", "full_signature": "public static String generateHasMethod(Schema schema, Field field)", "class_method_signature": "SpecificCompiler.generateHasMethod(Schema schema, Field field)", "testcase": false, "constructor": false}, {"identifier": "generateClearMethod", "parameters": "(Schema schema, Field field)", "modifiers": "public static", "return": "String", "signature": "String generateClearMethod(Schema schema, Field field)", "full_signature": "public static String generateClearMethod(Schema schema, Field field)", "class_method_signature": "SpecificCompiler.generateClearMethod(Schema schema, Field field)", "testcase": false, "constructor": false}, {"identifier": "hasBuilder", "parameters": "(Schema schema)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasBuilder(Schema schema)", "full_signature": "public static boolean hasBuilder(Schema schema)", "class_method_signature": "SpecificCompiler.hasBuilder(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "generateGetBuilderMethod", "parameters": "(Schema schema, Field field)", "modifiers": "public static", "return": "String", "signature": "String generateGetBuilderMethod(Schema schema, Field field)", "full_signature": "public static String generateGetBuilderMethod(Schema schema, Field field)", "class_method_signature": "SpecificCompiler.generateGetBuilderMethod(Schema schema, Field field)", "testcase": false, "constructor": false}, {"identifier": "generateSetBuilderMethod", "parameters": "(Schema schema, Field field)", "modifiers": "public static", "return": "String", "signature": "String generateSetBuilderMethod(Schema schema, Field field)", "full_signature": "public static String generateSetBuilderMethod(Schema schema, Field field)", "class_method_signature": "SpecificCompiler.generateSetBuilderMethod(Schema schema, Field field)", "testcase": false, "constructor": false}, {"identifier": "generateHasBuilderMethod", "parameters": "(Schema schema, Field field)", "modifiers": "public static", "return": "String", "signature": "String generateHasBuilderMethod(Schema schema, Field field)", "full_signature": "public static String generateHasBuilderMethod(Schema schema, Field field)", "class_method_signature": "SpecificCompiler.generateHasBuilderMethod(Schema schema, Field field)", "testcase": false, "constructor": false}, {"identifier": "generateMethodName", "parameters": "(Schema schema, Field field, String prefix, String postfix)", "modifiers": "private static", "return": "String", "signature": "String generateMethodName(Schema schema, Field field, String prefix, String postfix)", "full_signature": "private static String generateMethodName(Schema schema, Field field, String prefix, String postfix)", "class_method_signature": "SpecificCompiler.generateMethodName(Schema schema, Field field, String prefix, String postfix)", "testcase": false, "constructor": false}, {"identifier": "isUnboxedJavaTypeNullable", "parameters": "(Schema schema)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUnboxedJavaTypeNullable(Schema schema)", "full_signature": "public static boolean isUnboxedJavaTypeNullable(Schema schema)", "class_method_signature": "SpecificCompiler.isUnboxedJavaTypeNullable(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "SpecificCompiler.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "setOutputCharacterEncoding", "parameters": "(String outputCharacterEncoding)", "modifiers": "public", "return": "void", "signature": "void setOutputCharacterEncoding(String outputCharacterEncoding)", "full_signature": "public void setOutputCharacterEncoding(String outputCharacterEncoding)", "class_method_signature": "SpecificCompiler.setOutputCharacterEncoding(String outputCharacterEncoding)", "testcase": false, "constructor": false}], "file": "lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java"}, "focal_method": {"identifier": "javaUnbox", "parameters": "(Schema schema)", "modifiers": "@Deprecated public", "return": "String", "body": "@Deprecated\n  public String javaUnbox(Schema schema) {\n    return javaUnbox(schema, false);\n  }", "signature": "String javaUnbox(Schema schema)", "full_signature": "@Deprecated public String javaUnbox(Schema schema)", "class_method_signature": "SpecificCompiler.javaUnbox(Schema schema)", "testcase": false, "constructor": false, "invocations": ["javaUnbox"]}, "repository": {"repo_id": 206459, "url": "https://github.com/apache/avro", "stars": 1473, "created": "5/21/2009 2:48:37 AM +00:00", "updates": "2020-01-23T18:50:51+00:00", "fork": "False", "license": "licensed"}}