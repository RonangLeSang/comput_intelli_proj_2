{"test_class": {"identifier": "TestGenericData", "superclass": "", "interfaces": "", "fields": [], "file": "lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericData.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEquals() {\n    Schema s = recordSchema();\n    GenericRecord r0 = new GenericData.Record(s);\n    GenericRecord r1 = new GenericData.Record(s);\n    GenericRecord r2 = new GenericData.Record(s);\n    Collection<CharSequence> l0 = new ArrayDeque<>();\n    List<CharSequence> l1 = new ArrayList<>();\n    GenericArray<CharSequence> l2 = new GenericData.Array<>(1, s.getFields().get(0).schema());\n    String foo = \"foo\";\n    l0.add(new StringBuilder(foo));\n    l1.add(foo);\n    l2.add(new Utf8(foo));\n    r0.put(0, l0);\n    r1.put(0, l1);\n    r2.put(0, l2);\n    assertEquals(r0, r1);\n    assertEquals(r0, r2);\n    assertEquals(r1, r2);\n  }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "TestGenericData.testEquals()", "testcase": true, "constructor": false, "invocations": ["recordSchema", "schema", "get", "getFields", "add", "add", "add", "put", "put", "put", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "GenericData", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GenericData INSTANCE = new GenericData();", "modifier": "private static final", "type": "GenericData", "declarator": "INSTANCE = new GenericData()", "var_name": "INSTANCE"}, {"original_string": "public static final String STRING_PROP = \"avro.java.string\";", "modifier": "public static final", "type": "String", "declarator": "STRING_PROP = \"avro.java.string\"", "var_name": "STRING_PROP"}, {"original_string": "protected static final String STRING_TYPE_STRING = \"String\";", "modifier": "protected static final", "type": "String", "declarator": "STRING_TYPE_STRING = \"String\"", "var_name": "STRING_TYPE_STRING"}, {"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private Map<String, Conversion<?>> conversions = new HashMap<>();", "modifier": "private", "type": "Map<String, Conversion<?>>", "declarator": "conversions = new HashMap<>()", "var_name": "conversions"}, {"original_string": "private Map<Class<?>, Map<String, Conversion<?>>> conversionsByClass = new IdentityHashMap<>();", "modifier": "private", "type": "Map<Class<?>, Map<String, Conversion<?>>>", "declarator": "conversionsByClass = new IdentityHashMap<>()", "var_name": "conversionsByClass"}, {"original_string": "public static final String FAST_READER_PROP = \"org.apache.avro.fastread\";", "modifier": "public static final", "type": "String", "declarator": "FAST_READER_PROP = \"org.apache.avro.fastread\"", "var_name": "FAST_READER_PROP"}, {"original_string": "private boolean fastReaderEnabled = \"true\".equalsIgnoreCase(System.getProperty(FAST_READER_PROP));", "modifier": "private", "type": "boolean", "declarator": "fastReaderEnabled = \"true\".equalsIgnoreCase(System.getProperty(FAST_READER_PROP))", "var_name": "fastReaderEnabled"}, {"original_string": "private FastReaderBuilder fastReaderBuilder = null;", "modifier": "private", "type": "FastReaderBuilder", "declarator": "fastReaderBuilder = null", "var_name": "fastReaderBuilder"}, {"original_string": "private static final String TOSTRING_CIRCULAR_REFERENCE_ERROR_TEXT = \" \\\">>> CIRCULAR REFERENCE CANNOT BE PUT IN JSON STRING, ABORTING RECURSION <<<\\\" \";", "modifier": "private static final", "type": "String", "declarator": "TOSTRING_CIRCULAR_REFERENCE_ERROR_TEXT = \" \\\">>> CIRCULAR REFERENCE CANNOT BE PUT IN JSON STRING, ABORTING RECURSION <<<\\\" \"", "var_name": "TOSTRING_CIRCULAR_REFERENCE_ERROR_TEXT"}, {"original_string": "private final Map<Field, Object> defaultValueCache = Collections.synchronizedMap(new WeakHashMap<>());", "modifier": "private final", "type": "Map<Field, Object>", "declarator": "defaultValueCache = Collections.synchronizedMap(new WeakHashMap<>())", "var_name": "defaultValueCache"}, {"original_string": "private static final Schema STRINGS = Schema.create(Type.STRING);", "modifier": "private static final", "type": "Schema", "declarator": "STRINGS = Schema.create(Type.STRING)", "var_name": "STRINGS"}], "methods": [{"identifier": "setStringType", "parameters": "(Schema s, StringType stringType)", "modifiers": "public static", "return": "void", "signature": "void setStringType(Schema s, StringType stringType)", "full_signature": "public static void setStringType(Schema s, StringType stringType)", "class_method_signature": "GenericData.setStringType(Schema s, StringType stringType)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "GenericData", "signature": "GenericData get()", "full_signature": "public static GenericData get()", "class_method_signature": "GenericData.get()", "testcase": false, "constructor": false}, {"identifier": "GenericData", "parameters": "()", "modifiers": "public", "return": "", "signature": " GenericData()", "full_signature": "public  GenericData()", "class_method_signature": "GenericData.GenericData()", "testcase": false, "constructor": true}, {"identifier": "GenericData", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " GenericData(ClassLoader classLoader)", "full_signature": "public  GenericData(ClassLoader classLoader)", "class_method_signature": "GenericData.GenericData(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "getClassLoader", "parameters": "()", "modifiers": "public", "return": "ClassLoader", "signature": "ClassLoader getClassLoader()", "full_signature": "public ClassLoader getClassLoader()", "class_method_signature": "GenericData.getClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getConversions", "parameters": "()", "modifiers": "public", "return": "Collection<Conversion<?>>", "signature": "Collection<Conversion<?>> getConversions()", "full_signature": "public Collection<Conversion<?>> getConversions()", "class_method_signature": "GenericData.getConversions()", "testcase": false, "constructor": false}, {"identifier": "addLogicalTypeConversion", "parameters": "(Conversion<?> conversion)", "modifiers": "public", "return": "void", "signature": "void addLogicalTypeConversion(Conversion<?> conversion)", "full_signature": "public void addLogicalTypeConversion(Conversion<?> conversion)", "class_method_signature": "GenericData.addLogicalTypeConversion(Conversion<?> conversion)", "testcase": false, "constructor": false}, {"identifier": "getConversionByClass", "parameters": "(Class<T> datumClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Conversion<T>", "signature": "Conversion<T> getConversionByClass(Class<T> datumClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public Conversion<T> getConversionByClass(Class<T> datumClass)", "class_method_signature": "GenericData.getConversionByClass(Class<T> datumClass)", "testcase": false, "constructor": false}, {"identifier": "getConversionByClass", "parameters": "(Class<T> datumClass, LogicalType logicalType)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Conversion<T>", "signature": "Conversion<T> getConversionByClass(Class<T> datumClass, LogicalType logicalType)", "full_signature": "@SuppressWarnings(\"unchecked\") public Conversion<T> getConversionByClass(Class<T> datumClass, LogicalType logicalType)", "class_method_signature": "GenericData.getConversionByClass(Class<T> datumClass, LogicalType logicalType)", "testcase": false, "constructor": false}, {"identifier": "getConversionFor", "parameters": "(LogicalType logicalType)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Conversion<Object>", "signature": "Conversion<Object> getConversionFor(LogicalType logicalType)", "full_signature": "@SuppressWarnings(\"unchecked\") public Conversion<Object> getConversionFor(LogicalType logicalType)", "class_method_signature": "GenericData.getConversionFor(LogicalType logicalType)", "testcase": false, "constructor": false}, {"identifier": "setFastReaderEnabled", "parameters": "(boolean flag)", "modifiers": "public", "return": "GenericData", "signature": "GenericData setFastReaderEnabled(boolean flag)", "full_signature": "public GenericData setFastReaderEnabled(boolean flag)", "class_method_signature": "GenericData.setFastReaderEnabled(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "isFastReaderEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFastReaderEnabled()", "full_signature": "public boolean isFastReaderEnabled()", "class_method_signature": "GenericData.isFastReaderEnabled()", "testcase": false, "constructor": false}, {"identifier": "getFastReaderBuilder", "parameters": "()", "modifiers": "public", "return": "FastReaderBuilder", "signature": "FastReaderBuilder getFastReaderBuilder()", "full_signature": "public FastReaderBuilder getFastReaderBuilder()", "class_method_signature": "GenericData.getFastReaderBuilder()", "testcase": false, "constructor": false}, {"identifier": "createDatumReader", "parameters": "(Schema schema)", "modifiers": "public", "return": "DatumReader", "signature": "DatumReader createDatumReader(Schema schema)", "full_signature": "public DatumReader createDatumReader(Schema schema)", "class_method_signature": "GenericData.createDatumReader(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "createDatumReader", "parameters": "(Schema writer, Schema reader)", "modifiers": "public", "return": "DatumReader", "signature": "DatumReader createDatumReader(Schema writer, Schema reader)", "full_signature": "public DatumReader createDatumReader(Schema writer, Schema reader)", "class_method_signature": "GenericData.createDatumReader(Schema writer, Schema reader)", "testcase": false, "constructor": false}, {"identifier": "createDatumWriter", "parameters": "(Schema schema)", "modifiers": "public", "return": "DatumWriter", "signature": "DatumWriter createDatumWriter(Schema schema)", "full_signature": "public DatumWriter createDatumWriter(Schema schema)", "class_method_signature": "GenericData.createDatumWriter(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Schema schema, Object datum)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(Schema schema, Object datum)", "full_signature": "public boolean validate(Schema schema, Object datum)", "class_method_signature": "GenericData.validate(Schema schema, Object datum)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object datum)", "modifiers": "public", "return": "String", "signature": "String toString(Object datum)", "full_signature": "public String toString(Object datum)", "class_method_signature": "GenericData.toString(Object datum)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object datum, StringBuilder buffer, IdentityHashMap<Object, Object> seenObjects)", "modifiers": "protected", "return": "void", "signature": "void toString(Object datum, StringBuilder buffer, IdentityHashMap<Object, Object> seenObjects)", "full_signature": "protected void toString(Object datum, StringBuilder buffer, IdentityHashMap<Object, Object> seenObjects)", "class_method_signature": "GenericData.toString(Object datum, StringBuilder buffer, IdentityHashMap<Object, Object> seenObjects)", "testcase": false, "constructor": false}, {"identifier": "writeEscapedString", "parameters": "(CharSequence string, StringBuilder builder)", "modifiers": "private static", "return": "void", "signature": "void writeEscapedString(CharSequence string, StringBuilder builder)", "full_signature": "private static void writeEscapedString(CharSequence string, StringBuilder builder)", "class_method_signature": "GenericData.writeEscapedString(CharSequence string, StringBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "induce", "parameters": "(Object datum)", "modifiers": "public", "return": "Schema", "signature": "Schema induce(Object datum)", "full_signature": "public Schema induce(Object datum)", "class_method_signature": "GenericData.induce(Object datum)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(Object record, String name, int position, Object value)", "modifiers": "public", "return": "void", "signature": "void setField(Object record, String name, int position, Object value)", "full_signature": "public void setField(Object record, String name, int position, Object value)", "class_method_signature": "GenericData.setField(Object record, String name, int position, Object value)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Object record, String name, int position)", "modifiers": "public", "return": "Object", "signature": "Object getField(Object record, String name, int position)", "full_signature": "public Object getField(Object record, String name, int position)", "class_method_signature": "GenericData.getField(Object record, String name, int position)", "testcase": false, "constructor": false}, {"identifier": "getRecordState", "parameters": "(Object record, Schema schema)", "modifiers": "protected", "return": "Object", "signature": "Object getRecordState(Object record, Schema schema)", "full_signature": "protected Object getRecordState(Object record, Schema schema)", "class_method_signature": "GenericData.getRecordState(Object record, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(Object record, String name, int position, Object value, Object state)", "modifiers": "protected", "return": "void", "signature": "void setField(Object record, String name, int position, Object value, Object state)", "full_signature": "protected void setField(Object record, String name, int position, Object value, Object state)", "class_method_signature": "GenericData.setField(Object record, String name, int position, Object value, Object state)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Object record, String name, int pos, Object state)", "modifiers": "protected", "return": "Object", "signature": "Object getField(Object record, String name, int pos, Object state)", "full_signature": "protected Object getField(Object record, String name, int pos, Object state)", "class_method_signature": "GenericData.getField(Object record, String name, int pos, Object state)", "testcase": false, "constructor": false}, {"identifier": "resolveUnion", "parameters": "(Schema union, Object datum)", "modifiers": "public", "return": "int", "signature": "int resolveUnion(Schema union, Object datum)", "full_signature": "public int resolveUnion(Schema union, Object datum)", "class_method_signature": "GenericData.resolveUnion(Schema union, Object datum)", "testcase": false, "constructor": false}, {"identifier": "getSchemaName", "parameters": "(Object datum)", "modifiers": "protected", "return": "String", "signature": "String getSchemaName(Object datum)", "full_signature": "protected String getSchemaName(Object datum)", "class_method_signature": "GenericData.getSchemaName(Object datum)", "testcase": false, "constructor": false}, {"identifier": "instanceOf", "parameters": "(Schema schema, Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean instanceOf(Schema schema, Object datum)", "full_signature": "protected boolean instanceOf(Schema schema, Object datum)", "class_method_signature": "GenericData.instanceOf(Schema schema, Object datum)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isArray(Object datum)", "full_signature": "protected boolean isArray(Object datum)", "class_method_signature": "GenericData.isArray(Object datum)", "testcase": false, "constructor": false}, {"identifier": "getArrayAsCollection", "parameters": "(Object datum)", "modifiers": "protected", "return": "Collection", "signature": "Collection getArrayAsCollection(Object datum)", "full_signature": "protected Collection getArrayAsCollection(Object datum)", "class_method_signature": "GenericData.getArrayAsCollection(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isRecord", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isRecord(Object datum)", "full_signature": "protected boolean isRecord(Object datum)", "class_method_signature": "GenericData.isRecord(Object datum)", "testcase": false, "constructor": false}, {"identifier": "getRecordSchema", "parameters": "(Object record)", "modifiers": "protected", "return": "Schema", "signature": "Schema getRecordSchema(Object record)", "full_signature": "protected Schema getRecordSchema(Object record)", "class_method_signature": "GenericData.getRecordSchema(Object record)", "testcase": false, "constructor": false}, {"identifier": "isEnum", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isEnum(Object datum)", "full_signature": "protected boolean isEnum(Object datum)", "class_method_signature": "GenericData.isEnum(Object datum)", "testcase": false, "constructor": false}, {"identifier": "getEnumSchema", "parameters": "(Object enu)", "modifiers": "protected", "return": "Schema", "signature": "Schema getEnumSchema(Object enu)", "full_signature": "protected Schema getEnumSchema(Object enu)", "class_method_signature": "GenericData.getEnumSchema(Object enu)", "testcase": false, "constructor": false}, {"identifier": "isMap", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isMap(Object datum)", "full_signature": "protected boolean isMap(Object datum)", "class_method_signature": "GenericData.isMap(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isFixed", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isFixed(Object datum)", "full_signature": "protected boolean isFixed(Object datum)", "class_method_signature": "GenericData.isFixed(Object datum)", "testcase": false, "constructor": false}, {"identifier": "getFixedSchema", "parameters": "(Object fixed)", "modifiers": "protected", "return": "Schema", "signature": "Schema getFixedSchema(Object fixed)", "full_signature": "protected Schema getFixedSchema(Object fixed)", "class_method_signature": "GenericData.getFixedSchema(Object fixed)", "testcase": false, "constructor": false}, {"identifier": "isString", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isString(Object datum)", "full_signature": "protected boolean isString(Object datum)", "class_method_signature": "GenericData.isString(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isBytes", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBytes(Object datum)", "full_signature": "protected boolean isBytes(Object datum)", "class_method_signature": "GenericData.isBytes(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isInteger", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isInteger(Object datum)", "full_signature": "protected boolean isInteger(Object datum)", "class_method_signature": "GenericData.isInteger(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isLong", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isLong(Object datum)", "full_signature": "protected boolean isLong(Object datum)", "class_method_signature": "GenericData.isLong(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isFloat", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isFloat(Object datum)", "full_signature": "protected boolean isFloat(Object datum)", "class_method_signature": "GenericData.isFloat(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isDouble", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isDouble(Object datum)", "full_signature": "protected boolean isDouble(Object datum)", "class_method_signature": "GenericData.isDouble(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isBoolean", "parameters": "(Object datum)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBoolean(Object datum)", "full_signature": "protected boolean isBoolean(Object datum)", "class_method_signature": "GenericData.isBoolean(Object datum)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(Object o, Schema s)", "modifiers": "public", "return": "int", "signature": "int hashCode(Object o, Schema s)", "full_signature": "public int hashCode(Object o, Schema s)", "class_method_signature": "GenericData.hashCode(Object o, Schema s)", "testcase": false, "constructor": false}, {"identifier": "hashCodeAdd", "parameters": "(int hashCode, Object o, Schema s)", "modifiers": "protected", "return": "int", "signature": "int hashCodeAdd(int hashCode, Object o, Schema s)", "full_signature": "protected int hashCodeAdd(int hashCode, Object o, Schema s)", "class_method_signature": "GenericData.hashCodeAdd(int hashCode, Object o, Schema s)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object o1, Object o2, Schema s)", "modifiers": "public", "return": "int", "signature": "int compare(Object o1, Object o2, Schema s)", "full_signature": "public int compare(Object o1, Object o2, Schema s)", "class_method_signature": "GenericData.compare(Object o1, Object o2, Schema s)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object o1, Object o2, Schema s, boolean equals)", "modifiers": "@SuppressWarnings(value = \"unchecked\") protected", "return": "int", "signature": "int compare(Object o1, Object o2, Schema s, boolean equals)", "full_signature": "@SuppressWarnings(value = \"unchecked\") protected int compare(Object o1, Object o2, Schema s, boolean equals)", "class_method_signature": "GenericData.compare(Object o1, Object o2, Schema s, boolean equals)", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "(Field field)", "modifiers": "@SuppressWarnings({ \"unchecked\" }) public", "return": "Object", "signature": "Object getDefaultValue(Field field)", "full_signature": "@SuppressWarnings({ \"unchecked\" }) public Object getDefaultValue(Field field)", "class_method_signature": "GenericData.getDefaultValue(Field field)", "testcase": false, "constructor": false}, {"identifier": "deepCopy", "parameters": "(Schema schema, T value)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public", "return": "T", "signature": "T deepCopy(Schema schema, T value)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public T deepCopy(Schema schema, T value)", "class_method_signature": "GenericData.deepCopy(Schema schema, T value)", "testcase": false, "constructor": false}, {"identifier": "deepCopyRaw", "parameters": "(Schema schema, Object value)", "modifiers": "private", "return": "Object", "signature": "Object deepCopyRaw(Schema schema, Object value)", "full_signature": "private Object deepCopyRaw(Schema schema, Object value)", "class_method_signature": "GenericData.deepCopyRaw(Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "createFixed", "parameters": "(Object old, Schema schema)", "modifiers": "public", "return": "Object", "signature": "Object createFixed(Object old, Schema schema)", "full_signature": "public Object createFixed(Object old, Schema schema)", "class_method_signature": "GenericData.createFixed(Object old, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "createFixed", "parameters": "(Object old, byte[] bytes, Schema schema)", "modifiers": "public", "return": "Object", "signature": "Object createFixed(Object old, byte[] bytes, Schema schema)", "full_signature": "public Object createFixed(Object old, byte[] bytes, Schema schema)", "class_method_signature": "GenericData.createFixed(Object old, byte[] bytes, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "createEnum", "parameters": "(String symbol, Schema schema)", "modifiers": "public", "return": "Object", "signature": "Object createEnum(String symbol, Schema schema)", "full_signature": "public Object createEnum(String symbol, Schema schema)", "class_method_signature": "GenericData.createEnum(String symbol, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "newRecord", "parameters": "(Object old, Schema schema)", "modifiers": "public", "return": "Object", "signature": "Object newRecord(Object old, Schema schema)", "full_signature": "public Object newRecord(Object old, Schema schema)", "class_method_signature": "GenericData.newRecord(Object old, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "createString", "parameters": "(Object value)", "modifiers": "public", "return": "Object", "signature": "Object createString(Object value)", "full_signature": "public Object createString(Object value)", "class_method_signature": "GenericData.createString(Object value)", "testcase": false, "constructor": false}, {"identifier": "newArray", "parameters": "(Object old, int size, Schema schema)", "modifiers": "public", "return": "Object", "signature": "Object newArray(Object old, int size, Schema schema)", "full_signature": "public Object newArray(Object old, int size, Schema schema)", "class_method_signature": "GenericData.newArray(Object old, int size, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "newMap", "parameters": "(Object old, int size)", "modifiers": "public", "return": "Object", "signature": "Object newMap(Object old, int size)", "full_signature": "public Object newMap(Object old, int size)", "class_method_signature": "GenericData.newMap(Object old, int size)", "testcase": false, "constructor": false}, {"identifier": "getNewRecordSupplier", "parameters": "(Schema schema)", "modifiers": "public", "return": "InstanceSupplier", "signature": "InstanceSupplier getNewRecordSupplier(Schema schema)", "full_signature": "public InstanceSupplier getNewRecordSupplier(Schema schema)", "class_method_signature": "GenericData.getNewRecordSupplier(Schema schema)", "testcase": false, "constructor": false}], "file": "lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "GenericData", "body": "public static GenericData get() {\n    return INSTANCE;\n  }", "signature": "GenericData get()", "full_signature": "public static GenericData get()", "class_method_signature": "GenericData.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 206459, "url": "https://github.com/apache/avro", "stars": 1473, "created": "5/21/2009 2:48:37 AM +00:00", "updates": "2020-01-23T18:50:51+00:00", "fork": "False", "license": "licensed"}}