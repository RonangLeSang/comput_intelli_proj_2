{"test_class": {"identifier": "TestSchemaBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder DIR = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "DIR = new TemporaryFolder()", "var_name": "DIR"}], "file": "lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java"}, "test_case": {"identifier": "testFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFields() {\n    Schema rec = SchemaBuilder.record(\"Rec\").fields().name(\"documented\").doc(\"documented\").type().nullType().noDefault()\n        .name(\"ascending\").orderAscending().type().booleanType().noDefault().name(\"descending\").orderDescending().type()\n        .floatType().noDefault().name(\"ignored\").orderIgnore().type().doubleType().noDefault().name(\"aliased\")\n        .aliases(\"anAlias\").type().stringType().noDefault().endRecord();\n    Assert.assertEquals(\"documented\", rec.getField(\"documented\").doc());\n    Assert.assertEquals(Order.ASCENDING, rec.getField(\"ascending\").order());\n    Assert.assertEquals(Order.DESCENDING, rec.getField(\"descending\").order());\n    Assert.assertEquals(Order.IGNORE, rec.getField(\"ignored\").order());\n    Assert.assertTrue(rec.getField(\"aliased\").aliases().contains(\"anAlias\"));\n  }", "signature": "void testFields()", "full_signature": "@Test public void testFields()", "class_method_signature": "TestSchemaBuilder.testFields()", "testcase": true, "constructor": false, "invocations": ["endRecord", "noDefault", "stringType", "type", "aliases", "name", "noDefault", "doubleType", "type", "orderIgnore", "name", "noDefault", "floatType", "type", "orderDescending", "name", "noDefault", "booleanType", "type", "orderAscending", "name", "noDefault", "nullType", "type", "doc", "name", "fields", "record", "assertEquals", "doc", "getField", "assertEquals", "order", "getField", "assertEquals", "order", "getField", "assertEquals", "order", "getField", "assertTrue", "contains", "aliases", "getField"]}, "focal_class": {"identifier": "SchemaBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Schema NULL_SCHEMA = Schema.create(Schema.Type.NULL);", "modifier": "private static final", "type": "Schema", "declarator": "NULL_SCHEMA = Schema.create(Schema.Type.NULL)", "var_name": "NULL_SCHEMA"}], "methods": [{"identifier": "SchemaBuilder", "parameters": "()", "modifiers": "private", "return": "", "signature": " SchemaBuilder()", "full_signature": "private  SchemaBuilder()", "class_method_signature": "SchemaBuilder.SchemaBuilder()", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "TypeBuilder<Schema>", "signature": "TypeBuilder<Schema> builder()", "full_signature": "public static TypeBuilder<Schema> builder()", "class_method_signature": "SchemaBuilder.builder()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(String namespace)", "modifiers": "public static", "return": "TypeBuilder<Schema>", "signature": "TypeBuilder<Schema> builder(String namespace)", "full_signature": "public static TypeBuilder<Schema> builder(String namespace)", "class_method_signature": "SchemaBuilder.builder(String namespace)", "testcase": false, "constructor": false}, {"identifier": "record", "parameters": "(String name)", "modifiers": "public static", "return": "RecordBuilder<Schema>", "signature": "RecordBuilder<Schema> record(String name)", "full_signature": "public static RecordBuilder<Schema> record(String name)", "class_method_signature": "SchemaBuilder.record(String name)", "testcase": false, "constructor": false}, {"identifier": "enumeration", "parameters": "(String name)", "modifiers": "public static", "return": "EnumBuilder<Schema>", "signature": "EnumBuilder<Schema> enumeration(String name)", "full_signature": "public static EnumBuilder<Schema> enumeration(String name)", "class_method_signature": "SchemaBuilder.enumeration(String name)", "testcase": false, "constructor": false}, {"identifier": "fixed", "parameters": "(String name)", "modifiers": "public static", "return": "FixedBuilder<Schema>", "signature": "FixedBuilder<Schema> fixed(String name)", "full_signature": "public static FixedBuilder<Schema> fixed(String name)", "class_method_signature": "SchemaBuilder.fixed(String name)", "testcase": false, "constructor": false}, {"identifier": "array", "parameters": "()", "modifiers": "public static", "return": "ArrayBuilder<Schema>", "signature": "ArrayBuilder<Schema> array()", "full_signature": "public static ArrayBuilder<Schema> array()", "class_method_signature": "SchemaBuilder.array()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "()", "modifiers": "public static", "return": "MapBuilder<Schema>", "signature": "MapBuilder<Schema> map()", "full_signature": "public static MapBuilder<Schema> map()", "class_method_signature": "SchemaBuilder.map()", "testcase": false, "constructor": false}, {"identifier": "unionOf", "parameters": "()", "modifiers": "public static", "return": "BaseTypeBuilder<UnionAccumulator<Schema>>", "signature": "BaseTypeBuilder<UnionAccumulator<Schema>> unionOf()", "full_signature": "public static BaseTypeBuilder<UnionAccumulator<Schema>> unionOf()", "class_method_signature": "SchemaBuilder.unionOf()", "testcase": false, "constructor": false}, {"identifier": "nullable", "parameters": "()", "modifiers": "public static", "return": "BaseTypeBuilder<Schema>", "signature": "BaseTypeBuilder<Schema> nullable()", "full_signature": "public static BaseTypeBuilder<Schema> nullable()", "class_method_signature": "SchemaBuilder.nullable()", "testcase": false, "constructor": false}, {"identifier": "toJsonNode", "parameters": "(Object o)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode toJsonNode(Object o)", "full_signature": "private static JsonNode toJsonNode(Object o)", "class_method_signature": "SchemaBuilder.toJsonNode(Object o)", "testcase": false, "constructor": false}], "file": "lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java"}, "focal_method": {"identifier": "record", "parameters": "(String name)", "modifiers": "public static", "return": "RecordBuilder<Schema>", "body": "public static RecordBuilder<Schema> record(String name) {\n    return builder().record(name);\n  }", "signature": "RecordBuilder<Schema> record(String name)", "full_signature": "public static RecordBuilder<Schema> record(String name)", "class_method_signature": "SchemaBuilder.record(String name)", "testcase": false, "constructor": false, "invocations": ["record", "builder"]}, "repository": {"repo_id": 206459, "url": "https://github.com/apache/avro", "stars": 1473, "created": "5/21/2009 2:48:37 AM +00:00", "updates": "2020-01-23T18:50:51+00:00", "fork": "False", "license": "licensed"}}