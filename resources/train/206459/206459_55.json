{"test_class": {"identifier": "TestSchema", "superclass": "", "interfaces": "", "fields": [], "file": "lang/java/avro/src/test/java/org/apache/avro/TestSchema.java"}, "test_case": {"identifier": "testLongAsFloatDefaultValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLongAsFloatDefaultValue() {\n    Schema.Field field = new Schema.Field(\"myField\", Schema.create(Schema.Type.FLOAT), \"doc\", 1L);\n    assertTrue(field.hasDefaultValue());\n    assertEquals(1.0f, field.defaultVal());\n    assertEquals(1.0f, GenericData.get().getDefaultValue(field));\n  }", "signature": "void testLongAsFloatDefaultValue()", "full_signature": "@Test public void testLongAsFloatDefaultValue()", "class_method_signature": "TestSchema.testLongAsFloatDefaultValue()", "testcase": true, "constructor": false, "invocations": ["create", "assertTrue", "hasDefaultValue", "assertEquals", "defaultVal", "assertEquals", "getDefaultValue", "get"]}, "focal_class": {"identifier": "Schema", "superclass": "extends JsonProperties", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "static final JsonFactory FACTORY = new JsonFactory();", "modifier": "static final", "type": "JsonFactory", "declarator": "FACTORY = new JsonFactory()", "var_name": "FACTORY"}, {"original_string": "static final ObjectMapper MAPPER = new ObjectMapper(FACTORY);", "modifier": "static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper(FACTORY)", "var_name": "MAPPER"}, {"original_string": "private static final int NO_HASHCODE = Integer.MIN_VALUE;", "modifier": "private static final", "type": "int", "declarator": "NO_HASHCODE = Integer.MIN_VALUE", "var_name": "NO_HASHCODE"}, {"original_string": "private final Type type;", "modifier": "private final", "type": "Type", "declarator": "type", "var_name": "type"}, {"original_string": "private LogicalType logicalType = null;", "modifier": "private", "type": "LogicalType", "declarator": "logicalType = null", "var_name": "logicalType"}, {"original_string": "private static final Set<String> SCHEMA_RESERVED = new HashSet<>(\n      Arrays.asList(\"doc\", \"fields\", \"items\", \"name\", \"namespace\", \"size\", \"symbols\", \"values\", \"type\", \"aliases\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "SCHEMA_RESERVED = new HashSet<>(\n      Arrays.asList(\"doc\", \"fields\", \"items\", \"name\", \"namespace\", \"size\", \"symbols\", \"values\", \"type\", \"aliases\"))", "var_name": "SCHEMA_RESERVED"}, {"original_string": "private static final Set<String> ENUM_RESERVED = new HashSet<>(SCHEMA_RESERVED);", "modifier": "private static final", "type": "Set<String>", "declarator": "ENUM_RESERVED = new HashSet<>(SCHEMA_RESERVED)", "var_name": "ENUM_RESERVED"}, {"original_string": "int hashCode = NO_HASHCODE;", "modifier": "", "type": "int", "declarator": "hashCode = NO_HASHCODE", "var_name": "hashCode"}, {"original_string": "private static final Set<String> FIELD_RESERVED = Collections\n      .unmodifiableSet(new HashSet<>(Arrays.asList(\"default\", \"doc\", \"name\", \"order\", \"type\", \"aliases\")));", "modifier": "private static final", "type": "Set<String>", "declarator": "FIELD_RESERVED = Collections\n      .unmodifiableSet(new HashSet<>(Arrays.asList(\"default\", \"doc\", \"name\", \"order\", \"type\", \"aliases\")))", "var_name": "FIELD_RESERVED"}, {"original_string": "private static final ThreadLocal<Set> SEEN_EQUALS = ThreadLocal.withInitial(HashSet::new);", "modifier": "private static final", "type": "ThreadLocal<Set>", "declarator": "SEEN_EQUALS = ThreadLocal.withInitial(HashSet::new)", "var_name": "SEEN_EQUALS"}, {"original_string": "private static final ThreadLocal<Map> SEEN_HASHCODE = ThreadLocal.withInitial(IdentityHashMap::new);", "modifier": "private static final", "type": "ThreadLocal<Map>", "declarator": "SEEN_HASHCODE = ThreadLocal.withInitial(IdentityHashMap::new)", "var_name": "SEEN_HASHCODE"}, {"original_string": "static final Map<String, Type> PRIMITIVES = new HashMap<>();", "modifier": "static final", "type": "Map<String, Type>", "declarator": "PRIMITIVES = new HashMap<>()", "var_name": "PRIMITIVES"}, {"original_string": "private static ThreadLocal<Boolean> validateNames = ThreadLocal.withInitial(() -> true);", "modifier": "private static", "type": "ThreadLocal<Boolean>", "declarator": "validateNames = ThreadLocal.withInitial(() -> true)", "var_name": "validateNames"}, {"original_string": "private static final ThreadLocal<Boolean> VALIDATE_DEFAULTS = ThreadLocal.withInitial(() -> true);", "modifier": "private static final", "type": "ThreadLocal<Boolean>", "declarator": "VALIDATE_DEFAULTS = ThreadLocal.withInitial(() -> true)", "var_name": "VALIDATE_DEFAULTS"}], "methods": [{"identifier": "writeReplace", "parameters": "()", "modifiers": "protected", "return": "Object", "signature": "Object writeReplace()", "full_signature": "protected Object writeReplace()", "class_method_signature": "Schema.writeReplace()", "testcase": false, "constructor": false}, {"identifier": "Schema", "parameters": "(Type type)", "modifiers": "", "return": "", "signature": " Schema(Type type)", "full_signature": "  Schema(Type type)", "class_method_signature": "Schema.Schema(Type type)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Type type)", "modifiers": "public static", "return": "Schema", "signature": "Schema create(Type type)", "full_signature": "public static Schema create(Type type)", "class_method_signature": "Schema.create(Type type)", "testcase": false, "constructor": false}, {"identifier": "addProp", "parameters": "(String name, String value)", "modifiers": "@Override public", "return": "void", "signature": "void addProp(String name, String value)", "full_signature": "@Override public void addProp(String name, String value)", "class_method_signature": "Schema.addProp(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "addProp", "parameters": "(String name, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void addProp(String name, Object value)", "full_signature": "@Override public void addProp(String name, Object value)", "class_method_signature": "Schema.addProp(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "getLogicalType", "parameters": "()", "modifiers": "public", "return": "LogicalType", "signature": "LogicalType getLogicalType()", "full_signature": "public LogicalType getLogicalType()", "class_method_signature": "Schema.getLogicalType()", "testcase": false, "constructor": false}, {"identifier": "setLogicalType", "parameters": "(LogicalType logicalType)", "modifiers": "", "return": "void", "signature": "void setLogicalType(LogicalType logicalType)", "full_signature": " void setLogicalType(LogicalType logicalType)", "class_method_signature": "Schema.setLogicalType(LogicalType logicalType)", "testcase": false, "constructor": false}, {"identifier": "createRecord", "parameters": "(List<Field> fields)", "modifiers": "@Deprecated public static", "return": "Schema", "signature": "Schema createRecord(List<Field> fields)", "full_signature": "@Deprecated public static Schema createRecord(List<Field> fields)", "class_method_signature": "Schema.createRecord(List<Field> fields)", "testcase": false, "constructor": false}, {"identifier": "createRecord", "parameters": "(String name, String doc, String namespace, boolean isError)", "modifiers": "public static", "return": "Schema", "signature": "Schema createRecord(String name, String doc, String namespace, boolean isError)", "full_signature": "public static Schema createRecord(String name, String doc, String namespace, boolean isError)", "class_method_signature": "Schema.createRecord(String name, String doc, String namespace, boolean isError)", "testcase": false, "constructor": false}, {"identifier": "createRecord", "parameters": "(String name, String doc, String namespace, boolean isError, List<Field> fields)", "modifiers": "public static", "return": "Schema", "signature": "Schema createRecord(String name, String doc, String namespace, boolean isError, List<Field> fields)", "full_signature": "public static Schema createRecord(String name, String doc, String namespace, boolean isError, List<Field> fields)", "class_method_signature": "Schema.createRecord(String name, String doc, String namespace, boolean isError, List<Field> fields)", "testcase": false, "constructor": false}, {"identifier": "createEnum", "parameters": "(String name, String doc, String namespace, List<String> values)", "modifiers": "public static", "return": "Schema", "signature": "Schema createEnum(String name, String doc, String namespace, List<String> values)", "full_signature": "public static Schema createEnum(String name, String doc, String namespace, List<String> values)", "class_method_signature": "Schema.createEnum(String name, String doc, String namespace, List<String> values)", "testcase": false, "constructor": false}, {"identifier": "createEnum", "parameters": "(String name, String doc, String namespace, List<String> values, String enumDefault)", "modifiers": "public static", "return": "Schema", "signature": "Schema createEnum(String name, String doc, String namespace, List<String> values, String enumDefault)", "full_signature": "public static Schema createEnum(String name, String doc, String namespace, List<String> values, String enumDefault)", "class_method_signature": "Schema.createEnum(String name, String doc, String namespace, List<String> values, String enumDefault)", "testcase": false, "constructor": false}, {"identifier": "createArray", "parameters": "(Schema elementType)", "modifiers": "public static", "return": "Schema", "signature": "Schema createArray(Schema elementType)", "full_signature": "public static Schema createArray(Schema elementType)", "class_method_signature": "Schema.createArray(Schema elementType)", "testcase": false, "constructor": false}, {"identifier": "createMap", "parameters": "(Schema valueType)", "modifiers": "public static", "return": "Schema", "signature": "Schema createMap(Schema valueType)", "full_signature": "public static Schema createMap(Schema valueType)", "class_method_signature": "Schema.createMap(Schema valueType)", "testcase": false, "constructor": false}, {"identifier": "createUnion", "parameters": "(List<Schema> types)", "modifiers": "public static", "return": "Schema", "signature": "Schema createUnion(List<Schema> types)", "full_signature": "public static Schema createUnion(List<Schema> types)", "class_method_signature": "Schema.createUnion(List<Schema> types)", "testcase": false, "constructor": false}, {"identifier": "createUnion", "parameters": "(Schema... types)", "modifiers": "public static", "return": "Schema", "signature": "Schema createUnion(Schema... types)", "full_signature": "public static Schema createUnion(Schema... types)", "class_method_signature": "Schema.createUnion(Schema... types)", "testcase": false, "constructor": false}, {"identifier": "createFixed", "parameters": "(String name, String doc, String space, int size)", "modifiers": "public static", "return": "Schema", "signature": "Schema createFixed(String name, String doc, String space, int size)", "full_signature": "public static Schema createFixed(String name, String doc, String space, int size)", "class_method_signature": "Schema.createFixed(String name, String doc, String space, int size)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Type", "signature": "Type getType()", "full_signature": "public Type getType()", "class_method_signature": "Schema.getType()", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(String fieldname)", "modifiers": "public", "return": "Field", "signature": "Field getField(String fieldname)", "full_signature": "public Field getField(String fieldname)", "class_method_signature": "Schema.getField(String fieldname)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "()", "modifiers": "public", "return": "List<Field>", "signature": "List<Field> getFields()", "full_signature": "public List<Field> getFields()", "class_method_signature": "Schema.getFields()", "testcase": false, "constructor": false}, {"identifier": "setFields", "parameters": "(List<Field> fields)", "modifiers": "public", "return": "void", "signature": "void setFields(List<Field> fields)", "full_signature": "public void setFields(List<Field> fields)", "class_method_signature": "Schema.setFields(List<Field> fields)", "testcase": false, "constructor": false}, {"identifier": "getEnumSymbols", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getEnumSymbols()", "full_signature": "public List<String> getEnumSymbols()", "class_method_signature": "Schema.getEnumSymbols()", "testcase": false, "constructor": false}, {"identifier": "getEnumDefault", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEnumDefault()", "full_signature": "public String getEnumDefault()", "class_method_signature": "Schema.getEnumDefault()", "testcase": false, "constructor": false}, {"identifier": "getEnumOrdinal", "parameters": "(String symbol)", "modifiers": "public", "return": "int", "signature": "int getEnumOrdinal(String symbol)", "full_signature": "public int getEnumOrdinal(String symbol)", "class_method_signature": "Schema.getEnumOrdinal(String symbol)", "testcase": false, "constructor": false}, {"identifier": "hasEnumSymbol", "parameters": "(String symbol)", "modifiers": "public", "return": "boolean", "signature": "boolean hasEnumSymbol(String symbol)", "full_signature": "public boolean hasEnumSymbol(String symbol)", "class_method_signature": "Schema.hasEnumSymbol(String symbol)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Schema.getName()", "testcase": false, "constructor": false}, {"identifier": "getDoc", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDoc()", "full_signature": "public String getDoc()", "class_method_signature": "Schema.getDoc()", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespace()", "full_signature": "public String getNamespace()", "class_method_signature": "Schema.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "getFullName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFullName()", "full_signature": "public String getFullName()", "class_method_signature": "Schema.getFullName()", "testcase": false, "constructor": false}, {"identifier": "addAlias", "parameters": "(String alias)", "modifiers": "public", "return": "void", "signature": "void addAlias(String alias)", "full_signature": "public void addAlias(String alias)", "class_method_signature": "Schema.addAlias(String alias)", "testcase": false, "constructor": false}, {"identifier": "addAlias", "parameters": "(String alias, String space)", "modifiers": "public", "return": "void", "signature": "void addAlias(String alias, String space)", "full_signature": "public void addAlias(String alias, String space)", "class_method_signature": "Schema.addAlias(String alias, String space)", "testcase": false, "constructor": false}, {"identifier": "getAliases", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAliases()", "full_signature": "public Set<String> getAliases()", "class_method_signature": "Schema.getAliases()", "testcase": false, "constructor": false}, {"identifier": "isError", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isError()", "full_signature": "public boolean isError()", "class_method_signature": "Schema.isError()", "testcase": false, "constructor": false}, {"identifier": "getElementType", "parameters": "()", "modifiers": "public", "return": "Schema", "signature": "Schema getElementType()", "full_signature": "public Schema getElementType()", "class_method_signature": "Schema.getElementType()", "testcase": false, "constructor": false}, {"identifier": "getValueType", "parameters": "()", "modifiers": "public", "return": "Schema", "signature": "Schema getValueType()", "full_signature": "public Schema getValueType()", "class_method_signature": "Schema.getValueType()", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "List<Schema>", "signature": "List<Schema> getTypes()", "full_signature": "public List<Schema> getTypes()", "class_method_signature": "Schema.getTypes()", "testcase": false, "constructor": false}, {"identifier": "getIndexNamed", "parameters": "(String name)", "modifiers": "public", "return": "Integer", "signature": "Integer getIndexNamed(String name)", "full_signature": "public Integer getIndexNamed(String name)", "class_method_signature": "Schema.getIndexNamed(String name)", "testcase": false, "constructor": false}, {"identifier": "getFixedSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFixedSize()", "full_signature": "public int getFixedSize()", "class_method_signature": "Schema.getFixedSize()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Schema.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(boolean pretty)", "modifiers": "public", "return": "String", "signature": "String toString(boolean pretty)", "full_signature": "public String toString(boolean pretty)", "class_method_signature": "Schema.toString(boolean pretty)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Collection<Schema> referencedSchemas, boolean pretty)", "modifiers": "@Deprecated public", "return": "String", "signature": "String toString(Collection<Schema> referencedSchemas, boolean pretty)", "full_signature": "@Deprecated public String toString(Collection<Schema> referencedSchemas, boolean pretty)", "class_method_signature": "Schema.toString(Collection<Schema> referencedSchemas, boolean pretty)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Names names, boolean pretty)", "modifiers": "", "return": "String", "signature": "String toString(Names names, boolean pretty)", "full_signature": " String toString(Names names, boolean pretty)", "class_method_signature": "Schema.toString(Names names, boolean pretty)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(Names names, JsonGenerator gen)", "modifiers": "", "return": "void", "signature": "void toJson(Names names, JsonGenerator gen)", "full_signature": " void toJson(Names names, JsonGenerator gen)", "class_method_signature": "Schema.toJson(Names names, JsonGenerator gen)", "testcase": false, "constructor": false}, {"identifier": "fieldsToJson", "parameters": "(Names names, JsonGenerator gen)", "modifiers": "", "return": "void", "signature": "void fieldsToJson(Names names, JsonGenerator gen)", "full_signature": " void fieldsToJson(Names names, JsonGenerator gen)", "class_method_signature": "Schema.fieldsToJson(Names names, JsonGenerator gen)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Schema.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "Schema.hashCode()", "testcase": false, "constructor": false}, {"identifier": "computeHash", "parameters": "()", "modifiers": "", "return": "int", "signature": "int computeHash()", "full_signature": " int computeHash()", "class_method_signature": "Schema.computeHash()", "testcase": false, "constructor": false}, {"identifier": "equalCachedHash", "parameters": "(Schema other)", "modifiers": "final", "return": "boolean", "signature": "boolean equalCachedHash(Schema other)", "full_signature": "final boolean equalCachedHash(Schema other)", "class_method_signature": "Schema.equalCachedHash(Schema other)", "testcase": false, "constructor": false}, {"identifier": "isUnion", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnion()", "full_signature": "public boolean isUnion()", "class_method_signature": "Schema.isUnion()", "testcase": false, "constructor": false}, {"identifier": "isNullable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNullable()", "full_signature": "public boolean isNullable()", "class_method_signature": "Schema.isNullable()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(File file)", "modifiers": "@Deprecated public static", "return": "Schema", "signature": "Schema parse(File file)", "full_signature": "@Deprecated public static Schema parse(File file)", "class_method_signature": "Schema.parse(File file)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream in)", "modifiers": "@Deprecated public static", "return": "Schema", "signature": "Schema parse(InputStream in)", "full_signature": "@Deprecated public static Schema parse(InputStream in)", "class_method_signature": "Schema.parse(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String jsonSchema)", "modifiers": "@Deprecated public static", "return": "Schema", "signature": "Schema parse(String jsonSchema)", "full_signature": "@Deprecated public static Schema parse(String jsonSchema)", "class_method_signature": "Schema.parse(String jsonSchema)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String jsonSchema, boolean validate)", "modifiers": "@Deprecated public static", "return": "Schema", "signature": "Schema parse(String jsonSchema, boolean validate)", "full_signature": "@Deprecated public static Schema parse(String jsonSchema, boolean validate)", "class_method_signature": "Schema.parse(String jsonSchema, boolean validate)", "testcase": false, "constructor": false}, {"identifier": "validateName", "parameters": "(String name)", "modifiers": "private static", "return": "String", "signature": "String validateName(String name)", "full_signature": "private static String validateName(String name)", "class_method_signature": "Schema.validateName(String name)", "testcase": false, "constructor": false}, {"identifier": "validateDefault", "parameters": "(String fieldName, Schema schema, JsonNode defaultValue)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode validateDefault(String fieldName, Schema schema, JsonNode defaultValue)", "full_signature": "private static JsonNode validateDefault(String fieldName, Schema schema, JsonNode defaultValue)", "class_method_signature": "Schema.validateDefault(String fieldName, Schema schema, JsonNode defaultValue)", "testcase": false, "constructor": false}, {"identifier": "isValidDefault", "parameters": "(Schema schema, JsonNode defaultValue)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidDefault(Schema schema, JsonNode defaultValue)", "full_signature": "private static boolean isValidDefault(Schema schema, JsonNode defaultValue)", "class_method_signature": "Schema.isValidDefault(Schema schema, JsonNode defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(JsonNode schema, Names names)", "modifiers": "static", "return": "Schema", "signature": "Schema parse(JsonNode schema, Names names)", "full_signature": "static Schema parse(JsonNode schema, Names names)", "class_method_signature": "Schema.parse(JsonNode schema, Names names)", "testcase": false, "constructor": false}, {"identifier": "parseAliases", "parameters": "(JsonNode node)", "modifiers": "static", "return": "Set<String>", "signature": "Set<String> parseAliases(JsonNode node)", "full_signature": "static Set<String> parseAliases(JsonNode node)", "class_method_signature": "Schema.parseAliases(JsonNode node)", "testcase": false, "constructor": false}, {"identifier": "getRequiredText", "parameters": "(JsonNode container, String key, String error)", "modifiers": "private static", "return": "String", "signature": "String getRequiredText(JsonNode container, String key, String error)", "full_signature": "private static String getRequiredText(JsonNode container, String key, String error)", "class_method_signature": "Schema.getRequiredText(JsonNode container, String key, String error)", "testcase": false, "constructor": false}, {"identifier": "getOptionalText", "parameters": "(JsonNode container, String key)", "modifiers": "private static", "return": "String", "signature": "String getOptionalText(JsonNode container, String key)", "full_signature": "private static String getOptionalText(JsonNode container, String key)", "class_method_signature": "Schema.getOptionalText(JsonNode container, String key)", "testcase": false, "constructor": false}, {"identifier": "parseJson", "parameters": "(String s)", "modifiers": "static", "return": "JsonNode", "signature": "JsonNode parseJson(String s)", "full_signature": "static JsonNode parseJson(String s)", "class_method_signature": "Schema.parseJson(String s)", "testcase": false, "constructor": false}, {"identifier": "parseJsonToObject", "parameters": "(String s)", "modifiers": "public static", "return": "Object", "signature": "Object parseJsonToObject(String s)", "full_signature": "public static Object parseJsonToObject(String s)", "class_method_signature": "Schema.parseJsonToObject(String s)", "testcase": false, "constructor": false}, {"identifier": "applyAliases", "parameters": "(Schema writer, Schema reader)", "modifiers": "public static", "return": "Schema", "signature": "Schema applyAliases(Schema writer, Schema reader)", "full_signature": "public static Schema applyAliases(Schema writer, Schema reader)", "class_method_signature": "Schema.applyAliases(Schema writer, Schema reader)", "testcase": false, "constructor": false}, {"identifier": "applyAliases", "parameters": "(Schema s, Map<Schema, Schema> seen, Map<Name, Name> aliases,\n      Map<Name, Map<String, String>> fieldAliases)", "modifiers": "private static", "return": "Schema", "signature": "Schema applyAliases(Schema s, Map<Schema, Schema> seen, Map<Name, Name> aliases,\n      Map<Name, Map<String, String>> fieldAliases)", "full_signature": "private static Schema applyAliases(Schema s, Map<Schema, Schema> seen, Map<Name, Name> aliases,\n      Map<Name, Map<String, String>> fieldAliases)", "class_method_signature": "Schema.applyAliases(Schema s, Map<Schema, Schema> seen, Map<Name, Name> aliases,\n      Map<Name, Map<String, String>> fieldAliases)", "testcase": false, "constructor": false}, {"identifier": "getAliases", "parameters": "(Schema schema, Map<Schema, Schema> seen, Map<Name, Name> aliases,\n      Map<Name, Map<String, String>> fieldAliases)", "modifiers": "private static", "return": "void", "signature": "void getAliases(Schema schema, Map<Schema, Schema> seen, Map<Name, Name> aliases,\n      Map<Name, Map<String, String>> fieldAliases)", "full_signature": "private static void getAliases(Schema schema, Map<Schema, Schema> seen, Map<Name, Name> aliases,\n      Map<Name, Map<String, String>> fieldAliases)", "class_method_signature": "Schema.getAliases(Schema schema, Map<Schema, Schema> seen, Map<Name, Name> aliases,\n      Map<Name, Map<String, String>> fieldAliases)", "testcase": false, "constructor": false}, {"identifier": "getFieldAlias", "parameters": "(Name record, String field, Map<Name, Map<String, String>> fieldAliases)", "modifiers": "private static", "return": "String", "signature": "String getFieldAlias(Name record, String field, Map<Name, Map<String, String>> fieldAliases)", "full_signature": "private static String getFieldAlias(Name record, String field, Map<Name, Map<String, String>> fieldAliases)", "class_method_signature": "Schema.getFieldAlias(Name record, String field, Map<Name, Map<String, String>> fieldAliases)", "testcase": false, "constructor": false}], "file": "lang/java/avro/src/main/java/org/apache/avro/Schema.java"}, "focal_method": {"identifier": "create", "parameters": "(Type type)", "modifiers": "public static", "return": "Schema", "body": "public static Schema create(Type type) {\n    switch (type) {\n    case STRING:\n      return new StringSchema();\n    case BYTES:\n      return new BytesSchema();\n    case INT:\n      return new IntSchema();\n    case LONG:\n      return new LongSchema();\n    case FLOAT:\n      return new FloatSchema();\n    case DOUBLE:\n      return new DoubleSchema();\n    case BOOLEAN:\n      return new BooleanSchema();\n    case NULL:\n      return new NullSchema();\n    default:\n      throw new AvroRuntimeException(\"Can't create a: \" + type);\n    }\n  }", "signature": "Schema create(Type type)", "full_signature": "public static Schema create(Type type)", "class_method_signature": "Schema.create(Type type)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 206459, "url": "https://github.com/apache/avro", "stars": 1473, "created": "5/21/2009 2:48:37 AM +00:00", "updates": "2020-01-23T18:50:51+00:00", "fork": "False", "license": "licensed"}}