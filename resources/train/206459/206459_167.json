{"test_class": {"identifier": "TestAvroCharSequenceComparator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AvroCharSequenceComparator<CharSequence> mComparator;", "modifier": "private", "type": "AvroCharSequenceComparator<CharSequence>", "declarator": "mComparator", "var_name": "mComparator"}], "file": "lang/java/mapred/src/test/java/org/apache/avro/hadoop/util/TestAvroCharSequenceComparator.java"}, "test_case": {"identifier": "testCompareString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCompareString() {\n    assertEquals(0, mComparator.compare(\"\", \"\"));\n    assertThat(mComparator.compare(\"\", \"a\"), lessThan(0));\n    assertThat(mComparator.compare(\"a\", \"\"), greaterThan(0));\n\n    assertEquals(0, mComparator.compare(\"a\", \"a\"));\n    assertThat(mComparator.compare(\"a\", \"b\"), lessThan(0));\n    assertThat(mComparator.compare(\"b\", \"a\"), greaterThan(0));\n\n    assertEquals(0, mComparator.compare(\"ab\", \"ab\"));\n    assertThat(mComparator.compare(\"a\", \"aa\"), lessThan(0));\n    assertThat(mComparator.compare(\"aa\", \"a\"), greaterThan(0));\n\n    assertThat(mComparator.compare(\"abc\", \"abcdef\"), lessThan(0));\n    assertThat(mComparator.compare(\"abcdef\", \"abc\"), greaterThan(0));\n  }", "signature": "void testCompareString()", "full_signature": "@Test public void testCompareString()", "class_method_signature": "TestAvroCharSequenceComparator.testCompareString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare", "assertThat", "compare", "lessThan", "assertThat", "compare", "greaterThan", "assertEquals", "compare", "assertThat", "compare", "lessThan", "assertThat", "compare", "greaterThan", "assertEquals", "compare", "assertThat", "compare", "lessThan", "assertThat", "compare", "greaterThan", "assertThat", "compare", "lessThan", "assertThat", "compare", "greaterThan"]}, "focal_class": {"identifier": "AvroCharSequenceComparator", "superclass": "", "interfaces": "implements Comparator<T>", "fields": [{"original_string": "public static final AvroCharSequenceComparator<CharSequence> INSTANCE = new AvroCharSequenceComparator<>();", "modifier": "public static final", "type": "AvroCharSequenceComparator<CharSequence>", "declarator": "INSTANCE = new AvroCharSequenceComparator<>()", "var_name": "INSTANCE"}], "methods": [{"identifier": "compare", "parameters": "(T o1, T o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(T o1, T o2)", "full_signature": "@Override public int compare(T o1, T o2)", "class_method_signature": "AvroCharSequenceComparator.compare(T o1, T o2)", "testcase": false, "constructor": false}, {"identifier": "compareCharSequence", "parameters": "(CharSequence o1, CharSequence o2)", "modifiers": "private", "return": "int", "signature": "int compareCharSequence(CharSequence o1, CharSequence o2)", "full_signature": "private int compareCharSequence(CharSequence o1, CharSequence o2)", "class_method_signature": "AvroCharSequenceComparator.compareCharSequence(CharSequence o1, CharSequence o2)", "testcase": false, "constructor": false}, {"identifier": "compareCharacter", "parameters": "(CharSequence o1, CharSequence o2, int index)", "modifiers": "private", "return": "int", "signature": "int compareCharacter(CharSequence o1, CharSequence o2, int index)", "full_signature": "private int compareCharacter(CharSequence o1, CharSequence o2, int index)", "class_method_signature": "AvroCharSequenceComparator.compareCharacter(CharSequence o1, CharSequence o2, int index)", "testcase": false, "constructor": false}], "file": "lang/java/mapred/src/main/java/org/apache/avro/hadoop/util/AvroCharSequenceComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(T o1, T o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compare(T o1, T o2) {\n    if (!(o1 instanceof CharSequence) || !(o2 instanceof CharSequence)) {\n      throw new RuntimeException(\"Attempted use of AvroCharSequenceComparator on non-CharSequence objects: \"\n          + o1.getClass().getName() + \" and \" + o2.getClass().getName());\n    }\n    return compareCharSequence((CharSequence) o1, (CharSequence) o2);\n  }", "signature": "int compare(T o1, T o2)", "full_signature": "@Override public int compare(T o1, T o2)", "class_method_signature": "AvroCharSequenceComparator.compare(T o1, T o2)", "testcase": false, "constructor": false, "invocations": ["getName", "getClass", "getName", "getClass", "compareCharSequence"]}, "repository": {"repo_id": 206459, "url": "https://github.com/apache/avro", "stars": 1473, "created": "5/21/2009 2:48:37 AM +00:00", "updates": "2020-01-23T18:50:51+00:00", "fork": "False", "license": "licensed"}}