{"test_class": {"identifier": "TestSpecificData", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Class<?> intClass;", "modifier": "private", "type": "Class<?>", "declarator": "intClass", "var_name": "intClass"}, {"original_string": "private Class<?> integerClass;", "modifier": "private", "type": "Class<?>", "declarator": "integerClass", "var_name": "integerClass"}], "file": "lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificData.java"}, "test_case": {"identifier": "testSpecificRecordBase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSpecificRecordBase() {\n    final TestRecord record = new TestRecord();\n    record.put(\"x\", 1);\n    record.put(\"y\", \"str\");\n    assertEquals(1, record.get(\"x\"));\n    assertEquals(\"str\", record.get(\"y\"));\n  }", "signature": "void testSpecificRecordBase()", "full_signature": "@Test public void testSpecificRecordBase()", "class_method_signature": "TestSpecificData.testSpecificRecordBase()", "testcase": true, "constructor": false, "invocations": ["put", "put", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "SpecificData", "superclass": "extends GenericData", "interfaces": "", "fields": [{"original_string": "private static final SpecificData INSTANCE = new SpecificData();", "modifier": "private static final", "type": "SpecificData", "declarator": "INSTANCE = new SpecificData()", "var_name": "INSTANCE"}, {"original_string": "private static final Class<?>[] NO_ARG = new Class[] {};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "NO_ARG = new Class[] {}", "var_name": "NO_ARG"}, {"original_string": "private static final Class<?>[] SCHEMA_ARG = new Class[] { Schema.class };", "modifier": "private static final", "type": "Class<?>[]", "declarator": "SCHEMA_ARG = new Class[] { Schema.class }", "var_name": "SCHEMA_ARG"}, {"original_string": "private static final ClassValue<Constructor> CTOR_CACHE = new ClassValue<Constructor>() {\n    @Override\n    protected Constructor computeValue(Class<?> c) {\n      boolean useSchema = SchemaConstructable.class.isAssignableFrom(c);\n      try {\n        Constructor meth = c.getDeclaredConstructor(useSchema ? SCHEMA_ARG : NO_ARG);\n        meth.setAccessible(true);\n        return meth;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n  };", "modifier": "private static final", "type": "ClassValue<Constructor>", "declarator": "CTOR_CACHE = new ClassValue<Constructor>() {\n    @Override\n    protected Constructor computeValue(Class<?> c) {\n      boolean useSchema = SchemaConstructable.class.isAssignableFrom(c);\n      try {\n        Constructor meth = c.getDeclaredConstructor(useSchema ? SCHEMA_ARG : NO_ARG);\n        meth.setAccessible(true);\n        return meth;\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n  }", "var_name": "CTOR_CACHE"}, {"original_string": "public static final String CLASS_PROP = \"java-class\";", "modifier": "public static final", "type": "String", "declarator": "CLASS_PROP = \"java-class\"", "var_name": "CLASS_PROP"}, {"original_string": "public static final String KEY_CLASS_PROP = \"java-key-class\";", "modifier": "public static final", "type": "String", "declarator": "KEY_CLASS_PROP = \"java-key-class\"", "var_name": "KEY_CLASS_PROP"}, {"original_string": "public static final String ELEMENT_PROP = \"java-element-class\";", "modifier": "public static final", "type": "String", "declarator": "ELEMENT_PROP = \"java-element-class\"", "var_name": "ELEMENT_PROP"}, {"original_string": "public static final Set<String> RESERVED_WORDS = new HashSet<>(\n      Arrays.asList(\"abstract\", \"assert\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\",\n          \"continue\", \"default\", \"do\", \"double\", \"else\", \"enum\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\",\n          \"goto\", \"if\", \"implements\", \"import\", \"instanceof\", \"int\", \"interface\", \"long\", \"native\", \"new\", \"null\",\n          \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"strictfp\", \"super\", \"switch\",\n          \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\", \"true\", \"try\", \"void\", \"volatile\", \"while\",\n          /* classnames use internally by the avro code generator */\n          \"Builder\"));", "modifier": "public static final", "type": "Set<String>", "declarator": "RESERVED_WORDS = new HashSet<>(\n      Arrays.asList(\"abstract\", \"assert\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\",\n          \"continue\", \"default\", \"do\", \"double\", \"else\", \"enum\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\",\n          \"goto\", \"if\", \"implements\", \"import\", \"instanceof\", \"int\", \"interface\", \"long\", \"native\", \"new\", \"null\",\n          \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"strictfp\", \"super\", \"switch\",\n          \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\", \"true\", \"try\", \"void\", \"volatile\", \"while\",\n          /* classnames use internally by the avro code generator */\n          \"Builder\"))", "var_name": "RESERVED_WORDS"}, {"original_string": "protected Set<Class> stringableClasses = new HashSet<>(Arrays.asList(java.math.BigDecimal.class,\n      java.math.BigInteger.class, java.net.URI.class, java.net.URL.class, java.io.File.class));", "modifier": "protected", "type": "Set<Class>", "declarator": "stringableClasses = new HashSet<>(Arrays.asList(java.math.BigDecimal.class,\n      java.math.BigInteger.class, java.net.URI.class, java.net.URL.class, java.io.File.class))", "var_name": "stringableClasses"}, {"original_string": "private boolean useCustomCoderFlag = Boolean\n      .parseBoolean(System.getProperty(\"org.apache.avro.specific.use_custom_coders\", \"false\"));", "modifier": "private", "type": "boolean", "declarator": "useCustomCoderFlag = Boolean\n      .parseBoolean(System.getProperty(\"org.apache.avro.specific.use_custom_coders\", \"false\"))", "var_name": "useCustomCoderFlag"}, {"original_string": "private Map<String, Class> classCache = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, Class>", "declarator": "classCache = new ConcurrentHashMap<>()", "var_name": "classCache"}, {"original_string": "private static final Class NO_CLASS = new Object() {\n  }.getClass();", "modifier": "private static final", "type": "Class", "declarator": "NO_CLASS = new Object() {\n  }.getClass()", "var_name": "NO_CLASS"}, {"original_string": "private static final Schema NULL_SCHEMA = Schema.create(Schema.Type.NULL);", "modifier": "private static final", "type": "Schema", "declarator": "NULL_SCHEMA = Schema.create(Schema.Type.NULL)", "var_name": "NULL_SCHEMA"}, {"original_string": "private final ClassValue<Schema> schemaClassCache = new ClassValue<Schema>() {\n    @Override\n    protected Schema computeValue(Class<?> type) {\n      return createSchema(type, new HashMap<>());\n    }\n  };", "modifier": "private final", "type": "ClassValue<Schema>", "declarator": "schemaClassCache = new ClassValue<Schema>() {\n    @Override\n    protected Schema computeValue(Class<?> type) {\n      return createSchema(type, new HashMap<>());\n    }\n  }", "var_name": "schemaClassCache"}, {"original_string": "private final Map<java.lang.reflect.Type, Schema> schemaTypeCache = Collections.synchronizedMap(new WeakHashMap<>());", "modifier": "private final", "type": "Map<java.lang.reflect.Type, Schema>", "declarator": "schemaTypeCache = Collections.synchronizedMap(new WeakHashMap<>())", "var_name": "schemaTypeCache"}], "methods": [{"identifier": "SpecificData", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpecificData()", "full_signature": "public  SpecificData()", "class_method_signature": "SpecificData.SpecificData()", "testcase": false, "constructor": true}, {"identifier": "SpecificData", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " SpecificData(ClassLoader classLoader)", "full_signature": "public  SpecificData(ClassLoader classLoader)", "class_method_signature": "SpecificData.SpecificData(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "createDatumReader", "parameters": "(Schema schema)", "modifiers": "@Override public", "return": "DatumReader", "signature": "DatumReader createDatumReader(Schema schema)", "full_signature": "@Override public DatumReader createDatumReader(Schema schema)", "class_method_signature": "SpecificData.createDatumReader(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "createDatumReader", "parameters": "(Schema writer, Schema reader)", "modifiers": "@Override public", "return": "DatumReader", "signature": "DatumReader createDatumReader(Schema writer, Schema reader)", "full_signature": "@Override public DatumReader createDatumReader(Schema writer, Schema reader)", "class_method_signature": "SpecificData.createDatumReader(Schema writer, Schema reader)", "testcase": false, "constructor": false}, {"identifier": "createDatumWriter", "parameters": "(Schema schema)", "modifiers": "@Override public", "return": "DatumWriter", "signature": "DatumWriter createDatumWriter(Schema schema)", "full_signature": "@Override public DatumWriter createDatumWriter(Schema schema)", "class_method_signature": "SpecificData.createDatumWriter(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "SpecificData", "signature": "SpecificData get()", "full_signature": "public static SpecificData get()", "class_method_signature": "SpecificData.get()", "testcase": false, "constructor": false}, {"identifier": "getForSchema", "parameters": "(Schema reader)", "modifiers": "public static", "return": "SpecificData", "signature": "SpecificData getForSchema(Schema reader)", "full_signature": "public static SpecificData getForSchema(Schema reader)", "class_method_signature": "SpecificData.getForSchema(Schema reader)", "testcase": false, "constructor": false}, {"identifier": "getForClass", "parameters": "(Class<T> c)", "modifiers": "public static", "return": "SpecificData", "signature": "SpecificData getForClass(Class<T> c)", "full_signature": "public static SpecificData getForClass(Class<T> c)", "class_method_signature": "SpecificData.getForClass(Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "useCustomCoders", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean useCustomCoders()", "full_signature": "public boolean useCustomCoders()", "class_method_signature": "SpecificData.useCustomCoders()", "testcase": false, "constructor": false}, {"identifier": "setCustomCoders", "parameters": "(boolean flag)", "modifiers": "public", "return": "void", "signature": "void setCustomCoders(boolean flag)", "full_signature": "public void setCustomCoders(boolean flag)", "class_method_signature": "SpecificData.setCustomCoders(boolean flag)", "testcase": false, "constructor": false}, {"identifier": "isEnum", "parameters": "(Object datum)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isEnum(Object datum)", "full_signature": "@Override protected boolean isEnum(Object datum)", "class_method_signature": "SpecificData.isEnum(Object datum)", "testcase": false, "constructor": false}, {"identifier": "createEnum", "parameters": "(String symbol, Schema schema)", "modifiers": "@Override public", "return": "Object", "signature": "Object createEnum(String symbol, Schema schema)", "full_signature": "@Override public Object createEnum(String symbol, Schema schema)", "class_method_signature": "SpecificData.createEnum(String symbol, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getEnumSchema", "parameters": "(Object datum)", "modifiers": "@Override protected", "return": "Schema", "signature": "Schema getEnumSchema(Object datum)", "full_signature": "@Override protected Schema getEnumSchema(Object datum)", "class_method_signature": "SpecificData.getEnumSchema(Object datum)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(Schema schema)", "modifiers": "public", "return": "Class", "signature": "Class getClass(Schema schema)", "full_signature": "public Class getClass(Schema schema)", "class_method_signature": "SpecificData.getClass(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getWrapper", "parameters": "(Schema schema)", "modifiers": "private", "return": "Class", "signature": "Class getWrapper(Schema schema)", "full_signature": "private Class getWrapper(Schema schema)", "class_method_signature": "SpecificData.getWrapper(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "(Schema schema)", "modifiers": "public static", "return": "String", "signature": "String getClassName(Schema schema)", "full_signature": "public static String getClassName(Schema schema)", "class_method_signature": "SpecificData.getClassName(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(java.lang.reflect.Type type)", "modifiers": "public", "return": "Schema", "signature": "Schema getSchema(java.lang.reflect.Type type)", "full_signature": "public Schema getSchema(java.lang.reflect.Type type)", "class_method_signature": "SpecificData.getSchema(java.lang.reflect.Type type)", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(java.lang.reflect.Type type, Map<String, Schema> names)", "modifiers": "@SuppressWarnings(value = \"unchecked\") protected", "return": "Schema", "signature": "Schema createSchema(java.lang.reflect.Type type, Map<String, Schema> names)", "full_signature": "@SuppressWarnings(value = \"unchecked\") protected Schema createSchema(java.lang.reflect.Type type, Map<String, Schema> names)", "class_method_signature": "SpecificData.createSchema(java.lang.reflect.Type type, Map<String, Schema> names)", "testcase": false, "constructor": false}, {"identifier": "getSchemaName", "parameters": "(Object datum)", "modifiers": "@Override protected", "return": "String", "signature": "String getSchemaName(Object datum)", "full_signature": "@Override protected String getSchemaName(Object datum)", "class_method_signature": "SpecificData.getSchemaName(Object datum)", "testcase": false, "constructor": false}, {"identifier": "isStringable", "parameters": "(Class<?> c)", "modifiers": "protected", "return": "boolean", "signature": "boolean isStringable(Class<?> c)", "full_signature": "protected boolean isStringable(Class<?> c)", "class_method_signature": "SpecificData.isStringable(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "isStringType", "parameters": "(Class<?> c)", "modifiers": "protected", "return": "boolean", "signature": "boolean isStringType(Class<?> c)", "full_signature": "protected boolean isStringType(Class<?> c)", "class_method_signature": "SpecificData.isStringType(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "getProtocol", "parameters": "(Class iface)", "modifiers": "public", "return": "Protocol", "signature": "Protocol getProtocol(Class iface)", "full_signature": "public Protocol getProtocol(Class iface)", "class_method_signature": "SpecificData.getProtocol(Class iface)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object o1, Object o2, Schema s, boolean eq)", "modifiers": "@Override protected", "return": "int", "signature": "int compare(Object o1, Object o2, Schema s, boolean eq)", "full_signature": "@Override protected int compare(Object o1, Object o2, Schema s, boolean eq)", "class_method_signature": "SpecificData.compare(Object o1, Object o2, Schema s, boolean eq)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class c, Schema s)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "signature": "Object newInstance(Class c, Schema s)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object newInstance(Class c, Schema s)", "class_method_signature": "SpecificData.newInstance(Class c, Schema s)", "testcase": false, "constructor": false}, {"identifier": "createFixed", "parameters": "(Object old, Schema schema)", "modifiers": "@Override public", "return": "Object", "signature": "Object createFixed(Object old, Schema schema)", "full_signature": "@Override public Object createFixed(Object old, Schema schema)", "class_method_signature": "SpecificData.createFixed(Object old, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "newRecord", "parameters": "(Object old, Schema schema)", "modifiers": "@Override public", "return": "Object", "signature": "Object newRecord(Object old, Schema schema)", "full_signature": "@Override public Object newRecord(Object old, Schema schema)", "class_method_signature": "SpecificData.newRecord(Object old, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getNewRecordSupplier", "parameters": "(Schema schema)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override /** * Create an InstanceSupplier that caches all information required for the * creation of a schema record instance rather than having to look them up for * each call (as newRecord would) */ public", "return": "InstanceSupplier", "signature": "InstanceSupplier getNewRecordSupplier(Schema schema)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override /** * Create an InstanceSupplier that caches all information required for the * creation of a schema record instance rather than having to look them up for * each call (as newRecord would) */ public InstanceSupplier getNewRecordSupplier(Schema schema)", "class_method_signature": "SpecificData.getNewRecordSupplier(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getDecoder", "parameters": "(ObjectInput in)", "modifiers": "public static", "return": "BinaryDecoder", "signature": "BinaryDecoder getDecoder(ObjectInput in)", "full_signature": "public static BinaryDecoder getDecoder(ObjectInput in)", "class_method_signature": "SpecificData.getDecoder(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "getEncoder", "parameters": "(ObjectOutput out)", "modifiers": "public static", "return": "BinaryEncoder", "signature": "BinaryEncoder getEncoder(ObjectOutput out)", "full_signature": "public static BinaryEncoder getEncoder(ObjectOutput out)", "class_method_signature": "SpecificData.getEncoder(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "createString", "parameters": "(Object value)", "modifiers": "@Override public", "return": "Object", "signature": "Object createString(Object value)", "full_signature": "@Override public Object createString(Object value)", "class_method_signature": "SpecificData.createString(Object value)", "testcase": false, "constructor": false}], "file": "lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "SpecificData", "body": "public static SpecificData get() {\n    return INSTANCE;\n  }", "signature": "SpecificData get()", "full_signature": "public static SpecificData get()", "class_method_signature": "SpecificData.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 206459, "url": "https://github.com/apache/avro", "stars": 1473, "created": "5/21/2009 2:48:37 AM +00:00", "updates": "2020-01-23T18:50:51+00:00", "fork": "False", "license": "licensed"}}