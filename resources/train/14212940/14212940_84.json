{"test_class": {"identifier": "FanOutConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_CONSUMER_ARN = \"TestConsumerArn\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CONSUMER_ARN = \"TestConsumerArn\"", "var_name": "TEST_CONSUMER_ARN"}, {"original_string": "private static final String TEST_APPLICATION_NAME = \"TestApplication\";", "modifier": "private static final", "type": "String", "declarator": "TEST_APPLICATION_NAME = \"TestApplication\"", "var_name": "TEST_APPLICATION_NAME"}, {"original_string": "private static final String TEST_STREAM_NAME = \"TestStream\";", "modifier": "private static final", "type": "String", "declarator": "TEST_STREAM_NAME = \"TestStream\"", "var_name": "TEST_STREAM_NAME"}, {"original_string": "private static final String TEST_CONSUMER_NAME = \"TestConsumerName\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CONSUMER_NAME = \"TestConsumerName\"", "var_name": "TEST_CONSUMER_NAME"}, {"original_string": "@Mock\n    private FanOutConsumerRegistration consumerRegistration;", "modifier": "@Mock\n    private", "type": "FanOutConsumerRegistration", "declarator": "consumerRegistration", "var_name": "consumerRegistration"}, {"original_string": "@Mock\n    private KinesisAsyncClient kinesisClient;", "modifier": "@Mock\n    private", "type": "KinesisAsyncClient", "declarator": "kinesisClient", "var_name": "kinesisClient"}, {"original_string": "@Mock\n    private StreamConfig streamConfig;", "modifier": "@Mock\n    private", "type": "StreamConfig", "declarator": "streamConfig", "var_name": "streamConfig"}], "file": "amazon-kinesis-client/src/test/java/software/amazon/kinesis/retrieval/fanout/FanOutConfigTest.java"}, "test_case": {"identifier": "testCreationWithApplicationName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreationWithApplicationName() throws Exception {\n        FanOutConfig config = new TestingConfig(kinesisClient).applicationName(TEST_APPLICATION_NAME)\n                .streamName(TEST_STREAM_NAME);\n        RetrievalFactory factory = config.retrievalFactory();\n        ShardInfo shardInfo = mock(ShardInfo.class);\n        doReturn(Optional.empty()).when(shardInfo).streamIdentifierSerOpt();\n        factory.createGetRecordsCache(shardInfo, streamConfig, mock(MetricsFactory.class));\n        assertThat(factory, not(nullValue()));\n\n        TestingConfig testingConfig = (TestingConfig) config;\n        assertThat(testingConfig.stream, equalTo(TEST_STREAM_NAME));\n        assertThat(testingConfig.consumerToCreate, equalTo(TEST_APPLICATION_NAME));\n    }", "signature": "void testCreationWithApplicationName()", "full_signature": "@Test public void testCreationWithApplicationName()", "class_method_signature": "FanOutConfigTest.testCreationWithApplicationName()", "testcase": true, "constructor": false, "invocations": ["streamName", "applicationName", "retrievalFactory", "mock", "streamIdentifierSerOpt", "when", "doReturn", "empty", "createGetRecordsCache", "mock", "assertThat", "not", "nullValue", "assertThat", "equalTo", "assertThat", "equalTo"]}, "focal_class": {"identifier": "FanOutConfig", "superclass": "", "interfaces": "implements RetrievalSpecificConfig", "fields": [{"original_string": "@NonNull\n    private final KinesisAsyncClient kinesisClient;", "modifier": "@NonNull\n    private final", "type": "KinesisAsyncClient", "declarator": "kinesisClient", "var_name": "kinesisClient"}, {"original_string": "private String consumerArn;", "modifier": "private", "type": "String", "declarator": "consumerArn", "var_name": "consumerArn"}, {"original_string": "private String streamName;", "modifier": "private", "type": "String", "declarator": "streamName", "var_name": "streamName"}, {"original_string": "private String consumerName;", "modifier": "private", "type": "String", "declarator": "consumerName", "var_name": "consumerName"}, {"original_string": "private String applicationName;", "modifier": "private", "type": "String", "declarator": "applicationName", "var_name": "applicationName"}, {"original_string": "private int maxDescribeStreamSummaryRetries = 10;", "modifier": "private", "type": "int", "declarator": "maxDescribeStreamSummaryRetries = 10", "var_name": "maxDescribeStreamSummaryRetries"}, {"original_string": "private int maxDescribeStreamConsumerRetries = 10;", "modifier": "private", "type": "int", "declarator": "maxDescribeStreamConsumerRetries = 10", "var_name": "maxDescribeStreamConsumerRetries"}, {"original_string": "private int registerStreamConsumerRetries = 10;", "modifier": "private", "type": "int", "declarator": "registerStreamConsumerRetries = 10", "var_name": "registerStreamConsumerRetries"}, {"original_string": "private long retryBackoffMillis = 1000;", "modifier": "private", "type": "long", "declarator": "retryBackoffMillis = 1000", "var_name": "retryBackoffMillis"}], "methods": [{"identifier": "retrievalFactory", "parameters": "()", "modifiers": "@Override public", "return": "RetrievalFactory", "signature": "RetrievalFactory retrievalFactory()", "full_signature": "@Override public RetrievalFactory retrievalFactory()", "class_method_signature": "FanOutConfig.retrievalFactory()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateConsumerArn", "parameters": "(String streamName)", "modifiers": "private", "return": "String", "signature": "String getOrCreateConsumerArn(String streamName)", "full_signature": "private String getOrCreateConsumerArn(String streamName)", "class_method_signature": "FanOutConfig.getOrCreateConsumerArn(String streamName)", "testcase": false, "constructor": false}, {"identifier": "createConsumerRegistration", "parameters": "(String streamName)", "modifiers": "private", "return": "FanOutConsumerRegistration", "signature": "FanOutConsumerRegistration createConsumerRegistration(String streamName)", "full_signature": "private FanOutConsumerRegistration createConsumerRegistration(String streamName)", "class_method_signature": "FanOutConfig.createConsumerRegistration(String streamName)", "testcase": false, "constructor": false}, {"identifier": "createConsumerRegistration", "parameters": "(KinesisAsyncClient client, String stream,\n                                                                    String consumerToCreate)", "modifiers": "protected", "return": "FanOutConsumerRegistration", "signature": "FanOutConsumerRegistration createConsumerRegistration(KinesisAsyncClient client, String stream,\n                                                                    String consumerToCreate)", "full_signature": "protected FanOutConsumerRegistration createConsumerRegistration(KinesisAsyncClient client, String stream,\n                                                                    String consumerToCreate)", "class_method_signature": "FanOutConfig.createConsumerRegistration(KinesisAsyncClient client, String stream,\n                                                                    String consumerToCreate)", "testcase": false, "constructor": false}], "file": "amazon-kinesis-client/src/main/java/software/amazon/kinesis/retrieval/fanout/FanOutConfig.java"}, "focal_method": {"identifier": "retrievalFactory", "parameters": "()", "modifiers": "@Override public", "return": "RetrievalFactory", "body": "@Override public RetrievalFactory retrievalFactory() {\n        return new FanOutRetrievalFactory(kinesisClient, streamName, consumerArn, this::getOrCreateConsumerArn);\n    }", "signature": "RetrievalFactory retrievalFactory()", "full_signature": "@Override public RetrievalFactory retrievalFactory()", "class_method_signature": "FanOutConfig.retrievalFactory()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14212940, "url": "https://github.com/awslabs/amazon-kinesis-client", "language": "Java", "is_fork": false, "fork_count": 373, "stargazer_count": 504, "size": 2381, "license": "licensed"}}