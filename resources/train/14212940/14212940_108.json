{"test_class": {"identifier": "PeriodicShardSyncManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StreamIdentifier streamIdentifier;", "modifier": "private", "type": "StreamIdentifier", "declarator": "streamIdentifier", "var_name": "streamIdentifier"}, {"original_string": "private PeriodicShardSyncManager periodicShardSyncManager;", "modifier": "private", "type": "PeriodicShardSyncManager", "declarator": "periodicShardSyncManager", "var_name": "periodicShardSyncManager"}, {"original_string": "@Mock\n    private LeaderDecider leaderDecider;", "modifier": "@Mock\n    private", "type": "LeaderDecider", "declarator": "leaderDecider", "var_name": "leaderDecider"}, {"original_string": "@Mock\n    private LeaseRefresher leaseRefresher;", "modifier": "@Mock\n    private", "type": "LeaseRefresher", "declarator": "leaseRefresher", "var_name": "leaseRefresher"}, {"original_string": "@Mock\n    Map<StreamIdentifier, StreamConfig> currentStreamConfigMap;", "modifier": "@Mock", "type": "Map<StreamIdentifier, StreamConfig>", "declarator": "currentStreamConfigMap", "var_name": "currentStreamConfigMap"}, {"original_string": "@Mock\n    Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider;", "modifier": "@Mock", "type": "Function<StreamConfig, ShardSyncTaskManager>", "declarator": "shardSyncTaskManagerProvider", "var_name": "shardSyncTaskManagerProvider"}], "file": "amazon-kinesis-client/src/test/java/software/amazon/kinesis/coordinator/PeriodicShardSyncManagerTest.java"}, "test_case": {"identifier": "testFor1000DifferentValidReshardHierarchyTreeTheHashRangesAreAlwaysComplete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFor1000DifferentValidReshardHierarchyTreeTheHashRangesAreAlwaysComplete() {\n        for (int i = 0; i < 1000; i++) {\n            int maxInitialLeaseCount = 100;\n            List<Lease> leases = generateInitialLeases(maxInitialLeaseCount);\n            reshard(leases, 5, ReshardType.ANY, maxInitialLeaseCount, false);\n            Collections.shuffle(leases);\n            Assert.assertFalse(periodicShardSyncManager.hasHoleInLeases(streamIdentifier, leases).isPresent());\n        }\n    }", "signature": "void testFor1000DifferentValidReshardHierarchyTreeTheHashRangesAreAlwaysComplete()", "full_signature": "@Test public void testFor1000DifferentValidReshardHierarchyTreeTheHashRangesAreAlwaysComplete()", "class_method_signature": "PeriodicShardSyncManagerTest.testFor1000DifferentValidReshardHierarchyTreeTheHashRangesAreAlwaysComplete()", "testcase": true, "constructor": false, "invocations": ["generateInitialLeases", "reshard", "shuffle", "assertFalse", "isPresent", "hasHoleInLeases"]}, "focal_class": {"identifier": "PeriodicShardSyncManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long INITIAL_DELAY = 60 * 1000L;", "modifier": "private static final", "type": "long", "declarator": "INITIAL_DELAY = 60 * 1000L", "var_name": "INITIAL_DELAY"}, {"original_string": "@VisibleForTesting\n    static final BigInteger MIN_HASH_KEY = BigInteger.ZERO;", "modifier": "@VisibleForTesting\n    static final", "type": "BigInteger", "declarator": "MIN_HASH_KEY = BigInteger.ZERO", "var_name": "MIN_HASH_KEY"}, {"original_string": "@VisibleForTesting\n    static final BigInteger MAX_HASH_KEY = new BigInteger(\"2\").pow(128).subtract(BigInteger.ONE);", "modifier": "@VisibleForTesting\n    static final", "type": "BigInteger", "declarator": "MAX_HASH_KEY = new BigInteger(\"2\").pow(128).subtract(BigInteger.ONE)", "var_name": "MAX_HASH_KEY"}, {"original_string": "static final String PERIODIC_SHARD_SYNC_MANAGER = \"PeriodicShardSyncManager\";", "modifier": "static final", "type": "String", "declarator": "PERIODIC_SHARD_SYNC_MANAGER = \"PeriodicShardSyncManager\"", "var_name": "PERIODIC_SHARD_SYNC_MANAGER"}, {"original_string": "private Map<StreamIdentifier, HashRangeHoleTracker> hashRangeHoleTrackerMap = new HashMap<>();", "modifier": "private", "type": "Map<StreamIdentifier, HashRangeHoleTracker>", "declarator": "hashRangeHoleTrackerMap = new HashMap<>()", "var_name": "hashRangeHoleTrackerMap"}, {"original_string": "private final String workerId;", "modifier": "private final", "type": "String", "declarator": "workerId", "var_name": "workerId"}, {"original_string": "private final LeaderDecider leaderDecider;", "modifier": "private final", "type": "LeaderDecider", "declarator": "leaderDecider", "var_name": "leaderDecider"}, {"original_string": "private final LeaseRefresher leaseRefresher;", "modifier": "private final", "type": "LeaseRefresher", "declarator": "leaseRefresher", "var_name": "leaseRefresher"}, {"original_string": "private final Map<StreamIdentifier, StreamConfig> currentStreamConfigMap;", "modifier": "private final", "type": "Map<StreamIdentifier, StreamConfig>", "declarator": "currentStreamConfigMap", "var_name": "currentStreamConfigMap"}, {"original_string": "private final Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider;", "modifier": "private final", "type": "Function<StreamConfig, ShardSyncTaskManager>", "declarator": "shardSyncTaskManagerProvider", "var_name": "shardSyncTaskManagerProvider"}, {"original_string": "private final ScheduledExecutorService shardSyncThreadPool;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "shardSyncThreadPool", "var_name": "shardSyncThreadPool"}, {"original_string": "private final boolean isMultiStreamingMode;", "modifier": "private final", "type": "boolean", "declarator": "isMultiStreamingMode", "var_name": "isMultiStreamingMode"}, {"original_string": "private final MetricsFactory metricsFactory;", "modifier": "private final", "type": "MetricsFactory", "declarator": "metricsFactory", "var_name": "metricsFactory"}, {"original_string": "private final long leasesRecoveryAuditorExecutionFrequencyMillis;", "modifier": "private final", "type": "long", "declarator": "leasesRecoveryAuditorExecutionFrequencyMillis", "var_name": "leasesRecoveryAuditorExecutionFrequencyMillis"}, {"original_string": "private final int leasesRecoveryAuditorInconsistencyConfidenceThreshold;", "modifier": "private final", "type": "int", "declarator": "leasesRecoveryAuditorInconsistencyConfidenceThreshold", "var_name": "leasesRecoveryAuditorInconsistencyConfidenceThreshold"}, {"original_string": "private boolean isRunning;", "modifier": "private", "type": "boolean", "declarator": "isRunning", "var_name": "isRunning"}], "methods": [{"identifier": "PeriodicShardSyncManager", "parameters": "(String workerId, LeaderDecider leaderDecider, LeaseRefresher leaseRefresher,\n            Map<StreamIdentifier, StreamConfig> currentStreamConfigMap,\n            Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider, boolean isMultiStreamingMode,\n            MetricsFactory metricsFactory,\n            long leasesRecoveryAuditorExecutionFrequencyMillis,\n            int leasesRecoveryAuditorInconsistencyConfidenceThreshold)", "modifiers": "", "return": "", "signature": " PeriodicShardSyncManager(String workerId, LeaderDecider leaderDecider, LeaseRefresher leaseRefresher,\n            Map<StreamIdentifier, StreamConfig> currentStreamConfigMap,\n            Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider, boolean isMultiStreamingMode,\n            MetricsFactory metricsFactory,\n            long leasesRecoveryAuditorExecutionFrequencyMillis,\n            int leasesRecoveryAuditorInconsistencyConfidenceThreshold)", "full_signature": "  PeriodicShardSyncManager(String workerId, LeaderDecider leaderDecider, LeaseRefresher leaseRefresher,\n            Map<StreamIdentifier, StreamConfig> currentStreamConfigMap,\n            Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider, boolean isMultiStreamingMode,\n            MetricsFactory metricsFactory,\n            long leasesRecoveryAuditorExecutionFrequencyMillis,\n            int leasesRecoveryAuditorInconsistencyConfidenceThreshold)", "class_method_signature": "PeriodicShardSyncManager.PeriodicShardSyncManager(String workerId, LeaderDecider leaderDecider, LeaseRefresher leaseRefresher,\n            Map<StreamIdentifier, StreamConfig> currentStreamConfigMap,\n            Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider, boolean isMultiStreamingMode,\n            MetricsFactory metricsFactory,\n            long leasesRecoveryAuditorExecutionFrequencyMillis,\n            int leasesRecoveryAuditorInconsistencyConfidenceThreshold)", "testcase": false, "constructor": true}, {"identifier": "PeriodicShardSyncManager", "parameters": "(String workerId, LeaderDecider leaderDecider, LeaseRefresher leaseRefresher,\n            Map<StreamIdentifier, StreamConfig> currentStreamConfigMap,\n            Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider,\n            ScheduledExecutorService shardSyncThreadPool, boolean isMultiStreamingMode,\n            MetricsFactory metricsFactory,\n            long leasesRecoveryAuditorExecutionFrequencyMillis,\n            int leasesRecoveryAuditorInconsistencyConfidenceThreshold)", "modifiers": "", "return": "", "signature": " PeriodicShardSyncManager(String workerId, LeaderDecider leaderDecider, LeaseRefresher leaseRefresher,\n            Map<StreamIdentifier, StreamConfig> currentStreamConfigMap,\n            Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider,\n            ScheduledExecutorService shardSyncThreadPool, boolean isMultiStreamingMode,\n            MetricsFactory metricsFactory,\n            long leasesRecoveryAuditorExecutionFrequencyMillis,\n            int leasesRecoveryAuditorInconsistencyConfidenceThreshold)", "full_signature": "  PeriodicShardSyncManager(String workerId, LeaderDecider leaderDecider, LeaseRefresher leaseRefresher,\n            Map<StreamIdentifier, StreamConfig> currentStreamConfigMap,\n            Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider,\n            ScheduledExecutorService shardSyncThreadPool, boolean isMultiStreamingMode,\n            MetricsFactory metricsFactory,\n            long leasesRecoveryAuditorExecutionFrequencyMillis,\n            int leasesRecoveryAuditorInconsistencyConfidenceThreshold)", "class_method_signature": "PeriodicShardSyncManager.PeriodicShardSyncManager(String workerId, LeaderDecider leaderDecider, LeaseRefresher leaseRefresher,\n            Map<StreamIdentifier, StreamConfig> currentStreamConfigMap,\n            Function<StreamConfig, ShardSyncTaskManager> shardSyncTaskManagerProvider,\n            ScheduledExecutorService shardSyncThreadPool, boolean isMultiStreamingMode,\n            MetricsFactory metricsFactory,\n            long leasesRecoveryAuditorExecutionFrequencyMillis,\n            int leasesRecoveryAuditorInconsistencyConfidenceThreshold)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public synchronized", "return": "TaskResult", "signature": "TaskResult start()", "full_signature": "public synchronized TaskResult start()", "class_method_signature": "PeriodicShardSyncManager.start()", "testcase": false, "constructor": false}, {"identifier": "syncShardsOnce", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void syncShardsOnce()", "full_signature": "public synchronized void syncShardsOnce()", "class_method_signature": "PeriodicShardSyncManager.syncShardsOnce()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "PeriodicShardSyncManager.stop()", "testcase": false, "constructor": false}, {"identifier": "runShardSync", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void runShardSync()", "full_signature": "private void runShardSync()", "class_method_signature": "PeriodicShardSyncManager.runShardSync()", "testcase": false, "constructor": false}, {"identifier": "getStreamToLeasesMap", "parameters": "(\n            final Set<StreamIdentifier> streamIdentifiersToFilter)", "modifiers": "private", "return": "Map<StreamIdentifier, List<Lease>>", "signature": "Map<StreamIdentifier, List<Lease>> getStreamToLeasesMap(\n            final Set<StreamIdentifier> streamIdentifiersToFilter)", "full_signature": "private Map<StreamIdentifier, List<Lease>> getStreamToLeasesMap(\n            final Set<StreamIdentifier> streamIdentifiersToFilter)", "class_method_signature": "PeriodicShardSyncManager.getStreamToLeasesMap(\n            final Set<StreamIdentifier> streamIdentifiersToFilter)", "testcase": false, "constructor": false}, {"identifier": "checkForShardSync", "parameters": "(StreamIdentifier streamIdentifier, List<Lease> leases)", "modifiers": "@VisibleForTesting", "return": "ShardSyncResponse", "signature": "ShardSyncResponse checkForShardSync(StreamIdentifier streamIdentifier, List<Lease> leases)", "full_signature": "@VisibleForTesting ShardSyncResponse checkForShardSync(StreamIdentifier streamIdentifier, List<Lease> leases)", "class_method_signature": "PeriodicShardSyncManager.checkForShardSync(StreamIdentifier streamIdentifier, List<Lease> leases)", "testcase": false, "constructor": false}, {"identifier": "hasHoleInLeases", "parameters": "(StreamIdentifier streamIdentifier, List<Lease> leases)", "modifiers": "@VisibleForTesting", "return": "Optional<HashRangeHole>", "signature": "Optional<HashRangeHole> hasHoleInLeases(StreamIdentifier streamIdentifier, List<Lease> leases)", "full_signature": "@VisibleForTesting Optional<HashRangeHole> hasHoleInLeases(StreamIdentifier streamIdentifier, List<Lease> leases)", "class_method_signature": "PeriodicShardSyncManager.hasHoleInLeases(StreamIdentifier streamIdentifier, List<Lease> leases)", "testcase": false, "constructor": false}, {"identifier": "fillWithHashRangesIfRequired", "parameters": "(StreamIdentifier streamIdentifier, List<Lease> activeLeases)", "modifiers": "private", "return": "List<Lease>", "signature": "List<Lease> fillWithHashRangesIfRequired(StreamIdentifier streamIdentifier, List<Lease> activeLeases)", "full_signature": "private List<Lease> fillWithHashRangesIfRequired(StreamIdentifier streamIdentifier, List<Lease> activeLeases)", "class_method_signature": "PeriodicShardSyncManager.fillWithHashRangesIfRequired(StreamIdentifier streamIdentifier, List<Lease> activeLeases)", "testcase": false, "constructor": false}, {"identifier": "checkForHoleInHashKeyRanges", "parameters": "(StreamIdentifier streamIdentifier,\n            List<Lease> leasesWithHashKeyRanges)", "modifiers": "@VisibleForTesting static", "return": "Optional<HashRangeHole>", "signature": "Optional<HashRangeHole> checkForHoleInHashKeyRanges(StreamIdentifier streamIdentifier,\n            List<Lease> leasesWithHashKeyRanges)", "full_signature": "@VisibleForTesting static Optional<HashRangeHole> checkForHoleInHashKeyRanges(StreamIdentifier streamIdentifier,\n            List<Lease> leasesWithHashKeyRanges)", "class_method_signature": "PeriodicShardSyncManager.checkForHoleInHashKeyRanges(StreamIdentifier streamIdentifier,\n            List<Lease> leasesWithHashKeyRanges)", "testcase": false, "constructor": false}, {"identifier": "sortLeasesByHashRange", "parameters": "(List<Lease> leasesWithHashKeyRanges)", "modifiers": "@VisibleForTesting static", "return": "List<Lease>", "signature": "List<Lease> sortLeasesByHashRange(List<Lease> leasesWithHashKeyRanges)", "full_signature": "@VisibleForTesting static List<Lease> sortLeasesByHashRange(List<Lease> leasesWithHashKeyRanges)", "class_method_signature": "PeriodicShardSyncManager.sortLeasesByHashRange(List<Lease> leasesWithHashKeyRanges)", "testcase": false, "constructor": false}], "file": "amazon-kinesis-client/src/main/java/software/amazon/kinesis/coordinator/PeriodicShardSyncManager.java"}, "focal_method": {"identifier": "hasHoleInLeases", "parameters": "(StreamIdentifier streamIdentifier, List<Lease> leases)", "modifiers": "@VisibleForTesting", "return": "Optional<HashRangeHole>", "body": "@VisibleForTesting\n    Optional<HashRangeHole> hasHoleInLeases(StreamIdentifier streamIdentifier, List<Lease> leases) {\n        // Filter the leases with any checkpoint other than shard end.\n        List<Lease> activeLeases = leases.stream()\n                .filter(lease -> lease.checkpoint() != null && !lease.checkpoint().isShardEnd()).collect(Collectors.toList());\n        List<Lease> activeLeasesWithHashRanges = fillWithHashRangesIfRequired(streamIdentifier, activeLeases);\n        return checkForHoleInHashKeyRanges(streamIdentifier, activeLeasesWithHashRanges);\n    }", "signature": "Optional<HashRangeHole> hasHoleInLeases(StreamIdentifier streamIdentifier, List<Lease> leases)", "full_signature": "@VisibleForTesting Optional<HashRangeHole> hasHoleInLeases(StreamIdentifier streamIdentifier, List<Lease> leases)", "class_method_signature": "PeriodicShardSyncManager.hasHoleInLeases(StreamIdentifier streamIdentifier, List<Lease> leases)", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "stream", "checkpoint", "isShardEnd", "checkpoint", "toList", "fillWithHashRangesIfRequired", "checkForHoleInHashKeyRanges"]}, "repository": {"repo_id": 14212940, "url": "https://github.com/awslabs/amazon-kinesis-client", "language": "Java", "is_fork": false, "fork_count": 373, "stargazer_count": 504, "size": 2381, "license": "licensed"}}