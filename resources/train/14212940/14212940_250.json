{"test_class": {"identifier": "FanoutConfigBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private KinesisAsyncClient kinesisAsyncClient;", "modifier": "@Mock\n    private", "type": "KinesisAsyncClient", "declarator": "kinesisAsyncClient", "var_name": "kinesisAsyncClient"}], "file": "amazon-kinesis-client-multilang/src/test/java/software/amazon/kinesis/multilang/config/FanoutConfigBeanTest.java"}, "test_case": {"identifier": "testAllConfigurationTransits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAllConfigurationTransits() {\n        FanoutConfigBean fanoutConfigBean = new FanoutConfigBean();\n        fanoutConfigBean.setConsumerArn(\"consumer-arn\");\n        fanoutConfigBean.setConsumerName(\"consumer-name\");\n        fanoutConfigBean.setMaxDescribeStreamConsumerRetries(10);\n        fanoutConfigBean.setMaxDescribeStreamSummaryRetries(20);\n        fanoutConfigBean.setRegisterStreamConsumerRetries(30);\n        fanoutConfigBean.setRetryBackoffMillis(1000);\n\n        ConvertUtilsBean convertUtilsBean = new ConvertUtilsBean();\n        BeanUtilsBean utilsBean = new BeanUtilsBean(convertUtilsBean);\n\n        MultiLangDaemonConfiguration configuration = new MultiLangDaemonConfiguration(utilsBean, convertUtilsBean);\n        configuration.setStreamName(\"test-stream\");\n        configuration.setApplicationName(\"test-application\");\n        FanOutConfig fanOutConfig =fanoutConfigBean.build(kinesisAsyncClient, configuration);\n\n        assertThat(fanOutConfig.kinesisClient(), equalTo(kinesisAsyncClient));\n        assertThat(fanOutConfig.streamName(), equalTo(configuration.getStreamName()));\n        assertThat(fanOutConfig.applicationName(), equalTo(configuration.getApplicationName()));\n        assertThat(fanOutConfig.consumerArn(), equalTo(fanoutConfigBean.getConsumerArn()));\n        assertThat(fanOutConfig.consumerName(), equalTo(fanoutConfigBean.getConsumerName()));\n        assertThat(fanOutConfig.maxDescribeStreamConsumerRetries(), equalTo(fanoutConfigBean.getMaxDescribeStreamConsumerRetries()));\n        assertThat(fanOutConfig.maxDescribeStreamSummaryRetries(), equalTo(fanoutConfigBean.getMaxDescribeStreamSummaryRetries()));\n        assertThat(fanOutConfig.registerStreamConsumerRetries(), equalTo(fanoutConfigBean.getRegisterStreamConsumerRetries()));\n        assertThat(fanOutConfig.retryBackoffMillis(), equalTo(fanoutConfigBean.getRetryBackoffMillis()));\n\n    }", "signature": "void testAllConfigurationTransits()", "full_signature": "@Test public void testAllConfigurationTransits()", "class_method_signature": "FanoutConfigBeanTest.testAllConfigurationTransits()", "testcase": true, "constructor": false, "invocations": ["setConsumerArn", "setConsumerName", "setMaxDescribeStreamConsumerRetries", "setMaxDescribeStreamSummaryRetries", "setRegisterStreamConsumerRetries", "setRetryBackoffMillis", "setStreamName", "setApplicationName", "build", "assertThat", "kinesisClient", "equalTo", "assertThat", "streamName", "equalTo", "getStreamName", "assertThat", "applicationName", "equalTo", "getApplicationName", "assertThat", "consumerArn", "equalTo", "getConsumerArn", "assertThat", "consumerName", "equalTo", "getConsumerName", "assertThat", "maxDescribeStreamConsumerRetries", "equalTo", "getMaxDescribeStreamConsumerRetries", "assertThat", "maxDescribeStreamSummaryRetries", "equalTo", "getMaxDescribeStreamSummaryRetries", "assertThat", "registerStreamConsumerRetries", "equalTo", "getRegisterStreamConsumerRetries", "assertThat", "retryBackoffMillis", "equalTo", "getRetryBackoffMillis"]}, "focal_class": {"identifier": "FanoutConfigBean", "superclass": "", "interfaces": "implements RetrievalConfigBuilder", "fields": [{"original_string": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private int maxDescribeStreamSummaryRetries;", "modifier": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private", "type": "int", "declarator": "maxDescribeStreamSummaryRetries", "var_name": "maxDescribeStreamSummaryRetries"}, {"original_string": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private String consumerArn;", "modifier": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private", "type": "String", "declarator": "consumerArn", "var_name": "consumerArn"}, {"original_string": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private String consumerName;", "modifier": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private", "type": "String", "declarator": "consumerName", "var_name": "consumerName"}, {"original_string": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private int maxDescribeStreamConsumerRetries;", "modifier": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private", "type": "int", "declarator": "maxDescribeStreamConsumerRetries", "var_name": "maxDescribeStreamConsumerRetries"}, {"original_string": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private int registerStreamConsumerRetries;", "modifier": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private", "type": "int", "declarator": "registerStreamConsumerRetries", "var_name": "registerStreamConsumerRetries"}, {"original_string": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private long retryBackoffMillis;", "modifier": "@ConfigurationSettable(configurationClass = FanOutConfig.class)\n    private", "type": "long", "declarator": "retryBackoffMillis", "var_name": "retryBackoffMillis"}], "methods": [{"identifier": "build", "parameters": "(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent)", "modifiers": "@Override public", "return": "FanOutConfig", "signature": "FanOutConfig build(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent)", "full_signature": "@Override public FanOutConfig build(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent)", "class_method_signature": "FanoutConfigBean.build(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent)", "testcase": false, "constructor": false}], "file": "amazon-kinesis-client-multilang/src/main/java/software/amazon/kinesis/multilang/config/FanoutConfigBean.java"}, "focal_method": {"identifier": "build", "parameters": "(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent)", "modifiers": "@Override public", "return": "FanOutConfig", "body": "@Override\n    public FanOutConfig build(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent) {\n        return ConfigurationSettableUtils.resolveFields(this, new FanOutConfig(kinesisAsyncClient).applicationName(parent.getApplicationName())\n                .streamName(parent.getStreamName()));\n    }", "signature": "FanOutConfig build(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent)", "full_signature": "@Override public FanOutConfig build(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent)", "class_method_signature": "FanoutConfigBean.build(KinesisAsyncClient kinesisAsyncClient, MultiLangDaemonConfiguration parent)", "testcase": false, "constructor": false, "invocations": ["resolveFields", "streamName", "applicationName", "getApplicationName", "getStreamName"]}, "repository": {"repo_id": 14212940, "url": "https://github.com/awslabs/amazon-kinesis-client", "language": "Java", "is_fork": false, "fork_count": 373, "stargazer_count": 504, "size": 2381, "license": "licensed"}}