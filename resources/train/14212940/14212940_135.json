{"test_class": {"identifier": "ShutdownTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TASK_BACKOFF_TIME_MILLIS = 1L;", "modifier": "private static final", "type": "long", "declarator": "TASK_BACKOFF_TIME_MILLIS = 1L", "var_name": "TASK_BACKOFF_TIME_MILLIS"}, {"original_string": "private static final InitialPositionInStreamExtended INITIAL_POSITION_TRIM_HORIZON =\n            InitialPositionInStreamExtended.newInitialPosition(InitialPositionInStream.TRIM_HORIZON);", "modifier": "private static final", "type": "InitialPositionInStreamExtended", "declarator": "INITIAL_POSITION_TRIM_HORIZON =\n            InitialPositionInStreamExtended.newInitialPosition(InitialPositionInStream.TRIM_HORIZON)", "var_name": "INITIAL_POSITION_TRIM_HORIZON"}, {"original_string": "private static final ShutdownReason SHARD_END_SHUTDOWN_REASON = ShutdownReason.SHARD_END;", "modifier": "private static final", "type": "ShutdownReason", "declarator": "SHARD_END_SHUTDOWN_REASON = ShutdownReason.SHARD_END", "var_name": "SHARD_END_SHUTDOWN_REASON"}, {"original_string": "private static final ShutdownReason LEASE_LOST_SHUTDOWN_REASON  = ShutdownReason.LEASE_LOST;", "modifier": "private static final", "type": "ShutdownReason", "declarator": "LEASE_LOST_SHUTDOWN_REASON  = ShutdownReason.LEASE_LOST", "var_name": "LEASE_LOST_SHUTDOWN_REASON"}, {"original_string": "private static final MetricsFactory NULL_METRICS_FACTORY = new NullMetricsFactory();", "modifier": "private static final", "type": "MetricsFactory", "declarator": "NULL_METRICS_FACTORY = new NullMetricsFactory()", "var_name": "NULL_METRICS_FACTORY"}, {"original_string": "private final String concurrencyToken = \"0-1-2-3-4\";", "modifier": "private final", "type": "String", "declarator": "concurrencyToken = \"0-1-2-3-4\"", "var_name": "concurrencyToken"}, {"original_string": "private final String shardId = \"shardId-0\";", "modifier": "private final", "type": "String", "declarator": "shardId = \"shardId-0\"", "var_name": "shardId"}, {"original_string": "private boolean cleanupLeasesOfCompletedShards = false;", "modifier": "private", "type": "boolean", "declarator": "cleanupLeasesOfCompletedShards = false", "var_name": "cleanupLeasesOfCompletedShards"}, {"original_string": "private boolean ignoreUnexpectedChildShards = false;", "modifier": "private", "type": "boolean", "declarator": "ignoreUnexpectedChildShards = false", "var_name": "ignoreUnexpectedChildShards"}, {"original_string": "private ShardInfo shardInfo;", "modifier": "private", "type": "ShardInfo", "declarator": "shardInfo", "var_name": "shardInfo"}, {"original_string": "private ShutdownTask task;", "modifier": "private", "type": "ShutdownTask", "declarator": "task", "var_name": "task"}, {"original_string": "private StreamIdentifier streamIdentifier = StreamIdentifier.singleStreamInstance(\"streamName\");", "modifier": "private", "type": "StreamIdentifier", "declarator": "streamIdentifier = StreamIdentifier.singleStreamInstance(\"streamName\")", "var_name": "streamIdentifier"}, {"original_string": "@Mock\n    private RecordsPublisher recordsPublisher;", "modifier": "@Mock\n    private", "type": "RecordsPublisher", "declarator": "recordsPublisher", "var_name": "recordsPublisher"}, {"original_string": "@Mock\n    private ShardRecordProcessorCheckpointer recordProcessorCheckpointer;", "modifier": "@Mock\n    private", "type": "ShardRecordProcessorCheckpointer", "declarator": "recordProcessorCheckpointer", "var_name": "recordProcessorCheckpointer"}, {"original_string": "@Mock\n    private Checkpointer checkpointer;", "modifier": "@Mock\n    private", "type": "Checkpointer", "declarator": "checkpointer", "var_name": "checkpointer"}, {"original_string": "@Mock\n    private LeaseRefresher leaseRefresher;", "modifier": "@Mock\n    private", "type": "LeaseRefresher", "declarator": "leaseRefresher", "var_name": "leaseRefresher"}, {"original_string": "@Mock\n    private LeaseCoordinator leaseCoordinator;", "modifier": "@Mock\n    private", "type": "LeaseCoordinator", "declarator": "leaseCoordinator", "var_name": "leaseCoordinator"}, {"original_string": "@Mock\n    private ShardDetector shardDetector;", "modifier": "@Mock\n    private", "type": "ShardDetector", "declarator": "shardDetector", "var_name": "shardDetector"}, {"original_string": "@Mock\n    private HierarchicalShardSyncer hierarchicalShardSyncer;", "modifier": "@Mock\n    private", "type": "HierarchicalShardSyncer", "declarator": "hierarchicalShardSyncer", "var_name": "hierarchicalShardSyncer"}, {"original_string": "@Mock\n    private ShardRecordProcessor shardRecordProcessor;", "modifier": "@Mock\n    private", "type": "ShardRecordProcessor", "declarator": "shardRecordProcessor", "var_name": "shardRecordProcessor"}, {"original_string": "@Mock\n    private LeaseCleanupManager leaseCleanupManager;", "modifier": "@Mock\n    private", "type": "LeaseCleanupManager", "declarator": "leaseCleanupManager", "var_name": "leaseCleanupManager"}], "file": "amazon-kinesis-client/src/test/java/software/amazon/kinesis/lifecycle/ShutdownTaskTest.java"}, "test_case": {"identifier": "testCallWhenApplicationDoesNotCheckpoint", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testCallWhenApplicationDoesNotCheckpoint() throws Exception {\n        when(recordProcessorCheckpointer.lastCheckpointValue()).thenReturn(new ExtendedSequenceNumber(\"3298\"));\n        Lease heldLease = LeaseHelper.createLease(\"shardId-0\", \"leaseOwner\", Collections.singleton(\"parentShardId\"), Collections.emptyList(), ExtendedSequenceNumber.LATEST);\n        when(leaseCoordinator.getCurrentlyHeldLease(\"shardId-0\")).thenReturn(heldLease);\n        when(leaseRefresher.getLease(\"shardId-0\")).thenReturn(heldLease);\n        when(leaseCoordinator.leaseRefresher()).thenReturn(leaseRefresher);\n        when(leaseCoordinator.updateLease(Matchers.any(Lease.class), Matchers.any(UUID.class), Matchers.anyString(), Matchers.anyString())).thenReturn(true);\n\n        final TaskResult result = task.call();\n        assertNotNull(result.getException());\n        assertTrue(result.getException() instanceof CustomerApplicationException);\n    }", "signature": "void testCallWhenApplicationDoesNotCheckpoint()", "full_signature": "@Test public final void testCallWhenApplicationDoesNotCheckpoint()", "class_method_signature": "ShutdownTaskTest.testCallWhenApplicationDoesNotCheckpoint()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "lastCheckpointValue", "createLease", "singleton", "emptyList", "thenReturn", "when", "getCurrentlyHeldLease", "thenReturn", "when", "getLease", "thenReturn", "when", "leaseRefresher", "thenReturn", "when", "updateLease", "any", "any", "anyString", "anyString", "call", "assertNotNull", "getException", "assertTrue", "getException"]}, "focal_class": {"identifier": "ShutdownTask", "superclass": "", "interfaces": "implements ConsumerTask", "fields": [{"original_string": "private static final String SHUTDOWN_TASK_OPERATION = \"ShutdownTask\";", "modifier": "private static final", "type": "String", "declarator": "SHUTDOWN_TASK_OPERATION = \"ShutdownTask\"", "var_name": "SHUTDOWN_TASK_OPERATION"}, {"original_string": "private static final String RECORD_PROCESSOR_SHUTDOWN_METRIC = \"RecordProcessor.shutdown\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_PROCESSOR_SHUTDOWN_METRIC = \"RecordProcessor.shutdown\"", "var_name": "RECORD_PROCESSOR_SHUTDOWN_METRIC"}, {"original_string": "@VisibleForTesting\n    static final int RETRY_RANDOM_MAX_RANGE = 30;", "modifier": "@VisibleForTesting\n    static final", "type": "int", "declarator": "RETRY_RANDOM_MAX_RANGE = 30", "var_name": "RETRY_RANDOM_MAX_RANGE"}, {"original_string": "@NonNull\n    private final ShardInfo shardInfo;", "modifier": "@NonNull\n    private final", "type": "ShardInfo", "declarator": "shardInfo", "var_name": "shardInfo"}, {"original_string": "@NonNull\n    private final ShardDetector shardDetector;", "modifier": "@NonNull\n    private final", "type": "ShardDetector", "declarator": "shardDetector", "var_name": "shardDetector"}, {"original_string": "@NonNull\n    private final ShardRecordProcessor shardRecordProcessor;", "modifier": "@NonNull\n    private final", "type": "ShardRecordProcessor", "declarator": "shardRecordProcessor", "var_name": "shardRecordProcessor"}, {"original_string": "@NonNull\n    private final ShardRecordProcessorCheckpointer recordProcessorCheckpointer;", "modifier": "@NonNull\n    private final", "type": "ShardRecordProcessorCheckpointer", "declarator": "recordProcessorCheckpointer", "var_name": "recordProcessorCheckpointer"}, {"original_string": "@NonNull\n    private final ShutdownReason reason;", "modifier": "@NonNull\n    private final", "type": "ShutdownReason", "declarator": "reason", "var_name": "reason"}, {"original_string": "@NonNull\n    private final InitialPositionInStreamExtended initialPositionInStream;", "modifier": "@NonNull\n    private final", "type": "InitialPositionInStreamExtended", "declarator": "initialPositionInStream", "var_name": "initialPositionInStream"}, {"original_string": "private final boolean cleanupLeasesOfCompletedShards;", "modifier": "private final", "type": "boolean", "declarator": "cleanupLeasesOfCompletedShards", "var_name": "cleanupLeasesOfCompletedShards"}, {"original_string": "private final boolean ignoreUnexpectedChildShards;", "modifier": "private final", "type": "boolean", "declarator": "ignoreUnexpectedChildShards", "var_name": "ignoreUnexpectedChildShards"}, {"original_string": "@NonNull\n    private final LeaseCoordinator leaseCoordinator;", "modifier": "@NonNull\n    private final", "type": "LeaseCoordinator", "declarator": "leaseCoordinator", "var_name": "leaseCoordinator"}, {"original_string": "private final long backoffTimeMillis;", "modifier": "private final", "type": "long", "declarator": "backoffTimeMillis", "var_name": "backoffTimeMillis"}, {"original_string": "@NonNull\n    private final RecordsPublisher recordsPublisher;", "modifier": "@NonNull\n    private final", "type": "RecordsPublisher", "declarator": "recordsPublisher", "var_name": "recordsPublisher"}, {"original_string": "@NonNull\n    private final HierarchicalShardSyncer hierarchicalShardSyncer;", "modifier": "@NonNull\n    private final", "type": "HierarchicalShardSyncer", "declarator": "hierarchicalShardSyncer", "var_name": "hierarchicalShardSyncer"}, {"original_string": "@NonNull\n    private final MetricsFactory metricsFactory;", "modifier": "@NonNull\n    private final", "type": "MetricsFactory", "declarator": "metricsFactory", "var_name": "metricsFactory"}, {"original_string": "private final TaskType taskType = TaskType.SHUTDOWN;", "modifier": "private final", "type": "TaskType", "declarator": "taskType = TaskType.SHUTDOWN", "var_name": "taskType"}, {"original_string": "private final List<ChildShard> childShards;", "modifier": "private final", "type": "List<ChildShard>", "declarator": "childShards", "var_name": "childShards"}, {"original_string": "@NonNull\n    private final StreamIdentifier streamIdentifier;", "modifier": "@NonNull\n    private final", "type": "StreamIdentifier", "declarator": "streamIdentifier", "var_name": "streamIdentifier"}, {"original_string": "@NonNull\n    private final LeaseCleanupManager leaseCleanupManager;", "modifier": "@NonNull\n    private final", "type": "LeaseCleanupManager", "declarator": "leaseCleanupManager", "var_name": "leaseCleanupManager"}, {"original_string": "private static final Function<ShardInfo, String> leaseKeyProvider = shardInfo -> ShardInfo.getLeaseKey(shardInfo);", "modifier": "private static final", "type": "Function<ShardInfo, String>", "declarator": "leaseKeyProvider = shardInfo -> ShardInfo.getLeaseKey(shardInfo)", "var_name": "leaseKeyProvider"}], "methods": [{"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "TaskResult", "signature": "TaskResult call()", "full_signature": "@Override public TaskResult call()", "class_method_signature": "ShutdownTask.call()", "testcase": false, "constructor": false}, {"identifier": "takeShardEndAction", "parameters": "(Lease currentShardLease,\n            MetricsScope scope, long startTime)", "modifiers": "private", "return": "void", "signature": "void takeShardEndAction(Lease currentShardLease,\n            MetricsScope scope, long startTime)", "full_signature": "private void takeShardEndAction(Lease currentShardLease,\n            MetricsScope scope, long startTime)", "class_method_signature": "ShutdownTask.takeShardEndAction(Lease currentShardLease,\n            MetricsScope scope, long startTime)", "testcase": false, "constructor": false}, {"identifier": "attemptShardEndCheckpointing", "parameters": "(MetricsScope scope, long startTime)", "modifiers": "private", "return": "boolean", "signature": "boolean attemptShardEndCheckpointing(MetricsScope scope, long startTime)", "full_signature": "private boolean attemptShardEndCheckpointing(MetricsScope scope, long startTime)", "class_method_signature": "ShutdownTask.attemptShardEndCheckpointing(MetricsScope scope, long startTime)", "testcase": false, "constructor": false}, {"identifier": "applicationCheckpointAndVerification", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void applicationCheckpointAndVerification()", "full_signature": "private void applicationCheckpointAndVerification()", "class_method_signature": "ShutdownTask.applicationCheckpointAndVerification()", "testcase": false, "constructor": false}, {"identifier": "throwOnApplicationException", "parameters": "(Runnable action, MetricsScope metricsScope, final long startTime)", "modifiers": "private", "return": "void", "signature": "void throwOnApplicationException(Runnable action, MetricsScope metricsScope, final long startTime)", "full_signature": "private void throwOnApplicationException(Runnable action, MetricsScope metricsScope, final long startTime)", "class_method_signature": "ShutdownTask.throwOnApplicationException(Runnable action, MetricsScope metricsScope, final long startTime)", "testcase": false, "constructor": false}, {"identifier": "createLeasesForChildShardsIfNotExist", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createLeasesForChildShardsIfNotExist()", "full_signature": "private void createLeasesForChildShardsIfNotExist()", "class_method_signature": "ShutdownTask.createLeasesForChildShardsIfNotExist()", "testcase": false, "constructor": false}, {"identifier": "isOneInNProbability", "parameters": "(int n)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isOneInNProbability(int n)", "full_signature": "@VisibleForTesting boolean isOneInNProbability(int n)", "class_method_signature": "ShutdownTask.isOneInNProbability(int n)", "testcase": false, "constructor": false}, {"identifier": "updateLeaseWithChildShards", "parameters": "(Lease currentLease)", "modifiers": "private", "return": "void", "signature": "void updateLeaseWithChildShards(Lease currentLease)", "full_signature": "private void updateLeaseWithChildShards(Lease currentLease)", "class_method_signature": "ShutdownTask.updateLeaseWithChildShards(Lease currentLease)", "testcase": false, "constructor": false}, {"identifier": "taskType", "parameters": "()", "modifiers": "@Override public", "return": "TaskType", "signature": "TaskType taskType()", "full_signature": "@Override public TaskType taskType()", "class_method_signature": "ShutdownTask.taskType()", "testcase": false, "constructor": false}, {"identifier": "getReason", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "ShutdownReason", "signature": "ShutdownReason getReason()", "full_signature": "@VisibleForTesting public ShutdownReason getReason()", "class_method_signature": "ShutdownTask.getReason()", "testcase": false, "constructor": false}, {"identifier": "dropLease", "parameters": "(Lease currentLease)", "modifiers": "private", "return": "void", "signature": "void dropLease(Lease currentLease)", "full_signature": "private void dropLease(Lease currentLease)", "class_method_signature": "ShutdownTask.dropLease(Lease currentLease)", "testcase": false, "constructor": false}], "file": "amazon-kinesis-client/src/main/java/software/amazon/kinesis/lifecycle/ShutdownTask.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "TaskResult", "body": "@Override\n    public TaskResult call() {\n        recordProcessorCheckpointer.checkpointer().operation(SHUTDOWN_TASK_OPERATION);\n        final MetricsScope scope = MetricsUtil.createMetricsWithOperation(metricsFactory, SHUTDOWN_TASK_OPERATION);\n\n        Exception exception;\n\n        try {\n            try {\n                log.debug(\"Invoking shutdown() for shard {} with childShards {}, concurrencyToken {}. Shutdown reason: {}\",\n                        leaseKeyProvider.apply(shardInfo), childShards, shardInfo.concurrencyToken(), reason);\n\n                final long startTime = System.currentTimeMillis();\n                final Lease currentShardLease = leaseCoordinator.getCurrentlyHeldLease(leaseKeyProvider.apply(shardInfo));\n                final Runnable leaseLostAction = () -> shardRecordProcessor.leaseLost(LeaseLostInput.builder().build());\n\n                if (reason == ShutdownReason.SHARD_END) {\n                    try {\n                        takeShardEndAction(currentShardLease, scope, startTime);\n                    } catch (InvalidStateException e) {\n                        // If InvalidStateException happens, it indicates we have a non recoverable error in short term.\n                        // In this scenario, we should shutdown the shardConsumer with LEASE_LOST reason to allow other worker to take the lease and retry shutting down.\n                        log.warn(\"Lease {}: Invalid state encountered while shutting down shardConsumer with SHARD_END reason. \" +\n                                \"Dropping the lease and shutting down shardConsumer using LEASE_LOST reason. \", leaseKeyProvider.apply(shardInfo), e);\n                        dropLease(currentShardLease);\n                        throwOnApplicationException(leaseLostAction, scope, startTime);\n                    }\n                } else {\n                    throwOnApplicationException(leaseLostAction, scope, startTime);\n                }\n\n                log.debug(\"Shutting down retrieval strategy for shard {}.\", leaseKeyProvider.apply(shardInfo));\n                recordsPublisher.shutdown();\n                log.debug(\"Record processor completed shutdown() for shard {}\", leaseKeyProvider.apply(shardInfo));\n\n                return new TaskResult(null);\n            } catch (Exception e) {\n                if (e instanceof CustomerApplicationException) {\n                    log.error(\"Shard {}: Application exception. \", leaseKeyProvider.apply(shardInfo), e);\n                } else {\n                    log.error(\"Shard {}: Caught exception: \", leaseKeyProvider.apply(shardInfo), e);\n                }\n                exception = e;\n                // backoff if we encounter an exception.\n                try {\n                    Thread.sleep(this.backoffTimeMillis);\n                } catch (InterruptedException ie) {\n                    log.debug(\"Shard {}: Interrupted sleep\", leaseKeyProvider.apply(shardInfo), ie);\n                }\n            }\n        } finally {\n            MetricsUtil.endScope(scope);\n        }\n\n        return new TaskResult(exception);\n    }", "signature": "TaskResult call()", "full_signature": "@Override public TaskResult call()", "class_method_signature": "ShutdownTask.call()", "testcase": false, "constructor": false, "invocations": ["operation", "checkpointer", "createMetricsWithOperation", "debug", "apply", "concurrencyToken", "currentTimeMillis", "getCurrentlyHeldLease", "apply", "leaseLost", "build", "builder", "takeShardEndAction", "warn", "apply", "dropLease", "throwOnApplicationException", "throwOnApplicationException", "debug", "apply", "shutdown", "debug", "apply", "error", "apply", "error", "apply", "sleep", "debug", "apply", "endScope"]}, "repository": {"repo_id": 14212940, "url": "https://github.com/awslabs/amazon-kinesis-client", "language": "Java", "is_fork": false, "fork_count": 373, "stargazer_count": 504, "size": 2381, "license": "licensed"}}