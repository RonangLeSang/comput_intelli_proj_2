{"test_class": {"identifier": "DynamoDBLeaseRefresherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TABLE_NAME = \"test\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_NAME = \"test\"", "var_name": "TABLE_NAME"}, {"original_string": "private static final boolean CONSISTENT_READS = true;", "modifier": "private static final", "type": "boolean", "declarator": "CONSISTENT_READS = true", "var_name": "CONSISTENT_READS"}, {"original_string": "@Mock\n    private DynamoDbAsyncClient dynamoDbClient;", "modifier": "@Mock\n    private", "type": "DynamoDbAsyncClient", "declarator": "dynamoDbClient", "var_name": "dynamoDbClient"}, {"original_string": "@Mock\n    private LeaseSerializer leaseSerializer;", "modifier": "@Mock\n    private", "type": "LeaseSerializer", "declarator": "leaseSerializer", "var_name": "leaseSerializer"}, {"original_string": "@Mock\n    private TableCreatorCallback tableCreatorCallback;", "modifier": "@Mock\n    private", "type": "TableCreatorCallback", "declarator": "tableCreatorCallback", "var_name": "tableCreatorCallback"}, {"original_string": "@Mock\n    private CompletableFuture<ScanResponse> mockScanFuture;", "modifier": "@Mock\n    private", "type": "CompletableFuture<ScanResponse>", "declarator": "mockScanFuture", "var_name": "mockScanFuture"}, {"original_string": "@Mock\n    private CompletableFuture<PutItemResponse> mockPutItemFuture;", "modifier": "@Mock\n    private", "type": "CompletableFuture<PutItemResponse>", "declarator": "mockPutItemFuture", "var_name": "mockPutItemFuture"}, {"original_string": "@Mock\n    private CompletableFuture<GetItemResponse> mockGetItemFuture;", "modifier": "@Mock\n    private", "type": "CompletableFuture<GetItemResponse>", "declarator": "mockGetItemFuture", "var_name": "mockGetItemFuture"}, {"original_string": "@Mock\n    private CompletableFuture<UpdateItemResponse> mockUpdateFuture;", "modifier": "@Mock\n    private", "type": "CompletableFuture<UpdateItemResponse>", "declarator": "mockUpdateFuture", "var_name": "mockUpdateFuture"}, {"original_string": "@Mock\n    private CompletableFuture<DeleteItemResponse> mockDeleteFuture;", "modifier": "@Mock\n    private", "type": "CompletableFuture<DeleteItemResponse>", "declarator": "mockDeleteFuture", "var_name": "mockDeleteFuture"}, {"original_string": "@Mock\n    private CompletableFuture<DescribeTableResponse> mockDescribeTableFuture;", "modifier": "@Mock\n    private", "type": "CompletableFuture<DescribeTableResponse>", "declarator": "mockDescribeTableFuture", "var_name": "mockDescribeTableFuture"}, {"original_string": "@Mock\n    private CompletableFuture<CreateTableResponse> mockCreateTableFuture;", "modifier": "@Mock\n    private", "type": "CompletableFuture<CreateTableResponse>", "declarator": "mockCreateTableFuture", "var_name": "mockCreateTableFuture"}, {"original_string": "@Mock\n    private Lease lease;", "modifier": "@Mock\n    private", "type": "Lease", "declarator": "lease", "var_name": "lease"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private DynamoDBLeaseRefresher leaseRefresher;", "modifier": "private", "type": "DynamoDBLeaseRefresher", "declarator": "leaseRefresher", "var_name": "leaseRefresher"}, {"original_string": "private Map<String, AttributeValue> serializedLease;", "modifier": "private", "type": "Map<String, AttributeValue>", "declarator": "serializedLease", "var_name": "serializedLease"}], "file": "amazon-kinesis-client/src/test/java/software/amazon/kinesis/leases/dynamodb/DynamoDBLeaseRefresherTest.java"}, "test_case": {"identifier": "testTakeLeaseTimesOut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTakeLeaseTimesOut() throws Exception {\n        setupUpdateItemTest();\n        verifyCancel(mockUpdateFuture, () -> leaseRefresher.takeLease(lease, \"owner\"));\n    }", "signature": "void testTakeLeaseTimesOut()", "full_signature": "@Test public void testTakeLeaseTimesOut()", "class_method_signature": "DynamoDBLeaseRefresherTest.testTakeLeaseTimesOut()", "testcase": true, "constructor": false, "invocations": ["setupUpdateItemTest", "verifyCancel", "takeLease"]}, "focal_class": {"identifier": "DynamoDBLeaseRefresher", "superclass": "", "interfaces": "implements LeaseRefresher", "fields": [{"original_string": "protected final String table;", "modifier": "protected final", "type": "String", "declarator": "table", "var_name": "table"}, {"original_string": "protected final DynamoDbAsyncClient dynamoDBClient;", "modifier": "protected final", "type": "DynamoDbAsyncClient", "declarator": "dynamoDBClient", "var_name": "dynamoDBClient"}, {"original_string": "protected final LeaseSerializer serializer;", "modifier": "protected final", "type": "LeaseSerializer", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "protected final boolean consistentReads;", "modifier": "protected final", "type": "boolean", "declarator": "consistentReads", "var_name": "consistentReads"}, {"original_string": "private final TableCreatorCallback tableCreatorCallback;", "modifier": "private final", "type": "TableCreatorCallback", "declarator": "tableCreatorCallback", "var_name": "tableCreatorCallback"}, {"original_string": "private final Duration dynamoDbRequestTimeout;", "modifier": "private final", "type": "Duration", "declarator": "dynamoDbRequestTimeout", "var_name": "dynamoDbRequestTimeout"}, {"original_string": "private final BillingMode billingMode;", "modifier": "private final", "type": "BillingMode", "declarator": "billingMode", "var_name": "billingMode"}, {"original_string": "private boolean newTableCreated = false;", "modifier": "private", "type": "boolean", "declarator": "newTableCreated = false", "var_name": "newTableCreated"}, {"original_string": "private static final String STREAM_NAME = \"streamName\";", "modifier": "private static final", "type": "String", "declarator": "STREAM_NAME = \"streamName\"", "var_name": "STREAM_NAME"}, {"original_string": "private static final String DDB_STREAM_NAME = \":streamName\";", "modifier": "private static final", "type": "String", "declarator": "DDB_STREAM_NAME = \":streamName\"", "var_name": "DDB_STREAM_NAME"}], "methods": [{"identifier": "DynamoDBLeaseRefresher", "parameters": "(final String table, final DynamoDbAsyncClient dynamoDBClient,\n            final LeaseSerializer serializer, final boolean consistentReads)", "modifiers": "@Deprecated public", "return": "", "signature": " DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n            final LeaseSerializer serializer, final boolean consistentReads)", "full_signature": "@Deprecated public  DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n            final LeaseSerializer serializer, final boolean consistentReads)", "class_method_signature": "DynamoDBLeaseRefresher.DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n            final LeaseSerializer serializer, final boolean consistentReads)", "testcase": false, "constructor": true}, {"identifier": "DynamoDBLeaseRefresher", "parameters": "(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback)", "modifiers": "@Deprecated public", "return": "", "signature": " DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback)", "full_signature": "@Deprecated public  DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback)", "class_method_signature": "DynamoDBLeaseRefresher.DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback)", "testcase": false, "constructor": true}, {"identifier": "DynamoDBLeaseRefresher", "parameters": "(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback, Duration dynamoDbRequestTimeout)", "modifiers": "@Deprecated public", "return": "", "signature": " DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback, Duration dynamoDbRequestTimeout)", "full_signature": "@Deprecated public  DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback, Duration dynamoDbRequestTimeout)", "class_method_signature": "DynamoDBLeaseRefresher.DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback, Duration dynamoDbRequestTimeout)", "testcase": false, "constructor": true}, {"identifier": "DynamoDBLeaseRefresher", "parameters": "(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback, Duration dynamoDbRequestTimeout,\n                                  final BillingMode billingMode)", "modifiers": "public", "return": "", "signature": " DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback, Duration dynamoDbRequestTimeout,\n                                  final BillingMode billingMode)", "full_signature": "public  DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback, Duration dynamoDbRequestTimeout,\n                                  final BillingMode billingMode)", "class_method_signature": "DynamoDBLeaseRefresher.DynamoDBLeaseRefresher(final String table, final DynamoDbAsyncClient dynamoDBClient,\n                                  final LeaseSerializer serializer, final boolean consistentReads,\n                                  @NonNull final TableCreatorCallback tableCreatorCallback, Duration dynamoDbRequestTimeout,\n                                  final BillingMode billingMode)", "testcase": false, "constructor": true}, {"identifier": "createLeaseTableIfNotExists", "parameters": "(@NonNull final Long readCapacity, @NonNull final Long writeCapacity)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean createLeaseTableIfNotExists(@NonNull final Long readCapacity, @NonNull final Long writeCapacity)", "full_signature": "@Override public boolean createLeaseTableIfNotExists(@NonNull final Long readCapacity, @NonNull final Long writeCapacity)", "class_method_signature": "DynamoDBLeaseRefresher.createLeaseTableIfNotExists(@NonNull final Long readCapacity, @NonNull final Long writeCapacity)", "testcase": false, "constructor": false}, {"identifier": "leaseTableExists", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean leaseTableExists()", "full_signature": "@Override public boolean leaseTableExists()", "class_method_signature": "DynamoDBLeaseRefresher.leaseTableExists()", "testcase": false, "constructor": false}, {"identifier": "tableStatus", "parameters": "()", "modifiers": "private", "return": "TableStatus", "signature": "TableStatus tableStatus()", "full_signature": "private TableStatus tableStatus()", "class_method_signature": "DynamoDBLeaseRefresher.tableStatus()", "testcase": false, "constructor": false}, {"identifier": "waitUntilLeaseTableExists", "parameters": "(long secondsBetweenPolls, long timeoutSeconds)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean waitUntilLeaseTableExists(long secondsBetweenPolls, long timeoutSeconds)", "full_signature": "@Override public boolean waitUntilLeaseTableExists(long secondsBetweenPolls, long timeoutSeconds)", "class_method_signature": "DynamoDBLeaseRefresher.waitUntilLeaseTableExists(long secondsBetweenPolls, long timeoutSeconds)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(long timeToSleepMillis)", "modifiers": "", "return": "long", "signature": "long sleep(long timeToSleepMillis)", "full_signature": " long sleep(long timeToSleepMillis)", "class_method_signature": "DynamoDBLeaseRefresher.sleep(long timeToSleepMillis)", "testcase": false, "constructor": false}, {"identifier": "listLeasesForStream", "parameters": "(StreamIdentifier streamIdentifier)", "modifiers": "@Override public", "return": "List<Lease>", "signature": "List<Lease> listLeasesForStream(StreamIdentifier streamIdentifier)", "full_signature": "@Override public List<Lease> listLeasesForStream(StreamIdentifier streamIdentifier)", "class_method_signature": "DynamoDBLeaseRefresher.listLeasesForStream(StreamIdentifier streamIdentifier)", "testcase": false, "constructor": false}, {"identifier": "listLeases", "parameters": "()", "modifiers": "@Override public", "return": "List<Lease>", "signature": "List<Lease> listLeases()", "full_signature": "@Override public List<Lease> listLeases()", "class_method_signature": "DynamoDBLeaseRefresher.listLeases()", "testcase": false, "constructor": false}, {"identifier": "isLeaseTableEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLeaseTableEmpty()", "full_signature": "@Override public boolean isLeaseTableEmpty()", "class_method_signature": "DynamoDBLeaseRefresher.isLeaseTableEmpty()", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Integer limit, StreamIdentifier streamIdentifier)", "modifiers": "", "return": "List<Lease>", "signature": "List<Lease> list(Integer limit, StreamIdentifier streamIdentifier)", "full_signature": " List<Lease> list(Integer limit, StreamIdentifier streamIdentifier)", "class_method_signature": "DynamoDBLeaseRefresher.list(Integer limit, StreamIdentifier streamIdentifier)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Integer limit, Integer maxPages, StreamIdentifier streamIdentifier)", "modifiers": "private", "return": "List<Lease>", "signature": "List<Lease> list(Integer limit, Integer maxPages, StreamIdentifier streamIdentifier)", "full_signature": "private List<Lease> list(Integer limit, Integer maxPages, StreamIdentifier streamIdentifier)", "class_method_signature": "DynamoDBLeaseRefresher.list(Integer limit, Integer maxPages, StreamIdentifier streamIdentifier)", "testcase": false, "constructor": false}, {"identifier": "createLeaseIfNotExists", "parameters": "(@NonNull final Lease lease)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean createLeaseIfNotExists(@NonNull final Lease lease)", "full_signature": "@Override public boolean createLeaseIfNotExists(@NonNull final Lease lease)", "class_method_signature": "DynamoDBLeaseRefresher.createLeaseIfNotExists(@NonNull final Lease lease)", "testcase": false, "constructor": false}, {"identifier": "getLease", "parameters": "(@NonNull final String leaseKey)", "modifiers": "@Override public", "return": "Lease", "signature": "Lease getLease(@NonNull final String leaseKey)", "full_signature": "@Override public Lease getLease(@NonNull final String leaseKey)", "class_method_signature": "DynamoDBLeaseRefresher.getLease(@NonNull final String leaseKey)", "testcase": false, "constructor": false}, {"identifier": "renewLease", "parameters": "(@NonNull final Lease lease)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean renewLease(@NonNull final Lease lease)", "full_signature": "@Override public boolean renewLease(@NonNull final Lease lease)", "class_method_signature": "DynamoDBLeaseRefresher.renewLease(@NonNull final Lease lease)", "testcase": false, "constructor": false}, {"identifier": "takeLease", "parameters": "(@NonNull final Lease lease, @NonNull final String owner)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean takeLease(@NonNull final Lease lease, @NonNull final String owner)", "full_signature": "@Override public boolean takeLease(@NonNull final Lease lease, @NonNull final String owner)", "class_method_signature": "DynamoDBLeaseRefresher.takeLease(@NonNull final Lease lease, @NonNull final String owner)", "testcase": false, "constructor": false}, {"identifier": "evictLease", "parameters": "(@NonNull final Lease lease)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evictLease(@NonNull final Lease lease)", "full_signature": "@Override public boolean evictLease(@NonNull final Lease lease)", "class_method_signature": "DynamoDBLeaseRefresher.evictLease(@NonNull final Lease lease)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteAll()", "full_signature": "public void deleteAll()", "class_method_signature": "DynamoDBLeaseRefresher.deleteAll()", "testcase": false, "constructor": false}, {"identifier": "deleteLease", "parameters": "(@NonNull final Lease lease)", "modifiers": "@Override public", "return": "void", "signature": "void deleteLease(@NonNull final Lease lease)", "full_signature": "@Override public void deleteLease(@NonNull final Lease lease)", "class_method_signature": "DynamoDBLeaseRefresher.deleteLease(@NonNull final Lease lease)", "testcase": false, "constructor": false}, {"identifier": "updateLease", "parameters": "(@NonNull final Lease lease)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateLease(@NonNull final Lease lease)", "full_signature": "@Override public boolean updateLease(@NonNull final Lease lease)", "class_method_signature": "DynamoDBLeaseRefresher.updateLease(@NonNull final Lease lease)", "testcase": false, "constructor": false}, {"identifier": "updateLeaseWithMetaInfo", "parameters": "(Lease lease, UpdateField updateField)", "modifiers": "@Override public", "return": "void", "signature": "void updateLeaseWithMetaInfo(Lease lease, UpdateField updateField)", "full_signature": "@Override public void updateLeaseWithMetaInfo(Lease lease, UpdateField updateField)", "class_method_signature": "DynamoDBLeaseRefresher.updateLeaseWithMetaInfo(Lease lease, UpdateField updateField)", "testcase": false, "constructor": false}, {"identifier": "getCheckpoint", "parameters": "(String leaseKey)", "modifiers": "@Override public", "return": "ExtendedSequenceNumber", "signature": "ExtendedSequenceNumber getCheckpoint(String leaseKey)", "full_signature": "@Override public ExtendedSequenceNumber getCheckpoint(String leaseKey)", "class_method_signature": "DynamoDBLeaseRefresher.getCheckpoint(String leaseKey)", "testcase": false, "constructor": false}, {"identifier": "convertAndRethrowExceptions", "parameters": "(String operation, String leaseKey, Exception e)", "modifiers": "protected", "return": "DependencyException", "signature": "DependencyException convertAndRethrowExceptions(String operation, String leaseKey, Exception e)", "full_signature": "protected DependencyException convertAndRethrowExceptions(String operation, String leaseKey, Exception e)", "class_method_signature": "DynamoDBLeaseRefresher.convertAndRethrowExceptions(String operation, String leaseKey, Exception e)", "testcase": false, "constructor": false}, {"identifier": "createExceptionManager", "parameters": "()", "modifiers": "private", "return": "AWSExceptionManager", "signature": "AWSExceptionManager createExceptionManager()", "full_signature": "private AWSExceptionManager createExceptionManager()", "class_method_signature": "DynamoDBLeaseRefresher.createExceptionManager()", "testcase": false, "constructor": false}, {"identifier": "performPostTableCreationAction", "parameters": "()", "modifiers": "", "return": "void", "signature": "void performPostTableCreationAction()", "full_signature": " void performPostTableCreationAction()", "class_method_signature": "DynamoDBLeaseRefresher.performPostTableCreationAction()", "testcase": false, "constructor": false}], "file": "amazon-kinesis-client/src/main/java/software/amazon/kinesis/leases/dynamodb/DynamoDBLeaseRefresher.java"}, "focal_method": {"identifier": "takeLease", "parameters": "(@NonNull final Lease lease, @NonNull final String owner)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean takeLease(@NonNull final Lease lease, @NonNull final String owner)\n            throws DependencyException, InvalidStateException, ProvisionedThroughputException {\n        final String oldOwner = lease.leaseOwner();\n\n        log.debug(\"Taking lease with leaseKey {} from {} to {}\", lease.leaseKey(),\n                lease.leaseOwner() == null ? \"nobody\" : lease.leaseOwner(), owner);\n\n        final AWSExceptionManager exceptionManager = createExceptionManager();\n        exceptionManager.add(ConditionalCheckFailedException.class, t -> t);\n\n        Map<String, AttributeValueUpdate> updates = serializer.getDynamoLeaseCounterUpdate(lease);\n        updates.putAll(serializer.getDynamoTakeLeaseUpdate(lease, owner));\n\n        UpdateItemRequest request = UpdateItemRequest.builder().tableName(table).key(serializer.getDynamoHashKey(lease))\n                .expected(serializer.getDynamoLeaseCounterExpectation(lease)).attributeUpdates(updates).build();\n\n        try {\n            try {\n                FutureUtils.resolveOrCancelFuture(dynamoDBClient.updateItem(request), dynamoDbRequestTimeout);\n            } catch (ExecutionException e) {\n                throw exceptionManager.apply(e.getCause());\n            } catch (InterruptedException e) {\n                // TODO: Check behavior\n                throw new DependencyException(e);\n            }\n        } catch (ConditionalCheckFailedException e) {\n            log.debug(\"Lease renewal failed for lease with key {} because the lease counter was not {}\",\n                    lease.leaseKey(), lease.leaseCounter());\n            return false;\n        } catch (DynamoDbException | TimeoutException e) {\n            throw convertAndRethrowExceptions(\"take\", lease.leaseKey(), e);\n        }\n\n        lease.leaseCounter(lease.leaseCounter() + 1);\n        lease.leaseOwner(owner);\n\n        if (oldOwner != null && !oldOwner.equals(owner)) {\n            lease.ownerSwitchesSinceCheckpoint(lease.ownerSwitchesSinceCheckpoint() + 1);\n        }\n\n        return true;\n    }", "signature": "boolean takeLease(@NonNull final Lease lease, @NonNull final String owner)", "full_signature": "@Override public boolean takeLease(@NonNull final Lease lease, @NonNull final String owner)", "class_method_signature": "DynamoDBLeaseRefresher.takeLease(@NonNull final Lease lease, @NonNull final String owner)", "testcase": false, "constructor": false, "invocations": ["leaseOwner", "debug", "leaseKey", "leaseOwner", "leaseOwner", "createExceptionManager", "add", "getDynamoLeaseCounterUpdate", "putAll", "getDynamoTakeLeaseUpdate", "build", "attributeUpdates", "expected", "key", "tableName", "builder", "getDynamoHashKey", "getDynamoLeaseCounterExpectation", "resolveOrCancelFuture", "updateItem", "apply", "getCause", "debug", "leaseKey", "leaseCounter", "convertAndRethrowExceptions", "leaseKey", "leaseCounter", "leaseCounter", "leaseOwner", "equals", "ownerSwitchesSinceCheckpoint", "ownerSwitchesSinceCheckpoint"]}, "repository": {"repo_id": 14212940, "url": "https://github.com/awslabs/amazon-kinesis-client", "language": "Java", "is_fork": false, "fork_count": 373, "stargazer_count": 504, "size": 2381, "license": "licensed"}}