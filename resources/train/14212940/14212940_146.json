{"test_class": {"identifier": "ShardConsumerSubscriberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Object processedNotifier = new Object();", "modifier": "private final", "type": "Object", "declarator": "processedNotifier = new Object()", "var_name": "processedNotifier"}, {"original_string": "private static final String TERMINAL_MARKER = \"Terminal\";", "modifier": "private static final", "type": "String", "declarator": "TERMINAL_MARKER = \"Terminal\"", "var_name": "TERMINAL_MARKER"}, {"original_string": "private final RequestDetails lastSuccessfulRequestDetails = new RequestDetails();", "modifier": "private final", "type": "RequestDetails", "declarator": "lastSuccessfulRequestDetails = new RequestDetails()", "var_name": "lastSuccessfulRequestDetails"}, {"original_string": "@Mock\n    private ShardConsumer shardConsumer;", "modifier": "@Mock\n    private", "type": "ShardConsumer", "declarator": "shardConsumer", "var_name": "shardConsumer"}, {"original_string": "@Mock\n    private RecordsRetrieved recordsRetrieved;", "modifier": "@Mock\n    private", "type": "RecordsRetrieved", "declarator": "recordsRetrieved", "var_name": "recordsRetrieved"}, {"original_string": "private ProcessRecordsInput processRecordsInput;", "modifier": "private", "type": "ProcessRecordsInput", "declarator": "processRecordsInput", "var_name": "processRecordsInput"}, {"original_string": "private TestPublisher recordsPublisher;", "modifier": "private", "type": "TestPublisher", "declarator": "recordsPublisher", "var_name": "recordsPublisher"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private int bufferSize = 8;", "modifier": "private", "type": "int", "declarator": "bufferSize = 8", "var_name": "bufferSize"}, {"original_string": "private ShardConsumerSubscriber subscriber;", "modifier": "private", "type": "ShardConsumerSubscriber", "declarator": "subscriber", "var_name": "subscriber"}, {"original_string": "@Rule\n    public TestName testName = new TestName();", "modifier": "@Rule\n    public", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}], "file": "amazon-kinesis-client/src/test/java/software/amazon/kinesis/lifecycle/ShardConsumerSubscriberTest.java"}, "test_case": {"identifier": "loggingNotSuppressedOnNonReadTimeoutExceptionIgnoringReadTimeoutsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loggingNotSuppressedOnNonReadTimeoutExceptionIgnoringReadTimeoutsTest() {\n\n        // We're not throwing a ReadTimeout, so no suppression is expected.\n        // The test expects a non-ReadTimeout exception to be thrown on requests 3 and 5, and we expect logs on\n        // each Non-ReadTimeout Exception, no matter what the number of ReadTimeoutsToIgnore we pass in,\n        // in this case if we had instead thrown ReadTimeouts, we would not have expected any logs with this\n        // configuration.\n        Exception exceptionToThrow = new RuntimeException(\"Uh oh Not a ReadTimeout\");\n\n        // Setup test expectations\n        int readTimeoutsToIgnore = 2;\n        int expectedReadTimeoutLogs = 0;\n        int expectedGenericLogs = 2;\n        TestShardConsumerSubscriber consumer = new TestShardConsumerSubscriber(mock(RecordsPublisher.class),\n                Executors.newFixedThreadPool(1), 8, shardConsumer, readTimeoutsToIgnore);\n        consumer.startSubscriptions();\n        mimicSuccess(consumer);\n        mimicSuccess(consumer);\n        mimicException(exceptionToThrow, consumer);\n        mimicSuccess(consumer);\n        mimicException(exceptionToThrow, consumer);\n        assertEquals(expectedGenericLogs, consumer.genericWarningLogged);\n        assertEquals(expectedReadTimeoutLogs, consumer.readTimeoutWarningLogged);\n    }", "signature": "void loggingNotSuppressedOnNonReadTimeoutExceptionIgnoringReadTimeoutsTest()", "full_signature": "@Test public void loggingNotSuppressedOnNonReadTimeoutExceptionIgnoringReadTimeoutsTest()", "class_method_signature": "ShardConsumerSubscriberTest.loggingNotSuppressedOnNonReadTimeoutExceptionIgnoringReadTimeoutsTest()", "testcase": true, "constructor": false, "invocations": ["mock", "newFixedThreadPool", "startSubscriptions", "mimicSuccess", "mimicSuccess", "mimicException", "mimicSuccess", "mimicException", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ShardConsumerSubscriber", "superclass": "", "interfaces": "implements Subscriber<RecordsRetrieved>", "fields": [{"original_string": "private final RecordsPublisher recordsPublisher;", "modifier": "private final", "type": "RecordsPublisher", "declarator": "recordsPublisher", "var_name": "recordsPublisher"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final int bufferSize;", "modifier": "private final", "type": "int", "declarator": "bufferSize", "var_name": "bufferSize"}, {"original_string": "private final ShardConsumer shardConsumer;", "modifier": "private final", "type": "ShardConsumer", "declarator": "shardConsumer", "var_name": "shardConsumer"}, {"original_string": "private final int readTimeoutsToIgnoreBeforeWarning;", "modifier": "private final", "type": "int", "declarator": "readTimeoutsToIgnoreBeforeWarning", "var_name": "readTimeoutsToIgnoreBeforeWarning"}, {"original_string": "private final String shardInfoId;", "modifier": "private final", "type": "String", "declarator": "shardInfoId", "var_name": "shardInfoId"}, {"original_string": "private volatile int readTimeoutSinceLastRead = 0;", "modifier": "private volatile", "type": "int", "declarator": "readTimeoutSinceLastRead = 0", "var_name": "readTimeoutSinceLastRead"}, {"original_string": "@VisibleForTesting\n    final Object lockObject = new Object();", "modifier": "@VisibleForTesting\n    final", "type": "Object", "declarator": "lockObject = new Object()", "var_name": "lockObject"}, {"original_string": "private Instant lastRequestTime = null;", "modifier": "private", "type": "Instant", "declarator": "lastRequestTime = null", "var_name": "lastRequestTime"}, {"original_string": "private RecordsRetrieved lastAccepted = null;", "modifier": "private", "type": "RecordsRetrieved", "declarator": "lastAccepted = null", "var_name": "lastAccepted"}, {"original_string": "private Subscription subscription;", "modifier": "private", "type": "Subscription", "declarator": "subscription", "var_name": "subscription"}, {"original_string": "@Getter\n    private volatile Instant lastDataArrival;", "modifier": "@Getter\n    private volatile", "type": "Instant", "declarator": "lastDataArrival", "var_name": "lastDataArrival"}, {"original_string": "@Getter\n    private volatile Throwable dispatchFailure;", "modifier": "@Getter\n    private volatile", "type": "Throwable", "declarator": "dispatchFailure", "var_name": "dispatchFailure"}, {"original_string": "@Getter(AccessLevel.PACKAGE)\n    private volatile Throwable retrievalFailure;", "modifier": "@Getter(AccessLevel.PACKAGE)\n    private volatile", "type": "Throwable", "declarator": "retrievalFailure", "var_name": "retrievalFailure"}], "methods": [{"identifier": "ShardConsumerSubscriber", "parameters": "(RecordsPublisher recordsPublisher, ExecutorService executorService, int bufferSize,\n                            ShardConsumer shardConsumer)", "modifiers": "@Deprecated", "return": "", "signature": " ShardConsumerSubscriber(RecordsPublisher recordsPublisher, ExecutorService executorService, int bufferSize,\n                            ShardConsumer shardConsumer)", "full_signature": "@Deprecated  ShardConsumerSubscriber(RecordsPublisher recordsPublisher, ExecutorService executorService, int bufferSize,\n                            ShardConsumer shardConsumer)", "class_method_signature": "ShardConsumerSubscriber.ShardConsumerSubscriber(RecordsPublisher recordsPublisher, ExecutorService executorService, int bufferSize,\n                            ShardConsumer shardConsumer)", "testcase": false, "constructor": true}, {"identifier": "ShardConsumerSubscriber", "parameters": "(RecordsPublisher recordsPublisher, ExecutorService executorService, int bufferSize,\n            ShardConsumer shardConsumer, int readTimeoutsToIgnoreBeforeWarning)", "modifiers": "", "return": "", "signature": " ShardConsumerSubscriber(RecordsPublisher recordsPublisher, ExecutorService executorService, int bufferSize,\n            ShardConsumer shardConsumer, int readTimeoutsToIgnoreBeforeWarning)", "full_signature": "  ShardConsumerSubscriber(RecordsPublisher recordsPublisher, ExecutorService executorService, int bufferSize,\n            ShardConsumer shardConsumer, int readTimeoutsToIgnoreBeforeWarning)", "class_method_signature": "ShardConsumerSubscriber.ShardConsumerSubscriber(RecordsPublisher recordsPublisher, ExecutorService executorService, int bufferSize,\n            ShardConsumer shardConsumer, int readTimeoutsToIgnoreBeforeWarning)", "testcase": false, "constructor": true}, {"identifier": "startSubscriptions", "parameters": "()", "modifiers": "", "return": "void", "signature": "void startSubscriptions()", "full_signature": " void startSubscriptions()", "class_method_signature": "ShardConsumerSubscriber.startSubscriptions()", "testcase": false, "constructor": false}, {"identifier": "healthCheck", "parameters": "(long maxTimeBetweenRequests)", "modifiers": "", "return": "Throwable", "signature": "Throwable healthCheck(long maxTimeBetweenRequests)", "full_signature": " Throwable healthCheck(long maxTimeBetweenRequests)", "class_method_signature": "ShardConsumerSubscriber.healthCheck(long maxTimeBetweenRequests)", "testcase": false, "constructor": false}, {"identifier": "getAndResetDispatchFailure", "parameters": "()", "modifiers": "", "return": "Throwable", "signature": "Throwable getAndResetDispatchFailure()", "full_signature": " Throwable getAndResetDispatchFailure()", "class_method_signature": "ShardConsumerSubscriber.getAndResetDispatchFailure()", "testcase": false, "constructor": false}, {"identifier": "restartIfFailed", "parameters": "()", "modifiers": "private", "return": "Throwable", "signature": "Throwable restartIfFailed()", "full_signature": "private Throwable restartIfFailed()", "class_method_signature": "ShardConsumerSubscriber.restartIfFailed()", "testcase": false, "constructor": false}, {"identifier": "restartIfRequestTimerExpired", "parameters": "(long maxTimeBetweenRequests)", "modifiers": "private", "return": "void", "signature": "void restartIfRequestTimerExpired(long maxTimeBetweenRequests)", "full_signature": "private void restartIfRequestTimerExpired(long maxTimeBetweenRequests)", "class_method_signature": "ShardConsumerSubscriber.restartIfRequestTimerExpired(long maxTimeBetweenRequests)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "ShardConsumerSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(RecordsRetrieved input)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(RecordsRetrieved input)", "full_signature": "@Override public void onNext(RecordsRetrieved input)", "class_method_signature": "ShardConsumerSubscriber.onNext(RecordsRetrieved input)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "ShardConsumerSubscriber.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "logOnErrorWarning", "parameters": "(Throwable t)", "modifiers": "protected", "return": "void", "signature": "void logOnErrorWarning(Throwable t)", "full_signature": "protected void logOnErrorWarning(Throwable t)", "class_method_signature": "ShardConsumerSubscriber.logOnErrorWarning(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "logOnErrorReadTimeoutWarning", "parameters": "(Throwable t)", "modifiers": "protected", "return": "void", "signature": "void logOnErrorReadTimeoutWarning(Throwable t)", "full_signature": "protected void logOnErrorReadTimeoutWarning(Throwable t)", "class_method_signature": "ShardConsumerSubscriber.logOnErrorReadTimeoutWarning(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "ShardConsumerSubscriber.onComplete()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancel()", "full_signature": "public void cancel()", "class_method_signature": "ShardConsumerSubscriber.cancel()", "testcase": false, "constructor": false}], "file": "amazon-kinesis-client/src/main/java/software/amazon/kinesis/lifecycle/ShardConsumerSubscriber.java"}, "focal_method": {"identifier": "startSubscriptions", "parameters": "()", "modifiers": "", "return": "void", "body": "void startSubscriptions() {\n        synchronized (lockObject) {\n            // Setting the lastRequestTime to allow for health checks to restart subscriptions if they failed to\n            // during initial try.\n            lastRequestTime = Instant.now();\n            if (lastAccepted != null) {\n                recordsPublisher.restartFrom(lastAccepted);\n            }\n            Flowable.fromPublisher(recordsPublisher).subscribeOn(scheduler).observeOn(scheduler, true, bufferSize)\n                    .subscribe(new ShardConsumerNotifyingSubscriber(this, recordsPublisher));\n        }\n    }", "signature": "void startSubscriptions()", "full_signature": " void startSubscriptions()", "class_method_signature": "ShardConsumerSubscriber.startSubscriptions()", "testcase": false, "constructor": false, "invocations": ["now", "restartFrom", "subscribe", "observeOn", "subscribeOn", "fromPublisher"]}, "repository": {"repo_id": 14212940, "url": "https://github.com/awslabs/amazon-kinesis-client", "language": "Java", "is_fork": false, "fork_count": 373, "stargazer_count": 504, "size": 2381, "license": "licensed"}}