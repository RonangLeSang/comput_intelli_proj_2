{"test_class": {"identifier": "PersonToAppointmentDataEvaluatorTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    AppointmentDataService appointmentDataService;", "modifier": "@Autowired", "type": "AppointmentDataService", "declarator": "appointmentDataService", "var_name": "appointmentDataService"}], "file": "api/src/test/java/org/openmrs/module/appointmentscheduling/reporting/data/evaluator/PersonToAppointmentDataEvaluatorTest.java"}, "test_case": {"identifier": "evaluate_shouldReturnPersonDataForNonConfidentialAppointments", "parameters": "()", "modifiers": "@Test @DirtiesContext public", "return": "void", "body": "@Test\n    @DirtiesContext\n    public void evaluate_shouldReturnPersonDataForNonConfidentialAppointments() throws Exception {\n        Context.becomeUser(\"butch\");\n\n        PersonToAppointmentDataDefinition d = new PersonToAppointmentDataDefinition(new BirthdateDataDefinition());\n\n        AppointmentEvaluationContext context = new AppointmentEvaluationContext();\n        context.setBaseAppointments(new AppointmentIdSet(2, 4));\n        EvaluatedAppointmentData ed = Context.getService(AppointmentDataService.class).evaluate(d, context);\n\n        Assert.assertEquals(1, ed.getData().size());\n        BirthdateConverter c = new BirthdateConverter(\"yyyy-MM-dd\");\n        Assert.assertEquals(\"1948-01-01\", c.convert(ed.getData().get(4)));\n//        Assert.assertEquals(\"1975-04-08\", c.convert(ed.getData().get(2)));\n\n    }", "signature": "void evaluate_shouldReturnPersonDataForNonConfidentialAppointments()", "full_signature": "@Test @DirtiesContext public void evaluate_shouldReturnPersonDataForNonConfidentialAppointments()", "class_method_signature": "PersonToAppointmentDataEvaluatorTest.evaluate_shouldReturnPersonDataForNonConfidentialAppointments()", "testcase": true, "constructor": false, "invocations": ["becomeUser", "setBaseAppointments", "evaluate", "getService", "assertEquals", "size", "getData", "assertEquals", "convert", "get", "getData"]}, "focal_class": {"identifier": "PersonToAppointmentDataEvaluator", "superclass": "", "interfaces": "implements AppointmentDataEvaluator", "fields": [{"original_string": "@Autowired\n    EvaluationService evaluationService;", "modifier": "@Autowired", "type": "EvaluationService", "declarator": "evaluationService", "var_name": "evaluationService"}], "methods": [{"identifier": "evaluate", "parameters": "(AppointmentDataDefinition definition, EvaluationContext context)", "modifiers": "@Override public", "return": "EvaluatedAppointmentData", "signature": "EvaluatedAppointmentData evaluate(AppointmentDataDefinition definition, EvaluationContext context)", "full_signature": "@Override public EvaluatedAppointmentData evaluate(AppointmentDataDefinition definition, EvaluationContext context)", "class_method_signature": "PersonToAppointmentDataEvaluator.evaluate(AppointmentDataDefinition definition, EvaluationContext context)", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/openmrs/module/appointmentscheduling/reporting/data/evaluator/PersonToAppointmentDataEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(AppointmentDataDefinition definition, EvaluationContext context)", "modifiers": "@Override public", "return": "EvaluatedAppointmentData", "body": "@Override\n    public EvaluatedAppointmentData evaluate(AppointmentDataDefinition definition, EvaluationContext context) throws EvaluationException {\n\n        EvaluatedAppointmentData evaluatedAppointmentData = new EvaluatedAppointmentData(definition,context);\n\n        // create a map of appointment ids -> patient (person) ids\n        HqlQueryBuilder q = new HqlQueryBuilder();\n        q.select(\"a.appointmentId\", \"a.patient.patientId\");\n        q.from(Appointment.class, \"a\");\n\n        if (context != null) {\n            Set<Integer> appointmentIds = AppointmentDataUtil.getAppointmentIdsForContext(context, true);\n            q.whereIn(\"a.appointmentId\", appointmentIds);\n        }\n\n        Map<Integer, Integer> convertedIds = evaluationService.evaluateToMap(q, Integer.class, Integer.class, context);\n\n        if (!Context.hasPrivilege(AppointmentSchedulingConstants.PRIVILEGE_VIEW_CONFIDENTIAL_APPOINTMENT_DETAILS)) {\n            // build a map of appointment ids to whether it is confidential\n            HqlQueryBuilder confidentialQuery = new HqlQueryBuilder();\n            confidentialQuery.select(\"a.appointmentId\", \"case a.appointmentType.confidential when 0 then false else true end\");\n            confidentialQuery.from(Appointment.class, \"a\");\n\n            if (context != null) {\n                Set<Integer> appointmentIds = AppointmentDataUtil.getAppointmentIdsForContext(context, true);\n                confidentialQuery.whereIn(\"a.appointmentId\", appointmentIds);\n            }\n\n            // remove confidential ones\n            Map<Integer, Boolean> confidentialMap = evaluationService.evaluateToMap(confidentialQuery, Integer.class, Boolean.class, context);\n            for (Iterator<Map.Entry<Integer, Integer>> iterator = convertedIds.entrySet().iterator(); iterator.hasNext(); ) {\n                Map.Entry<Integer, Integer> entry = iterator.next();\n                Integer appointmentId = entry.getKey();\n                if (confidentialMap.get(appointmentId)) {\n                    iterator.remove();\n                }\n            }\n        }\n\n        if (!convertedIds.keySet().isEmpty()) {\n            // create a new Person evaluation context using the retrieved ids\n            PersonEvaluationContext personEvaluationContext = new PersonEvaluationContext();\n            personEvaluationContext.setBaseCohort(new Cohort(convertedIds.values()));\n            personEvaluationContext.setBasePersons(new PersonIdSet(new HashSet<Integer>(convertedIds.values())));\n\n            // evaluate the joined definition via this person context\n            PersonToAppointmentDataDefinition def = (PersonToAppointmentDataDefinition) definition;\n            EvaluatedPersonData pd = Context.getService(PersonDataService.class).evaluate(def.getJoinedDefinition(), personEvaluationContext);\n\n            // now create the result set by mapping the results in the person data set to appointment ids\n            for (Integer apptId : convertedIds.keySet())  {\n                evaluatedAppointmentData.addData(apptId, pd.getData().get(convertedIds.get(apptId)));\n            }\n\n        }\n\n        return evaluatedAppointmentData;\n    }", "signature": "EvaluatedAppointmentData evaluate(AppointmentDataDefinition definition, EvaluationContext context)", "full_signature": "@Override public EvaluatedAppointmentData evaluate(AppointmentDataDefinition definition, EvaluationContext context)", "class_method_signature": "PersonToAppointmentDataEvaluator.evaluate(AppointmentDataDefinition definition, EvaluationContext context)", "testcase": false, "constructor": false, "invocations": ["select", "from", "getAppointmentIdsForContext", "whereIn", "evaluateToMap", "hasPrivilege", "select", "from", "getAppointmentIdsForContext", "whereIn", "evaluateToMap", "iterator", "entrySet", "hasNext", "next", "getKey", "get", "remove", "isEmpty", "keySet", "setBaseCohort", "values", "setBasePersons", "values", "evaluate", "getService", "getJoinedDefinition", "keySet", "addData", "get", "getData", "get"]}, "repository": {"repo_id": 6810283, "url": "https://github.com/openmrs/openmrs-module-appointmentscheduling", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 11, "size": 2562, "license": "licensed"}}