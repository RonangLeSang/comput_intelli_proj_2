{"test_class": {"identifier": "SchedulingEntropySourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SchedulingEntropySource target;", "modifier": "private", "type": "SchedulingEntropySource", "declarator": "target", "var_name": "target"}, {"original_string": "private int schedules;", "modifier": "private", "type": "int", "declarator": "schedules", "var_name": "schedules"}, {"original_string": "private int adds;", "modifier": "private", "type": "int", "declarator": "adds", "var_name": "adds"}], "file": "bitlib/src/test/java/se/grunka/fortuna/entropy/SchedulingEntropySourceTest.java"}, "test_case": {"identifier": "shouldUseTimeBetweenCallsToCreateEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUseTimeBetweenCallsToCreateEvents() throws Exception {\n        target.event(\n                new EventScheduler() {\n                    @Override\n                    public void schedule(long delay, TimeUnit timeUnit) {\n                        assertEquals(10, timeUnit.toMillis(delay));\n                        schedules++;\n                    }\n                },\n                new EventAdder() {\n                    @Override\n                    public void add(byte[] event) {\n                        assertEquals(2, event.length);\n                        adds++;\n                    }\n                }\n        );\n        assertEquals(1, schedules);\n        assertEquals(1, adds);\n    }", "signature": "void shouldUseTimeBetweenCallsToCreateEvents()", "full_signature": "@Test public void shouldUseTimeBetweenCallsToCreateEvents()", "class_method_signature": "SchedulingEntropySourceTest.shouldUseTimeBetweenCallsToCreateEvents()", "testcase": true, "constructor": false, "invocations": ["event", "assertEquals", "toMillis", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SchedulingEntropySource", "superclass": "", "interfaces": "implements EntropySource", "fields": [{"original_string": "private long lastTime = 0;", "modifier": "private", "type": "long", "declarator": "lastTime = 0", "var_name": "lastTime"}], "methods": [{"identifier": "event", "parameters": "(EventScheduler scheduler, EventAdder adder)", "modifiers": "@Override public", "return": "void", "signature": "void event(EventScheduler scheduler, EventAdder adder)", "full_signature": "@Override public void event(EventScheduler scheduler, EventAdder adder)", "class_method_signature": "SchedulingEntropySource.event(EventScheduler scheduler, EventAdder adder)", "testcase": false, "constructor": false}], "file": "bitlib/src/main/java/se/grunka/fortuna/entropy/SchedulingEntropySource.java"}, "focal_method": {"identifier": "event", "parameters": "(EventScheduler scheduler, EventAdder adder)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void event(EventScheduler scheduler, EventAdder adder) {\n        long now = System.nanoTime();\n        long elapsed = now - lastTime;\n        lastTime = now;\n        adder.add(Util.twoLeastSignificantBytes(elapsed));\n        scheduler.schedule(10, TimeUnit.MILLISECONDS);\n    }", "signature": "void event(EventScheduler scheduler, EventAdder adder)", "full_signature": "@Override public void event(EventScheduler scheduler, EventAdder adder)", "class_method_signature": "SchedulingEntropySource.event(EventScheduler scheduler, EventAdder adder)", "testcase": false, "constructor": false, "invocations": ["nanoTime", "add", "twoLeastSignificantBytes", "schedule"]}, "repository": {"repo_id": 10663360, "url": "https://github.com/mycelium-com/wallet-android", "stars": 496, "created": "6/13/2013 9:52:41 AM +00:00", "updates": "2020-01-13T14:02:41+00:00", "fork": "False", "license": "licensed"}}