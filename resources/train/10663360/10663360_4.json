{"test_class": {"identifier": "BackupUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ENCRYPTED_KEY = \"xEncGXICZE1_eVYfGWDioNu_8hA6RZzep4XqwPGRtcKb01MDg3s1XFntJYI9Dw\";", "modifier": "private static final", "type": "String", "declarator": "ENCRYPTED_KEY = \"xEncGXICZE1_eVYfGWDioNu_8hA6RZzep4XqwPGRtcKb01MDg3s1XFntJYI9Dw\"", "var_name": "ENCRYPTED_KEY"}, {"original_string": "private static final String EXPECTED_RESPONSE = \"Private key (Wallet Import Format): cRS3zDecX6c8UF9mtmh5vkB8CQ4nCNn1bjPQayXpt3fSLwSPi1LF\\n\" +\n         \"                   Bitcoin Address: n4J5FqC89EnV8hikctDs6njmG2cwxS8cM5\\n\" +\n           \"                   Bitcoin Address: 2NBzQZLt2MQkJpYGp66b2GQfR5BAQAHtXoU\\n\" +\n           \"                   Bitcoin Address: tb1ql8d5hlsgee3qaes32tnqljr4394wes5cnq8yrd\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_RESPONSE = \"Private key (Wallet Import Format): cRS3zDecX6c8UF9mtmh5vkB8CQ4nCNn1bjPQayXpt3fSLwSPi1LF\\n\" +\n         \"                   Bitcoin Address: n4J5FqC89EnV8hikctDs6njmG2cwxS8cM5\\n\" +\n           \"                   Bitcoin Address: 2NBzQZLt2MQkJpYGp66b2GQfR5BAQAHtXoU\\n\" +\n           \"                   Bitcoin Address: tb1ql8d5hlsgee3qaes32tnqljr4394wes5cnq8yrd\"", "var_name": "EXPECTED_RESPONSE"}, {"original_string": "private static final String CORRECT_PASSWORD = \"QDTDXOYFBXBKKMKR\";", "modifier": "private static final", "type": "String", "declarator": "CORRECT_PASSWORD = \"QDTDXOYFBXBKKMKR\"", "var_name": "CORRECT_PASSWORD"}], "file": "backuputil/src/test/java/com/mrd/bitlib/BackupUtilTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testParse(){\n      BackupUtil util = new BackupUtil(ENCRYPTED_KEY, CORRECT_PASSWORD);\n      String decoded = util.getKey();\n      assertEquals(EXPECTED_RESPONSE, decoded);\n      decoded= new BackupUtil(ENCRYPTED_KEY, \"QDTDXOYFBXBKKMK\").getKey();\n      assertEquals(EXPECTED_RESPONSE, decoded);\n   }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "BackupUtilTest.testParse()", "testcase": true, "constructor": false, "invocations": ["getKey", "assertEquals", "getKey", "assertEquals"]}, "focal_class": {"identifier": "BackupUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String encryptedPrivateKey;", "modifier": "private final", "type": "String", "declarator": "encryptedPrivateKey", "var_name": "encryptedPrivateKey"}, {"original_string": "private final String password;", "modifier": "private final", "type": "String", "declarator": "password", "var_name": "password"}], "methods": [{"identifier": "BackupUtil", "parameters": "(String... args)", "modifiers": "public", "return": "", "signature": " BackupUtil(String... args)", "full_signature": "public  BackupUtil(String... args)", "class_method_signature": "BackupUtil.BackupUtil(String... args)", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "BackupUtil.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKey()", "full_signature": "public String getKey()", "class_method_signature": "BackupUtil.getKey()", "testcase": false, "constructor": false}, {"identifier": "printHelp", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printHelp()", "full_signature": "private static void printHelp()", "class_method_signature": "BackupUtil.printHelp()", "testcase": false, "constructor": false}], "file": "backuputil/src/main/java/com/mrd/bitlib/BackupUtil.java"}, "focal_method": {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getKey() {\n      final String realpassword;\n      if (password.length() == 16) {\n         boolean checksumValid = MrdExport.isChecksumValid(password);\n         if (!checksumValid) {\n            return \"Error: the last character of the password was not matching the checksum\";\n         } else {\n            realpassword = password.substring(0, 15);\n         }\n      } else {\n         if (password.length() != 15) {\n            return \"Error: the supplied password did not match the expected length\";\n         }\n         realpassword = password;\n      }\n      try {\n         MrdExport.V1.Header header = MrdExport.V1.extractHeader(encryptedPrivateKey);\n         MrdExport.V1.KdfParameters kdfParameters = MrdExport.V1.KdfParameters.fromPassphraseAndHeader(realpassword, header);\n         MrdExport.V1.EncryptionParameters parameters = MrdExport.V1.EncryptionParameters.generate(kdfParameters);\n         String privateKey = MrdExport.V1.decryptPrivateKey(parameters, encryptedPrivateKey, header.network);\n         InMemoryPrivateKey key = new InMemoryPrivateKey(privateKey, header.network);\n         return \"Private key (Wallet Import Format): \" + key.getBase58EncodedPrivateKey(header.network) +\n               \"\\n                   Bitcoin Address: \" + key.getPublicKey().toAddress(header.network, AddressType.P2PKH) +\n               \"\\n                   Bitcoin Address: \" + key.getPublicKey().toAddress(header.network, AddressType.P2SH_P2WPKH) +\n               \"\\n                   Bitcoin Address: \" + key.getPublicKey().toAddress(header.network, AddressType.P2WPKH);\n      } catch (InterruptedException e) {\n         throw new RuntimeException(e);\n      } catch (MrdExport.V1.WrongNetworkException e) {\n         throw new RuntimeException(e);\n      } catch (MrdExport.V1.InvalidChecksumException e) {\n         return \"Error: the supplied password did not match the checksum of the encrypted key\";\n      } catch (MrdExport.DecodingException e) {\n         throw new RuntimeException(e);\n      }\n   }", "signature": "String getKey()", "full_signature": "public String getKey()", "class_method_signature": "BackupUtil.getKey()", "testcase": false, "constructor": false, "invocations": ["length", "isChecksumValid", "substring", "length", "extractHeader", "fromPassphraseAndHeader", "generate", "decryptPrivateKey", "getBase58EncodedPrivateKey", "toAddress", "getPublicKey", "toAddress", "getPublicKey", "toAddress", "getPublicKey"]}, "repository": {"repo_id": 10663360, "url": "https://github.com/mycelium-com/wallet-android", "stars": 496, "created": "6/13/2013 9:52:41 AM +00:00", "updates": "2020-01-13T14:02:41+00:00", "fork": "False", "license": "licensed"}}