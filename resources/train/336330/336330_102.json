{"test_class": {"identifier": "RandomUtilsTest", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [], "file": "math/src/test/java/org/apache/mahout/common/RandomUtilsTest.java"}, "test_case": {"identifier": "testHashDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHashDouble() {\n    assertEquals(new Double(0.0).hashCode(), RandomUtils.hashDouble(0.0));\n    assertEquals(new Double(1.0).hashCode(), RandomUtils.hashDouble(1.0));\n    assertEquals(new Double(Double.POSITIVE_INFINITY).hashCode(), RandomUtils.hashDouble(Double.POSITIVE_INFINITY));\n    assertEquals(new Double(Double.NaN).hashCode(), RandomUtils.hashDouble(Double.NaN));\n  }", "signature": "void testHashDouble()", "full_signature": "@Test public void testHashDouble()", "class_method_signature": "RandomUtilsTest.testHashDouble()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hashCode", "hashDouble", "assertEquals", "hashCode", "hashDouble", "assertEquals", "hashCode", "hashDouble", "assertEquals", "hashCode", "hashDouble"]}, "focal_class": {"identifier": "RandomUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAX_INT_SMALLER_TWIN_PRIME = 2147482949;", "modifier": "public static final", "type": "int", "declarator": "MAX_INT_SMALLER_TWIN_PRIME = 2147482949", "var_name": "MAX_INT_SMALLER_TWIN_PRIME"}, {"original_string": "private static final Map<RandomWrapper,Boolean> INSTANCES =\n      Collections.synchronizedMap(new WeakHashMap<RandomWrapper,Boolean>());", "modifier": "private static final", "type": "Map<RandomWrapper,Boolean>", "declarator": "INSTANCES =\n      Collections.synchronizedMap(new WeakHashMap<RandomWrapper,Boolean>())", "var_name": "INSTANCES"}], "methods": [{"identifier": "RandomUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " RandomUtils()", "full_signature": "private  RandomUtils()", "class_method_signature": "RandomUtils.RandomUtils()", "testcase": false, "constructor": true}, {"identifier": "useTestSeed", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void useTestSeed()", "full_signature": "public static void useTestSeed()", "class_method_signature": "RandomUtils.useTestSeed()", "testcase": false, "constructor": false}, {"identifier": "getRandom", "parameters": "()", "modifiers": "public static", "return": "Random", "signature": "Random getRandom()", "full_signature": "public static Random getRandom()", "class_method_signature": "RandomUtils.getRandom()", "testcase": false, "constructor": false}, {"identifier": "getRandom", "parameters": "(long seed)", "modifiers": "public static", "return": "Random", "signature": "Random getRandom(long seed)", "full_signature": "public static Random getRandom(long seed)", "class_method_signature": "RandomUtils.getRandom(long seed)", "testcase": false, "constructor": false}, {"identifier": "longSeedtoBytes", "parameters": "(long seed)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longSeedtoBytes(long seed)", "full_signature": "public static byte[] longSeedtoBytes(long seed)", "class_method_signature": "RandomUtils.longSeedtoBytes(long seed)", "testcase": false, "constructor": false}, {"identifier": "seedBytesToLong", "parameters": "(byte[] seed)", "modifiers": "public static", "return": "long", "signature": "long seedBytesToLong(byte[] seed)", "full_signature": "public static long seedBytesToLong(byte[] seed)", "class_method_signature": "RandomUtils.seedBytesToLong(byte[] seed)", "testcase": false, "constructor": false}, {"identifier": "hashDouble", "parameters": "(double value)", "modifiers": "public static", "return": "int", "signature": "int hashDouble(double value)", "full_signature": "public static int hashDouble(double value)", "class_method_signature": "RandomUtils.hashDouble(double value)", "testcase": false, "constructor": false}, {"identifier": "hashFloat", "parameters": "(float value)", "modifiers": "public static", "return": "int", "signature": "int hashFloat(float value)", "full_signature": "public static int hashFloat(float value)", "class_method_signature": "RandomUtils.hashFloat(float value)", "testcase": false, "constructor": false}, {"identifier": "nextTwinPrime", "parameters": "(int n)", "modifiers": "public static", "return": "int", "signature": "int nextTwinPrime(int n)", "full_signature": "public static int nextTwinPrime(int n)", "class_method_signature": "RandomUtils.nextTwinPrime(int n)", "testcase": false, "constructor": false}, {"identifier": "nextPrime", "parameters": "(int n)", "modifiers": "public static", "return": "int", "signature": "int nextPrime(int n)", "full_signature": "public static int nextPrime(int n)", "class_method_signature": "RandomUtils.nextPrime(int n)", "testcase": false, "constructor": false}, {"identifier": "isNotPrime", "parameters": "(int n)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotPrime(int n)", "full_signature": "public static boolean isNotPrime(int n)", "class_method_signature": "RandomUtils.isNotPrime(int n)", "testcase": false, "constructor": false}], "file": "math/src/main/java/org/apache/mahout/common/RandomUtils.java"}, "focal_method": {"identifier": "hashDouble", "parameters": "(double value)", "modifiers": "public static", "return": "int", "body": "public static int hashDouble(double value) {\n    return Longs.hashCode(Double.doubleToLongBits(value));\n  }", "signature": "int hashDouble(double value)", "full_signature": "public static int hashDouble(double value)", "class_method_signature": "RandomUtils.hashDouble(double value)", "testcase": false, "constructor": false, "invocations": ["hashCode", "doubleToLongBits"]}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}