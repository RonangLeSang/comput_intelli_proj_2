{"test_class": {"identifier": "TestVectorView", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "private static final int CARDINALITY = 3;", "modifier": "private static final", "type": "int", "declarator": "CARDINALITY = 3", "var_name": "CARDINALITY"}, {"original_string": "private static final int OFFSET = 1;", "modifier": "private static final", "type": "int", "declarator": "OFFSET = 1", "var_name": "OFFSET"}, {"original_string": "private final double[] values = {0.0, 1.1, 2.2, 3.3, 4.4, 5.5};", "modifier": "private final", "type": "double[]", "declarator": "values = {0.0, 1.1, 2.2, 3.3, 4.4, 5.5}", "var_name": "values"}, {"original_string": "private final Vector test = new VectorView(new DenseVector(values), OFFSET, CARDINALITY);", "modifier": "private final", "type": "Vector", "declarator": "test = new VectorView(new DenseVector(values), OFFSET, CARDINALITY)", "var_name": "test"}], "file": "math/src/test/java/org/apache/mahout/math/TestVectorView.java"}, "test_case": {"identifier": "testDot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDot() throws Exception {\n    double res = test.dot(test);\n    assertEquals(\"dot\", 1.1 * 1.1 + 2.2 * 2.2 + 3.3 * 3.3, res, EPSILON);\n  }", "signature": "void testDot()", "full_signature": "@Test public void testDot()", "class_method_signature": "TestVectorView.testDot()", "testcase": true, "constructor": false, "invocations": ["dot", "assertEquals"]}, "focal_class": {"identifier": "VectorView", "superclass": "extends AbstractVector", "interfaces": "", "fields": [{"original_string": "private Vector vector;", "modifier": "private", "type": "Vector", "declarator": "vector", "var_name": "vector"}, {"original_string": "private int offset;", "modifier": "private", "type": "int", "declarator": "offset", "var_name": "offset"}], "methods": [{"identifier": "VectorView", "parameters": "()", "modifiers": "public", "return": "", "signature": " VectorView()", "full_signature": "public  VectorView()", "class_method_signature": "VectorView.VectorView()", "testcase": false, "constructor": true}, {"identifier": "VectorView", "parameters": "(Vector vector, int offset, int cardinality)", "modifiers": "public", "return": "", "signature": " VectorView(Vector vector, int offset, int cardinality)", "full_signature": "public  VectorView(Vector vector, int offset, int cardinality)", "class_method_signature": "VectorView.VectorView(Vector vector, int offset, int cardinality)", "testcase": false, "constructor": true}, {"identifier": "matrixLike", "parameters": "(int rows, int columns)", "modifiers": "@Override protected", "return": "Matrix", "signature": "Matrix matrixLike(int rows, int columns)", "full_signature": "@Override protected Matrix matrixLike(int rows, int columns)", "class_method_signature": "VectorView.matrixLike(int rows, int columns)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector clone()", "full_signature": "@Override public Vector clone()", "class_method_signature": "VectorView.clone()", "testcase": false, "constructor": false}, {"identifier": "isDense", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDense()", "full_signature": "@Override public boolean isDense()", "class_method_signature": "VectorView.isDense()", "testcase": false, "constructor": false}, {"identifier": "isSequentialAccess", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSequentialAccess()", "full_signature": "@Override public boolean isSequentialAccess()", "class_method_signature": "VectorView.isSequentialAccess()", "testcase": false, "constructor": false}, {"identifier": "like", "parameters": "()", "modifiers": "@Override public", "return": "VectorView", "signature": "VectorView like()", "full_signature": "@Override public VectorView like()", "class_method_signature": "VectorView.like()", "testcase": false, "constructor": false}, {"identifier": "getQuick", "parameters": "(int index)", "modifiers": "@Override public", "return": "double", "signature": "double getQuick(int index)", "full_signature": "@Override public double getQuick(int index)", "class_method_signature": "VectorView.getQuick(int index)", "testcase": false, "constructor": false}, {"identifier": "setQuick", "parameters": "(int index, double value)", "modifiers": "@Override public", "return": "void", "signature": "void setQuick(int index, double value)", "full_signature": "@Override public void setQuick(int index, double value)", "class_method_signature": "VectorView.setQuick(int index, double value)", "testcase": false, "constructor": false}, {"identifier": "getNumNondefaultElements", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumNondefaultElements()", "full_signature": "@Override public int getNumNondefaultElements()", "class_method_signature": "VectorView.getNumNondefaultElements()", "testcase": false, "constructor": false}, {"identifier": "viewPart", "parameters": "(int offset, int length)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector viewPart(int offset, int length)", "full_signature": "@Override public Vector viewPart(int offset, int length)", "class_method_signature": "VectorView.viewPart(int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "isInView", "parameters": "(int index)", "modifiers": "private", "return": "boolean", "signature": "boolean isInView(int index)", "full_signature": "private boolean isInView(int index)", "class_method_signature": "VectorView.isInView(int index)", "testcase": false, "constructor": false}, {"identifier": "iterateNonZero", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Element>", "signature": "Iterator<Element> iterateNonZero()", "full_signature": "@Override public Iterator<Element> iterateNonZero()", "class_method_signature": "VectorView.iterateNonZero()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Element>", "signature": "Iterator<Element> iterator()", "full_signature": "@Override public Iterator<Element> iterator()", "class_method_signature": "VectorView.iterator()", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector x)", "modifiers": "@Override public", "return": "double", "signature": "double dot(Vector x)", "full_signature": "@Override public double dot(Vector x)", "class_method_signature": "VectorView.dot(Vector x)", "testcase": false, "constructor": false}, {"identifier": "getLengthSquared", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLengthSquared()", "full_signature": "@Override public double getLengthSquared()", "class_method_signature": "VectorView.getLengthSquared()", "testcase": false, "constructor": false}, {"identifier": "getDistanceSquared", "parameters": "(Vector v)", "modifiers": "@Override public", "return": "double", "signature": "double getDistanceSquared(Vector v)", "full_signature": "@Override public double getDistanceSquared(Vector v)", "class_method_signature": "VectorView.getDistanceSquared(Vector v)", "testcase": false, "constructor": false}, {"identifier": "addTo", "parameters": "(Vector v)", "modifiers": "@Override public", "return": "void", "signature": "void addTo(Vector v)", "full_signature": "@Override public void addTo(Vector v)", "class_method_signature": "VectorView.addTo(Vector v)", "testcase": false, "constructor": false}], "file": "math/src/main/java/org/apache/mahout/math/VectorView.java"}, "focal_method": {"identifier": "dot", "parameters": "(Vector x)", "modifiers": "@Override public", "return": "double", "body": "@Override\n  public double dot(Vector x) {\n    if (size() != x.size()) {\n      throw new CardinalityException(size(), x.size());\n    }\n    double result = 0;\n    for (int i = 0; i < size(); i++) {\n      result += getQuick(i) * x.getQuick(i);\n    }\n    return result;\n  }", "signature": "double dot(Vector x)", "full_signature": "@Override public double dot(Vector x)", "class_method_signature": "VectorView.dot(Vector x)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "size", "size", "getQuick", "getQuick"]}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}