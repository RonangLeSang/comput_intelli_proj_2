{"test_class": {"identifier": "ZScoreTest", "superclass": "extends TransformTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/mahout/cf/taste/impl/transforms/ZScoreTest.java"}, "test_case": {"identifier": "testOnePref", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOnePref() throws Exception {\n    DataModel dataModel = getDataModel(new long[] {1}, new Double[][] {{1.0}});\n    PreferenceTransform zScore = new ZScore(dataModel);\n    assertEquals(0.0, zScore.getTransformedValue(new GenericPreference(1, 0, 1.0f)), EPSILON);\n  }", "signature": "void testOnePref()", "full_signature": "@Test public void testOnePref()", "class_method_signature": "ZScoreTest.testOnePref()", "testcase": true, "constructor": false, "invocations": ["getDataModel", "assertEquals", "getTransformedValue"]}, "focal_class": {"identifier": "ZScore", "superclass": "", "interfaces": "implements PreferenceTransform", "fields": [{"original_string": "private final DataModel dataModel;", "modifier": "private final", "type": "DataModel", "declarator": "dataModel", "var_name": "dataModel"}, {"original_string": "private final Cache<Long,RunningAverageAndStdDev> meanAndStdevs;", "modifier": "private final", "type": "Cache<Long,RunningAverageAndStdDev>", "declarator": "meanAndStdevs", "var_name": "meanAndStdevs"}], "methods": [{"identifier": "ZScore", "parameters": "(DataModel dataModel)", "modifiers": "public", "return": "", "signature": " ZScore(DataModel dataModel)", "full_signature": "public  ZScore(DataModel dataModel)", "class_method_signature": "ZScore.ZScore(DataModel dataModel)", "testcase": false, "constructor": true}, {"identifier": "getTransformedValue", "parameters": "(Preference pref)", "modifiers": "@Override public", "return": "float", "signature": "float getTransformedValue(Preference pref)", "full_signature": "@Override public float getTransformedValue(Preference pref)", "class_method_signature": "ZScore.getTransformedValue(Preference pref)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(Collection<Refreshable> alreadyRefreshed)", "modifiers": "@Override public", "return": "void", "signature": "void refresh(Collection<Refreshable> alreadyRefreshed)", "full_signature": "@Override public void refresh(Collection<Refreshable> alreadyRefreshed)", "class_method_signature": "ZScore.refresh(Collection<Refreshable> alreadyRefreshed)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ZScore.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/mahout/cf/taste/impl/transforms/ZScore.java"}, "focal_method": {"identifier": "getTransformedValue", "parameters": "(Preference pref)", "modifiers": "@Override public", "return": "float", "body": "@Override\n  public float getTransformedValue(Preference pref) throws TasteException {\n    RunningAverageAndStdDev meanAndStdev = meanAndStdevs.get(pref.getUserID());\n    if (meanAndStdev.getCount() > 1) {\n      double stdev = meanAndStdev.getStandardDeviation();\n      if (stdev > 0.0) {\n        return (float) ((pref.getValue() - meanAndStdev.getAverage()) / stdev);\n      }\n    }\n    return 0.0f;\n  }", "signature": "float getTransformedValue(Preference pref)", "full_signature": "@Override public float getTransformedValue(Preference pref)", "class_method_signature": "ZScore.getTransformedValue(Preference pref)", "testcase": false, "constructor": false, "invocations": ["get", "getUserID", "getCount", "getStandardDeviation", "getValue", "getAverage"]}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}