{"test_class": {"identifier": "HMMAlgorithmsTest", "superclass": "extends HMMTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/mahout/classifier/sequencelearning/hmm/HMMAlgorithmsTest.java"}, "test_case": {"identifier": "testBackwardAlgorithm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBackwardAlgorithm() {\n    // intialize the expected beta values\n    double[][] betaExpectedA = {\n        {0.0015730559, 0.003543656, 0.00738264, 0.040692, 0.0848, 0.17, 1},\n        {0.0017191865, 0.002386795, 0.00923652, 0.052232, 0.1018, 0.17, 1},\n        {0.0003825772, 0.001238558, 0.00259464, 0.012096, 0.0664, 0.66, 1},\n        {0.0004390858, 0.007076994, 0.01063512, 0.013556, 0.0304, 0.17, 1}};\n    // fetch the beta matrix using the backward algorithm\n    Matrix beta = HmmAlgorithms.backwardAlgorithm(getModel(), getSequence(), false);\n    // first do some basic checking\n    assertNotNull(beta);\n    assertEquals(4, beta.numCols());\n    assertEquals(7, beta.numRows());\n    // now compare the resulting matrices\n    for (int i = 0; i < 4; ++i) {\n      for (int j = 0; j < 7; ++j) {\n        assertEquals(betaExpectedA[i][j], beta.get(j, i), EPSILON);\n      }\n    }\n  }", "signature": "void testBackwardAlgorithm()", "full_signature": "@Test public void testBackwardAlgorithm()", "class_method_signature": "HMMAlgorithmsTest.testBackwardAlgorithm()", "testcase": true, "constructor": false, "invocations": ["backwardAlgorithm", "getModel", "getSequence", "assertNotNull", "assertEquals", "numCols", "assertEquals", "numRows", "assertEquals", "get"]}, "focal_class": {"identifier": "HmmAlgorithms", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "HmmAlgorithms", "parameters": "()", "modifiers": "private", "return": "", "signature": " HmmAlgorithms()", "full_signature": "private  HmmAlgorithms()", "class_method_signature": "HmmAlgorithms.HmmAlgorithms()", "testcase": false, "constructor": true}, {"identifier": "forwardAlgorithm", "parameters": "(HmmModel model, int[] observations,\n                                        boolean scaled)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix forwardAlgorithm(HmmModel model, int[] observations,\n                                        boolean scaled)", "full_signature": "public static Matrix forwardAlgorithm(HmmModel model, int[] observations,\n                                        boolean scaled)", "class_method_signature": "HmmAlgorithms.forwardAlgorithm(HmmModel model, int[] observations,\n                                        boolean scaled)", "testcase": false, "constructor": false}, {"identifier": "forwardAlgorithm", "parameters": "(Matrix alpha, HmmModel model,\n                               int[] observations, boolean scaled)", "modifiers": "static", "return": "void", "signature": "void forwardAlgorithm(Matrix alpha, HmmModel model,\n                               int[] observations, boolean scaled)", "full_signature": "static void forwardAlgorithm(Matrix alpha, HmmModel model,\n                               int[] observations, boolean scaled)", "class_method_signature": "HmmAlgorithms.forwardAlgorithm(Matrix alpha, HmmModel model,\n                               int[] observations, boolean scaled)", "testcase": false, "constructor": false}, {"identifier": "backwardAlgorithm", "parameters": "(HmmModel model, int[] observations,\n                                         boolean scaled)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix backwardAlgorithm(HmmModel model, int[] observations,\n                                         boolean scaled)", "full_signature": "public static Matrix backwardAlgorithm(HmmModel model, int[] observations,\n                                         boolean scaled)", "class_method_signature": "HmmAlgorithms.backwardAlgorithm(HmmModel model, int[] observations,\n                                         boolean scaled)", "testcase": false, "constructor": false}, {"identifier": "backwardAlgorithm", "parameters": "(Matrix beta, HmmModel model,\n                                int[] observations, boolean scaled)", "modifiers": "static", "return": "void", "signature": "void backwardAlgorithm(Matrix beta, HmmModel model,\n                                int[] observations, boolean scaled)", "full_signature": "static void backwardAlgorithm(Matrix beta, HmmModel model,\n                                int[] observations, boolean scaled)", "class_method_signature": "HmmAlgorithms.backwardAlgorithm(Matrix beta, HmmModel model,\n                                int[] observations, boolean scaled)", "testcase": false, "constructor": false}, {"identifier": "viterbiAlgorithm", "parameters": "(HmmModel model, int[] observations,\n                                       boolean scaled)", "modifiers": "public static", "return": "int[]", "signature": "int[] viterbiAlgorithm(HmmModel model, int[] observations,\n                                       boolean scaled)", "full_signature": "public static int[] viterbiAlgorithm(HmmModel model, int[] observations,\n                                       boolean scaled)", "class_method_signature": "HmmAlgorithms.viterbiAlgorithm(HmmModel model, int[] observations,\n                                       boolean scaled)", "testcase": false, "constructor": false}, {"identifier": "viterbiAlgorithm", "parameters": "(int[] sequence, double[][] delta, int[][] phi,\n                               HmmModel model, int[] observations, boolean scaled)", "modifiers": "static", "return": "void", "signature": "void viterbiAlgorithm(int[] sequence, double[][] delta, int[][] phi,\n                               HmmModel model, int[] observations, boolean scaled)", "full_signature": "static void viterbiAlgorithm(int[] sequence, double[][] delta, int[][] phi,\n                               HmmModel model, int[] observations, boolean scaled)", "class_method_signature": "HmmAlgorithms.viterbiAlgorithm(int[] sequence, double[][] delta, int[][] phi,\n                               HmmModel model, int[] observations, boolean scaled)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/HmmAlgorithms.java"}, "focal_method": {"identifier": "backwardAlgorithm", "parameters": "(HmmModel model, int[] observations,\n                                         boolean scaled)", "modifiers": "public static", "return": "Matrix", "body": "public static Matrix backwardAlgorithm(HmmModel model, int[] observations,\n                                         boolean scaled) {\n\n    // initialize the matrix\n    Matrix beta = new DenseMatrix(observations.length, model.getNrOfHiddenStates());\n    // compute the beta factors\n    backwardAlgorithm(beta, model, observations, scaled);\n\n    return beta;\n  }", "signature": "Matrix backwardAlgorithm(HmmModel model, int[] observations,\n                                         boolean scaled)", "full_signature": "public static Matrix backwardAlgorithm(HmmModel model, int[] observations,\n                                         boolean scaled)", "class_method_signature": "HmmAlgorithms.backwardAlgorithm(HmmModel model, int[] observations,\n                                         boolean scaled)", "testcase": false, "constructor": false, "invocations": ["getNrOfHiddenStates", "backwardAlgorithm"]}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}