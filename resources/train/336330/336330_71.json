{"test_class": {"identifier": "TestSingularValueDecomposition", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "private final double[][] testSquare = {\n      { 24.0 / 25.0, 43.0 / 25.0 },\n      { 57.0 / 25.0, 24.0 / 25.0 }\n  };", "modifier": "private final", "type": "double[][]", "declarator": "testSquare = {\n      { 24.0 / 25.0, 43.0 / 25.0 },\n      { 57.0 / 25.0, 24.0 / 25.0 }\n  }", "var_name": "testSquare"}, {"original_string": "private final double[][] testNonSquare = {\n      {  -540.0 / 625.0,  963.0 / 625.0, -216.0 / 625.0 },\n      { -1730.0 / 625.0, -744.0 / 625.0, 1008.0 / 625.0 },\n      {  -720.0 / 625.0, 1284.0 / 625.0, -288.0 / 625.0 },\n      {  -360.0 / 625.0,  192.0 / 625.0, 1756.0 / 625.0 },\n  };", "modifier": "private final", "type": "double[][]", "declarator": "testNonSquare = {\n      {  -540.0 / 625.0,  963.0 / 625.0, -216.0 / 625.0 },\n      { -1730.0 / 625.0, -744.0 / 625.0, 1008.0 / 625.0 },\n      {  -720.0 / 625.0, 1284.0 / 625.0, -288.0 / 625.0 },\n      {  -360.0 / 625.0,  192.0 / 625.0, 1756.0 / 625.0 },\n  }", "var_name": "testNonSquare"}, {"original_string": "private static final double NORM_TOLERANCE = 10.0e-14;", "modifier": "private static final", "type": "double", "declarator": "NORM_TOLERANCE = 10.0e-14", "var_name": "NORM_TOLERANCE"}], "file": "math/src/test/java/org/apache/mahout/math/TestSingularValueDecomposition.java"}, "test_case": {"identifier": "testMoreColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMoreColumns() {\n    double[] singularValues = { 123.456, 2.3, 1.001, 0.999 };\n    int rows    = singularValues.length;\n    int columns = singularValues.length + 2;\n    Random r = RandomUtils.getRandom();\n    SingularValueDecomposition svd =\n      new SingularValueDecomposition(createTestMatrix(r, rows, columns, singularValues));\n    double[] computedSV = svd.getSingularValues();\n    assertEquals(singularValues.length, computedSV.length);\n    for (int i = 0; i < singularValues.length; ++i) {\n      assertEquals(singularValues[i], computedSV[i], 1.0e-10);\n    }\n  }", "signature": "void testMoreColumns()", "full_signature": "@Test public void testMoreColumns()", "class_method_signature": "TestSingularValueDecomposition.testMoreColumns()", "testcase": true, "constructor": false, "invocations": ["getRandom", "createTestMatrix", "getSingularValues", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SingularValueDecomposition", "superclass": "", "interfaces": "implements java.io.Serializable", "fields": [{"original_string": "private final double[][] u;", "modifier": "private final", "type": "double[][]", "declarator": "u", "var_name": "u"}, {"original_string": "private final double[][] v;", "modifier": "private final", "type": "double[][]", "declarator": "v", "var_name": "v"}, {"original_string": "private final double[] s;", "modifier": "private final", "type": "double[]", "declarator": "s", "var_name": "s"}, {"original_string": "private final int m;", "modifier": "private final", "type": "int", "declarator": "m", "var_name": "m"}, {"original_string": "private final int n;", "modifier": "private final", "type": "int", "declarator": "n", "var_name": "n"}, {"original_string": "private boolean transpositionNeeded = false;", "modifier": "private", "type": "boolean", "declarator": "transpositionNeeded = false", "var_name": "transpositionNeeded"}], "methods": [{"identifier": "SingularValueDecomposition", "parameters": "(Matrix arg)", "modifiers": "public", "return": "", "signature": " SingularValueDecomposition(Matrix arg)", "full_signature": "public  SingularValueDecomposition(Matrix arg)", "class_method_signature": "SingularValueDecomposition.SingularValueDecomposition(Matrix arg)", "testcase": false, "constructor": true}, {"identifier": "cond", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double cond()", "full_signature": "public double cond()", "class_method_signature": "SingularValueDecomposition.cond()", "testcase": false, "constructor": false}, {"identifier": "getS", "parameters": "()", "modifiers": "public", "return": "Matrix", "signature": "Matrix getS()", "full_signature": "public Matrix getS()", "class_method_signature": "SingularValueDecomposition.getS()", "testcase": false, "constructor": false}, {"identifier": "getSingularValues", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSingularValues()", "full_signature": "public double[] getSingularValues()", "class_method_signature": "SingularValueDecomposition.getSingularValues()", "testcase": false, "constructor": false}, {"identifier": "getU", "parameters": "()", "modifiers": "public", "return": "Matrix", "signature": "Matrix getU()", "full_signature": "public Matrix getU()", "class_method_signature": "SingularValueDecomposition.getU()", "testcase": false, "constructor": false}, {"identifier": "getV", "parameters": "()", "modifiers": "public", "return": "Matrix", "signature": "Matrix getV()", "full_signature": "public Matrix getV()", "class_method_signature": "SingularValueDecomposition.getV()", "testcase": false, "constructor": false}, {"identifier": "norm2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double norm2()", "full_signature": "public double norm2()", "class_method_signature": "SingularValueDecomposition.norm2()", "testcase": false, "constructor": false}, {"identifier": "rank", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int rank()", "full_signature": "public int rank()", "class_method_signature": "SingularValueDecomposition.rank()", "testcase": false, "constructor": false}, {"identifier": "getCovariance", "parameters": "(double minSingularValue)", "modifiers": "", "return": "Matrix", "signature": "Matrix getCovariance(double minSingularValue)", "full_signature": " Matrix getCovariance(double minSingularValue)", "class_method_signature": "SingularValueDecomposition.getCovariance(double minSingularValue)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "SingularValueDecomposition.toString()", "testcase": false, "constructor": false}], "file": "math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java"}, "focal_method": {"identifier": "getSingularValues", "parameters": "()", "modifiers": "public", "return": "double[]", "body": "public double[] getSingularValues() {\n    return s;\n  }", "signature": "double[] getSingularValues()", "full_signature": "public double[] getSingularValues()", "class_method_signature": "SingularValueDecomposition.getSingularValues()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}