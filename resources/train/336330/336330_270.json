{"test_class": {"identifier": "DefaultIgSplitTest", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "private static final int NUM_ATTRIBUTES = 10;", "modifier": "private static final", "type": "int", "declarator": "NUM_ATTRIBUTES = 10", "var_name": "NUM_ATTRIBUTES"}], "file": "core/src/test/java/org/apache/mahout/df/split/DefaultIgSplitTest.java"}, "test_case": {"identifier": "testEntropy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEntropy() throws Exception {\n    Random rng = RandomUtils.getRandom();\n    String descriptor = Utils.randomDescriptor(rng, NUM_ATTRIBUTES);\n    int label = Utils.findLabel(descriptor);\n\n    // all the vectors have the same label (0)\n    double[][] temp = Utils.randomDoublesWithSameLabel(rng, descriptor, 100, 0);\n    String[] sData = Utils.double2String(temp);\n    Dataset dataset = DataLoader.generateDataset(descriptor, sData);\n    Data data = DataLoader.loadData(dataset, sData);\n    DefaultIgSplit iG = new DefaultIgSplit();\n\n    double expected = 0.0 - 1.0 * Math.log(1.0) / Math.log(2.0);\n    assertEquals(expected, iG.entropy(data), EPSILON);\n\n    // 50/100 of the vectors have the label (1)\n    // 50/100 of the vectors have the label (0)\n    for (int index = 0; index < 50; index++) {\n      temp[index][label] = 1.0;\n    }\n    sData = Utils.double2String(temp);\n    dataset = DataLoader.generateDataset(descriptor, sData);\n    data = DataLoader.loadData(dataset, sData);\n    iG = new DefaultIgSplit();\n    \n    expected = 2.0 * -0.5 * Math.log(0.5) / Math.log(2.0);\n    assertEquals(expected, iG.entropy(data), EPSILON);\n\n    // 15/100 of the vectors have the label (2)\n    // 35/100 of the vectors have the label (1)\n    // 50/100 of the vectors have the label (0)\n    for (int index = 0; index < 15; index++) {\n      temp[index][label] = 2.0;\n    }\n    sData = Utils.double2String(temp);\n    dataset = DataLoader.generateDataset(descriptor, sData);\n    data = DataLoader.loadData(dataset, sData);\n    iG = new DefaultIgSplit();\n    \n    expected = -0.15 * Math.log(0.15) / Math.log(2.0) - 0.35 * Math.log(0.35)\n        / Math.log(2.0) - 0.5 * Math.log(0.5) / Math.log(2.0);\n    assertEquals(expected, iG.entropy(data), EPSILON);\n  }", "signature": "void testEntropy()", "full_signature": "@Test public void testEntropy()", "class_method_signature": "DefaultIgSplitTest.testEntropy()", "testcase": true, "constructor": false, "invocations": ["getRandom", "randomDescriptor", "findLabel", "randomDoublesWithSameLabel", "double2String", "generateDataset", "loadData", "log", "log", "assertEquals", "entropy", "double2String", "generateDataset", "loadData", "log", "log", "assertEquals", "entropy", "double2String", "generateDataset", "loadData", "log", "log", "log", "log", "log", "log", "assertEquals", "entropy"]}, "focal_class": {"identifier": "DefaultIgSplit", "superclass": "extends IgSplit", "interfaces": "", "fields": [{"original_string": "private int[] counts;", "modifier": "private", "type": "int[]", "declarator": "counts", "var_name": "counts"}], "methods": [{"identifier": "computeSplit", "parameters": "(Data data, int attr)", "modifiers": "@Override public", "return": "Split", "signature": "Split computeSplit(Data data, int attr)", "full_signature": "@Override public Split computeSplit(Data data, int attr)", "class_method_signature": "DefaultIgSplit.computeSplit(Data data, int attr)", "testcase": false, "constructor": false}, {"identifier": "categoricalIg", "parameters": "(Data data, int attr)", "modifiers": "protected", "return": "double", "signature": "double categoricalIg(Data data, int attr)", "full_signature": "protected double categoricalIg(Data data, int attr)", "class_method_signature": "DefaultIgSplit.categoricalIg(Data data, int attr)", "testcase": false, "constructor": false}, {"identifier": "numericalIg", "parameters": "(Data data, int attr, double split)", "modifiers": "protected", "return": "double", "signature": "double numericalIg(Data data, int attr, double split)", "full_signature": "protected double numericalIg(Data data, int attr, double split)", "class_method_signature": "DefaultIgSplit.numericalIg(Data data, int attr, double split)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(Data data)", "modifiers": "protected", "return": "double", "signature": "double entropy(Data data)", "full_signature": "protected double entropy(Data data)", "class_method_signature": "DefaultIgSplit.entropy(Data data)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/mahout/df/split/DefaultIgSplit.java"}, "focal_method": {"identifier": "entropy", "parameters": "(Data data)", "modifiers": "protected", "return": "double", "body": "protected double entropy(Data data) {\n    double invDataSize = 1.0 / data.size();\n    \n    if (counts == null) {\n      counts = new int[data.getDataset().nblabels()];\n    }\n    \n    Arrays.fill(counts, 0);\n    data.countLabels(counts);\n    \n    double entropy = 0.0;\n    for (int label = 0; label < data.getDataset().nblabels(); label++) {\n      int count = counts[label];\n      if (count == 0) {\n        continue; // otherwise we get a NaN\n      }\n      double p = count * invDataSize;\n      entropy += -p * Math.log(p) / LOG2;\n    }\n    \n    return entropy;\n  }", "signature": "double entropy(Data data)", "full_signature": "protected double entropy(Data data)", "class_method_signature": "DefaultIgSplit.entropy(Data data)", "testcase": false, "constructor": false, "invocations": ["size", "nblabels", "getDataset", "fill", "countLabels", "nblabels", "getDataset", "log"]}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}