{"test_class": {"identifier": "SpearmanCorrelationSimilarityTest", "superclass": "extends SimilarityTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/mahout/cf/taste/impl/similarity/SpearmanCorrelationSimilarityTest.java"}, "test_case": {"identifier": "testFullCorrelation2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFullCorrelation2() throws Exception {\n    DataModel dataModel = getDataModel(\n            new long[] {1, 2},\n            new Double[][] {\n                    {1.0, 2.0, 3.0},\n                    {4.0, 5.0, 6.0},\n            });\n    double correlation = new SpearmanCorrelationSimilarity(dataModel).userSimilarity(1, 2);\n    assertCorrelationEquals(1.0, correlation);\n  }", "signature": "void testFullCorrelation2()", "full_signature": "@Test public void testFullCorrelation2()", "class_method_signature": "SpearmanCorrelationSimilarityTest.testFullCorrelation2()", "testcase": true, "constructor": false, "invocations": ["getDataModel", "userSimilarity", "assertCorrelationEquals"]}, "focal_class": {"identifier": "SpearmanCorrelationSimilarity", "superclass": "", "interfaces": "implements UserSimilarity", "fields": [{"original_string": "private final DataModel dataModel;", "modifier": "private final", "type": "DataModel", "declarator": "dataModel", "var_name": "dataModel"}], "methods": [{"identifier": "SpearmanCorrelationSimilarity", "parameters": "(DataModel dataModel)", "modifiers": "public", "return": "", "signature": " SpearmanCorrelationSimilarity(DataModel dataModel)", "full_signature": "public  SpearmanCorrelationSimilarity(DataModel dataModel)", "class_method_signature": "SpearmanCorrelationSimilarity.SpearmanCorrelationSimilarity(DataModel dataModel)", "testcase": false, "constructor": true}, {"identifier": "userSimilarity", "parameters": "(long userID1, long userID2)", "modifiers": "@Override public", "return": "double", "signature": "double userSimilarity(long userID1, long userID2)", "full_signature": "@Override public double userSimilarity(long userID1, long userID2)", "class_method_signature": "SpearmanCorrelationSimilarity.userSimilarity(long userID1, long userID2)", "testcase": false, "constructor": false}, {"identifier": "setPreferenceInferrer", "parameters": "(PreferenceInferrer inferrer)", "modifiers": "@Override public", "return": "void", "signature": "void setPreferenceInferrer(PreferenceInferrer inferrer)", "full_signature": "@Override public void setPreferenceInferrer(PreferenceInferrer inferrer)", "class_method_signature": "SpearmanCorrelationSimilarity.setPreferenceInferrer(PreferenceInferrer inferrer)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(Collection<Refreshable> alreadyRefreshed)", "modifiers": "@Override public", "return": "void", "signature": "void refresh(Collection<Refreshable> alreadyRefreshed)", "full_signature": "@Override public void refresh(Collection<Refreshable> alreadyRefreshed)", "class_method_signature": "SpearmanCorrelationSimilarity.refresh(Collection<Refreshable> alreadyRefreshed)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/SpearmanCorrelationSimilarity.java"}, "focal_method": {"identifier": "userSimilarity", "parameters": "(long userID1, long userID2)", "modifiers": "@Override public", "return": "double", "body": "@Override\n  public double userSimilarity(long userID1, long userID2) throws TasteException {\n    PreferenceArray xPrefs = dataModel.getPreferencesFromUser(userID1);\n    PreferenceArray yPrefs = dataModel.getPreferencesFromUser(userID2);\n    int xLength = xPrefs.length();\n    int yLength = yPrefs.length();\n    \n    if ((xLength <= 1) || (yLength <= 1)) {\n      return Double.NaN;\n    }\n    \n    // Copy prefs since we need to modify pref values to ranks\n    xPrefs = xPrefs.clone();\n    yPrefs = yPrefs.clone();\n    \n    // First sort by values from low to high\n    xPrefs.sortByValue();\n    yPrefs.sortByValue();\n    \n    // Assign ranks from low to high\n    float nextRank = 1.0f;\n    for (int i = 0; i < xLength; i++) {\n      // ... but only for items that are common to both pref arrays\n      if (yPrefs.hasPrefWithItemID(xPrefs.getItemID(i))) {\n        xPrefs.setValue(i, nextRank);\n        nextRank += 1.0f;\n      }\n      // Other values are bogus but don't matter\n    }\n    nextRank = 1.0f;\n    for (int i = 0; i < yLength; i++) {\n      if (xPrefs.hasPrefWithItemID(yPrefs.getItemID(i))) {\n        yPrefs.setValue(i, nextRank);\n        nextRank += 1.0f;\n      }\n    }\n    \n    xPrefs.sortByItem();\n    yPrefs.sortByItem();\n    \n    long xIndex = xPrefs.getItemID(0);\n    long yIndex = yPrefs.getItemID(0);\n    int xPrefIndex = 0;\n    int yPrefIndex = 0;\n    \n    double sumXYRankDiff2 = 0.0;\n    int count = 0;\n    \n    while (true) {\n      int compare = xIndex < yIndex ? -1 : xIndex > yIndex ? 1 : 0;\n      if (compare == 0) {\n        double diff = xPrefs.getValue(xPrefIndex) - yPrefs.getValue(yPrefIndex);\n        sumXYRankDiff2 += diff * diff;\n        count++;\n      }\n      if (compare <= 0) {\n        if (++xPrefIndex >= xLength) {\n          break;\n        }\n        xIndex = xPrefs.getItemID(xPrefIndex);\n      }\n      if (compare >= 0) {\n        if (++yPrefIndex >= yLength) {\n          break;\n        }\n        yIndex = yPrefs.getItemID(yPrefIndex);\n      }\n    }\n    \n    if (count <= 1) {\n      return Double.NaN;\n    }\n    \n    // When ranks are unique, this formula actually gives the Pearson correlation\n    return 1.0 - 6.0 * sumXYRankDiff2 / (count * (count * count - 1));\n  }", "signature": "double userSimilarity(long userID1, long userID2)", "full_signature": "@Override public double userSimilarity(long userID1, long userID2)", "class_method_signature": "SpearmanCorrelationSimilarity.userSimilarity(long userID1, long userID2)", "testcase": false, "constructor": false, "invocations": ["getPreferencesFromUser", "getPreferencesFromUser", "length", "length", "clone", "clone", "sortByValue", "sortByValue", "hasPrefWithItemID", "getItemID", "setValue", "hasPrefWithItemID", "getItemID", "setValue", "sortByItem", "sortByItem", "getItemID", "getItemID", "getValue", "getValue", "getItemID", "getItemID"]}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}