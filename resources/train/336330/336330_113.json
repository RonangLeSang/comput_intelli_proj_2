{"test_class": {"identifier": "LuceneIterableTest", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "private static final String [] DOCS = {\n      \"The quick red fox jumped over the lazy brown dogs.\",\n      \"Mary had a little lamb whose fleece was white as snow.\",\n      \"Moby Dick is a story of a whale and a man obsessed.\",\n      \"The robber wore a black fleece jacket and a baseball cap.\",\n      \"The English Springer Spaniel is the best of all dogs.\"\n  };", "modifier": "private static final", "type": "String []", "declarator": "DOCS = {\n      \"The quick red fox jumped over the lazy brown dogs.\",\n      \"Mary had a little lamb whose fleece was white as snow.\",\n      \"Moby Dick is a story of a whale and a man obsessed.\",\n      \"The robber wore a black fleece jacket and a baseball cap.\",\n      \"The English Springer Spaniel is the best of all dogs.\"\n  }", "var_name": "DOCS"}, {"original_string": "private RAMDirectory directory;", "modifier": "private", "type": "RAMDirectory", "declarator": "directory", "var_name": "directory"}], "file": "utils/src/test/java/org/apache/mahout/utils/vectors/lucene/LuceneIterableTest.java"}, "test_case": {"identifier": "testIterable_someNoiseTermVectors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIterable_someNoiseTermVectors() throws IOException {\n    //get noise vectors\n    RAMDirectory directory = createTestIndex(Field.TermVector.YES, new RAMDirectory(), true, 0);\n    //get real vectors\n    createTestIndex(Field.TermVector.NO, directory, false, 5);\n      \n    IndexReader reader = IndexReader.open(directory, true);\n    Weight weight = new TFIDF();\n    TermInfo termInfo = new CachedTermInfo(reader, \"content\", 1, 100);\n    VectorMapper mapper = new TFDFMapper(reader, weight, termInfo);\n    \n    boolean exceptionThrown;\n    //0 percent tolerance\n    LuceneIterable iterable = new LuceneIterable(reader, \"id\", \"content\", mapper);\n    try {\n        Iterator<Vector> iterator = iterable.iterator();\n        while (iterator.hasNext()) {\n            iterator.next();\n        }\n        exceptionThrown = false;\n    }\n    catch(IllegalStateException ise) {\n        exceptionThrown = true;\n    }\n    assertTrue(exceptionThrown);\n    \n    //100 percent tolerance\n    iterable = new LuceneIterable(reader, \"id\", \"content\", mapper, -1, 1.0);\n    try {\n        Iterator<Vector> iterator = iterable.iterator();\n        while (iterator.hasNext()) {\n            iterator.next();\n        }\n        exceptionThrown = false;\n    }\n    catch(IllegalStateException ise) {\n        exceptionThrown = true;\n    }\n    assertFalse(exceptionThrown);\n    \n    //50 percent tolerance\n    iterable = new LuceneIterable(reader, \"id\", \"content\", mapper, -1, 0.5);\n    Iterator<Vector> iterator = iterable.iterator();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n    iterator.next();\n\n    try {\n        while (iterator.hasNext()) {\n            iterator.next();\n        }\n        exceptionThrown = false;\n    }\n    catch(IllegalStateException ise) {\n        exceptionThrown = true;\n    }\n    assertTrue(exceptionThrown);\n  }", "signature": "void testIterable_someNoiseTermVectors()", "full_signature": "@Test public void testIterable_someNoiseTermVectors()", "class_method_signature": "LuceneIterableTest.testIterable_someNoiseTermVectors()", "testcase": true, "constructor": false, "invocations": ["createTestIndex", "createTestIndex", "open", "iterator", "hasNext", "next", "assertTrue", "iterator", "hasNext", "next", "assertFalse", "iterator", "next", "next", "next", "next", "next", "hasNext", "next", "assertTrue"]}, "focal_class": {"identifier": "LuceneIterable", "superclass": "", "interfaces": "implements Iterable<Vector>", "fields": [{"original_string": "public static final double NO_NORMALIZING = -1.0;", "modifier": "public static final", "type": "double", "declarator": "NO_NORMALIZING = -1.0", "var_name": "NO_NORMALIZING"}, {"original_string": "private final IndexReader indexReader;", "modifier": "private final", "type": "IndexReader", "declarator": "indexReader", "var_name": "indexReader"}, {"original_string": "private final String field;", "modifier": "private final", "type": "String", "declarator": "field", "var_name": "field"}, {"original_string": "private final String idField;", "modifier": "private final", "type": "String", "declarator": "idField", "var_name": "idField"}, {"original_string": "private final VectorMapper mapper;", "modifier": "private final", "type": "VectorMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final double normPower;", "modifier": "private final", "type": "double", "declarator": "normPower", "var_name": "normPower"}, {"original_string": "private final double maxPercentErrorDocs;", "modifier": "private final", "type": "double", "declarator": "maxPercentErrorDocs", "var_name": "maxPercentErrorDocs"}], "methods": [{"identifier": "LuceneIterable", "parameters": "(IndexReader reader, String idField, String field, VectorMapper mapper)", "modifiers": "public", "return": "", "signature": " LuceneIterable(IndexReader reader, String idField, String field, VectorMapper mapper)", "full_signature": "public  LuceneIterable(IndexReader reader, String idField, String field, VectorMapper mapper)", "class_method_signature": "LuceneIterable.LuceneIterable(IndexReader reader, String idField, String field, VectorMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "LuceneIterable", "parameters": "(IndexReader indexReader, String idField, String field, VectorMapper mapper, double normPower)", "modifiers": "public", "return": "", "signature": " LuceneIterable(IndexReader indexReader, String idField, String field, VectorMapper mapper, double normPower)", "full_signature": "public  LuceneIterable(IndexReader indexReader, String idField, String field, VectorMapper mapper, double normPower)", "class_method_signature": "LuceneIterable.LuceneIterable(IndexReader indexReader, String idField, String field, VectorMapper mapper, double normPower)", "testcase": false, "constructor": true}, {"identifier": "LuceneIterable", "parameters": "(IndexReader indexReader,\n                        String idField,\n                        String field,\n                        VectorMapper mapper,\n                        double normPower,\n                        double maxPercentErrorDocs)", "modifiers": "public", "return": "", "signature": " LuceneIterable(IndexReader indexReader,\n                        String idField,\n                        String field,\n                        VectorMapper mapper,\n                        double normPower,\n                        double maxPercentErrorDocs)", "full_signature": "public  LuceneIterable(IndexReader indexReader,\n                        String idField,\n                        String field,\n                        VectorMapper mapper,\n                        double normPower,\n                        double maxPercentErrorDocs)", "class_method_signature": "LuceneIterable.LuceneIterable(IndexReader indexReader,\n                        String idField,\n                        String field,\n                        VectorMapper mapper,\n                        double normPower,\n                        double maxPercentErrorDocs)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Vector>", "signature": "Iterator<Vector> iterator()", "full_signature": "@Override public Iterator<Vector> iterator()", "class_method_signature": "LuceneIterable.iterator()", "testcase": false, "constructor": false}], "file": "utils/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterable.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Vector>", "body": "@Override\n  public Iterator<Vector> iterator() {\n    try {\n      return new LuceneIterator(indexReader, idField, field, mapper, normPower, maxPercentErrorDocs);\n    } catch (IOException e) {\n      throw new IllegalStateException(e);\n    }\n  }", "signature": "Iterator<Vector> iterator()", "full_signature": "@Override public Iterator<Vector> iterator()", "class_method_signature": "LuceneIterable.iterator()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}