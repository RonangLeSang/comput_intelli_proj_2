{"test_class": {"identifier": "GramKeyGroupComparatorTest", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparatorTest.java"}, "test_case": {"identifier": "testComparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComparator() {\n    byte[] foo   = new byte[1];\n    foo[0] = (byte) 1;\n\n    byte[] empty = new byte[0];\n    GramKey a = new GramKey(new Gram(\"foo\", 1, Gram.Type.HEAD), empty); // base\n    GramKey b = new GramKey(new Gram(\"foo\", 1, Gram.Type.HEAD), foo);   // vary byte\n    GramKey c = new GramKey(new Gram(\"foo\", 2, Gram.Type.HEAD), empty); // vary freq\n    GramKey d = new GramKey(new Gram(\"foo\", 1, Gram.Type.TAIL), empty); // vary type\n    GramKey e = new GramKey(new Gram(\"bar\", 5, Gram.Type.HEAD), empty); // vary string\n    \n    GramKeyGroupComparator cmp = new GramKeyGroupComparator();\n\n    assertEquals(0, cmp.compare(a, b));\n    assertEquals(0, cmp.compare(a, c));\n    assertTrue(0 > cmp.compare(a, d));\n    assertTrue(0 < cmp.compare(a, e));\n    assertTrue(0 < cmp.compare(d, e));\n  }", "signature": "void testComparator()", "full_signature": "@Test public void testComparator()", "class_method_signature": "GramKeyGroupComparatorTest.testComparator()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare", "assertEquals", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare"]}, "focal_class": {"identifier": "GramKeyGroupComparator", "superclass": "extends WritableComparator", "interfaces": "implements Serializable", "fields": [], "methods": [{"identifier": "GramKeyGroupComparator", "parameters": "()", "modifiers": "", "return": "", "signature": " GramKeyGroupComparator()", "full_signature": "  GramKeyGroupComparator()", "class_method_signature": "GramKeyGroupComparator.GramKeyGroupComparator()", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(WritableComparable a, WritableComparable b)", "modifiers": "@Override public", "return": "int", "signature": "int compare(WritableComparable a, WritableComparable b)", "full_signature": "@Override public int compare(WritableComparable a, WritableComparable b)", "class_method_signature": "GramKeyGroupComparator.compare(WritableComparable a, WritableComparable b)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(WritableComparable a, WritableComparable b)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compare(WritableComparable a, WritableComparable b) {\n    GramKey gka = (GramKey) a;\n    GramKey gkb = (GramKey) b;\n\n    return WritableComparator.compareBytes(gka.getBytes(), 0, gka.getPrimaryLength(),\n                                           gkb.getBytes(), 0, gkb.getPrimaryLength());\n  }", "signature": "int compare(WritableComparable a, WritableComparable b)", "full_signature": "@Override public int compare(WritableComparable a, WritableComparable b)", "class_method_signature": "GramKeyGroupComparator.compare(WritableComparable a, WritableComparable b)", "testcase": false, "constructor": false, "invocations": ["compareBytes", "getBytes", "getPrimaryLength", "getBytes", "getPrimaryLength"]}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}