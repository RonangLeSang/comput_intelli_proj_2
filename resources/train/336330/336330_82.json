{"test_class": {"identifier": "AbstractTestVector", "superclass": "extends MahoutTestCase", "interfaces": "", "fields": [{"original_string": "private static final double[] values = {1.1, 2.2, 3.3};", "modifier": "private static final", "type": "double[]", "declarator": "values = {1.1, 2.2, 3.3}", "var_name": "values"}, {"original_string": "private static final double[] gold = {0.0, 1.1, 0.0, 2.2, 0.0, 3.3, 0.0};", "modifier": "private static final", "type": "double[]", "declarator": "gold = {0.0, 1.1, 0.0, 2.2, 0.0, 3.3, 0.0}", "var_name": "gold"}, {"original_string": "private Vector test;", "modifier": "private", "type": "Vector", "declarator": "test", "var_name": "test"}], "file": "math/src/test/java/org/apache/mahout/math/AbstractTestVector.java"}, "test_case": {"identifier": "testSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSet() {\n    test.set(3, 4.5);\n    for (int i = 0; i < test.size(); i++) {\n      if (i % 2 == 0) {\n        assertEquals(\"get [\" + i + ']', 0.0, test.get(i), EPSILON);\n      } else if (i == 3) {\n        assertEquals(\"set [\" + i + ']', 4.5, test.get(i), EPSILON);\n      } else {\n        assertEquals(\"set [\" + i + ']', values[i/2], test.get(i), EPSILON);\n      }\n    }\n  }", "signature": "void testSet()", "full_signature": "@Test public void testSet()", "class_method_signature": "AbstractTestVector.testSet()", "testcase": true, "constructor": false, "invocations": ["set", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "AbstractVector", "superclass": "", "interfaces": "implements Vector", "fields": [{"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "protected double lengthSquared = -1.0;", "modifier": "protected", "type": "double", "declarator": "lengthSquared = -1.0", "var_name": "lengthSquared"}], "methods": [{"identifier": "AbstractVector", "parameters": "(int size)", "modifiers": "protected", "return": "", "signature": " AbstractVector(int size)", "full_signature": "protected  AbstractVector(int size)", "class_method_signature": "AbstractVector.AbstractVector(int size)", "testcase": false, "constructor": true}, {"identifier": "aggregate", "parameters": "(DoubleDoubleFunction aggregator, DoubleFunction map)", "modifiers": "@Override public", "return": "double", "signature": "double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map)", "full_signature": "@Override public double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map)", "class_method_signature": "AbstractVector.aggregate(DoubleDoubleFunction aggregator, DoubleFunction map)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner)", "modifiers": "@Override public", "return": "double", "signature": "double aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner)", "full_signature": "@Override public double aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner)", "class_method_signature": "AbstractVector.aggregate(Vector other, DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner)", "testcase": false, "constructor": false}, {"identifier": "matrixLike", "parameters": "(int rows, int columns)", "modifiers": "protected abstract", "return": "Matrix", "signature": "Matrix matrixLike(int rows, int columns)", "full_signature": "protected abstract Matrix matrixLike(int rows, int columns)", "class_method_signature": "AbstractVector.matrixLike(int rows, int columns)", "testcase": false, "constructor": false}, {"identifier": "viewPart", "parameters": "(int offset, int length)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector viewPart(int offset, int length)", "full_signature": "@Override public Vector viewPart(int offset, int length)", "class_method_signature": "AbstractVector.viewPart(int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector clone()", "full_signature": "@Override public Vector clone()", "class_method_signature": "AbstractVector.clone()", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(double x)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector divide(double x)", "full_signature": "@Override public Vector divide(double x)", "class_method_signature": "AbstractVector.divide(double x)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector x)", "modifiers": "@Override public", "return": "double", "signature": "double dot(Vector x)", "full_signature": "@Override public double dot(Vector x)", "class_method_signature": "AbstractVector.dot(Vector x)", "testcase": false, "constructor": false}, {"identifier": "dotSelf", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double dotSelf()", "full_signature": "public double dotSelf()", "class_method_signature": "AbstractVector.dotSelf()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "double", "signature": "double get(int index)", "full_signature": "@Override public double get(int index)", "class_method_signature": "AbstractVector.get(int index)", "testcase": false, "constructor": false}, {"identifier": "getElement", "parameters": "(int index)", "modifiers": "@Override public", "return": "Element", "signature": "Element getElement(int index)", "full_signature": "@Override public Element getElement(int index)", "class_method_signature": "AbstractVector.getElement(int index)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(Vector that)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector minus(Vector that)", "full_signature": "@Override public Vector minus(Vector that)", "class_method_signature": "AbstractVector.minus(Vector that)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector normalize()", "full_signature": "@Override public Vector normalize()", "class_method_signature": "AbstractVector.normalize()", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(double power)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector normalize(double power)", "full_signature": "@Override public Vector normalize(double power)", "class_method_signature": "AbstractVector.normalize(double power)", "testcase": false, "constructor": false}, {"identifier": "logNormalize", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector logNormalize()", "full_signature": "@Override public Vector logNormalize()", "class_method_signature": "AbstractVector.logNormalize()", "testcase": false, "constructor": false}, {"identifier": "logNormalize", "parameters": "(double power)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector logNormalize(double power)", "full_signature": "@Override public Vector logNormalize(double power)", "class_method_signature": "AbstractVector.logNormalize(double power)", "testcase": false, "constructor": false}, {"identifier": "logNormalize", "parameters": "(double power, double normLength)", "modifiers": "public", "return": "Vector", "signature": "Vector logNormalize(double power, double normLength)", "full_signature": "public Vector logNormalize(double power, double normLength)", "class_method_signature": "AbstractVector.logNormalize(double power, double normLength)", "testcase": false, "constructor": false}, {"identifier": "norm", "parameters": "(double power)", "modifiers": "@Override public", "return": "double", "signature": "double norm(double power)", "full_signature": "@Override public double norm(double power)", "class_method_signature": "AbstractVector.norm(double power)", "testcase": false, "constructor": false}, {"identifier": "getLengthSquared", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLengthSquared()", "full_signature": "@Override public double getLengthSquared()", "class_method_signature": "AbstractVector.getLengthSquared()", "testcase": false, "constructor": false}, {"identifier": "getDistanceSquared", "parameters": "(Vector v)", "modifiers": "@Override public", "return": "double", "signature": "double getDistanceSquared(Vector v)", "full_signature": "@Override public double getDistanceSquared(Vector v)", "class_method_signature": "AbstractVector.getDistanceSquared(Vector v)", "testcase": false, "constructor": false}, {"identifier": "maxValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double maxValue()", "full_signature": "@Override public double maxValue()", "class_method_signature": "AbstractVector.maxValue()", "testcase": false, "constructor": false}, {"identifier": "maxValueIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int maxValueIndex()", "full_signature": "@Override public int maxValueIndex()", "class_method_signature": "AbstractVector.maxValueIndex()", "testcase": false, "constructor": false}, {"identifier": "minValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double minValue()", "full_signature": "@Override public double minValue()", "class_method_signature": "AbstractVector.minValue()", "testcase": false, "constructor": false}, {"identifier": "minValueIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int minValueIndex()", "full_signature": "@Override public int minValueIndex()", "class_method_signature": "AbstractVector.minValueIndex()", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(double x)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector plus(double x)", "full_signature": "@Override public Vector plus(double x)", "class_method_signature": "AbstractVector.plus(double x)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(Vector x)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector plus(Vector x)", "full_signature": "@Override public Vector plus(Vector x)", "class_method_signature": "AbstractVector.plus(Vector x)", "testcase": false, "constructor": false}, {"identifier": "addTo", "parameters": "(Vector v)", "modifiers": "@Override public", "return": "void", "signature": "void addTo(Vector v)", "full_signature": "@Override public void addTo(Vector v)", "class_method_signature": "AbstractVector.addTo(Vector v)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, double value)", "modifiers": "@Override public", "return": "void", "signature": "void set(int index, double value)", "full_signature": "@Override public void set(int index, double value)", "class_method_signature": "AbstractVector.set(int index, double value)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(double x)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector times(double x)", "full_signature": "@Override public Vector times(double x)", "class_method_signature": "AbstractVector.times(double x)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(Vector x)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector times(Vector x)", "full_signature": "@Override public Vector times(Vector x)", "class_method_signature": "AbstractVector.times(Vector x)", "testcase": false, "constructor": false}, {"identifier": "zSum", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double zSum()", "full_signature": "@Override public double zSum()", "class_method_signature": "AbstractVector.zSum()", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(double value)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(double value)", "full_signature": "@Override public Vector assign(double value)", "class_method_signature": "AbstractVector.assign(double value)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(double[] values)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(double[] values)", "full_signature": "@Override public Vector assign(double[] values)", "class_method_signature": "AbstractVector.assign(double[] values)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(Vector other)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(Vector other)", "full_signature": "@Override public Vector assign(Vector other)", "class_method_signature": "AbstractVector.assign(Vector other)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(DoubleDoubleFunction f, double y)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(DoubleDoubleFunction f, double y)", "full_signature": "@Override public Vector assign(DoubleDoubleFunction f, double y)", "class_method_signature": "AbstractVector.assign(DoubleDoubleFunction f, double y)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(DoubleFunction function)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(DoubleFunction function)", "full_signature": "@Override public Vector assign(DoubleFunction function)", "class_method_signature": "AbstractVector.assign(DoubleFunction function)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(Vector other, DoubleDoubleFunction function)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(Vector other, DoubleDoubleFunction function)", "full_signature": "@Override public Vector assign(Vector other, DoubleDoubleFunction function)", "class_method_signature": "AbstractVector.assign(Vector other, DoubleDoubleFunction function)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(Vector other)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix cross(Vector other)", "full_signature": "@Override public Matrix cross(Vector other)", "class_method_signature": "AbstractVector.cross(Vector other)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int size()", "full_signature": "@Override public final int size()", "class_method_signature": "AbstractVector.size()", "testcase": false, "constructor": false}, {"identifier": "asFormatString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String asFormatString()", "full_signature": "@Override public String asFormatString()", "class_method_signature": "AbstractVector.asFormatString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractVector.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AbstractVector.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractVector.toString()", "testcase": false, "constructor": false}], "file": "math/src/main/java/org/apache/mahout/math/AbstractVector.java"}, "focal_method": {"identifier": "set", "parameters": "(int index, double value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void set(int index, double value) {\n    if (index < 0 || index >= size) {\n      throw new IndexException(index, size);\n    }\n    setQuick(index, value);\n  }", "signature": "void set(int index, double value)", "full_signature": "@Override public void set(int index, double value)", "class_method_signature": "AbstractVector.set(int index, double value)", "testcase": false, "constructor": false, "invocations": ["setQuick"]}, "repository": {"repo_id": 336330, "url": "https://github.com/jakemannix/Mahout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 41087, "license": "licensed"}}