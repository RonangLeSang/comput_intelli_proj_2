{"test_class": {"identifier": "MockNatsTest", "superclass": "", "interfaces": "", "fields": [], "file": "client/src/test/java/nats/client/MockNatsTest.java"}, "test_case": {"identifier": "request", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void request() throws Exception {\n\t\tfinal Nats nats = new MockNats();\n\t\tfinal String subject = \"test\";\n\t\tfinal String response = \"This is a response.\";\n\t\tnats.subscribe(subject, new MessageHandler() {\n\t\t\t@Override\n\t\t\tpublic void onMessage(Message message) {\n\t\t\t\tmessage.reply(response);\n\t\t\t}\n\t\t});\n\n\t\tfinal boolean[] flag = new boolean[] { false };\n\t\tnats.request(subject, 1, TimeUnit.SECONDS, new MessageHandler() {\n\t\t\t@Override\n\t\t\tpublic void onMessage(Message message) {\n\t\t\t\tAssert.assertEquals(message.getBody(), response);\n\t\t\t\tflag[0] = true;\n\t\t\t}\n\t\t});\n\n\t\tAssert.assertTrue(flag[0], \"Request response handler was not invoked.\");\n\t}", "signature": "void request()", "full_signature": "@Test public void request()", "class_method_signature": "MockNatsTest.request()", "testcase": true, "constructor": false, "invocations": ["subscribe", "reply", "request", "assertEquals", "getBody", "assertTrue"]}, "focal_class": {"identifier": "MockNats", "superclass": "", "interfaces": "implements Nats", "fields": [{"original_string": "private volatile boolean connected = true;", "modifier": "private volatile", "type": "boolean", "declarator": "connected = true", "var_name": "connected"}, {"original_string": "private final Map<String, Collection<DefaultSubscription>> subscriptions = new HashMap<>();", "modifier": "private final", "type": "Map<String, Collection<DefaultSubscription>>", "declarator": "subscriptions = new HashMap<>()", "var_name": "subscriptions"}, {"original_string": "private final ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1);", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduledExecutorService = new ScheduledThreadPoolExecutor(1)", "var_name": "scheduledExecutorService"}, {"original_string": "private final Executor executor = new Executor() {\n\t\t\tprivate final Logger logger = LoggerFactory.getLogger(getClass());\n\t\t\t@Override\n\t\t\tpublic void execute(Runnable command) {\n\t\t\t\ttry {\n\t\t\t\t\tcommand.run();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.error(\"Error invoking callback\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t};", "modifier": "private final", "type": "Executor", "declarator": "executor = new Executor() {\n\t\t\tprivate final Logger logger = LoggerFactory.getLogger(getClass());\n\t\t\t@Override\n\t\t\tpublic void execute(Runnable command) {\n\t\t\t\ttry {\n\t\t\t\t\tcommand.run();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.error(\"Error invoking callback\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}", "var_name": "executor"}], "methods": [{"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "MockNats.isConnected()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "MockNats.isClosed()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MockNats.close()", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String subject)", "modifiers": "@Override public", "return": "void", "signature": "void publish(String subject)", "full_signature": "@Override public void publish(String subject)", "class_method_signature": "MockNats.publish(String subject)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String subject, String body)", "modifiers": "@Override public", "return": "void", "signature": "void publish(String subject, String body)", "full_signature": "@Override public void publish(String subject, String body)", "class_method_signature": "MockNats.publish(String subject, String body)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String subject, String body, String replyTo)", "modifiers": "@Override public", "return": "void", "signature": "void publish(String subject, String body, String replyTo)", "full_signature": "@Override public void publish(String subject, String body, String replyTo)", "class_method_signature": "MockNats.publish(String subject, String body, String replyTo)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String subject, long period, TimeUnit unit)", "modifiers": "@Override public", "return": "Registration", "signature": "Registration publish(String subject, long period, TimeUnit unit)", "full_signature": "@Override public Registration publish(String subject, long period, TimeUnit unit)", "class_method_signature": "MockNats.publish(String subject, long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String subject, String body, long period, TimeUnit unit)", "modifiers": "@Override public", "return": "Registration", "signature": "Registration publish(String subject, String body, long period, TimeUnit unit)", "full_signature": "@Override public Registration publish(String subject, String body, long period, TimeUnit unit)", "class_method_signature": "MockNats.publish(String subject, String body, long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(final String subject, final String body, final String replyTo, long period, TimeUnit unit)", "modifiers": "@Override public", "return": "Registration", "signature": "Registration publish(final String subject, final String body, final String replyTo, long period, TimeUnit unit)", "full_signature": "@Override public Registration publish(final String subject, final String body, final String replyTo, long period, TimeUnit unit)", "class_method_signature": "MockNats.publish(final String subject, final String body, final String replyTo, long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(String subject, MessageHandler... messageHandlers)", "modifiers": "@Override public", "return": "Subscription", "signature": "Subscription subscribe(String subject, MessageHandler... messageHandlers)", "full_signature": "@Override public Subscription subscribe(String subject, MessageHandler... messageHandlers)", "class_method_signature": "MockNats.subscribe(String subject, MessageHandler... messageHandlers)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(String subject, String queueGroup, MessageHandler... messageHandlers)", "modifiers": "@Override public", "return": "Subscription", "signature": "Subscription subscribe(String subject, String queueGroup, MessageHandler... messageHandlers)", "full_signature": "@Override public Subscription subscribe(String subject, String queueGroup, MessageHandler... messageHandlers)", "class_method_signature": "MockNats.subscribe(String subject, String queueGroup, MessageHandler... messageHandlers)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(String subject, Integer maxMessages, MessageHandler... messageHandlers)", "modifiers": "@Override public", "return": "Subscription", "signature": "Subscription subscribe(String subject, Integer maxMessages, MessageHandler... messageHandlers)", "full_signature": "@Override public Subscription subscribe(String subject, Integer maxMessages, MessageHandler... messageHandlers)", "class_method_signature": "MockNats.subscribe(String subject, Integer maxMessages, MessageHandler... messageHandlers)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(String subject, String queueGroup, Integer maxMessages, MessageHandler... messageHandlers)", "modifiers": "@Override public", "return": "Subscription", "signature": "Subscription subscribe(String subject, String queueGroup, Integer maxMessages, MessageHandler... messageHandlers)", "full_signature": "@Override public Subscription subscribe(String subject, String queueGroup, Integer maxMessages, MessageHandler... messageHandlers)", "class_method_signature": "MockNats.subscribe(String subject, String queueGroup, Integer maxMessages, MessageHandler... messageHandlers)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "modifiers": "@Override public", "return": "Request", "signature": "Request request(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "full_signature": "@Override public Request request(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "class_method_signature": "MockNats.request(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(String subject, String message, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "modifiers": "@Override public", "return": "Request", "signature": "Request request(String subject, String message, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "full_signature": "@Override public Request request(String subject, String message, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "class_method_signature": "MockNats.request(String subject, String message, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(final String subject, String message, long timeout, TimeUnit unit, final Integer maxReplies, MessageHandler... messageHandlers)", "modifiers": "@Override public", "return": "Request", "signature": "Request request(final String subject, String message, long timeout, TimeUnit unit, final Integer maxReplies, MessageHandler... messageHandlers)", "full_signature": "@Override public Request request(final String subject, String message, long timeout, TimeUnit unit, final Integer maxReplies, MessageHandler... messageHandlers)", "class_method_signature": "MockNats.request(final String subject, String message, long timeout, TimeUnit unit, final Integer maxReplies, MessageHandler... messageHandlers)", "testcase": false, "constructor": false}], "file": "client/src/main/java/nats/client/MockNats.java"}, "focal_method": {"identifier": "request", "parameters": "(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "modifiers": "@Override public", "return": "Request", "body": "@Override\n\tpublic Request request(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers) {\n\t\treturn request(subject, \"\", timeout, unit, messageHandlers);\n\t}", "signature": "Request request(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "full_signature": "@Override public Request request(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "class_method_signature": "MockNats.request(String subject, long timeout, TimeUnit unit, MessageHandler... messageHandlers)", "testcase": false, "constructor": false, "invocations": ["request"]}, "repository": {"repo_id": 3817774, "url": "https://github.com/cloudfoundry-community/java-nats", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 47, "size": 726, "license": "licensed"}}