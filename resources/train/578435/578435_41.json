{"test_class": {"identifier": "TestHdfsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SAMPLE_DIR_LOCATION =\n    \"src/test/resources/com/twitter/elephantbird/util/\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_DIR_LOCATION =\n    \"src/test/resources/com/twitter/elephantbird/util/\"", "var_name": "SAMPLE_DIR_LOCATION"}, {"original_string": "private static final Pattern SAMPLE_DIR_PATTERN =\n      Pattern.compile(\".*/\" + SAMPLE_DIR_LOCATION + \"(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "SAMPLE_DIR_PATTERN =\n      Pattern.compile(\".*/\" + SAMPLE_DIR_LOCATION + \"(.*)\")", "var_name": "SAMPLE_DIR_PATTERN"}, {"original_string": "private static final Function<Path, String> PATH_TO_RELATIVE_STRING =\n    new Function<Path, String>() {\n      @Override\n      public String apply(Path path) {\n        Matcher m = SAMPLE_DIR_PATTERN.matcher(path.toString());\n        m.matches();\n        return m.group(1);\n      }\n    };", "modifier": "private static final", "type": "Function<Path, String>", "declarator": "PATH_TO_RELATIVE_STRING =\n    new Function<Path, String>() {\n      @Override\n      public String apply(Path path) {\n        Matcher m = SAMPLE_DIR_PATTERN.matcher(path.toString());\n        m.matches();\n        return m.group(1);\n      }\n    }", "var_name": "PATH_TO_RELATIVE_STRING"}, {"original_string": "private static final PathFilter SKIP_A_PATH_FILTER =\n    new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        return !path.getName().equals(\"a.txt\");\n      }\n    };", "modifier": "private static final", "type": "PathFilter", "declarator": "SKIP_A_PATH_FILTER =\n    new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        return !path.getName().equals(\"a.txt\");\n      }\n    }", "var_name": "SKIP_A_PATH_FILTER"}], "file": "core/src/test/java/com/twitter/elephantbird/util/TestHdfsUtils.java"}, "test_case": {"identifier": "testGetDirectorySizeWithFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetDirectorySizeWithFilter() throws Exception {\n    Path p = new Path(SAMPLE_DIR_LOCATION + \"sample_dir\");\n    long size = HdfsUtils.getDirectorySize(\n        p,\n        p.getFileSystem(new Configuration()),\n        PathFilters.ACCEPT_ALL_PATHS_FILTER);\n    assertEquals(18, size);\n\n    size = HdfsUtils.getDirectorySize(\n      p,\n      p.getFileSystem(new Configuration()),\n      SKIP_A_PATH_FILTER);\n    assertEquals(16, size);\n  }", "signature": "void testGetDirectorySizeWithFilter()", "full_signature": "@Test public void testGetDirectorySizeWithFilter()", "class_method_signature": "TestHdfsUtils.testGetDirectorySizeWithFilter()", "testcase": true, "constructor": false, "invocations": ["getDirectorySize", "getFileSystem", "assertEquals", "getDirectorySize", "getFileSystem", "assertEquals"]}, "focal_class": {"identifier": "HdfsUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "HdfsUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " HdfsUtils()", "full_signature": "private  HdfsUtils()", "class_method_signature": "HdfsUtils.HdfsUtils()", "testcase": false, "constructor": true}, {"identifier": "walkPath", "parameters": "(Path path,\n                              FileSystem fs,\n                              PathFilter filter,\n                              PathVisitor visitor)", "modifiers": "public static", "return": "void", "signature": "void walkPath(Path path,\n                              FileSystem fs,\n                              PathFilter filter,\n                              PathVisitor visitor)", "full_signature": "public static void walkPath(Path path,\n                              FileSystem fs,\n                              PathFilter filter,\n                              PathVisitor visitor)", "class_method_signature": "HdfsUtils.walkPath(Path path,\n                              FileSystem fs,\n                              PathFilter filter,\n                              PathVisitor visitor)", "testcase": false, "constructor": false}, {"identifier": "collectPaths", "parameters": "(Path path,\n                                  FileSystem fs,\n                                  PathFilter filter,\n                                  final List<Path> accumulator)", "modifiers": "public static", "return": "void", "signature": "void collectPaths(Path path,\n                                  FileSystem fs,\n                                  PathFilter filter,\n                                  final List<Path> accumulator)", "full_signature": "public static void collectPaths(Path path,\n                                  FileSystem fs,\n                                  PathFilter filter,\n                                  final List<Path> accumulator)", "class_method_signature": "HdfsUtils.collectPaths(Path path,\n                                  FileSystem fs,\n                                  PathFilter filter,\n                                  final List<Path> accumulator)", "testcase": false, "constructor": false}, {"identifier": "getDirectorySize", "parameters": "(Path path, FileSystem fs, PathFilter filter)", "modifiers": "public static", "return": "long", "signature": "long getDirectorySize(Path path, FileSystem fs, PathFilter filter)", "full_signature": "public static long getDirectorySize(Path path, FileSystem fs, PathFilter filter)", "class_method_signature": "HdfsUtils.getDirectorySize(Path path, FileSystem fs, PathFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getDirectorySize", "parameters": "(Path path, FileSystem fs)", "modifiers": "public static", "return": "long", "signature": "long getDirectorySize(Path path, FileSystem fs)", "full_signature": "public static long getDirectorySize(Path path, FileSystem fs)", "class_method_signature": "HdfsUtils.getDirectorySize(Path path, FileSystem fs)", "testcase": false, "constructor": false}, {"identifier": "expandGlobs", "parameters": "(List<String> pathsWithGlobs, Configuration conf)", "modifiers": "public static", "return": "List<Path>", "signature": "List<Path> expandGlobs(List<String> pathsWithGlobs, Configuration conf)", "full_signature": "public static List<Path> expandGlobs(List<String> pathsWithGlobs, Configuration conf)", "class_method_signature": "HdfsUtils.expandGlobs(List<String> pathsWithGlobs, Configuration conf)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/twitter/elephantbird/util/HdfsUtils.java"}, "focal_method": {"identifier": "getDirectorySize", "parameters": "(Path path, FileSystem fs, PathFilter filter)", "modifiers": "public static", "return": "long", "body": "public static long getDirectorySize(Path path, FileSystem fs, PathFilter filter)\n      throws IOException {\n    PathSizeVisitor visitor = new PathSizeVisitor();\n    PathFilter composite = new PathFilters.CompositePathFilter(\n      PathFilters.newExcludeDirectoriesFilter(fs.getConf()),\n      filter);\n    walkPath(path, fs, composite, visitor);\n    return visitor.getSize();\n  }", "signature": "long getDirectorySize(Path path, FileSystem fs, PathFilter filter)", "full_signature": "public static long getDirectorySize(Path path, FileSystem fs, PathFilter filter)", "class_method_signature": "HdfsUtils.getDirectorySize(Path path, FileSystem fs, PathFilter filter)", "testcase": false, "constructor": false, "invocations": ["newExcludeDirectoriesFilter", "getConf", "walkPath", "getSize"]}, "repository": {"repo_id": 578435, "url": "https://github.com/twitter/elephant-bird", "language": "Java", "is_fork": false, "fork_count": 385, "stargazer_count": 1096, "size": 62266, "license": "licensed"}}