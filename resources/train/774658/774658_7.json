{"test_class": {"identifier": "ConfigurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "softwaremill-conf/src/test/java/com/softwaremill/common/conf/ConfigurationTest.java"}, "test_case": {"identifier": "shouldGetDefaultBooleanValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetDefaultBooleanValue() {\n        Config<String, String> config = Configuration.get(\"test1\");\n        boolean value = config.getAsBoolean(\"nonexistingkey\", false);\n        assertThat(value).isEqualTo(false);\n    }", "signature": "void shouldGetDefaultBooleanValue()", "full_signature": "@Test public void shouldGetDefaultBooleanValue()", "class_method_signature": "ConfigurationTest.shouldGetDefaultBooleanValue()", "testcase": true, "constructor": false, "invocations": ["get", "getAsBoolean", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "Configuration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Configuration.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Configuration.class)", "var_name": "log"}, {"original_string": "private static Map<String, Config<String, String>> configurations =\n            new ConcurrentHashMap<String, Config<String, String>>();", "modifier": "private static", "type": "Map<String, Config<String, String>>", "declarator": "configurations =\n            new ConcurrentHashMap<String, Config<String, String>>()", "var_name": "configurations"}, {"original_string": "private static List<PropertiesProvider> propertyProviders = new ArrayList<PropertiesProvider>();", "modifier": "private static", "type": "List<PropertiesProvider>", "declarator": "propertyProviders = new ArrayList<PropertiesProvider>()", "var_name": "propertyProviders"}, {"original_string": "private static ConfigurationValueCoder valueCoder = new ConfigurationValueCoder();", "modifier": "private static", "type": "ConfigurationValueCoder", "declarator": "valueCoder = new ConfigurationValueCoder()", "var_name": "valueCoder"}], "methods": [{"identifier": "get", "parameters": "(String name, boolean readSystemPropertiesOnNull)", "modifiers": "public static", "return": "Config<String, String>", "signature": "Config<String, String> get(String name, boolean readSystemPropertiesOnNull)", "full_signature": "public static Config<String, String> get(String name, boolean readSystemPropertiesOnNull)", "class_method_signature": "Configuration.get(String name, boolean readSystemPropertiesOnNull)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String name)", "modifiers": "public static", "return": "Config<String, String>", "signature": "Config<String, String> get(String name)", "full_signature": "public static Config<String, String> get(String name)", "class_method_signature": "Configuration.get(String name)", "testcase": false, "constructor": false}, {"identifier": "registerPropertiesProvider", "parameters": "(Class<? extends PropertiesProvider> providerClass)", "modifiers": "public static", "return": "void", "signature": "void registerPropertiesProvider(Class<? extends PropertiesProvider> providerClass)", "full_signature": "public static void registerPropertiesProvider(Class<? extends PropertiesProvider> providerClass)", "class_method_signature": "Configuration.registerPropertiesProvider(Class<? extends PropertiesProvider> providerClass)", "testcase": false, "constructor": false}, {"identifier": "registerPropertiesProvider", "parameters": "(PropertiesProvider provider)", "modifiers": "public static", "return": "void", "signature": "void registerPropertiesProvider(PropertiesProvider provider)", "full_signature": "public static void registerPropertiesProvider(PropertiesProvider provider)", "class_method_signature": "Configuration.registerPropertiesProvider(PropertiesProvider provider)", "testcase": false, "constructor": false}, {"identifier": "setConfiguration", "parameters": "(String configurationName, ImmutableMap<String, String> properties)", "modifiers": "public static", "return": "void", "signature": "void setConfiguration(String configurationName, ImmutableMap<String, String> properties)", "full_signature": "public static void setConfiguration(String configurationName, ImmutableMap<String, String> properties)", "class_method_signature": "Configuration.setConfiguration(String configurationName, ImmutableMap<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "clearConfiguration", "parameters": "(String configurationName)", "modifiers": "public static", "return": "void", "signature": "void clearConfiguration(String configurationName)", "full_signature": "public static void clearConfiguration(String configurationName)", "class_method_signature": "Configuration.clearConfiguration(String configurationName)", "testcase": false, "constructor": false}, {"identifier": "setFromFile", "parameters": "(String configurationName, File file)", "modifiers": "public static", "return": "void", "signature": "void setFromFile(String configurationName, File file)", "full_signature": "public static void setFromFile(String configurationName, File file)", "class_method_signature": "Configuration.setFromFile(String configurationName, File file)", "testcase": false, "constructor": false}, {"identifier": "loadFromURL", "parameters": "(URL url)", "modifiers": "static", "return": "ImmutableMap<String, String>", "signature": "ImmutableMap<String, String> loadFromURL(URL url)", "full_signature": "static ImmutableMap<String, String> loadFromURL(URL url)", "class_method_signature": "Configuration.loadFromURL(URL url)", "testcase": false, "constructor": false}], "file": "softwaremill-conf/src/main/java/com/softwaremill/common/conf/Configuration.java"}, "focal_method": {"identifier": "get", "parameters": "(String name, boolean readSystemPropertiesOnNull)", "modifiers": "public static", "return": "Config<String, String>", "body": "public static Config<String, String> get(String name, boolean readSystemPropertiesOnNull) {\n        if (configurations.containsKey(name)) {\n            return configurations.get(name);\n        }\n\n        for (PropertiesProvider propertyProvider : propertyProviders) {\n            Map<String, String> props = propertyProvider.lookupProperties(name);\n            if (props != null) {\n                log.info(\"Loaded configuration for: \" + name + \" using \" + propertyProvider.getClass().getName());\n                Config<String, String> conf;\n                if (readSystemPropertiesOnNull) {\n                    conf = new SystemPropertiesMapWrapper(props);\n                } else {\n                    conf = new MapWrapper(props);\n                }\n                configurations.put(name, conf);\n                return conf;\n            }\n        }\n\n        throw new RuntimeException(\"No configuration found for: \" + name);\n    }", "signature": "Config<String, String> get(String name, boolean readSystemPropertiesOnNull)", "full_signature": "public static Config<String, String> get(String name, boolean readSystemPropertiesOnNull)", "class_method_signature": "Configuration.get(String name, boolean readSystemPropertiesOnNull)", "testcase": false, "constructor": false, "invocations": ["containsKey", "get", "lookupProperties", "info", "getName", "getClass", "put"]}, "repository": {"repo_id": 774658, "url": "https://github.com/softwaremill/softwaremill-common", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 37, "size": 2765, "license": "licensed"}}