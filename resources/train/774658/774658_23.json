{"test_class": {"identifier": "SystemPropertyProducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_PROPERTY = \"SystemPropertyProducerTest.TEST_PROPERTY\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PROPERTY = \"SystemPropertyProducerTest.TEST_PROPERTY\"", "var_name": "TEST_PROPERTY"}, {"original_string": "private SystemPropertyProducer service = new SystemPropertyProducer();", "modifier": "private", "type": "SystemPropertyProducer", "declarator": "service = new SystemPropertyProducer()", "var_name": "service"}], "file": "softwaremill-cdi/src/test/java/com/softwaremill/common/cdi/sysprops/SystemPropertyProducerTest.java"}, "test_case": {"identifier": "shouldThrowInformativeExceptionForDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldThrowInformativeExceptionForDouble() {\n        // Given\n        System.setProperty(TEST_PROPERTY, \"not a number\");\n\n        // When\n        try {\n            service.produceDoubleSystemProperty(mockInjectionPoint(NOT_SET,\n                    TEST_PROPERTY, NOT_SET));\n        } catch (RuntimeException re) {\n            // Then\n            assertThat(re).hasMessage(\"System property '\" + TEST_PROPERTY + \"'='not a number' is not a valid Double\");\n        }\n    }", "signature": "void shouldThrowInformativeExceptionForDouble()", "full_signature": "@Test public void shouldThrowInformativeExceptionForDouble()", "class_method_signature": "SystemPropertyProducerTest.shouldThrowInformativeExceptionForDouble()", "testcase": true, "constructor": false, "invocations": ["setProperty", "produceDoubleSystemProperty", "mockInjectionPoint", "hasMessage", "assertThat"]}, "focal_class": {"identifier": "SystemPropertyProducer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "produceStringSystemProperty", "parameters": "(InjectionPoint ip)", "modifiers": "@Produces @SystemProperty public", "return": "String", "signature": "String produceStringSystemProperty(InjectionPoint ip)", "full_signature": "@Produces @SystemProperty public String produceStringSystemProperty(InjectionPoint ip)", "class_method_signature": "SystemPropertyProducer.produceStringSystemProperty(InjectionPoint ip)", "testcase": false, "constructor": false}, {"identifier": "produceBooleanSystemProperty", "parameters": "(InjectionPoint ip)", "modifiers": "@Produces @SystemProperty public", "return": "Boolean", "signature": "Boolean produceBooleanSystemProperty(InjectionPoint ip)", "full_signature": "@Produces @SystemProperty public Boolean produceBooleanSystemProperty(InjectionPoint ip)", "class_method_signature": "SystemPropertyProducer.produceBooleanSystemProperty(InjectionPoint ip)", "testcase": false, "constructor": false}, {"identifier": "produceIntegerSystemProperty", "parameters": "(InjectionPoint ip)", "modifiers": "@Produces @SystemProperty public", "return": "Integer", "signature": "Integer produceIntegerSystemProperty(InjectionPoint ip)", "full_signature": "@Produces @SystemProperty public Integer produceIntegerSystemProperty(InjectionPoint ip)", "class_method_signature": "SystemPropertyProducer.produceIntegerSystemProperty(InjectionPoint ip)", "testcase": false, "constructor": false}, {"identifier": "produceDoubleSystemProperty", "parameters": "(InjectionPoint ip)", "modifiers": "@Produces @SystemProperty public", "return": "Double", "signature": "Double produceDoubleSystemProperty(InjectionPoint ip)", "full_signature": "@Produces @SystemProperty public Double produceDoubleSystemProperty(InjectionPoint ip)", "class_method_signature": "SystemPropertyProducer.produceDoubleSystemProperty(InjectionPoint ip)", "testcase": false, "constructor": false}, {"identifier": "produceBigDecimalSystemProperty", "parameters": "(InjectionPoint ip)", "modifiers": "@Produces @SystemProperty public", "return": "BigDecimal", "signature": "BigDecimal produceBigDecimalSystemProperty(InjectionPoint ip)", "full_signature": "@Produces @SystemProperty public BigDecimal produceBigDecimalSystemProperty(InjectionPoint ip)", "class_method_signature": "SystemPropertyProducer.produceBigDecimalSystemProperty(InjectionPoint ip)", "testcase": false, "constructor": false}, {"identifier": "getPropertyKeyName", "parameters": "(SystemProperty config)", "modifiers": "private", "return": "String", "signature": "String getPropertyKeyName(SystemProperty config)", "full_signature": "private String getPropertyKeyName(SystemProperty config)", "class_method_signature": "SystemPropertyProducer.getPropertyKeyName(SystemProperty config)", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "(SystemProperty config)", "modifiers": "private", "return": "String", "signature": "String getDefaultValue(SystemProperty config)", "full_signature": "private String getDefaultValue(SystemProperty config)", "class_method_signature": "SystemPropertyProducer.getDefaultValue(SystemProperty config)", "testcase": false, "constructor": false}, {"identifier": "getConfigAnnotation", "parameters": "(InjectionPoint ip)", "modifiers": "private", "return": "SystemProperty", "signature": "SystemProperty getConfigAnnotation(InjectionPoint ip)", "full_signature": "private SystemProperty getConfigAnnotation(InjectionPoint ip)", "class_method_signature": "SystemPropertyProducer.getConfigAnnotation(InjectionPoint ip)", "testcase": false, "constructor": false}, {"identifier": "parseException", "parameters": "(InjectionPoint ip, Class type)", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException parseException(InjectionPoint ip, Class type)", "full_signature": "private RuntimeException parseException(InjectionPoint ip, Class type)", "class_method_signature": "SystemPropertyProducer.parseException(InjectionPoint ip, Class type)", "testcase": false, "constructor": false}], "file": "softwaremill-cdi/src/main/java/com/softwaremill/common/cdi/sysprops/SystemPropertyProducer.java"}, "focal_method": {"identifier": "produceDoubleSystemProperty", "parameters": "(InjectionPoint ip)", "modifiers": "@Produces @SystemProperty public", "return": "Double", "body": "@Produces\n    @SystemProperty\n    public Double produceDoubleSystemProperty(InjectionPoint ip) {\n        try {\n            return Double.parseDouble(produceStringSystemProperty(ip));\n        } catch (NumberFormatException nfe) {\n            throw parseException(ip, Double.class);\n        }\n    }", "signature": "Double produceDoubleSystemProperty(InjectionPoint ip)", "full_signature": "@Produces @SystemProperty public Double produceDoubleSystemProperty(InjectionPoint ip)", "class_method_signature": "SystemPropertyProducer.produceDoubleSystemProperty(InjectionPoint ip)", "testcase": false, "constructor": false, "invocations": ["parseDouble", "produceStringSystemProperty", "parseException"]}, "repository": {"repo_id": 774658, "url": "https://github.com/softwaremill/softwaremill-common", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 37, "size": 2765, "license": "licensed"}}