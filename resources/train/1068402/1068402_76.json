{"test_class": {"identifier": "EventDescriptorFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "rio-lib/src/test/java/org/rioproject/impl/event/EventDescriptorFactoryTest.java"}, "test_case": {"identifier": "testCreateEventDescriptorsNullClassNames", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testCreateEventDescriptorsNullClassNames() throws Exception {\n        EventDescriptorFactory.createEventDescriptors (null);\n    }", "signature": "void testCreateEventDescriptorsNullClassNames()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testCreateEventDescriptorsNullClassNames()", "class_method_signature": "EventDescriptorFactoryTest.testCreateEventDescriptorsNullClassNames()", "testcase": true, "constructor": false, "invocations": ["createEventDescriptors"]}, "focal_class": {"identifier": "EventDescriptorFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "EventDescriptorFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " EventDescriptorFactory()", "full_signature": "private  EventDescriptorFactory()", "class_method_signature": "EventDescriptorFactory.EventDescriptorFactory()", "testcase": false, "constructor": true}, {"identifier": "createEventDescriptors", "parameters": "(String classpath,\n                                                               String... classNames)", "modifiers": "public static", "return": "List<EventDescriptor>", "signature": "List<EventDescriptor> createEventDescriptors(String classpath,\n                                                               String... classNames)", "full_signature": "public static List<EventDescriptor> createEventDescriptors(String classpath,\n                                                               String... classNames)", "class_method_signature": "EventDescriptorFactory.createEventDescriptors(String classpath,\n                                                               String... classNames)", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "(Class<?> eventClass)", "modifiers": "private static", "return": "Long", "signature": "Long getID(Class<?> eventClass)", "full_signature": "private static Long getID(Class<?> eventClass)", "class_method_signature": "EventDescriptorFactory.getID(Class<?> eventClass)", "testcase": false, "constructor": false}], "file": "rio-lib/src/main/java/org/rioproject/impl/event/EventDescriptorFactory.java"}, "focal_method": {"identifier": "createEventDescriptors", "parameters": "(String classpath,\n                                                               String... classNames)", "modifiers": "public static", "return": "List<EventDescriptor>", "body": "public static List<EventDescriptor> createEventDescriptors(String classpath,\n                                                               String... classNames) throws MalformedURLException,\n                                                                                            ResolverException,\n                                                                                            ClassNotFoundException,\n                                                                                            URISyntaxException {\n        if(classNames==null)\n            throw new IllegalArgumentException(\"classNames must not be null\");\n        if(classNames.length==0)\n            throw new IllegalArgumentException(\"classNames must not be empty\");\n        final List<EventDescriptor> eventDescriptors = new ArrayList<EventDescriptor>();\n        if (classpath != null) {\n            ClassAnnotator annotator = null;\n            String[] classPath;\n            if (Artifact.isArtifact(classpath)) {\n                ArtifactURLConfiguration artifactURLConfiguration = new ArtifactURLConfiguration(classpath);\n                StringBuilder artifactBuilder = new StringBuilder();\n                artifactBuilder.append(\"artifact:\").append(artifactURLConfiguration.getArtifact());\n                annotator = new ClassAnnotator(new URL[]{new URL(artifactBuilder.toString())});\n                String[] cp = ResolverHelper.getResolver().getClassPathFor(classpath);\n                classPath = new String[cp.length];\n                for (int i = 0; i < classPath.length; i++) {\n                    String s = cp[i].startsWith(\"file:\") ? cp[i] : \"file:\" + cp[i];\n                    classPath[i] = ResolverHelper.handleWindows(s);\n                }\n\n            } else {\n                classPath = StringUtil.toArray(classpath, \" ,\");\n            }\n            URL[] urls = new URL[classPath.length];\n            for (int i = 0; i < classPath.length; i++) {\n                urls[i] = new URL(classPath[i]);\n            }\n            URLClassLoader loader;\n            if(annotator!=null) {\n                loader = new ServiceClassLoader(ServiceClassLoader.getURIs(urls),\n                                                annotator,\n                                                Thread.currentThread().getContextClassLoader());\n            } else {\n                loader = new URLClassLoader(urls, Thread.currentThread().getContextClassLoader());\n            }\n            for (String className : classNames) {\n                Class<?> cl = loader.loadClass(className);\n                eventDescriptors.add(new EventDescriptor(cl, getID(cl)));\n            }\n        } else {\n            for (String className : classNames) {\n                Class<?> cl = Thread.currentThread().getContextClassLoader().loadClass(className);\n                eventDescriptors.add(new EventDescriptor(cl, getID(cl)));\n            }\n        }\n        return eventDescriptors;\n    }", "signature": "List<EventDescriptor> createEventDescriptors(String classpath,\n                                                               String... classNames)", "full_signature": "public static List<EventDescriptor> createEventDescriptors(String classpath,\n                                                               String... classNames)", "class_method_signature": "EventDescriptorFactory.createEventDescriptors(String classpath,\n                                                               String... classNames)", "testcase": false, "constructor": false, "invocations": ["isArtifact", "append", "append", "getArtifact", "toString", "getClassPathFor", "getResolver", "startsWith", "handleWindows", "toArray", "getURIs", "getContextClassLoader", "currentThread", "getContextClassLoader", "currentThread", "loadClass", "add", "getID", "loadClass", "getContextClassLoader", "currentThread", "add", "getID"]}, "repository": {"repo_id": 1068402, "url": "https://github.com/dreedyman/Rio", "stars": 20, "created": "11/10/2010 2:26:52 PM +00:00", "updates": "2019-10-24T20:28:18+00:00", "fork": "False", "license": "licensed"}}