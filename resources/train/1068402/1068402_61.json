{"test_class": {"identifier": "AssociationInjectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "rio-lib/src/test/java/org/rioproject/impl/associations/AssociationInjectorTest.java"}, "test_case": {"identifier": "testInjectProxyWithListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInjectProxyWithListener() {\n        Association<Dummy> a = new DefaultAssociation<Dummy>(createAssociationDescriptor());\n        Target1 t = new Target1();\n        AssociationInjector<Dummy> ai = new AssociationInjector<Dummy>(t);\n        AL aL = new AL();\n        a.registerAssociationServiceListener(aL);\n        for(int i=0; i<10; i++) {\n            Dummy dummy = new DummyImpl(i);\n            a.addServiceItem(AssociationUtils.makeServiceItem(dummy));\n            ai.discovered(a, dummy);\n        }\n        Assert.assertEquals(1, t.injectedCount);\n        Assert.assertEquals(10, aL.addedServiceCount.get());\n        Assert.assertEquals(0, aL.removedServiceCount.get());\n        Collection<Dummy> dummies = a.getServices();\n        for(Dummy d: dummies)\n            a.removeService(d);\n        Assert.assertEquals(10, aL.removedServiceCount.get());\n        Assert.assertEquals(0, a.getServiceCount());\n    }", "signature": "void testInjectProxyWithListener()", "full_signature": "@Test public void testInjectProxyWithListener()", "class_method_signature": "AssociationInjectorTest.testInjectProxyWithListener()", "testcase": true, "constructor": false, "invocations": ["createAssociationDescriptor", "registerAssociationServiceListener", "addServiceItem", "makeServiceItem", "discovered", "assertEquals", "assertEquals", "get", "assertEquals", "get", "getServices", "removeService", "assertEquals", "get", "assertEquals", "getServiceCount"]}, "focal_class": {"identifier": "AssociationInjector", "superclass": "", "interfaces": "implements AssociationListener<T>", "fields": [{"original_string": "private Object target;", "modifier": "private", "type": "Object", "declarator": "target", "var_name": "target"}, {"original_string": "private ClassLoader callerCL;", "modifier": "private", "type": "ClassLoader", "declarator": "callerCL", "var_name": "callerCL"}, {"original_string": "private final Map<Association, String> injectedMap = new HashMap<Association, String>();", "modifier": "private final", "type": "Map<Association, String>", "declarator": "injectedMap = new HashMap<Association, String>()", "var_name": "injectedMap"}, {"original_string": "private final Map<Association, AssociationProxy<T>> proxyMap = new HashMap<Association, AssociationProxy<T>>();", "modifier": "private final", "type": "Map<Association, AssociationProxy<T>>", "declarator": "proxyMap = new HashMap<Association, AssociationProxy<T>>()", "var_name": "proxyMap"}, {"original_string": "private String targetPropertyName;", "modifier": "private", "type": "String", "declarator": "targetPropertyName", "var_name": "targetPropertyName"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(AssociationInjector.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AssociationInjector.class)", "var_name": "logger"}], "methods": [{"identifier": "AssociationInjector", "parameters": "(Object target)", "modifiers": "public", "return": "", "signature": " AssociationInjector(Object target)", "full_signature": "public  AssociationInjector(Object target)", "class_method_signature": "AssociationInjector.AssociationInjector(Object target)", "testcase": false, "constructor": true}, {"identifier": "setBackend", "parameters": "(Object target)", "modifiers": "public", "return": "void", "signature": "void setBackend(Object target)", "full_signature": "public void setBackend(Object target)", "class_method_signature": "AssociationInjector.setBackend(Object target)", "testcase": false, "constructor": false}, {"identifier": "setCallerClassLoader", "parameters": "(ClassLoader callerCL)", "modifiers": "public", "return": "void", "signature": "void setCallerClassLoader(ClassLoader callerCL)", "full_signature": "public void setCallerClassLoader(ClassLoader callerCL)", "class_method_signature": "AssociationInjector.setCallerClassLoader(ClassLoader callerCL)", "testcase": false, "constructor": false}, {"identifier": "getCallerClassLoader", "parameters": "()", "modifiers": "private synchronized", "return": "ClassLoader", "signature": "ClassLoader getCallerClassLoader()", "full_signature": "private synchronized ClassLoader getCallerClassLoader()", "class_method_signature": "AssociationInjector.getCallerClassLoader()", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void terminate()", "full_signature": "public void terminate()", "class_method_signature": "AssociationInjector.terminate()", "testcase": false, "constructor": false}, {"identifier": "getInvocationMap", "parameters": "()", "modifiers": "public", "return": "Map<AssociationDescriptor, Long>", "signature": "Map<AssociationDescriptor, Long> getInvocationMap()", "full_signature": "public Map<AssociationDescriptor, Long> getInvocationMap()", "class_method_signature": "AssociationInjector.getInvocationMap()", "testcase": false, "constructor": false}, {"identifier": "setTargetPropertyName", "parameters": "(String targetPropertyName)", "modifiers": "", "return": "void", "signature": "void setTargetPropertyName(String targetPropertyName)", "full_signature": " void setTargetPropertyName(String targetPropertyName)", "class_method_signature": "AssociationInjector.setTargetPropertyName(String targetPropertyName)", "testcase": false, "constructor": false}, {"identifier": "getTargetPropertyName", "parameters": "(Association association)", "modifiers": "private", "return": "String", "signature": "String getTargetPropertyName(Association association)", "full_signature": "private String getTargetPropertyName(Association association)", "class_method_signature": "AssociationInjector.getTargetPropertyName(Association association)", "testcase": false, "constructor": false}, {"identifier": "inject", "parameters": "(Association association, T service)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void inject(Association association, T service)", "full_signature": "@SuppressWarnings(\"unchecked\") private void inject(Association association, T service)", "class_method_signature": "AssociationInjector.inject(Association association, T service)", "testcase": false, "constructor": false}, {"identifier": "getInjectionMethod", "parameters": "(String propertyName)", "modifiers": "private", "return": "Method", "signature": "Method getInjectionMethod(String propertyName)", "full_signature": "private Method getInjectionMethod(String propertyName)", "class_method_signature": "AssociationInjector.getInjectionMethod(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getInjectionArg", "parameters": "(Method method,\n                                   Association association,\n                                   T service)", "modifiers": "private", "return": "Object", "signature": "Object getInjectionArg(Method method,\n                                   Association association,\n                                   T service)", "full_signature": "private Object getInjectionArg(Method method,\n                                   Association association,\n                                   T service)", "class_method_signature": "AssociationInjector.getInjectionArg(Method method,\n                                   Association association,\n                                   T service)", "testcase": false, "constructor": false}, {"identifier": "injectEmpty", "parameters": "(Association<T> association)", "modifiers": "public", "return": "void", "signature": "void injectEmpty(Association<T> association)", "full_signature": "public void injectEmpty(Association<T> association)", "class_method_signature": "AssociationInjector.injectEmpty(Association<T> association)", "testcase": false, "constructor": false}, {"identifier": "discovered", "parameters": "(Association<T> association, T service)", "modifiers": "public", "return": "void", "signature": "void discovered(Association<T> association, T service)", "full_signature": "public void discovered(Association<T> association, T service)", "class_method_signature": "AssociationInjector.discovered(Association<T> association, T service)", "testcase": false, "constructor": false}, {"identifier": "changed", "parameters": "(Association<T> association, T service)", "modifiers": "public", "return": "void", "signature": "void changed(Association<T> association, T service)", "full_signature": "public void changed(Association<T> association, T service)", "class_method_signature": "AssociationInjector.changed(Association<T> association, T service)", "testcase": false, "constructor": false}, {"identifier": "broken", "parameters": "(Association<T> association, T service)", "modifiers": "public", "return": "void", "signature": "void broken(Association<T> association, T service)", "full_signature": "public void broken(Association<T> association, T service)", "class_method_signature": "AssociationInjector.broken(Association<T> association, T service)", "testcase": false, "constructor": false}], "file": "rio-lib/src/main/java/org/rioproject/impl/associations/AssociationInjector.java"}, "focal_method": {"identifier": "discovered", "parameters": "(Association<T> association, T service)", "modifiers": "public", "return": "void", "body": "public void discovered(Association<T> association, T service) {\n        inject(association, service);\n    }", "signature": "void discovered(Association<T> association, T service)", "full_signature": "public void discovered(Association<T> association, T service)", "class_method_signature": "AssociationInjector.discovered(Association<T> association, T service)", "testcase": false, "constructor": false, "invocations": ["inject"]}, "repository": {"repo_id": 1068402, "url": "https://github.com/dreedyman/Rio", "stars": 20, "created": "11/10/2010 2:26:52 PM +00:00", "updates": "2019-10-24T20:28:18+00:00", "fork": "False", "license": "licensed"}}