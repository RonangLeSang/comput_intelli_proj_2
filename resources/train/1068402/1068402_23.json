{"test_class": {"identifier": "StopWatchTest", "superclass": "", "interfaces": "", "fields": [], "file": "rio-lib/src/test/java/org/rioproject/impl/watch/StopWatchTest.java"}, "test_case": {"identifier": "testStartTiming", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartTiming() throws RemoteException {\n        StopWatch watch = new StopWatch(\"watch\");\n\n        Assert.assertEquals(0, watch.getStartTime());\n\n        long prevStartTime = -1;\n        for (int i = 0; i < 10; i++) {\n            Utils.sleep(100);\n            watch.startTiming();\n            long startTime = watch.getStartTime();\n            Assert.assertTrue(startTime >= 0);\n            if (prevStartTime != -1) {\n                Assert.assertTrue(startTime > prevStartTime);\n            }\n            prevStartTime = startTime;\n        }\n\n        checkData(0, watch);\n\n        for (int i = 0; i < 10; i++) {\n            watch.startTiming();\n            Utils.sleep(100);\n            watch.stopTiming();\n            checkData(i + 1, watch);\n        }\n\n        Utils.close(watch.getWatchDataSource());\n    }", "signature": "void testStartTiming()", "full_signature": "@Test public void testStartTiming()", "class_method_signature": "StopWatchTest.testStartTiming()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getStartTime", "sleep", "startTiming", "getStartTime", "assertTrue", "assertTrue", "checkData", "startTiming", "sleep", "stopTiming", "checkData", "close", "getWatchDataSource"]}, "focal_class": {"identifier": "StopWatch", "superclass": "extends ThresholdWatch", "interfaces": "implements StopWatchMBean", "fields": [{"original_string": "public static final String VIEW = \"org.rioproject.watch.ResponseTimeCalculableView\";", "modifier": "public static final", "type": "String", "declarator": "VIEW = \"org.rioproject.watch.ResponseTimeCalculableView\"", "var_name": "VIEW"}, {"original_string": "private final ConcurrentMap <Long, Long> startTimeTable = new ConcurrentHashMap<Long, Long>();", "modifier": "private final", "type": "ConcurrentMap <Long, Long>", "declarator": "startTimeTable = new ConcurrentHashMap<Long, Long>()", "var_name": "startTimeTable"}], "methods": [{"identifier": "StopWatch", "parameters": "(String id)", "modifiers": "public", "return": "", "signature": " StopWatch(String id)", "full_signature": "public  StopWatch(String id)", "class_method_signature": "StopWatch.StopWatch(String id)", "testcase": false, "constructor": true}, {"identifier": "StopWatch", "parameters": "(String id, Configuration config)", "modifiers": "public", "return": "", "signature": " StopWatch(String id, Configuration config)", "full_signature": "public  StopWatch(String id, Configuration config)", "class_method_signature": "StopWatch.StopWatch(String id, Configuration config)", "testcase": false, "constructor": true}, {"identifier": "StopWatch", "parameters": "(WatchDataSource watchDataSource, String id)", "modifiers": "@SuppressWarnings(\"unused\") public", "return": "", "signature": " StopWatch(WatchDataSource watchDataSource, String id)", "full_signature": "@SuppressWarnings(\"unused\") public  StopWatch(WatchDataSource watchDataSource, String id)", "class_method_signature": "StopWatch.StopWatch(WatchDataSource watchDataSource, String id)", "testcase": false, "constructor": true}, {"identifier": "startTiming", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startTiming()", "full_signature": "public void startTiming()", "class_method_signature": "StopWatch.startTiming()", "testcase": false, "constructor": false}, {"identifier": "stopTiming", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopTiming()", "full_signature": "public void stopTiming()", "class_method_signature": "StopWatch.stopTiming()", "testcase": false, "constructor": false}, {"identifier": "stopTiming", "parameters": "(String detail)", "modifiers": "public", "return": "void", "signature": "void stopTiming(String detail)", "full_signature": "public void stopTiming(String detail)", "class_method_signature": "StopWatch.stopTiming(String detail)", "testcase": false, "constructor": false}, {"identifier": "setElapsedTime", "parameters": "(long elapsed)", "modifiers": "public", "return": "void", "signature": "void setElapsedTime(long elapsed)", "full_signature": "public void setElapsedTime(long elapsed)", "class_method_signature": "StopWatch.setElapsedTime(long elapsed)", "testcase": false, "constructor": false}, {"identifier": "setElapsedTime", "parameters": "(long elapsed, String detail)", "modifiers": "public", "return": "void", "signature": "void setElapsedTime(long elapsed, String detail)", "full_signature": "public void setElapsedTime(long elapsed, String detail)", "class_method_signature": "StopWatch.setElapsedTime(long elapsed, String detail)", "testcase": false, "constructor": false}, {"identifier": "setElapsedTime", "parameters": "(long elapsed, long now)", "modifiers": "public", "return": "void", "signature": "void setElapsedTime(long elapsed, long now)", "full_signature": "public void setElapsedTime(long elapsed, long now)", "class_method_signature": "StopWatch.setElapsedTime(long elapsed, long now)", "testcase": false, "constructor": false}, {"identifier": "setElapsedTime", "parameters": "(long elapsed, long now, String detail)", "modifiers": "public", "return": "void", "signature": "void setElapsedTime(long elapsed, long now, String detail)", "full_signature": "public void setElapsedTime(long elapsed, long now, String detail)", "class_method_signature": "StopWatch.setElapsedTime(long elapsed, long now, String detail)", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStartTime()", "full_signature": "public long getStartTime()", "class_method_signature": "StopWatch.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "setStartTime", "parameters": "(long startTime)", "modifiers": "public", "return": "void", "signature": "void setStartTime(long startTime)", "full_signature": "public void setStartTime(long startTime)", "class_method_signature": "StopWatch.setStartTime(long startTime)", "testcase": false, "constructor": false}], "file": "rio-lib/src/main/java/org/rioproject/impl/watch/StopWatch.java"}, "focal_method": {"identifier": "startTiming", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void startTiming() {\n        setStartTime(System.currentTimeMillis());\n    }", "signature": "void startTiming()", "full_signature": "public void startTiming()", "class_method_signature": "StopWatch.startTiming()", "testcase": false, "constructor": false, "invocations": ["setStartTime", "currentTimeMillis"]}, "repository": {"repo_id": 1068402, "url": "https://github.com/dreedyman/Rio", "stars": 20, "created": "11/10/2010 2:26:52 PM +00:00", "updates": "2019-10-24T20:28:18+00:00", "fork": "False", "license": "licensed"}}