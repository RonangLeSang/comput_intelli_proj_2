{"test_class": {"identifier": "DefaultRestFilterChainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private Provider<DefaultRestFilterChain> filterChainProvider;", "modifier": "@Inject\n    private", "type": "Provider<DefaultRestFilterChain>", "declarator": "filterChainProvider", "var_name": "filterChainProvider"}, {"original_string": "@Inject\n    private RestFilterRegistry filterRegistry;", "modifier": "@Inject\n    private", "type": "RestFilterRegistry", "declarator": "filterRegistry", "var_name": "filterRegistry"}], "file": "gwtp-core/gwtp-dispatch-rest/src/test/java/com/gwtplatform/dispatch/rest/client/filter/DefaultRestFilterChainTest.java"}, "test_case": {"identifier": "doFilter_noFilter_executesCommand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doFilter_noFilter_executesCommand() throws Exception {\n        // given\n        RestAction action = mock(RestAction.class);\n        RestCallback callback = mock(RestCallback.class);\n        ExecuteCommand command = mock(ExecuteCommand.class);\n\n        Iterator iterator = mock(Iterator.class);\n        given(filterRegistry.iterator()).willReturn(iterator);\n        given(iterator.hasNext()).willReturn(false);\n\n        DispatchRequest expected = mock(DispatchRequest.class);\n        given(command.execute(same(action), same(callback))).willReturn(expected);\n\n        // when\n        DispatchRequest result = filterChainProvider.get().doFilter(action, callback, command);\n\n        // then\n        assertThat(result).isSameAs(expected);\n    }", "signature": "void doFilter_noFilter_executesCommand()", "full_signature": "@Test public void doFilter_noFilter_executesCommand()", "class_method_signature": "DefaultRestFilterChainTest.doFilter_noFilter_executesCommand()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "willReturn", "given", "iterator", "willReturn", "given", "hasNext", "mock", "willReturn", "given", "execute", "same", "same", "doFilter", "get", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "DefaultRestFilterChain", "superclass": "", "interfaces": "implements RestFilterChain", "fields": [{"original_string": "private final Iterator<Entry<RestContext, RestFilter>> filterIterator;", "modifier": "private final", "type": "Iterator<Entry<RestContext, RestFilter>>", "declarator": "filterIterator", "var_name": "filterIterator"}], "methods": [{"identifier": "DefaultRestFilterChain", "parameters": "(RestFilterRegistry filterRegistry)", "modifiers": "@Inject protected", "return": "", "signature": " DefaultRestFilterChain(RestFilterRegistry filterRegistry)", "full_signature": "@Inject protected  DefaultRestFilterChain(RestFilterRegistry filterRegistry)", "class_method_signature": "DefaultRestFilterChain.DefaultRestFilterChain(RestFilterRegistry filterRegistry)", "testcase": false, "constructor": true}, {"identifier": "doFilter", "parameters": "(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand)", "modifiers": "@Override public", "return": "DispatchRequest", "signature": "DispatchRequest doFilter(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand)", "full_signature": "@Override public DispatchRequest doFilter(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand)", "class_method_signature": "DefaultRestFilterChain.doFilter(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand)", "testcase": false, "constructor": false}], "file": "gwtp-core/gwtp-dispatch-rest/src/main/java/com/gwtplatform/dispatch/rest/client/filter/DefaultRestFilterChain.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand)", "modifiers": "@Override public", "return": "DispatchRequest", "body": "@Override\n    public <R> DispatchRequest doFilter(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand) {\n\n        if (filterIterator.hasNext()) {\n            Entry<RestContext, RestFilter> filterEntry = filterIterator.next();\n            RestContext subjectContext = new RestContext.Builder(action).build();\n\n            if (filterEntry.getKey().equals(subjectContext)) {\n                return filterEntry.getValue().filter(action, resultCallback, executeCommand, this);\n            } else {\n                return doFilter(action, resultCallback, executeCommand);\n            }\n        } else {\n            return executeCommand.execute(action, resultCallback);\n        }\n    }", "signature": "DispatchRequest doFilter(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand)", "full_signature": "@Override public DispatchRequest doFilter(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand)", "class_method_signature": "DefaultRestFilterChain.doFilter(\n            RestAction<R> action,\n            RestCallback<R> resultCallback,\n            ExecuteCommand<RestAction<R>, RestCallback<R>> executeCommand)", "testcase": false, "constructor": false, "invocations": ["hasNext", "next", "build", "equals", "getKey", "filter", "getValue", "doFilter", "execute"]}, "repository": {"repo_id": 5675901, "url": "https://github.com/ArcBees/GWTP", "language": "Java", "is_fork": false, "fork_count": 127, "stargazer_count": 331, "size": 41866, "license": "licensed"}}