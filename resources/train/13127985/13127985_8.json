{"test_class": {"identifier": "AbstractPhantomJsMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BINARY_PATH = \"bin/phantomjs\";", "modifier": "private static final", "type": "String", "declarator": "BINARY_PATH = \"bin/phantomjs\"", "var_name": "BINARY_PATH"}, {"original_string": "private static final String PROPERTY_NAME = \"phantomjs.bin.path\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTY_NAME = \"phantomjs.bin.path\"", "var_name": "PROPERTY_NAME"}, {"original_string": "@Mock\n  private MavenProject project;", "modifier": "@Mock\n  private", "type": "MavenProject", "declarator": "project", "var_name": "project"}, {"original_string": "@Mock\n  private Properties properties;", "modifier": "@Mock\n  private", "type": "Properties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private MockPhantomJsMojo mojo;", "modifier": "private", "type": "MockPhantomJsMojo", "declarator": "mojo", "var_name": "mojo"}], "file": "phantomjs-maven-plugin/src/test/java/com/github/klieber/phantomjs/mojo/AbstractPhantomJsMojoTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExecute() throws MojoFailureException {\n    mojo.execute();\n    verify(mojo).run();\n  }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "AbstractPhantomJsMojoTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["execute", "run", "verify"]}, "focal_class": {"identifier": "AbstractPhantomJsMojo", "superclass": "extends AbstractMojo", "interfaces": "", "fields": [{"original_string": "@Parameter(\n      defaultValue = \"phantomjs.binary\",\n      property = \"phantomjs.propertyName\",\n      required = true\n  )\n  private String propertyName;", "modifier": "@Parameter(\n      defaultValue = \"phantomjs.binary\",\n      property = \"phantomjs.propertyName\",\n      required = true\n  )\n  private", "type": "String", "declarator": "propertyName", "var_name": "propertyName"}, {"original_string": "@Parameter(\n      property = \"phantomjs.binary\"\n  )\n  private String phantomJsBinary;", "modifier": "@Parameter(\n      property = \"phantomjs.binary\"\n  )\n  private", "type": "String", "declarator": "phantomJsBinary", "var_name": "phantomJsBinary"}, {"original_string": "@Parameter(\n      defaultValue = \"false\",\n      property = \"phantomjs.skip\",\n      required = true\n  )\n  private boolean skip;", "modifier": "@Parameter(\n      defaultValue = \"false\",\n      property = \"phantomjs.skip\",\n      required = true\n  )\n  private", "type": "boolean", "declarator": "skip", "var_name": "skip"}, {"original_string": "private final MavenProject mavenProject;", "modifier": "private final", "type": "MavenProject", "declarator": "mavenProject", "var_name": "mavenProject"}], "methods": [{"identifier": "AbstractPhantomJsMojo", "parameters": "(MavenProject mavenProject)", "modifiers": "@Inject public", "return": "", "signature": " AbstractPhantomJsMojo(MavenProject mavenProject)", "full_signature": "@Inject public  AbstractPhantomJsMojo(MavenProject mavenProject)", "class_method_signature": "AbstractPhantomJsMojo.AbstractPhantomJsMojo(MavenProject mavenProject)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void execute()", "full_signature": "public final void execute()", "class_method_signature": "AbstractPhantomJsMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void run()", "full_signature": "protected abstract void run()", "class_method_signature": "AbstractPhantomJsMojo.run()", "testcase": false, "constructor": false}, {"identifier": "getMavenProject", "parameters": "()", "modifiers": "protected", "return": "MavenProject", "signature": "MavenProject getMavenProject()", "full_signature": "protected MavenProject getMavenProject()", "class_method_signature": "AbstractPhantomJsMojo.getMavenProject()", "testcase": false, "constructor": false}, {"identifier": "getPhantomJsBinary", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getPhantomJsBinary()", "full_signature": "protected String getPhantomJsBinary()", "class_method_signature": "AbstractPhantomJsMojo.getPhantomJsBinary()", "testcase": false, "constructor": false}, {"identifier": "getPhantomJsBinaryProperty", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getPhantomJsBinaryProperty()", "full_signature": "protected String getPhantomJsBinaryProperty()", "class_method_signature": "AbstractPhantomJsMojo.getPhantomJsBinaryProperty()", "testcase": false, "constructor": false}, {"identifier": "setPhantomJsBinaryProperty", "parameters": "(String binary)", "modifiers": "protected", "return": "void", "signature": "void setPhantomJsBinaryProperty(String binary)", "full_signature": "protected void setPhantomJsBinaryProperty(String binary)", "class_method_signature": "AbstractPhantomJsMojo.setPhantomJsBinaryProperty(String binary)", "testcase": false, "constructor": false}, {"identifier": "setPhantomJsBinary", "parameters": "(String phantomJsBinary)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setPhantomJsBinary(String phantomJsBinary)", "full_signature": "@VisibleForTesting void setPhantomJsBinary(String phantomJsBinary)", "class_method_signature": "AbstractPhantomJsMojo.setPhantomJsBinary(String phantomJsBinary)", "testcase": false, "constructor": false}, {"identifier": "setPropertyName", "parameters": "(String propertyName)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setPropertyName(String propertyName)", "full_signature": "@VisibleForTesting void setPropertyName(String propertyName)", "class_method_signature": "AbstractPhantomJsMojo.setPropertyName(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "setSkip", "parameters": "(boolean skip)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setSkip(boolean skip)", "full_signature": "@VisibleForTesting void setSkip(boolean skip)", "class_method_signature": "AbstractPhantomJsMojo.setSkip(boolean skip)", "testcase": false, "constructor": false}], "file": "phantomjs-maven-plugin/src/main/java/com/github/klieber/phantomjs/mojo/AbstractPhantomJsMojo.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "public final", "return": "void", "body": "public final void execute() throws MojoFailureException {\n    if (!skip) {\n      this.run();\n    }\n  }", "signature": "void execute()", "full_signature": "public final void execute()", "class_method_signature": "AbstractPhantomJsMojo.execute()", "testcase": false, "constructor": false, "invocations": ["run"]}, "repository": {"repo_id": 13127985, "url": "https://github.com/klieber/phantomjs-maven-plugin", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 62, "size": 1863, "license": "licensed"}}