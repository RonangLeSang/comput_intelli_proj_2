{"test_class": {"identifier": "PhantomJsInstallerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXTRACT_TO_PATH = \"phantomjs\";", "modifier": "private static final", "type": "String", "declarator": "EXTRACT_TO_PATH = \"phantomjs\"", "var_name": "EXTRACT_TO_PATH"}, {"original_string": "private File phantomJsBinary;", "modifier": "private", "type": "File", "declarator": "phantomJsBinary", "var_name": "phantomJsBinary"}, {"original_string": "private File outputDirectory;", "modifier": "private", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}, {"original_string": "@Mock\n  private Archive archive;", "modifier": "@Mock\n  private", "type": "Archive", "declarator": "archive", "var_name": "archive"}, {"original_string": "@Mock\n  private File archiveFile;", "modifier": "@Mock\n  private", "type": "File", "declarator": "archiveFile", "var_name": "archiveFile"}, {"original_string": "@Mock\n  private DownloaderFactory downloaderFactory;", "modifier": "@Mock\n  private", "type": "DownloaderFactory", "declarator": "downloaderFactory", "var_name": "downloaderFactory"}, {"original_string": "@Mock\n  private Downloader downloader;", "modifier": "@Mock\n  private", "type": "Downloader", "declarator": "downloader", "var_name": "downloader"}, {"original_string": "@Mock\n  private ArchiveExtractor extractor;", "modifier": "@Mock\n  private", "type": "ArchiveExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "@Mock\n  private PhantomJsResolverOptions options;", "modifier": "@Mock\n  private", "type": "PhantomJsResolverOptions", "declarator": "options", "var_name": "options"}, {"original_string": "@Mock\n  private RepositoryDetails repositoryDetails;", "modifier": "@Mock\n  private", "type": "RepositoryDetails", "declarator": "repositoryDetails", "var_name": "repositoryDetails"}, {"original_string": "@Captor\n  private ArgumentCaptor<File> extractToFile;", "modifier": "@Captor\n  private", "type": "ArgumentCaptor<File>", "declarator": "extractToFile", "var_name": "extractToFile"}, {"original_string": "@Rule\n  public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private Installer phantomJsInstaller;", "modifier": "private", "type": "Installer", "declarator": "phantomJsInstaller", "var_name": "phantomJsInstaller"}], "file": "phantomjs-maven-core/src/test/java/com/github/klieber/phantomjs/install/PhantomJsInstallerTest.java"}, "test_case": {"identifier": "shouldHandleDownloadException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldHandleDownloadException() throws Exception {\n\n    when(archive.getPathToExecutable()).thenReturn(EXTRACT_TO_PATH);\n    when(downloader.download(archive)).thenThrow(new DownloadException(\"error\"));\n\n    assertThatThrownBy(() -> phantomJsInstaller.install(archive))\n      .isInstanceOf(InstallationException.class);\n  }", "signature": "void shouldHandleDownloadException()", "full_signature": "@Test public void shouldHandleDownloadException()", "class_method_signature": "PhantomJsInstallerTest.shouldHandleDownloadException()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getPathToExecutable", "thenThrow", "when", "download", "isInstanceOf", "assertThatThrownBy", "install"]}, "focal_class": {"identifier": "PhantomJsInstaller", "superclass": "", "interfaces": "implements Installer", "fields": [{"original_string": "private static final String UNABLE_TO_INSTALL = \"Unable to install phantomjs.\";", "modifier": "private static final", "type": "String", "declarator": "UNABLE_TO_INSTALL = \"Unable to install phantomjs.\"", "var_name": "UNABLE_TO_INSTALL"}, {"original_string": "private final Downloader downloader;", "modifier": "private final", "type": "Downloader", "declarator": "downloader", "var_name": "downloader"}, {"original_string": "private final ArchiveExtractor extractor;", "modifier": "private final", "type": "ArchiveExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private final File outputDirectory;", "modifier": "private final", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}], "methods": [{"identifier": "PhantomJsInstaller", "parameters": "(Downloader downloader, ArchiveExtractor extractor, File outputDirectory)", "modifiers": "public", "return": "", "signature": " PhantomJsInstaller(Downloader downloader, ArchiveExtractor extractor, File outputDirectory)", "full_signature": "public  PhantomJsInstaller(Downloader downloader, ArchiveExtractor extractor, File outputDirectory)", "class_method_signature": "PhantomJsInstaller.PhantomJsInstaller(Downloader downloader, ArchiveExtractor extractor, File outputDirectory)", "testcase": false, "constructor": true}, {"identifier": "install", "parameters": "(Archive archive)", "modifiers": "@Override public", "return": "String", "signature": "String install(Archive archive)", "full_signature": "@Override public String install(Archive archive)", "class_method_signature": "PhantomJsInstaller.install(Archive archive)", "testcase": false, "constructor": false}, {"identifier": "downloadAndExtract", "parameters": "(Archive executableArchive,\n                                  String executable,\n                                  File extractTo)", "modifiers": "private", "return": "void", "signature": "void downloadAndExtract(Archive executableArchive,\n                                  String executable,\n                                  File extractTo)", "full_signature": "private void downloadAndExtract(Archive executableArchive,\n                                  String executable,\n                                  File extractTo)", "class_method_signature": "PhantomJsInstaller.downloadAndExtract(Archive executableArchive,\n                                  String executable,\n                                  File extractTo)", "testcase": false, "constructor": false}], "file": "phantomjs-maven-core/src/main/java/com/github/klieber/phantomjs/install/PhantomJsInstaller.java"}, "focal_method": {"identifier": "install", "parameters": "(Archive archive)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String install(Archive archive) throws InstallationException {\n    String executable = archive.getPathToExecutable();\n\n    File extractTo = new File(outputDirectory, executable);\n\n    if (!extractTo.exists()) {\n      downloadAndExtract(archive, executable, extractTo);\n    }\n    return extractTo.getAbsolutePath();\n  }", "signature": "String install(Archive archive)", "full_signature": "@Override public String install(Archive archive)", "class_method_signature": "PhantomJsInstaller.install(Archive archive)", "testcase": false, "constructor": false, "invocations": ["getPathToExecutable", "exists", "downloadAndExtract", "getAbsolutePath"]}, "repository": {"repo_id": 13127985, "url": "https://github.com/klieber/phantomjs-maven-plugin", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 62, "size": 1863, "license": "licensed"}}