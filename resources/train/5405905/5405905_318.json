{"test_class": {"identifier": "ExecutionErrorListFilterSettingsManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    UserPreferencesService userPreferencesService;", "modifier": "@Mock", "type": "UserPreferencesService", "declarator": "userPreferencesService", "var_name": "userPreferencesService"}, {"original_string": "@Mock\n    FilterSettingsJSONMarshaller marshaller;", "modifier": "@Mock", "type": "FilterSettingsJSONMarshaller", "declarator": "marshaller", "var_name": "marshaller"}, {"original_string": "Caller<UserPreferencesService> preferencesService;", "modifier": "", "type": "Caller<UserPreferencesService>", "declarator": "preferencesService", "var_name": "preferencesService"}, {"original_string": "@InjectMocks\n    ExecutionErrorListFilterSettingsManager manager;", "modifier": "@InjectMocks", "type": "ExecutionErrorListFilterSettingsManager", "declarator": "manager", "var_name": "manager"}], "file": "jbpm-wb-executor-service/jbpm-wb-executor-service-client/src/test/java/org/jbpm/workbench/es/client/editors/errorlist/ExecutionErrorListFilterSettingsManagerTest.java"}, "test_case": {"identifier": "testInitDefaultFilters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitDefaultFilters() {\n        final List<FilterSettings> settings = manager.initDefaultFilters();\n        assertNotNull(settings);\n        assertEquals(2,\n                     settings.size());\n        final ColumnFilter columnFilter = settings.get(0).getDataSetLookup().getFirstFilterOp().getColumnFilterList().get(0);\n        assertEquals(COLUMN_ERROR_ACK,\n                     columnFilter.getColumnId());\n        assertTrue(columnFilter instanceof CoreFunctionFilter);\n        assertTrue(((CoreFunctionFilter) columnFilter).getParameters().get(0) instanceof Integer);\n        assertEquals( EXECUTION_ERROR_LIST_PREFIX + \"_\" + DEFAULT_FILTER_SETTINGS_KEY, settings.get(0).getKey());\n    }", "signature": "void testInitDefaultFilters()", "full_signature": "@Test public void testInitDefaultFilters()", "class_method_signature": "ExecutionErrorListFilterSettingsManagerTest.testInitDefaultFilters()", "testcase": true, "constructor": false, "invocations": ["initDefaultFilters", "assertNotNull", "assertEquals", "size", "get", "getColumnFilterList", "getFirstFilterOp", "getDataSetLookup", "get", "assertEquals", "getColumnId", "assertTrue", "assertTrue", "get", "getParameters", "assertEquals", "getKey", "get"]}, "focal_class": {"identifier": "ExecutionErrorListFilterSettingsManager", "superclass": "extends FilterSettingsManagerImpl", "interfaces": "", "fields": [{"original_string": "protected static final String EXECUTION_ERROR_LIST_PREFIX = \"DS_ExecutionErrorListGrid\";", "modifier": "protected static final", "type": "String", "declarator": "EXECUTION_ERROR_LIST_PREFIX = \"DS_ExecutionErrorListGrid\"", "var_name": "EXECUTION_ERROR_LIST_PREFIX"}, {"original_string": "protected static final String TAB_ALL = EXECUTION_ERROR_LIST_PREFIX + \"_0\";", "modifier": "protected static final", "type": "String", "declarator": "TAB_ALL = EXECUTION_ERROR_LIST_PREFIX + \"_0\"", "var_name": "TAB_ALL"}, {"original_string": "protected static final String TAB_ACK = EXECUTION_ERROR_LIST_PREFIX + \"_1\";", "modifier": "protected static final", "type": "String", "declarator": "TAB_ACK = EXECUTION_ERROR_LIST_PREFIX + \"_1\"", "var_name": "TAB_ACK"}, {"original_string": "protected static final String TAB_NEW = EXECUTION_ERROR_LIST_PREFIX + \"_2\";", "modifier": "protected static final", "type": "String", "declarator": "TAB_NEW = EXECUTION_ERROR_LIST_PREFIX + \"_2\"", "var_name": "TAB_NEW"}, {"original_string": "private Constants constants = Constants.INSTANCE;", "modifier": "private", "type": "Constants", "declarator": "constants = Constants.INSTANCE", "var_name": "constants"}], "methods": [{"identifier": "getGridGlobalPreferencesKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getGridGlobalPreferencesKey()", "full_signature": "@Override public String getGridGlobalPreferencesKey()", "class_method_signature": "ExecutionErrorListFilterSettingsManager.getGridGlobalPreferencesKey()", "testcase": false, "constructor": false}, {"identifier": "createFilterSettingsPrototype", "parameters": "()", "modifiers": "@Override public", "return": "FilterSettings", "signature": "FilterSettings createFilterSettingsPrototype()", "full_signature": "@Override public FilterSettings createFilterSettingsPrototype()", "class_method_signature": "ExecutionErrorListFilterSettingsManager.createFilterSettingsPrototype()", "testcase": false, "constructor": false}, {"identifier": "loadSavedFiltersFromPreferences", "parameters": "(final MultiGridPreferencesStore store,\n                                                final Consumer<List<SavedFilter>> savedFiltersConsumer)", "modifiers": "@Override public", "return": "void", "signature": "void loadSavedFiltersFromPreferences(final MultiGridPreferencesStore store,\n                                                final Consumer<List<SavedFilter>> savedFiltersConsumer)", "full_signature": "@Override public void loadSavedFiltersFromPreferences(final MultiGridPreferencesStore store,\n                                                final Consumer<List<SavedFilter>> savedFiltersConsumer)", "class_method_signature": "ExecutionErrorListFilterSettingsManager.loadSavedFiltersFromPreferences(final MultiGridPreferencesStore store,\n                                                final Consumer<List<SavedFilter>> savedFiltersConsumer)", "testcase": false, "constructor": false}, {"identifier": "initDefaultFilters", "parameters": "()", "modifiers": "@Override public", "return": "List<FilterSettings>", "signature": "List<FilterSettings> initDefaultFilters()", "full_signature": "@Override public List<FilterSettings> initDefaultFilters()", "class_method_signature": "ExecutionErrorListFilterSettingsManager.initDefaultFilters()", "testcase": false, "constructor": false}], "file": "jbpm-wb-executor-service/jbpm-wb-executor-service-client/src/main/java/org/jbpm/workbench/es/client/editors/errorlist/ExecutionErrorListFilterSettingsManager.java"}, "focal_method": {"identifier": "initDefaultFilters", "parameters": "()", "modifiers": "@Override public", "return": "List<FilterSettings>", "body": "@Override\n    public List<FilterSettings> initDefaultFilters() {\n        return Arrays.asList(\n                //Filter Unacknowledged\n                createFilterSettings(EXECUTION_ERROR_LIST_DATASET,\n                                     COLUMN_ERROR_DATE,\n                                     builder -> builder.filter(equalsTo(COLUMN_ERROR_ACK,\n                                                                        0)),\n                                     getDefaultFilterSettingsKey(),// initial default filter\n                                     constants.New(),\n                                     constants.UnacknowledgedErrors()),\n\n                //Filter Acknowledged\n                createFilterSettings(EXECUTION_ERROR_LIST_DATASET,\n                                     COLUMN_ERROR_DATE,\n                                     builder -> builder.filter(equalsTo(COLUMN_ERROR_ACK,\n                                                                        1)),\n                                     TAB_ACK,\n                                     constants.Acknowledged(),\n                                     constants.AcknowledgedErrors())\n        );\n    }", "signature": "List<FilterSettings> initDefaultFilters()", "full_signature": "@Override public List<FilterSettings> initDefaultFilters()", "class_method_signature": "ExecutionErrorListFilterSettingsManager.initDefaultFilters()", "testcase": false, "constructor": false, "invocations": ["asList", "createFilterSettings", "filter", "equalsTo", "getDefaultFilterSettingsKey", "New", "UnacknowledgedErrors", "createFilterSettings", "filter", "equalsTo", "Acknowledged", "AcknowledgedErrors"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}