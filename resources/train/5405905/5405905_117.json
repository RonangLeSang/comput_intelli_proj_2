{"test_class": {"identifier": "DeploymentsSectionPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DeploymentsSectionPresenter presenter;", "modifier": "private", "type": "DeploymentsSectionPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n    private DeploymentsSectionPresenter.View view;", "modifier": "@Mock\n    private", "type": "DeploymentsSectionPresenter.View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock\n    private MenuItem<ProjectScreenModel> menuItem;", "modifier": "@Mock\n    private", "type": "MenuItem<ProjectScreenModel>", "declarator": "menuItem", "var_name": "menuItem"}, {"original_string": "@Mock\n    private WorkspaceProjectContext projectContext;", "modifier": "@Mock\n    private", "type": "WorkspaceProjectContext", "declarator": "projectContext", "var_name": "projectContext"}, {"original_string": "@Mock\n    private DDEditorService ddEditorService;", "modifier": "@Mock\n    private", "type": "DDEditorService", "declarator": "ddEditorService", "var_name": "ddEditorService"}, {"original_string": "@Mock\n    private ManagedInstance<ObservablePath> observablePaths;", "modifier": "@Mock\n    private", "type": "ManagedInstance<ObservablePath>", "declarator": "observablePaths", "var_name": "observablePaths"}, {"original_string": "@Mock\n    private EventSourceMock<SettingsSectionChange<ProjectScreenModel>> settingsSectionChangeEvent;", "modifier": "@Mock\n    private", "type": "EventSourceMock<SettingsSectionChange<ProjectScreenModel>>", "declarator": "settingsSectionChangeEvent", "var_name": "settingsSectionChangeEvent"}, {"original_string": "@Mock\n    private EventSourceMock<NotificationEvent> notificationEvent;", "modifier": "@Mock\n    private", "type": "EventSourceMock<NotificationEvent>", "declarator": "notificationEvent", "var_name": "notificationEvent"}, {"original_string": "@Mock\n    private DeploymentsSections deploymentsSections;", "modifier": "@Mock\n    private", "type": "DeploymentsSections", "declarator": "deploymentsSections", "var_name": "deploymentsSections"}, {"original_string": "@Mock\n    private DeploymentsGeneralSettingsPresenter section1;", "modifier": "@Mock\n    private", "type": "DeploymentsGeneralSettingsPresenter", "declarator": "section1", "var_name": "section1"}, {"original_string": "@Mock\n    private DeploymentsGeneralSettingsPresenter section2;", "modifier": "@Mock\n    private", "type": "DeploymentsGeneralSettingsPresenter", "declarator": "section2", "var_name": "section2"}, {"original_string": "@Mock\n    private SectionManager<DeploymentDescriptorModel> sectionManager;", "modifier": "@Mock\n    private", "type": "SectionManager<DeploymentDescriptorModel>", "declarator": "sectionManager", "var_name": "sectionManager"}, {"original_string": "private final Promises promises = new SyncPromises();", "modifier": "private final", "type": "Promises", "declarator": "promises = new SyncPromises()", "var_name": "promises"}], "file": "jbpm-wb-integration/jbpm-wb-integration-client/src/test/java/org/jbpm/workbench/wi/client/editors/deployment/descriptor/DeploymentsSectionPresenterTest.java"}, "test_case": {"identifier": "testSave", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSave() {\n        doReturn(promises.resolve()).when(presenter).save(eq(\"Test comment\"));\n\n        presenter.save(\"Test comment\", null).catch_(i -> {\n            Assert.fail(\"Promise should've been resolved!\");\n            return promises.resolve();\n        });\n\n        verify(presenter).save(eq(\"Test comment\"));\n        verify(presenter, never()).setup();\n        verify(notificationEvent, never()).fire(any());\n    }", "signature": "void testSave()", "full_signature": "@Test public void testSave()", "class_method_signature": "DeploymentsSectionPresenterTest.testSave()", "testcase": true, "constructor": false, "invocations": ["save", "when", "doReturn", "resolve", "eq", "catch_", "save", "fail", "resolve", "save", "verify", "eq", "setup", "verify", "never", "fire", "verify", "never", "any"]}, "focal_class": {"identifier": "DeploymentsSectionPresenter", "superclass": "extends Section<ProjectScreenModel>", "interfaces": "", "fields": [{"original_string": "private final View view;", "modifier": "private final", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "private final WorkspaceProjectContext projectContext;", "modifier": "private final", "type": "WorkspaceProjectContext", "declarator": "projectContext", "var_name": "projectContext"}, {"original_string": "private final Caller<DDEditorService> ddEditorService;", "modifier": "private final", "type": "Caller<DDEditorService>", "declarator": "ddEditorService", "var_name": "ddEditorService"}, {"original_string": "private final ManagedInstance<ObservablePath> observablePaths;", "modifier": "private final", "type": "ManagedInstance<ObservablePath>", "declarator": "observablePaths", "var_name": "observablePaths"}, {"original_string": "private final Event<NotificationEvent> notificationEvent;", "modifier": "private final", "type": "Event<NotificationEvent>", "declarator": "notificationEvent", "var_name": "notificationEvent"}, {"original_string": "private final SectionManager<DeploymentDescriptorModel> sectionManager;", "modifier": "private final", "type": "SectionManager<DeploymentDescriptorModel>", "declarator": "sectionManager", "var_name": "sectionManager"}, {"original_string": "private final DeploymentsSections deploymentsSections;", "modifier": "private final", "type": "DeploymentsSections", "declarator": "deploymentsSections", "var_name": "deploymentsSections"}, {"original_string": "private ObservablePath pathToDeploymentsXml;", "modifier": "private", "type": "ObservablePath", "declarator": "pathToDeploymentsXml", "var_name": "pathToDeploymentsXml"}, {"original_string": "ObservablePath.OnConcurrentUpdateEvent concurrentDeploymentsXmlUpdateInfo;", "modifier": "", "type": "ObservablePath.OnConcurrentUpdateEvent", "declarator": "concurrentDeploymentsXmlUpdateInfo", "var_name": "concurrentDeploymentsXmlUpdateInfo"}, {"original_string": "DeploymentDescriptorModel model;", "modifier": "", "type": "DeploymentDescriptorModel", "declarator": "model", "var_name": "model"}], "methods": [{"identifier": "DeploymentsSectionPresenter", "parameters": "(final View view,\n                                       final Promises promises,\n                                       final MenuItem<ProjectScreenModel> menuItem,\n                                       final WorkspaceProjectContext projectContext,\n                                       final Caller<DDEditorService> ddEditorService,\n                                       final ManagedInstance<ObservablePath> observablePaths,\n                                       final Event<SettingsSectionChange<ProjectScreenModel>> settingsSectionChangeEvent,\n                                       final Event<NotificationEvent> notificationEvent,\n                                       final SectionManager<DeploymentDescriptorModel> sectionManager,\n                                       final DeploymentsSections deploymentsSections)", "modifiers": "@Inject public", "return": "", "signature": " DeploymentsSectionPresenter(final View view,\n                                       final Promises promises,\n                                       final MenuItem<ProjectScreenModel> menuItem,\n                                       final WorkspaceProjectContext projectContext,\n                                       final Caller<DDEditorService> ddEditorService,\n                                       final ManagedInstance<ObservablePath> observablePaths,\n                                       final Event<SettingsSectionChange<ProjectScreenModel>> settingsSectionChangeEvent,\n                                       final Event<NotificationEvent> notificationEvent,\n                                       final SectionManager<DeploymentDescriptorModel> sectionManager,\n                                       final DeploymentsSections deploymentsSections)", "full_signature": "@Inject public  DeploymentsSectionPresenter(final View view,\n                                       final Promises promises,\n                                       final MenuItem<ProjectScreenModel> menuItem,\n                                       final WorkspaceProjectContext projectContext,\n                                       final Caller<DDEditorService> ddEditorService,\n                                       final ManagedInstance<ObservablePath> observablePaths,\n                                       final Event<SettingsSectionChange<ProjectScreenModel>> settingsSectionChangeEvent,\n                                       final Event<NotificationEvent> notificationEvent,\n                                       final SectionManager<DeploymentDescriptorModel> sectionManager,\n                                       final DeploymentsSections deploymentsSections)", "class_method_signature": "DeploymentsSectionPresenter.DeploymentsSectionPresenter(final View view,\n                                       final Promises promises,\n                                       final MenuItem<ProjectScreenModel> menuItem,\n                                       final WorkspaceProjectContext projectContext,\n                                       final Caller<DDEditorService> ddEditorService,\n                                       final ManagedInstance<ObservablePath> observablePaths,\n                                       final Event<SettingsSectionChange<ProjectScreenModel>> settingsSectionChangeEvent,\n                                       final Event<NotificationEvent> notificationEvent,\n                                       final SectionManager<DeploymentDescriptorModel> sectionManager,\n                                       final DeploymentsSections deploymentsSections)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "DeploymentsSectionPresenter.init()", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "(final ProjectScreenModel ignore)", "modifiers": "@Override public", "return": "Promise<Void>", "signature": "Promise<Void> setup(final ProjectScreenModel ignore)", "full_signature": "@Override public Promise<Void> setup(final ProjectScreenModel ignore)", "class_method_signature": "DeploymentsSectionPresenter.setup(final ProjectScreenModel ignore)", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "", "return": "Promise<Void>", "signature": "Promise<Void> setup()", "full_signature": " Promise<Void> setup()", "class_method_signature": "DeploymentsSectionPresenter.setup()", "testcase": false, "constructor": false}, {"identifier": "loadDeploymentDescriptor", "parameters": "()", "modifiers": "", "return": "Promise<DeploymentDescriptorModel>", "signature": "Promise<DeploymentDescriptorModel> loadDeploymentDescriptor()", "full_signature": " Promise<DeploymentDescriptorModel> loadDeploymentDescriptor()", "class_method_signature": "DeploymentsSectionPresenter.loadDeploymentDescriptor()", "testcase": false, "constructor": false}, {"identifier": "createIfNotExists", "parameters": "()", "modifiers": "", "return": "Promise<Void>", "signature": "Promise<Void> createIfNotExists()", "full_signature": " Promise<Void> createIfNotExists()", "class_method_signature": "DeploymentsSectionPresenter.createIfNotExists()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(final String comment,\n                              final Supplier<Promise<Void>> chain)", "modifiers": "@Override public", "return": "Promise<Void>", "signature": "Promise<Void> save(final String comment,\n                              final Supplier<Promise<Void>> chain)", "full_signature": "@Override public Promise<Void> save(final String comment,\n                              final Supplier<Promise<Void>> chain)", "class_method_signature": "DeploymentsSectionPresenter.save(final String comment,\n                              final Supplier<Promise<Void>> chain)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(final String comment)", "modifiers": "", "return": "Promise<Void>", "signature": "Promise<Void> save(final String comment)", "full_signature": " Promise<Void> save(final String comment)", "class_method_signature": "DeploymentsSectionPresenter.save(final String comment)", "testcase": false, "constructor": false}, {"identifier": "onSectionChanged", "parameters": "(@Observes final SettingsSectionChange<DeploymentDescriptorModel> settingsSectionChange)", "modifiers": "public", "return": "void", "signature": "void onSectionChanged(@Observes final SettingsSectionChange<DeploymentDescriptorModel> settingsSectionChange)", "full_signature": "public void onSectionChanged(@Observes final SettingsSectionChange<DeploymentDescriptorModel> settingsSectionChange)", "class_method_signature": "DeploymentsSectionPresenter.onSectionChanged(@Observes final SettingsSectionChange<DeploymentDescriptorModel> settingsSectionChange)", "testcase": false, "constructor": false}, {"identifier": "currentHashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int currentHashCode()", "full_signature": "@Override public int currentHashCode()", "class_method_signature": "DeploymentsSectionPresenter.currentHashCode()", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "()", "modifiers": "@Override public", "return": "SectionView<?>", "signature": "SectionView<?> getView()", "full_signature": "@Override public SectionView<?> getView()", "class_method_signature": "DeploymentsSectionPresenter.getView()", "testcase": false, "constructor": false}], "file": "jbpm-wb-integration/jbpm-wb-integration-client/src/main/java/org/jbpm/workbench/wi/client/editors/deployment/descriptor/DeploymentsSectionPresenter.java"}, "focal_method": {"identifier": "save", "parameters": "(final String comment,\n                              final Supplier<Promise<Void>> chain)", "modifiers": "@Override public", "return": "Promise<Void>", "body": "@Override\n    public Promise<Void> save(final String comment,\n                              final Supplier<Promise<Void>> chain) {\n\n        if (concurrentDeploymentsXmlUpdateInfo != null) {\n            notificationEvent.fire(new NotificationEvent(view.getConcurrentUpdateMessage(), WARNING));\n            return setup();\n        }\n\n        return save(comment).then(i -> {\n            sectionManager.resetAllDirtyIndicators();\n            return promises.resolve();\n        });\n    }", "signature": "Promise<Void> save(final String comment,\n                              final Supplier<Promise<Void>> chain)", "full_signature": "@Override public Promise<Void> save(final String comment,\n                              final Supplier<Promise<Void>> chain)", "class_method_signature": "DeploymentsSectionPresenter.save(final String comment,\n                              final Supplier<Promise<Void>> chain)", "testcase": false, "constructor": false, "invocations": ["fire", "getConcurrentUpdateMessage", "setup", "then", "save", "resetAllDirtyIndicators", "resolve"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}