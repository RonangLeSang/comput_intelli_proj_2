{"test_class": {"identifier": "NewCaseInstancePresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    EventSourceMock<NotificationEvent> notificationEvent;", "modifier": "@Mock", "type": "EventSourceMock<NotificationEvent>", "declarator": "notificationEvent", "var_name": "notificationEvent"}, {"original_string": "@Mock\n    EventSourceMock<CaseCreatedEvent> caseCreatedEvent;", "modifier": "@Mock", "type": "EventSourceMock<CaseCreatedEvent>", "declarator": "caseCreatedEvent", "var_name": "caseCreatedEvent"}, {"original_string": "@Mock\n    NewCaseInstancePresenter.NewCaseInstanceView view;", "modifier": "@Mock", "type": "NewCaseInstancePresenter.NewCaseInstanceView", "declarator": "view", "var_name": "view"}, {"original_string": "Caller<CaseManagementService> caseService;", "modifier": "", "type": "Caller<CaseManagementService>", "declarator": "caseService", "var_name": "caseService"}, {"original_string": "@Mock\n    CaseManagementService caseManagementService;", "modifier": "@Mock", "type": "CaseManagementService", "declarator": "caseManagementService", "var_name": "caseManagementService"}, {"original_string": "@Mock\n    TranslationService translationService;", "modifier": "@Mock", "type": "TranslationService", "declarator": "translationService", "var_name": "translationService"}, {"original_string": "@Mock\n    CaseRolesValidations caseRolesValidations;", "modifier": "@Mock", "type": "CaseRolesValidations", "declarator": "caseRolesValidations", "var_name": "caseRolesValidations"}, {"original_string": "@Mock\n    User identity;", "modifier": "@Mock", "type": "User", "declarator": "identity", "var_name": "identity"}, {"original_string": "@InjectMocks\n    NewCaseInstancePresenter presenter;", "modifier": "@InjectMocks", "type": "NewCaseInstancePresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "jbpm-wb-case-mgmt/jbpm-wb-case-mgmt-client/src/test/java/org/jbpm/workbench/cm/client/newcase/NewCaseInstancePresenterTest.java"}, "test_case": {"identifier": "testValidateCaseOwnerAssignment_caseOwnerRoleCardinalityExceeded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateCaseOwnerAssignment_caseOwnerRoleCardinalityExceeded() {\n        final String caseOwnerRole = \"owner\";\n        final Integer ownerRoleCardinality = 1;\n        final String caseOwners = \"testOwner1, testOwner2\";\n        assertThat(presenter.validateCaseOwnerAssignment(caseOwners))\n                            .as(\"isAssignmentValid\")\n                            .isFalse();\n        verify(view,\n               never()).setOwner(anyString());\n        verify(view).showCaseOwnerError(anyString());\n        verify(translationService).format(eq(\"InvalidRoleAssignment\"),\n                                          eq(caseOwnerRole),\n                                          eq(ownerRoleCardinality));\n    }", "signature": "void testValidateCaseOwnerAssignment_caseOwnerRoleCardinalityExceeded()", "full_signature": "@Test public void testValidateCaseOwnerAssignment_caseOwnerRoleCardinalityExceeded()", "class_method_signature": "NewCaseInstancePresenterTest.testValidateCaseOwnerAssignment_caseOwnerRoleCardinalityExceeded()", "testcase": true, "constructor": false, "invocations": ["isFalse", "as", "assertThat", "validateCaseOwnerAssignment", "setOwner", "verify", "never", "anyString", "showCaseOwnerError", "verify", "anyString", "format", "verify", "eq", "eq", "eq"]}, "focal_class": {"identifier": "NewCaseInstancePresenter", "superclass": "extends AbstractPresenter<NewCaseInstancePresenter.NewCaseInstanceView>", "interfaces": "", "fields": [{"original_string": "@Inject\n    CaseRolesValidations caseRolesValidations;", "modifier": "@Inject", "type": "CaseRolesValidations", "declarator": "caseRolesValidations", "var_name": "caseRolesValidations"}, {"original_string": "private List<CaseDefinitionSummary> caseDefinitions = emptyList();", "modifier": "private", "type": "List<CaseDefinitionSummary>", "declarator": "caseDefinitions = emptyList()", "var_name": "caseDefinitions"}, {"original_string": "private Caller<CaseManagementService> caseService;", "modifier": "private", "type": "Caller<CaseManagementService>", "declarator": "caseService", "var_name": "caseService"}, {"original_string": "private Event<NotificationEvent> notification;", "modifier": "private", "type": "Event<NotificationEvent>", "declarator": "notification", "var_name": "notification"}, {"original_string": "private Event<CaseCreatedEvent> newCaseEvent;", "modifier": "private", "type": "Event<CaseCreatedEvent>", "declarator": "newCaseEvent", "var_name": "newCaseEvent"}, {"original_string": "@Inject\n    private TranslationService translationService;", "modifier": "@Inject\n    private", "type": "TranslationService", "declarator": "translationService", "var_name": "translationService"}, {"original_string": "@Inject\n    private User identity;", "modifier": "@Inject\n    private", "type": "User", "declarator": "identity", "var_name": "identity"}], "methods": [{"identifier": "setCaseDefinitions", "parameters": "(List<CaseDefinitionSummary> caseDefinitions)", "modifiers": "", "return": "void", "signature": "void setCaseDefinitions(List<CaseDefinitionSummary> caseDefinitions)", "full_signature": " void setCaseDefinitions(List<CaseDefinitionSummary> caseDefinitions)", "class_method_signature": "NewCaseInstancePresenter.setCaseDefinitions(List<CaseDefinitionSummary> caseDefinitions)", "testcase": false, "constructor": false}, {"identifier": "loadCaseRoles", "parameters": "(final String caseDefinitionId)", "modifiers": "protected", "return": "void", "signature": "void loadCaseRoles(final String caseDefinitionId)", "full_signature": "protected void loadCaseRoles(final String caseDefinitionId)", "class_method_signature": "NewCaseInstancePresenter.loadCaseRoles(final String caseDefinitionId)", "testcase": false, "constructor": false}, {"identifier": "getCaseDefinitionSummary", "parameters": "(final String caseDefinitionId)", "modifiers": "private", "return": "Optional<CaseDefinitionSummary>", "signature": "Optional<CaseDefinitionSummary> getCaseDefinitionSummary(final String caseDefinitionId)", "full_signature": "private Optional<CaseDefinitionSummary> getCaseDefinitionSummary(final String caseDefinitionId)", "class_method_signature": "NewCaseInstancePresenter.getCaseDefinitionSummary(final String caseDefinitionId)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void show()", "full_signature": "public void show()", "class_method_signature": "NewCaseInstancePresenter.show()", "testcase": false, "constructor": false}, {"identifier": "loadCaseDefinitions", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void loadCaseDefinitions()", "full_signature": "protected void loadCaseDefinitions()", "class_method_signature": "NewCaseInstancePresenter.loadCaseDefinitions()", "testcase": false, "constructor": false}, {"identifier": "createCaseInstance", "parameters": "(final String caseDefinitionId,\n                                      final String owner,\n                                      final List<CaseRoleAssignmentSummary> assignments)", "modifiers": "protected", "return": "void", "signature": "void createCaseInstance(final String caseDefinitionId,\n                                      final String owner,\n                                      final List<CaseRoleAssignmentSummary> assignments)", "full_signature": "protected void createCaseInstance(final String caseDefinitionId,\n                                      final String owner,\n                                      final List<CaseRoleAssignmentSummary> assignments)", "class_method_signature": "NewCaseInstancePresenter.createCaseInstance(final String caseDefinitionId,\n                                      final String owner,\n                                      final List<CaseRoleAssignmentSummary> assignments)", "testcase": false, "constructor": false}, {"identifier": "validateCaseOwnerAssignment", "parameters": "(String ownerInput)", "modifiers": "protected", "return": "boolean", "signature": "boolean validateCaseOwnerAssignment(String ownerInput)", "full_signature": "protected boolean validateCaseOwnerAssignment(String ownerInput)", "class_method_signature": "NewCaseInstancePresenter.validateCaseOwnerAssignment(String ownerInput)", "testcase": false, "constructor": false}, {"identifier": "setNotification", "parameters": "(final Event<NotificationEvent> notification)", "modifiers": "@Inject public", "return": "void", "signature": "void setNotification(final Event<NotificationEvent> notification)", "full_signature": "@Inject public void setNotification(final Event<NotificationEvent> notification)", "class_method_signature": "NewCaseInstancePresenter.setNotification(final Event<NotificationEvent> notification)", "testcase": false, "constructor": false}, {"identifier": "setNewCaseEvent", "parameters": "(final Event<CaseCreatedEvent> newCaseEvent)", "modifiers": "@Inject public", "return": "void", "signature": "void setNewCaseEvent(final Event<CaseCreatedEvent> newCaseEvent)", "full_signature": "@Inject public void setNewCaseEvent(final Event<CaseCreatedEvent> newCaseEvent)", "class_method_signature": "NewCaseInstancePresenter.setNewCaseEvent(final Event<CaseCreatedEvent> newCaseEvent)", "testcase": false, "constructor": false}, {"identifier": "setCaseService", "parameters": "(final Caller<CaseManagementService> caseService)", "modifiers": "@Inject public", "return": "void", "signature": "void setCaseService(final Caller<CaseManagementService> caseService)", "full_signature": "@Inject public void setCaseService(final Caller<CaseManagementService> caseService)", "class_method_signature": "NewCaseInstancePresenter.setCaseService(final Caller<CaseManagementService> caseService)", "testcase": false, "constructor": false}], "file": "jbpm-wb-case-mgmt/jbpm-wb-case-mgmt-client/src/main/java/org/jbpm/workbench/cm/client/newcase/NewCaseInstancePresenter.java"}, "focal_method": {"identifier": "validateCaseOwnerAssignment", "parameters": "(String ownerInput)", "modifiers": "protected", "return": "boolean", "body": "protected boolean validateCaseOwnerAssignment(String ownerInput) {\n        final Integer ownerRoleCardinality = 1;\n        boolean isAssignmentValid = true;\n\n        final List<String> ownerInputList = Splitter.on(\",\")\n                                                    .trimResults()\n                                                    .omitEmptyStrings()\n                                                    .splitToList(ofNullable(ownerInput).orElse(\"\"));\n        final String ownerInputFiltered = Joiner.on(\", \").join(ownerInputList);\n\n        if (!ownerInputFiltered.equals(ownerInput)) {\n            view.setOwner(ownerInputFiltered);\n        }\n\n        if (ownerInputFiltered.isEmpty()) {\n            view.showCaseOwnerError(translationService.format(Constants.PLEASE_PROVIDE_CASE_OWNER));\n            isAssignmentValid = false;\n        } else if (ownerInputList.size() > ownerRoleCardinality) {\n            view.showCaseOwnerError(translationService.format(Constants.INVALID_ROLE_ASSIGNMENT,\n                                                              \"owner\",\n                                                              ownerRoleCardinality));\n            isAssignmentValid = false;\n        }\n\n        return isAssignmentValid;\n    }", "signature": "boolean validateCaseOwnerAssignment(String ownerInput)", "full_signature": "protected boolean validateCaseOwnerAssignment(String ownerInput)", "class_method_signature": "NewCaseInstancePresenter.validateCaseOwnerAssignment(String ownerInput)", "testcase": false, "constructor": false, "invocations": ["splitToList", "omitEmptyStrings", "trimResults", "on", "orElse", "ofNullable", "join", "on", "equals", "setOwner", "isEmpty", "showCaseOwnerError", "format", "size", "showCaseOwnerError", "format"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}