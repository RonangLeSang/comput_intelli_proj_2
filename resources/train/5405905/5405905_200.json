{"test_class": {"identifier": "ExtendedPagedTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    GridGlobalPreferences preferences;", "modifier": "@Mock", "type": "GridGlobalPreferences", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "@Mock\n    DataGrid dataGrid;", "modifier": "@Mock", "type": "DataGrid", "declarator": "dataGrid", "var_name": "dataGrid"}, {"original_string": "ExtendedPagedTable table;", "modifier": "", "type": "ExtendedPagedTable", "declarator": "table", "var_name": "table"}], "file": "jbpm-wb-common/jbpm-wb-common-client/src/test/java/org/jbpm/workbench/common/client/list/ExtendedPagedTableTest.java"}, "test_case": {"identifier": "testSelectAllItems", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSelectAllItems() {\n        testSelectAll(0);\n    }", "signature": "void testSelectAllItems()", "full_signature": "@Test public void testSelectAllItems()", "class_method_signature": "ExtendedPagedTableTest.testSelectAllItems()", "testcase": true, "constructor": false, "invocations": ["testSelectAll"]}, "focal_class": {"identifier": "ExtendedPagedTable", "superclass": "extends PagedTable<T>", "interfaces": "", "fields": [{"original_string": "private List<Column<T, ?>> ignoreSelectionColumns = new ArrayList<Column<T, ?>>();", "modifier": "private", "type": "List<Column<T, ?>>", "declarator": "ignoreSelectionColumns = new ArrayList<Column<T, ?>>()", "var_name": "ignoreSelectionColumns"}, {"original_string": "private List<T> selectedItems = new ArrayList<T>();", "modifier": "private", "type": "List<T>", "declarator": "selectedItems = new ArrayList<T>()", "var_name": "selectedItems"}, {"original_string": "private Consumer<T> selectionCallback;", "modifier": "private", "type": "Consumer<T>", "declarator": "selectionCallback", "var_name": "selectionCallback"}], "methods": [{"identifier": "ExtendedPagedTable", "parameters": "(final GridGlobalPreferences gridPreferences)", "modifiers": "public", "return": "", "signature": " ExtendedPagedTable(final GridGlobalPreferences gridPreferences)", "full_signature": "public  ExtendedPagedTable(final GridGlobalPreferences gridPreferences)", "class_method_signature": "ExtendedPagedTable.ExtendedPagedTable(final GridGlobalPreferences gridPreferences)", "testcase": false, "constructor": true}, {"identifier": "setTooltip", "parameters": "(int row,\n                           int column,\n                           String description)", "modifiers": "public", "return": "void", "signature": "void setTooltip(int row,\n                           int column,\n                           String description)", "full_signature": "public void setTooltip(int row,\n                           int column,\n                           String description)", "class_method_signature": "ExtendedPagedTable.setTooltip(int row,\n                           int column,\n                           String description)", "testcase": false, "constructor": false}, {"identifier": "getKeyboardSelectedColumn", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeyboardSelectedColumn()", "full_signature": "public int getKeyboardSelectedColumn()", "class_method_signature": "ExtendedPagedTable.getKeyboardSelectedColumn()", "testcase": false, "constructor": false}, {"identifier": "getKeyboardSelectedRow", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeyboardSelectedRow()", "full_signature": "public int getKeyboardSelectedRow()", "class_method_signature": "ExtendedPagedTable.getKeyboardSelectedRow()", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumnCount()", "full_signature": "public int getColumnCount()", "class_method_signature": "ExtendedPagedTable.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "removeColumn", "parameters": "(Column<T, ?> col)", "modifiers": "public", "return": "void", "signature": "void removeColumn(Column<T, ?> col)", "full_signature": "public void removeColumn(Column<T, ?> col)", "class_method_signature": "ExtendedPagedTable.removeColumn(Column<T, ?> col)", "testcase": false, "constructor": false}, {"identifier": "removeColumnMeta", "parameters": "(ColumnMeta<T> columnMeta)", "modifiers": "public", "return": "void", "signature": "void removeColumnMeta(ColumnMeta<T> columnMeta)", "full_signature": "public void removeColumnMeta(ColumnMeta<T> columnMeta)", "class_method_signature": "ExtendedPagedTable.removeColumnMeta(ColumnMeta<T> columnMeta)", "testcase": false, "constructor": false}, {"identifier": "getColumnMetaList", "parameters": "()", "modifiers": "public", "return": "Collection<ColumnMeta<T>>", "signature": "Collection<ColumnMeta<T>> getColumnMetaList()", "full_signature": "public Collection<ColumnMeta<T>> getColumnMetaList()", "class_method_signature": "ExtendedPagedTable.getColumnMetaList()", "testcase": false, "constructor": false}, {"identifier": "addSelectionIgnoreColumn", "parameters": "(Column<T, ?> column)", "modifiers": "public", "return": "void", "signature": "void addSelectionIgnoreColumn(Column<T, ?> column)", "full_signature": "public void addSelectionIgnoreColumn(Column<T, ?> column)", "class_method_signature": "ExtendedPagedTable.addSelectionIgnoreColumn(Column<T, ?> column)", "testcase": false, "constructor": false}, {"identifier": "removeSelectionIgnoreColumn", "parameters": "(Column<T, ?> column)", "modifiers": "public", "return": "boolean", "signature": "boolean removeSelectionIgnoreColumn(Column<T, ?> column)", "full_signature": "public boolean removeSelectionIgnoreColumn(Column<T, ?> column)", "class_method_signature": "ExtendedPagedTable.removeSelectionIgnoreColumn(Column<T, ?> column)", "testcase": false, "constructor": false}, {"identifier": "isSelectionIgnoreColumn", "parameters": "(int colIx)", "modifiers": "public", "return": "boolean", "signature": "boolean isSelectionIgnoreColumn(int colIx)", "full_signature": "public boolean isSelectionIgnoreColumn(int colIx)", "class_method_signature": "ExtendedPagedTable.isSelectionIgnoreColumn(int colIx)", "testcase": false, "constructor": false}, {"identifier": "getSelectedItems", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getSelectedItems()", "full_signature": "public List<T> getSelectedItems()", "class_method_signature": "ExtendedPagedTable.getSelectedItems()", "testcase": false, "constructor": false}, {"identifier": "setSelectedItems", "parameters": "(List<T> selectedItems)", "modifiers": "protected", "return": "void", "signature": "void setSelectedItems(List<T> selectedItems)", "full_signature": "protected void setSelectedItems(List<T> selectedItems)", "class_method_signature": "ExtendedPagedTable.setSelectedItems(List<T> selectedItems)", "testcase": false, "constructor": false}, {"identifier": "isItemSelected", "parameters": "(T item)", "modifiers": "public", "return": "boolean", "signature": "boolean isItemSelected(T item)", "full_signature": "public boolean isItemSelected(T item)", "class_method_signature": "ExtendedPagedTable.isItemSelected(T item)", "testcase": false, "constructor": false}, {"identifier": "hasSelectedItems", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSelectedItems()", "full_signature": "public boolean hasSelectedItems()", "class_method_signature": "ExtendedPagedTable.hasSelectedItems()", "testcase": false, "constructor": false}, {"identifier": "deselectAllItems", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deselectAllItems()", "full_signature": "public void deselectAllItems()", "class_method_signature": "ExtendedPagedTable.deselectAllItems()", "testcase": false, "constructor": false}, {"identifier": "selectAllItems", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void selectAllItems()", "full_signature": "public void selectAllItems()", "class_method_signature": "ExtendedPagedTable.selectAllItems()", "testcase": false, "constructor": false}, {"identifier": "updateSelectedColumnRow", "parameters": "(final Integer row,\n                                        final T object,\n                                        final Boolean value)", "modifiers": "public", "return": "void", "signature": "void updateSelectedColumnRow(final Integer row,\n                                        final T object,\n                                        final Boolean value)", "full_signature": "public void updateSelectedColumnRow(final Integer row,\n                                        final T object,\n                                        final Boolean value)", "class_method_signature": "ExtendedPagedTable.updateSelectedColumnRow(final Integer row,\n                                        final T object,\n                                        final Boolean value)", "testcase": false, "constructor": false}, {"identifier": "isAllItemsSelected", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllItemsSelected()", "full_signature": "public boolean isAllItemsSelected()", "class_method_signature": "ExtendedPagedTable.isAllItemsSelected()", "testcase": false, "constructor": false}, {"identifier": "createSelectionModel", "parameters": "()", "modifiers": "protected", "return": "NoSelectionModel<T>", "signature": "NoSelectionModel<T> createSelectionModel()", "full_signature": "protected NoSelectionModel<T> createSelectionModel()", "class_method_signature": "ExtendedPagedTable.createSelectionModel()", "testcase": false, "constructor": false}, {"identifier": "createNoActionColumnManager", "parameters": "()", "modifiers": "protected", "return": "DefaultSelectionEventManager<T>", "signature": "DefaultSelectionEventManager<T> createNoActionColumnManager()", "full_signature": "protected DefaultSelectionEventManager<T> createNoActionColumnManager()", "class_method_signature": "ExtendedPagedTable.createNoActionColumnManager()", "testcase": false, "constructor": false}, {"identifier": "setSelectionCallback", "parameters": "(final Consumer<T> selectionCallback)", "modifiers": "public", "return": "void", "signature": "void setSelectionCallback(final Consumer<T> selectionCallback)", "full_signature": "public void setSelectionCallback(final Consumer<T> selectionCallback)", "class_method_signature": "ExtendedPagedTable.setSelectionCallback(final Consumer<T> selectionCallback)", "testcase": false, "constructor": false}, {"identifier": "setItemSelection", "parameters": "(final T item,\n                                 final Boolean newValue)", "modifiers": "public", "return": "void", "signature": "void setItemSelection(final T item,\n                                 final Boolean newValue)", "full_signature": "public void setItemSelection(final T item,\n                                 final Boolean newValue)", "class_method_signature": "ExtendedPagedTable.setItemSelection(final T item,\n                                 final Boolean newValue)", "testcase": false, "constructor": false}], "file": "jbpm-wb-common/jbpm-wb-common-client/src/main/java/org/jbpm/workbench/common/client/list/ExtendedPagedTable.java"}, "focal_method": {"identifier": "selectAllItems", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void selectAllItems() {\n        for (int i = 0; i < getVisibleItemCount(); i++) {\n            final T item = getVisibleItem(i);\n            if (selectedItems.contains(item) == false) {\n                updateSelectedColumnRow(i,\n                                        item,\n                                        true);\n            }\n        }\n    }", "signature": "void selectAllItems()", "full_signature": "public void selectAllItems()", "class_method_signature": "ExtendedPagedTable.selectAllItems()", "testcase": false, "constructor": false, "invocations": ["getVisibleItemCount", "getVisibleItem", "contains", "updateSelectedColumnRow"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}