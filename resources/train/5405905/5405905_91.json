{"test_class": {"identifier": "ServiceTaskServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GAV = \"org.jbpm.workitem.test:workitem.test:1.0\";", "modifier": "private static final", "type": "String", "declarator": "GAV = \"org.jbpm.workitem.test:workitem.test:1.0\"", "var_name": "GAV"}, {"original_string": "private static final String WORKITEMNAME = \"Test\";", "modifier": "private static final", "type": "String", "declarator": "WORKITEMNAME = \"Test\"", "var_name": "WORKITEMNAME"}, {"original_string": "@Mock\n    private IOService ioService;", "modifier": "@Mock\n    private", "type": "IOService", "declarator": "ioService", "var_name": "ioService"}, {"original_string": "@Mock\n    private FileSystem fileSystem;", "modifier": "@Mock\n    private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "@Mock\n    private RepositoryEventListener eventListener;", "modifier": "@Mock\n    private", "type": "RepositoryEventListener", "declarator": "eventListener", "var_name": "eventListener"}, {"original_string": "private RepoData service;", "modifier": "private", "type": "RepoData", "declarator": "service", "var_name": "service"}, {"original_string": "private RepositoryStorageVFSImpl storage;", "modifier": "private", "type": "RepositoryStorageVFSImpl", "declarator": "storage", "var_name": "storage"}, {"original_string": "private RepoService repoService;", "modifier": "private", "type": "RepoService", "declarator": "repoService", "var_name": "repoService"}, {"original_string": "private ServiceTaskServiceImpl serviceTaskServiceImpl;", "modifier": "private", "type": "ServiceTaskServiceImpl", "declarator": "serviceTaskServiceImpl", "var_name": "serviceTaskServiceImpl"}, {"original_string": "private int serviceTaskSize = 0;", "modifier": "private", "type": "int", "declarator": "serviceTaskSize = 0", "var_name": "serviceTaskSize"}, {"original_string": "@Mock\n    private GuvnorM2Repository m2Repository;", "modifier": "@Mock\n    private", "type": "GuvnorM2Repository", "declarator": "m2Repository", "var_name": "m2Repository"}], "file": "jbpm-wb-integration/jbpm-wb-integration-backend/src/test/java/org/jbpm/workbench/wi/backend/server/workitem/ServiceTaskServiceImplTest.java"}, "test_case": {"identifier": "testRemoveServiceTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveServiceTask() {\n        List<RepoData> currentServices = new ArrayList<>();\n        String stName = \"Test1\";\n        loadServices(stName, currentServices);\n        RepoData rd = currentServices.get(0);\n        ServiceTaskSummary st = new ServiceTaskSummary();\n        st.setName(rd.getName());\n        st.setId(rd.getId());\n        st.setInstalledOn(Collections.emptySet());\n        assertEquals(serviceTaskSize + 1, serviceTaskServiceImpl.getServiceTasks().size());\n        assertEquals(stName, serviceTaskServiceImpl.removeServiceTask(st));\n        List<ServiceTaskSummary> afterRemoveAction = serviceTaskServiceImpl.getServiceTasks();\n        assertEquals(serviceTaskSize, afterRemoveAction.size());\n        Optional<ServiceTaskSummary> optionalServiceTaskSummary = afterRemoveAction.stream().filter(s -> s.getName().equals(stName)).findFirst();\n        assertFalse(optionalServiceTaskSummary.isPresent());\n    }", "signature": "void testRemoveServiceTask()", "full_signature": "@Test public void testRemoveServiceTask()", "class_method_signature": "ServiceTaskServiceImplTest.testRemoveServiceTask()", "testcase": true, "constructor": false, "invocations": ["loadServices", "get", "setName", "getName", "setId", "getId", "setInstalledOn", "emptySet", "assertEquals", "size", "getServiceTasks", "assertEquals", "removeServiceTask", "getServiceTasks", "assertEquals", "size", "findFirst", "filter", "stream", "equals", "getName", "assertFalse", "isPresent"]}, "focal_class": {"identifier": "ServiceTaskServiceImpl", "superclass": "", "interfaces": "implements ServiceTaskService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ServiceTaskServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ServiceTaskServiceImpl.class)", "var_name": "logger"}, {"original_string": "private RepoService repoService;", "modifier": "private", "type": "RepoService", "declarator": "repoService", "var_name": "repoService"}, {"original_string": "@Inject\n    @Named(\"serviceTasksStorageVFS\")\n    private RepositoryStorage<ServiceTasksConfiguration> repositoryStorage;", "modifier": "@Inject\n    @Named(\"serviceTasksStorageVFS\")\n    private", "type": "RepositoryStorage<ServiceTasksConfiguration>", "declarator": "repositoryStorage", "var_name": "repositoryStorage"}, {"original_string": "@Inject\n    private RepositoryEventListener eventListener;", "modifier": "@Inject\n    private", "type": "RepositoryEventListener", "declarator": "eventListener", "var_name": "eventListener"}, {"original_string": "@Inject\n    private GuvnorM2Repository m2Repository;", "modifier": "@Inject\n    private", "type": "GuvnorM2Repository", "declarator": "m2Repository", "var_name": "m2Repository"}], "methods": [{"identifier": "initialLoad", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void initialLoad()", "full_signature": "@PostConstruct public void initialLoad()", "class_method_signature": "ServiceTaskServiceImpl.initialLoad()", "testcase": false, "constructor": false}, {"identifier": "setRepoService", "parameters": "(RepoService repoService)", "modifiers": "protected", "return": "void", "signature": "void setRepoService(RepoService repoService)", "full_signature": "protected void setRepoService(RepoService repoService)", "class_method_signature": "ServiceTaskServiceImpl.setRepoService(RepoService repoService)", "testcase": false, "constructor": false}, {"identifier": "setM2Repository", "parameters": "(GuvnorM2Repository m2Repository)", "modifiers": "protected", "return": "void", "signature": "void setM2Repository(GuvnorM2Repository m2Repository)", "full_signature": "protected void setM2Repository(GuvnorM2Repository m2Repository)", "class_method_signature": "ServiceTaskServiceImpl.setM2Repository(GuvnorM2Repository m2Repository)", "testcase": false, "constructor": false}, {"identifier": "getServiceTasks", "parameters": "()", "modifiers": "@Override public", "return": "List<ServiceTaskSummary>", "signature": "List<ServiceTaskSummary> getServiceTasks()", "full_signature": "@Override public List<ServiceTaskSummary> getServiceTasks()", "class_method_signature": "ServiceTaskServiceImpl.getServiceTasks()", "testcase": false, "constructor": false}, {"identifier": "getEnabledServiceTasks", "parameters": "(String branchName)", "modifiers": "@Override public", "return": "List<ServiceTaskSummary>", "signature": "List<ServiceTaskSummary> getEnabledServiceTasks(String branchName)", "full_signature": "@Override public List<ServiceTaskSummary> getEnabledServiceTasks(String branchName)", "class_method_signature": "ServiceTaskServiceImpl.getEnabledServiceTasks(String branchName)", "testcase": false, "constructor": false}, {"identifier": "enableServiceTask", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void enableServiceTask(String id)", "full_signature": "@Override public void enableServiceTask(String id)", "class_method_signature": "ServiceTaskServiceImpl.enableServiceTask(String id)", "testcase": false, "constructor": false}, {"identifier": "disableServiceTask", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void disableServiceTask(String id)", "full_signature": "@Override public void disableServiceTask(String id)", "class_method_signature": "ServiceTaskServiceImpl.disableServiceTask(String id)", "testcase": false, "constructor": false}, {"identifier": "installServiceTask", "parameters": "(String id, String target, List<String> parameters, String branchName)", "modifiers": "@Override public", "return": "void", "signature": "void installServiceTask(String id, String target, List<String> parameters, String branchName)", "full_signature": "@Override public void installServiceTask(String id, String target, List<String> parameters, String branchName)", "class_method_signature": "ServiceTaskServiceImpl.installServiceTask(String id, String target, List<String> parameters, String branchName)", "testcase": false, "constructor": false}, {"identifier": "uninstallServiceTask", "parameters": "(String id, String target, String branchName)", "modifiers": "@Override public", "return": "void", "signature": "void uninstallServiceTask(String id, String target, String branchName)", "full_signature": "@Override public void uninstallServiceTask(String id, String target, String branchName)", "class_method_signature": "ServiceTaskServiceImpl.uninstallServiceTask(String id, String target, String branchName)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "ServiceTasksConfiguration", "signature": "ServiceTasksConfiguration getConfiguration()", "full_signature": "@Override public ServiceTasksConfiguration getConfiguration()", "class_method_signature": "ServiceTaskServiceImpl.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "saveConfiguration", "parameters": "(ServiceTasksConfiguration configuration)", "modifiers": "@Override public", "return": "void", "signature": "void saveConfiguration(ServiceTasksConfiguration configuration)", "full_signature": "@Override public void saveConfiguration(ServiceTasksConfiguration configuration)", "class_method_signature": "ServiceTaskServiceImpl.saveConfiguration(ServiceTasksConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "addServiceTasks", "parameters": "(String gav)", "modifiers": "@Override public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> addServiceTasks(String gav)", "full_signature": "@Override public Map<String, List<String>> addServiceTasks(String gav)", "class_method_signature": "ServiceTaskServiceImpl.addServiceTasks(String gav)", "testcase": false, "constructor": false}, {"identifier": "removeServiceTask", "parameters": "(ServiceTaskSummary serviceTaskSummary)", "modifiers": "@Override public", "return": "String", "signature": "String removeServiceTask(ServiceTaskSummary serviceTaskSummary)", "full_signature": "@Override public String removeServiceTask(ServiceTaskSummary serviceTaskSummary)", "class_method_signature": "ServiceTaskServiceImpl.removeServiceTask(ServiceTaskSummary serviceTaskSummary)", "testcase": false, "constructor": false}, {"identifier": "updateInstalledServiceTasks", "parameters": "(String newBranchName, String fromBranchName)", "modifiers": "@Override public", "return": "void", "signature": "void updateInstalledServiceTasks(String newBranchName, String fromBranchName)", "full_signature": "@Override public void updateInstalledServiceTasks(String newBranchName, String fromBranchName)", "class_method_signature": "ServiceTaskServiceImpl.updateInstalledServiceTasks(String newBranchName, String fromBranchName)", "testcase": false, "constructor": false}, {"identifier": "extractAuthParameters", "parameters": "(RepoData service)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> extractAuthParameters(RepoData service)", "full_signature": "protected List<String> extractAuthParameters(RepoData service)", "class_method_signature": "ServiceTaskServiceImpl.extractAuthParameters(RepoData service)", "testcase": false, "constructor": false}], "file": "jbpm-wb-integration/jbpm-wb-integration-backend/src/main/java/org/jbpm/workbench/wi/backend/server/workitem/ServiceTaskServiceImpl.java"}, "focal_method": {"identifier": "removeServiceTask", "parameters": "(ServiceTaskSummary serviceTaskSummary)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String removeServiceTask(ServiceTaskSummary serviceTaskSummary) {\n        repoService.removeServiceTask(serviceTaskSummary.getId());\n        return serviceTaskSummary.getName();\n    }", "signature": "String removeServiceTask(ServiceTaskSummary serviceTaskSummary)", "full_signature": "@Override public String removeServiceTask(ServiceTaskSummary serviceTaskSummary)", "class_method_signature": "ServiceTaskServiceImpl.removeServiceTask(ServiceTaskSummary serviceTaskSummary)", "testcase": false, "constructor": false, "invocations": ["removeServiceTask", "getId", "getName"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}