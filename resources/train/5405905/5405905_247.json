{"test_class": {"identifier": "ActiveFiltersViewImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Popover saveFilterPopover;", "modifier": "@Mock", "type": "Popover", "declarator": "saveFilterPopover", "var_name": "saveFilterPopover"}, {"original_string": "@Mock\n    SaveFilterPopoverView saveFilterPopoverView;", "modifier": "@Mock", "type": "SaveFilterPopoverView", "declarator": "saveFilterPopoverView", "var_name": "saveFilterPopoverView"}, {"original_string": "@Mock\n    DataBinder<List<ActiveFilterItem>> activeFiltersList;", "modifier": "@Mock", "type": "DataBinder<List<ActiveFilterItem>>", "declarator": "activeFiltersList", "var_name": "activeFiltersList"}, {"original_string": "@InjectMocks\n    @Spy\n    ActiveFiltersViewImpl view;", "modifier": "@InjectMocks\n    @Spy", "type": "ActiveFiltersViewImpl", "declarator": "view", "var_name": "view"}], "file": "jbpm-wb-common/jbpm-wb-common-client/src/test/java/org/jbpm/workbench/common/client/filters/active/ActiveFiltersViewImplTest.java"}, "test_case": {"identifier": "testRemoveActiveFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveActiveFilter(){\n        final List<ActiveFilterItem> model = new ArrayList<>();\n        when(activeFiltersList.getModel()).thenReturn(model);\n        model.add(new ActiveFilterItem<>(\"key1\", null, null, null, null));\n        model.add(new ActiveFilterItem<>(\"key2\", null, null, null, null));\n\n        view.removeActiveFilter(new ActiveFilterItem<>(\"key1\", null, null, null, null));\n        view.removeActiveFilter(new ActiveFilterItem<>(\"key3\", null, null, null, null));\n\n        assertEquals(1, model.size());\n        verify(activeFiltersList, times(2)).getModel();\n    }", "signature": "void testRemoveActiveFilter()", "full_signature": "@Test public void testRemoveActiveFilter()", "class_method_signature": "ActiveFiltersViewImplTest.testRemoveActiveFilter()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getModel", "add", "add", "removeActiveFilter", "removeActiveFilter", "assertEquals", "size", "getModel", "verify", "times"]}, "focal_class": {"identifier": "ActiveFiltersViewImpl", "superclass": "", "interfaces": "implements ActiveFiltersView", "fields": [{"original_string": "@Inject\n    @DataField(\"remove-all-filters\")\n    HTMLAnchorElement removeAll;", "modifier": "@Inject\n    @DataField(\"remove-all-filters\")", "type": "HTMLAnchorElement", "declarator": "removeAll", "var_name": "removeAll"}, {"original_string": "@Inject\n    @DataField(\"save-filter\")\n    Anchor saveFilter;", "modifier": "@Inject\n    @DataField(\"save-filter\")", "type": "Anchor", "declarator": "saveFilter", "var_name": "saveFilter"}, {"original_string": "@Inject\n    @DataField(\"content\")\n    HTMLDivElement content;", "modifier": "@Inject\n    @DataField(\"content\")", "type": "HTMLDivElement", "declarator": "content", "var_name": "content"}, {"original_string": "@Inject\n    @DataField(\"active-filters\")\n    @ListContainer(\"ul\")\n    @Bound\n    private ListComponent<ActiveFilterItem, ActiveFilterItemView> activeFilters;", "modifier": "@Inject\n    @DataField(\"active-filters\")\n    @ListContainer(\"ul\")\n    @Bound\n    private", "type": "ListComponent<ActiveFilterItem, ActiveFilterItemView>", "declarator": "activeFilters", "var_name": "activeFilters"}, {"original_string": "@Inject\n    @AutoBound\n    private DataBinder<List<ActiveFilterItem>> activeFiltersList;", "modifier": "@Inject\n    @AutoBound\n    private", "type": "DataBinder<List<ActiveFilterItem>>", "declarator": "activeFiltersList", "var_name": "activeFiltersList"}, {"original_string": "@Inject\n    private JQueryProducer.JQuery<Popover> jQueryPopover;", "modifier": "@Inject\n    private", "type": "JQueryProducer.JQuery<Popover>", "declarator": "jQueryPopover", "var_name": "jQueryPopover"}, {"original_string": "@Inject\n    private SaveFilterPopoverView saveFilterPopoverView;", "modifier": "@Inject\n    private", "type": "SaveFilterPopoverView", "declarator": "saveFilterPopoverView", "var_name": "saveFilterPopoverView"}, {"original_string": "private Popover saveFilterPopover;", "modifier": "private", "type": "Popover", "declarator": "saveFilterPopover", "var_name": "saveFilterPopover"}, {"original_string": "private ParameterizedCommand<String> saveFilterCallback;", "modifier": "private", "type": "ParameterizedCommand<String>", "declarator": "saveFilterCallback", "var_name": "saveFilterCallback"}, {"original_string": "private Command removeAllFilterCallback;", "modifier": "private", "type": "Command", "declarator": "removeAllFilterCallback", "var_name": "removeAllFilterCallback"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "ActiveFiltersViewImpl.init()", "testcase": false, "constructor": false}, {"identifier": "setSaveFilterPopoverCallback", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setSaveFilterPopoverCallback()", "full_signature": "protected void setSaveFilterPopoverCallback()", "class_method_signature": "ActiveFiltersViewImpl.setSaveFilterPopoverCallback()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void destroy()", "full_signature": "@PreDestroy public void destroy()", "class_method_signature": "ActiveFiltersViewImpl.destroy()", "testcase": false, "constructor": false}, {"identifier": "setSaveFilterCallback", "parameters": "(final ParameterizedCommand<String> callback)", "modifiers": "@Override public", "return": "void", "signature": "void setSaveFilterCallback(final ParameterizedCommand<String> callback)", "full_signature": "@Override public void setSaveFilterCallback(final ParameterizedCommand<String> callback)", "class_method_signature": "ActiveFiltersViewImpl.setSaveFilterCallback(final ParameterizedCommand<String> callback)", "testcase": false, "constructor": false}, {"identifier": "setRemoveAllFilterCallback", "parameters": "(final Command callback)", "modifiers": "@Override public", "return": "void", "signature": "void setRemoveAllFilterCallback(final Command callback)", "full_signature": "@Override public void setRemoveAllFilterCallback(final Command callback)", "class_method_signature": "ActiveFiltersViewImpl.setRemoveAllFilterCallback(final Command callback)", "testcase": false, "constructor": false}, {"identifier": "closeSaveFilter", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void closeSaveFilter()", "full_signature": "@Override public void closeSaveFilter()", "class_method_signature": "ActiveFiltersViewImpl.closeSaveFilter()", "testcase": false, "constructor": false}, {"identifier": "setSaveFilterErrorMessage", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "signature": "void setSaveFilterErrorMessage(final String message)", "full_signature": "@Override public void setSaveFilterErrorMessage(final String message)", "class_method_signature": "ActiveFiltersViewImpl.setSaveFilterErrorMessage(final String message)", "testcase": false, "constructor": false}, {"identifier": "saveFilter", "parameters": "(final String filterName)", "modifiers": "protected", "return": "void", "signature": "void saveFilter(final String filterName)", "full_signature": "protected void saveFilter(final String filterName)", "class_method_signature": "ActiveFiltersViewImpl.saveFilter(final String filterName)", "testcase": false, "constructor": false}, {"identifier": "addActiveFilter", "parameters": "(final ActiveFilterItem<T> filter)", "modifiers": "@Override public", "return": "void", "signature": "void addActiveFilter(final ActiveFilterItem<T> filter)", "full_signature": "@Override public void addActiveFilter(final ActiveFilterItem<T> filter)", "class_method_signature": "ActiveFiltersViewImpl.addActiveFilter(final ActiveFilterItem<T> filter)", "testcase": false, "constructor": false}, {"identifier": "onRemoveActiveFilter", "parameters": "(@Observes final ActiveFilterItemRemovedEvent event)", "modifiers": "public", "return": "void", "signature": "void onRemoveActiveFilter(@Observes final ActiveFilterItemRemovedEvent event)", "full_signature": "public void onRemoveActiveFilter(@Observes final ActiveFilterItemRemovedEvent event)", "class_method_signature": "ActiveFiltersViewImpl.onRemoveActiveFilter(@Observes final ActiveFilterItemRemovedEvent event)", "testcase": false, "constructor": false}, {"identifier": "removeActiveFilter", "parameters": "(final ActiveFilterItem<T> filter)", "modifiers": "@Override public", "return": "void", "signature": "void removeActiveFilter(final ActiveFilterItem<T> filter)", "full_signature": "@Override public void removeActiveFilter(final ActiveFilterItem<T> filter)", "class_method_signature": "ActiveFiltersViewImpl.removeActiveFilter(final ActiveFilterItem<T> filter)", "testcase": false, "constructor": false}, {"identifier": "onRemoveAll", "parameters": "(@ForEvent(\"click\") Event e)", "modifiers": "@EventHandler(\"remove-all-filters\") public", "return": "void", "signature": "void onRemoveAll(@ForEvent(\"click\") Event e)", "full_signature": "@EventHandler(\"remove-all-filters\") public void onRemoveAll(@ForEvent(\"click\") Event e)", "class_method_signature": "ActiveFiltersViewImpl.onRemoveAll(@ForEvent(\"click\") Event e)", "testcase": false, "constructor": false}, {"identifier": "onSaveFilter", "parameters": "(@ForEvent(\"click\") Event e)", "modifiers": "@EventHandler(\"save-filter\") public", "return": "void", "signature": "void onSaveFilter(@ForEvent(\"click\") Event e)", "full_signature": "@EventHandler(\"save-filter\") public void onSaveFilter(@ForEvent(\"click\") Event e)", "class_method_signature": "ActiveFiltersViewImpl.onSaveFilter(@ForEvent(\"click\") Event e)", "testcase": false, "constructor": false}, {"identifier": "removeAllActiveFilters", "parameters": "(final Boolean useCallback)", "modifiers": "@Override public", "return": "void", "signature": "void removeAllActiveFilters(final Boolean useCallback)", "full_signature": "@Override public void removeAllActiveFilters(final Boolean useCallback)", "class_method_signature": "ActiveFiltersViewImpl.removeAllActiveFilters(final Boolean useCallback)", "testcase": false, "constructor": false}, {"identifier": "getElement", "parameters": "()", "modifiers": "@Override public", "return": "HTMLElement", "signature": "HTMLElement getElement()", "full_signature": "@Override public HTMLElement getElement()", "class_method_signature": "ActiveFiltersViewImpl.getElement()", "testcase": false, "constructor": false}], "file": "jbpm-wb-common/jbpm-wb-common-client/src/main/java/org/jbpm/workbench/common/client/filters/active/ActiveFiltersViewImpl.java"}, "focal_method": {"identifier": "removeActiveFilter", "parameters": "(final ActiveFilterItem<T> filter)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public <T extends Object> void removeActiveFilter(final ActiveFilterItem<T> filter) {\n        activeFiltersList.getModel().removeIf(f -> f.getKey().equals(filter.getKey()));\n    }", "signature": "void removeActiveFilter(final ActiveFilterItem<T> filter)", "full_signature": "@Override public void removeActiveFilter(final ActiveFilterItem<T> filter)", "class_method_signature": "ActiveFiltersViewImpl.removeActiveFilter(final ActiveFilterItem<T> filter)", "testcase": false, "constructor": false, "invocations": ["removeIf", "getModel", "equals", "getKey", "getKey"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}