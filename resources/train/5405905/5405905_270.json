{"test_class": {"identifier": "DataSetDefsBootstrapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    DataSetDefRegistry dataSetRegistry;", "modifier": "@Mock", "type": "DataSetDefRegistry", "declarator": "dataSetRegistry", "var_name": "dataSetRegistry"}, {"original_string": "@InjectMocks\n    DataSetDefsBootstrap dataSetsBootstrap;", "modifier": "@InjectMocks", "type": "DataSetDefsBootstrap", "declarator": "dataSetsBootstrap", "var_name": "dataSetsBootstrap"}], "file": "jbpm-wb-dashboard/jbpm-wb-dashboard-backend/src/test/java/org/jbpm/dashboard/renderer/backend/DataSetDefsBootstrapTest.java"}, "test_case": {"identifier": "testHumanTasksDataSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHumanTasksDataSet() {\n        QueryDefinition qd = QueryDefinition.builder().name(DATASET_HUMAN_TASKS).expression(\"SELECT *\").source(\"source\").target(\"target\").build();\n        dataSetsBootstrap.registerDataSetDefinitions(new QueryDefinitionLoaded(qd));\n\n        ArgumentCaptor<SQLDataSetDef> argument = ArgumentCaptor.forClass(SQLDataSetDef.class);\n        verify(dataSetRegistry).registerDataSetDef(argument.capture());\n\n        SQLDataSetDef dataSetDef = argument.getValue();\n        assertEquals(DATASET_HUMAN_TASKS,\n                     dataSetDef.getUUID());\n        assertEquals(\"target-\" + DATASET_HUMAN_TASKS,\n                     dataSetDef.getName());\n        assertEquals(KieServerDataSetProvider.TYPE,\n                     dataSetDef.getProvider());\n        assertEquals(\"SELECT *\",\n                     dataSetDef.getDbSQL());\n        assertEquals(11,\n                     dataSetDef.getColumns().size());\n    }", "signature": "void testHumanTasksDataSet()", "full_signature": "@Test public void testHumanTasksDataSet()", "class_method_signature": "DataSetDefsBootstrapTest.testHumanTasksDataSet()", "testcase": true, "constructor": false, "invocations": ["build", "target", "source", "expression", "name", "builder", "registerDataSetDefinitions", "forClass", "registerDataSetDef", "verify", "capture", "getValue", "assertEquals", "getUUID", "assertEquals", "getName", "assertEquals", "getProvider", "assertEquals", "getDbSQL", "assertEquals", "size", "getColumns"]}, "focal_class": {"identifier": "DataSetDefsBootstrap", "superclass": "extends AbstractDataSetDefsBootstrap", "interfaces": "", "fields": [], "methods": [{"identifier": "registerDataSetDefinitions", "parameters": "(@Observes QueryDefinitionLoaded event)", "modifiers": "public", "return": "void", "signature": "void registerDataSetDefinitions(@Observes QueryDefinitionLoaded event)", "full_signature": "public void registerDataSetDefinitions(@Observes QueryDefinitionLoaded event)", "class_method_signature": "DataSetDefsBootstrap.registerDataSetDefinitions(@Observes QueryDefinitionLoaded event)", "testcase": false, "constructor": false}], "file": "jbpm-wb-dashboard/jbpm-wb-dashboard-backend/src/main/java/org/jbpm/dashboard/renderer/backend/DataSetDefsBootstrap.java"}, "focal_method": {"identifier": "registerDataSetDefinitions", "parameters": "(@Observes QueryDefinitionLoaded event)", "modifiers": "public", "return": "void", "body": "public void registerDataSetDefinitions(@Observes QueryDefinitionLoaded event) {\n        if (event.getDefinition().getName().equals(DATASET_PROCESS_INSTANCES)) {\n            registerDataSetDefinition(event.getDefinition(),\n                                      builder ->\n                                              builder.number(COLUMN_PROCESS_INSTANCE_ID)\n                                                      .label(COLUMN_PROCESS_ID)\n                                                      .date(COLUMN_PROCESS_START_DATE)\n                                                      .date(COLUMN_PROCESS_END_DATE)\n                                                      .number(COLUMN_PROCESS_STATUS)\n                                                      .number(COLUMN_PROCESS_DURATION)\n                                                      .label(COLUMN_PROCESS_USER_ID)\n                                                      .label(COLUMN_PROCESS_VERSION)\n                                                      .label(COLUMN_PROCESS_NAME)\n                                                      .label(COLUMN_PROCESS_EXTERNAL_ID)\n            );\n        } else if (event.getDefinition().getName().equals(DATASET_HUMAN_TASKS)) {\n            registerDataSetDefinition(event.getDefinition(),\n                                      builder ->\n                                              builder.label(COLUMN_PROCESS_NAME)\n                                                      .label(COLUMN_PROCESS_EXTERNAL_ID)\n                                                      .label(COLUMN_TASK_ID)\n                                                      .label(COLUMN_TASK_NAME)\n                                                      .label(COLUMN_TASK_STATUS)\n                                                      .date(COLUMN_TASK_CREATED_DATE)\n                                                      .date(COLUMN_TASK_START_DATE)\n                                                      .date(COLUMN_TASK_END_DATE)\n                                                      .number(COLUMN_PROCESS_INSTANCE_ID)\n                                                      .label(COLUMN_TASK_OWNER_ID)\n                                                      .number(COLUMN_TASK_DURATION)\n            );\n        }\n    }", "signature": "void registerDataSetDefinitions(@Observes QueryDefinitionLoaded event)", "full_signature": "public void registerDataSetDefinitions(@Observes QueryDefinitionLoaded event)", "class_method_signature": "DataSetDefsBootstrap.registerDataSetDefinitions(@Observes QueryDefinitionLoaded event)", "testcase": false, "constructor": false, "invocations": ["equals", "getName", "getDefinition", "registerDataSetDefinition", "getDefinition", "label", "label", "label", "label", "number", "number", "date", "date", "label", "number", "equals", "getName", "getDefinition", "registerDataSetDefinition", "getDefinition", "number", "label", "number", "date", "date", "date", "label", "label", "label", "label", "label"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}