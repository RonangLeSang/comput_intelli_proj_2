{"test_class": {"identifier": "KieServerDataSetManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<Object> receivedEvents = new ArrayList<Object>();", "modifier": "private final", "type": "List<Object>", "declarator": "receivedEvents = new ArrayList<Object>()", "var_name": "receivedEvents"}, {"original_string": "private DataSetDefRegistry dataSetDefRegistry;", "modifier": "private", "type": "DataSetDefRegistry", "declarator": "dataSetDefRegistry", "var_name": "dataSetDefRegistry"}, {"original_string": "private KieServerIntegration kieServerIntegration;", "modifier": "private", "type": "KieServerIntegration", "declarator": "kieServerIntegration", "var_name": "kieServerIntegration"}, {"original_string": "private Event<KieServerDataSetRegistered> event;", "modifier": "private", "type": "Event<KieServerDataSetRegistered>", "declarator": "event", "var_name": "event"}, {"original_string": "private KieServicesClient kieClient;", "modifier": "private", "type": "KieServicesClient", "declarator": "kieClient", "var_name": "kieClient"}, {"original_string": "private QueryServicesClient queryClient;", "modifier": "private", "type": "QueryServicesClient", "declarator": "queryClient", "var_name": "queryClient"}, {"original_string": "private KieServerDataSetManager kieServerDataSetManager;", "modifier": "private", "type": "KieServerDataSetManager", "declarator": "kieServerDataSetManager", "var_name": "kieServerDataSetManager"}, {"original_string": "@Mock\n    private SpecManagementService specManagementService;", "modifier": "@Mock\n    private", "type": "SpecManagementService", "declarator": "specManagementService", "var_name": "specManagementService"}], "file": "jbpm-wb-kie-server/jbpm-wb-kie-server-backend/src/test/java/org/jbpm/workbench/ks/integration/KieServerDataSetManagerTest.java"}, "test_case": {"identifier": "testRegisterQueriesOnServerWithoutBPMCapability", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegisterQueriesOnServerWithoutBPMCapability() throws Exception {\n\n        when(kieClient.getServicesClient(any())).thenThrow(KieServicesException.class);\n\n        QueryDefinition query = QueryDefinition.builder().name(\"test\").expression(\"expression\").source(\"jbpm\").target(\"CUSTOM\").build();\n        Set<QueryDefinition> definitions = new HashSet<>();\n        definitions.add(query);\n\n        kieServerDataSetManager.registerQueriesWithRetry(\"template\",\n                                                         \"instance\",\n                                                         definitions);\n\n        verify(kieServerIntegration,\n               times(1)).getAdminServerClient(anyString(),\n                                              anyString());\n        verify(queryClient,\n               never()).replaceQuery(any());\n\n        assertEquals(0,\n                     receivedEvents.size());\n    }", "signature": "void testRegisterQueriesOnServerWithoutBPMCapability()", "full_signature": "@Test public void testRegisterQueriesOnServerWithoutBPMCapability()", "class_method_signature": "KieServerDataSetManagerTest.testRegisterQueriesOnServerWithoutBPMCapability()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "getServicesClient", "any", "build", "target", "source", "expression", "name", "builder", "add", "registerQueriesWithRetry", "getAdminServerClient", "verify", "times", "anyString", "anyString", "replaceQuery", "verify", "never", "any", "assertEquals", "size"]}, "focal_class": {"identifier": "KieServerDataSetManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(KieServerDataSetManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(KieServerDataSetManager.class)", "var_name": "LOGGER"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private DataSetDefRegistry dataSetDefRegistry;", "modifier": "private", "type": "DataSetDefRegistry", "declarator": "dataSetDefRegistry", "var_name": "dataSetDefRegistry"}, {"original_string": "private KieServerIntegration kieServerIntegration;", "modifier": "private", "type": "KieServerIntegration", "declarator": "kieServerIntegration", "var_name": "kieServerIntegration"}, {"original_string": "private Event<KieServerDataSetRegistered> event;", "modifier": "private", "type": "Event<KieServerDataSetRegistered>", "declarator": "event", "var_name": "event"}, {"original_string": "private SpecManagementService specManagementService;", "modifier": "private", "type": "SpecManagementService", "declarator": "specManagementService", "var_name": "specManagementService"}], "methods": [{"identifier": "KieServerDataSetManager", "parameters": "(DataSetDefRegistry dataSetDefRegistry,\n                                   KieServerIntegration kieServerIntegration,\n                                   Event<KieServerDataSetRegistered> event,\n                                   @Managed ExecutorService executorService,\n                                   SpecManagementService specManagementService)", "modifiers": "@Inject public", "return": "", "signature": " KieServerDataSetManager(DataSetDefRegistry dataSetDefRegistry,\n                                   KieServerIntegration kieServerIntegration,\n                                   Event<KieServerDataSetRegistered> event,\n                                   @Managed ExecutorService executorService,\n                                   SpecManagementService specManagementService)", "full_signature": "@Inject public  KieServerDataSetManager(DataSetDefRegistry dataSetDefRegistry,\n                                   KieServerIntegration kieServerIntegration,\n                                   Event<KieServerDataSetRegistered> event,\n                                   @Managed ExecutorService executorService,\n                                   SpecManagementService specManagementService)", "class_method_signature": "KieServerDataSetManager.KieServerDataSetManager(DataSetDefRegistry dataSetDefRegistry,\n                                   KieServerIntegration kieServerIntegration,\n                                   Event<KieServerDataSetRegistered> event,\n                                   @Managed ExecutorService executorService,\n                                   SpecManagementService specManagementService)", "testcase": false, "constructor": true}, {"identifier": "registerInKieServer", "parameters": "(@Observes final ServerInstanceRegistered serverInstanceRegistered)", "modifiers": "public", "return": "void", "signature": "void registerInKieServer(@Observes final ServerInstanceRegistered serverInstanceRegistered)", "full_signature": "public void registerInKieServer(@Observes final ServerInstanceRegistered serverInstanceRegistered)", "class_method_signature": "KieServerDataSetManager.registerInKieServer(@Observes final ServerInstanceRegistered serverInstanceRegistered)", "testcase": false, "constructor": false}, {"identifier": "extractQueryTarget", "parameters": "(DataSetDef dataSetDef)", "modifiers": "protected", "return": "String", "signature": "String extractQueryTarget(DataSetDef dataSetDef)", "full_signature": "protected String extractQueryTarget(DataSetDef dataSetDef)", "class_method_signature": "KieServerDataSetManager.extractQueryTarget(DataSetDef dataSetDef)", "testcase": false, "constructor": false}, {"identifier": "registerQueriesWithRetry", "parameters": "(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions)", "modifiers": "protected", "return": "void", "signature": "void registerQueriesWithRetry(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions)", "full_signature": "protected void registerQueriesWithRetry(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions)", "class_method_signature": "KieServerDataSetManager.registerQueriesWithRetry(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions)", "testcase": false, "constructor": false}, {"identifier": "onDataSetDefRegisteredEvent", "parameters": "(@Observes DataSetDefRegisteredEvent event)", "modifiers": "", "return": "void", "signature": "void onDataSetDefRegisteredEvent(@Observes DataSetDefRegisteredEvent event)", "full_signature": " void onDataSetDefRegisteredEvent(@Observes DataSetDefRegisteredEvent event)", "class_method_signature": "KieServerDataSetManager.onDataSetDefRegisteredEvent(@Observes DataSetDefRegisteredEvent event)", "testcase": false, "constructor": false}, {"identifier": "onDataSetDefModifiedEvent", "parameters": "(@Observes DataSetDefModifiedEvent event)", "modifiers": "", "return": "void", "signature": "void onDataSetDefModifiedEvent(@Observes DataSetDefModifiedEvent event)", "full_signature": " void onDataSetDefModifiedEvent(@Observes DataSetDefModifiedEvent event)", "class_method_signature": "KieServerDataSetManager.onDataSetDefModifiedEvent(@Observes DataSetDefModifiedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onDataSetDefRemovedEvent", "parameters": "(@Observes DataSetDefRemovedEvent event)", "modifiers": "", "return": "void", "signature": "void onDataSetDefRemovedEvent(@Observes DataSetDefRemovedEvent event)", "full_signature": " void onDataSetDefRemovedEvent(@Observes DataSetDefRemovedEvent event)", "class_method_signature": "KieServerDataSetManager.onDataSetDefRemovedEvent(@Observes DataSetDefRemovedEvent event)", "testcase": false, "constructor": false}, {"identifier": "replaceQueryInKieServers", "parameters": "(DataSetDef def)", "modifiers": "protected", "return": "void", "signature": "void replaceQueryInKieServers(DataSetDef def)", "full_signature": "protected void replaceQueryInKieServers(DataSetDef def)", "class_method_signature": "KieServerDataSetManager.replaceQueryInKieServers(DataSetDef def)", "testcase": false, "constructor": false}], "file": "jbpm-wb-kie-server/jbpm-wb-kie-server-backend/src/main/java/org/jbpm/workbench/ks/integration/KieServerDataSetManager.java"}, "focal_method": {"identifier": "registerQueriesWithRetry", "parameters": "(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions)", "modifiers": "protected", "return": "void", "body": "protected void registerQueriesWithRetry(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions) throws Exception {\n        long waitLimit = 5 * 60 * 1000;   // default 5 min\n        long elapsed = 0;\n        try {\n            QueryServicesClient queryClient = kieServerIntegration.getAdminServerClient(serverTemplateId, serverInstanceId).getServicesClient(QueryServicesClient.class);\n\n            while (elapsed < waitLimit) {\n                try {\n                    Iterator<QueryDefinition> definitionIt = queryDefinitions.iterator();\n\n                    while (definitionIt.hasNext()) {\n                        QueryDefinition definition = definitionIt.next();\n                        queryClient.replaceQuery(definition);\n                        LOGGER.info(\"Query definition {} (type {}) successfully registered on kie server '{}'\",\n                                    definition.getName(),\n                                    definition.getTarget(),\n                                    serverInstanceId);\n                        // remove successfully stored definition to avoid duplicated reads in case of intermediate error\n                        definitionIt.remove();\n                    }\n\n                    event.fire(new KieServerDataSetRegistered(serverInstanceId,\n                                                              serverTemplateId));\n                    return;\n                } catch (KieServicesException | KieServerHttpRequestException e) {\n                    // unable to register, might still be booting\n                    Thread.sleep(500);\n                    elapsed += 500;\n                    // get admin client with forced check of endpoints as they might have been banned (marked as failed)\n                    queryClient = kieServerIntegration.getAdminServerClientCheckEndpoints(serverTemplateId).getServicesClient(QueryServicesClient.class);\n                    LOGGER.debug(\"Cannot reach KIE Server, elapsed time while waiting '{}', max time '{}' error {}\",\n                                 elapsed,\n                                 waitLimit,\n                                 e.getMessage());\n                }\n            }\n\n            LOGGER.warn(\"Timeout while trying to register query definitions on '{}'\",\n                        serverInstanceId);\n        } catch (KieServicesException ex) {\n            // in case getting queryClient fails due to missing capability to handle advanced queries\n            LOGGER.info(\"Not possible to register queries on server {} most likely due to BPM capability missing (details {})\",\n                        serverInstanceId,\n                        ex.getMessage());\n        }\n    }", "signature": "void registerQueriesWithRetry(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions)", "full_signature": "protected void registerQueriesWithRetry(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions)", "class_method_signature": "KieServerDataSetManager.registerQueriesWithRetry(String serverTemplateId,\n                                            String serverInstanceId,\n                                            Set<QueryDefinition> queryDefinitions)", "testcase": false, "constructor": false, "invocations": ["getServicesClient", "getAdminServerClient", "iterator", "hasNext", "next", "replaceQuery", "info", "getName", "getTarget", "remove", "fire", "sleep", "getServicesClient", "getAdminServerClientCheckEndpoints", "debug", "getMessage", "warn", "info", "getMessage"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}