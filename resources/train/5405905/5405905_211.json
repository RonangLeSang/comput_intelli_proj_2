{"test_class": {"identifier": "AbstractMultiGridViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    protected AsyncDataProvider dataProviderMock;", "modifier": "@Mock\n    protected", "type": "AsyncDataProvider", "declarator": "dataProviderMock", "var_name": "dataProviderMock"}, {"original_string": "protected CallerMock<UserPreferencesService> userPreferencesService;", "modifier": "protected", "type": "CallerMock<UserPreferencesService>", "declarator": "userPreferencesService", "var_name": "userPreferencesService"}, {"original_string": "@Mock\n    protected UserPreferencesService userPreferencesServiceMock;", "modifier": "@Mock\n    protected", "type": "UserPreferencesService", "declarator": "userPreferencesServiceMock", "var_name": "userPreferencesServiceMock"}, {"original_string": "@Mock\n    protected ListTable extendedPagedTable;", "modifier": "@Mock\n    protected", "type": "ListTable", "declarator": "extendedPagedTable", "var_name": "extendedPagedTable"}, {"original_string": "@Mock\n    protected HasWidgets rightActionsToolbar;", "modifier": "@Mock\n    protected", "type": "HasWidgets", "declarator": "rightActionsToolbar", "var_name": "rightActionsToolbar"}, {"original_string": "@Mock\n    protected Button mockButton;", "modifier": "@Mock\n    protected", "type": "Button", "declarator": "mockButton", "var_name": "mockButton"}, {"original_string": "@Spy\n    protected GridPreferencesStore gridPreferencesStore;", "modifier": "@Spy\n    protected", "type": "GridPreferencesStore", "declarator": "gridPreferencesStore", "var_name": "gridPreferencesStore"}, {"original_string": "@Mock\n    protected ManagePreferences preferences;", "modifier": "@Mock\n    protected", "type": "ManagePreferences", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "@Mock\n    protected ManagedInstance<ConditionalKebabActionCell> conditionalKebabActionCell;", "modifier": "@Mock\n    protected", "type": "ManagedInstance<ConditionalKebabActionCell>", "declarator": "conditionalKebabActionCell", "var_name": "conditionalKebabActionCell"}], "file": "jbpm-wb-common/jbpm-wb-common-client/src/test/java/org/jbpm/workbench/common/client/list/AbstractMultiGridViewTest.java"}, "test_case": {"identifier": "testInitialColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialColumns() {\n        final List<String> expectedInitColumns = getExpectedInitialColumns();\n\n        assertEquals(expectedInitColumns.size(), getView().getInitColumns().size());\n        for (int i = 0; i < expectedInitColumns.size(); i++) {\n            assertEquals(expectedInitColumns.get(i), getView().getInitColumns().get(i));\n        }\n    }", "signature": "void testInitialColumns()", "full_signature": "@Test public void testInitialColumns()", "class_method_signature": "AbstractMultiGridViewTest.testInitialColumns()", "testcase": true, "constructor": false, "invocations": ["getExpectedInitialColumns", "assertEquals", "size", "size", "getInitColumns", "getView", "size", "assertEquals", "get", "get", "getInitColumns", "getView"]}, "focal_class": {"identifier": "AbstractMultiGridView", "superclass": "extends Composite", "interfaces": "implements MultiGridView<T, V>,\n                                                                                                                                         RequiresResize", "fields": [{"original_string": "public static final String COL_ID_SELECT = \"Select\";", "modifier": "public static final", "type": "String", "declarator": "COL_ID_SELECT = \"Select\"", "var_name": "COL_ID_SELECT"}, {"original_string": "public static final String COL_ID_ACTIONS = \"Actions\";", "modifier": "public static final", "type": "String", "declarator": "COL_ID_ACTIONS = \"Actions\"", "var_name": "COL_ID_ACTIONS"}, {"original_string": "public static final int ACTIONS_COLUMN_WIDTH = 175;", "modifier": "public static final", "type": "int", "declarator": "ACTIONS_COLUMN_WIDTH = 175", "var_name": "ACTIONS_COLUMN_WIDTH"}, {"original_string": "public static final int CHECK_COLUMN_WIDTH = 38;", "modifier": "public static final", "type": "int", "declarator": "CHECK_COLUMN_WIDTH = 38", "var_name": "CHECK_COLUMN_WIDTH"}, {"original_string": "public static final int ERROR_COLUMN_WIDTH = 65;", "modifier": "public static final", "type": "int", "declarator": "ERROR_COLUMN_WIDTH = 65", "var_name": "ERROR_COLUMN_WIDTH"}, {"original_string": "@Inject\n    protected Event<NotificationEvent> notification;", "modifier": "@Inject\n    protected", "type": "Event<NotificationEvent>", "declarator": "notification", "var_name": "notification"}, {"original_string": "@Inject\n    protected ManagedInstance<ConditionalKebabActionCell> conditionalKebabActionCell;", "modifier": "@Inject\n    protected", "type": "ManagedInstance<ConditionalKebabActionCell>", "declarator": "conditionalKebabActionCell", "var_name": "conditionalKebabActionCell"}, {"original_string": "@Inject\n    protected PlaceManager placeManager;", "modifier": "@Inject\n    protected", "type": "PlaceManager", "declarator": "placeManager", "var_name": "placeManager"}, {"original_string": "@Inject\n    protected ManagePreferences preferences;", "modifier": "@Inject\n    protected", "type": "ManagePreferences", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "protected Caller<UserPreferencesService> userPreferencesService;", "modifier": "protected", "type": "Caller<UserPreferencesService>", "declarator": "userPreferencesService", "var_name": "userPreferencesService"}, {"original_string": "protected ListTable<T> listTable;", "modifier": "protected", "type": "ListTable<T>", "declarator": "listTable", "var_name": "listTable"}, {"original_string": "protected V presenter;", "modifier": "protected", "type": "V", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Inject\n    @DataField(\"column\")\n    protected HTMLDivElement column;", "modifier": "@Inject\n    @DataField(\"column\")\n    protected", "type": "HTMLDivElement", "declarator": "column", "var_name": "column"}, {"original_string": "@Inject\n    @DataField(\"active-filters\")\n    protected ActiveFilters filters;", "modifier": "@Inject\n    @DataField(\"active-filters\")\n    protected", "type": "ActiveFilters", "declarator": "filters", "var_name": "filters"}, {"original_string": "@Inject\n    @DataField(\"alert\")\n    protected BlockingError alert;", "modifier": "@Inject\n    @DataField(\"alert\")\n    protected", "type": "BlockingError", "declarator": "alert", "var_name": "alert"}], "methods": [{"identifier": "displayNotification", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void displayNotification(String text)", "full_signature": "public void displayNotification(String text)", "class_method_signature": "AbstractMultiGridView.displayNotification(String text)", "testcase": false, "constructor": false}, {"identifier": "displayBlockingError", "parameters": "(String summary,\n                                     String content)", "modifiers": "@Override public", "return": "void", "signature": "void displayBlockingError(String summary,\n                                     String content)", "full_signature": "@Override public void displayBlockingError(String summary,\n                                     String content)", "class_method_signature": "AbstractMultiGridView.displayBlockingError(String summary,\n                                     String content)", "testcase": false, "constructor": false}, {"identifier": "clearBlockingError", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearBlockingError()", "full_signature": "@Override public void clearBlockingError()", "class_method_signature": "AbstractMultiGridView.clearBlockingError()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(final V presenter)", "modifiers": "public", "return": "void", "signature": "void init(final V presenter)", "full_signature": "public void init(final V presenter)", "class_method_signature": "AbstractMultiGridView.init(final V presenter)", "testcase": false, "constructor": false}, {"identifier": "controlBulkOperations", "parameters": "(final ListTable<T> extendedPagedTable)", "modifiers": "protected", "return": "void", "signature": "void controlBulkOperations(final ListTable<T> extendedPagedTable)", "full_signature": "protected void controlBulkOperations(final ListTable<T> extendedPagedTable)", "class_method_signature": "AbstractMultiGridView.controlBulkOperations(final ListTable<T> extendedPagedTable)", "testcase": false, "constructor": false}, {"identifier": "enableWidgets", "parameters": "(final Widget widget,\n                                 boolean enable)", "modifiers": "protected", "return": "void", "signature": "void enableWidgets(final Widget widget,\n                                 boolean enable)", "full_signature": "protected void enableWidgets(final Widget widget,\n                                 boolean enable)", "class_method_signature": "AbstractMultiGridView.enableWidgets(final Widget widget,\n                                 boolean enable)", "testcase": false, "constructor": false}, {"identifier": "loadListTable", "parameters": "(final String key,\n                              final Consumer<ListTable<T>> readyCallback)", "modifiers": "@Override public", "return": "void", "signature": "void loadListTable(final String key,\n                              final Consumer<ListTable<T>> readyCallback)", "full_signature": "@Override public void loadListTable(final String key,\n                              final Consumer<ListTable<T>> readyCallback)", "class_method_signature": "AbstractMultiGridView.loadListTable(final String key,\n                              final Consumer<ListTable<T>> readyCallback)", "testcase": false, "constructor": false}, {"identifier": "addColumnSortHandler", "parameters": "(ExtendedPagedTable listTable)", "modifiers": "protected", "return": "void", "signature": "void addColumnSortHandler(ExtendedPagedTable listTable)", "full_signature": "protected void addColumnSortHandler(ExtendedPagedTable listTable)", "class_method_signature": "AbstractMultiGridView.addColumnSortHandler(ExtendedPagedTable listTable)", "testcase": false, "constructor": false}, {"identifier": "addNewTableToColumn", "parameters": "(final ListTable<T> newListGrid)", "modifiers": "protected", "return": "void", "signature": "void addNewTableToColumn(final ListTable<T> newListGrid)", "full_signature": "protected void addNewTableToColumn(final ListTable<T> newListGrid)", "class_method_signature": "AbstractMultiGridView.addNewTableToColumn(final ListTable<T> newListGrid)", "testcase": false, "constructor": false}, {"identifier": "initGenericColumn", "parameters": "(final String key)", "modifiers": "protected", "return": "Column", "signature": "Column initGenericColumn(final String key)", "full_signature": "protected Column initGenericColumn(final String key)", "class_method_signature": "AbstractMultiGridView.initGenericColumn(final String key)", "testcase": false, "constructor": false}, {"identifier": "showBusyIndicator", "parameters": "(final String message)", "modifiers": "public", "return": "void", "signature": "void showBusyIndicator(final String message)", "full_signature": "public void showBusyIndicator(final String message)", "class_method_signature": "AbstractMultiGridView.showBusyIndicator(final String message)", "testcase": false, "constructor": false}, {"identifier": "hideBusyIndicator", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void hideBusyIndicator()", "full_signature": "public void hideBusyIndicator()", "class_method_signature": "AbstractMultiGridView.hideBusyIndicator()", "testcase": false, "constructor": false}, {"identifier": "getListGrid", "parameters": "()", "modifiers": "public", "return": "ListTable<T>", "signature": "ListTable<T> getListGrid()", "full_signature": "public ListTable<T> getListGrid()", "class_method_signature": "AbstractMultiGridView.getListGrid()", "testcase": false, "constructor": false}, {"identifier": "initColumns", "parameters": "(ListTable<T> extendedPagedTable)", "modifiers": "public abstract", "return": "void", "signature": "void initColumns(ListTable<T> extendedPagedTable)", "full_signature": "public abstract void initColumns(ListTable<T> extendedPagedTable)", "class_method_signature": "AbstractMultiGridView.initColumns(ListTable<T> extendedPagedTable)", "testcase": false, "constructor": false}, {"identifier": "initSelectionModel", "parameters": "(final ListTable<T> extendedPagedTable)", "modifiers": "public", "return": "void", "signature": "void initSelectionModel(final ListTable<T> extendedPagedTable)", "full_signature": "public void initSelectionModel(final ListTable<T> extendedPagedTable)", "class_method_signature": "AbstractMultiGridView.initSelectionModel(final ListTable<T> extendedPagedTable)", "testcase": false, "constructor": false}, {"identifier": "hasBulkActions", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean hasBulkActions()", "full_signature": "protected boolean hasBulkActions()", "class_method_signature": "AbstractMultiGridView.hasBulkActions()", "testcase": false, "constructor": false}, {"identifier": "getEmptyTableCaption", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getEmptyTableCaption()", "full_signature": "public abstract String getEmptyTableCaption()", "class_method_signature": "AbstractMultiGridView.getEmptyTableCaption()", "testcase": false, "constructor": false}, {"identifier": "getInitColumns", "parameters": "()", "modifiers": "public abstract", "return": "List<String>", "signature": "List<String> getInitColumns()", "full_signature": "public abstract List<String> getInitColumns()", "class_method_signature": "AbstractMultiGridView.getInitColumns()", "testcase": false, "constructor": false}, {"identifier": "getBannedColumns", "parameters": "()", "modifiers": "public abstract", "return": "List<String>", "signature": "List<String> getBannedColumns()", "full_signature": "public abstract List<String> getBannedColumns()", "class_method_signature": "AbstractMultiGridView.getBannedColumns()", "testcase": false, "constructor": false}, {"identifier": "setUserPreferencesService", "parameters": "(final Caller<UserPreferencesService> userPreferencesService)", "modifiers": "@Inject public", "return": "void", "signature": "void setUserPreferencesService(final Caller<UserPreferencesService> userPreferencesService)", "full_signature": "@Inject public void setUserPreferencesService(final Caller<UserPreferencesService> userPreferencesService)", "class_method_signature": "AbstractMultiGridView.setUserPreferencesService(final Caller<UserPreferencesService> userPreferencesService)", "testcase": false, "constructor": false}, {"identifier": "createTextColumn", "parameters": "(final String columnId,\n                                              final Function<T, String> valueFunction)", "modifiers": "public", "return": "Column<T, String>", "signature": "Column<T, String> createTextColumn(final String columnId,\n                                              final Function<T, String> valueFunction)", "full_signature": "public Column<T, String> createTextColumn(final String columnId,\n                                              final Function<T, String> valueFunction)", "class_method_signature": "AbstractMultiGridView.createTextColumn(final String columnId,\n                                              final Function<T, String> valueFunction)", "testcase": false, "constructor": false}, {"identifier": "initBulkActions", "parameters": "(final ExtendedPagedTable<T> extendedPagedTable)", "modifiers": "protected", "return": "void", "signature": "void initBulkActions(final ExtendedPagedTable<T> extendedPagedTable)", "full_signature": "protected void initBulkActions(final ExtendedPagedTable<T> extendedPagedTable)", "class_method_signature": "AbstractMultiGridView.initBulkActions(final ExtendedPagedTable<T> extendedPagedTable)", "testcase": false, "constructor": false}, {"identifier": "getBulkActionsItems", "parameters": "(ExtendedPagedTable<T> extendedPagedTable)", "modifiers": "protected", "return": "List<AnchorListItem>", "signature": "List<AnchorListItem> getBulkActionsItems(ExtendedPagedTable<T> extendedPagedTable)", "full_signature": "protected List<AnchorListItem> getBulkActionsItems(ExtendedPagedTable<T> extendedPagedTable)", "class_method_signature": "AbstractMultiGridView.getBulkActionsItems(ExtendedPagedTable<T> extendedPagedTable)", "testcase": false, "constructor": false}, {"identifier": "createNumberColumn", "parameters": "(final String columnId,\n                                                final Function<T, Number> valueFunction)", "modifiers": "public", "return": "Column<T, Number>", "signature": "Column<T, Number> createNumberColumn(final String columnId,\n                                                final Function<T, Number> valueFunction)", "full_signature": "public Column<T, Number> createNumberColumn(final String columnId,\n                                                final Function<T, Number> valueFunction)", "class_method_signature": "AbstractMultiGridView.createNumberColumn(final String columnId,\n                                                final Function<T, Number> valueFunction)", "testcase": false, "constructor": false}, {"identifier": "initChecksColumn", "parameters": "(final ListTable<T> extendedPagedTable)", "modifiers": "public", "return": "ColumnMeta<T>", "signature": "ColumnMeta<T> initChecksColumn(final ListTable<T> extendedPagedTable)", "full_signature": "public ColumnMeta<T> initChecksColumn(final ListTable<T> extendedPagedTable)", "class_method_signature": "AbstractMultiGridView.initChecksColumn(final ListTable<T> extendedPagedTable)", "testcase": false, "constructor": false}, {"identifier": "isColumnAdded", "parameters": "(List<ColumnMeta<T>> columnMetas,\n                                    String caption)", "modifiers": "protected", "return": "boolean", "signature": "boolean isColumnAdded(List<ColumnMeta<T>> columnMetas,\n                                    String caption)", "full_signature": "protected boolean isColumnAdded(List<ColumnMeta<T>> columnMetas,\n                                    String caption)", "class_method_signature": "AbstractMultiGridView.isColumnAdded(List<ColumnMeta<T>> columnMetas,\n                                    String caption)", "testcase": false, "constructor": false}, {"identifier": "existsColumnWithSameName", "parameters": "(GridColumnPreference gridColumnPreference, List<ColumnMeta<T>> columns)", "modifiers": "protected", "return": "boolean", "signature": "boolean existsColumnWithSameName(GridColumnPreference gridColumnPreference, List<ColumnMeta<T>> columns)", "full_signature": "protected boolean existsColumnWithSameName(GridColumnPreference gridColumnPreference, List<ColumnMeta<T>> columns)", "class_method_signature": "AbstractMultiGridView.existsColumnWithSameName(GridColumnPreference gridColumnPreference, List<ColumnMeta<T>> columns)", "testcase": false, "constructor": false}, {"identifier": "getConditionalActions", "parameters": "()", "modifiers": "protected abstract", "return": "List<ConditionalAction<T>>", "signature": "List<ConditionalAction<T>> getConditionalActions()", "full_signature": "protected abstract List<ConditionalAction<T>> getConditionalActions()", "class_method_signature": "AbstractMultiGridView.getConditionalActions()", "testcase": false, "constructor": false}, {"identifier": "initActionsColumn", "parameters": "()", "modifiers": "public", "return": "ColumnMeta<T>", "signature": "ColumnMeta<T> initActionsColumn()", "full_signature": "public ColumnMeta<T> initActionsColumn()", "class_method_signature": "AbstractMultiGridView.initActionsColumn()", "testcase": false, "constructor": false}, {"identifier": "renameVariables", "parameters": "(ListTable<T> extendedPagedTable, List<ColumnMeta<T>> columnMetas)", "modifiers": "public", "return": "List<ColumnMeta<T>>", "signature": "List<ColumnMeta<T>> renameVariables(ListTable<T> extendedPagedTable, List<ColumnMeta<T>> columnMetas)", "full_signature": "public List<ColumnMeta<T>> renameVariables(ListTable<T> extendedPagedTable, List<ColumnMeta<T>> columnMetas)", "class_method_signature": "AbstractMultiGridView.renameVariables(ListTable<T> extendedPagedTable, List<ColumnMeta<T>> columnMetas)", "testcase": false, "constructor": false}, {"identifier": "newColumnMeta", "parameters": "(String columnName, boolean existsColumnWithSameName, boolean isVisible)", "modifiers": "private", "return": "ColumnMeta<T>", "signature": "ColumnMeta<T> newColumnMeta(String columnName, boolean existsColumnWithSameName, boolean isVisible)", "full_signature": "private ColumnMeta<T> newColumnMeta(String columnName, boolean existsColumnWithSameName, boolean isVisible)", "class_method_signature": "AbstractMultiGridView.newColumnMeta(String columnName, boolean existsColumnWithSameName, boolean isVisible)", "testcase": false, "constructor": false}, {"identifier": "addDomainSpecifColumns", "parameters": "(Set<String> columns)", "modifiers": "public", "return": "void", "signature": "void addDomainSpecifColumns(Set<String> columns)", "full_signature": "public void addDomainSpecifColumns(Set<String> columns)", "class_method_signature": "AbstractMultiGridView.addDomainSpecifColumns(Set<String> columns)", "testcase": false, "constructor": false}, {"identifier": "addDomainColumns", "parameters": "(List<ColumnMeta<T>> columnMetaList, Set<String> columns)", "modifiers": "private", "return": "void", "signature": "void addDomainColumns(List<ColumnMeta<T>> columnMetaList, Set<String> columns)", "full_signature": "private void addDomainColumns(List<ColumnMeta<T>> columnMetaList, Set<String> columns)", "class_method_signature": "AbstractMultiGridView.addDomainColumns(List<ColumnMeta<T>> columnMetaList, Set<String> columns)", "testcase": false, "constructor": false}, {"identifier": "newColumnIsNotInDataStoreNames", "parameters": "(String newColumn, List<ColumnMeta<T>> columnMetaList)", "modifiers": "private", "return": "boolean", "signature": "boolean newColumnIsNotInDataStoreNames(String newColumn, List<ColumnMeta<T>> columnMetaList)", "full_signature": "private boolean newColumnIsNotInDataStoreNames(String newColumn, List<ColumnMeta<T>> columnMetaList)", "class_method_signature": "AbstractMultiGridView.newColumnIsNotInDataStoreNames(String newColumn, List<ColumnMeta<T>> columnMetaList)", "testcase": false, "constructor": false}, {"identifier": "renameDomainSpecifColumns", "parameters": "(ExtendedPagedTable<T> extendedPagedTable,\n                                                          Set<String> columns)", "modifiers": "private", "return": "List<ColumnMeta<T>>", "signature": "List<ColumnMeta<T>> renameDomainSpecifColumns(ExtendedPagedTable<T> extendedPagedTable,\n                                                          Set<String> columns)", "full_signature": "private List<ColumnMeta<T>> renameDomainSpecifColumns(ExtendedPagedTable<T> extendedPagedTable,\n                                                          Set<String> columns)", "class_method_signature": "AbstractMultiGridView.renameDomainSpecifColumns(ExtendedPagedTable<T> extendedPagedTable,\n                                                          Set<String> columns)", "testcase": false, "constructor": false}, {"identifier": "removeRedundantColumns", "parameters": "(ExtendedPagedTable<T> extendedPagedTable,\n                                                              Set<String> columns)", "modifiers": "private", "return": "List<GridColumnPreference>", "signature": "List<GridColumnPreference> removeRedundantColumns(ExtendedPagedTable<T> extendedPagedTable,\n                                                              Set<String> columns)", "full_signature": "private List<GridColumnPreference> removeRedundantColumns(ExtendedPagedTable<T> extendedPagedTable,\n                                                              Set<String> columns)", "class_method_signature": "AbstractMultiGridView.removeRedundantColumns(ExtendedPagedTable<T> extendedPagedTable,\n                                                              Set<String> columns)", "testcase": false, "constructor": false}, {"identifier": "removeDomainSpecifColumns", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeDomainSpecifColumns()", "full_signature": "public void removeDomainSpecifColumns()", "class_method_signature": "AbstractMultiGridView.removeDomainSpecifColumns()", "testcase": false, "constructor": false}, {"identifier": "setSaveFilterCallback", "parameters": "(final BiConsumer<String, Consumer<String>> filterNameCallback)", "modifiers": "@Override public", "return": "void", "signature": "void setSaveFilterCallback(final BiConsumer<String, Consumer<String>> filterNameCallback)", "full_signature": "@Override public void setSaveFilterCallback(final BiConsumer<String, Consumer<String>> filterNameCallback)", "class_method_signature": "AbstractMultiGridView.setSaveFilterCallback(final BiConsumer<String, Consumer<String>> filterNameCallback)", "testcase": false, "constructor": false}, {"identifier": "addActiveFilter", "parameters": "(final ActiveFilterItem<T> filter)", "modifiers": "@Override public", "return": "void", "signature": "void addActiveFilter(final ActiveFilterItem<T> filter)", "full_signature": "@Override public void addActiveFilter(final ActiveFilterItem<T> filter)", "class_method_signature": "AbstractMultiGridView.addActiveFilter(final ActiveFilterItem<T> filter)", "testcase": false, "constructor": false}, {"identifier": "removeActiveFilter", "parameters": "(final ActiveFilterItem<T> filter)", "modifiers": "@Override public", "return": "void", "signature": "void removeActiveFilter(final ActiveFilterItem<T> filter)", "full_signature": "@Override public void removeActiveFilter(final ActiveFilterItem<T> filter)", "class_method_signature": "AbstractMultiGridView.removeActiveFilter(final ActiveFilterItem<T> filter)", "testcase": false, "constructor": false}, {"identifier": "removeAllActiveFilters", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllActiveFilters()", "full_signature": "@Override public void removeAllActiveFilters()", "class_method_signature": "AbstractMultiGridView.removeAllActiveFilters()", "testcase": false, "constructor": false}, {"identifier": "onResize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onResize()", "full_signature": "@Override public void onResize()", "class_method_signature": "AbstractMultiGridView.onResize()", "testcase": false, "constructor": false}, {"identifier": "getSortColumn", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSortColumn()", "full_signature": "@Override public String getSortColumn()", "class_method_signature": "AbstractMultiGridView.getSortColumn()", "testcase": false, "constructor": false}, {"identifier": "isSortAscending", "parameters": "()", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean isSortAscending()", "full_signature": "@Override public Boolean isSortAscending()", "class_method_signature": "AbstractMultiGridView.isSortAscending()", "testcase": false, "constructor": false}, {"identifier": "reloadColumnSortList", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void reloadColumnSortList()", "full_signature": "protected void reloadColumnSortList()", "class_method_signature": "AbstractMultiGridView.reloadColumnSortList()", "testcase": false, "constructor": false}], "file": "jbpm-wb-common/jbpm-wb-common-client/src/main/java/org/jbpm/workbench/common/client/list/AbstractMultiGridView.java"}, "focal_method": {"identifier": "getInitColumns", "parameters": "()", "modifiers": "public abstract", "return": "List<String>", "body": "public abstract List<String> getInitColumns();", "signature": "List<String> getInitColumns()", "full_signature": "public abstract List<String> getInitColumns()", "class_method_signature": "AbstractMultiGridView.getInitColumns()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}