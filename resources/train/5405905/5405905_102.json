{"test_class": {"identifier": "CaseProvisioningServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private CaseProvisioningExecutor executor;", "modifier": "@Mock\n    private", "type": "CaseProvisioningExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Mock\n    private CaseProvisioningSettings settings;", "modifier": "@Mock\n    private", "type": "CaseProvisioningSettings", "declarator": "settings", "var_name": "settings"}, {"original_string": "@Mock\n    private ExecutorService executorService;", "modifier": "@Mock\n    private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "@InjectMocks\n    private CaseProvisioningServiceImpl service;", "modifier": "@InjectMocks\n    private", "type": "CaseProvisioningServiceImpl", "declarator": "service", "var_name": "service"}], "file": "jbpm-wb-integration/jbpm-wb-integration-backend/src/test/java/org/jbpm/workbench/wi/backend/server/casemgmt/service/CaseProvisioningServiceImplTest.java"}, "test_case": {"identifier": "testProvisioningUsingWarPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProvisioningUsingWarPath() {\n        final String path = \"path/to/file.war\";\n        when(settings.isProvisioningEnabled()).thenReturn(true);\n        when(settings.isDeployFromLocalPath()).thenReturn(true);\n        when(settings.getPath()).thenReturn(path);\n\n        service.init();\n\n        ArgumentCaptor<Input> captor = ArgumentCaptor.forClass(Input.class);\n        verify(executor).execute(any(PipelineExecutor.class),\n                                 any(Pipeline.class),\n                                 captor.capture());\n        assertEquals(path,\n                     captor.getValue().get(\"war-path\"));\n    }", "signature": "void testProvisioningUsingWarPath()", "full_signature": "@Test public void testProvisioningUsingWarPath()", "class_method_signature": "CaseProvisioningServiceImplTest.testProvisioningUsingWarPath()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isProvisioningEnabled", "thenReturn", "when", "isDeployFromLocalPath", "thenReturn", "when", "getPath", "init", "forClass", "execute", "verify", "any", "any", "capture", "assertEquals", "get", "getValue"]}, "focal_class": {"identifier": "CaseProvisioningServiceImpl", "superclass": "", "interfaces": "implements CaseProvisioningService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CaseProvisioningServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CaseProvisioningServiceImpl.class)", "var_name": "LOGGER"}, {"original_string": "private static final String PIPELINE_NAME = \"jBPM Case Management showcase pipeline\";", "modifier": "private static final", "type": "String", "declarator": "PIPELINE_NAME = \"jBPM Case Management showcase pipeline\"", "var_name": "PIPELINE_NAME"}, {"original_string": "@Inject\n    private CaseProvisioningSettings settings;", "modifier": "@Inject\n    private", "type": "CaseProvisioningSettings", "declarator": "settings", "var_name": "settings"}, {"original_string": "@Inject\n    private CaseProvisioningExecutor executor;", "modifier": "@Inject\n    private", "type": "CaseProvisioningExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private CaseProvisioningStatus status = DISABLED;", "modifier": "private", "type": "CaseProvisioningStatus", "declarator": "status = DISABLED", "var_name": "status"}, {"original_string": "private String caseAppContext;", "modifier": "private", "type": "String", "declarator": "caseAppContext", "var_name": "caseAppContext"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "CaseProvisioningServiceImpl.init()", "testcase": false, "constructor": false}, {"identifier": "getProvisioningStatus", "parameters": "()", "modifiers": "@Override public", "return": "CaseProvisioningStatus", "signature": "CaseProvisioningStatus getProvisioningStatus()", "full_signature": "@Override public CaseProvisioningStatus getProvisioningStatus()", "class_method_signature": "CaseProvisioningServiceImpl.getProvisioningStatus()", "testcase": false, "constructor": false}, {"identifier": "onCaseManagementProvisioningStartedEvent", "parameters": "(@Observes CaseProvisioningStartedEvent event)", "modifiers": "public", "return": "void", "signature": "void onCaseManagementProvisioningStartedEvent(@Observes CaseProvisioningStartedEvent event)", "full_signature": "public void onCaseManagementProvisioningStartedEvent(@Observes CaseProvisioningStartedEvent event)", "class_method_signature": "CaseProvisioningServiceImpl.onCaseManagementProvisioningStartedEvent(@Observes CaseProvisioningStartedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onCaseManagementProvisioningCompletedEvent", "parameters": "(@Observes CaseProvisioningCompletedEvent event)", "modifiers": "public", "return": "void", "signature": "void onCaseManagementProvisioningCompletedEvent(@Observes CaseProvisioningCompletedEvent event)", "full_signature": "public void onCaseManagementProvisioningCompletedEvent(@Observes CaseProvisioningCompletedEvent event)", "class_method_signature": "CaseProvisioningServiceImpl.onCaseManagementProvisioningCompletedEvent(@Observes CaseProvisioningCompletedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onCaseManagementProvisioningFailedEvent", "parameters": "(@Observes CaseProvisioningFailedEvent event)", "modifiers": "public", "return": "void", "signature": "void onCaseManagementProvisioningFailedEvent(@Observes CaseProvisioningFailedEvent event)", "full_signature": "public void onCaseManagementProvisioningFailedEvent(@Observes CaseProvisioningFailedEvent event)", "class_method_signature": "CaseProvisioningServiceImpl.onCaseManagementProvisioningFailedEvent(@Observes CaseProvisioningFailedEvent event)", "testcase": false, "constructor": false}, {"identifier": "getApplicationContext", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getApplicationContext()", "full_signature": "@Override public String getApplicationContext()", "class_method_signature": "CaseProvisioningServiceImpl.getApplicationContext()", "testcase": false, "constructor": false}], "file": "jbpm-wb-integration/jbpm-wb-integration-backend/src/main/java/org/jbpm/workbench/wi/backend/server/casemgmt/service/CaseProvisioningServiceImpl.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "body": "@PostConstruct\n    public void init() {\n        if (settings.isProvisioningEnabled() == false) {\n            //Provisioning disabled, skipping it entirely\n            return;\n        }\n\n        LOGGER.info(\"jBPM Case Management Showcase deployment enabled\");\n\n        final InMemoryRuntimeRegistry runtimeRegistry = new InMemoryRuntimeRegistry();\n        final WildflyAccessInterface wildflyAccessInterface = new WildflyAccessInterfaceImpl();\n\n        final PipelineConfigStage runtimeExec = new PipelineConfigStage(\"Wildfly Runtime Exec\",\n                                                                        new ContextAwareWildflyRuntimeExecConfig());\n\n        final PipelineExecutor pipelineExecutor;\n        final Pipeline pipeline;\n\n        final Input input = new Input();\n        input.put(WildflyProviderConfig.WILDFLY_USER,\n                  settings.getUsername());\n        input.put(WildflyProviderConfig.WILDFLY_PASSWORD,\n                  settings.getPassword());\n        input.put(WildflyProviderConfig.HOST,\n                  settings.getHost());\n        input.put(WildflyProviderConfig.MANAGEMENT_PORT,\n                  settings.getManagementPort());\n        input.put(WildflyProviderConfig.PROVIDER_NAME,\n                  \"WildFly\");\n        input.put(WildflyRuntimeConfiguration.REDEPLOY_STRATEGY,\n                  \"none\");\n\n        if (settings.isDeployFromLocalPath()) {\n            final PipelineConfigStage providerConfig = new PipelineConfigStage(\"Wildfly Provider Config\",\n                                                                               new WildflyProviderConfig() {\n                                                                               });\n\n            pipelineExecutor = new PipelineExecutor(asList(\n                    new WildflyProviderConfigExecutor(runtimeRegistry),\n                    new WildflyRuntimeExecExecutor(runtimeRegistry,\n                                                   wildflyAccessInterface)\n            ));\n\n            pipeline = PipelineFactory\n                    .newBuilder()\n                    .addConfigStage(providerConfig)\n                    .addConfigStage(runtimeExec)\n                    .buildAs(PIPELINE_NAME);\n\n            input.put(WildflyRuntimeConfiguration.WAR_PATH,\n                      settings.getPath());\n        } else {\n            final PipelineConfigStage mavenConfig = new PipelineConfigStage(\"Maven Artifact\",\n                                                                            new MavenDependencyConfigImpl());\n            final PipelineConfigStage providerConfig = new PipelineConfigStage(\"Wildfly Provider Config\",\n                                                                               new WildflyProviderConfig() {\n                                                                               });\n            final BuildRegistry buildRegistry = new InMemoryBuildRegistry();\n\n            pipelineExecutor = new PipelineExecutor(asList(\n                    new MavenDependencyConfigExecutor(buildRegistry),\n                    new WildflyProviderConfigExecutor(runtimeRegistry),\n                    new WildflyRuntimeExecExecutor(runtimeRegistry,\n                                                   wildflyAccessInterface)\n            ));\n\n            pipeline = PipelineFactory\n                    .newBuilder()\n                    .addConfigStage(mavenConfig)\n                    .addConfigStage(providerConfig)\n                    .addConfigStage(runtimeExec)\n                    .buildAs(PIPELINE_NAME);\n\n            input.put(\"artifact\",\n                      settings.getGAV());\n        }\n\n        executor.execute(pipelineExecutor,\n                         pipeline,\n                         input);\n    }", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "CaseProvisioningServiceImpl.init()", "testcase": false, "constructor": false, "invocations": ["isProvisioningEnabled", "info", "put", "getUsername", "put", "getPassword", "put", "getHost", "put", "getManagementPort", "put", "put", "isDeployFromLocalPath", "asList", "buildAs", "addConfigStage", "addConfigStage", "newBuilder", "put", "getPath", "asList", "buildAs", "addConfigStage", "addConfigStage", "addConfigStage", "newBuilder", "put", "getGAV", "execute"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}