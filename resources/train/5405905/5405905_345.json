{"test_class": {"identifier": "NewJobPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String serverTemplateId = \"serverTemplateId\";", "modifier": "private", "type": "String", "declarator": "serverTemplateId = \"serverTemplateId\"", "var_name": "serverTemplateId"}, {"original_string": "private String JOB_NAME = \"JOB_NAME_1\";", "modifier": "private", "type": "String", "declarator": "JOB_NAME = \"JOB_NAME_1\"", "var_name": "JOB_NAME"}, {"original_string": "private String JOB_TYPE = \"org.jbpm.executor.commands.PrintOutCommand\";", "modifier": "private", "type": "String", "declarator": "JOB_TYPE = \"org.jbpm.executor.commands.PrintOutCommand\"", "var_name": "JOB_TYPE"}, {"original_string": "private String JOB_RETRIES = \"5\";", "modifier": "private", "type": "String", "declarator": "JOB_RETRIES = \"5\"", "var_name": "JOB_RETRIES"}, {"original_string": "@Mock\n    private CallerMock<ExecutorService> executorServices;", "modifier": "@Mock\n    private", "type": "CallerMock<ExecutorService>", "declarator": "executorServices", "var_name": "executorServices"}, {"original_string": "@Mock\n    EventSourceMock<NotificationEvent> notificationEvent;", "modifier": "@Mock", "type": "EventSourceMock<NotificationEvent>", "declarator": "notificationEvent", "var_name": "notificationEvent"}, {"original_string": "@Mock\n    EventSourceMock<RequestChangedEvent> requestChangedEvent;", "modifier": "@Mock", "type": "EventSourceMock<RequestChangedEvent>", "declarator": "requestChangedEvent", "var_name": "requestChangedEvent"}, {"original_string": "@Mock\n    private ExecutorService executorServicesMock;", "modifier": "@Mock\n    private", "type": "ExecutorService", "declarator": "executorServicesMock", "var_name": "executorServicesMock"}, {"original_string": "@Mock\n    private NewJobPresenter.NewJobView view;", "modifier": "@Mock\n    private", "type": "NewJobPresenter.NewJobView", "declarator": "view", "var_name": "view"}, {"original_string": "@InjectMocks\n    private NewJobPresenter presenter;", "modifier": "@InjectMocks\n    private", "type": "NewJobPresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "jbpm-wb-executor-service/jbpm-wb-executor-service-client/src/test/java/org/jbpm/workbench/es/client/editors/quicknewjob/NewJobPresenterTest.java"}, "test_case": {"identifier": "testScheduleJobFailure_emptyNameError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScheduleJobFailure_emptyNameError() {\n        presenter.createJob(\"\",\n                            new Date(),\n                            JOB_TYPE,\n                            JOB_RETRIES,\n                            emptyList());\n\n        verify(view).show();\n        verify(view).cleanErrorMessages();\n        verify(view).showEmptyNameErrorMessage();\n\n        verifyZeroInteractions(executorServicesMock);\n\n        verify(view).showBasicPane();\n        verifyNoMoreInteractions(view);\n    }", "signature": "void testScheduleJobFailure_emptyNameError()", "full_signature": "@Test public void testScheduleJobFailure_emptyNameError()", "class_method_signature": "NewJobPresenterTest.testScheduleJobFailure_emptyNameError()", "testcase": true, "constructor": false, "invocations": ["createJob", "emptyList", "show", "verify", "cleanErrorMessages", "verify", "showEmptyNameErrorMessage", "verify", "verifyZeroInteractions", "showBasicPane", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "NewJobPresenter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Constants constants = Constants.INSTANCE;", "modifier": "private final", "type": "Constants", "declarator": "constants = Constants.INSTANCE", "var_name": "constants"}, {"original_string": "private Caller<ExecutorService> executorServices;", "modifier": "private", "type": "Caller<ExecutorService>", "declarator": "executorServices", "var_name": "executorServices"}, {"original_string": "private Event<NotificationEvent> notification;", "modifier": "private", "type": "Event<NotificationEvent>", "declarator": "notification", "var_name": "notification"}, {"original_string": "private Event<RequestChangedEvent> requestCreatedEvent;", "modifier": "private", "type": "Event<RequestChangedEvent>", "declarator": "requestCreatedEvent", "var_name": "requestCreatedEvent"}, {"original_string": "private String serverTemplateId;", "modifier": "private", "type": "String", "declarator": "serverTemplateId", "var_name": "serverTemplateId"}, {"original_string": "@Inject\n    protected NewJobView view;", "modifier": "@Inject\n    protected", "type": "NewJobView", "declarator": "view", "var_name": "view"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "NewJobPresenter.init()", "testcase": false, "constructor": false}, {"identifier": "openNewJobDialog", "parameters": "(String serverTemplateId)", "modifiers": "public", "return": "void", "signature": "void openNewJobDialog(String serverTemplateId)", "full_signature": "public void openNewJobDialog(String serverTemplateId)", "class_method_signature": "NewJobPresenter.openNewJobDialog(String serverTemplateId)", "testcase": false, "constructor": false}, {"identifier": "createJob", "parameters": "(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters)", "modifiers": "public", "return": "void", "signature": "void createJob(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters)", "full_signature": "public void createJob(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters)", "class_method_signature": "NewJobPresenter.createJob(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateForm", "parameters": "(String jobName,\n                                 String jobType,\n                                 String jobRetries)", "modifiers": "private", "return": "boolean", "signature": "boolean validateForm(String jobName,\n                                 String jobType,\n                                 String jobRetries)", "full_signature": "private boolean validateForm(String jobName,\n                                 String jobType,\n                                 String jobRetries)", "class_method_signature": "NewJobPresenter.validateForm(String jobName,\n                                 String jobType,\n                                 String jobRetries)", "testcase": false, "constructor": false}, {"identifier": "isInvalidCommandTypeError", "parameters": "(Throwable throwable)", "modifiers": "private", "return": "boolean", "signature": "boolean isInvalidCommandTypeError(Throwable throwable)", "full_signature": "private boolean isInvalidCommandTypeError(Throwable throwable)", "class_method_signature": "NewJobPresenter.isInvalidCommandTypeError(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "displayNotification", "parameters": "(String text)", "modifiers": "private", "return": "void", "signature": "void displayNotification(String text)", "full_signature": "private void displayNotification(String text)", "class_method_signature": "NewJobPresenter.displayNotification(String text)", "testcase": false, "constructor": false}, {"identifier": "setNotification", "parameters": "(final Event<NotificationEvent> notification)", "modifiers": "@Inject public", "return": "void", "signature": "void setNotification(final Event<NotificationEvent> notification)", "full_signature": "@Inject public void setNotification(final Event<NotificationEvent> notification)", "class_method_signature": "NewJobPresenter.setNotification(final Event<NotificationEvent> notification)", "testcase": false, "constructor": false}, {"identifier": "setRequestChangedEvent", "parameters": "(final Event<RequestChangedEvent> requestChangedEvent)", "modifiers": "@Inject public", "return": "void", "signature": "void setRequestChangedEvent(final Event<RequestChangedEvent> requestChangedEvent)", "full_signature": "@Inject public void setRequestChangedEvent(final Event<RequestChangedEvent> requestChangedEvent)", "class_method_signature": "NewJobPresenter.setRequestChangedEvent(final Event<RequestChangedEvent> requestChangedEvent)", "testcase": false, "constructor": false}, {"identifier": "setExecutorService", "parameters": "(final Caller<ExecutorService> executorService)", "modifiers": "@Inject public", "return": "void", "signature": "void setExecutorService(final Caller<ExecutorService> executorService)", "full_signature": "@Inject public void setExecutorService(final Caller<ExecutorService> executorService)", "class_method_signature": "NewJobPresenter.setExecutorService(final Caller<ExecutorService> executorService)", "testcase": false, "constructor": false}], "file": "jbpm-wb-executor-service/jbpm-wb-executor-service-client/src/main/java/org/jbpm/workbench/es/client/editors/quicknewjob/NewJobPresenter.java"}, "focal_method": {"identifier": "createJob", "parameters": "(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters)", "modifiers": "public", "return": "void", "body": "public void createJob(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters) {\n        if (validateForm(jobName,\n                         jobType,\n                         numberOfRetries)) {\n            Map<String, String> jobCtxMap = new HashMap<String, String>();\n            if (parameters != null) {\n                for (RequestParameterSummary param : parameters) {\n                    if (!(constants.ClickToEdit().equals(param.getKey()) ||\n                            constants.ClickToEdit().equals(param.getValue()))) {\n                        jobCtxMap.put(param.getKey(),\n                                      param.getValue());\n                    }\n                }\n            }\n            jobCtxMap.put(RequestDataSetConstants.COLUMN_RETRIES,\n                          numberOfRetries); // TODO make legacy keys hard to repeat by accident\n            jobCtxMap.put(RequestDataSetConstants.COLUMN_BUSINESSKEY,\n                          jobName); // TODO make legacy keys hard to repeat by accident\n\n            executorServices.call(\n                    (Long requestId) -> {\n                        displayNotification(constants.RequestScheduled(requestId));\n                        requestCreatedEvent.fire(new RequestChangedEvent(requestId));\n                        view.hide();\n                    },\n                    (Message message,\n                     Throwable throwable) -> {\n                        view.showBasicPane();\n                        if (isInvalidCommandTypeError(throwable)) {\n                            view.showInvalidTypeErrorMessage();\n                        } else {\n                            view.showInlineNotification(throwable.getCause().getMessage());\n                        }\n                        return false;\n                    }).scheduleRequest(serverTemplateId,\n                                       jobType,\n                                       dueDate,\n                                       jobCtxMap);\n        } else {\n            view.showBasicPane();\n        }\n    }", "signature": "void createJob(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters)", "full_signature": "public void createJob(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters)", "class_method_signature": "NewJobPresenter.createJob(String jobName,\n                          Date dueDate,\n                          String jobType,\n                          String numberOfRetries,\n                          List<RequestParameterSummary> parameters)", "testcase": false, "constructor": false, "invocations": ["validateForm", "equals", "ClickToEdit", "getKey", "equals", "ClickToEdit", "getValue", "put", "getKey", "getValue", "put", "put", "scheduleRequest", "call", "displayNotification", "RequestScheduled", "fire", "hide", "showBasicPane", "isInvalidCommandTypeError", "showInvalidTypeErrorMessage", "showInlineNotification", "getMessage", "getCause", "showBasicPane"]}, "repository": {"repo_id": 5405905, "url": "https://github.com/kiegroup/jbpm-wb", "stars": 36, "created": "8/13/2012 11:08:21 PM +00:00", "updates": "2020-01-21T13:08:37+00:00", "fork": "False", "license": "licensed"}}