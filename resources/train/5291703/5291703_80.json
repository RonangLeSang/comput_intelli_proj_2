{"test_class": {"identifier": "ConstrProjectInfoBuilderRefTest", "superclass": "", "interfaces": "", "fields": [], "file": "netbeans-gradle-default-models/src/test/java/org/netbeans/gradle/model/internal/ConstrProjectInfoBuilderRefTest.java"}, "test_case": {"identifier": "testNoArgumentWithoutPackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoArgumentWithoutPackage() {\n        ProjectInfoBuilder2<TestObj> builderRef = create(TestObj.class, TestInfoBuilder.REL_NAME);\n\n        TestObj returned = builderRef.getProjectInfo(new Object());\n\n        assertSame(\"model\", TestInfoBuilder.DEFAULT_ARG, returned);\n    }", "signature": "void testNoArgumentWithoutPackage()", "full_signature": "@Test public void testNoArgumentWithoutPackage()", "class_method_signature": "ConstrProjectInfoBuilderRefTest.testNoArgumentWithoutPackage()", "testcase": true, "constructor": false, "invocations": ["create", "getProjectInfo", "assertSame"]}, "focal_class": {"identifier": "ConstrProjectInfoBuilderRef", "superclass": "", "interfaces": "implements ProjectInfoBuilder2<T>, BuilderWrapper", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final Class<? extends T> modelType;", "modifier": "private final", "type": "Class<? extends T>", "declarator": "modelType", "var_name": "modelType"}, {"original_string": "private final String wrappedTypeName;", "modifier": "private final", "type": "String", "declarator": "wrappedTypeName", "var_name": "wrappedTypeName"}, {"original_string": "private final Object[] arguments;", "modifier": "private final", "type": "Object[]", "declarator": "arguments", "var_name": "arguments"}, {"original_string": "private final AtomicReference<ProjectInfoBuilder2<?>> wrappedRef;", "modifier": "private final", "type": "AtomicReference<ProjectInfoBuilder2<?>>", "declarator": "wrappedRef", "var_name": "wrappedRef"}], "methods": [{"identifier": "ConstrProjectInfoBuilderRef", "parameters": "(Class<? extends T> modelType, String wrappedTypeName, Object[] arguments)", "modifiers": "public", "return": "", "signature": " ConstrProjectInfoBuilderRef(Class<? extends T> modelType, String wrappedTypeName, Object[] arguments)", "full_signature": "public  ConstrProjectInfoBuilderRef(Class<? extends T> modelType, String wrappedTypeName, Object[] arguments)", "class_method_signature": "ConstrProjectInfoBuilderRef.ConstrProjectInfoBuilderRef(Class<? extends T> modelType, String wrappedTypeName, Object[] arguments)", "testcase": false, "constructor": true}, {"identifier": "isApplicable", "parameters": "(Class<?>[] parameterTypes, Object[] arguments)", "modifiers": "private static", "return": "boolean", "signature": "boolean isApplicable(Class<?>[] parameterTypes, Object[] arguments)", "full_signature": "private static boolean isApplicable(Class<?>[] parameterTypes, Object[] arguments)", "class_method_signature": "ConstrProjectInfoBuilderRef.isApplicable(Class<?>[] parameterTypes, Object[] arguments)", "testcase": false, "constructor": false}, {"identifier": "rethrow", "parameters": "(Throwable ex)", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException rethrow(Throwable ex)", "full_signature": "private RuntimeException rethrow(Throwable ex)", "class_method_signature": "ConstrProjectInfoBuilderRef.rethrow(Throwable ex)", "testcase": false, "constructor": false}, {"identifier": "getWrapped", "parameters": "()", "modifiers": "private", "return": "ProjectInfoBuilder2<?>", "signature": "ProjectInfoBuilder2<?> getWrapped()", "full_signature": "private ProjectInfoBuilder2<?> getWrapped()", "class_method_signature": "ConstrProjectInfoBuilderRef.getWrapped()", "testcase": false, "constructor": false}, {"identifier": "createWrapped", "parameters": "()", "modifiers": "private", "return": "ProjectInfoBuilder2<?>", "signature": "ProjectInfoBuilder2<?> createWrapped()", "full_signature": "private ProjectInfoBuilder2<?> createWrapped()", "class_method_signature": "ConstrProjectInfoBuilderRef.createWrapped()", "testcase": false, "constructor": false}, {"identifier": "getProjectInfo", "parameters": "(Object project)", "modifiers": "@Override public", "return": "T", "signature": "T getProjectInfo(Object project)", "full_signature": "@Override public T getProjectInfo(Object project)", "class_method_signature": "ConstrProjectInfoBuilderRef.getProjectInfo(Object project)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ConstrProjectInfoBuilderRef.getName()", "testcase": false, "constructor": false}, {"identifier": "getWrappedObject", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getWrappedObject()", "full_signature": "@Override public Object getWrappedObject()", "class_method_signature": "ConstrProjectInfoBuilderRef.getWrappedObject()", "testcase": false, "constructor": false}, {"identifier": "getWrappedType", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getWrappedType()", "full_signature": "@Override public Class<?> getWrappedType()", "class_method_signature": "ConstrProjectInfoBuilderRef.getWrappedType()", "testcase": false, "constructor": false}, {"identifier": "writeReplace", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object writeReplace()", "full_signature": "private Object writeReplace()", "class_method_signature": "ConstrProjectInfoBuilderRef.writeReplace()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "private void readObject(ObjectInputStream stream)", "class_method_signature": "ConstrProjectInfoBuilderRef.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}], "file": "netbeans-gradle-default-models/src/main/java/org/netbeans/gradle/model/internal/ConstrProjectInfoBuilderRef.java"}, "focal_method": {"identifier": "getProjectInfo", "parameters": "(Object project)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T getProjectInfo(Object project) {\n        Object result = getWrapped().getProjectInfo(project);\n        return modelType.cast(result);\n    }", "signature": "T getProjectInfo(Object project)", "full_signature": "@Override public T getProjectInfo(Object project)", "class_method_signature": "ConstrProjectInfoBuilderRef.getProjectInfo(Object project)", "testcase": false, "constructor": false, "invocations": ["getProjectInfo", "getWrapped", "cast"]}, "repository": {"repo_id": 5291703, "url": "https://github.com/kelemen/netbeans-gradle-project", "language": "Java", "is_fork": false, "fork_count": 66, "stargazer_count": 173, "size": 12255, "license": "licensed"}}