{"test_class": {"identifier": "TransferableExceptionWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "netbeans-gradle-default-models/src/test/java/org/netbeans/gradle/model/util/TransferableExceptionWrapperTest.java"}, "test_case": {"identifier": "testWithSuppressed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithSuppressed() throws Exception {\n        // Java 7 only test.\n        Assume.assumeTrue(\"This test is for Java7 only\", JavaVersion.current().isJava7Compatible());\n\n        IOException wrapped = new IOException(\"testWithSuppressed-Message\");\n        Method addSuppressed = ReflectionUtils.tryGetPublicMethod(\n                wrapped.getClass(), \"addSuppressed\", Void.TYPE, Throwable.class);\n        assertNotNull(\"Expected to have addSuppressed in Java 7\", addSuppressed);\n\n        Exception suppressed1 = new NotSerializableTestException(\"testWithSuppressed-suppressed1\");\n        Exception suppressed2 = new IOException(\"testWithSuppressed-suppressed2\");\n        addSuppressed.invoke(wrapped, suppressed1);\n        addSuppressed.invoke(wrapped, suppressed2);\n\n        TransferableExceptionWrapper wrapper = TransferableExceptionWrapper.wrap(wrapped);\n        checkWrapper(wrapped, wrapper);\n\n        Method getSuppressed = ReflectionUtils.tryGetPublicMethod(\n                wrapper.getClass(), \"getSuppressed\", Throwable[].class);\n        assertNotNull(\"Expected to have getSuppressed in Java 7\", getSuppressed);\n\n        Throwable[] wrappedSuppressed = (Throwable[])getSuppressed.invoke(wrapper);\n        assertEquals(\"Must wrapp suppressed exceptions as well.\", 2, wrappedSuppressed.length);\n\n        checkWrapperOrSame(suppressed1, wrappedSuppressed[0]);\n        checkWrapperOrSame(suppressed2, wrappedSuppressed[1]);\n    }", "signature": "void testWithSuppressed()", "full_signature": "@Test public void testWithSuppressed()", "class_method_signature": "TransferableExceptionWrapperTest.testWithSuppressed()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "isJava7Compatible", "current", "tryGetPublicMethod", "getClass", "assertNotNull", "invoke", "invoke", "wrap", "checkWrapper", "tryGetPublicMethod", "getClass", "assertNotNull", "invoke", "assertEquals", "checkWrapperOrSame", "checkWrapperOrSame"]}, "focal_class": {"identifier": "TransferableExceptionWrapper", "superclass": "extends RuntimeException", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final String originalClassName;", "modifier": "private final", "type": "String", "declarator": "originalClassName", "var_name": "originalClassName"}, {"original_string": "private final String originalMessage;", "modifier": "private final", "type": "String", "declarator": "originalMessage", "var_name": "originalMessage"}], "methods": [{"identifier": "TransferableExceptionWrapper", "parameters": "(Throwable wrapped)", "modifiers": "public", "return": "", "signature": " TransferableExceptionWrapper(Throwable wrapped)", "full_signature": "public  TransferableExceptionWrapper(Throwable wrapped)", "class_method_signature": "TransferableExceptionWrapper.TransferableExceptionWrapper(Throwable wrapped)", "testcase": false, "constructor": true}, {"identifier": "tryAddSuppressed", "parameters": "(Throwable wrapped)", "modifiers": "private", "return": "void", "signature": "void tryAddSuppressed(Throwable wrapped)", "full_signature": "private void tryAddSuppressed(Throwable wrapped)", "class_method_signature": "TransferableExceptionWrapper.tryAddSuppressed(Throwable wrapped)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(Throwable exception)", "modifiers": "public static", "return": "TransferableExceptionWrapper", "signature": "TransferableExceptionWrapper wrap(Throwable exception)", "full_signature": "public static TransferableExceptionWrapper wrap(Throwable exception)", "class_method_signature": "TransferableExceptionWrapper.wrap(Throwable exception)", "testcase": false, "constructor": false}, {"identifier": "getOriginalClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOriginalClassName()", "full_signature": "public String getOriginalClassName()", "class_method_signature": "TransferableExceptionWrapper.getOriginalClassName()", "testcase": false, "constructor": false}, {"identifier": "getOriginalMessage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOriginalMessage()", "full_signature": "public String getOriginalMessage()", "class_method_signature": "TransferableExceptionWrapper.getOriginalMessage()", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMessage()", "full_signature": "@Override public String getMessage()", "class_method_signature": "TransferableExceptionWrapper.getMessage()", "testcase": false, "constructor": false}], "file": "netbeans-gradle-default-models/src/main/java/org/netbeans/gradle/model/util/TransferableExceptionWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(Throwable exception)", "modifiers": "public static", "return": "TransferableExceptionWrapper", "body": "public static TransferableExceptionWrapper wrap(Throwable exception) {\n        if (exception == null) {\n            return null;\n        }\n\n        if (exception instanceof TransferableExceptionWrapper) {\n            return (TransferableExceptionWrapper)exception;\n        }\n        else {\n            return new TransferableExceptionWrapper(exception);\n        }\n    }", "signature": "TransferableExceptionWrapper wrap(Throwable exception)", "full_signature": "public static TransferableExceptionWrapper wrap(Throwable exception)", "class_method_signature": "TransferableExceptionWrapper.wrap(Throwable exception)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5291703, "url": "https://github.com/kelemen/netbeans-gradle-project", "language": "Java", "is_fork": false, "fork_count": 66, "stargazer_count": 173, "size": 12255, "license": "licensed"}}