{"test_class": {"identifier": "TestNATTraversalTechniqueUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESOURCE_PREFIX = \"de/fhkn/in/uce/plugininterface/util/\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_PREFIX = \"de/fhkn/in/uce/plugininterface/util/\"", "var_name": "RESOURCE_PREFIX"}, {"original_string": "private static final String RESOURCE_TRAVERSALED_BEHAVIOR = \"traversaledNATBehaviorForTesting\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_TRAVERSALED_BEHAVIOR = \"traversaledNATBehaviorForTesting\"", "var_name": "RESOURCE_TRAVERSALED_BEHAVIOR"}, {"original_string": "private static final String RESOURCE_FAULTY_TRAVERSALED_BEHAVIOR = \"faultyTraversaledNATBehaviorForTesting\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_FAULTY_TRAVERSALED_BEHAVIOR = \"faultyTraversaledNATBehaviorForTesting\"", "var_name": "RESOURCE_FAULTY_TRAVERSALED_BEHAVIOR"}, {"original_string": "private static final String RESOURCE_WILDCARD_TRAVERSALED_BEHAVIOR = \"traversaledNATBehaviorWithWildcardsForTesting\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_WILDCARD_TRAVERSALED_BEHAVIOR = \"traversaledNATBehaviorWithWildcardsForTesting\"", "var_name": "RESOURCE_WILDCARD_TRAVERSALED_BEHAVIOR"}, {"original_string": "private NATTraversalTechniqueUtil util;", "modifier": "private", "type": "NATTraversalTechniqueUtil", "declarator": "util", "var_name": "util"}, {"original_string": "private Set<NATSituation> expectedResult;", "modifier": "private", "type": "Set<NATSituation>", "declarator": "expectedResult", "var_name": "expectedResult"}, {"original_string": "private Set<NATSituation> actualResult;", "modifier": "private", "type": "Set<NATSituation>", "declarator": "actualResult", "var_name": "actualResult"}], "file": "plugininterface/src/test/java/de/fhkn/in/uce/plugininterface/util/TestNATTraversalTechniqueUtil.java"}, "test_case": {"identifier": "testParseNATBehavior", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNATBehavior() throws Exception {\n        this.expectedResult.add(new NATSituation(NATFeatureRealization.ENDPOINT_INDEPENDENT,\n                NATFeatureRealization.ENDPOINT_INDEPENDENT, NATFeatureRealization.CONNECTION_DEPENDENT,\n                NATFeatureRealization.CONNECTION_DEPENDENT));\n        this.expectedResult.add(new NATSituation(NATFeatureRealization.ADDRESS_DEPENDENT,\n                NATFeatureRealization.ADDRESS_AND_PORT_DEPENDENT, NATFeatureRealization.NOT_REALIZED,\n                NATFeatureRealization.CONNECTION_DEPENDENT));\n\n        this.actualResult = this.util.parseNATSituations(RESOURCE_PREFIX + RESOURCE_TRAVERSALED_BEHAVIOR);\n\n        assertEquals(\"The NAT behavior was not parsed correctlay.\", this.expectedResult, this.actualResult);\n    }", "signature": "void testParseNATBehavior()", "full_signature": "@Test public void testParseNATBehavior()", "class_method_signature": "TestNATTraversalTechniqueUtil.testParseNATBehavior()", "testcase": true, "constructor": false, "invocations": ["add", "add", "parseNATSituations", "assertEquals"]}, "focal_class": {"identifier": "NATTraversalTechniqueUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final NATTraversalTechniqueUtil INSTANCE = new NATTraversalTechniqueUtil();", "modifier": "private static final", "type": "NATTraversalTechniqueUtil", "declarator": "INSTANCE = new NATTraversalTechniqueUtil()", "var_name": "INSTANCE"}, {"original_string": "private static final String VALUE_SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_SEPARATOR = \",\"", "var_name": "VALUE_SEPARATOR"}], "methods": [{"identifier": "parseNATSituations", "parameters": "(final String resourceName)", "modifiers": "public", "return": "Set<NATSituation>", "signature": "Set<NATSituation> parseNATSituations(final String resourceName)", "full_signature": "public Set<NATSituation> parseNATSituations(final String resourceName)", "class_method_signature": "NATTraversalTechniqueUtil.parseNATSituations(final String resourceName)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(final String resourceName)", "modifiers": "private", "return": "InputStream", "signature": "InputStream getResourceAsStream(final String resourceName)", "full_signature": "private InputStream getResourceAsStream(final String resourceName)", "class_method_signature": "NATTraversalTechniqueUtil.getResourceAsStream(final String resourceName)", "testcase": false, "constructor": false}, {"identifier": "createNATBehaviorFromValues", "parameters": "(final String[] values)", "modifiers": "private", "return": "NATSituation", "signature": "NATSituation createNATBehaviorFromValues(final String[] values)", "full_signature": "private NATSituation createNATBehaviorFromValues(final String[] values)", "class_method_signature": "NATTraversalTechniqueUtil.createNATBehaviorFromValues(final String[] values)", "testcase": false, "constructor": false}, {"identifier": "resolveWildcards", "parameters": "(final NATSituation withWildcard)", "modifiers": "public", "return": "Set<NATSituation>", "signature": "Set<NATSituation> resolveWildcards(final NATSituation withWildcard)", "full_signature": "public Set<NATSituation> resolveWildcards(final NATSituation withWildcard)", "class_method_signature": "NATTraversalTechniqueUtil.resolveWildcards(final NATSituation withWildcard)", "testcase": false, "constructor": false}, {"identifier": "hasWildcard", "parameters": "(final NATBehavior nat)", "modifiers": "private", "return": "boolean", "signature": "boolean hasWildcard(final NATBehavior nat)", "full_signature": "private boolean hasWildcard(final NATBehavior nat)", "class_method_signature": "NATTraversalTechniqueUtil.hasWildcard(final NATBehavior nat)", "testcase": false, "constructor": false}, {"identifier": "resolveWildcardInNatBehavior", "parameters": "(final NATBehavior nat)", "modifiers": "private", "return": "Set<NATBehavior>", "signature": "Set<NATBehavior> resolveWildcardInNatBehavior(final NATBehavior nat)", "full_signature": "private Set<NATBehavior> resolveWildcardInNatBehavior(final NATBehavior nat)", "class_method_signature": "NATTraversalTechniqueUtil.resolveWildcardInNatBehavior(final NATBehavior nat)", "testcase": false, "constructor": false}, {"identifier": "getNonWildcardFeatureRealizations", "parameters": "()", "modifiers": "private", "return": "Set<NATFeatureRealization>", "signature": "Set<NATFeatureRealization> getNonWildcardFeatureRealizations()", "full_signature": "private Set<NATFeatureRealization> getNonWildcardFeatureRealizations()", "class_method_signature": "NATTraversalTechniqueUtil.getNonWildcardFeatureRealizations()", "testcase": false, "constructor": false}, {"identifier": "getAllPossibleNATSituations", "parameters": "()", "modifiers": "public", "return": "Set<NATSituation>", "signature": "Set<NATSituation> getAllPossibleNATSituations()", "full_signature": "public Set<NATSituation> getAllPossibleNATSituations()", "class_method_signature": "NATTraversalTechniqueUtil.getAllPossibleNATSituations()", "testcase": false, "constructor": false}, {"identifier": "getAllPossibleNATBehaviors", "parameters": "()", "modifiers": "private", "return": "Set<NATBehavior>", "signature": "Set<NATBehavior> getAllPossibleNATBehaviors()", "full_signature": "private Set<NATBehavior> getAllPossibleNATBehaviors()", "class_method_signature": "NATTraversalTechniqueUtil.getAllPossibleNATBehaviors()", "testcase": false, "constructor": false}, {"identifier": "NATTraversalTechniqueUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " NATTraversalTechniqueUtil()", "full_signature": "private  NATTraversalTechniqueUtil()", "class_method_signature": "NATTraversalTechniqueUtil.NATTraversalTechniqueUtil()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "NATTraversalTechniqueUtil", "signature": "NATTraversalTechniqueUtil getInstance()", "full_signature": "public static NATTraversalTechniqueUtil getInstance()", "class_method_signature": "NATTraversalTechniqueUtil.getInstance()", "testcase": false, "constructor": false}], "file": "plugininterface/src/main/java/de/fhkn/in/uce/plugininterface/util/NATTraversalTechniqueUtil.java"}, "focal_method": {"identifier": "parseNATSituations", "parameters": "(final String resourceName)", "modifiers": "public", "return": "Set<NATSituation>", "body": "public Set<NATSituation> parseNATSituations(final String resourceName) throws Exception {\n        final Set<NATSituation> result = new HashSet<NATSituation>();\n        final Set<NATSituation> tmp = new HashSet<NATSituation>();\n        final InputStream resourceAsStream = this.getResourceAsStream(resourceName);\n        final BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\n        String line = \"\";\n\n        while ((line = reader.readLine()) != null) {\n            final String[] lineContent = line.split(VALUE_SEPARATOR);\n            final NATSituation traversaledNATBehavior = this.createNATBehaviorFromValues(lineContent);\n            tmp.add(traversaledNATBehavior);\n        }\n        for (NATSituation natSituation : tmp) {\n            result.addAll(this.resolveWildcards(natSituation));\n        }\n        return Collections.unmodifiableSet(result);\n    }", "signature": "Set<NATSituation> parseNATSituations(final String resourceName)", "full_signature": "public Set<NATSituation> parseNATSituations(final String resourceName)", "class_method_signature": "NATTraversalTechniqueUtil.parseNATSituations(final String resourceName)", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "readLine", "split", "createNATBehaviorFromValues", "add", "addAll", "resolveWildcards", "unmodifiableSet"]}, "repository": {"repo_id": 4336113, "url": "https://github.com/htwg/UCE", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 50, "size": 1285, "license": "licensed"}}