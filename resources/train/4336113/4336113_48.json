{"test_class": {"identifier": "SystemPropertyReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<String> stunArgs;", "modifier": "", "type": "List<String>", "declarator": "stunArgs", "var_name": "stunArgs"}, {"original_string": "List<String> relayArgs;", "modifier": "", "type": "List<String>", "declarator": "relayArgs", "var_name": "relayArgs"}, {"original_string": "List<String> mediatorArgs;", "modifier": "", "type": "List<String>", "declarator": "mediatorArgs", "var_name": "mediatorArgs"}], "file": "master.server/src/test/java/de/fhkn/in/uce/master/server/util/SystemPropertyReaderTest.java"}, "test_case": {"identifier": "testReadArguments2", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testReadArguments2() {\n        System.setProperty(AbstractReader.STUN_FIRST_IP, \"wrong\");\n\n        SystemPropertyReader sysPropReader = new SystemPropertyReader();\n        try {\n            sysPropReader.readArguments(stunArgs, relayArgs, mediatorArgs);\n        } catch(IllegalArgumentException e) {\n            fail(\"Should not be here!\");\n        }\n\n        System.clearProperty(AbstractReader.STUN_FIRST_IP);\n    }", "signature": "void testReadArguments2()", "full_signature": "@Test public final void testReadArguments2()", "class_method_signature": "SystemPropertyReaderTest.testReadArguments2()", "testcase": true, "constructor": false, "invocations": ["setProperty", "readArguments", "fail", "clearProperty"]}, "focal_class": {"identifier": "SystemPropertyReader", "superclass": "extends AbstractReader", "interfaces": "", "fields": [], "methods": [{"identifier": "SystemPropertyReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " SystemPropertyReader()", "full_signature": "public  SystemPropertyReader()", "class_method_signature": "SystemPropertyReader.SystemPropertyReader()", "testcase": false, "constructor": true}, {"identifier": "readArguments", "parameters": "(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs)", "modifiers": "@Override public", "return": "void", "signature": "void readArguments(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs)", "full_signature": "@Override public void readArguments(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs)", "class_method_signature": "SystemPropertyReader.readArguments(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs)", "testcase": false, "constructor": false}], "file": "master.server/src/main/java/de/fhkn/in/uce/master/server/util/SystemPropertyReader.java"}, "focal_method": {"identifier": "readArguments", "parameters": "(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void readArguments(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs) throws IllegalArgumentException {\n        SecurityManager securityManager = System.getSecurityManager();\n        if (securityManager != null) {\n            try {\n                securityManager.checkPropertiesAccess();\n            } catch (SecurityException e) {\n                logError(\"Security manager prohibits access to system properties!\");\n                logError(e.getMessage());\n                // do not throw an exception\n                return;\n            }\n        }\n\n        Properties props = System.getProperties();\n\n        Enumeration<?> propEnumeration = props.propertyNames();\n\n        while (propEnumeration.hasMoreElements()) {\n            try {\n                String key = propEnumeration.nextElement().toString();\n                if (key.equals(STUN_FIRST_IP)) {\n                    String value = props.getProperty(key);\n                    processStunFirstIP(stunArgs, value);\n                }\n                else if (key.equals(STUN_SECOND_IP)) {\n                    String value = props.getProperty(key);\n                    processStunSecondIP(stunArgs, value);\n                }\n                else if (key.equals(RELAY_PORT)) {\n                    String value = props.getProperty(key);\n                    processRelayPort(relayArgs, value);\n                }\n                else if (key.equals(MEDIATOR_PORT)) {\n                    String value = props.getProperty(key);\n                    processMediatorPort(mediatorArgs, value);\n                }\n                else if (key.equals(MEDIATOR_ITERATION)) {\n                    String value = props.getProperty(key);\n                    processMediatorIteration(mediatorArgs, value);\n                }\n                else if (key.equals(MEDIATOR_LIFETIME)) {\n                    String value = props.getProperty(key);\n                    processMediatorLifeTime(mediatorArgs, value);\n                }\n            } catch (IllegalArgumentException e) {\n                logError(\"Argument \\\"\" + e.getMessage() + \"\\\" is empty or invalid\");\n                continue;\n            }\n        }\n    }", "signature": "void readArguments(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs)", "full_signature": "@Override public void readArguments(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs)", "class_method_signature": "SystemPropertyReader.readArguments(List<String> stunArgs, List<String> relayArgs, List<String> mediatorArgs)", "testcase": false, "constructor": false, "invocations": ["getSecurityManager", "checkPropertiesAccess", "logError", "logError", "getMessage", "getProperties", "propertyNames", "hasMoreElements", "toString", "nextElement", "equals", "getProperty", "processStunFirstIP", "equals", "getProperty", "processStunSecondIP", "equals", "getProperty", "processRelayPort", "equals", "getProperty", "processMediatorPort", "equals", "getProperty", "processMediatorIteration", "equals", "getProperty", "processMediatorLifeTime", "logError", "getMessage"]}, "repository": {"repo_id": 4336113, "url": "https://github.com/htwg/UCE", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 50, "size": 1285, "license": "licensed"}}