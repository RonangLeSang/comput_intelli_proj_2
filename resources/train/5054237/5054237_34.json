{"test_class": {"identifier": "ArgumentParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int KIND = 18;", "modifier": "public static final", "type": "int", "declarator": "KIND = 18", "var_name": "KIND"}, {"original_string": "public static final int NUMERIC_VALUE = 42;", "modifier": "public static final", "type": "int", "declarator": "NUMERIC_VALUE = 42", "var_name": "NUMERIC_VALUE"}, {"original_string": "public static final String ANY_TAG = \":any\";", "modifier": "public static final", "type": "String", "declarator": "ANY_TAG = \":any\"", "var_name": "ANY_TAG"}, {"original_string": "public static final String OTHER_TAG = \":other\";", "modifier": "public static final", "type": "String", "declarator": "OTHER_TAG = \":other\"", "var_name": "OTHER_TAG"}, {"original_string": "public static final String EXCEPTION_MESSAGE = \"ExceptionMessage\";", "modifier": "public static final", "type": "String", "declarator": "EXCEPTION_MESSAGE = \"ExceptionMessage\"", "var_name": "EXCEPTION_MESSAGE"}, {"original_string": "public static final String STRING_VALUE = \"string\";", "modifier": "public static final", "type": "String", "declarator": "STRING_VALUE = \"string\"", "var_name": "STRING_VALUE"}, {"original_string": "public static final String STRING_VALUE_2 = \"string2\";", "modifier": "public static final", "type": "String", "declarator": "STRING_VALUE_2 = \"string2\"", "var_name": "STRING_VALUE_2"}, {"original_string": "public static final TagArgument ANY_TAG_ARGUMENT = new TagArgument(new Token(KIND, ANY_TAG));", "modifier": "public static final", "type": "TagArgument", "declarator": "ANY_TAG_ARGUMENT = new TagArgument(new Token(KIND, ANY_TAG))", "var_name": "ANY_TAG_ARGUMENT"}, {"original_string": "public static final TagArgument OTHER_TAG_ARGUMENT = new TagArgument(new Token(KIND, OTHER_TAG));", "modifier": "public static final", "type": "TagArgument", "declarator": "OTHER_TAG_ARGUMENT = new TagArgument(new Token(KIND, OTHER_TAG))", "var_name": "OTHER_TAG_ARGUMENT"}, {"original_string": "public static final NumberArgument NUMBER_ARGUMENT = new NumberArgument(new Token(KIND, Integer.toString(NUMERIC_VALUE)));", "modifier": "public static final", "type": "NumberArgument", "declarator": "NUMBER_ARGUMENT = new NumberArgument(new Token(KIND, Integer.toString(NUMERIC_VALUE)))", "var_name": "NUMBER_ARGUMENT"}, {"original_string": "public static final StringListArgument SINGLE_STRING_ARGUMENT = new StringListArgument(Lists.newArrayList(STRING_VALUE));", "modifier": "public static final", "type": "StringListArgument", "declarator": "SINGLE_STRING_ARGUMENT = new StringListArgument(Lists.newArrayList(STRING_VALUE))", "var_name": "SINGLE_STRING_ARGUMENT"}, {"original_string": "public static final StringListArgument STRING_LIST_ARGUMENT = new StringListArgument(Lists.newArrayList(STRING_VALUE, STRING_VALUE_2));", "modifier": "public static final", "type": "StringListArgument", "declarator": "STRING_LIST_ARGUMENT = new StringListArgument(Lists.newArrayList(STRING_VALUE, STRING_VALUE_2))", "var_name": "STRING_LIST_ARGUMENT"}], "file": "core/src/test/java/org/apache/jsieve/utils/ArgumentParserTest.java"}, "test_case": {"identifier": "getStringListForTagShouldReturnNullWhenUsedOnAnOtherTag", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getStringListForTagShouldReturnNullWhenUsedOnAnOtherTag() throws Exception {\n        ArgumentParser argumentParser = new ArgumentParser(Lists.newArrayList(OTHER_TAG_ARGUMENT, STRING_LIST_ARGUMENT));\n        assertThat(argumentParser.getStringListForTag(ANY_TAG, EXCEPTION_MESSAGE)).isEmpty();\n    }", "signature": "void getStringListForTagShouldReturnNullWhenUsedOnAnOtherTag()", "full_signature": "@Test public void getStringListForTagShouldReturnNullWhenUsedOnAnOtherTag()", "class_method_signature": "ArgumentParserTest.getStringListForTagShouldReturnNullWhenUsedOnAnOtherTag()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "isEmpty", "assertThat", "getStringListForTag"]}, "focal_class": {"identifier": "ArgumentParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Argument> remainingArguments;", "modifier": "private", "type": "List<Argument>", "declarator": "remainingArguments", "var_name": "remainingArguments"}, {"original_string": "private Set<String> singleTags;", "modifier": "private", "type": "Set<String>", "declarator": "singleTags", "var_name": "singleTags"}, {"original_string": "private Map<String, Argument> tagsWithValues;", "modifier": "private", "type": "Map<String, Argument>", "declarator": "tagsWithValues", "var_name": "tagsWithValues"}], "methods": [{"identifier": "ArgumentParser", "parameters": "(List<Argument> arguments)", "modifiers": "public", "return": "", "signature": " ArgumentParser(List<Argument> arguments)", "full_signature": "public  ArgumentParser(List<Argument> arguments)", "class_method_signature": "ArgumentParser.ArgumentParser(List<Argument> arguments)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(List<Argument> arguments)", "modifiers": "public", "return": "void", "signature": "void initialize(List<Argument> arguments)", "full_signature": "public void initialize(List<Argument> arguments)", "class_method_signature": "ArgumentParser.initialize(List<Argument> arguments)", "testcase": false, "constructor": false}, {"identifier": "handlePreviousTagArgument", "parameters": "(TagArgument previousSeenTagArgument)", "modifiers": "private", "return": "void", "signature": "void handlePreviousTagArgument(TagArgument previousSeenTagArgument)", "full_signature": "private void handlePreviousTagArgument(TagArgument previousSeenTagArgument)", "class_method_signature": "ArgumentParser.handlePreviousTagArgument(TagArgument previousSeenTagArgument)", "testcase": false, "constructor": false}, {"identifier": "handleOtherArguments", "parameters": "(TagArgument lastSeenTagArgument, Argument argument)", "modifiers": "private", "return": "void", "signature": "void handleOtherArguments(TagArgument lastSeenTagArgument, Argument argument)", "full_signature": "private void handleOtherArguments(TagArgument lastSeenTagArgument, Argument argument)", "class_method_signature": "ArgumentParser.handleOtherArguments(TagArgument lastSeenTagArgument, Argument argument)", "testcase": false, "constructor": false}, {"identifier": "getStringValueForTag", "parameters": "(String tag, String exceptionMessage)", "modifiers": "public", "return": "String", "signature": "String getStringValueForTag(String tag, String exceptionMessage)", "full_signature": "public String getStringValueForTag(String tag, String exceptionMessage)", "class_method_signature": "ArgumentParser.getStringValueForTag(String tag, String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "getNumericValueForTag", "parameters": "(String tag, String exceptionMessage)", "modifiers": "public", "return": "Integer", "signature": "Integer getNumericValueForTag(String tag, String exceptionMessage)", "full_signature": "public Integer getNumericValueForTag(String tag, String exceptionMessage)", "class_method_signature": "ArgumentParser.getNumericValueForTag(String tag, String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "getStringListForTag", "parameters": "(String tag, String exceptionMessage)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getStringListForTag(String tag, String exceptionMessage)", "full_signature": "public List<String> getStringListForTag(String tag, String exceptionMessage)", "class_method_signature": "ArgumentParser.getStringListForTag(String tag, String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "getSingleTags", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getSingleTags()", "full_signature": "public Set<String> getSingleTags()", "class_method_signature": "ArgumentParser.getSingleTags()", "testcase": false, "constructor": false}, {"identifier": "getRemainingStringValue", "parameters": "(String exceptionMessage)", "modifiers": "public", "return": "String", "signature": "String getRemainingStringValue(String exceptionMessage)", "full_signature": "public String getRemainingStringValue(String exceptionMessage)", "class_method_signature": "ArgumentParser.getRemainingStringValue(String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "throwOnUnvalidSeenSingleTag", "parameters": "(String... validTags)", "modifiers": "public", "return": "void", "signature": "void throwOnUnvalidSeenSingleTag(String... validTags)", "full_signature": "public void throwOnUnvalidSeenSingleTag(String... validTags)", "class_method_signature": "ArgumentParser.throwOnUnvalidSeenSingleTag(String... validTags)", "testcase": false, "constructor": false}, {"identifier": "throwOnUnvalidSeenTagWithValue", "parameters": "(String... validTags)", "modifiers": "public", "return": "void", "signature": "void throwOnUnvalidSeenTagWithValue(String... validTags)", "full_signature": "public void throwOnUnvalidSeenTagWithValue(String... validTags)", "class_method_signature": "ArgumentParser.throwOnUnvalidSeenTagWithValue(String... validTags)", "testcase": false, "constructor": false}, {"identifier": "validateTagCollectionWithExpectations", "parameters": "(Set<String> seenTags, String[] expectations)", "modifiers": "private", "return": "void", "signature": "void validateTagCollectionWithExpectations(Set<String> seenTags, String[] expectations)", "full_signature": "private void validateTagCollectionWithExpectations(Set<String> seenTags, String[] expectations)", "class_method_signature": "ArgumentParser.validateTagCollectionWithExpectations(Set<String> seenTags, String[] expectations)", "testcase": false, "constructor": false}, {"identifier": "getSetFromStringArray", "parameters": "(String[] validTags)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getSetFromStringArray(String[] validTags)", "full_signature": "private Set<String> getSetFromStringArray(String[] validTags)", "class_method_signature": "ArgumentParser.getSetFromStringArray(String[] validTags)", "testcase": false, "constructor": false}, {"identifier": "retrieveUnwantedTags", "parameters": "(Set<String> seenTags, Set<String> validTagList)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> retrieveUnwantedTags(Set<String> seenTags, Set<String> validTagList)", "full_signature": "private Set<String> retrieveUnwantedTags(Set<String> seenTags, Set<String> validTagList)", "class_method_signature": "ArgumentParser.retrieveUnwantedTags(Set<String> seenTags, Set<String> validTagList)", "testcase": false, "constructor": false}, {"identifier": "buildUnwantedTagsErrorMessage", "parameters": "(Set<String> unwantedTags)", "modifiers": "private", "return": "String", "signature": "String buildUnwantedTagsErrorMessage(Set<String> unwantedTags)", "full_signature": "private String buildUnwantedTagsErrorMessage(Set<String> unwantedTags)", "class_method_signature": "ArgumentParser.buildUnwantedTagsErrorMessage(Set<String> unwantedTags)", "testcase": false, "constructor": false}, {"identifier": "retrieveArgumentIfExists", "parameters": "(String tag, String exceptionMessage)", "modifiers": "private", "return": "Argument", "signature": "Argument retrieveArgumentIfExists(String tag, String exceptionMessage)", "full_signature": "private Argument retrieveArgumentIfExists(String tag, String exceptionMessage)", "class_method_signature": "ArgumentParser.retrieveArgumentIfExists(String tag, String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "retrieveStringValues", "parameters": "(Argument argument, String exceptionMessage)", "modifiers": "private", "return": "List<String>", "signature": "List<String> retrieveStringValues(Argument argument, String exceptionMessage)", "full_signature": "private List<String> retrieveStringValues(Argument argument, String exceptionMessage)", "class_method_signature": "ArgumentParser.retrieveStringValues(Argument argument, String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "retrieveSingleStringValue", "parameters": "(Argument argument, String exceptionMessage)", "modifiers": "private", "return": "String", "signature": "String retrieveSingleStringValue(Argument argument, String exceptionMessage)", "full_signature": "private String retrieveSingleStringValue(Argument argument, String exceptionMessage)", "class_method_signature": "ArgumentParser.retrieveSingleStringValue(Argument argument, String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "retrieveNumericValue", "parameters": "(Argument argument, String exceptionMessage)", "modifiers": "private", "return": "Integer", "signature": "Integer retrieveNumericValue(Argument argument, String exceptionMessage)", "full_signature": "private Integer retrieveNumericValue(Argument argument, String exceptionMessage)", "class_method_signature": "ArgumentParser.retrieveNumericValue(Argument argument, String exceptionMessage)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/jsieve/utils/ArgumentParser.java"}, "focal_method": {"identifier": "getStringListForTag", "parameters": "(String tag, String exceptionMessage)", "modifiers": "public", "return": "List<String>", "body": "public List<String> getStringListForTag(String tag, String exceptionMessage) throws SyntaxException {\n        Argument argument = retrieveArgumentIfExists(tag, exceptionMessage);\n        if (argument == null) {\n            return new ArrayList<String>();\n        }\n        return retrieveStringValues(argument, exceptionMessage);\n    }", "signature": "List<String> getStringListForTag(String tag, String exceptionMessage)", "full_signature": "public List<String> getStringListForTag(String tag, String exceptionMessage)", "class_method_signature": "ArgumentParser.getStringListForTag(String tag, String exceptionMessage)", "testcase": false, "constructor": false, "invocations": ["retrieveArgumentIfExists", "retrieveStringValues"]}, "repository": {"repo_id": 5054237, "url": "https://github.com/apache/james-jsieve", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 5, "size": 9520, "license": "licensed"}}