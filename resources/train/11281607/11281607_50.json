{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/glassfish/tyrus/core/UtilsTest.java"}, "test_case": {"identifier": "testParseHttpDateRfc1123", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseHttpDateRfc1123() {\n        try {\n            Date date = Utils.parseHttpDate(\"Sun, 06 Nov 1994 08:49:37 GMT\");\n            assertNotNull(\"Date cannot be null\", date);\n        } catch (ParseException e) {\n            fail(\"Cannot parse valid date\");\n        }\n    }", "signature": "void testParseHttpDateRfc1123()", "full_signature": "@Test public void testParseHttpDateRfc1123()", "class_method_signature": "UtilsTest.testParseHttpDateRfc1123()", "testcase": true, "constructor": false, "invocations": ["parseHttpDate", "assertNotNull", "fail"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(Utils.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(Utils.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final List<String> FILTERED_HEADERS = Arrays.asList(UpgradeRequest.AUTHORIZATION);", "modifier": "private static final", "type": "List<String>", "declarator": "FILTERED_HEADERS = Arrays.asList(UpgradeRequest.AUTHORIZATION)", "var_name": "FILTERED_HEADERS"}], "methods": [{"identifier": "parseHeaderValue", "parameters": "(String headerValue)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> parseHeaderValue(String headerValue)", "full_signature": "public static List<String> parseHeaderValue(String headerValue)", "class_method_signature": "Utils.parseHeaderValue(String headerValue)", "testcase": false, "constructor": false}, {"identifier": "getRemainingArray", "parameters": "(ByteBuffer buffer)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getRemainingArray(ByteBuffer buffer)", "full_signature": "public static byte[] getRemainingArray(ByteBuffer buffer)", "class_method_signature": "Utils.getRemainingArray(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "getHeaderFromList", "parameters": "(List<T> list)", "modifiers": "public static", "return": "String", "signature": "String getHeaderFromList(List<T> list)", "full_signature": "public static String getHeaderFromList(List<T> list)", "class_method_signature": "Utils.getHeaderFromList(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "getStringList", "parameters": "(List<T> list, Stringifier<T> stringifier)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getStringList(List<T> list, Stringifier<T> stringifier)", "full_signature": "public static List<String> getStringList(List<T> list, Stringifier<T> stringifier)", "class_method_signature": "Utils.getStringList(List<T> list, Stringifier<T> stringifier)", "testcase": false, "constructor": false}, {"identifier": "getHeaderFromList", "parameters": "(List<T> list, Stringifier<T> stringifier)", "modifiers": "public static", "return": "String", "signature": "String getHeaderFromList(List<T> list, Stringifier<T> stringifier)", "full_signature": "public static String getHeaderFromList(List<T> list, Stringifier<T> stringifier)", "class_method_signature": "Utils.getHeaderFromList(List<T> list, Stringifier<T> stringifier)", "testcase": false, "constructor": false}, {"identifier": "checkNotNull", "parameters": "(T reference, String parameterName)", "modifiers": "public static", "return": "void", "signature": "void checkNotNull(T reference, String parameterName)", "full_signature": "public static void checkNotNull(T reference, String parameterName)", "class_method_signature": "Utils.checkNotNull(T reference, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(long value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toArray(long value)", "full_signature": "public static byte[] toArray(long value)", "class_method_signature": "Utils.toArray(long value)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(byte[] bytes, int start, int end)", "modifiers": "public static", "return": "long", "signature": "long toLong(byte[] bytes, int start, int end)", "full_signature": "public static long toLong(byte[] bytes, int start, int end)", "class_method_signature": "Utils.toLong(byte[] bytes, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> toString(byte[] bytes)", "full_signature": "public static List<String> toString(byte[] bytes)", "class_method_signature": "Utils.toString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(byte[] bytes, int start, int end)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> toString(byte[] bytes, int start, int end)", "full_signature": "public static List<String> toString(byte[] bytes, int start, int end)", "class_method_signature": "Utils.toString(byte[] bytes, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "appendBuffers", "parameters": "(ByteBuffer buffer, ByteBuffer buffer1, int incomingBufferSize,\n                                           int BUFFER_STEP_SIZE)", "modifiers": "public static", "return": "ByteBuffer", "signature": "ByteBuffer appendBuffers(ByteBuffer buffer, ByteBuffer buffer1, int incomingBufferSize,\n                                           int BUFFER_STEP_SIZE)", "full_signature": "public static ByteBuffer appendBuffers(ByteBuffer buffer, ByteBuffer buffer1, int incomingBufferSize,\n                                           int BUFFER_STEP_SIZE)", "class_method_signature": "Utils.appendBuffers(ByteBuffer buffer, ByteBuffer buffer1, int incomingBufferSize,\n                                           int BUFFER_STEP_SIZE)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Map<String, Object> properties, String key, Class<T> type)", "modifiers": "public static", "return": "T", "signature": "T getProperty(Map<String, Object> properties, String key, Class<T> type)", "full_signature": "public static T getProperty(Map<String, Object> properties, String key, Class<T> type)", "class_method_signature": "Utils.getProperty(Map<String, Object> properties, String key, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(final Map<String, Object> properties, final String key, final Class<T> type,\n                                    final T defaultValue)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getProperty(final Map<String, Object> properties, final String key, final Class<T> type,\n                                    final T defaultValue)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getProperty(final Map<String, Object> properties, final String key, final Class<T> type,\n                                    final T defaultValue)", "class_method_signature": "Utils.getProperty(final Map<String, Object> properties, final String key, final Class<T> type,\n                                    final T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getWsPort", "parameters": "(URI uri)", "modifiers": "public static", "return": "int", "signature": "int getWsPort(URI uri)", "full_signature": "public static int getWsPort(URI uri)", "class_method_signature": "Utils.getWsPort(URI uri)", "testcase": false, "constructor": false}, {"identifier": "getWsPort", "parameters": "(URI uri, String scheme)", "modifiers": "public static", "return": "int", "signature": "int getWsPort(URI uri, String scheme)", "full_signature": "public static int getWsPort(URI uri, String scheme)", "class_method_signature": "Utils.getWsPort(URI uri, String scheme)", "testcase": false, "constructor": false}, {"identifier": "parseHttpDate", "parameters": "(String stringValue)", "modifiers": "public static", "return": "Date", "signature": "Date parseHttpDate(String stringValue)", "full_signature": "public static Date parseHttpDate(String stringValue)", "class_method_signature": "Utils.parseHttpDate(String stringValue)", "testcase": false, "constructor": false}, {"identifier": "stringifyUpgradeRequest", "parameters": "(UpgradeRequest upgradeRequest)", "modifiers": "public static", "return": "String", "signature": "String stringifyUpgradeRequest(UpgradeRequest upgradeRequest)", "full_signature": "public static String stringifyUpgradeRequest(UpgradeRequest upgradeRequest)", "class_method_signature": "Utils.stringifyUpgradeRequest(UpgradeRequest upgradeRequest)", "testcase": false, "constructor": false}, {"identifier": "stringifyUpgradeResponse", "parameters": "(UpgradeResponse upgradeResponse)", "modifiers": "public static", "return": "String", "signature": "String stringifyUpgradeResponse(UpgradeResponse upgradeResponse)", "full_signature": "public static String stringifyUpgradeResponse(UpgradeResponse upgradeResponse)", "class_method_signature": "Utils.stringifyUpgradeResponse(UpgradeResponse upgradeResponse)", "testcase": false, "constructor": false}, {"identifier": "appendHeaders", "parameters": "(StringBuilder message, Map<String, List<String>> headers)", "modifiers": "private static", "return": "void", "signature": "void appendHeaders(StringBuilder message, Map<String, List<String>> headers)", "full_signature": "private static void appendHeaders(StringBuilder message, Map<String, List<String>> headers)", "class_method_signature": "Utils.appendHeaders(StringBuilder message, Map<String, List<String>> headers)", "testcase": false, "constructor": false}, {"identifier": "appendHeader", "parameters": "(StringBuilder message, String key, String value)", "modifiers": "private static", "return": "void", "signature": "void appendHeader(StringBuilder message, String key, String value)", "full_signature": "private static void appendHeader(StringBuilder message, String key, String value)", "class_method_signature": "Utils.appendHeader(StringBuilder message, String key, String value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/glassfish/tyrus/core/Utils.java"}, "focal_method": {"identifier": "parseHttpDate", "parameters": "(String stringValue)", "modifiers": "public static", "return": "Date", "body": "public static Date parseHttpDate(String stringValue) throws ParseException {\n        SimpleDateFormat formatRfc1123 = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n        try {\n            return formatRfc1123.parse(stringValue);\n        } catch (ParseException e) {\n            SimpleDateFormat formatRfc1036 = new SimpleDateFormat(\"EEE, dd-MMM-yy HH:mm:ss zzz\");\n            try {\n                return formatRfc1036.parse(stringValue);\n            } catch (ParseException e1) {\n                SimpleDateFormat formatAnsiCAsc = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\");\n                return formatAnsiCAsc.parse(stringValue);\n            }\n        }\n    }", "signature": "Date parseHttpDate(String stringValue)", "full_signature": "public static Date parseHttpDate(String stringValue)", "class_method_signature": "Utils.parseHttpDate(String stringValue)", "testcase": false, "constructor": false, "invocations": ["parse", "parse", "parse"]}, "repository": {"repo_id": 11281607, "url": "https://github.com/tyrus-project/tyrus", "language": "Java", "is_fork": false, "fork_count": 75, "stargazer_count": 168, "size": 11260, "license": "licensed"}}