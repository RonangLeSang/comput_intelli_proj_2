{"test_class": {"identifier": "TestLocalFileSink", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tempDir = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tempDir = new TemporaryFolder()", "var_name": "tempDir"}, {"original_string": "private static Injector injector = Guice.createInjector(\n        new SuroSinkPlugin(),\n        new AbstractModule() {\n            @Override\n            protected void configure() {\n                bind(ObjectMapper.class).to(DefaultObjectMapper.class);\n            }\n            }\n    );", "modifier": "private static", "type": "Injector", "declarator": "injector = Guice.createInjector(\n        new SuroSinkPlugin(),\n        new AbstractModule() {\n            @Override\n            protected void configure() {\n                bind(ObjectMapper.class).to(DefaultObjectMapper.class);\n            }\n            }\n    )", "var_name": "injector"}], "file": "suro-localfile/src/test/java/com/netflix/suro/sink/localfile/TestLocalFileSink.java"}, "test_case": {"identifier": "testGetFileExt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFileExt() {\n        assertEquals(LocalFileSink.getFileExt(\"abc.done\"), \".done\");\n        assertNull(LocalFileSink.getFileExt(\"abcdone\"));\n        assertNull(LocalFileSink.getFileExt(\"abcdone.\"));\n    }", "signature": "void testGetFileExt()", "full_signature": "@Test public void testGetFileExt()", "class_method_signature": "TestLocalFileSink.testGetFileExt()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getFileExt", "assertNull", "getFileExt", "assertNull", "getFileExt"]}, "focal_class": {"identifier": "LocalFileSink", "superclass": "extends QueuedSink", "interfaces": "implements Sink", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(LocalFileSink.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LocalFileSink.class)", "var_name": "log"}, {"original_string": "public static final String EMPTY_ROUTING_KEY_REPLACEMENT = \"_empty_routing_key\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY_ROUTING_KEY_REPLACEMENT = \"_empty_routing_key\"", "var_name": "EMPTY_ROUTING_KEY_REPLACEMENT"}, {"original_string": "public static final String TYPE = \"local\";", "modifier": "public static final", "type": "String", "declarator": "TYPE = \"local\"", "var_name": "TYPE"}, {"original_string": "public static final String suffix = \".suro\";", "modifier": "public static final", "type": "String", "declarator": "suffix = \".suro\"", "var_name": "suffix"}, {"original_string": "public static final String done = \".done\";", "modifier": "public static final", "type": "String", "declarator": "done = \".done\"", "var_name": "done"}, {"original_string": "private final String outputDir;", "modifier": "private final", "type": "String", "declarator": "outputDir", "var_name": "outputDir"}, {"original_string": "private final FileWriter writer;", "modifier": "private final", "type": "FileWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private final long maxFileSize;", "modifier": "private final", "type": "long", "declarator": "maxFileSize", "var_name": "maxFileSize"}, {"original_string": "private final Period rotationPeriod;", "modifier": "private final", "type": "Period", "declarator": "rotationPeriod", "var_name": "rotationPeriod"}, {"original_string": "private final int minPercentFreeDisk;", "modifier": "private final", "type": "int", "declarator": "minPercentFreeDisk", "var_name": "minPercentFreeDisk"}, {"original_string": "private final Notice<String> notice;", "modifier": "private final", "type": "Notice<String>", "declarator": "notice", "var_name": "notice"}, {"original_string": "private SpaceChecker spaceChecker;", "modifier": "private", "type": "SpaceChecker", "declarator": "spaceChecker", "var_name": "spaceChecker"}, {"original_string": "private String filePath;", "modifier": "private", "type": "String", "declarator": "filePath", "var_name": "filePath"}, {"original_string": "private long nextRotation;", "modifier": "private", "type": "long", "declarator": "nextRotation", "var_name": "nextRotation"}, {"original_string": "private long writtenMessages;", "modifier": "private", "type": "long", "declarator": "writtenMessages", "var_name": "writtenMessages"}, {"original_string": "private long writtenBytes;", "modifier": "private", "type": "long", "declarator": "writtenBytes", "var_name": "writtenBytes"}, {"original_string": "private long errorClosedFiles;", "modifier": "private", "type": "long", "declarator": "errorClosedFiles", "var_name": "errorClosedFiles"}, {"original_string": "private long emptyRoutingKeyCount;", "modifier": "private", "type": "long", "declarator": "emptyRoutingKeyCount", "var_name": "emptyRoutingKeyCount"}, {"original_string": "private boolean messageWrittenInRotation = false;", "modifier": "private", "type": "boolean", "declarator": "messageWrittenInRotation = false", "var_name": "messageWrittenInRotation"}, {"original_string": "private long pause;", "modifier": "private", "type": "long", "declarator": "pause", "var_name": "pause"}, {"original_string": "private static final int deleteFileRetryCount = 5;", "modifier": "private static final", "type": "int", "declarator": "deleteFileRetryCount = 5", "var_name": "deleteFileRetryCount"}], "methods": [{"identifier": "LocalFileSink", "parameters": "(\n            @JsonProperty(\"outputDir\") String outputDir,\n            @JsonProperty(\"writer\") FileWriter writer,\n            @JsonProperty(\"notice\") Notice notice,\n            @JsonProperty(\"maxFileSize\") long maxFileSize,\n            @JsonProperty(\"rotationPeriod\") String rotationPeriod,\n            @JsonProperty(\"minPercentFreeDisk\") int minPercentFreeDisk,\n            @JsonProperty(\"queue4Sink\") MessageQueue4Sink queue4Sink,\n            @JsonProperty(\"batchSize\") int batchSize,\n            @JsonProperty(\"batchTimeout\") int batchTimeout,\n            @JsonProperty(\"pauseOnLongQueue\") boolean pauseOnLongQueue,\n            @JacksonInject SpaceChecker spaceChecker)", "modifiers": "@JsonCreator public", "return": "", "signature": " LocalFileSink(\n            @JsonProperty(\"outputDir\") String outputDir,\n            @JsonProperty(\"writer\") FileWriter writer,\n            @JsonProperty(\"notice\") Notice notice,\n            @JsonProperty(\"maxFileSize\") long maxFileSize,\n            @JsonProperty(\"rotationPeriod\") String rotationPeriod,\n            @JsonProperty(\"minPercentFreeDisk\") int minPercentFreeDisk,\n            @JsonProperty(\"queue4Sink\") MessageQueue4Sink queue4Sink,\n            @JsonProperty(\"batchSize\") int batchSize,\n            @JsonProperty(\"batchTimeout\") int batchTimeout,\n            @JsonProperty(\"pauseOnLongQueue\") boolean pauseOnLongQueue,\n            @JacksonInject SpaceChecker spaceChecker)", "full_signature": "@JsonCreator public  LocalFileSink(\n            @JsonProperty(\"outputDir\") String outputDir,\n            @JsonProperty(\"writer\") FileWriter writer,\n            @JsonProperty(\"notice\") Notice notice,\n            @JsonProperty(\"maxFileSize\") long maxFileSize,\n            @JsonProperty(\"rotationPeriod\") String rotationPeriod,\n            @JsonProperty(\"minPercentFreeDisk\") int minPercentFreeDisk,\n            @JsonProperty(\"queue4Sink\") MessageQueue4Sink queue4Sink,\n            @JsonProperty(\"batchSize\") int batchSize,\n            @JsonProperty(\"batchTimeout\") int batchTimeout,\n            @JsonProperty(\"pauseOnLongQueue\") boolean pauseOnLongQueue,\n            @JacksonInject SpaceChecker spaceChecker)", "class_method_signature": "LocalFileSink.LocalFileSink(\n            @JsonProperty(\"outputDir\") String outputDir,\n            @JsonProperty(\"writer\") FileWriter writer,\n            @JsonProperty(\"notice\") Notice notice,\n            @JsonProperty(\"maxFileSize\") long maxFileSize,\n            @JsonProperty(\"rotationPeriod\") String rotationPeriod,\n            @JsonProperty(\"minPercentFreeDisk\") int minPercentFreeDisk,\n            @JsonProperty(\"queue4Sink\") MessageQueue4Sink queue4Sink,\n            @JsonProperty(\"batchSize\") int batchSize,\n            @JsonProperty(\"batchTimeout\") int batchTimeout,\n            @JsonProperty(\"pauseOnLongQueue\") boolean pauseOnLongQueue,\n            @JacksonInject SpaceChecker spaceChecker)", "testcase": false, "constructor": true}, {"identifier": "getOutputDir", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOutputDir()", "full_signature": "public String getOutputDir()", "class_method_signature": "LocalFileSink.getOutputDir()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "LocalFileSink.open()", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(MessageContainer message)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(MessageContainer message)", "full_signature": "@Override public void writeTo(MessageContainer message)", "class_method_signature": "LocalFileSink.writeTo(MessageContainer message)", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rotate()", "full_signature": "private void rotate()", "class_method_signature": "LocalFileSink.rotate()", "testcase": false, "constructor": false}, {"identifier": "checkPause", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long checkPause()", "full_signature": "@Override public long checkPause()", "class_method_signature": "LocalFileSink.checkPause()", "testcase": false, "constructor": false}, {"identifier": "beforePolling", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void beforePolling()", "full_signature": "@Override protected void beforePolling()", "class_method_signature": "LocalFileSink.beforePolling()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(List<Message> msgList)", "modifiers": "@Override protected", "return": "void", "signature": "void write(List<Message> msgList)", "full_signature": "@Override protected void write(List<Message> msgList)", "class_method_signature": "LocalFileSink.write(List<Message> msgList)", "testcase": false, "constructor": false}, {"identifier": "normalizeRoutingKey", "parameters": "(Message msg)", "modifiers": "private", "return": "String", "signature": "String normalizeRoutingKey(Message msg)", "full_signature": "private String normalizeRoutingKey(Message msg)", "class_method_signature": "LocalFileSink.normalizeRoutingKey(Message msg)", "testcase": false, "constructor": false}, {"identifier": "innerClose", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void innerClose()", "full_signature": "@Override protected void innerClose()", "class_method_signature": "LocalFileSink.innerClose()", "testcase": false, "constructor": false}, {"identifier": "recvNotice", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String recvNotice()", "full_signature": "@Override public String recvNotice()", "class_method_signature": "LocalFileSink.recvNotice()", "testcase": false, "constructor": false}, {"identifier": "renameAndNotify", "parameters": "(String filePath)", "modifiers": "private", "return": "void", "signature": "void renameAndNotify(String filePath)", "full_signature": "private void renameAndNotify(String filePath)", "class_method_signature": "LocalFileSink.renameAndNotify(String filePath)", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "(boolean fetchAll)", "modifiers": "public", "return": "int", "signature": "int cleanUp(boolean fetchAll)", "full_signature": "public int cleanUp(boolean fetchAll)", "class_method_signature": "LocalFileSink.cleanUp(boolean fetchAll)", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "(String dir, boolean fetchAll)", "modifiers": "public", "return": "int", "signature": "int cleanUp(String dir, boolean fetchAll)", "full_signature": "public int cleanUp(String dir, boolean fetchAll)", "class_method_signature": "LocalFileSink.cleanUp(String dir, boolean fetchAll)", "testcase": false, "constructor": false}, {"identifier": "getFileExt", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String getFileExt(String fileName)", "full_signature": "public static String getFileExt(String fileName)", "class_method_signature": "LocalFileSink.getFileExt(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getStat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getStat()", "full_signature": "@Override public String getStat()", "class_method_signature": "LocalFileSink.getStat()", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(String filePath)", "modifiers": "public", "return": "void", "signature": "void deleteFile(String filePath)", "full_signature": "public void deleteFile(String filePath)", "class_method_signature": "LocalFileSink.deleteFile(String filePath)", "testcase": false, "constructor": false}], "file": "suro-localfile/src/main/java/com/netflix/suro/sink/localfile/LocalFileSink.java"}, "focal_method": {"identifier": "getFileExt", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "body": "public static String getFileExt(String fileName) {\n        int dotPos = fileName.lastIndexOf('.');\n        if (dotPos != -1 && dotPos != fileName.length() - 1) {\n            return fileName.substring(dotPos);\n        } else {\n            return null;\n        }\n    }", "signature": "String getFileExt(String fileName)", "full_signature": "public static String getFileExt(String fileName)", "class_method_signature": "LocalFileSink.getFileExt(String fileName)", "testcase": false, "constructor": false, "invocations": ["lastIndexOf", "length", "substring"]}, "repository": {"repo_id": 8914350, "url": "https://github.com/Netflix/suro", "language": "Java", "is_fork": false, "fork_count": 172, "stargazer_count": 746, "size": 4383, "license": "licensed"}}